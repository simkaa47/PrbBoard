
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001daa0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c1c  0801dc30  0801dc30  0002dc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802184c  0802184c  00040344  2**0
                  CONTENTS
  4 .ARM          00000008  0802184c  0802184c  0003184c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021854  08021854  00040344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021854  08021854  00031854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021858  08021858  00031858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0802185c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040344  2**0
                  CONTENTS
 10 .bss          0000dbb4  20000344  20000344  00040344  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000def8  2000def8  00040344  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040344  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003c7e0  00000000  00000000  00040374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009a3f  00000000  00000000  0007cb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002978  00000000  00000000  00086598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002728  00000000  00000000  00088f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00037cae  00000000  00000000  0008b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00044ae0  00000000  00000000  000c32e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102ece  00000000  00000000  00107dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0020ac94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b154  00000000  00000000  0020ace4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000344 	.word	0x20000344
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801dc18 	.word	0x0801dc18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000348 	.word	0x20000348
 80001cc:	0801dc18 	.word	0x0801dc18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Analog_Start>:
extern Meas_Data meas_data;

static void Calc_Pt100();

void Analog_Start(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&pt100_input_buffer, sizeof(pt100_input_buffer)/2);
 8000588:	2206      	movs	r2, #6
 800058a:	4904      	ldr	r1, [pc, #16]	; (800059c <Analog_Start+0x18>)
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <Analog_Start+0x1c>)
 800058e:	f004 ff9f 	bl	80054d0 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <Analog_Start+0x20>)
 8000594:	f009 f816 	bl	80095c4 <HAL_TIM_Base_Start>

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000360 	.word	0x20000360
 80005a0:	200008a0 	.word	0x200008a0
 80005a4:	200009a0 	.word	0x200009a0

080005a8 <Analog_Read>:

void Analog_Read(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	Calc_Pt100();
 80005ac:	f000 f802 	bl	80005b4 <Calc_Pt100>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <Calc_Pt100>:

static void Calc_Pt100()
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
	float sum = 0;
 80005ba:	f04f 0300 	mov.w	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
	if(pt100_data_ready)
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <Calc_Pt100+0x64>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d020      	beq.n	800060a <Calc_Pt100+0x56>
	{
		for (int i = 0; i < PT100_INPUT_BUFFER_SIZE; ++i) {
 80005c8:	2300      	movs	r3, #0
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	e00e      	b.n	80005ec <Calc_Pt100+0x38>
			sum+=pt100_buf[i];
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <Calc_Pt100+0x68>)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	edd3 7a00 	vldr	s15, [r3]
 80005da:	ed97 7a01 	vldr	s14, [r7, #4]
 80005de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005e2:	edc7 7a01 	vstr	s15, [r7, #4]
		for (int i = 0; i < PT100_INPUT_BUFFER_SIZE; ++i) {
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2b27      	cmp	r3, #39	; 0x27
 80005f0:	dded      	ble.n	80005ce <Calc_Pt100+0x1a>
		}
		meas_data.pt100 = sum/PT100_INPUT_BUFFER_SIZE;
 80005f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80005f6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000620 <Calc_Pt100+0x6c>
 80005fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <Calc_Pt100+0x70>)
 8000600:	edc3 7a02 	vstr	s15, [r3, #8]
		pt100_data_ready = 0;
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <Calc_Pt100+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
	}
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	2000040c 	.word	0x2000040c
 800061c:	2000036c 	.word	0x2000036c
 8000620:	42200000 	.word	0x42200000
 8000624:	20000c5c 	.word	0x20000c5c

08000628 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000628:	b480      	push	{r7}
 800062a:	b08b      	sub	sp, #44	; 0x2c
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	float pt100_0, pt100_1, pt100_3, vRef;
	vRef = pt100_input_buffer.V_ref;
 8000630:	4b45      	ldr	r3, [pc, #276]	; (8000748 <HAL_ADC_ConvCpltCallback+0x120>)
 8000632:	895b      	ldrh	r3, [r3, #10]
 8000634:	ee07 3a90 	vmov	s15, r3
 8000638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800063c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	vRef = 3.3f*(float)V_REF_VALUE/vRef;
 8000640:	4b42      	ldr	r3, [pc, #264]	; (800074c <HAL_ADC_ConvCpltCallback+0x124>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	ee07 3a90 	vmov	s15, r3
 8000648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800064c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000750 <HAL_ADC_ConvCpltCallback+0x128>
 8000650:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000654:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800065c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pt100_0 = pt100_input_buffer.Pt100_0 * 3.3f/vRef;
 8000660:	4b39      	ldr	r3, [pc, #228]	; (8000748 <HAL_ADC_ConvCpltCallback+0x120>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	ee07 3a90 	vmov	s15, r3
 8000668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800066c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000750 <HAL_ADC_ConvCpltCallback+0x128>
 8000670:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000674:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800067c:	edc7 7a08 	vstr	s15, [r7, #32]
	pt100_1 = pt100_input_buffer.Pt100_1 * 3.3f/vRef;
 8000680:	4b31      	ldr	r3, [pc, #196]	; (8000748 <HAL_ADC_ConvCpltCallback+0x120>)
 8000682:	885b      	ldrh	r3, [r3, #2]
 8000684:	ee07 3a90 	vmov	s15, r3
 8000688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800068c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000750 <HAL_ADC_ConvCpltCallback+0x128>
 8000690:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000694:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800069c:	edc7 7a07 	vstr	s15, [r7, #28]
	pt100_3 = pt100_input_buffer.Pt100_3 * 3.3f/vRef;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <HAL_ADC_ConvCpltCallback+0x120>)
 80006a2:	88db      	ldrh	r3, [r3, #6]
 80006a4:	ee07 3a90 	vmov	s15, r3
 80006a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ac:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000750 <HAL_ADC_ConvCpltCallback+0x128>
 80006b0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80006b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80006b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006bc:	edc7 7a06 	vstr	s15, [r7, #24]
	float vpt100 = pt100_3 - pt100_1;
 80006c0:	ed97 7a06 	vldr	s14, [r7, #24]
 80006c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80006c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006cc:	edc7 7a05 	vstr	s15, [r7, #20]
	float ref = pt100_1-pt100_0;
 80006d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80006d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80006d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006dc:	edc7 7a04 	vstr	s15, [r7, #16]
	float v_result = vpt100*100/ref;
 80006e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80006e4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000754 <HAL_ADC_ConvCpltCallback+0x12c>
 80006e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80006ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80006f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006f4:	edc7 7a03 	vstr	s15, [r7, #12]
	pt100_buf[j] = (v_result - 100)*2.5974f;
 80006f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80006fc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000754 <HAL_ADC_ConvCpltCallback+0x12c>
 8000700:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <HAL_ADC_ConvCpltCallback+0x130>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800075c <HAL_ADC_ConvCpltCallback+0x134>
 800070c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000710:	4a13      	ldr	r2, [pc, #76]	; (8000760 <HAL_ADC_ConvCpltCallback+0x138>)
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	edc3 7a00 	vstr	s15, [r3]
	j++;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <HAL_ADC_ConvCpltCallback+0x130>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <HAL_ADC_ConvCpltCallback+0x130>)
 8000724:	701a      	strb	r2, [r3, #0]
	if(j>=PT100_INPUT_BUFFER_SIZE)j=0;
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <HAL_ADC_ConvCpltCallback+0x130>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b27      	cmp	r3, #39	; 0x27
 800072c:	d902      	bls.n	8000734 <HAL_ADC_ConvCpltCallback+0x10c>
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_ADC_ConvCpltCallback+0x130>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
	pt100_data_ready = 1;
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	372c      	adds	r7, #44	; 0x2c
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000360 	.word	0x20000360
 800074c:	1fff7a2a 	.word	0x1fff7a2a
 8000750:	40533333 	.word	0x40533333
 8000754:	42c80000 	.word	0x42c80000
 8000758:	2000040d 	.word	0x2000040d
 800075c:	40263bcd 	.word	0x40263bcd
 8000760:	2000036c 	.word	0x2000036c
 8000764:	2000040c 	.word	0x2000040c

08000768 <set_bit>:
 */

#include <control_bit.h>

uint16_t set_bit(uint16_t value, uint8_t num)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	460a      	mov	r2, r1
 8000772:	80fb      	strh	r3, [r7, #6]
 8000774:	4613      	mov	r3, r2
 8000776:	717b      	strb	r3, [r7, #5]
     return value | (1 << num);
 8000778:	797b      	ldrb	r3, [r7, #5]
 800077a:	2201      	movs	r2, #1
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	b21a      	sxth	r2, r3
 8000782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000786:	4313      	orrs	r3, r2
 8000788:	b21b      	sxth	r3, r3
 800078a:	b29b      	uxth	r3, r3
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <Read_Inputs>:




void Read_Inputs()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	Filter_Inputs();
 800079c:	f000 fb16 	bl	8000dcc <Filter_Inputs>
	meas_data.d_inputs.in0 	= settings.retain.input_emulation_switches.in0  ? settings.retain.input_emulation_values.in0 :  filters_inputs[0];
 80007a0:	4b84      	ldr	r3, [pc, #528]	; (80009b4 <Read_Inputs+0x21c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d005      	beq.n	80007ba <Read_Inputs+0x22>
 80007ae:	4b81      	ldr	r3, [pc, #516]	; (80009b4 <Read_Inputs+0x21c>)
 80007b0:	789b      	ldrb	r3, [r3, #2]
 80007b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	e004      	b.n	80007c4 <Read_Inputs+0x2c>
 80007ba:	4b7f      	ldr	r3, [pc, #508]	; (80009b8 <Read_Inputs+0x220>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	497d      	ldr	r1, [pc, #500]	; (80009bc <Read_Inputs+0x224>)
 80007c6:	780b      	ldrb	r3, [r1, #0]
 80007c8:	f362 0300 	bfi	r3, r2, #0, #1
 80007cc:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in1 	= settings.retain.input_emulation_switches.in1  ? settings.retain.input_emulation_values.in1 :  filters_inputs[1];
 80007ce:	4b79      	ldr	r3, [pc, #484]	; (80009b4 <Read_Inputs+0x21c>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d005      	beq.n	80007e8 <Read_Inputs+0x50>
 80007dc:	4b75      	ldr	r3, [pc, #468]	; (80009b4 <Read_Inputs+0x21c>)
 80007de:	789b      	ldrb	r3, [r3, #2]
 80007e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	e004      	b.n	80007f2 <Read_Inputs+0x5a>
 80007e8:	4b73      	ldr	r3, [pc, #460]	; (80009b8 <Read_Inputs+0x220>)
 80007ea:	785b      	ldrb	r3, [r3, #1]
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4972      	ldr	r1, [pc, #456]	; (80009bc <Read_Inputs+0x224>)
 80007f4:	780b      	ldrb	r3, [r1, #0]
 80007f6:	f362 0341 	bfi	r3, r2, #1, #1
 80007fa:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in2 	= settings.retain.input_emulation_switches.in2  ? settings.retain.input_emulation_values.in2 :  filters_inputs[2];
 80007fc:	4b6d      	ldr	r3, [pc, #436]	; (80009b4 <Read_Inputs+0x21c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d005      	beq.n	8000816 <Read_Inputs+0x7e>
 800080a:	4b6a      	ldr	r3, [pc, #424]	; (80009b4 <Read_Inputs+0x21c>)
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	e004      	b.n	8000820 <Read_Inputs+0x88>
 8000816:	4b68      	ldr	r3, [pc, #416]	; (80009b8 <Read_Inputs+0x220>)
 8000818:	789b      	ldrb	r3, [r3, #2]
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4966      	ldr	r1, [pc, #408]	; (80009bc <Read_Inputs+0x224>)
 8000822:	780b      	ldrb	r3, [r1, #0]
 8000824:	f362 0382 	bfi	r3, r2, #2, #1
 8000828:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in3 	= settings.retain.input_emulation_switches.in3  ? settings.retain.input_emulation_values.in3 :  filters_inputs[3];
 800082a:	4b62      	ldr	r3, [pc, #392]	; (80009b4 <Read_Inputs+0x21c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d005      	beq.n	8000844 <Read_Inputs+0xac>
 8000838:	4b5e      	ldr	r3, [pc, #376]	; (80009b4 <Read_Inputs+0x21c>)
 800083a:	789b      	ldrb	r3, [r3, #2]
 800083c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000840:	b2da      	uxtb	r2, r3
 8000842:	e004      	b.n	800084e <Read_Inputs+0xb6>
 8000844:	4b5c      	ldr	r3, [pc, #368]	; (80009b8 <Read_Inputs+0x220>)
 8000846:	78db      	ldrb	r3, [r3, #3]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	b2da      	uxtb	r2, r3
 800084e:	495b      	ldr	r1, [pc, #364]	; (80009bc <Read_Inputs+0x224>)
 8000850:	780b      	ldrb	r3, [r1, #0]
 8000852:	f362 03c3 	bfi	r3, r2, #3, #1
 8000856:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in4 	= settings.retain.input_emulation_switches.in4  ? settings.retain.input_emulation_values.in4 :  filters_inputs[4];
 8000858:	4b56      	ldr	r3, [pc, #344]	; (80009b4 <Read_Inputs+0x21c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	f003 0310 	and.w	r3, r3, #16
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d005      	beq.n	8000872 <Read_Inputs+0xda>
 8000866:	4b53      	ldr	r3, [pc, #332]	; (80009b4 <Read_Inputs+0x21c>)
 8000868:	789b      	ldrb	r3, [r3, #2]
 800086a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800086e:	b2da      	uxtb	r2, r3
 8000870:	e004      	b.n	800087c <Read_Inputs+0xe4>
 8000872:	4b51      	ldr	r3, [pc, #324]	; (80009b8 <Read_Inputs+0x220>)
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	b2da      	uxtb	r2, r3
 800087c:	494f      	ldr	r1, [pc, #316]	; (80009bc <Read_Inputs+0x224>)
 800087e:	780b      	ldrb	r3, [r1, #0]
 8000880:	f362 1304 	bfi	r3, r2, #4, #1
 8000884:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in5 	= settings.retain.input_emulation_switches.in5  ? settings.retain.input_emulation_values.in5 :  filters_inputs[5];
 8000886:	4b4b      	ldr	r3, [pc, #300]	; (80009b4 <Read_Inputs+0x21c>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	f003 0320 	and.w	r3, r3, #32
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d005      	beq.n	80008a0 <Read_Inputs+0x108>
 8000894:	4b47      	ldr	r3, [pc, #284]	; (80009b4 <Read_Inputs+0x21c>)
 8000896:	789b      	ldrb	r3, [r3, #2]
 8000898:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800089c:	b2da      	uxtb	r2, r3
 800089e:	e004      	b.n	80008aa <Read_Inputs+0x112>
 80008a0:	4b45      	ldr	r3, [pc, #276]	; (80009b8 <Read_Inputs+0x220>)
 80008a2:	795b      	ldrb	r3, [r3, #5]
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4944      	ldr	r1, [pc, #272]	; (80009bc <Read_Inputs+0x224>)
 80008ac:	780b      	ldrb	r3, [r1, #0]
 80008ae:	f362 1345 	bfi	r3, r2, #5, #1
 80008b2:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in6 	= settings.retain.input_emulation_switches.in6  ? settings.retain.input_emulation_values.in6 :  filters_inputs[6];
 80008b4:	4b3f      	ldr	r3, [pc, #252]	; (80009b4 <Read_Inputs+0x21c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d005      	beq.n	80008ce <Read_Inputs+0x136>
 80008c2:	4b3c      	ldr	r3, [pc, #240]	; (80009b4 <Read_Inputs+0x21c>)
 80008c4:	789b      	ldrb	r3, [r3, #2]
 80008c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	e004      	b.n	80008d8 <Read_Inputs+0x140>
 80008ce:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <Read_Inputs+0x220>)
 80008d0:	799b      	ldrb	r3, [r3, #6]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4938      	ldr	r1, [pc, #224]	; (80009bc <Read_Inputs+0x224>)
 80008da:	780b      	ldrb	r3, [r1, #0]
 80008dc:	f362 1386 	bfi	r3, r2, #6, #1
 80008e0:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in7 	= settings.retain.input_emulation_switches.in7  ? settings.retain.input_emulation_values.in7 :  filters_inputs[7];
 80008e2:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <Read_Inputs+0x21c>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d005      	beq.n	80008fc <Read_Inputs+0x164>
 80008f0:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <Read_Inputs+0x21c>)
 80008f2:	789b      	ldrb	r3, [r3, #2]
 80008f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	e004      	b.n	8000906 <Read_Inputs+0x16e>
 80008fc:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <Read_Inputs+0x220>)
 80008fe:	79db      	ldrb	r3, [r3, #7]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	b2da      	uxtb	r2, r3
 8000906:	492d      	ldr	r1, [pc, #180]	; (80009bc <Read_Inputs+0x224>)
 8000908:	780b      	ldrb	r3, [r1, #0]
 800090a:	f362 13c7 	bfi	r3, r2, #7, #1
 800090e:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in8 	= settings.retain.input_emulation_switches.in8  ? settings.retain.input_emulation_values.in8 :  filters_inputs[8];
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <Read_Inputs+0x21c>)
 8000912:	785b      	ldrb	r3, [r3, #1]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d005      	beq.n	800092a <Read_Inputs+0x192>
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <Read_Inputs+0x21c>)
 8000920:	78db      	ldrb	r3, [r3, #3]
 8000922:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	e004      	b.n	8000934 <Read_Inputs+0x19c>
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <Read_Inputs+0x220>)
 800092c:	7a1b      	ldrb	r3, [r3, #8]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4921      	ldr	r1, [pc, #132]	; (80009bc <Read_Inputs+0x224>)
 8000936:	784b      	ldrb	r3, [r1, #1]
 8000938:	f362 0300 	bfi	r3, r2, #0, #1
 800093c:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in9 	= settings.retain.input_emulation_switches.in9  ? settings.retain.input_emulation_values.in9 :  filters_inputs[9];
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <Read_Inputs+0x21c>)
 8000940:	785b      	ldrb	r3, [r3, #1]
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d005      	beq.n	8000958 <Read_Inputs+0x1c0>
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <Read_Inputs+0x21c>)
 800094e:	78db      	ldrb	r3, [r3, #3]
 8000950:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000954:	b2da      	uxtb	r2, r3
 8000956:	e004      	b.n	8000962 <Read_Inputs+0x1ca>
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <Read_Inputs+0x220>)
 800095a:	7a5b      	ldrb	r3, [r3, #9]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4916      	ldr	r1, [pc, #88]	; (80009bc <Read_Inputs+0x224>)
 8000964:	784b      	ldrb	r3, [r1, #1]
 8000966:	f362 0341 	bfi	r3, r2, #1, #1
 800096a:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in10 = settings.retain.input_emulation_switches.in10 ? settings.retain.input_emulation_values.in10 : filters_inputs[10];
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <Read_Inputs+0x21c>)
 800096e:	785b      	ldrb	r3, [r3, #1]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d005      	beq.n	8000986 <Read_Inputs+0x1ee>
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <Read_Inputs+0x21c>)
 800097c:	78db      	ldrb	r3, [r3, #3]
 800097e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000982:	b2da      	uxtb	r2, r3
 8000984:	e004      	b.n	8000990 <Read_Inputs+0x1f8>
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <Read_Inputs+0x220>)
 8000988:	7a9b      	ldrb	r3, [r3, #10]
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	490a      	ldr	r1, [pc, #40]	; (80009bc <Read_Inputs+0x224>)
 8000992:	784b      	ldrb	r3, [r1, #1]
 8000994:	f362 0382 	bfi	r3, r2, #2, #1
 8000998:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in11 = settings.retain.input_emulation_switches.in11 ? settings.retain.input_emulation_values.in11 : filters_inputs[11];
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <Read_Inputs+0x21c>)
 800099c:	785b      	ldrb	r3, [r3, #1]
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d00b      	beq.n	80009c0 <Read_Inputs+0x228>
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <Read_Inputs+0x21c>)
 80009aa:	78db      	ldrb	r3, [r3, #3]
 80009ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	e00a      	b.n	80009ca <Read_Inputs+0x232>
 80009b4:	20000bc0 	.word	0x20000bc0
 80009b8:	2000041c 	.word	0x2000041c
 80009bc:	20000c5c 	.word	0x20000c5c
 80009c0:	4b3c      	ldr	r3, [pc, #240]	; (8000ab4 <Read_Inputs+0x31c>)
 80009c2:	7adb      	ldrb	r3, [r3, #11]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	493b      	ldr	r1, [pc, #236]	; (8000ab8 <Read_Inputs+0x320>)
 80009cc:	784b      	ldrb	r3, [r1, #1]
 80009ce:	f362 03c3 	bfi	r3, r2, #3, #1
 80009d2:	704b      	strb	r3, [r1, #1]

	d_inputs.uz_prob_fail 				= meas_data.d_inputs.in0;
 80009d4:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <Read_Inputs+0x320>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80009dc:	b2d9      	uxtb	r1, r3
 80009de:	4a37      	ldr	r2, [pc, #220]	; (8000abc <Read_Inputs+0x324>)
 80009e0:	7813      	ldrb	r3, [r2, #0]
 80009e2:	f361 0300 	bfi	r3, r1, #0, #1
 80009e6:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_right_1 		= meas_data.d_inputs.in1;
 80009e8:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <Read_Inputs+0x320>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80009f0:	b2d9      	uxtb	r1, r3
 80009f2:	4a32      	ldr	r2, [pc, #200]	; (8000abc <Read_Inputs+0x324>)
 80009f4:	7813      	ldrb	r3, [r2, #0]
 80009f6:	f361 0341 	bfi	r3, r1, #1, #1
 80009fa:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_right_2		= meas_data.d_inputs.in2;
 80009fc:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <Read_Inputs+0x320>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a04:	b2d9      	uxtb	r1, r3
 8000a06:	4a2d      	ldr	r2, [pc, #180]	; (8000abc <Read_Inputs+0x324>)
 8000a08:	7813      	ldrb	r3, [r2, #0]
 8000a0a:	f361 0382 	bfi	r3, r1, #2, #1
 8000a0e:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_left_1 		= meas_data.d_inputs.in3;
 8000a10:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <Read_Inputs+0x320>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a18:	b2d9      	uxtb	r1, r3
 8000a1a:	4a28      	ldr	r2, [pc, #160]	; (8000abc <Read_Inputs+0x324>)
 8000a1c:	7813      	ldrb	r3, [r2, #0]
 8000a1e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a22:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_left_2		= meas_data.d_inputs.in4;
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <Read_Inputs+0x320>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a2c:	b2d9      	uxtb	r1, r3
 8000a2e:	4a23      	ldr	r2, [pc, #140]	; (8000abc <Read_Inputs+0x324>)
 8000a30:	7813      	ldrb	r3, [r2, #0]
 8000a32:	f361 1304 	bfi	r3, r1, #4, #1
 8000a36:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_stop					= meas_data.d_inputs.in5;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <Read_Inputs+0x320>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000a40:	b2d9      	uxtb	r1, r3
 8000a42:	4a1e      	ldr	r2, [pc, #120]	; (8000abc <Read_Inputs+0x324>)
 8000a44:	7813      	ldrb	r3, [r2, #0]
 8000a46:	f361 1345 	bfi	r3, r1, #5, #1
 8000a4a:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_make_proba				= meas_data.d_inputs.in6;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <Read_Inputs+0x320>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000a54:	b2d9      	uxtb	r1, r3
 8000a56:	4a19      	ldr	r2, [pc, #100]	; (8000abc <Read_Inputs+0x324>)
 8000a58:	7813      	ldrb	r3, [r2, #0]
 8000a5a:	f361 1386 	bfi	r3, r1, #6, #1
 8000a5e:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_vozvrat					= meas_data.d_inputs.in7;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <Read_Inputs+0x320>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000a68:	b2d9      	uxtb	r1, r3
 8000a6a:	4a14      	ldr	r2, [pc, #80]	; (8000abc <Read_Inputs+0x324>)
 8000a6c:	7813      	ldrb	r3, [r2, #0]
 8000a6e:	f361 13c7 	bfi	r3, r1, #7, #1
 8000a72:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_auto_local				= meas_data.d_inputs.in8;
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <Read_Inputs+0x320>)
 8000a76:	785b      	ldrb	r3, [r3, #1]
 8000a78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a7c:	b2d9      	uxtb	r1, r3
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <Read_Inputs+0x324>)
 8000a80:	7853      	ldrb	r3, [r2, #1]
 8000a82:	f361 0300 	bfi	r3, r1, #0, #1
 8000a86:	7053      	strb	r3, [r2, #1]
	d_inputs.sq_kanistra				= meas_data.d_inputs.in9;
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <Read_Inputs+0x320>)
 8000a8a:	785b      	ldrb	r3, [r3, #1]
 8000a8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a90:	b2d9      	uxtb	r1, r3
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <Read_Inputs+0x324>)
 8000a94:	7853      	ldrb	r3, [r2, #1]
 8000a96:	f361 0341 	bfi	r3, r1, #1, #1
 8000a9a:	7053      	strb	r3, [r2, #1]
	d_inputs.sq_kanistra_door			= meas_data.d_inputs.in10;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <Read_Inputs+0x320>)
 8000a9e:	785b      	ldrb	r3, [r3, #1]
 8000aa0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000aa4:	b2d9      	uxtb	r1, r3
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <Read_Inputs+0x324>)
 8000aa8:	7853      	ldrb	r3, [r2, #1]
 8000aaa:	f361 0382 	bfi	r3, r1, #2, #1
 8000aae:	7053      	strb	r3, [r2, #1]




}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000041c 	.word	0x2000041c
 8000ab8:	20000c5c 	.word	0x20000c5c
 8000abc:	20000428 	.word	0x20000428

08000ac0 <Write_Outputs>:

void Write_Outputs()
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	meas_data.d_outputs.out0  = settings.retain.output_emulation_switches.out0  ? settings.retain.output_emulation_values.out0  :  d_outputs.uz_prob_forv;
 8000ac4:	4b74      	ldr	r3, [pc, #464]	; (8000c98 <Write_Outputs+0x1d8>)
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d005      	beq.n	8000ade <Write_Outputs+0x1e>
 8000ad2:	4b71      	ldr	r3, [pc, #452]	; (8000c98 <Write_Outputs+0x1d8>)
 8000ad4:	799b      	ldrb	r3, [r3, #6]
 8000ad6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	e004      	b.n	8000ae8 <Write_Outputs+0x28>
 8000ade:	4b6f      	ldr	r3, [pc, #444]	; (8000c9c <Write_Outputs+0x1dc>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	496d      	ldr	r1, [pc, #436]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000aea:	788b      	ldrb	r3, [r1, #2]
 8000aec:	f362 0300 	bfi	r3, r2, #0, #1
 8000af0:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out1  = settings.retain.output_emulation_switches.out1  ? settings.retain.output_emulation_values.out1  :  d_outputs.uz_prob_rev;
 8000af2:	4b69      	ldr	r3, [pc, #420]	; (8000c98 <Write_Outputs+0x1d8>)
 8000af4:	791b      	ldrb	r3, [r3, #4]
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d005      	beq.n	8000b0c <Write_Outputs+0x4c>
 8000b00:	4b65      	ldr	r3, [pc, #404]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b02:	799b      	ldrb	r3, [r3, #6]
 8000b04:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	e004      	b.n	8000b16 <Write_Outputs+0x56>
 8000b0c:	4b63      	ldr	r3, [pc, #396]	; (8000c9c <Write_Outputs+0x1dc>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4962      	ldr	r1, [pc, #392]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000b18:	788b      	ldrb	r3, [r1, #2]
 8000b1a:	f362 0341 	bfi	r3, r2, #1, #1
 8000b1e:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out2  = settings.retain.output_emulation_switches.out2  ? settings.retain.output_emulation_values.out2  :  d_outputs.prob_ready;
 8000b20:	4b5d      	ldr	r3, [pc, #372]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b22:	791b      	ldrb	r3, [r3, #4]
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d005      	beq.n	8000b3a <Write_Outputs+0x7a>
 8000b2e:	4b5a      	ldr	r3, [pc, #360]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b30:	799b      	ldrb	r3, [r3, #6]
 8000b32:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	e004      	b.n	8000b44 <Write_Outputs+0x84>
 8000b3a:	4b58      	ldr	r3, [pc, #352]	; (8000c9c <Write_Outputs+0x1dc>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4956      	ldr	r1, [pc, #344]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000b46:	788b      	ldrb	r3, [r1, #2]
 8000b48:	f362 0382 	bfi	r3, r2, #2, #1
 8000b4c:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out3  = settings.retain.output_emulation_switches.out3  ? settings.retain.output_emulation_values.out3  :  0;
 8000b4e:	4b52      	ldr	r3, [pc, #328]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	f003 0308 	and.w	r3, r3, #8
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d005      	beq.n	8000b68 <Write_Outputs+0xa8>
 8000b5c:	4b4e      	ldr	r3, [pc, #312]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b5e:	799b      	ldrb	r3, [r3, #6]
 8000b60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000b64:	b2d9      	uxtb	r1, r3
 8000b66:	e000      	b.n	8000b6a <Write_Outputs+0xaa>
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4a4d      	ldr	r2, [pc, #308]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000b6c:	7893      	ldrb	r3, [r2, #2]
 8000b6e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000b72:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out4  = settings.retain.output_emulation_switches.out4  ? settings.retain.output_emulation_values.out4  :  0;
 8000b74:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b76:	791b      	ldrb	r3, [r3, #4]
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d005      	beq.n	8000b8e <Write_Outputs+0xce>
 8000b82:	4b45      	ldr	r3, [pc, #276]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b84:	799b      	ldrb	r3, [r3, #6]
 8000b86:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000b8a:	b2d9      	uxtb	r1, r3
 8000b8c:	e000      	b.n	8000b90 <Write_Outputs+0xd0>
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4a43      	ldr	r2, [pc, #268]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000b92:	7893      	ldrb	r3, [r2, #2]
 8000b94:	f361 1304 	bfi	r3, r1, #4, #1
 8000b98:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out5  = settings.retain.output_emulation_switches.out5  ? settings.retain.output_emulation_values.out5  :  0;
 8000b9a:	4b3f      	ldr	r3, [pc, #252]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b9c:	791b      	ldrb	r3, [r3, #4]
 8000b9e:	f003 0320 	and.w	r3, r3, #32
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d005      	beq.n	8000bb4 <Write_Outputs+0xf4>
 8000ba8:	4b3b      	ldr	r3, [pc, #236]	; (8000c98 <Write_Outputs+0x1d8>)
 8000baa:	799b      	ldrb	r3, [r3, #6]
 8000bac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000bb0:	b2d9      	uxtb	r1, r3
 8000bb2:	e000      	b.n	8000bb6 <Write_Outputs+0xf6>
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4a3a      	ldr	r2, [pc, #232]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000bb8:	7893      	ldrb	r3, [r2, #2]
 8000bba:	f361 1345 	bfi	r3, r1, #5, #1
 8000bbe:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out6  = settings.retain.output_emulation_switches.out6  ? settings.retain.output_emulation_values.out6  :  0;
 8000bc0:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <Write_Outputs+0x1d8>)
 8000bc2:	791b      	ldrb	r3, [r3, #4]
 8000bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d005      	beq.n	8000bda <Write_Outputs+0x11a>
 8000bce:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <Write_Outputs+0x1d8>)
 8000bd0:	799b      	ldrb	r3, [r3, #6]
 8000bd2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000bd6:	b2d9      	uxtb	r1, r3
 8000bd8:	e000      	b.n	8000bdc <Write_Outputs+0x11c>
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4a30      	ldr	r2, [pc, #192]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000bde:	7893      	ldrb	r3, [r2, #2]
 8000be0:	f361 1386 	bfi	r3, r1, #6, #1
 8000be4:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out7  = settings.retain.output_emulation_switches.out7  ? settings.retain.output_emulation_values.out7  :  0;
 8000be6:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <Write_Outputs+0x1d8>)
 8000be8:	791b      	ldrb	r3, [r3, #4]
 8000bea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d005      	beq.n	8000c00 <Write_Outputs+0x140>
 8000bf4:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <Write_Outputs+0x1d8>)
 8000bf6:	799b      	ldrb	r3, [r3, #6]
 8000bf8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000bfc:	b2d9      	uxtb	r1, r3
 8000bfe:	e000      	b.n	8000c02 <Write_Outputs+0x142>
 8000c00:	2100      	movs	r1, #0
 8000c02:	4a27      	ldr	r2, [pc, #156]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000c04:	7893      	ldrb	r3, [r2, #2]
 8000c06:	f361 13c7 	bfi	r3, r1, #7, #1
 8000c0a:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out8  = settings.retain.output_emulation_switches.out8  ? settings.retain.output_emulation_values.out8  :  0;
 8000c0c:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c0e:	795b      	ldrb	r3, [r3, #5]
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d005      	beq.n	8000c26 <Write_Outputs+0x166>
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c1c:	79db      	ldrb	r3, [r3, #7]
 8000c1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c22:	b2d9      	uxtb	r1, r3
 8000c24:	e000      	b.n	8000c28 <Write_Outputs+0x168>
 8000c26:	2100      	movs	r1, #0
 8000c28:	4a1d      	ldr	r2, [pc, #116]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000c2a:	78d3      	ldrb	r3, [r2, #3]
 8000c2c:	f361 0300 	bfi	r3, r1, #0, #1
 8000c30:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out9  = settings.retain.output_emulation_switches.out9  ? settings.retain.output_emulation_values.out9  :  0;
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c34:	795b      	ldrb	r3, [r3, #5]
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d005      	beq.n	8000c4c <Write_Outputs+0x18c>
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c42:	79db      	ldrb	r3, [r3, #7]
 8000c44:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000c48:	b2d9      	uxtb	r1, r3
 8000c4a:	e000      	b.n	8000c4e <Write_Outputs+0x18e>
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000c50:	78d3      	ldrb	r3, [r2, #3]
 8000c52:	f361 0341 	bfi	r3, r1, #1, #1
 8000c56:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out10 = settings.retain.output_emulation_switches.out10 ? settings.retain.output_emulation_values.out10 :  0;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c5a:	795b      	ldrb	r3, [r3, #5]
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d005      	beq.n	8000c72 <Write_Outputs+0x1b2>
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c68:	79db      	ldrb	r3, [r3, #7]
 8000c6a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000c6e:	b2d9      	uxtb	r1, r3
 8000c70:	e000      	b.n	8000c74 <Write_Outputs+0x1b4>
 8000c72:	2100      	movs	r1, #0
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000c76:	78d3      	ldrb	r3, [r2, #3]
 8000c78:	f361 0382 	bfi	r3, r1, #2, #1
 8000c7c:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out11 = settings.retain.output_emulation_switches.out11 ? settings.retain.output_emulation_values.out11 :  0;
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c80:	795b      	ldrb	r3, [r3, #5]
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00b      	beq.n	8000ca4 <Write_Outputs+0x1e4>
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c8e:	79db      	ldrb	r3, [r3, #7]
 8000c90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000c94:	b2d9      	uxtb	r1, r3
 8000c96:	e006      	b.n	8000ca6 <Write_Outputs+0x1e6>
 8000c98:	20000bc0 	.word	0x20000bc0
 8000c9c:	2000042c 	.word	0x2000042c
 8000ca0:	20000c5c 	.word	0x20000c5c
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4a45      	ldr	r2, [pc, #276]	; (8000dbc <Write_Outputs+0x2fc>)
 8000ca8:	78d3      	ldrb	r3, [r2, #3]
 8000caa:	f361 03c3 	bfi	r3, r1, #3, #1
 8000cae:	70d3      	strb	r3, [r2, #3]
	HAL_GPIO_WritePin(DOUT_0_GPIO_Port, DOUT_0_Pin, meas_data.d_outputs.out0);
 8000cb0:	4b42      	ldr	r3, [pc, #264]	; (8000dbc <Write_Outputs+0x2fc>)
 8000cb2:	789b      	ldrb	r3, [r3, #2]
 8000cb4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	461a      	mov	r2, r3
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	4840      	ldr	r0, [pc, #256]	; (8000dc0 <Write_Outputs+0x300>)
 8000cc0:	f007 f97c 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_1_GPIO_Port, DOUT_1_Pin, meas_data.d_outputs.out1);
 8000cc4:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <Write_Outputs+0x2fc>)
 8000cc6:	789b      	ldrb	r3, [r3, #2]
 8000cc8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd4:	483a      	ldr	r0, [pc, #232]	; (8000dc0 <Write_Outputs+0x300>)
 8000cd6:	f007 f971 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_2_GPIO_Port, DOUT_2_Pin, meas_data.d_outputs.out2);
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <Write_Outputs+0x2fc>)
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cea:	4835      	ldr	r0, [pc, #212]	; (8000dc0 <Write_Outputs+0x300>)
 8000cec:	f007 f966 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_3_GPIO_Port, DOUT_3_Pin, meas_data.d_outputs.out3);
 8000cf0:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <Write_Outputs+0x2fc>)
 8000cf2:	789b      	ldrb	r3, [r3, #2]
 8000cf4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d00:	482f      	ldr	r0, [pc, #188]	; (8000dc0 <Write_Outputs+0x300>)
 8000d02:	f007 f95b 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_4_GPIO_Port, DOUT_4_Pin, meas_data.d_outputs.out4);
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <Write_Outputs+0x2fc>)
 8000d08:	789b      	ldrb	r3, [r3, #2]
 8000d0a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	461a      	mov	r2, r3
 8000d12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d16:	482a      	ldr	r0, [pc, #168]	; (8000dc0 <Write_Outputs+0x300>)
 8000d18:	f007 f950 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_5_GPIO_Port, DOUT_5_Pin, meas_data.d_outputs.out5);
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <Write_Outputs+0x2fc>)
 8000d1e:	789b      	ldrb	r3, [r3, #2]
 8000d20:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2c:	4824      	ldr	r0, [pc, #144]	; (8000dc0 <Write_Outputs+0x300>)
 8000d2e:	f007 f945 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_6_GPIO_Port, DOUT_6_Pin, meas_data.d_outputs.out6);
 8000d32:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <Write_Outputs+0x2fc>)
 8000d34:	789b      	ldrb	r3, [r3, #2]
 8000d36:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d42:	481f      	ldr	r0, [pc, #124]	; (8000dc0 <Write_Outputs+0x300>)
 8000d44:	f007 f93a 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_7_GPIO_Port, DOUT_7_Pin, meas_data.d_outputs.out7);
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <Write_Outputs+0x2fc>)
 8000d4a:	789b      	ldrb	r3, [r3, #2]
 8000d4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d58:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <Write_Outputs+0x300>)
 8000d5a:	f007 f92f 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_8_GPIO_Port, DOUT_8_Pin, meas_data.d_outputs.out8);
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <Write_Outputs+0x2fc>)
 8000d60:	78db      	ldrb	r3, [r3, #3]
 8000d62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6e:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <Write_Outputs+0x300>)
 8000d70:	f007 f924 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_9_GPIO_Port, DOUT_9_Pin, meas_data.d_outputs.out9);
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <Write_Outputs+0x2fc>)
 8000d76:	78db      	ldrb	r3, [r3, #3]
 8000d78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461a      	mov	r2, r3
 8000d80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d84:	480f      	ldr	r0, [pc, #60]	; (8000dc4 <Write_Outputs+0x304>)
 8000d86:	f007 f919 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_10_GPIO_Port, DOUT_10_Pin, meas_data.d_outputs.out10);
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <Write_Outputs+0x2fc>)
 8000d8c:	78db      	ldrb	r3, [r3, #3]
 8000d8e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9a:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <Write_Outputs+0x308>)
 8000d9c:	f007 f90e 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_11_GPIO_Port, DOUT_11_Pin, meas_data.d_outputs.out11);
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <Write_Outputs+0x2fc>)
 8000da2:	78db      	ldrb	r3, [r3, #3]
 8000da4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	461a      	mov	r2, r3
 8000dac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <Write_Outputs+0x308>)
 8000db2:	f007 f903 	bl	8007fbc <HAL_GPIO_WritePin>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000c5c 	.word	0x20000c5c
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40020c00 	.word	0x40020c00

08000dcc <Filter_Inputs>:

static void Filter_Inputs()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
	uint8_t inputs[INPUT_NUMBER];

	inputs[0] = !HAL_GPIO_ReadPin(DIN_0_GPIO_Port, DIN_0_Pin);
 8000dd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd6:	486a      	ldr	r0, [pc, #424]	; (8000f80 <Filter_Inputs+0x1b4>)
 8000dd8:	f007 f8d8 	bl	8007f8c <HAL_GPIO_ReadPin>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	bf0c      	ite	eq
 8000de2:	2301      	moveq	r3, #1
 8000de4:	2300      	movne	r3, #0
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	703b      	strb	r3, [r7, #0]
	inputs[1] = !HAL_GPIO_ReadPin(DIN_1_GPIO_Port, DIN_1_Pin);
 8000dea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dee:	4864      	ldr	r0, [pc, #400]	; (8000f80 <Filter_Inputs+0x1b4>)
 8000df0:	f007 f8cc 	bl	8007f8c <HAL_GPIO_ReadPin>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf0c      	ite	eq
 8000dfa:	2301      	moveq	r3, #1
 8000dfc:	2300      	movne	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	707b      	strb	r3, [r7, #1]
	inputs[2] = !HAL_GPIO_ReadPin(DIN_2_GPIO_Port, DIN_2_Pin);
 8000e02:	2101      	movs	r1, #1
 8000e04:	485f      	ldr	r0, [pc, #380]	; (8000f84 <Filter_Inputs+0x1b8>)
 8000e06:	f007 f8c1 	bl	8007f8c <HAL_GPIO_ReadPin>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf0c      	ite	eq
 8000e10:	2301      	moveq	r3, #1
 8000e12:	2300      	movne	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	70bb      	strb	r3, [r7, #2]
	inputs[3] = !HAL_GPIO_ReadPin(DIN_3_GPIO_Port, DIN_3_Pin);
 8000e18:	2102      	movs	r1, #2
 8000e1a:	485a      	ldr	r0, [pc, #360]	; (8000f84 <Filter_Inputs+0x1b8>)
 8000e1c:	f007 f8b6 	bl	8007f8c <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bf0c      	ite	eq
 8000e26:	2301      	moveq	r3, #1
 8000e28:	2300      	movne	r3, #0
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	70fb      	strb	r3, [r7, #3]
	inputs[4] = !HAL_GPIO_ReadPin(DIN_4_GPIO_Port, DIN_4_Pin);
 8000e2e:	2104      	movs	r1, #4
 8000e30:	4854      	ldr	r0, [pc, #336]	; (8000f84 <Filter_Inputs+0x1b8>)
 8000e32:	f007 f8ab 	bl	8007f8c <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	bf0c      	ite	eq
 8000e3c:	2301      	moveq	r3, #1
 8000e3e:	2300      	movne	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	713b      	strb	r3, [r7, #4]
	inputs[5] = !HAL_GPIO_ReadPin(DIN_5_GPIO_Port, DIN_5_Pin);
 8000e44:	2108      	movs	r1, #8
 8000e46:	484f      	ldr	r0, [pc, #316]	; (8000f84 <Filter_Inputs+0x1b8>)
 8000e48:	f007 f8a0 	bl	8007f8c <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bf0c      	ite	eq
 8000e52:	2301      	moveq	r3, #1
 8000e54:	2300      	movne	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	717b      	strb	r3, [r7, #5]
	inputs[6] = !HAL_GPIO_ReadPin(DIN_6_GPIO_Port, DIN_6_Pin);
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4849      	ldr	r0, [pc, #292]	; (8000f84 <Filter_Inputs+0x1b8>)
 8000e5e:	f007 f895 	bl	8007f8c <HAL_GPIO_ReadPin>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bf0c      	ite	eq
 8000e68:	2301      	moveq	r3, #1
 8000e6a:	2300      	movne	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	71bb      	strb	r3, [r7, #6]
	inputs[7] = !HAL_GPIO_ReadPin(DIN_7_GPIO_Port, DIN_7_Pin);
 8000e70:	2120      	movs	r1, #32
 8000e72:	4844      	ldr	r0, [pc, #272]	; (8000f84 <Filter_Inputs+0x1b8>)
 8000e74:	f007 f88a 	bl	8007f8c <HAL_GPIO_ReadPin>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bf0c      	ite	eq
 8000e7e:	2301      	moveq	r3, #1
 8000e80:	2300      	movne	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	71fb      	strb	r3, [r7, #7]
	inputs[8] = !HAL_GPIO_ReadPin(DIN_8_GPIO_Port, DIN_8_Pin);
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	483e      	ldr	r0, [pc, #248]	; (8000f84 <Filter_Inputs+0x1b8>)
 8000e8a:	f007 f87f 	bl	8007f8c <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf0c      	ite	eq
 8000e94:	2301      	moveq	r3, #1
 8000e96:	2300      	movne	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	723b      	strb	r3, [r7, #8]
	inputs[9] = !HAL_GPIO_ReadPin(DIN_9_GPIO_Port, DIN_9_Pin);
 8000e9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea0:	4839      	ldr	r0, [pc, #228]	; (8000f88 <Filter_Inputs+0x1bc>)
 8000ea2:	f007 f873 	bl	8007f8c <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bf0c      	ite	eq
 8000eac:	2301      	moveq	r3, #1
 8000eae:	2300      	movne	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	727b      	strb	r3, [r7, #9]
	inputs[10] = !HAL_GPIO_ReadPin(DIN_10_GPIO_Port, DIN_10_Pin);
 8000eb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb8:	4833      	ldr	r0, [pc, #204]	; (8000f88 <Filter_Inputs+0x1bc>)
 8000eba:	f007 f867 	bl	8007f8c <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	bf0c      	ite	eq
 8000ec4:	2301      	moveq	r3, #1
 8000ec6:	2300      	movne	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	72bb      	strb	r3, [r7, #10]
	inputs[11] = !HAL_GPIO_ReadPin(DIN_11_GPIO_Port, DIN_11_Pin);
 8000ecc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed0:	482d      	ldr	r0, [pc, #180]	; (8000f88 <Filter_Inputs+0x1bc>)
 8000ed2:	f007 f85b 	bl	8007f8c <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf0c      	ite	eq
 8000edc:	2301      	moveq	r3, #1
 8000ede:	2300      	movne	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < INPUT_NUMBER; ++i) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	e041      	b.n	8000f6e <Filter_Inputs+0x1a2>
		if(inputs[i])
 8000eea:	463a      	mov	r2, r7
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00f      	beq.n	8000f16 <Filter_Inputs+0x14a>
		{
			filter_state[i] = filter_state[i]<ANTIDREBEZG_CNT ? filter_state[i]+1 : ANTIDREBEZG_CNT;
 8000ef6:	4a25      	ldr	r2, [pc, #148]	; (8000f8c <Filter_Inputs+0x1c0>)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	b2d9      	uxtb	r1, r3
 8000f0a:	4a20      	ldr	r2, [pc, #128]	; (8000f8c <Filter_Inputs+0x1c0>)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	460a      	mov	r2, r1
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	e011      	b.n	8000f3a <Filter_Inputs+0x16e>
		}
		else
		{
			filter_state[i] = filter_state[i]>0 ? filter_state[i]-1 : 0;
 8000f16:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <Filter_Inputs+0x1c0>)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d006      	beq.n	8000f30 <Filter_Inputs+0x164>
 8000f22:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <Filter_Inputs+0x1c0>)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	e000      	b.n	8000f32 <Filter_Inputs+0x166>
 8000f30:	2200      	movs	r2, #0
 8000f32:	4916      	ldr	r1, [pc, #88]	; (8000f8c <Filter_Inputs+0x1c0>)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	440b      	add	r3, r1
 8000f38:	701a      	strb	r2, [r3, #0]
		}
		if (filter_state[i]>=ANTIDREBEZG_CNT) {
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <Filter_Inputs+0x1c0>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	d905      	bls.n	8000f52 <Filter_Inputs+0x186>
			filters_inputs[i]=1;
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <Filter_Inputs+0x1c4>)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e00a      	b.n	8000f68 <Filter_Inputs+0x19c>
		} else if(filter_state[i]==0) {
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <Filter_Inputs+0x1c0>)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d104      	bne.n	8000f68 <Filter_Inputs+0x19c>
			filters_inputs[i]=0;
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <Filter_Inputs+0x1c4>)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < INPUT_NUMBER; ++i) {
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2b0b      	cmp	r3, #11
 8000f72:	ddba      	ble.n	8000eea <Filter_Inputs+0x11e>
		}
	}

}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	20000410 	.word	0x20000410
 8000f90:	2000041c 	.word	0x2000041c

08000f94 <ethernet_reset>:

static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer);
static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf);

void ethernet_reset()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <ethernet_reset+0x24>)
 8000f9e:	f007 f80d 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fa2:	2064      	movs	r0, #100	; 0x64
 8000fa4:	f004 fa2c 	bl	8005400 <HAL_Delay>
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2101      	movs	r1, #1
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <ethernet_reset+0x24>)
 8000fae:	f007 f805 	bl	8007fbc <HAL_GPIO_WritePin>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40020000 	.word	0x40020000

08000fbc <ethernet_thread>:

void ethernet_thread(void *arg)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0cc      	sub	sp, #304	; 0x130
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000fc6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000fca:	6018      	str	r0, [r3, #0]
	struct netconn *conn;
	struct netbuf *buf;
	ip_addr_t *client_addr;
	unsigned short local_port;
	unsigned short client_port;
	local_port = *((unsigned short*)arg);
 8000fcc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000fd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	void* data;
	uint8_t answer[256];
	u16_t len;
	uint16_t answer_len;
	conn = netconn_new(NETCONN_UDP);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2020      	movs	r0, #32
 8000fe2:	f00e fa25 	bl	800f430 <netconn_new_with_proto_and_callback>
 8000fe6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
	if (conn!= NULL)
 8000fea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d05d      	beq.n	80010ae <ethernet_thread+0xf2>
	{
	  err = netconn_bind(conn, IP_ADDR_ANY, local_port);
 8000ff2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	492f      	ldr	r1, [pc, #188]	; (80010b8 <ethernet_thread+0xfc>)
 8000ffa:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000ffe:	f00e fad1 	bl	800f5a4 <netconn_bind>
 8001002:	4603      	mov	r3, r0
 8001004:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  if (err == ERR_OK)
 8001008:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800100c:	2b00      	cmp	r3, #0
 800100e:	d14a      	bne.n	80010a6 <ethernet_thread+0xea>
	  {
		  for(;;)
		  {
			  recv_err = netconn_recv(conn, &buf);
 8001010:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001014:	4619      	mov	r1, r3
 8001016:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800101a:	f00e fc77 	bl	800f90c <netconn_recv>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
			  if (recv_err == ERR_OK)
 8001024:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f1      	bne.n	8001010 <ethernet_thread+0x54>
			  {
				  client_addr = netbuf_fromaddr(buf);
 800102c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001030:	3308      	adds	r3, #8
 8001032:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				  client_port = netbuf_fromport(buf);
 8001036:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800103a:	899b      	ldrh	r3, [r3, #12]
 800103c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

				  netbuf_data(buf, &data, &len);
 8001040:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001044:	f107 020a 	add.w	r2, r7, #10
 8001048:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800104c:	4618      	mov	r0, r3
 800104e:	f010 f833 	bl	80110b8 <netbuf_data>
				  answer_len = ethernet_answer(data, len, answer);
 8001052:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001056:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800105a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	4619      	mov	r1, r3
 8001066:	f000 f859 	bl	800111c <ethernet_answer>
 800106a:	4603      	mov	r3, r0
 800106c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				  if(answer_len)
 8001070:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001074:	2b00      	cmp	r3, #0
 8001076:	d010      	beq.n	800109a <ethernet_thread+0xde>
				  {
					  Send(conn, answer, answer_len, client_addr, client_port, buf);
 8001078:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800107c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001080:	f107 010c 	add.w	r1, r7, #12
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001090:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001094:	f000 f812 	bl	80010bc <Send>
 8001098:	e7ba      	b.n	8001010 <ethernet_thread+0x54>
				  }
				  else netbuf_delete(buf);
 800109a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800109e:	4618      	mov	r0, r3
 80010a0:	f00f ffa0 	bl	8010fe4 <netbuf_delete>
			  recv_err = netconn_recv(conn, &buf);
 80010a4:	e7b4      	b.n	8001010 <ethernet_thread+0x54>

		  }
	  }
	  else
	  {
	    netconn_delete(conn);
 80010a6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80010aa:	f00e fa5f 	bl	800f56c <netconn_delete>
	  }
	}
}
 80010ae:	bf00      	nop
 80010b0:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	080216e8 	.word	0x080216e8

080010bc <Send>:

static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	80fb      	strh	r3, [r7, #6]
	u32_t address = addr->addr;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	617b      	str	r3, [r7, #20]
	netbuf_delete(buf);
 80010d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010d4:	f00f ff86 	bl	8010fe4 <netbuf_delete>
	buf = netbuf_new();
 80010d8:	f00f ff70 	bl	8010fbc <netbuf_new>
 80010dc:	6278      	str	r0, [r7, #36]	; 0x24
	buf->port = port;
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	8c3a      	ldrh	r2, [r7, #32]
 80010e2:	819a      	strh	r2, [r3, #12]
	addr->addr = address;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	601a      	str	r2, [r3, #0]
	err_t err;
	err  = netbuf_ref(buf, pointer, size);
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	461a      	mov	r2, r3
 80010ee:	68b9      	ldr	r1, [r7, #8]
 80010f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010f2:	f00f ff97 	bl	8011024 <netbuf_ref>
 80010f6:	4603      	mov	r3, r0
 80010f8:	74fb      	strb	r3, [r7, #19]
	if(err==ERR_OK)
 80010fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d108      	bne.n	8001114 <Send+0x58>
	{
		netconn_sendto(conn, buf, addr, port);
 8001102:	8c3b      	ldrh	r3, [r7, #32]
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f00e fc79 	bl	800fa00 <netconn_sendto>
		netbuf_delete(buf);
 800110e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001110:	f00f ff68 	bl	8010fe4 <netbuf_delete>
	}
}
 8001114:	bf00      	nop
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <ethernet_answer>:

//Возвращает кол-во байт для отправки клиенту
static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	460b      	mov	r3, r1
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	817b      	strh	r3, [r7, #10]
	int result = ModbusParse(data, data_length, answer, ETHERNET);
 800112a:	8979      	ldrh	r1, [r7, #10]
 800112c:	2301      	movs	r3, #1
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f002 f907 	bl	8003344 <ModbusParse>
 8001136:	6178      	str	r0, [r7, #20]
	if(result)return result;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <ethernet_answer+0x26>
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	e00d      	b.n	800115e <ethernet_answer+0x42>
	result = OnKeyPress(data, data_length, answer);
 8001142:	897b      	ldrh	r3, [r7, #10]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4619      	mov	r1, r3
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 fc88 	bl	8001a60 <OnKeyPress>
 8001150:	6178      	str	r0, [r7, #20]
	if(result!=0)return 81;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <ethernet_answer+0x40>
 8001158:	2351      	movs	r3, #81	; 0x51
 800115a:	e000      	b.n	800115e <ethernet_answer+0x42>
	return 0;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <framDataRead>:
#include <fram.h>

extern SPI_HandleTypeDef hspi3;

int framDataRead (uint16_t address, uint8_t * data, uint16_t size)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	4613      	mov	r3, r2
 8001176:	80bb      	strh	r3, [r7, #4]
	int result = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
	uint8_t buff[3];

	buff[0] = FRAM_CMD_READ;
 800117c:	2303      	movs	r3, #3
 800117e:	723b      	strb	r3, [r7, #8]
	buff[1] = address >> 8;
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	b29b      	uxth	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	727b      	strb	r3, [r7, #9]
	buff[2] = address & 0xFF;
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001196:	4811      	ldr	r0, [pc, #68]	; (80011dc <framDataRead+0x74>)
 8001198:	f006 ff10 	bl	8007fbc <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi3, buff, 3, 200);
 800119c:	f107 0108 	add.w	r1, r7, #8
 80011a0:	23c8      	movs	r3, #200	; 0xc8
 80011a2:	2203      	movs	r2, #3
 80011a4:	480e      	ldr	r0, [pc, #56]	; (80011e0 <framDataRead+0x78>)
 80011a6:	f007 fc9e 	bl	8008ae6 <HAL_SPI_Transmit>
 80011aa:	4603      	mov	r3, r0
 80011ac:	60fb      	str	r3, [r7, #12]
	result |= HAL_SPI_Receive(&hspi3, data, size, 200);
 80011ae:	88ba      	ldrh	r2, [r7, #4]
 80011b0:	23c8      	movs	r3, #200	; 0xc8
 80011b2:	6839      	ldr	r1, [r7, #0]
 80011b4:	480a      	ldr	r0, [pc, #40]	; (80011e0 <framDataRead+0x78>)
 80011b6:	f007 fdd2 	bl	8008d5e <HAL_SPI_Receive>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	4804      	ldr	r0, [pc, #16]	; (80011dc <framDataRead+0x74>)
 80011cc:	f006 fef6 	bl	8007fbc <HAL_GPIO_WritePin>

	return result;
 80011d0:	68fb      	ldr	r3, [r7, #12]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40020000 	.word	0x40020000
 80011e0:	20000948 	.word	0x20000948

080011e4 <framDataWrite>:

int framDataWrite (uint16_t address, uint8_t * data, uint16_t size)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	80fb      	strh	r3, [r7, #6]
 80011f0:	4613      	mov	r3, r2
 80011f2:	80bb      	strh	r3, [r7, #4]
	int result = 0, status = 0, cntr = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
	uint8_t buff[3];

	buff[0] = FRAM_CMD_WREN;
 8001200:	2306      	movs	r3, #6
 8001202:	723b      	strb	r3, [r7, #8]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120a:	483f      	ldr	r0, [pc, #252]	; (8001308 <framDataWrite+0x124>)
 800120c:	f006 fed6 	bl	8007fbc <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi3, buff, 1, 200);
 8001210:	f107 0108 	add.w	r1, r7, #8
 8001214:	23c8      	movs	r3, #200	; 0xc8
 8001216:	2201      	movs	r2, #1
 8001218:	483c      	ldr	r0, [pc, #240]	; (800130c <framDataWrite+0x128>)
 800121a:	f007 fc64 	bl	8008ae6 <HAL_SPI_Transmit>
 800121e:	4603      	mov	r3, r0
 8001220:	617b      	str	r3, [r7, #20]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001228:	4837      	ldr	r0, [pc, #220]	; (8001308 <framDataWrite+0x124>)
 800122a:	f006 fec7 	bl	8007fbc <HAL_GPIO_WritePin>
	buff[0] = FRAM_CMD_RDSR;
 800122e:	2305      	movs	r3, #5
 8001230:	723b      	strb	r3, [r7, #8]
	while ((status == 0) && (cntr++ < 100))
 8001232:	e027      	b.n	8001284 <framDataWrite+0xa0>
	{
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800123a:	4833      	ldr	r0, [pc, #204]	; (8001308 <framDataWrite+0x124>)
 800123c:	f006 febe 	bl	8007fbc <HAL_GPIO_WritePin>
		result |= HAL_SPI_Transmit(&hspi3, buff, 1, 200);
 8001240:	f107 0108 	add.w	r1, r7, #8
 8001244:	23c8      	movs	r3, #200	; 0xc8
 8001246:	2201      	movs	r2, #1
 8001248:	4830      	ldr	r0, [pc, #192]	; (800130c <framDataWrite+0x128>)
 800124a:	f007 fc4c 	bl	8008ae6 <HAL_SPI_Transmit>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	4313      	orrs	r3, r2
 8001256:	617b      	str	r3, [r7, #20]
		result |= HAL_SPI_Receive(&hspi3, buff, 1, 200);
 8001258:	f107 0108 	add.w	r1, r7, #8
 800125c:	23c8      	movs	r3, #200	; 0xc8
 800125e:	2201      	movs	r2, #1
 8001260:	482a      	ldr	r0, [pc, #168]	; (800130c <framDataWrite+0x128>)
 8001262:	f007 fd7c 	bl	8008d5e <HAL_SPI_Receive>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	4313      	orrs	r3, r2
 800126e:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001276:	4824      	ldr	r0, [pc, #144]	; (8001308 <framDataWrite+0x124>)
 8001278:	f006 fea0 	bl	8007fbc <HAL_GPIO_WritePin>
		status = buff[0] & 0x02;
 800127c:	7a3b      	ldrb	r3, [r7, #8]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	613b      	str	r3, [r7, #16]
	while ((status == 0) && (cntr++ < 100))
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d104      	bne.n	8001294 <framDataWrite+0xb0>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	60fa      	str	r2, [r7, #12]
 8001290:	2b63      	cmp	r3, #99	; 0x63
 8001292:	ddcf      	ble.n	8001234 <framDataWrite+0x50>
	}
	if (!status)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d103      	bne.n	80012a2 <framDataWrite+0xbe>
		result = -2;
 800129a:	f06f 0301 	mvn.w	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	e02c      	b.n	80012fc <framDataWrite+0x118>
	else
	{
		buff[0] = FRAM_CMD_WRITE;
 80012a2:	2302      	movs	r3, #2
 80012a4:	723b      	strb	r3, [r7, #8]
		buff[1] = address >> 8;
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	727b      	strb	r3, [r7, #9]
		buff[2] = address & 0xFF;
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	72bb      	strb	r3, [r7, #10]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012bc:	4812      	ldr	r0, [pc, #72]	; (8001308 <framDataWrite+0x124>)
 80012be:	f006 fe7d 	bl	8007fbc <HAL_GPIO_WritePin>
		result |= HAL_SPI_Transmit(&hspi3, buff, 3, 200);
 80012c2:	f107 0108 	add.w	r1, r7, #8
 80012c6:	23c8      	movs	r3, #200	; 0xc8
 80012c8:	2203      	movs	r2, #3
 80012ca:	4810      	ldr	r0, [pc, #64]	; (800130c <framDataWrite+0x128>)
 80012cc:	f007 fc0b 	bl	8008ae6 <HAL_SPI_Transmit>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	617b      	str	r3, [r7, #20]
		result |= HAL_SPI_Transmit(&hspi3, data, size, 200);
 80012da:	88ba      	ldrh	r2, [r7, #4]
 80012dc:	23c8      	movs	r3, #200	; 0xc8
 80012de:	6839      	ldr	r1, [r7, #0]
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <framDataWrite+0x128>)
 80012e2:	f007 fc00 	bl	8008ae6 <HAL_SPI_Transmit>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <framDataWrite+0x124>)
 80012f8:	f006 fe60 	bl	8007fbc <HAL_GPIO_WritePin>
	}

	return result;
 80012fc:	697b      	ldr	r3, [r7, #20]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020000 	.word	0x40020000
 800130c:	20000948 	.word	0x20000948

08001310 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4a07      	ldr	r2, [pc, #28]	; (800133c <vApplicationGetIdleTaskMemory+0x2c>)
 8001320:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <vApplicationGetIdleTaskMemory+0x30>)
 8001326:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2280      	movs	r2, #128	; 0x80
 800132c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000434 	.word	0x20000434
 8001340:	200004e8 	.word	0x200004e8

08001344 <task_init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void task_init()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af02      	add	r7, sp, #8
	size_t fre = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
	fre=xPortGetFreeHeapSize();
 800134e:	f00d ff89 	bl	800f264 <xPortGetFreeHeapSize>
 8001352:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread1", ethernet_thread, (void*)&port1, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8001354:	2300      	movs	r3, #0
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800135c:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <task_init+0x90>)
 800135e:	491e      	ldr	r1, [pc, #120]	; (80013d8 <task_init+0x94>)
 8001360:	481e      	ldr	r0, [pc, #120]	; (80013dc <task_init+0x98>)
 8001362:	f01b f921 	bl	801c5a8 <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001366:	f00d ff7d 	bl	800f264 <xPortGetFreeHeapSize>
 800136a:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread2", ethernet_thread, (void*)&port2, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 800136c:	2300      	movs	r3, #0
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001374:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <task_init+0x9c>)
 8001376:	4918      	ldr	r1, [pc, #96]	; (80013d8 <task_init+0x94>)
 8001378:	481a      	ldr	r0, [pc, #104]	; (80013e4 <task_init+0xa0>)
 800137a:	f01b f915 	bl	801c5a8 <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 800137e:	f00d ff71 	bl	800f264 <xPortGetFreeHeapSize>
 8001382:	6178      	str	r0, [r7, #20]
	sys_thread_new("uart_thread", uart_thread, (void*)NULL, 512, osPriorityNormal );
 8001384:	2300      	movs	r3, #0
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138c:	2200      	movs	r2, #0
 800138e:	4916      	ldr	r1, [pc, #88]	; (80013e8 <task_init+0xa4>)
 8001390:	4816      	ldr	r0, [pc, #88]	; (80013ec <task_init+0xa8>)
 8001392:	f01b f909 	bl	801c5a8 <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001396:	f00d ff65 	bl	800f264 <xPortGetFreeHeapSize>
 800139a:	6178      	str	r0, [r7, #20]
	osMailQDef(uart_queue, UART_QUEUE_SIZE, Uart_Queue_Struct);
 800139c:	2303      	movs	r3, #3
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	2310      	movs	r3, #16
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	60fb      	str	r3, [r7, #12]
	uart_queue = osMailCreate(osMailQ(uart_queue), NULL);
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f00b f9c8 	bl	800c744 <osMailCreate>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <task_init+0xac>)
 80013b8:	6013      	str	r3, [r2, #0]
	sys_thread_new("keyboard_thread", keyscan_thread, (void*)NULL, 128, osPriorityNormal );
 80013ba:	2300      	movs	r3, #0
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	2200      	movs	r2, #0
 80013c2:	490c      	ldr	r1, [pc, #48]	; (80013f4 <task_init+0xb0>)
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <task_init+0xb4>)
 80013c6:	f01b f8ef 	bl	801c5a8 <sys_thread_new>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000000 	.word	0x20000000
 80013d8:	08000fbd 	.word	0x08000fbd
 80013dc:	0801dc30 	.word	0x0801dc30
 80013e0:	20000002 	.word	0x20000002
 80013e4:	0801dc3c 	.word	0x0801dc3c
 80013e8:	08004e35 	.word	0x08004e35
 80013ec:	0801dc48 	.word	0x0801dc48
 80013f0:	20000430 	.word	0x20000430
 80013f4:	080013fd 	.word	0x080013fd
 80013f8:	0801dc54 	.word	0x0801dc54

080013fc <keyscan_thread>:
static void key_filter_all();
static void PrintSymbol(const char *str);


void keyscan_thread(void *argument)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	int result = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
	int time;
	int last_time;

	result = OnKeyPress("F1", strlen("F1"), lcd);
 8001408:	4a39      	ldr	r2, [pc, #228]	; (80014f0 <keyscan_thread+0xf4>)
 800140a:	2102      	movs	r1, #2
 800140c:	4839      	ldr	r0, [pc, #228]	; (80014f4 <keyscan_thread+0xf8>)
 800140e:	f000 fb27 	bl	8001a60 <OnKeyPress>
 8001412:	6138      	str	r0, [r7, #16]
	if(result!=0)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <keyscan_thread+0x22>
	{
		SendToLcd();
 800141a:	f000 fb01 	bl	8001a20 <SendToLcd>
	}
	while(1)
	{
		Tact_pins();
 800141e:	f000 f86f 	bl	8001500 <Tact_pins>
		Key_Read();
 8001422:	f000 f979 	bl	8001718 <Key_Read>
		key_filter_all();
 8001426:	f000 f9ed 	bl	8001804 <key_filter_all>
		GetPositiveFront();
 800142a:	f000 fa9b 	bl	8001964 <GetPositiveFront>
		for (int i = 0; i < 6; ++i) {
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	e047      	b.n	80014c4 <keyscan_thread+0xc8>
			for (int j = 0; j < 6; ++j) {
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e03e      	b.n	80014b8 <keyscan_thread+0xbc>
				if(positive_fronts[i][j])
 800143a:	492f      	ldr	r1, [pc, #188]	; (80014f8 <keyscan_thread+0xfc>)
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	18ca      	adds	r2, r1, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	4413      	add	r3, r2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d02f      	beq.n	80014b2 <keyscan_thread+0xb6>
				{
					if(keys[i][j]!=NULL)
 8001452:	492a      	ldr	r1, [pc, #168]	; (80014fc <keyscan_thread+0x100>)
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4413      	add	r3, r2
 8001462:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d023      	beq.n	80014b2 <keyscan_thread+0xb6>
					{
						result = OnKeyPress(keys[i][j], strlen(keys[i][j]), lcd);
 800146a:	4924      	ldr	r1, [pc, #144]	; (80014fc <keyscan_thread+0x100>)
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4413      	add	r3, r2
 800147a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800147e:	491f      	ldr	r1, [pc, #124]	; (80014fc <keyscan_thread+0x100>)
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4413      	add	r3, r2
 800148e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe fe9c 	bl	80001d0 <strlen>
 8001498:	4603      	mov	r3, r0
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <keyscan_thread+0xf4>)
 800149e:	4619      	mov	r1, r3
 80014a0:	4620      	mov	r0, r4
 80014a2:	f000 fadd 	bl	8001a60 <OnKeyPress>
 80014a6:	6138      	str	r0, [r7, #16]
						if(result!=0)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <keyscan_thread+0xb6>
						{
							SendToLcd();
 80014ae:	f000 fab7 	bl	8001a20 <SendToLcd>
			for (int j = 0; j < 6; ++j) {
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b05      	cmp	r3, #5
 80014bc:	ddbd      	ble.n	800143a <keyscan_thread+0x3e>
		for (int i = 0; i < 6; ++i) {
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	ddb4      	ble.n	8001434 <keyscan_thread+0x38>
						}
					}
				}
			}
		}
		time = HAL_GetTick();
 80014ca:	f003 ff8d 	bl	80053e8 <HAL_GetTick>
 80014ce:	4603      	mov	r3, r0
 80014d0:	60fb      	str	r3, [r7, #12]
		if((time-last_time)>500)
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014dc:	dd03      	ble.n	80014e6 <keyscan_thread+0xea>
		{
			LcdUpdate();
 80014de:	f001 f941 	bl	8002764 <LcdUpdate>
			last_time = time;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	61fb      	str	r3, [r7, #28]
		}
		osDelay(2);
 80014e6:	2002      	movs	r0, #2
 80014e8:	f00a fdd5 	bl	800c096 <osDelay>
		Tact_pins();
 80014ec:	e797      	b.n	800141e <keyscan_thread+0x22>
 80014ee:	bf00      	nop
 80014f0:	200007a0 	.word	0x200007a0
 80014f4:	0801dc7c 	.word	0x0801dc7c
 80014f8:	2000077c 	.word	0x2000077c
 80014fc:	20000004 	.word	0x20000004

08001500 <Tact_pins>:
	}
}

static void Tact_pins(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	out_key_pin = (out_key_pin+1)%COLUMNS_COUNT;
 8001504:	4b81      	ldr	r3, [pc, #516]	; (800170c <Tact_pins+0x20c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	4b81      	ldr	r3, [pc, #516]	; (8001710 <Tact_pins+0x210>)
 800150c:	fb83 3102 	smull	r3, r1, r3, r2
 8001510:	17d3      	asrs	r3, r2, #31
 8001512:	1ac9      	subs	r1, r1, r3
 8001514:	460b      	mov	r3, r1
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	440b      	add	r3, r1
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	1ad1      	subs	r1, r2, r3
 800151e:	b2ca      	uxtb	r2, r1
 8001520:	4b7a      	ldr	r3, [pc, #488]	; (800170c <Tact_pins+0x20c>)
 8001522:	701a      	strb	r2, [r3, #0]
	switch(out_key_pin)
 8001524:	4b79      	ldr	r3, [pc, #484]	; (800170c <Tact_pins+0x20c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b05      	cmp	r3, #5
 800152a:	f200 80ed 	bhi.w	8001708 <Tact_pins+0x208>
 800152e:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <Tact_pins+0x34>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	0800154d 	.word	0x0800154d
 8001538:	08001597 	.word	0x08001597
 800153c:	080015e1 	.word	0x080015e1
 8001540:	0800162b 	.word	0x0800162b
 8001544:	08001675 	.word	0x08001675
 8001548:	080016bf 	.word	0x080016bf
	{
		case 0:
			C0_HIGH;
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001552:	4870      	ldr	r0, [pc, #448]	; (8001714 <Tact_pins+0x214>)
 8001554:	f006 fd32 	bl	8007fbc <HAL_GPIO_WritePin>
			C1_LOW;
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800155e:	486d      	ldr	r0, [pc, #436]	; (8001714 <Tact_pins+0x214>)
 8001560:	f006 fd2c 	bl	8007fbc <HAL_GPIO_WritePin>
			C2_LOW;
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800156a:	486a      	ldr	r0, [pc, #424]	; (8001714 <Tact_pins+0x214>)
 800156c:	f006 fd26 	bl	8007fbc <HAL_GPIO_WritePin>
			C3_LOW;
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001576:	4867      	ldr	r0, [pc, #412]	; (8001714 <Tact_pins+0x214>)
 8001578:	f006 fd20 	bl	8007fbc <HAL_GPIO_WritePin>
			C4_LOW;
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001582:	4864      	ldr	r0, [pc, #400]	; (8001714 <Tact_pins+0x214>)
 8001584:	f006 fd1a 	bl	8007fbc <HAL_GPIO_WritePin>
			C5_LOW;
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800158e:	4861      	ldr	r0, [pc, #388]	; (8001714 <Tact_pins+0x214>)
 8001590:	f006 fd14 	bl	8007fbc <HAL_GPIO_WritePin>
			break;
 8001594:	e0b8      	b.n	8001708 <Tact_pins+0x208>
		case 1:
			C0_LOW;
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800159c:	485d      	ldr	r0, [pc, #372]	; (8001714 <Tact_pins+0x214>)
 800159e:	f006 fd0d 	bl	8007fbc <HAL_GPIO_WritePin>
			C1_HIGH;
 80015a2:	2201      	movs	r2, #1
 80015a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a8:	485a      	ldr	r0, [pc, #360]	; (8001714 <Tact_pins+0x214>)
 80015aa:	f006 fd07 	bl	8007fbc <HAL_GPIO_WritePin>
			C2_LOW;
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b4:	4857      	ldr	r0, [pc, #348]	; (8001714 <Tact_pins+0x214>)
 80015b6:	f006 fd01 	bl	8007fbc <HAL_GPIO_WritePin>
			C3_LOW;
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c0:	4854      	ldr	r0, [pc, #336]	; (8001714 <Tact_pins+0x214>)
 80015c2:	f006 fcfb 	bl	8007fbc <HAL_GPIO_WritePin>
			C4_LOW;
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015cc:	4851      	ldr	r0, [pc, #324]	; (8001714 <Tact_pins+0x214>)
 80015ce:	f006 fcf5 	bl	8007fbc <HAL_GPIO_WritePin>
			C5_LOW;
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d8:	484e      	ldr	r0, [pc, #312]	; (8001714 <Tact_pins+0x214>)
 80015da:	f006 fcef 	bl	8007fbc <HAL_GPIO_WritePin>
			break;
 80015de:	e093      	b.n	8001708 <Tact_pins+0x208>
		case 2:
			C0_LOW;
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015e6:	484b      	ldr	r0, [pc, #300]	; (8001714 <Tact_pins+0x214>)
 80015e8:	f006 fce8 	bl	8007fbc <HAL_GPIO_WritePin>
			C1_LOW;
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f2:	4848      	ldr	r0, [pc, #288]	; (8001714 <Tact_pins+0x214>)
 80015f4:	f006 fce2 	bl	8007fbc <HAL_GPIO_WritePin>
			C2_HIGH;
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015fe:	4845      	ldr	r0, [pc, #276]	; (8001714 <Tact_pins+0x214>)
 8001600:	f006 fcdc 	bl	8007fbc <HAL_GPIO_WritePin>
			C3_LOW;
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160a:	4842      	ldr	r0, [pc, #264]	; (8001714 <Tact_pins+0x214>)
 800160c:	f006 fcd6 	bl	8007fbc <HAL_GPIO_WritePin>
			C4_LOW;
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001616:	483f      	ldr	r0, [pc, #252]	; (8001714 <Tact_pins+0x214>)
 8001618:	f006 fcd0 	bl	8007fbc <HAL_GPIO_WritePin>
			C5_LOW;
 800161c:	2200      	movs	r2, #0
 800161e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001622:	483c      	ldr	r0, [pc, #240]	; (8001714 <Tact_pins+0x214>)
 8001624:	f006 fcca 	bl	8007fbc <HAL_GPIO_WritePin>
			break;
 8001628:	e06e      	b.n	8001708 <Tact_pins+0x208>
		case 3:
			C0_LOW;
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001630:	4838      	ldr	r0, [pc, #224]	; (8001714 <Tact_pins+0x214>)
 8001632:	f006 fcc3 	bl	8007fbc <HAL_GPIO_WritePin>
			C1_LOW;
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800163c:	4835      	ldr	r0, [pc, #212]	; (8001714 <Tact_pins+0x214>)
 800163e:	f006 fcbd 	bl	8007fbc <HAL_GPIO_WritePin>
			C2_LOW;
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001648:	4832      	ldr	r0, [pc, #200]	; (8001714 <Tact_pins+0x214>)
 800164a:	f006 fcb7 	bl	8007fbc <HAL_GPIO_WritePin>
			C3_HIGH;
 800164e:	2201      	movs	r2, #1
 8001650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001654:	482f      	ldr	r0, [pc, #188]	; (8001714 <Tact_pins+0x214>)
 8001656:	f006 fcb1 	bl	8007fbc <HAL_GPIO_WritePin>
			C4_LOW;
 800165a:	2200      	movs	r2, #0
 800165c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001660:	482c      	ldr	r0, [pc, #176]	; (8001714 <Tact_pins+0x214>)
 8001662:	f006 fcab 	bl	8007fbc <HAL_GPIO_WritePin>
			C5_LOW;
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800166c:	4829      	ldr	r0, [pc, #164]	; (8001714 <Tact_pins+0x214>)
 800166e:	f006 fca5 	bl	8007fbc <HAL_GPIO_WritePin>
			break;
 8001672:	e049      	b.n	8001708 <Tact_pins+0x208>
		case 4:
			C0_LOW;
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800167a:	4826      	ldr	r0, [pc, #152]	; (8001714 <Tact_pins+0x214>)
 800167c:	f006 fc9e 	bl	8007fbc <HAL_GPIO_WritePin>
			C1_LOW;
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001686:	4823      	ldr	r0, [pc, #140]	; (8001714 <Tact_pins+0x214>)
 8001688:	f006 fc98 	bl	8007fbc <HAL_GPIO_WritePin>
			C2_LOW;
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001692:	4820      	ldr	r0, [pc, #128]	; (8001714 <Tact_pins+0x214>)
 8001694:	f006 fc92 	bl	8007fbc <HAL_GPIO_WritePin>
			C3_LOW;
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169e:	481d      	ldr	r0, [pc, #116]	; (8001714 <Tact_pins+0x214>)
 80016a0:	f006 fc8c 	bl	8007fbc <HAL_GPIO_WritePin>
			C4_HIGH;
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016aa:	481a      	ldr	r0, [pc, #104]	; (8001714 <Tact_pins+0x214>)
 80016ac:	f006 fc86 	bl	8007fbc <HAL_GPIO_WritePin>
			C5_LOW;
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b6:	4817      	ldr	r0, [pc, #92]	; (8001714 <Tact_pins+0x214>)
 80016b8:	f006 fc80 	bl	8007fbc <HAL_GPIO_WritePin>
			break;
 80016bc:	e024      	b.n	8001708 <Tact_pins+0x208>
		case 5:
			C0_LOW;
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c4:	4813      	ldr	r0, [pc, #76]	; (8001714 <Tact_pins+0x214>)
 80016c6:	f006 fc79 	bl	8007fbc <HAL_GPIO_WritePin>
			C1_LOW;
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d0:	4810      	ldr	r0, [pc, #64]	; (8001714 <Tact_pins+0x214>)
 80016d2:	f006 fc73 	bl	8007fbc <HAL_GPIO_WritePin>
			C2_LOW;
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <Tact_pins+0x214>)
 80016de:	f006 fc6d 	bl	8007fbc <HAL_GPIO_WritePin>
			C3_LOW;
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e8:	480a      	ldr	r0, [pc, #40]	; (8001714 <Tact_pins+0x214>)
 80016ea:	f006 fc67 	bl	8007fbc <HAL_GPIO_WritePin>
			C4_LOW;
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016f4:	4807      	ldr	r0, [pc, #28]	; (8001714 <Tact_pins+0x214>)
 80016f6:	f006 fc61 	bl	8007fbc <HAL_GPIO_WritePin>
			C5_HIGH;
 80016fa:	2201      	movs	r2, #1
 80016fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001700:	4804      	ldr	r0, [pc, #16]	; (8001714 <Tact_pins+0x214>)
 8001702:	f006 fc5b 	bl	8007fbc <HAL_GPIO_WritePin>
			break;
 8001706:	bf00      	nop
	}
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200006e8 	.word	0x200006e8
 8001710:	2aaaaaab 	.word	0x2aaaaaab
 8001714:	40020c00 	.word	0x40020c00

08001718 <Key_Read>:


static void Key_Read(void)
{
 8001718:	b598      	push	{r3, r4, r7, lr}
 800171a:	af00      	add	r7, sp, #0
	key_input_mask[out_key_pin][0] = R0_IN;
 800171c:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <Key_Read+0xe0>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461c      	mov	r4, r3
 8001722:	2101      	movs	r1, #1
 8001724:	4835      	ldr	r0, [pc, #212]	; (80017fc <Key_Read+0xe4>)
 8001726:	f006 fc31 	bl	8007f8c <HAL_GPIO_ReadPin>
 800172a:	4603      	mov	r3, r0
 800172c:	4619      	mov	r1, r3
 800172e:	4a34      	ldr	r2, [pc, #208]	; (8001800 <Key_Read+0xe8>)
 8001730:	4623      	mov	r3, r4
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4423      	add	r3, r4
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	460a      	mov	r2, r1
 800173c:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][1] = R1_IN;
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <Key_Read+0xe0>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461c      	mov	r4, r3
 8001744:	2102      	movs	r1, #2
 8001746:	482d      	ldr	r0, [pc, #180]	; (80017fc <Key_Read+0xe4>)
 8001748:	f006 fc20 	bl	8007f8c <HAL_GPIO_ReadPin>
 800174c:	4603      	mov	r3, r0
 800174e:	4619      	mov	r1, r3
 8001750:	4a2b      	ldr	r2, [pc, #172]	; (8001800 <Key_Read+0xe8>)
 8001752:	4623      	mov	r3, r4
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4423      	add	r3, r4
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	3301      	adds	r3, #1
 800175e:	460a      	mov	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][2] = R2_IN;
 8001762:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <Key_Read+0xe0>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461c      	mov	r4, r3
 8001768:	2104      	movs	r1, #4
 800176a:	4824      	ldr	r0, [pc, #144]	; (80017fc <Key_Read+0xe4>)
 800176c:	f006 fc0e 	bl	8007f8c <HAL_GPIO_ReadPin>
 8001770:	4603      	mov	r3, r0
 8001772:	4619      	mov	r1, r3
 8001774:	4a22      	ldr	r2, [pc, #136]	; (8001800 <Key_Read+0xe8>)
 8001776:	4623      	mov	r3, r4
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4423      	add	r3, r4
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	3302      	adds	r3, #2
 8001782:	460a      	mov	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][3] = R3_IN;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <Key_Read+0xe0>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	461c      	mov	r4, r3
 800178c:	2108      	movs	r1, #8
 800178e:	481b      	ldr	r0, [pc, #108]	; (80017fc <Key_Read+0xe4>)
 8001790:	f006 fbfc 	bl	8007f8c <HAL_GPIO_ReadPin>
 8001794:	4603      	mov	r3, r0
 8001796:	4619      	mov	r1, r3
 8001798:	4a19      	ldr	r2, [pc, #100]	; (8001800 <Key_Read+0xe8>)
 800179a:	4623      	mov	r3, r4
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4423      	add	r3, r4
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	3303      	adds	r3, #3
 80017a6:	460a      	mov	r2, r1
 80017a8:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][4] = R4_IN;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <Key_Read+0xe0>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461c      	mov	r4, r3
 80017b0:	2110      	movs	r1, #16
 80017b2:	4812      	ldr	r0, [pc, #72]	; (80017fc <Key_Read+0xe4>)
 80017b4:	f006 fbea 	bl	8007f8c <HAL_GPIO_ReadPin>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4619      	mov	r1, r3
 80017bc:	4a10      	ldr	r2, [pc, #64]	; (8001800 <Key_Read+0xe8>)
 80017be:	4623      	mov	r3, r4
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4423      	add	r3, r4
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	3304      	adds	r3, #4
 80017ca:	460a      	mov	r2, r1
 80017cc:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][5] = R5_IN;
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <Key_Read+0xe0>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461c      	mov	r4, r3
 80017d4:	2120      	movs	r1, #32
 80017d6:	4809      	ldr	r0, [pc, #36]	; (80017fc <Key_Read+0xe4>)
 80017d8:	f006 fbd8 	bl	8007f8c <HAL_GPIO_ReadPin>
 80017dc:	4603      	mov	r3, r0
 80017de:	4619      	mov	r1, r3
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <Key_Read+0xe8>)
 80017e2:	4623      	mov	r3, r4
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4423      	add	r3, r4
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	3305      	adds	r3, #5
 80017ee:	460a      	mov	r2, r1
 80017f0:	701a      	strb	r2, [r3, #0]
}
 80017f2:	bf00      	nop
 80017f4:	bd98      	pop	{r3, r4, r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200006e8 	.word	0x200006e8
 80017fc:	40020c00 	.word	0x40020c00
 8001800:	200006ec 	.word	0x200006ec

08001804 <key_filter_all>:

static void key_filter_all()
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	e013      	b.n	8001838 <key_filter_all+0x34>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 8001810:	2300      	movs	r3, #0
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	e00a      	b.n	800182c <key_filter_all+0x28>
			key_filter(x, y);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f000 f811 	bl	8001848 <key_filter>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	2b05      	cmp	r3, #5
 8001830:	ddf1      	ble.n	8001816 <key_filter_all+0x12>
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3301      	adds	r3, #1
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b05      	cmp	r3, #5
 800183c:	dde8      	ble.n	8001810 <key_filter_all+0xc>
		}
	}
}
 800183e:	bf00      	nop
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <key_filter>:

static void key_filter(uint8_t x, uint8_t y)
{
 8001848:	b490      	push	{r4, r7}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	460a      	mov	r2, r1
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	4613      	mov	r3, r2
 8001856:	71bb      	strb	r3, [r7, #6]
	if(key_input_mask[x][y])
 8001858:	79fa      	ldrb	r2, [r7, #7]
 800185a:	79b9      	ldrb	r1, [r7, #6]
 800185c:	483e      	ldr	r0, [pc, #248]	; (8001958 <key_filter+0x110>)
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4403      	add	r3, r0
 8001868:	440b      	add	r3, r1
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d01b      	beq.n	80018a8 <key_filter+0x60>
	{
		key_sence_count[x][y]= key_sence_count[x][y]>=KEY_SENCE ? KEY_SENCE : key_sence_count[x][y]+1;
 8001870:	79fa      	ldrb	r2, [r7, #7]
 8001872:	79b9      	ldrb	r1, [r7, #6]
 8001874:	4839      	ldr	r0, [pc, #228]	; (800195c <key_filter+0x114>)
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4403      	add	r3, r0
 8001880:	440b      	add	r3, r1
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b18      	cmp	r3, #24
 8001886:	bf28      	it	cs
 8001888:	2318      	movcs	r3, #24
 800188a:	b2db      	uxtb	r3, r3
 800188c:	79fa      	ldrb	r2, [r7, #7]
 800188e:	79b9      	ldrb	r1, [r7, #6]
 8001890:	3301      	adds	r3, #1
 8001892:	b2dc      	uxtb	r4, r3
 8001894:	4831      	ldr	r0, [pc, #196]	; (800195c <key_filter+0x114>)
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4403      	add	r3, r0
 80018a0:	440b      	add	r3, r1
 80018a2:	4622      	mov	r2, r4
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	e024      	b.n	80018f2 <key_filter+0xaa>
	}
	else{
		key_sence_count[x][y]= key_sence_count[x][y]<=0 ? 0 : key_sence_count[x][y]-1;
 80018a8:	79fa      	ldrb	r2, [r7, #7]
 80018aa:	79b9      	ldrb	r1, [r7, #6]
 80018ac:	482b      	ldr	r0, [pc, #172]	; (800195c <key_filter+0x114>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4403      	add	r3, r0
 80018b8:	440b      	add	r3, r1
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00c      	beq.n	80018da <key_filter+0x92>
 80018c0:	79fa      	ldrb	r2, [r7, #7]
 80018c2:	79b9      	ldrb	r1, [r7, #6]
 80018c4:	4825      	ldr	r0, [pc, #148]	; (800195c <key_filter+0x114>)
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4403      	add	r3, r0
 80018d0:	440b      	add	r3, r1
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b2d8      	uxtb	r0, r3
 80018d8:	e000      	b.n	80018dc <key_filter+0x94>
 80018da:	2000      	movs	r0, #0
 80018dc:	79fa      	ldrb	r2, [r7, #7]
 80018de:	79b9      	ldrb	r1, [r7, #6]
 80018e0:	4c1e      	ldr	r4, [pc, #120]	; (800195c <key_filter+0x114>)
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4423      	add	r3, r4
 80018ec:	440b      	add	r3, r1
 80018ee:	4602      	mov	r2, r0
 80018f0:	701a      	strb	r2, [r3, #0]
	}
	if(key_sence_count[x][y]==KEY_SENCE)key_input_filtered_mask[x][y] = 1;
 80018f2:	79fa      	ldrb	r2, [r7, #7]
 80018f4:	79b9      	ldrb	r1, [r7, #6]
 80018f6:	4819      	ldr	r0, [pc, #100]	; (800195c <key_filter+0x114>)
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4403      	add	r3, r0
 8001902:	440b      	add	r3, r1
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b19      	cmp	r3, #25
 8001908:	d10a      	bne.n	8001920 <key_filter+0xd8>
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	79b9      	ldrb	r1, [r7, #6]
 800190e:	4814      	ldr	r0, [pc, #80]	; (8001960 <key_filter+0x118>)
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4403      	add	r3, r0
 800191a:	440b      	add	r3, r1
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
	if(key_sence_count[x][y]==0)key_input_filtered_mask[x][y] = 0;
 8001920:	79fa      	ldrb	r2, [r7, #7]
 8001922:	79b9      	ldrb	r1, [r7, #6]
 8001924:	480d      	ldr	r0, [pc, #52]	; (800195c <key_filter+0x114>)
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4403      	add	r3, r0
 8001930:	440b      	add	r3, r1
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10a      	bne.n	800194e <key_filter+0x106>
 8001938:	79fa      	ldrb	r2, [r7, #7]
 800193a:	79b9      	ldrb	r1, [r7, #6]
 800193c:	4808      	ldr	r0, [pc, #32]	; (8001960 <key_filter+0x118>)
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4403      	add	r3, r0
 8001948:	440b      	add	r3, r1
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bc90      	pop	{r4, r7}
 8001956:	4770      	bx	lr
 8001958:	200006ec 	.word	0x200006ec
 800195c:	20000758 	.word	0x20000758
 8001960:	20000710 	.word	0x20000710

08001964 <GetPositiveFront>:

static void GetPositiveFront()
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	e047      	b.n	8001a00 <GetPositiveFront+0x9c>
		for (int row = 0; row < ROWS_COUNT; ++row) {
 8001970:	2300      	movs	r3, #0
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	e03e      	b.n	80019f4 <GetPositiveFront+0x90>
			positive_fronts[col][row] = key_input_filtered_mask[col][row]==1 && key_input_old_mask[col][row]==0 ? 1:0;
 8001976:	4927      	ldr	r1, [pc, #156]	; (8001a14 <GetPositiveFront+0xb0>)
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	18ca      	adds	r2, r1, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4413      	add	r3, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d10d      	bne.n	80019aa <GetPositiveFront+0x46>
 800198e:	4922      	ldr	r1, [pc, #136]	; (8001a18 <GetPositiveFront+0xb4>)
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	18ca      	adds	r2, r1, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <GetPositiveFront+0x46>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <GetPositiveFront+0x48>
 80019aa:	2300      	movs	r3, #0
 80019ac:	b2d8      	uxtb	r0, r3
 80019ae:	491b      	ldr	r1, [pc, #108]	; (8001a1c <GetPositiveFront+0xb8>)
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	18ca      	adds	r2, r1, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	4602      	mov	r2, r0
 80019c2:	701a      	strb	r2, [r3, #0]
			key_input_old_mask[col][row] = key_input_filtered_mask[col][row];
 80019c4:	4913      	ldr	r1, [pc, #76]	; (8001a14 <GetPositiveFront+0xb0>)
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	18ca      	adds	r2, r1, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	7818      	ldrb	r0, [r3, #0]
 80019d8:	490f      	ldr	r1, [pc, #60]	; (8001a18 <GetPositiveFront+0xb4>)
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	18ca      	adds	r2, r1, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	4413      	add	r3, r2
 80019ea:	4602      	mov	r2, r0
 80019ec:	701a      	strb	r2, [r3, #0]
		for (int row = 0; row < ROWS_COUNT; ++row) {
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	ddbd      	ble.n	8001976 <GetPositiveFront+0x12>
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3301      	adds	r3, #1
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	ddb4      	ble.n	8001970 <GetPositiveFront+0xc>
		}
	}
}
 8001a06:	bf00      	nop
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	20000710 	.word	0x20000710
 8001a18:	20000734 	.word	0x20000734
 8001a1c:	2000077c 	.word	0x2000077c

08001a20 <SendToLcd>:
	row_pointer = row_pointer>=3 ? 0 : row_pointer+1;
	SendToLcd();
}

static void SendToLcd()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	sendStr(lcd[0], 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	4809      	ldr	r0, [pc, #36]	; (8001a50 <SendToLcd+0x30>)
 8001a2a:	f001 f80b 	bl	8002a44 <sendStr>
	sendStr(lcd[1], 1, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2101      	movs	r1, #1
 8001a32:	4808      	ldr	r0, [pc, #32]	; (8001a54 <SendToLcd+0x34>)
 8001a34:	f001 f806 	bl	8002a44 <sendStr>
	sendStr(lcd[2], 2, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	4806      	ldr	r0, [pc, #24]	; (8001a58 <SendToLcd+0x38>)
 8001a3e:	f001 f801 	bl	8002a44 <sendStr>
	sendStr(lcd[3], 3, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2103      	movs	r1, #3
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <SendToLcd+0x3c>)
 8001a48:	f000 fffc 	bl	8002a44 <sendStr>
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200007a0 	.word	0x200007a0
 8001a54:	200007b4 	.word	0x200007b4
 8001a58:	200007c8 	.word	0x200007c8
 8001a5c:	200007dc 	.word	0x200007dc

08001a60 <OnKeyPress>:
};

static int get_answer(uint8_t len, uint8_t *req, uint8_t *answer);

int OnKeyPress(uint8_t *req,uint8_t req_length, uint8_t *answer)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	72fb      	strb	r3, [r7, #11]
	char *p = (char*)req;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	617b      	str	r3, [r7, #20]
	if(!strncmp(p, "Enter", strlen("Enter")))
 8001a72:	2205      	movs	r2, #5
 8001a74:	4994      	ldr	r1, [pc, #592]	; (8001cc8 <OnKeyPress+0x268>)
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f01b f94f 	bl	801cd1a <strncmp>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d107      	bne.n	8001a92 <OnKeyPress+0x32>
	{
		if(!OnEnterPressAction()) return 0;
 8001a82:	f000 f963 	bl	8001d4c <OnEnterPressAction>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f040 8104 	bne.w	8001c96 <OnKeyPress+0x236>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e116      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "Esc", strlen("Esc")))
 8001a92:	2203      	movs	r2, #3
 8001a94:	498d      	ldr	r1, [pc, #564]	; (8001ccc <OnKeyPress+0x26c>)
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f01b f93f 	bl	801cd1a <strncmp>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d107      	bne.n	8001ab2 <OnKeyPress+0x52>
	{
		if(!OnEscPressKey()) return 0;
 8001aa2:	f000 fb8b 	bl	80021bc <OnEscPressKey>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f040 80f4 	bne.w	8001c96 <OnKeyPress+0x236>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e106      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "Delete", strlen("Delete")))
 8001ab2:	2206      	movs	r2, #6
 8001ab4:	4986      	ldr	r1, [pc, #536]	; (8001cd0 <OnKeyPress+0x270>)
 8001ab6:	6978      	ldr	r0, [r7, #20]
 8001ab8:	f01b f92f 	bl	801cd1a <strncmp>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <OnKeyPress+0x70>
	{
		return get_answer(strlen("Delete"),req,answer);
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68f9      	ldr	r1, [r7, #12]
 8001ac6:	2006      	movs	r0, #6
 8001ac8:	f000 f92e 	bl	8001d28 <get_answer>
 8001acc:	4603      	mov	r3, r0
 8001ace:	e0f7      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "Up", strlen("Up")))
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4980      	ldr	r1, [pc, #512]	; (8001cd4 <OnKeyPress+0x274>)
 8001ad4:	6978      	ldr	r0, [r7, #20]
 8001ad6:	f01b f920 	bl	801cd1a <strncmp>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <OnKeyPress+0x90>
	{
		if(!OnUpPressKey())return 0;
 8001ae0:	f000 fa84 	bl	8001fec <OnUpPressKey>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 80d5 	bne.w	8001c96 <OnKeyPress+0x236>
 8001aec:	2300      	movs	r3, #0
 8001aee:	e0e7      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "Right", strlen("Right")))
 8001af0:	2205      	movs	r2, #5
 8001af2:	4979      	ldr	r1, [pc, #484]	; (8001cd8 <OnKeyPress+0x278>)
 8001af4:	6978      	ldr	r0, [r7, #20]
 8001af6:	f01b f910 	bl	801cd1a <strncmp>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <OnKeyPress+0xa4>
	{
		return 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e0dd      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "Left", strlen("Left")))
 8001b04:	2204      	movs	r2, #4
 8001b06:	4975      	ldr	r1, [pc, #468]	; (8001cdc <OnKeyPress+0x27c>)
 8001b08:	6978      	ldr	r0, [r7, #20]
 8001b0a:	f01b f906 	bl	801cd1a <strncmp>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <OnKeyPress+0xb8>
	{
		return 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e0d3      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "Down", strlen("Down")))
 8001b18:	2204      	movs	r2, #4
 8001b1a:	4971      	ldr	r1, [pc, #452]	; (8001ce0 <OnKeyPress+0x280>)
 8001b1c:	6978      	ldr	r0, [r7, #20]
 8001b1e:	f01b f8fc 	bl	801cd1a <strncmp>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d107      	bne.n	8001b38 <OnKeyPress+0xd8>
	{
		if(!OnDownPressKey())return 0;
 8001b28:	f000 fa18 	bl	8001f5c <OnDownPressKey>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 80b1 	bne.w	8001c96 <OnKeyPress+0x236>
 8001b34:	2300      	movs	r3, #0
 8001b36:	e0c3      	b.n	8001cc0 <OnKeyPress+0x260>

	}
	else if(!strncmp(p, "F1", strlen("F1")))
 8001b38:	2202      	movs	r2, #2
 8001b3a:	496a      	ldr	r1, [pc, #424]	; (8001ce4 <OnKeyPress+0x284>)
 8001b3c:	6978      	ldr	r0, [r7, #20]
 8001b3e:	f01b f8ec 	bl	801cd1a <strncmp>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <OnKeyPress+0xf8>
	{
		if(!OnF1PressKey())return 0;
 8001b48:	f000 fa98 	bl	800207c <OnF1PressKey>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f040 80a1 	bne.w	8001c96 <OnKeyPress+0x236>
 8001b54:	2300      	movs	r3, #0
 8001b56:	e0b3      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "F2", strlen("F2")))
 8001b58:	2202      	movs	r2, #2
 8001b5a:	4963      	ldr	r1, [pc, #396]	; (8001ce8 <OnKeyPress+0x288>)
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f01b f8dc 	bl	801cd1a <strncmp>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d107      	bne.n	8001b78 <OnKeyPress+0x118>
	{
		if(!OnF2PressKey())return 0;
 8001b68:	f000 fa9a 	bl	80020a0 <OnF2PressKey>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 8091 	bne.w	8001c96 <OnKeyPress+0x236>
 8001b74:	2300      	movs	r3, #0
 8001b76:	e0a3      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "F3", strlen("F3")))
 8001b78:	2202      	movs	r2, #2
 8001b7a:	495c      	ldr	r1, [pc, #368]	; (8001cec <OnKeyPress+0x28c>)
 8001b7c:	6978      	ldr	r0, [r7, #20]
 8001b7e:	f01b f8cc 	bl	801cd1a <strncmp>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d107      	bne.n	8001b98 <OnKeyPress+0x138>
	{
		if(!OnF3PressKey())return 0;
 8001b88:	f000 fac2 	bl	8002110 <OnF3PressKey>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 8081 	bne.w	8001c96 <OnKeyPress+0x236>
 8001b94:	2300      	movs	r3, #0
 8001b96:	e093      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "F4", strlen("F4")))
 8001b98:	2202      	movs	r2, #2
 8001b9a:	4955      	ldr	r1, [pc, #340]	; (8001cf0 <OnKeyPress+0x290>)
 8001b9c:	6978      	ldr	r0, [r7, #20]
 8001b9e:	f01b f8bc 	bl	801cd1a <strncmp>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d106      	bne.n	8001bb6 <OnKeyPress+0x156>
	{
		if(!OnF4PressKey())return 0;
 8001ba8:	f000 faea 	bl	8002180 <OnF4PressKey>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d171      	bne.n	8001c96 <OnKeyPress+0x236>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e084      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "NumPad0", strlen("NumPad0")))
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	494e      	ldr	r1, [pc, #312]	; (8001cf4 <OnKeyPress+0x294>)
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f01b f8ad 	bl	801cd1a <strncmp>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <OnKeyPress+0x16a>
	{
		return 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e07a      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "NumPad1", strlen("NumPad1")))
 8001bca:	2207      	movs	r2, #7
 8001bcc:	494a      	ldr	r1, [pc, #296]	; (8001cf8 <OnKeyPress+0x298>)
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	f01b f8a3 	bl	801cd1a <strncmp>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <OnKeyPress+0x17e>
	{
		return 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e070      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "NumPad2", strlen("NumPad2")))
 8001bde:	2207      	movs	r2, #7
 8001be0:	4946      	ldr	r1, [pc, #280]	; (8001cfc <OnKeyPress+0x29c>)
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f01b f899 	bl	801cd1a <strncmp>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <OnKeyPress+0x192>
	{
		return 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e066      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "NumPad3", strlen("NumPad3")))
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	4942      	ldr	r1, [pc, #264]	; (8001d00 <OnKeyPress+0x2a0>)
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f01b f88f 	bl	801cd1a <strncmp>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <OnKeyPress+0x1a6>
	{
		return 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e05c      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "NumPad4", strlen("NumPad4")))
 8001c06:	2207      	movs	r2, #7
 8001c08:	493e      	ldr	r1, [pc, #248]	; (8001d04 <OnKeyPress+0x2a4>)
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f01b f885 	bl	801cd1a <strncmp>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <OnKeyPress+0x1ba>
	{
		return 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e052      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "NumPad5", strlen("NumPad5")))
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	493a      	ldr	r1, [pc, #232]	; (8001d08 <OnKeyPress+0x2a8>)
 8001c1e:	6978      	ldr	r0, [r7, #20]
 8001c20:	f01b f87b 	bl	801cd1a <strncmp>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <OnKeyPress+0x1ce>
	{
		return 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e048      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "NumPad6", strlen("NumPad6")))
 8001c2e:	2207      	movs	r2, #7
 8001c30:	4936      	ldr	r1, [pc, #216]	; (8001d0c <OnKeyPress+0x2ac>)
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f01b f871 	bl	801cd1a <strncmp>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <OnKeyPress+0x1e2>
	{
		return 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e03e      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "NumPad7", strlen("NumPad7")))
 8001c42:	2207      	movs	r2, #7
 8001c44:	4932      	ldr	r1, [pc, #200]	; (8001d10 <OnKeyPress+0x2b0>)
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f01b f867 	bl	801cd1a <strncmp>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <OnKeyPress+0x1f6>
	{
		return 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e034      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "NumPad8", strlen("NumPad8")))
 8001c56:	2207      	movs	r2, #7
 8001c58:	492e      	ldr	r1, [pc, #184]	; (8001d14 <OnKeyPress+0x2b4>)
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f01b f85d 	bl	801cd1a <strncmp>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <OnKeyPress+0x20a>
	{
		return 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e02a      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "NumPad9", strlen("NumPad9")))
 8001c6a:	2207      	movs	r2, #7
 8001c6c:	492a      	ldr	r1, [pc, #168]	; (8001d18 <OnKeyPress+0x2b8>)
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f01b f853 	bl	801cd1a <strncmp>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <OnKeyPress+0x21e>
	{
		return 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e020      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else if(!strncmp(p, "Dec", strlen("Dec")))
 8001c7e:	2203      	movs	r2, #3
 8001c80:	4926      	ldr	r1, [pc, #152]	; (8001d1c <OnKeyPress+0x2bc>)
 8001c82:	6978      	ldr	r0, [r7, #20]
 8001c84:	f01b f849 	bl	801cd1a <strncmp>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <OnKeyPress+0x232>
	{
		return 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e016      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else return 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e014      	b.n	8001cc0 <OnKeyPress+0x260>
	memcpy(answer,lcdAnswer,80);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <OnKeyPress+0x2c0>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	2350      	movs	r3, #80	; 0x50
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f01a fdf7 	bl	801c894 <memcpy>
	if(currentCursorPosition==-1)
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <OnKeyPress+0x2c4>)
 8001ca8:	f993 3000 	ldrsb.w	r3, [r3]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d102      	bne.n	8001cb8 <OnKeyPress+0x258>
	{
		//answer[80] = 255;
		return -1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e003      	b.n	8001cc0 <OnKeyPress+0x260>
	}
	else
	{
		//answer[80] = currentCursorPosition+40;
	}
	return currentCursorPosition+40;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <OnKeyPress+0x2c4>)
 8001cba:	f993 3000 	ldrsb.w	r3, [r3]
 8001cbe:	3328      	adds	r3, #40	; 0x28
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	0801deb8 	.word	0x0801deb8
 8001ccc:	0801dec0 	.word	0x0801dec0
 8001cd0:	0801dec4 	.word	0x0801dec4
 8001cd4:	0801decc 	.word	0x0801decc
 8001cd8:	0801ded0 	.word	0x0801ded0
 8001cdc:	0801ded8 	.word	0x0801ded8
 8001ce0:	0801dee0 	.word	0x0801dee0
 8001ce4:	0801dee8 	.word	0x0801dee8
 8001ce8:	0801deec 	.word	0x0801deec
 8001cec:	0801def0 	.word	0x0801def0
 8001cf0:	0801def4 	.word	0x0801def4
 8001cf4:	0801def8 	.word	0x0801def8
 8001cf8:	0801df00 	.word	0x0801df00
 8001cfc:	0801df08 	.word	0x0801df08
 8001d00:	0801df10 	.word	0x0801df10
 8001d04:	0801df18 	.word	0x0801df18
 8001d08:	0801df20 	.word	0x0801df20
 8001d0c:	0801df28 	.word	0x0801df28
 8001d10:	0801df30 	.word	0x0801df30
 8001d14:	0801df38 	.word	0x0801df38
 8001d18:	0801df40 	.word	0x0801df40
 8001d1c:	0801df48 	.word	0x0801df48
 8001d20:	20000850 	.word	0x20000850
 8001d24:	200000a0 	.word	0x200000a0

08001d28 <get_answer>:

static int get_answer(uint8_t len, uint8_t *req, uint8_t *answer)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	73fb      	strb	r3, [r7, #15]
	memcpy(answer,req,len);
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68b9      	ldr	r1, [r7, #8]
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f01a fda9 	bl	801c894 <memcpy>
	return len;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <OnEnterPressAction>:

static uint8_t OnEnterPressAction()
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
	Row *par = NULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
	if(currentParameters == NULL)
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <OnEnterPressAction+0xc0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d122      	bne.n	8001da4 <OnEnterPressAction+0x58>
	{
		currentCursorPosition = -1;
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <OnEnterPressAction+0xc4>)
 8001d60:	22ff      	movs	r2, #255	; 0xff
 8001d62:	701a      	strb	r2, [r3, #0]
		currentParameters = indication_rows;
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <OnEnterPressAction+0xc0>)
 8001d66:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <OnEnterPressAction+0xc8>)
 8001d68:	601a      	str	r2, [r3, #0]
		paramIndex = 0;
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <OnEnterPressAction+0xcc>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
		currentParamLength = sizeof(indication_rows)/sizeof(Row);
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <OnEnterPressAction+0xd0>)
 8001d72:	2202      	movs	r2, #2
 8001d74:	701a      	strb	r2, [r3, #0]
		editMode = 0;
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <OnEnterPressAction+0xd4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
		groupParamName = indicationName;
 8001d7c:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <OnEnterPressAction+0xd8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a29      	ldr	r2, [pc, #164]	; (8001e28 <OnEnterPressAction+0xdc>)
 8001d82:	6013      	str	r3, [r2, #0]
		groupParamNameLength = strlen(indicationName);
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <OnEnterPressAction+0xd8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fa21 	bl	80001d0 <strlen>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <OnEnterPressAction+0xe0>)
 8001d94:	701a      	strb	r2, [r3, #0]
		ShowParameter(currentParameters);
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <OnEnterPressAction+0xc0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 fa52 	bl	8002244 <ShowParameter>
		return 1;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e02f      	b.n	8001e04 <OnEnterPressAction+0xb8>
	}
	else if(currentParameters!=Errors)// В случае если находимся в параметре
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <OnEnterPressAction+0xc0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <OnEnterPressAction+0xe4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d029      	beq.n	8001e02 <OnEnterPressAction+0xb6>
	{
		par = currentParameters+paramIndex;
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <OnEnterPressAction+0xc0>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <OnEnterPressAction+0xcc>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	4619      	mov	r1, r3
 8001db8:	460b      	mov	r3, r1
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	440b      	add	r3, r1
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	607b      	str	r3, [r7, #4]
		if(!editMode)// Если находимся не в режиме редактирования
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <OnEnterPressAction+0xd4>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d11a      	bne.n	8001e02 <OnEnterPressAction+0xb6>
		{

			if(par->isEdited)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	791b      	ldrb	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d016      	beq.n	8001e02 <OnEnterPressAction+0xb6>
			{
				Clear();
 8001dd4:	f000 f82e 	bl	8001e34 <Clear>
				Print(par,2);
 8001dd8:	2102      	movs	r1, #2
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fcca 	bl	8002774 <Print>
//				editedValue = lcdAnswer[2]+par->param_pos;
//				int hhh = strlen(editedValue);
				if(!par->isEnum)currentCursorPosition = par->param_pos;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7a1b      	ldrb	r3, [r3, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d104      	bne.n	8001df2 <OnEnterPressAction+0xa6>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	79db      	ldrb	r3, [r3, #7]
 8001dec:	b25a      	sxtb	r2, r3
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <OnEnterPressAction+0xc4>)
 8001df0:	701a      	strb	r2, [r3, #0]
				editMode = 1;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <OnEnterPressAction+0xd4>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
				ShowParameter(par);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fa23 	bl	8002244 <ShowParameter>
				return 1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <OnEnterPressAction+0xb8>
			}
		}
	}
	return 0;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200007f0 	.word	0x200007f0
 8001e10:	200000a0 	.word	0x200000a0
 8001e14:	20000294 	.word	0x20000294
 8001e18:	200007f8 	.word	0x200007f8
 8001e1c:	200007fa 	.word	0x200007fa
 8001e20:	200007f9 	.word	0x200007f9
 8001e24:	2000009c 	.word	0x2000009c
 8001e28:	200007f4 	.word	0x200007f4
 8001e2c:	200007fb 	.word	0x200007fb
 8001e30:	200000fc 	.word	0x200000fc

08001e34 <Clear>:



static void Clear()
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; ++i) {
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	e016      	b.n	8001e6e <Clear+0x3a>
		for (int j = 0; j < 20; ++j) {
 8001e40:	2300      	movs	r3, #0
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	e00d      	b.n	8001e62 <Clear+0x2e>
			lcdAnswer[i][j] = 0;
 8001e46:	490f      	ldr	r1, [pc, #60]	; (8001e84 <Clear+0x50>)
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	18ca      	adds	r2, r1, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 20; ++j) {
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b13      	cmp	r3, #19
 8001e66:	ddee      	ble.n	8001e46 <Clear+0x12>
	for (int i = 0; i < 4; ++i) {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	dde5      	ble.n	8001e40 <Clear+0xc>
		}
	}
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000850 	.word	0x20000850

08001e88 <ShowMainDisplay>:

static uint8_t ShowMainDisplay()
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	Clear();
 8001e8c:	f7ff ffd2 	bl	8001e34 <Clear>
	if(meas_data.automat_mode)
 8001e90:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <ShowMainDisplay+0x9c>)
 8001e92:	8a5b      	ldrh	r3, [r3, #18]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d010      	beq.n	8001eba <ShowMainDisplay+0x32>
	{
		memcpy(lcdAnswer[0],"Auto mode ON",strlen("Auto mode ON"));
 8001e98:	220c      	movs	r2, #12
 8001e9a:	4923      	ldr	r1, [pc, #140]	; (8001f28 <ShowMainDisplay+0xa0>)
 8001e9c:	4823      	ldr	r0, [pc, #140]	; (8001f2c <ShowMainDisplay+0xa4>)
 8001e9e:	f01a fcf9 	bl	801c894 <memcpy>
		if(meas_data.probotbor_ready)sprintf(lcdAnswer[2],"Next sel. in %d s",meas_data.toNextOtborTime);
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <ShowMainDisplay+0x9c>)
 8001ea4:	899b      	ldrh	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <ShowMainDisplay+0x3c>
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <ShowMainDisplay+0x9c>)
 8001eac:	8a9b      	ldrh	r3, [r3, #20]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	491f      	ldr	r1, [pc, #124]	; (8001f30 <ShowMainDisplay+0xa8>)
 8001eb2:	4820      	ldr	r0, [pc, #128]	; (8001f34 <ShowMainDisplay+0xac>)
 8001eb4:	f01a fece 	bl	801cc54 <siprintf>
 8001eb8:	e004      	b.n	8001ec4 <ShowMainDisplay+0x3c>
	}
	else
	{
		memcpy(lcdAnswer[0],"Auto mode OFF",strlen("Auto mode OFF"));
 8001eba:	220d      	movs	r2, #13
 8001ebc:	491e      	ldr	r1, [pc, #120]	; (8001f38 <ShowMainDisplay+0xb0>)
 8001ebe:	481b      	ldr	r0, [pc, #108]	; (8001f2c <ShowMainDisplay+0xa4>)
 8001ec0:	f01a fce8 	bl	801c894 <memcpy>
	}

	if(meas_data.probotbor_ready)
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <ShowMainDisplay+0x9c>)
 8001ec6:	899b      	ldrh	r3, [r3, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <ShowMainDisplay+0x50>
	{
		memcpy(lcdAnswer[1],"Ready for selection",strlen("Ready for selection"));
 8001ecc:	2213      	movs	r2, #19
 8001ece:	491b      	ldr	r1, [pc, #108]	; (8001f3c <ShowMainDisplay+0xb4>)
 8001ed0:	481b      	ldr	r0, [pc, #108]	; (8001f40 <ShowMainDisplay+0xb8>)
 8001ed2:	f01a fcdf 	bl	801c894 <memcpy>
 8001ed6:	e01c      	b.n	8001f12 <ShowMainDisplay+0x8a>
	}
	else if(meas_data.probotbor_busy)
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <ShowMainDisplay+0x9c>)
 8001eda:	89db      	ldrh	r3, [r3, #14]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <ShowMainDisplay+0x64>
	{
		memcpy(lcdAnswer[1],"Executing selection",strlen("Executing selection"));
 8001ee0:	2213      	movs	r2, #19
 8001ee2:	4918      	ldr	r1, [pc, #96]	; (8001f44 <ShowMainDisplay+0xbc>)
 8001ee4:	4816      	ldr	r0, [pc, #88]	; (8001f40 <ShowMainDisplay+0xb8>)
 8001ee6:	f01a fcd5 	bl	801c894 <memcpy>
 8001eea:	e012      	b.n	8001f12 <ShowMainDisplay+0x8a>
	}
	else if(meas_data.vozvrat_probotbor_busy)
 8001eec:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <ShowMainDisplay+0x9c>)
 8001eee:	8a1b      	ldrh	r3, [r3, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <ShowMainDisplay+0x78>
	{
		memcpy(lcdAnswer[1],"Executing return",strlen("Executing return"));
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	4914      	ldr	r1, [pc, #80]	; (8001f48 <ShowMainDisplay+0xc0>)
 8001ef8:	4811      	ldr	r0, [pc, #68]	; (8001f40 <ShowMainDisplay+0xb8>)
 8001efa:	f01a fccb 	bl	801c894 <memcpy>
 8001efe:	e008      	b.n	8001f12 <ShowMainDisplay+0x8a>
	}
	else if(*((uint16_t*)&meas_data.errors))
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <ShowMainDisplay+0xc4>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d004      	beq.n	8001f12 <ShowMainDisplay+0x8a>
	{
		memcpy(lcdAnswer[1],"Errors, press F4",strlen("Errors, press F4"));
 8001f08:	2210      	movs	r2, #16
 8001f0a:	4911      	ldr	r1, [pc, #68]	; (8001f50 <ShowMainDisplay+0xc8>)
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <ShowMainDisplay+0xb8>)
 8001f0e:	f01a fcc1 	bl	801c894 <memcpy>
	}
	memcpy(lcdAnswer[3]+3,"Indication->Enter",strlen("Indication->Enter"));
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <ShowMainDisplay+0xcc>)
 8001f14:	2211      	movs	r2, #17
 8001f16:	4910      	ldr	r1, [pc, #64]	; (8001f58 <ShowMainDisplay+0xd0>)
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f01a fcbb 	bl	801c894 <memcpy>
	return 1;
 8001f1e:	2301      	movs	r3, #1

}
 8001f20:	4618      	mov	r0, r3
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000c5c 	.word	0x20000c5c
 8001f28:	0801df4c 	.word	0x0801df4c
 8001f2c:	20000850 	.word	0x20000850
 8001f30:	0801df5c 	.word	0x0801df5c
 8001f34:	20000878 	.word	0x20000878
 8001f38:	0801df70 	.word	0x0801df70
 8001f3c:	0801df80 	.word	0x0801df80
 8001f40:	20000864 	.word	0x20000864
 8001f44:	0801df94 	.word	0x0801df94
 8001f48:	0801dfa8 	.word	0x0801dfa8
 8001f4c:	20000c74 	.word	0x20000c74
 8001f50:	0801dfbc 	.word	0x0801dfbc
 8001f54:	2000088f 	.word	0x2000088f
 8001f58:	0801dfd0 	.word	0x0801dfd0

08001f5c <OnDownPressKey>:


static uint8_t OnDownPressKey()
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	if(currentParameters == NULL)return 0; // Если находимся на главном экране, то не реагируем
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <OnDownPressKey+0x7c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <OnDownPressKey+0x10>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e032      	b.n	8001fd2 <OnDownPressKey+0x76>
	if(editMode)return 0; // Если находимся в режиме редактирования, то не реагируем
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <OnDownPressKey+0x80>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <OnDownPressKey+0x1c>
 8001f74:	2300      	movs	r3, #0
 8001f76:	e02c      	b.n	8001fd2 <OnDownPressKey+0x76>
	if(paramIndex>=currentParamLength-1)return 0;// Если курсор находится внизу, не реагируем
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <OnDownPressKey+0x84>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <OnDownPressKey+0x88>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	429a      	cmp	r2, r3
 8001f86:	db01      	blt.n	8001f8c <OnDownPressKey+0x30>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e022      	b.n	8001fd2 <OnDownPressKey+0x76>
	if(currentParameters == Errors)
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <OnDownPressKey+0x7c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <OnDownPressKey+0x8c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d109      	bne.n	8001faa <OnDownPressKey+0x4e>
	{
		paramIndex++;
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <OnDownPressKey+0x84>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <OnDownPressKey+0x84>)
 8001fa0:	701a      	strb	r2, [r3, #0]
		return ShowErrors();
 8001fa2:	f000 fa1d 	bl	80023e0 <ShowErrors>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	e013      	b.n	8001fd2 <OnDownPressKey+0x76>
	}
	paramIndex++;
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <OnDownPressKey+0x84>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <OnDownPressKey+0x84>)
 8001fb4:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters+paramIndex);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <OnDownPressKey+0x7c>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <OnDownPressKey+0x84>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	440b      	add	r3, r1
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f93a 	bl	8002244 <ShowParameter>
	return 1;
 8001fd0:	2301      	movs	r3, #1
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200007f0 	.word	0x200007f0
 8001fdc:	200007f9 	.word	0x200007f9
 8001fe0:	200007f8 	.word	0x200007f8
 8001fe4:	200007fa 	.word	0x200007fa
 8001fe8:	200000fc 	.word	0x200000fc

08001fec <OnUpPressKey>:

static uint8_t OnUpPressKey()
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	if(currentParameters == NULL)return 0; // Если находимся на главном экране, то не реагируем
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <OnUpPressKey+0x80>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <OnUpPressKey+0x10>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e035      	b.n	8002068 <OnUpPressKey+0x7c>
	if(editMode)return 0; // Если находимся в режиме редактирования, то не реагируем
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <OnUpPressKey+0x84>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <OnUpPressKey+0x1c>
 8002004:	2300      	movs	r3, #0
 8002006:	e02f      	b.n	8002068 <OnUpPressKey+0x7c>
	if(paramIndex<=0)return 0;// Если курсор находится ddth[e, не реагируем
 8002008:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <OnUpPressKey+0x88>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <OnUpPressKey+0x28>
 8002010:	2300      	movs	r3, #0
 8002012:	e029      	b.n	8002068 <OnUpPressKey+0x7c>
	if(currentParameters == Errors)
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <OnUpPressKey+0x80>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a17      	ldr	r2, [pc, #92]	; (8002078 <OnUpPressKey+0x8c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d110      	bne.n	8002040 <OnUpPressKey+0x54>
	{
		paramIndex = paramIndex == 0 ? paramIndex : paramIndex -1;
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <OnUpPressKey+0x88>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <OnUpPressKey+0x44>
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <OnUpPressKey+0x88>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	3b01      	subs	r3, #1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	e001      	b.n	8002034 <OnUpPressKey+0x48>
 8002030:	4b10      	ldr	r3, [pc, #64]	; (8002074 <OnUpPressKey+0x88>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <OnUpPressKey+0x88>)
 8002036:	7013      	strb	r3, [r2, #0]
		return ShowErrors();
 8002038:	f000 f9d2 	bl	80023e0 <ShowErrors>
 800203c:	4603      	mov	r3, r0
 800203e:	e013      	b.n	8002068 <OnUpPressKey+0x7c>

	}
	paramIndex--;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <OnUpPressKey+0x88>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	3b01      	subs	r3, #1
 8002046:	b2da      	uxtb	r2, r3
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <OnUpPressKey+0x88>)
 800204a:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters+paramIndex);
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <OnUpPressKey+0x80>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <OnUpPressKey+0x88>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	460b      	mov	r3, r1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	440b      	add	r3, r1
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f8ef 	bl	8002244 <ShowParameter>
	return 1;
 8002066:	2301      	movs	r3, #1
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200007f0 	.word	0x200007f0
 8002070:	200007f9 	.word	0x200007f9
 8002074:	200007f8 	.word	0x200007f8
 8002078:	200000fc 	.word	0x200000fc

0800207c <OnF1PressKey>:


static uint8_t OnF1PressKey()
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <OnF1PressKey+0x1c>)
 8002082:	22ff      	movs	r2, #255	; 0xff
 8002084:	701a      	strb	r2, [r3, #0]
	currentParameters = NULL;
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <OnF1PressKey+0x20>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
	return ShowMainDisplay();
 800208c:	f7ff fefc 	bl	8001e88 <ShowMainDisplay>
 8002090:	4603      	mov	r3, r0
}
 8002092:	4618      	mov	r0, r3
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200000a0 	.word	0x200000a0
 800209c:	200007f0 	.word	0x200007f0

080020a0 <OnF2PressKey>:

static uint8_t OnF2PressKey()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <OnF2PressKey+0x4c>)
 80020a6:	22ff      	movs	r2, #255	; 0xff
 80020a8:	701a      	strb	r2, [r3, #0]
	currentParameters = probotbor_parameters;
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <OnF2PressKey+0x50>)
 80020ac:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <OnF2PressKey+0x54>)
 80020ae:	601a      	str	r2, [r3, #0]
	paramIndex = 0;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <OnF2PressKey+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
	currentParamLength = sizeof(probotbor_parameters)/sizeof(Row);
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <OnF2PressKey+0x5c>)
 80020b8:	2203      	movs	r2, #3
 80020ba:	701a      	strb	r2, [r3, #0]
	editMode = 0;
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <OnF2PressKey+0x60>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
	groupParamName = processParametersName;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <OnF2PressKey+0x64>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a10      	ldr	r2, [pc, #64]	; (8002108 <OnF2PressKey+0x68>)
 80020c8:	6013      	str	r3, [r2, #0]
	groupParamNameLength = strlen(processParametersName);
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <OnF2PressKey+0x64>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe f87e 	bl	80001d0 <strlen>
 80020d4:	4603      	mov	r3, r0
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <OnF2PressKey+0x6c>)
 80020da:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters);
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <OnF2PressKey+0x50>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 f8af 	bl	8002244 <ShowParameter>
	return 1;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200000a0 	.word	0x200000a0
 80020f0:	200007f0 	.word	0x200007f0
 80020f4:	200001d4 	.word	0x200001d4
 80020f8:	200007f8 	.word	0x200007f8
 80020fc:	200007fa 	.word	0x200007fa
 8002100:	200007f9 	.word	0x200007f9
 8002104:	20000098 	.word	0x20000098
 8002108:	200007f4 	.word	0x200007f4
 800210c:	200007fb 	.word	0x200007fb

08002110 <OnF3PressKey>:

static uint8_t OnF3PressKey()
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <OnF3PressKey+0x4c>)
 8002116:	22ff      	movs	r2, #255	; 0xff
 8002118:	701a      	strb	r2, [r3, #0]
	currentParameters = commParameters;
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <OnF3PressKey+0x50>)
 800211c:	4a11      	ldr	r2, [pc, #68]	; (8002164 <OnF3PressKey+0x54>)
 800211e:	601a      	str	r2, [r3, #0]
	paramIndex = 0;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <OnF3PressKey+0x58>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
	currentParamLength = sizeof(commParameters)/sizeof(Row);
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <OnF3PressKey+0x5c>)
 8002128:	2205      	movs	r2, #5
 800212a:	701a      	strb	r2, [r3, #0]
	editMode = 0;
 800212c:	4b10      	ldr	r3, [pc, #64]	; (8002170 <OnF3PressKey+0x60>)
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
	groupParamName = commParametersName;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <OnF3PressKey+0x64>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a10      	ldr	r2, [pc, #64]	; (8002178 <OnF3PressKey+0x68>)
 8002138:	6013      	str	r3, [r2, #0]
	groupParamNameLength = strlen(commParametersName);
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <OnF3PressKey+0x64>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe f846 	bl	80001d0 <strlen>
 8002144:	4603      	mov	r3, r0
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <OnF3PressKey+0x6c>)
 800214a:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters);
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <OnF3PressKey+0x50>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f877 	bl	8002244 <ShowParameter>
	return 1;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200000a0 	.word	0x200000a0
 8002160:	200007f0 	.word	0x200007f0
 8002164:	2000021c 	.word	0x2000021c
 8002168:	200007f8 	.word	0x200007f8
 800216c:	200007fa 	.word	0x200007fa
 8002170:	200007f9 	.word	0x200007f9
 8002174:	20000094 	.word	0x20000094
 8002178:	200007f4 	.word	0x200007f4
 800217c:	200007fb 	.word	0x200007fb

08002180 <OnF4PressKey>:

static uint8_t OnF4PressKey()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <OnF4PressKey+0x28>)
 8002186:	22ff      	movs	r2, #255	; 0xff
 8002188:	701a      	strb	r2, [r3, #0]
	currentParameters = Errors;
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <OnF4PressKey+0x2c>)
 800218c:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <OnF4PressKey+0x30>)
 800218e:	601a      	str	r2, [r3, #0]
	editMode  = 0;
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <OnF4PressKey+0x34>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
	paramIndex = 0;
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <OnF4PressKey+0x38>)
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
	return ShowErrors();
 800219c:	f000 f920 	bl	80023e0 <ShowErrors>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200000a0 	.word	0x200000a0
 80021ac:	200007f0 	.word	0x200007f0
 80021b0:	200000fc 	.word	0x200000fc
 80021b4:	200007f9 	.word	0x200007f9
 80021b8:	200007f8 	.word	0x200007f8

080021bc <OnEscPressKey>:

static uint8_t OnEscPressKey()
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 80021c0:	4b1a      	ldr	r3, [pc, #104]	; (800222c <OnEscPressKey+0x70>)
 80021c2:	22ff      	movs	r2, #255	; 0xff
 80021c4:	701a      	strb	r2, [r3, #0]
	if(currentParameters==NULL)return 0;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <OnEscPressKey+0x74>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <OnEscPressKey+0x16>
 80021ce:	2300      	movs	r3, #0
 80021d0:	e029      	b.n	8002226 <OnEscPressKey+0x6a>
	if(currentParameters==Errors)return 0;
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <OnEscPressKey+0x74>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a17      	ldr	r2, [pc, #92]	; (8002234 <OnEscPressKey+0x78>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <OnEscPressKey+0x24>
 80021dc:	2300      	movs	r3, #0
 80021de:	e022      	b.n	8002226 <OnEscPressKey+0x6a>
	if(currentParameters==indication_rows)
 80021e0:	4b13      	ldr	r3, [pc, #76]	; (8002230 <OnEscPressKey+0x74>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <OnEscPressKey+0x7c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d106      	bne.n	80021f8 <OnEscPressKey+0x3c>
	{
		currentParameters = NULL;
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <OnEscPressKey+0x74>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
		return ShowMainDisplay();
 80021f0:	f7ff fe4a 	bl	8001e88 <ShowMainDisplay>
 80021f4:	4603      	mov	r3, r0
 80021f6:	e016      	b.n	8002226 <OnEscPressKey+0x6a>
	}
	else if(editMode)
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <OnEscPressKey+0x80>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d011      	beq.n	8002224 <OnEscPressKey+0x68>
	{
		editMode = 0;
 8002200:	4b0e      	ldr	r3, [pc, #56]	; (800223c <OnEscPressKey+0x80>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
		ShowParameter(currentParameters+paramIndex);
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <OnEscPressKey+0x74>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <OnEscPressKey+0x84>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	460b      	mov	r3, r1
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	440b      	add	r3, r1
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f812 	bl	8002244 <ShowParameter>
		return 1;
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <OnEscPressKey+0x6a>
	}
	return 0;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200000a0 	.word	0x200000a0
 8002230:	200007f0 	.word	0x200007f0
 8002234:	200000fc 	.word	0x200000fc
 8002238:	20000294 	.word	0x20000294
 800223c:	200007f9 	.word	0x200007f9
 8002240:	200007f8 	.word	0x200007f8

08002244 <ShowParameter>:

static void ShowParameter(Row *parameter)
{
 8002244:	b5b0      	push	{r4, r5, r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	Clear();
 800224c:	f7ff fdf2 	bl	8001e34 <Clear>
	memcpy(lcdAnswer[0],groupParamName,groupParamNameLength); // Имя группы параметра
 8002250:	4b4a      	ldr	r3, [pc, #296]	; (800237c <ShowParameter+0x138>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a4a      	ldr	r2, [pc, #296]	; (8002380 <ShowParameter+0x13c>)
 8002256:	7812      	ldrb	r2, [r2, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	484a      	ldr	r0, [pc, #296]	; (8002384 <ShowParameter+0x140>)
 800225c:	f01a fb1a 	bl	801c894 <memcpy>
	memcpy(lcdAnswer[1],parameter->name,parameter->name_len); // Имя  параметра
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6819      	ldr	r1, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	795b      	ldrb	r3, [r3, #5]
 8002268:	461a      	mov	r2, r3
 800226a:	4847      	ldr	r0, [pc, #284]	; (8002388 <ShowParameter+0x144>)
 800226c:	f01a fb12 	bl	801c894 <memcpy>
	if(parameter->isEnum)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7a1b      	ldrb	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d04c      	beq.n	8002312 <ShowParameter+0xce>
	{
		float value = 0;
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
		switch (parameter->type) {
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7d5b      	ldrb	r3, [r3, #21]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <ShowParameter+0x48>
 8002286:	2b01      	cmp	r3, #1
 8002288:	d00a      	beq.n	80022a0 <ShowParameter+0x5c>
				break;
			case ROW_UINT:
				value = *((uint32_t*)parameter->data);
				break;
			default:
				break;
 800228a:	e013      	b.n	80022b4 <ShowParameter+0x70>
				value = *((uint16_t*)parameter->data);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800229a:	edc7 7a03 	vstr	s15, [r7, #12]
				break;
 800229e:	e009      	b.n	80022b4 <ShowParameter+0x70>
				value = *((uint32_t*)parameter->data);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ae:	edc7 7a03 	vstr	s15, [r7, #12]
				break;
 80022b2:	bf00      	nop
		}
		Dictionary *pair = FindDictionaryFromValue(value, parameter->enums, parameter->enums_len);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7d1b      	ldrb	r3, [r3, #20]
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80022c4:	f000 fa22 	bl	800270c <FindDictionaryFromValue>
 80022c8:	60b8      	str	r0, [r7, #8]
		if(pair == NULL)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10d      	bne.n	80022ec <ShowParameter+0xa8>
		{
			strncpy(lcdAnswer[2]+parameter->param_pos,"Undefined", strlen("Undefined"));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	79db      	ldrb	r3, [r3, #7]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <ShowParameter+0x148>)
 80022d8:	4413      	add	r3, r2
 80022da:	492d      	ldr	r1, [pc, #180]	; (8002390 <ShowParameter+0x14c>)
 80022dc:	461a      	mov	r2, r3
 80022de:	460b      	mov	r3, r1
 80022e0:	cb03      	ldmia	r3!, {r0, r1}
 80022e2:	6010      	str	r0, [r2, #0]
 80022e4:	6051      	str	r1, [r2, #4]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	7213      	strb	r3, [r2, #8]
 80022ea:	e016      	b.n	800231a <ShowParameter+0xd6>
		}
		else
		{
			strncpy(lcdAnswer[2]+parameter->param_pos,pair->name, strlen(pair->name));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	79db      	ldrb	r3, [r3, #7]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <ShowParameter+0x148>)
 80022f4:	18d4      	adds	r4, r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	685d      	ldr	r5, [r3, #4]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fd ff66 	bl	80001d0 <strlen>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	4629      	mov	r1, r5
 800230a:	4620      	mov	r0, r4
 800230c:	f01a fd19 	bl	801cd42 <strncpy>
 8002310:	e003      	b.n	800231a <ShowParameter+0xd6>
		}
	}
	else
	{
		Print(parameter, 2);
 8002312:	2102      	movs	r1, #2
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fa2d 	bl	8002774 <Print>
	}

	if(parameter->isEdited)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	791b      	ldrb	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01a      	beq.n	8002358 <ShowParameter+0x114>
	{
		if(!editMode)
 8002322:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <ShowParameter+0x150>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <ShowParameter+0xfa>
		{
			strncpy(lcdAnswer[3]+9,"Edit->Enter", strlen("Edit->Enter"));
 800232a:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <ShowParameter+0x154>)
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <ShowParameter+0x158>)
 800232e:	cb03      	ldmia	r3!, {r0, r1}
 8002330:	6010      	str	r0, [r2, #0]
 8002332:	6051      	str	r1, [r2, #4]
 8002334:	8819      	ldrh	r1, [r3, #0]
 8002336:	789b      	ldrb	r3, [r3, #2]
 8002338:	8111      	strh	r1, [r2, #8]
 800233a:	7293      	strb	r3, [r2, #10]
	}
	else if(currentParameters == indication_rows)
	{
		strncpy(lcdAnswer[3]+7,"To main-> Esc", strlen("To main-> Esc"));
	}
}
 800233c:	e01a      	b.n	8002374 <ShowParameter+0x130>
			strncpy(lcdAnswer[3],"Back->Esc", strlen("Back->Esc"));
 800233e:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <ShowParameter+0x15c>)
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <ShowParameter+0x160>)
 8002342:	ca07      	ldmia	r2, {r0, r1, r2}
 8002344:	c303      	stmia	r3!, {r0, r1}
 8002346:	701a      	strb	r2, [r3, #0]
			strncpy(lcdAnswer[3]+11,"Ok->Enter", strlen("Ok->Enter"));
 8002348:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <ShowParameter+0x164>)
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <ShowParameter+0x168>)
 800234c:	cb03      	ldmia	r3!, {r0, r1}
 800234e:	6010      	str	r0, [r2, #0]
 8002350:	6051      	str	r1, [r2, #4]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	7213      	strb	r3, [r2, #8]
}
 8002356:	e00d      	b.n	8002374 <ShowParameter+0x130>
	else if(currentParameters == indication_rows)
 8002358:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <ShowParameter+0x16c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <ShowParameter+0x170>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d108      	bne.n	8002374 <ShowParameter+0x130>
		strncpy(lcdAnswer[3]+7,"To main-> Esc", strlen("To main-> Esc"));
 8002362:	4a15      	ldr	r2, [pc, #84]	; (80023b8 <ShowParameter+0x174>)
 8002364:	4b15      	ldr	r3, [pc, #84]	; (80023bc <ShowParameter+0x178>)
 8002366:	4614      	mov	r4, r2
 8002368:	cb07      	ldmia	r3!, {r0, r1, r2}
 800236a:	6020      	str	r0, [r4, #0]
 800236c:	6061      	str	r1, [r4, #4]
 800236e:	60a2      	str	r2, [r4, #8]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	7323      	strb	r3, [r4, #12]
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bdb0      	pop	{r4, r5, r7, pc}
 800237c:	200007f4 	.word	0x200007f4
 8002380:	200007fb 	.word	0x200007fb
 8002384:	20000850 	.word	0x20000850
 8002388:	20000864 	.word	0x20000864
 800238c:	20000878 	.word	0x20000878
 8002390:	0801dfe4 	.word	0x0801dfe4
 8002394:	200007f9 	.word	0x200007f9
 8002398:	20000895 	.word	0x20000895
 800239c:	0801dff0 	.word	0x0801dff0
 80023a0:	2000088c 	.word	0x2000088c
 80023a4:	0801dffc 	.word	0x0801dffc
 80023a8:	20000897 	.word	0x20000897
 80023ac:	0801e008 	.word	0x0801e008
 80023b0:	200007f0 	.word	0x200007f0
 80023b4:	20000294 	.word	0x20000294
 80023b8:	20000893 	.word	0x20000893
 80023bc:	0801e014 	.word	0x0801e014

080023c0 <Min>:

static int Min(int x,int y)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
	return x<y?x:y;
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4293      	cmp	r3, r2
 80023d0:	bfa8      	it	ge
 80023d2:	4613      	movge	r3, r2
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <ShowErrors>:

static uint8_t ShowErrors()
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
	GetAllErrors();
 80023e6:	f000 f863 	bl	80024b0 <GetAllErrors>
	Clear();
 80023ea:	f7ff fd23 	bl	8001e34 <Clear>
	strncpy(lcdAnswer[0],"Errors", strlen("Errors"));
 80023ee:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <ShowErrors+0xb8>)
 80023f0:	4a2a      	ldr	r2, [pc, #168]	; (800249c <ShowErrors+0xbc>)
 80023f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023f6:	6018      	str	r0, [r3, #0]
 80023f8:	3304      	adds	r3, #4
 80023fa:	8019      	strh	r1, [r3, #0]
	if(err_count==0)return 1;
 80023fc:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <ShowErrors+0xc0>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <ShowErrors+0x28>
 8002404:	2301      	movs	r3, #1
 8002406:	e042      	b.n	800248e <ShowErrors+0xae>
	if(paramIndex>=err_count-1)paramIndex = err_count==0 ? 0 : err_count-1;
 8002408:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <ShowErrors+0xc4>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <ShowErrors+0xc0>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	3b01      	subs	r3, #1
 8002414:	429a      	cmp	r2, r3
 8002416:	db0b      	blt.n	8002430 <ShowErrors+0x50>
 8002418:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <ShowErrors+0xc0>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <ShowErrors+0x4a>
 8002420:	4b1f      	ldr	r3, [pc, #124]	; (80024a0 <ShowErrors+0xc0>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	3b01      	subs	r3, #1
 8002426:	b2db      	uxtb	r3, r3
 8002428:	e000      	b.n	800242c <ShowErrors+0x4c>
 800242a:	2300      	movs	r3, #0
 800242c:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <ShowErrors+0xc4>)
 800242e:	7013      	strb	r3, [r2, #0]
	for (int i = paramIndex; i < Min(err_count, paramIndex+3); ++i) {
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <ShowErrors+0xc4>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	e01b      	b.n	8002470 <ShowErrors+0x90>
		sprintf(lcdAnswer[1+i-paramIndex],"%d.%s",errors_info[i].num, errors_info[i].errorName);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3301      	adds	r3, #1
 800243c:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <ShowErrors+0xc4>)
 800243e:	7812      	ldrb	r2, [r2, #0]
 8002440:	1a9a      	subs	r2, r3, r2
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4a13      	ldr	r2, [pc, #76]	; (8002498 <ShowErrors+0xb8>)
 800244c:	1898      	adds	r0, r3, r2
 800244e:	4a16      	ldr	r2, [pc, #88]	; (80024a8 <ShowErrors+0xc8>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002456:	4619      	mov	r1, r3
 8002458:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <ShowErrors+0xc8>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	460a      	mov	r2, r1
 8002464:	4911      	ldr	r1, [pc, #68]	; (80024ac <ShowErrors+0xcc>)
 8002466:	f01a fbf5 	bl	801cc54 <siprintf>
	for (int i = paramIndex; i < Min(err_count, paramIndex+3); ++i) {
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3301      	adds	r3, #1
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <ShowErrors+0xc0>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <ShowErrors+0xc4>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	3303      	adds	r3, #3
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f7ff ff9e 	bl	80023c0 <Min>
 8002484:	4602      	mov	r2, r0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4293      	cmp	r3, r2
 800248a:	dbd5      	blt.n	8002438 <ShowErrors+0x58>
	}
	return 1;
 800248c:	2301      	movs	r3, #1
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000850 	.word	0x20000850
 800249c:	0801dd20 	.word	0x0801dd20
 80024a0:	200007fc 	.word	0x200007fc
 80024a4:	200007f8 	.word	0x200007f8
 80024a8:	20000800 	.word	0x20000800
 80024ac:	0801e024 	.word	0x0801e024

080024b0 <GetAllErrors>:

static uint8_t GetAllErrors()
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
	err_count = 0;
 80024b4:	4b91      	ldr	r3, [pc, #580]	; (80026fc <GetAllErrors+0x24c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
	if(meas_data.errors.nakopitel_kanistra_err)
 80024ba:	4b91      	ldr	r3, [pc, #580]	; (8002700 <GetAllErrors+0x250>)
 80024bc:	7e1b      	ldrb	r3, [r3, #24]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d017      	beq.n	80024f8 <GetAllErrors+0x48>
	{
		errors_info[err_count].num = err_count+1;
 80024c8:	4b8c      	ldr	r3, [pc, #560]	; (80026fc <GetAllErrors+0x24c>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4a8b      	ldr	r2, [pc, #556]	; (80026fc <GetAllErrors+0x24c>)
 80024ce:	7812      	ldrb	r2, [r2, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	b2d9      	uxtb	r1, r3
 80024d4:	4b8b      	ldr	r3, [pc, #556]	; (8002704 <GetAllErrors+0x254>)
 80024d6:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[0].name;
 80024da:	4b88      	ldr	r3, [pc, #544]	; (80026fc <GetAllErrors+0x24c>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	4b89      	ldr	r3, [pc, #548]	; (8002708 <GetAllErrors+0x258>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4987      	ldr	r1, [pc, #540]	; (8002704 <GetAllErrors+0x254>)
 80024e6:	00c3      	lsls	r3, r0, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	605a      	str	r2, [r3, #4]
		err_count++;
 80024ec:	4b83      	ldr	r3, [pc, #524]	; (80026fc <GetAllErrors+0x24c>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	4b81      	ldr	r3, [pc, #516]	; (80026fc <GetAllErrors+0x24c>)
 80024f6:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.nakopitel_door_err)
 80024f8:	4b81      	ldr	r3, [pc, #516]	; (8002700 <GetAllErrors+0x250>)
 80024fa:	7e1b      	ldrb	r3, [r3, #24]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d017      	beq.n	8002536 <GetAllErrors+0x86>
	{
		errors_info[err_count].num = err_count+1;
 8002506:	4b7d      	ldr	r3, [pc, #500]	; (80026fc <GetAllErrors+0x24c>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	4a7c      	ldr	r2, [pc, #496]	; (80026fc <GetAllErrors+0x24c>)
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	3301      	adds	r3, #1
 8002510:	b2d9      	uxtb	r1, r3
 8002512:	4b7c      	ldr	r3, [pc, #496]	; (8002704 <GetAllErrors+0x254>)
 8002514:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[1].name;
 8002518:	4b78      	ldr	r3, [pc, #480]	; (80026fc <GetAllErrors+0x24c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	4b7a      	ldr	r3, [pc, #488]	; (8002708 <GetAllErrors+0x258>)
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	4978      	ldr	r1, [pc, #480]	; (8002704 <GetAllErrors+0x254>)
 8002524:	00c3      	lsls	r3, r0, #3
 8002526:	440b      	add	r3, r1
 8002528:	605a      	str	r2, [r3, #4]
		err_count++;
 800252a:	4b74      	ldr	r3, [pc, #464]	; (80026fc <GetAllErrors+0x24c>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4b72      	ldr	r3, [pc, #456]	; (80026fc <GetAllErrors+0x24c>)
 8002534:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.uz_err)
 8002536:	4b72      	ldr	r3, [pc, #456]	; (8002700 <GetAllErrors+0x250>)
 8002538:	7e1b      	ldrb	r3, [r3, #24]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d017      	beq.n	8002574 <GetAllErrors+0xc4>
	{
		errors_info[err_count].num = err_count+1;
 8002544:	4b6d      	ldr	r3, [pc, #436]	; (80026fc <GetAllErrors+0x24c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4a6c      	ldr	r2, [pc, #432]	; (80026fc <GetAllErrors+0x24c>)
 800254a:	7812      	ldrb	r2, [r2, #0]
 800254c:	3301      	adds	r3, #1
 800254e:	b2d9      	uxtb	r1, r3
 8002550:	4b6c      	ldr	r3, [pc, #432]	; (8002704 <GetAllErrors+0x254>)
 8002552:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[2].name;
 8002556:	4b69      	ldr	r3, [pc, #420]	; (80026fc <GetAllErrors+0x24c>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	4b6a      	ldr	r3, [pc, #424]	; (8002708 <GetAllErrors+0x258>)
 800255e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002560:	4968      	ldr	r1, [pc, #416]	; (8002704 <GetAllErrors+0x254>)
 8002562:	00c3      	lsls	r3, r0, #3
 8002564:	440b      	add	r3, r1
 8002566:	605a      	str	r2, [r3, #4]
		err_count++;
 8002568:	4b64      	ldr	r3, [pc, #400]	; (80026fc <GetAllErrors+0x24c>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b62      	ldr	r3, [pc, #392]	; (80026fc <GetAllErrors+0x24c>)
 8002572:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sb_abort_err)
 8002574:	4b62      	ldr	r3, [pc, #392]	; (8002700 <GetAllErrors+0x250>)
 8002576:	7e1b      	ldrb	r3, [r3, #24]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d017      	beq.n	80025b2 <GetAllErrors+0x102>
	{
		errors_info[err_count].num = err_count+1;
 8002582:	4b5e      	ldr	r3, [pc, #376]	; (80026fc <GetAllErrors+0x24c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	4a5d      	ldr	r2, [pc, #372]	; (80026fc <GetAllErrors+0x24c>)
 8002588:	7812      	ldrb	r2, [r2, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	b2d9      	uxtb	r1, r3
 800258e:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <GetAllErrors+0x254>)
 8002590:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[3].name;
 8002594:	4b59      	ldr	r3, [pc, #356]	; (80026fc <GetAllErrors+0x24c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <GetAllErrors+0x258>)
 800259c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800259e:	4959      	ldr	r1, [pc, #356]	; (8002704 <GetAllErrors+0x254>)
 80025a0:	00c3      	lsls	r3, r0, #3
 80025a2:	440b      	add	r3, r1
 80025a4:	605a      	str	r2, [r3, #4]
		err_count++;
 80025a6:	4b55      	ldr	r3, [pc, #340]	; (80026fc <GetAllErrors+0x24c>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4b53      	ldr	r3, [pc, #332]	; (80026fc <GetAllErrors+0x24c>)
 80025b0:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sq_left_err)
 80025b2:	4b53      	ldr	r3, [pc, #332]	; (8002700 <GetAllErrors+0x250>)
 80025b4:	7e1b      	ldrb	r3, [r3, #24]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d017      	beq.n	80025f0 <GetAllErrors+0x140>
	{
		errors_info[err_count].num = err_count+1;
 80025c0:	4b4e      	ldr	r3, [pc, #312]	; (80026fc <GetAllErrors+0x24c>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4a4d      	ldr	r2, [pc, #308]	; (80026fc <GetAllErrors+0x24c>)
 80025c6:	7812      	ldrb	r2, [r2, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	b2d9      	uxtb	r1, r3
 80025cc:	4b4d      	ldr	r3, [pc, #308]	; (8002704 <GetAllErrors+0x254>)
 80025ce:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[4].name;
 80025d2:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <GetAllErrors+0x24c>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	4b4b      	ldr	r3, [pc, #300]	; (8002708 <GetAllErrors+0x258>)
 80025da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025dc:	4949      	ldr	r1, [pc, #292]	; (8002704 <GetAllErrors+0x254>)
 80025de:	00c3      	lsls	r3, r0, #3
 80025e0:	440b      	add	r3, r1
 80025e2:	605a      	str	r2, [r3, #4]
		err_count++;
 80025e4:	4b45      	ldr	r3, [pc, #276]	; (80026fc <GetAllErrors+0x24c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	3301      	adds	r3, #1
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	4b43      	ldr	r3, [pc, #268]	; (80026fc <GetAllErrors+0x24c>)
 80025ee:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sq_right_err)
 80025f0:	4b43      	ldr	r3, [pc, #268]	; (8002700 <GetAllErrors+0x250>)
 80025f2:	7e1b      	ldrb	r3, [r3, #24]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d017      	beq.n	800262e <GetAllErrors+0x17e>
	{
		errors_info[err_count].num = err_count+1;
 80025fe:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <GetAllErrors+0x24c>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	4a3e      	ldr	r2, [pc, #248]	; (80026fc <GetAllErrors+0x24c>)
 8002604:	7812      	ldrb	r2, [r2, #0]
 8002606:	3301      	adds	r3, #1
 8002608:	b2d9      	uxtb	r1, r3
 800260a:	4b3e      	ldr	r3, [pc, #248]	; (8002704 <GetAllErrors+0x254>)
 800260c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[5].name;
 8002610:	4b3a      	ldr	r3, [pc, #232]	; (80026fc <GetAllErrors+0x24c>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	4b3c      	ldr	r3, [pc, #240]	; (8002708 <GetAllErrors+0x258>)
 8002618:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800261a:	493a      	ldr	r1, [pc, #232]	; (8002704 <GetAllErrors+0x254>)
 800261c:	00c3      	lsls	r3, r0, #3
 800261e:	440b      	add	r3, r1
 8002620:	605a      	str	r2, [r3, #4]
		err_count++;
 8002622:	4b36      	ldr	r3, [pc, #216]	; (80026fc <GetAllErrors+0x24c>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	3301      	adds	r3, #1
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b34      	ldr	r3, [pc, #208]	; (80026fc <GetAllErrors+0x24c>)
 800262c:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.timeout_moving_right_err)
 800262e:	4b34      	ldr	r3, [pc, #208]	; (8002700 <GetAllErrors+0x250>)
 8002630:	7e1b      	ldrb	r3, [r3, #24]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d018      	beq.n	800266e <GetAllErrors+0x1be>
	{
		errors_info[err_count].num = err_count+1;
 800263c:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <GetAllErrors+0x24c>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4a2e      	ldr	r2, [pc, #184]	; (80026fc <GetAllErrors+0x24c>)
 8002642:	7812      	ldrb	r2, [r2, #0]
 8002644:	3301      	adds	r3, #1
 8002646:	b2d9      	uxtb	r1, r3
 8002648:	4b2e      	ldr	r3, [pc, #184]	; (8002704 <GetAllErrors+0x254>)
 800264a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[6].name;
 800264e:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <GetAllErrors+0x24c>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <GetAllErrors+0x258>)
 8002656:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800265a:	492a      	ldr	r1, [pc, #168]	; (8002704 <GetAllErrors+0x254>)
 800265c:	00c3      	lsls	r3, r0, #3
 800265e:	440b      	add	r3, r1
 8002660:	605a      	str	r2, [r3, #4]
		err_count++;
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <GetAllErrors+0x24c>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b24      	ldr	r3, [pc, #144]	; (80026fc <GetAllErrors+0x24c>)
 800266c:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.timeout_moving_left_err)
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <GetAllErrors+0x250>)
 8002670:	7e1b      	ldrb	r3, [r3, #24]
 8002672:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d018      	beq.n	80026ae <GetAllErrors+0x1fe>
	{
		errors_info[err_count].num = err_count+1;
 800267c:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <GetAllErrors+0x24c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	4a1e      	ldr	r2, [pc, #120]	; (80026fc <GetAllErrors+0x24c>)
 8002682:	7812      	ldrb	r2, [r2, #0]
 8002684:	3301      	adds	r3, #1
 8002686:	b2d9      	uxtb	r1, r3
 8002688:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <GetAllErrors+0x254>)
 800268a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[7].name;
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <GetAllErrors+0x24c>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <GetAllErrors+0x258>)
 8002696:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800269a:	491a      	ldr	r1, [pc, #104]	; (8002704 <GetAllErrors+0x254>)
 800269c:	00c3      	lsls	r3, r0, #3
 800269e:	440b      	add	r3, r1
 80026a0:	605a      	str	r2, [r3, #4]
		err_count++;
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <GetAllErrors+0x24c>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	3301      	adds	r3, #1
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <GetAllErrors+0x24c>)
 80026ac:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.need_return_err)
 80026ae:	4b14      	ldr	r3, [pc, #80]	; (8002700 <GetAllErrors+0x250>)
 80026b0:	7e5b      	ldrb	r3, [r3, #25]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d018      	beq.n	80026ee <GetAllErrors+0x23e>
	{
		errors_info[err_count].num = err_count+1;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <GetAllErrors+0x24c>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4a0e      	ldr	r2, [pc, #56]	; (80026fc <GetAllErrors+0x24c>)
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	b2d9      	uxtb	r1, r3
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <GetAllErrors+0x254>)
 80026ca:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[8].name;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <GetAllErrors+0x24c>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <GetAllErrors+0x258>)
 80026d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80026da:	490a      	ldr	r1, [pc, #40]	; (8002704 <GetAllErrors+0x254>)
 80026dc:	00c3      	lsls	r3, r0, #3
 80026de:	440b      	add	r3, r1
 80026e0:	605a      	str	r2, [r3, #4]
		err_count++;
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <GetAllErrors+0x24c>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	3301      	adds	r3, #1
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <GetAllErrors+0x24c>)
 80026ec:	701a      	strb	r2, [r3, #0]
	}
	return 1;
 80026ee:	2301      	movs	r3, #1

}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	200007fc 	.word	0x200007fc
 8002700:	20000c5c 	.word	0x20000c5c
 8002704:	20000800 	.word	0x20000800
 8002708:	200000fc 	.word	0x200000fc

0800270c <FindDictionaryFromValue>:

/*Возращает ссылку на пару "ключ-значение", если записи нет, то возвращает NULL */
static Dictionary *FindDictionaryFromValue(float value, Dictionary *dictionary, uint8_t dict_len)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	ed87 0a03 	vstr	s0, [r7, #12]
 8002716:	60b8      	str	r0, [r7, #8]
 8002718:	460b      	mov	r3, r1
 800271a:	71fb      	strb	r3, [r7, #7]
	Dictionary *temp = NULL;
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < dict_len; ++i) {
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e013      	b.n	800274e <FindDictionaryFromValue+0x42>
		temp = dictionary+i;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	4413      	add	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
		if(temp->value == value)return temp;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	ed97 7a03 	vldr	s14, [r7, #12]
 800273a:	eeb4 7a67 	vcmp.f32	s14, s15
 800273e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002742:	d101      	bne.n	8002748 <FindDictionaryFromValue+0x3c>
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	e007      	b.n	8002758 <FindDictionaryFromValue+0x4c>
	for (int i = 0; i < dict_len; ++i) {
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	3301      	adds	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	429a      	cmp	r2, r3
 8002754:	dbe7      	blt.n	8002726 <FindDictionaryFromValue+0x1a>

	}
	return NULL;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LcdUpdate>:



void LcdUpdate()
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <Print>:

static void Print(Row *parameter, uint8_t index)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b087      	sub	sp, #28
 8002778:	af02      	add	r7, sp, #8
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
	uint16_t temp = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	817b      	strh	r3, [r7, #10]
	switch (parameter->type) {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	7d5b      	ldrb	r3, [r3, #21]
 8002788:	2b04      	cmp	r3, #4
 800278a:	d87a      	bhi.n	8002882 <Print+0x10e>
 800278c:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <Print+0x20>)
 800278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002792:	bf00      	nop
 8002794:	080027f1 	.word	0x080027f1
 8002798:	08002815 	.word	0x08002815
 800279c:	08002883 	.word	0x08002883
 80027a0:	08002839 	.word	0x08002839
 80027a4:	080027a9 	.word	0x080027a9
		case ROW_ETH_ADDR:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d.%d.%d.%d",*((uint16_t*)parameter->data),*(((uint16_t*)parameter->data)+1),*(((uint16_t*)parameter->data)+2),*(((uint16_t*)parameter->data)+3));
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4a36      	ldr	r2, [pc, #216]	; (800288c <Print+0x118>)
 80027b4:	4413      	add	r3, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	79d2      	ldrb	r2, [r2, #7]
 80027ba:	1898      	adds	r0, r3, r2
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	4619      	mov	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	3302      	adds	r3, #2
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	461c      	mov	r4, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	3304      	adds	r3, #4
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	3306      	adds	r3, #6
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	9200      	str	r2, [sp, #0]
 80027e4:	4623      	mov	r3, r4
 80027e6:	460a      	mov	r2, r1
 80027e8:	4929      	ldr	r1, [pc, #164]	; (8002890 <Print+0x11c>)
 80027ea:	f01a fa33 	bl	801cc54 <siprintf>
			break;
 80027ee:	e049      	b.n	8002884 <Print+0x110>
		case ROW_USHORT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d",*((uint16_t*)parameter->data));
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4a24      	ldr	r2, [pc, #144]	; (800288c <Print+0x118>)
 80027fc:	4413      	add	r3, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	79d2      	ldrb	r2, [r2, #7]
 8002802:	1898      	adds	r0, r3, r2
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	4921      	ldr	r1, [pc, #132]	; (8002894 <Print+0x120>)
 800280e:	f01a fa21 	bl	801cc54 <siprintf>
			break;
 8002812:	e037      	b.n	8002884 <Print+0x110>
		case ROW_UINT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d",*((uint32_t*)parameter->data));
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4a1b      	ldr	r2, [pc, #108]	; (800288c <Print+0x118>)
 8002820:	4413      	add	r3, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	79d2      	ldrb	r2, [r2, #7]
 8002826:	1898      	adds	r0, r3, r2
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	4918      	ldr	r1, [pc, #96]	; (8002894 <Print+0x120>)
 8002832:	f01a fa0f 	bl	801cc54 <siprintf>
			break;
 8002836:	e025      	b.n	8002884 <Print+0x110>
		case ROW_BINARY_12:
			temp = *(uint16_t*)parameter->data;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	817b      	strh	r3, [r7, #10]
			for (int j = 0; j < 12; ++j) {
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	e01a      	b.n	800287c <Print+0x108>
				uint8_t num = (temp & (1<<j))>0;
 8002846:	897a      	ldrh	r2, [r7, #10]
 8002848:	2101      	movs	r1, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	bfcc      	ite	gt
 8002856:	2301      	movgt	r3, #1
 8002858:	2300      	movle	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	727b      	strb	r3, [r7, #9]
				sprintf(lcdAnswer[2]+parameter->param_pos+j,"%d",num);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	79db      	ldrb	r3, [r3, #7]
 8002862:	461a      	mov	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <Print+0x124>)
 800286a:	4413      	add	r3, r2
 800286c:	7a7a      	ldrb	r2, [r7, #9]
 800286e:	4909      	ldr	r1, [pc, #36]	; (8002894 <Print+0x120>)
 8002870:	4618      	mov	r0, r3
 8002872:	f01a f9ef 	bl	801cc54 <siprintf>
			for (int j = 0; j < 12; ++j) {
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3301      	adds	r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b0b      	cmp	r3, #11
 8002880:	dde1      	ble.n	8002846 <Print+0xd2>
			}

		default:
			break;
 8002882:	bf00      	nop
	}
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	bd90      	pop	{r4, r7, pc}
 800288c:	20000850 	.word	0x20000850
 8002890:	0801e02c 	.word	0x0801e02c
 8002894:	0801e038 	.word	0x0801e038
 8002898:	20000878 	.word	0x20000878

0800289c <lcd_init>:


static void sendByte(uint8_t byte, int isData);

void lcd_init()
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCDLED_GPIO_Port, LCDLED_Pin, SET);// Включаем подсветку
 80028a0:	2201      	movs	r2, #1
 80028a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a6:	481f      	ldr	r0, [pc, #124]	; (8002924 <lcd_init+0x88>)
 80028a8:	f005 fb88 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDR_GPIO_Port, LCDR_Pin, RESET);
 80028ac:	2200      	movs	r2, #0
 80028ae:	2110      	movs	r1, #16
 80028b0:	481c      	ldr	r0, [pc, #112]	; (8002924 <lcd_init+0x88>)
 80028b2:	f005 fb83 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_Delay(15);
 80028b6:	200f      	movs	r0, #15
 80028b8:	f002 fda2 	bl	8005400 <HAL_Delay>

	sendByte(0x33, 0); // шлем в одном байте два 0011
 80028bc:	2100      	movs	r1, #0
 80028be:	2033      	movs	r0, #51	; 0x33
 80028c0:	f000 f832 	bl	8002928 <sendByte>
	HAL_Delay(1);
 80028c4:	2001      	movs	r0, #1
 80028c6:	f002 fd9b 	bl	8005400 <HAL_Delay>

	sendByte(0x32, 0); // шлем в одном байте  00110010
 80028ca:	2100      	movs	r1, #0
 80028cc:	2032      	movs	r0, #50	; 0x32
 80028ce:	f000 f82b 	bl	8002928 <sendByte>
	HAL_Delay(1);
 80028d2:	2001      	movs	r0, #1
 80028d4:	f002 fd94 	bl	8005400 <HAL_Delay>

	sendByte(DATA_BUS_4BIT_PAGE0, 0); // включаем режим 4 бит
 80028d8:	2100      	movs	r1, #0
 80028da:	2028      	movs	r0, #40	; 0x28
 80028dc:	f000 f824 	bl	8002928 <sendByte>
	HAL_Delay(1);
 80028e0:	2001      	movs	r0, #1
 80028e2:	f002 fd8d 	bl	8005400 <HAL_Delay>
	sendByte(DISPLAY_OFF, 0); // выключаем дисплей
 80028e6:	2100      	movs	r1, #0
 80028e8:	2008      	movs	r0, #8
 80028ea:	f000 f81d 	bl	8002928 <sendByte>
	HAL_Delay(1);
 80028ee:	2001      	movs	r0, #1
 80028f0:	f002 fd86 	bl	8005400 <HAL_Delay>
	sendByte(CLEAR_DISPLAY, 0); // очищаем дисплей
 80028f4:	2100      	movs	r1, #0
 80028f6:	2001      	movs	r0, #1
 80028f8:	f000 f816 	bl	8002928 <sendByte>
	HAL_Delay(2);
 80028fc:	2002      	movs	r0, #2
 80028fe:	f002 fd7f 	bl	8005400 <HAL_Delay>
	sendByte(ENTRY_MODE_SET, 0); //ставим режим смещение курсора экран не смещается
 8002902:	2100      	movs	r1, #0
 8002904:	2006      	movs	r0, #6
 8002906:	f000 f80f 	bl	8002928 <sendByte>
	HAL_Delay(1);
 800290a:	2001      	movs	r0, #1
 800290c:	f002 fd78 	bl	8005400 <HAL_Delay>
	sendByte(DISPLAY_ON, 0);// включаем дисплей и убираем курсор
 8002910:	2100      	movs	r1, #0
 8002912:	200c      	movs	r0, #12
 8002914:	f000 f808 	bl	8002928 <sendByte>
	HAL_Delay(1);
 8002918:	2001      	movs	r0, #1
 800291a:	f002 fd71 	bl	8005400 <HAL_Delay>



}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40020400 	.word	0x40020400

08002928 <sendByte>:

static void sendByte(uint8_t byte, int isData)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD_PIN_MASK, RESET);
 8002934:	2200      	movs	r2, #0
 8002936:	216f      	movs	r1, #111	; 0x6f
 8002938:	4841      	ldr	r0, [pc, #260]	; (8002a40 <sendByte+0x118>)
 800293a:	f005 fb3f 	bl	8007fbc <HAL_GPIO_WritePin>

	if(isData == 1) HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, SET); // если данные ставмим A
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d105      	bne.n	8002950 <sendByte+0x28>
 8002944:	2201      	movs	r2, #1
 8002946:	2140      	movs	r1, #64	; 0x40
 8002948:	483d      	ldr	r0, [pc, #244]	; (8002a40 <sendByte+0x118>)
 800294a:	f005 fb37 	bl	8007fbc <HAL_GPIO_WritePin>
 800294e:	e004      	b.n	800295a <sendByte+0x32>
	else HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, RESET);		   // иначе скидываем A
 8002950:	2200      	movs	r2, #0
 8002952:	2140      	movs	r1, #64	; 0x40
 8002954:	483a      	ldr	r0, [pc, #232]	; (8002a40 <sendByte+0x118>)
 8002956:	f005 fb31 	bl	8007fbc <HAL_GPIO_WritePin>

	// ставим старшую тетраду на порт
	if(byte & 0x80) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	2b00      	cmp	r3, #0
 8002960:	da04      	bge.n	800296c <sendByte+0x44>
 8002962:	2201      	movs	r2, #1
 8002964:	2108      	movs	r1, #8
 8002966:	4836      	ldr	r0, [pc, #216]	; (8002a40 <sendByte+0x118>)
 8002968:	f005 fb28 	bl	8007fbc <HAL_GPIO_WritePin>
	if(byte & 0x40) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <sendByte+0x58>
 8002976:	2201      	movs	r2, #1
 8002978:	2104      	movs	r1, #4
 800297a:	4831      	ldr	r0, [pc, #196]	; (8002a40 <sendByte+0x118>)
 800297c:	f005 fb1e 	bl	8007fbc <HAL_GPIO_WritePin>
	if(byte & 0x20) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <sendByte+0x6c>
 800298a:	2201      	movs	r2, #1
 800298c:	2102      	movs	r1, #2
 800298e:	482c      	ldr	r0, [pc, #176]	; (8002a40 <sendByte+0x118>)
 8002990:	f005 fb14 	bl	8007fbc <HAL_GPIO_WritePin>
	if(byte & 0x10) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <sendByte+0x80>
 800299e:	2201      	movs	r2, #1
 80029a0:	2101      	movs	r1, #1
 80029a2:	4827      	ldr	r0, [pc, #156]	; (8002a40 <sendByte+0x118>)
 80029a4:	f005 fb0a 	bl	8007fbc <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 80029a8:	2201      	movs	r2, #1
 80029aa:	2120      	movs	r1, #32
 80029ac:	4824      	ldr	r0, [pc, #144]	; (8002a40 <sendByte+0x118>)
 80029ae:	f005 fb05 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80029b2:	2001      	movs	r0, #1
 80029b4:	f002 fd24 	bl	8005400 <HAL_Delay>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 80029b8:	2200      	movs	r2, #0
 80029ba:	2120      	movs	r1, #32
 80029bc:	4820      	ldr	r0, [pc, #128]	; (8002a40 <sendByte+0x118>)
 80029be:	f005 fafd 	bl	8007fbc <HAL_GPIO_WritePin>

	//обнуляем все пины дисплея кроме RS
	HAL_GPIO_WritePin(LCD0_GPIO_Port, (LCD_PIN_MASK & ~LCDA_Pin), RESET);
 80029c2:	2200      	movs	r2, #0
 80029c4:	212f      	movs	r1, #47	; 0x2f
 80029c6:	481e      	ldr	r0, [pc, #120]	; (8002a40 <sendByte+0x118>)
 80029c8:	f005 faf8 	bl	8007fbc <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 80029cc:	2201      	movs	r2, #1
 80029ce:	2120      	movs	r1, #32
 80029d0:	481b      	ldr	r0, [pc, #108]	; (8002a40 <sendByte+0x118>)
 80029d2:	f005 faf3 	bl	8007fbc <HAL_GPIO_WritePin>
	if(byte & 0x08) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <sendByte+0xc2>
 80029e0:	2201      	movs	r2, #1
 80029e2:	2108      	movs	r1, #8
 80029e4:	4816      	ldr	r0, [pc, #88]	; (8002a40 <sendByte+0x118>)
 80029e6:	f005 fae9 	bl	8007fbc <HAL_GPIO_WritePin>
	if(byte & 0x04) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <sendByte+0xd6>
 80029f4:	2201      	movs	r2, #1
 80029f6:	2104      	movs	r1, #4
 80029f8:	4811      	ldr	r0, [pc, #68]	; (8002a40 <sendByte+0x118>)
 80029fa:	f005 fadf 	bl	8007fbc <HAL_GPIO_WritePin>
	if(byte & 0x02) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <sendByte+0xea>
 8002a08:	2201      	movs	r2, #1
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	480c      	ldr	r0, [pc, #48]	; (8002a40 <sendByte+0x118>)
 8002a0e:	f005 fad5 	bl	8007fbc <HAL_GPIO_WritePin>
	if(byte & 0x01) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <sendByte+0xfe>
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	2101      	movs	r1, #1
 8002a20:	4807      	ldr	r0, [pc, #28]	; (8002a40 <sendByte+0x118>)
 8002a22:	f005 facb 	bl	8007fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 8002a26:	2200      	movs	r2, #0
 8002a28:	2120      	movs	r1, #32
 8002a2a:	4805      	ldr	r0, [pc, #20]	; (8002a40 <sendByte+0x118>)
 8002a2c:	f005 fac6 	bl	8007fbc <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8002a30:	2001      	movs	r0, #1
 8002a32:	f002 fce5 	bl	8005400 <HAL_Delay>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40020400 	.word	0x40020400

08002a44 <sendStr>:


void sendStr( char *str, int row , int position )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
	char start_address;

	switch (row)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d816      	bhi.n	8002a84 <sendStr+0x40>
 8002a56:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <sendStr+0x18>)
 8002a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5c:	08002a6d 	.word	0x08002a6d
 8002a60:	08002a73 	.word	0x08002a73
 8002a64:	08002a79 	.word	0x08002a79
 8002a68:	08002a7f 	.word	0x08002a7f
	{

		case 0:
			start_address = 0x0; // 1 строка
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	75fb      	strb	r3, [r7, #23]
			break;
 8002a70:	e008      	b.n	8002a84 <sendStr+0x40>

		case 1:
			start_address = 0x40; // 2 строка
 8002a72:	2340      	movs	r3, #64	; 0x40
 8002a74:	75fb      	strb	r3, [r7, #23]
			break;
 8002a76:	e005      	b.n	8002a84 <sendStr+0x40>

		case 2:
			start_address = 0x14; // 3 строка
 8002a78:	2314      	movs	r3, #20
 8002a7a:	75fb      	strb	r3, [r7, #23]
			break;
 8002a7c:	e002      	b.n	8002a84 <sendStr+0x40>

		case 3:
			start_address = 0x54; // 4 строка
 8002a7e:	2354      	movs	r3, #84	; 0x54
 8002a80:	75fb      	strb	r3, [r7, #23]
			break;
 8002a82:	bf00      	nop

	}

	start_address += position; // к началу строки прибавляем позицию в строке
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	75fb      	strb	r3, [r7, #23]

	sendByte((start_address |= SET_DDRAM_ADDRESS), 0); // ставим курсор на начало нужной строки  в DDRAM
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
 8002a90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a94:	75fb      	strb	r3, [r7, #23]
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ff44 	bl	8002928 <sendByte>

	HAL_Delay(4);
 8002aa0:	2004      	movs	r0, #4
 8002aa2:	f002 fcad 	bl	8005400 <HAL_Delay>
//	while(*str != '\0'){
//
//		sendByte(*str, 1);
//		str++;
//	}
	uint8_t byte  = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < 20; ++i) {
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	e011      	b.n	8002ad4 <sendStr+0x90>
		byte = *(str+i);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	75bb      	strb	r3, [r7, #22]
		if(byte==0)byte = 32;
 8002aba:	7dbb      	ldrb	r3, [r7, #22]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <sendStr+0x80>
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	75bb      	strb	r3, [r7, #22]
		sendByte(byte, 1);
 8002ac4:	7dbb      	ldrb	r3, [r7, #22]
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff2d 	bl	8002928 <sendByte>
	for (int i = 0; i < 20; ++i) {
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b13      	cmp	r3, #19
 8002ad8:	ddea      	ble.n	8002ab0 <sendStr+0x6c>
	}
}
 8002ada:	bf00      	nop
 8002adc:	bf00      	nop
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae4:	b5b0      	push	{r4, r5, r7, lr}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ModbusInit();
 8002aea:	f000 fc05 	bl	80032f8 <ModbusInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aee:	f002 fc45 	bl	800537c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002af2:	f000 f83f 	bl	8002b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002af6:	f000 fa9b 	bl	8003030 <MX_GPIO_Init>
  MX_DMA_Init();
 8002afa:	f000 fa69 	bl	8002fd0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002afe:	f000 fa13 	bl	8002f28 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002b02:	f000 fa3b 	bl	8002f7c <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8002b06:	f000 f93d 	bl	8002d84 <MX_SPI3_Init>
  MX_ADC1_Init();
 8002b0a:	f000 f8a3 	bl	8002c54 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002b0e:	f000 f96f 	bl	8002df0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b12:	f000 f9bb 	bl	8002e8c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8002b16:	f7ff fec1 	bl	800289c <lcd_init>
  ethernet_reset();
 8002b1a:	f7fe fa3b 	bl	8000f94 <ethernet_reset>
  Analog_Start();
 8002b1e:	f7fd fd31 	bl	8000584 <Analog_Start>
  Start_Timers();
 8002b22:	f002 f8f9 	bl	8004d18 <Start_Timers>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of writeMemorySemaphore */
  osSemaphoreDef(writeMemorySemaphore);
 8002b26:	2300      	movs	r3, #0
 8002b28:	623b      	str	r3, [r7, #32]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
  writeMemorySemaphoreHandle = osSemaphoreCreate(osSemaphore(writeMemorySemaphore), 1);
 8002b2e:	f107 0320 	add.w	r3, r7, #32
 8002b32:	2101      	movs	r1, #1
 8002b34:	4618      	mov	r0, r3
 8002b36:	f009 fb5f 	bl	800c1f8 <osSemaphoreCreate>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <main+0x84>)
 8002b3e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <main+0x88>)
 8002b42:	1d3c      	adds	r4, r7, #4
 8002b44:	461d      	mov	r5, r3
 8002b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f009 fa51 	bl	800bffe <osThreadCreate>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <main+0x8c>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002b62:	f009 fa35 	bl	800bfd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <main+0x82>
 8002b68:	20000b7c 	.word	0x20000b7c
 8002b6c:	0801e048 	.word	0x0801e048
 8002b70:	20000b78 	.word	0x20000b78

08002b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b094      	sub	sp, #80	; 0x50
 8002b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b7a:	f107 0320 	add.w	r3, r7, #32
 8002b7e:	2230      	movs	r2, #48	; 0x30
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f019 feae 	bl	801c8e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <SystemClock_Config+0xd8>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	4a2a      	ldr	r2, [pc, #168]	; (8002c4c <SystemClock_Config+0xd8>)
 8002ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba8:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <SystemClock_Config+0xd8>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <SystemClock_Config+0xdc>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a24      	ldr	r2, [pc, #144]	; (8002c50 <SystemClock_Config+0xdc>)
 8002bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <SystemClock_Config+0xdc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002be4:	2319      	movs	r3, #25
 8002be6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002be8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002bec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bf6:	f107 0320 	add.w	r3, r7, #32
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f005 f9f8 	bl	8007ff0 <HAL_RCC_OscConfig>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002c06:	f000 fb5b 	bl	80032c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c0a:	230f      	movs	r3, #15
 8002c0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002c16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c22:	f107 030c 	add.w	r3, r7, #12
 8002c26:	2105      	movs	r1, #5
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f005 fc59 	bl	80084e0 <HAL_RCC_ClockConfig>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002c34:	f000 fb44 	bl	80032c0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f005 fd34 	bl	80086ac <HAL_RCC_MCOConfig>
}
 8002c44:	bf00      	nop
 8002c46:	3750      	adds	r7, #80	; 0x50
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40007000 	.word	0x40007000

08002c54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c5a:	463b      	mov	r3, r7
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c66:	4b45      	ldr	r3, [pc, #276]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002c68:	4a45      	ldr	r2, [pc, #276]	; (8002d80 <MX_ADC1_Init+0x12c>)
 8002c6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c6c:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002c6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c74:	4b41      	ldr	r3, [pc, #260]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002c7a:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c80:	4b3e      	ldr	r3, [pc, #248]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c86:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002c8e:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002c96:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002c98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c9e:	4b37      	ldr	r3, [pc, #220]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8002ca4:	4b35      	ldr	r3, [pc, #212]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002ca6:	2206      	movs	r2, #6
 8002ca8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002caa:	4b34      	ldr	r3, [pc, #208]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cb2:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cb8:	4830      	ldr	r0, [pc, #192]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002cba:	f002 fbc5 	bl	8005448 <HAL_ADC_Init>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002cc4:	f000 fafc 	bl	80032c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002cc8:	230a      	movs	r3, #10
 8002cca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002cd0:	2307      	movs	r3, #7
 8002cd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cd4:	463b      	mov	r3, r7
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4828      	ldr	r0, [pc, #160]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002cda:	f002 fd1d 	bl	8005718 <HAL_ADC_ConfigChannel>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002ce4:	f000 faec 	bl	80032c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002ce8:	230c      	movs	r3, #12
 8002cea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002cec:	2302      	movs	r3, #2
 8002cee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cf0:	463b      	mov	r3, r7
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4821      	ldr	r0, [pc, #132]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002cf6:	f002 fd0f 	bl	8005718 <HAL_ADC_ConfigChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002d00:	f000 fade 	bl	80032c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002d04:	230d      	movs	r3, #13
 8002d06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d0c:	463b      	mov	r3, r7
 8002d0e:	4619      	mov	r1, r3
 8002d10:	481a      	ldr	r0, [pc, #104]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002d12:	f002 fd01 	bl	8005718 <HAL_ADC_ConfigChannel>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002d1c:	f000 fad0 	bl	80032c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002d20:	2303      	movs	r3, #3
 8002d22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002d24:	2304      	movs	r3, #4
 8002d26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d28:	463b      	mov	r3, r7
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4813      	ldr	r0, [pc, #76]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002d2e:	f002 fcf3 	bl	8005718 <HAL_ADC_ConfigChannel>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002d38:	f000 fac2 	bl	80032c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002d3c:	2304      	movs	r3, #4
 8002d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002d40:	2305      	movs	r3, #5
 8002d42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d44:	463b      	mov	r3, r7
 8002d46:	4619      	mov	r1, r3
 8002d48:	480c      	ldr	r0, [pc, #48]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002d4a:	f002 fce5 	bl	8005718 <HAL_ADC_ConfigChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8002d54:	f000 fab4 	bl	80032c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002d58:	2311      	movs	r3, #17
 8002d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002d5c:	2306      	movs	r3, #6
 8002d5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d60:	463b      	mov	r3, r7
 8002d62:	4619      	mov	r1, r3
 8002d64:	4805      	ldr	r0, [pc, #20]	; (8002d7c <MX_ADC1_Init+0x128>)
 8002d66:	f002 fcd7 	bl	8005718 <HAL_ADC_ConfigChannel>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8002d70:	f000 faa6 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200008a0 	.word	0x200008a0
 8002d80:	40012000 	.word	0x40012000

08002d84 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002d88:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <MX_SPI3_Init+0x64>)
 8002d8a:	4a18      	ldr	r2, [pc, #96]	; (8002dec <MX_SPI3_Init+0x68>)
 8002d8c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002d8e:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <MX_SPI3_Init+0x64>)
 8002d90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d94:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <MX_SPI3_Init+0x64>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <MX_SPI3_Init+0x64>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <MX_SPI3_Init+0x64>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <MX_SPI3_Init+0x64>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <MX_SPI3_Init+0x64>)
 8002db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <MX_SPI3_Init+0x64>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <MX_SPI3_Init+0x64>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <MX_SPI3_Init+0x64>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc8:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <MX_SPI3_Init+0x64>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <MX_SPI3_Init+0x64>)
 8002dd0:	220a      	movs	r2, #10
 8002dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002dd4:	4804      	ldr	r0, [pc, #16]	; (8002de8 <MX_SPI3_Init+0x64>)
 8002dd6:	f005 fdfd 	bl	80089d4 <HAL_SPI_Init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002de0:	f000 fa6e 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000948 	.word	0x20000948
 8002dec:	40003c00 	.word	0x40003c00

08002df0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002df6:	f107 0308 	add.w	r3, r7, #8
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	609a      	str	r2, [r3, #8]
 8002e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e04:	463b      	mov	r3, r7
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <MX_TIM3_Init+0x94>)
 8002e0e:	4a1e      	ldr	r2, [pc, #120]	; (8002e88 <MX_TIM3_Init+0x98>)
 8002e10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <MX_TIM3_Init+0x94>)
 8002e14:	2229      	movs	r2, #41	; 0x29
 8002e16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e18:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <MX_TIM3_Init+0x94>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002e1e:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <MX_TIM3_Init+0x94>)
 8002e20:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e26:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <MX_TIM3_Init+0x94>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <MX_TIM3_Init+0x94>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e32:	4814      	ldr	r0, [pc, #80]	; (8002e84 <MX_TIM3_Init+0x94>)
 8002e34:	f006 fb76 	bl	8009524 <HAL_TIM_Base_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002e3e:	f000 fa3f 	bl	80032c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e48:	f107 0308 	add.w	r3, r7, #8
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	480d      	ldr	r0, [pc, #52]	; (8002e84 <MX_TIM3_Init+0x94>)
 8002e50:	f006 fd98 	bl	8009984 <HAL_TIM_ConfigClockSource>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002e5a:	f000 fa31 	bl	80032c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e5e:	2320      	movs	r3, #32
 8002e60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e66:	463b      	mov	r3, r7
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4806      	ldr	r0, [pc, #24]	; (8002e84 <MX_TIM3_Init+0x94>)
 8002e6c:	f006 ffb4 	bl	8009dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002e76:	f000 fa23 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	200009a0 	.word	0x200009a0
 8002e88:	40000400 	.word	0x40000400

08002e8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e92:	f107 0308 	add.w	r3, r7, #8
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea0:	463b      	mov	r3, r7
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <MX_TIM4_Init+0x94>)
 8002eaa:	4a1e      	ldr	r2, [pc, #120]	; (8002f24 <MX_TIM4_Init+0x98>)
 8002eac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 8002eae:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <MX_TIM4_Init+0x94>)
 8002eb0:	2229      	movs	r2, #41	; 0x29
 8002eb2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <MX_TIM4_Init+0x94>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <MX_TIM4_Init+0x94>)
 8002ebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ec0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec2:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <MX_TIM4_Init+0x94>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <MX_TIM4_Init+0x94>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ece:	4814      	ldr	r0, [pc, #80]	; (8002f20 <MX_TIM4_Init+0x94>)
 8002ed0:	f006 fb28 	bl	8009524 <HAL_TIM_Base_Init>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002eda:	f000 f9f1 	bl	80032c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ee4:	f107 0308 	add.w	r3, r7, #8
 8002ee8:	4619      	mov	r1, r3
 8002eea:	480d      	ldr	r0, [pc, #52]	; (8002f20 <MX_TIM4_Init+0x94>)
 8002eec:	f006 fd4a 	bl	8009984 <HAL_TIM_ConfigClockSource>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002ef6:	f000 f9e3 	bl	80032c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002efa:	2320      	movs	r3, #32
 8002efc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002efe:	2300      	movs	r3, #0
 8002f00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f02:	463b      	mov	r3, r7
 8002f04:	4619      	mov	r1, r3
 8002f06:	4806      	ldr	r0, [pc, #24]	; (8002f20 <MX_TIM4_Init+0x94>)
 8002f08:	f006 ff66 	bl	8009dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002f12:	f000 f9d5 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f16:	bf00      	nop
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200009e8 	.word	0x200009e8
 8002f24:	40000800 	.word	0x40000800

08002f28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f2e:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <MX_USART1_UART_Init+0x50>)
 8002f30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f4e:	220c      	movs	r2, #12
 8002f50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f5e:	4805      	ldr	r0, [pc, #20]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f60:	f006 ffca 	bl	8009ef8 <HAL_UART_Init>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f6a:	f000 f9a9 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000a30 	.word	0x20000a30
 8002f78:	40011000 	.word	0x40011000

08002f7c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <MX_USART6_UART_Init+0x4c>)
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <MX_USART6_UART_Init+0x50>)
 8002f84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <MX_USART6_UART_Init+0x4c>)
 8002f88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <MX_USART6_UART_Init+0x4c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <MX_USART6_UART_Init+0x4c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <MX_USART6_UART_Init+0x4c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <MX_USART6_UART_Init+0x4c>)
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <MX_USART6_UART_Init+0x4c>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <MX_USART6_UART_Init+0x4c>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002fb2:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <MX_USART6_UART_Init+0x4c>)
 8002fb4:	f006 ffa0 	bl	8009ef8 <HAL_UART_Init>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002fbe:	f000 f97f 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000a74 	.word	0x20000a74
 8002fcc:	40011400 	.word	0x40011400

08002fd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	4b14      	ldr	r3, [pc, #80]	; (800302c <MX_DMA_Init+0x5c>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a13      	ldr	r2, [pc, #76]	; (800302c <MX_DMA_Init+0x5c>)
 8002fe0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <MX_DMA_Init+0x5c>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fee:	607b      	str	r3, [r7, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2105      	movs	r1, #5
 8002ff6:	2038      	movs	r0, #56	; 0x38
 8002ff8:	f002 ff0a 	bl	8005e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ffc:	2038      	movs	r0, #56	; 0x38
 8002ffe:	f002 ff23 	bl	8005e48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2105      	movs	r1, #5
 8003006:	2039      	movs	r0, #57	; 0x39
 8003008:	f002 ff02 	bl	8005e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800300c:	2039      	movs	r0, #57	; 0x39
 800300e:	f002 ff1b 	bl	8005e48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	2105      	movs	r1, #5
 8003016:	203a      	movs	r0, #58	; 0x3a
 8003018:	f002 fefa 	bl	8005e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800301c:	203a      	movs	r0, #58	; 0x3a
 800301e:	f002 ff13 	bl	8005e48 <HAL_NVIC_EnableIRQ>

}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800

08003030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	; 0x30
 8003034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003036:	f107 031c 	add.w	r3, r7, #28
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	60da      	str	r2, [r3, #12]
 8003044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	4b83      	ldr	r3, [pc, #524]	; (8003258 <MX_GPIO_Init+0x228>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a82      	ldr	r2, [pc, #520]	; (8003258 <MX_GPIO_Init+0x228>)
 8003050:	f043 0310 	orr.w	r3, r3, #16
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b80      	ldr	r3, [pc, #512]	; (8003258 <MX_GPIO_Init+0x228>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	4b7c      	ldr	r3, [pc, #496]	; (8003258 <MX_GPIO_Init+0x228>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a7b      	ldr	r2, [pc, #492]	; (8003258 <MX_GPIO_Init+0x228>)
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b79      	ldr	r3, [pc, #484]	; (8003258 <MX_GPIO_Init+0x228>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	4b75      	ldr	r3, [pc, #468]	; (8003258 <MX_GPIO_Init+0x228>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a74      	ldr	r2, [pc, #464]	; (8003258 <MX_GPIO_Init+0x228>)
 8003088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b72      	ldr	r3, [pc, #456]	; (8003258 <MX_GPIO_Init+0x228>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	4b6e      	ldr	r3, [pc, #440]	; (8003258 <MX_GPIO_Init+0x228>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a6d      	ldr	r2, [pc, #436]	; (8003258 <MX_GPIO_Init+0x228>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b6b      	ldr	r3, [pc, #428]	; (8003258 <MX_GPIO_Init+0x228>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	4b67      	ldr	r3, [pc, #412]	; (8003258 <MX_GPIO_Init+0x228>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	4a66      	ldr	r2, [pc, #408]	; (8003258 <MX_GPIO_Init+0x228>)
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b64      	ldr	r3, [pc, #400]	; (8003258 <MX_GPIO_Init+0x228>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
 80030d6:	4b60      	ldr	r3, [pc, #384]	; (8003258 <MX_GPIO_Init+0x228>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	4a5f      	ldr	r2, [pc, #380]	; (8003258 <MX_GPIO_Init+0x228>)
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	6313      	str	r3, [r2, #48]	; 0x30
 80030e2:	4b5d      	ldr	r3, [pc, #372]	; (8003258 <MX_GPIO_Init+0x228>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, GPIO_PIN_RESET);
 80030ee:	2200      	movs	r2, #0
 80030f0:	2101      	movs	r1, #1
 80030f2:	485a      	ldr	r0, [pc, #360]	; (800325c <MX_GPIO_Init+0x22c>)
 80030f4:	f004 ff62 	bl	8007fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 80030f8:	2200      	movs	r2, #0
 80030fa:	f24c 417f 	movw	r1, #50303	; 0xc47f
 80030fe:	4858      	ldr	r0, [pc, #352]	; (8003260 <MX_GPIO_Init+0x230>)
 8003100:	f004 ff5c 	bl	8007fbc <HAL_GPIO_WritePin>
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8003104:	2200      	movs	r2, #0
 8003106:	f64f 7180 	movw	r1, #65408	; 0xff80
 800310a:	4856      	ldr	r0, [pc, #344]	; (8003264 <MX_GPIO_Init+0x234>)
 800310c:	f004 ff56 	bl	8007fbc <HAL_GPIO_WritePin>
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 8003110:	2200      	movs	r2, #0
 8003112:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8003116:	4854      	ldr	r0, [pc, #336]	; (8003268 <MX_GPIO_Init+0x238>)
 8003118:	f004 ff50 	bl	8007fbc <HAL_GPIO_WritePin>
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, GPIO_PIN_RESET);
 800311c:	2200      	movs	r2, #0
 800311e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003122:	4852      	ldr	r0, [pc, #328]	; (800326c <MX_GPIO_Init+0x23c>)
 8003124:	f004 ff4a 	bl	8007fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8003128:	2201      	movs	r2, #1
 800312a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800312e:	484b      	ldr	r0, [pc, #300]	; (800325c <MX_GPIO_Init+0x22c>)
 8003130:	f004 ff44 	bl	8007fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN_4_Pin DIN_5_Pin DIN_6_Pin DIN_7_Pin
                           DIN_8_Pin DIN_2_Pin DIN_3_Pin */
  GPIO_InitStruct.Pin = DIN_4_Pin|DIN_5_Pin|DIN_6_Pin|DIN_7_Pin
 8003134:	237f      	movs	r3, #127	; 0x7f
 8003136:	61fb      	str	r3, [r7, #28]
                          |DIN_8_Pin|DIN_2_Pin|DIN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003138:	2300      	movs	r3, #0
 800313a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800313c:	2301      	movs	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003140:	f107 031c 	add.w	r3, r7, #28
 8003144:	4619      	mov	r1, r3
 8003146:	4847      	ldr	r0, [pc, #284]	; (8003264 <MX_GPIO_Init+0x234>)
 8003148:	f004 fc88 	bl	8007a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_9_Pin DIN_10_Pin DIN_11_Pin */
  GPIO_InitStruct.Pin = DIN_9_Pin|DIN_10_Pin|DIN_11_Pin;
 800314c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003156:	2301      	movs	r3, #1
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800315a:	f107 031c 	add.w	r3, r7, #28
 800315e:	4619      	mov	r1, r3
 8003160:	4842      	ldr	r0, [pc, #264]	; (800326c <MX_GPIO_Init+0x23c>)
 8003162:	f004 fc7b 	bl	8007a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ERESET_Pin S3CS0_Pin */
  GPIO_InitStruct.Pin = ERESET_Pin|S3CS0_Pin;
 8003166:	f248 0301 	movw	r3, #32769	; 0x8001
 800316a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316c:	2301      	movs	r3, #1
 800316e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003174:	2300      	movs	r3, #0
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	4619      	mov	r1, r3
 800317e:	4837      	ldr	r0, [pc, #220]	; (800325c <MX_GPIO_Init+0x22c>)
 8003180:	f004 fc6c 	bl	8007a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD0_Pin LCD1_Pin LCD2_Pin DOUT_9_Pin
                           LED_Pin LCDLED_Pin LCD3_Pin LCDR_Pin
                           LCDE_Pin LCDA_Pin */
  GPIO_InitStruct.Pin = LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8003184:	f24c 437f 	movw	r3, #50303	; 0xc47f
 8003188:	61fb      	str	r3, [r7, #28]
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318a:	2301      	movs	r3, #1
 800318c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003192:	2300      	movs	r3, #0
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003196:	f107 031c 	add.w	r3, r7, #28
 800319a:	4619      	mov	r1, r3
 800319c:	4830      	ldr	r0, [pc, #192]	; (8003260 <MX_GPIO_Init+0x230>)
 800319e:	f004 fc5d 	bl	8007a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_0_Pin DOUT_1_Pin DOUT_2_Pin DOUT_3_Pin
                           DOUT_4_Pin DOUT_5_Pin DOUT_6_Pin DOUT_7_Pin
                           DOUT_8_Pin */
  GPIO_InitStruct.Pin = DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 80031a2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80031a6:	61fb      	str	r3, [r7, #28]
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a8:	2301      	movs	r3, #1
 80031aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031b4:	f107 031c 	add.w	r3, r7, #28
 80031b8:	4619      	mov	r1, r3
 80031ba:	482a      	ldr	r0, [pc, #168]	; (8003264 <MX_GPIO_Init+0x234>)
 80031bc:	f004 fc4e 	bl	8007a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_10_Pin DOUT_11_Pin KEYB_C0_Pin KEYB_C1_Pin
                           KEYB_C2_Pin KEYB_C3_Pin KEYB_C4_Pin KEYB_C5_Pin */
  GPIO_InitStruct.Pin = DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 80031c0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80031c4:	61fb      	str	r3, [r7, #28]
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c6:	2301      	movs	r3, #1
 80031c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ce:	2300      	movs	r3, #0
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031d2:	f107 031c 	add.w	r3, r7, #28
 80031d6:	4619      	mov	r1, r3
 80031d8:	4823      	ldr	r0, [pc, #140]	; (8003268 <MX_GPIO_Init+0x238>)
 80031da:	f004 fc3f 	bl	8007a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_TX_Pin */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 80031de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e4:	2301      	movs	r3, #1
 80031e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 80031f0:	f107 031c 	add.w	r3, r7, #28
 80031f4:	4619      	mov	r1, r3
 80031f6:	481d      	ldr	r0, [pc, #116]	; (800326c <MX_GPIO_Init+0x23c>)
 80031f8:	f004 fc30 	bl	8007a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	2302      	movs	r3, #2
 8003204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320a:	2300      	movs	r3, #0
 800320c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800320e:	2300      	movs	r3, #0
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003212:	f107 031c 	add.w	r3, r7, #28
 8003216:	4619      	mov	r1, r3
 8003218:	4810      	ldr	r0, [pc, #64]	; (800325c <MX_GPIO_Init+0x22c>)
 800321a:	f004 fc1f 	bl	8007a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYB_R0_Pin KEYB_R1_Pin KEYB_R2_Pin KEYB_R3_Pin
                           KEYB_R4_Pin KEYB_R5_Pin */
  GPIO_InitStruct.Pin = KEYB_R0_Pin|KEYB_R1_Pin|KEYB_R2_Pin|KEYB_R3_Pin
 800321e:	233f      	movs	r3, #63	; 0x3f
 8003220:	61fb      	str	r3, [r7, #28]
                          |KEYB_R4_Pin|KEYB_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003222:	2300      	movs	r3, #0
 8003224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003226:	2302      	movs	r3, #2
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800322a:	f107 031c 	add.w	r3, r7, #28
 800322e:	4619      	mov	r1, r3
 8003230:	480d      	ldr	r0, [pc, #52]	; (8003268 <MX_GPIO_Init+0x238>)
 8003232:	f004 fc13 	bl	8007a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_0_Pin DIN_1_Pin */
  GPIO_InitStruct.Pin = DIN_0_Pin|DIN_1_Pin;
 8003236:	f44f 7340 	mov.w	r3, #768	; 0x300
 800323a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800323c:	2300      	movs	r3, #0
 800323e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003240:	2301      	movs	r3, #1
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003244:	f107 031c 	add.w	r3, r7, #28
 8003248:	4619      	mov	r1, r3
 800324a:	4805      	ldr	r0, [pc, #20]	; (8003260 <MX_GPIO_Init+0x230>)
 800324c:	f004 fc06 	bl	8007a5c <HAL_GPIO_Init>

}
 8003250:	bf00      	nop
 8003252:	3730      	adds	r7, #48	; 0x30
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40023800 	.word	0x40023800
 800325c:	40020000 	.word	0x40020000
 8003260:	40020400 	.word	0x40020400
 8003264:	40021000 	.word	0x40021000
 8003268:	40020c00 	.word	0x40020c00
 800326c:	40020800 	.word	0x40020800

08003270 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8003278:	f008 f962 	bl	800b540 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  int result = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
  task_init();
 8003280:	f7fe f860 	bl	8001344 <task_init>
  result = settingsLoadFRAM();
 8003284:	f001 f88a 	bl	800439c <settingsLoadFRAM>
 8003288:	60f8      	str	r0, [r7, #12]
  main_process_init();
 800328a:	f000 f82d 	bl	80032e8 <main_process_init>
  /* Infinite loop */
  for(;;)
  {
	main_process();
 800328e:	f000 f81c 	bl	80032ca <main_process>
    osDelay(1);
 8003292:	2001      	movs	r0, #1
 8003294:	f008 feff 	bl	800c096 <osDelay>
	main_process();
 8003298:	e7f9      	b.n	800328e <StartDefaultTask+0x1e>
	...

0800329c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d101      	bne.n	80032b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032ae:	f002 f887 	bl	80053c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40010000 	.word	0x40010000

080032c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032c4:	b672      	cpsid	i
}
 80032c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032c8:	e7fe      	b.n	80032c8 <Error_Handler+0x8>

080032ca <main_process>:
#include <probotbornik.h>



void main_process()
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	af00      	add	r7, sp, #0
	Read_Inputs();
 80032ce:	f7fd fa63 	bl	8000798 <Read_Inputs>
	Analog_Read();
 80032d2:	f7fd f969 	bl	80005a8 <Analog_Read>
	probotbor_process();
 80032d6:	f000 fc47 	bl	8003b68 <probotbor_process>
	Write_Outputs();
 80032da:	f7fd fbf1 	bl	8000ac0 <Write_Outputs>

	osDelay(1);
 80032de:	2001      	movs	r0, #1
 80032e0:	f008 fed9 	bl	800c096 <osDelay>
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <main_process_init>:

void main_process_init()
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0

}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <ModbusInit>:
static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source);
static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source);
static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource));

void ModbusInit()
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
	holding_pointer = (uint16_t*)&settings;
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <ModbusInit+0x34>)
 80032fe:	4a0c      	ldr	r2, [pc, #48]	; (8003330 <ModbusInit+0x38>)
 8003300:	601a      	str	r2, [r3, #0]
	reading_pointer = (uint16_t*)&meas_data;
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <ModbusInit+0x3c>)
 8003304:	4a0c      	ldr	r2, [pc, #48]	; (8003338 <ModbusInit+0x40>)
 8003306:	601a      	str	r2, [r3, #0]
	holding_size = sizeof(settings)/2;
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <ModbusInit+0x44>)
 800330a:	224e      	movs	r2, #78	; 0x4e
 800330c:	801a      	strh	r2, [r3, #0]
	reading_size = sizeof(meas_data)/2;
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <ModbusInit+0x48>)
 8003310:	2236      	movs	r2, #54	; 0x36
 8003312:	801a      	strh	r2, [r3, #0]
	if(settings.retain.mb_addr==0)settings.retain.mb_addr = 1;
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <ModbusInit+0x38>)
 8003316:	891b      	ldrh	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <ModbusInit+0x2a>
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <ModbusInit+0x38>)
 800331e:	2201      	movs	r2, #1
 8003320:	811a      	strh	r2, [r3, #8]
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	20000b80 	.word	0x20000b80
 8003330:	20000bc0 	.word	0x20000bc0
 8003334:	20000b84 	.word	0x20000b84
 8003338:	20000c5c 	.word	0x20000c5c
 800333c:	20000b88 	.word	0x20000b88
 8003340:	20000b8a 	.word	0x20000b8a

08003344 <ModbusParse>:


//Ф-я парсинга входящего буфера, если это Modbus, то возвращает кол-во байт
int ModbusParse(uint8_t *request, uint16_t req_length, uint8_t *answer, ModbusSource source)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	461a      	mov	r2, r3
 8003350:	460b      	mov	r3, r1
 8003352:	817b      	strh	r3, [r7, #10]
 8003354:	4613      	mov	r3, r2
 8003356:	727b      	strb	r3, [r7, #9]
	settings.non_retain.data[37]++;
 8003358:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <ModbusParse+0xb0>)
 800335a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800335e:	3301      	adds	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <ModbusParse+0xb0>)
 8003364:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	if(answer==NULL)return 0; // Проверка, выделилась ли память под ответ
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <ModbusParse+0x2e>
 800336e:	2300      	movs	r3, #0
 8003370:	e03c      	b.n	80033ec <ModbusParse+0xa8>
	if(!CheckRequestLength(request,req_length,source))return 0; // Проверка корректности длины пакета
 8003372:	897b      	ldrh	r3, [r7, #10]
 8003374:	7a7a      	ldrb	r2, [r7, #9]
 8003376:	4619      	mov	r1, r3
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f83d 	bl	80033f8 <CheckRequestLength>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <ModbusParse+0x44>
 8003384:	2300      	movs	r3, #0
 8003386:	e031      	b.n	80033ec <ModbusParse+0xa8>
	if(!CheckMbAddr(request, source))return 0; // Проверка корректности адреса
 8003388:	7a7b      	ldrb	r3, [r7, #9]
 800338a:	4619      	mov	r1, r3
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f857 	bl	8003440 <CheckMbAddr>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <ModbusParse+0x58>
 8003398:	2300      	movs	r3, #0
 800339a:	e027      	b.n	80033ec <ModbusParse+0xa8>
	if(!IsCorrectMbCommand(request, source))// Проверка корректности функционального кода
 800339c:	7a7b      	ldrb	r3, [r7, #9]
 800339e:	4619      	mov	r1, r3
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f873 	bl	800348c <IsCorrectMbCommand>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <ModbusParse+0x78>
	{
		return SetInvalidCommand(request, answer, 1, source);
 80033ac:	7a7b      	ldrb	r3, [r7, #9]
 80033ae:	2201      	movs	r2, #1
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f89e 	bl	80034f4 <SetInvalidCommand>
 80033b8:	4603      	mov	r3, r0
 80033ba:	e017      	b.n	80033ec <ModbusParse+0xa8>
	}
	if(!CheckCrc(request, req_length, source))
 80033bc:	897b      	ldrh	r3, [r7, #10]
 80033be:	7a7a      	ldrb	r2, [r7, #9]
 80033c0:	4619      	mov	r1, r3
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f93f 	bl	8003646 <CheckCrc>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d107      	bne.n	80033de <ModbusParse+0x9a>
	{
		return SetInvalidCommand(request, answer, 3, source);
 80033ce:	7a7b      	ldrb	r3, [r7, #9]
 80033d0:	2203      	movs	r2, #3
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f88d 	bl	80034f4 <SetInvalidCommand>
 80033da:	4603      	mov	r3, r0
 80033dc:	e006      	b.n	80033ec <ModbusParse+0xa8>
	}
	return GetModbusAnswer(request, answer, source);
 80033de:	7a7b      	ldrb	r3, [r7, #9]
 80033e0:	461a      	mov	r2, r3
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f963 	bl	80036b0 <GetModbusAnswer>
 80033ea:	4603      	mov	r3, r0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000bc0 	.word	0x20000bc0

080033f8 <CheckRequestLength>:

//Проверка соответствия длины данных, передаваемых в буфере
static uint8_t CheckRequestLength(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	4613      	mov	r3, r2
 8003404:	71fb      	strb	r3, [r7, #7]
	if(source==RS485)return 1;
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <CheckRequestLength+0x18>
 800340c:	2301      	movs	r3, #1
 800340e:	e010      	b.n	8003432 <CheckRequestLength+0x3a>
    int len_from_packet = (*(request_pointer+4))*256 + *(request_pointer+5);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3304      	adds	r3, #4
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	3205      	adds	r2, #5
 800341c:	7812      	ldrb	r2, [r2, #0]
 800341e:	4413      	add	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
    return len_from_packet+6 == request_length;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	3306      	adds	r3, #6
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	429a      	cmp	r2, r3
 800342a:	bf0c      	ite	eq
 800342c:	2301      	moveq	r3, #1
 800342e:	2300      	movne	r3, #0
 8003430:	b2db      	uxtb	r3, r3
}
 8003432:	4618      	mov	r0, r3
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <CheckMbAddr>:

//Проверка соответсия адреса в сети Modbus сервера
static uint8_t CheckMbAddr(uint8_t *request,ModbusSource source)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]
	uint8_t addr = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d103      	bne.n	800345e <CheckMbAddr+0x1e>
	{
		addr =  *(request+6);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	799b      	ldrb	r3, [r3, #6]
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	e005      	b.n	800346a <CheckMbAddr+0x2a>
	}
	else if(source==RS485)
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <CheckMbAddr+0x2a>
	{
		addr =  *(request);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	73fb      	strb	r3, [r7, #15]
	}
	return addr == settings.retain.mb_addr;
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	b29a      	uxth	r2, r3
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <CheckMbAddr+0x48>)
 8003470:	891b      	ldrh	r3, [r3, #8]
 8003472:	429a      	cmp	r2, r3
 8003474:	bf0c      	ite	eq
 8003476:	2301      	moveq	r3, #1
 8003478:	2300      	movne	r3, #0
 800347a:	b2db      	uxtb	r3, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	20000bc0 	.word	0x20000bc0

0800348c <IsCorrectMbCommand>:

//Проверка корректности функционального кода
static uint8_t IsCorrectMbCommand(uint8_t *request,ModbusSource source)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d103      	bne.n	80034aa <IsCorrectMbCommand+0x1e>
	{
		cmd = *(request+7);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	79db      	ldrb	r3, [r3, #7]
 80034a6:	73fb      	strb	r3, [r7, #15]
 80034a8:	e005      	b.n	80034b6 <IsCorrectMbCommand+0x2a>
	}
	else if(source==RS485)
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <IsCorrectMbCommand+0x2a>
	{
		cmd = *(request+1);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	785b      	ldrb	r3, [r3, #1]
 80034b4:	73fb      	strb	r3, [r7, #15]
	}
	/*
	 * Функция возвращает 1, если номер команды корректен, 0 - если некорректен
	 * cmd - номер команды
	 * */
	switch (cmd) {
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b10      	cmp	r3, #16
 80034ba:	bf8c      	ite	hi
 80034bc:	2201      	movhi	r2, #1
 80034be:	2200      	movls	r2, #0
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	2a00      	cmp	r2, #0
 80034c4:	d10c      	bne.n	80034e0 <IsCorrectMbCommand+0x54>
 80034c6:	2201      	movs	r2, #1
 80034c8:	409a      	lsls	r2, r3
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <IsCorrectMbCommand+0x64>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf14      	ite	ne
 80034d2:	2301      	movne	r3, #1
 80034d4:	2300      	moveq	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <IsCorrectMbCommand+0x54>
		case 3:
		case 4:
		case 6:
		//case 5:
        case 16:
            return 1;
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <IsCorrectMbCommand+0x56>
		default:
			return 0;
 80034e0:	2300      	movs	r3, #0
	}
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	00010058 	.word	0x00010058

080034f4 <SetInvalidCommand>:

//Формирует телеграмму ошиобного запроса
static int SetInvalidCommand(uint8_t *request, uint8_t *answer, uint8_t code, ModbusSource source)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	4611      	mov	r1, r2
 8003500:	461a      	mov	r2, r3
 8003502:	460b      	mov	r3, r1
 8003504:	71fb      	strb	r3, [r7, #7]
 8003506:	4613      	mov	r3, r2
 8003508:	71bb      	strb	r3, [r7, #6]
	uint8_t func_code = source ? *(request+1) : *(request+1);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	785b      	ldrb	r3, [r3, #1]
 800350e:	75fb      	strb	r3, [r7, #23]
	func_code = set_bit(func_code, 7);
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	b29b      	uxth	r3, r3
 8003514:	2107      	movs	r1, #7
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd f926 	bl	8000768 <set_bit>
 800351c:	4603      	mov	r3, r0
 800351e:	75fb      	strb	r3, [r7, #23]
	if(source==RS485)
 8003520:	79bb      	ldrb	r3, [r7, #6]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d11d      	bne.n	8003562 <SetInvalidCommand+0x6e>
	{
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8003526:	2300      	movs	r3, #0
 8003528:	82bb      	strh	r3, [r7, #20]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	781a      	ldrb	r2, [r3, #0]
		memcpy(answer,request,1);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	701a      	strb	r2, [r3, #0]
		*(answer+1) = func_code;//Функциональный код с измененным битом
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3301      	adds	r3, #1
 8003536:	7dfa      	ldrb	r2, [r7, #23]
 8003538:	701a      	strb	r2, [r3, #0]
		*(answer+2) = code;//Функциональный код с измененным битом
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	3302      	adds	r3, #2
 800353e:	79fa      	ldrb	r2, [r7, #7]
 8003540:	701a      	strb	r2, [r3, #0]
		CRC16_CALC(answer,check_sum,3);
 8003542:	f107 0314 	add.w	r3, r7, #20
 8003546:	2203      	movs	r2, #3
 8003548:	4619      	mov	r1, r3
 800354a:	68b8      	ldr	r0, [r7, #8]
 800354c:	f000 f832 	bl	80035b4 <CRC16_CALC>
		*(answer+3) = check_sum[0];
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	3303      	adds	r3, #3
 8003554:	7d3a      	ldrb	r2, [r7, #20]
 8003556:	701a      	strb	r2, [r3, #0]
		*(answer+4) = check_sum[1];
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	3304      	adds	r3, #4
 800355c:	7d7a      	ldrb	r2, [r7, #21]
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	e01c      	b.n	800359c <SetInvalidCommand+0xa8>
	}
	else if(source==ETHERNET)
 8003562:	79bb      	ldrb	r3, [r7, #6]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d119      	bne.n	800359c <SetInvalidCommand+0xa8>
	{
		memcpy(answer,request,8);
 8003568:	2208      	movs	r2, #8
 800356a:	68f9      	ldr	r1, [r7, #12]
 800356c:	68b8      	ldr	r0, [r7, #8]
 800356e:	f019 f991 	bl	801c894 <memcpy>
		*(answer+4) = 0;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3304      	adds	r3, #4
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]
		*(answer+5) = 3;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	3305      	adds	r3, #5
 800357e:	2203      	movs	r2, #3
 8003580:	701a      	strb	r2, [r3, #0]
		*(answer+7) |= 128;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	3307      	adds	r3, #7
 8003586:	781a      	ldrb	r2, [r3, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	3307      	adds	r3, #7
 800358c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]
		*(answer+8) = code;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	3308      	adds	r3, #8
 8003598:	79fa      	ldrb	r2, [r7, #7]
 800359a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t len = source==RS485 ? 5 : 9;
 800359c:	79bb      	ldrb	r3, [r7, #6]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <SetInvalidCommand+0xb2>
 80035a2:	2305      	movs	r3, #5
 80035a4:	e000      	b.n	80035a8 <SetInvalidCommand+0xb4>
 80035a6:	2309      	movs	r3, #9
 80035a8:	75bb      	strb	r3, [r7, #22]
	return len;
 80035aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <CRC16_CALC>:

static void CRC16_CALC(uint8_t* arr, uint8_t* checkSum, uint8_t messageLength)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b089      	sub	sp, #36	; 0x24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	4613      	mov	r3, r2
 80035c0:	71fb      	strb	r3, [r7, #7]
	/*Функция расчета контрольной суммы
		 * arr - указатель на массив байт, по которым нужно посчитать CRC
		 * checkSum - указатель на массив из 2 байт, куда нужно положить CRC
		 * messageLength - ко-во байт, по которым нужно считать CRC	 *
		 * */
		uint16_t reg = 0xFFFF;
 80035c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035c6:	83fb      	strh	r3, [r7, #30]
		uint16_t polinom = 0xA001;
 80035c8:	f24a 0301 	movw	r3, #40961	; 0xa001
 80035cc:	827b      	strh	r3, [r7, #18]
		for(int i=0;i < messageLength;i++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	e023      	b.n	800361c <CRC16_CALC+0x68>
		{
			reg^=*(arr+i);
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4413      	add	r3, r2
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	b29a      	uxth	r2, r3
 80035de:	8bfb      	ldrh	r3, [r7, #30]
 80035e0:	4053      	eors	r3, r2
 80035e2:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	e012      	b.n	8003610 <CRC16_CALC+0x5c>
			{
				if ((reg&1)==1) {
 80035ea:	8bfb      	ldrh	r3, [r7, #30]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <CRC16_CALC+0x50>
					reg>>=1;
 80035f4:	8bfb      	ldrh	r3, [r7, #30]
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	83fb      	strh	r3, [r7, #30]
					reg^=polinom;
 80035fa:	8bfa      	ldrh	r2, [r7, #30]
 80035fc:	8a7b      	ldrh	r3, [r7, #18]
 80035fe:	4053      	eors	r3, r2
 8003600:	83fb      	strh	r3, [r7, #30]
 8003602:	e002      	b.n	800360a <CRC16_CALC+0x56>
				}
				else reg>>=1;
 8003604:	8bfb      	ldrh	r3, [r7, #30]
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	3301      	adds	r3, #1
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2b07      	cmp	r3, #7
 8003614:	dde9      	ble.n	80035ea <CRC16_CALC+0x36>
		for(int i=0;i < messageLength;i++)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	3301      	adds	r3, #1
 800361a:	61bb      	str	r3, [r7, #24]
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	429a      	cmp	r2, r3
 8003622:	dbd7      	blt.n	80035d4 <CRC16_CALC+0x20>
			}
		}
		*(checkSum+1)=(uint8_t)(reg>>8);
 8003624:	8bfb      	ldrh	r3, [r7, #30]
 8003626:	0a1b      	lsrs	r3, r3, #8
 8003628:	b29a      	uxth	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	3301      	adds	r3, #1
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]
		*checkSum = (uint8_t)(reg & 0x00FF);
 8003632:	8bfb      	ldrh	r3, [r7, #30]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	701a      	strb	r2, [r3, #0]
}
 800363a:	bf00      	nop
 800363c:	3724      	adds	r7, #36	; 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <CheckCrc>:

//Проверка контрольной суммы запроса
static uint8_t CheckCrc(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	4613      	mov	r3, r2
 8003652:	71fb      	strb	r3, [r7, #7]
	if(source==ETHERNET)return 1;
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <CheckCrc+0x18>
 800365a:	2301      	movs	r3, #1
 800365c:	e024      	b.n	80036a8 <CheckCrc+0x62>
	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 800365e:	2300      	movs	r3, #0
 8003660:	82bb      	strh	r3, [r7, #20]
	if(request_length<4)return 0;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b03      	cmp	r3, #3
 8003666:	dc01      	bgt.n	800366c <CheckCrc+0x26>
 8003668:	2300      	movs	r3, #0
 800366a:	e01d      	b.n	80036a8 <CheckCrc+0x62>
	CRC16_CALC(request_pointer, check_sum, request_length-2);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3b02      	subs	r3, #2
 8003672:	b2da      	uxtb	r2, r3
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	4619      	mov	r1, r3
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f7ff ff9a 	bl	80035b4 <CRC16_CALC>
	return request_pointer[request_length-2]==check_sum[0] && request_pointer[request_length-1]==check_sum[1];
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	3b02      	subs	r3, #2
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4413      	add	r3, r2
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	7d3b      	ldrb	r3, [r7, #20]
 800368c:	429a      	cmp	r2, r3
 800368e:	d109      	bne.n	80036a4 <CheckCrc+0x5e>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	3b01      	subs	r3, #1
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	7d7b      	ldrb	r3, [r7, #21]
 800369c:	429a      	cmp	r2, r3
 800369e:	d101      	bne.n	80036a4 <CheckCrc+0x5e>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <CheckCrc+0x60>
 80036a4:	2300      	movs	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <GetModbusAnswer>:

//Возвращает кол-во байт, котрые нужно передать обратно
static int GetModbusAnswer(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	71fb      	strb	r3, [r7, #7]
	uint8_t func_code = source==RS485 ? *(request+1) : *(request+7);
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <GetModbusAnswer+0x1a>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	785b      	ldrb	r3, [r3, #1]
 80036c8:	e001      	b.n	80036ce <GetModbusAnswer+0x1e>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	79db      	ldrb	r3, [r3, #7]
 80036ce:	75fb      	strb	r3, [r7, #23]

	switch (func_code) {
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	3b03      	subs	r3, #3
 80036d4:	2b0d      	cmp	r3, #13
 80036d6:	d849      	bhi.n	800376c <GetModbusAnswer+0xbc>
 80036d8:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <GetModbusAnswer+0x30>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	08003719 	.word	0x08003719
 80036e4:	08003733 	.word	0x08003733
 80036e8:	0800376d 	.word	0x0800376d
 80036ec:	0800374d 	.word	0x0800374d
 80036f0:	0800376d 	.word	0x0800376d
 80036f4:	0800376d 	.word	0x0800376d
 80036f8:	0800376d 	.word	0x0800376d
 80036fc:	0800376d 	.word	0x0800376d
 8003700:	0800376d 	.word	0x0800376d
 8003704:	0800376d 	.word	0x0800376d
 8003708:	0800376d 	.word	0x0800376d
 800370c:	0800376d 	.word	0x0800376d
 8003710:	0800376d 	.word	0x0800376d
 8003714:	0800375d 	.word	0x0800375d
		case READ_HOLDING_REGS:
			return ReadRegisters(request, answer, holding_pointer, holding_size, source);
 8003718:	4b17      	ldr	r3, [pc, #92]	; (8003778 <GetModbusAnswer+0xc8>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4b17      	ldr	r3, [pc, #92]	; (800377c <GetModbusAnswer+0xcc>)
 800371e:	8819      	ldrh	r1, [r3, #0]
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	460b      	mov	r3, r1
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f831 	bl	8003790 <ReadRegisters>
 800372e:	4603      	mov	r3, r0
 8003730:	e01e      	b.n	8003770 <GetModbusAnswer+0xc0>
		case READ_INPUT_REGS:
			return ReadRegisters(request, answer, reading_pointer, reading_size, source);
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <GetModbusAnswer+0xd0>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b13      	ldr	r3, [pc, #76]	; (8003784 <GetModbusAnswer+0xd4>)
 8003738:	8819      	ldrh	r1, [r3, #0]
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	460b      	mov	r3, r1
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f824 	bl	8003790 <ReadRegisters>
 8003748:	4603      	mov	r3, r0
 800374a:	e011      	b.n	8003770 <GetModbusAnswer+0xc0>
		case WRITE_SINGLE_REG:
			return WriteToHoldings(request, answer, source, &WriteSingleRegister);
 800374c:	79fa      	ldrb	r2, [r7, #7]
 800374e:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <GetModbusAnswer+0xd8>)
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f9dc 	bl	8003b10 <WriteToHoldings>
 8003758:	4603      	mov	r3, r0
 800375a:	e009      	b.n	8003770 <GetModbusAnswer+0xc0>
		case WRITE_MULTIPLY_REGS:
			return WriteToHoldings(request, answer, source, &WrieMultiplyRegisters);
 800375c:	79fa      	ldrb	r2, [r7, #7]
 800375e:	4b0b      	ldr	r3, [pc, #44]	; (800378c <GetModbusAnswer+0xdc>)
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f9d4 	bl	8003b10 <WriteToHoldings>
 8003768:	4603      	mov	r3, r0
 800376a:	e001      	b.n	8003770 <GetModbusAnswer+0xc0>
		default:
			break;
 800376c:	bf00      	nop
	}
	return 0;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000b80 	.word	0x20000b80
 800377c:	20000b88 	.word	0x20000b88
 8003780:	20000b84 	.word	0x20000b84
 8003784:	20000b8a 	.word	0x20000b8a
 8003788:	08003971 	.word	0x08003971
 800378c:	08003a15 	.word	0x08003a15

08003790 <ReadRegisters>:

//Ф-я чтения регистров из памяти memory_pointer размером memory_size
static int ReadRegisters(uint8_t *request, uint8_t *answer, uint16_t *memory_pointer, uint16_t memory_size, ModbusSource source)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	807b      	strh	r3, [r7, #2]
	uint16_t  maxAddr = memory_size-1;
 800379e:	887b      	ldrh	r3, [r7, #2]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	83fb      	strh	r3, [r7, #30]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 80037a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <ReadRegisters+0x20>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e000      	b.n	80037b2 <ReadRegisters+0x22>
 80037b0:	2308      	movs	r3, #8
 80037b2:	4619      	mov	r1, r3
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f882 	bl	80038be <GetWordFromBytes>
 80037ba:	4603      	mov	r3, r0
 80037bc:	83bb      	strh	r3, [r7, #28]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 80037be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <ReadRegisters+0x3a>
 80037c6:	2304      	movs	r3, #4
 80037c8:	e000      	b.n	80037cc <ReadRegisters+0x3c>
 80037ca:	230a      	movs	r3, #10
 80037cc:	4619      	mov	r1, r3
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f875 	bl	80038be <GetWordFromBytes>
 80037d4:	4603      	mov	r3, r0
 80037d6:	837b      	strh	r3, [r7, #26]
	if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 80037d8:	8bba      	ldrh	r2, [r7, #28]
 80037da:	8b7b      	ldrh	r3, [r7, #26]
 80037dc:	4413      	add	r3, r2
 80037de:	1e5a      	subs	r2, r3, #1
 80037e0:	8bfb      	ldrh	r3, [r7, #30]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	dd08      	ble.n	80037f8 <ReadRegisters+0x68>
 80037e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037ea:	2202      	movs	r2, #2
 80037ec:	68b9      	ldr	r1, [r7, #8]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7ff fe80 	bl	80034f4 <SetInvalidCommand>
 80037f4:	4603      	mov	r3, r0
 80037f6:	e05e      	b.n	80038b6 <ReadRegisters+0x126>
	if(source==ETHERNET)
 80037f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d124      	bne.n	800384a <ReadRegisters+0xba>
	{
		memcpy(answer,request,8);
 8003800:	2208      	movs	r2, #8
 8003802:	68f9      	ldr	r1, [r7, #12]
 8003804:	68b8      	ldr	r0, [r7, #8]
 8003806:	f019 f845 	bl	801c894 <memcpy>
		InsertWordToMemory(reg_count*2+3, answer+4);//Длина сообщения
 800380a:	8b7b      	ldrh	r3, [r7, #26]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	b29b      	uxth	r3, r3
 8003810:	3303      	adds	r3, #3
 8003812:	b29a      	uxth	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	3304      	adds	r3, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f000 f86a 	bl	80038f4 <InsertWordToMemory>
		*(answer+8) = reg_count*2;//количесво байт далее
 8003820:	8b7b      	ldrh	r3, [r7, #26]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	3308      	adds	r3, #8
 8003828:	0052      	lsls	r2, r2, #1
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+9,reg_count);
 800382e:	8bbb      	ldrh	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	18d0      	adds	r0, r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3309      	adds	r3, #9
 800383a:	8b7a      	ldrh	r2, [r7, #26]
 800383c:	4619      	mov	r1, r3
 800383e:	f000 f869 	bl	8003914 <InsertWordsToMemory>
		return 9+reg_count*2;
 8003842:	8b7b      	ldrh	r3, [r7, #26]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	3309      	adds	r3, #9
 8003848:	e035      	b.n	80038b6 <ReadRegisters+0x126>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b29a      	uxth	r2, r3
	}
	else
	{
		memcpy(answer,request,2);
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	801a      	strh	r2, [r3, #0]
		*(answer+2) = reg_count*2;//количесво байт далее
 8003854:	8b7b      	ldrh	r3, [r7, #26]
 8003856:	b2da      	uxtb	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	3302      	adds	r3, #2
 800385c:	0052      	lsls	r2, r2, #1
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+3,reg_count);//Данные
 8003862:	8bbb      	ldrh	r3, [r7, #28]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	18d0      	adds	r0, r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3303      	adds	r3, #3
 800386e:	8b7a      	ldrh	r2, [r7, #26]
 8003870:	4619      	mov	r1, r3
 8003872:	f000 f84f 	bl	8003914 <InsertWordsToMemory>
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8003876:	2300      	movs	r3, #0
 8003878:	823b      	strh	r3, [r7, #16]
		CRC16_CALC(answer,check_sum,3+reg_count*2);
 800387a:	8b7b      	ldrh	r3, [r7, #26]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	3303      	adds	r3, #3
 8003884:	b2da      	uxtb	r2, r3
 8003886:	f107 0310 	add.w	r3, r7, #16
 800388a:	4619      	mov	r1, r3
 800388c:	68b8      	ldr	r0, [r7, #8]
 800388e:	f7ff fe91 	bl	80035b4 <CRC16_CALC>
		int offset = 3+reg_count*2;
 8003892:	8b7b      	ldrh	r3, [r7, #26]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	3303      	adds	r3, #3
 8003898:	617b      	str	r3, [r7, #20]
		*(answer+offset)=check_sum[0];
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	4413      	add	r3, r2
 80038a0:	7c3a      	ldrb	r2, [r7, #16]
 80038a2:	701a      	strb	r2, [r3, #0]
		*(answer+offset+1)=check_sum[1];
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	3301      	adds	r3, #1
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	4413      	add	r3, r2
 80038ac:	7c7a      	ldrb	r2, [r7, #17]
 80038ae:	701a      	strb	r2, [r3, #0]
		return 5+reg_count*2;
 80038b0:	8b7b      	ldrh	r3, [r7, #26]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	3305      	adds	r3, #5

	}
	return 0;
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <GetWordFromBytes>:

static uint16_t GetWordFromBytes(uint8_t *arr, uint8_t pos)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	70fb      	strb	r3, [r7, #3]
	/*Получает 16 битное число из 2x байт, и возвращает его
	 * arr -  указатель на массив байт, из которого нужно получить word
	 * pos - индекс первого байта в массиве
	 *
	 * */
	return (((uint16_t)(*(arr+pos)))<<8) + (uint16_t)(*(arr + pos+1));
 80038ca:	78fb      	ldrb	r3, [r7, #3]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	4413      	add	r3, r2
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	3301      	adds	r3, #1
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	440b      	add	r3, r1
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	b29b      	uxth	r3, r3
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <InsertWordToMemory>:

static void InsertWordToMemory(uint16_t value, uint8_t* memory)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	80fb      	strh	r3, [r7, #6]
    InsertWordsToMemory(&value,memory,1);
 8003900:	1dbb      	adds	r3, r7, #6
 8003902:	2201      	movs	r2, #1
 8003904:	6839      	ldr	r1, [r7, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f804 	bl	8003914 <InsertWordsToMemory>
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <InsertWordsToMemory>:

static void InsertWordsToMemory(uint16_t *source, uint8_t * destination, uint16_t count)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
    for(i=0;i<count*2;i+=2)
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e014      	b.n	8003956 <InsertWordsToMemory+0x42>
    {
        *(destination+i+1)=*((uint8_t*)source+i);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	441a      	add	r2, r3
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	3301      	adds	r3, #1
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	440b      	add	r3, r1
 800393a:	7812      	ldrb	r2, [r2, #0]
 800393c:	701a      	strb	r2, [r3, #0]
        *(destination+i)=*((uint8_t*)source+i+1);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	3301      	adds	r3, #1
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	441a      	add	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	440b      	add	r3, r1
 800394c:	7812      	ldrb	r2, [r2, #0]
 800394e:	701a      	strb	r2, [r3, #0]
    for(i=0;i<count*2;i+=2)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	3302      	adds	r3, #2
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	429a      	cmp	r2, r3
 800395e:	dbe5      	blt.n	800392c <InsertWordsToMemory+0x18>
    }
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <WriteSingleRegister>:


static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	4613      	mov	r3, r2
 800397c:	71fb      	strb	r3, [r7, #7]
    uint16_t  maxAddr = holding_size-1;
 800397e:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <WriteSingleRegister+0x9c>)
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	3b01      	subs	r3, #1
 8003984:	82fb      	strh	r3, [r7, #22]
    uint16_t addr = GetWordFromBytes(request,source==RS485?2:8);
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <WriteSingleRegister+0x20>
 800398c:	2302      	movs	r3, #2
 800398e:	e000      	b.n	8003992 <WriteSingleRegister+0x22>
 8003990:	2308      	movs	r3, #8
 8003992:	4619      	mov	r1, r3
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f7ff ff92 	bl	80038be <GetWordFromBytes>
 800399a:	4603      	mov	r3, r0
 800399c:	82bb      	strh	r3, [r7, #20]
    if(addr>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 800399e:	8aba      	ldrh	r2, [r7, #20]
 80039a0:	8afb      	ldrh	r3, [r7, #22]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d907      	bls.n	80039b6 <WriteSingleRegister+0x46>
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	2202      	movs	r2, #2
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7ff fda1 	bl	80034f4 <SetInvalidCommand>
 80039b2:	4603      	mov	r3, r0
 80039b4:	e026      	b.n	8003a04 <WriteSingleRegister+0x94>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d112      	bne.n	80039e2 <WriteSingleRegister+0x72>
    {
    	InsertWordsToMemory((uint16_t*)(request+10), ((uint8_t*)holding_pointer)+addr*2,1);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f103 000a 	add.w	r0, r3, #10
 80039c2:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <WriteSingleRegister+0xa0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	8aba      	ldrh	r2, [r7, #20]
 80039c8:	0052      	lsls	r2, r2, #1
 80039ca:	4413      	add	r3, r2
 80039cc:	2201      	movs	r2, #1
 80039ce:	4619      	mov	r1, r3
 80039d0:	f7ff ffa0 	bl	8003914 <InsertWordsToMemory>
    	memcpy(answer, request,12);
 80039d4:	220c      	movs	r2, #12
 80039d6:	68f9      	ldr	r1, [r7, #12]
 80039d8:	68b8      	ldr	r0, [r7, #8]
 80039da:	f018 ff5b 	bl	801c894 <memcpy>
    	return 12;
 80039de:	230c      	movs	r3, #12
 80039e0:	e010      	b.n	8003a04 <WriteSingleRegister+0x94>
    }
    else
    {
    	InsertWordsToMemory((uint16_t*)(request+4), ((uint8_t*)holding_pointer)+addr*2,1);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1d18      	adds	r0, r3, #4
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <WriteSingleRegister+0xa0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	8aba      	ldrh	r2, [r7, #20]
 80039ec:	0052      	lsls	r2, r2, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	2201      	movs	r2, #1
 80039f2:	4619      	mov	r1, r3
 80039f4:	f7ff ff8e 	bl	8003914 <InsertWordsToMemory>
    	memcpy(answer, request,8);
 80039f8:	2208      	movs	r2, #8
 80039fa:	68f9      	ldr	r1, [r7, #12]
 80039fc:	68b8      	ldr	r0, [r7, #8]
 80039fe:	f018 ff49 	bl	801c894 <memcpy>
    	return 8;
 8003a02:	2308      	movs	r3, #8
    }
    settingsSaveFRAM();
    return 0;
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000b88 	.word	0x20000b88
 8003a10:	20000b80 	.word	0x20000b80

08003a14 <WrieMultiplyRegisters>:

static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	71fb      	strb	r3, [r7, #7]
	uint16_t  maxAddr = holding_size-1;
 8003a22:	4b39      	ldr	r3, [pc, #228]	; (8003b08 <WrieMultiplyRegisters+0xf4>)
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <WrieMultiplyRegisters+0x20>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e000      	b.n	8003a36 <WrieMultiplyRegisters+0x22>
 8003a34:	2308      	movs	r3, #8
 8003a36:	4619      	mov	r1, r3
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff ff40 	bl	80038be <GetWordFromBytes>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <WrieMultiplyRegisters+0x38>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	e000      	b.n	8003a4e <WrieMultiplyRegisters+0x3a>
 8003a4c:	230a      	movs	r3, #10
 8003a4e:	4619      	mov	r1, r3
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7ff ff34 	bl	80038be <GetWordFromBytes>
 8003a56:	4603      	mov	r3, r0
 8003a58:	827b      	strh	r3, [r7, #18]
    if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8003a5a:	8aba      	ldrh	r2, [r7, #20]
 8003a5c:	8a7b      	ldrh	r3, [r7, #18]
 8003a5e:	4413      	add	r3, r2
 8003a60:	1e5a      	subs	r2, r3, #1
 8003a62:	8afb      	ldrh	r3, [r7, #22]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	dd07      	ble.n	8003a78 <WrieMultiplyRegisters+0x64>
 8003a68:	79fb      	ldrb	r3, [r7, #7]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f7ff fd40 	bl	80034f4 <SetInvalidCommand>
 8003a74:	4603      	mov	r3, r0
 8003a76:	e042      	b.n	8003afe <WrieMultiplyRegisters+0xea>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d11d      	bne.n	8003aba <WrieMultiplyRegisters+0xa6>
    {
    	memcpy(answer, request,12);//сначала повторяющиеся с запросом данные
 8003a7e:	220c      	movs	r2, #12
 8003a80:	68f9      	ldr	r1, [r7, #12]
 8003a82:	68b8      	ldr	r0, [r7, #8]
 8003a84:	f018 ff06 	bl	801c894 <memcpy>
    	InsertWordToMemory(reg_count*2+4, answer+4);//Длина сообщения
 8003a88:	8a7b      	ldrh	r3, [r7, #18]
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	3304      	adds	r3, #4
 8003a96:	4619      	mov	r1, r3
 8003a98:	4610      	mov	r0, r2
 8003a9a:	f7ff ff2b 	bl	80038f4 <InsertWordToMemory>
    	InsertWordsToMemory((uint16_t*)(request+13), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f103 000d 	add.w	r0, r3, #13
 8003aa4:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <WrieMultiplyRegisters+0xf8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	8aba      	ldrh	r2, [r7, #20]
 8003aaa:	0052      	lsls	r2, r2, #1
 8003aac:	4413      	add	r3, r2
 8003aae:	8a7a      	ldrh	r2, [r7, #18]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f7ff ff2f 	bl	8003914 <InsertWordsToMemory>
        return 12;
 8003ab6:	230c      	movs	r3, #12
 8003ab8:	e021      	b.n	8003afe <WrieMultiplyRegisters+0xea>
    }
    else
    {
    	memcpy(answer, request,6);//сначала повторяющиеся с запросом данные
 8003aba:	2206      	movs	r2, #6
 8003abc:	68f9      	ldr	r1, [r7, #12]
 8003abe:	68b8      	ldr	r0, [r7, #8]
 8003ac0:	f018 fee8 	bl	801c894 <memcpy>
    	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	823b      	strh	r3, [r7, #16]
    	CRC16_CALC(answer,check_sum,6);
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	2206      	movs	r2, #6
 8003ace:	4619      	mov	r1, r3
 8003ad0:	68b8      	ldr	r0, [r7, #8]
 8003ad2:	f7ff fd6f 	bl	80035b4 <CRC16_CALC>
		*(answer+6)=check_sum[0];
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	3306      	adds	r3, #6
 8003ada:	7c3a      	ldrb	r2, [r7, #16]
 8003adc:	701a      	strb	r2, [r3, #0]
		*(answer+7)=check_sum[1];
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	3307      	adds	r3, #7
 8003ae2:	7c7a      	ldrb	r2, [r7, #17]
 8003ae4:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory((uint16_t*)(request+7), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1dd8      	adds	r0, r3, #7
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <WrieMultiplyRegisters+0xf8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	8aba      	ldrh	r2, [r7, #20]
 8003af0:	0052      	lsls	r2, r2, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	8a7a      	ldrh	r2, [r7, #18]
 8003af6:	4619      	mov	r1, r3
 8003af8:	f7ff ff0c 	bl	8003914 <InsertWordsToMemory>
		return 8;
 8003afc:	2308      	movs	r3, #8
    }

    return 0;
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000b88 	.word	0x20000b88
 8003b0c:	20000b80 	.word	0x20000b80

08003b10 <WriteToHoldings>:

static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource))
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	71fb      	strb	r3, [r7, #7]
	int result = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
	if(writeMemorySemaphoreHandle!=NULL)
 8003b24:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <WriteToHoldings+0x54>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d016      	beq.n	8003b5a <WriteToHoldings+0x4a>
	{
		if(osSemaphoreWait(writeMemorySemaphoreHandle, 1000)==osOK)
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <WriteToHoldings+0x54>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b34:	4618      	mov	r0, r3
 8003b36:	f008 fb91 	bl	800c25c <osSemaphoreWait>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10c      	bne.n	8003b5a <WriteToHoldings+0x4a>
		{
			result =  (*write)(request,answer,source);
 8003b40:	79fa      	ldrb	r2, [r7, #7]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	4798      	blx	r3
 8003b4a:	6178      	str	r0, [r7, #20]
			settingsSaveFRAM();
 8003b4c:	f000 fc6e 	bl	800442c <settingsSaveFRAM>
			osSemaphoreRelease(writeMemorySemaphoreHandle);
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <WriteToHoldings+0x54>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f008 fbcf 	bl	800c2f8 <osSemaphoreRelease>
		}
	}
	return result;
 8003b5a:	697b      	ldr	r3, [r7, #20]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000b7c 	.word	0x20000b7c

08003b68 <probotbor_process>:
static void StopCycles();
static void Indication();
static void GetPositiveFronts();

void probotbor_process()
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
	SetTimers();
 8003b6c:	f000 f918 	bl	8003da0 <SetTimers>
	if(!initialized)
 8003b70:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <probotbor_process+0x58>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d108      	bne.n	8003b8a <probotbor_process+0x22>
	{
		if(!Init_timers())return;
 8003b78:	f000 f8d6 	bl	8003d28 <Init_timers>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01c      	beq.n	8003bbc <probotbor_process+0x54>
		initialized = 1;
 8003b82:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <probotbor_process+0x58>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
		return;
 8003b88:	e019      	b.n	8003bbe <probotbor_process+0x56>
	}
	GetPositiveFronts();
 8003b8a:	f000 fb6f 	bl	800426c <GetPositiveFronts>
	GetErrors();
 8003b8e:	f000 f81f 	bl	8003bd0 <GetErrors>
	OnCommandCycle();
 8003b92:	f000 fa85 	bl	80040a0 <OnCommandCycle>
	Moving();
 8003b96:	f000 f96f 	bl	8003e78 <Moving>
	if(automatTON.OUT && d_outputs.prob_ready)
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <probotbor_process+0x5c>)
 8003b9c:	7a5b      	ldrb	r3, [r3, #9]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <probotbor_process+0x4e>
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <probotbor_process+0x60>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <probotbor_process+0x4e>
	{
		startOtborCommand = 1;
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <probotbor_process+0x64>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
	}
	Indication();
 8003bb6:	f000 fb1b 	bl	80041f0 <Indication>
 8003bba:	e000      	b.n	8003bbe <probotbor_process+0x56>
		if(!Init_timers())return;
 8003bbc:	bf00      	nop

}
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000b8c 	.word	0x20000b8c
 8003bc4:	20000bb4 	.word	0x20000bb4
 8003bc8:	2000042c 	.word	0x2000042c
 8003bcc:	20000b8f 	.word	0x20000b8f

08003bd0 <GetErrors>:

static void GetErrors()
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
	// Inputs
	meas_data.errors.nakopitel_door_err = !d_inputs.sq_kanistra_door;
 8003bd4:	4b4d      	ldr	r3, [pc, #308]	; (8003d0c <GetErrors+0x13c>)
 8003bd6:	785b      	ldrb	r3, [r3, #1]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bf0c      	ite	eq
 8003be2:	2301      	moveq	r3, #1
 8003be4:	2300      	movne	r3, #0
 8003be6:	b2d9      	uxtb	r1, r3
 8003be8:	4a49      	ldr	r2, [pc, #292]	; (8003d10 <GetErrors+0x140>)
 8003bea:	7e13      	ldrb	r3, [r2, #24]
 8003bec:	f361 0341 	bfi	r3, r1, #1, #1
 8003bf0:	7613      	strb	r3, [r2, #24]
	meas_data.errors.nakopitel_kanistra_err = !d_inputs.sq_kanistra;
 8003bf2:	4b46      	ldr	r3, [pc, #280]	; (8003d0c <GetErrors+0x13c>)
 8003bf4:	785b      	ldrb	r3, [r3, #1]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2d9      	uxtb	r1, r3
 8003c06:	4a42      	ldr	r2, [pc, #264]	; (8003d10 <GetErrors+0x140>)
 8003c08:	7e13      	ldrb	r3, [r2, #24]
 8003c0a:	f361 0300 	bfi	r3, r1, #0, #1
 8003c0e:	7613      	strb	r3, [r2, #24]
	meas_data.errors.uz_err = !d_inputs.uz_prob_fail;
 8003c10:	4b3e      	ldr	r3, [pc, #248]	; (8003d0c <GetErrors+0x13c>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf0c      	ite	eq
 8003c1e:	2301      	moveq	r3, #1
 8003c20:	2300      	movne	r3, #0
 8003c22:	b2d9      	uxtb	r1, r3
 8003c24:	4a3a      	ldr	r2, [pc, #232]	; (8003d10 <GetErrors+0x140>)
 8003c26:	7e13      	ldrb	r3, [r2, #24]
 8003c28:	f361 0382 	bfi	r3, r1, #2, #1
 8003c2c:	7613      	strb	r3, [r2, #24]
	meas_data.errors.sb_abort_err = d_inputs.sb_stop;
 8003c2e:	4b37      	ldr	r3, [pc, #220]	; (8003d0c <GetErrors+0x13c>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003c36:	b2d9      	uxtb	r1, r3
 8003c38:	4a35      	ldr	r2, [pc, #212]	; (8003d10 <GetErrors+0x140>)
 8003c3a:	7e13      	ldrb	r3, [r2, #24]
 8003c3c:	f361 03c3 	bfi	r3, r1, #3, #1
 8003c40:	7613      	strb	r3, [r2, #24]
	meas_data.errors.sq_left_err = d_inputs.sq_kovsh_prob_left_1;
 8003c42:	4b32      	ldr	r3, [pc, #200]	; (8003d0c <GetErrors+0x13c>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c4a:	b2d9      	uxtb	r1, r3
 8003c4c:	4a30      	ldr	r2, [pc, #192]	; (8003d10 <GetErrors+0x140>)
 8003c4e:	7e13      	ldrb	r3, [r2, #24]
 8003c50:	f361 1304 	bfi	r3, r1, #4, #1
 8003c54:	7613      	strb	r3, [r2, #24]
	meas_data.errors.sq_right_err = d_inputs.sq_kovsh_prob_right_1;
 8003c56:	4b2d      	ldr	r3, [pc, #180]	; (8003d0c <GetErrors+0x13c>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c5e:	b2d9      	uxtb	r1, r3
 8003c60:	4a2b      	ldr	r2, [pc, #172]	; (8003d10 <GetErrors+0x140>)
 8003c62:	7e13      	ldrb	r3, [r2, #24]
 8003c64:	f361 1345 	bfi	r3, r1, #5, #1
 8003c68:	7613      	strb	r3, [r2, #24]

	//Timeouts
	if(sqHomeTON.OUT){
 8003c6a:	4b2a      	ldr	r3, [pc, #168]	; (8003d14 <GetErrors+0x144>)
 8003c6c:	7a5b      	ldrb	r3, [r3, #9]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d004      	beq.n	8003c7c <GetErrors+0xac>
		meas_data.errors.timeout_moving_left_err = 1;
 8003c72:	4a27      	ldr	r2, [pc, #156]	; (8003d10 <GetErrors+0x140>)
 8003c74:	7e13      	ldrb	r3, [r2, #24]
 8003c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7a:	7613      	strb	r3, [r2, #24]
	}
	if(sqWorkTON.OUT){
 8003c7c:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <GetErrors+0x148>)
 8003c7e:	7a5b      	ldrb	r3, [r3, #9]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <GetErrors+0xbe>
		meas_data.errors.timeout_moving_right_err = 1;
 8003c84:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <GetErrors+0x140>)
 8003c86:	7e13      	ldrb	r3, [r2, #24]
 8003c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c8c:	7613      	strb	r3, [r2, #24]
	}
	if(rtSbMakeProba|| rtSbMakeVozvrat)
 8003c8e:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <GetErrors+0x14c>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d103      	bne.n	8003c9e <GetErrors+0xce>
 8003c96:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <GetErrors+0x150>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <GetErrors+0xe2>
	{
		meas_data.errors.timeout_moving_left_err = 0;
 8003c9e:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <GetErrors+0x140>)
 8003ca0:	7e13      	ldrb	r3, [r2, #24]
 8003ca2:	f36f 13c7 	bfc	r3, #7, #1
 8003ca6:	7613      	strb	r3, [r2, #24]
		meas_data.errors.timeout_moving_right_err = 0;
 8003ca8:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <GetErrors+0x140>)
 8003caa:	7e13      	ldrb	r3, [r2, #24]
 8003cac:	f36f 1386 	bfc	r3, #6, #1
 8003cb0:	7613      	strb	r3, [r2, #24]
	}
	// Need Return
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 8003cb2:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <GetErrors+0x154>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d116      	bne.n	8003cee <GetErrors+0x11e>
 8003cc0:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <GetErrors+0x154>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10f      	bne.n	8003cee <GetErrors+0x11e>
			(!d_inputs.sq_kovsh_prob_left_2 && !d_inputs.sq_kovsh_prob_right_2);
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <GetErrors+0x13c>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	b2db      	uxtb	r3, r3
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d108      	bne.n	8003cee <GetErrors+0x11e>
			(!d_inputs.sq_kovsh_prob_left_2 && !d_inputs.sq_kovsh_prob_right_2);
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <GetErrors+0x13c>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <GetErrors+0x11e>
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <GetErrors+0x120>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	b2d9      	uxtb	r1, r3
 8003cf6:	4a06      	ldr	r2, [pc, #24]	; (8003d10 <GetErrors+0x140>)
 8003cf8:	7e53      	ldrb	r3, [r2, #25]
 8003cfa:	f361 0300 	bfi	r3, r1, #0, #1
 8003cfe:	7653      	strb	r3, [r2, #25]

}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000428 	.word	0x20000428
 8003d10:	20000c5c 	.word	0x20000c5c
 8003d14:	20000b9c 	.word	0x20000b9c
 8003d18:	20000ba8 	.word	0x20000ba8
 8003d1c:	20000b96 	.word	0x20000b96
 8003d20:	20000b98 	.word	0x20000b98
 8003d24:	2000042c 	.word	0x2000042c

08003d28 <Init_timers>:

static uint8_t Init_timers()
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
	if(Timer_Init(&(sqHomeTON))==TIMER_FAIL)return 0;
 8003d2c:	4818      	ldr	r0, [pc, #96]	; (8003d90 <Init_timers+0x68>)
 8003d2e:	f000 fffd 	bl	8004d2c <Timer_Init>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <Init_timers+0x14>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e027      	b.n	8003d8c <Init_timers+0x64>
	if(Timer_Init(&(sqWorkTON))==TIMER_FAIL)return 0;
 8003d3c:	4815      	ldr	r0, [pc, #84]	; (8003d94 <Init_timers+0x6c>)
 8003d3e:	f000 fff5 	bl	8004d2c <Timer_Init>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <Init_timers+0x24>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e01f      	b.n	8003d8c <Init_timers+0x64>
	if(Timer_Init(&(automatTON))==TIMER_FAIL)return 0;
 8003d4c:	4812      	ldr	r0, [pc, #72]	; (8003d98 <Init_timers+0x70>)
 8003d4e:	f000 ffed 	bl	8004d2c <Timer_Init>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <Init_timers+0x34>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e017      	b.n	8003d8c <Init_timers+0x64>
	if(settings.retain.prob_toHomeTime==0)settings.retain.prob_toHomeTime = 10;
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <Init_timers+0x74>)
 8003d5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <Init_timers+0x42>
 8003d64:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <Init_timers+0x74>)
 8003d66:	220a      	movs	r2, #10
 8003d68:	859a      	strh	r2, [r3, #44]	; 0x2c
	if(settings.retain.prob_toWorkTime==0)settings.retain.prob_toWorkTime = 10;
 8003d6a:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <Init_timers+0x74>)
 8003d6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d102      	bne.n	8003d78 <Init_timers+0x50>
 8003d72:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <Init_timers+0x74>)
 8003d74:	220a      	movs	r2, #10
 8003d76:	85da      	strh	r2, [r3, #46]	; 0x2e
	if(settings.retain.automat_timer==0)settings.retain.automat_timer = 60;
 8003d78:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <Init_timers+0x74>)
 8003d7a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <Init_timers+0x5e>
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <Init_timers+0x74>)
 8003d82:	223c      	movs	r2, #60	; 0x3c
 8003d84:	861a      	strh	r2, [r3, #48]	; 0x30
	SetTimers();
 8003d86:	f000 f80b 	bl	8003da0 <SetTimers>
	return 1;
 8003d8a:	2301      	movs	r3, #1
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000b9c 	.word	0x20000b9c
 8003d94:	20000ba8 	.word	0x20000ba8
 8003d98:	20000bb4 	.word	0x20000bb4
 8003d9c:	20000bc0 	.word	0x20000bc0

08003da0 <SetTimers>:

static void SetTimers()
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
	// Тайм-аут движения влево
	sqHomeTON.IN = !d_inputs.sq_kovsh_prob_left_2 && d_outputs.uz_prob_rev;
 8003da4:	4b2d      	ldr	r3, [pc, #180]	; (8003e5c <SetTimers+0xbc>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d108      	bne.n	8003dc4 <SetTimers+0x24>
 8003db2:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <SetTimers+0xc0>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <SetTimers+0x24>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <SetTimers+0x26>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <SetTimers+0xc4>)
 8003dca:	721a      	strb	r2, [r3, #8]
	sqHomeTON.SV = settings.retain.prob_toHomeTime * 1000;
 8003dcc:	4b26      	ldr	r3, [pc, #152]	; (8003e68 <SetTimers+0xc8>)
 8003dce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b21      	ldr	r3, [pc, #132]	; (8003e64 <SetTimers+0xc4>)
 8003dde:	601a      	str	r2, [r3, #0]

	// Тайм-аут движения вправо
	sqWorkTON.IN = !d_inputs.sq_kovsh_prob_right_2 && d_outputs.uz_prob_forv;
 8003de0:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <SetTimers+0xbc>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d108      	bne.n	8003e00 <SetTimers+0x60>
 8003dee:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <SetTimers+0xc0>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <SetTimers+0x60>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <SetTimers+0x62>
 8003e00:	2300      	movs	r3, #0
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <SetTimers+0xcc>)
 8003e06:	721a      	strb	r2, [r3, #8]
	sqWorkTON.SV = settings.retain.prob_toWorkTime * 1000;
 8003e08:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <SetTimers+0xc8>)
 8003e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e12:	fb02 f303 	mul.w	r3, r2, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	4b14      	ldr	r3, [pc, #80]	; (8003e6c <SetTimers+0xcc>)
 8003e1a:	601a      	str	r2, [r3, #0]

	// Таймер автоматической работы
	automatTON.IN = d_inputs.sb_auto_local && !cycle_probotbor;
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <SetTimers+0xbc>)
 8003e1e:	785b      	ldrb	r3, [r3, #1]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <SetTimers+0x96>
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <SetTimers+0xd0>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <SetTimers+0x96>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <SetTimers+0x98>
 8003e36:	2300      	movs	r3, #0
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <SetTimers+0xd4>)
 8003e3c:	721a      	strb	r2, [r3, #8]
	automatTON.SV = settings.retain.automat_timer * 1000;
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <SetTimers+0xc8>)
 8003e40:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003e42:	461a      	mov	r2, r3
 8003e44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e48:	fb02 f303 	mul.w	r3, r2, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <SetTimers+0xd4>)
 8003e50:	601a      	str	r2, [r3, #0]

	// Осталось до следующей пробы
}
 8003e52:	bf00      	nop
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	20000428 	.word	0x20000428
 8003e60:	2000042c 	.word	0x2000042c
 8003e64:	20000b9c 	.word	0x20000b9c
 8003e68:	20000bc0 	.word	0x20000bc0
 8003e6c:	20000ba8 	.word	0x20000ba8
 8003e70:	20000b8d 	.word	0x20000b8d
 8003e74:	20000bb4 	.word	0x20000bb4

08003e78 <Moving>:

static void Moving()
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
	if(!CheckCriticalError())
 8003e7c:	f000 f8ae 	bl	8003fdc <CheckCriticalError>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <Moving+0x14>
	{
		cycle_probotbor = 0;
 8003e86:	4b42      	ldr	r3, [pc, #264]	; (8003f90 <Moving+0x118>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
	}
	// Условия остановки движения
	if(cycle_probotbor || cycle_vozvrat)
 8003e8c:	4b40      	ldr	r3, [pc, #256]	; (8003f90 <Moving+0x118>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <Moving+0x24>
 8003e94:	4b3f      	ldr	r3, [pc, #252]	; (8003f94 <Moving+0x11c>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d034      	beq.n	8003f06 <Moving+0x8e>
	{
		// остановка по концевикам b
		if((targetSq && (d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2))||
 8003e9c:	4b3e      	ldr	r3, [pc, #248]	; (8003f98 <Moving+0x120>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <Moving+0x48>
 8003ea4:	4b3d      	ldr	r3, [pc, #244]	; (8003f9c <Moving+0x124>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d120      	bne.n	8003ef4 <Moving+0x7c>
 8003eb2:	4b3a      	ldr	r3, [pc, #232]	; (8003f9c <Moving+0x124>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d119      	bne.n	8003ef4 <Moving+0x7c>
				(!targetSq && (d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2))
 8003ec0:	4b35      	ldr	r3, [pc, #212]	; (8003f98 <Moving+0x120>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
		if((targetSq && (d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2))||
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10d      	bne.n	8003ee4 <Moving+0x6c>
				(!targetSq && (d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2))
 8003ec8:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <Moving+0x124>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10e      	bne.n	8003ef4 <Moving+0x7c>
 8003ed6:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <Moving+0x124>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d107      	bne.n	8003ef4 <Moving+0x7c>
				|| rtSq_kovsh_left_1 || rtSq_kovsh_right_1)
 8003ee4:	4b2e      	ldr	r3, [pc, #184]	; (8003fa0 <Moving+0x128>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d103      	bne.n	8003ef4 <Moving+0x7c>
 8003eec:	4b2d      	ldr	r3, [pc, #180]	; (8003fa4 <Moving+0x12c>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <Moving+0x80>
		{
			StopCycles();
 8003ef4:	f000 f8c2 	bl	800407c <StopCycles>
		}
		// остановка по критической ошибке
		if(!CheckCriticalError()){
 8003ef8:	f000 f870 	bl	8003fdc <CheckCriticalError>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <Moving+0x8e>
			StopCycles();
 8003f02:	f000 f8bb 	bl	800407c <StopCycles>
		}
	}


	// Управление двигателем
	if(cycle_probotbor || cycle_vozvrat)
 8003f06:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <Moving+0x118>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d103      	bne.n	8003f16 <Moving+0x9e>
 8003f0e:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <Moving+0x11c>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d023      	beq.n	8003f5e <Moving+0xe6>
	{
		d_outputs.prob_ready=0;
 8003f16:	4a24      	ldr	r2, [pc, #144]	; (8003fa8 <Moving+0x130>)
 8003f18:	7813      	ldrb	r3, [r2, #0]
 8003f1a:	f36f 0382 	bfc	r3, #2, #1
 8003f1e:	7013      	strb	r3, [r2, #0]
		if(targetSq)
 8003f20:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <Moving+0x120>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <Moving+0xc6>
		{
			d_outputs.uz_prob_forv = 1;
 8003f28:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <Moving+0x130>)
 8003f2a:	7813      	ldrb	r3, [r2, #0]
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	7013      	strb	r3, [r2, #0]
			d_outputs.uz_prob_rev = 0;
 8003f32:	4a1d      	ldr	r2, [pc, #116]	; (8003fa8 <Moving+0x130>)
 8003f34:	7813      	ldrb	r3, [r2, #0]
 8003f36:	f36f 0341 	bfc	r3, #1, #1
 8003f3a:	7013      	strb	r3, [r2, #0]
 8003f3c:	e009      	b.n	8003f52 <Moving+0xda>
		}
		else
		{
			d_outputs.uz_prob_forv = 0;
 8003f3e:	4a1a      	ldr	r2, [pc, #104]	; (8003fa8 <Moving+0x130>)
 8003f40:	7813      	ldrb	r3, [r2, #0]
 8003f42:	f36f 0300 	bfc	r3, #0, #1
 8003f46:	7013      	strb	r3, [r2, #0]
			d_outputs.uz_prob_rev = 1;
 8003f48:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <Moving+0x130>)
 8003f4a:	7813      	ldrb	r3, [r2, #0]
 8003f4c:	f043 0302 	orr.w	r3, r3, #2
 8003f50:	7013      	strb	r3, [r2, #0]
		}
		d_outputs.prob_ready = 0;
 8003f52:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <Moving+0x130>)
 8003f54:	7813      	ldrb	r3, [r2, #0]
 8003f56:	f36f 0382 	bfc	r3, #2, #1
 8003f5a:	7013      	strb	r3, [r2, #0]
 8003f5c:	e015      	b.n	8003f8a <Moving+0x112>
	}
	else
	{
		d_outputs.uz_prob_forv =0 ;
 8003f5e:	4a12      	ldr	r2, [pc, #72]	; (8003fa8 <Moving+0x130>)
 8003f60:	7813      	ldrb	r3, [r2, #0]
 8003f62:	f36f 0300 	bfc	r3, #0, #1
 8003f66:	7013      	strb	r3, [r2, #0]
		d_outputs.uz_prob_rev = 0 ;
 8003f68:	4a0f      	ldr	r2, [pc, #60]	; (8003fa8 <Moving+0x130>)
 8003f6a:	7813      	ldrb	r3, [r2, #0]
 8003f6c:	f36f 0341 	bfc	r3, #1, #1
 8003f70:	7013      	strb	r3, [r2, #0]
		d_outputs.prob_ready = CheckCommonError();
 8003f72:	f000 f81b 	bl	8003fac <CheckCommonError>
 8003f76:	4603      	mov	r3, r0
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	b2d9      	uxtb	r1, r3
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <Moving+0x130>)
 8003f80:	7813      	ldrb	r3, [r2, #0]
 8003f82:	f361 0382 	bfi	r3, r1, #2, #1
 8003f86:	7013      	strb	r3, [r2, #0]
	}
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000b8d 	.word	0x20000b8d
 8003f94:	20000b8e 	.word	0x20000b8e
 8003f98:	20000b90 	.word	0x20000b90
 8003f9c:	20000428 	.word	0x20000428
 8003fa0:	20000b93 	.word	0x20000b93
 8003fa4:	20000b94 	.word	0x20000b94
 8003fa8:	2000042c 	.word	0x2000042c

08003fac <CheckCommonError>:

static uint8_t CheckCommonError()
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
	uint16_t *errPointer = (uint16_t*)&(meas_data.errors);
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <CheckCommonError+0x2c>)
 8003fb4:	607b      	str	r3, [r7, #4]
	uint16_t result = *errPointer ? 0 : 1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf0c      	ite	eq
 8003fbe:	2301      	moveq	r3, #1
 8003fc0:	2300      	movne	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	807b      	strh	r3, [r7, #2]
	return result;
 8003fc6:	887b      	ldrh	r3, [r7, #2]
 8003fc8:	b2db      	uxtb	r3, r3

}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000c74 	.word	0x20000c74

08003fdc <CheckCriticalError>:

static uint8_t CheckCriticalError()
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
	// Ошибки, при которых нужно срочно остановить ковш
	uint8_t error =  meas_data.errors.sb_abort_err ||
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <CheckCriticalError+0x98>)
 8003fe4:	7e1b      	ldrb	r3, [r3, #24]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	b2db      	uxtb	r3, r3
			meas_data.errors.uz_err ||
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
			(meas_data.errors.timeout_moving_left_err)||
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d130      	bne.n	8004052 <CheckCriticalError+0x76>
	uint8_t error =  meas_data.errors.sb_abort_err ||
 8003ff0:	4b20      	ldr	r3, [pc, #128]	; (8004074 <CheckCriticalError+0x98>)
 8003ff2:	7e1b      	ldrb	r3, [r3, #24]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d129      	bne.n	8004052 <CheckCriticalError+0x76>
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <CheckCriticalError+0x98>)
 8004000:	7e1b      	ldrb	r3, [r3, #24]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	b2db      	uxtb	r3, r3
			meas_data.errors.uz_err ||
 8004008:	2b00      	cmp	r3, #0
 800400a:	d006      	beq.n	800401a <CheckCriticalError+0x3e>
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <CheckCriticalError+0x9c>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d11b      	bne.n	8004052 <CheckCriticalError+0x76>
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
 800401a:	4b16      	ldr	r3, [pc, #88]	; (8004074 <CheckCriticalError+0x98>)
 800401c:	7e1b      	ldrb	r3, [r3, #24]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	b2db      	uxtb	r3, r3
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 8004024:	2b00      	cmp	r3, #0
 8004026:	d006      	beq.n	8004036 <CheckCriticalError+0x5a>
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
 8004028:	4b13      	ldr	r3, [pc, #76]	; (8004078 <CheckCriticalError+0x9c>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10d      	bne.n	8004052 <CheckCriticalError+0x76>
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <CheckCriticalError+0x98>)
 8004038:	7e1b      	ldrb	r3, [r3, #24]
 800403a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d106      	bne.n	8004052 <CheckCriticalError+0x76>
			(meas_data.errors.timeout_moving_left_err)||
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <CheckCriticalError+0x98>)
 8004046:	7e1b      	ldrb	r3, [r3, #24]
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <CheckCriticalError+0x7a>
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <CheckCriticalError+0x7c>
 8004056:	2300      	movs	r3, #0
	uint8_t error =  meas_data.errors.sb_abort_err ||
 8004058:	71fb      	strb	r3, [r7, #7]
			(meas_data.errors.timeout_moving_right_err);
	return !error;
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
}
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000c5c 	.word	0x20000c5c
 8004078:	2000042c 	.word	0x2000042c

0800407c <StopCycles>:

static void StopCycles()
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
	cycle_probotbor = 0;
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <StopCycles+0x1c>)
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
	cycle_vozvrat = 0;
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <StopCycles+0x20>)
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20000b8d 	.word	0x20000b8d
 800409c:	20000b8e 	.word	0x20000b8e

080040a0 <OnCommandCycle>:

static void OnCommandCycle()
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
	// действия по нажатию кнопки
	if(d_inputs.sb_make_proba ||
 80040a4:	4b4a      	ldr	r3, [pc, #296]	; (80041d0 <OnCommandCycle+0x130>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <OnCommandCycle+0x1a>
			settings.non_retain.start_otbor)
 80040b2:	4b48      	ldr	r3, [pc, #288]	; (80041d4 <OnCommandCycle+0x134>)
 80040b4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
	if(d_inputs.sb_make_proba ||
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <OnCommandCycle+0x26>
	{
		settings.non_retain.start_otbor = 0;
 80040ba:	4b46      	ldr	r3, [pc, #280]	; (80041d4 <OnCommandCycle+0x134>)
 80040bc:	2200      	movs	r2, #0
 80040be:	869a      	strh	r2, [r3, #52]	; 0x34
		startOtborCommand = 1;
 80040c0:	4b45      	ldr	r3, [pc, #276]	; (80041d8 <OnCommandCycle+0x138>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
	}

	if(meas_data.errors.need_return_err &&
 80040c6:	4b45      	ldr	r3, [pc, #276]	; (80041dc <OnCommandCycle+0x13c>)
 80040c8:	7e5b      	ldrb	r3, [r3, #25]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d040      	beq.n	8004156 <OnCommandCycle+0xb6>
			CheckCriticalError() &&
 80040d4:	f7ff ff82 	bl	8003fdc <CheckCriticalError>
 80040d8:	4603      	mov	r3, r0
	if(meas_data.errors.need_return_err &&
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d03b      	beq.n	8004156 <OnCommandCycle+0xb6>
			!cycle_vozvrat &&
 80040de:	4b40      	ldr	r3, [pc, #256]	; (80041e0 <OnCommandCycle+0x140>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
			CheckCriticalError() &&
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d137      	bne.n	8004156 <OnCommandCycle+0xb6>
			(d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat))
 80040e6:	4b3a      	ldr	r3, [pc, #232]	; (80041d0 <OnCommandCycle+0x130>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80040ee:	b2db      	uxtb	r3, r3
			!cycle_vozvrat &&
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d103      	bne.n	80040fc <OnCommandCycle+0x5c>
			(d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat))
 80040f4:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <OnCommandCycle+0x134>)
 80040f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d02c      	beq.n	8004156 <OnCommandCycle+0xb6>
	{
		cycle_probotbor = 0;
 80040fc:	4b39      	ldr	r3, [pc, #228]	; (80041e4 <OnCommandCycle+0x144>)
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
		cycle_vozvrat = 1;
 8004102:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <OnCommandCycle+0x140>)
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
		if(d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2 ){
 8004108:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <OnCommandCycle+0x130>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <OnCommandCycle+0x84>
 8004116:	4b2e      	ldr	r3, [pc, #184]	; (80041d0 <OnCommandCycle+0x130>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <OnCommandCycle+0x8c>
			targetSq = 0;
 8004124:	4b30      	ldr	r3, [pc, #192]	; (80041e8 <OnCommandCycle+0x148>)
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e014      	b.n	8004156 <OnCommandCycle+0xb6>
		}
		else if(d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2){
 800412c:	4b28      	ldr	r3, [pc, #160]	; (80041d0 <OnCommandCycle+0x130>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <OnCommandCycle+0xa8>
 800413a:	4b25      	ldr	r3, [pc, #148]	; (80041d0 <OnCommandCycle+0x130>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <OnCommandCycle+0xb0>
			targetSq = 1;
 8004148:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <OnCommandCycle+0x148>)
 800414a:	2201      	movs	r2, #1
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	e002      	b.n	8004156 <OnCommandCycle+0xb6>
		}
		else{
			targetSq = 0;
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <OnCommandCycle+0x148>)
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
		};
	}
	settings.non_retain.start_vozvrat = 0;
 8004156:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <OnCommandCycle+0x134>)
 8004158:	2200      	movs	r2, #0
 800415a:	86da      	strh	r2, [r3, #54]	; 0x36

	if(startOtborCommand)
 800415c:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <OnCommandCycle+0x138>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d032      	beq.n	80041ca <OnCommandCycle+0x12a>
	{
		startOtborCommand = 0;
 8004164:	4b1c      	ldr	r3, [pc, #112]	; (80041d8 <OnCommandCycle+0x138>)
 8004166:	2200      	movs	r2, #0
 8004168:	701a      	strb	r2, [r3, #0]
		if(d_outputs.prob_ready)
 800416a:	4b20      	ldr	r3, [pc, #128]	; (80041ec <OnCommandCycle+0x14c>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d028      	beq.n	80041ca <OnCommandCycle+0x12a>
		{
			cycle_probotbor = 1;
 8004178:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <OnCommandCycle+0x144>)
 800417a:	2201      	movs	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]
			cycle_vozvrat = 0;
 800417e:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <OnCommandCycle+0x140>)
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]

			if(d_inputs.sq_kovsh_prob_left_2 || d_inputs.sq_kovsh_prob_left_1)
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <OnCommandCycle+0x130>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <OnCommandCycle+0x100>
 8004192:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <OnCommandCycle+0x130>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <OnCommandCycle+0x108>
			{
				targetSq = 1;
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <OnCommandCycle+0x148>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]
			{
				targetSq = 0;
			}
		}
	}
}
 80041a6:	e010      	b.n	80041ca <OnCommandCycle+0x12a>
			else if(d_inputs.sq_kovsh_prob_right_2 || d_inputs.sq_kovsh_prob_right_1)
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <OnCommandCycle+0x130>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <OnCommandCycle+0x124>
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <OnCommandCycle+0x130>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <OnCommandCycle+0x12a>
				targetSq = 0;
 80041c4:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <OnCommandCycle+0x148>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000428 	.word	0x20000428
 80041d4:	20000bc0 	.word	0x20000bc0
 80041d8:	20000b8f 	.word	0x20000b8f
 80041dc:	20000c5c 	.word	0x20000c5c
 80041e0:	20000b8e 	.word	0x20000b8e
 80041e4:	20000b8d 	.word	0x20000b8d
 80041e8:	20000b90 	.word	0x20000b90
 80041ec:	2000042c 	.word	0x2000042c

080041f0 <Indication>:

static void Indication()
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
	meas_data.probotbor_ready = d_outputs.prob_ready;
 80041f4:	4b15      	ldr	r3, [pc, #84]	; (800424c <Indication+0x5c>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	b29a      	uxth	r2, r3
 8004200:	4b13      	ldr	r3, [pc, #76]	; (8004250 <Indication+0x60>)
 8004202:	819a      	strh	r2, [r3, #12]
	meas_data.probotbor_busy = cycle_probotbor;
 8004204:	4b13      	ldr	r3, [pc, #76]	; (8004254 <Indication+0x64>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	b29a      	uxth	r2, r3
 800420a:	4b11      	ldr	r3, [pc, #68]	; (8004250 <Indication+0x60>)
 800420c:	81da      	strh	r2, [r3, #14]
	meas_data.vozvrat_probotbor_busy = cycle_vozvrat;
 800420e:	4b12      	ldr	r3, [pc, #72]	; (8004258 <Indication+0x68>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	b29a      	uxth	r2, r3
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <Indication+0x60>)
 8004216:	821a      	strh	r2, [r3, #16]
	meas_data.automat_mode = d_inputs.sb_auto_local;
 8004218:	4b10      	ldr	r3, [pc, #64]	; (800425c <Indication+0x6c>)
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	b29a      	uxth	r2, r3
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <Indication+0x60>)
 8004226:	825a      	strh	r2, [r3, #18]
	meas_data.toNextOtborTime = settings.retain.automat_timer - (uint16_t)(automatTON.ET/1000);
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <Indication+0x70>)
 800422a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800422c:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <Indication+0x74>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	490d      	ldr	r1, [pc, #52]	; (8004268 <Indication+0x78>)
 8004232:	fba1 1303 	umull	r1, r3, r1, r3
 8004236:	099b      	lsrs	r3, r3, #6
 8004238:	b29b      	uxth	r3, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	b29a      	uxth	r2, r3
 800423e:	4b04      	ldr	r3, [pc, #16]	; (8004250 <Indication+0x60>)
 8004240:	829a      	strh	r2, [r3, #20]
}
 8004242:	bf00      	nop
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	2000042c 	.word	0x2000042c
 8004250:	20000c5c 	.word	0x20000c5c
 8004254:	20000b8d 	.word	0x20000b8d
 8004258:	20000b8e 	.word	0x20000b8e
 800425c:	20000428 	.word	0x20000428
 8004260:	20000bc0 	.word	0x20000bc0
 8004264:	20000bb4 	.word	0x20000bb4
 8004268:	10624dd3 	.word	0x10624dd3

0800426c <GetPositiveFronts>:

static void GetPositiveFronts()
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
	rtSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_left_1 && !lastSq_kovsh_left_1;
 8004270:	4b41      	ldr	r3, [pc, #260]	; (8004378 <GetPositiveFronts+0x10c>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d005      	beq.n	800428a <GetPositiveFronts+0x1e>
 800427e:	4b3f      	ldr	r3, [pc, #252]	; (800437c <GetPositiveFronts+0x110>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <GetPositiveFronts+0x1e>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <GetPositiveFronts+0x20>
 800428a:	2300      	movs	r3, #0
 800428c:	b2da      	uxtb	r2, r3
 800428e:	4b3c      	ldr	r3, [pc, #240]	; (8004380 <GetPositiveFronts+0x114>)
 8004290:	701a      	strb	r2, [r3, #0]
	rtSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_right_1 && !lastSq_kovsh_right_1;
 8004292:	4b39      	ldr	r3, [pc, #228]	; (8004378 <GetPositiveFronts+0x10c>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <GetPositiveFronts+0x40>
 80042a0:	4b38      	ldr	r3, [pc, #224]	; (8004384 <GetPositiveFronts+0x118>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <GetPositiveFronts+0x40>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <GetPositiveFronts+0x42>
 80042ac:	2300      	movs	r3, #0
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	4b33      	ldr	r3, [pc, #204]	; (8004380 <GetPositiveFronts+0x114>)
 80042b2:	701a      	strb	r2, [r3, #0]
	rtSbMakeProba =  (d_inputs.sb_make_proba || settings.non_retain.start_otbor) && !lastSbMakeProba;
 80042b4:	4b30      	ldr	r3, [pc, #192]	; (8004378 <GetPositiveFronts+0x10c>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d103      	bne.n	80042ca <GetPositiveFronts+0x5e>
 80042c2:	4b31      	ldr	r3, [pc, #196]	; (8004388 <GetPositiveFronts+0x11c>)
 80042c4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <GetPositiveFronts+0x6a>
 80042ca:	4b30      	ldr	r3, [pc, #192]	; (800438c <GetPositiveFronts+0x120>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <GetPositiveFronts+0x6a>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <GetPositiveFronts+0x6c>
 80042d6:	2300      	movs	r3, #0
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	4b2d      	ldr	r3, [pc, #180]	; (8004390 <GetPositiveFronts+0x124>)
 80042dc:	701a      	strb	r2, [r3, #0]
	rtSbMakeVozvrat = (d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat) && !lastSbMakeVozvrat;
 80042de:	4b26      	ldr	r3, [pc, #152]	; (8004378 <GetPositiveFronts+0x10c>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d103      	bne.n	80042f4 <GetPositiveFronts+0x88>
 80042ec:	4b26      	ldr	r3, [pc, #152]	; (8004388 <GetPositiveFronts+0x11c>)
 80042ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <GetPositiveFronts+0x94>
 80042f4:	4b27      	ldr	r3, [pc, #156]	; (8004394 <GetPositiveFronts+0x128>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <GetPositiveFronts+0x94>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <GetPositiveFronts+0x96>
 8004300:	2300      	movs	r3, #0
 8004302:	b2da      	uxtb	r2, r3
 8004304:	4b24      	ldr	r3, [pc, #144]	; (8004398 <GetPositiveFronts+0x12c>)
 8004306:	701a      	strb	r2, [r3, #0]
	lastSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_left_1;
 8004308:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <GetPositiveFronts+0x10c>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004310:	b2db      	uxtb	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	4b19      	ldr	r3, [pc, #100]	; (800437c <GetPositiveFronts+0x110>)
 8004316:	701a      	strb	r2, [r3, #0]
	lastSq_kovsh_right_1 = d_inputs.sq_kovsh_prob_right_1;
 8004318:	4b17      	ldr	r3, [pc, #92]	; (8004378 <GetPositiveFronts+0x10c>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	4b17      	ldr	r3, [pc, #92]	; (8004384 <GetPositiveFronts+0x118>)
 8004326:	701a      	strb	r2, [r3, #0]
	lastSbMakeProba = d_inputs.sb_make_proba || settings.non_retain.start_otbor;
 8004328:	4b13      	ldr	r3, [pc, #76]	; (8004378 <GetPositiveFronts+0x10c>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d103      	bne.n	800433e <GetPositiveFronts+0xd2>
 8004336:	4b14      	ldr	r3, [pc, #80]	; (8004388 <GetPositiveFronts+0x11c>)
 8004338:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <GetPositiveFronts+0xd6>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <GetPositiveFronts+0xd8>
 8004342:	2300      	movs	r3, #0
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4b11      	ldr	r3, [pc, #68]	; (800438c <GetPositiveFronts+0x120>)
 8004348:	701a      	strb	r2, [r3, #0]
	lastSbMakeVozvrat = d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat;
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <GetPositiveFronts+0x10c>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d103      	bne.n	8004360 <GetPositiveFronts+0xf4>
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <GetPositiveFronts+0x11c>)
 800435a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <GetPositiveFronts+0xf8>
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <GetPositiveFronts+0xfa>
 8004364:	2300      	movs	r3, #0
 8004366:	b2da      	uxtb	r2, r3
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <GetPositiveFronts+0x128>)
 800436a:	701a      	strb	r2, [r3, #0]

}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	20000428 	.word	0x20000428
 800437c:	20000b91 	.word	0x20000b91
 8004380:	20000b93 	.word	0x20000b93
 8004384:	20000b92 	.word	0x20000b92
 8004388:	20000bc0 	.word	0x20000bc0
 800438c:	20000b95 	.word	0x20000b95
 8004390:	20000b96 	.word	0x20000b96
 8004394:	20000b97 	.word	0x20000b97
 8004398:	20000b98 	.word	0x20000b98

0800439c <settingsLoadFRAM>:
Meas_Data meas_data;

static uint8_t checksumCalc (uint8_t * data, uint16_t size);

int settingsLoadFRAM (void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
	int result = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
	uint16_t header;

	result = framDataRead(FRAM_SETTINGS_ADDR, (uint8_t *) &header, sizeof(header));
 80043a6:	f107 0308 	add.w	r3, r7, #8
 80043aa:	2202      	movs	r2, #2
 80043ac:	4619      	mov	r1, r3
 80043ae:	2000      	movs	r0, #0
 80043b0:	f7fc feda 	bl	8001168 <framDataRead>
 80043b4:	60f8      	str	r0, [r7, #12]
	if (!result)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d130      	bne.n	800441e <settingsLoadFRAM+0x82>
	{
		if (header == FRAM_SETTINGS_HEADER)
 80043bc:	893b      	ldrh	r3, [r7, #8]
 80043be:	f64a 32d8 	movw	r2, #43992	; 0xabd8
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d128      	bne.n	8004418 <settingsLoadFRAM+0x7c>
		{
			result = framDataRead(FRAM_SETTINGS_ADDR + sizeof(header), (uint8_t *) &(settings.retain), sizeof(Retain));
 80043c6:	2234      	movs	r2, #52	; 0x34
 80043c8:	4917      	ldr	r1, [pc, #92]	; (8004428 <settingsLoadFRAM+0x8c>)
 80043ca:	2002      	movs	r0, #2
 80043cc:	f7fc fecc 	bl	8001168 <framDataRead>
 80043d0:	60f8      	str	r0, [r7, #12]
			if (!result)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d11b      	bne.n	8004410 <settingsLoadFRAM+0x74>
			{

				uint8_t xor = checksumCalc((uint8_t *) &(settings.retain), sizeof(Retain));
 80043d8:	2134      	movs	r1, #52	; 0x34
 80043da:	4813      	ldr	r0, [pc, #76]	; (8004428 <settingsLoadFRAM+0x8c>)
 80043dc:	f000 f864 	bl	80044a8 <checksumCalc>
 80043e0:	4603      	mov	r3, r0
 80043e2:	72fb      	strb	r3, [r7, #11]
				uint8_t checksum;
				result = framDataRead(FRAM_SETTINGS_ADDR + sizeof(header) + sizeof(Retain), &checksum, sizeof(checksum));
 80043e4:	1dfb      	adds	r3, r7, #7
 80043e6:	2201      	movs	r2, #1
 80043e8:	4619      	mov	r1, r3
 80043ea:	2036      	movs	r0, #54	; 0x36
 80043ec:	f7fc febc 	bl	8001168 <framDataRead>
 80043f0:	60f8      	str	r0, [r7, #12]
 				if (!result)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d107      	bne.n	8004408 <settingsLoadFRAM+0x6c>
				{
					if (xor != checksum)
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	7afa      	ldrb	r2, [r7, #11]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d00e      	beq.n	800441e <settingsLoadFRAM+0x82>
						result = -2;
 8004400:	f06f 0301 	mvn.w	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e00a      	b.n	800441e <settingsLoadFRAM+0x82>
				}
				else
					result = -1;
 8004408:	f04f 33ff 	mov.w	r3, #4294967295
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	e006      	b.n	800441e <settingsLoadFRAM+0x82>
			}
			else
				result = -1;
 8004410:	f04f 33ff 	mov.w	r3, #4294967295
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	e002      	b.n	800441e <settingsLoadFRAM+0x82>
		}
		else
			result = -1;
 8004418:	f04f 33ff 	mov.w	r3, #4294967295
 800441c:	60fb      	str	r3, [r7, #12]
	}

	return result;
 800441e:	68fb      	ldr	r3, [r7, #12]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000bc0 	.word	0x20000bc0

0800442c <settingsSaveFRAM>:

int settingsSaveFRAM (void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
	int result = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
	uint16_t header = FRAM_SETTINGS_HEADER, address = FRAM_SETTINGS_ADDR;
 8004436:	f64a 33d8 	movw	r3, #43992	; 0xabd8
 800443a:	813b      	strh	r3, [r7, #8]
 800443c:	2300      	movs	r3, #0
 800443e:	817b      	strh	r3, [r7, #10]

	result = framDataWrite(address, (uint8_t *) &header, sizeof(header));
 8004440:	f107 0108 	add.w	r1, r7, #8
 8004444:	897b      	ldrh	r3, [r7, #10]
 8004446:	2202      	movs	r2, #2
 8004448:	4618      	mov	r0, r3
 800444a:	f7fc fecb 	bl	80011e4 <framDataWrite>
 800444e:	60f8      	str	r0, [r7, #12]
	address += sizeof(header);
 8004450:	897b      	ldrh	r3, [r7, #10]
 8004452:	3302      	adds	r3, #2
 8004454:	817b      	strh	r3, [r7, #10]
	vTaskSuspendAll();	// Останавливаем планировщик, чтобы предотвратить фоновое изменение структуры settings
 8004456:	f009 fd99 	bl	800df8c <vTaskSuspendAll>
	result |= framDataWrite(address, (uint8_t *) &(settings.retain), sizeof(Retain));
 800445a:	897b      	ldrh	r3, [r7, #10]
 800445c:	2234      	movs	r2, #52	; 0x34
 800445e:	4911      	ldr	r1, [pc, #68]	; (80044a4 <settingsSaveFRAM+0x78>)
 8004460:	4618      	mov	r0, r3
 8004462:	f7fc febf 	bl	80011e4 <framDataWrite>
 8004466:	4602      	mov	r2, r0
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
	address += sizeof(Retain);
 800446e:	897b      	ldrh	r3, [r7, #10]
 8004470:	3334      	adds	r3, #52	; 0x34
 8004472:	817b      	strh	r3, [r7, #10]
	uint8_t xor = checksumCalc((uint8_t *) &(settings.retain), sizeof(Retain));
 8004474:	2134      	movs	r1, #52	; 0x34
 8004476:	480b      	ldr	r0, [pc, #44]	; (80044a4 <settingsSaveFRAM+0x78>)
 8004478:	f000 f816 	bl	80044a8 <checksumCalc>
 800447c:	4603      	mov	r3, r0
 800447e:	71fb      	strb	r3, [r7, #7]
	xTaskResumeAll();	// Возобновляем работу планировщика
 8004480:	f009 fd92 	bl	800dfa8 <xTaskResumeAll>
	result |= framDataWrite(address, &xor, sizeof(xor));
 8004484:	1df9      	adds	r1, r7, #7
 8004486:	897b      	ldrh	r3, [r7, #10]
 8004488:	2201      	movs	r2, #1
 800448a:	4618      	mov	r0, r3
 800448c:	f7fc feaa 	bl	80011e4 <framDataWrite>
 8004490:	4602      	mov	r2, r0
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]

	return result;
 8004498:	68fb      	ldr	r3, [r7, #12]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000bc0 	.word	0x20000bc0

080044a8 <checksumCalc>:

static uint8_t checksumCalc (uint8_t * data, uint16_t size)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	807b      	strh	r3, [r7, #2]
	uint8_t xor = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size; i++)
 80044b8:	2300      	movs	r3, #0
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	e009      	b.n	80044d2 <checksumCalc+0x2a>
		xor ^= data[i];
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	781a      	ldrb	r2, [r3, #0]
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	4053      	eors	r3, r2
 80044ca:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size; i++)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	3301      	adds	r3, #1
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	887b      	ldrh	r3, [r7, #2]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	dbf1      	blt.n	80044be <checksumCalc+0x16>
	return xor;
 80044da:	7bfb      	ldrb	r3, [r7, #15]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	607b      	str	r3, [r7, #4]
 80044f2:	4b12      	ldr	r3, [pc, #72]	; (800453c <HAL_MspInit+0x54>)
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	4a11      	ldr	r2, [pc, #68]	; (800453c <HAL_MspInit+0x54>)
 80044f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044fc:	6453      	str	r3, [r2, #68]	; 0x44
 80044fe:	4b0f      	ldr	r3, [pc, #60]	; (800453c <HAL_MspInit+0x54>)
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004506:	607b      	str	r3, [r7, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_MspInit+0x54>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	4a0a      	ldr	r2, [pc, #40]	; (800453c <HAL_MspInit+0x54>)
 8004514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004518:	6413      	str	r3, [r2, #64]	; 0x40
 800451a:	4b08      	ldr	r3, [pc, #32]	; (800453c <HAL_MspInit+0x54>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004526:	2200      	movs	r2, #0
 8004528:	210f      	movs	r1, #15
 800452a:	f06f 0001 	mvn.w	r0, #1
 800452e:	f001 fc6f 	bl	8005e10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800

08004540 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08a      	sub	sp, #40	; 0x28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	60da      	str	r2, [r3, #12]
 8004556:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a3c      	ldr	r2, [pc, #240]	; (8004650 <HAL_ADC_MspInit+0x110>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d171      	bne.n	8004646 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	4b3b      	ldr	r3, [pc, #236]	; (8004654 <HAL_ADC_MspInit+0x114>)
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	4a3a      	ldr	r2, [pc, #232]	; (8004654 <HAL_ADC_MspInit+0x114>)
 800456c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004570:	6453      	str	r3, [r2, #68]	; 0x44
 8004572:	4b38      	ldr	r3, [pc, #224]	; (8004654 <HAL_ADC_MspInit+0x114>)
 8004574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	4b34      	ldr	r3, [pc, #208]	; (8004654 <HAL_ADC_MspInit+0x114>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	4a33      	ldr	r2, [pc, #204]	; (8004654 <HAL_ADC_MspInit+0x114>)
 8004588:	f043 0304 	orr.w	r3, r3, #4
 800458c:	6313      	str	r3, [r2, #48]	; 0x30
 800458e:	4b31      	ldr	r3, [pc, #196]	; (8004654 <HAL_ADC_MspInit+0x114>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	4b2d      	ldr	r3, [pc, #180]	; (8004654 <HAL_ADC_MspInit+0x114>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	4a2c      	ldr	r2, [pc, #176]	; (8004654 <HAL_ADC_MspInit+0x114>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6313      	str	r3, [r2, #48]	; 0x30
 80045aa:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <HAL_ADC_MspInit+0x114>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_T0_Pin|ADC_T1_Pin|ADC_T2_Pin;
 80045b6:	230d      	movs	r3, #13
 80045b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045ba:	2303      	movs	r3, #3
 80045bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045c2:	f107 0314 	add.w	r3, r7, #20
 80045c6:	4619      	mov	r1, r3
 80045c8:	4823      	ldr	r0, [pc, #140]	; (8004658 <HAL_ADC_MspInit+0x118>)
 80045ca:	f003 fa47 	bl	8007a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AD_T3_Pin|ADC_T4_Pin;
 80045ce:	2318      	movs	r3, #24
 80045d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045d2:	2303      	movs	r3, #3
 80045d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045da:	f107 0314 	add.w	r3, r7, #20
 80045de:	4619      	mov	r1, r3
 80045e0:	481e      	ldr	r0, [pc, #120]	; (800465c <HAL_ADC_MspInit+0x11c>)
 80045e2:	f003 fa3b 	bl	8007a5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80045e6:	4b1e      	ldr	r3, [pc, #120]	; (8004660 <HAL_ADC_MspInit+0x120>)
 80045e8:	4a1e      	ldr	r2, [pc, #120]	; (8004664 <HAL_ADC_MspInit+0x124>)
 80045ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80045ec:	4b1c      	ldr	r3, [pc, #112]	; (8004660 <HAL_ADC_MspInit+0x120>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045f2:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <HAL_ADC_MspInit+0x120>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80045f8:	4b19      	ldr	r3, [pc, #100]	; (8004660 <HAL_ADC_MspInit+0x120>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80045fe:	4b18      	ldr	r3, [pc, #96]	; (8004660 <HAL_ADC_MspInit+0x120>)
 8004600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004604:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004606:	4b16      	ldr	r3, [pc, #88]	; (8004660 <HAL_ADC_MspInit+0x120>)
 8004608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800460c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800460e:	4b14      	ldr	r3, [pc, #80]	; (8004660 <HAL_ADC_MspInit+0x120>)
 8004610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004614:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004616:	4b12      	ldr	r3, [pc, #72]	; (8004660 <HAL_ADC_MspInit+0x120>)
 8004618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800461c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800461e:	4b10      	ldr	r3, [pc, #64]	; (8004660 <HAL_ADC_MspInit+0x120>)
 8004620:	2200      	movs	r2, #0
 8004622:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004624:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <HAL_ADC_MspInit+0x120>)
 8004626:	2200      	movs	r2, #0
 8004628:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800462a:	480d      	ldr	r0, [pc, #52]	; (8004660 <HAL_ADC_MspInit+0x120>)
 800462c:	f001 fc28 	bl	8005e80 <HAL_DMA_Init>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004636:	f7fe fe43 	bl	80032c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a08      	ldr	r2, [pc, #32]	; (8004660 <HAL_ADC_MspInit+0x120>)
 800463e:	639a      	str	r2, [r3, #56]	; 0x38
 8004640:	4a07      	ldr	r2, [pc, #28]	; (8004660 <HAL_ADC_MspInit+0x120>)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004646:	bf00      	nop
 8004648:	3728      	adds	r7, #40	; 0x28
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40012000 	.word	0x40012000
 8004654:	40023800 	.word	0x40023800
 8004658:	40020800 	.word	0x40020800
 800465c:	40020000 	.word	0x40020000
 8004660:	200008e8 	.word	0x200008e8
 8004664:	40026410 	.word	0x40026410

08004668 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	; 0x28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004670:	f107 0314 	add.w	r3, r7, #20
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a19      	ldr	r2, [pc, #100]	; (80046ec <HAL_SPI_MspInit+0x84>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d12c      	bne.n	80046e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <HAL_SPI_MspInit+0x88>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <HAL_SPI_MspInit+0x88>)
 8004694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004698:	6413      	str	r3, [r2, #64]	; 0x40
 800469a:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <HAL_SPI_MspInit+0x88>)
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <HAL_SPI_MspInit+0x88>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <HAL_SPI_MspInit+0x88>)
 80046b0:	f043 0304 	orr.w	r3, r3, #4
 80046b4:	6313      	str	r3, [r2, #48]	; 0x30
 80046b6:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <HAL_SPI_MspInit+0x88>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = S3SCK_Pin|S3MISO_Pin|S3MOSI_Pin;
 80046c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80046c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c8:	2302      	movs	r3, #2
 80046ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046d0:	2303      	movs	r3, #3
 80046d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80046d4:	2306      	movs	r3, #6
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046d8:	f107 0314 	add.w	r3, r7, #20
 80046dc:	4619      	mov	r1, r3
 80046de:	4805      	ldr	r0, [pc, #20]	; (80046f4 <HAL_SPI_MspInit+0x8c>)
 80046e0:	f003 f9bc 	bl	8007a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80046e4:	bf00      	nop
 80046e6:	3728      	adds	r7, #40	; 0x28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40003c00 	.word	0x40003c00
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40020800 	.word	0x40020800

080046f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a18      	ldr	r2, [pc, #96]	; (8004768 <HAL_TIM_Base_MspInit+0x70>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d10e      	bne.n	8004728 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	4b17      	ldr	r3, [pc, #92]	; (800476c <HAL_TIM_Base_MspInit+0x74>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	4a16      	ldr	r2, [pc, #88]	; (800476c <HAL_TIM_Base_MspInit+0x74>)
 8004714:	f043 0302 	orr.w	r3, r3, #2
 8004718:	6413      	str	r3, [r2, #64]	; 0x40
 800471a:	4b14      	ldr	r3, [pc, #80]	; (800476c <HAL_TIM_Base_MspInit+0x74>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004726:	e01a      	b.n	800475e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a10      	ldr	r2, [pc, #64]	; (8004770 <HAL_TIM_Base_MspInit+0x78>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d115      	bne.n	800475e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	4b0d      	ldr	r3, [pc, #52]	; (800476c <HAL_TIM_Base_MspInit+0x74>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	4a0c      	ldr	r2, [pc, #48]	; (800476c <HAL_TIM_Base_MspInit+0x74>)
 800473c:	f043 0304 	orr.w	r3, r3, #4
 8004740:	6413      	str	r3, [r2, #64]	; 0x40
 8004742:	4b0a      	ldr	r3, [pc, #40]	; (800476c <HAL_TIM_Base_MspInit+0x74>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800474e:	2200      	movs	r2, #0
 8004750:	2105      	movs	r1, #5
 8004752:	201e      	movs	r0, #30
 8004754:	f001 fb5c 	bl	8005e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004758:	201e      	movs	r0, #30
 800475a:	f001 fb75 	bl	8005e48 <HAL_NVIC_EnableIRQ>
}
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40000400 	.word	0x40000400
 800476c:	40023800 	.word	0x40023800
 8004770:	40000800 	.word	0x40000800

08004774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08c      	sub	sp, #48	; 0x30
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800477c:	f107 031c 	add.w	r3, r7, #28
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	609a      	str	r2, [r3, #8]
 8004788:	60da      	str	r2, [r3, #12]
 800478a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a68      	ldr	r2, [pc, #416]	; (8004934 <HAL_UART_MspInit+0x1c0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d163      	bne.n	800485e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	4b67      	ldr	r3, [pc, #412]	; (8004938 <HAL_UART_MspInit+0x1c4>)
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	4a66      	ldr	r2, [pc, #408]	; (8004938 <HAL_UART_MspInit+0x1c4>)
 80047a0:	f043 0310 	orr.w	r3, r3, #16
 80047a4:	6453      	str	r3, [r2, #68]	; 0x44
 80047a6:	4b64      	ldr	r3, [pc, #400]	; (8004938 <HAL_UART_MspInit+0x1c4>)
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	4b60      	ldr	r3, [pc, #384]	; (8004938 <HAL_UART_MspInit+0x1c4>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	4a5f      	ldr	r2, [pc, #380]	; (8004938 <HAL_UART_MspInit+0x1c4>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	6313      	str	r3, [r2, #48]	; 0x30
 80047c2:	4b5d      	ldr	r3, [pc, #372]	; (8004938 <HAL_UART_MspInit+0x1c4>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80047ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80047d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d4:	2302      	movs	r3, #2
 80047d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047dc:	2303      	movs	r3, #3
 80047de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80047e0:	2307      	movs	r3, #7
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e4:	f107 031c 	add.w	r3, r7, #28
 80047e8:	4619      	mov	r1, r3
 80047ea:	4854      	ldr	r0, [pc, #336]	; (800493c <HAL_UART_MspInit+0x1c8>)
 80047ec:	f003 f936 	bl	8007a5c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80047f0:	4b53      	ldr	r3, [pc, #332]	; (8004940 <HAL_UART_MspInit+0x1cc>)
 80047f2:	4a54      	ldr	r2, [pc, #336]	; (8004944 <HAL_UART_MspInit+0x1d0>)
 80047f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80047f6:	4b52      	ldr	r3, [pc, #328]	; (8004940 <HAL_UART_MspInit+0x1cc>)
 80047f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047fe:	4b50      	ldr	r3, [pc, #320]	; (8004940 <HAL_UART_MspInit+0x1cc>)
 8004800:	2200      	movs	r2, #0
 8004802:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004804:	4b4e      	ldr	r3, [pc, #312]	; (8004940 <HAL_UART_MspInit+0x1cc>)
 8004806:	2200      	movs	r2, #0
 8004808:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800480a:	4b4d      	ldr	r3, [pc, #308]	; (8004940 <HAL_UART_MspInit+0x1cc>)
 800480c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004810:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004812:	4b4b      	ldr	r3, [pc, #300]	; (8004940 <HAL_UART_MspInit+0x1cc>)
 8004814:	2200      	movs	r2, #0
 8004816:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004818:	4b49      	ldr	r3, [pc, #292]	; (8004940 <HAL_UART_MspInit+0x1cc>)
 800481a:	2200      	movs	r2, #0
 800481c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800481e:	4b48      	ldr	r3, [pc, #288]	; (8004940 <HAL_UART_MspInit+0x1cc>)
 8004820:	2200      	movs	r2, #0
 8004822:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004824:	4b46      	ldr	r3, [pc, #280]	; (8004940 <HAL_UART_MspInit+0x1cc>)
 8004826:	2200      	movs	r2, #0
 8004828:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800482a:	4b45      	ldr	r3, [pc, #276]	; (8004940 <HAL_UART_MspInit+0x1cc>)
 800482c:	2200      	movs	r2, #0
 800482e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004830:	4843      	ldr	r0, [pc, #268]	; (8004940 <HAL_UART_MspInit+0x1cc>)
 8004832:	f001 fb25 	bl	8005e80 <HAL_DMA_Init>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800483c:	f7fe fd40 	bl	80032c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a3f      	ldr	r2, [pc, #252]	; (8004940 <HAL_UART_MspInit+0x1cc>)
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
 8004846:	4a3e      	ldr	r2, [pc, #248]	; (8004940 <HAL_UART_MspInit+0x1cc>)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800484c:	2200      	movs	r2, #0
 800484e:	2105      	movs	r1, #5
 8004850:	2025      	movs	r0, #37	; 0x25
 8004852:	f001 fadd 	bl	8005e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004856:	2025      	movs	r0, #37	; 0x25
 8004858:	f001 faf6 	bl	8005e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800485c:	e066      	b.n	800492c <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a39      	ldr	r2, [pc, #228]	; (8004948 <HAL_UART_MspInit+0x1d4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d161      	bne.n	800492c <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	4b32      	ldr	r3, [pc, #200]	; (8004938 <HAL_UART_MspInit+0x1c4>)
 800486e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004870:	4a31      	ldr	r2, [pc, #196]	; (8004938 <HAL_UART_MspInit+0x1c4>)
 8004872:	f043 0320 	orr.w	r3, r3, #32
 8004876:	6453      	str	r3, [r2, #68]	; 0x44
 8004878:	4b2f      	ldr	r3, [pc, #188]	; (8004938 <HAL_UART_MspInit+0x1c4>)
 800487a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	4b2b      	ldr	r3, [pc, #172]	; (8004938 <HAL_UART_MspInit+0x1c4>)
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	4a2a      	ldr	r2, [pc, #168]	; (8004938 <HAL_UART_MspInit+0x1c4>)
 800488e:	f043 0304 	orr.w	r3, r3, #4
 8004892:	6313      	str	r3, [r2, #48]	; 0x30
 8004894:	4b28      	ldr	r3, [pc, #160]	; (8004938 <HAL_UART_MspInit+0x1c4>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048a0:	23c0      	movs	r3, #192	; 0xc0
 80048a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a4:	2302      	movs	r3, #2
 80048a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ac:	2303      	movs	r3, #3
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80048b0:	2308      	movs	r3, #8
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048b4:	f107 031c 	add.w	r3, r7, #28
 80048b8:	4619      	mov	r1, r3
 80048ba:	4824      	ldr	r0, [pc, #144]	; (800494c <HAL_UART_MspInit+0x1d8>)
 80048bc:	f003 f8ce 	bl	8007a5c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80048c0:	4b23      	ldr	r3, [pc, #140]	; (8004950 <HAL_UART_MspInit+0x1dc>)
 80048c2:	4a24      	ldr	r2, [pc, #144]	; (8004954 <HAL_UART_MspInit+0x1e0>)
 80048c4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80048c6:	4b22      	ldr	r3, [pc, #136]	; (8004950 <HAL_UART_MspInit+0x1dc>)
 80048c8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80048cc:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048ce:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_UART_MspInit+0x1dc>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048d4:	4b1e      	ldr	r3, [pc, #120]	; (8004950 <HAL_UART_MspInit+0x1dc>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048da:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <HAL_UART_MspInit+0x1dc>)
 80048dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048e0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048e2:	4b1b      	ldr	r3, [pc, #108]	; (8004950 <HAL_UART_MspInit+0x1dc>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048e8:	4b19      	ldr	r3, [pc, #100]	; (8004950 <HAL_UART_MspInit+0x1dc>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80048ee:	4b18      	ldr	r3, [pc, #96]	; (8004950 <HAL_UART_MspInit+0x1dc>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048f4:	4b16      	ldr	r3, [pc, #88]	; (8004950 <HAL_UART_MspInit+0x1dc>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048fa:	4b15      	ldr	r3, [pc, #84]	; (8004950 <HAL_UART_MspInit+0x1dc>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004900:	4813      	ldr	r0, [pc, #76]	; (8004950 <HAL_UART_MspInit+0x1dc>)
 8004902:	f001 fabd 	bl	8005e80 <HAL_DMA_Init>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 800490c:	f7fe fcd8 	bl	80032c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a0f      	ldr	r2, [pc, #60]	; (8004950 <HAL_UART_MspInit+0x1dc>)
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
 8004916:	4a0e      	ldr	r2, [pc, #56]	; (8004950 <HAL_UART_MspInit+0x1dc>)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800491c:	2200      	movs	r2, #0
 800491e:	2105      	movs	r1, #5
 8004920:	2047      	movs	r0, #71	; 0x47
 8004922:	f001 fa75 	bl	8005e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004926:	2047      	movs	r0, #71	; 0x47
 8004928:	f001 fa8e 	bl	8005e48 <HAL_NVIC_EnableIRQ>
}
 800492c:	bf00      	nop
 800492e:	3730      	adds	r7, #48	; 0x30
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40011000 	.word	0x40011000
 8004938:	40023800 	.word	0x40023800
 800493c:	40020000 	.word	0x40020000
 8004940:	20000ab8 	.word	0x20000ab8
 8004944:	40026440 	.word	0x40026440
 8004948:	40011400 	.word	0x40011400
 800494c:	40020800 	.word	0x40020800
 8004950:	20000b18 	.word	0x20000b18
 8004954:	40026428 	.word	0x40026428

08004958 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <HAL_UART_MspDeInit+0x70>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d113      	bne.n	8004992 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800496a:	4b18      	ldr	r3, [pc, #96]	; (80049cc <HAL_UART_MspDeInit+0x74>)
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	4a17      	ldr	r2, [pc, #92]	; (80049cc <HAL_UART_MspDeInit+0x74>)
 8004970:	f023 0310 	bic.w	r3, r3, #16
 8004974:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004976:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800497a:	4815      	ldr	r0, [pc, #84]	; (80049d0 <HAL_UART_MspDeInit+0x78>)
 800497c:	f003 fa0a 	bl	8007d94 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	4618      	mov	r0, r3
 8004986:	f001 fb29 	bl	8005fdc <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800498a:	2025      	movs	r0, #37	; 0x25
 800498c:	f001 fa6a 	bl	8005e64 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8004990:	e016      	b.n	80049c0 <HAL_UART_MspDeInit+0x68>
  else if(huart->Instance==USART6)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a0f      	ldr	r2, [pc, #60]	; (80049d4 <HAL_UART_MspDeInit+0x7c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d111      	bne.n	80049c0 <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART6_CLK_DISABLE();
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_UART_MspDeInit+0x74>)
 800499e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a0:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <HAL_UART_MspDeInit+0x74>)
 80049a2:	f023 0320 	bic.w	r3, r3, #32
 80049a6:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 80049a8:	21c0      	movs	r1, #192	; 0xc0
 80049aa:	480b      	ldr	r0, [pc, #44]	; (80049d8 <HAL_UART_MspDeInit+0x80>)
 80049ac:	f003 f9f2 	bl	8007d94 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 fb11 	bl	8005fdc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80049ba:	2047      	movs	r0, #71	; 0x47
 80049bc:	f001 fa52 	bl	8005e64 <HAL_NVIC_DisableIRQ>
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40011000 	.word	0x40011000
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40020000 	.word	0x40020000
 80049d4:	40011400 	.word	0x40011400
 80049d8:	40020800 	.word	0x40020800

080049dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08c      	sub	sp, #48	; 0x30
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80049ec:	2200      	movs	r2, #0
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	2019      	movs	r0, #25
 80049f2:	f001 fa0d 	bl	8005e10 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80049f6:	2019      	movs	r0, #25
 80049f8:	f001 fa26 	bl	8005e48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	4b1f      	ldr	r3, [pc, #124]	; (8004a80 <HAL_InitTick+0xa4>)
 8004a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a04:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <HAL_InitTick+0xa4>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8004a0c:	4b1c      	ldr	r3, [pc, #112]	; (8004a80 <HAL_InitTick+0xa4>)
 8004a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004a18:	f107 0210 	add.w	r2, r7, #16
 8004a1c:	f107 0314 	add.w	r3, r7, #20
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f003 ffa4 	bl	8008970 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004a28:	f003 ff8e 	bl	8008948 <HAL_RCC_GetPCLK2Freq>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	4a13      	ldr	r2, [pc, #76]	; (8004a84 <HAL_InitTick+0xa8>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	0c9b      	lsrs	r3, r3, #18
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004a40:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <HAL_InitTick+0xac>)
 8004a42:	4a12      	ldr	r2, [pc, #72]	; (8004a8c <HAL_InitTick+0xb0>)
 8004a44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004a46:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <HAL_InitTick+0xac>)
 8004a48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004a4e:	4a0e      	ldr	r2, [pc, #56]	; (8004a88 <HAL_InitTick+0xac>)
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004a54:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <HAL_InitTick+0xac>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <HAL_InitTick+0xac>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004a60:	4809      	ldr	r0, [pc, #36]	; (8004a88 <HAL_InitTick+0xac>)
 8004a62:	f004 fd5f 	bl	8009524 <HAL_TIM_Base_Init>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d104      	bne.n	8004a76 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004a6c:	4806      	ldr	r0, [pc, #24]	; (8004a88 <HAL_InitTick+0xac>)
 8004a6e:	f004 fe11 	bl	8009694 <HAL_TIM_Base_Start_IT>
 8004a72:	4603      	mov	r3, r0
 8004a74:	e000      	b.n	8004a78 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3730      	adds	r7, #48	; 0x30
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40023800 	.word	0x40023800
 8004a84:	431bde83 	.word	0x431bde83
 8004a88:	20000cc8 	.word	0x20000cc8
 8004a8c:	40010000 	.word	0x40010000

08004a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a94:	e7fe      	b.n	8004a94 <NMI_Handler+0x4>

08004a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a96:	b480      	push	{r7}
 8004a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a9a:	e7fe      	b.n	8004a9a <HardFault_Handler+0x4>

08004a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004aa0:	e7fe      	b.n	8004aa0 <MemManage_Handler+0x4>

08004aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004aa6:	e7fe      	b.n	8004aa6 <BusFault_Handler+0x4>

08004aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004aac:	e7fe      	b.n	8004aac <UsageFault_Handler+0x4>

08004aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ac0:	4802      	ldr	r0, [pc, #8]	; (8004acc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004ac2:	f004 fe57 	bl	8009774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000cc8 	.word	0x20000cc8

08004ad0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004ad4:	4803      	ldr	r0, [pc, #12]	; (8004ae4 <TIM4_IRQHandler+0x14>)
 8004ad6:	f004 fe4d 	bl	8009774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  UpdateTimers();
 8004ada:	f000 f965 	bl	8004da8 <UpdateTimers>
  /* USER CODE END TIM4_IRQn 1 */
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	200009e8 	.word	0x200009e8

08004ae8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004aec:	4802      	ldr	r0, [pc, #8]	; (8004af8 <USART1_IRQHandler+0x10>)
 8004aee:	f005 fb77 	bl	800a1e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004af2:	bf00      	nop
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20000a30 	.word	0x20000a30

08004afc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004b00:	4802      	ldr	r0, [pc, #8]	; (8004b0c <DMA2_Stream0_IRQHandler+0x10>)
 8004b02:	f001 fbb3 	bl	800626c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	200008e8 	.word	0x200008e8

08004b10 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004b14:	4802      	ldr	r0, [pc, #8]	; (8004b20 <DMA2_Stream1_IRQHandler+0x10>)
 8004b16:	f001 fba9 	bl	800626c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004b1a:	bf00      	nop
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000b18 	.word	0x20000b18

08004b24 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004b28:	4802      	ldr	r0, [pc, #8]	; (8004b34 <DMA2_Stream2_IRQHandler+0x10>)
 8004b2a:	f001 fb9f 	bl	800626c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000ab8 	.word	0x20000ab8

08004b38 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8004b3c:	4802      	ldr	r0, [pc, #8]	; (8004b48 <ETH_IRQHandler+0x10>)
 8004b3e:	f002 f9df 	bl	8006f00 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8004b42:	bf00      	nop
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	2000413c 	.word	0x2000413c

08004b4c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004b50:	4802      	ldr	r0, [pc, #8]	; (8004b5c <USART6_IRQHandler+0x10>)
 8004b52:	f005 fb45 	bl	800a1e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004b56:	bf00      	nop
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000a74 	.word	0x20000a74

08004b60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
	return 1;
 8004b64:	2301      	movs	r3, #1
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <_kill>:

int _kill(int pid, int sig)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <_kill+0x20>)
 8004b7c:	2216      	movs	r2, #22
 8004b7e:	601a      	str	r2, [r3, #0]
	return -1;
 8004b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	2000def4 	.word	0x2000def4

08004b94 <_exit>:

void _exit (int status)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ffe5 	bl	8004b70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004ba6:	e7fe      	b.n	8004ba6 <_exit+0x12>

08004ba8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e00a      	b.n	8004bd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004bba:	f3af 8000 	nop.w
 8004bbe:	4601      	mov	r1, r0
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	60ba      	str	r2, [r7, #8]
 8004bc6:	b2ca      	uxtb	r2, r1
 8004bc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	dbf0      	blt.n	8004bba <_read+0x12>
	}

return len;
 8004bd8:	687b      	ldr	r3, [r7, #4]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b086      	sub	sp, #24
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	e009      	b.n	8004c08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	60ba      	str	r2, [r7, #8]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	3301      	adds	r3, #1
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	dbf1      	blt.n	8004bf4 <_write+0x12>
	}
	return len;
 8004c10:	687b      	ldr	r3, [r7, #4]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <_close>:

int _close(int file)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
	return -1;
 8004c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c42:	605a      	str	r2, [r3, #4]
	return 0;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <_isatty>:

int _isatty(int file)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
	return 1;
 8004c5a:	2301      	movs	r3, #1
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
	return 0;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c8c:	4a14      	ldr	r2, [pc, #80]	; (8004ce0 <_sbrk+0x5c>)
 8004c8e:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <_sbrk+0x60>)
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c98:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <_sbrk+0x64>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ca0:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <_sbrk+0x64>)
 8004ca2:	4a12      	ldr	r2, [pc, #72]	; (8004cec <_sbrk+0x68>)
 8004ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <_sbrk+0x64>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4413      	add	r3, r2
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d205      	bcs.n	8004cc0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8004cb4:	4b0e      	ldr	r3, [pc, #56]	; (8004cf0 <_sbrk+0x6c>)
 8004cb6:	220c      	movs	r2, #12
 8004cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cba:	f04f 33ff 	mov.w	r3, #4294967295
 8004cbe:	e009      	b.n	8004cd4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <_sbrk+0x64>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cc6:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <_sbrk+0x64>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4413      	add	r3, r2
 8004cce:	4a06      	ldr	r2, [pc, #24]	; (8004ce8 <_sbrk+0x64>)
 8004cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	371c      	adds	r7, #28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	20020000 	.word	0x20020000
 8004ce4:	00000400 	.word	0x00000400
 8004ce8:	20000d10 	.word	0x20000d10
 8004cec:	2000def8 	.word	0x2000def8
 8004cf0:	2000def4 	.word	0x2000def4

08004cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cf8:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <SystemInit+0x20>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfe:	4a05      	ldr	r2, [pc, #20]	; (8004d14 <SystemInit+0x20>)
 8004d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	e000ed00 	.word	0xe000ed00

08004d18 <Start_Timers>:

static Timer_Init_State Push_To_List(TON *timer);
static void UpdateTimer(TON *timer);

void Start_Timers(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8004d1c:	4802      	ldr	r0, [pc, #8]	; (8004d28 <Start_Timers+0x10>)
 8004d1e:	f004 fcb9 	bl	8009694 <HAL_TIM_Base_Start_IT>

}
 8004d22:	bf00      	nop
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	200009e8 	.word	0x200009e8

08004d2c <Timer_Init>:

Timer_Init_State Timer_Init(TON *timer)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
	return Push_To_List(timer);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f805 	bl	8004d44 <Push_To_List>
 8004d3a:	4603      	mov	r3, r0

}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <Push_To_List>:

static Timer_Init_State Push_To_List(TON *timer)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	struct list_item *tmp, *top;
	tmp = malloc(sizeof(struct list_item));
 8004d4c:	2008      	movs	r0, #8
 8004d4e:	f017 fd89 	bl	801c864 <malloc>
 8004d52:	4603      	mov	r3, r0
 8004d54:	60bb      	str	r3, [r7, #8]
	if(tmp == NULL)return TIMER_FAIL;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <Push_To_List+0x1c>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e01c      	b.n	8004d9a <Push_To_List+0x56>
	tmp->next = NULL;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2200      	movs	r2, #0
 8004d64:	605a      	str	r2, [r3, #4]
	tmp->timer = timer;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	601a      	str	r2, [r3, #0]
	if(timers)
 8004d6c:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <Push_To_List+0x60>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00e      	beq.n	8004d92 <Push_To_List+0x4e>
	{
		top = timers;
 8004d74:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <Push_To_List+0x60>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]
		while(top->next)
 8004d7a:	e002      	b.n	8004d82 <Push_To_List+0x3e>
		{
			top = top->next;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
		while(top->next)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f8      	bne.n	8004d7c <Push_To_List+0x38>
		}
		top->next = tmp;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	605a      	str	r2, [r3, #4]
 8004d90:	e002      	b.n	8004d98 <Push_To_List+0x54>
	}
	else
	{
		timers = tmp;
 8004d92:	4a04      	ldr	r2, [pc, #16]	; (8004da4 <Push_To_List+0x60>)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	6013      	str	r3, [r2, #0]
	}
	return TIMER_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000d14 	.word	0x20000d14

08004da8 <UpdateTimers>:

/*Функция обновления значений всех таймеров*/
void UpdateTimers()
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
	struct list_item *tmp = timers;
 8004dae:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <UpdateTimers+0x30>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	607b      	str	r3, [r7, #4]
	while(tmp)
 8004db4:	e007      	b.n	8004dc6 <UpdateTimers+0x1e>
	{
		UpdateTimer(tmp->timer);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 f80e 	bl	8004ddc <UpdateTimer>
		tmp = tmp->next;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	607b      	str	r3, [r7, #4]
	while(tmp)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f4      	bne.n	8004db6 <UpdateTimers+0xe>
	}
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000d14 	.word	0x20000d14

08004ddc <UpdateTimer>:

/*Функция обновления значений одного таймера*/
static void UpdateTimer(TON *timer)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
	if(timer->IN)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	7a1b      	ldrb	r3, [r3, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00e      	beq.n	8004e0a <UpdateTimer+0x2e>
	{
		timer->ET = timer->ET < timer->SV ? timer->ET+1 : timer->ET;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d203      	bcs.n	8004e00 <UpdateTimer+0x24>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	e001      	b.n	8004e04 <UpdateTimer+0x28>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6053      	str	r3, [r2, #4]
 8004e08:	e002      	b.n	8004e10 <UpdateTimer+0x34>
	}
	else
	{
		timer->ET = 0;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	605a      	str	r2, [r3, #4]
	}
	timer->OUT = timer->ET == timer->SV;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2301      	moveq	r3, #1
 8004e1e:	2300      	movne	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	725a      	strb	r2, [r3, #9]
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <uart_thread>:
static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size);



void uart_thread(void *argument)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	osEvent event;
	Uart_Queue_Struct *queue_arg;
	RsReInit();
 8004e3c:	f000 f958 	bl	80050f0 <RsReInit>
	StartReciveUartAll();
 8004e40:	f000 f82c 	bl	8004e9c <StartReciveUartAll>
	while(1)
	{
		event = osMailGet(uart_queue, osWaitForever);
 8004e44:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <uart_thread+0x64>)
 8004e46:	6819      	ldr	r1, [r3, #0]
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e50:	4618      	mov	r0, r3
 8004e52:	f007 fd23 	bl	800c89c <osMailGet>
		if(event.status == osEventMail)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d1f3      	bne.n	8004e44 <uart_thread+0x10>
		{
			int result = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61fb      	str	r3, [r7, #28]
			queue_arg = event.value.p;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	61bb      	str	r3, [r7, #24]
			result = RecognizePacket(queue_arg);
 8004e64:	69b8      	ldr	r0, [r7, #24]
 8004e66:	f000 f8c5 	bl	8004ff4 <RecognizePacket>
 8004e6a:	61f8      	str	r0, [r7, #28]
			if(result)Transmit(queue_arg->huart, queue_arg->output_pointer, result);
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d008      	beq.n	8004e84 <uart_thread+0x50>
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	68d8      	ldr	r0, [r3, #12]
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	b292      	uxth	r2, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f000 f90e 	bl	80050a0 <Transmit>
			StartReceive(1);
 8004e84:	2001      	movs	r0, #1
 8004e86:	f000 f81d 	bl	8004ec4 <StartReceive>
			osMailFree(uart_queue, queue_arg);
 8004e8a:	4b03      	ldr	r3, [pc, #12]	; (8004e98 <uart_thread+0x64>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69b9      	ldr	r1, [r7, #24]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f007 fd77 	bl	800c984 <osMailFree>
		event = osMailGet(uart_queue, osWaitForever);
 8004e96:	e7d5      	b.n	8004e44 <uart_thread+0x10>
 8004e98:	20000430 	.word	0x20000430

08004e9c <StartReciveUartAll>:
	}
}


static void StartReciveUartAll()
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; ++i) {
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	e005      	b.n	8004eb4 <StartReciveUartAll+0x18>
		StartReceive(i);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f80b 	bl	8004ec4 <StartReceive>
	for (int i = 0; i < 2; ++i) {
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	607b      	str	r3, [r7, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	ddf6      	ble.n	8004ea8 <StartReciveUartAll+0xc>
	}
}
 8004eba:	bf00      	nop
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <StartReceive>:


static void StartReceive(int index)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	switch (index) {
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <StartReceive+0x16>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d016      	beq.n	8004f06 <StartReceive+0x42>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
			}
			break;
		default:
			break;
 8004ed8:	e02e      	b.n	8004f38 <StartReceive+0x74>
			if (huart1.hdmarx->State==HAL_DMA_STATE_READY) {
 8004eda:	4b19      	ldr	r3, [pc, #100]	; (8004f40 <StartReceive+0x7c>)
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d124      	bne.n	8004f32 <StartReceive+0x6e>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_input_buffer[0], UART_INPUT_BUFFER_SZ);
 8004ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eec:	4915      	ldr	r1, [pc, #84]	; (8004f44 <StartReceive+0x80>)
 8004eee:	4814      	ldr	r0, [pc, #80]	; (8004f40 <StartReceive+0x7c>)
 8004ef0:	f005 f910 	bl	800a114 <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8004ef4:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <StartReceive+0x84>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <StartReceive+0x84>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0208 	bic.w	r2, r2, #8
 8004f02:	601a      	str	r2, [r3, #0]
			break;
 8004f04:	e015      	b.n	8004f32 <StartReceive+0x6e>
			if(huart6.hdmarx->State==HAL_DMA_STATE_READY){
 8004f06:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <StartReceive+0x88>)
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d110      	bne.n	8004f36 <StartReceive+0x72>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
 8004f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f18:	490d      	ldr	r1, [pc, #52]	; (8004f50 <StartReceive+0x8c>)
 8004f1a:	480c      	ldr	r0, [pc, #48]	; (8004f4c <StartReceive+0x88>)
 8004f1c:	f005 f8fa 	bl	800a114 <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
 8004f20:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <StartReceive+0x90>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <StartReceive+0x90>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0208 	bic.w	r2, r2, #8
 8004f2e:	601a      	str	r2, [r3, #0]
			break;
 8004f30:	e001      	b.n	8004f36 <StartReceive+0x72>
			break;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <StartReceive+0x74>
			break;
 8004f36:	bf00      	nop
	}
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	20000a30 	.word	0x20000a30
 8004f44:	20000d18 	.word	0x20000d18
 8004f48:	20000ab8 	.word	0x20000ab8
 8004f4c:	20000a74 	.word	0x20000a74
 8004f50:	20000e18 	.word	0x20000e18
 8004f54:	20000b18 	.word	0x20000b18

08004f58 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	807b      	strh	r3, [r7, #2]
	Uart_Queue_Struct *queue_arg;
	uint8_t *input_pointer = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
	uint8_t *output_pointer = NULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]
	if (huart->Instance==USART1) {
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1a      	ldr	r2, [pc, #104]	; (8004fdc <HAL_UARTEx_RxEventCallback+0x84>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d105      	bne.n	8004f82 <HAL_UARTEx_RxEventCallback+0x2a>
		input_pointer = uart_input_buffer[0];
 8004f76:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <HAL_UARTEx_RxEventCallback+0x88>)
 8004f78:	617b      	str	r3, [r7, #20]
		StartReceive(0);
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f7ff ffa2 	bl	8004ec4 <StartReceive>
 8004f80:	e008      	b.n	8004f94 <HAL_UARTEx_RxEventCallback+0x3c>
	}
	else if(huart->Instance==USART6){
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a17      	ldr	r2, [pc, #92]	; (8004fe4 <HAL_UARTEx_RxEventCallback+0x8c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d120      	bne.n	8004fce <HAL_UARTEx_RxEventCallback+0x76>
		input_pointer = uart_input_buffer[1];
 8004f8c:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <HAL_UARTEx_RxEventCallback+0x90>)
 8004f8e:	617b      	str	r3, [r7, #20]
		output_pointer = rs_answer;
 8004f90:	4b16      	ldr	r3, [pc, #88]	; (8004fec <HAL_UARTEx_RxEventCallback+0x94>)
 8004f92:	613b      	str	r3, [r7, #16]

	}
	else return;
	queue_arg = osMailAlloc(uart_queue, 0);
 8004f94:	4b16      	ldr	r3, [pc, #88]	; (8004ff0 <HAL_UARTEx_RxEventCallback+0x98>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f007 fc2a 	bl	800c7f4 <osMailAlloc>
 8004fa0:	60f8      	str	r0, [r7, #12]
	if(queue_arg==NULL)return;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d014      	beq.n	8004fd2 <HAL_UARTEx_RxEventCallback+0x7a>
	queue_arg->inpit_size = size;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	887a      	ldrh	r2, [r7, #2]
 8004fac:	811a      	strh	r2, [r3, #8]
	queue_arg->input_pointer = input_pointer;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	601a      	str	r2, [r3, #0]
	queue_arg->output_pointer = output_pointer;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	605a      	str	r2, [r3, #4]
	queue_arg->huart = huart;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]
	osMailPut(uart_queue, queue_arg);
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <HAL_UARTEx_RxEventCallback+0x98>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68f9      	ldr	r1, [r7, #12]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f007 fc2a 	bl	800c820 <osMailPut>
 8004fcc:	e002      	b.n	8004fd4 <HAL_UARTEx_RxEventCallback+0x7c>
	else return;
 8004fce:	bf00      	nop
 8004fd0:	e000      	b.n	8004fd4 <HAL_UARTEx_RxEventCallback+0x7c>
	if(queue_arg==NULL)return;
 8004fd2:	bf00      	nop
}
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40011000 	.word	0x40011000
 8004fe0:	20000d18 	.word	0x20000d18
 8004fe4:	40011400 	.word	0x40011400
 8004fe8:	20000e18 	.word	0x20000e18
 8004fec:	20000f18 	.word	0x20000f18
 8004ff0:	20000430 	.word	0x20000430

08004ff4 <RecognizePacket>:

static int RecognizePacket(Uart_Queue_Struct *request)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	int result = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
	if(request->input_pointer==NULL)return 0;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <RecognizePacket+0x18>
 8005008:	2300      	movs	r3, #0
 800500a:	e03e      	b.n	800508a <RecognizePacket+0x96>
	if(request->huart->Instance==USART1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a20      	ldr	r2, [pc, #128]	; (8005094 <RecognizePacket+0xa0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d121      	bne.n	800505c <RecognizePacket+0x68>
	{
		float analog = 0;
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]
		if(request->inpit_size==6 && *(request->input_pointer)==0x0A && *(request->input_pointer+5)==0x0D)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	891b      	ldrh	r3, [r3, #8]
 8005022:	2b06      	cmp	r3, #6
 8005024:	d118      	bne.n	8005058 <RecognizePacket+0x64>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b0a      	cmp	r3, #10
 800502e:	d113      	bne.n	8005058 <RecognizePacket+0x64>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3305      	adds	r3, #5
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b0d      	cmp	r3, #13
 800503a:	d10d      	bne.n	8005058 <RecognizePacket+0x64>
		{
			memcpy(&analog,(request->input_pointer)+1,sizeof(float));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3301      	adds	r3, #1
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60bb      	str	r3, [r7, #8]
			meas_data.analog_input = analog * 10;
 8005046:	edd7 7a02 	vldr	s15, [r7, #8]
 800504a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800504e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005052:	4b11      	ldr	r3, [pc, #68]	; (8005098 <RecognizePacket+0xa4>)
 8005054:	edc3 7a01 	vstr	s15, [r3, #4]
		}
		return 0;
 8005058:	2300      	movs	r3, #0
 800505a:	e016      	b.n	800508a <RecognizePacket+0x96>
	}
	else if (request->huart->Instance==USART6) {
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a0e      	ldr	r2, [pc, #56]	; (800509c <RecognizePacket+0xa8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d10f      	bne.n	8005088 <RecognizePacket+0x94>
		if(request->output_pointer == NULL)return 0;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <RecognizePacket+0x80>
 8005070:	2300      	movs	r3, #0
 8005072:	e00a      	b.n	800508a <RecognizePacket+0x96>
		result = ModbusParse(request->input_pointer, request->inpit_size, request->output_pointer, RS485);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8919      	ldrh	r1, [r3, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	2300      	movs	r3, #0
 8005082:	f7fe f95f 	bl	8003344 <ModbusParse>
 8005086:	60f8      	str	r0, [r7, #12]
	}
	return result;
 8005088:	68fb      	ldr	r3, [r7, #12]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40011000 	.word	0x40011000
 8005098:	20000c5c 	.word	0x20000c5c
 800509c:	40011400 	.word	0x40011400

080050a0 <Transmit>:

static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
	if(huart->Instance==USART6)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a0d      	ldr	r2, [pc, #52]	; (80050e8 <Transmit+0x48>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d112      	bne.n	80050de <Transmit+0x3e>
	{
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, SET);
 80050b8:	2201      	movs	r2, #1
 80050ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050be:	480b      	ldr	r0, [pc, #44]	; (80050ec <Transmit+0x4c>)
 80050c0:	f002 ff7c 	bl	8007fbc <HAL_GPIO_WritePin>
		HAL_UART_Transmit(huart, p, size, 1000);
 80050c4:	88fa      	ldrh	r2, [r7, #6]
 80050c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f004 ff8f 	bl	8009ff0 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, RESET);
 80050d2:	2200      	movs	r2, #0
 80050d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050d8:	4804      	ldr	r0, [pc, #16]	; (80050ec <Transmit+0x4c>)
 80050da:	f002 ff6f 	bl	8007fbc <HAL_GPIO_WritePin>

	}
}
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40011400 	.word	0x40011400
 80050ec:	40020800 	.word	0x40020800

080050f0 <RsReInit>:

int RsReInit (void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
	int result = 0;
 80050f6:	2300      	movs	r3, #0
 80050f8:	607b      	str	r3, [r7, #4]
	result = HAL_UART_DeInit(&huart1);
 80050fa:	4823      	ldr	r0, [pc, #140]	; (8005188 <RsReInit+0x98>)
 80050fc:	f004 ff49 	bl	8009f92 <HAL_UART_DeInit>
 8005100:	4603      	mov	r3, r0
 8005102:	607b      	str	r3, [r7, #4]
	if (result == HAL_OK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d138      	bne.n	800517c <RsReInit+0x8c>
	{
		uint32_t parity = 0;
 800510a:	2300      	movs	r3, #0
 800510c:	603b      	str	r3, [r7, #0]
		switch (settings.retain.rs_sett.parity) {
 800510e:	4b1f      	ldr	r3, [pc, #124]	; (800518c <RsReInit+0x9c>)
 8005110:	8a1b      	ldrh	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <RsReInit+0x2c>
 8005116:	2b01      	cmp	r3, #1
 8005118:	d003      	beq.n	8005122 <RsReInit+0x32>
 800511a:	e006      	b.n	800512a <RsReInit+0x3a>
			case 0:
				parity = UART_PARITY_NONE;
 800511c:	2300      	movs	r3, #0
 800511e:	603b      	str	r3, [r7, #0]
				break;
 8005120:	e007      	b.n	8005132 <RsReInit+0x42>
			case 1:
				parity = UART_PARITY_EVEN;
 8005122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005126:	603b      	str	r3, [r7, #0]
				break;
 8005128:	e003      	b.n	8005132 <RsReInit+0x42>
			default:
				parity = UART_PARITY_ODD;
 800512a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800512e:	603b      	str	r3, [r7, #0]
				break;
 8005130:	bf00      	nop
		}
		huart6.Instance = USART6;
 8005132:	4b17      	ldr	r3, [pc, #92]	; (8005190 <RsReInit+0xa0>)
 8005134:	4a17      	ldr	r2, [pc, #92]	; (8005194 <RsReInit+0xa4>)
 8005136:	601a      	str	r2, [r3, #0]
		huart6.Init.BaudRate = settings.retain.rs_sett.baudrate>0 ? settings.retain.rs_sett.baudrate : 9600;
 8005138:	4b14      	ldr	r3, [pc, #80]	; (800518c <RsReInit+0x9c>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <RsReInit+0x56>
 8005140:	4b12      	ldr	r3, [pc, #72]	; (800518c <RsReInit+0x9c>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	e001      	b.n	800514a <RsReInit+0x5a>
 8005146:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800514a:	4a11      	ldr	r2, [pc, #68]	; (8005190 <RsReInit+0xa0>)
 800514c:	6053      	str	r3, [r2, #4]
		huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800514e:	4b10      	ldr	r3, [pc, #64]	; (8005190 <RsReInit+0xa0>)
 8005150:	2200      	movs	r2, #0
 8005152:	609a      	str	r2, [r3, #8]
		huart6.Init.StopBits = UART_STOPBITS_1;
 8005154:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <RsReInit+0xa0>)
 8005156:	2200      	movs	r2, #0
 8005158:	60da      	str	r2, [r3, #12]
		huart6.Init.Parity = parity;
 800515a:	4a0d      	ldr	r2, [pc, #52]	; (8005190 <RsReInit+0xa0>)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	6113      	str	r3, [r2, #16]
		huart6.Init.Mode = UART_MODE_TX_RX;
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <RsReInit+0xa0>)
 8005162:	220c      	movs	r2, #12
 8005164:	615a      	str	r2, [r3, #20]
		huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005166:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <RsReInit+0xa0>)
 8005168:	2200      	movs	r2, #0
 800516a:	619a      	str	r2, [r3, #24]
		huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800516c:	4b08      	ldr	r3, [pc, #32]	; (8005190 <RsReInit+0xa0>)
 800516e:	2200      	movs	r2, #0
 8005170:	61da      	str	r2, [r3, #28]
		result = HAL_UART_Init(&huart6);
 8005172:	4807      	ldr	r0, [pc, #28]	; (8005190 <RsReInit+0xa0>)
 8005174:	f004 fec0 	bl	8009ef8 <HAL_UART_Init>
 8005178:	4603      	mov	r3, r0
 800517a:	607b      	str	r3, [r7, #4]
	}
  return result;
 800517c:	687b      	ldr	r3, [r7, #4]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000a30 	.word	0x20000a30
 800518c:	20000bc0 	.word	0x20000bc0
 8005190:	20000a74 	.word	0x20000a74
 8005194:	40011400 	.word	0x40011400

08005198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800519c:	480d      	ldr	r0, [pc, #52]	; (80051d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800519e:	490e      	ldr	r1, [pc, #56]	; (80051d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80051a0:	4a0e      	ldr	r2, [pc, #56]	; (80051dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80051a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051a4:	e002      	b.n	80051ac <LoopCopyDataInit>

080051a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051aa:	3304      	adds	r3, #4

080051ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051b0:	d3f9      	bcc.n	80051a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051b2:	4a0b      	ldr	r2, [pc, #44]	; (80051e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80051b4:	4c0b      	ldr	r4, [pc, #44]	; (80051e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80051b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051b8:	e001      	b.n	80051be <LoopFillZerobss>

080051ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051bc:	3204      	adds	r2, #4

080051be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051c0:	d3fb      	bcc.n	80051ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80051c2:	f7ff fd97 	bl	8004cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051c6:	f017 fb29 	bl	801c81c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051ca:	f7fd fc8b 	bl	8002ae4 <main>
  bx  lr    
 80051ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80051d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80051d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051d8:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 80051dc:	0802185c 	.word	0x0802185c
  ldr r2, =_sbss
 80051e0:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 80051e4:	2000def8 	.word	0x2000def8

080051e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051e8:	e7fe      	b.n	80051e8 <ADC_IRQHandler>

080051ea <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d104      	bne.n	8005202 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80051f8:	b672      	cpsid	i
}
 80051fa:	bf00      	nop
 80051fc:	f7fe f860 	bl	80032c0 <Error_Handler>
 8005200:	e7fe      	b.n	8005200 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	e007      	b.n	8005218 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	2100      	movs	r1, #0
 800520e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d9f4      	bls.n	8005208 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	721a      	strb	r2, [r3, #8]
}
 8005224:	bf00      	nop
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800523a:	b672      	cpsid	i
}
 800523c:	bf00      	nop
 800523e:	f7fe f83f 	bl	80032c0 <Error_Handler>
 8005242:	e7fe      	b.n	8005242 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	7a1b      	ldrb	r3, [r3, #8]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d904      	bls.n	8005256 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800524c:	b672      	cpsid	i
}
 800524e:	bf00      	nop
 8005250:	f7fe f836 	bl	80032c0 <Error_Handler>
 8005254:	e7fe      	b.n	8005254 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	7a1b      	ldrb	r3, [r3, #8]
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	b2d1      	uxtb	r1, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	7211      	strb	r1, [r2, #8]
 8005262:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005264:	f3ef 8211 	mrs	r2, BASEPRI
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	60fa      	str	r2, [r7, #12]
 800527a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8005284:	bf00      	nop
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d104      	bne.n	80052a4 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800529a:	b672      	cpsid	i
}
 800529c:	bf00      	nop
 800529e:	f7fe f80f 	bl	80032c0 <Error_Handler>
 80052a2:	e7fe      	b.n	80052a2 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	7a1b      	ldrb	r3, [r3, #8]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	7a1b      	ldrb	r3, [r3, #8]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d904      	bls.n	80052c2 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80052b8:	b672      	cpsid	i
}
 80052ba:	bf00      	nop
 80052bc:	f7fe f800 	bl	80032c0 <Error_Handler>
 80052c0:	e7fe      	b.n	80052c0 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	7a1b      	ldrb	r3, [r3, #8]
 80052c6:	461a      	mov	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ce:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052d6:	bf00      	nop
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d103      	bne.n	80052f6 <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 80052ee:	4b0e      	ldr	r3, [pc, #56]	; (8005328 <__retarget_lock_init_recursive+0x48>)
 80052f0:	2216      	movs	r2, #22
 80052f2:	601a      	str	r2, [r3, #0]
    return;
 80052f4:	e015      	b.n	8005322 <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80052f6:	200c      	movs	r0, #12
 80052f8:	f017 fab4 	bl	801c864 <malloc>
 80052fc:	4603      	mov	r3, r0
 80052fe:	461a      	mov	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff ff6a 	bl	80051ea <stm32_lock_init>
    return;
 8005316:	e004      	b.n	8005322 <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8005318:	b672      	cpsid	i
}
 800531a:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 800531c:	f7fd ffd0 	bl	80032c0 <Error_Handler>
 8005320:	e7fe      	b.n	8005320 <__retarget_lock_init_recursive+0x40>
}
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	2000def4 	.word	0x2000def4

0800532c <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d104      	bne.n	8005344 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800533a:	b672      	cpsid	i
}
 800533c:	bf00      	nop
 800533e:	f7fd ffbf 	bl	80032c0 <Error_Handler>
 8005342:	e7fe      	b.n	8005342 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff ff70 	bl	800522c <stm32_lock_acquire>
}
 800534c:	bf00      	nop
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d104      	bne.n	800536c <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005362:	b672      	cpsid	i
}
 8005364:	bf00      	nop
 8005366:	f7fd ffab 	bl	80032c0 <Error_Handler>
 800536a:	e7fe      	b.n	800536a <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff ff8c 	bl	800528c <stm32_lock_release>
}
 8005374:	bf00      	nop
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005380:	4b0e      	ldr	r3, [pc, #56]	; (80053bc <HAL_Init+0x40>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a0d      	ldr	r2, [pc, #52]	; (80053bc <HAL_Init+0x40>)
 8005386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800538a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_Init+0x40>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <HAL_Init+0x40>)
 8005392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005398:	4b08      	ldr	r3, [pc, #32]	; (80053bc <HAL_Init+0x40>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a07      	ldr	r2, [pc, #28]	; (80053bc <HAL_Init+0x40>)
 800539e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053a4:	2003      	movs	r0, #3
 80053a6:	f000 fd28 	bl	8005dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053aa:	200f      	movs	r0, #15
 80053ac:	f7ff fb16 	bl	80049dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053b0:	f7ff f89a 	bl	80044e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40023c00 	.word	0x40023c00

080053c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_IncTick+0x20>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <HAL_IncTick+0x24>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4413      	add	r3, r2
 80053d0:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <HAL_IncTick+0x24>)
 80053d2:	6013      	str	r3, [r2, #0]
}
 80053d4:	bf00      	nop
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	200002cc 	.word	0x200002cc
 80053e4:	2000103c 	.word	0x2000103c

080053e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  return uwTick;
 80053ec:	4b03      	ldr	r3, [pc, #12]	; (80053fc <HAL_GetTick+0x14>)
 80053ee:	681b      	ldr	r3, [r3, #0]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	2000103c 	.word	0x2000103c

08005400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005408:	f7ff ffee 	bl	80053e8 <HAL_GetTick>
 800540c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005418:	d005      	beq.n	8005426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800541a:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <HAL_Delay+0x44>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005426:	bf00      	nop
 8005428:	f7ff ffde 	bl	80053e8 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	429a      	cmp	r2, r3
 8005436:	d8f7      	bhi.n	8005428 <HAL_Delay+0x28>
  {
  }
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	200002cc 	.word	0x200002cc

08005448 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e033      	b.n	80054c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff f86a 	bl	8004540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	d118      	bne.n	80054b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800548e:	f023 0302 	bic.w	r3, r3, #2
 8005492:	f043 0202 	orr.w	r2, r3, #2
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fa5e 	bl	800595c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	f043 0201 	orr.w	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
 80054b6:	e001      	b.n	80054bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_ADC_Start_DMA+0x1e>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e0e9      	b.n	80056c2 <HAL_ADC_Start_DMA+0x1f2>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b01      	cmp	r3, #1
 8005502:	d018      	beq.n	8005536 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0201 	orr.w	r2, r2, #1
 8005512:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005514:	4b6d      	ldr	r3, [pc, #436]	; (80056cc <HAL_ADC_Start_DMA+0x1fc>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a6d      	ldr	r2, [pc, #436]	; (80056d0 <HAL_ADC_Start_DMA+0x200>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	0c9a      	lsrs	r2, r3, #18
 8005520:	4613      	mov	r3, r2
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	4413      	add	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005528:	e002      	b.n	8005530 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	3b01      	subs	r3, #1
 800552e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f9      	bne.n	800552a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005544:	d107      	bne.n	8005556 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005554:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	f040 80a1 	bne.w	80056a8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005584:	2b00      	cmp	r3, #0
 8005586:	d007      	beq.n	8005598 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005590:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a4:	d106      	bne.n	80055b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	f023 0206 	bic.w	r2, r3, #6
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	645a      	str	r2, [r3, #68]	; 0x44
 80055b2:	e002      	b.n	80055ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055c2:	4b44      	ldr	r3, [pc, #272]	; (80056d4 <HAL_ADC_Start_DMA+0x204>)
 80055c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	4a43      	ldr	r2, [pc, #268]	; (80056d8 <HAL_ADC_Start_DMA+0x208>)
 80055cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	4a42      	ldr	r2, [pc, #264]	; (80056dc <HAL_ADC_Start_DMA+0x20c>)
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	4a41      	ldr	r2, [pc, #260]	; (80056e0 <HAL_ADC_Start_DMA+0x210>)
 80055dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80055e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80055f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005606:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	334c      	adds	r3, #76	; 0x4c
 8005612:	4619      	mov	r1, r3
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f000 fd3e 	bl	8006098 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	2b00      	cmp	r3, #0
 8005626:	d12a      	bne.n	800567e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a2d      	ldr	r2, [pc, #180]	; (80056e4 <HAL_ADC_Start_DMA+0x214>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d015      	beq.n	800565e <HAL_ADC_Start_DMA+0x18e>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2c      	ldr	r2, [pc, #176]	; (80056e8 <HAL_ADC_Start_DMA+0x218>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d105      	bne.n	8005648 <HAL_ADC_Start_DMA+0x178>
 800563c:	4b25      	ldr	r3, [pc, #148]	; (80056d4 <HAL_ADC_Start_DMA+0x204>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a27      	ldr	r2, [pc, #156]	; (80056ec <HAL_ADC_Start_DMA+0x21c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d136      	bne.n	80056c0 <HAL_ADC_Start_DMA+0x1f0>
 8005652:	4b20      	ldr	r3, [pc, #128]	; (80056d4 <HAL_ADC_Start_DMA+0x204>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f003 0310 	and.w	r3, r3, #16
 800565a:	2b00      	cmp	r3, #0
 800565c:	d130      	bne.n	80056c0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d129      	bne.n	80056c0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800567a:	609a      	str	r2, [r3, #8]
 800567c:	e020      	b.n	80056c0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <HAL_ADC_Start_DMA+0x214>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d11b      	bne.n	80056c0 <HAL_ADC_Start_DMA+0x1f0>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d114      	bne.n	80056c0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056a4:	609a      	str	r2, [r3, #8]
 80056a6:	e00b      	b.n	80056c0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	f043 0210 	orr.w	r2, r3, #16
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b8:	f043 0201 	orr.w	r2, r3, #1
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	200002c4 	.word	0x200002c4
 80056d0:	431bde83 	.word	0x431bde83
 80056d4:	40012300 	.word	0x40012300
 80056d8:	08005b55 	.word	0x08005b55
 80056dc:	08005c0f 	.word	0x08005c0f
 80056e0:	08005c2b 	.word	0x08005c2b
 80056e4:	40012000 	.word	0x40012000
 80056e8:	40012100 	.word	0x40012100
 80056ec:	40012200 	.word	0x40012200

080056f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_ADC_ConfigChannel+0x1c>
 8005730:	2302      	movs	r3, #2
 8005732:	e105      	b.n	8005940 <HAL_ADC_ConfigChannel+0x228>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b09      	cmp	r3, #9
 8005742:	d925      	bls.n	8005790 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68d9      	ldr	r1, [r3, #12]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	b29b      	uxth	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	4613      	mov	r3, r2
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	4413      	add	r3, r2
 8005758:	3b1e      	subs	r3, #30
 800575a:	2207      	movs	r2, #7
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	43da      	mvns	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	400a      	ands	r2, r1
 8005768:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68d9      	ldr	r1, [r3, #12]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	4618      	mov	r0, r3
 800577c:	4603      	mov	r3, r0
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	4403      	add	r3, r0
 8005782:	3b1e      	subs	r3, #30
 8005784:	409a      	lsls	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	60da      	str	r2, [r3, #12]
 800578e:	e022      	b.n	80057d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6919      	ldr	r1, [r3, #16]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	4613      	mov	r3, r2
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	4413      	add	r3, r2
 80057a4:	2207      	movs	r2, #7
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43da      	mvns	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	400a      	ands	r2, r1
 80057b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6919      	ldr	r1, [r3, #16]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	4618      	mov	r0, r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4403      	add	r3, r0
 80057cc:	409a      	lsls	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b06      	cmp	r3, #6
 80057dc:	d824      	bhi.n	8005828 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	3b05      	subs	r3, #5
 80057f0:	221f      	movs	r2, #31
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43da      	mvns	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	400a      	ands	r2, r1
 80057fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	4618      	mov	r0, r3
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	3b05      	subs	r3, #5
 800581a:	fa00 f203 	lsl.w	r2, r0, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	635a      	str	r2, [r3, #52]	; 0x34
 8005826:	e04c      	b.n	80058c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b0c      	cmp	r3, #12
 800582e:	d824      	bhi.n	800587a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	3b23      	subs	r3, #35	; 0x23
 8005842:	221f      	movs	r2, #31
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	43da      	mvns	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	400a      	ands	r2, r1
 8005850:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	4618      	mov	r0, r3
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	3b23      	subs	r3, #35	; 0x23
 800586c:	fa00 f203 	lsl.w	r2, r0, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	631a      	str	r2, [r3, #48]	; 0x30
 8005878:	e023      	b.n	80058c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	3b41      	subs	r3, #65	; 0x41
 800588c:	221f      	movs	r2, #31
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	43da      	mvns	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	400a      	ands	r2, r1
 800589a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	4618      	mov	r0, r3
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	3b41      	subs	r3, #65	; 0x41
 80058b6:	fa00 f203 	lsl.w	r2, r0, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058c2:	4b22      	ldr	r3, [pc, #136]	; (800594c <HAL_ADC_ConfigChannel+0x234>)
 80058c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a21      	ldr	r2, [pc, #132]	; (8005950 <HAL_ADC_ConfigChannel+0x238>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d109      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x1cc>
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b12      	cmp	r3, #18
 80058d6:	d105      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a19      	ldr	r2, [pc, #100]	; (8005950 <HAL_ADC_ConfigChannel+0x238>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d123      	bne.n	8005936 <HAL_ADC_ConfigChannel+0x21e>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d003      	beq.n	80058fe <HAL_ADC_ConfigChannel+0x1e6>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b11      	cmp	r3, #17
 80058fc:	d11b      	bne.n	8005936 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b10      	cmp	r3, #16
 8005910:	d111      	bne.n	8005936 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005912:	4b10      	ldr	r3, [pc, #64]	; (8005954 <HAL_ADC_ConfigChannel+0x23c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a10      	ldr	r2, [pc, #64]	; (8005958 <HAL_ADC_ConfigChannel+0x240>)
 8005918:	fba2 2303 	umull	r2, r3, r2, r3
 800591c:	0c9a      	lsrs	r2, r3, #18
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005928:	e002      	b.n	8005930 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	3b01      	subs	r3, #1
 800592e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f9      	bne.n	800592a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40012300 	.word	0x40012300
 8005950:	40012000 	.word	0x40012000
 8005954:	200002c4 	.word	0x200002c4
 8005958:	431bde83 	.word	0x431bde83

0800595c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005964:	4b79      	ldr	r3, [pc, #484]	; (8005b4c <ADC_Init+0x1f0>)
 8005966:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	431a      	orrs	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005990:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6859      	ldr	r1, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	021a      	lsls	r2, r3, #8
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80059b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6859      	ldr	r1, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6899      	ldr	r1, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ee:	4a58      	ldr	r2, [pc, #352]	; (8005b50 <ADC_Init+0x1f4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d022      	beq.n	8005a3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6899      	ldr	r1, [r3, #8]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6899      	ldr	r1, [r3, #8]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	609a      	str	r2, [r3, #8]
 8005a38:	e00f      	b.n	8005a5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0202 	bic.w	r2, r2, #2
 8005a68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6899      	ldr	r1, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	7e1b      	ldrb	r3, [r3, #24]
 8005a74:	005a      	lsls	r2, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01b      	beq.n	8005ac0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005aa6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6859      	ldr	r1, [r3, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	035a      	lsls	r2, r3, #13
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
 8005abe:	e007      	b.n	8005ad0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ace:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	051a      	lsls	r2, r3, #20
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6899      	ldr	r1, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b12:	025a      	lsls	r2, r3, #9
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6899      	ldr	r1, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	029a      	lsls	r2, r3, #10
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	609a      	str	r2, [r3, #8]
}
 8005b40:	bf00      	nop
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	40012300 	.word	0x40012300
 8005b50:	0f000001 	.word	0x0f000001

08005b54 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d13c      	bne.n	8005be8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d12b      	bne.n	8005be0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d127      	bne.n	8005be0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d006      	beq.n	8005bac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d119      	bne.n	8005be0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0220 	bic.w	r2, r2, #32
 8005bba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d105      	bne.n	8005be0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	f043 0201 	orr.w	r2, r3, #1
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f7fa fd21 	bl	8000628 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005be6:	e00e      	b.n	8005c06 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7ff fd85 	bl	8005704 <HAL_ADC_ErrorCallback>
}
 8005bfa:	e004      	b.n	8005c06 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	4798      	blx	r3
}
 8005c06:	bf00      	nop
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f7ff fd67 	bl	80056f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c22:	bf00      	nop
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2240      	movs	r2, #64	; 0x40
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c42:	f043 0204 	orr.w	r2, r3, #4
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff fd5a 	bl	8005704 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c50:	bf00      	nop
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c68:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <__NVIC_SetPriorityGrouping+0x44>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c74:	4013      	ands	r3, r2
 8005c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c8a:	4a04      	ldr	r2, [pc, #16]	; (8005c9c <__NVIC_SetPriorityGrouping+0x44>)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	60d3      	str	r3, [r2, #12]
}
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	e000ed00 	.word	0xe000ed00

08005ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ca4:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	0a1b      	lsrs	r3, r3, #8
 8005caa:	f003 0307 	and.w	r3, r3, #7
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	e000ed00 	.word	0xe000ed00

08005cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	db0b      	blt.n	8005ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	f003 021f 	and.w	r2, r3, #31
 8005cd4:	4907      	ldr	r1, [pc, #28]	; (8005cf4 <__NVIC_EnableIRQ+0x38>)
 8005cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cda:	095b      	lsrs	r3, r3, #5
 8005cdc:	2001      	movs	r0, #1
 8005cde:	fa00 f202 	lsl.w	r2, r0, r2
 8005ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	e000e100 	.word	0xe000e100

08005cf8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	db12      	blt.n	8005d30 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	f003 021f 	and.w	r2, r3, #31
 8005d10:	490a      	ldr	r1, [pc, #40]	; (8005d3c <__NVIC_DisableIRQ+0x44>)
 8005d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	2001      	movs	r0, #1
 8005d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d1e:	3320      	adds	r3, #32
 8005d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005d24:	f3bf 8f4f 	dsb	sy
}
 8005d28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d2a:	f3bf 8f6f 	isb	sy
}
 8005d2e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	e000e100 	.word	0xe000e100

08005d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	6039      	str	r1, [r7, #0]
 8005d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	db0a      	blt.n	8005d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	490c      	ldr	r1, [pc, #48]	; (8005d8c <__NVIC_SetPriority+0x4c>)
 8005d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d5e:	0112      	lsls	r2, r2, #4
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	440b      	add	r3, r1
 8005d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d68:	e00a      	b.n	8005d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	4908      	ldr	r1, [pc, #32]	; (8005d90 <__NVIC_SetPriority+0x50>)
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	3b04      	subs	r3, #4
 8005d78:	0112      	lsls	r2, r2, #4
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	761a      	strb	r2, [r3, #24]
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	e000e100 	.word	0xe000e100
 8005d90:	e000ed00 	.word	0xe000ed00

08005d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b089      	sub	sp, #36	; 0x24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f1c3 0307 	rsb	r3, r3, #7
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	bf28      	it	cs
 8005db2:	2304      	movcs	r3, #4
 8005db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	3304      	adds	r3, #4
 8005dba:	2b06      	cmp	r3, #6
 8005dbc:	d902      	bls.n	8005dc4 <NVIC_EncodePriority+0x30>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	3b03      	subs	r3, #3
 8005dc2:	e000      	b.n	8005dc6 <NVIC_EncodePriority+0x32>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	43da      	mvns	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	fa01 f303 	lsl.w	r3, r1, r3
 8005de6:	43d9      	mvns	r1, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dec:	4313      	orrs	r3, r2
         );
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3724      	adds	r7, #36	; 0x24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff ff28 	bl	8005c58 <__NVIC_SetPriorityGrouping>
}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e22:	f7ff ff3d 	bl	8005ca0 <__NVIC_GetPriorityGrouping>
 8005e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	6978      	ldr	r0, [r7, #20]
 8005e2e:	f7ff ffb1 	bl	8005d94 <NVIC_EncodePriority>
 8005e32:	4602      	mov	r2, r0
 8005e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e38:	4611      	mov	r1, r2
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff ff80 	bl	8005d40 <__NVIC_SetPriority>
}
 8005e40:	bf00      	nop
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	4603      	mov	r3, r0
 8005e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff ff30 	bl	8005cbc <__NVIC_EnableIRQ>
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff ff40 	bl	8005cf8 <__NVIC_DisableIRQ>
}
 8005e78:	bf00      	nop
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005e8c:	f7ff faac 	bl	80053e8 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e099      	b.n	8005fd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0201 	bic.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ebc:	e00f      	b.n	8005ede <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ebe:	f7ff fa93 	bl	80053e8 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b05      	cmp	r3, #5
 8005eca:	d908      	bls.n	8005ede <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2203      	movs	r2, #3
 8005ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e078      	b.n	8005fd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1e8      	bne.n	8005ebe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4b38      	ldr	r3, [pc, #224]	; (8005fd8 <HAL_DMA_Init+0x158>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d107      	bne.n	8005f48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	4313      	orrs	r3, r2
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f023 0307 	bic.w	r3, r3, #7
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d117      	bne.n	8005fa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00e      	beq.n	8005fa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fb5f 	bl	8006648 <DMA_CheckFifoParam>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d008      	beq.n	8005fa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2240      	movs	r2, #64	; 0x40
 8005f94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e016      	b.n	8005fd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fb16 	bl	80065dc <DMA_CalcBaseAndBitshift>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb8:	223f      	movs	r2, #63	; 0x3f
 8005fba:	409a      	lsls	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	f010803f 	.word	0xf010803f

08005fdc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e050      	b.n	8006090 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d101      	bne.n	8005ffe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e048      	b.n	8006090 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0201 	bic.w	r2, r2, #1
 800600c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2200      	movs	r2, #0
 800601c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2200      	movs	r2, #0
 8006024:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2200      	movs	r2, #0
 800602c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2200      	movs	r2, #0
 8006034:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2221      	movs	r2, #33	; 0x21
 800603c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 facc 	bl	80065dc <DMA_CalcBaseAndBitshift>
 8006044:	4603      	mov	r3, r0
 8006046:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	223f      	movs	r2, #63	; 0x3f
 8006072:	409a      	lsls	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_DMA_Start_IT+0x26>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e040      	b.n	8006140 <HAL_DMA_Start_IT+0xa8>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d12f      	bne.n	8006132 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2202      	movs	r2, #2
 80060d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 fa4a 	bl	8006580 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f0:	223f      	movs	r2, #63	; 0x3f
 80060f2:	409a      	lsls	r2, r3
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0216 	orr.w	r2, r2, #22
 8006106:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0208 	orr.w	r2, r2, #8
 800611e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0201 	orr.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	e005      	b.n	800613e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800613a:	2302      	movs	r3, #2
 800613c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800613e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006154:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006156:	f7ff f947 	bl	80053e8 <HAL_GetTick>
 800615a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d008      	beq.n	800617a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2280      	movs	r2, #128	; 0x80
 800616c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e052      	b.n	8006220 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0216 	bic.w	r2, r2, #22
 8006188:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695a      	ldr	r2, [r3, #20]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006198:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d103      	bne.n	80061aa <HAL_DMA_Abort+0x62>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0208 	bic.w	r2, r2, #8
 80061b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0201 	bic.w	r2, r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061ca:	e013      	b.n	80061f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061cc:	f7ff f90c 	bl	80053e8 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b05      	cmp	r3, #5
 80061d8:	d90c      	bls.n	80061f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2203      	movs	r2, #3
 80061e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e015      	b.n	8006220 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e4      	bne.n	80061cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006206:	223f      	movs	r2, #63	; 0x3f
 8006208:	409a      	lsls	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d004      	beq.n	8006246 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2280      	movs	r2, #128	; 0x80
 8006240:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e00c      	b.n	8006260 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2205      	movs	r2, #5
 800624a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006278:	4b8e      	ldr	r3, [pc, #568]	; (80064b4 <HAL_DMA_IRQHandler+0x248>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a8e      	ldr	r2, [pc, #568]	; (80064b8 <HAL_DMA_IRQHandler+0x24c>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	0a9b      	lsrs	r3, r3, #10
 8006284:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006296:	2208      	movs	r2, #8
 8006298:	409a      	lsls	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4013      	ands	r3, r2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01a      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d013      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0204 	bic.w	r2, r2, #4
 80062be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c4:	2208      	movs	r2, #8
 80062c6:	409a      	lsls	r2, r3
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d0:	f043 0201 	orr.w	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062dc:	2201      	movs	r2, #1
 80062de:	409a      	lsls	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4013      	ands	r3, r2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d012      	beq.n	800630e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fa:	2201      	movs	r2, #1
 80062fc:	409a      	lsls	r2, r3
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006306:	f043 0202 	orr.w	r2, r3, #2
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006312:	2204      	movs	r2, #4
 8006314:	409a      	lsls	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4013      	ands	r3, r2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d012      	beq.n	8006344 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00b      	beq.n	8006344 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006330:	2204      	movs	r2, #4
 8006332:	409a      	lsls	r2, r3
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633c:	f043 0204 	orr.w	r2, r3, #4
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006348:	2210      	movs	r2, #16
 800634a:	409a      	lsls	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4013      	ands	r3, r2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d043      	beq.n	80063dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0308 	and.w	r3, r3, #8
 800635e:	2b00      	cmp	r3, #0
 8006360:	d03c      	beq.n	80063dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006366:	2210      	movs	r2, #16
 8006368:	409a      	lsls	r2, r3
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d018      	beq.n	80063ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d108      	bne.n	800639c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d024      	beq.n	80063dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	4798      	blx	r3
 800639a:	e01f      	b.n	80063dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01b      	beq.n	80063dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	4798      	blx	r3
 80063ac:	e016      	b.n	80063dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d107      	bne.n	80063cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0208 	bic.w	r2, r2, #8
 80063ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e0:	2220      	movs	r2, #32
 80063e2:	409a      	lsls	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4013      	ands	r3, r2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 808f 	beq.w	800650c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 8087 	beq.w	800650c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006402:	2220      	movs	r2, #32
 8006404:	409a      	lsls	r2, r3
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b05      	cmp	r3, #5
 8006414:	d136      	bne.n	8006484 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0216 	bic.w	r2, r2, #22
 8006424:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695a      	ldr	r2, [r3, #20]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006434:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d103      	bne.n	8006446 <HAL_DMA_IRQHandler+0x1da>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006442:	2b00      	cmp	r3, #0
 8006444:	d007      	beq.n	8006456 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0208 	bic.w	r2, r2, #8
 8006454:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645a:	223f      	movs	r2, #63	; 0x3f
 800645c:	409a      	lsls	r2, r3
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006476:	2b00      	cmp	r3, #0
 8006478:	d07e      	beq.n	8006578 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	4798      	blx	r3
        }
        return;
 8006482:	e079      	b.n	8006578 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d01d      	beq.n	80064ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10d      	bne.n	80064bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d031      	beq.n	800650c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
 80064b0:	e02c      	b.n	800650c <HAL_DMA_IRQHandler+0x2a0>
 80064b2:	bf00      	nop
 80064b4:	200002c4 	.word	0x200002c4
 80064b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d023      	beq.n	800650c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	4798      	blx	r3
 80064cc:	e01e      	b.n	800650c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10f      	bne.n	80064fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0210 	bic.w	r2, r2, #16
 80064ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006510:	2b00      	cmp	r3, #0
 8006512:	d032      	beq.n	800657a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d022      	beq.n	8006566 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2205      	movs	r2, #5
 8006524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0201 	bic.w	r2, r2, #1
 8006536:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	3301      	adds	r3, #1
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	429a      	cmp	r2, r3
 8006542:	d307      	bcc.n	8006554 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f2      	bne.n	8006538 <HAL_DMA_IRQHandler+0x2cc>
 8006552:	e000      	b.n	8006556 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006554:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	4798      	blx	r3
 8006576:	e000      	b.n	800657a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006578:	bf00      	nop
    }
  }
}
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800659c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2b40      	cmp	r3, #64	; 0x40
 80065ac:	d108      	bne.n	80065c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80065be:	e007      	b.n	80065d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	60da      	str	r2, [r3, #12]
}
 80065d0:	bf00      	nop
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	3b10      	subs	r3, #16
 80065ec:	4a14      	ldr	r2, [pc, #80]	; (8006640 <DMA_CalcBaseAndBitshift+0x64>)
 80065ee:	fba2 2303 	umull	r2, r3, r2, r3
 80065f2:	091b      	lsrs	r3, r3, #4
 80065f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80065f6:	4a13      	ldr	r2, [pc, #76]	; (8006644 <DMA_CalcBaseAndBitshift+0x68>)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b03      	cmp	r3, #3
 8006608:	d909      	bls.n	800661e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006612:	f023 0303 	bic.w	r3, r3, #3
 8006616:	1d1a      	adds	r2, r3, #4
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	659a      	str	r2, [r3, #88]	; 0x58
 800661c:	e007      	b.n	800662e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006626:	f023 0303 	bic.w	r3, r3, #3
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	aaaaaaab 	.word	0xaaaaaaab
 8006644:	080215cc 	.word	0x080215cc

08006648 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006658:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d11f      	bne.n	80066a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b03      	cmp	r3, #3
 8006666:	d856      	bhi.n	8006716 <DMA_CheckFifoParam+0xce>
 8006668:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <DMA_CheckFifoParam+0x28>)
 800666a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666e:	bf00      	nop
 8006670:	08006681 	.word	0x08006681
 8006674:	08006693 	.word	0x08006693
 8006678:	08006681 	.word	0x08006681
 800667c:	08006717 	.word	0x08006717
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d046      	beq.n	800671a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006690:	e043      	b.n	800671a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800669a:	d140      	bne.n	800671e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066a0:	e03d      	b.n	800671e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066aa:	d121      	bne.n	80066f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d837      	bhi.n	8006722 <DMA_CheckFifoParam+0xda>
 80066b2:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <DMA_CheckFifoParam+0x70>)
 80066b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b8:	080066c9 	.word	0x080066c9
 80066bc:	080066cf 	.word	0x080066cf
 80066c0:	080066c9 	.word	0x080066c9
 80066c4:	080066e1 	.word	0x080066e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	73fb      	strb	r3, [r7, #15]
      break;
 80066cc:	e030      	b.n	8006730 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d025      	beq.n	8006726 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066de:	e022      	b.n	8006726 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066e8:	d11f      	bne.n	800672a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80066ee:	e01c      	b.n	800672a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d903      	bls.n	80066fe <DMA_CheckFifoParam+0xb6>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d003      	beq.n	8006704 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80066fc:	e018      	b.n	8006730 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	73fb      	strb	r3, [r7, #15]
      break;
 8006702:	e015      	b.n	8006730 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00e      	beq.n	800672e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	73fb      	strb	r3, [r7, #15]
      break;
 8006714:	e00b      	b.n	800672e <DMA_CheckFifoParam+0xe6>
      break;
 8006716:	bf00      	nop
 8006718:	e00a      	b.n	8006730 <DMA_CheckFifoParam+0xe8>
      break;
 800671a:	bf00      	nop
 800671c:	e008      	b.n	8006730 <DMA_CheckFifoParam+0xe8>
      break;
 800671e:	bf00      	nop
 8006720:	e006      	b.n	8006730 <DMA_CheckFifoParam+0xe8>
      break;
 8006722:	bf00      	nop
 8006724:	e004      	b.n	8006730 <DMA_CheckFifoParam+0xe8>
      break;
 8006726:	bf00      	nop
 8006728:	e002      	b.n	8006730 <DMA_CheckFifoParam+0xe8>
      break;   
 800672a:	bf00      	nop
 800672c:	e000      	b.n	8006730 <DMA_CheckFifoParam+0xe8>
      break;
 800672e:	bf00      	nop
    }
  } 
  
  return status; 
 8006730:	7bfb      	ldrb	r3, [r7, #15]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop

08006740 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	61fb      	str	r3, [r7, #28]
 800674c:	2300      	movs	r3, #0
 800674e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8006750:	4ba1      	ldr	r3, [pc, #644]	; (80069d8 <HAL_ETH_Init+0x298>)
 8006752:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8006758:	2300      	movs	r3, #0
 800675a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e182      	b.n	8006a6c <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f005 f82e 	bl	800b7dc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006780:	2300      	movs	r3, #0
 8006782:	60bb      	str	r3, [r7, #8]
 8006784:	4b95      	ldr	r3, [pc, #596]	; (80069dc <HAL_ETH_Init+0x29c>)
 8006786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006788:	4a94      	ldr	r2, [pc, #592]	; (80069dc <HAL_ETH_Init+0x29c>)
 800678a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800678e:	6453      	str	r3, [r2, #68]	; 0x44
 8006790:	4b92      	ldr	r3, [pc, #584]	; (80069dc <HAL_ETH_Init+0x29c>)
 8006792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006798:	60bb      	str	r3, [r7, #8]
 800679a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800679c:	4b90      	ldr	r3, [pc, #576]	; (80069e0 <HAL_ETH_Init+0x2a0>)
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	4a8f      	ldr	r2, [pc, #572]	; (80069e0 <HAL_ETH_Init+0x2a0>)
 80067a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80067a6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80067a8:	4b8d      	ldr	r3, [pc, #564]	; (80069e0 <HAL_ETH_Init+0x2a0>)
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	498b      	ldr	r1, [pc, #556]	; (80069e0 <HAL_ETH_Init+0x2a0>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	f043 0301 	orr.w	r3, r3, #1
 80067c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067cc:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80067ce:	f7fe fe0b 	bl	80053e8 <HAL_GetTick>
 80067d2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80067d4:	e011      	b.n	80067fa <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80067d6:	f7fe fe07 	bl	80053e8 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80067e4:	d909      	bls.n	80067fa <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2203      	movs	r2, #3
 80067ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e138      	b.n	8006a6c <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e4      	bne.n	80067d6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f023 031c 	bic.w	r3, r3, #28
 800681a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800681c:	f002 f874 	bl	8008908 <HAL_RCC_GetHCLKFreq>
 8006820:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	4a6f      	ldr	r2, [pc, #444]	; (80069e4 <HAL_ETH_Init+0x2a4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d908      	bls.n	800683c <HAL_ETH_Init+0xfc>
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	4a6e      	ldr	r2, [pc, #440]	; (80069e8 <HAL_ETH_Init+0x2a8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d804      	bhi.n	800683c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	f043 0308 	orr.w	r3, r3, #8
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	e027      	b.n	800688c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	4a6a      	ldr	r2, [pc, #424]	; (80069e8 <HAL_ETH_Init+0x2a8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d908      	bls.n	8006856 <HAL_ETH_Init+0x116>
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	4a64      	ldr	r2, [pc, #400]	; (80069d8 <HAL_ETH_Init+0x298>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d204      	bcs.n	8006856 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	f043 030c 	orr.w	r3, r3, #12
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	e01a      	b.n	800688c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	4a5f      	ldr	r2, [pc, #380]	; (80069d8 <HAL_ETH_Init+0x298>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d303      	bcc.n	8006866 <HAL_ETH_Init+0x126>
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	4a62      	ldr	r2, [pc, #392]	; (80069ec <HAL_ETH_Init+0x2ac>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d911      	bls.n	800688a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	4a60      	ldr	r2, [pc, #384]	; (80069ec <HAL_ETH_Init+0x2ac>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d908      	bls.n	8006880 <HAL_ETH_Init+0x140>
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	4a5f      	ldr	r2, [pc, #380]	; (80069f0 <HAL_ETH_Init+0x2b0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d804      	bhi.n	8006880 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	f043 0304 	orr.w	r3, r3, #4
 800687c:	61fb      	str	r3, [r7, #28]
 800687e:	e005      	b.n	800688c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f043 0310 	orr.w	r3, r3, #16
 8006886:	61fb      	str	r3, [r7, #28]
 8006888:	e000      	b.n	800688c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800688a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	69fa      	ldr	r2, [r7, #28]
 8006892:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8006894:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006898:	2100      	movs	r1, #0
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fc10 	bl	80070c0 <HAL_ETH_WritePHYRegister>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00b      	beq.n	80068be <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80068aa:	6939      	ldr	r1, [r7, #16]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fdc5 	bl	800743c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e0d6      	b.n	8006a6c <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80068be:	20ff      	movs	r0, #255	; 0xff
 80068c0:	f7fe fd9e 	bl	8005400 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 80a4 	beq.w	8006a16 <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80068ce:	f7fe fd8b 	bl	80053e8 <HAL_GetTick>
 80068d2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80068d4:	f107 030c 	add.w	r3, r7, #12
 80068d8:	461a      	mov	r2, r3
 80068da:	2101      	movs	r1, #1
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fb87 	bl	8006ff0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80068e2:	f7fe fd81 	bl	80053e8 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d90f      	bls.n	8006914 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80068f8:	6939      	ldr	r1, [r7, #16]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fd9e 	bl	800743c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e0ab      	b.n	8006a6c <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f003 0304 	and.w	r3, r3, #4
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0da      	beq.n	80068d4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800691e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006922:	2100      	movs	r1, #0
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fbcb 	bl	80070c0 <HAL_ETH_WritePHYRegister>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00b      	beq.n	8006948 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006934:	6939      	ldr	r1, [r7, #16]
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fd80 	bl	800743c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8006944:	2301      	movs	r3, #1
 8006946:	e091      	b.n	8006a6c <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8006948:	f7fe fd4e 	bl	80053e8 <HAL_GetTick>
 800694c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800694e:	f107 030c 	add.w	r3, r7, #12
 8006952:	461a      	mov	r2, r3
 8006954:	2101      	movs	r1, #1
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fb4a 	bl	8006ff0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800695c:	f7fe fd44 	bl	80053e8 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	f241 3288 	movw	r2, #5000	; 0x1388
 800696a:	4293      	cmp	r3, r2
 800696c:	d90f      	bls.n	800698e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8006972:	6939      	ldr	r1, [r7, #16]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fd61 	bl	800743c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e06e      	b.n	8006a6c <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0da      	beq.n	800694e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8006998:	f107 030c 	add.w	r3, r7, #12
 800699c:	461a      	mov	r2, r3
 800699e:	2110      	movs	r1, #16
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fb25 	bl	8006ff0 <HAL_ETH_ReadPHYRegister>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80069b0:	6939      	ldr	r1, [r7, #16]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fd42 	bl	800743c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80069c0:	2301      	movs	r3, #1
 80069c2:	e053      	b.n	8006a6c <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d012      	beq.n	80069f4 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069d4:	60da      	str	r2, [r3, #12]
 80069d6:	e010      	b.n	80069fa <HAL_ETH_Init+0x2ba>
 80069d8:	03938700 	.word	0x03938700
 80069dc:	40023800 	.word	0x40023800
 80069e0:	40013800 	.word	0x40013800
 80069e4:	01312cff 	.word	0x01312cff
 80069e8:	02160ebf 	.word	0x02160ebf
 80069ec:	05f5e0ff 	.word	0x05f5e0ff
 80069f0:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	609a      	str	r2, [r3, #8]
 8006a0a:	e026      	b.n	8006a5a <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a12:	609a      	str	r2, [r3, #8]
 8006a14:	e021      	b.n	8006a5a <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	08db      	lsrs	r3, r3, #3
 8006a1c:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	085b      	lsrs	r3, r3, #1
 8006a24:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8006a26:	4313      	orrs	r3, r2
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fb46 	bl	80070c0 <HAL_ETH_WritePHYRegister>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00b      	beq.n	8006a52 <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006a3e:	6939      	ldr	r1, [r7, #16]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fcfb 	bl	800743c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e00c      	b.n	8006a6c <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8006a52:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006a56:	f7fe fcd3 	bl	8005400 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8006a5a:	6939      	ldr	r1, [r7, #16]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fced 	bl	800743c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3720      	adds	r7, #32
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_ETH_DMATxDescListInit+0x20>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e051      	b.n	8006b38 <HAL_ETH_DMATxDescListInit+0xc4>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	e030      	b.n	8006b12 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	015b      	lsls	r3, r3, #5
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ac0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006ac8:	fb02 f303 	mul.w	r3, r2, r3
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	4413      	add	r3, r2
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d105      	bne.n	8006aea <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d208      	bcs.n	8006b06 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	3301      	adds	r3, #1
 8006af8:	015b      	lsls	r3, r3, #5
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	4413      	add	r3, r2
 8006afe:	461a      	mov	r2, r3
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	60da      	str	r2, [r3, #12]
 8006b04:	e002      	b.n	8006b0c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d3ca      	bcc.n	8006ab0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b24:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_ETH_DMARxDescListInit+0x20>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e055      	b.n	8006c10 <HAL_ETH_DMARxDescListInit+0xcc>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	617b      	str	r3, [r7, #20]
 8006b7e:	e034      	b.n	8006bea <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	015b      	lsls	r3, r3, #5
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	4413      	add	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b90:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8006b98:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006ba0:	fb02 f303 	mul.w	r3, r2, r3
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	461a      	mov	r2, r3
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d105      	bne.n	8006bc2 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d208      	bcs.n	8006bde <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	015b      	lsls	r3, r3, #5
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	60da      	str	r2, [r3, #12]
 8006bdc:	e002      	b.n	8006be4 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	3301      	adds	r3, #1
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d3c6      	bcc.n	8006b80 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006bfc:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_ETH_TransmitFrame+0x24>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e0cc      	b.n	8006dda <HAL_ETH_TransmitFrame+0x1be>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d109      	bne.n	8006c6a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8006c66:	2301      	movs	r3, #1
 8006c68:	e0b7      	b.n	8006dda <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	da09      	bge.n	8006c88 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2212      	movs	r2, #18
 8006c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0a8      	b.n	8006dda <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d915      	bls.n	8006cbe <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	4a54      	ldr	r2, [pc, #336]	; (8006de8 <HAL_ETH_TransmitFrame+0x1cc>)
 8006c96:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9a:	0a9b      	lsrs	r3, r3, #10
 8006c9c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	4b51      	ldr	r3, [pc, #324]	; (8006de8 <HAL_ETH_TransmitFrame+0x1cc>)
 8006ca2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca6:	0a9b      	lsrs	r3, r3, #10
 8006ca8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	e001      	b.n	8006cc2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d11c      	bne.n	8006d02 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8006cd6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8006ce2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006cf2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d00:	e04b      	b.n	8006d9a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8006d02:	2300      	movs	r3, #0
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	e044      	b.n	8006d92 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d12:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d16:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d107      	bne.n	8006d2e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d2c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006d36:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d116      	bne.n	8006d70 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006d50:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	4a25      	ldr	r2, [pc, #148]	; (8006dec <HAL_ETH_TransmitFrame+0x1d0>)
 8006d56:	fb03 f202 	mul.w	r2, r3, r2
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006d62:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8006d6e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006d7e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	461a      	mov	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	613b      	str	r3, [r7, #16]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d3b6      	bcc.n	8006d08 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00d      	beq.n	8006dc8 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db4:	461a      	mov	r2, r3
 8006db6:	2304      	movs	r3, #4
 8006db8:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	ac02b00b 	.word	0xac02b00b
 8006dec:	fffffa0c 	.word	0xfffffa0c

08006df0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d101      	bne.n	8006e0a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8006e06:	2302      	movs	r3, #2
 8006e08:	e074      	b.n	8006ef4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2202      	movs	r2, #2
 8006e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8006e1a:	e05a      	b.n	8006ed2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e30:	d10d      	bne.n	8006e4e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	461a      	mov	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e4c:	e041      	b.n	8006ed2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10b      	bne.n	8006e74 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	629a      	str	r2, [r3, #40]	; 0x28
 8006e72:	e02e      	b.n	8006ed2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d103      	bne.n	8006e96 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	0c1b      	lsrs	r3, r3, #16
 8006e9e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006ea2:	1f1a      	subs	r2, r3, #4
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e010      	b.n	8006ef4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	db02      	blt.n	8006ee2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d99c      	bls.n	8006e1c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f16:	2b40      	cmp	r3, #64	; 0x40
 8006f18:	d112      	bne.n	8006f40 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f004 fd0c 	bl	800b938 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f28:	461a      	mov	r2, r3
 8006f2a:	2340      	movs	r3, #64	; 0x40
 8006f2c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f3e:	e01a      	b.n	8006f76 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d111      	bne.n	8006f76 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f838 	bl	8006fc8 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f60:	461a      	mov	r2, r3
 8006f62:	2301      	movs	r3, #1
 8006f64:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f84:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f98:	d112      	bne.n	8006fc0 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f81e 	bl	8006fdc <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa8:	461a      	mov	r2, r3
 8006faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fae:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8006fc0:	bf00      	nop
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8006ffe:	2300      	movs	r3, #0
 8007000:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b82      	cmp	r3, #130	; 0x82
 8007010:	d101      	bne.n	8007016 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8007012:	2302      	movs	r3, #2
 8007014:	e050      	b.n	80070b8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2282      	movs	r2, #130	; 0x82
 800701a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f003 031c 	and.w	r3, r3, #28
 800702c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8a1b      	ldrh	r3, [r3, #16]
 8007032:	02db      	lsls	r3, r3, #11
 8007034:	b29b      	uxth	r3, r3
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800703c:	897b      	ldrh	r3, [r7, #10]
 800703e:	019b      	lsls	r3, r3, #6
 8007040:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f023 0302 	bic.w	r3, r3, #2
 8007050:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f043 0301 	orr.w	r3, r3, #1
 8007058:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8007062:	f7fe f9c1 	bl	80053e8 <HAL_GetTick>
 8007066:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007068:	e015      	b.n	8007096 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800706a:	f7fe f9bd 	bl	80053e8 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007078:	d309      	bcc.n	800708e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e014      	b.n	80070b8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e4      	bne.n	800706a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	461a      	mov	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	460b      	mov	r3, r1
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b42      	cmp	r3, #66	; 0x42
 80070e0:	d101      	bne.n	80070e6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80070e2:	2302      	movs	r3, #2
 80070e4:	e04e      	b.n	8007184 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2242      	movs	r2, #66	; 0x42
 80070ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f003 031c 	and.w	r3, r3, #28
 80070fc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8a1b      	ldrh	r3, [r3, #16]
 8007102:	02db      	lsls	r3, r3, #11
 8007104:	b29b      	uxth	r3, r3
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800710c:	897b      	ldrh	r3, [r7, #10]
 800710e:	019b      	lsls	r3, r3, #6
 8007110:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	4313      	orrs	r3, r2
 8007118:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f043 0302 	orr.w	r3, r3, #2
 8007120:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f043 0301 	orr.w	r3, r3, #1
 8007128:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800713c:	f7fe f954 	bl	80053e8 <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007142:	e015      	b.n	8007170 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8007144:	f7fe f950 	bl	80053e8 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007152:	d309      	bcc.n	8007168 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e00d      	b.n	8007184 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1e4      	bne.n	8007144 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800719a:	2b01      	cmp	r3, #1
 800719c:	d101      	bne.n	80071a2 <HAL_ETH_Start+0x16>
 800719e:	2302      	movs	r3, #2
 80071a0:	e01f      	b.n	80071e2 <HAL_ETH_Start+0x56>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2202      	movs	r2, #2
 80071ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fb40 	bl	8007838 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fb77 	bl	80078ac <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fc06 	bl	80079d0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fbab 	bl	8007920 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fbd4 	bl	8007978 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d101      	bne.n	8007200 <HAL_ETH_Stop+0x16>
 80071fc:	2302      	movs	r3, #2
 80071fe:	e01f      	b.n	8007240 <HAL_ETH_Stop+0x56>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fb9b 	bl	800794c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fbc4 	bl	80079a4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fb62 	bl	80078e6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fbd4 	bl	80079d0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fb22 	bl	8007872 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800725c:	2b01      	cmp	r3, #1
 800725e:	d101      	bne.n	8007264 <HAL_ETH_ConfigMAC+0x1c>
 8007260:	2302      	movs	r3, #2
 8007262:	e0e4      	b.n	800742e <HAL_ETH_ConfigMAC+0x1e6>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 80b1 	beq.w	80073de <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	4b6c      	ldr	r3, [pc, #432]	; (8007438 <HAL_ETH_ConfigMAC+0x1f0>)
 8007288:	4013      	ands	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8007294:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800729a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80072a0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80072a6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80072ac:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80072b2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80072b8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80072be:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80072c4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80072ca:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80072d0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80072d6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	4313      	orrs	r3, r2
 80072dc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80072ee:	2001      	movs	r0, #1
 80072f0:	f7fe f886 	bl	8005400 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007304:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800730a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8007310:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8007316:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800731c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8007322:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800732e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007330:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800733a:	2001      	movs	r0, #1
 800733c:	f7fe f860 	bl	8005400 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007350:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800735a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	f64f 7341 	movw	r3, #65345	; 0xff41
 800736a:	4013      	ands	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007372:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8007378:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800737e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8007384:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800738a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8007390:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	4313      	orrs	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80073a8:	2001      	movs	r0, #1
 80073aa:	f7fe f829 	bl	8005400 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80073ce:	2001      	movs	r0, #1
 80073d0:	f7fe f816 	bl	8005400 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	61da      	str	r2, [r3, #28]
 80073dc:	e01e      	b.n	800741c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80073ec:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689a      	ldr	r2, [r3, #8]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800740e:	2001      	movs	r0, #1
 8007410:	f7fd fff6 	bl	8005400 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	ff20810f 	.word	0xff20810f

0800743c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b0b0      	sub	sp, #192	; 0xc0
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007458:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007460:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8007462:	2300      	movs	r3, #0
 8007464:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8007466:	2300      	movs	r3, #0
 8007468:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800746a:	2300      	movs	r3, #0
 800746c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800746e:	2300      	movs	r3, #0
 8007470:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8007472:	2300      	movs	r3, #0
 8007474:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8007476:	2300      	movs	r3, #0
 8007478:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d103      	bne.n	800748a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8007482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007486:	663b      	str	r3, [r7, #96]	; 0x60
 8007488:	e001      	b.n	800748e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800748a:	2300      	movs	r3, #0
 800748c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800748e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007492:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8007494:	2300      	movs	r3, #0
 8007496:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007498:	2300      	movs	r3, #0
 800749a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800749c:	2300      	movs	r3, #0
 800749e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80074a0:	2300      	movs	r3, #0
 80074a2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80074a4:	2300      	movs	r3, #0
 80074a6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80074a8:	2340      	movs	r3, #64	; 0x40
 80074aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80074ac:	2300      	movs	r3, #0
 80074ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80074b8:	2300      	movs	r3, #0
 80074ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80074be:	2300      	movs	r3, #0
 80074c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80074c4:	2300      	movs	r3, #0
 80074c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80074dc:	2380      	movs	r3, #128	; 0x80
 80074de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80074e2:	2300      	movs	r3, #0
 80074e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80074e8:	2300      	movs	r3, #0
 80074ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80074ee:	2300      	movs	r3, #0
 80074f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80074f4:	2300      	movs	r3, #0
 80074f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80074fa:	2300      	movs	r3, #0
 80074fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8007500:	2300      	movs	r3, #0
 8007502:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007510:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007514:	4baa      	ldr	r3, [pc, #680]	; (80077c0 <ETH_MACDMAConfig+0x384>)
 8007516:	4013      	ands	r3, r2
 8007518:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800751c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800751e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8007520:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8007522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8007524:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8007526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8007528:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800752e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8007530:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8007532:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8007534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8007536:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800753c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800753e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8007540:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8007542:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8007544:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8007546:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8007548:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800754a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800754c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800754e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8007550:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8007552:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007564:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007570:	2001      	movs	r0, #1
 8007572:	f7fd ff45 	bl	8005400 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800757e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007580:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8007582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007584:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8007586:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8007588:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800758a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800758e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8007590:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8007594:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8007596:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800759a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800759c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80075a0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80075a4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80075ac:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80075ae:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80075ba:	2001      	movs	r0, #1
 80075bc:	f7fd ff20 	bl	8005400 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80075c8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075d2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80075dc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80075e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80075ec:	f64f 7341 	movw	r3, #65345	; 0xff41
 80075f0:	4013      	ands	r3, r2
 80075f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80075f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075fa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80075fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8007600:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8007602:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8007606:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8007608:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800760c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800760e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8007612:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8007614:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8007618:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800761a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800761e:	4313      	orrs	r3, r2
 8007620:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800762c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8007638:	2001      	movs	r0, #1
 800763a:	f7fd fee1 	bl	8005400 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007646:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8007648:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800764c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007662:	2001      	movs	r0, #1
 8007664:	f7fd fecc 	bl	8005400 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007670:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8007672:	2300      	movs	r3, #0
 8007674:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8007676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800767a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800767c:	2300      	movs	r3, #0
 800767e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8007680:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007684:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007686:	2300      	movs	r3, #0
 8007688:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800768a:	2300      	movs	r3, #0
 800768c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800768e:	2300      	movs	r3, #0
 8007690:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007692:	2300      	movs	r3, #0
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8007696:	2304      	movs	r3, #4
 8007698:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800769a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800769e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80076a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80076a4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80076a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80076aa:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80076ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076b0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80076b2:	2380      	movs	r3, #128	; 0x80
 80076b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80076ba:	2300      	movs	r3, #0
 80076bc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80076cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80076d0:	4b3c      	ldr	r3, [pc, #240]	; (80077c4 <ETH_MACDMAConfig+0x388>)
 80076d2:	4013      	ands	r3, r2
 80076d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80076d8:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80076da:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80076dc:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80076de:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80076e0:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80076e2:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80076e4:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80076e6:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80076e8:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80076ea:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80076ec:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80076ee:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80076f0:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80076f4:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80076f8:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80076fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80076fe:	4313      	orrs	r3, r2
 8007700:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800770c:	461a      	mov	r2, r3
 800770e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007712:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007722:	2001      	movs	r0, #1
 8007724:	f7fd fe6c 	bl	8005400 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007730:	461a      	mov	r2, r3
 8007732:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007736:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8007738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800773c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800773e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8007740:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8007744:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8007746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8007748:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800774a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800774c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800774e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8007750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8007752:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800775c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007760:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007770:	2001      	movs	r0, #1
 8007772:	f7fd fe45 	bl	8005400 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800777e:	461a      	mov	r2, r3
 8007780:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007784:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d10d      	bne.n	80077aa <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	6812      	ldr	r2, [r2, #0]
 800779c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077a8:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	461a      	mov	r2, r3
 80077b0:	2100      	movs	r1, #0
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f808 	bl	80077c8 <ETH_MACAddressConfig>
}
 80077b8:	bf00      	nop
 80077ba:	37c0      	adds	r7, #192	; 0xc0
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	ff20810f 	.word	0xff20810f
 80077c4:	f8de3f23 	.word	0xf8de3f23

080077c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3305      	adds	r3, #5
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	021b      	lsls	r3, r3, #8
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	3204      	adds	r2, #4
 80077e0:	7812      	ldrb	r2, [r2, #0]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	4b11      	ldr	r3, [pc, #68]	; (8007830 <ETH_MACAddressConfig+0x68>)
 80077ea:	4413      	add	r3, r2
 80077ec:	461a      	mov	r2, r3
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	3303      	adds	r3, #3
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	061a      	lsls	r2, r3, #24
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3302      	adds	r3, #2
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	041b      	lsls	r3, r3, #16
 8007802:	431a      	orrs	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3301      	adds	r3, #1
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	021b      	lsls	r3, r3, #8
 800780c:	4313      	orrs	r3, r2
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	7812      	ldrb	r2, [r2, #0]
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	4b06      	ldr	r3, [pc, #24]	; (8007834 <ETH_MACAddressConfig+0x6c>)
 800781a:	4413      	add	r3, r2
 800781c:	461a      	mov	r2, r3
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	6013      	str	r3, [r2, #0]
}
 8007822:	bf00      	nop
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	40028040 	.word	0x40028040
 8007834:	40028044 	.word	0x40028044

08007838 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0208 	orr.w	r2, r2, #8
 8007852:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800785c:	2001      	movs	r0, #1
 800785e:	f000 f8dd 	bl	8007a1c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	601a      	str	r2, [r3, #0]
}
 800786a:	bf00      	nop
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0208 	bic.w	r2, r2, #8
 800788c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007896:	2001      	movs	r0, #1
 8007898:	f000 f8c0 	bl	8007a1c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	601a      	str	r2, [r3, #0]
}
 80078a4:	bf00      	nop
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0204 	orr.w	r2, r2, #4
 80078c6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80078d0:	2001      	movs	r0, #1
 80078d2:	f000 f8a3 	bl	8007a1c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	601a      	str	r2, [r3, #0]
}
 80078de:	bf00      	nop
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0204 	bic.w	r2, r2, #4
 8007900:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800790a:	2001      	movs	r0, #1
 800790c:	f000 f886 	bl	8007a1c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	601a      	str	r2, [r3, #0]
}
 8007918:	bf00      	nop
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800793a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800793e:	6193      	str	r3, [r2, #24]
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	6812      	ldr	r2, [r2, #0]
 8007962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007966:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800796a:	6193      	str	r3, [r2, #24]
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	6812      	ldr	r2, [r2, #0]
 800798e:	f043 0302 	orr.w	r3, r3, #2
 8007992:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007996:	6193      	str	r3, [r2, #24]
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	6812      	ldr	r2, [r2, #0]
 80079ba:	f023 0302 	bic.w	r3, r3, #2
 80079be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80079c2:	6193      	str	r3, [r2, #24]
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	6812      	ldr	r2, [r2, #0]
 80079ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80079f2:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007a00:	2001      	movs	r0, #1
 8007a02:	f000 f80b 	bl	8007a1c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a10:	6193      	str	r3, [r2, #24]
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007a24:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <ETH_Delay+0x38>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a0b      	ldr	r2, [pc, #44]	; (8007a58 <ETH_Delay+0x3c>)
 8007a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2e:	0a5b      	lsrs	r3, r3, #9
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	fb02 f303 	mul.w	r3, r2, r3
 8007a36:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8007a38:	bf00      	nop
  } 
  while (Delay --);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	1e5a      	subs	r2, r3, #1
 8007a3e:	60fa      	str	r2, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1f9      	bne.n	8007a38 <ETH_Delay+0x1c>
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	200002c4 	.word	0x200002c4
 8007a58:	10624dd3 	.word	0x10624dd3

08007a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b089      	sub	sp, #36	; 0x24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a72:	2300      	movs	r3, #0
 8007a74:	61fb      	str	r3, [r7, #28]
 8007a76:	e16b      	b.n	8007d50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007a78:	2201      	movs	r2, #1
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	f040 815a 	bne.w	8007d4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d005      	beq.n	8007aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d130      	bne.n	8007b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	2203      	movs	r2, #3
 8007aba:	fa02 f303 	lsl.w	r3, r2, r3
 8007abe:	43db      	mvns	r3, r3
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aec:	43db      	mvns	r3, r3
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	4013      	ands	r3, r2
 8007af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	091b      	lsrs	r3, r3, #4
 8007afa:	f003 0201 	and.w	r2, r3, #1
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	fa02 f303 	lsl.w	r3, r2, r3
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f003 0303 	and.w	r3, r3, #3
 8007b18:	2b03      	cmp	r3, #3
 8007b1a:	d017      	beq.n	8007b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	2203      	movs	r2, #3
 8007b28:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2c:	43db      	mvns	r3, r3
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	4013      	ands	r3, r2
 8007b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f003 0303 	and.w	r3, r3, #3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d123      	bne.n	8007ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	08da      	lsrs	r2, r3, #3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3208      	adds	r2, #8
 8007b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	f003 0307 	and.w	r3, r3, #7
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	220f      	movs	r2, #15
 8007b70:	fa02 f303 	lsl.w	r3, r2, r3
 8007b74:	43db      	mvns	r3, r3
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	691a      	ldr	r2, [r3, #16]
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	f003 0307 	and.w	r3, r3, #7
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	08da      	lsrs	r2, r3, #3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	3208      	adds	r2, #8
 8007b9a:	69b9      	ldr	r1, [r7, #24]
 8007b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	2203      	movs	r2, #3
 8007bac:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb0:	43db      	mvns	r3, r3
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	f003 0203 	and.w	r2, r3, #3
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 80b4 	beq.w	8007d4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	4b60      	ldr	r3, [pc, #384]	; (8007d68 <HAL_GPIO_Init+0x30c>)
 8007be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bea:	4a5f      	ldr	r2, [pc, #380]	; (8007d68 <HAL_GPIO_Init+0x30c>)
 8007bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8007bf2:	4b5d      	ldr	r3, [pc, #372]	; (8007d68 <HAL_GPIO_Init+0x30c>)
 8007bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007bfe:	4a5b      	ldr	r2, [pc, #364]	; (8007d6c <HAL_GPIO_Init+0x310>)
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	089b      	lsrs	r3, r3, #2
 8007c04:	3302      	adds	r3, #2
 8007c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	220f      	movs	r2, #15
 8007c16:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1a:	43db      	mvns	r3, r3
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a52      	ldr	r2, [pc, #328]	; (8007d70 <HAL_GPIO_Init+0x314>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d02b      	beq.n	8007c82 <HAL_GPIO_Init+0x226>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a51      	ldr	r2, [pc, #324]	; (8007d74 <HAL_GPIO_Init+0x318>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d025      	beq.n	8007c7e <HAL_GPIO_Init+0x222>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a50      	ldr	r2, [pc, #320]	; (8007d78 <HAL_GPIO_Init+0x31c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d01f      	beq.n	8007c7a <HAL_GPIO_Init+0x21e>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a4f      	ldr	r2, [pc, #316]	; (8007d7c <HAL_GPIO_Init+0x320>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d019      	beq.n	8007c76 <HAL_GPIO_Init+0x21a>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a4e      	ldr	r2, [pc, #312]	; (8007d80 <HAL_GPIO_Init+0x324>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d013      	beq.n	8007c72 <HAL_GPIO_Init+0x216>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a4d      	ldr	r2, [pc, #308]	; (8007d84 <HAL_GPIO_Init+0x328>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00d      	beq.n	8007c6e <HAL_GPIO_Init+0x212>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a4c      	ldr	r2, [pc, #304]	; (8007d88 <HAL_GPIO_Init+0x32c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d007      	beq.n	8007c6a <HAL_GPIO_Init+0x20e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a4b      	ldr	r2, [pc, #300]	; (8007d8c <HAL_GPIO_Init+0x330>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d101      	bne.n	8007c66 <HAL_GPIO_Init+0x20a>
 8007c62:	2307      	movs	r3, #7
 8007c64:	e00e      	b.n	8007c84 <HAL_GPIO_Init+0x228>
 8007c66:	2308      	movs	r3, #8
 8007c68:	e00c      	b.n	8007c84 <HAL_GPIO_Init+0x228>
 8007c6a:	2306      	movs	r3, #6
 8007c6c:	e00a      	b.n	8007c84 <HAL_GPIO_Init+0x228>
 8007c6e:	2305      	movs	r3, #5
 8007c70:	e008      	b.n	8007c84 <HAL_GPIO_Init+0x228>
 8007c72:	2304      	movs	r3, #4
 8007c74:	e006      	b.n	8007c84 <HAL_GPIO_Init+0x228>
 8007c76:	2303      	movs	r3, #3
 8007c78:	e004      	b.n	8007c84 <HAL_GPIO_Init+0x228>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e002      	b.n	8007c84 <HAL_GPIO_Init+0x228>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e000      	b.n	8007c84 <HAL_GPIO_Init+0x228>
 8007c82:	2300      	movs	r3, #0
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	f002 0203 	and.w	r2, r2, #3
 8007c8a:	0092      	lsls	r2, r2, #2
 8007c8c:	4093      	lsls	r3, r2
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c94:	4935      	ldr	r1, [pc, #212]	; (8007d6c <HAL_GPIO_Init+0x310>)
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	089b      	lsrs	r3, r3, #2
 8007c9a:	3302      	adds	r3, #2
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ca2:	4b3b      	ldr	r3, [pc, #236]	; (8007d90 <HAL_GPIO_Init+0x334>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	43db      	mvns	r3, r3
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d003      	beq.n	8007cc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007cc6:	4a32      	ldr	r2, [pc, #200]	; (8007d90 <HAL_GPIO_Init+0x334>)
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007ccc:	4b30      	ldr	r3, [pc, #192]	; (8007d90 <HAL_GPIO_Init+0x334>)
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	43db      	mvns	r3, r3
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007cf0:	4a27      	ldr	r2, [pc, #156]	; (8007d90 <HAL_GPIO_Init+0x334>)
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007cf6:	4b26      	ldr	r3, [pc, #152]	; (8007d90 <HAL_GPIO_Init+0x334>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	43db      	mvns	r3, r3
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	4013      	ands	r3, r2
 8007d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007d1a:	4a1d      	ldr	r2, [pc, #116]	; (8007d90 <HAL_GPIO_Init+0x334>)
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007d20:	4b1b      	ldr	r3, [pc, #108]	; (8007d90 <HAL_GPIO_Init+0x334>)
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	43db      	mvns	r3, r3
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007d44:	4a12      	ldr	r2, [pc, #72]	; (8007d90 <HAL_GPIO_Init+0x334>)
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	61fb      	str	r3, [r7, #28]
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	2b0f      	cmp	r3, #15
 8007d54:	f67f ae90 	bls.w	8007a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	3724      	adds	r7, #36	; 0x24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40023800 	.word	0x40023800
 8007d6c:	40013800 	.word	0x40013800
 8007d70:	40020000 	.word	0x40020000
 8007d74:	40020400 	.word	0x40020400
 8007d78:	40020800 	.word	0x40020800
 8007d7c:	40020c00 	.word	0x40020c00
 8007d80:	40021000 	.word	0x40021000
 8007d84:	40021400 	.word	0x40021400
 8007d88:	40021800 	.word	0x40021800
 8007d8c:	40021c00 	.word	0x40021c00
 8007d90:	40013c00 	.word	0x40013c00

08007d94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b087      	sub	sp, #28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007daa:	2300      	movs	r3, #0
 8007dac:	617b      	str	r3, [r7, #20]
 8007dae:	e0cd      	b.n	8007f4c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007db0:	2201      	movs	r2, #1
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	fa02 f303 	lsl.w	r3, r2, r3
 8007db8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	f040 80bd 	bne.w	8007f46 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007dcc:	4a65      	ldr	r2, [pc, #404]	; (8007f64 <HAL_GPIO_DeInit+0x1d0>)
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	089b      	lsrs	r3, r3, #2
 8007dd2:	3302      	adds	r3, #2
 8007dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f003 0303 	and.w	r3, r3, #3
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	220f      	movs	r2, #15
 8007de4:	fa02 f303 	lsl.w	r3, r2, r3
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	4013      	ands	r3, r2
 8007dec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a5d      	ldr	r2, [pc, #372]	; (8007f68 <HAL_GPIO_DeInit+0x1d4>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d02b      	beq.n	8007e4e <HAL_GPIO_DeInit+0xba>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a5c      	ldr	r2, [pc, #368]	; (8007f6c <HAL_GPIO_DeInit+0x1d8>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d025      	beq.n	8007e4a <HAL_GPIO_DeInit+0xb6>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a5b      	ldr	r2, [pc, #364]	; (8007f70 <HAL_GPIO_DeInit+0x1dc>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d01f      	beq.n	8007e46 <HAL_GPIO_DeInit+0xb2>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a5a      	ldr	r2, [pc, #360]	; (8007f74 <HAL_GPIO_DeInit+0x1e0>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d019      	beq.n	8007e42 <HAL_GPIO_DeInit+0xae>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a59      	ldr	r2, [pc, #356]	; (8007f78 <HAL_GPIO_DeInit+0x1e4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d013      	beq.n	8007e3e <HAL_GPIO_DeInit+0xaa>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a58      	ldr	r2, [pc, #352]	; (8007f7c <HAL_GPIO_DeInit+0x1e8>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d00d      	beq.n	8007e3a <HAL_GPIO_DeInit+0xa6>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a57      	ldr	r2, [pc, #348]	; (8007f80 <HAL_GPIO_DeInit+0x1ec>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d007      	beq.n	8007e36 <HAL_GPIO_DeInit+0xa2>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a56      	ldr	r2, [pc, #344]	; (8007f84 <HAL_GPIO_DeInit+0x1f0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d101      	bne.n	8007e32 <HAL_GPIO_DeInit+0x9e>
 8007e2e:	2307      	movs	r3, #7
 8007e30:	e00e      	b.n	8007e50 <HAL_GPIO_DeInit+0xbc>
 8007e32:	2308      	movs	r3, #8
 8007e34:	e00c      	b.n	8007e50 <HAL_GPIO_DeInit+0xbc>
 8007e36:	2306      	movs	r3, #6
 8007e38:	e00a      	b.n	8007e50 <HAL_GPIO_DeInit+0xbc>
 8007e3a:	2305      	movs	r3, #5
 8007e3c:	e008      	b.n	8007e50 <HAL_GPIO_DeInit+0xbc>
 8007e3e:	2304      	movs	r3, #4
 8007e40:	e006      	b.n	8007e50 <HAL_GPIO_DeInit+0xbc>
 8007e42:	2303      	movs	r3, #3
 8007e44:	e004      	b.n	8007e50 <HAL_GPIO_DeInit+0xbc>
 8007e46:	2302      	movs	r3, #2
 8007e48:	e002      	b.n	8007e50 <HAL_GPIO_DeInit+0xbc>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e000      	b.n	8007e50 <HAL_GPIO_DeInit+0xbc>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	f002 0203 	and.w	r2, r2, #3
 8007e56:	0092      	lsls	r2, r2, #2
 8007e58:	4093      	lsls	r3, r2
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d132      	bne.n	8007ec6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007e60:	4b49      	ldr	r3, [pc, #292]	; (8007f88 <HAL_GPIO_DeInit+0x1f4>)
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	43db      	mvns	r3, r3
 8007e68:	4947      	ldr	r1, [pc, #284]	; (8007f88 <HAL_GPIO_DeInit+0x1f4>)
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007e6e:	4b46      	ldr	r3, [pc, #280]	; (8007f88 <HAL_GPIO_DeInit+0x1f4>)
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	43db      	mvns	r3, r3
 8007e76:	4944      	ldr	r1, [pc, #272]	; (8007f88 <HAL_GPIO_DeInit+0x1f4>)
 8007e78:	4013      	ands	r3, r2
 8007e7a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007e7c:	4b42      	ldr	r3, [pc, #264]	; (8007f88 <HAL_GPIO_DeInit+0x1f4>)
 8007e7e:	689a      	ldr	r2, [r3, #8]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	43db      	mvns	r3, r3
 8007e84:	4940      	ldr	r1, [pc, #256]	; (8007f88 <HAL_GPIO_DeInit+0x1f4>)
 8007e86:	4013      	ands	r3, r2
 8007e88:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007e8a:	4b3f      	ldr	r3, [pc, #252]	; (8007f88 <HAL_GPIO_DeInit+0x1f4>)
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	43db      	mvns	r3, r3
 8007e92:	493d      	ldr	r1, [pc, #244]	; (8007f88 <HAL_GPIO_DeInit+0x1f4>)
 8007e94:	4013      	ands	r3, r2
 8007e96:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	220f      	movs	r2, #15
 8007ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007ea8:	4a2e      	ldr	r2, [pc, #184]	; (8007f64 <HAL_GPIO_DeInit+0x1d0>)
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	089b      	lsrs	r3, r3, #2
 8007eae:	3302      	adds	r3, #2
 8007eb0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	43da      	mvns	r2, r3
 8007eb8:	482a      	ldr	r0, [pc, #168]	; (8007f64 <HAL_GPIO_DeInit+0x1d0>)
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	089b      	lsrs	r3, r3, #2
 8007ebe:	400a      	ands	r2, r1
 8007ec0:	3302      	adds	r3, #2
 8007ec2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	005b      	lsls	r3, r3, #1
 8007ece:	2103      	movs	r1, #3
 8007ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed4:	43db      	mvns	r3, r3
 8007ed6:	401a      	ands	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	08da      	lsrs	r2, r3, #3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3208      	adds	r2, #8
 8007ee4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f003 0307 	and.w	r3, r3, #7
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	220f      	movs	r2, #15
 8007ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef6:	43db      	mvns	r3, r3
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	08d2      	lsrs	r2, r2, #3
 8007efc:	4019      	ands	r1, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	3208      	adds	r2, #8
 8007f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	2103      	movs	r1, #3
 8007f10:	fa01 f303 	lsl.w	r3, r1, r3
 8007f14:	43db      	mvns	r3, r3
 8007f16:	401a      	ands	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	2101      	movs	r1, #1
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	fa01 f303 	lsl.w	r3, r1, r3
 8007f28:	43db      	mvns	r3, r3
 8007f2a:	401a      	ands	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	2103      	movs	r1, #3
 8007f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3e:	43db      	mvns	r3, r3
 8007f40:	401a      	ands	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	617b      	str	r3, [r7, #20]
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2b0f      	cmp	r3, #15
 8007f50:	f67f af2e 	bls.w	8007db0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	371c      	adds	r7, #28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	40013800 	.word	0x40013800
 8007f68:	40020000 	.word	0x40020000
 8007f6c:	40020400 	.word	0x40020400
 8007f70:	40020800 	.word	0x40020800
 8007f74:	40020c00 	.word	0x40020c00
 8007f78:	40021000 	.word	0x40021000
 8007f7c:	40021400 	.word	0x40021400
 8007f80:	40021800 	.word	0x40021800
 8007f84:	40021c00 	.word	0x40021c00
 8007f88:	40013c00 	.word	0x40013c00

08007f8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	691a      	ldr	r2, [r3, #16]
 8007f9c:	887b      	ldrh	r3, [r7, #2]
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d002      	beq.n	8007faa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	73fb      	strb	r3, [r7, #15]
 8007fa8:	e001      	b.n	8007fae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007faa:	2300      	movs	r3, #0
 8007fac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	807b      	strh	r3, [r7, #2]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007fcc:	787b      	ldrb	r3, [r7, #1]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fd2:	887a      	ldrh	r2, [r7, #2]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007fd8:	e003      	b.n	8007fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007fda:	887b      	ldrh	r3, [r7, #2]
 8007fdc:	041a      	lsls	r2, r3, #16
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	619a      	str	r2, [r3, #24]
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
	...

08007ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e267      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d075      	beq.n	80080fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800800e:	4b88      	ldr	r3, [pc, #544]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 030c 	and.w	r3, r3, #12
 8008016:	2b04      	cmp	r3, #4
 8008018:	d00c      	beq.n	8008034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800801a:	4b85      	ldr	r3, [pc, #532]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008022:	2b08      	cmp	r3, #8
 8008024:	d112      	bne.n	800804c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008026:	4b82      	ldr	r3, [pc, #520]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800802e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008032:	d10b      	bne.n	800804c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008034:	4b7e      	ldr	r3, [pc, #504]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d05b      	beq.n	80080f8 <HAL_RCC_OscConfig+0x108>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d157      	bne.n	80080f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e242      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008054:	d106      	bne.n	8008064 <HAL_RCC_OscConfig+0x74>
 8008056:	4b76      	ldr	r3, [pc, #472]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a75      	ldr	r2, [pc, #468]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 800805c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008060:	6013      	str	r3, [r2, #0]
 8008062:	e01d      	b.n	80080a0 <HAL_RCC_OscConfig+0xb0>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800806c:	d10c      	bne.n	8008088 <HAL_RCC_OscConfig+0x98>
 800806e:	4b70      	ldr	r3, [pc, #448]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a6f      	ldr	r2, [pc, #444]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008078:	6013      	str	r3, [r2, #0]
 800807a:	4b6d      	ldr	r3, [pc, #436]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a6c      	ldr	r2, [pc, #432]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	e00b      	b.n	80080a0 <HAL_RCC_OscConfig+0xb0>
 8008088:	4b69      	ldr	r3, [pc, #420]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a68      	ldr	r2, [pc, #416]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 800808e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008092:	6013      	str	r3, [r2, #0]
 8008094:	4b66      	ldr	r3, [pc, #408]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a65      	ldr	r2, [pc, #404]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 800809a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800809e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d013      	beq.n	80080d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a8:	f7fd f99e 	bl	80053e8 <HAL_GetTick>
 80080ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080ae:	e008      	b.n	80080c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080b0:	f7fd f99a 	bl	80053e8 <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	2b64      	cmp	r3, #100	; 0x64
 80080bc:	d901      	bls.n	80080c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e207      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080c2:	4b5b      	ldr	r3, [pc, #364]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0f0      	beq.n	80080b0 <HAL_RCC_OscConfig+0xc0>
 80080ce:	e014      	b.n	80080fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d0:	f7fd f98a 	bl	80053e8 <HAL_GetTick>
 80080d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080d6:	e008      	b.n	80080ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080d8:	f7fd f986 	bl	80053e8 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b64      	cmp	r3, #100	; 0x64
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e1f3      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080ea:	4b51      	ldr	r3, [pc, #324]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1f0      	bne.n	80080d8 <HAL_RCC_OscConfig+0xe8>
 80080f6:	e000      	b.n	80080fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d063      	beq.n	80081ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008106:	4b4a      	ldr	r3, [pc, #296]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f003 030c 	and.w	r3, r3, #12
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00b      	beq.n	800812a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008112:	4b47      	ldr	r3, [pc, #284]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800811a:	2b08      	cmp	r3, #8
 800811c:	d11c      	bne.n	8008158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800811e:	4b44      	ldr	r3, [pc, #272]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d116      	bne.n	8008158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800812a:	4b41      	ldr	r3, [pc, #260]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d005      	beq.n	8008142 <HAL_RCC_OscConfig+0x152>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d001      	beq.n	8008142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e1c7      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008142:	4b3b      	ldr	r3, [pc, #236]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	4937      	ldr	r1, [pc, #220]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008152:	4313      	orrs	r3, r2
 8008154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008156:	e03a      	b.n	80081ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d020      	beq.n	80081a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008160:	4b34      	ldr	r3, [pc, #208]	; (8008234 <HAL_RCC_OscConfig+0x244>)
 8008162:	2201      	movs	r2, #1
 8008164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008166:	f7fd f93f 	bl	80053e8 <HAL_GetTick>
 800816a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800816c:	e008      	b.n	8008180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800816e:	f7fd f93b 	bl	80053e8 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d901      	bls.n	8008180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e1a8      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008180:	4b2b      	ldr	r3, [pc, #172]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0f0      	beq.n	800816e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800818c:	4b28      	ldr	r3, [pc, #160]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	00db      	lsls	r3, r3, #3
 800819a:	4925      	ldr	r1, [pc, #148]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 800819c:	4313      	orrs	r3, r2
 800819e:	600b      	str	r3, [r1, #0]
 80081a0:	e015      	b.n	80081ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081a2:	4b24      	ldr	r3, [pc, #144]	; (8008234 <HAL_RCC_OscConfig+0x244>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a8:	f7fd f91e 	bl	80053e8 <HAL_GetTick>
 80081ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081ae:	e008      	b.n	80081c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081b0:	f7fd f91a 	bl	80053e8 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e187      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081c2:	4b1b      	ldr	r3, [pc, #108]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f0      	bne.n	80081b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d036      	beq.n	8008248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d016      	beq.n	8008210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081e2:	4b15      	ldr	r3, [pc, #84]	; (8008238 <HAL_RCC_OscConfig+0x248>)
 80081e4:	2201      	movs	r2, #1
 80081e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e8:	f7fd f8fe 	bl	80053e8 <HAL_GetTick>
 80081ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081f0:	f7fd f8fa 	bl	80053e8 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e167      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008202:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <HAL_RCC_OscConfig+0x240>)
 8008204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0f0      	beq.n	80081f0 <HAL_RCC_OscConfig+0x200>
 800820e:	e01b      	b.n	8008248 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008210:	4b09      	ldr	r3, [pc, #36]	; (8008238 <HAL_RCC_OscConfig+0x248>)
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008216:	f7fd f8e7 	bl	80053e8 <HAL_GetTick>
 800821a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800821c:	e00e      	b.n	800823c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800821e:	f7fd f8e3 	bl	80053e8 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d907      	bls.n	800823c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e150      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
 8008230:	40023800 	.word	0x40023800
 8008234:	42470000 	.word	0x42470000
 8008238:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800823c:	4b88      	ldr	r3, [pc, #544]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 800823e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008240:	f003 0302 	and.w	r3, r3, #2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1ea      	bne.n	800821e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0304 	and.w	r3, r3, #4
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 8097 	beq.w	8008384 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008256:	2300      	movs	r3, #0
 8008258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800825a:	4b81      	ldr	r3, [pc, #516]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10f      	bne.n	8008286 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008266:	2300      	movs	r3, #0
 8008268:	60bb      	str	r3, [r7, #8]
 800826a:	4b7d      	ldr	r3, [pc, #500]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	4a7c      	ldr	r2, [pc, #496]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 8008270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008274:	6413      	str	r3, [r2, #64]	; 0x40
 8008276:	4b7a      	ldr	r3, [pc, #488]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800827e:	60bb      	str	r3, [r7, #8]
 8008280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008282:	2301      	movs	r3, #1
 8008284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008286:	4b77      	ldr	r3, [pc, #476]	; (8008464 <HAL_RCC_OscConfig+0x474>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828e:	2b00      	cmp	r3, #0
 8008290:	d118      	bne.n	80082c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008292:	4b74      	ldr	r3, [pc, #464]	; (8008464 <HAL_RCC_OscConfig+0x474>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a73      	ldr	r2, [pc, #460]	; (8008464 <HAL_RCC_OscConfig+0x474>)
 8008298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800829c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800829e:	f7fd f8a3 	bl	80053e8 <HAL_GetTick>
 80082a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082a4:	e008      	b.n	80082b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082a6:	f7fd f89f 	bl	80053e8 <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e10c      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082b8:	4b6a      	ldr	r3, [pc, #424]	; (8008464 <HAL_RCC_OscConfig+0x474>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0f0      	beq.n	80082a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d106      	bne.n	80082da <HAL_RCC_OscConfig+0x2ea>
 80082cc:	4b64      	ldr	r3, [pc, #400]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 80082ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d0:	4a63      	ldr	r2, [pc, #396]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 80082d2:	f043 0301 	orr.w	r3, r3, #1
 80082d6:	6713      	str	r3, [r2, #112]	; 0x70
 80082d8:	e01c      	b.n	8008314 <HAL_RCC_OscConfig+0x324>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	2b05      	cmp	r3, #5
 80082e0:	d10c      	bne.n	80082fc <HAL_RCC_OscConfig+0x30c>
 80082e2:	4b5f      	ldr	r3, [pc, #380]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 80082e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e6:	4a5e      	ldr	r2, [pc, #376]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 80082e8:	f043 0304 	orr.w	r3, r3, #4
 80082ec:	6713      	str	r3, [r2, #112]	; 0x70
 80082ee:	4b5c      	ldr	r3, [pc, #368]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 80082f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f2:	4a5b      	ldr	r2, [pc, #364]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 80082f4:	f043 0301 	orr.w	r3, r3, #1
 80082f8:	6713      	str	r3, [r2, #112]	; 0x70
 80082fa:	e00b      	b.n	8008314 <HAL_RCC_OscConfig+0x324>
 80082fc:	4b58      	ldr	r3, [pc, #352]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 80082fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008300:	4a57      	ldr	r2, [pc, #348]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 8008302:	f023 0301 	bic.w	r3, r3, #1
 8008306:	6713      	str	r3, [r2, #112]	; 0x70
 8008308:	4b55      	ldr	r3, [pc, #340]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 800830a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830c:	4a54      	ldr	r2, [pc, #336]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 800830e:	f023 0304 	bic.w	r3, r3, #4
 8008312:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d015      	beq.n	8008348 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800831c:	f7fd f864 	bl	80053e8 <HAL_GetTick>
 8008320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008322:	e00a      	b.n	800833a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008324:	f7fd f860 	bl	80053e8 <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008332:	4293      	cmp	r3, r2
 8008334:	d901      	bls.n	800833a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e0cb      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800833a:	4b49      	ldr	r3, [pc, #292]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 800833c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833e:	f003 0302 	and.w	r3, r3, #2
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0ee      	beq.n	8008324 <HAL_RCC_OscConfig+0x334>
 8008346:	e014      	b.n	8008372 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008348:	f7fd f84e 	bl	80053e8 <HAL_GetTick>
 800834c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800834e:	e00a      	b.n	8008366 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008350:	f7fd f84a 	bl	80053e8 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	f241 3288 	movw	r2, #5000	; 0x1388
 800835e:	4293      	cmp	r3, r2
 8008360:	d901      	bls.n	8008366 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e0b5      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008366:	4b3e      	ldr	r3, [pc, #248]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 8008368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1ee      	bne.n	8008350 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d105      	bne.n	8008384 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008378:	4b39      	ldr	r3, [pc, #228]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 800837a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837c:	4a38      	ldr	r2, [pc, #224]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 800837e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008382:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 80a1 	beq.w	80084d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800838e:	4b34      	ldr	r3, [pc, #208]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f003 030c 	and.w	r3, r3, #12
 8008396:	2b08      	cmp	r3, #8
 8008398:	d05c      	beq.n	8008454 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d141      	bne.n	8008426 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083a2:	4b31      	ldr	r3, [pc, #196]	; (8008468 <HAL_RCC_OscConfig+0x478>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083a8:	f7fd f81e 	bl	80053e8 <HAL_GetTick>
 80083ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ae:	e008      	b.n	80083c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083b0:	f7fd f81a 	bl	80053e8 <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d901      	bls.n	80083c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e087      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083c2:	4b27      	ldr	r3, [pc, #156]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1f0      	bne.n	80083b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69da      	ldr	r2, [r3, #28]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	431a      	orrs	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	019b      	lsls	r3, r3, #6
 80083de:	431a      	orrs	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e4:	085b      	lsrs	r3, r3, #1
 80083e6:	3b01      	subs	r3, #1
 80083e8:	041b      	lsls	r3, r3, #16
 80083ea:	431a      	orrs	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	061b      	lsls	r3, r3, #24
 80083f2:	491b      	ldr	r1, [pc, #108]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 80083f4:	4313      	orrs	r3, r2
 80083f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083f8:	4b1b      	ldr	r3, [pc, #108]	; (8008468 <HAL_RCC_OscConfig+0x478>)
 80083fa:	2201      	movs	r2, #1
 80083fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083fe:	f7fc fff3 	bl	80053e8 <HAL_GetTick>
 8008402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008404:	e008      	b.n	8008418 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008406:	f7fc ffef 	bl	80053e8 <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d901      	bls.n	8008418 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e05c      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008418:	4b11      	ldr	r3, [pc, #68]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0f0      	beq.n	8008406 <HAL_RCC_OscConfig+0x416>
 8008424:	e054      	b.n	80084d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008426:	4b10      	ldr	r3, [pc, #64]	; (8008468 <HAL_RCC_OscConfig+0x478>)
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800842c:	f7fc ffdc 	bl	80053e8 <HAL_GetTick>
 8008430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008432:	e008      	b.n	8008446 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008434:	f7fc ffd8 	bl	80053e8 <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	2b02      	cmp	r3, #2
 8008440:	d901      	bls.n	8008446 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e045      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008446:	4b06      	ldr	r3, [pc, #24]	; (8008460 <HAL_RCC_OscConfig+0x470>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1f0      	bne.n	8008434 <HAL_RCC_OscConfig+0x444>
 8008452:	e03d      	b.n	80084d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d107      	bne.n	800846c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e038      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
 8008460:	40023800 	.word	0x40023800
 8008464:	40007000 	.word	0x40007000
 8008468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800846c:	4b1b      	ldr	r3, [pc, #108]	; (80084dc <HAL_RCC_OscConfig+0x4ec>)
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d028      	beq.n	80084cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008484:	429a      	cmp	r2, r3
 8008486:	d121      	bne.n	80084cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008492:	429a      	cmp	r2, r3
 8008494:	d11a      	bne.n	80084cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800849c:	4013      	ands	r3, r2
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80084a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d111      	bne.n	80084cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	3b01      	subs	r3, #1
 80084b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d107      	bne.n	80084cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d001      	beq.n	80084d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e000      	b.n	80084d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	40023800 	.word	0x40023800

080084e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e0cc      	b.n	800868e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084f4:	4b68      	ldr	r3, [pc, #416]	; (8008698 <HAL_RCC_ClockConfig+0x1b8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0307 	and.w	r3, r3, #7
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d90c      	bls.n	800851c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008502:	4b65      	ldr	r3, [pc, #404]	; (8008698 <HAL_RCC_ClockConfig+0x1b8>)
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	b2d2      	uxtb	r2, r2
 8008508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800850a:	4b63      	ldr	r3, [pc, #396]	; (8008698 <HAL_RCC_ClockConfig+0x1b8>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d001      	beq.n	800851c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e0b8      	b.n	800868e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d020      	beq.n	800856a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	2b00      	cmp	r3, #0
 8008532:	d005      	beq.n	8008540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008534:	4b59      	ldr	r3, [pc, #356]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	4a58      	ldr	r2, [pc, #352]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 800853a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800853e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0308 	and.w	r3, r3, #8
 8008548:	2b00      	cmp	r3, #0
 800854a:	d005      	beq.n	8008558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800854c:	4b53      	ldr	r3, [pc, #332]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	4a52      	ldr	r2, [pc, #328]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008558:	4b50      	ldr	r3, [pc, #320]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	494d      	ldr	r1, [pc, #308]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008566:	4313      	orrs	r3, r2
 8008568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d044      	beq.n	8008600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d107      	bne.n	800858e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800857e:	4b47      	ldr	r3, [pc, #284]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d119      	bne.n	80085be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e07f      	b.n	800868e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d003      	beq.n	800859e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800859a:	2b03      	cmp	r3, #3
 800859c:	d107      	bne.n	80085ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800859e:	4b3f      	ldr	r3, [pc, #252]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d109      	bne.n	80085be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e06f      	b.n	800868e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085ae:	4b3b      	ldr	r3, [pc, #236]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e067      	b.n	800868e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085be:	4b37      	ldr	r3, [pc, #220]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f023 0203 	bic.w	r2, r3, #3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	4934      	ldr	r1, [pc, #208]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085d0:	f7fc ff0a 	bl	80053e8 <HAL_GetTick>
 80085d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085d6:	e00a      	b.n	80085ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085d8:	f7fc ff06 	bl	80053e8 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d901      	bls.n	80085ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e04f      	b.n	800868e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085ee:	4b2b      	ldr	r3, [pc, #172]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f003 020c 	and.w	r2, r3, #12
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d1eb      	bne.n	80085d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008600:	4b25      	ldr	r3, [pc, #148]	; (8008698 <HAL_RCC_ClockConfig+0x1b8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0307 	and.w	r3, r3, #7
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d20c      	bcs.n	8008628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800860e:	4b22      	ldr	r3, [pc, #136]	; (8008698 <HAL_RCC_ClockConfig+0x1b8>)
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	b2d2      	uxtb	r2, r2
 8008614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008616:	4b20      	ldr	r3, [pc, #128]	; (8008698 <HAL_RCC_ClockConfig+0x1b8>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0307 	and.w	r3, r3, #7
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	429a      	cmp	r2, r3
 8008622:	d001      	beq.n	8008628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e032      	b.n	800868e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d008      	beq.n	8008646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008634:	4b19      	ldr	r3, [pc, #100]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	4916      	ldr	r1, [pc, #88]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008642:	4313      	orrs	r3, r2
 8008644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0308 	and.w	r3, r3, #8
 800864e:	2b00      	cmp	r3, #0
 8008650:	d009      	beq.n	8008666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008652:	4b12      	ldr	r3, [pc, #72]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	00db      	lsls	r3, r3, #3
 8008660:	490e      	ldr	r1, [pc, #56]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 8008662:	4313      	orrs	r3, r2
 8008664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008666:	f000 f889 	bl	800877c <HAL_RCC_GetSysClockFreq>
 800866a:	4602      	mov	r2, r0
 800866c:	4b0b      	ldr	r3, [pc, #44]	; (800869c <HAL_RCC_ClockConfig+0x1bc>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	091b      	lsrs	r3, r3, #4
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	490a      	ldr	r1, [pc, #40]	; (80086a0 <HAL_RCC_ClockConfig+0x1c0>)
 8008678:	5ccb      	ldrb	r3, [r1, r3]
 800867a:	fa22 f303 	lsr.w	r3, r2, r3
 800867e:	4a09      	ldr	r2, [pc, #36]	; (80086a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008682:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <HAL_RCC_ClockConfig+0x1c8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4618      	mov	r0, r3
 8008688:	f7fc f9a8 	bl	80049dc <HAL_InitTick>

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	40023c00 	.word	0x40023c00
 800869c:	40023800 	.word	0x40023800
 80086a0:	080215b4 	.word	0x080215b4
 80086a4:	200002c4 	.word	0x200002c4
 80086a8:	200002c8 	.word	0x200002c8

080086ac <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08c      	sub	sp, #48	; 0x30
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d129      	bne.n	8008712 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80086be:	2300      	movs	r3, #0
 80086c0:	61bb      	str	r3, [r7, #24]
 80086c2:	4b2b      	ldr	r3, [pc, #172]	; (8008770 <HAL_RCC_MCOConfig+0xc4>)
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	4a2a      	ldr	r2, [pc, #168]	; (8008770 <HAL_RCC_MCOConfig+0xc4>)
 80086c8:	f043 0301 	orr.w	r3, r3, #1
 80086cc:	6313      	str	r3, [r2, #48]	; 0x30
 80086ce:	4b28      	ldr	r3, [pc, #160]	; (8008770 <HAL_RCC_MCOConfig+0xc4>)
 80086d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	61bb      	str	r3, [r7, #24]
 80086d8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80086da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086e0:	2302      	movs	r3, #2
 80086e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086e4:	2303      	movs	r3, #3
 80086e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e8:	2300      	movs	r3, #0
 80086ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80086ec:	2300      	movs	r3, #0
 80086ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80086f0:	f107 031c 	add.w	r3, r7, #28
 80086f4:	4619      	mov	r1, r3
 80086f6:	481f      	ldr	r0, [pc, #124]	; (8008774 <HAL_RCC_MCOConfig+0xc8>)
 80086f8:	f7ff f9b0 	bl	8007a5c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80086fc:	4b1c      	ldr	r3, [pc, #112]	; (8008770 <HAL_RCC_MCOConfig+0xc4>)
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8008704:	68b9      	ldr	r1, [r7, #8]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	430b      	orrs	r3, r1
 800870a:	4919      	ldr	r1, [pc, #100]	; (8008770 <HAL_RCC_MCOConfig+0xc4>)
 800870c:	4313      	orrs	r3, r2
 800870e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8008710:	e029      	b.n	8008766 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]
 8008716:	4b16      	ldr	r3, [pc, #88]	; (8008770 <HAL_RCC_MCOConfig+0xc4>)
 8008718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871a:	4a15      	ldr	r2, [pc, #84]	; (8008770 <HAL_RCC_MCOConfig+0xc4>)
 800871c:	f043 0304 	orr.w	r3, r3, #4
 8008720:	6313      	str	r3, [r2, #48]	; 0x30
 8008722:	4b13      	ldr	r3, [pc, #76]	; (8008770 <HAL_RCC_MCOConfig+0xc4>)
 8008724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800872e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008734:	2302      	movs	r3, #2
 8008736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008738:	2303      	movs	r3, #3
 800873a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800873c:	2300      	movs	r3, #0
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008740:	2300      	movs	r3, #0
 8008742:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008744:	f107 031c 	add.w	r3, r7, #28
 8008748:	4619      	mov	r1, r3
 800874a:	480b      	ldr	r0, [pc, #44]	; (8008778 <HAL_RCC_MCOConfig+0xcc>)
 800874c:	f7ff f986 	bl	8007a5c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8008750:	4b07      	ldr	r3, [pc, #28]	; (8008770 <HAL_RCC_MCOConfig+0xc4>)
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	00d9      	lsls	r1, r3, #3
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	430b      	orrs	r3, r1
 8008760:	4903      	ldr	r1, [pc, #12]	; (8008770 <HAL_RCC_MCOConfig+0xc4>)
 8008762:	4313      	orrs	r3, r2
 8008764:	608b      	str	r3, [r1, #8]
}
 8008766:	bf00      	nop
 8008768:	3730      	adds	r7, #48	; 0x30
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	40023800 	.word	0x40023800
 8008774:	40020000 	.word	0x40020000
 8008778:	40020800 	.word	0x40020800

0800877c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800877c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008780:	b090      	sub	sp, #64	; 0x40
 8008782:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	637b      	str	r3, [r7, #52]	; 0x34
 8008788:	2300      	movs	r3, #0
 800878a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800878c:	2300      	movs	r3, #0
 800878e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008790:	2300      	movs	r3, #0
 8008792:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008794:	4b59      	ldr	r3, [pc, #356]	; (80088fc <HAL_RCC_GetSysClockFreq+0x180>)
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f003 030c 	and.w	r3, r3, #12
 800879c:	2b08      	cmp	r3, #8
 800879e:	d00d      	beq.n	80087bc <HAL_RCC_GetSysClockFreq+0x40>
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	f200 80a1 	bhi.w	80088e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <HAL_RCC_GetSysClockFreq+0x34>
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	d003      	beq.n	80087b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80087ae:	e09b      	b.n	80088e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80087b0:	4b53      	ldr	r3, [pc, #332]	; (8008900 <HAL_RCC_GetSysClockFreq+0x184>)
 80087b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80087b4:	e09b      	b.n	80088ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80087b6:	4b53      	ldr	r3, [pc, #332]	; (8008904 <HAL_RCC_GetSysClockFreq+0x188>)
 80087b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80087ba:	e098      	b.n	80088ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087bc:	4b4f      	ldr	r3, [pc, #316]	; (80088fc <HAL_RCC_GetSysClockFreq+0x180>)
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087c6:	4b4d      	ldr	r3, [pc, #308]	; (80088fc <HAL_RCC_GetSysClockFreq+0x180>)
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d028      	beq.n	8008824 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087d2:	4b4a      	ldr	r3, [pc, #296]	; (80088fc <HAL_RCC_GetSysClockFreq+0x180>)
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	099b      	lsrs	r3, r3, #6
 80087d8:	2200      	movs	r2, #0
 80087da:	623b      	str	r3, [r7, #32]
 80087dc:	627a      	str	r2, [r7, #36]	; 0x24
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80087e4:	2100      	movs	r1, #0
 80087e6:	4b47      	ldr	r3, [pc, #284]	; (8008904 <HAL_RCC_GetSysClockFreq+0x188>)
 80087e8:	fb03 f201 	mul.w	r2, r3, r1
 80087ec:	2300      	movs	r3, #0
 80087ee:	fb00 f303 	mul.w	r3, r0, r3
 80087f2:	4413      	add	r3, r2
 80087f4:	4a43      	ldr	r2, [pc, #268]	; (8008904 <HAL_RCC_GetSysClockFreq+0x188>)
 80087f6:	fba0 1202 	umull	r1, r2, r0, r2
 80087fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087fc:	460a      	mov	r2, r1
 80087fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8008800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008802:	4413      	add	r3, r2
 8008804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008808:	2200      	movs	r2, #0
 800880a:	61bb      	str	r3, [r7, #24]
 800880c:	61fa      	str	r2, [r7, #28]
 800880e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008812:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008816:	f7f7 fd33 	bl	8000280 <__aeabi_uldivmod>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4613      	mov	r3, r2
 8008820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008822:	e053      	b.n	80088cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008824:	4b35      	ldr	r3, [pc, #212]	; (80088fc <HAL_RCC_GetSysClockFreq+0x180>)
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	099b      	lsrs	r3, r3, #6
 800882a:	2200      	movs	r2, #0
 800882c:	613b      	str	r3, [r7, #16]
 800882e:	617a      	str	r2, [r7, #20]
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008836:	f04f 0b00 	mov.w	fp, #0
 800883a:	4652      	mov	r2, sl
 800883c:	465b      	mov	r3, fp
 800883e:	f04f 0000 	mov.w	r0, #0
 8008842:	f04f 0100 	mov.w	r1, #0
 8008846:	0159      	lsls	r1, r3, #5
 8008848:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800884c:	0150      	lsls	r0, r2, #5
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	ebb2 080a 	subs.w	r8, r2, sl
 8008856:	eb63 090b 	sbc.w	r9, r3, fp
 800885a:	f04f 0200 	mov.w	r2, #0
 800885e:	f04f 0300 	mov.w	r3, #0
 8008862:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008866:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800886a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800886e:	ebb2 0408 	subs.w	r4, r2, r8
 8008872:	eb63 0509 	sbc.w	r5, r3, r9
 8008876:	f04f 0200 	mov.w	r2, #0
 800887a:	f04f 0300 	mov.w	r3, #0
 800887e:	00eb      	lsls	r3, r5, #3
 8008880:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008884:	00e2      	lsls	r2, r4, #3
 8008886:	4614      	mov	r4, r2
 8008888:	461d      	mov	r5, r3
 800888a:	eb14 030a 	adds.w	r3, r4, sl
 800888e:	603b      	str	r3, [r7, #0]
 8008890:	eb45 030b 	adc.w	r3, r5, fp
 8008894:	607b      	str	r3, [r7, #4]
 8008896:	f04f 0200 	mov.w	r2, #0
 800889a:	f04f 0300 	mov.w	r3, #0
 800889e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80088a2:	4629      	mov	r1, r5
 80088a4:	028b      	lsls	r3, r1, #10
 80088a6:	4621      	mov	r1, r4
 80088a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80088ac:	4621      	mov	r1, r4
 80088ae:	028a      	lsls	r2, r1, #10
 80088b0:	4610      	mov	r0, r2
 80088b2:	4619      	mov	r1, r3
 80088b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b6:	2200      	movs	r2, #0
 80088b8:	60bb      	str	r3, [r7, #8]
 80088ba:	60fa      	str	r2, [r7, #12]
 80088bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088c0:	f7f7 fcde 	bl	8000280 <__aeabi_uldivmod>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4613      	mov	r3, r2
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80088cc:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <HAL_RCC_GetSysClockFreq+0x180>)
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	0c1b      	lsrs	r3, r3, #16
 80088d2:	f003 0303 	and.w	r3, r3, #3
 80088d6:	3301      	adds	r3, #1
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80088dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80088e6:	e002      	b.n	80088ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088e8:	4b05      	ldr	r3, [pc, #20]	; (8008900 <HAL_RCC_GetSysClockFreq+0x184>)
 80088ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80088ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3740      	adds	r7, #64	; 0x40
 80088f4:	46bd      	mov	sp, r7
 80088f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088fa:	bf00      	nop
 80088fc:	40023800 	.word	0x40023800
 8008900:	00f42400 	.word	0x00f42400
 8008904:	017d7840 	.word	0x017d7840

08008908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008908:	b480      	push	{r7}
 800890a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800890c:	4b03      	ldr	r3, [pc, #12]	; (800891c <HAL_RCC_GetHCLKFreq+0x14>)
 800890e:	681b      	ldr	r3, [r3, #0]
}
 8008910:	4618      	mov	r0, r3
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	200002c4 	.word	0x200002c4

08008920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008924:	f7ff fff0 	bl	8008908 <HAL_RCC_GetHCLKFreq>
 8008928:	4602      	mov	r2, r0
 800892a:	4b05      	ldr	r3, [pc, #20]	; (8008940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	0a9b      	lsrs	r3, r3, #10
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	4903      	ldr	r1, [pc, #12]	; (8008944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008936:	5ccb      	ldrb	r3, [r1, r3]
 8008938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800893c:	4618      	mov	r0, r3
 800893e:	bd80      	pop	{r7, pc}
 8008940:	40023800 	.word	0x40023800
 8008944:	080215c4 	.word	0x080215c4

08008948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800894c:	f7ff ffdc 	bl	8008908 <HAL_RCC_GetHCLKFreq>
 8008950:	4602      	mov	r2, r0
 8008952:	4b05      	ldr	r3, [pc, #20]	; (8008968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	0b5b      	lsrs	r3, r3, #13
 8008958:	f003 0307 	and.w	r3, r3, #7
 800895c:	4903      	ldr	r1, [pc, #12]	; (800896c <HAL_RCC_GetPCLK2Freq+0x24>)
 800895e:	5ccb      	ldrb	r3, [r1, r3]
 8008960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008964:	4618      	mov	r0, r3
 8008966:	bd80      	pop	{r7, pc}
 8008968:	40023800 	.word	0x40023800
 800896c:	080215c4 	.word	0x080215c4

08008970 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	220f      	movs	r2, #15
 800897e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008980:	4b12      	ldr	r3, [pc, #72]	; (80089cc <HAL_RCC_GetClockConfig+0x5c>)
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f003 0203 	and.w	r2, r3, #3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800898c:	4b0f      	ldr	r3, [pc, #60]	; (80089cc <HAL_RCC_GetClockConfig+0x5c>)
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008998:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <HAL_RCC_GetClockConfig+0x5c>)
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80089a4:	4b09      	ldr	r3, [pc, #36]	; (80089cc <HAL_RCC_GetClockConfig+0x5c>)
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	08db      	lsrs	r3, r3, #3
 80089aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80089b2:	4b07      	ldr	r3, [pc, #28]	; (80089d0 <HAL_RCC_GetClockConfig+0x60>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0207 	and.w	r2, r3, #7
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	601a      	str	r2, [r3, #0]
}
 80089be:	bf00      	nop
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	40023800 	.word	0x40023800
 80089d0:	40023c00 	.word	0x40023c00

080089d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e07b      	b.n	8008ade <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d108      	bne.n	8008a00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089f6:	d009      	beq.n	8008a0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	61da      	str	r2, [r3, #28]
 80089fe:	e005      	b.n	8008a0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d106      	bne.n	8008a2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7fb fe1e 	bl	8004668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a54:	431a      	orrs	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	431a      	orrs	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a86:	431a      	orrs	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a90:	ea42 0103 	orr.w	r1, r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	0c1b      	lsrs	r3, r3, #16
 8008aaa:	f003 0104 	and.w	r1, r3, #4
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	f003 0210 	and.w	r2, r3, #16
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	69da      	ldr	r2, [r3, #28]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008acc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b088      	sub	sp, #32
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	603b      	str	r3, [r7, #0]
 8008af2:	4613      	mov	r3, r2
 8008af4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d101      	bne.n	8008b08 <HAL_SPI_Transmit+0x22>
 8008b04:	2302      	movs	r3, #2
 8008b06:	e126      	b.n	8008d56 <HAL_SPI_Transmit+0x270>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b10:	f7fc fc6a 	bl	80053e8 <HAL_GetTick>
 8008b14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008b16:	88fb      	ldrh	r3, [r7, #6]
 8008b18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d002      	beq.n	8008b2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008b26:	2302      	movs	r3, #2
 8008b28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b2a:	e10b      	b.n	8008d44 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <HAL_SPI_Transmit+0x52>
 8008b32:	88fb      	ldrh	r3, [r7, #6]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d102      	bne.n	8008b3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b3c:	e102      	b.n	8008d44 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2203      	movs	r2, #3
 8008b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	88fa      	ldrh	r2, [r7, #6]
 8008b56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	88fa      	ldrh	r2, [r7, #6]
 8008b5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b84:	d10f      	bne.n	8008ba6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ba4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb0:	2b40      	cmp	r3, #64	; 0x40
 8008bb2:	d007      	beq.n	8008bc4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bcc:	d14b      	bne.n	8008c66 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d002      	beq.n	8008bdc <HAL_SPI_Transmit+0xf6>
 8008bd6:	8afb      	ldrh	r3, [r7, #22]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d13e      	bne.n	8008c5a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be0:	881a      	ldrh	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bec:	1c9a      	adds	r2, r3, #2
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008c00:	e02b      	b.n	8008c5a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d112      	bne.n	8008c36 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c14:	881a      	ldrh	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c20:	1c9a      	adds	r2, r3, #2
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c34:	e011      	b.n	8008c5a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c36:	f7fc fbd7 	bl	80053e8 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d803      	bhi.n	8008c4e <HAL_SPI_Transmit+0x168>
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4c:	d102      	bne.n	8008c54 <HAL_SPI_Transmit+0x16e>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d102      	bne.n	8008c5a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c58:	e074      	b.n	8008d44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1ce      	bne.n	8008c02 <HAL_SPI_Transmit+0x11c>
 8008c64:	e04c      	b.n	8008d00 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <HAL_SPI_Transmit+0x18e>
 8008c6e:	8afb      	ldrh	r3, [r7, #22]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d140      	bne.n	8008cf6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	330c      	adds	r3, #12
 8008c7e:	7812      	ldrb	r2, [r2, #0]
 8008c80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	3b01      	subs	r3, #1
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008c9a:	e02c      	b.n	8008cf6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d113      	bne.n	8008cd2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	330c      	adds	r3, #12
 8008cb4:	7812      	ldrb	r2, [r2, #0]
 8008cb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	86da      	strh	r2, [r3, #54]	; 0x36
 8008cd0:	e011      	b.n	8008cf6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cd2:	f7fc fb89 	bl	80053e8 <HAL_GetTick>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	683a      	ldr	r2, [r7, #0]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d803      	bhi.n	8008cea <HAL_SPI_Transmit+0x204>
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce8:	d102      	bne.n	8008cf0 <HAL_SPI_Transmit+0x20a>
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d102      	bne.n	8008cf6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008cf4:	e026      	b.n	8008d44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1cd      	bne.n	8008c9c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f000 fbcb 	bl	80094a0 <SPI_EndRxTxTransaction>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2220      	movs	r2, #32
 8008d14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10a      	bne.n	8008d34 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d1e:	2300      	movs	r3, #0
 8008d20:	613b      	str	r3, [r7, #16]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	613b      	str	r3, [r7, #16]
 8008d32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	77fb      	strb	r3, [r7, #31]
 8008d40:	e000      	b.n	8008d44 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008d42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d54:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3720      	adds	r7, #32
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b088      	sub	sp, #32
 8008d62:	af02      	add	r7, sp, #8
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	603b      	str	r3, [r7, #0]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d7a:	d112      	bne.n	8008da2 <HAL_SPI_Receive+0x44>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10e      	bne.n	8008da2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2204      	movs	r2, #4
 8008d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008d8c:	88fa      	ldrh	r2, [r7, #6]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	4613      	mov	r3, r2
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 f8f1 	bl	8008f80 <HAL_SPI_TransmitReceive>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	e0ea      	b.n	8008f78 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d101      	bne.n	8008db0 <HAL_SPI_Receive+0x52>
 8008dac:	2302      	movs	r3, #2
 8008dae:	e0e3      	b.n	8008f78 <HAL_SPI_Receive+0x21a>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008db8:	f7fc fb16 	bl	80053e8 <HAL_GetTick>
 8008dbc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d002      	beq.n	8008dd0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008dca:	2302      	movs	r3, #2
 8008dcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008dce:	e0ca      	b.n	8008f66 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <HAL_SPI_Receive+0x7e>
 8008dd6:	88fb      	ldrh	r3, [r7, #6]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d102      	bne.n	8008de2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008de0:	e0c1      	b.n	8008f66 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2204      	movs	r2, #4
 8008de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	88fa      	ldrh	r2, [r7, #6]
 8008dfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	88fa      	ldrh	r2, [r7, #6]
 8008e00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e28:	d10f      	bne.n	8008e4a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e54:	2b40      	cmp	r3, #64	; 0x40
 8008e56:	d007      	beq.n	8008e68 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d162      	bne.n	8008f36 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008e70:	e02e      	b.n	8008ed0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d115      	bne.n	8008eac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f103 020c 	add.w	r2, r3, #12
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8c:	7812      	ldrb	r2, [r2, #0]
 8008e8e:	b2d2      	uxtb	r2, r2
 8008e90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008eaa:	e011      	b.n	8008ed0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eac:	f7fc fa9c 	bl	80053e8 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d803      	bhi.n	8008ec4 <HAL_SPI_Receive+0x166>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec2:	d102      	bne.n	8008eca <HAL_SPI_Receive+0x16c>
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d102      	bne.n	8008ed0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008ece:	e04a      	b.n	8008f66 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1cb      	bne.n	8008e72 <HAL_SPI_Receive+0x114>
 8008eda:	e031      	b.n	8008f40 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d113      	bne.n	8008f12 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	b292      	uxth	r2, r2
 8008ef6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efc:	1c9a      	adds	r2, r3, #2
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f10:	e011      	b.n	8008f36 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f12:	f7fc fa69 	bl	80053e8 <HAL_GetTick>
 8008f16:	4602      	mov	r2, r0
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d803      	bhi.n	8008f2a <HAL_SPI_Receive+0x1cc>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f28:	d102      	bne.n	8008f30 <HAL_SPI_Receive+0x1d2>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d102      	bne.n	8008f36 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008f34:	e017      	b.n	8008f66 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1cd      	bne.n	8008edc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f000 fa45 	bl	80093d4 <SPI_EndRxTransaction>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2220      	movs	r2, #32
 8008f54:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d002      	beq.n	8008f64 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	75fb      	strb	r3, [r7, #23]
 8008f62:	e000      	b.n	8008f66 <HAL_SPI_Receive+0x208>
  }

error :
 8008f64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b08c      	sub	sp, #48	; 0x30
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d101      	bne.n	8008fa6 <HAL_SPI_TransmitReceive+0x26>
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	e18a      	b.n	80092bc <HAL_SPI_TransmitReceive+0x33c>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fae:	f7fc fa1b 	bl	80053e8 <HAL_GetTick>
 8008fb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008fc4:	887b      	ldrh	r3, [r7, #2]
 8008fc6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008fc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d00f      	beq.n	8008ff0 <HAL_SPI_TransmitReceive+0x70>
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fd6:	d107      	bne.n	8008fe8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d103      	bne.n	8008fe8 <HAL_SPI_TransmitReceive+0x68>
 8008fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fe4:	2b04      	cmp	r3, #4
 8008fe6:	d003      	beq.n	8008ff0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008fe8:	2302      	movs	r3, #2
 8008fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008fee:	e15b      	b.n	80092a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d005      	beq.n	8009002 <HAL_SPI_TransmitReceive+0x82>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <HAL_SPI_TransmitReceive+0x82>
 8008ffc:	887b      	ldrh	r3, [r7, #2]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d103      	bne.n	800900a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009008:	e14e      	b.n	80092a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b04      	cmp	r3, #4
 8009014:	d003      	beq.n	800901e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2205      	movs	r2, #5
 800901a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	887a      	ldrh	r2, [r7, #2]
 800902e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	887a      	ldrh	r2, [r7, #2]
 8009034:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	887a      	ldrh	r2, [r7, #2]
 8009040:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	887a      	ldrh	r2, [r7, #2]
 8009046:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905e:	2b40      	cmp	r3, #64	; 0x40
 8009060:	d007      	beq.n	8009072 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009070:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800907a:	d178      	bne.n	800916e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <HAL_SPI_TransmitReceive+0x10a>
 8009084:	8b7b      	ldrh	r3, [r7, #26]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d166      	bne.n	8009158 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908e:	881a      	ldrh	r2, [r3, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909a:	1c9a      	adds	r2, r3, #2
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	3b01      	subs	r3, #1
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090ae:	e053      	b.n	8009158 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d11b      	bne.n	80090f6 <HAL_SPI_TransmitReceive+0x176>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d016      	beq.n	80090f6 <HAL_SPI_TransmitReceive+0x176>
 80090c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d113      	bne.n	80090f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d2:	881a      	ldrh	r2, [r3, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090de:	1c9a      	adds	r2, r3, #2
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	3b01      	subs	r3, #1
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090f2:	2300      	movs	r3, #0
 80090f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b01      	cmp	r3, #1
 8009102:	d119      	bne.n	8009138 <HAL_SPI_TransmitReceive+0x1b8>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009108:	b29b      	uxth	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d014      	beq.n	8009138 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68da      	ldr	r2, [r3, #12]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009118:	b292      	uxth	r2, r2
 800911a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009120:	1c9a      	adds	r2, r3, #2
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800912a:	b29b      	uxth	r3, r3
 800912c:	3b01      	subs	r3, #1
 800912e:	b29a      	uxth	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009134:	2301      	movs	r3, #1
 8009136:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009138:	f7fc f956 	bl	80053e8 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009144:	429a      	cmp	r2, r3
 8009146:	d807      	bhi.n	8009158 <HAL_SPI_TransmitReceive+0x1d8>
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914e:	d003      	beq.n	8009158 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009156:	e0a7      	b.n	80092a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800915c:	b29b      	uxth	r3, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1a6      	bne.n	80090b0 <HAL_SPI_TransmitReceive+0x130>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009166:	b29b      	uxth	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1a1      	bne.n	80090b0 <HAL_SPI_TransmitReceive+0x130>
 800916c:	e07c      	b.n	8009268 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <HAL_SPI_TransmitReceive+0x1fc>
 8009176:	8b7b      	ldrh	r3, [r7, #26]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d16b      	bne.n	8009254 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	330c      	adds	r3, #12
 8009186:	7812      	ldrb	r2, [r2, #0]
 8009188:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009198:	b29b      	uxth	r3, r3
 800919a:	3b01      	subs	r3, #1
 800919c:	b29a      	uxth	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091a2:	e057      	b.n	8009254 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d11c      	bne.n	80091ec <HAL_SPI_TransmitReceive+0x26c>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d017      	beq.n	80091ec <HAL_SPI_TransmitReceive+0x26c>
 80091bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d114      	bne.n	80091ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	330c      	adds	r3, #12
 80091cc:	7812      	ldrb	r2, [r2, #0]
 80091ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091de:	b29b      	uxth	r3, r3
 80091e0:	3b01      	subs	r3, #1
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d119      	bne.n	800922e <HAL_SPI_TransmitReceive+0x2ae>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091fe:	b29b      	uxth	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d014      	beq.n	800922e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68da      	ldr	r2, [r3, #12]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920e:	b2d2      	uxtb	r2, r2
 8009210:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009216:	1c5a      	adds	r2, r3, #1
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009220:	b29b      	uxth	r3, r3
 8009222:	3b01      	subs	r3, #1
 8009224:	b29a      	uxth	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800922a:	2301      	movs	r3, #1
 800922c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800922e:	f7fc f8db 	bl	80053e8 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800923a:	429a      	cmp	r2, r3
 800923c:	d803      	bhi.n	8009246 <HAL_SPI_TransmitReceive+0x2c6>
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009244:	d102      	bne.n	800924c <HAL_SPI_TransmitReceive+0x2cc>
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	2b00      	cmp	r3, #0
 800924a:	d103      	bne.n	8009254 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009252:	e029      	b.n	80092a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009258:	b29b      	uxth	r3, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1a2      	bne.n	80091a4 <HAL_SPI_TransmitReceive+0x224>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009262:	b29b      	uxth	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	d19d      	bne.n	80091a4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 f917 	bl	80094a0 <SPI_EndRxTxTransaction>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d006      	beq.n	8009286 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2220      	movs	r2, #32
 8009282:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009284:	e010      	b.n	80092a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10b      	bne.n	80092a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800928e:	2300      	movs	r3, #0
 8009290:	617b      	str	r3, [r7, #20]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	617b      	str	r3, [r7, #20]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	617b      	str	r3, [r7, #20]
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	e000      	b.n	80092a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80092a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80092b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3730      	adds	r7, #48	; 0x30
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b088      	sub	sp, #32
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	4613      	mov	r3, r2
 80092d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80092d4:	f7fc f888 	bl	80053e8 <HAL_GetTick>
 80092d8:	4602      	mov	r2, r0
 80092da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092dc:	1a9b      	subs	r3, r3, r2
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	4413      	add	r3, r2
 80092e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80092e4:	f7fc f880 	bl	80053e8 <HAL_GetTick>
 80092e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80092ea:	4b39      	ldr	r3, [pc, #228]	; (80093d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	015b      	lsls	r3, r3, #5
 80092f0:	0d1b      	lsrs	r3, r3, #20
 80092f2:	69fa      	ldr	r2, [r7, #28]
 80092f4:	fb02 f303 	mul.w	r3, r2, r3
 80092f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092fa:	e054      	b.n	80093a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009302:	d050      	beq.n	80093a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009304:	f7fc f870 	bl	80053e8 <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	69fa      	ldr	r2, [r7, #28]
 8009310:	429a      	cmp	r2, r3
 8009312:	d902      	bls.n	800931a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d13d      	bne.n	8009396 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009328:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009332:	d111      	bne.n	8009358 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800933c:	d004      	beq.n	8009348 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009346:	d107      	bne.n	8009358 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009360:	d10f      	bne.n	8009382 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009380:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e017      	b.n	80093c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800939c:	2300      	movs	r3, #0
 800939e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	4013      	ands	r3, r2
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	bf0c      	ite	eq
 80093b6:	2301      	moveq	r3, #1
 80093b8:	2300      	movne	r3, #0
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	461a      	mov	r2, r3
 80093be:	79fb      	ldrb	r3, [r7, #7]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d19b      	bne.n	80092fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3720      	adds	r7, #32
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	200002c4 	.word	0x200002c4

080093d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af02      	add	r7, sp, #8
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093e8:	d111      	bne.n	800940e <SPI_EndRxTransaction+0x3a>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093f2:	d004      	beq.n	80093fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093fc:	d107      	bne.n	800940e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800940c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009416:	d12a      	bne.n	800946e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009420:	d012      	beq.n	8009448 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	2200      	movs	r2, #0
 800942a:	2180      	movs	r1, #128	; 0x80
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f7ff ff49 	bl	80092c4 <SPI_WaitFlagStateUntilTimeout>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d02d      	beq.n	8009494 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943c:	f043 0220 	orr.w	r2, r3, #32
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	e026      	b.n	8009496 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2200      	movs	r2, #0
 8009450:	2101      	movs	r1, #1
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f7ff ff36 	bl	80092c4 <SPI_WaitFlagStateUntilTimeout>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d01a      	beq.n	8009494 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009462:	f043 0220 	orr.w	r2, r3, #32
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e013      	b.n	8009496 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2200      	movs	r2, #0
 8009476:	2101      	movs	r1, #1
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f7ff ff23 	bl	80092c4 <SPI_WaitFlagStateUntilTimeout>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d007      	beq.n	8009494 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009488:	f043 0220 	orr.w	r2, r3, #32
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e000      	b.n	8009496 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
	...

080094a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af02      	add	r7, sp, #8
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80094ac:	4b1b      	ldr	r3, [pc, #108]	; (800951c <SPI_EndRxTxTransaction+0x7c>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a1b      	ldr	r2, [pc, #108]	; (8009520 <SPI_EndRxTxTransaction+0x80>)
 80094b2:	fba2 2303 	umull	r2, r3, r2, r3
 80094b6:	0d5b      	lsrs	r3, r3, #21
 80094b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094bc:	fb02 f303 	mul.w	r3, r2, r3
 80094c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094ca:	d112      	bne.n	80094f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	2200      	movs	r2, #0
 80094d4:	2180      	movs	r1, #128	; 0x80
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f7ff fef4 	bl	80092c4 <SPI_WaitFlagStateUntilTimeout>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d016      	beq.n	8009510 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094e6:	f043 0220 	orr.w	r2, r3, #32
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e00f      	b.n	8009512 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00a      	beq.n	800950e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	3b01      	subs	r3, #1
 80094fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009508:	2b80      	cmp	r3, #128	; 0x80
 800950a:	d0f2      	beq.n	80094f2 <SPI_EndRxTxTransaction+0x52>
 800950c:	e000      	b.n	8009510 <SPI_EndRxTxTransaction+0x70>
        break;
 800950e:	bf00      	nop
  }

  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	200002c4 	.word	0x200002c4
 8009520:	165e9f81 	.word	0x165e9f81

08009524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e041      	b.n	80095ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d106      	bne.n	8009550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7fb f8d4 	bl	80046f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2202      	movs	r2, #2
 8009554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3304      	adds	r3, #4
 8009560:	4619      	mov	r1, r3
 8009562:	4610      	mov	r0, r2
 8009564:	f000 fafe 	bl	8009b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
	...

080095c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d001      	beq.n	80095dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e046      	b.n	800966a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a23      	ldr	r2, [pc, #140]	; (8009678 <HAL_TIM_Base_Start+0xb4>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d022      	beq.n	8009634 <HAL_TIM_Base_Start+0x70>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f6:	d01d      	beq.n	8009634 <HAL_TIM_Base_Start+0x70>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a1f      	ldr	r2, [pc, #124]	; (800967c <HAL_TIM_Base_Start+0xb8>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d018      	beq.n	8009634 <HAL_TIM_Base_Start+0x70>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a1e      	ldr	r2, [pc, #120]	; (8009680 <HAL_TIM_Base_Start+0xbc>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d013      	beq.n	8009634 <HAL_TIM_Base_Start+0x70>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a1c      	ldr	r2, [pc, #112]	; (8009684 <HAL_TIM_Base_Start+0xc0>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d00e      	beq.n	8009634 <HAL_TIM_Base_Start+0x70>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a1b      	ldr	r2, [pc, #108]	; (8009688 <HAL_TIM_Base_Start+0xc4>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d009      	beq.n	8009634 <HAL_TIM_Base_Start+0x70>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a19      	ldr	r2, [pc, #100]	; (800968c <HAL_TIM_Base_Start+0xc8>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d004      	beq.n	8009634 <HAL_TIM_Base_Start+0x70>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a18      	ldr	r2, [pc, #96]	; (8009690 <HAL_TIM_Base_Start+0xcc>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d111      	bne.n	8009658 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f003 0307 	and.w	r3, r3, #7
 800963e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b06      	cmp	r3, #6
 8009644:	d010      	beq.n	8009668 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f042 0201 	orr.w	r2, r2, #1
 8009654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009656:	e007      	b.n	8009668 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f042 0201 	orr.w	r2, r2, #1
 8009666:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	40010000 	.word	0x40010000
 800967c:	40000400 	.word	0x40000400
 8009680:	40000800 	.word	0x40000800
 8009684:	40000c00 	.word	0x40000c00
 8009688:	40010400 	.word	0x40010400
 800968c:	40014000 	.word	0x40014000
 8009690:	40001800 	.word	0x40001800

08009694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d001      	beq.n	80096ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e04e      	b.n	800974a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2202      	movs	r2, #2
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68da      	ldr	r2, [r3, #12]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f042 0201 	orr.w	r2, r2, #1
 80096c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a23      	ldr	r2, [pc, #140]	; (8009758 <HAL_TIM_Base_Start_IT+0xc4>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d022      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x80>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096d6:	d01d      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x80>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a1f      	ldr	r2, [pc, #124]	; (800975c <HAL_TIM_Base_Start_IT+0xc8>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d018      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x80>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a1e      	ldr	r2, [pc, #120]	; (8009760 <HAL_TIM_Base_Start_IT+0xcc>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d013      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x80>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a1c      	ldr	r2, [pc, #112]	; (8009764 <HAL_TIM_Base_Start_IT+0xd0>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d00e      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x80>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a1b      	ldr	r2, [pc, #108]	; (8009768 <HAL_TIM_Base_Start_IT+0xd4>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d009      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x80>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a19      	ldr	r2, [pc, #100]	; (800976c <HAL_TIM_Base_Start_IT+0xd8>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d004      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x80>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a18      	ldr	r2, [pc, #96]	; (8009770 <HAL_TIM_Base_Start_IT+0xdc>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d111      	bne.n	8009738 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f003 0307 	and.w	r3, r3, #7
 800971e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b06      	cmp	r3, #6
 8009724:	d010      	beq.n	8009748 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f042 0201 	orr.w	r2, r2, #1
 8009734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009736:	e007      	b.n	8009748 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f042 0201 	orr.w	r2, r2, #1
 8009746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	40010000 	.word	0x40010000
 800975c:	40000400 	.word	0x40000400
 8009760:	40000800 	.word	0x40000800
 8009764:	40000c00 	.word	0x40000c00
 8009768:	40010400 	.word	0x40010400
 800976c:	40014000 	.word	0x40014000
 8009770:	40001800 	.word	0x40001800

08009774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	f003 0302 	and.w	r3, r3, #2
 8009786:	2b02      	cmp	r3, #2
 8009788:	d122      	bne.n	80097d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	f003 0302 	and.w	r3, r3, #2
 8009794:	2b02      	cmp	r3, #2
 8009796:	d11b      	bne.n	80097d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f06f 0202 	mvn.w	r2, #2
 80097a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	f003 0303 	and.w	r3, r3, #3
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d003      	beq.n	80097be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f9b5 	bl	8009b26 <HAL_TIM_IC_CaptureCallback>
 80097bc:	e005      	b.n	80097ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f9a7 	bl	8009b12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f9b8 	bl	8009b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	f003 0304 	and.w	r3, r3, #4
 80097da:	2b04      	cmp	r3, #4
 80097dc:	d122      	bne.n	8009824 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	f003 0304 	and.w	r3, r3, #4
 80097e8:	2b04      	cmp	r3, #4
 80097ea:	d11b      	bne.n	8009824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f06f 0204 	mvn.w	r2, #4
 80097f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2202      	movs	r2, #2
 80097fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009806:	2b00      	cmp	r3, #0
 8009808:	d003      	beq.n	8009812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f98b 	bl	8009b26 <HAL_TIM_IC_CaptureCallback>
 8009810:	e005      	b.n	800981e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f97d 	bl	8009b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 f98e 	bl	8009b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	f003 0308 	and.w	r3, r3, #8
 800982e:	2b08      	cmp	r3, #8
 8009830:	d122      	bne.n	8009878 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	f003 0308 	and.w	r3, r3, #8
 800983c:	2b08      	cmp	r3, #8
 800983e:	d11b      	bne.n	8009878 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f06f 0208 	mvn.w	r2, #8
 8009848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2204      	movs	r2, #4
 800984e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	69db      	ldr	r3, [r3, #28]
 8009856:	f003 0303 	and.w	r3, r3, #3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f961 	bl	8009b26 <HAL_TIM_IC_CaptureCallback>
 8009864:	e005      	b.n	8009872 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f953 	bl	8009b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f964 	bl	8009b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	f003 0310 	and.w	r3, r3, #16
 8009882:	2b10      	cmp	r3, #16
 8009884:	d122      	bne.n	80098cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	2b10      	cmp	r3, #16
 8009892:	d11b      	bne.n	80098cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f06f 0210 	mvn.w	r2, #16
 800989c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2208      	movs	r2, #8
 80098a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	69db      	ldr	r3, [r3, #28]
 80098aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f937 	bl	8009b26 <HAL_TIM_IC_CaptureCallback>
 80098b8:	e005      	b.n	80098c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f929 	bl	8009b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f93a 	bl	8009b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d10e      	bne.n	80098f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d107      	bne.n	80098f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f06f 0201 	mvn.w	r2, #1
 80098f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7f9 fcd2 	bl	800329c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009902:	2b80      	cmp	r3, #128	; 0x80
 8009904:	d10e      	bne.n	8009924 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009910:	2b80      	cmp	r3, #128	; 0x80
 8009912:	d107      	bne.n	8009924 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800991c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fae0 	bl	8009ee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800992e:	2b40      	cmp	r3, #64	; 0x40
 8009930:	d10e      	bne.n	8009950 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993c:	2b40      	cmp	r3, #64	; 0x40
 800993e:	d107      	bne.n	8009950 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f8ff 	bl	8009b4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	2b20      	cmp	r3, #32
 800995c:	d10e      	bne.n	800997c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	f003 0320 	and.w	r3, r3, #32
 8009968:	2b20      	cmp	r3, #32
 800996a:	d107      	bne.n	800997c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f06f 0220 	mvn.w	r2, #32
 8009974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 faaa 	bl	8009ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009998:	2b01      	cmp	r3, #1
 800999a:	d101      	bne.n	80099a0 <HAL_TIM_ConfigClockSource+0x1c>
 800999c:	2302      	movs	r3, #2
 800999e:	e0b4      	b.n	8009b0a <HAL_TIM_ConfigClockSource+0x186>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2202      	movs	r2, #2
 80099ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80099be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099d8:	d03e      	beq.n	8009a58 <HAL_TIM_ConfigClockSource+0xd4>
 80099da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099de:	f200 8087 	bhi.w	8009af0 <HAL_TIM_ConfigClockSource+0x16c>
 80099e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099e6:	f000 8086 	beq.w	8009af6 <HAL_TIM_ConfigClockSource+0x172>
 80099ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ee:	d87f      	bhi.n	8009af0 <HAL_TIM_ConfigClockSource+0x16c>
 80099f0:	2b70      	cmp	r3, #112	; 0x70
 80099f2:	d01a      	beq.n	8009a2a <HAL_TIM_ConfigClockSource+0xa6>
 80099f4:	2b70      	cmp	r3, #112	; 0x70
 80099f6:	d87b      	bhi.n	8009af0 <HAL_TIM_ConfigClockSource+0x16c>
 80099f8:	2b60      	cmp	r3, #96	; 0x60
 80099fa:	d050      	beq.n	8009a9e <HAL_TIM_ConfigClockSource+0x11a>
 80099fc:	2b60      	cmp	r3, #96	; 0x60
 80099fe:	d877      	bhi.n	8009af0 <HAL_TIM_ConfigClockSource+0x16c>
 8009a00:	2b50      	cmp	r3, #80	; 0x50
 8009a02:	d03c      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0xfa>
 8009a04:	2b50      	cmp	r3, #80	; 0x50
 8009a06:	d873      	bhi.n	8009af0 <HAL_TIM_ConfigClockSource+0x16c>
 8009a08:	2b40      	cmp	r3, #64	; 0x40
 8009a0a:	d058      	beq.n	8009abe <HAL_TIM_ConfigClockSource+0x13a>
 8009a0c:	2b40      	cmp	r3, #64	; 0x40
 8009a0e:	d86f      	bhi.n	8009af0 <HAL_TIM_ConfigClockSource+0x16c>
 8009a10:	2b30      	cmp	r3, #48	; 0x30
 8009a12:	d064      	beq.n	8009ade <HAL_TIM_ConfigClockSource+0x15a>
 8009a14:	2b30      	cmp	r3, #48	; 0x30
 8009a16:	d86b      	bhi.n	8009af0 <HAL_TIM_ConfigClockSource+0x16c>
 8009a18:	2b20      	cmp	r3, #32
 8009a1a:	d060      	beq.n	8009ade <HAL_TIM_ConfigClockSource+0x15a>
 8009a1c:	2b20      	cmp	r3, #32
 8009a1e:	d867      	bhi.n	8009af0 <HAL_TIM_ConfigClockSource+0x16c>
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d05c      	beq.n	8009ade <HAL_TIM_ConfigClockSource+0x15a>
 8009a24:	2b10      	cmp	r3, #16
 8009a26:	d05a      	beq.n	8009ade <HAL_TIM_ConfigClockSource+0x15a>
 8009a28:	e062      	b.n	8009af0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6818      	ldr	r0, [r3, #0]
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	6899      	ldr	r1, [r3, #8]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	685a      	ldr	r2, [r3, #4]
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	f000 f9ad 	bl	8009d98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	609a      	str	r2, [r3, #8]
      break;
 8009a56:	e04f      	b.n	8009af8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6818      	ldr	r0, [r3, #0]
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	6899      	ldr	r1, [r3, #8]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	f000 f996 	bl	8009d98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	689a      	ldr	r2, [r3, #8]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a7a:	609a      	str	r2, [r3, #8]
      break;
 8009a7c:	e03c      	b.n	8009af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6818      	ldr	r0, [r3, #0]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	6859      	ldr	r1, [r3, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f000 f90a 	bl	8009ca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2150      	movs	r1, #80	; 0x50
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 f963 	bl	8009d62 <TIM_ITRx_SetConfig>
      break;
 8009a9c:	e02c      	b.n	8009af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6818      	ldr	r0, [r3, #0]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	6859      	ldr	r1, [r3, #4]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	f000 f929 	bl	8009d02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2160      	movs	r1, #96	; 0x60
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 f953 	bl	8009d62 <TIM_ITRx_SetConfig>
      break;
 8009abc:	e01c      	b.n	8009af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6818      	ldr	r0, [r3, #0]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	6859      	ldr	r1, [r3, #4]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	461a      	mov	r2, r3
 8009acc:	f000 f8ea 	bl	8009ca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2140      	movs	r1, #64	; 0x40
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 f943 	bl	8009d62 <TIM_ITRx_SetConfig>
      break;
 8009adc:	e00c      	b.n	8009af8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4610      	mov	r0, r2
 8009aea:	f000 f93a 	bl	8009d62 <TIM_ITRx_SetConfig>
      break;
 8009aee:	e003      	b.n	8009af8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	73fb      	strb	r3, [r7, #15]
      break;
 8009af4:	e000      	b.n	8009af8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b083      	sub	sp, #12
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b1a:	bf00      	nop
 8009b1c:	370c      	adds	r7, #12
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b083      	sub	sp, #12
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b2e:	bf00      	nop
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b083      	sub	sp, #12
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b42:	bf00      	nop
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr

08009b4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b4e:	b480      	push	{r7}
 8009b50:	b083      	sub	sp, #12
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b56:	bf00      	nop
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
	...

08009b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a40      	ldr	r2, [pc, #256]	; (8009c78 <TIM_Base_SetConfig+0x114>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d013      	beq.n	8009ba4 <TIM_Base_SetConfig+0x40>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b82:	d00f      	beq.n	8009ba4 <TIM_Base_SetConfig+0x40>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a3d      	ldr	r2, [pc, #244]	; (8009c7c <TIM_Base_SetConfig+0x118>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d00b      	beq.n	8009ba4 <TIM_Base_SetConfig+0x40>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a3c      	ldr	r2, [pc, #240]	; (8009c80 <TIM_Base_SetConfig+0x11c>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d007      	beq.n	8009ba4 <TIM_Base_SetConfig+0x40>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a3b      	ldr	r2, [pc, #236]	; (8009c84 <TIM_Base_SetConfig+0x120>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d003      	beq.n	8009ba4 <TIM_Base_SetConfig+0x40>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a3a      	ldr	r2, [pc, #232]	; (8009c88 <TIM_Base_SetConfig+0x124>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d108      	bne.n	8009bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a2f      	ldr	r2, [pc, #188]	; (8009c78 <TIM_Base_SetConfig+0x114>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d02b      	beq.n	8009c16 <TIM_Base_SetConfig+0xb2>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bc4:	d027      	beq.n	8009c16 <TIM_Base_SetConfig+0xb2>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a2c      	ldr	r2, [pc, #176]	; (8009c7c <TIM_Base_SetConfig+0x118>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d023      	beq.n	8009c16 <TIM_Base_SetConfig+0xb2>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a2b      	ldr	r2, [pc, #172]	; (8009c80 <TIM_Base_SetConfig+0x11c>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d01f      	beq.n	8009c16 <TIM_Base_SetConfig+0xb2>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a2a      	ldr	r2, [pc, #168]	; (8009c84 <TIM_Base_SetConfig+0x120>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d01b      	beq.n	8009c16 <TIM_Base_SetConfig+0xb2>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a29      	ldr	r2, [pc, #164]	; (8009c88 <TIM_Base_SetConfig+0x124>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d017      	beq.n	8009c16 <TIM_Base_SetConfig+0xb2>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a28      	ldr	r2, [pc, #160]	; (8009c8c <TIM_Base_SetConfig+0x128>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d013      	beq.n	8009c16 <TIM_Base_SetConfig+0xb2>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a27      	ldr	r2, [pc, #156]	; (8009c90 <TIM_Base_SetConfig+0x12c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d00f      	beq.n	8009c16 <TIM_Base_SetConfig+0xb2>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a26      	ldr	r2, [pc, #152]	; (8009c94 <TIM_Base_SetConfig+0x130>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d00b      	beq.n	8009c16 <TIM_Base_SetConfig+0xb2>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a25      	ldr	r2, [pc, #148]	; (8009c98 <TIM_Base_SetConfig+0x134>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d007      	beq.n	8009c16 <TIM_Base_SetConfig+0xb2>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a24      	ldr	r2, [pc, #144]	; (8009c9c <TIM_Base_SetConfig+0x138>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d003      	beq.n	8009c16 <TIM_Base_SetConfig+0xb2>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a23      	ldr	r2, [pc, #140]	; (8009ca0 <TIM_Base_SetConfig+0x13c>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d108      	bne.n	8009c28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	689a      	ldr	r2, [r3, #8]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a0a      	ldr	r2, [pc, #40]	; (8009c78 <TIM_Base_SetConfig+0x114>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d003      	beq.n	8009c5c <TIM_Base_SetConfig+0xf8>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a0c      	ldr	r2, [pc, #48]	; (8009c88 <TIM_Base_SetConfig+0x124>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d103      	bne.n	8009c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	691a      	ldr	r2, [r3, #16]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	615a      	str	r2, [r3, #20]
}
 8009c6a:	bf00      	nop
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	40010000 	.word	0x40010000
 8009c7c:	40000400 	.word	0x40000400
 8009c80:	40000800 	.word	0x40000800
 8009c84:	40000c00 	.word	0x40000c00
 8009c88:	40010400 	.word	0x40010400
 8009c8c:	40014000 	.word	0x40014000
 8009c90:	40014400 	.word	0x40014400
 8009c94:	40014800 	.word	0x40014800
 8009c98:	40001800 	.word	0x40001800
 8009c9c:	40001c00 	.word	0x40001c00
 8009ca0:	40002000 	.word	0x40002000

08009ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b087      	sub	sp, #28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6a1b      	ldr	r3, [r3, #32]
 8009cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	f023 0201 	bic.w	r2, r3, #1
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	011b      	lsls	r3, r3, #4
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	f023 030a 	bic.w	r3, r3, #10
 8009ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	621a      	str	r2, [r3, #32]
}
 8009cf6:	bf00      	nop
 8009cf8:	371c      	adds	r7, #28
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b087      	sub	sp, #28
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	60f8      	str	r0, [r7, #12]
 8009d0a:	60b9      	str	r1, [r7, #8]
 8009d0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	f023 0210 	bic.w	r2, r3, #16
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6a1b      	ldr	r3, [r3, #32]
 8009d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	031b      	lsls	r3, r3, #12
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	011b      	lsls	r3, r3, #4
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	621a      	str	r2, [r3, #32]
}
 8009d56:	bf00      	nop
 8009d58:	371c      	adds	r7, #28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b085      	sub	sp, #20
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	f043 0307 	orr.w	r3, r3, #7
 8009d84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	609a      	str	r2, [r3, #8]
}
 8009d8c:	bf00      	nop
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	021a      	lsls	r2, r3, #8
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	431a      	orrs	r2, r3
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	609a      	str	r2, [r3, #8]
}
 8009dcc:	bf00      	nop
 8009dce:	371c      	adds	r7, #28
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d101      	bne.n	8009df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dec:	2302      	movs	r3, #2
 8009dee:	e05a      	b.n	8009ea6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a21      	ldr	r2, [pc, #132]	; (8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d022      	beq.n	8009e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e3c:	d01d      	beq.n	8009e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a1d      	ldr	r2, [pc, #116]	; (8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d018      	beq.n	8009e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a1b      	ldr	r2, [pc, #108]	; (8009ebc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d013      	beq.n	8009e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a1a      	ldr	r2, [pc, #104]	; (8009ec0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d00e      	beq.n	8009e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a18      	ldr	r2, [pc, #96]	; (8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d009      	beq.n	8009e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a17      	ldr	r2, [pc, #92]	; (8009ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d004      	beq.n	8009e7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a15      	ldr	r2, [pc, #84]	; (8009ecc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d10c      	bne.n	8009e94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	68ba      	ldr	r2, [r7, #8]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	40010000 	.word	0x40010000
 8009eb8:	40000400 	.word	0x40000400
 8009ebc:	40000800 	.word	0x40000800
 8009ec0:	40000c00 	.word	0x40000c00
 8009ec4:	40010400 	.word	0x40010400
 8009ec8:	40014000 	.word	0x40014000
 8009ecc:	40001800 	.word	0x40001800

08009ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e03f      	b.n	8009f8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d106      	bne.n	8009f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7fa fc28 	bl	8004774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2224      	movs	r2, #36	; 0x24
 8009f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68da      	ldr	r2, [r3, #12]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 ffc7 	bl	800aed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	691a      	ldr	r2, [r3, #16]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	695a      	ldr	r2, [r3, #20]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68da      	ldr	r2, [r3, #12]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2220      	movs	r2, #32
 8009f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b082      	sub	sp, #8
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d101      	bne.n	8009fa4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e021      	b.n	8009fe8 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2224      	movs	r2, #36	; 0x24
 8009fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68da      	ldr	r2, [r3, #12]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fba:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7fa fccb 	bl	8004958 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08a      	sub	sp, #40	; 0x28
 8009ff4:	af02      	add	r7, sp, #8
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	603b      	str	r3, [r7, #0]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a000:	2300      	movs	r3, #0
 800a002:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b20      	cmp	r3, #32
 800a00e:	d17c      	bne.n	800a10a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d002      	beq.n	800a01c <HAL_UART_Transmit+0x2c>
 800a016:	88fb      	ldrh	r3, [r7, #6]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e075      	b.n	800a10c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a026:	2b01      	cmp	r3, #1
 800a028:	d101      	bne.n	800a02e <HAL_UART_Transmit+0x3e>
 800a02a:	2302      	movs	r3, #2
 800a02c:	e06e      	b.n	800a10c <HAL_UART_Transmit+0x11c>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2201      	movs	r2, #1
 800a032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2221      	movs	r2, #33	; 0x21
 800a040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a044:	f7fb f9d0 	bl	80053e8 <HAL_GetTick>
 800a048:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	88fa      	ldrh	r2, [r7, #6]
 800a04e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	88fa      	ldrh	r2, [r7, #6]
 800a054:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a05e:	d108      	bne.n	800a072 <HAL_UART_Transmit+0x82>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d104      	bne.n	800a072 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a068:	2300      	movs	r3, #0
 800a06a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	61bb      	str	r3, [r7, #24]
 800a070:	e003      	b.n	800a07a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a076:	2300      	movs	r3, #0
 800a078:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a082:	e02a      	b.n	800a0da <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2200      	movs	r2, #0
 800a08c:	2180      	movs	r1, #128	; 0x80
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f000 fc54 	bl	800a93c <UART_WaitOnFlagUntilTimeout>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a09a:	2303      	movs	r3, #3
 800a09c:	e036      	b.n	800a10c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10b      	bne.n	800a0bc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	881b      	ldrh	r3, [r3, #0]
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0b2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	3302      	adds	r3, #2
 800a0b8:	61bb      	str	r3, [r7, #24]
 800a0ba:	e007      	b.n	800a0cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	781a      	ldrb	r2, [r3, #0]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1cf      	bne.n	800a084 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	2140      	movs	r1, #64	; 0x40
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 fc24 	bl	800a93c <UART_WaitOnFlagUntilTimeout>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	e006      	b.n	800a10c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2220      	movs	r2, #32
 800a102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	e000      	b.n	800a10c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a10a:	2302      	movs	r3, #2
  }
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3720      	adds	r7, #32
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08c      	sub	sp, #48	; 0x30
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	4613      	mov	r3, r2
 800a120:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b20      	cmp	r3, #32
 800a12c:	d152      	bne.n	800a1d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a134:	88fb      	ldrh	r3, [r7, #6]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e04b      	b.n	800a1d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a144:	2b01      	cmp	r3, #1
 800a146:	d101      	bne.n	800a14c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800a148:	2302      	movs	r3, #2
 800a14a:	e044      	b.n	800a1d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2201      	movs	r2, #1
 800a158:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a15a:	88fb      	ldrh	r3, [r7, #6]
 800a15c:	461a      	mov	r2, r3
 800a15e:	68b9      	ldr	r1, [r7, #8]
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f000 fc59 	bl	800aa18 <UART_Start_Receive_DMA>
 800a166:	4603      	mov	r3, r0
 800a168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a16c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a170:	2b00      	cmp	r3, #0
 800a172:	d12c      	bne.n	800a1ce <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d125      	bne.n	800a1c8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a17c:	2300      	movs	r3, #0
 800a17e:	613b      	str	r3, [r7, #16]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	613b      	str	r3, [r7, #16]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	613b      	str	r3, [r7, #16]
 800a190:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	330c      	adds	r3, #12
 800a198:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	e853 3f00 	ldrex	r3, [r3]
 800a1a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f043 0310 	orr.w	r3, r3, #16
 800a1a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	330c      	adds	r3, #12
 800a1b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1b2:	627a      	str	r2, [r7, #36]	; 0x24
 800a1b4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b6:	6a39      	ldr	r1, [r7, #32]
 800a1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ba:	e841 2300 	strex	r3, r2, [r1]
 800a1be:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1e5      	bne.n	800a192 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800a1c6:	e002      	b.n	800a1ce <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a1ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1d2:	e000      	b.n	800a1d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a1d4:	2302      	movs	r3, #2
  }
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3730      	adds	r7, #48	; 0x30
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
	...

0800a1e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b0ba      	sub	sp, #232	; 0xe8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a206:	2300      	movs	r3, #0
 800a208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a20c:	2300      	movs	r3, #0
 800a20e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a216:	f003 030f 	and.w	r3, r3, #15
 800a21a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a21e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10f      	bne.n	800a246 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a22a:	f003 0320 	and.w	r3, r3, #32
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d009      	beq.n	800a246 <HAL_UART_IRQHandler+0x66>
 800a232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a236:	f003 0320 	and.w	r3, r3, #32
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fd8b 	bl	800ad5a <UART_Receive_IT>
      return;
 800a244:	e256      	b.n	800a6f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a246:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f000 80de 	beq.w	800a40c <HAL_UART_IRQHandler+0x22c>
 800a250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a254:	f003 0301 	and.w	r3, r3, #1
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d106      	bne.n	800a26a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a25c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a260:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 80d1 	beq.w	800a40c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a26a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00b      	beq.n	800a28e <HAL_UART_IRQHandler+0xae>
 800a276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a27a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d005      	beq.n	800a28e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a286:	f043 0201 	orr.w	r2, r3, #1
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a28e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a292:	f003 0304 	and.w	r3, r3, #4
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00b      	beq.n	800a2b2 <HAL_UART_IRQHandler+0xd2>
 800a29a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a29e:	f003 0301 	and.w	r3, r3, #1
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d005      	beq.n	800a2b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2aa:	f043 0202 	orr.w	r2, r3, #2
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a2b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2b6:	f003 0302 	and.w	r3, r3, #2
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00b      	beq.n	800a2d6 <HAL_UART_IRQHandler+0xf6>
 800a2be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2c2:	f003 0301 	and.w	r3, r3, #1
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d005      	beq.n	800a2d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ce:	f043 0204 	orr.w	r2, r3, #4
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a2d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2da:	f003 0308 	and.w	r3, r3, #8
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d011      	beq.n	800a306 <HAL_UART_IRQHandler+0x126>
 800a2e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2e6:	f003 0320 	and.w	r3, r3, #32
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d105      	bne.n	800a2fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a2ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d005      	beq.n	800a306 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fe:	f043 0208 	orr.w	r2, r3, #8
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f000 81ed 	beq.w	800a6ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a314:	f003 0320 	and.w	r3, r3, #32
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d008      	beq.n	800a32e <HAL_UART_IRQHandler+0x14e>
 800a31c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a320:	f003 0320 	and.w	r3, r3, #32
 800a324:	2b00      	cmp	r3, #0
 800a326:	d002      	beq.n	800a32e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fd16 	bl	800ad5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a338:	2b40      	cmp	r3, #64	; 0x40
 800a33a:	bf0c      	ite	eq
 800a33c:	2301      	moveq	r3, #1
 800a33e:	2300      	movne	r3, #0
 800a340:	b2db      	uxtb	r3, r3
 800a342:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34a:	f003 0308 	and.w	r3, r3, #8
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d103      	bne.n	800a35a <HAL_UART_IRQHandler+0x17a>
 800a352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a356:	2b00      	cmp	r3, #0
 800a358:	d04f      	beq.n	800a3fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fc1e 	bl	800ab9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36a:	2b40      	cmp	r3, #64	; 0x40
 800a36c:	d141      	bne.n	800a3f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3314      	adds	r3, #20
 800a374:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a378:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a37c:	e853 3f00 	ldrex	r3, [r3]
 800a380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a384:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a38c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3314      	adds	r3, #20
 800a396:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a39a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a39e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a3a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a3b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1d9      	bne.n	800a36e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d013      	beq.n	800a3ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c6:	4a7d      	ldr	r2, [pc, #500]	; (800a5bc <HAL_UART_IRQHandler+0x3dc>)
 800a3c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7fb ff2a 	bl	8006228 <HAL_DMA_Abort_IT>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d016      	beq.n	800a408 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3e8:	e00e      	b.n	800a408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f9a4 	bl	800a738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f0:	e00a      	b.n	800a408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f9a0 	bl	800a738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f8:	e006      	b.n	800a408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f99c 	bl	800a738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a406:	e170      	b.n	800a6ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a408:	bf00      	nop
    return;
 800a40a:	e16e      	b.n	800a6ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a410:	2b01      	cmp	r3, #1
 800a412:	f040 814a 	bne.w	800a6aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a41a:	f003 0310 	and.w	r3, r3, #16
 800a41e:	2b00      	cmp	r3, #0
 800a420:	f000 8143 	beq.w	800a6aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a428:	f003 0310 	and.w	r3, r3, #16
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f000 813c 	beq.w	800a6aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a432:	2300      	movs	r3, #0
 800a434:	60bb      	str	r3, [r7, #8]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	60bb      	str	r3, [r7, #8]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	60bb      	str	r3, [r7, #8]
 800a446:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a452:	2b40      	cmp	r3, #64	; 0x40
 800a454:	f040 80b4 	bne.w	800a5c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a464:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f000 8140 	beq.w	800a6ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a476:	429a      	cmp	r2, r3
 800a478:	f080 8139 	bcs.w	800a6ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a482:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a48e:	f000 8088 	beq.w	800a5a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	330c      	adds	r3, #12
 800a498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4a0:	e853 3f00 	ldrex	r3, [r3]
 800a4a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a4a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	330c      	adds	r3, #12
 800a4ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a4be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a4c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a4ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a4ce:	e841 2300 	strex	r3, r2, [r1]
 800a4d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a4d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1d9      	bne.n	800a492 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3314      	adds	r3, #20
 800a4e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4e8:	e853 3f00 	ldrex	r3, [r3]
 800a4ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a4ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4f0:	f023 0301 	bic.w	r3, r3, #1
 800a4f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3314      	adds	r3, #20
 800a4fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a502:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a506:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a508:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a50a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a50e:	e841 2300 	strex	r3, r2, [r1]
 800a512:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1e1      	bne.n	800a4de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3314      	adds	r3, #20
 800a520:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a524:	e853 3f00 	ldrex	r3, [r3]
 800a528:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a52a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a52c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3314      	adds	r3, #20
 800a53a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a53e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a540:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a542:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a544:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a546:	e841 2300 	strex	r3, r2, [r1]
 800a54a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a54c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1e3      	bne.n	800a51a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2220      	movs	r2, #32
 800a556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	330c      	adds	r3, #12
 800a566:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a56a:	e853 3f00 	ldrex	r3, [r3]
 800a56e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a572:	f023 0310 	bic.w	r3, r3, #16
 800a576:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	330c      	adds	r3, #12
 800a580:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a584:	65ba      	str	r2, [r7, #88]	; 0x58
 800a586:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a588:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a58a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a58c:	e841 2300 	strex	r3, r2, [r1]
 800a590:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1e3      	bne.n	800a560 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7fb fdd3 	bl	8006148 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7fa fcd0 	bl	8004f58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a5b8:	e099      	b.n	800a6ee <HAL_UART_IRQHandler+0x50e>
 800a5ba:	bf00      	nop
 800a5bc:	0800ac63 	.word	0x0800ac63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	1ad3      	subs	r3, r2, r3
 800a5cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f000 808b 	beq.w	800a6f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a5dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f000 8086 	beq.w	800a6f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	330c      	adds	r3, #12
 800a5ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f0:	e853 3f00 	ldrex	r3, [r3]
 800a5f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	330c      	adds	r3, #12
 800a606:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a60a:	647a      	str	r2, [r7, #68]	; 0x44
 800a60c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a610:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a612:	e841 2300 	strex	r3, r2, [r1]
 800a616:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1e3      	bne.n	800a5e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	3314      	adds	r3, #20
 800a624:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	e853 3f00 	ldrex	r3, [r3]
 800a62c:	623b      	str	r3, [r7, #32]
   return(result);
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	f023 0301 	bic.w	r3, r3, #1
 800a634:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3314      	adds	r3, #20
 800a63e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a642:	633a      	str	r2, [r7, #48]	; 0x30
 800a644:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a64a:	e841 2300 	strex	r3, r2, [r1]
 800a64e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1e3      	bne.n	800a61e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2220      	movs	r2, #32
 800a65a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	330c      	adds	r3, #12
 800a66a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	e853 3f00 	ldrex	r3, [r3]
 800a672:	60fb      	str	r3, [r7, #12]
   return(result);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f023 0310 	bic.w	r3, r3, #16
 800a67a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	330c      	adds	r3, #12
 800a684:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a688:	61fa      	str	r2, [r7, #28]
 800a68a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68c:	69b9      	ldr	r1, [r7, #24]
 800a68e:	69fa      	ldr	r2, [r7, #28]
 800a690:	e841 2300 	strex	r3, r2, [r1]
 800a694:	617b      	str	r3, [r7, #20]
   return(result);
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1e3      	bne.n	800a664 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a69c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7fa fc58 	bl	8004f58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a6a8:	e023      	b.n	800a6f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a6aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d009      	beq.n	800a6ca <HAL_UART_IRQHandler+0x4ea>
 800a6b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d003      	beq.n	800a6ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fae1 	bl	800ac8a <UART_Transmit_IT>
    return;
 800a6c8:	e014      	b.n	800a6f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a6ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00e      	beq.n	800a6f4 <HAL_UART_IRQHandler+0x514>
 800a6d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d008      	beq.n	800a6f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fb21 	bl	800ad2a <UART_EndTransmit_IT>
    return;
 800a6e8:	e004      	b.n	800a6f4 <HAL_UART_IRQHandler+0x514>
    return;
 800a6ea:	bf00      	nop
 800a6ec:	e002      	b.n	800a6f4 <HAL_UART_IRQHandler+0x514>
      return;
 800a6ee:	bf00      	nop
 800a6f0:	e000      	b.n	800a6f4 <HAL_UART_IRQHandler+0x514>
      return;
 800a6f2:	bf00      	nop
  }
}
 800a6f4:	37e8      	adds	r7, #232	; 0xe8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop

0800a6fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b09c      	sub	sp, #112	; 0x70
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a758:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a764:	2b00      	cmp	r3, #0
 800a766:	d172      	bne.n	800a84e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a76a:	2200      	movs	r2, #0
 800a76c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a76e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	330c      	adds	r3, #12
 800a774:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a778:	e853 3f00 	ldrex	r3, [r3]
 800a77c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a77e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a784:	66bb      	str	r3, [r7, #104]	; 0x68
 800a786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	330c      	adds	r3, #12
 800a78c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a78e:	65ba      	str	r2, [r7, #88]	; 0x58
 800a790:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a792:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a794:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a796:	e841 2300 	strex	r3, r2, [r1]
 800a79a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a79c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1e5      	bne.n	800a76e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	3314      	adds	r3, #20
 800a7a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	e853 3f00 	ldrex	r3, [r3]
 800a7b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b4:	f023 0301 	bic.w	r3, r3, #1
 800a7b8:	667b      	str	r3, [r7, #100]	; 0x64
 800a7ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	3314      	adds	r3, #20
 800a7c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a7c2:	647a      	str	r2, [r7, #68]	; 0x44
 800a7c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7ca:	e841 2300 	strex	r3, r2, [r1]
 800a7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1e5      	bne.n	800a7a2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3314      	adds	r3, #20
 800a7dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e0:	e853 3f00 	ldrex	r3, [r3]
 800a7e4:	623b      	str	r3, [r7, #32]
   return(result);
 800a7e6:	6a3b      	ldr	r3, [r7, #32]
 800a7e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7ec:	663b      	str	r3, [r7, #96]	; 0x60
 800a7ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3314      	adds	r3, #20
 800a7f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a7f6:	633a      	str	r2, [r7, #48]	; 0x30
 800a7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7fe:	e841 2300 	strex	r3, r2, [r1]
 800a802:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1e5      	bne.n	800a7d6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a80c:	2220      	movs	r2, #32
 800a80e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a816:	2b01      	cmp	r3, #1
 800a818:	d119      	bne.n	800a84e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a81a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	330c      	adds	r3, #12
 800a820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	e853 3f00 	ldrex	r3, [r3]
 800a828:	60fb      	str	r3, [r7, #12]
   return(result);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f023 0310 	bic.w	r3, r3, #16
 800a830:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	330c      	adds	r3, #12
 800a838:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a83a:	61fa      	str	r2, [r7, #28]
 800a83c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83e:	69b9      	ldr	r1, [r7, #24]
 800a840:	69fa      	ldr	r2, [r7, #28]
 800a842:	e841 2300 	strex	r3, r2, [r1]
 800a846:	617b      	str	r3, [r7, #20]
   return(result);
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1e5      	bne.n	800a81a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a84e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a852:	2b01      	cmp	r3, #1
 800a854:	d106      	bne.n	800a864 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a858:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a85a:	4619      	mov	r1, r3
 800a85c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a85e:	f7fa fb7b 	bl	8004f58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a862:	e002      	b.n	800a86a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a864:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a866:	f7ff ff53 	bl	800a710 <HAL_UART_RxCpltCallback>
}
 800a86a:	bf00      	nop
 800a86c:	3770      	adds	r7, #112	; 0x70
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b084      	sub	sp, #16
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a884:	2b01      	cmp	r3, #1
 800a886:	d108      	bne.n	800a89a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a88c:	085b      	lsrs	r3, r3, #1
 800a88e:	b29b      	uxth	r3, r3
 800a890:	4619      	mov	r1, r3
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f7fa fb60 	bl	8004f58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a898:	e002      	b.n	800a8a0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f7ff ff42 	bl	800a724 <HAL_UART_RxHalfCpltCallback>
}
 800a8a0:	bf00      	nop
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8c4:	2b80      	cmp	r3, #128	; 0x80
 800a8c6:	bf0c      	ite	eq
 800a8c8:	2301      	moveq	r3, #1
 800a8ca:	2300      	movne	r3, #0
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b21      	cmp	r3, #33	; 0x21
 800a8da:	d108      	bne.n	800a8ee <UART_DMAError+0x46>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d005      	beq.n	800a8ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a8e8:	68b8      	ldr	r0, [r7, #8]
 800a8ea:	f000 f92f 	bl	800ab4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8f8:	2b40      	cmp	r3, #64	; 0x40
 800a8fa:	bf0c      	ite	eq
 800a8fc:	2301      	moveq	r3, #1
 800a8fe:	2300      	movne	r3, #0
 800a900:	b2db      	uxtb	r3, r3
 800a902:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	2b22      	cmp	r3, #34	; 0x22
 800a90e:	d108      	bne.n	800a922 <UART_DMAError+0x7a>
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d005      	beq.n	800a922 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	2200      	movs	r2, #0
 800a91a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a91c:	68b8      	ldr	r0, [r7, #8]
 800a91e:	f000 f93d 	bl	800ab9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a926:	f043 0210 	orr.w	r2, r3, #16
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a92e:	68b8      	ldr	r0, [r7, #8]
 800a930:	f7ff ff02 	bl	800a738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a934:	bf00      	nop
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b090      	sub	sp, #64	; 0x40
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	603b      	str	r3, [r7, #0]
 800a948:	4613      	mov	r3, r2
 800a94a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a94c:	e050      	b.n	800a9f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a94e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a954:	d04c      	beq.n	800a9f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d007      	beq.n	800a96c <UART_WaitOnFlagUntilTimeout+0x30>
 800a95c:	f7fa fd44 	bl	80053e8 <HAL_GetTick>
 800a960:	4602      	mov	r2, r0
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a968:	429a      	cmp	r2, r3
 800a96a:	d241      	bcs.n	800a9f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	330c      	adds	r3, #12
 800a972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a976:	e853 3f00 	ldrex	r3, [r3]
 800a97a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a982:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	330c      	adds	r3, #12
 800a98a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a98c:	637a      	str	r2, [r7, #52]	; 0x34
 800a98e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a990:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a994:	e841 2300 	strex	r3, r2, [r1]
 800a998:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1e5      	bne.n	800a96c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3314      	adds	r3, #20
 800a9a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	e853 3f00 	ldrex	r3, [r3]
 800a9ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f023 0301 	bic.w	r3, r3, #1
 800a9b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3314      	adds	r3, #20
 800a9be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9c0:	623a      	str	r2, [r7, #32]
 800a9c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c4:	69f9      	ldr	r1, [r7, #28]
 800a9c6:	6a3a      	ldr	r2, [r7, #32]
 800a9c8:	e841 2300 	strex	r3, r2, [r1]
 800a9cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1e5      	bne.n	800a9a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2220      	movs	r2, #32
 800a9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2220      	movs	r2, #32
 800a9e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a9ec:	2303      	movs	r3, #3
 800a9ee:	e00f      	b.n	800aa10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	bf0c      	ite	eq
 800aa00:	2301      	moveq	r3, #1
 800aa02:	2300      	movne	r3, #0
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	461a      	mov	r2, r3
 800aa08:	79fb      	ldrb	r3, [r7, #7]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d09f      	beq.n	800a94e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3740      	adds	r7, #64	; 0x40
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b098      	sub	sp, #96	; 0x60
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	4613      	mov	r3, r2
 800aa24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	88fa      	ldrh	r2, [r7, #6]
 800aa30:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2222      	movs	r2, #34	; 0x22
 800aa3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa44:	4a3e      	ldr	r2, [pc, #248]	; (800ab40 <UART_Start_Receive_DMA+0x128>)
 800aa46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4c:	4a3d      	ldr	r2, [pc, #244]	; (800ab44 <UART_Start_Receive_DMA+0x12c>)
 800aa4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa54:	4a3c      	ldr	r2, [pc, #240]	; (800ab48 <UART_Start_Receive_DMA+0x130>)
 800aa56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aa60:	f107 0308 	add.w	r3, r7, #8
 800aa64:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3304      	adds	r3, #4
 800aa70:	4619      	mov	r1, r3
 800aa72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	88fb      	ldrh	r3, [r7, #6]
 800aa78:	f7fb fb0e 	bl	8006098 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	613b      	str	r3, [r7, #16]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	613b      	str	r3, [r7, #16]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	613b      	str	r3, [r7, #16]
 800aa90:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	330c      	adds	r3, #12
 800aaa0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaa4:	e853 3f00 	ldrex	r3, [r3]
 800aaa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aaaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aab0:	65bb      	str	r3, [r7, #88]	; 0x58
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	330c      	adds	r3, #12
 800aab8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aaba:	64fa      	str	r2, [r7, #76]	; 0x4c
 800aabc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aac0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aac2:	e841 2300 	strex	r3, r2, [r1]
 800aac6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800aac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1e5      	bne.n	800aa9a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3314      	adds	r3, #20
 800aad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad8:	e853 3f00 	ldrex	r3, [r3]
 800aadc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae0:	f043 0301 	orr.w	r3, r3, #1
 800aae4:	657b      	str	r3, [r7, #84]	; 0x54
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3314      	adds	r3, #20
 800aaec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aaee:	63ba      	str	r2, [r7, #56]	; 0x38
 800aaf0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aaf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e5      	bne.n	800aace <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	3314      	adds	r3, #20
 800ab08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	e853 3f00 	ldrex	r3, [r3]
 800ab10:	617b      	str	r3, [r7, #20]
   return(result);
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab18:	653b      	str	r3, [r7, #80]	; 0x50
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	3314      	adds	r3, #20
 800ab20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab22:	627a      	str	r2, [r7, #36]	; 0x24
 800ab24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab26:	6a39      	ldr	r1, [r7, #32]
 800ab28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab2a:	e841 2300 	strex	r3, r2, [r1]
 800ab2e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1e5      	bne.n	800ab02 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800ab36:	2300      	movs	r3, #0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3760      	adds	r7, #96	; 0x60
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	0800a74d 	.word	0x0800a74d
 800ab44:	0800a873 	.word	0x0800a873
 800ab48:	0800a8a9 	.word	0x0800a8a9

0800ab4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b089      	sub	sp, #36	; 0x24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	330c      	adds	r3, #12
 800ab5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	e853 3f00 	ldrex	r3, [r3]
 800ab62:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ab6a:	61fb      	str	r3, [r7, #28]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	330c      	adds	r3, #12
 800ab72:	69fa      	ldr	r2, [r7, #28]
 800ab74:	61ba      	str	r2, [r7, #24]
 800ab76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab78:	6979      	ldr	r1, [r7, #20]
 800ab7a:	69ba      	ldr	r2, [r7, #24]
 800ab7c:	e841 2300 	strex	r3, r2, [r1]
 800ab80:	613b      	str	r3, [r7, #16]
   return(result);
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e5      	bne.n	800ab54 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2220      	movs	r2, #32
 800ab8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ab90:	bf00      	nop
 800ab92:	3724      	adds	r7, #36	; 0x24
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b095      	sub	sp, #84	; 0x54
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	330c      	adds	r3, #12
 800abaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abae:	e853 3f00 	ldrex	r3, [r3]
 800abb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800abb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	330c      	adds	r3, #12
 800abc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abc4:	643a      	str	r2, [r7, #64]	; 0x40
 800abc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abcc:	e841 2300 	strex	r3, r2, [r1]
 800abd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1e5      	bne.n	800aba4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	3314      	adds	r3, #20
 800abde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe0:	6a3b      	ldr	r3, [r7, #32]
 800abe2:	e853 3f00 	ldrex	r3, [r3]
 800abe6:	61fb      	str	r3, [r7, #28]
   return(result);
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	f023 0301 	bic.w	r3, r3, #1
 800abee:	64bb      	str	r3, [r7, #72]	; 0x48
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	3314      	adds	r3, #20
 800abf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac00:	e841 2300 	strex	r3, r2, [r1]
 800ac04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e5      	bne.n	800abd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d119      	bne.n	800ac48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	330c      	adds	r3, #12
 800ac1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	e853 3f00 	ldrex	r3, [r3]
 800ac22:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	f023 0310 	bic.w	r3, r3, #16
 800ac2a:	647b      	str	r3, [r7, #68]	; 0x44
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	330c      	adds	r3, #12
 800ac32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac34:	61ba      	str	r2, [r7, #24]
 800ac36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac38:	6979      	ldr	r1, [r7, #20]
 800ac3a:	69ba      	ldr	r2, [r7, #24]
 800ac3c:	e841 2300 	strex	r3, r2, [r1]
 800ac40:	613b      	str	r3, [r7, #16]
   return(result);
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1e5      	bne.n	800ac14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2220      	movs	r2, #32
 800ac4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ac56:	bf00      	nop
 800ac58:	3754      	adds	r7, #84	; 0x54
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b084      	sub	sp, #16
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2200      	movs	r2, #0
 800ac74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f7ff fd5b 	bl	800a738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac82:	bf00      	nop
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b085      	sub	sp, #20
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	2b21      	cmp	r3, #33	; 0x21
 800ac9c:	d13e      	bne.n	800ad1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aca6:	d114      	bne.n	800acd2 <UART_Transmit_IT+0x48>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d110      	bne.n	800acd2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a1b      	ldr	r3, [r3, #32]
 800acb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	881b      	ldrh	r3, [r3, #0]
 800acba:	461a      	mov	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a1b      	ldr	r3, [r3, #32]
 800acca:	1c9a      	adds	r2, r3, #2
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	621a      	str	r2, [r3, #32]
 800acd0:	e008      	b.n	800ace4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	1c59      	adds	r1, r3, #1
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	6211      	str	r1, [r2, #32]
 800acdc:	781a      	ldrb	r2, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ace8:	b29b      	uxth	r3, r3
 800acea:	3b01      	subs	r3, #1
 800acec:	b29b      	uxth	r3, r3
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	4619      	mov	r1, r3
 800acf2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10f      	bne.n	800ad18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68da      	ldr	r2, [r3, #12]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68da      	ldr	r2, [r3, #12]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	e000      	b.n	800ad1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ad1c:	2302      	movs	r3, #2
  }
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3714      	adds	r7, #20
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr

0800ad2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b082      	sub	sp, #8
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68da      	ldr	r2, [r3, #12]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2220      	movs	r2, #32
 800ad46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7ff fcd6 	bl	800a6fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b08c      	sub	sp, #48	; 0x30
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	2b22      	cmp	r3, #34	; 0x22
 800ad6c:	f040 80ab 	bne.w	800aec6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad78:	d117      	bne.n	800adaa <UART_Receive_IT+0x50>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d113      	bne.n	800adaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ad82:	2300      	movs	r3, #0
 800ad84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada2:	1c9a      	adds	r2, r3, #2
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	629a      	str	r2, [r3, #40]	; 0x28
 800ada8:	e026      	b.n	800adf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800adb0:	2300      	movs	r3, #0
 800adb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adbc:	d007      	beq.n	800adce <UART_Receive_IT+0x74>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d10a      	bne.n	800addc <UART_Receive_IT+0x82>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d106      	bne.n	800addc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	b2da      	uxtb	r2, r3
 800add6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add8:	701a      	strb	r2, [r3, #0]
 800adda:	e008      	b.n	800adee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	3b01      	subs	r3, #1
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	4619      	mov	r1, r3
 800ae06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d15a      	bne.n	800aec2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68da      	ldr	r2, [r3, #12]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f022 0220 	bic.w	r2, r2, #32
 800ae1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68da      	ldr	r2, [r3, #12]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	695a      	ldr	r2, [r3, #20]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f022 0201 	bic.w	r2, r2, #1
 800ae3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2220      	movs	r2, #32
 800ae40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d135      	bne.n	800aeb8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	330c      	adds	r3, #12
 800ae58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	e853 3f00 	ldrex	r3, [r3]
 800ae60:	613b      	str	r3, [r7, #16]
   return(result);
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	f023 0310 	bic.w	r3, r3, #16
 800ae68:	627b      	str	r3, [r7, #36]	; 0x24
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	330c      	adds	r3, #12
 800ae70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae72:	623a      	str	r2, [r7, #32]
 800ae74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae76:	69f9      	ldr	r1, [r7, #28]
 800ae78:	6a3a      	ldr	r2, [r7, #32]
 800ae7a:	e841 2300 	strex	r3, r2, [r1]
 800ae7e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1e5      	bne.n	800ae52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 0310 	and.w	r3, r3, #16
 800ae90:	2b10      	cmp	r3, #16
 800ae92:	d10a      	bne.n	800aeaa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae94:	2300      	movs	r3, #0
 800ae96:	60fb      	str	r3, [r7, #12]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	60fb      	str	r3, [r7, #12]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	60fb      	str	r3, [r7, #12]
 800aea8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aeae:	4619      	mov	r1, r3
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7fa f851 	bl	8004f58 <HAL_UARTEx_RxEventCallback>
 800aeb6:	e002      	b.n	800aebe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7ff fc29 	bl	800a710 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	e002      	b.n	800aec8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	e000      	b.n	800aec8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800aec6:	2302      	movs	r3, #2
  }
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3730      	adds	r7, #48	; 0x30
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aed4:	b0c0      	sub	sp, #256	; 0x100
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aedc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeec:	68d9      	ldr	r1, [r3, #12]
 800aeee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	ea40 0301 	orr.w	r3, r0, r1
 800aef8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aefa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aefe:	689a      	ldr	r2, [r3, #8]
 800af00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	431a      	orrs	r2, r3
 800af08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af0c:	695b      	ldr	r3, [r3, #20]
 800af0e:	431a      	orrs	r2, r3
 800af10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af14:	69db      	ldr	r3, [r3, #28]
 800af16:	4313      	orrs	r3, r2
 800af18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800af1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800af28:	f021 010c 	bic.w	r1, r1, #12
 800af2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af36:	430b      	orrs	r3, r1
 800af38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	695b      	ldr	r3, [r3, #20]
 800af42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800af46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af4a:	6999      	ldr	r1, [r3, #24]
 800af4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	ea40 0301 	orr.w	r3, r0, r1
 800af56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	4b8f      	ldr	r3, [pc, #572]	; (800b19c <UART_SetConfig+0x2cc>)
 800af60:	429a      	cmp	r2, r3
 800af62:	d005      	beq.n	800af70 <UART_SetConfig+0xa0>
 800af64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	4b8d      	ldr	r3, [pc, #564]	; (800b1a0 <UART_SetConfig+0x2d0>)
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d104      	bne.n	800af7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af70:	f7fd fcea 	bl	8008948 <HAL_RCC_GetPCLK2Freq>
 800af74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800af78:	e003      	b.n	800af82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af7a:	f7fd fcd1 	bl	8008920 <HAL_RCC_GetPCLK1Freq>
 800af7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af86:	69db      	ldr	r3, [r3, #28]
 800af88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af8c:	f040 810c 	bne.w	800b1a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af94:	2200      	movs	r2, #0
 800af96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800af9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800afa2:	4622      	mov	r2, r4
 800afa4:	462b      	mov	r3, r5
 800afa6:	1891      	adds	r1, r2, r2
 800afa8:	65b9      	str	r1, [r7, #88]	; 0x58
 800afaa:	415b      	adcs	r3, r3
 800afac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800afb2:	4621      	mov	r1, r4
 800afb4:	eb12 0801 	adds.w	r8, r2, r1
 800afb8:	4629      	mov	r1, r5
 800afba:	eb43 0901 	adc.w	r9, r3, r1
 800afbe:	f04f 0200 	mov.w	r2, #0
 800afc2:	f04f 0300 	mov.w	r3, #0
 800afc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800afca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800afce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800afd2:	4690      	mov	r8, r2
 800afd4:	4699      	mov	r9, r3
 800afd6:	4623      	mov	r3, r4
 800afd8:	eb18 0303 	adds.w	r3, r8, r3
 800afdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800afe0:	462b      	mov	r3, r5
 800afe2:	eb49 0303 	adc.w	r3, r9, r3
 800afe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800afea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aff6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800affa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800affe:	460b      	mov	r3, r1
 800b000:	18db      	adds	r3, r3, r3
 800b002:	653b      	str	r3, [r7, #80]	; 0x50
 800b004:	4613      	mov	r3, r2
 800b006:	eb42 0303 	adc.w	r3, r2, r3
 800b00a:	657b      	str	r3, [r7, #84]	; 0x54
 800b00c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b010:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b014:	f7f5 f934 	bl	8000280 <__aeabi_uldivmod>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4b61      	ldr	r3, [pc, #388]	; (800b1a4 <UART_SetConfig+0x2d4>)
 800b01e:	fba3 2302 	umull	r2, r3, r3, r2
 800b022:	095b      	lsrs	r3, r3, #5
 800b024:	011c      	lsls	r4, r3, #4
 800b026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b02a:	2200      	movs	r2, #0
 800b02c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b030:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b034:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b038:	4642      	mov	r2, r8
 800b03a:	464b      	mov	r3, r9
 800b03c:	1891      	adds	r1, r2, r2
 800b03e:	64b9      	str	r1, [r7, #72]	; 0x48
 800b040:	415b      	adcs	r3, r3
 800b042:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b044:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b048:	4641      	mov	r1, r8
 800b04a:	eb12 0a01 	adds.w	sl, r2, r1
 800b04e:	4649      	mov	r1, r9
 800b050:	eb43 0b01 	adc.w	fp, r3, r1
 800b054:	f04f 0200 	mov.w	r2, #0
 800b058:	f04f 0300 	mov.w	r3, #0
 800b05c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b060:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b064:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b068:	4692      	mov	sl, r2
 800b06a:	469b      	mov	fp, r3
 800b06c:	4643      	mov	r3, r8
 800b06e:	eb1a 0303 	adds.w	r3, sl, r3
 800b072:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b076:	464b      	mov	r3, r9
 800b078:	eb4b 0303 	adc.w	r3, fp, r3
 800b07c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b08c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b090:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b094:	460b      	mov	r3, r1
 800b096:	18db      	adds	r3, r3, r3
 800b098:	643b      	str	r3, [r7, #64]	; 0x40
 800b09a:	4613      	mov	r3, r2
 800b09c:	eb42 0303 	adc.w	r3, r2, r3
 800b0a0:	647b      	str	r3, [r7, #68]	; 0x44
 800b0a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b0a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b0aa:	f7f5 f8e9 	bl	8000280 <__aeabi_uldivmod>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	4611      	mov	r1, r2
 800b0b4:	4b3b      	ldr	r3, [pc, #236]	; (800b1a4 <UART_SetConfig+0x2d4>)
 800b0b6:	fba3 2301 	umull	r2, r3, r3, r1
 800b0ba:	095b      	lsrs	r3, r3, #5
 800b0bc:	2264      	movs	r2, #100	; 0x64
 800b0be:	fb02 f303 	mul.w	r3, r2, r3
 800b0c2:	1acb      	subs	r3, r1, r3
 800b0c4:	00db      	lsls	r3, r3, #3
 800b0c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b0ca:	4b36      	ldr	r3, [pc, #216]	; (800b1a4 <UART_SetConfig+0x2d4>)
 800b0cc:	fba3 2302 	umull	r2, r3, r3, r2
 800b0d0:	095b      	lsrs	r3, r3, #5
 800b0d2:	005b      	lsls	r3, r3, #1
 800b0d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b0d8:	441c      	add	r4, r3
 800b0da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b0e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b0ec:	4642      	mov	r2, r8
 800b0ee:	464b      	mov	r3, r9
 800b0f0:	1891      	adds	r1, r2, r2
 800b0f2:	63b9      	str	r1, [r7, #56]	; 0x38
 800b0f4:	415b      	adcs	r3, r3
 800b0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b0fc:	4641      	mov	r1, r8
 800b0fe:	1851      	adds	r1, r2, r1
 800b100:	6339      	str	r1, [r7, #48]	; 0x30
 800b102:	4649      	mov	r1, r9
 800b104:	414b      	adcs	r3, r1
 800b106:	637b      	str	r3, [r7, #52]	; 0x34
 800b108:	f04f 0200 	mov.w	r2, #0
 800b10c:	f04f 0300 	mov.w	r3, #0
 800b110:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b114:	4659      	mov	r1, fp
 800b116:	00cb      	lsls	r3, r1, #3
 800b118:	4651      	mov	r1, sl
 800b11a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b11e:	4651      	mov	r1, sl
 800b120:	00ca      	lsls	r2, r1, #3
 800b122:	4610      	mov	r0, r2
 800b124:	4619      	mov	r1, r3
 800b126:	4603      	mov	r3, r0
 800b128:	4642      	mov	r2, r8
 800b12a:	189b      	adds	r3, r3, r2
 800b12c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b130:	464b      	mov	r3, r9
 800b132:	460a      	mov	r2, r1
 800b134:	eb42 0303 	adc.w	r3, r2, r3
 800b138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b148:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b14c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b150:	460b      	mov	r3, r1
 800b152:	18db      	adds	r3, r3, r3
 800b154:	62bb      	str	r3, [r7, #40]	; 0x28
 800b156:	4613      	mov	r3, r2
 800b158:	eb42 0303 	adc.w	r3, r2, r3
 800b15c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b15e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b162:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b166:	f7f5 f88b 	bl	8000280 <__aeabi_uldivmod>
 800b16a:	4602      	mov	r2, r0
 800b16c:	460b      	mov	r3, r1
 800b16e:	4b0d      	ldr	r3, [pc, #52]	; (800b1a4 <UART_SetConfig+0x2d4>)
 800b170:	fba3 1302 	umull	r1, r3, r3, r2
 800b174:	095b      	lsrs	r3, r3, #5
 800b176:	2164      	movs	r1, #100	; 0x64
 800b178:	fb01 f303 	mul.w	r3, r1, r3
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	00db      	lsls	r3, r3, #3
 800b180:	3332      	adds	r3, #50	; 0x32
 800b182:	4a08      	ldr	r2, [pc, #32]	; (800b1a4 <UART_SetConfig+0x2d4>)
 800b184:	fba2 2303 	umull	r2, r3, r2, r3
 800b188:	095b      	lsrs	r3, r3, #5
 800b18a:	f003 0207 	and.w	r2, r3, #7
 800b18e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4422      	add	r2, r4
 800b196:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b198:	e105      	b.n	800b3a6 <UART_SetConfig+0x4d6>
 800b19a:	bf00      	nop
 800b19c:	40011000 	.word	0x40011000
 800b1a0:	40011400 	.word	0x40011400
 800b1a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b1a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b1b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b1b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b1ba:	4642      	mov	r2, r8
 800b1bc:	464b      	mov	r3, r9
 800b1be:	1891      	adds	r1, r2, r2
 800b1c0:	6239      	str	r1, [r7, #32]
 800b1c2:	415b      	adcs	r3, r3
 800b1c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b1c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b1ca:	4641      	mov	r1, r8
 800b1cc:	1854      	adds	r4, r2, r1
 800b1ce:	4649      	mov	r1, r9
 800b1d0:	eb43 0501 	adc.w	r5, r3, r1
 800b1d4:	f04f 0200 	mov.w	r2, #0
 800b1d8:	f04f 0300 	mov.w	r3, #0
 800b1dc:	00eb      	lsls	r3, r5, #3
 800b1de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b1e2:	00e2      	lsls	r2, r4, #3
 800b1e4:	4614      	mov	r4, r2
 800b1e6:	461d      	mov	r5, r3
 800b1e8:	4643      	mov	r3, r8
 800b1ea:	18e3      	adds	r3, r4, r3
 800b1ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b1f0:	464b      	mov	r3, r9
 800b1f2:	eb45 0303 	adc.w	r3, r5, r3
 800b1f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b1fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b206:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b20a:	f04f 0200 	mov.w	r2, #0
 800b20e:	f04f 0300 	mov.w	r3, #0
 800b212:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b216:	4629      	mov	r1, r5
 800b218:	008b      	lsls	r3, r1, #2
 800b21a:	4621      	mov	r1, r4
 800b21c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b220:	4621      	mov	r1, r4
 800b222:	008a      	lsls	r2, r1, #2
 800b224:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b228:	f7f5 f82a 	bl	8000280 <__aeabi_uldivmod>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	4b60      	ldr	r3, [pc, #384]	; (800b3b4 <UART_SetConfig+0x4e4>)
 800b232:	fba3 2302 	umull	r2, r3, r3, r2
 800b236:	095b      	lsrs	r3, r3, #5
 800b238:	011c      	lsls	r4, r3, #4
 800b23a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b23e:	2200      	movs	r2, #0
 800b240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b244:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b248:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b24c:	4642      	mov	r2, r8
 800b24e:	464b      	mov	r3, r9
 800b250:	1891      	adds	r1, r2, r2
 800b252:	61b9      	str	r1, [r7, #24]
 800b254:	415b      	adcs	r3, r3
 800b256:	61fb      	str	r3, [r7, #28]
 800b258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b25c:	4641      	mov	r1, r8
 800b25e:	1851      	adds	r1, r2, r1
 800b260:	6139      	str	r1, [r7, #16]
 800b262:	4649      	mov	r1, r9
 800b264:	414b      	adcs	r3, r1
 800b266:	617b      	str	r3, [r7, #20]
 800b268:	f04f 0200 	mov.w	r2, #0
 800b26c:	f04f 0300 	mov.w	r3, #0
 800b270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b274:	4659      	mov	r1, fp
 800b276:	00cb      	lsls	r3, r1, #3
 800b278:	4651      	mov	r1, sl
 800b27a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b27e:	4651      	mov	r1, sl
 800b280:	00ca      	lsls	r2, r1, #3
 800b282:	4610      	mov	r0, r2
 800b284:	4619      	mov	r1, r3
 800b286:	4603      	mov	r3, r0
 800b288:	4642      	mov	r2, r8
 800b28a:	189b      	adds	r3, r3, r2
 800b28c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b290:	464b      	mov	r3, r9
 800b292:	460a      	mov	r2, r1
 800b294:	eb42 0303 	adc.w	r3, r2, r3
 800b298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	67bb      	str	r3, [r7, #120]	; 0x78
 800b2a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b2a8:	f04f 0200 	mov.w	r2, #0
 800b2ac:	f04f 0300 	mov.w	r3, #0
 800b2b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b2b4:	4649      	mov	r1, r9
 800b2b6:	008b      	lsls	r3, r1, #2
 800b2b8:	4641      	mov	r1, r8
 800b2ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2be:	4641      	mov	r1, r8
 800b2c0:	008a      	lsls	r2, r1, #2
 800b2c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b2c6:	f7f4 ffdb 	bl	8000280 <__aeabi_uldivmod>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	4b39      	ldr	r3, [pc, #228]	; (800b3b4 <UART_SetConfig+0x4e4>)
 800b2d0:	fba3 1302 	umull	r1, r3, r3, r2
 800b2d4:	095b      	lsrs	r3, r3, #5
 800b2d6:	2164      	movs	r1, #100	; 0x64
 800b2d8:	fb01 f303 	mul.w	r3, r1, r3
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	011b      	lsls	r3, r3, #4
 800b2e0:	3332      	adds	r3, #50	; 0x32
 800b2e2:	4a34      	ldr	r2, [pc, #208]	; (800b3b4 <UART_SetConfig+0x4e4>)
 800b2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2e8:	095b      	lsrs	r3, r3, #5
 800b2ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2ee:	441c      	add	r4, r3
 800b2f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	673b      	str	r3, [r7, #112]	; 0x70
 800b2f8:	677a      	str	r2, [r7, #116]	; 0x74
 800b2fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b2fe:	4642      	mov	r2, r8
 800b300:	464b      	mov	r3, r9
 800b302:	1891      	adds	r1, r2, r2
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	415b      	adcs	r3, r3
 800b308:	60fb      	str	r3, [r7, #12]
 800b30a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b30e:	4641      	mov	r1, r8
 800b310:	1851      	adds	r1, r2, r1
 800b312:	6039      	str	r1, [r7, #0]
 800b314:	4649      	mov	r1, r9
 800b316:	414b      	adcs	r3, r1
 800b318:	607b      	str	r3, [r7, #4]
 800b31a:	f04f 0200 	mov.w	r2, #0
 800b31e:	f04f 0300 	mov.w	r3, #0
 800b322:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b326:	4659      	mov	r1, fp
 800b328:	00cb      	lsls	r3, r1, #3
 800b32a:	4651      	mov	r1, sl
 800b32c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b330:	4651      	mov	r1, sl
 800b332:	00ca      	lsls	r2, r1, #3
 800b334:	4610      	mov	r0, r2
 800b336:	4619      	mov	r1, r3
 800b338:	4603      	mov	r3, r0
 800b33a:	4642      	mov	r2, r8
 800b33c:	189b      	adds	r3, r3, r2
 800b33e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b340:	464b      	mov	r3, r9
 800b342:	460a      	mov	r2, r1
 800b344:	eb42 0303 	adc.w	r3, r2, r3
 800b348:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b34a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	663b      	str	r3, [r7, #96]	; 0x60
 800b354:	667a      	str	r2, [r7, #100]	; 0x64
 800b356:	f04f 0200 	mov.w	r2, #0
 800b35a:	f04f 0300 	mov.w	r3, #0
 800b35e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b362:	4649      	mov	r1, r9
 800b364:	008b      	lsls	r3, r1, #2
 800b366:	4641      	mov	r1, r8
 800b368:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b36c:	4641      	mov	r1, r8
 800b36e:	008a      	lsls	r2, r1, #2
 800b370:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b374:	f7f4 ff84 	bl	8000280 <__aeabi_uldivmod>
 800b378:	4602      	mov	r2, r0
 800b37a:	460b      	mov	r3, r1
 800b37c:	4b0d      	ldr	r3, [pc, #52]	; (800b3b4 <UART_SetConfig+0x4e4>)
 800b37e:	fba3 1302 	umull	r1, r3, r3, r2
 800b382:	095b      	lsrs	r3, r3, #5
 800b384:	2164      	movs	r1, #100	; 0x64
 800b386:	fb01 f303 	mul.w	r3, r1, r3
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	011b      	lsls	r3, r3, #4
 800b38e:	3332      	adds	r3, #50	; 0x32
 800b390:	4a08      	ldr	r2, [pc, #32]	; (800b3b4 <UART_SetConfig+0x4e4>)
 800b392:	fba2 2303 	umull	r2, r3, r2, r3
 800b396:	095b      	lsrs	r3, r3, #5
 800b398:	f003 020f 	and.w	r2, r3, #15
 800b39c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4422      	add	r2, r4
 800b3a4:	609a      	str	r2, [r3, #8]
}
 800b3a6:	bf00      	nop
 800b3a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3b2:	bf00      	nop
 800b3b4:	51eb851f 	.word	0x51eb851f

0800b3b8 <LWIP_ReInit>:
uint8_t NETMASK_ADDRESS[4];
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */
static void LWIP_ReInit()
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	af00      	add	r7, sp, #0
	if(((uint8_t)settings.retain.eth_sett.addr0 ||
 800b3bc:	4b5c      	ldr	r3, [pc, #368]	; (800b530 <LWIP_ReInit+0x178>)
 800b3be:	8a9b      	ldrh	r3, [r3, #20]
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d10e      	bne.n	800b3e4 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr1 ||
 800b3c6:	4b5a      	ldr	r3, [pc, #360]	; (800b530 <LWIP_ReInit+0x178>)
 800b3c8:	8adb      	ldrh	r3, [r3, #22]
 800b3ca:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.addr0 ||
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d109      	bne.n	800b3e4 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr2 ||
 800b3d0:	4b57      	ldr	r3, [pc, #348]	; (800b530 <LWIP_ReInit+0x178>)
 800b3d2:	8b1b      	ldrh	r3, [r3, #24]
 800b3d4:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.addr1 ||
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d104      	bne.n	800b3e4 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr3))
 800b3da:	4b55      	ldr	r3, [pc, #340]	; (800b530 <LWIP_ReInit+0x178>)
 800b3dc:	8b5b      	ldrh	r3, [r3, #26]
 800b3de:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.addr2 ||
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d013      	beq.n	800b40c <LWIP_ReInit+0x54>
	{
		  IP_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.addr0;
 800b3e4:	4b52      	ldr	r3, [pc, #328]	; (800b530 <LWIP_ReInit+0x178>)
 800b3e6:	8a9b      	ldrh	r3, [r3, #20]
 800b3e8:	b2da      	uxtb	r2, r3
 800b3ea:	4b52      	ldr	r3, [pc, #328]	; (800b534 <LWIP_ReInit+0x17c>)
 800b3ec:	701a      	strb	r2, [r3, #0]
		  IP_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.addr1;
 800b3ee:	4b50      	ldr	r3, [pc, #320]	; (800b530 <LWIP_ReInit+0x178>)
 800b3f0:	8adb      	ldrh	r3, [r3, #22]
 800b3f2:	b2da      	uxtb	r2, r3
 800b3f4:	4b4f      	ldr	r3, [pc, #316]	; (800b534 <LWIP_ReInit+0x17c>)
 800b3f6:	705a      	strb	r2, [r3, #1]
		  IP_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.addr2;
 800b3f8:	4b4d      	ldr	r3, [pc, #308]	; (800b530 <LWIP_ReInit+0x178>)
 800b3fa:	8b1b      	ldrh	r3, [r3, #24]
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	4b4d      	ldr	r3, [pc, #308]	; (800b534 <LWIP_ReInit+0x17c>)
 800b400:	709a      	strb	r2, [r3, #2]
		  IP_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.addr3;
 800b402:	4b4b      	ldr	r3, [pc, #300]	; (800b530 <LWIP_ReInit+0x178>)
 800b404:	8b5b      	ldrh	r3, [r3, #26]
 800b406:	b2da      	uxtb	r2, r3
 800b408:	4b4a      	ldr	r3, [pc, #296]	; (800b534 <LWIP_ReInit+0x17c>)
 800b40a:	70da      	strb	r2, [r3, #3]
	}

	if(((uint8_t)settings.retain.eth_sett.mask0 ||
 800b40c:	4b48      	ldr	r3, [pc, #288]	; (800b530 <LWIP_ReInit+0x178>)
 800b40e:	8b9b      	ldrh	r3, [r3, #28]
 800b410:	b2db      	uxtb	r3, r3
 800b412:	2b00      	cmp	r3, #0
 800b414:	d10e      	bne.n	800b434 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask1 ||
 800b416:	4b46      	ldr	r3, [pc, #280]	; (800b530 <LWIP_ReInit+0x178>)
 800b418:	8bdb      	ldrh	r3, [r3, #30]
 800b41a:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.mask0 ||
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d109      	bne.n	800b434 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask2 ||
 800b420:	4b43      	ldr	r3, [pc, #268]	; (800b530 <LWIP_ReInit+0x178>)
 800b422:	8c1b      	ldrh	r3, [r3, #32]
 800b424:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.mask1 ||
 800b426:	2b00      	cmp	r3, #0
 800b428:	d104      	bne.n	800b434 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask3))
 800b42a:	4b41      	ldr	r3, [pc, #260]	; (800b530 <LWIP_ReInit+0x178>)
 800b42c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b42e:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.mask2 ||
 800b430:	2b00      	cmp	r3, #0
 800b432:	d013      	beq.n	800b45c <LWIP_ReInit+0xa4>
	{
		  NETMASK_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.mask0;
 800b434:	4b3e      	ldr	r3, [pc, #248]	; (800b530 <LWIP_ReInit+0x178>)
 800b436:	8b9b      	ldrh	r3, [r3, #28]
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	4b3f      	ldr	r3, [pc, #252]	; (800b538 <LWIP_ReInit+0x180>)
 800b43c:	701a      	strb	r2, [r3, #0]
		  NETMASK_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.mask1;
 800b43e:	4b3c      	ldr	r3, [pc, #240]	; (800b530 <LWIP_ReInit+0x178>)
 800b440:	8bdb      	ldrh	r3, [r3, #30]
 800b442:	b2da      	uxtb	r2, r3
 800b444:	4b3c      	ldr	r3, [pc, #240]	; (800b538 <LWIP_ReInit+0x180>)
 800b446:	705a      	strb	r2, [r3, #1]
		  NETMASK_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.mask2;
 800b448:	4b39      	ldr	r3, [pc, #228]	; (800b530 <LWIP_ReInit+0x178>)
 800b44a:	8c1b      	ldrh	r3, [r3, #32]
 800b44c:	b2da      	uxtb	r2, r3
 800b44e:	4b3a      	ldr	r3, [pc, #232]	; (800b538 <LWIP_ReInit+0x180>)
 800b450:	709a      	strb	r2, [r3, #2]
		  NETMASK_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.mask3;
 800b452:	4b37      	ldr	r3, [pc, #220]	; (800b530 <LWIP_ReInit+0x178>)
 800b454:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b456:	b2da      	uxtb	r2, r3
 800b458:	4b37      	ldr	r3, [pc, #220]	; (800b538 <LWIP_ReInit+0x180>)
 800b45a:	70da      	strb	r2, [r3, #3]
	}
	if(((uint8_t)settings.retain.eth_sett.gateway0 ||
 800b45c:	4b34      	ldr	r3, [pc, #208]	; (800b530 <LWIP_ReInit+0x178>)
 800b45e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b460:	b2db      	uxtb	r3, r3
 800b462:	2b00      	cmp	r3, #0
 800b464:	d10e      	bne.n	800b484 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway1 ||
 800b466:	4b32      	ldr	r3, [pc, #200]	; (800b530 <LWIP_ReInit+0x178>)
 800b468:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b46a:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.gateway0 ||
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d109      	bne.n	800b484 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway2 ||
 800b470:	4b2f      	ldr	r3, [pc, #188]	; (800b530 <LWIP_ReInit+0x178>)
 800b472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b474:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.gateway1 ||
 800b476:	2b00      	cmp	r3, #0
 800b478:	d104      	bne.n	800b484 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway3))
 800b47a:	4b2d      	ldr	r3, [pc, #180]	; (800b530 <LWIP_ReInit+0x178>)
 800b47c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b47e:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.gateway2 ||
 800b480:	2b00      	cmp	r3, #0
 800b482:	d013      	beq.n	800b4ac <LWIP_ReInit+0xf4>
	{
		  GATEWAY_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.gateway0;
 800b484:	4b2a      	ldr	r3, [pc, #168]	; (800b530 <LWIP_ReInit+0x178>)
 800b486:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	4b2c      	ldr	r3, [pc, #176]	; (800b53c <LWIP_ReInit+0x184>)
 800b48c:	701a      	strb	r2, [r3, #0]
		  GATEWAY_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.gateway1;
 800b48e:	4b28      	ldr	r3, [pc, #160]	; (800b530 <LWIP_ReInit+0x178>)
 800b490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b492:	b2da      	uxtb	r2, r3
 800b494:	4b29      	ldr	r3, [pc, #164]	; (800b53c <LWIP_ReInit+0x184>)
 800b496:	705a      	strb	r2, [r3, #1]
		  GATEWAY_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.gateway2;
 800b498:	4b25      	ldr	r3, [pc, #148]	; (800b530 <LWIP_ReInit+0x178>)
 800b49a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	4b27      	ldr	r3, [pc, #156]	; (800b53c <LWIP_ReInit+0x184>)
 800b4a0:	709a      	strb	r2, [r3, #2]
		  GATEWAY_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.gateway3;
 800b4a2:	4b23      	ldr	r3, [pc, #140]	; (800b530 <LWIP_ReInit+0x178>)
 800b4a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4a6:	b2da      	uxtb	r2, r3
 800b4a8:	4b24      	ldr	r3, [pc, #144]	; (800b53c <LWIP_ReInit+0x184>)
 800b4aa:	70da      	strb	r2, [r3, #3]
	}
	settings.retain.eth_sett.addr0 = IP_ADDRESS[0];
 800b4ac:	4b21      	ldr	r3, [pc, #132]	; (800b534 <LWIP_ReInit+0x17c>)
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	4b1f      	ldr	r3, [pc, #124]	; (800b530 <LWIP_ReInit+0x178>)
 800b4b4:	829a      	strh	r2, [r3, #20]
	settings.retain.eth_sett.addr1 = IP_ADDRESS[1];
 800b4b6:	4b1f      	ldr	r3, [pc, #124]	; (800b534 <LWIP_ReInit+0x17c>)
 800b4b8:	785b      	ldrb	r3, [r3, #1]
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	4b1c      	ldr	r3, [pc, #112]	; (800b530 <LWIP_ReInit+0x178>)
 800b4be:	82da      	strh	r2, [r3, #22]
	settings.retain.eth_sett.addr2 = IP_ADDRESS[2];
 800b4c0:	4b1c      	ldr	r3, [pc, #112]	; (800b534 <LWIP_ReInit+0x17c>)
 800b4c2:	789b      	ldrb	r3, [r3, #2]
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	4b1a      	ldr	r3, [pc, #104]	; (800b530 <LWIP_ReInit+0x178>)
 800b4c8:	831a      	strh	r2, [r3, #24]
	settings.retain.eth_sett.addr3 = IP_ADDRESS[3];
 800b4ca:	4b1a      	ldr	r3, [pc, #104]	; (800b534 <LWIP_ReInit+0x17c>)
 800b4cc:	78db      	ldrb	r3, [r3, #3]
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	4b17      	ldr	r3, [pc, #92]	; (800b530 <LWIP_ReInit+0x178>)
 800b4d2:	835a      	strh	r2, [r3, #26]

	settings.retain.eth_sett.mask0 = NETMASK_ADDRESS[0];
 800b4d4:	4b18      	ldr	r3, [pc, #96]	; (800b538 <LWIP_ReInit+0x180>)
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	4b15      	ldr	r3, [pc, #84]	; (800b530 <LWIP_ReInit+0x178>)
 800b4dc:	839a      	strh	r2, [r3, #28]
	settings.retain.eth_sett.mask1 = NETMASK_ADDRESS[1];
 800b4de:	4b16      	ldr	r3, [pc, #88]	; (800b538 <LWIP_ReInit+0x180>)
 800b4e0:	785b      	ldrb	r3, [r3, #1]
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	4b12      	ldr	r3, [pc, #72]	; (800b530 <LWIP_ReInit+0x178>)
 800b4e6:	83da      	strh	r2, [r3, #30]
	settings.retain.eth_sett.mask2 = NETMASK_ADDRESS[2];
 800b4e8:	4b13      	ldr	r3, [pc, #76]	; (800b538 <LWIP_ReInit+0x180>)
 800b4ea:	789b      	ldrb	r3, [r3, #2]
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	4b10      	ldr	r3, [pc, #64]	; (800b530 <LWIP_ReInit+0x178>)
 800b4f0:	841a      	strh	r2, [r3, #32]
	settings.retain.eth_sett.mask3 = NETMASK_ADDRESS[3];
 800b4f2:	4b11      	ldr	r3, [pc, #68]	; (800b538 <LWIP_ReInit+0x180>)
 800b4f4:	78db      	ldrb	r3, [r3, #3]
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	4b0d      	ldr	r3, [pc, #52]	; (800b530 <LWIP_ReInit+0x178>)
 800b4fa:	845a      	strh	r2, [r3, #34]	; 0x22

	settings.retain.eth_sett.gateway0 =  GATEWAY_ADDRESS[0];
 800b4fc:	4b0f      	ldr	r3, [pc, #60]	; (800b53c <LWIP_ReInit+0x184>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	b29a      	uxth	r2, r3
 800b502:	4b0b      	ldr	r3, [pc, #44]	; (800b530 <LWIP_ReInit+0x178>)
 800b504:	849a      	strh	r2, [r3, #36]	; 0x24
	settings.retain.eth_sett.gateway1 =  GATEWAY_ADDRESS[1];
 800b506:	4b0d      	ldr	r3, [pc, #52]	; (800b53c <LWIP_ReInit+0x184>)
 800b508:	785b      	ldrb	r3, [r3, #1]
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	4b08      	ldr	r3, [pc, #32]	; (800b530 <LWIP_ReInit+0x178>)
 800b50e:	84da      	strh	r2, [r3, #38]	; 0x26
	settings.retain.eth_sett.gateway2 =  GATEWAY_ADDRESS[2];
 800b510:	4b0a      	ldr	r3, [pc, #40]	; (800b53c <LWIP_ReInit+0x184>)
 800b512:	789b      	ldrb	r3, [r3, #2]
 800b514:	b29a      	uxth	r2, r3
 800b516:	4b06      	ldr	r3, [pc, #24]	; (800b530 <LWIP_ReInit+0x178>)
 800b518:	851a      	strh	r2, [r3, #40]	; 0x28
	settings.retain.eth_sett.gateway3 =  GATEWAY_ADDRESS[3];
 800b51a:	4b08      	ldr	r3, [pc, #32]	; (800b53c <LWIP_ReInit+0x184>)
 800b51c:	78db      	ldrb	r3, [r3, #3]
 800b51e:	b29a      	uxth	r2, r3
 800b520:	4b03      	ldr	r3, [pc, #12]	; (800b530 <LWIP_ReInit+0x178>)
 800b522:	855a      	strh	r2, [r3, #42]	; 0x2a


}
 800b524:	bf00      	nop
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	20000bc0 	.word	0x20000bc0
 800b534:	2000108c 	.word	0x2000108c
 800b538:	20001090 	.word	0x20001090
 800b53c:	20001094 	.word	0x20001094

0800b540 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b546:	4b99      	ldr	r3, [pc, #612]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b548:	22c0      	movs	r2, #192	; 0xc0
 800b54a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b54c:	4b97      	ldr	r3, [pc, #604]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b54e:	22a8      	movs	r2, #168	; 0xa8
 800b550:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 800b552:	4b96      	ldr	r3, [pc, #600]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b554:	2264      	movs	r2, #100	; 0x64
 800b556:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 177;
 800b558:	4b94      	ldr	r3, [pc, #592]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b55a:	22b1      	movs	r2, #177	; 0xb1
 800b55c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b55e:	4b94      	ldr	r3, [pc, #592]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b560:	22ff      	movs	r2, #255	; 0xff
 800b562:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b564:	4b92      	ldr	r3, [pc, #584]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b566:	22ff      	movs	r2, #255	; 0xff
 800b568:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b56a:	4b91      	ldr	r3, [pc, #580]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b56c:	22ff      	movs	r2, #255	; 0xff
 800b56e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b570:	4b8f      	ldr	r3, [pc, #572]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b572:	2200      	movs	r2, #0
 800b574:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b576:	4b8f      	ldr	r3, [pc, #572]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b578:	22c0      	movs	r2, #192	; 0xc0
 800b57a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b57c:	4b8d      	ldr	r3, [pc, #564]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b57e:	22a8      	movs	r2, #168	; 0xa8
 800b580:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 800b582:	4b8c      	ldr	r3, [pc, #560]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b584:	2264      	movs	r2, #100	; 0x64
 800b586:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b588:	4b8a      	ldr	r3, [pc, #552]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b58a:	2201      	movs	r2, #1
 800b58c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  LWIP_ReInit();
 800b58e:	f7ff ff13 	bl	800b3b8 <LWIP_ReInit>
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b592:	2100      	movs	r1, #0
 800b594:	2000      	movs	r0, #0
 800b596:	f005 ff47 	bl	8011428 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b59a:	4b84      	ldr	r3, [pc, #528]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	061a      	lsls	r2, r3, #24
 800b5a0:	4b82      	ldr	r3, [pc, #520]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b5a2:	785b      	ldrb	r3, [r3, #1]
 800b5a4:	041b      	lsls	r3, r3, #16
 800b5a6:	431a      	orrs	r2, r3
 800b5a8:	4b80      	ldr	r3, [pc, #512]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b5aa:	789b      	ldrb	r3, [r3, #2]
 800b5ac:	021b      	lsls	r3, r3, #8
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	4a7e      	ldr	r2, [pc, #504]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b5b2:	78d2      	ldrb	r2, [r2, #3]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	061a      	lsls	r2, r3, #24
 800b5b8:	4b7c      	ldr	r3, [pc, #496]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	0619      	lsls	r1, r3, #24
 800b5be:	4b7b      	ldr	r3, [pc, #492]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b5c0:	785b      	ldrb	r3, [r3, #1]
 800b5c2:	041b      	lsls	r3, r3, #16
 800b5c4:	4319      	orrs	r1, r3
 800b5c6:	4b79      	ldr	r3, [pc, #484]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b5c8:	789b      	ldrb	r3, [r3, #2]
 800b5ca:	021b      	lsls	r3, r3, #8
 800b5cc:	430b      	orrs	r3, r1
 800b5ce:	4977      	ldr	r1, [pc, #476]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b5d0:	78c9      	ldrb	r1, [r1, #3]
 800b5d2:	430b      	orrs	r3, r1
 800b5d4:	021b      	lsls	r3, r3, #8
 800b5d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b5da:	431a      	orrs	r2, r3
 800b5dc:	4b73      	ldr	r3, [pc, #460]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	0619      	lsls	r1, r3, #24
 800b5e2:	4b72      	ldr	r3, [pc, #456]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b5e4:	785b      	ldrb	r3, [r3, #1]
 800b5e6:	041b      	lsls	r3, r3, #16
 800b5e8:	4319      	orrs	r1, r3
 800b5ea:	4b70      	ldr	r3, [pc, #448]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b5ec:	789b      	ldrb	r3, [r3, #2]
 800b5ee:	021b      	lsls	r3, r3, #8
 800b5f0:	430b      	orrs	r3, r1
 800b5f2:	496e      	ldr	r1, [pc, #440]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b5f4:	78c9      	ldrb	r1, [r1, #3]
 800b5f6:	430b      	orrs	r3, r1
 800b5f8:	0a1b      	lsrs	r3, r3, #8
 800b5fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b5fe:	431a      	orrs	r2, r3
 800b600:	4b6a      	ldr	r3, [pc, #424]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	0619      	lsls	r1, r3, #24
 800b606:	4b69      	ldr	r3, [pc, #420]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b608:	785b      	ldrb	r3, [r3, #1]
 800b60a:	041b      	lsls	r3, r3, #16
 800b60c:	4319      	orrs	r1, r3
 800b60e:	4b67      	ldr	r3, [pc, #412]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b610:	789b      	ldrb	r3, [r3, #2]
 800b612:	021b      	lsls	r3, r3, #8
 800b614:	430b      	orrs	r3, r1
 800b616:	4965      	ldr	r1, [pc, #404]	; (800b7ac <MX_LWIP_Init+0x26c>)
 800b618:	78c9      	ldrb	r1, [r1, #3]
 800b61a:	430b      	orrs	r3, r1
 800b61c:	0e1b      	lsrs	r3, r3, #24
 800b61e:	4313      	orrs	r3, r2
 800b620:	4a65      	ldr	r2, [pc, #404]	; (800b7b8 <MX_LWIP_Init+0x278>)
 800b622:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b624:	4b62      	ldr	r3, [pc, #392]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	061a      	lsls	r2, r3, #24
 800b62a:	4b61      	ldr	r3, [pc, #388]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b62c:	785b      	ldrb	r3, [r3, #1]
 800b62e:	041b      	lsls	r3, r3, #16
 800b630:	431a      	orrs	r2, r3
 800b632:	4b5f      	ldr	r3, [pc, #380]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b634:	789b      	ldrb	r3, [r3, #2]
 800b636:	021b      	lsls	r3, r3, #8
 800b638:	4313      	orrs	r3, r2
 800b63a:	4a5d      	ldr	r2, [pc, #372]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b63c:	78d2      	ldrb	r2, [r2, #3]
 800b63e:	4313      	orrs	r3, r2
 800b640:	061a      	lsls	r2, r3, #24
 800b642:	4b5b      	ldr	r3, [pc, #364]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	0619      	lsls	r1, r3, #24
 800b648:	4b59      	ldr	r3, [pc, #356]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b64a:	785b      	ldrb	r3, [r3, #1]
 800b64c:	041b      	lsls	r3, r3, #16
 800b64e:	4319      	orrs	r1, r3
 800b650:	4b57      	ldr	r3, [pc, #348]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b652:	789b      	ldrb	r3, [r3, #2]
 800b654:	021b      	lsls	r3, r3, #8
 800b656:	430b      	orrs	r3, r1
 800b658:	4955      	ldr	r1, [pc, #340]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b65a:	78c9      	ldrb	r1, [r1, #3]
 800b65c:	430b      	orrs	r3, r1
 800b65e:	021b      	lsls	r3, r3, #8
 800b660:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b664:	431a      	orrs	r2, r3
 800b666:	4b52      	ldr	r3, [pc, #328]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	0619      	lsls	r1, r3, #24
 800b66c:	4b50      	ldr	r3, [pc, #320]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b66e:	785b      	ldrb	r3, [r3, #1]
 800b670:	041b      	lsls	r3, r3, #16
 800b672:	4319      	orrs	r1, r3
 800b674:	4b4e      	ldr	r3, [pc, #312]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b676:	789b      	ldrb	r3, [r3, #2]
 800b678:	021b      	lsls	r3, r3, #8
 800b67a:	430b      	orrs	r3, r1
 800b67c:	494c      	ldr	r1, [pc, #304]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b67e:	78c9      	ldrb	r1, [r1, #3]
 800b680:	430b      	orrs	r3, r1
 800b682:	0a1b      	lsrs	r3, r3, #8
 800b684:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b688:	431a      	orrs	r2, r3
 800b68a:	4b49      	ldr	r3, [pc, #292]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	0619      	lsls	r1, r3, #24
 800b690:	4b47      	ldr	r3, [pc, #284]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b692:	785b      	ldrb	r3, [r3, #1]
 800b694:	041b      	lsls	r3, r3, #16
 800b696:	4319      	orrs	r1, r3
 800b698:	4b45      	ldr	r3, [pc, #276]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b69a:	789b      	ldrb	r3, [r3, #2]
 800b69c:	021b      	lsls	r3, r3, #8
 800b69e:	430b      	orrs	r3, r1
 800b6a0:	4943      	ldr	r1, [pc, #268]	; (800b7b0 <MX_LWIP_Init+0x270>)
 800b6a2:	78c9      	ldrb	r1, [r1, #3]
 800b6a4:	430b      	orrs	r3, r1
 800b6a6:	0e1b      	lsrs	r3, r3, #24
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	4a44      	ldr	r2, [pc, #272]	; (800b7bc <MX_LWIP_Init+0x27c>)
 800b6ac:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b6ae:	4b41      	ldr	r3, [pc, #260]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	061a      	lsls	r2, r3, #24
 800b6b4:	4b3f      	ldr	r3, [pc, #252]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b6b6:	785b      	ldrb	r3, [r3, #1]
 800b6b8:	041b      	lsls	r3, r3, #16
 800b6ba:	431a      	orrs	r2, r3
 800b6bc:	4b3d      	ldr	r3, [pc, #244]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b6be:	789b      	ldrb	r3, [r3, #2]
 800b6c0:	021b      	lsls	r3, r3, #8
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	4a3b      	ldr	r2, [pc, #236]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b6c6:	78d2      	ldrb	r2, [r2, #3]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	061a      	lsls	r2, r3, #24
 800b6cc:	4b39      	ldr	r3, [pc, #228]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	0619      	lsls	r1, r3, #24
 800b6d2:	4b38      	ldr	r3, [pc, #224]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b6d4:	785b      	ldrb	r3, [r3, #1]
 800b6d6:	041b      	lsls	r3, r3, #16
 800b6d8:	4319      	orrs	r1, r3
 800b6da:	4b36      	ldr	r3, [pc, #216]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b6dc:	789b      	ldrb	r3, [r3, #2]
 800b6de:	021b      	lsls	r3, r3, #8
 800b6e0:	430b      	orrs	r3, r1
 800b6e2:	4934      	ldr	r1, [pc, #208]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b6e4:	78c9      	ldrb	r1, [r1, #3]
 800b6e6:	430b      	orrs	r3, r1
 800b6e8:	021b      	lsls	r3, r3, #8
 800b6ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b6ee:	431a      	orrs	r2, r3
 800b6f0:	4b30      	ldr	r3, [pc, #192]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	0619      	lsls	r1, r3, #24
 800b6f6:	4b2f      	ldr	r3, [pc, #188]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b6f8:	785b      	ldrb	r3, [r3, #1]
 800b6fa:	041b      	lsls	r3, r3, #16
 800b6fc:	4319      	orrs	r1, r3
 800b6fe:	4b2d      	ldr	r3, [pc, #180]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b700:	789b      	ldrb	r3, [r3, #2]
 800b702:	021b      	lsls	r3, r3, #8
 800b704:	430b      	orrs	r3, r1
 800b706:	492b      	ldr	r1, [pc, #172]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b708:	78c9      	ldrb	r1, [r1, #3]
 800b70a:	430b      	orrs	r3, r1
 800b70c:	0a1b      	lsrs	r3, r3, #8
 800b70e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b712:	431a      	orrs	r2, r3
 800b714:	4b27      	ldr	r3, [pc, #156]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	0619      	lsls	r1, r3, #24
 800b71a:	4b26      	ldr	r3, [pc, #152]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b71c:	785b      	ldrb	r3, [r3, #1]
 800b71e:	041b      	lsls	r3, r3, #16
 800b720:	4319      	orrs	r1, r3
 800b722:	4b24      	ldr	r3, [pc, #144]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b724:	789b      	ldrb	r3, [r3, #2]
 800b726:	021b      	lsls	r3, r3, #8
 800b728:	430b      	orrs	r3, r1
 800b72a:	4922      	ldr	r1, [pc, #136]	; (800b7b4 <MX_LWIP_Init+0x274>)
 800b72c:	78c9      	ldrb	r1, [r1, #3]
 800b72e:	430b      	orrs	r3, r1
 800b730:	0e1b      	lsrs	r3, r3, #24
 800b732:	4313      	orrs	r3, r2
 800b734:	4a22      	ldr	r2, [pc, #136]	; (800b7c0 <MX_LWIP_Init+0x280>)
 800b736:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b738:	4b22      	ldr	r3, [pc, #136]	; (800b7c4 <MX_LWIP_Init+0x284>)
 800b73a:	9302      	str	r3, [sp, #8]
 800b73c:	4b22      	ldr	r3, [pc, #136]	; (800b7c8 <MX_LWIP_Init+0x288>)
 800b73e:	9301      	str	r3, [sp, #4]
 800b740:	2300      	movs	r3, #0
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	4b1e      	ldr	r3, [pc, #120]	; (800b7c0 <MX_LWIP_Init+0x280>)
 800b746:	4a1d      	ldr	r2, [pc, #116]	; (800b7bc <MX_LWIP_Init+0x27c>)
 800b748:	491b      	ldr	r1, [pc, #108]	; (800b7b8 <MX_LWIP_Init+0x278>)
 800b74a:	4820      	ldr	r0, [pc, #128]	; (800b7cc <MX_LWIP_Init+0x28c>)
 800b74c:	f006 fbf0 	bl	8011f30 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b750:	481e      	ldr	r0, [pc, #120]	; (800b7cc <MX_LWIP_Init+0x28c>)
 800b752:	f006 fd9f 	bl	8012294 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b756:	4b1d      	ldr	r3, [pc, #116]	; (800b7cc <MX_LWIP_Init+0x28c>)
 800b758:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b75c:	089b      	lsrs	r3, r3, #2
 800b75e:	f003 0301 	and.w	r3, r3, #1
 800b762:	b2db      	uxtb	r3, r3
 800b764:	2b00      	cmp	r3, #0
 800b766:	d003      	beq.n	800b770 <MX_LWIP_Init+0x230>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b768:	4818      	ldr	r0, [pc, #96]	; (800b7cc <MX_LWIP_Init+0x28c>)
 800b76a:	f006 fda3 	bl	80122b4 <netif_set_up>
 800b76e:	e002      	b.n	800b776 <MX_LWIP_Init+0x236>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800b770:	4816      	ldr	r0, [pc, #88]	; (800b7cc <MX_LWIP_Init+0x28c>)
 800b772:	f006 fe0b 	bl	801238c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800b776:	4916      	ldr	r1, [pc, #88]	; (800b7d0 <MX_LWIP_Init+0x290>)
 800b778:	4814      	ldr	r0, [pc, #80]	; (800b7cc <MX_LWIP_Init+0x28c>)
 800b77a:	f006 fe39 	bl	80123f0 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800b77e:	2300      	movs	r3, #0
 800b780:	603b      	str	r3, [r7, #0]
 800b782:	2300      	movs	r3, #0
 800b784:	607b      	str	r3, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800b786:	463b      	mov	r3, r7
 800b788:	2101      	movs	r1, #1
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 fd34 	bl	800c1f8 <osSemaphoreCreate>
 800b790:	4603      	mov	r3, r0
 800b792:	4a10      	ldr	r2, [pc, #64]	; (800b7d4 <MX_LWIP_Init+0x294>)
 800b794:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800b796:	4b10      	ldr	r3, [pc, #64]	; (800b7d8 <MX_LWIP_Init+0x298>)
 800b798:	4a0c      	ldr	r2, [pc, #48]	; (800b7cc <MX_LWIP_Init+0x28c>)
 800b79a:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800b79c:	4b0d      	ldr	r3, [pc, #52]	; (800b7d4 <MX_LWIP_Init+0x294>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a0d      	ldr	r2, [pc, #52]	; (800b7d8 <MX_LWIP_Init+0x298>)
 800b7a2:	6053      	str	r3, [r2, #4]
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	2000108c 	.word	0x2000108c
 800b7b0:	20001090 	.word	0x20001090
 800b7b4:	20001094 	.word	0x20001094
 800b7b8:	20001080 	.word	0x20001080
 800b7bc:	20001084 	.word	0x20001084
 800b7c0:	20001088 	.word	0x20001088
 800b7c4:	08011339 	.word	0x08011339
 800b7c8:	0800be05 	.word	0x0800be05
 800b7cc:	2000104c 	.word	0x2000104c
 800b7d0:	0800be71 	.word	0x0800be71
 800b7d4:	20001040 	.word	0x20001040
 800b7d8:	20001044 	.word	0x20001044

0800b7dc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08e      	sub	sp, #56	; 0x38
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	601a      	str	r2, [r3, #0]
 800b7ec:	605a      	str	r2, [r3, #4]
 800b7ee:	609a      	str	r2, [r3, #8]
 800b7f0:	60da      	str	r2, [r3, #12]
 800b7f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a4a      	ldr	r2, [pc, #296]	; (800b924 <HAL_ETH_MspInit+0x148>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	f040 808d 	bne.w	800b91a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b800:	2300      	movs	r3, #0
 800b802:	623b      	str	r3, [r7, #32]
 800b804:	4b48      	ldr	r3, [pc, #288]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b808:	4a47      	ldr	r2, [pc, #284]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b80a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b80e:	6313      	str	r3, [r2, #48]	; 0x30
 800b810:	4b45      	ldr	r3, [pc, #276]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b818:	623b      	str	r3, [r7, #32]
 800b81a:	6a3b      	ldr	r3, [r7, #32]
 800b81c:	2300      	movs	r3, #0
 800b81e:	61fb      	str	r3, [r7, #28]
 800b820:	4b41      	ldr	r3, [pc, #260]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b824:	4a40      	ldr	r2, [pc, #256]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b826:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b82a:	6313      	str	r3, [r2, #48]	; 0x30
 800b82c:	4b3e      	ldr	r3, [pc, #248]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b830:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b834:	61fb      	str	r3, [r7, #28]
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	2300      	movs	r3, #0
 800b83a:	61bb      	str	r3, [r7, #24]
 800b83c:	4b3a      	ldr	r3, [pc, #232]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b840:	4a39      	ldr	r2, [pc, #228]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b842:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b846:	6313      	str	r3, [r2, #48]	; 0x30
 800b848:	4b37      	ldr	r3, [pc, #220]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b84c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b850:	61bb      	str	r3, [r7, #24]
 800b852:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b854:	2300      	movs	r3, #0
 800b856:	617b      	str	r3, [r7, #20]
 800b858:	4b33      	ldr	r3, [pc, #204]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b85c:	4a32      	ldr	r2, [pc, #200]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b85e:	f043 0304 	orr.w	r3, r3, #4
 800b862:	6313      	str	r3, [r2, #48]	; 0x30
 800b864:	4b30      	ldr	r3, [pc, #192]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b868:	f003 0304 	and.w	r3, r3, #4
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b870:	2300      	movs	r3, #0
 800b872:	613b      	str	r3, [r7, #16]
 800b874:	4b2c      	ldr	r3, [pc, #176]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b878:	4a2b      	ldr	r2, [pc, #172]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b87a:	f043 0301 	orr.w	r3, r3, #1
 800b87e:	6313      	str	r3, [r2, #48]	; 0x30
 800b880:	4b29      	ldr	r3, [pc, #164]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b884:	f003 0301 	and.w	r3, r3, #1
 800b888:	613b      	str	r3, [r7, #16]
 800b88a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b88c:	2300      	movs	r3, #0
 800b88e:	60fb      	str	r3, [r7, #12]
 800b890:	4b25      	ldr	r3, [pc, #148]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b894:	4a24      	ldr	r2, [pc, #144]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b896:	f043 0302 	orr.w	r3, r3, #2
 800b89a:	6313      	str	r3, [r2, #48]	; 0x30
 800b89c:	4b22      	ldr	r3, [pc, #136]	; (800b928 <HAL_ETH_MspInit+0x14c>)
 800b89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a0:	f003 0302 	and.w	r3, r3, #2
 800b8a4:	60fb      	str	r3, [r7, #12]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b8a8:	2332      	movs	r3, #50	; 0x32
 800b8aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b8b8:	230b      	movs	r3, #11
 800b8ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b8bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	481a      	ldr	r0, [pc, #104]	; (800b92c <HAL_ETH_MspInit+0x150>)
 800b8c4:	f7fc f8ca 	bl	8007a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800b8c8:	2386      	movs	r3, #134	; 0x86
 800b8ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8d4:	2303      	movs	r3, #3
 800b8d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b8d8:	230b      	movs	r3, #11
 800b8da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4813      	ldr	r0, [pc, #76]	; (800b930 <HAL_ETH_MspInit+0x154>)
 800b8e4:	f7fc f8ba 	bl	8007a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800b8e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b8ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b8fa:	230b      	movs	r3, #11
 800b8fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b8fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b902:	4619      	mov	r1, r3
 800b904:	480b      	ldr	r0, [pc, #44]	; (800b934 <HAL_ETH_MspInit+0x158>)
 800b906:	f7fc f8a9 	bl	8007a5c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b90a:	2200      	movs	r2, #0
 800b90c:	2105      	movs	r1, #5
 800b90e:	203d      	movs	r0, #61	; 0x3d
 800b910:	f7fa fa7e 	bl	8005e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b914:	203d      	movs	r0, #61	; 0x3d
 800b916:	f7fa fa97 	bl	8005e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b91a:	bf00      	nop
 800b91c:	3738      	adds	r7, #56	; 0x38
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	40028000 	.word	0x40028000
 800b928:	40023800 	.word	0x40023800
 800b92c:	40020800 	.word	0x40020800
 800b930:	40020000 	.word	0x40020000
 800b934:	40020400 	.word	0x40020400

0800b938 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800b940:	4b04      	ldr	r3, [pc, #16]	; (800b954 <HAL_ETH_RxCpltCallback+0x1c>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4618      	mov	r0, r3
 800b946:	f000 fcd7 	bl	800c2f8 <osSemaphoreRelease>
}
 800b94a:	bf00      	nop
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	20004138 	.word	0x20004138

0800b958 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b958:	b5b0      	push	{r4, r5, r7, lr}
 800b95a:	b090      	sub	sp, #64	; 0x40
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800b960:	2300      	movs	r3, #0
 800b962:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b964:	4b5f      	ldr	r3, [pc, #380]	; (800bae4 <low_level_init+0x18c>)
 800b966:	4a60      	ldr	r2, [pc, #384]	; (800bae8 <low_level_init+0x190>)
 800b968:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 800b96a:	4b5e      	ldr	r3, [pc, #376]	; (800bae4 <low_level_init+0x18c>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800b970:	4b5c      	ldr	r3, [pc, #368]	; (800bae4 <low_level_init+0x18c>)
 800b972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b976:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800b978:	4b5a      	ldr	r3, [pc, #360]	; (800bae4 <low_level_init+0x18c>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800b97e:	4b59      	ldr	r3, [pc, #356]	; (800bae4 <low_level_init+0x18c>)
 800b980:	2200      	movs	r2, #0
 800b982:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800b984:	2300      	movs	r3, #0
 800b986:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800b98a:	2380      	movs	r3, #128	; 0x80
 800b98c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800b990:	23e1      	movs	r3, #225	; 0xe1
 800b992:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800b996:	2300      	movs	r3, #0
 800b998:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x13;
 800b99c:	2313      	movs	r3, #19
 800b99e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800b9a8:	4a4e      	ldr	r2, [pc, #312]	; (800bae4 <low_level_init+0x18c>)
 800b9aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9ae:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800b9b0:	4b4c      	ldr	r3, [pc, #304]	; (800bae4 <low_level_init+0x18c>)
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b9b6:	4b4b      	ldr	r3, [pc, #300]	; (800bae4 <low_level_init+0x18c>)
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b9bc:	4b49      	ldr	r3, [pc, #292]	; (800bae4 <low_level_init+0x18c>)
 800b9be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b9c2:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b9c4:	4847      	ldr	r0, [pc, #284]	; (800bae4 <low_level_init+0x18c>)
 800b9c6:	f7fa febb 	bl	8006740 <HAL_ETH_Init>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800b9d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d108      	bne.n	800b9ea <low_level_init+0x92>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9de:	f043 0304 	orr.w	r3, r3, #4
 800b9e2:	b2da      	uxtb	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b9ea:	2304      	movs	r3, #4
 800b9ec:	4a3f      	ldr	r2, [pc, #252]	; (800baec <low_level_init+0x194>)
 800b9ee:	4940      	ldr	r1, [pc, #256]	; (800baf0 <low_level_init+0x198>)
 800b9f0:	483c      	ldr	r0, [pc, #240]	; (800bae4 <low_level_init+0x18c>)
 800b9f2:	f7fb f83f 	bl	8006a74 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800b9f6:	2304      	movs	r3, #4
 800b9f8:	4a3e      	ldr	r2, [pc, #248]	; (800baf4 <low_level_init+0x19c>)
 800b9fa:	493f      	ldr	r1, [pc, #252]	; (800baf8 <low_level_init+0x1a0>)
 800b9fc:	4839      	ldr	r0, [pc, #228]	; (800bae4 <low_level_init+0x18c>)
 800b9fe:	f7fb f8a1 	bl	8006b44 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2206      	movs	r2, #6
 800ba06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ba0a:	4b36      	ldr	r3, [pc, #216]	; (800bae4 <low_level_init+0x18c>)
 800ba0c:	695b      	ldr	r3, [r3, #20]
 800ba0e:	781a      	ldrb	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ba16:	4b33      	ldr	r3, [pc, #204]	; (800bae4 <low_level_init+0x18c>)
 800ba18:	695b      	ldr	r3, [r3, #20]
 800ba1a:	785a      	ldrb	r2, [r3, #1]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ba22:	4b30      	ldr	r3, [pc, #192]	; (800bae4 <low_level_init+0x18c>)
 800ba24:	695b      	ldr	r3, [r3, #20]
 800ba26:	789a      	ldrb	r2, [r3, #2]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ba2e:	4b2d      	ldr	r3, [pc, #180]	; (800bae4 <low_level_init+0x18c>)
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	78da      	ldrb	r2, [r3, #3]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ba3a:	4b2a      	ldr	r3, [pc, #168]	; (800bae4 <low_level_init+0x18c>)
 800ba3c:	695b      	ldr	r3, [r3, #20]
 800ba3e:	791a      	ldrb	r2, [r3, #4]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ba46:	4b27      	ldr	r3, [pc, #156]	; (800bae4 <low_level_init+0x18c>)
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	795a      	ldrb	r2, [r3, #5]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ba58:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba60:	f043 030a 	orr.w	r3, r3, #10
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba70:	2300      	movs	r3, #0
 800ba72:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ba74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba78:	2101      	movs	r1, #1
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 fbbc 	bl	800c1f8 <osSemaphoreCreate>
 800ba80:	4603      	mov	r3, r0
 800ba82:	4a1e      	ldr	r2, [pc, #120]	; (800bafc <low_level_init+0x1a4>)
 800ba84:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ba86:	4b1e      	ldr	r3, [pc, #120]	; (800bb00 <low_level_init+0x1a8>)
 800ba88:	f107 040c 	add.w	r4, r7, #12
 800ba8c:	461d      	mov	r5, r3
 800ba8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ba96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800ba9a:	f107 030c 	add.w	r3, r7, #12
 800ba9e:	6879      	ldr	r1, [r7, #4]
 800baa0:	4618      	mov	r0, r3
 800baa2:	f000 faac 	bl	800bffe <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800baa6:	480f      	ldr	r0, [pc, #60]	; (800bae4 <low_level_init+0x18c>)
 800baa8:	f7fb fb70 	bl	800718c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800baac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bab0:	461a      	mov	r2, r3
 800bab2:	211d      	movs	r1, #29
 800bab4:	480b      	ldr	r0, [pc, #44]	; (800bae4 <low_level_init+0x18c>)
 800bab6:	f7fb fa9b 	bl	8006ff0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800baba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babc:	f043 030b 	orr.w	r3, r3, #11
 800bac0:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac4:	461a      	mov	r2, r3
 800bac6:	211d      	movs	r1, #29
 800bac8:	4806      	ldr	r0, [pc, #24]	; (800bae4 <low_level_init+0x18c>)
 800baca:	f7fb faf9 	bl	80070c0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800bace:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bad2:	461a      	mov	r2, r3
 800bad4:	211d      	movs	r1, #29
 800bad6:	4803      	ldr	r0, [pc, #12]	; (800bae4 <low_level_init+0x18c>)
 800bad8:	f7fb fa8a 	bl	8006ff0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800badc:	bf00      	nop
 800bade:	3740      	adds	r7, #64	; 0x40
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bdb0      	pop	{r4, r5, r7, pc}
 800bae4:	2000413c 	.word	0x2000413c
 800bae8:	40028000 	.word	0x40028000
 800baec:	20002968 	.word	0x20002968
 800baf0:	20001118 	.word	0x20001118
 800baf4:	20001198 	.word	0x20001198
 800baf8:	20001098 	.word	0x20001098
 800bafc:	20004138 	.word	0x20004138
 800bb00:	0801e06c 	.word	0x0801e06c

0800bb04 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b08a      	sub	sp, #40	; 0x28
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800bb0e:	4b4b      	ldr	r3, [pc, #300]	; (800bc3c <low_level_output+0x138>)
 800bb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800bb22:	2300      	movs	r3, #0
 800bb24:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800bb26:	4b45      	ldr	r3, [pc, #276]	; (800bc3c <low_level_output+0x138>)
 800bb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	623b      	str	r3, [r7, #32]
 800bb34:	e05a      	b.n	800bbec <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	da03      	bge.n	800bb46 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800bb3e:	23f8      	movs	r3, #248	; 0xf8
 800bb40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800bb44:	e05c      	b.n	800bc00 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800bb46:	6a3b      	ldr	r3, [r7, #32]
 800bb48:	895b      	ldrh	r3, [r3, #10]
 800bb4a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bb50:	e02f      	b.n	800bbb2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800bb52:	69fa      	ldr	r2, [r7, #28]
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	18d0      	adds	r0, r2, r3
 800bb58:	6a3b      	ldr	r3, [r7, #32]
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	18d1      	adds	r1, r2, r3
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800bb66:	3304      	adds	r3, #4
 800bb68:	461a      	mov	r2, r3
 800bb6a:	f010 fe93 	bl	801c894 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	da03      	bge.n	800bb84 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800bb7c:	23f8      	movs	r3, #248	; 0xf8
 800bb7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800bb82:	e03d      	b.n	800bc00 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	4413      	add	r3, r2
 800bb90:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800bb94:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800bb96:	68ba      	ldr	r2, [r7, #8]
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	1ad3      	subs	r3, r2, r3
 800bb9c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800bba0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	1ad3      	subs	r3, r2, r3
 800bba8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800bbac:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d8c8      	bhi.n	800bb52 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800bbc0:	69fa      	ldr	r2, [r7, #28]
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	18d0      	adds	r0, r2, r3
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	685a      	ldr	r2, [r3, #4]
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	4413      	add	r3, r2
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	f010 fe5f 	bl	801c894 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	4413      	add	r3, r2
 800bbdc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800bbe6:	6a3b      	ldr	r3, [r7, #32]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	623b      	str	r3, [r7, #32]
 800bbec:	6a3b      	ldr	r3, [r7, #32]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1a1      	bne.n	800bb36 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800bbf2:	6979      	ldr	r1, [r7, #20]
 800bbf4:	4811      	ldr	r0, [pc, #68]	; (800bc3c <low_level_output+0x138>)
 800bbf6:	f7fb f811 	bl	8006c1c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800bc00:	4b0e      	ldr	r3, [pc, #56]	; (800bc3c <low_level_output+0x138>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	f003 0320 	and.w	r3, r3, #32
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00d      	beq.n	800bc2e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800bc12:	4b0a      	ldr	r3, [pc, #40]	; (800bc3c <low_level_output+0x138>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	2320      	movs	r3, #32
 800bc1e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800bc20:	4b06      	ldr	r3, [pc, #24]	; (800bc3c <low_level_output+0x138>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc28:	461a      	mov	r2, r3
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800bc2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3728      	adds	r7, #40	; 0x28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	2000413c 	.word	0x2000413c

0800bc40 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08c      	sub	sp, #48	; 0x30
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800bc50:	2300      	movs	r3, #0
 800bc52:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800bc54:	2300      	movs	r3, #0
 800bc56:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800bc64:	484e      	ldr	r0, [pc, #312]	; (800bda0 <low_level_input+0x160>)
 800bc66:	f7fb f8c3 	bl	8006df0 <HAL_ETH_GetReceivedFrame_IT>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d001      	beq.n	800bc74 <low_level_input+0x34>

    return NULL;
 800bc70:	2300      	movs	r3, #0
 800bc72:	e091      	b.n	800bd98 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800bc74:	4b4a      	ldr	r3, [pc, #296]	; (800bda0 <low_level_input+0x160>)
 800bc76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc78:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800bc7a:	4b49      	ldr	r3, [pc, #292]	; (800bda0 <low_level_input+0x160>)
 800bc7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800bc80:	89fb      	ldrh	r3, [r7, #14]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d007      	beq.n	800bc96 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800bc86:	89fb      	ldrh	r3, [r7, #14]
 800bc88:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	2000      	movs	r0, #0
 800bc90:	f006 fc78 	bl	8012584 <pbuf_alloc>
 800bc94:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800bc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d04b      	beq.n	800bd34 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bc9c:	4b40      	ldr	r3, [pc, #256]	; (800bda0 <low_level_input+0x160>)
 800bc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800bca2:	2300      	movs	r3, #0
 800bca4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800bca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcaa:	e040      	b.n	800bd2e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800bcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcae:	895b      	ldrh	r3, [r3, #10]
 800bcb0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bcb6:	e021      	b.n	800bcfc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800bcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcba:	685a      	ldr	r2, [r3, #4]
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	18d0      	adds	r0, r2, r3
 800bcc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	18d1      	adds	r1, r2, r3
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800bccc:	3304      	adds	r3, #4
 800bcce:	461a      	mov	r2, r3
 800bcd0:	f010 fde0 	bl	801c894 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800bcd4:	6a3b      	ldr	r3, [r7, #32]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800bcda:	6a3b      	ldr	r3, [r7, #32]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800bce0:	69fa      	ldr	r2, [r7, #28]
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	4413      	add	r3, r2
 800bce6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800bcea:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800bcec:	69ba      	ldr	r2, [r7, #24]
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800bcf6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	4413      	add	r3, r2
 800bd02:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d8d6      	bhi.n	800bcb8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800bd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0c:	685a      	ldr	r2, [r3, #4]
 800bd0e:	69bb      	ldr	r3, [r7, #24]
 800bd10:	18d0      	adds	r0, r2, r3
 800bd12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	4413      	add	r3, r2
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	f010 fdba 	bl	801c894 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800bd20:	69fa      	ldr	r2, [r7, #28]
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	4413      	add	r3, r2
 800bd26:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1bb      	bne.n	800bcac <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bd34:	4b1a      	ldr	r3, [pc, #104]	; (800bda0 <low_level_input+0x160>)
 800bd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd38:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	613b      	str	r3, [r7, #16]
 800bd3e:	e00b      	b.n	800bd58 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800bd40:	6a3b      	ldr	r3, [r7, #32]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bd48:	6a3b      	ldr	r3, [r7, #32]
 800bd4a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800bd4c:	6a3b      	ldr	r3, [r7, #32]
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	3301      	adds	r3, #1
 800bd56:	613b      	str	r3, [r7, #16]
 800bd58:	4b11      	ldr	r3, [pc, #68]	; (800bda0 <low_level_input+0x160>)
 800bd5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d3ee      	bcc.n	800bd40 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800bd62:	4b0f      	ldr	r3, [pc, #60]	; (800bda0 <low_level_input+0x160>)
 800bd64:	2200      	movs	r2, #0
 800bd66:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800bd68:	4b0d      	ldr	r3, [pc, #52]	; (800bda0 <low_level_input+0x160>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd70:	695b      	ldr	r3, [r3, #20]
 800bd72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00d      	beq.n	800bd96 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800bd7a:	4b09      	ldr	r3, [pc, #36]	; (800bda0 <low_level_input+0x160>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd82:	461a      	mov	r2, r3
 800bd84:	2380      	movs	r3, #128	; 0x80
 800bd86:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800bd88:	4b05      	ldr	r3, [pc, #20]	; (800bda0 <low_level_input+0x160>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd90:	461a      	mov	r2, r3
 800bd92:	2300      	movs	r3, #0
 800bd94:	6093      	str	r3, [r2, #8]
  }
  return p;
 800bd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3730      	adds	r7, #48	; 0x30
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	2000413c 	.word	0x2000413c

0800bda4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800bdb0:	4b12      	ldr	r3, [pc, #72]	; (800bdfc <ethernetif_input+0x58>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f04f 31ff 	mov.w	r1, #4294967295
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f000 fa4f 	bl	800c25c <osSemaphoreWait>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d1f5      	bne.n	800bdb0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800bdc4:	480e      	ldr	r0, [pc, #56]	; (800be00 <ethernetif_input+0x5c>)
 800bdc6:	f010 fbd3 	bl	801c570 <sys_mutex_lock>
        p = low_level_input( netif );
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f7ff ff38 	bl	800bc40 <low_level_input>
 800bdd0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00a      	beq.n	800bdee <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	691b      	ldr	r3, [r3, #16]
 800bddc:	68f9      	ldr	r1, [r7, #12]
 800bdde:	68b8      	ldr	r0, [r7, #8]
 800bde0:	4798      	blx	r3
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d002      	beq.n	800bdee <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800bde8:	68b8      	ldr	r0, [r7, #8]
 800bdea:	f006 feaf 	bl	8012b4c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800bdee:	4804      	ldr	r0, [pc, #16]	; (800be00 <ethernetif_input+0x5c>)
 800bdf0:	f010 fbcd 	bl	801c58e <sys_mutex_unlock>
      } while(p!=NULL);
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1e4      	bne.n	800bdc4 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800bdfa:	e7d9      	b.n	800bdb0 <ethernetif_input+0xc>
 800bdfc:	20004138 	.word	0x20004138
 800be00:	2000a634 	.word	0x2000a634

0800be04 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d106      	bne.n	800be20 <ethernetif_init+0x1c>
 800be12:	4b0e      	ldr	r3, [pc, #56]	; (800be4c <ethernetif_init+0x48>)
 800be14:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800be18:	490d      	ldr	r1, [pc, #52]	; (800be50 <ethernetif_init+0x4c>)
 800be1a:	480e      	ldr	r0, [pc, #56]	; (800be54 <ethernetif_init+0x50>)
 800be1c:	f010 fe4a 	bl	801cab4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2273      	movs	r2, #115	; 0x73
 800be24:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2274      	movs	r2, #116	; 0x74
 800be2c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a09      	ldr	r2, [pc, #36]	; (800be58 <ethernetif_init+0x54>)
 800be34:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4a08      	ldr	r2, [pc, #32]	; (800be5c <ethernetif_init+0x58>)
 800be3a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f7ff fd8b 	bl	800b958 <low_level_init>

  return ERR_OK;
 800be42:	2300      	movs	r3, #0
}
 800be44:	4618      	mov	r0, r3
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	0801e088 	.word	0x0801e088
 800be50:	0801e0a4 	.word	0x0801e0a4
 800be54:	0801e0b4 	.word	0x0801e0b4
 800be58:	0801a579 	.word	0x0801a579
 800be5c:	0800bb05 	.word	0x0800bb05

0800be60 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800be64:	f7f9 fac0 	bl	80053e8 <HAL_GetTick>
 800be68:	4603      	mov	r3, r0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	bd80      	pop	{r7, pc}
	...

0800be70 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800be78:	2300      	movs	r3, #0
 800be7a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800be7c:	2300      	movs	r3, #0
 800be7e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be86:	089b      	lsrs	r3, r3, #2
 800be88:	f003 0301 	and.w	r3, r3, #1
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d05d      	beq.n	800bf4e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800be92:	4b34      	ldr	r3, [pc, #208]	; (800bf64 <ethernetif_update_config+0xf4>)
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d03f      	beq.n	800bf1a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800be9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800be9e:	2100      	movs	r1, #0
 800bea0:	4830      	ldr	r0, [pc, #192]	; (800bf64 <ethernetif_update_config+0xf4>)
 800bea2:	f7fb f90d 	bl	80070c0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800bea6:	f7f9 fa9f 	bl	80053e8 <HAL_GetTick>
 800beaa:	4603      	mov	r3, r0
 800beac:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800beae:	f107 0308 	add.w	r3, r7, #8
 800beb2:	461a      	mov	r2, r3
 800beb4:	2101      	movs	r1, #1
 800beb6:	482b      	ldr	r0, [pc, #172]	; (800bf64 <ethernetif_update_config+0xf4>)
 800beb8:	f7fb f89a 	bl	8006ff0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800bebc:	f7f9 fa94 	bl	80053e8 <HAL_GetTick>
 800bec0:	4602      	mov	r2, r0
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800beca:	d828      	bhi.n	800bf1e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	f003 0320 	and.w	r3, r3, #32
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d0eb      	beq.n	800beae <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800bed6:	f107 0308 	add.w	r3, r7, #8
 800beda:	461a      	mov	r2, r3
 800bedc:	2110      	movs	r1, #16
 800bede:	4821      	ldr	r0, [pc, #132]	; (800bf64 <ethernetif_update_config+0xf4>)
 800bee0:	f7fb f886 	bl	8006ff0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	f003 0304 	and.w	r3, r3, #4
 800beea:	2b00      	cmp	r3, #0
 800beec:	d004      	beq.n	800bef8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800beee:	4b1d      	ldr	r3, [pc, #116]	; (800bf64 <ethernetif_update_config+0xf4>)
 800bef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bef4:	60da      	str	r2, [r3, #12]
 800bef6:	e002      	b.n	800befe <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800bef8:	4b1a      	ldr	r3, [pc, #104]	; (800bf64 <ethernetif_update_config+0xf4>)
 800befa:	2200      	movs	r2, #0
 800befc:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	f003 0302 	and.w	r3, r3, #2
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d003      	beq.n	800bf10 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800bf08:	4b16      	ldr	r3, [pc, #88]	; (800bf64 <ethernetif_update_config+0xf4>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	609a      	str	r2, [r3, #8]
 800bf0e:	e016      	b.n	800bf3e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800bf10:	4b14      	ldr	r3, [pc, #80]	; (800bf64 <ethernetif_update_config+0xf4>)
 800bf12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bf16:	609a      	str	r2, [r3, #8]
 800bf18:	e011      	b.n	800bf3e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800bf1a:	bf00      	nop
 800bf1c:	e000      	b.n	800bf20 <ethernetif_update_config+0xb0>
          goto error;
 800bf1e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800bf20:	4b10      	ldr	r3, [pc, #64]	; (800bf64 <ethernetif_update_config+0xf4>)
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	08db      	lsrs	r3, r3, #3
 800bf26:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800bf28:	4b0e      	ldr	r3, [pc, #56]	; (800bf64 <ethernetif_update_config+0xf4>)
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	085b      	lsrs	r3, r3, #1
 800bf2e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800bf30:	4313      	orrs	r3, r2
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	461a      	mov	r2, r3
 800bf36:	2100      	movs	r1, #0
 800bf38:	480a      	ldr	r0, [pc, #40]	; (800bf64 <ethernetif_update_config+0xf4>)
 800bf3a:	f7fb f8c1 	bl	80070c0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800bf3e:	2100      	movs	r1, #0
 800bf40:	4808      	ldr	r0, [pc, #32]	; (800bf64 <ethernetif_update_config+0xf4>)
 800bf42:	f7fb f981 	bl	8007248 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800bf46:	4807      	ldr	r0, [pc, #28]	; (800bf64 <ethernetif_update_config+0xf4>)
 800bf48:	f7fb f920 	bl	800718c <HAL_ETH_Start>
 800bf4c:	e002      	b.n	800bf54 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800bf4e:	4805      	ldr	r0, [pc, #20]	; (800bf64 <ethernetif_update_config+0xf4>)
 800bf50:	f7fb f94b 	bl	80071ea <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 f807 	bl	800bf68 <ethernetif_notify_conn_changed>
}
 800bf5a:	bf00      	nop
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	2000413c 	.word	0x2000413c

0800bf68 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800bf70:	bf00      	nop
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	4603      	mov	r3, r0
 800bf84:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bf86:	2300      	movs	r3, #0
 800bf88:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bf8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bf8e:	2b84      	cmp	r3, #132	; 0x84
 800bf90:	d005      	beq.n	800bf9e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bf92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	4413      	add	r3, r2
 800bf9a:	3303      	adds	r3, #3
 800bf9c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3714      	adds	r7, #20
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfb2:	f3ef 8305 	mrs	r3, IPSR
 800bfb6:	607b      	str	r3, [r7, #4]
  return(result);
 800bfb8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	bf14      	ite	ne
 800bfbe:	2301      	movne	r3, #1
 800bfc0:	2300      	moveq	r3, #0
 800bfc2:	b2db      	uxtb	r3, r3
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	370c      	adds	r7, #12
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr

0800bfd0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bfd4:	f001 ff70 	bl	800deb8 <vTaskStartScheduler>
  
  return osOK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bfe2:	f7ff ffe3 	bl	800bfac <inHandlerMode>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d003      	beq.n	800bff4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bfec:	f002 f888 	bl	800e100 <xTaskGetTickCountFromISR>
 800bff0:	4603      	mov	r3, r0
 800bff2:	e002      	b.n	800bffa <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bff4:	f002 f874 	bl	800e0e0 <xTaskGetTickCount>
 800bff8:	4603      	mov	r3, r0
  }
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c000:	b089      	sub	sp, #36	; 0x24
 800c002:	af04      	add	r7, sp, #16
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	695b      	ldr	r3, [r3, #20]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d020      	beq.n	800c052 <osThreadCreate+0x54>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d01c      	beq.n	800c052 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	685c      	ldr	r4, [r3, #4]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681d      	ldr	r5, [r3, #0]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	691e      	ldr	r6, [r3, #16]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7ff ffa6 	bl	800bf7c <makeFreeRtosPriority>
 800c030:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	695b      	ldr	r3, [r3, #20]
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c03a:	9202      	str	r2, [sp, #8]
 800c03c:	9301      	str	r3, [sp, #4]
 800c03e:	9100      	str	r1, [sp, #0]
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	4632      	mov	r2, r6
 800c044:	4629      	mov	r1, r5
 800c046:	4620      	mov	r0, r4
 800c048:	f001 fd58 	bl	800dafc <xTaskCreateStatic>
 800c04c:	4603      	mov	r3, r0
 800c04e:	60fb      	str	r3, [r7, #12]
 800c050:	e01c      	b.n	800c08c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	685c      	ldr	r4, [r3, #4]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c05e:	b29e      	uxth	r6, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c066:	4618      	mov	r0, r3
 800c068:	f7ff ff88 	bl	800bf7c <makeFreeRtosPriority>
 800c06c:	4602      	mov	r2, r0
 800c06e:	f107 030c 	add.w	r3, r7, #12
 800c072:	9301      	str	r3, [sp, #4]
 800c074:	9200      	str	r2, [sp, #0]
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	4632      	mov	r2, r6
 800c07a:	4629      	mov	r1, r5
 800c07c:	4620      	mov	r0, r4
 800c07e:	f001 fd9a 	bl	800dbb6 <xTaskCreate>
 800c082:	4603      	mov	r3, r0
 800c084:	2b01      	cmp	r3, #1
 800c086:	d001      	beq.n	800c08c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c088:	2300      	movs	r3, #0
 800c08a:	e000      	b.n	800c08e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c08c:	68fb      	ldr	r3, [r7, #12]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c096 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b084      	sub	sp, #16
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d001      	beq.n	800c0ac <osDelay+0x16>
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	e000      	b.n	800c0ae <osDelay+0x18>
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f001 fece 	bl	800de50 <vTaskDelay>
  
  return osOK;
 800c0b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d007      	beq.n	800c0de <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	2001      	movs	r0, #1
 800c0d6:	f000 feb2 	bl	800ce3e <xQueueCreateMutexStatic>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	e003      	b.n	800c0e6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c0de:	2001      	movs	r0, #1
 800c0e0:	f000 fe95 	bl	800ce0e <xQueueCreateMutex>
 800c0e4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
	...

0800c0f0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <osMutexWait+0x18>
    return osErrorParameter;
 800c104:	2380      	movs	r3, #128	; 0x80
 800c106:	e03a      	b.n	800c17e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800c108:	2300      	movs	r3, #0
 800c10a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c112:	d103      	bne.n	800c11c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800c114:	f04f 33ff 	mov.w	r3, #4294967295
 800c118:	60fb      	str	r3, [r7, #12]
 800c11a:	e009      	b.n	800c130 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d006      	beq.n	800c130 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <osMutexWait+0x40>
      ticks = 1;
 800c12c:	2301      	movs	r3, #1
 800c12e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c130:	f7ff ff3c 	bl	800bfac <inHandlerMode>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d017      	beq.n	800c16a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c13a:	f107 0308 	add.w	r3, r7, #8
 800c13e:	461a      	mov	r2, r3
 800c140:	2100      	movs	r1, #0
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f001 faa8 	bl	800d698 <xQueueReceiveFromISR>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d001      	beq.n	800c152 <osMutexWait+0x62>
      return osErrorOS;
 800c14e:	23ff      	movs	r3, #255	; 0xff
 800c150:	e015      	b.n	800c17e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d011      	beq.n	800c17c <osMutexWait+0x8c>
 800c158:	4b0b      	ldr	r3, [pc, #44]	; (800c188 <osMutexWait+0x98>)
 800c15a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c15e:	601a      	str	r2, [r3, #0]
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	f3bf 8f6f 	isb	sy
 800c168:	e008      	b.n	800c17c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800c16a:	68f9      	ldr	r1, [r7, #12]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f001 f987 	bl	800d480 <xQueueSemaphoreTake>
 800c172:	4603      	mov	r3, r0
 800c174:	2b01      	cmp	r3, #1
 800c176:	d001      	beq.n	800c17c <osMutexWait+0x8c>
    return osErrorOS;
 800c178:	23ff      	movs	r3, #255	; 0xff
 800c17a:	e000      	b.n	800c17e <osMutexWait+0x8e>
  }
  
  return osOK;
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3710      	adds	r7, #16
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	e000ed04 	.word	0xe000ed04

0800c18c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c194:	2300      	movs	r3, #0
 800c196:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c198:	2300      	movs	r3, #0
 800c19a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800c19c:	f7ff ff06 	bl	800bfac <inHandlerMode>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d016      	beq.n	800c1d4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c1a6:	f107 0308 	add.w	r3, r7, #8
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fffa 	bl	800d1a6 <xQueueGiveFromISR>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d001      	beq.n	800c1bc <osMutexRelease+0x30>
      return osErrorOS;
 800c1b8:	23ff      	movs	r3, #255	; 0xff
 800c1ba:	e017      	b.n	800c1ec <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d013      	beq.n	800c1ea <osMutexRelease+0x5e>
 800c1c2:	4b0c      	ldr	r3, [pc, #48]	; (800c1f4 <osMutexRelease+0x68>)
 800c1c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1c8:	601a      	str	r2, [r3, #0]
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	e00a      	b.n	800c1ea <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	2100      	movs	r1, #0
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fe4a 	bl	800ce74 <xQueueGenericSend>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d001      	beq.n	800c1ea <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800c1e6:	23ff      	movs	r3, #255	; 0xff
 800c1e8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3710      	adds	r7, #16
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	e000ed04 	.word	0xe000ed04

0800c1f8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b086      	sub	sp, #24
 800c1fc:	af02      	add	r7, sp, #8
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00f      	beq.n	800c22a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d10a      	bne.n	800c226 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	2203      	movs	r2, #3
 800c216:	9200      	str	r2, [sp, #0]
 800c218:	2200      	movs	r2, #0
 800c21a:	2100      	movs	r1, #0
 800c21c:	2001      	movs	r0, #1
 800c21e:	f000 fd0b 	bl	800cc38 <xQueueGenericCreateStatic>
 800c222:	4603      	mov	r3, r0
 800c224:	e016      	b.n	800c254 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c226:	2300      	movs	r3, #0
 800c228:	e014      	b.n	800c254 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d110      	bne.n	800c252 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c230:	2203      	movs	r2, #3
 800c232:	2100      	movs	r1, #0
 800c234:	2001      	movs	r0, #1
 800c236:	f000 fd77 	bl	800cd28 <xQueueGenericCreate>
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d005      	beq.n	800c24e <osSemaphoreCreate+0x56>
 800c242:	2300      	movs	r3, #0
 800c244:	2200      	movs	r2, #0
 800c246:	2100      	movs	r1, #0
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f000 fe13 	bl	800ce74 <xQueueGenericSend>
      return sema;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	e000      	b.n	800c254 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c252:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c266:	2300      	movs	r3, #0
 800c268:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d101      	bne.n	800c274 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c270:	2380      	movs	r3, #128	; 0x80
 800c272:	e03a      	b.n	800c2ea <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c274:	2300      	movs	r3, #0
 800c276:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c27e:	d103      	bne.n	800c288 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c280:	f04f 33ff 	mov.w	r3, #4294967295
 800c284:	60fb      	str	r3, [r7, #12]
 800c286:	e009      	b.n	800c29c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d006      	beq.n	800c29c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d101      	bne.n	800c29c <osSemaphoreWait+0x40>
      ticks = 1;
 800c298:	2301      	movs	r3, #1
 800c29a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c29c:	f7ff fe86 	bl	800bfac <inHandlerMode>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d017      	beq.n	800c2d6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c2a6:	f107 0308 	add.w	r3, r7, #8
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f001 f9f2 	bl	800d698 <xQueueReceiveFromISR>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d001      	beq.n	800c2be <osSemaphoreWait+0x62>
      return osErrorOS;
 800c2ba:	23ff      	movs	r3, #255	; 0xff
 800c2bc:	e015      	b.n	800c2ea <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d011      	beq.n	800c2e8 <osSemaphoreWait+0x8c>
 800c2c4:	4b0b      	ldr	r3, [pc, #44]	; (800c2f4 <osSemaphoreWait+0x98>)
 800c2c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ca:	601a      	str	r2, [r3, #0]
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	f3bf 8f6f 	isb	sy
 800c2d4:	e008      	b.n	800c2e8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c2d6:	68f9      	ldr	r1, [r7, #12]
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f001 f8d1 	bl	800d480 <xQueueSemaphoreTake>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d001      	beq.n	800c2e8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c2e4:	23ff      	movs	r3, #255	; 0xff
 800c2e6:	e000      	b.n	800c2ea <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	e000ed04 	.word	0xe000ed04

0800c2f8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c300:	2300      	movs	r3, #0
 800c302:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c304:	2300      	movs	r3, #0
 800c306:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c308:	f7ff fe50 	bl	800bfac <inHandlerMode>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d016      	beq.n	800c340 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c312:	f107 0308 	add.w	r3, r7, #8
 800c316:	4619      	mov	r1, r3
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 ff44 	bl	800d1a6 <xQueueGiveFromISR>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b01      	cmp	r3, #1
 800c322:	d001      	beq.n	800c328 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c324:	23ff      	movs	r3, #255	; 0xff
 800c326:	e017      	b.n	800c358 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d013      	beq.n	800c356 <osSemaphoreRelease+0x5e>
 800c32e:	4b0c      	ldr	r3, [pc, #48]	; (800c360 <osSemaphoreRelease+0x68>)
 800c330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c334:	601a      	str	r2, [r3, #0]
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	e00a      	b.n	800c356 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c340:	2300      	movs	r3, #0
 800c342:	2200      	movs	r2, #0
 800c344:	2100      	movs	r1, #0
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fd94 	bl	800ce74 <xQueueGenericSend>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d001      	beq.n	800c356 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c352:	23ff      	movs	r3, #255	; 0xff
 800c354:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c356:	68fb      	ldr	r3, [r7, #12]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	e000ed04 	.word	0xe000ed04

0800c364 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c36c:	f7ff fe1e 	bl	800bfac <inHandlerMode>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d001      	beq.n	800c37a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c376:	2382      	movs	r3, #130	; 0x82
 800c378:	e003      	b.n	800c382 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f001 fa48 	bl	800d810 <vQueueDelete>

  return osOK; 
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3708      	adds	r7, #8
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b086      	sub	sp, #24
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	3303      	adds	r3, #3
 800c398:	f023 0303 	bic.w	r3, r3, #3
 800c39c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800c39e:	2014      	movs	r0, #20
 800c3a0:	f002 fe32 	bl	800f008 <pvPortMalloc>
 800c3a4:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d046      	beq.n	800c43a <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f002 fe1f 	bl	800f008 <pvPortMalloc>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d02b      	beq.n	800c430 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68fa      	ldr	r2, [r7, #12]
 800c3de:	fb02 f303 	mul.w	r3, r2, r3
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f002 fe10 	bl	800f008 <pvPortMalloc>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d011      	beq.n	800c41a <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	613b      	str	r3, [r7, #16]
 800c3fa:	e008      	b.n	800c40e <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	685a      	ldr	r2, [r3, #4]
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	4413      	add	r3, r2
 800c404:	2200      	movs	r2, #0
 800c406:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	3301      	adds	r3, #1
 800c40c:	613b      	str	r3, [r7, #16]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	693a      	ldr	r2, [r7, #16]
 800c414:	429a      	cmp	r2, r3
 800c416:	d3f1      	bcc.n	800c3fc <osPoolCreate+0x72>
 800c418:	e00f      	b.n	800c43a <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	4618      	mov	r0, r3
 800c420:	f002 febe 	bl	800f1a0 <vPortFree>
        vPortFree(thePool);
 800c424:	6978      	ldr	r0, [r7, #20]
 800c426:	f002 febb 	bl	800f1a0 <vPortFree>
        thePool = NULL;
 800c42a:	2300      	movs	r3, #0
 800c42c:	617b      	str	r3, [r7, #20]
 800c42e:	e004      	b.n	800c43a <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800c430:	6978      	ldr	r0, [r7, #20]
 800c432:	f002 feb5 	bl	800f1a0 <vPortFree>
      thePool = NULL;
 800c436:	2300      	movs	r3, #0
 800c438:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800c43a:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b08a      	sub	sp, #40	; 0x28
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800c44c:	2300      	movs	r3, #0
 800c44e:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800c450:	2300      	movs	r3, #0
 800c452:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800c454:	f7ff fdaa 	bl	800bfac <inHandlerMode>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00e      	beq.n	800c47c <osPoolAlloc+0x38>
	__asm volatile
 800c45e:	f3ef 8211 	mrs	r2, BASEPRI
 800c462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c466:	f383 8811 	msr	BASEPRI, r3
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	617a      	str	r2, [r7, #20]
 800c474:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c476:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800c478:	627b      	str	r3, [r7, #36]	; 0x24
 800c47a:	e001      	b.n	800c480 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800c47c:	f002 fca2 	bl	800edc4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800c480:	2300      	movs	r3, #0
 800c482:	61fb      	str	r3, [r7, #28]
 800c484:	e029      	b.n	800c4da <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	691a      	ldr	r2, [r3, #16]
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	4413      	add	r3, r2
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	6892      	ldr	r2, [r2, #8]
 800c492:	fbb3 f1f2 	udiv	r1, r3, r2
 800c496:	fb01 f202 	mul.w	r2, r1, r2
 800c49a:	1a9b      	subs	r3, r3, r2
 800c49c:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	685a      	ldr	r2, [r3, #4]
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d113      	bne.n	800c4d4 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685a      	ldr	r2, [r3, #4]
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4619      	mov	r1, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	69ba      	ldr	r2, [r7, #24]
 800c4c4:	fb02 f303 	mul.w	r3, r2, r3
 800c4c8:	440b      	add	r3, r1
 800c4ca:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	69ba      	ldr	r2, [r7, #24]
 800c4d0:	611a      	str	r2, [r3, #16]
      break;
 800c4d2:	e007      	b.n	800c4e4 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	61fb      	str	r3, [r7, #28]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	69fa      	ldr	r2, [r7, #28]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d3d0      	bcc.n	800c486 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800c4e4:	f7ff fd62 	bl	800bfac <inHandlerMode>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d005      	beq.n	800c4fa <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f383 8811 	msr	BASEPRI, r3
}
 800c4f8:	e001      	b.n	800c4fe <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800c4fa:	f002 fc93 	bl	800ee24 <vPortExitCritical>
  }
  
  return p;
 800c4fe:	6a3b      	ldr	r3, [r7, #32]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3728      	adds	r7, #40	; 0x28
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d101      	bne.n	800c51c <osPoolFree+0x14>
    return osErrorParameter;
 800c518:	2380      	movs	r3, #128	; 0x80
 800c51a:	e030      	b.n	800c57e <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d101      	bne.n	800c526 <osPoolFree+0x1e>
    return osErrorParameter;
 800c522:	2380      	movs	r3, #128	; 0x80
 800c524:	e02b      	b.n	800c57e <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	683a      	ldr	r2, [r7, #0]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d201      	bcs.n	800c534 <osPoolFree+0x2c>
    return osErrorParameter;
 800c530:	2380      	movs	r3, #128	; 0x80
 800c532:	e024      	b.n	800c57e <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	6812      	ldr	r2, [r2, #0]
 800c53a:	1a9b      	subs	r3, r3, r2
 800c53c:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	68da      	ldr	r2, [r3, #12]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	fbb3 f1f2 	udiv	r1, r3, r2
 800c548:	fb01 f202 	mul.w	r2, r1, r2
 800c54c:	1a9b      	subs	r3, r3, r2
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d001      	beq.n	800c556 <osPoolFree+0x4e>
    return osErrorParameter;
 800c552:	2380      	movs	r3, #128	; 0x80
 800c554:	e013      	b.n	800c57e <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c560:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d301      	bcc.n	800c570 <osPoolFree+0x68>
    return osErrorParameter;
 800c56c:	2380      	movs	r3, #128	; 0x80
 800c56e:	e006      	b.n	800c57e <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	685a      	ldr	r2, [r3, #4]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	4413      	add	r3, r2
 800c578:	2200      	movs	r2, #0
 800c57a:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3714      	adds	r7, #20
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr

0800c58a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c58a:	b590      	push	{r4, r7, lr}
 800c58c:	b085      	sub	sp, #20
 800c58e:	af02      	add	r7, sp, #8
 800c590:	6078      	str	r0, [r7, #4]
 800c592:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d011      	beq.n	800c5c0 <osMessageCreate+0x36>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00d      	beq.n	800c5c0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6818      	ldr	r0, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6859      	ldr	r1, [r3, #4]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	689a      	ldr	r2, [r3, #8]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	2400      	movs	r4, #0
 800c5b6:	9400      	str	r4, [sp, #0]
 800c5b8:	f000 fb3e 	bl	800cc38 <xQueueGenericCreateStatic>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	e008      	b.n	800c5d2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6818      	ldr	r0, [r3, #0]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	f000 fbac 	bl	800cd28 <xQueueGenericCreate>
 800c5d0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	370c      	adds	r7, #12
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd90      	pop	{r4, r7, pc}
	...

0800c5dc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b086      	sub	sp, #24
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d101      	bne.n	800c5fa <osMessagePut+0x1e>
    ticks = 1;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c5fa:	f7ff fcd7 	bl	800bfac <inHandlerMode>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d018      	beq.n	800c636 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c604:	f107 0210 	add.w	r2, r7, #16
 800c608:	f107 0108 	add.w	r1, r7, #8
 800c60c:	2300      	movs	r3, #0
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	f000 fd2e 	bl	800d070 <xQueueGenericSendFromISR>
 800c614:	4603      	mov	r3, r0
 800c616:	2b01      	cmp	r3, #1
 800c618:	d001      	beq.n	800c61e <osMessagePut+0x42>
      return osErrorOS;
 800c61a:	23ff      	movs	r3, #255	; 0xff
 800c61c:	e018      	b.n	800c650 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d014      	beq.n	800c64e <osMessagePut+0x72>
 800c624:	4b0c      	ldr	r3, [pc, #48]	; (800c658 <osMessagePut+0x7c>)
 800c626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	f3bf 8f6f 	isb	sy
 800c634:	e00b      	b.n	800c64e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c636:	f107 0108 	add.w	r1, r7, #8
 800c63a:	2300      	movs	r3, #0
 800c63c:	697a      	ldr	r2, [r7, #20]
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f000 fc18 	bl	800ce74 <xQueueGenericSend>
 800c644:	4603      	mov	r3, r0
 800c646:	2b01      	cmp	r3, #1
 800c648:	d001      	beq.n	800c64e <osMessagePut+0x72>
      return osErrorOS;
 800c64a:	23ff      	movs	r3, #255	; 0xff
 800c64c:	e000      	b.n	800c650 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3718      	adds	r7, #24
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	e000ed04 	.word	0xe000ed04

0800c65c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c65c:	b590      	push	{r4, r7, lr}
 800c65e:	b08b      	sub	sp, #44	; 0x2c
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d10a      	bne.n	800c68c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c676:	2380      	movs	r3, #128	; 0x80
 800c678:	617b      	str	r3, [r7, #20]
    return event;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	461c      	mov	r4, r3
 800c67e:	f107 0314 	add.w	r3, r7, #20
 800c682:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c68a:	e054      	b.n	800c736 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c68c:	2300      	movs	r3, #0
 800c68e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c690:	2300      	movs	r3, #0
 800c692:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c69a:	d103      	bne.n	800c6a4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c69c:	f04f 33ff 	mov.w	r3, #4294967295
 800c6a0:	627b      	str	r3, [r7, #36]	; 0x24
 800c6a2:	e009      	b.n	800c6b8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d006      	beq.n	800c6b8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d101      	bne.n	800c6b8 <osMessageGet+0x5c>
      ticks = 1;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c6b8:	f7ff fc78 	bl	800bfac <inHandlerMode>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d01c      	beq.n	800c6fc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c6c2:	f107 0220 	add.w	r2, r7, #32
 800c6c6:	f107 0314 	add.w	r3, r7, #20
 800c6ca:	3304      	adds	r3, #4
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	68b8      	ldr	r0, [r7, #8]
 800c6d0:	f000 ffe2 	bl	800d698 <xQueueReceiveFromISR>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d102      	bne.n	800c6e0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c6da:	2310      	movs	r3, #16
 800c6dc:	617b      	str	r3, [r7, #20]
 800c6de:	e001      	b.n	800c6e4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c6e4:	6a3b      	ldr	r3, [r7, #32]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d01d      	beq.n	800c726 <osMessageGet+0xca>
 800c6ea:	4b15      	ldr	r3, [pc, #84]	; (800c740 <osMessageGet+0xe4>)
 800c6ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	f3bf 8f4f 	dsb	sy
 800c6f6:	f3bf 8f6f 	isb	sy
 800c6fa:	e014      	b.n	800c726 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c6fc:	f107 0314 	add.w	r3, r7, #20
 800c700:	3304      	adds	r3, #4
 800c702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c704:	4619      	mov	r1, r3
 800c706:	68b8      	ldr	r0, [r7, #8]
 800c708:	f000 fdda 	bl	800d2c0 <xQueueReceive>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d102      	bne.n	800c718 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c712:	2310      	movs	r3, #16
 800c714:	617b      	str	r3, [r7, #20]
 800c716:	e006      	b.n	800c726 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d101      	bne.n	800c722 <osMessageGet+0xc6>
 800c71e:	2300      	movs	r3, #0
 800c720:	e000      	b.n	800c724 <osMessageGet+0xc8>
 800c722:	2340      	movs	r3, #64	; 0x40
 800c724:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	461c      	mov	r4, r3
 800c72a:	f107 0314 	add.w	r3, r7, #20
 800c72e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c736:	68f8      	ldr	r0, [r7, #12]
 800c738:	372c      	adds	r7, #44	; 0x2c
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd90      	pop	{r4, r7, pc}
 800c73e:	bf00      	nop
 800c740:	e000ed04 	.word	0xe000ed04

0800c744 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800c744:	b590      	push	{r4, r7, lr}
 800c746:	b087      	sub	sp, #28
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	60fb      	str	r3, [r7, #12]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	613b      	str	r3, [r7, #16]
 800c75a:	2300      	movs	r3, #0
 800c75c:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	689c      	ldr	r4, [r3, #8]
 800c762:	200c      	movs	r0, #12
 800c764:	f002 fc50 	bl	800f008 <pvPortMalloc>
 800c768:	4603      	mov	r3, r0
 800c76a:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d101      	bne.n	800c77a <osMailCreate+0x36>
    return NULL;
 800c776:	2300      	movs	r3, #0
 800c778:	e038      	b.n	800c7ec <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6818      	ldr	r0, [r3, #0]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	681c      	ldr	r4, [r3, #0]
 800c78e:	2200      	movs	r2, #0
 800c790:	2104      	movs	r1, #4
 800c792:	f000 fac9 	bl	800cd28 <xQueueGenericCreate>
 800c796:	4603      	mov	r3, r0
 800c798:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d107      	bne.n	800c7b6 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f002 fcf7 	bl	800f1a0 <vPortFree>
    return NULL;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	e01a      	b.n	800c7ec <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	681c      	ldr	r4, [r3, #0]
 800c7bc:	f107 030c 	add.w	r3, r7, #12
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7ff fde2 	bl	800c38a <osPoolCreate>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d107      	bne.n	800c7e6 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f002 fcdf 	bl	800f1a0 <vPortFree>
    return NULL;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	e002      	b.n	800c7ec <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	371c      	adds	r7, #28
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd90      	pop	{r4, r7, pc}

0800c7f4 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d101      	bne.n	800c808 <osMailAlloc+0x14>
    return NULL;
 800c804:	2300      	movs	r3, #0
 800c806:	e006      	b.n	800c816 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff fe19 	bl	800c444 <osPoolAlloc>
 800c812:	60f8      	str	r0, [r7, #12]
  
  return p;
 800c814:	68fb      	ldr	r3, [r7, #12]
}
 800c816:	4618      	mov	r0, r3
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
	...

0800c820 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d101      	bne.n	800c834 <osMailPut+0x14>
    return osErrorParameter;
 800c830:	2380      	movs	r3, #128	; 0x80
 800c832:	e02c      	b.n	800c88e <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800c834:	2300      	movs	r3, #0
 800c836:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800c838:	f7ff fbb8 	bl	800bfac <inHandlerMode>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d018      	beq.n	800c874 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6858      	ldr	r0, [r3, #4]
 800c846:	f107 020c 	add.w	r2, r7, #12
 800c84a:	4639      	mov	r1, r7
 800c84c:	2300      	movs	r3, #0
 800c84e:	f000 fc0f 	bl	800d070 <xQueueGenericSendFromISR>
 800c852:	4603      	mov	r3, r0
 800c854:	2b01      	cmp	r3, #1
 800c856:	d001      	beq.n	800c85c <osMailPut+0x3c>
      return osErrorOS;
 800c858:	23ff      	movs	r3, #255	; 0xff
 800c85a:	e018      	b.n	800c88e <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d014      	beq.n	800c88c <osMailPut+0x6c>
 800c862:	4b0d      	ldr	r3, [pc, #52]	; (800c898 <osMailPut+0x78>)
 800c864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c868:	601a      	str	r2, [r3, #0]
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	f3bf 8f6f 	isb	sy
 800c872:	e00b      	b.n	800c88c <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6858      	ldr	r0, [r3, #4]
 800c878:	4639      	mov	r1, r7
 800c87a:	2300      	movs	r3, #0
 800c87c:	2200      	movs	r2, #0
 800c87e:	f000 faf9 	bl	800ce74 <xQueueGenericSend>
 800c882:	4603      	mov	r3, r0
 800c884:	2b01      	cmp	r3, #1
 800c886:	d001      	beq.n	800c88c <osMailPut+0x6c>
      return osErrorOS;
 800c888:	23ff      	movs	r3, #255	; 0xff
 800c88a:	e000      	b.n	800c88e <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800c88c:	2300      	movs	r3, #0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	e000ed04 	.word	0xe000ed04

0800c89c <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800c89c:	b590      	push	{r4, r7, lr}
 800c89e:	b08b      	sub	sp, #44	; 0x2c
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10a      	bne.n	800c8c8 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800c8b2:	2380      	movs	r3, #128	; 0x80
 800c8b4:	617b      	str	r3, [r7, #20]
    return event;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	461c      	mov	r4, r3
 800c8ba:	f107 0314 	add.w	r3, r7, #20
 800c8be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c8c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c8c6:	e056      	b.n	800c976 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d6:	d103      	bne.n	800c8e0 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800c8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c8de:	e009      	b.n	800c8f4 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d006      	beq.n	800c8f4 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d101      	bne.n	800c8f4 <osMailGet+0x58>
      ticks = 1;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c8f4:	f7ff fb5a 	bl	800bfac <inHandlerMode>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d01d      	beq.n	800c93a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	6858      	ldr	r0, [r3, #4]
 800c902:	f107 0220 	add.w	r2, r7, #32
 800c906:	f107 0314 	add.w	r3, r7, #20
 800c90a:	3304      	adds	r3, #4
 800c90c:	4619      	mov	r1, r3
 800c90e:	f000 fec3 	bl	800d698 <xQueueReceiveFromISR>
 800c912:	4603      	mov	r3, r0
 800c914:	2b01      	cmp	r3, #1
 800c916:	d102      	bne.n	800c91e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800c918:	2320      	movs	r3, #32
 800c91a:	617b      	str	r3, [r7, #20]
 800c91c:	e001      	b.n	800c922 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800c91e:	2300      	movs	r3, #0
 800c920:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c922:	6a3b      	ldr	r3, [r7, #32]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d01e      	beq.n	800c966 <osMailGet+0xca>
 800c928:	4b15      	ldr	r3, [pc, #84]	; (800c980 <osMailGet+0xe4>)
 800c92a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c92e:	601a      	str	r2, [r3, #0]
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	e015      	b.n	800c966 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	6858      	ldr	r0, [r3, #4]
 800c93e:	f107 0314 	add.w	r3, r7, #20
 800c942:	3304      	adds	r3, #4
 800c944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c946:	4619      	mov	r1, r3
 800c948:	f000 fcba 	bl	800d2c0 <xQueueReceive>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d102      	bne.n	800c958 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800c952:	2320      	movs	r3, #32
 800c954:	617b      	str	r3, [r7, #20]
 800c956:	e006      	b.n	800c966 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d101      	bne.n	800c962 <osMailGet+0xc6>
 800c95e:	2300      	movs	r3, #0
 800c960:	e000      	b.n	800c964 <osMailGet+0xc8>
 800c962:	2340      	movs	r3, #64	; 0x40
 800c964:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	461c      	mov	r4, r3
 800c96a:	f107 0314 	add.w	r3, r7, #20
 800c96e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	372c      	adds	r7, #44	; 0x2c
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd90      	pop	{r4, r7, pc}
 800c97e:	bf00      	nop
 800c980:	e000ed04 	.word	0xe000ed04

0800c984 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <osMailFree+0x14>
    return osErrorParameter;
 800c994:	2380      	movs	r3, #128	; 0x80
 800c996:	e006      	b.n	800c9a6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	6839      	ldr	r1, [r7, #0]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7ff fdb2 	bl	800c508 <osPoolFree>
 800c9a4:	4603      	mov	r3, r0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b082      	sub	sp, #8
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c9b6:	f7ff faf9 	bl	800bfac <inHandlerMode>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d004      	beq.n	800c9ca <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 ff07 	bl	800d7d4 <uxQueueMessagesWaitingFromISR>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	e003      	b.n	800c9d2 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fee4 	bl	800d798 <uxQueueMessagesWaiting>
 800c9d0:	4603      	mov	r3, r0
  }
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b082      	sub	sp, #8
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c9e2:	f7ff fae3 	bl	800bfac <inHandlerMode>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <osMessageDelete+0x16>
    return osErrorISR;
 800c9ec:	2382      	movs	r3, #130	; 0x82
 800c9ee:	e003      	b.n	800c9f8 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 ff0d 	bl	800d810 <vQueueDelete>

  return osOK; 
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f103 0208 	add.w	r2, r3, #8
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f04f 32ff 	mov.w	r2, #4294967295
 800ca18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f103 0208 	add.w	r2, r3, #8
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f103 0208 	add.w	r2, r3, #8
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2200      	movs	r2, #0
 800ca32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca34:	bf00      	nop
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca4e:	bf00      	nop
 800ca50:	370c      	adds	r7, #12
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr

0800ca5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca5a:	b480      	push	{r7}
 800ca5c:	b085      	sub	sp, #20
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	689a      	ldr	r2, [r3, #8]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	683a      	ldr	r2, [r7, #0]
 800ca84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	1c5a      	adds	r2, r3, #1
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	601a      	str	r2, [r3, #0]
}
 800ca96:	bf00      	nop
 800ca98:	3714      	adds	r7, #20
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800caa2:	b480      	push	{r7}
 800caa4:	b085      	sub	sp, #20
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
 800caaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cab8:	d103      	bne.n	800cac2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	691b      	ldr	r3, [r3, #16]
 800cabe:	60fb      	str	r3, [r7, #12]
 800cac0:	e00c      	b.n	800cadc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	3308      	adds	r3, #8
 800cac6:	60fb      	str	r3, [r7, #12]
 800cac8:	e002      	b.n	800cad0 <vListInsert+0x2e>
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	60fb      	str	r3, [r7, #12]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d2f6      	bcs.n	800caca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	685a      	ldr	r2, [r3, #4]
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	683a      	ldr	r2, [r7, #0]
 800caf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	1c5a      	adds	r2, r3, #1
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	601a      	str	r2, [r3, #0]
}
 800cb08:	bf00      	nop
 800cb0a:	3714      	adds	r7, #20
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	6892      	ldr	r2, [r2, #8]
 800cb2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	6852      	ldr	r2, [r2, #4]
 800cb34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d103      	bne.n	800cb48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	689a      	ldr	r2, [r3, #8]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	1e5a      	subs	r2, r3, #1
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3714      	adds	r7, #20
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10a      	bne.n	800cb92 <xQueueGenericReset+0x2a>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	60bb      	str	r3, [r7, #8]
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cb92:	f002 f917 	bl	800edc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb9e:	68f9      	ldr	r1, [r7, #12]
 800cba0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cba2:	fb01 f303 	mul.w	r3, r1, r3
 800cba6:	441a      	add	r2, r3
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbc2:	3b01      	subs	r3, #1
 800cbc4:	68f9      	ldr	r1, [r7, #12]
 800cbc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cbc8:	fb01 f303 	mul.w	r3, r1, r3
 800cbcc:	441a      	add	r2, r3
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	22ff      	movs	r2, #255	; 0xff
 800cbd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	22ff      	movs	r2, #255	; 0xff
 800cbde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d114      	bne.n	800cc12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d01a      	beq.n	800cc26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	3310      	adds	r3, #16
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f001 fbd3 	bl	800e3a0 <xTaskRemoveFromEventList>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d012      	beq.n	800cc26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc00:	4b0c      	ldr	r3, [pc, #48]	; (800cc34 <xQueueGenericReset+0xcc>)
 800cc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc06:	601a      	str	r2, [r3, #0]
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	e009      	b.n	800cc26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	3310      	adds	r3, #16
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff fef2 	bl	800ca00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	3324      	adds	r3, #36	; 0x24
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7ff feed 	bl	800ca00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc26:	f002 f8fd 	bl	800ee24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc2a:	2301      	movs	r3, #1
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	e000ed04 	.word	0xe000ed04

0800cc38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08e      	sub	sp, #56	; 0x38
 800cc3c:	af02      	add	r7, sp, #8
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10a      	bne.n	800cc62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc50:	f383 8811 	msr	BASEPRI, r3
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	f3bf 8f4f 	dsb	sy
 800cc5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc5e:	bf00      	nop
 800cc60:	e7fe      	b.n	800cc60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d10a      	bne.n	800cc7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6c:	f383 8811 	msr	BASEPRI, r3
 800cc70:	f3bf 8f6f 	isb	sy
 800cc74:	f3bf 8f4f 	dsb	sy
 800cc78:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc7a:	bf00      	nop
 800cc7c:	e7fe      	b.n	800cc7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d002      	beq.n	800cc8a <xQueueGenericCreateStatic+0x52>
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d001      	beq.n	800cc8e <xQueueGenericCreateStatic+0x56>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e000      	b.n	800cc90 <xQueueGenericCreateStatic+0x58>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10a      	bne.n	800ccaa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	623b      	str	r3, [r7, #32]
}
 800cca6:	bf00      	nop
 800cca8:	e7fe      	b.n	800cca8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d102      	bne.n	800ccb6 <xQueueGenericCreateStatic+0x7e>
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d101      	bne.n	800ccba <xQueueGenericCreateStatic+0x82>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e000      	b.n	800ccbc <xQueueGenericCreateStatic+0x84>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d10a      	bne.n	800ccd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	61fb      	str	r3, [r7, #28]
}
 800ccd2:	bf00      	nop
 800ccd4:	e7fe      	b.n	800ccd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ccd6:	2348      	movs	r3, #72	; 0x48
 800ccd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2b48      	cmp	r3, #72	; 0x48
 800ccde:	d00a      	beq.n	800ccf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	61bb      	str	r3, [r7, #24]
}
 800ccf2:	bf00      	nop
 800ccf4:	e7fe      	b.n	800ccf4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ccf6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00d      	beq.n	800cd1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd04:	2201      	movs	r2, #1
 800cd06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	4613      	mov	r3, r2
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	68b9      	ldr	r1, [r7, #8]
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f000 f83f 	bl	800cd9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3730      	adds	r7, #48	; 0x30
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b08a      	sub	sp, #40	; 0x28
 800cd2c:	af02      	add	r7, sp, #8
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	4613      	mov	r3, r2
 800cd34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10a      	bne.n	800cd52 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd40:	f383 8811 	msr	BASEPRI, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	613b      	str	r3, [r7, #16]
}
 800cd4e:	bf00      	nop
 800cd50:	e7fe      	b.n	800cd50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	fb02 f303 	mul.w	r3, r2, r3
 800cd5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	3348      	adds	r3, #72	; 0x48
 800cd60:	4618      	mov	r0, r3
 800cd62:	f002 f951 	bl	800f008 <pvPortMalloc>
 800cd66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cd68:	69bb      	ldr	r3, [r7, #24]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d011      	beq.n	800cd92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cd6e:	69bb      	ldr	r3, [r7, #24]
 800cd70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	3348      	adds	r3, #72	; 0x48
 800cd76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cd78:	69bb      	ldr	r3, [r7, #24]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd80:	79fa      	ldrb	r2, [r7, #7]
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	9300      	str	r3, [sp, #0]
 800cd86:	4613      	mov	r3, r2
 800cd88:	697a      	ldr	r2, [r7, #20]
 800cd8a:	68b9      	ldr	r1, [r7, #8]
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	f000 f805 	bl	800cd9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd92:	69bb      	ldr	r3, [r7, #24]
	}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3720      	adds	r7, #32
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	607a      	str	r2, [r7, #4]
 800cda8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d103      	bne.n	800cdb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	69ba      	ldr	r2, [r7, #24]
 800cdb4:	601a      	str	r2, [r3, #0]
 800cdb6:	e002      	b.n	800cdbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cdb8:	69bb      	ldr	r3, [r7, #24]
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	68fa      	ldr	r2, [r7, #12]
 800cdc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	68ba      	ldr	r2, [r7, #8]
 800cdc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cdca:	2101      	movs	r1, #1
 800cdcc:	69b8      	ldr	r0, [r7, #24]
 800cdce:	f7ff fecb 	bl	800cb68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cdd2:	bf00      	nop
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b082      	sub	sp, #8
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d00e      	beq.n	800ce06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	2100      	movs	r1, #0
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 f837 	bl	800ce74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ce06:	bf00      	nop
 800ce08:	3708      	adds	r7, #8
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b086      	sub	sp, #24
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	4603      	mov	r3, r0
 800ce16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	617b      	str	r3, [r7, #20]
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ce20:	79fb      	ldrb	r3, [r7, #7]
 800ce22:	461a      	mov	r2, r3
 800ce24:	6939      	ldr	r1, [r7, #16]
 800ce26:	6978      	ldr	r0, [r7, #20]
 800ce28:	f7ff ff7e 	bl	800cd28 <xQueueGenericCreate>
 800ce2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f7ff ffd3 	bl	800cdda <prvInitialiseMutex>

		return xNewQueue;
 800ce34:	68fb      	ldr	r3, [r7, #12]
	}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3718      	adds	r7, #24
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b088      	sub	sp, #32
 800ce42:	af02      	add	r7, sp, #8
 800ce44:	4603      	mov	r3, r0
 800ce46:	6039      	str	r1, [r7, #0]
 800ce48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	617b      	str	r3, [r7, #20]
 800ce4e:	2300      	movs	r3, #0
 800ce50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ce52:	79fb      	ldrb	r3, [r7, #7]
 800ce54:	9300      	str	r3, [sp, #0]
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	6939      	ldr	r1, [r7, #16]
 800ce5c:	6978      	ldr	r0, [r7, #20]
 800ce5e:	f7ff feeb 	bl	800cc38 <xQueueGenericCreateStatic>
 800ce62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ce64:	68f8      	ldr	r0, [r7, #12]
 800ce66:	f7ff ffb8 	bl	800cdda <prvInitialiseMutex>

		return xNewQueue;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
	}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3718      	adds	r7, #24
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b08e      	sub	sp, #56	; 0x38
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
 800ce80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ce82:	2300      	movs	r3, #0
 800ce84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ce8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d10a      	bne.n	800cea6 <xQueueGenericSend+0x32>
	__asm volatile
 800ce90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce94:	f383 8811 	msr	BASEPRI, r3
 800ce98:	f3bf 8f6f 	isb	sy
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cea2:	bf00      	nop
 800cea4:	e7fe      	b.n	800cea4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d103      	bne.n	800ceb4 <xQueueGenericSend+0x40>
 800ceac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d101      	bne.n	800ceb8 <xQueueGenericSend+0x44>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e000      	b.n	800ceba <xQueueGenericSend+0x46>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d10a      	bne.n	800ced4 <xQueueGenericSend+0x60>
	__asm volatile
 800cebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ced0:	bf00      	nop
 800ced2:	e7fe      	b.n	800ced2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	2b02      	cmp	r3, #2
 800ced8:	d103      	bne.n	800cee2 <xQueueGenericSend+0x6e>
 800ceda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cedc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d101      	bne.n	800cee6 <xQueueGenericSend+0x72>
 800cee2:	2301      	movs	r3, #1
 800cee4:	e000      	b.n	800cee8 <xQueueGenericSend+0x74>
 800cee6:	2300      	movs	r3, #0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d10a      	bne.n	800cf02 <xQueueGenericSend+0x8e>
	__asm volatile
 800ceec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef0:	f383 8811 	msr	BASEPRI, r3
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	623b      	str	r3, [r7, #32]
}
 800cefe:	bf00      	nop
 800cf00:	e7fe      	b.n	800cf00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf02:	f001 fc0d 	bl	800e720 <xTaskGetSchedulerState>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d102      	bne.n	800cf12 <xQueueGenericSend+0x9e>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d101      	bne.n	800cf16 <xQueueGenericSend+0xa2>
 800cf12:	2301      	movs	r3, #1
 800cf14:	e000      	b.n	800cf18 <xQueueGenericSend+0xa4>
 800cf16:	2300      	movs	r3, #0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d10a      	bne.n	800cf32 <xQueueGenericSend+0xbe>
	__asm volatile
 800cf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf20:	f383 8811 	msr	BASEPRI, r3
 800cf24:	f3bf 8f6f 	isb	sy
 800cf28:	f3bf 8f4f 	dsb	sy
 800cf2c:	61fb      	str	r3, [r7, #28]
}
 800cf2e:	bf00      	nop
 800cf30:	e7fe      	b.n	800cf30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf32:	f001 ff47 	bl	800edc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d302      	bcc.n	800cf48 <xQueueGenericSend+0xd4>
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b02      	cmp	r3, #2
 800cf46:	d129      	bne.n	800cf9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf48:	683a      	ldr	r2, [r7, #0]
 800cf4a:	68b9      	ldr	r1, [r7, #8]
 800cf4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf4e:	f000 fc9a 	bl	800d886 <prvCopyDataToQueue>
 800cf52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d010      	beq.n	800cf7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5e:	3324      	adds	r3, #36	; 0x24
 800cf60:	4618      	mov	r0, r3
 800cf62:	f001 fa1d 	bl	800e3a0 <xTaskRemoveFromEventList>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d013      	beq.n	800cf94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cf6c:	4b3f      	ldr	r3, [pc, #252]	; (800d06c <xQueueGenericSend+0x1f8>)
 800cf6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	f3bf 8f4f 	dsb	sy
 800cf78:	f3bf 8f6f 	isb	sy
 800cf7c:	e00a      	b.n	800cf94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d007      	beq.n	800cf94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cf84:	4b39      	ldr	r3, [pc, #228]	; (800d06c <xQueueGenericSend+0x1f8>)
 800cf86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf8a:	601a      	str	r2, [r3, #0]
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cf94:	f001 ff46 	bl	800ee24 <vPortExitCritical>
				return pdPASS;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	e063      	b.n	800d064 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d103      	bne.n	800cfaa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cfa2:	f001 ff3f 	bl	800ee24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	e05c      	b.n	800d064 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d106      	bne.n	800cfbe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfb0:	f107 0314 	add.w	r3, r7, #20
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f001 fa55 	bl	800e464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cfbe:	f001 ff31 	bl	800ee24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cfc2:	f000 ffe3 	bl	800df8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cfc6:	f001 fefd 	bl	800edc4 <vPortEnterCritical>
 800cfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfd0:	b25b      	sxtb	r3, r3
 800cfd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd6:	d103      	bne.n	800cfe0 <xQueueGenericSend+0x16c>
 800cfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfe6:	b25b      	sxtb	r3, r3
 800cfe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfec:	d103      	bne.n	800cff6 <xQueueGenericSend+0x182>
 800cfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff0:	2200      	movs	r2, #0
 800cff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cff6:	f001 ff15 	bl	800ee24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cffa:	1d3a      	adds	r2, r7, #4
 800cffc:	f107 0314 	add.w	r3, r7, #20
 800d000:	4611      	mov	r1, r2
 800d002:	4618      	mov	r0, r3
 800d004:	f001 fa44 	bl	800e490 <xTaskCheckForTimeOut>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d124      	bne.n	800d058 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d00e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d010:	f000 fd31 	bl	800da76 <prvIsQueueFull>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d018      	beq.n	800d04c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01c:	3310      	adds	r3, #16
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	4611      	mov	r1, r2
 800d022:	4618      	mov	r0, r3
 800d024:	f001 f998 	bl	800e358 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d02a:	f000 fcbc 	bl	800d9a6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d02e:	f000 ffbb 	bl	800dfa8 <xTaskResumeAll>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	f47f af7c 	bne.w	800cf32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d03a:	4b0c      	ldr	r3, [pc, #48]	; (800d06c <xQueueGenericSend+0x1f8>)
 800d03c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d040:	601a      	str	r2, [r3, #0]
 800d042:	f3bf 8f4f 	dsb	sy
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	e772      	b.n	800cf32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d04c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d04e:	f000 fcaa 	bl	800d9a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d052:	f000 ffa9 	bl	800dfa8 <xTaskResumeAll>
 800d056:	e76c      	b.n	800cf32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d05a:	f000 fca4 	bl	800d9a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d05e:	f000 ffa3 	bl	800dfa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d062:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d064:	4618      	mov	r0, r3
 800d066:	3738      	adds	r7, #56	; 0x38
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	e000ed04 	.word	0xe000ed04

0800d070 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b090      	sub	sp, #64	; 0x40
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	607a      	str	r2, [r7, #4]
 800d07c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d084:	2b00      	cmp	r3, #0
 800d086:	d10a      	bne.n	800d09e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08c:	f383 8811 	msr	BASEPRI, r3
 800d090:	f3bf 8f6f 	isb	sy
 800d094:	f3bf 8f4f 	dsb	sy
 800d098:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d09a:	bf00      	nop
 800d09c:	e7fe      	b.n	800d09c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d103      	bne.n	800d0ac <xQueueGenericSendFromISR+0x3c>
 800d0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d101      	bne.n	800d0b0 <xQueueGenericSendFromISR+0x40>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e000      	b.n	800d0b2 <xQueueGenericSendFromISR+0x42>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10a      	bne.n	800d0cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0c8:	bf00      	nop
 800d0ca:	e7fe      	b.n	800d0ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	d103      	bne.n	800d0da <xQueueGenericSendFromISR+0x6a>
 800d0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d101      	bne.n	800d0de <xQueueGenericSendFromISR+0x6e>
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e000      	b.n	800d0e0 <xQueueGenericSendFromISR+0x70>
 800d0de:	2300      	movs	r3, #0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d10a      	bne.n	800d0fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e8:	f383 8811 	msr	BASEPRI, r3
 800d0ec:	f3bf 8f6f 	isb	sy
 800d0f0:	f3bf 8f4f 	dsb	sy
 800d0f4:	623b      	str	r3, [r7, #32]
}
 800d0f6:	bf00      	nop
 800d0f8:	e7fe      	b.n	800d0f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0fa:	f001 ff45 	bl	800ef88 <vPortValidateInterruptPriority>
	__asm volatile
 800d0fe:	f3ef 8211 	mrs	r2, BASEPRI
 800d102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d106:	f383 8811 	msr	BASEPRI, r3
 800d10a:	f3bf 8f6f 	isb	sy
 800d10e:	f3bf 8f4f 	dsb	sy
 800d112:	61fa      	str	r2, [r7, #28]
 800d114:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d116:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d118:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d122:	429a      	cmp	r2, r3
 800d124:	d302      	bcc.n	800d12c <xQueueGenericSendFromISR+0xbc>
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	2b02      	cmp	r3, #2
 800d12a:	d12f      	bne.n	800d18c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d13c:	683a      	ldr	r2, [r7, #0]
 800d13e:	68b9      	ldr	r1, [r7, #8]
 800d140:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d142:	f000 fba0 	bl	800d886 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d146:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d14e:	d112      	bne.n	800d176 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d154:	2b00      	cmp	r3, #0
 800d156:	d016      	beq.n	800d186 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15a:	3324      	adds	r3, #36	; 0x24
 800d15c:	4618      	mov	r0, r3
 800d15e:	f001 f91f 	bl	800e3a0 <xTaskRemoveFromEventList>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00e      	beq.n	800d186 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00b      	beq.n	800d186 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2201      	movs	r2, #1
 800d172:	601a      	str	r2, [r3, #0]
 800d174:	e007      	b.n	800d186 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d176:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d17a:	3301      	adds	r3, #1
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	b25a      	sxtb	r2, r3
 800d180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d186:	2301      	movs	r3, #1
 800d188:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d18a:	e001      	b.n	800d190 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d18c:	2300      	movs	r3, #0
 800d18e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d192:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	f383 8811 	msr	BASEPRI, r3
}
 800d19a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3740      	adds	r7, #64	; 0x40
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b08e      	sub	sp, #56	; 0x38
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d10a      	bne.n	800d1d0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1be:	f383 8811 	msr	BASEPRI, r3
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	f3bf 8f4f 	dsb	sy
 800d1ca:	623b      	str	r3, [r7, #32]
}
 800d1cc:	bf00      	nop
 800d1ce:	e7fe      	b.n	800d1ce <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d00a      	beq.n	800d1ee <xQueueGiveFromISR+0x48>
	__asm volatile
 800d1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1dc:	f383 8811 	msr	BASEPRI, r3
 800d1e0:	f3bf 8f6f 	isb	sy
 800d1e4:	f3bf 8f4f 	dsb	sy
 800d1e8:	61fb      	str	r3, [r7, #28]
}
 800d1ea:	bf00      	nop
 800d1ec:	e7fe      	b.n	800d1ec <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d103      	bne.n	800d1fe <xQueueGiveFromISR+0x58>
 800d1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f8:	689b      	ldr	r3, [r3, #8]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d101      	bne.n	800d202 <xQueueGiveFromISR+0x5c>
 800d1fe:	2301      	movs	r3, #1
 800d200:	e000      	b.n	800d204 <xQueueGiveFromISR+0x5e>
 800d202:	2300      	movs	r3, #0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d10a      	bne.n	800d21e <xQueueGiveFromISR+0x78>
	__asm volatile
 800d208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20c:	f383 8811 	msr	BASEPRI, r3
 800d210:	f3bf 8f6f 	isb	sy
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	61bb      	str	r3, [r7, #24]
}
 800d21a:	bf00      	nop
 800d21c:	e7fe      	b.n	800d21c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d21e:	f001 feb3 	bl	800ef88 <vPortValidateInterruptPriority>
	__asm volatile
 800d222:	f3ef 8211 	mrs	r2, BASEPRI
 800d226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22a:	f383 8811 	msr	BASEPRI, r3
 800d22e:	f3bf 8f6f 	isb	sy
 800d232:	f3bf 8f4f 	dsb	sy
 800d236:	617a      	str	r2, [r7, #20]
 800d238:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d23a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d23c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d242:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d22b      	bcs.n	800d2a6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25a:	1c5a      	adds	r2, r3, #1
 800d25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d260:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d268:	d112      	bne.n	800d290 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d016      	beq.n	800d2a0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d274:	3324      	adds	r3, #36	; 0x24
 800d276:	4618      	mov	r0, r3
 800d278:	f001 f892 	bl	800e3a0 <xTaskRemoveFromEventList>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00e      	beq.n	800d2a0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d00b      	beq.n	800d2a0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	2201      	movs	r2, #1
 800d28c:	601a      	str	r2, [r3, #0]
 800d28e:	e007      	b.n	800d2a0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d294:	3301      	adds	r3, #1
 800d296:	b2db      	uxtb	r3, r3
 800d298:	b25a      	sxtb	r2, r3
 800d29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	637b      	str	r3, [r7, #52]	; 0x34
 800d2a4:	e001      	b.n	800d2aa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	637b      	str	r3, [r7, #52]	; 0x34
 800d2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f383 8811 	msr	BASEPRI, r3
}
 800d2b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3738      	adds	r7, #56	; 0x38
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b08c      	sub	sp, #48	; 0x30
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10a      	bne.n	800d2f0 <xQueueReceive+0x30>
	__asm volatile
 800d2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	623b      	str	r3, [r7, #32]
}
 800d2ec:	bf00      	nop
 800d2ee:	e7fe      	b.n	800d2ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d103      	bne.n	800d2fe <xQueueReceive+0x3e>
 800d2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d101      	bne.n	800d302 <xQueueReceive+0x42>
 800d2fe:	2301      	movs	r3, #1
 800d300:	e000      	b.n	800d304 <xQueueReceive+0x44>
 800d302:	2300      	movs	r3, #0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10a      	bne.n	800d31e <xQueueReceive+0x5e>
	__asm volatile
 800d308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30c:	f383 8811 	msr	BASEPRI, r3
 800d310:	f3bf 8f6f 	isb	sy
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	61fb      	str	r3, [r7, #28]
}
 800d31a:	bf00      	nop
 800d31c:	e7fe      	b.n	800d31c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d31e:	f001 f9ff 	bl	800e720 <xTaskGetSchedulerState>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d102      	bne.n	800d32e <xQueueReceive+0x6e>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <xQueueReceive+0x72>
 800d32e:	2301      	movs	r3, #1
 800d330:	e000      	b.n	800d334 <xQueueReceive+0x74>
 800d332:	2300      	movs	r3, #0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10a      	bne.n	800d34e <xQueueReceive+0x8e>
	__asm volatile
 800d338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33c:	f383 8811 	msr	BASEPRI, r3
 800d340:	f3bf 8f6f 	isb	sy
 800d344:	f3bf 8f4f 	dsb	sy
 800d348:	61bb      	str	r3, [r7, #24]
}
 800d34a:	bf00      	nop
 800d34c:	e7fe      	b.n	800d34c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d34e:	f001 fd39 	bl	800edc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d356:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d01f      	beq.n	800d39e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d35e:	68b9      	ldr	r1, [r7, #8]
 800d360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d362:	f000 fafa 	bl	800d95a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d368:	1e5a      	subs	r2, r3, #1
 800d36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00f      	beq.n	800d396 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d378:	3310      	adds	r3, #16
 800d37a:	4618      	mov	r0, r3
 800d37c:	f001 f810 	bl	800e3a0 <xTaskRemoveFromEventList>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d007      	beq.n	800d396 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d386:	4b3d      	ldr	r3, [pc, #244]	; (800d47c <xQueueReceive+0x1bc>)
 800d388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d38c:	601a      	str	r2, [r3, #0]
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d396:	f001 fd45 	bl	800ee24 <vPortExitCritical>
				return pdPASS;
 800d39a:	2301      	movs	r3, #1
 800d39c:	e069      	b.n	800d472 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d103      	bne.n	800d3ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d3a4:	f001 fd3e 	bl	800ee24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	e062      	b.n	800d472 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d106      	bne.n	800d3c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3b2:	f107 0310 	add.w	r3, r7, #16
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f001 f854 	bl	800e464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3c0:	f001 fd30 	bl	800ee24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3c4:	f000 fde2 	bl	800df8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3c8:	f001 fcfc 	bl	800edc4 <vPortEnterCritical>
 800d3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3d2:	b25b      	sxtb	r3, r3
 800d3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d8:	d103      	bne.n	800d3e2 <xQueueReceive+0x122>
 800d3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3e8:	b25b      	sxtb	r3, r3
 800d3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ee:	d103      	bne.n	800d3f8 <xQueueReceive+0x138>
 800d3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3f8:	f001 fd14 	bl	800ee24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3fc:	1d3a      	adds	r2, r7, #4
 800d3fe:	f107 0310 	add.w	r3, r7, #16
 800d402:	4611      	mov	r1, r2
 800d404:	4618      	mov	r0, r3
 800d406:	f001 f843 	bl	800e490 <xTaskCheckForTimeOut>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d123      	bne.n	800d458 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d412:	f000 fb1a 	bl	800da4a <prvIsQueueEmpty>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d017      	beq.n	800d44c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41e:	3324      	adds	r3, #36	; 0x24
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	4611      	mov	r1, r2
 800d424:	4618      	mov	r0, r3
 800d426:	f000 ff97 	bl	800e358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d42a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d42c:	f000 fabb 	bl	800d9a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d430:	f000 fdba 	bl	800dfa8 <xTaskResumeAll>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d189      	bne.n	800d34e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d43a:	4b10      	ldr	r3, [pc, #64]	; (800d47c <xQueueReceive+0x1bc>)
 800d43c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d440:	601a      	str	r2, [r3, #0]
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	f3bf 8f6f 	isb	sy
 800d44a:	e780      	b.n	800d34e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d44c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d44e:	f000 faaa 	bl	800d9a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d452:	f000 fda9 	bl	800dfa8 <xTaskResumeAll>
 800d456:	e77a      	b.n	800d34e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d45a:	f000 faa4 	bl	800d9a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d45e:	f000 fda3 	bl	800dfa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d464:	f000 faf1 	bl	800da4a <prvIsQueueEmpty>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f43f af6f 	beq.w	800d34e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d470:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d472:	4618      	mov	r0, r3
 800d474:	3730      	adds	r7, #48	; 0x30
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	e000ed04 	.word	0xe000ed04

0800d480 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b08e      	sub	sp, #56	; 0x38
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d48a:	2300      	movs	r3, #0
 800d48c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d492:	2300      	movs	r3, #0
 800d494:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d10a      	bne.n	800d4b2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a0:	f383 8811 	msr	BASEPRI, r3
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	f3bf 8f4f 	dsb	sy
 800d4ac:	623b      	str	r3, [r7, #32]
}
 800d4ae:	bf00      	nop
 800d4b0:	e7fe      	b.n	800d4b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	61fb      	str	r3, [r7, #28]
}
 800d4cc:	bf00      	nop
 800d4ce:	e7fe      	b.n	800d4ce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4d0:	f001 f926 	bl	800e720 <xTaskGetSchedulerState>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d102      	bne.n	800d4e0 <xQueueSemaphoreTake+0x60>
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d101      	bne.n	800d4e4 <xQueueSemaphoreTake+0x64>
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	e000      	b.n	800d4e6 <xQueueSemaphoreTake+0x66>
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10a      	bne.n	800d500 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ee:	f383 8811 	msr	BASEPRI, r3
 800d4f2:	f3bf 8f6f 	isb	sy
 800d4f6:	f3bf 8f4f 	dsb	sy
 800d4fa:	61bb      	str	r3, [r7, #24]
}
 800d4fc:	bf00      	nop
 800d4fe:	e7fe      	b.n	800d4fe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d500:	f001 fc60 	bl	800edc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d508:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d024      	beq.n	800d55a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d512:	1e5a      	subs	r2, r3, #1
 800d514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d516:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d104      	bne.n	800d52a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d520:	f001 faa6 	bl	800ea70 <pvTaskIncrementMutexHeldCount>
 800d524:	4602      	mov	r2, r0
 800d526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d528:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52c:	691b      	ldr	r3, [r3, #16]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d00f      	beq.n	800d552 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d534:	3310      	adds	r3, #16
 800d536:	4618      	mov	r0, r3
 800d538:	f000 ff32 	bl	800e3a0 <xTaskRemoveFromEventList>
 800d53c:	4603      	mov	r3, r0
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d007      	beq.n	800d552 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d542:	4b54      	ldr	r3, [pc, #336]	; (800d694 <xQueueSemaphoreTake+0x214>)
 800d544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d548:	601a      	str	r2, [r3, #0]
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d552:	f001 fc67 	bl	800ee24 <vPortExitCritical>
				return pdPASS;
 800d556:	2301      	movs	r3, #1
 800d558:	e097      	b.n	800d68a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d111      	bne.n	800d584 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d562:	2b00      	cmp	r3, #0
 800d564:	d00a      	beq.n	800d57c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56a:	f383 8811 	msr	BASEPRI, r3
 800d56e:	f3bf 8f6f 	isb	sy
 800d572:	f3bf 8f4f 	dsb	sy
 800d576:	617b      	str	r3, [r7, #20]
}
 800d578:	bf00      	nop
 800d57a:	e7fe      	b.n	800d57a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d57c:	f001 fc52 	bl	800ee24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d580:	2300      	movs	r3, #0
 800d582:	e082      	b.n	800d68a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d586:	2b00      	cmp	r3, #0
 800d588:	d106      	bne.n	800d598 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d58a:	f107 030c 	add.w	r3, r7, #12
 800d58e:	4618      	mov	r0, r3
 800d590:	f000 ff68 	bl	800e464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d594:	2301      	movs	r3, #1
 800d596:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d598:	f001 fc44 	bl	800ee24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d59c:	f000 fcf6 	bl	800df8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5a0:	f001 fc10 	bl	800edc4 <vPortEnterCritical>
 800d5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5aa:	b25b      	sxtb	r3, r3
 800d5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b0:	d103      	bne.n	800d5ba <xQueueSemaphoreTake+0x13a>
 800d5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5c0:	b25b      	sxtb	r3, r3
 800d5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c6:	d103      	bne.n	800d5d0 <xQueueSemaphoreTake+0x150>
 800d5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5d0:	f001 fc28 	bl	800ee24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5d4:	463a      	mov	r2, r7
 800d5d6:	f107 030c 	add.w	r3, r7, #12
 800d5da:	4611      	mov	r1, r2
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f000 ff57 	bl	800e490 <xTaskCheckForTimeOut>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d132      	bne.n	800d64e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5ea:	f000 fa2e 	bl	800da4a <prvIsQueueEmpty>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d026      	beq.n	800d642 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d109      	bne.n	800d610 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d5fc:	f001 fbe2 	bl	800edc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d602:	689b      	ldr	r3, [r3, #8]
 800d604:	4618      	mov	r0, r3
 800d606:	f001 f8a9 	bl	800e75c <xTaskPriorityInherit>
 800d60a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d60c:	f001 fc0a 	bl	800ee24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d612:	3324      	adds	r3, #36	; 0x24
 800d614:	683a      	ldr	r2, [r7, #0]
 800d616:	4611      	mov	r1, r2
 800d618:	4618      	mov	r0, r3
 800d61a:	f000 fe9d 	bl	800e358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d61e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d620:	f000 f9c1 	bl	800d9a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d624:	f000 fcc0 	bl	800dfa8 <xTaskResumeAll>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	f47f af68 	bne.w	800d500 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d630:	4b18      	ldr	r3, [pc, #96]	; (800d694 <xQueueSemaphoreTake+0x214>)
 800d632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d636:	601a      	str	r2, [r3, #0]
 800d638:	f3bf 8f4f 	dsb	sy
 800d63c:	f3bf 8f6f 	isb	sy
 800d640:	e75e      	b.n	800d500 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d644:	f000 f9af 	bl	800d9a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d648:	f000 fcae 	bl	800dfa8 <xTaskResumeAll>
 800d64c:	e758      	b.n	800d500 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d64e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d650:	f000 f9a9 	bl	800d9a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d654:	f000 fca8 	bl	800dfa8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d65a:	f000 f9f6 	bl	800da4a <prvIsQueueEmpty>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	f43f af4d 	beq.w	800d500 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00d      	beq.n	800d688 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d66c:	f001 fbaa 	bl	800edc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d672:	f000 f8f0 	bl	800d856 <prvGetDisinheritPriorityAfterTimeout>
 800d676:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67a:	689b      	ldr	r3, [r3, #8]
 800d67c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d67e:	4618      	mov	r0, r3
 800d680:	f001 f968 	bl	800e954 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d684:	f001 fbce 	bl	800ee24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d688:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3738      	adds	r7, #56	; 0x38
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	e000ed04 	.word	0xe000ed04

0800d698 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b08e      	sub	sp, #56	; 0x38
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10a      	bne.n	800d6c4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	623b      	str	r3, [r7, #32]
}
 800d6c0:	bf00      	nop
 800d6c2:	e7fe      	b.n	800d6c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d103      	bne.n	800d6d2 <xQueueReceiveFromISR+0x3a>
 800d6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d101      	bne.n	800d6d6 <xQueueReceiveFromISR+0x3e>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e000      	b.n	800d6d8 <xQueueReceiveFromISR+0x40>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d10a      	bne.n	800d6f2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e0:	f383 8811 	msr	BASEPRI, r3
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	61fb      	str	r3, [r7, #28]
}
 800d6ee:	bf00      	nop
 800d6f0:	e7fe      	b.n	800d6f0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6f2:	f001 fc49 	bl	800ef88 <vPortValidateInterruptPriority>
	__asm volatile
 800d6f6:	f3ef 8211 	mrs	r2, BASEPRI
 800d6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fe:	f383 8811 	msr	BASEPRI, r3
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	f3bf 8f4f 	dsb	sy
 800d70a:	61ba      	str	r2, [r7, #24]
 800d70c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d70e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d710:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d716:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d02f      	beq.n	800d77e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d728:	68b9      	ldr	r1, [r7, #8]
 800d72a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d72c:	f000 f915 	bl	800d95a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d732:	1e5a      	subs	r2, r3, #1
 800d734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d736:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d738:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d740:	d112      	bne.n	800d768 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d744:	691b      	ldr	r3, [r3, #16]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d016      	beq.n	800d778 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74c:	3310      	adds	r3, #16
 800d74e:	4618      	mov	r0, r3
 800d750:	f000 fe26 	bl	800e3a0 <xTaskRemoveFromEventList>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d00e      	beq.n	800d778 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00b      	beq.n	800d778 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2201      	movs	r2, #1
 800d764:	601a      	str	r2, [r3, #0]
 800d766:	e007      	b.n	800d778 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d76c:	3301      	adds	r3, #1
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	b25a      	sxtb	r2, r3
 800d772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d778:	2301      	movs	r3, #1
 800d77a:	637b      	str	r3, [r7, #52]	; 0x34
 800d77c:	e001      	b.n	800d782 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d77e:	2300      	movs	r3, #0
 800d780:	637b      	str	r3, [r7, #52]	; 0x34
 800d782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d784:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	f383 8811 	msr	BASEPRI, r3
}
 800d78c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d790:	4618      	mov	r0, r3
 800d792:	3738      	adds	r7, #56	; 0x38
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d10a      	bne.n	800d7bc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800d7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7aa:	f383 8811 	msr	BASEPRI, r3
 800d7ae:	f3bf 8f6f 	isb	sy
 800d7b2:	f3bf 8f4f 	dsb	sy
 800d7b6:	60bb      	str	r3, [r7, #8]
}
 800d7b8:	bf00      	nop
 800d7ba:	e7fe      	b.n	800d7ba <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800d7bc:	f001 fb02 	bl	800edc4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d7c6:	f001 fb2d 	bl	800ee24 <vPortExitCritical>

	return uxReturn;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3710      	adds	r7, #16
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b087      	sub	sp, #28
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d10a      	bne.n	800d7fc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800d7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ea:	f383 8811 	msr	BASEPRI, r3
 800d7ee:	f3bf 8f6f 	isb	sy
 800d7f2:	f3bf 8f4f 	dsb	sy
 800d7f6:	60fb      	str	r3, [r7, #12]
}
 800d7f8:	bf00      	nop
 800d7fa:	e7fe      	b.n	800d7fa <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d800:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800d802:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d804:	4618      	mov	r0, r3
 800d806:	371c      	adds	r7, #28
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d10a      	bne.n	800d838 <vQueueDelete+0x28>
	__asm volatile
 800d822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d826:	f383 8811 	msr	BASEPRI, r3
 800d82a:	f3bf 8f6f 	isb	sy
 800d82e:	f3bf 8f4f 	dsb	sy
 800d832:	60bb      	str	r3, [r7, #8]
}
 800d834:	bf00      	nop
 800d836:	e7fe      	b.n	800d836 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d838:	68f8      	ldr	r0, [r7, #12]
 800d83a:	f000 f935 	bl	800daa8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d844:	2b00      	cmp	r3, #0
 800d846:	d102      	bne.n	800d84e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	f001 fca9 	bl	800f1a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d84e:	bf00      	nop
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d856:	b480      	push	{r7}
 800d858:	b085      	sub	sp, #20
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d862:	2b00      	cmp	r3, #0
 800d864:	d006      	beq.n	800d874 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f1c3 0307 	rsb	r3, r3, #7
 800d870:	60fb      	str	r3, [r7, #12]
 800d872:	e001      	b.n	800d878 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d874:	2300      	movs	r3, #0
 800d876:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d878:	68fb      	ldr	r3, [r7, #12]
	}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3714      	adds	r7, #20
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr

0800d886 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d886:	b580      	push	{r7, lr}
 800d888:	b086      	sub	sp, #24
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	60f8      	str	r0, [r7, #12]
 800d88e:	60b9      	str	r1, [r7, #8]
 800d890:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d892:	2300      	movs	r3, #0
 800d894:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d89a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10d      	bne.n	800d8c0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d14d      	bne.n	800d948 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f000 ffc9 	bl	800e848 <xTaskPriorityDisinherit>
 800d8b6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	609a      	str	r2, [r3, #8]
 800d8be:	e043      	b.n	800d948 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d119      	bne.n	800d8fa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6858      	ldr	r0, [r3, #4]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	68b9      	ldr	r1, [r7, #8]
 800d8d2:	f00e ffdf 	bl	801c894 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	685a      	ldr	r2, [r3, #4]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8de:	441a      	add	r2, r3
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	685a      	ldr	r2, [r3, #4]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d32b      	bcc.n	800d948 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	605a      	str	r2, [r3, #4]
 800d8f8:	e026      	b.n	800d948 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	68d8      	ldr	r0, [r3, #12]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d902:	461a      	mov	r2, r3
 800d904:	68b9      	ldr	r1, [r7, #8]
 800d906:	f00e ffc5 	bl	801c894 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	68da      	ldr	r2, [r3, #12]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d912:	425b      	negs	r3, r3
 800d914:	441a      	add	r2, r3
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	68da      	ldr	r2, [r3, #12]
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	429a      	cmp	r2, r3
 800d924:	d207      	bcs.n	800d936 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	689a      	ldr	r2, [r3, #8]
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d92e:	425b      	negs	r3, r3
 800d930:	441a      	add	r2, r3
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b02      	cmp	r3, #2
 800d93a:	d105      	bne.n	800d948 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d002      	beq.n	800d948 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	3b01      	subs	r3, #1
 800d946:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	1c5a      	adds	r2, r3, #1
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d950:	697b      	ldr	r3, [r7, #20]
}
 800d952:	4618      	mov	r0, r3
 800d954:	3718      	adds	r7, #24
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b082      	sub	sp, #8
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d018      	beq.n	800d99e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	68da      	ldr	r2, [r3, #12]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d974:	441a      	add	r2, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	68da      	ldr	r2, [r3, #12]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	689b      	ldr	r3, [r3, #8]
 800d982:	429a      	cmp	r2, r3
 800d984:	d303      	bcc.n	800d98e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681a      	ldr	r2, [r3, #0]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	68d9      	ldr	r1, [r3, #12]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d996:	461a      	mov	r2, r3
 800d998:	6838      	ldr	r0, [r7, #0]
 800d99a:	f00e ff7b 	bl	801c894 <memcpy>
	}
}
 800d99e:	bf00      	nop
 800d9a0:	3708      	adds	r7, #8
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d9a6:	b580      	push	{r7, lr}
 800d9a8:	b084      	sub	sp, #16
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d9ae:	f001 fa09 	bl	800edc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9b8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d9ba:	e011      	b.n	800d9e0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d012      	beq.n	800d9ea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	3324      	adds	r3, #36	; 0x24
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f000 fce9 	bl	800e3a0 <xTaskRemoveFromEventList>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d001      	beq.n	800d9d8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d9d4:	f000 fdbe 	bl	800e554 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d9d8:	7bfb      	ldrb	r3, [r7, #15]
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d9e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	dce9      	bgt.n	800d9bc <prvUnlockQueue+0x16>
 800d9e8:	e000      	b.n	800d9ec <prvUnlockQueue+0x46>
					break;
 800d9ea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	22ff      	movs	r2, #255	; 0xff
 800d9f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d9f4:	f001 fa16 	bl	800ee24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d9f8:	f001 f9e4 	bl	800edc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da02:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da04:	e011      	b.n	800da2a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	691b      	ldr	r3, [r3, #16]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d012      	beq.n	800da34 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	3310      	adds	r3, #16
 800da12:	4618      	mov	r0, r3
 800da14:	f000 fcc4 	bl	800e3a0 <xTaskRemoveFromEventList>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d001      	beq.n	800da22 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800da1e:	f000 fd99 	bl	800e554 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800da22:	7bbb      	ldrb	r3, [r7, #14]
 800da24:	3b01      	subs	r3, #1
 800da26:	b2db      	uxtb	r3, r3
 800da28:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	dce9      	bgt.n	800da06 <prvUnlockQueue+0x60>
 800da32:	e000      	b.n	800da36 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800da34:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	22ff      	movs	r2, #255	; 0xff
 800da3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800da3e:	f001 f9f1 	bl	800ee24 <vPortExitCritical>
}
 800da42:	bf00      	nop
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b084      	sub	sp, #16
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da52:	f001 f9b7 	bl	800edc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d102      	bne.n	800da64 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800da5e:	2301      	movs	r3, #1
 800da60:	60fb      	str	r3, [r7, #12]
 800da62:	e001      	b.n	800da68 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800da64:	2300      	movs	r3, #0
 800da66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da68:	f001 f9dc 	bl	800ee24 <vPortExitCritical>

	return xReturn;
 800da6c:	68fb      	ldr	r3, [r7, #12]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b084      	sub	sp, #16
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da7e:	f001 f9a1 	bl	800edc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d102      	bne.n	800da94 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800da8e:	2301      	movs	r3, #1
 800da90:	60fb      	str	r3, [r7, #12]
 800da92:	e001      	b.n	800da98 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800da94:	2300      	movs	r3, #0
 800da96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da98:	f001 f9c4 	bl	800ee24 <vPortExitCritical>

	return xReturn;
 800da9c:	68fb      	ldr	r3, [r7, #12]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
	...

0800daa8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800daa8:	b480      	push	{r7}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dab0:	2300      	movs	r3, #0
 800dab2:	60fb      	str	r3, [r7, #12]
 800dab4:	e016      	b.n	800dae4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dab6:	4a10      	ldr	r2, [pc, #64]	; (800daf8 <vQueueUnregisterQueue+0x50>)
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	00db      	lsls	r3, r3, #3
 800dabc:	4413      	add	r3, r2
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d10b      	bne.n	800dade <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dac6:	4a0c      	ldr	r2, [pc, #48]	; (800daf8 <vQueueUnregisterQueue+0x50>)
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2100      	movs	r1, #0
 800dacc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dad0:	4a09      	ldr	r2, [pc, #36]	; (800daf8 <vQueueUnregisterQueue+0x50>)
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	00db      	lsls	r3, r3, #3
 800dad6:	4413      	add	r3, r2
 800dad8:	2200      	movs	r2, #0
 800dada:	605a      	str	r2, [r3, #4]
				break;
 800dadc:	e006      	b.n	800daec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	3301      	adds	r3, #1
 800dae2:	60fb      	str	r3, [r7, #12]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2b07      	cmp	r3, #7
 800dae8:	d9e5      	bls.n	800dab6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800daea:	bf00      	nop
 800daec:	bf00      	nop
 800daee:	3714      	adds	r7, #20
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr
 800daf8:	20004184 	.word	0x20004184

0800dafc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b08e      	sub	sp, #56	; 0x38
 800db00:	af04      	add	r7, sp, #16
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	607a      	str	r2, [r7, #4]
 800db08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800db0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10a      	bne.n	800db26 <xTaskCreateStatic+0x2a>
	__asm volatile
 800db10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db14:	f383 8811 	msr	BASEPRI, r3
 800db18:	f3bf 8f6f 	isb	sy
 800db1c:	f3bf 8f4f 	dsb	sy
 800db20:	623b      	str	r3, [r7, #32]
}
 800db22:	bf00      	nop
 800db24:	e7fe      	b.n	800db24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800db26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10a      	bne.n	800db42 <xTaskCreateStatic+0x46>
	__asm volatile
 800db2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db30:	f383 8811 	msr	BASEPRI, r3
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	61fb      	str	r3, [r7, #28]
}
 800db3e:	bf00      	nop
 800db40:	e7fe      	b.n	800db40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800db42:	23b4      	movs	r3, #180	; 0xb4
 800db44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	2bb4      	cmp	r3, #180	; 0xb4
 800db4a:	d00a      	beq.n	800db62 <xTaskCreateStatic+0x66>
	__asm volatile
 800db4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db50:	f383 8811 	msr	BASEPRI, r3
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	61bb      	str	r3, [r7, #24]
}
 800db5e:	bf00      	nop
 800db60:	e7fe      	b.n	800db60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800db62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800db64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db66:	2b00      	cmp	r3, #0
 800db68:	d01e      	beq.n	800dba8 <xTaskCreateStatic+0xac>
 800db6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d01b      	beq.n	800dba8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800db7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7c:	2202      	movs	r2, #2
 800db7e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800db82:	2300      	movs	r3, #0
 800db84:	9303      	str	r3, [sp, #12]
 800db86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db88:	9302      	str	r3, [sp, #8]
 800db8a:	f107 0314 	add.w	r3, r7, #20
 800db8e:	9301      	str	r3, [sp, #4]
 800db90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db92:	9300      	str	r3, [sp, #0]
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	68b9      	ldr	r1, [r7, #8]
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	f000 f850 	bl	800dc40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dba2:	f000 f8eb 	bl	800dd7c <prvAddNewTaskToReadyList>
 800dba6:	e001      	b.n	800dbac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dbac:	697b      	ldr	r3, [r7, #20]
	}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3728      	adds	r7, #40	; 0x28
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b08c      	sub	sp, #48	; 0x30
 800dbba:	af04      	add	r7, sp, #16
 800dbbc:	60f8      	str	r0, [r7, #12]
 800dbbe:	60b9      	str	r1, [r7, #8]
 800dbc0:	603b      	str	r3, [r7, #0]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dbc6:	88fb      	ldrh	r3, [r7, #6]
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f001 fa1c 	bl	800f008 <pvPortMalloc>
 800dbd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00e      	beq.n	800dbf6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dbd8:	20b4      	movs	r0, #180	; 0xb4
 800dbda:	f001 fa15 	bl	800f008 <pvPortMalloc>
 800dbde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d003      	beq.n	800dbee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dbe6:	69fb      	ldr	r3, [r7, #28]
 800dbe8:	697a      	ldr	r2, [r7, #20]
 800dbea:	631a      	str	r2, [r3, #48]	; 0x30
 800dbec:	e005      	b.n	800dbfa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dbee:	6978      	ldr	r0, [r7, #20]
 800dbf0:	f001 fad6 	bl	800f1a0 <vPortFree>
 800dbf4:	e001      	b.n	800dbfa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d017      	beq.n	800dc30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dc08:	88fa      	ldrh	r2, [r7, #6]
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	9303      	str	r3, [sp, #12]
 800dc0e:	69fb      	ldr	r3, [r7, #28]
 800dc10:	9302      	str	r3, [sp, #8]
 800dc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc14:	9301      	str	r3, [sp, #4]
 800dc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc18:	9300      	str	r3, [sp, #0]
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	68b9      	ldr	r1, [r7, #8]
 800dc1e:	68f8      	ldr	r0, [r7, #12]
 800dc20:	f000 f80e 	bl	800dc40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc24:	69f8      	ldr	r0, [r7, #28]
 800dc26:	f000 f8a9 	bl	800dd7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	61bb      	str	r3, [r7, #24]
 800dc2e:	e002      	b.n	800dc36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc30:	f04f 33ff 	mov.w	r3, #4294967295
 800dc34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dc36:	69bb      	ldr	r3, [r7, #24]
	}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3720      	adds	r7, #32
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b088      	sub	sp, #32
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	607a      	str	r2, [r7, #4]
 800dc4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dc58:	3b01      	subs	r3, #1
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	4413      	add	r3, r2
 800dc5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dc60:	69bb      	ldr	r3, [r7, #24]
 800dc62:	f023 0307 	bic.w	r3, r3, #7
 800dc66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dc68:	69bb      	ldr	r3, [r7, #24]
 800dc6a:	f003 0307 	and.w	r3, r3, #7
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d00a      	beq.n	800dc88 <prvInitialiseNewTask+0x48>
	__asm volatile
 800dc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc76:	f383 8811 	msr	BASEPRI, r3
 800dc7a:	f3bf 8f6f 	isb	sy
 800dc7e:	f3bf 8f4f 	dsb	sy
 800dc82:	617b      	str	r3, [r7, #20]
}
 800dc84:	bf00      	nop
 800dc86:	e7fe      	b.n	800dc86 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d01f      	beq.n	800dcce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc8e:	2300      	movs	r3, #0
 800dc90:	61fb      	str	r3, [r7, #28]
 800dc92:	e012      	b.n	800dcba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc94:	68ba      	ldr	r2, [r7, #8]
 800dc96:	69fb      	ldr	r3, [r7, #28]
 800dc98:	4413      	add	r3, r2
 800dc9a:	7819      	ldrb	r1, [r3, #0]
 800dc9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	4413      	add	r3, r2
 800dca2:	3334      	adds	r3, #52	; 0x34
 800dca4:	460a      	mov	r2, r1
 800dca6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dca8:	68ba      	ldr	r2, [r7, #8]
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	4413      	add	r3, r2
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d006      	beq.n	800dcc2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	61fb      	str	r3, [r7, #28]
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	2b0f      	cmp	r3, #15
 800dcbe:	d9e9      	bls.n	800dc94 <prvInitialiseNewTask+0x54>
 800dcc0:	e000      	b.n	800dcc4 <prvInitialiseNewTask+0x84>
			{
				break;
 800dcc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dccc:	e003      	b.n	800dcd6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd8:	2b06      	cmp	r3, #6
 800dcda:	d901      	bls.n	800dce0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dcdc:	2306      	movs	r3, #6
 800dcde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dce4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcee:	2200      	movs	r2, #0
 800dcf0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf4:	3304      	adds	r3, #4
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fe fea2 	bl	800ca40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfe:	3318      	adds	r3, #24
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7fe fe9d 	bl	800ca40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0e:	f1c3 0207 	rsb	r2, r3, #7
 800dd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd26:	2200      	movs	r2, #0
 800dd28:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2e:	334c      	adds	r3, #76	; 0x4c
 800dd30:	2260      	movs	r2, #96	; 0x60
 800dd32:	2100      	movs	r1, #0
 800dd34:	4618      	mov	r0, r3
 800dd36:	f00e fdd5 	bl	801c8e4 <memset>
 800dd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3c:	4a0c      	ldr	r2, [pc, #48]	; (800dd70 <prvInitialiseNewTask+0x130>)
 800dd3e:	651a      	str	r2, [r3, #80]	; 0x50
 800dd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd42:	4a0c      	ldr	r2, [pc, #48]	; (800dd74 <prvInitialiseNewTask+0x134>)
 800dd44:	655a      	str	r2, [r3, #84]	; 0x54
 800dd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd48:	4a0b      	ldr	r2, [pc, #44]	; (800dd78 <prvInitialiseNewTask+0x138>)
 800dd4a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dd4c:	683a      	ldr	r2, [r7, #0]
 800dd4e:	68f9      	ldr	r1, [r7, #12]
 800dd50:	69b8      	ldr	r0, [r7, #24]
 800dd52:	f000 ff07 	bl	800eb64 <pxPortInitialiseStack>
 800dd56:	4602      	mov	r2, r0
 800dd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d002      	beq.n	800dd68 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd68:	bf00      	nop
 800dd6a:	3720      	adds	r7, #32
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	08021724 	.word	0x08021724
 800dd74:	08021744 	.word	0x08021744
 800dd78:	08021704 	.word	0x08021704

0800dd7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dd84:	f001 f81e 	bl	800edc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dd88:	4b2a      	ldr	r3, [pc, #168]	; (800de34 <prvAddNewTaskToReadyList+0xb8>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	4a29      	ldr	r2, [pc, #164]	; (800de34 <prvAddNewTaskToReadyList+0xb8>)
 800dd90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dd92:	4b29      	ldr	r3, [pc, #164]	; (800de38 <prvAddNewTaskToReadyList+0xbc>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d109      	bne.n	800ddae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd9a:	4a27      	ldr	r2, [pc, #156]	; (800de38 <prvAddNewTaskToReadyList+0xbc>)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dda0:	4b24      	ldr	r3, [pc, #144]	; (800de34 <prvAddNewTaskToReadyList+0xb8>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d110      	bne.n	800ddca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dda8:	f000 fbf8 	bl	800e59c <prvInitialiseTaskLists>
 800ddac:	e00d      	b.n	800ddca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ddae:	4b23      	ldr	r3, [pc, #140]	; (800de3c <prvAddNewTaskToReadyList+0xc0>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d109      	bne.n	800ddca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ddb6:	4b20      	ldr	r3, [pc, #128]	; (800de38 <prvAddNewTaskToReadyList+0xbc>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d802      	bhi.n	800ddca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ddc4:	4a1c      	ldr	r2, [pc, #112]	; (800de38 <prvAddNewTaskToReadyList+0xbc>)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ddca:	4b1d      	ldr	r3, [pc, #116]	; (800de40 <prvAddNewTaskToReadyList+0xc4>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	4a1b      	ldr	r2, [pc, #108]	; (800de40 <prvAddNewTaskToReadyList+0xc4>)
 800ddd2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd8:	2201      	movs	r2, #1
 800ddda:	409a      	lsls	r2, r3
 800dddc:	4b19      	ldr	r3, [pc, #100]	; (800de44 <prvAddNewTaskToReadyList+0xc8>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4313      	orrs	r3, r2
 800dde2:	4a18      	ldr	r2, [pc, #96]	; (800de44 <prvAddNewTaskToReadyList+0xc8>)
 800dde4:	6013      	str	r3, [r2, #0]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddea:	4613      	mov	r3, r2
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	4413      	add	r3, r2
 800ddf0:	009b      	lsls	r3, r3, #2
 800ddf2:	4a15      	ldr	r2, [pc, #84]	; (800de48 <prvAddNewTaskToReadyList+0xcc>)
 800ddf4:	441a      	add	r2, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	3304      	adds	r3, #4
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	4610      	mov	r0, r2
 800ddfe:	f7fe fe2c 	bl	800ca5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800de02:	f001 f80f 	bl	800ee24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800de06:	4b0d      	ldr	r3, [pc, #52]	; (800de3c <prvAddNewTaskToReadyList+0xc0>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00e      	beq.n	800de2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800de0e:	4b0a      	ldr	r3, [pc, #40]	; (800de38 <prvAddNewTaskToReadyList+0xbc>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de18:	429a      	cmp	r2, r3
 800de1a:	d207      	bcs.n	800de2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800de1c:	4b0b      	ldr	r3, [pc, #44]	; (800de4c <prvAddNewTaskToReadyList+0xd0>)
 800de1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de22:	601a      	str	r2, [r3, #0]
 800de24:	f3bf 8f4f 	dsb	sy
 800de28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de2c:	bf00      	nop
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	200042c4 	.word	0x200042c4
 800de38:	200041c4 	.word	0x200041c4
 800de3c:	200042d0 	.word	0x200042d0
 800de40:	200042e0 	.word	0x200042e0
 800de44:	200042cc 	.word	0x200042cc
 800de48:	200041c8 	.word	0x200041c8
 800de4c:	e000ed04 	.word	0xe000ed04

0800de50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800de58:	2300      	movs	r3, #0
 800de5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d017      	beq.n	800de92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800de62:	4b13      	ldr	r3, [pc, #76]	; (800deb0 <vTaskDelay+0x60>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d00a      	beq.n	800de80 <vTaskDelay+0x30>
	__asm volatile
 800de6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6e:	f383 8811 	msr	BASEPRI, r3
 800de72:	f3bf 8f6f 	isb	sy
 800de76:	f3bf 8f4f 	dsb	sy
 800de7a:	60bb      	str	r3, [r7, #8]
}
 800de7c:	bf00      	nop
 800de7e:	e7fe      	b.n	800de7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800de80:	f000 f884 	bl	800df8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800de84:	2100      	movs	r1, #0
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 fe06 	bl	800ea98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800de8c:	f000 f88c 	bl	800dfa8 <xTaskResumeAll>
 800de90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d107      	bne.n	800dea8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800de98:	4b06      	ldr	r3, [pc, #24]	; (800deb4 <vTaskDelay+0x64>)
 800de9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de9e:	601a      	str	r2, [r3, #0]
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dea8:	bf00      	nop
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	200042ec 	.word	0x200042ec
 800deb4:	e000ed04 	.word	0xe000ed04

0800deb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b08a      	sub	sp, #40	; 0x28
 800debc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800debe:	2300      	movs	r3, #0
 800dec0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dec2:	2300      	movs	r3, #0
 800dec4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dec6:	463a      	mov	r2, r7
 800dec8:	1d39      	adds	r1, r7, #4
 800deca:	f107 0308 	add.w	r3, r7, #8
 800dece:	4618      	mov	r0, r3
 800ded0:	f7f3 fa1e 	bl	8001310 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ded4:	6839      	ldr	r1, [r7, #0]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	68ba      	ldr	r2, [r7, #8]
 800deda:	9202      	str	r2, [sp, #8]
 800dedc:	9301      	str	r3, [sp, #4]
 800dede:	2300      	movs	r3, #0
 800dee0:	9300      	str	r3, [sp, #0]
 800dee2:	2300      	movs	r3, #0
 800dee4:	460a      	mov	r2, r1
 800dee6:	4921      	ldr	r1, [pc, #132]	; (800df6c <vTaskStartScheduler+0xb4>)
 800dee8:	4821      	ldr	r0, [pc, #132]	; (800df70 <vTaskStartScheduler+0xb8>)
 800deea:	f7ff fe07 	bl	800dafc <xTaskCreateStatic>
 800deee:	4603      	mov	r3, r0
 800def0:	4a20      	ldr	r2, [pc, #128]	; (800df74 <vTaskStartScheduler+0xbc>)
 800def2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800def4:	4b1f      	ldr	r3, [pc, #124]	; (800df74 <vTaskStartScheduler+0xbc>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d002      	beq.n	800df02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800defc:	2301      	movs	r3, #1
 800defe:	617b      	str	r3, [r7, #20]
 800df00:	e001      	b.n	800df06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df02:	2300      	movs	r3, #0
 800df04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d11b      	bne.n	800df44 <vTaskStartScheduler+0x8c>
	__asm volatile
 800df0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df10:	f383 8811 	msr	BASEPRI, r3
 800df14:	f3bf 8f6f 	isb	sy
 800df18:	f3bf 8f4f 	dsb	sy
 800df1c:	613b      	str	r3, [r7, #16]
}
 800df1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df20:	4b15      	ldr	r3, [pc, #84]	; (800df78 <vTaskStartScheduler+0xc0>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	334c      	adds	r3, #76	; 0x4c
 800df26:	4a15      	ldr	r2, [pc, #84]	; (800df7c <vTaskStartScheduler+0xc4>)
 800df28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800df2a:	4b15      	ldr	r3, [pc, #84]	; (800df80 <vTaskStartScheduler+0xc8>)
 800df2c:	f04f 32ff 	mov.w	r2, #4294967295
 800df30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800df32:	4b14      	ldr	r3, [pc, #80]	; (800df84 <vTaskStartScheduler+0xcc>)
 800df34:	2201      	movs	r2, #1
 800df36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800df38:	4b13      	ldr	r3, [pc, #76]	; (800df88 <vTaskStartScheduler+0xd0>)
 800df3a:	2200      	movs	r2, #0
 800df3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800df3e:	f000 fe9f 	bl	800ec80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800df42:	e00e      	b.n	800df62 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df4a:	d10a      	bne.n	800df62 <vTaskStartScheduler+0xaa>
	__asm volatile
 800df4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df50:	f383 8811 	msr	BASEPRI, r3
 800df54:	f3bf 8f6f 	isb	sy
 800df58:	f3bf 8f4f 	dsb	sy
 800df5c:	60fb      	str	r3, [r7, #12]
}
 800df5e:	bf00      	nop
 800df60:	e7fe      	b.n	800df60 <vTaskStartScheduler+0xa8>
}
 800df62:	bf00      	nop
 800df64:	3718      	adds	r7, #24
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	0801e0dc 	.word	0x0801e0dc
 800df70:	0800e56d 	.word	0x0800e56d
 800df74:	200042e8 	.word	0x200042e8
 800df78:	200041c4 	.word	0x200041c4
 800df7c:	200002e0 	.word	0x200002e0
 800df80:	200042e4 	.word	0x200042e4
 800df84:	200042d0 	.word	0x200042d0
 800df88:	200042c8 	.word	0x200042c8

0800df8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800df8c:	b480      	push	{r7}
 800df8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800df90:	4b04      	ldr	r3, [pc, #16]	; (800dfa4 <vTaskSuspendAll+0x18>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	3301      	adds	r3, #1
 800df96:	4a03      	ldr	r2, [pc, #12]	; (800dfa4 <vTaskSuspendAll+0x18>)
 800df98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800df9a:	bf00      	nop
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr
 800dfa4:	200042ec 	.word	0x200042ec

0800dfa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dfb6:	4b41      	ldr	r3, [pc, #260]	; (800e0bc <xTaskResumeAll+0x114>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d10a      	bne.n	800dfd4 <xTaskResumeAll+0x2c>
	__asm volatile
 800dfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc2:	f383 8811 	msr	BASEPRI, r3
 800dfc6:	f3bf 8f6f 	isb	sy
 800dfca:	f3bf 8f4f 	dsb	sy
 800dfce:	603b      	str	r3, [r7, #0]
}
 800dfd0:	bf00      	nop
 800dfd2:	e7fe      	b.n	800dfd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dfd4:	f000 fef6 	bl	800edc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dfd8:	4b38      	ldr	r3, [pc, #224]	; (800e0bc <xTaskResumeAll+0x114>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	4a37      	ldr	r2, [pc, #220]	; (800e0bc <xTaskResumeAll+0x114>)
 800dfe0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfe2:	4b36      	ldr	r3, [pc, #216]	; (800e0bc <xTaskResumeAll+0x114>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d161      	bne.n	800e0ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dfea:	4b35      	ldr	r3, [pc, #212]	; (800e0c0 <xTaskResumeAll+0x118>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d05d      	beq.n	800e0ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dff2:	e02e      	b.n	800e052 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dff4:	4b33      	ldr	r3, [pc, #204]	; (800e0c4 <xTaskResumeAll+0x11c>)
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	3318      	adds	r3, #24
 800e000:	4618      	mov	r0, r3
 800e002:	f7fe fd87 	bl	800cb14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	3304      	adds	r3, #4
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fe fd82 	bl	800cb14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e014:	2201      	movs	r2, #1
 800e016:	409a      	lsls	r2, r3
 800e018:	4b2b      	ldr	r3, [pc, #172]	; (800e0c8 <xTaskResumeAll+0x120>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4313      	orrs	r3, r2
 800e01e:	4a2a      	ldr	r2, [pc, #168]	; (800e0c8 <xTaskResumeAll+0x120>)
 800e020:	6013      	str	r3, [r2, #0]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e026:	4613      	mov	r3, r2
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	4413      	add	r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	4a27      	ldr	r2, [pc, #156]	; (800e0cc <xTaskResumeAll+0x124>)
 800e030:	441a      	add	r2, r3
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	3304      	adds	r3, #4
 800e036:	4619      	mov	r1, r3
 800e038:	4610      	mov	r0, r2
 800e03a:	f7fe fd0e 	bl	800ca5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e042:	4b23      	ldr	r3, [pc, #140]	; (800e0d0 <xTaskResumeAll+0x128>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e048:	429a      	cmp	r2, r3
 800e04a:	d302      	bcc.n	800e052 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e04c:	4b21      	ldr	r3, [pc, #132]	; (800e0d4 <xTaskResumeAll+0x12c>)
 800e04e:	2201      	movs	r2, #1
 800e050:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e052:	4b1c      	ldr	r3, [pc, #112]	; (800e0c4 <xTaskResumeAll+0x11c>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1cc      	bne.n	800dff4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d001      	beq.n	800e064 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e060:	f000 fb3e 	bl	800e6e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e064:	4b1c      	ldr	r3, [pc, #112]	; (800e0d8 <xTaskResumeAll+0x130>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d010      	beq.n	800e092 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e070:	f000 f858 	bl	800e124 <xTaskIncrementTick>
 800e074:	4603      	mov	r3, r0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d002      	beq.n	800e080 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e07a:	4b16      	ldr	r3, [pc, #88]	; (800e0d4 <xTaskResumeAll+0x12c>)
 800e07c:	2201      	movs	r2, #1
 800e07e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	3b01      	subs	r3, #1
 800e084:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d1f1      	bne.n	800e070 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e08c:	4b12      	ldr	r3, [pc, #72]	; (800e0d8 <xTaskResumeAll+0x130>)
 800e08e:	2200      	movs	r2, #0
 800e090:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e092:	4b10      	ldr	r3, [pc, #64]	; (800e0d4 <xTaskResumeAll+0x12c>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d009      	beq.n	800e0ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e09a:	2301      	movs	r3, #1
 800e09c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e09e:	4b0f      	ldr	r3, [pc, #60]	; (800e0dc <xTaskResumeAll+0x134>)
 800e0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0a4:	601a      	str	r2, [r3, #0]
 800e0a6:	f3bf 8f4f 	dsb	sy
 800e0aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0ae:	f000 feb9 	bl	800ee24 <vPortExitCritical>

	return xAlreadyYielded;
 800e0b2:	68bb      	ldr	r3, [r7, #8]
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3710      	adds	r7, #16
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	200042ec 	.word	0x200042ec
 800e0c0:	200042c4 	.word	0x200042c4
 800e0c4:	20004284 	.word	0x20004284
 800e0c8:	200042cc 	.word	0x200042cc
 800e0cc:	200041c8 	.word	0x200041c8
 800e0d0:	200041c4 	.word	0x200041c4
 800e0d4:	200042d8 	.word	0x200042d8
 800e0d8:	200042d4 	.word	0x200042d4
 800e0dc:	e000ed04 	.word	0xe000ed04

0800e0e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e0e6:	4b05      	ldr	r3, [pc, #20]	; (800e0fc <xTaskGetTickCount+0x1c>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e0ec:	687b      	ldr	r3, [r7, #4]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	370c      	adds	r7, #12
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop
 800e0fc:	200042c8 	.word	0x200042c8

0800e100 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e106:	f000 ff3f 	bl	800ef88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e10a:	2300      	movs	r3, #0
 800e10c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e10e:	4b04      	ldr	r3, [pc, #16]	; (800e120 <xTaskGetTickCountFromISR+0x20>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e114:	683b      	ldr	r3, [r7, #0]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	200042c8 	.word	0x200042c8

0800e124 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b086      	sub	sp, #24
 800e128:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e12a:	2300      	movs	r3, #0
 800e12c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e12e:	4b4e      	ldr	r3, [pc, #312]	; (800e268 <xTaskIncrementTick+0x144>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	f040 808e 	bne.w	800e254 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e138:	4b4c      	ldr	r3, [pc, #304]	; (800e26c <xTaskIncrementTick+0x148>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	3301      	adds	r3, #1
 800e13e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e140:	4a4a      	ldr	r2, [pc, #296]	; (800e26c <xTaskIncrementTick+0x148>)
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d120      	bne.n	800e18e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e14c:	4b48      	ldr	r3, [pc, #288]	; (800e270 <xTaskIncrementTick+0x14c>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00a      	beq.n	800e16c <xTaskIncrementTick+0x48>
	__asm volatile
 800e156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15a:	f383 8811 	msr	BASEPRI, r3
 800e15e:	f3bf 8f6f 	isb	sy
 800e162:	f3bf 8f4f 	dsb	sy
 800e166:	603b      	str	r3, [r7, #0]
}
 800e168:	bf00      	nop
 800e16a:	e7fe      	b.n	800e16a <xTaskIncrementTick+0x46>
 800e16c:	4b40      	ldr	r3, [pc, #256]	; (800e270 <xTaskIncrementTick+0x14c>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	60fb      	str	r3, [r7, #12]
 800e172:	4b40      	ldr	r3, [pc, #256]	; (800e274 <xTaskIncrementTick+0x150>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a3e      	ldr	r2, [pc, #248]	; (800e270 <xTaskIncrementTick+0x14c>)
 800e178:	6013      	str	r3, [r2, #0]
 800e17a:	4a3e      	ldr	r2, [pc, #248]	; (800e274 <xTaskIncrementTick+0x150>)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	6013      	str	r3, [r2, #0]
 800e180:	4b3d      	ldr	r3, [pc, #244]	; (800e278 <xTaskIncrementTick+0x154>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	3301      	adds	r3, #1
 800e186:	4a3c      	ldr	r2, [pc, #240]	; (800e278 <xTaskIncrementTick+0x154>)
 800e188:	6013      	str	r3, [r2, #0]
 800e18a:	f000 faa9 	bl	800e6e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e18e:	4b3b      	ldr	r3, [pc, #236]	; (800e27c <xTaskIncrementTick+0x158>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	693a      	ldr	r2, [r7, #16]
 800e194:	429a      	cmp	r2, r3
 800e196:	d348      	bcc.n	800e22a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e198:	4b35      	ldr	r3, [pc, #212]	; (800e270 <xTaskIncrementTick+0x14c>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d104      	bne.n	800e1ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1a2:	4b36      	ldr	r3, [pc, #216]	; (800e27c <xTaskIncrementTick+0x158>)
 800e1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a8:	601a      	str	r2, [r3, #0]
					break;
 800e1aa:	e03e      	b.n	800e22a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ac:	4b30      	ldr	r3, [pc, #192]	; (800e270 <xTaskIncrementTick+0x14c>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e1bc:	693a      	ldr	r2, [r7, #16]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d203      	bcs.n	800e1cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e1c4:	4a2d      	ldr	r2, [pc, #180]	; (800e27c <xTaskIncrementTick+0x158>)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e1ca:	e02e      	b.n	800e22a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	3304      	adds	r3, #4
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7fe fc9f 	bl	800cb14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d004      	beq.n	800e1e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	3318      	adds	r3, #24
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fe fc96 	bl	800cb14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	409a      	lsls	r2, r3
 800e1f0:	4b23      	ldr	r3, [pc, #140]	; (800e280 <xTaskIncrementTick+0x15c>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	4a22      	ldr	r2, [pc, #136]	; (800e280 <xTaskIncrementTick+0x15c>)
 800e1f8:	6013      	str	r3, [r2, #0]
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1fe:	4613      	mov	r3, r2
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4413      	add	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	4a1f      	ldr	r2, [pc, #124]	; (800e284 <xTaskIncrementTick+0x160>)
 800e208:	441a      	add	r2, r3
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	3304      	adds	r3, #4
 800e20e:	4619      	mov	r1, r3
 800e210:	4610      	mov	r0, r2
 800e212:	f7fe fc22 	bl	800ca5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e21a:	4b1b      	ldr	r3, [pc, #108]	; (800e288 <xTaskIncrementTick+0x164>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e220:	429a      	cmp	r2, r3
 800e222:	d3b9      	bcc.n	800e198 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e224:	2301      	movs	r3, #1
 800e226:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e228:	e7b6      	b.n	800e198 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e22a:	4b17      	ldr	r3, [pc, #92]	; (800e288 <xTaskIncrementTick+0x164>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e230:	4914      	ldr	r1, [pc, #80]	; (800e284 <xTaskIncrementTick+0x160>)
 800e232:	4613      	mov	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4413      	add	r3, r2
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	440b      	add	r3, r1
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d901      	bls.n	800e246 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e242:	2301      	movs	r3, #1
 800e244:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e246:	4b11      	ldr	r3, [pc, #68]	; (800e28c <xTaskIncrementTick+0x168>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d007      	beq.n	800e25e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e24e:	2301      	movs	r3, #1
 800e250:	617b      	str	r3, [r7, #20]
 800e252:	e004      	b.n	800e25e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e254:	4b0e      	ldr	r3, [pc, #56]	; (800e290 <xTaskIncrementTick+0x16c>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	3301      	adds	r3, #1
 800e25a:	4a0d      	ldr	r2, [pc, #52]	; (800e290 <xTaskIncrementTick+0x16c>)
 800e25c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e25e:	697b      	ldr	r3, [r7, #20]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3718      	adds	r7, #24
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}
 800e268:	200042ec 	.word	0x200042ec
 800e26c:	200042c8 	.word	0x200042c8
 800e270:	2000427c 	.word	0x2000427c
 800e274:	20004280 	.word	0x20004280
 800e278:	200042dc 	.word	0x200042dc
 800e27c:	200042e4 	.word	0x200042e4
 800e280:	200042cc 	.word	0x200042cc
 800e284:	200041c8 	.word	0x200041c8
 800e288:	200041c4 	.word	0x200041c4
 800e28c:	200042d8 	.word	0x200042d8
 800e290:	200042d4 	.word	0x200042d4

0800e294 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e294:	b480      	push	{r7}
 800e296:	b087      	sub	sp, #28
 800e298:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e29a:	4b29      	ldr	r3, [pc, #164]	; (800e340 <vTaskSwitchContext+0xac>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d003      	beq.n	800e2aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e2a2:	4b28      	ldr	r3, [pc, #160]	; (800e344 <vTaskSwitchContext+0xb0>)
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e2a8:	e044      	b.n	800e334 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e2aa:	4b26      	ldr	r3, [pc, #152]	; (800e344 <vTaskSwitchContext+0xb0>)
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2b0:	4b25      	ldr	r3, [pc, #148]	; (800e348 <vTaskSwitchContext+0xb4>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	fab3 f383 	clz	r3, r3
 800e2bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e2be:	7afb      	ldrb	r3, [r7, #11]
 800e2c0:	f1c3 031f 	rsb	r3, r3, #31
 800e2c4:	617b      	str	r3, [r7, #20]
 800e2c6:	4921      	ldr	r1, [pc, #132]	; (800e34c <vTaskSwitchContext+0xb8>)
 800e2c8:	697a      	ldr	r2, [r7, #20]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	4413      	add	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	440b      	add	r3, r1
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d10a      	bne.n	800e2f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2de:	f383 8811 	msr	BASEPRI, r3
 800e2e2:	f3bf 8f6f 	isb	sy
 800e2e6:	f3bf 8f4f 	dsb	sy
 800e2ea:	607b      	str	r3, [r7, #4]
}
 800e2ec:	bf00      	nop
 800e2ee:	e7fe      	b.n	800e2ee <vTaskSwitchContext+0x5a>
 800e2f0:	697a      	ldr	r2, [r7, #20]
 800e2f2:	4613      	mov	r3, r2
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	4413      	add	r3, r2
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	4a14      	ldr	r2, [pc, #80]	; (800e34c <vTaskSwitchContext+0xb8>)
 800e2fc:	4413      	add	r3, r2
 800e2fe:	613b      	str	r3, [r7, #16]
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	685a      	ldr	r2, [r3, #4]
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	605a      	str	r2, [r3, #4]
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	685a      	ldr	r2, [r3, #4]
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	3308      	adds	r3, #8
 800e312:	429a      	cmp	r2, r3
 800e314:	d104      	bne.n	800e320 <vTaskSwitchContext+0x8c>
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	685a      	ldr	r2, [r3, #4]
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	605a      	str	r2, [r3, #4]
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	4a0a      	ldr	r2, [pc, #40]	; (800e350 <vTaskSwitchContext+0xbc>)
 800e328:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e32a:	4b09      	ldr	r3, [pc, #36]	; (800e350 <vTaskSwitchContext+0xbc>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	334c      	adds	r3, #76	; 0x4c
 800e330:	4a08      	ldr	r2, [pc, #32]	; (800e354 <vTaskSwitchContext+0xc0>)
 800e332:	6013      	str	r3, [r2, #0]
}
 800e334:	bf00      	nop
 800e336:	371c      	adds	r7, #28
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr
 800e340:	200042ec 	.word	0x200042ec
 800e344:	200042d8 	.word	0x200042d8
 800e348:	200042cc 	.word	0x200042cc
 800e34c:	200041c8 	.word	0x200041c8
 800e350:	200041c4 	.word	0x200041c4
 800e354:	200002e0 	.word	0x200002e0

0800e358 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d10a      	bne.n	800e37e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36c:	f383 8811 	msr	BASEPRI, r3
 800e370:	f3bf 8f6f 	isb	sy
 800e374:	f3bf 8f4f 	dsb	sy
 800e378:	60fb      	str	r3, [r7, #12]
}
 800e37a:	bf00      	nop
 800e37c:	e7fe      	b.n	800e37c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e37e:	4b07      	ldr	r3, [pc, #28]	; (800e39c <vTaskPlaceOnEventList+0x44>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	3318      	adds	r3, #24
 800e384:	4619      	mov	r1, r3
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f7fe fb8b 	bl	800caa2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e38c:	2101      	movs	r1, #1
 800e38e:	6838      	ldr	r0, [r7, #0]
 800e390:	f000 fb82 	bl	800ea98 <prvAddCurrentTaskToDelayedList>
}
 800e394:	bf00      	nop
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	200041c4 	.word	0x200041c4

0800e3a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b086      	sub	sp, #24
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d10a      	bne.n	800e3cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ba:	f383 8811 	msr	BASEPRI, r3
 800e3be:	f3bf 8f6f 	isb	sy
 800e3c2:	f3bf 8f4f 	dsb	sy
 800e3c6:	60fb      	str	r3, [r7, #12]
}
 800e3c8:	bf00      	nop
 800e3ca:	e7fe      	b.n	800e3ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	3318      	adds	r3, #24
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7fe fb9f 	bl	800cb14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3d6:	4b1d      	ldr	r3, [pc, #116]	; (800e44c <xTaskRemoveFromEventList+0xac>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d11c      	bne.n	800e418 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	3304      	adds	r3, #4
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7fe fb96 	bl	800cb14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	409a      	lsls	r2, r3
 800e3f0:	4b17      	ldr	r3, [pc, #92]	; (800e450 <xTaskRemoveFromEventList+0xb0>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	4313      	orrs	r3, r2
 800e3f6:	4a16      	ldr	r2, [pc, #88]	; (800e450 <xTaskRemoveFromEventList+0xb0>)
 800e3f8:	6013      	str	r3, [r2, #0]
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3fe:	4613      	mov	r3, r2
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	4413      	add	r3, r2
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	4a13      	ldr	r2, [pc, #76]	; (800e454 <xTaskRemoveFromEventList+0xb4>)
 800e408:	441a      	add	r2, r3
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	3304      	adds	r3, #4
 800e40e:	4619      	mov	r1, r3
 800e410:	4610      	mov	r0, r2
 800e412:	f7fe fb22 	bl	800ca5a <vListInsertEnd>
 800e416:	e005      	b.n	800e424 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	3318      	adds	r3, #24
 800e41c:	4619      	mov	r1, r3
 800e41e:	480e      	ldr	r0, [pc, #56]	; (800e458 <xTaskRemoveFromEventList+0xb8>)
 800e420:	f7fe fb1b 	bl	800ca5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e428:	4b0c      	ldr	r3, [pc, #48]	; (800e45c <xTaskRemoveFromEventList+0xbc>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e42e:	429a      	cmp	r2, r3
 800e430:	d905      	bls.n	800e43e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e432:	2301      	movs	r3, #1
 800e434:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e436:	4b0a      	ldr	r3, [pc, #40]	; (800e460 <xTaskRemoveFromEventList+0xc0>)
 800e438:	2201      	movs	r2, #1
 800e43a:	601a      	str	r2, [r3, #0]
 800e43c:	e001      	b.n	800e442 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e43e:	2300      	movs	r3, #0
 800e440:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e442:	697b      	ldr	r3, [r7, #20]
}
 800e444:	4618      	mov	r0, r3
 800e446:	3718      	adds	r7, #24
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	200042ec 	.word	0x200042ec
 800e450:	200042cc 	.word	0x200042cc
 800e454:	200041c8 	.word	0x200041c8
 800e458:	20004284 	.word	0x20004284
 800e45c:	200041c4 	.word	0x200041c4
 800e460:	200042d8 	.word	0x200042d8

0800e464 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e46c:	4b06      	ldr	r3, [pc, #24]	; (800e488 <vTaskInternalSetTimeOutState+0x24>)
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e474:	4b05      	ldr	r3, [pc, #20]	; (800e48c <vTaskInternalSetTimeOutState+0x28>)
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	605a      	str	r2, [r3, #4]
}
 800e47c:	bf00      	nop
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr
 800e488:	200042dc 	.word	0x200042dc
 800e48c:	200042c8 	.word	0x200042c8

0800e490 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b088      	sub	sp, #32
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d10a      	bne.n	800e4b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a4:	f383 8811 	msr	BASEPRI, r3
 800e4a8:	f3bf 8f6f 	isb	sy
 800e4ac:	f3bf 8f4f 	dsb	sy
 800e4b0:	613b      	str	r3, [r7, #16]
}
 800e4b2:	bf00      	nop
 800e4b4:	e7fe      	b.n	800e4b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d10a      	bne.n	800e4d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c0:	f383 8811 	msr	BASEPRI, r3
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	f3bf 8f4f 	dsb	sy
 800e4cc:	60fb      	str	r3, [r7, #12]
}
 800e4ce:	bf00      	nop
 800e4d0:	e7fe      	b.n	800e4d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e4d2:	f000 fc77 	bl	800edc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e4d6:	4b1d      	ldr	r3, [pc, #116]	; (800e54c <xTaskCheckForTimeOut+0xbc>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	69ba      	ldr	r2, [r7, #24]
 800e4e2:	1ad3      	subs	r3, r2, r3
 800e4e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ee:	d102      	bne.n	800e4f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	61fb      	str	r3, [r7, #28]
 800e4f4:	e023      	b.n	800e53e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	4b15      	ldr	r3, [pc, #84]	; (800e550 <xTaskCheckForTimeOut+0xc0>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d007      	beq.n	800e512 <xTaskCheckForTimeOut+0x82>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	69ba      	ldr	r2, [r7, #24]
 800e508:	429a      	cmp	r2, r3
 800e50a:	d302      	bcc.n	800e512 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e50c:	2301      	movs	r3, #1
 800e50e:	61fb      	str	r3, [r7, #28]
 800e510:	e015      	b.n	800e53e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	697a      	ldr	r2, [r7, #20]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d20b      	bcs.n	800e534 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	1ad2      	subs	r2, r2, r3
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f7ff ff9b 	bl	800e464 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e52e:	2300      	movs	r3, #0
 800e530:	61fb      	str	r3, [r7, #28]
 800e532:	e004      	b.n	800e53e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	2200      	movs	r2, #0
 800e538:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e53a:	2301      	movs	r3, #1
 800e53c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e53e:	f000 fc71 	bl	800ee24 <vPortExitCritical>

	return xReturn;
 800e542:	69fb      	ldr	r3, [r7, #28]
}
 800e544:	4618      	mov	r0, r3
 800e546:	3720      	adds	r7, #32
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	200042c8 	.word	0x200042c8
 800e550:	200042dc 	.word	0x200042dc

0800e554 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e554:	b480      	push	{r7}
 800e556:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e558:	4b03      	ldr	r3, [pc, #12]	; (800e568 <vTaskMissedYield+0x14>)
 800e55a:	2201      	movs	r2, #1
 800e55c:	601a      	str	r2, [r3, #0]
}
 800e55e:	bf00      	nop
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr
 800e568:	200042d8 	.word	0x200042d8

0800e56c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e574:	f000 f852 	bl	800e61c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e578:	4b06      	ldr	r3, [pc, #24]	; (800e594 <prvIdleTask+0x28>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d9f9      	bls.n	800e574 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e580:	4b05      	ldr	r3, [pc, #20]	; (800e598 <prvIdleTask+0x2c>)
 800e582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e586:	601a      	str	r2, [r3, #0]
 800e588:	f3bf 8f4f 	dsb	sy
 800e58c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e590:	e7f0      	b.n	800e574 <prvIdleTask+0x8>
 800e592:	bf00      	nop
 800e594:	200041c8 	.word	0x200041c8
 800e598:	e000ed04 	.word	0xe000ed04

0800e59c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	607b      	str	r3, [r7, #4]
 800e5a6:	e00c      	b.n	800e5c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e5a8:	687a      	ldr	r2, [r7, #4]
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	4413      	add	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4a12      	ldr	r2, [pc, #72]	; (800e5fc <prvInitialiseTaskLists+0x60>)
 800e5b4:	4413      	add	r3, r2
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fe fa22 	bl	800ca00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	607b      	str	r3, [r7, #4]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b06      	cmp	r3, #6
 800e5c6:	d9ef      	bls.n	800e5a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e5c8:	480d      	ldr	r0, [pc, #52]	; (800e600 <prvInitialiseTaskLists+0x64>)
 800e5ca:	f7fe fa19 	bl	800ca00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e5ce:	480d      	ldr	r0, [pc, #52]	; (800e604 <prvInitialiseTaskLists+0x68>)
 800e5d0:	f7fe fa16 	bl	800ca00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e5d4:	480c      	ldr	r0, [pc, #48]	; (800e608 <prvInitialiseTaskLists+0x6c>)
 800e5d6:	f7fe fa13 	bl	800ca00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e5da:	480c      	ldr	r0, [pc, #48]	; (800e60c <prvInitialiseTaskLists+0x70>)
 800e5dc:	f7fe fa10 	bl	800ca00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e5e0:	480b      	ldr	r0, [pc, #44]	; (800e610 <prvInitialiseTaskLists+0x74>)
 800e5e2:	f7fe fa0d 	bl	800ca00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e5e6:	4b0b      	ldr	r3, [pc, #44]	; (800e614 <prvInitialiseTaskLists+0x78>)
 800e5e8:	4a05      	ldr	r2, [pc, #20]	; (800e600 <prvInitialiseTaskLists+0x64>)
 800e5ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e5ec:	4b0a      	ldr	r3, [pc, #40]	; (800e618 <prvInitialiseTaskLists+0x7c>)
 800e5ee:	4a05      	ldr	r2, [pc, #20]	; (800e604 <prvInitialiseTaskLists+0x68>)
 800e5f0:	601a      	str	r2, [r3, #0]
}
 800e5f2:	bf00      	nop
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	200041c8 	.word	0x200041c8
 800e600:	20004254 	.word	0x20004254
 800e604:	20004268 	.word	0x20004268
 800e608:	20004284 	.word	0x20004284
 800e60c:	20004298 	.word	0x20004298
 800e610:	200042b0 	.word	0x200042b0
 800e614:	2000427c 	.word	0x2000427c
 800e618:	20004280 	.word	0x20004280

0800e61c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e622:	e019      	b.n	800e658 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e624:	f000 fbce 	bl	800edc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e628:	4b10      	ldr	r3, [pc, #64]	; (800e66c <prvCheckTasksWaitingTermination+0x50>)
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	3304      	adds	r3, #4
 800e634:	4618      	mov	r0, r3
 800e636:	f7fe fa6d 	bl	800cb14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e63a:	4b0d      	ldr	r3, [pc, #52]	; (800e670 <prvCheckTasksWaitingTermination+0x54>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	3b01      	subs	r3, #1
 800e640:	4a0b      	ldr	r2, [pc, #44]	; (800e670 <prvCheckTasksWaitingTermination+0x54>)
 800e642:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e644:	4b0b      	ldr	r3, [pc, #44]	; (800e674 <prvCheckTasksWaitingTermination+0x58>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	3b01      	subs	r3, #1
 800e64a:	4a0a      	ldr	r2, [pc, #40]	; (800e674 <prvCheckTasksWaitingTermination+0x58>)
 800e64c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e64e:	f000 fbe9 	bl	800ee24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 f810 	bl	800e678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e658:	4b06      	ldr	r3, [pc, #24]	; (800e674 <prvCheckTasksWaitingTermination+0x58>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d1e1      	bne.n	800e624 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e660:	bf00      	nop
 800e662:	bf00      	nop
 800e664:	3708      	adds	r7, #8
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	20004298 	.word	0x20004298
 800e670:	200042c4 	.word	0x200042c4
 800e674:	200042ac 	.word	0x200042ac

0800e678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	334c      	adds	r3, #76	; 0x4c
 800e684:	4618      	mov	r0, r3
 800e686:	f00e fa79 	bl	801cb7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e690:	2b00      	cmp	r3, #0
 800e692:	d108      	bne.n	800e6a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e698:	4618      	mov	r0, r3
 800e69a:	f000 fd81 	bl	800f1a0 <vPortFree>
				vPortFree( pxTCB );
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f000 fd7e 	bl	800f1a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e6a4:	e018      	b.n	800e6d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d103      	bne.n	800e6b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f000 fd75 	bl	800f1a0 <vPortFree>
	}
 800e6b6:	e00f      	b.n	800e6d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	d00a      	beq.n	800e6d8 <prvDeleteTCB+0x60>
	__asm volatile
 800e6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c6:	f383 8811 	msr	BASEPRI, r3
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	60fb      	str	r3, [r7, #12]
}
 800e6d4:	bf00      	nop
 800e6d6:	e7fe      	b.n	800e6d6 <prvDeleteTCB+0x5e>
	}
 800e6d8:	bf00      	nop
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6e6:	4b0c      	ldr	r3, [pc, #48]	; (800e718 <prvResetNextTaskUnblockTime+0x38>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d104      	bne.n	800e6fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e6f0:	4b0a      	ldr	r3, [pc, #40]	; (800e71c <prvResetNextTaskUnblockTime+0x3c>)
 800e6f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e6f8:	e008      	b.n	800e70c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6fa:	4b07      	ldr	r3, [pc, #28]	; (800e718 <prvResetNextTaskUnblockTime+0x38>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	68db      	ldr	r3, [r3, #12]
 800e702:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	4a04      	ldr	r2, [pc, #16]	; (800e71c <prvResetNextTaskUnblockTime+0x3c>)
 800e70a:	6013      	str	r3, [r2, #0]
}
 800e70c:	bf00      	nop
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr
 800e718:	2000427c 	.word	0x2000427c
 800e71c:	200042e4 	.word	0x200042e4

0800e720 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e726:	4b0b      	ldr	r3, [pc, #44]	; (800e754 <xTaskGetSchedulerState+0x34>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d102      	bne.n	800e734 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e72e:	2301      	movs	r3, #1
 800e730:	607b      	str	r3, [r7, #4]
 800e732:	e008      	b.n	800e746 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e734:	4b08      	ldr	r3, [pc, #32]	; (800e758 <xTaskGetSchedulerState+0x38>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d102      	bne.n	800e742 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e73c:	2302      	movs	r3, #2
 800e73e:	607b      	str	r3, [r7, #4]
 800e740:	e001      	b.n	800e746 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e742:	2300      	movs	r3, #0
 800e744:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e746:	687b      	ldr	r3, [r7, #4]
	}
 800e748:	4618      	mov	r0, r3
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr
 800e754:	200042d0 	.word	0x200042d0
 800e758:	200042ec 	.word	0x200042ec

0800e75c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e768:	2300      	movs	r3, #0
 800e76a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d05e      	beq.n	800e830 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e776:	4b31      	ldr	r3, [pc, #196]	; (800e83c <xTaskPriorityInherit+0xe0>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d24e      	bcs.n	800e81e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	699b      	ldr	r3, [r3, #24]
 800e784:	2b00      	cmp	r3, #0
 800e786:	db06      	blt.n	800e796 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e788:	4b2c      	ldr	r3, [pc, #176]	; (800e83c <xTaskPriorityInherit+0xe0>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e78e:	f1c3 0207 	rsb	r2, r3, #7
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	6959      	ldr	r1, [r3, #20]
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e79e:	4613      	mov	r3, r2
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	4413      	add	r3, r2
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	4a26      	ldr	r2, [pc, #152]	; (800e840 <xTaskPriorityInherit+0xe4>)
 800e7a8:	4413      	add	r3, r2
 800e7aa:	4299      	cmp	r1, r3
 800e7ac:	d12f      	bne.n	800e80e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	3304      	adds	r3, #4
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7fe f9ae 	bl	800cb14 <uxListRemove>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d10a      	bne.n	800e7d4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e7c8:	43da      	mvns	r2, r3
 800e7ca:	4b1e      	ldr	r3, [pc, #120]	; (800e844 <xTaskPriorityInherit+0xe8>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4013      	ands	r3, r2
 800e7d0:	4a1c      	ldr	r2, [pc, #112]	; (800e844 <xTaskPriorityInherit+0xe8>)
 800e7d2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e7d4:	4b19      	ldr	r3, [pc, #100]	; (800e83c <xTaskPriorityInherit+0xe0>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	409a      	lsls	r2, r3
 800e7e6:	4b17      	ldr	r3, [pc, #92]	; (800e844 <xTaskPriorityInherit+0xe8>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	4a15      	ldr	r2, [pc, #84]	; (800e844 <xTaskPriorityInherit+0xe8>)
 800e7ee:	6013      	str	r3, [r2, #0]
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7f4:	4613      	mov	r3, r2
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	4413      	add	r3, r2
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	4a10      	ldr	r2, [pc, #64]	; (800e840 <xTaskPriorityInherit+0xe4>)
 800e7fe:	441a      	add	r2, r3
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	3304      	adds	r3, #4
 800e804:	4619      	mov	r1, r3
 800e806:	4610      	mov	r0, r2
 800e808:	f7fe f927 	bl	800ca5a <vListInsertEnd>
 800e80c:	e004      	b.n	800e818 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e80e:	4b0b      	ldr	r3, [pc, #44]	; (800e83c <xTaskPriorityInherit+0xe0>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e818:	2301      	movs	r3, #1
 800e81a:	60fb      	str	r3, [r7, #12]
 800e81c:	e008      	b.n	800e830 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e822:	4b06      	ldr	r3, [pc, #24]	; (800e83c <xTaskPriorityInherit+0xe0>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e828:	429a      	cmp	r2, r3
 800e82a:	d201      	bcs.n	800e830 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e82c:	2301      	movs	r3, #1
 800e82e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e830:	68fb      	ldr	r3, [r7, #12]
	}
 800e832:	4618      	mov	r0, r3
 800e834:	3710      	adds	r7, #16
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
 800e83a:	bf00      	nop
 800e83c:	200041c4 	.word	0x200041c4
 800e840:	200041c8 	.word	0x200041c8
 800e844:	200042cc 	.word	0x200042cc

0800e848 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b086      	sub	sp, #24
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e854:	2300      	movs	r3, #0
 800e856:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d06e      	beq.n	800e93c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e85e:	4b3a      	ldr	r3, [pc, #232]	; (800e948 <xTaskPriorityDisinherit+0x100>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	693a      	ldr	r2, [r7, #16]
 800e864:	429a      	cmp	r2, r3
 800e866:	d00a      	beq.n	800e87e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e86c:	f383 8811 	msr	BASEPRI, r3
 800e870:	f3bf 8f6f 	isb	sy
 800e874:	f3bf 8f4f 	dsb	sy
 800e878:	60fb      	str	r3, [r7, #12]
}
 800e87a:	bf00      	nop
 800e87c:	e7fe      	b.n	800e87c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e882:	2b00      	cmp	r3, #0
 800e884:	d10a      	bne.n	800e89c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88a:	f383 8811 	msr	BASEPRI, r3
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	f3bf 8f4f 	dsb	sy
 800e896:	60bb      	str	r3, [r7, #8]
}
 800e898:	bf00      	nop
 800e89a:	e7fe      	b.n	800e89a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8a0:	1e5a      	subs	r2, r3, #1
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d044      	beq.n	800e93c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d140      	bne.n	800e93c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	3304      	adds	r3, #4
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7fe f928 	bl	800cb14 <uxListRemove>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d115      	bne.n	800e8f6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ce:	491f      	ldr	r1, [pc, #124]	; (800e94c <xTaskPriorityDisinherit+0x104>)
 800e8d0:	4613      	mov	r3, r2
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	4413      	add	r3, r2
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	440b      	add	r3, r1
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d10a      	bne.n	800e8f6 <xTaskPriorityDisinherit+0xae>
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ea:	43da      	mvns	r2, r3
 800e8ec:	4b18      	ldr	r3, [pc, #96]	; (800e950 <xTaskPriorityDisinherit+0x108>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4013      	ands	r3, r2
 800e8f2:	4a17      	ldr	r2, [pc, #92]	; (800e950 <xTaskPriorityDisinherit+0x108>)
 800e8f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e902:	f1c3 0207 	rsb	r2, r3, #7
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90e:	2201      	movs	r2, #1
 800e910:	409a      	lsls	r2, r3
 800e912:	4b0f      	ldr	r3, [pc, #60]	; (800e950 <xTaskPriorityDisinherit+0x108>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	4313      	orrs	r3, r2
 800e918:	4a0d      	ldr	r2, [pc, #52]	; (800e950 <xTaskPriorityDisinherit+0x108>)
 800e91a:	6013      	str	r3, [r2, #0]
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e920:	4613      	mov	r3, r2
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	4413      	add	r3, r2
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	4a08      	ldr	r2, [pc, #32]	; (800e94c <xTaskPriorityDisinherit+0x104>)
 800e92a:	441a      	add	r2, r3
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	3304      	adds	r3, #4
 800e930:	4619      	mov	r1, r3
 800e932:	4610      	mov	r0, r2
 800e934:	f7fe f891 	bl	800ca5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e938:	2301      	movs	r3, #1
 800e93a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e93c:	697b      	ldr	r3, [r7, #20]
	}
 800e93e:	4618      	mov	r0, r3
 800e940:	3718      	adds	r7, #24
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
 800e946:	bf00      	nop
 800e948:	200041c4 	.word	0x200041c4
 800e94c:	200041c8 	.word	0x200041c8
 800e950:	200042cc 	.word	0x200042cc

0800e954 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e954:	b580      	push	{r7, lr}
 800e956:	b088      	sub	sp, #32
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e962:	2301      	movs	r3, #1
 800e964:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d077      	beq.n	800ea5c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e96c:	69bb      	ldr	r3, [r7, #24]
 800e96e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e970:	2b00      	cmp	r3, #0
 800e972:	d10a      	bne.n	800e98a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e978:	f383 8811 	msr	BASEPRI, r3
 800e97c:	f3bf 8f6f 	isb	sy
 800e980:	f3bf 8f4f 	dsb	sy
 800e984:	60fb      	str	r3, [r7, #12]
}
 800e986:	bf00      	nop
 800e988:	e7fe      	b.n	800e988 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e98a:	69bb      	ldr	r3, [r7, #24]
 800e98c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e98e:	683a      	ldr	r2, [r7, #0]
 800e990:	429a      	cmp	r2, r3
 800e992:	d902      	bls.n	800e99a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	61fb      	str	r3, [r7, #28]
 800e998:	e002      	b.n	800e9a0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e99e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9a4:	69fa      	ldr	r2, [r7, #28]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d058      	beq.n	800ea5c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9ae:	697a      	ldr	r2, [r7, #20]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d153      	bne.n	800ea5c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e9b4:	4b2b      	ldr	r3, [pc, #172]	; (800ea64 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	69ba      	ldr	r2, [r7, #24]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d10a      	bne.n	800e9d4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c2:	f383 8811 	msr	BASEPRI, r3
 800e9c6:	f3bf 8f6f 	isb	sy
 800e9ca:	f3bf 8f4f 	dsb	sy
 800e9ce:	60bb      	str	r3, [r7, #8]
}
 800e9d0:	bf00      	nop
 800e9d2:	e7fe      	b.n	800e9d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e9d4:	69bb      	ldr	r3, [r7, #24]
 800e9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	69fa      	ldr	r2, [r7, #28]
 800e9de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	699b      	ldr	r3, [r3, #24]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	db04      	blt.n	800e9f2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	f1c3 0207 	rsb	r2, r3, #7
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	6959      	ldr	r1, [r3, #20]
 800e9f6:	693a      	ldr	r2, [r7, #16]
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	4413      	add	r3, r2
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	4a19      	ldr	r2, [pc, #100]	; (800ea68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ea02:	4413      	add	r3, r2
 800ea04:	4299      	cmp	r1, r3
 800ea06:	d129      	bne.n	800ea5c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	3304      	adds	r3, #4
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7fe f881 	bl	800cb14 <uxListRemove>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d10a      	bne.n	800ea2e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea22:	43da      	mvns	r2, r3
 800ea24:	4b11      	ldr	r3, [pc, #68]	; (800ea6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4013      	ands	r3, r2
 800ea2a:	4a10      	ldr	r2, [pc, #64]	; (800ea6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ea2c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ea2e:	69bb      	ldr	r3, [r7, #24]
 800ea30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea32:	2201      	movs	r2, #1
 800ea34:	409a      	lsls	r2, r3
 800ea36:	4b0d      	ldr	r3, [pc, #52]	; (800ea6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4313      	orrs	r3, r2
 800ea3c:	4a0b      	ldr	r2, [pc, #44]	; (800ea6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ea3e:	6013      	str	r3, [r2, #0]
 800ea40:	69bb      	ldr	r3, [r7, #24]
 800ea42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea44:	4613      	mov	r3, r2
 800ea46:	009b      	lsls	r3, r3, #2
 800ea48:	4413      	add	r3, r2
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	4a06      	ldr	r2, [pc, #24]	; (800ea68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ea4e:	441a      	add	r2, r3
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	3304      	adds	r3, #4
 800ea54:	4619      	mov	r1, r3
 800ea56:	4610      	mov	r0, r2
 800ea58:	f7fd ffff 	bl	800ca5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ea5c:	bf00      	nop
 800ea5e:	3720      	adds	r7, #32
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	200041c4 	.word	0x200041c4
 800ea68:	200041c8 	.word	0x200041c8
 800ea6c:	200042cc 	.word	0x200042cc

0800ea70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ea70:	b480      	push	{r7}
 800ea72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ea74:	4b07      	ldr	r3, [pc, #28]	; (800ea94 <pvTaskIncrementMutexHeldCount+0x24>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d004      	beq.n	800ea86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ea7c:	4b05      	ldr	r3, [pc, #20]	; (800ea94 <pvTaskIncrementMutexHeldCount+0x24>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea82:	3201      	adds	r2, #1
 800ea84:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ea86:	4b03      	ldr	r3, [pc, #12]	; (800ea94 <pvTaskIncrementMutexHeldCount+0x24>)
 800ea88:	681b      	ldr	r3, [r3, #0]
	}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr
 800ea94:	200041c4 	.word	0x200041c4

0800ea98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eaa2:	4b29      	ldr	r3, [pc, #164]	; (800eb48 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eaa8:	4b28      	ldr	r3, [pc, #160]	; (800eb4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	3304      	adds	r3, #4
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fe f830 	bl	800cb14 <uxListRemove>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d10b      	bne.n	800ead2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800eaba:	4b24      	ldr	r3, [pc, #144]	; (800eb4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac0:	2201      	movs	r2, #1
 800eac2:	fa02 f303 	lsl.w	r3, r2, r3
 800eac6:	43da      	mvns	r2, r3
 800eac8:	4b21      	ldr	r3, [pc, #132]	; (800eb50 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4013      	ands	r3, r2
 800eace:	4a20      	ldr	r2, [pc, #128]	; (800eb50 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ead0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead8:	d10a      	bne.n	800eaf0 <prvAddCurrentTaskToDelayedList+0x58>
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d007      	beq.n	800eaf0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eae0:	4b1a      	ldr	r3, [pc, #104]	; (800eb4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	3304      	adds	r3, #4
 800eae6:	4619      	mov	r1, r3
 800eae8:	481a      	ldr	r0, [pc, #104]	; (800eb54 <prvAddCurrentTaskToDelayedList+0xbc>)
 800eaea:	f7fd ffb6 	bl	800ca5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eaee:	e026      	b.n	800eb3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	4413      	add	r3, r2
 800eaf6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eaf8:	4b14      	ldr	r3, [pc, #80]	; (800eb4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	68ba      	ldr	r2, [r7, #8]
 800eafe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eb00:	68ba      	ldr	r2, [r7, #8]
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d209      	bcs.n	800eb1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb08:	4b13      	ldr	r3, [pc, #76]	; (800eb58 <prvAddCurrentTaskToDelayedList+0xc0>)
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	4b0f      	ldr	r3, [pc, #60]	; (800eb4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	3304      	adds	r3, #4
 800eb12:	4619      	mov	r1, r3
 800eb14:	4610      	mov	r0, r2
 800eb16:	f7fd ffc4 	bl	800caa2 <vListInsert>
}
 800eb1a:	e010      	b.n	800eb3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb1c:	4b0f      	ldr	r3, [pc, #60]	; (800eb5c <prvAddCurrentTaskToDelayedList+0xc4>)
 800eb1e:	681a      	ldr	r2, [r3, #0]
 800eb20:	4b0a      	ldr	r3, [pc, #40]	; (800eb4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	3304      	adds	r3, #4
 800eb26:	4619      	mov	r1, r3
 800eb28:	4610      	mov	r0, r2
 800eb2a:	f7fd ffba 	bl	800caa2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eb2e:	4b0c      	ldr	r3, [pc, #48]	; (800eb60 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	68ba      	ldr	r2, [r7, #8]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d202      	bcs.n	800eb3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800eb38:	4a09      	ldr	r2, [pc, #36]	; (800eb60 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	6013      	str	r3, [r2, #0]
}
 800eb3e:	bf00      	nop
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	200042c8 	.word	0x200042c8
 800eb4c:	200041c4 	.word	0x200041c4
 800eb50:	200042cc 	.word	0x200042cc
 800eb54:	200042b0 	.word	0x200042b0
 800eb58:	20004280 	.word	0x20004280
 800eb5c:	2000427c 	.word	0x2000427c
 800eb60:	200042e4 	.word	0x200042e4

0800eb64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eb64:	b480      	push	{r7}
 800eb66:	b085      	sub	sp, #20
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	3b04      	subs	r3, #4
 800eb74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eb7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	3b04      	subs	r3, #4
 800eb82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	f023 0201 	bic.w	r2, r3, #1
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	3b04      	subs	r3, #4
 800eb92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eb94:	4a0c      	ldr	r2, [pc, #48]	; (800ebc8 <pxPortInitialiseStack+0x64>)
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	3b14      	subs	r3, #20
 800eb9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eba0:	687a      	ldr	r2, [r7, #4]
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	3b04      	subs	r3, #4
 800ebaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f06f 0202 	mvn.w	r2, #2
 800ebb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	3b20      	subs	r3, #32
 800ebb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ebba:	68fb      	ldr	r3, [r7, #12]
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3714      	adds	r7, #20
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr
 800ebc8:	0800ebcd 	.word	0x0800ebcd

0800ebcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b085      	sub	sp, #20
 800ebd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ebd6:	4b12      	ldr	r3, [pc, #72]	; (800ec20 <prvTaskExitError+0x54>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebde:	d00a      	beq.n	800ebf6 <prvTaskExitError+0x2a>
	__asm volatile
 800ebe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe4:	f383 8811 	msr	BASEPRI, r3
 800ebe8:	f3bf 8f6f 	isb	sy
 800ebec:	f3bf 8f4f 	dsb	sy
 800ebf0:	60fb      	str	r3, [r7, #12]
}
 800ebf2:	bf00      	nop
 800ebf4:	e7fe      	b.n	800ebf4 <prvTaskExitError+0x28>
	__asm volatile
 800ebf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfa:	f383 8811 	msr	BASEPRI, r3
 800ebfe:	f3bf 8f6f 	isb	sy
 800ec02:	f3bf 8f4f 	dsb	sy
 800ec06:	60bb      	str	r3, [r7, #8]
}
 800ec08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ec0a:	bf00      	nop
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d0fc      	beq.n	800ec0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ec12:	bf00      	nop
 800ec14:	bf00      	nop
 800ec16:	3714      	adds	r7, #20
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr
 800ec20:	200002d0 	.word	0x200002d0
	...

0800ec30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ec30:	4b07      	ldr	r3, [pc, #28]	; (800ec50 <pxCurrentTCBConst2>)
 800ec32:	6819      	ldr	r1, [r3, #0]
 800ec34:	6808      	ldr	r0, [r1, #0]
 800ec36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec3a:	f380 8809 	msr	PSP, r0
 800ec3e:	f3bf 8f6f 	isb	sy
 800ec42:	f04f 0000 	mov.w	r0, #0
 800ec46:	f380 8811 	msr	BASEPRI, r0
 800ec4a:	4770      	bx	lr
 800ec4c:	f3af 8000 	nop.w

0800ec50 <pxCurrentTCBConst2>:
 800ec50:	200041c4 	.word	0x200041c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ec54:	bf00      	nop
 800ec56:	bf00      	nop

0800ec58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ec58:	4808      	ldr	r0, [pc, #32]	; (800ec7c <prvPortStartFirstTask+0x24>)
 800ec5a:	6800      	ldr	r0, [r0, #0]
 800ec5c:	6800      	ldr	r0, [r0, #0]
 800ec5e:	f380 8808 	msr	MSP, r0
 800ec62:	f04f 0000 	mov.w	r0, #0
 800ec66:	f380 8814 	msr	CONTROL, r0
 800ec6a:	b662      	cpsie	i
 800ec6c:	b661      	cpsie	f
 800ec6e:	f3bf 8f4f 	dsb	sy
 800ec72:	f3bf 8f6f 	isb	sy
 800ec76:	df00      	svc	0
 800ec78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ec7a:	bf00      	nop
 800ec7c:	e000ed08 	.word	0xe000ed08

0800ec80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b086      	sub	sp, #24
 800ec84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ec86:	4b46      	ldr	r3, [pc, #280]	; (800eda0 <xPortStartScheduler+0x120>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4a46      	ldr	r2, [pc, #280]	; (800eda4 <xPortStartScheduler+0x124>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d10a      	bne.n	800eca6 <xPortStartScheduler+0x26>
	__asm volatile
 800ec90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec94:	f383 8811 	msr	BASEPRI, r3
 800ec98:	f3bf 8f6f 	isb	sy
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	613b      	str	r3, [r7, #16]
}
 800eca2:	bf00      	nop
 800eca4:	e7fe      	b.n	800eca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eca6:	4b3e      	ldr	r3, [pc, #248]	; (800eda0 <xPortStartScheduler+0x120>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4a3f      	ldr	r2, [pc, #252]	; (800eda8 <xPortStartScheduler+0x128>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d10a      	bne.n	800ecc6 <xPortStartScheduler+0x46>
	__asm volatile
 800ecb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb4:	f383 8811 	msr	BASEPRI, r3
 800ecb8:	f3bf 8f6f 	isb	sy
 800ecbc:	f3bf 8f4f 	dsb	sy
 800ecc0:	60fb      	str	r3, [r7, #12]
}
 800ecc2:	bf00      	nop
 800ecc4:	e7fe      	b.n	800ecc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ecc6:	4b39      	ldr	r3, [pc, #228]	; (800edac <xPortStartScheduler+0x12c>)
 800ecc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	22ff      	movs	r2, #255	; 0xff
 800ecd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ece0:	78fb      	ldrb	r3, [r7, #3]
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ece8:	b2da      	uxtb	r2, r3
 800ecea:	4b31      	ldr	r3, [pc, #196]	; (800edb0 <xPortStartScheduler+0x130>)
 800ecec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ecee:	4b31      	ldr	r3, [pc, #196]	; (800edb4 <xPortStartScheduler+0x134>)
 800ecf0:	2207      	movs	r2, #7
 800ecf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ecf4:	e009      	b.n	800ed0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ecf6:	4b2f      	ldr	r3, [pc, #188]	; (800edb4 <xPortStartScheduler+0x134>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	3b01      	subs	r3, #1
 800ecfc:	4a2d      	ldr	r2, [pc, #180]	; (800edb4 <xPortStartScheduler+0x134>)
 800ecfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed00:	78fb      	ldrb	r3, [r7, #3]
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	005b      	lsls	r3, r3, #1
 800ed06:	b2db      	uxtb	r3, r3
 800ed08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed0a:	78fb      	ldrb	r3, [r7, #3]
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed12:	2b80      	cmp	r3, #128	; 0x80
 800ed14:	d0ef      	beq.n	800ecf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed16:	4b27      	ldr	r3, [pc, #156]	; (800edb4 <xPortStartScheduler+0x134>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f1c3 0307 	rsb	r3, r3, #7
 800ed1e:	2b04      	cmp	r3, #4
 800ed20:	d00a      	beq.n	800ed38 <xPortStartScheduler+0xb8>
	__asm volatile
 800ed22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed26:	f383 8811 	msr	BASEPRI, r3
 800ed2a:	f3bf 8f6f 	isb	sy
 800ed2e:	f3bf 8f4f 	dsb	sy
 800ed32:	60bb      	str	r3, [r7, #8]
}
 800ed34:	bf00      	nop
 800ed36:	e7fe      	b.n	800ed36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ed38:	4b1e      	ldr	r3, [pc, #120]	; (800edb4 <xPortStartScheduler+0x134>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	021b      	lsls	r3, r3, #8
 800ed3e:	4a1d      	ldr	r2, [pc, #116]	; (800edb4 <xPortStartScheduler+0x134>)
 800ed40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed42:	4b1c      	ldr	r3, [pc, #112]	; (800edb4 <xPortStartScheduler+0x134>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed4a:	4a1a      	ldr	r2, [pc, #104]	; (800edb4 <xPortStartScheduler+0x134>)
 800ed4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	b2da      	uxtb	r2, r3
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ed56:	4b18      	ldr	r3, [pc, #96]	; (800edb8 <xPortStartScheduler+0x138>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	4a17      	ldr	r2, [pc, #92]	; (800edb8 <xPortStartScheduler+0x138>)
 800ed5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ed60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ed62:	4b15      	ldr	r3, [pc, #84]	; (800edb8 <xPortStartScheduler+0x138>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4a14      	ldr	r2, [pc, #80]	; (800edb8 <xPortStartScheduler+0x138>)
 800ed68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ed6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ed6e:	f000 f8dd 	bl	800ef2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ed72:	4b12      	ldr	r3, [pc, #72]	; (800edbc <xPortStartScheduler+0x13c>)
 800ed74:	2200      	movs	r2, #0
 800ed76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ed78:	f000 f8fc 	bl	800ef74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ed7c:	4b10      	ldr	r3, [pc, #64]	; (800edc0 <xPortStartScheduler+0x140>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a0f      	ldr	r2, [pc, #60]	; (800edc0 <xPortStartScheduler+0x140>)
 800ed82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ed86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ed88:	f7ff ff66 	bl	800ec58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ed8c:	f7ff fa82 	bl	800e294 <vTaskSwitchContext>
	prvTaskExitError();
 800ed90:	f7ff ff1c 	bl	800ebcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ed94:	2300      	movs	r3, #0
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3718      	adds	r7, #24
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	e000ed00 	.word	0xe000ed00
 800eda4:	410fc271 	.word	0x410fc271
 800eda8:	410fc270 	.word	0x410fc270
 800edac:	e000e400 	.word	0xe000e400
 800edb0:	200042f0 	.word	0x200042f0
 800edb4:	200042f4 	.word	0x200042f4
 800edb8:	e000ed20 	.word	0xe000ed20
 800edbc:	200002d0 	.word	0x200002d0
 800edc0:	e000ef34 	.word	0xe000ef34

0800edc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
	__asm volatile
 800edca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edce:	f383 8811 	msr	BASEPRI, r3
 800edd2:	f3bf 8f6f 	isb	sy
 800edd6:	f3bf 8f4f 	dsb	sy
 800edda:	607b      	str	r3, [r7, #4]
}
 800eddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800edde:	4b0f      	ldr	r3, [pc, #60]	; (800ee1c <vPortEnterCritical+0x58>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	3301      	adds	r3, #1
 800ede4:	4a0d      	ldr	r2, [pc, #52]	; (800ee1c <vPortEnterCritical+0x58>)
 800ede6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ede8:	4b0c      	ldr	r3, [pc, #48]	; (800ee1c <vPortEnterCritical+0x58>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2b01      	cmp	r3, #1
 800edee:	d10f      	bne.n	800ee10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800edf0:	4b0b      	ldr	r3, [pc, #44]	; (800ee20 <vPortEnterCritical+0x5c>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d00a      	beq.n	800ee10 <vPortEnterCritical+0x4c>
	__asm volatile
 800edfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfe:	f383 8811 	msr	BASEPRI, r3
 800ee02:	f3bf 8f6f 	isb	sy
 800ee06:	f3bf 8f4f 	dsb	sy
 800ee0a:	603b      	str	r3, [r7, #0]
}
 800ee0c:	bf00      	nop
 800ee0e:	e7fe      	b.n	800ee0e <vPortEnterCritical+0x4a>
	}
}
 800ee10:	bf00      	nop
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr
 800ee1c:	200002d0 	.word	0x200002d0
 800ee20:	e000ed04 	.word	0xe000ed04

0800ee24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ee24:	b480      	push	{r7}
 800ee26:	b083      	sub	sp, #12
 800ee28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ee2a:	4b12      	ldr	r3, [pc, #72]	; (800ee74 <vPortExitCritical+0x50>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d10a      	bne.n	800ee48 <vPortExitCritical+0x24>
	__asm volatile
 800ee32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee36:	f383 8811 	msr	BASEPRI, r3
 800ee3a:	f3bf 8f6f 	isb	sy
 800ee3e:	f3bf 8f4f 	dsb	sy
 800ee42:	607b      	str	r3, [r7, #4]
}
 800ee44:	bf00      	nop
 800ee46:	e7fe      	b.n	800ee46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ee48:	4b0a      	ldr	r3, [pc, #40]	; (800ee74 <vPortExitCritical+0x50>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	4a09      	ldr	r2, [pc, #36]	; (800ee74 <vPortExitCritical+0x50>)
 800ee50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ee52:	4b08      	ldr	r3, [pc, #32]	; (800ee74 <vPortExitCritical+0x50>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d105      	bne.n	800ee66 <vPortExitCritical+0x42>
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	f383 8811 	msr	BASEPRI, r3
}
 800ee64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ee66:	bf00      	nop
 800ee68:	370c      	adds	r7, #12
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr
 800ee72:	bf00      	nop
 800ee74:	200002d0 	.word	0x200002d0
	...

0800ee80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ee80:	f3ef 8009 	mrs	r0, PSP
 800ee84:	f3bf 8f6f 	isb	sy
 800ee88:	4b15      	ldr	r3, [pc, #84]	; (800eee0 <pxCurrentTCBConst>)
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	f01e 0f10 	tst.w	lr, #16
 800ee90:	bf08      	it	eq
 800ee92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ee96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee9a:	6010      	str	r0, [r2, #0]
 800ee9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eea4:	f380 8811 	msr	BASEPRI, r0
 800eea8:	f3bf 8f4f 	dsb	sy
 800eeac:	f3bf 8f6f 	isb	sy
 800eeb0:	f7ff f9f0 	bl	800e294 <vTaskSwitchContext>
 800eeb4:	f04f 0000 	mov.w	r0, #0
 800eeb8:	f380 8811 	msr	BASEPRI, r0
 800eebc:	bc09      	pop	{r0, r3}
 800eebe:	6819      	ldr	r1, [r3, #0]
 800eec0:	6808      	ldr	r0, [r1, #0]
 800eec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec6:	f01e 0f10 	tst.w	lr, #16
 800eeca:	bf08      	it	eq
 800eecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eed0:	f380 8809 	msr	PSP, r0
 800eed4:	f3bf 8f6f 	isb	sy
 800eed8:	4770      	bx	lr
 800eeda:	bf00      	nop
 800eedc:	f3af 8000 	nop.w

0800eee0 <pxCurrentTCBConst>:
 800eee0:	200041c4 	.word	0x200041c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eee4:	bf00      	nop
 800eee6:	bf00      	nop

0800eee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
	__asm volatile
 800eeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef2:	f383 8811 	msr	BASEPRI, r3
 800eef6:	f3bf 8f6f 	isb	sy
 800eefa:	f3bf 8f4f 	dsb	sy
 800eefe:	607b      	str	r3, [r7, #4]
}
 800ef00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ef02:	f7ff f90f 	bl	800e124 <xTaskIncrementTick>
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d003      	beq.n	800ef14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ef0c:	4b06      	ldr	r3, [pc, #24]	; (800ef28 <SysTick_Handler+0x40>)
 800ef0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef12:	601a      	str	r2, [r3, #0]
 800ef14:	2300      	movs	r3, #0
 800ef16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	f383 8811 	msr	BASEPRI, r3
}
 800ef1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ef20:	bf00      	nop
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	e000ed04 	.word	0xe000ed04

0800ef2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ef30:	4b0b      	ldr	r3, [pc, #44]	; (800ef60 <vPortSetupTimerInterrupt+0x34>)
 800ef32:	2200      	movs	r2, #0
 800ef34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ef36:	4b0b      	ldr	r3, [pc, #44]	; (800ef64 <vPortSetupTimerInterrupt+0x38>)
 800ef38:	2200      	movs	r2, #0
 800ef3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ef3c:	4b0a      	ldr	r3, [pc, #40]	; (800ef68 <vPortSetupTimerInterrupt+0x3c>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a0a      	ldr	r2, [pc, #40]	; (800ef6c <vPortSetupTimerInterrupt+0x40>)
 800ef42:	fba2 2303 	umull	r2, r3, r2, r3
 800ef46:	099b      	lsrs	r3, r3, #6
 800ef48:	4a09      	ldr	r2, [pc, #36]	; (800ef70 <vPortSetupTimerInterrupt+0x44>)
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ef4e:	4b04      	ldr	r3, [pc, #16]	; (800ef60 <vPortSetupTimerInterrupt+0x34>)
 800ef50:	2207      	movs	r2, #7
 800ef52:	601a      	str	r2, [r3, #0]
}
 800ef54:	bf00      	nop
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop
 800ef60:	e000e010 	.word	0xe000e010
 800ef64:	e000e018 	.word	0xe000e018
 800ef68:	200002c4 	.word	0x200002c4
 800ef6c:	10624dd3 	.word	0x10624dd3
 800ef70:	e000e014 	.word	0xe000e014

0800ef74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ef74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ef84 <vPortEnableVFP+0x10>
 800ef78:	6801      	ldr	r1, [r0, #0]
 800ef7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ef7e:	6001      	str	r1, [r0, #0]
 800ef80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ef82:	bf00      	nop
 800ef84:	e000ed88 	.word	0xe000ed88

0800ef88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ef88:	b480      	push	{r7}
 800ef8a:	b085      	sub	sp, #20
 800ef8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ef8e:	f3ef 8305 	mrs	r3, IPSR
 800ef92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2b0f      	cmp	r3, #15
 800ef98:	d914      	bls.n	800efc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ef9a:	4a17      	ldr	r2, [pc, #92]	; (800eff8 <vPortValidateInterruptPriority+0x70>)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	4413      	add	r3, r2
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800efa4:	4b15      	ldr	r3, [pc, #84]	; (800effc <vPortValidateInterruptPriority+0x74>)
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	7afa      	ldrb	r2, [r7, #11]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d20a      	bcs.n	800efc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800efae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb2:	f383 8811 	msr	BASEPRI, r3
 800efb6:	f3bf 8f6f 	isb	sy
 800efba:	f3bf 8f4f 	dsb	sy
 800efbe:	607b      	str	r3, [r7, #4]
}
 800efc0:	bf00      	nop
 800efc2:	e7fe      	b.n	800efc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800efc4:	4b0e      	ldr	r3, [pc, #56]	; (800f000 <vPortValidateInterruptPriority+0x78>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800efcc:	4b0d      	ldr	r3, [pc, #52]	; (800f004 <vPortValidateInterruptPriority+0x7c>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d90a      	bls.n	800efea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800efd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd8:	f383 8811 	msr	BASEPRI, r3
 800efdc:	f3bf 8f6f 	isb	sy
 800efe0:	f3bf 8f4f 	dsb	sy
 800efe4:	603b      	str	r3, [r7, #0]
}
 800efe6:	bf00      	nop
 800efe8:	e7fe      	b.n	800efe8 <vPortValidateInterruptPriority+0x60>
	}
 800efea:	bf00      	nop
 800efec:	3714      	adds	r7, #20
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop
 800eff8:	e000e3f0 	.word	0xe000e3f0
 800effc:	200042f0 	.word	0x200042f0
 800f000:	e000ed0c 	.word	0xe000ed0c
 800f004:	200042f4 	.word	0x200042f4

0800f008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b08a      	sub	sp, #40	; 0x28
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f010:	2300      	movs	r3, #0
 800f012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f014:	f7fe ffba 	bl	800df8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f018:	4b5b      	ldr	r3, [pc, #364]	; (800f188 <pvPortMalloc+0x180>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d101      	bne.n	800f024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f020:	f000 f92c 	bl	800f27c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f024:	4b59      	ldr	r3, [pc, #356]	; (800f18c <pvPortMalloc+0x184>)
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4013      	ands	r3, r2
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	f040 8093 	bne.w	800f158 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d01d      	beq.n	800f074 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f038:	2208      	movs	r2, #8
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	4413      	add	r3, r2
 800f03e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f003 0307 	and.w	r3, r3, #7
 800f046:	2b00      	cmp	r3, #0
 800f048:	d014      	beq.n	800f074 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f023 0307 	bic.w	r3, r3, #7
 800f050:	3308      	adds	r3, #8
 800f052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f003 0307 	and.w	r3, r3, #7
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d00a      	beq.n	800f074 <pvPortMalloc+0x6c>
	__asm volatile
 800f05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f062:	f383 8811 	msr	BASEPRI, r3
 800f066:	f3bf 8f6f 	isb	sy
 800f06a:	f3bf 8f4f 	dsb	sy
 800f06e:	617b      	str	r3, [r7, #20]
}
 800f070:	bf00      	nop
 800f072:	e7fe      	b.n	800f072 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d06e      	beq.n	800f158 <pvPortMalloc+0x150>
 800f07a:	4b45      	ldr	r3, [pc, #276]	; (800f190 <pvPortMalloc+0x188>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	429a      	cmp	r2, r3
 800f082:	d869      	bhi.n	800f158 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f084:	4b43      	ldr	r3, [pc, #268]	; (800f194 <pvPortMalloc+0x18c>)
 800f086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f088:	4b42      	ldr	r3, [pc, #264]	; (800f194 <pvPortMalloc+0x18c>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f08e:	e004      	b.n	800f09a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d903      	bls.n	800f0ac <pvPortMalloc+0xa4>
 800f0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d1f1      	bne.n	800f090 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f0ac:	4b36      	ldr	r3, [pc, #216]	; (800f188 <pvPortMalloc+0x180>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d050      	beq.n	800f158 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f0b6:	6a3b      	ldr	r3, [r7, #32]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2208      	movs	r2, #8
 800f0bc:	4413      	add	r3, r2
 800f0be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	6a3b      	ldr	r3, [r7, #32]
 800f0c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ca:	685a      	ldr	r2, [r3, #4]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	1ad2      	subs	r2, r2, r3
 800f0d0:	2308      	movs	r3, #8
 800f0d2:	005b      	lsls	r3, r3, #1
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d91f      	bls.n	800f118 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	4413      	add	r3, r2
 800f0de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0e0:	69bb      	ldr	r3, [r7, #24]
 800f0e2:	f003 0307 	and.w	r3, r3, #7
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d00a      	beq.n	800f100 <pvPortMalloc+0xf8>
	__asm volatile
 800f0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ee:	f383 8811 	msr	BASEPRI, r3
 800f0f2:	f3bf 8f6f 	isb	sy
 800f0f6:	f3bf 8f4f 	dsb	sy
 800f0fa:	613b      	str	r3, [r7, #16]
}
 800f0fc:	bf00      	nop
 800f0fe:	e7fe      	b.n	800f0fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f102:	685a      	ldr	r2, [r3, #4]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	1ad2      	subs	r2, r2, r3
 800f108:	69bb      	ldr	r3, [r7, #24]
 800f10a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f112:	69b8      	ldr	r0, [r7, #24]
 800f114:	f000 f914 	bl	800f340 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f118:	4b1d      	ldr	r3, [pc, #116]	; (800f190 <pvPortMalloc+0x188>)
 800f11a:	681a      	ldr	r2, [r3, #0]
 800f11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	1ad3      	subs	r3, r2, r3
 800f122:	4a1b      	ldr	r2, [pc, #108]	; (800f190 <pvPortMalloc+0x188>)
 800f124:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f126:	4b1a      	ldr	r3, [pc, #104]	; (800f190 <pvPortMalloc+0x188>)
 800f128:	681a      	ldr	r2, [r3, #0]
 800f12a:	4b1b      	ldr	r3, [pc, #108]	; (800f198 <pvPortMalloc+0x190>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d203      	bcs.n	800f13a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f132:	4b17      	ldr	r3, [pc, #92]	; (800f190 <pvPortMalloc+0x188>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4a18      	ldr	r2, [pc, #96]	; (800f198 <pvPortMalloc+0x190>)
 800f138:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13c:	685a      	ldr	r2, [r3, #4]
 800f13e:	4b13      	ldr	r3, [pc, #76]	; (800f18c <pvPortMalloc+0x184>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	431a      	orrs	r2, r3
 800f144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f146:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14a:	2200      	movs	r2, #0
 800f14c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f14e:	4b13      	ldr	r3, [pc, #76]	; (800f19c <pvPortMalloc+0x194>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	3301      	adds	r3, #1
 800f154:	4a11      	ldr	r2, [pc, #68]	; (800f19c <pvPortMalloc+0x194>)
 800f156:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f158:	f7fe ff26 	bl	800dfa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	f003 0307 	and.w	r3, r3, #7
 800f162:	2b00      	cmp	r3, #0
 800f164:	d00a      	beq.n	800f17c <pvPortMalloc+0x174>
	__asm volatile
 800f166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f16a:	f383 8811 	msr	BASEPRI, r3
 800f16e:	f3bf 8f6f 	isb	sy
 800f172:	f3bf 8f4f 	dsb	sy
 800f176:	60fb      	str	r3, [r7, #12]
}
 800f178:	bf00      	nop
 800f17a:	e7fe      	b.n	800f17a <pvPortMalloc+0x172>
	return pvReturn;
 800f17c:	69fb      	ldr	r3, [r7, #28]
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3728      	adds	r7, #40	; 0x28
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
 800f186:	bf00      	nop
 800f188:	2000a610 	.word	0x2000a610
 800f18c:	2000a624 	.word	0x2000a624
 800f190:	2000a614 	.word	0x2000a614
 800f194:	2000a608 	.word	0x2000a608
 800f198:	2000a618 	.word	0x2000a618
 800f19c:	2000a61c 	.word	0x2000a61c

0800f1a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b086      	sub	sp, #24
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d04d      	beq.n	800f24e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f1b2:	2308      	movs	r3, #8
 800f1b4:	425b      	negs	r3, r3
 800f1b6:	697a      	ldr	r2, [r7, #20]
 800f1b8:	4413      	add	r3, r2
 800f1ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	685a      	ldr	r2, [r3, #4]
 800f1c4:	4b24      	ldr	r3, [pc, #144]	; (800f258 <vPortFree+0xb8>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	4013      	ands	r3, r2
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d10a      	bne.n	800f1e4 <vPortFree+0x44>
	__asm volatile
 800f1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d2:	f383 8811 	msr	BASEPRI, r3
 800f1d6:	f3bf 8f6f 	isb	sy
 800f1da:	f3bf 8f4f 	dsb	sy
 800f1de:	60fb      	str	r3, [r7, #12]
}
 800f1e0:	bf00      	nop
 800f1e2:	e7fe      	b.n	800f1e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d00a      	beq.n	800f202 <vPortFree+0x62>
	__asm volatile
 800f1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f0:	f383 8811 	msr	BASEPRI, r3
 800f1f4:	f3bf 8f6f 	isb	sy
 800f1f8:	f3bf 8f4f 	dsb	sy
 800f1fc:	60bb      	str	r3, [r7, #8]
}
 800f1fe:	bf00      	nop
 800f200:	e7fe      	b.n	800f200 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	685a      	ldr	r2, [r3, #4]
 800f206:	4b14      	ldr	r3, [pc, #80]	; (800f258 <vPortFree+0xb8>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4013      	ands	r3, r2
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d01e      	beq.n	800f24e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d11a      	bne.n	800f24e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f218:	693b      	ldr	r3, [r7, #16]
 800f21a:	685a      	ldr	r2, [r3, #4]
 800f21c:	4b0e      	ldr	r3, [pc, #56]	; (800f258 <vPortFree+0xb8>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	43db      	mvns	r3, r3
 800f222:	401a      	ands	r2, r3
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f228:	f7fe feb0 	bl	800df8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	685a      	ldr	r2, [r3, #4]
 800f230:	4b0a      	ldr	r3, [pc, #40]	; (800f25c <vPortFree+0xbc>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4413      	add	r3, r2
 800f236:	4a09      	ldr	r2, [pc, #36]	; (800f25c <vPortFree+0xbc>)
 800f238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f23a:	6938      	ldr	r0, [r7, #16]
 800f23c:	f000 f880 	bl	800f340 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f240:	4b07      	ldr	r3, [pc, #28]	; (800f260 <vPortFree+0xc0>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	3301      	adds	r3, #1
 800f246:	4a06      	ldr	r2, [pc, #24]	; (800f260 <vPortFree+0xc0>)
 800f248:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f24a:	f7fe fead 	bl	800dfa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f24e:	bf00      	nop
 800f250:	3718      	adds	r7, #24
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
 800f256:	bf00      	nop
 800f258:	2000a624 	.word	0x2000a624
 800f25c:	2000a614 	.word	0x2000a614
 800f260:	2000a620 	.word	0x2000a620

0800f264 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800f264:	b480      	push	{r7}
 800f266:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800f268:	4b03      	ldr	r3, [pc, #12]	; (800f278 <xPortGetFreeHeapSize+0x14>)
 800f26a:	681b      	ldr	r3, [r3, #0]
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr
 800f276:	bf00      	nop
 800f278:	2000a614 	.word	0x2000a614

0800f27c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f27c:	b480      	push	{r7}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f282:	f246 3310 	movw	r3, #25360	; 0x6310
 800f286:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f288:	4b27      	ldr	r3, [pc, #156]	; (800f328 <prvHeapInit+0xac>)
 800f28a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f003 0307 	and.w	r3, r3, #7
 800f292:	2b00      	cmp	r3, #0
 800f294:	d00c      	beq.n	800f2b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	3307      	adds	r3, #7
 800f29a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f023 0307 	bic.w	r3, r3, #7
 800f2a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f2a4:	68ba      	ldr	r2, [r7, #8]
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	1ad3      	subs	r3, r2, r3
 800f2aa:	4a1f      	ldr	r2, [pc, #124]	; (800f328 <prvHeapInit+0xac>)
 800f2ac:	4413      	add	r3, r2
 800f2ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f2b4:	4a1d      	ldr	r2, [pc, #116]	; (800f32c <prvHeapInit+0xb0>)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f2ba:	4b1c      	ldr	r3, [pc, #112]	; (800f32c <prvHeapInit+0xb0>)
 800f2bc:	2200      	movs	r2, #0
 800f2be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	68ba      	ldr	r2, [r7, #8]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f2c8:	2208      	movs	r2, #8
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	1a9b      	subs	r3, r3, r2
 800f2ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f023 0307 	bic.w	r3, r3, #7
 800f2d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	4a15      	ldr	r2, [pc, #84]	; (800f330 <prvHeapInit+0xb4>)
 800f2dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f2de:	4b14      	ldr	r3, [pc, #80]	; (800f330 <prvHeapInit+0xb4>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f2e6:	4b12      	ldr	r3, [pc, #72]	; (800f330 <prvHeapInit+0xb4>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	68fa      	ldr	r2, [r7, #12]
 800f2f6:	1ad2      	subs	r2, r2, r3
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f2fc:	4b0c      	ldr	r3, [pc, #48]	; (800f330 <prvHeapInit+0xb4>)
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	4a0a      	ldr	r2, [pc, #40]	; (800f334 <prvHeapInit+0xb8>)
 800f30a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	4a09      	ldr	r2, [pc, #36]	; (800f338 <prvHeapInit+0xbc>)
 800f312:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f314:	4b09      	ldr	r3, [pc, #36]	; (800f33c <prvHeapInit+0xc0>)
 800f316:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f31a:	601a      	str	r2, [r3, #0]
}
 800f31c:	bf00      	nop
 800f31e:	3714      	adds	r7, #20
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr
 800f328:	200042f8 	.word	0x200042f8
 800f32c:	2000a608 	.word	0x2000a608
 800f330:	2000a610 	.word	0x2000a610
 800f334:	2000a618 	.word	0x2000a618
 800f338:	2000a614 	.word	0x2000a614
 800f33c:	2000a624 	.word	0x2000a624

0800f340 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f340:	b480      	push	{r7}
 800f342:	b085      	sub	sp, #20
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f348:	4b28      	ldr	r3, [pc, #160]	; (800f3ec <prvInsertBlockIntoFreeList+0xac>)
 800f34a:	60fb      	str	r3, [r7, #12]
 800f34c:	e002      	b.n	800f354 <prvInsertBlockIntoFreeList+0x14>
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	60fb      	str	r3, [r7, #12]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d8f7      	bhi.n	800f34e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	68ba      	ldr	r2, [r7, #8]
 800f368:	4413      	add	r3, r2
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d108      	bne.n	800f382 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	685a      	ldr	r2, [r3, #4]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	441a      	add	r2, r3
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	68ba      	ldr	r2, [r7, #8]
 800f38c:	441a      	add	r2, r3
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	429a      	cmp	r2, r3
 800f394:	d118      	bne.n	800f3c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	4b15      	ldr	r3, [pc, #84]	; (800f3f0 <prvInsertBlockIntoFreeList+0xb0>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d00d      	beq.n	800f3be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	685a      	ldr	r2, [r3, #4]
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	441a      	add	r2, r3
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	681a      	ldr	r2, [r3, #0]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	601a      	str	r2, [r3, #0]
 800f3bc:	e008      	b.n	800f3d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f3be:	4b0c      	ldr	r3, [pc, #48]	; (800f3f0 <prvInsertBlockIntoFreeList+0xb0>)
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	601a      	str	r2, [r3, #0]
 800f3c6:	e003      	b.n	800f3d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d002      	beq.n	800f3de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	687a      	ldr	r2, [r7, #4]
 800f3dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3de:	bf00      	nop
 800f3e0:	3714      	adds	r7, #20
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr
 800f3ea:	bf00      	nop
 800f3ec:	2000a608 	.word	0x2000a608
 800f3f0:	2000a610 	.word	0x2000a610

0800f3f4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b084      	sub	sp, #16
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	330c      	adds	r3, #12
 800f404:	461a      	mov	r2, r3
 800f406:	6839      	ldr	r1, [r7, #0]
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f001 fff7 	bl	80113fc <tcpip_send_msg_wait_sem>
 800f40e:	4603      	mov	r3, r0
 800f410:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d103      	bne.n	800f422 <netconn_apimsg+0x2e>
    return apimsg->err;
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f420:	e001      	b.n	800f426 <netconn_apimsg+0x32>
  }
  return err;
 800f422:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f426:	4618      	mov	r0, r3
 800f428:	3710      	adds	r7, #16
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
	...

0800f430 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b08c      	sub	sp, #48	; 0x30
 800f434:	af00      	add	r7, sp, #0
 800f436:	4603      	mov	r3, r0
 800f438:	603a      	str	r2, [r7, #0]
 800f43a:	71fb      	strb	r3, [r7, #7]
 800f43c:	460b      	mov	r3, r1
 800f43e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800f440:	79fb      	ldrb	r3, [r7, #7]
 800f442:	6839      	ldr	r1, [r7, #0]
 800f444:	4618      	mov	r0, r3
 800f446:	f000 ff21 	bl	801028c <netconn_alloc>
 800f44a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800f44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d054      	beq.n	800f4fc <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800f452:	79bb      	ldrb	r3, [r7, #6]
 800f454:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800f456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f458:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800f45a:	f107 0308 	add.w	r3, r7, #8
 800f45e:	4619      	mov	r1, r3
 800f460:	4829      	ldr	r0, [pc, #164]	; (800f508 <netconn_new_with_proto_and_callback+0xd8>)
 800f462:	f7ff ffc7 	bl	800f3f4 <netconn_apimsg>
 800f466:	4603      	mov	r3, r0
 800f468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800f46c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f470:	2b00      	cmp	r3, #0
 800f472:	d043      	beq.n	800f4fc <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800f474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d005      	beq.n	800f488 <netconn_new_with_proto_and_callback+0x58>
 800f47c:	4b23      	ldr	r3, [pc, #140]	; (800f50c <netconn_new_with_proto_and_callback+0xdc>)
 800f47e:	22a3      	movs	r2, #163	; 0xa3
 800f480:	4923      	ldr	r1, [pc, #140]	; (800f510 <netconn_new_with_proto_and_callback+0xe0>)
 800f482:	4824      	ldr	r0, [pc, #144]	; (800f514 <netconn_new_with_proto_and_callback+0xe4>)
 800f484:	f00d fb16 	bl	801cab4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800f488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48a:	3310      	adds	r3, #16
 800f48c:	4618      	mov	r0, r3
 800f48e:	f00c ff96 	bl	801c3be <sys_mbox_valid>
 800f492:	4603      	mov	r3, r0
 800f494:	2b00      	cmp	r3, #0
 800f496:	d105      	bne.n	800f4a4 <netconn_new_with_proto_and_callback+0x74>
 800f498:	4b1c      	ldr	r3, [pc, #112]	; (800f50c <netconn_new_with_proto_and_callback+0xdc>)
 800f49a:	22a4      	movs	r2, #164	; 0xa4
 800f49c:	491e      	ldr	r1, [pc, #120]	; (800f518 <netconn_new_with_proto_and_callback+0xe8>)
 800f49e:	481d      	ldr	r0, [pc, #116]	; (800f514 <netconn_new_with_proto_and_callback+0xe4>)
 800f4a0:	f00d fb08 	bl	801cab4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800f4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a6:	3314      	adds	r3, #20
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f00c ff88 	bl	801c3be <sys_mbox_valid>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d005      	beq.n	800f4c0 <netconn_new_with_proto_and_callback+0x90>
 800f4b4:	4b15      	ldr	r3, [pc, #84]	; (800f50c <netconn_new_with_proto_and_callback+0xdc>)
 800f4b6:	22a6      	movs	r2, #166	; 0xa6
 800f4b8:	4918      	ldr	r1, [pc, #96]	; (800f51c <netconn_new_with_proto_and_callback+0xec>)
 800f4ba:	4816      	ldr	r0, [pc, #88]	; (800f514 <netconn_new_with_proto_and_callback+0xe4>)
 800f4bc:	f00d fafa 	bl	801cab4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800f4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c2:	330c      	adds	r3, #12
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f00d f80b 	bl	801c4e0 <sys_sem_valid>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d105      	bne.n	800f4dc <netconn_new_with_proto_and_callback+0xac>
 800f4d0:	4b0e      	ldr	r3, [pc, #56]	; (800f50c <netconn_new_with_proto_and_callback+0xdc>)
 800f4d2:	22a9      	movs	r2, #169	; 0xa9
 800f4d4:	4912      	ldr	r1, [pc, #72]	; (800f520 <netconn_new_with_proto_and_callback+0xf0>)
 800f4d6:	480f      	ldr	r0, [pc, #60]	; (800f514 <netconn_new_with_proto_and_callback+0xe4>)
 800f4d8:	f00d faec 	bl	801cab4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800f4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4de:	330c      	adds	r3, #12
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f00c fff0 	bl	801c4c6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800f4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e8:	3310      	adds	r3, #16
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f00c fee0 	bl	801c2b0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800f4f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4f2:	2007      	movs	r0, #7
 800f4f4:	f002 fcea 	bl	8011ecc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	e000      	b.n	800f4fe <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800f4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3730      	adds	r7, #48	; 0x30
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	08010261 	.word	0x08010261
 800f50c:	0801e0e4 	.word	0x0801e0e4
 800f510:	0801e118 	.word	0x0801e118
 800f514:	0801e13c 	.word	0x0801e13c
 800f518:	0801e164 	.word	0x0801e164
 800f51c:	0801e17c 	.word	0x0801e17c
 800f520:	0801e1a0 	.word	0x0801e1a0

0800f524 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b08c      	sub	sp, #48	; 0x30
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d101      	bne.n	800f536 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800f532:	2300      	movs	r3, #0
 800f534:	e014      	b.n	800f560 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f53a:	2329      	movs	r3, #41	; 0x29
 800f53c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800f53e:	f107 030c 	add.w	r3, r7, #12
 800f542:	4619      	mov	r1, r3
 800f544:	4808      	ldr	r0, [pc, #32]	; (800f568 <netconn_prepare_delete+0x44>)
 800f546:	f7ff ff55 	bl	800f3f4 <netconn_apimsg>
 800f54a:	4603      	mov	r3, r0
 800f54c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800f550:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f554:	2b00      	cmp	r3, #0
 800f556:	d002      	beq.n	800f55e <netconn_prepare_delete+0x3a>
    return err;
 800f558:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f55c:	e000      	b.n	800f560 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800f55e:	2300      	movs	r3, #0
}
 800f560:	4618      	mov	r0, r3
 800f562:	3730      	adds	r7, #48	; 0x30
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	080107cd 	.word	0x080107cd

0800f56c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d101      	bne.n	800f57e <netconn_delete+0x12>
    return ERR_OK;
 800f57a:	2300      	movs	r3, #0
 800f57c:	e00d      	b.n	800f59a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f7ff ffd0 	bl	800f524 <netconn_prepare_delete>
 800f584:	4603      	mov	r3, r0
 800f586:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800f588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d102      	bne.n	800f596 <netconn_delete+0x2a>
    netconn_free(conn);
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f000 fee9 	bl	8010368 <netconn_free>
  }
  return err;
 800f596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3710      	adds	r7, #16
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}
	...

0800f5a4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b08e      	sub	sp, #56	; 0x38
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	4613      	mov	r3, r2
 800f5b0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d109      	bne.n	800f5cc <netconn_bind+0x28>
 800f5b8:	4b11      	ldr	r3, [pc, #68]	; (800f600 <netconn_bind+0x5c>)
 800f5ba:	f44f 729c 	mov.w	r2, #312	; 0x138
 800f5be:	4911      	ldr	r1, [pc, #68]	; (800f604 <netconn_bind+0x60>)
 800f5c0:	4811      	ldr	r0, [pc, #68]	; (800f608 <netconn_bind+0x64>)
 800f5c2:	f00d fa77 	bl	801cab4 <iprintf>
 800f5c6:	f06f 030f 	mvn.w	r3, #15
 800f5ca:	e015      	b.n	800f5f8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d101      	bne.n	800f5d6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800f5d2:	4b0e      	ldr	r3, [pc, #56]	; (800f60c <netconn_bind+0x68>)
 800f5d4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800f5de:	88fb      	ldrh	r3, [r7, #6]
 800f5e0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800f5e2:	f107 0314 	add.w	r3, r7, #20
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	4809      	ldr	r0, [pc, #36]	; (800f610 <netconn_bind+0x6c>)
 800f5ea:	f7ff ff03 	bl	800f3f4 <netconn_apimsg>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800f5f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3738      	adds	r7, #56	; 0x38
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	0801e0e4 	.word	0x0801e0e4
 800f604:	0801e21c 	.word	0x0801e21c
 800f608:	0801e13c 	.word	0x0801e13c
 800f60c:	080216e8 	.word	0x080216e8
 800f610:	08010995 	.word	0x08010995

0800f614 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b088      	sub	sp, #32
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	4613      	mov	r3, r2
 800f620:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800f622:	2300      	movs	r3, #0
 800f624:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d109      	bne.n	800f640 <netconn_recv_data+0x2c>
 800f62c:	4b58      	ldr	r3, [pc, #352]	; (800f790 <netconn_recv_data+0x17c>)
 800f62e:	f44f 7212 	mov.w	r2, #584	; 0x248
 800f632:	4958      	ldr	r1, [pc, #352]	; (800f794 <netconn_recv_data+0x180>)
 800f634:	4858      	ldr	r0, [pc, #352]	; (800f798 <netconn_recv_data+0x184>)
 800f636:	f00d fa3d 	bl	801cab4 <iprintf>
 800f63a:	f06f 030f 	mvn.w	r3, #15
 800f63e:	e0a2      	b.n	800f786 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	2200      	movs	r2, #0
 800f644:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d109      	bne.n	800f660 <netconn_recv_data+0x4c>
 800f64c:	4b50      	ldr	r3, [pc, #320]	; (800f790 <netconn_recv_data+0x17c>)
 800f64e:	f240 224a 	movw	r2, #586	; 0x24a
 800f652:	4952      	ldr	r1, [pc, #328]	; (800f79c <netconn_recv_data+0x188>)
 800f654:	4850      	ldr	r0, [pc, #320]	; (800f798 <netconn_recv_data+0x184>)
 800f656:	f00d fa2d 	bl	801cab4 <iprintf>
 800f65a:	f06f 030f 	mvn.w	r3, #15
 800f65e:	e092      	b.n	800f786 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	3310      	adds	r3, #16
 800f664:	4618      	mov	r0, r3
 800f666:	f00c feaa 	bl	801c3be <sys_mbox_valid>
 800f66a:	4603      	mov	r3, r0
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d10e      	bne.n	800f68e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800f670:	68f8      	ldr	r0, [r7, #12]
 800f672:	f000 fa45 	bl	800fb00 <netconn_err>
 800f676:	4603      	mov	r3, r0
 800f678:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800f67a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d002      	beq.n	800f688 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800f682:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f686:	e07e      	b.n	800f786 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800f688:	f06f 030a 	mvn.w	r3, #10
 800f68c:	e07b      	b.n	800f786 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	7f1b      	ldrb	r3, [r3, #28]
 800f692:	f003 0302 	and.w	r3, r3, #2
 800f696:	2b00      	cmp	r3, #0
 800f698:	d10f      	bne.n	800f6ba <netconn_recv_data+0xa6>
 800f69a:	79fb      	ldrb	r3, [r7, #7]
 800f69c:	f003 0304 	and.w	r3, r3, #4
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d10a      	bne.n	800f6ba <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	7f1b      	ldrb	r3, [r3, #28]
 800f6a8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d104      	bne.n	800f6ba <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d023      	beq.n	800f702 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	3310      	adds	r3, #16
 800f6be:	f107 0218 	add.w	r2, r7, #24
 800f6c2:	4611      	mov	r1, r2
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f00c fe5e 	bl	801c386 <sys_arch_mbox_tryfetch>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6d0:	d11f      	bne.n	800f712 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800f6d2:	68f8      	ldr	r0, [r7, #12]
 800f6d4:	f000 fa14 	bl	800fb00 <netconn_err>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800f6dc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d002      	beq.n	800f6ea <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800f6e4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f6e8:	e04d      	b.n	800f786 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	7f1b      	ldrb	r3, [r3, #28]
 800f6ee:	f003 0301 	and.w	r3, r3, #1
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d002      	beq.n	800f6fc <netconn_recv_data+0xe8>
        return ERR_CONN;
 800f6f6:	f06f 030a 	mvn.w	r3, #10
 800f6fa:	e044      	b.n	800f786 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800f6fc:	f06f 0306 	mvn.w	r3, #6
 800f700:	e041      	b.n	800f786 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	3310      	adds	r3, #16
 800f706:	f107 0118 	add.w	r1, r7, #24
 800f70a:	2200      	movs	r2, #0
 800f70c:	4618      	mov	r0, r3
 800f70e:	f00c fdfb 	bl	801c308 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f71a:	2b10      	cmp	r3, #16
 800f71c:	d117      	bne.n	800f74e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800f71e:	69bb      	ldr	r3, [r7, #24]
 800f720:	f107 0217 	add.w	r2, r7, #23
 800f724:	4611      	mov	r1, r2
 800f726:	4618      	mov	r0, r3
 800f728:	f000 fa3c 	bl	800fba4 <lwip_netconn_is_err_msg>
 800f72c:	4603      	mov	r3, r0
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d009      	beq.n	800f746 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800f732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f736:	f113 0f0f 	cmn.w	r3, #15
 800f73a:	d101      	bne.n	800f740 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800f73c:	2300      	movs	r3, #0
 800f73e:	e022      	b.n	800f786 <netconn_recv_data+0x172>
      }
      return err;
 800f740:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f744:	e01f      	b.n	800f786 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800f746:	69bb      	ldr	r3, [r7, #24]
 800f748:	891b      	ldrh	r3, [r3, #8]
 800f74a:	83fb      	strh	r3, [r7, #30]
 800f74c:	e00d      	b.n	800f76a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800f74e:	69bb      	ldr	r3, [r7, #24]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d106      	bne.n	800f762 <netconn_recv_data+0x14e>
 800f754:	4b0e      	ldr	r3, [pc, #56]	; (800f790 <netconn_recv_data+0x17c>)
 800f756:	f240 2291 	movw	r2, #657	; 0x291
 800f75a:	4911      	ldr	r1, [pc, #68]	; (800f7a0 <netconn_recv_data+0x18c>)
 800f75c:	480e      	ldr	r0, [pc, #56]	; (800f798 <netconn_recv_data+0x184>)
 800f75e:	f00d f9a9 	bl	801cab4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800f762:	69bb      	ldr	r3, [r7, #24]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	891b      	ldrh	r3, [r3, #8]
 800f768:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d005      	beq.n	800f77e <netconn_recv_data+0x16a>
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f776:	8bfa      	ldrh	r2, [r7, #30]
 800f778:	2101      	movs	r1, #1
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800f77e:	69ba      	ldr	r2, [r7, #24]
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800f784:	2300      	movs	r3, #0
}
 800f786:	4618      	mov	r0, r3
 800f788:	3720      	adds	r7, #32
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	0801e0e4 	.word	0x0801e0e4
 800f794:	0801e2fc 	.word	0x0801e2fc
 800f798:	0801e13c 	.word	0x0801e13c
 800f79c:	0801e31c 	.word	0x0801e31c
 800f7a0:	0801e338 	.word	0x0801e338

0800f7a4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d005      	beq.n	800f7c2 <netconn_tcp_recvd_msg+0x1e>
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f7be:	2b10      	cmp	r3, #16
 800f7c0:	d009      	beq.n	800f7d6 <netconn_tcp_recvd_msg+0x32>
 800f7c2:	4b0c      	ldr	r3, [pc, #48]	; (800f7f4 <netconn_tcp_recvd_msg+0x50>)
 800f7c4:	f240 22a7 	movw	r2, #679	; 0x2a7
 800f7c8:	490b      	ldr	r1, [pc, #44]	; (800f7f8 <netconn_tcp_recvd_msg+0x54>)
 800f7ca:	480c      	ldr	r0, [pc, #48]	; (800f7fc <netconn_tcp_recvd_msg+0x58>)
 800f7cc:	f00d f972 	bl	801cab4 <iprintf>
 800f7d0:	f06f 030f 	mvn.w	r3, #15
 800f7d4:	e00a      	b.n	800f7ec <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	68fa      	ldr	r2, [r7, #12]
 800f7da:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	68ba      	ldr	r2, [r7, #8]
 800f7e0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800f7e2:	6879      	ldr	r1, [r7, #4]
 800f7e4:	4806      	ldr	r0, [pc, #24]	; (800f800 <netconn_tcp_recvd_msg+0x5c>)
 800f7e6:	f7ff fe05 	bl	800f3f4 <netconn_apimsg>
 800f7ea:	4603      	mov	r3, r0
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3710      	adds	r7, #16
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	0801e0e4 	.word	0x0801e0e4
 800f7f8:	0801e344 	.word	0x0801e344
 800f7fc:	0801e13c 	.word	0x0801e13c
 800f800:	08010aa3 	.word	0x08010aa3

0800f804 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b090      	sub	sp, #64	; 0x40
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	4613      	mov	r3, r2
 800f810:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	3310      	adds	r3, #16
 800f816:	4618      	mov	r0, r3
 800f818:	f00c fdd1 	bl	801c3be <sys_mbox_valid>
 800f81c:	4603      	mov	r3, r0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d102      	bne.n	800f828 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800f822:	f06f 030a 	mvn.w	r3, #10
 800f826:	e06d      	b.n	800f904 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	7f1b      	ldrb	r3, [r3, #28]
 800f82c:	b25b      	sxtb	r3, r3
 800f82e:	2b00      	cmp	r3, #0
 800f830:	da07      	bge.n	800f842 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	7f1b      	ldrb	r3, [r3, #28]
 800f836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f83a:	b2da      	uxtb	r2, r3
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800f840:	e039      	b.n	800f8b6 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800f842:	79fb      	ldrb	r3, [r7, #7]
 800f844:	461a      	mov	r2, r3
 800f846:	68b9      	ldr	r1, [r7, #8]
 800f848:	68f8      	ldr	r0, [r7, #12]
 800f84a:	f7ff fee3 	bl	800f614 <netconn_recv_data>
 800f84e:	4603      	mov	r3, r0
 800f850:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800f854:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d002      	beq.n	800f862 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800f85c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f860:	e050      	b.n	800f904 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800f868:	79fb      	ldrb	r3, [r7, #7]
 800f86a:	f003 0308 	and.w	r3, r3, #8
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d10e      	bne.n	800f890 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800f872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f874:	2b00      	cmp	r3, #0
 800f876:	d002      	beq.n	800f87e <netconn_recv_data_tcp+0x7a>
 800f878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87a:	891b      	ldrh	r3, [r3, #8]
 800f87c:	e000      	b.n	800f880 <netconn_recv_data_tcp+0x7c>
 800f87e:	2301      	movs	r3, #1
 800f880:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800f882:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f884:	f107 0214 	add.w	r2, r7, #20
 800f888:	4619      	mov	r1, r3
 800f88a:	68f8      	ldr	r0, [r7, #12]
 800f88c:	f7ff ff8a 	bl	800f7a4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800f890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f892:	2b00      	cmp	r3, #0
 800f894:	d134      	bne.n	800f900 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800f896:	79fb      	ldrb	r3, [r7, #7]
 800f898:	f003 0310 	and.w	r3, r3, #16
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d009      	beq.n	800f8b4 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	7f1b      	ldrb	r3, [r3, #28]
 800f8a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f8a8:	b2da      	uxtb	r2, r3
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800f8ae:	f06f 0306 	mvn.w	r3, #6
 800f8b2:	e027      	b.n	800f904 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800f8b4:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d005      	beq.n	800f8ca <netconn_recv_data_tcp+0xc6>
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	2101      	movs	r1, #1
 800f8c6:	68f8      	ldr	r0, [r7, #12]
 800f8c8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d10f      	bne.n	800f8f2 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800f8d2:	68f8      	ldr	r0, [r7, #12]
 800f8d4:	f000 f914 	bl	800fb00 <netconn_err>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800f8de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d002      	beq.n	800f8ec <netconn_recv_data_tcp+0xe8>
          return err;
 800f8e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f8ea:	e00b      	b.n	800f904 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800f8ec:	f06f 030d 	mvn.w	r3, #13
 800f8f0:	e008      	b.n	800f904 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800f8f2:	2101      	movs	r1, #1
 800f8f4:	68f8      	ldr	r0, [r7, #12]
 800f8f6:	f000 f8d3 	bl	800faa0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800f8fa:	f06f 030e 	mvn.w	r3, #14
 800f8fe:	e001      	b.n	800f904 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800f900:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f904:	4618      	mov	r0, r3
 800f906:	3740      	adds	r7, #64	; 0x40
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b086      	sub	sp, #24
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800f916:	2300      	movs	r3, #0
 800f918:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d109      	bne.n	800f934 <netconn_recv+0x28>
 800f920:	4b32      	ldr	r3, [pc, #200]	; (800f9ec <netconn_recv+0xe0>)
 800f922:	f240 3263 	movw	r2, #867	; 0x363
 800f926:	4932      	ldr	r1, [pc, #200]	; (800f9f0 <netconn_recv+0xe4>)
 800f928:	4832      	ldr	r0, [pc, #200]	; (800f9f4 <netconn_recv+0xe8>)
 800f92a:	f00d f8c3 	bl	801cab4 <iprintf>
 800f92e:	f06f 030f 	mvn.w	r3, #15
 800f932:	e056      	b.n	800f9e2 <netconn_recv+0xd6>
  *new_buf = NULL;
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	2200      	movs	r2, #0
 800f938:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d109      	bne.n	800f954 <netconn_recv+0x48>
 800f940:	4b2a      	ldr	r3, [pc, #168]	; (800f9ec <netconn_recv+0xe0>)
 800f942:	f240 3265 	movw	r2, #869	; 0x365
 800f946:	492c      	ldr	r1, [pc, #176]	; (800f9f8 <netconn_recv+0xec>)
 800f948:	482a      	ldr	r0, [pc, #168]	; (800f9f4 <netconn_recv+0xe8>)
 800f94a:	f00d f8b3 	bl	801cab4 <iprintf>
 800f94e:	f06f 030f 	mvn.w	r3, #15
 800f952:	e046      	b.n	800f9e2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f95c:	2b10      	cmp	r3, #16
 800f95e:	d13a      	bne.n	800f9d6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800f960:	2300      	movs	r3, #0
 800f962:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f964:	2006      	movs	r0, #6
 800f966:	f002 fa5f 	bl	8011e28 <memp_malloc>
 800f96a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d102      	bne.n	800f978 <netconn_recv+0x6c>
      return ERR_MEM;
 800f972:	f04f 33ff 	mov.w	r3, #4294967295
 800f976:	e034      	b.n	800f9e2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800f978:	f107 030c 	add.w	r3, r7, #12
 800f97c:	2200      	movs	r2, #0
 800f97e:	4619      	mov	r1, r3
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f7ff ff3f 	bl	800f804 <netconn_recv_data_tcp>
 800f986:	4603      	mov	r3, r0
 800f988:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f98a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d006      	beq.n	800f9a0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800f992:	6979      	ldr	r1, [r7, #20]
 800f994:	2006      	movs	r0, #6
 800f996:	f002 fa99 	bl	8011ecc <memp_free>
      return err;
 800f99a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f99e:	e020      	b.n	800f9e2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d106      	bne.n	800f9b4 <netconn_recv+0xa8>
 800f9a6:	4b11      	ldr	r3, [pc, #68]	; (800f9ec <netconn_recv+0xe0>)
 800f9a8:	f240 3279 	movw	r2, #889	; 0x379
 800f9ac:	4913      	ldr	r1, [pc, #76]	; (800f9fc <netconn_recv+0xf0>)
 800f9ae:	4811      	ldr	r0, [pc, #68]	; (800f9f4 <netconn_recv+0xe8>)
 800f9b0:	f00d f880 	bl	801cab4 <iprintf>

    buf->p = p;
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f9ba:	68fa      	ldr	r2, [r7, #12]
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	697a      	ldr	r2, [r7, #20]
 800f9d0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	e005      	b.n	800f9e2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	6839      	ldr	r1, [r7, #0]
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f7ff fe1a 	bl	800f614 <netconn_recv_data>
 800f9e0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3718      	adds	r7, #24
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	0801e0e4 	.word	0x0801e0e4
 800f9f0:	0801e2fc 	.word	0x0801e2fc
 800f9f4:	0801e13c 	.word	0x0801e13c
 800f9f8:	0801e31c 	.word	0x0801e31c
 800f9fc:	0801e394 	.word	0x0801e394

0800fa00 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	60f8      	str	r0, [r7, #12]
 800fa08:	60b9      	str	r1, [r7, #8]
 800fa0a:	607a      	str	r2, [r7, #4]
 800fa0c:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d011      	beq.n	800fa38 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d002      	beq.n	800fa20 <netconn_sendto+0x20>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	e000      	b.n	800fa22 <netconn_sendto+0x22>
 800fa20:	2300      	movs	r3, #0
 800fa22:	68ba      	ldr	r2, [r7, #8]
 800fa24:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	887a      	ldrh	r2, [r7, #2]
 800fa2a:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 800fa2c:	68b9      	ldr	r1, [r7, #8]
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f000 f808 	bl	800fa44 <netconn_send>
 800fa34:	4603      	mov	r3, r0
 800fa36:	e001      	b.n	800fa3c <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 800fa38:	f06f 0305 	mvn.w	r3, #5
}
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3710      	adds	r7, #16
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}

0800fa44 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b08c      	sub	sp, #48	; 0x30
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d109      	bne.n	800fa68 <netconn_send+0x24>
 800fa54:	4b0e      	ldr	r3, [pc, #56]	; (800fa90 <netconn_send+0x4c>)
 800fa56:	f240 32b2 	movw	r2, #946	; 0x3b2
 800fa5a:	490e      	ldr	r1, [pc, #56]	; (800fa94 <netconn_send+0x50>)
 800fa5c:	480e      	ldr	r0, [pc, #56]	; (800fa98 <netconn_send+0x54>)
 800fa5e:	f00d f829 	bl	801cab4 <iprintf>
 800fa62:	f06f 030f 	mvn.w	r3, #15
 800fa66:	e00e      	b.n	800fa86 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800fa70:	f107 030c 	add.w	r3, r7, #12
 800fa74:	4619      	mov	r1, r3
 800fa76:	4809      	ldr	r0, [pc, #36]	; (800fa9c <netconn_send+0x58>)
 800fa78:	f7ff fcbc 	bl	800f3f4 <netconn_apimsg>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800fa82:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3730      	adds	r7, #48	; 0x30
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	0801e0e4 	.word	0x0801e0e4
 800fa94:	0801e3a0 	.word	0x0801e3a0
 800fa98:	0801e13c 	.word	0x0801e13c
 800fa9c:	08010a09 	.word	0x08010a09

0800faa0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b08c      	sub	sp, #48	; 0x30
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	460b      	mov	r3, r1
 800faaa:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d109      	bne.n	800fac6 <netconn_close_shutdown+0x26>
 800fab2:	4b0f      	ldr	r3, [pc, #60]	; (800faf0 <netconn_close_shutdown+0x50>)
 800fab4:	f240 4247 	movw	r2, #1095	; 0x447
 800fab8:	490e      	ldr	r1, [pc, #56]	; (800faf4 <netconn_close_shutdown+0x54>)
 800faba:	480f      	ldr	r0, [pc, #60]	; (800faf8 <netconn_close_shutdown+0x58>)
 800fabc:	f00c fffa 	bl	801cab4 <iprintf>
 800fac0:	f06f 030f 	mvn.w	r3, #15
 800fac4:	e010      	b.n	800fae8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800faca:	78fb      	ldrb	r3, [r7, #3]
 800facc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800face:	2329      	movs	r3, #41	; 0x29
 800fad0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800fad2:	f107 030c 	add.w	r3, r7, #12
 800fad6:	4619      	mov	r1, r3
 800fad8:	4808      	ldr	r0, [pc, #32]	; (800fafc <netconn_close_shutdown+0x5c>)
 800fada:	f7ff fc8b 	bl	800f3f4 <netconn_apimsg>
 800fade:	4603      	mov	r3, r0
 800fae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800fae4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3730      	adds	r7, #48	; 0x30
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}
 800faf0:	0801e0e4 	.word	0x0801e0e4
 800faf4:	0801e420 	.word	0x0801e420
 800faf8:	0801e13c 	.word	0x0801e13c
 800fafc:	08010ea5 	.word	0x08010ea5

0800fb00 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d101      	bne.n	800fb12 <netconn_err+0x12>
    return ERR_OK;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	e00d      	b.n	800fb2e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800fb12:	f00c fd6f 	bl	801c5f4 <sys_arch_protect>
 800fb16:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	7a1b      	ldrb	r3, [r3, #8]
 800fb1c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2200      	movs	r2, #0
 800fb22:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800fb24:	68f8      	ldr	r0, [r7, #12]
 800fb26:	f00c fd73 	bl	801c610 <sys_arch_unprotect>
  return err;
 800fb2a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3710      	adds	r7, #16
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
	...

0800fb38 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	4603      	mov	r3, r0
 800fb40:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800fb42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb46:	f113 0f0d 	cmn.w	r3, #13
 800fb4a:	d009      	beq.n	800fb60 <lwip_netconn_err_to_msg+0x28>
 800fb4c:	f113 0f0d 	cmn.w	r3, #13
 800fb50:	dc0c      	bgt.n	800fb6c <lwip_netconn_err_to_msg+0x34>
 800fb52:	f113 0f0f 	cmn.w	r3, #15
 800fb56:	d007      	beq.n	800fb68 <lwip_netconn_err_to_msg+0x30>
 800fb58:	f113 0f0e 	cmn.w	r3, #14
 800fb5c:	d002      	beq.n	800fb64 <lwip_netconn_err_to_msg+0x2c>
 800fb5e:	e005      	b.n	800fb6c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800fb60:	4b0a      	ldr	r3, [pc, #40]	; (800fb8c <lwip_netconn_err_to_msg+0x54>)
 800fb62:	e00e      	b.n	800fb82 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800fb64:	4b0a      	ldr	r3, [pc, #40]	; (800fb90 <lwip_netconn_err_to_msg+0x58>)
 800fb66:	e00c      	b.n	800fb82 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800fb68:	4b0a      	ldr	r3, [pc, #40]	; (800fb94 <lwip_netconn_err_to_msg+0x5c>)
 800fb6a:	e00a      	b.n	800fb82 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800fb6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d005      	beq.n	800fb80 <lwip_netconn_err_to_msg+0x48>
 800fb74:	4b08      	ldr	r3, [pc, #32]	; (800fb98 <lwip_netconn_err_to_msg+0x60>)
 800fb76:	227d      	movs	r2, #125	; 0x7d
 800fb78:	4908      	ldr	r1, [pc, #32]	; (800fb9c <lwip_netconn_err_to_msg+0x64>)
 800fb7a:	4809      	ldr	r0, [pc, #36]	; (800fba0 <lwip_netconn_err_to_msg+0x68>)
 800fb7c:	f00c ff9a 	bl	801cab4 <iprintf>
      return NULL;
 800fb80:	2300      	movs	r3, #0
  }
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3708      	adds	r7, #8
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	080215d4 	.word	0x080215d4
 800fb90:	080215d5 	.word	0x080215d5
 800fb94:	080215d6 	.word	0x080215d6
 800fb98:	0801e43c 	.word	0x0801e43c
 800fb9c:	0801e470 	.word	0x0801e470
 800fba0:	0801e480 	.word	0x0801e480

0800fba4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d105      	bne.n	800fbc0 <lwip_netconn_is_err_msg+0x1c>
 800fbb4:	4b12      	ldr	r3, [pc, #72]	; (800fc00 <lwip_netconn_is_err_msg+0x5c>)
 800fbb6:	2285      	movs	r2, #133	; 0x85
 800fbb8:	4912      	ldr	r1, [pc, #72]	; (800fc04 <lwip_netconn_is_err_msg+0x60>)
 800fbba:	4813      	ldr	r0, [pc, #76]	; (800fc08 <lwip_netconn_is_err_msg+0x64>)
 800fbbc:	f00c ff7a 	bl	801cab4 <iprintf>

  if (msg == &netconn_aborted) {
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	4a12      	ldr	r2, [pc, #72]	; (800fc0c <lwip_netconn_is_err_msg+0x68>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d104      	bne.n	800fbd2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	22f3      	movs	r2, #243	; 0xf3
 800fbcc:	701a      	strb	r2, [r3, #0]
    return 1;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	e012      	b.n	800fbf8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4a0e      	ldr	r2, [pc, #56]	; (800fc10 <lwip_netconn_is_err_msg+0x6c>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d104      	bne.n	800fbe4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	22f2      	movs	r2, #242	; 0xf2
 800fbde:	701a      	strb	r2, [r3, #0]
    return 1;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	e009      	b.n	800fbf8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	4a0b      	ldr	r2, [pc, #44]	; (800fc14 <lwip_netconn_is_err_msg+0x70>)
 800fbe8:	4293      	cmp	r3, r2
 800fbea:	d104      	bne.n	800fbf6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	22f1      	movs	r2, #241	; 0xf1
 800fbf0:	701a      	strb	r2, [r3, #0]
    return 1;
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	e000      	b.n	800fbf8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800fbf6:	2300      	movs	r3, #0
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3708      	adds	r7, #8
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	0801e43c 	.word	0x0801e43c
 800fc04:	0801e4a8 	.word	0x0801e4a8
 800fc08:	0801e480 	.word	0x0801e480
 800fc0c:	080215d4 	.word	0x080215d4
 800fc10:	080215d5 	.word	0x080215d5
 800fc14:	080215d6 	.word	0x080215d6

0800fc18 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b088      	sub	sp, #32
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	60b9      	str	r1, [r7, #8]
 800fc22:	607a      	str	r2, [r7, #4]
 800fc24:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d105      	bne.n	800fc38 <recv_udp+0x20>
 800fc2c:	4b34      	ldr	r3, [pc, #208]	; (800fd00 <recv_udp+0xe8>)
 800fc2e:	22e5      	movs	r2, #229	; 0xe5
 800fc30:	4934      	ldr	r1, [pc, #208]	; (800fd04 <recv_udp+0xec>)
 800fc32:	4835      	ldr	r0, [pc, #212]	; (800fd08 <recv_udp+0xf0>)
 800fc34:	f00c ff3e 	bl	801cab4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d105      	bne.n	800fc4a <recv_udp+0x32>
 800fc3e:	4b30      	ldr	r3, [pc, #192]	; (800fd00 <recv_udp+0xe8>)
 800fc40:	22e6      	movs	r2, #230	; 0xe6
 800fc42:	4932      	ldr	r1, [pc, #200]	; (800fd0c <recv_udp+0xf4>)
 800fc44:	4830      	ldr	r0, [pc, #192]	; (800fd08 <recv_udp+0xf0>)
 800fc46:	f00c ff35 	bl	801cab4 <iprintf>
  conn = (struct netconn *)arg;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d103      	bne.n	800fc5c <recv_udp+0x44>
    pbuf_free(p);
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f002 ff79 	bl	8012b4c <pbuf_free>
    return;
 800fc5a:	e04d      	b.n	800fcf8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	68ba      	ldr	r2, [r7, #8]
 800fc62:	429a      	cmp	r2, r3
 800fc64:	d005      	beq.n	800fc72 <recv_udp+0x5a>
 800fc66:	4b26      	ldr	r3, [pc, #152]	; (800fd00 <recv_udp+0xe8>)
 800fc68:	22ee      	movs	r2, #238	; 0xee
 800fc6a:	4929      	ldr	r1, [pc, #164]	; (800fd10 <recv_udp+0xf8>)
 800fc6c:	4826      	ldr	r0, [pc, #152]	; (800fd08 <recv_udp+0xf0>)
 800fc6e:	f00c ff21 	bl	801cab4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	3310      	adds	r3, #16
 800fc76:	4618      	mov	r0, r3
 800fc78:	f00c fba1 	bl	801c3be <sys_mbox_valid>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d103      	bne.n	800fc8a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f002 ff62 	bl	8012b4c <pbuf_free>
    return;
 800fc88:	e036      	b.n	800fcf8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800fc8a:	2006      	movs	r0, #6
 800fc8c:	f002 f8cc 	bl	8011e28 <memp_malloc>
 800fc90:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800fc92:	69bb      	ldr	r3, [r7, #24]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d103      	bne.n	800fca0 <recv_udp+0x88>
    pbuf_free(p);
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f002 ff57 	bl	8012b4c <pbuf_free>
    return;
 800fc9e:	e02b      	b.n	800fcf8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800fca0:	69bb      	ldr	r3, [r7, #24]
 800fca2:	687a      	ldr	r2, [r7, #4]
 800fca4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800fca6:	69bb      	ldr	r3, [r7, #24]
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d002      	beq.n	800fcb8 <recv_udp+0xa0>
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	e000      	b.n	800fcba <recv_udp+0xa2>
 800fcb8:	2300      	movs	r3, #0
 800fcba:	69ba      	ldr	r2, [r7, #24]
 800fcbc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800fcc2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	891b      	ldrh	r3, [r3, #8]
 800fcc8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800fcca:	69fb      	ldr	r3, [r7, #28]
 800fccc:	3310      	adds	r3, #16
 800fcce:	69b9      	ldr	r1, [r7, #24]
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f00c faff 	bl	801c2d4 <sys_mbox_trypost>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d003      	beq.n	800fce4 <recv_udp+0xcc>
    netbuf_delete(buf);
 800fcdc:	69b8      	ldr	r0, [r7, #24]
 800fcde:	f001 f981 	bl	8010fe4 <netbuf_delete>
    return;
 800fce2:	e009      	b.n	800fcf8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d005      	beq.n	800fcf8 <recv_udp+0xe0>
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf0:	8afa      	ldrh	r2, [r7, #22]
 800fcf2:	2100      	movs	r1, #0
 800fcf4:	69f8      	ldr	r0, [r7, #28]
 800fcf6:	4798      	blx	r3
  }
}
 800fcf8:	3720      	adds	r7, #32
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	0801e43c 	.word	0x0801e43c
 800fd04:	0801e4b4 	.word	0x0801e4b4
 800fd08:	0801e480 	.word	0x0801e480
 800fd0c:	0801e4d8 	.word	0x0801e4d8
 800fd10:	0801e4f8 	.word	0x0801e4f8

0800fd14 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b088      	sub	sp, #32
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	607a      	str	r2, [r7, #4]
 800fd20:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d106      	bne.n	800fd36 <recv_tcp+0x22>
 800fd28:	4b36      	ldr	r3, [pc, #216]	; (800fe04 <recv_tcp+0xf0>)
 800fd2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800fd2e:	4936      	ldr	r1, [pc, #216]	; (800fe08 <recv_tcp+0xf4>)
 800fd30:	4836      	ldr	r0, [pc, #216]	; (800fe0c <recv_tcp+0xf8>)
 800fd32:	f00c febf 	bl	801cab4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d106      	bne.n	800fd4a <recv_tcp+0x36>
 800fd3c:	4b31      	ldr	r3, [pc, #196]	; (800fe04 <recv_tcp+0xf0>)
 800fd3e:	f240 122d 	movw	r2, #301	; 0x12d
 800fd42:	4933      	ldr	r1, [pc, #204]	; (800fe10 <recv_tcp+0xfc>)
 800fd44:	4831      	ldr	r0, [pc, #196]	; (800fe0c <recv_tcp+0xf8>)
 800fd46:	f00c feb5 	bl	801cab4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800fd4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d006      	beq.n	800fd60 <recv_tcp+0x4c>
 800fd52:	4b2c      	ldr	r3, [pc, #176]	; (800fe04 <recv_tcp+0xf0>)
 800fd54:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800fd58:	492e      	ldr	r1, [pc, #184]	; (800fe14 <recv_tcp+0x100>)
 800fd5a:	482c      	ldr	r0, [pc, #176]	; (800fe0c <recv_tcp+0xf8>)
 800fd5c:	f00c feaa 	bl	801cab4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d102      	bne.n	800fd70 <recv_tcp+0x5c>
    return ERR_VAL;
 800fd6a:	f06f 0305 	mvn.w	r3, #5
 800fd6e:	e045      	b.n	800fdfc <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	68ba      	ldr	r2, [r7, #8]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d006      	beq.n	800fd88 <recv_tcp+0x74>
 800fd7a:	4b22      	ldr	r3, [pc, #136]	; (800fe04 <recv_tcp+0xf0>)
 800fd7c:	f240 1235 	movw	r2, #309	; 0x135
 800fd80:	4925      	ldr	r1, [pc, #148]	; (800fe18 <recv_tcp+0x104>)
 800fd82:	4822      	ldr	r0, [pc, #136]	; (800fe0c <recv_tcp+0xf8>)
 800fd84:	f00c fe96 	bl	801cab4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	3310      	adds	r3, #16
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f00c fb16 	bl	801c3be <sys_mbox_valid>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d10d      	bne.n	800fdb4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d008      	beq.n	800fdb0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	891b      	ldrh	r3, [r3, #8]
 800fda2:	4619      	mov	r1, r3
 800fda4:	68b8      	ldr	r0, [r7, #8]
 800fda6:	f003 fdcf 	bl	8013948 <tcp_recved>
      pbuf_free(p);
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f002 fece 	bl	8012b4c <pbuf_free>
    }
    return ERR_OK;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	e023      	b.n	800fdfc <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d005      	beq.n	800fdc6 <recv_tcp+0xb2>
    msg = p;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	891b      	ldrh	r3, [r3, #8]
 800fdc2:	83fb      	strh	r3, [r7, #30]
 800fdc4:	e003      	b.n	800fdce <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800fdc6:	4b15      	ldr	r3, [pc, #84]	; (800fe1c <recv_tcp+0x108>)
 800fdc8:	61bb      	str	r3, [r7, #24]
    len = 0;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	3310      	adds	r3, #16
 800fdd2:	69b9      	ldr	r1, [r7, #24]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f00c fa7d 	bl	801c2d4 <sys_mbox_trypost>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d002      	beq.n	800fde6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800fde0:	f04f 33ff 	mov.w	r3, #4294967295
 800fde4:	e00a      	b.n	800fdfc <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d005      	beq.n	800fdfa <recv_tcp+0xe6>
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdf2:	8bfa      	ldrh	r2, [r7, #30]
 800fdf4:	2100      	movs	r1, #0
 800fdf6:	6978      	ldr	r0, [r7, #20]
 800fdf8:	4798      	blx	r3
  }

  return ERR_OK;
 800fdfa:	2300      	movs	r3, #0
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3720      	adds	r7, #32
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	0801e43c 	.word	0x0801e43c
 800fe08:	0801e518 	.word	0x0801e518
 800fe0c:	0801e480 	.word	0x0801e480
 800fe10:	0801e53c 	.word	0x0801e53c
 800fe14:	0801e55c 	.word	0x0801e55c
 800fe18:	0801e574 	.word	0x0801e574
 800fe1c:	080215d6 	.word	0x080215d6

0800fe20 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b084      	sub	sp, #16
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d106      	bne.n	800fe42 <poll_tcp+0x22>
 800fe34:	4b29      	ldr	r3, [pc, #164]	; (800fedc <poll_tcp+0xbc>)
 800fe36:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800fe3a:	4929      	ldr	r1, [pc, #164]	; (800fee0 <poll_tcp+0xc0>)
 800fe3c:	4829      	ldr	r0, [pc, #164]	; (800fee4 <poll_tcp+0xc4>)
 800fe3e:	f00c fe39 	bl	801cab4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	785b      	ldrb	r3, [r3, #1]
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d104      	bne.n	800fe54 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800fe4a:	2101      	movs	r1, #1
 800fe4c:	68f8      	ldr	r0, [r7, #12]
 800fe4e:	f000 fe5d 	bl	8010b0c <lwip_netconn_do_writemore>
 800fe52:	e016      	b.n	800fe82 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	785b      	ldrb	r3, [r3, #1]
 800fe58:	2b04      	cmp	r3, #4
 800fe5a:	d112      	bne.n	800fe82 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	6a1b      	ldr	r3, [r3, #32]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d00a      	beq.n	800fe7a <poll_tcp+0x5a>
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	6a1b      	ldr	r3, [r3, #32]
 800fe68:	7a5b      	ldrb	r3, [r3, #9]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d005      	beq.n	800fe7a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	6a1b      	ldr	r3, [r3, #32]
 800fe72:	7a5a      	ldrb	r2, [r3, #9]
 800fe74:	3a01      	subs	r2, #1
 800fe76:	b2d2      	uxtb	r2, r2
 800fe78:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800fe7a:	2101      	movs	r1, #1
 800fe7c:	68f8      	ldr	r0, [r7, #12]
 800fe7e:	f000 fb3b 	bl	80104f8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	7f1b      	ldrb	r3, [r3, #28]
 800fe86:	f003 0310 	and.w	r3, r3, #16
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d021      	beq.n	800fed2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d01d      	beq.n	800fed2 <poll_tcp+0xb2>
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fe9e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800fea2:	d316      	bcc.n	800fed2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800feac:	2b04      	cmp	r3, #4
 800feae:	d810      	bhi.n	800fed2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	7f1b      	ldrb	r3, [r3, #28]
 800feb4:	f023 0310 	bic.w	r3, r3, #16
 800feb8:	b2da      	uxtb	r2, r3
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d005      	beq.n	800fed2 <poll_tcp+0xb2>
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feca:	2200      	movs	r2, #0
 800fecc:	2102      	movs	r1, #2
 800fece:	68f8      	ldr	r0, [r7, #12]
 800fed0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800fed2:	2300      	movs	r3, #0
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3710      	adds	r7, #16
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	0801e43c 	.word	0x0801e43c
 800fee0:	0801e594 	.word	0x0801e594
 800fee4:	0801e480 	.word	0x0801e480

0800fee8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b086      	sub	sp, #24
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	4613      	mov	r3, r2
 800fef4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d106      	bne.n	800ff0e <sent_tcp+0x26>
 800ff00:	4b20      	ldr	r3, [pc, #128]	; (800ff84 <sent_tcp+0x9c>)
 800ff02:	f240 1293 	movw	r2, #403	; 0x193
 800ff06:	4920      	ldr	r1, [pc, #128]	; (800ff88 <sent_tcp+0xa0>)
 800ff08:	4820      	ldr	r0, [pc, #128]	; (800ff8c <sent_tcp+0xa4>)
 800ff0a:	f00c fdd3 	bl	801cab4 <iprintf>

  if (conn) {
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d032      	beq.n	800ff7a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	785b      	ldrb	r3, [r3, #1]
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d104      	bne.n	800ff26 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ff1c:	2101      	movs	r1, #1
 800ff1e:	6978      	ldr	r0, [r7, #20]
 800ff20:	f000 fdf4 	bl	8010b0c <lwip_netconn_do_writemore>
 800ff24:	e007      	b.n	800ff36 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	785b      	ldrb	r3, [r3, #1]
 800ff2a:	2b04      	cmp	r3, #4
 800ff2c:	d103      	bne.n	800ff36 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ff2e:	2101      	movs	r1, #1
 800ff30:	6978      	ldr	r0, [r7, #20]
 800ff32:	f000 fae1 	bl	80104f8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d01d      	beq.n	800ff7a <sent_tcp+0x92>
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	685b      	ldr	r3, [r3, #4]
 800ff42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ff46:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ff4a:	d316      	bcc.n	800ff7a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ff54:	2b04      	cmp	r3, #4
 800ff56:	d810      	bhi.n	800ff7a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	7f1b      	ldrb	r3, [r3, #28]
 800ff5c:	f023 0310 	bic.w	r3, r3, #16
 800ff60:	b2da      	uxtb	r2, r3
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d005      	beq.n	800ff7a <sent_tcp+0x92>
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff72:	88fa      	ldrh	r2, [r7, #6]
 800ff74:	2102      	movs	r1, #2
 800ff76:	6978      	ldr	r0, [r7, #20]
 800ff78:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ff7a:	2300      	movs	r3, #0
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3718      	adds	r7, #24
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}
 800ff84:	0801e43c 	.word	0x0801e43c
 800ff88:	0801e594 	.word	0x0801e594
 800ff8c:	0801e480 	.word	0x0801e480

0800ff90 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b088      	sub	sp, #32
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	460b      	mov	r3, r1
 800ff9a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d106      	bne.n	800ffb4 <err_tcp+0x24>
 800ffa6:	4b5f      	ldr	r3, [pc, #380]	; (8010124 <err_tcp+0x194>)
 800ffa8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800ffac:	495e      	ldr	r1, [pc, #376]	; (8010128 <err_tcp+0x198>)
 800ffae:	485f      	ldr	r0, [pc, #380]	; (801012c <err_tcp+0x19c>)
 800ffb0:	f00c fd80 	bl	801cab4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800ffb4:	f00c fb1e 	bl	801c5f4 <sys_arch_protect>
 800ffb8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800ffba:	69fb      	ldr	r3, [r7, #28]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800ffc0:	69fb      	ldr	r3, [r7, #28]
 800ffc2:	78fa      	ldrb	r2, [r7, #3]
 800ffc4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	7f1b      	ldrb	r3, [r3, #28]
 800ffca:	f043 0301 	orr.w	r3, r3, #1
 800ffce:	b2da      	uxtb	r2, r3
 800ffd0:	69fb      	ldr	r3, [r7, #28]
 800ffd2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	785b      	ldrb	r3, [r3, #1]
 800ffd8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800ffe0:	69b8      	ldr	r0, [r7, #24]
 800ffe2:	f00c fb15 	bl	801c610 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d005      	beq.n	800fffa <err_tcp+0x6a>
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff2:	2200      	movs	r2, #0
 800fff4:	2104      	movs	r1, #4
 800fff6:	69f8      	ldr	r0, [r7, #28]
 800fff8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fffa:	69fb      	ldr	r3, [r7, #28]
 800fffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d005      	beq.n	801000e <err_tcp+0x7e>
 8010002:	69fb      	ldr	r3, [r7, #28]
 8010004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010006:	2200      	movs	r2, #0
 8010008:	2100      	movs	r1, #0
 801000a:	69f8      	ldr	r0, [r7, #28]
 801000c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801000e:	69fb      	ldr	r3, [r7, #28]
 8010010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010012:	2b00      	cmp	r3, #0
 8010014:	d005      	beq.n	8010022 <err_tcp+0x92>
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001a:	2200      	movs	r2, #0
 801001c:	2102      	movs	r1, #2
 801001e:	69f8      	ldr	r0, [r7, #28]
 8010020:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8010022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010026:	4618      	mov	r0, r3
 8010028:	f7ff fd86 	bl	800fb38 <lwip_netconn_err_to_msg>
 801002c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801002e:	69fb      	ldr	r3, [r7, #28]
 8010030:	3310      	adds	r3, #16
 8010032:	4618      	mov	r0, r3
 8010034:	f00c f9c3 	bl	801c3be <sys_mbox_valid>
 8010038:	4603      	mov	r3, r0
 801003a:	2b00      	cmp	r3, #0
 801003c:	d005      	beq.n	801004a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 801003e:	69fb      	ldr	r3, [r7, #28]
 8010040:	3310      	adds	r3, #16
 8010042:	6939      	ldr	r1, [r7, #16]
 8010044:	4618      	mov	r0, r3
 8010046:	f00c f945 	bl	801c2d4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801004a:	69fb      	ldr	r3, [r7, #28]
 801004c:	3314      	adds	r3, #20
 801004e:	4618      	mov	r0, r3
 8010050:	f00c f9b5 	bl	801c3be <sys_mbox_valid>
 8010054:	4603      	mov	r3, r0
 8010056:	2b00      	cmp	r3, #0
 8010058:	d005      	beq.n	8010066 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	3314      	adds	r3, #20
 801005e:	6939      	ldr	r1, [r7, #16]
 8010060:	4618      	mov	r0, r3
 8010062:	f00c f937 	bl	801c2d4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8010066:	7dfb      	ldrb	r3, [r7, #23]
 8010068:	2b01      	cmp	r3, #1
 801006a:	d005      	beq.n	8010078 <err_tcp+0xe8>
 801006c:	7dfb      	ldrb	r3, [r7, #23]
 801006e:	2b04      	cmp	r3, #4
 8010070:	d002      	beq.n	8010078 <err_tcp+0xe8>
 8010072:	7dfb      	ldrb	r3, [r7, #23]
 8010074:	2b03      	cmp	r3, #3
 8010076:	d143      	bne.n	8010100 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8010078:	69fb      	ldr	r3, [r7, #28]
 801007a:	7f1b      	ldrb	r3, [r3, #28]
 801007c:	f003 0304 	and.w	r3, r3, #4
 8010080:	2b00      	cmp	r3, #0
 8010082:	bf14      	ite	ne
 8010084:	2301      	movne	r3, #1
 8010086:	2300      	moveq	r3, #0
 8010088:	b2db      	uxtb	r3, r3
 801008a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	7f1b      	ldrb	r3, [r3, #28]
 8010090:	f023 0304 	bic.w	r3, r3, #4
 8010094:	b2da      	uxtb	r2, r3
 8010096:	69fb      	ldr	r3, [r7, #28]
 8010098:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d13b      	bne.n	8010118 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	6a1b      	ldr	r3, [r3, #32]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d106      	bne.n	80100b6 <err_tcp+0x126>
 80100a8:	4b1e      	ldr	r3, [pc, #120]	; (8010124 <err_tcp+0x194>)
 80100aa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80100ae:	4920      	ldr	r1, [pc, #128]	; (8010130 <err_tcp+0x1a0>)
 80100b0:	481e      	ldr	r0, [pc, #120]	; (801012c <err_tcp+0x19c>)
 80100b2:	f00c fcff 	bl	801cab4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80100b6:	7dfb      	ldrb	r3, [r7, #23]
 80100b8:	2b04      	cmp	r3, #4
 80100ba:	d104      	bne.n	80100c6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80100bc:	69fb      	ldr	r3, [r7, #28]
 80100be:	6a1b      	ldr	r3, [r3, #32]
 80100c0:	2200      	movs	r2, #0
 80100c2:	711a      	strb	r2, [r3, #4]
 80100c4:	e003      	b.n	80100ce <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80100c6:	69fb      	ldr	r3, [r7, #28]
 80100c8:	6a1b      	ldr	r3, [r3, #32]
 80100ca:	78fa      	ldrb	r2, [r7, #3]
 80100cc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	6a1b      	ldr	r3, [r3, #32]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	330c      	adds	r3, #12
 80100d6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80100d8:	68b8      	ldr	r0, [r7, #8]
 80100da:	f00c fa01 	bl	801c4e0 <sys_sem_valid>
 80100de:	4603      	mov	r3, r0
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d106      	bne.n	80100f2 <err_tcp+0x162>
 80100e4:	4b0f      	ldr	r3, [pc, #60]	; (8010124 <err_tcp+0x194>)
 80100e6:	f240 12ef 	movw	r2, #495	; 0x1ef
 80100ea:	4912      	ldr	r1, [pc, #72]	; (8010134 <err_tcp+0x1a4>)
 80100ec:	480f      	ldr	r0, [pc, #60]	; (801012c <err_tcp+0x19c>)
 80100ee:	f00c fce1 	bl	801cab4 <iprintf>
      conn->current_msg = NULL;
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	2200      	movs	r2, #0
 80100f6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80100f8:	68b8      	ldr	r0, [r7, #8]
 80100fa:	f00c f9d7 	bl	801c4ac <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80100fe:	e00b      	b.n	8010118 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	6a1b      	ldr	r3, [r3, #32]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d008      	beq.n	801011a <err_tcp+0x18a>
 8010108:	4b06      	ldr	r3, [pc, #24]	; (8010124 <err_tcp+0x194>)
 801010a:	f240 12f7 	movw	r2, #503	; 0x1f7
 801010e:	490a      	ldr	r1, [pc, #40]	; (8010138 <err_tcp+0x1a8>)
 8010110:	4806      	ldr	r0, [pc, #24]	; (801012c <err_tcp+0x19c>)
 8010112:	f00c fccf 	bl	801cab4 <iprintf>
  }
}
 8010116:	e000      	b.n	801011a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8010118:	bf00      	nop
}
 801011a:	bf00      	nop
 801011c:	3720      	adds	r7, #32
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	0801e43c 	.word	0x0801e43c
 8010128:	0801e594 	.word	0x0801e594
 801012c:	0801e480 	.word	0x0801e480
 8010130:	0801e5a4 	.word	0x0801e5a4
 8010134:	0801e5c0 	.word	0x0801e5c0
 8010138:	0801e5dc 	.word	0x0801e5dc

0801013c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b084      	sub	sp, #16
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801014a:	6879      	ldr	r1, [r7, #4]
 801014c:	68f8      	ldr	r0, [r7, #12]
 801014e:	f004 fac1 	bl	80146d4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8010152:	490a      	ldr	r1, [pc, #40]	; (801017c <setup_tcp+0x40>)
 8010154:	68f8      	ldr	r0, [r7, #12]
 8010156:	f004 facf 	bl	80146f8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801015a:	4909      	ldr	r1, [pc, #36]	; (8010180 <setup_tcp+0x44>)
 801015c:	68f8      	ldr	r0, [r7, #12]
 801015e:	f004 faed 	bl	801473c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8010162:	2202      	movs	r2, #2
 8010164:	4907      	ldr	r1, [pc, #28]	; (8010184 <setup_tcp+0x48>)
 8010166:	68f8      	ldr	r0, [r7, #12]
 8010168:	f004 fb44 	bl	80147f4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 801016c:	4906      	ldr	r1, [pc, #24]	; (8010188 <setup_tcp+0x4c>)
 801016e:	68f8      	ldr	r0, [r7, #12]
 8010170:	f004 fb06 	bl	8014780 <tcp_err>
}
 8010174:	bf00      	nop
 8010176:	3710      	adds	r7, #16
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	0800fd15 	.word	0x0800fd15
 8010180:	0800fee9 	.word	0x0800fee9
 8010184:	0800fe21 	.word	0x0800fe21
 8010188:	0800ff91 	.word	0x0800ff91

0801018c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 801018c:	b590      	push	{r4, r7, lr}
 801018e:	b085      	sub	sp, #20
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8010194:	2300      	movs	r3, #0
 8010196:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d006      	beq.n	80101b0 <pcb_new+0x24>
 80101a2:	4b2b      	ldr	r3, [pc, #172]	; (8010250 <pcb_new+0xc4>)
 80101a4:	f240 2265 	movw	r2, #613	; 0x265
 80101a8:	492a      	ldr	r1, [pc, #168]	; (8010254 <pcb_new+0xc8>)
 80101aa:	482b      	ldr	r0, [pc, #172]	; (8010258 <pcb_new+0xcc>)
 80101ac:	f00c fc82 	bl	801cab4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101ba:	2b10      	cmp	r3, #16
 80101bc:	d022      	beq.n	8010204 <pcb_new+0x78>
 80101be:	2b20      	cmp	r3, #32
 80101c0:	d133      	bne.n	801022a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681c      	ldr	r4, [r3, #0]
 80101c6:	7bfb      	ldrb	r3, [r7, #15]
 80101c8:	4618      	mov	r0, r3
 80101ca:	f009 fd4c 	bl	8019c66 <udp_new_ip_type>
 80101ce:	4603      	mov	r3, r0
 80101d0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d02a      	beq.n	8010232 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	2b22      	cmp	r3, #34	; 0x22
 80101e4:	d104      	bne.n	80101f0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	2201      	movs	r2, #1
 80101ee:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	6858      	ldr	r0, [r3, #4]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	461a      	mov	r2, r3
 80101fc:	4917      	ldr	r1, [pc, #92]	; (801025c <pcb_new+0xd0>)
 80101fe:	f009 fcb9 	bl	8019b74 <udp_recv>
      }
      break;
 8010202:	e016      	b.n	8010232 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681c      	ldr	r4, [r3, #0]
 8010208:	7bfb      	ldrb	r3, [r7, #15]
 801020a:	4618      	mov	r0, r3
 801020c:	f004 fa54 	bl	80146b8 <tcp_new_ip_type>
 8010210:	4603      	mov	r3, r0
 8010212:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d00b      	beq.n	8010236 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	4618      	mov	r0, r3
 8010224:	f7ff ff8a 	bl	801013c <setup_tcp>
      }
      break;
 8010228:	e005      	b.n	8010236 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	22fa      	movs	r2, #250	; 0xfa
 801022e:	711a      	strb	r2, [r3, #4]
      return;
 8010230:	e00a      	b.n	8010248 <pcb_new+0xbc>
      break;
 8010232:	bf00      	nop
 8010234:	e000      	b.n	8010238 <pcb_new+0xac>
      break;
 8010236:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d102      	bne.n	8010248 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	22ff      	movs	r2, #255	; 0xff
 8010246:	711a      	strb	r2, [r3, #4]
  }
}
 8010248:	3714      	adds	r7, #20
 801024a:	46bd      	mov	sp, r7
 801024c:	bd90      	pop	{r4, r7, pc}
 801024e:	bf00      	nop
 8010250:	0801e43c 	.word	0x0801e43c
 8010254:	0801e620 	.word	0x0801e620
 8010258:	0801e480 	.word	0x0801e480
 801025c:	0800fc19 	.word	0x0800fc19

08010260 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b084      	sub	sp, #16
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	2200      	movs	r2, #0
 8010270:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	685b      	ldr	r3, [r3, #4]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d102      	bne.n	8010282 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 801027c:	68f8      	ldr	r0, [r7, #12]
 801027e:	f7ff ff85 	bl	801018c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8010282:	bf00      	nop
 8010284:	3710      	adds	r7, #16
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
	...

0801028c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b086      	sub	sp, #24
 8010290:	af00      	add	r7, sp, #0
 8010292:	4603      	mov	r3, r0
 8010294:	6039      	str	r1, [r7, #0]
 8010296:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8010298:	2300      	movs	r3, #0
 801029a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 801029c:	2007      	movs	r0, #7
 801029e:	f001 fdc3 	bl	8011e28 <memp_malloc>
 80102a2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d101      	bne.n	80102ae <netconn_alloc+0x22>
    return NULL;
 80102aa:	2300      	movs	r3, #0
 80102ac:	e052      	b.n	8010354 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2200      	movs	r2, #0
 80102b2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	79fa      	ldrb	r2, [r7, #7]
 80102b8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	2200      	movs	r2, #0
 80102be:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80102c0:	79fb      	ldrb	r3, [r7, #7]
 80102c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80102c6:	2b10      	cmp	r3, #16
 80102c8:	d004      	beq.n	80102d4 <netconn_alloc+0x48>
 80102ca:	2b20      	cmp	r3, #32
 80102cc:	d105      	bne.n	80102da <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80102ce:	2306      	movs	r3, #6
 80102d0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80102d2:	e00a      	b.n	80102ea <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80102d4:	2306      	movs	r3, #6
 80102d6:	617b      	str	r3, [r7, #20]
      break;
 80102d8:	e007      	b.n	80102ea <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80102da:	4b20      	ldr	r3, [pc, #128]	; (801035c <netconn_alloc+0xd0>)
 80102dc:	f240 22e5 	movw	r2, #741	; 0x2e5
 80102e0:	491f      	ldr	r1, [pc, #124]	; (8010360 <netconn_alloc+0xd4>)
 80102e2:	4820      	ldr	r0, [pc, #128]	; (8010364 <netconn_alloc+0xd8>)
 80102e4:	f00c fbe6 	bl	801cab4 <iprintf>
      goto free_and_return;
 80102e8:	e02f      	b.n	801034a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	3310      	adds	r3, #16
 80102ee:	6979      	ldr	r1, [r7, #20]
 80102f0:	4618      	mov	r0, r3
 80102f2:	f00b ffbb 	bl	801c26c <sys_mbox_new>
 80102f6:	4603      	mov	r3, r0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d125      	bne.n	8010348 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	330c      	adds	r3, #12
 8010300:	2100      	movs	r1, #0
 8010302:	4618      	mov	r0, r3
 8010304:	f00c f879 	bl	801c3fa <sys_sem_new>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d005      	beq.n	801031a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	3310      	adds	r3, #16
 8010312:	4618      	mov	r0, r3
 8010314:	f00b ffcc 	bl	801c2b0 <sys_mbox_free>
    goto free_and_return;
 8010318:	e017      	b.n	801034a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	3314      	adds	r3, #20
 801031e:	4618      	mov	r0, r3
 8010320:	f00c f85e 	bl	801c3e0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2200      	movs	r2, #0
 8010328:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	f04f 32ff 	mov.w	r2, #4294967295
 8010330:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	683a      	ldr	r2, [r7, #0]
 8010336:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2200      	movs	r2, #0
 801033c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	7cfa      	ldrb	r2, [r7, #19]
 8010342:	771a      	strb	r2, [r3, #28]
  return conn;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	e005      	b.n	8010354 <netconn_alloc+0xc8>
    goto free_and_return;
 8010348:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801034a:	68f9      	ldr	r1, [r7, #12]
 801034c:	2007      	movs	r0, #7
 801034e:	f001 fdbd 	bl	8011ecc <memp_free>
  return NULL;
 8010352:	2300      	movs	r3, #0
}
 8010354:	4618      	mov	r0, r3
 8010356:	3718      	adds	r7, #24
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	0801e43c 	.word	0x0801e43c
 8010360:	0801e640 	.word	0x0801e640
 8010364:	0801e480 	.word	0x0801e480

08010368 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d006      	beq.n	8010386 <netconn_free+0x1e>
 8010378:	4b1b      	ldr	r3, [pc, #108]	; (80103e8 <netconn_free+0x80>)
 801037a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801037e:	491b      	ldr	r1, [pc, #108]	; (80103ec <netconn_free+0x84>)
 8010380:	481b      	ldr	r0, [pc, #108]	; (80103f0 <netconn_free+0x88>)
 8010382:	f00c fb97 	bl	801cab4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	3310      	adds	r3, #16
 801038a:	4618      	mov	r0, r3
 801038c:	f00c f817 	bl	801c3be <sys_mbox_valid>
 8010390:	4603      	mov	r3, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	d006      	beq.n	80103a4 <netconn_free+0x3c>
 8010396:	4b14      	ldr	r3, [pc, #80]	; (80103e8 <netconn_free+0x80>)
 8010398:	f240 3223 	movw	r2, #803	; 0x323
 801039c:	4915      	ldr	r1, [pc, #84]	; (80103f4 <netconn_free+0x8c>)
 801039e:	4814      	ldr	r0, [pc, #80]	; (80103f0 <netconn_free+0x88>)
 80103a0:	f00c fb88 	bl	801cab4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	3314      	adds	r3, #20
 80103a8:	4618      	mov	r0, r3
 80103aa:	f00c f808 	bl	801c3be <sys_mbox_valid>
 80103ae:	4603      	mov	r3, r0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d006      	beq.n	80103c2 <netconn_free+0x5a>
 80103b4:	4b0c      	ldr	r3, [pc, #48]	; (80103e8 <netconn_free+0x80>)
 80103b6:	f240 3226 	movw	r2, #806	; 0x326
 80103ba:	490f      	ldr	r1, [pc, #60]	; (80103f8 <netconn_free+0x90>)
 80103bc:	480c      	ldr	r0, [pc, #48]	; (80103f0 <netconn_free+0x88>)
 80103be:	f00c fb79 	bl	801cab4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	330c      	adds	r3, #12
 80103c6:	4618      	mov	r0, r3
 80103c8:	f00c f87d 	bl	801c4c6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	330c      	adds	r3, #12
 80103d0:	4618      	mov	r0, r3
 80103d2:	f00c f896 	bl	801c502 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80103d6:	6879      	ldr	r1, [r7, #4]
 80103d8:	2007      	movs	r0, #7
 80103da:	f001 fd77 	bl	8011ecc <memp_free>
}
 80103de:	bf00      	nop
 80103e0:	3708      	adds	r7, #8
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
 80103e6:	bf00      	nop
 80103e8:	0801e43c 	.word	0x0801e43c
 80103ec:	0801e668 	.word	0x0801e668
 80103f0:	0801e480 	.word	0x0801e480
 80103f4:	0801e698 	.word	0x0801e698
 80103f8:	0801e6d4 	.word	0x0801e6d4

080103fc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b086      	sub	sp, #24
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	3310      	adds	r3, #16
 8010408:	4618      	mov	r0, r3
 801040a:	f00b ffd8 	bl	801c3be <sys_mbox_valid>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d02f      	beq.n	8010474 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010414:	e018      	b.n	8010448 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801041e:	2b10      	cmp	r3, #16
 8010420:	d10e      	bne.n	8010440 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	f107 020f 	add.w	r2, r7, #15
 8010428:	4611      	mov	r1, r2
 801042a:	4618      	mov	r0, r3
 801042c:	f7ff fbba 	bl	800fba4 <lwip_netconn_is_err_msg>
 8010430:	4603      	mov	r3, r0
 8010432:	2b00      	cmp	r3, #0
 8010434:	d108      	bne.n	8010448 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	4618      	mov	r0, r3
 801043a:	f002 fb87 	bl	8012b4c <pbuf_free>
 801043e:	e003      	b.n	8010448 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	4618      	mov	r0, r3
 8010444:	f000 fdce 	bl	8010fe4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	3310      	adds	r3, #16
 801044c:	f107 0210 	add.w	r2, r7, #16
 8010450:	4611      	mov	r1, r2
 8010452:	4618      	mov	r0, r3
 8010454:	f00b ff97 	bl	801c386 <sys_arch_mbox_tryfetch>
 8010458:	4603      	mov	r3, r0
 801045a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801045e:	d1da      	bne.n	8010416 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	3310      	adds	r3, #16
 8010464:	4618      	mov	r0, r3
 8010466:	f00b ff23 	bl	801c2b0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	3310      	adds	r3, #16
 801046e:	4618      	mov	r0, r3
 8010470:	f00b ffb6 	bl	801c3e0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	3314      	adds	r3, #20
 8010478:	4618      	mov	r0, r3
 801047a:	f00b ffa0 	bl	801c3be <sys_mbox_valid>
 801047e:	4603      	mov	r3, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d034      	beq.n	80104ee <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010484:	e01d      	b.n	80104c2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	f107 020e 	add.w	r2, r7, #14
 801048c:	4611      	mov	r1, r2
 801048e:	4618      	mov	r0, r3
 8010490:	f7ff fb88 	bl	800fba4 <lwip_netconn_is_err_msg>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d113      	bne.n	80104c2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 801049e:	6978      	ldr	r0, [r7, #20]
 80104a0:	f7ff ffac 	bl	80103fc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d007      	beq.n	80104bc <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	4618      	mov	r0, r3
 80104b2:	f003 f94b 	bl	801374c <tcp_abort>
            newconn->pcb.tcp = NULL;
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	2200      	movs	r2, #0
 80104ba:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80104bc:	6978      	ldr	r0, [r7, #20]
 80104be:	f7ff ff53 	bl	8010368 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	3314      	adds	r3, #20
 80104c6:	f107 0210 	add.w	r2, r7, #16
 80104ca:	4611      	mov	r1, r2
 80104cc:	4618      	mov	r0, r3
 80104ce:	f00b ff5a 	bl	801c386 <sys_arch_mbox_tryfetch>
 80104d2:	4603      	mov	r3, r0
 80104d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104d8:	d1d5      	bne.n	8010486 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	3314      	adds	r3, #20
 80104de:	4618      	mov	r0, r3
 80104e0:	f00b fee6 	bl	801c2b0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	3314      	adds	r3, #20
 80104e8:	4618      	mov	r0, r3
 80104ea:	f00b ff79 	bl	801c3e0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80104ee:	bf00      	nop
 80104f0:	3718      	adds	r7, #24
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
	...

080104f8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b086      	sub	sp, #24
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	460b      	mov	r3, r1
 8010502:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8010504:	2300      	movs	r3, #0
 8010506:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d106      	bne.n	801051c <lwip_netconn_do_close_internal+0x24>
 801050e:	4b87      	ldr	r3, [pc, #540]	; (801072c <lwip_netconn_do_close_internal+0x234>)
 8010510:	f240 32a2 	movw	r2, #930	; 0x3a2
 8010514:	4986      	ldr	r1, [pc, #536]	; (8010730 <lwip_netconn_do_close_internal+0x238>)
 8010516:	4887      	ldr	r0, [pc, #540]	; (8010734 <lwip_netconn_do_close_internal+0x23c>)
 8010518:	f00c facc 	bl	801cab4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	781b      	ldrb	r3, [r3, #0]
 8010520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010524:	2b10      	cmp	r3, #16
 8010526:	d006      	beq.n	8010536 <lwip_netconn_do_close_internal+0x3e>
 8010528:	4b80      	ldr	r3, [pc, #512]	; (801072c <lwip_netconn_do_close_internal+0x234>)
 801052a:	f240 32a3 	movw	r2, #931	; 0x3a3
 801052e:	4982      	ldr	r1, [pc, #520]	; (8010738 <lwip_netconn_do_close_internal+0x240>)
 8010530:	4880      	ldr	r0, [pc, #512]	; (8010734 <lwip_netconn_do_close_internal+0x23c>)
 8010532:	f00c fabf 	bl	801cab4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	785b      	ldrb	r3, [r3, #1]
 801053a:	2b04      	cmp	r3, #4
 801053c:	d006      	beq.n	801054c <lwip_netconn_do_close_internal+0x54>
 801053e:	4b7b      	ldr	r3, [pc, #492]	; (801072c <lwip_netconn_do_close_internal+0x234>)
 8010540:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8010544:	497d      	ldr	r1, [pc, #500]	; (801073c <lwip_netconn_do_close_internal+0x244>)
 8010546:	487b      	ldr	r0, [pc, #492]	; (8010734 <lwip_netconn_do_close_internal+0x23c>)
 8010548:	f00c fab4 	bl	801cab4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d106      	bne.n	8010562 <lwip_netconn_do_close_internal+0x6a>
 8010554:	4b75      	ldr	r3, [pc, #468]	; (801072c <lwip_netconn_do_close_internal+0x234>)
 8010556:	f240 32a5 	movw	r2, #933	; 0x3a5
 801055a:	4979      	ldr	r1, [pc, #484]	; (8010740 <lwip_netconn_do_close_internal+0x248>)
 801055c:	4875      	ldr	r0, [pc, #468]	; (8010734 <lwip_netconn_do_close_internal+0x23c>)
 801055e:	f00c faa9 	bl	801cab4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6a1b      	ldr	r3, [r3, #32]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d106      	bne.n	8010578 <lwip_netconn_do_close_internal+0x80>
 801056a:	4b70      	ldr	r3, [pc, #448]	; (801072c <lwip_netconn_do_close_internal+0x234>)
 801056c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010570:	4974      	ldr	r1, [pc, #464]	; (8010744 <lwip_netconn_do_close_internal+0x24c>)
 8010572:	4870      	ldr	r0, [pc, #448]	; (8010734 <lwip_netconn_do_close_internal+0x23c>)
 8010574:	f00c fa9e 	bl	801cab4 <iprintf>

  tpcb = conn->pcb.tcp;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6a1b      	ldr	r3, [r3, #32]
 8010582:	7a1b      	ldrb	r3, [r3, #8]
 8010584:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8010586:	7bfb      	ldrb	r3, [r7, #15]
 8010588:	f003 0301 	and.w	r3, r3, #1
 801058c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 801058e:	7bfb      	ldrb	r3, [r7, #15]
 8010590:	f003 0302 	and.w	r3, r3, #2
 8010594:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8010596:	7bfb      	ldrb	r3, [r7, #15]
 8010598:	2b03      	cmp	r3, #3
 801059a:	d102      	bne.n	80105a2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 801059c:	2301      	movs	r3, #1
 801059e:	75bb      	strb	r3, [r7, #22]
 80105a0:	e01f      	b.n	80105e2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80105a2:	7bbb      	ldrb	r3, [r7, #14]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00e      	beq.n	80105c6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80105ac:	2b05      	cmp	r3, #5
 80105ae:	d007      	beq.n	80105c0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80105b4:	2b06      	cmp	r3, #6
 80105b6:	d003      	beq.n	80105c0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80105bc:	2b08      	cmp	r3, #8
 80105be:	d102      	bne.n	80105c6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80105c0:	2301      	movs	r3, #1
 80105c2:	75bb      	strb	r3, [r7, #22]
 80105c4:	e00d      	b.n	80105e2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80105c6:	7b7b      	ldrb	r3, [r7, #13]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d008      	beq.n	80105de <lwip_netconn_do_close_internal+0xe6>
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	8b5b      	ldrh	r3, [r3, #26]
 80105d0:	f003 0310 	and.w	r3, r3, #16
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d002      	beq.n	80105de <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80105d8:	2301      	movs	r3, #1
 80105da:	75bb      	strb	r3, [r7, #22]
 80105dc:	e001      	b.n	80105e2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80105de:	2300      	movs	r3, #0
 80105e0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80105e2:	7dbb      	ldrb	r3, [r7, #22]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d003      	beq.n	80105f0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80105e8:	2100      	movs	r1, #0
 80105ea:	6938      	ldr	r0, [r7, #16]
 80105ec:	f004 f872 	bl	80146d4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	7d1b      	ldrb	r3, [r3, #20]
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	d104      	bne.n	8010602 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80105f8:	2100      	movs	r1, #0
 80105fa:	6938      	ldr	r0, [r7, #16]
 80105fc:	f004 f8e2 	bl	80147c4 <tcp_accept>
 8010600:	e01d      	b.n	801063e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8010602:	7bbb      	ldrb	r3, [r7, #14]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d007      	beq.n	8010618 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8010608:	2100      	movs	r1, #0
 801060a:	6938      	ldr	r0, [r7, #16]
 801060c:	f004 f874 	bl	80146f8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8010610:	2100      	movs	r1, #0
 8010612:	6938      	ldr	r0, [r7, #16]
 8010614:	f004 f8d6 	bl	80147c4 <tcp_accept>
    }
    if (shut_tx) {
 8010618:	7b7b      	ldrb	r3, [r7, #13]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d003      	beq.n	8010626 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801061e:	2100      	movs	r1, #0
 8010620:	6938      	ldr	r0, [r7, #16]
 8010622:	f004 f88b 	bl	801473c <tcp_sent>
    }
    if (shut_close) {
 8010626:	7dbb      	ldrb	r3, [r7, #22]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d008      	beq.n	801063e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 801062c:	2200      	movs	r2, #0
 801062e:	2100      	movs	r1, #0
 8010630:	6938      	ldr	r0, [r7, #16]
 8010632:	f004 f8df 	bl	80147f4 <tcp_poll>
      tcp_err(tpcb, NULL);
 8010636:	2100      	movs	r1, #0
 8010638:	6938      	ldr	r0, [r7, #16]
 801063a:	f004 f8a1 	bl	8014780 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 801063e:	7dbb      	ldrb	r3, [r7, #22]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d005      	beq.n	8010650 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8010644:	6938      	ldr	r0, [r7, #16]
 8010646:	f002 ff3b 	bl	80134c0 <tcp_close>
 801064a:	4603      	mov	r3, r0
 801064c:	75fb      	strb	r3, [r7, #23]
 801064e:	e007      	b.n	8010660 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8010650:	7bbb      	ldrb	r3, [r7, #14]
 8010652:	7b7a      	ldrb	r2, [r7, #13]
 8010654:	4619      	mov	r1, r3
 8010656:	6938      	ldr	r0, [r7, #16]
 8010658:	f002 ff5e 	bl	8013518 <tcp_shutdown>
 801065c:	4603      	mov	r3, r0
 801065e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8010660:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d102      	bne.n	801066e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8010668:	2301      	movs	r3, #1
 801066a:	757b      	strb	r3, [r7, #21]
 801066c:	e016      	b.n	801069c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 801066e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010676:	d10f      	bne.n	8010698 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6a1b      	ldr	r3, [r3, #32]
 801067c:	7a5b      	ldrb	r3, [r3, #9]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d10c      	bne.n	801069c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8010682:	2301      	movs	r3, #1
 8010684:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8010686:	7dbb      	ldrb	r3, [r7, #22]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d007      	beq.n	801069c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 801068c:	6938      	ldr	r0, [r7, #16]
 801068e:	f003 f85d 	bl	801374c <tcp_abort>
          err = ERR_OK;
 8010692:	2300      	movs	r3, #0
 8010694:	75fb      	strb	r3, [r7, #23]
 8010696:	e001      	b.n	801069c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8010698:	2301      	movs	r3, #1
 801069a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 801069c:	7d7b      	ldrb	r3, [r7, #21]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d052      	beq.n	8010748 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6a1b      	ldr	r3, [r3, #32]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	330c      	adds	r3, #12
 80106aa:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6a1b      	ldr	r3, [r3, #32]
 80106b0:	7dfa      	ldrb	r2, [r7, #23]
 80106b2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2200      	movs	r2, #0
 80106b8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2200      	movs	r2, #0
 80106be:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80106c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d129      	bne.n	801071c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80106c8:	7dbb      	ldrb	r3, [r7, #22]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d00c      	beq.n	80106e8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2200      	movs	r2, #0
 80106d2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d005      	beq.n	80106e8 <lwip_netconn_do_close_internal+0x1f0>
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e0:	2200      	movs	r2, #0
 80106e2:	2104      	movs	r1, #4
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	4798      	blx	r3
      }
      if (shut_rx) {
 80106e8:	7bbb      	ldrb	r3, [r7, #14]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d009      	beq.n	8010702 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d005      	beq.n	8010702 <lwip_netconn_do_close_internal+0x20a>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106fa:	2200      	movs	r2, #0
 80106fc:	2100      	movs	r1, #0
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	4798      	blx	r3
      }
      if (shut_tx) {
 8010702:	7b7b      	ldrb	r3, [r7, #13]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d009      	beq.n	801071c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801070c:	2b00      	cmp	r3, #0
 801070e:	d005      	beq.n	801071c <lwip_netconn_do_close_internal+0x224>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010714:	2200      	movs	r2, #0
 8010716:	2102      	movs	r1, #2
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801071c:	78fb      	ldrb	r3, [r7, #3]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d002      	beq.n	8010728 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8010722:	68b8      	ldr	r0, [r7, #8]
 8010724:	f00b fec2 	bl	801c4ac <sys_sem_signal>
    }
    return ERR_OK;
 8010728:	2300      	movs	r3, #0
 801072a:	e03c      	b.n	80107a6 <lwip_netconn_do_close_internal+0x2ae>
 801072c:	0801e43c 	.word	0x0801e43c
 8010730:	0801e710 	.word	0x0801e710
 8010734:	0801e480 	.word	0x0801e480
 8010738:	0801e720 	.word	0x0801e720
 801073c:	0801e740 	.word	0x0801e740
 8010740:	0801e764 	.word	0x0801e764
 8010744:	0801e5a4 	.word	0x0801e5a4
  }
  if (!close_finished) {
 8010748:	7d7b      	ldrb	r3, [r7, #21]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d11e      	bne.n	801078c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	7d1b      	ldrb	r3, [r3, #20]
 8010752:	2b01      	cmp	r3, #1
 8010754:	d106      	bne.n	8010764 <lwip_netconn_do_close_internal+0x26c>
 8010756:	4b16      	ldr	r3, [pc, #88]	; (80107b0 <lwip_netconn_do_close_internal+0x2b8>)
 8010758:	f240 4241 	movw	r2, #1089	; 0x441
 801075c:	4915      	ldr	r1, [pc, #84]	; (80107b4 <lwip_netconn_do_close_internal+0x2bc>)
 801075e:	4816      	ldr	r0, [pc, #88]	; (80107b8 <lwip_netconn_do_close_internal+0x2c0>)
 8010760:	f00c f9a8 	bl	801cab4 <iprintf>
    if (shut_tx) {
 8010764:	7b7b      	ldrb	r3, [r7, #13]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d003      	beq.n	8010772 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801076a:	4914      	ldr	r1, [pc, #80]	; (80107bc <lwip_netconn_do_close_internal+0x2c4>)
 801076c:	6938      	ldr	r0, [r7, #16]
 801076e:	f003 ffe5 	bl	801473c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8010772:	2201      	movs	r2, #1
 8010774:	4912      	ldr	r1, [pc, #72]	; (80107c0 <lwip_netconn_do_close_internal+0x2c8>)
 8010776:	6938      	ldr	r0, [r7, #16]
 8010778:	f004 f83c 	bl	80147f4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 801077c:	4911      	ldr	r1, [pc, #68]	; (80107c4 <lwip_netconn_do_close_internal+0x2cc>)
 801077e:	6938      	ldr	r0, [r7, #16]
 8010780:	f003 fffe 	bl	8014780 <tcp_err>
    tcp_arg(tpcb, conn);
 8010784:	6879      	ldr	r1, [r7, #4]
 8010786:	6938      	ldr	r0, [r7, #16]
 8010788:	f003 ffa4 	bl	80146d4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 801078c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d106      	bne.n	80107a2 <lwip_netconn_do_close_internal+0x2aa>
 8010794:	4b06      	ldr	r3, [pc, #24]	; (80107b0 <lwip_netconn_do_close_internal+0x2b8>)
 8010796:	f240 424d 	movw	r2, #1101	; 0x44d
 801079a:	490b      	ldr	r1, [pc, #44]	; (80107c8 <lwip_netconn_do_close_internal+0x2d0>)
 801079c:	4806      	ldr	r0, [pc, #24]	; (80107b8 <lwip_netconn_do_close_internal+0x2c0>)
 801079e:	f00c f989 	bl	801cab4 <iprintf>
  return err;
 80107a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	3718      	adds	r7, #24
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}
 80107ae:	bf00      	nop
 80107b0:	0801e43c 	.word	0x0801e43c
 80107b4:	0801e778 	.word	0x0801e778
 80107b8:	0801e480 	.word	0x0801e480
 80107bc:	0800fee9 	.word	0x0800fee9
 80107c0:	0800fe21 	.word	0x0800fe21
 80107c4:	0800ff91 	.word	0x0800ff91
 80107c8:	0801e79c 	.word	0x0801e79c

080107cc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	785b      	ldrb	r3, [r3, #1]
 80107de:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80107e0:	7afb      	ldrb	r3, [r7, #11]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d00d      	beq.n	8010802 <lwip_netconn_do_delconn+0x36>
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80107f0:	2b10      	cmp	r3, #16
 80107f2:	d006      	beq.n	8010802 <lwip_netconn_do_delconn+0x36>
 80107f4:	4b60      	ldr	r3, [pc, #384]	; (8010978 <lwip_netconn_do_delconn+0x1ac>)
 80107f6:	f240 425e 	movw	r2, #1118	; 0x45e
 80107fa:	4960      	ldr	r1, [pc, #384]	; (801097c <lwip_netconn_do_delconn+0x1b0>)
 80107fc:	4860      	ldr	r0, [pc, #384]	; (8010980 <lwip_netconn_do_delconn+0x1b4>)
 80107fe:	f00c f959 	bl	801cab4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8010802:	7afb      	ldrb	r3, [r7, #11]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d005      	beq.n	8010814 <lwip_netconn_do_delconn+0x48>
 8010808:	7afb      	ldrb	r3, [r7, #11]
 801080a:	2b02      	cmp	r3, #2
 801080c:	d002      	beq.n	8010814 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801080e:	7afb      	ldrb	r3, [r7, #11]
 8010810:	2b03      	cmp	r3, #3
 8010812:	d109      	bne.n	8010828 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8010814:	7afb      	ldrb	r3, [r7, #11]
 8010816:	2b03      	cmp	r3, #3
 8010818:	d10a      	bne.n	8010830 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	7f1b      	ldrb	r3, [r3, #28]
 8010820:	f003 0304 	and.w	r3, r3, #4
 8010824:	2b00      	cmp	r3, #0
 8010826:	d103      	bne.n	8010830 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	22fb      	movs	r2, #251	; 0xfb
 801082c:	711a      	strb	r2, [r3, #4]
 801082e:	e097      	b.n	8010960 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8010830:	7afb      	ldrb	r3, [r7, #11]
 8010832:	2b03      	cmp	r3, #3
 8010834:	d10d      	bne.n	8010852 <lwip_netconn_do_delconn+0x86>
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	7f1b      	ldrb	r3, [r3, #28]
 801083c:	f003 0304 	and.w	r3, r3, #4
 8010840:	2b00      	cmp	r3, #0
 8010842:	d106      	bne.n	8010852 <lwip_netconn_do_delconn+0x86>
 8010844:	4b4c      	ldr	r3, [pc, #304]	; (8010978 <lwip_netconn_do_delconn+0x1ac>)
 8010846:	f240 427a 	movw	r2, #1146	; 0x47a
 801084a:	494e      	ldr	r1, [pc, #312]	; (8010984 <lwip_netconn_do_delconn+0x1b8>)
 801084c:	484c      	ldr	r0, [pc, #304]	; (8010980 <lwip_netconn_do_delconn+0x1b4>)
 801084e:	f00c f931 	bl	801cab4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	2200      	movs	r2, #0
 8010856:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4618      	mov	r0, r3
 801085e:	f7ff fdcd 	bl	80103fc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	685b      	ldr	r3, [r3, #4]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d05f      	beq.n	801092c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010876:	2b10      	cmp	r3, #16
 8010878:	d00d      	beq.n	8010896 <lwip_netconn_do_delconn+0xca>
 801087a:	2b20      	cmp	r3, #32
 801087c:	d151      	bne.n	8010922 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	2200      	movs	r2, #0
 8010886:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	4618      	mov	r0, r3
 8010890:	f009 f990 	bl	8019bb4 <udp_remove>
          break;
 8010894:	e046      	b.n	8010924 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	6a1b      	ldr	r3, [r3, #32]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d006      	beq.n	80108ae <lwip_netconn_do_delconn+0xe2>
 80108a0:	4b35      	ldr	r3, [pc, #212]	; (8010978 <lwip_netconn_do_delconn+0x1ac>)
 80108a2:	f240 4294 	movw	r2, #1172	; 0x494
 80108a6:	4938      	ldr	r1, [pc, #224]	; (8010988 <lwip_netconn_do_delconn+0x1bc>)
 80108a8:	4835      	ldr	r0, [pc, #212]	; (8010980 <lwip_netconn_do_delconn+0x1b4>)
 80108aa:	f00c f903 	bl	801cab4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	2204      	movs	r2, #4
 80108b4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	2203      	movs	r2, #3
 80108ba:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	68fa      	ldr	r2, [r7, #12]
 80108c2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2100      	movs	r1, #0
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7ff fe14 	bl	80104f8 <lwip_netconn_do_close_internal>
 80108d0:	4603      	mov	r3, r0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d04b      	beq.n	801096e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	785b      	ldrb	r3, [r3, #1]
 80108dc:	2b04      	cmp	r3, #4
 80108de:	d006      	beq.n	80108ee <lwip_netconn_do_delconn+0x122>
 80108e0:	4b25      	ldr	r3, [pc, #148]	; (8010978 <lwip_netconn_do_delconn+0x1ac>)
 80108e2:	f240 429a 	movw	r2, #1178	; 0x49a
 80108e6:	4929      	ldr	r1, [pc, #164]	; (801098c <lwip_netconn_do_delconn+0x1c0>)
 80108e8:	4825      	ldr	r0, [pc, #148]	; (8010980 <lwip_netconn_do_delconn+0x1b4>)
 80108ea:	f00c f8e3 	bl	801cab4 <iprintf>
            UNLOCK_TCPIP_CORE();
 80108ee:	4828      	ldr	r0, [pc, #160]	; (8010990 <lwip_netconn_do_delconn+0x1c4>)
 80108f0:	f00b fe4d 	bl	801c58e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	330c      	adds	r3, #12
 80108fa:	2100      	movs	r1, #0
 80108fc:	4618      	mov	r0, r3
 80108fe:	f00b fda4 	bl	801c44a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8010902:	4823      	ldr	r0, [pc, #140]	; (8010990 <lwip_netconn_do_delconn+0x1c4>)
 8010904:	f00b fe34 	bl	801c570 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	785b      	ldrb	r3, [r3, #1]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d02d      	beq.n	801096e <lwip_netconn_do_delconn+0x1a2>
 8010912:	4b19      	ldr	r3, [pc, #100]	; (8010978 <lwip_netconn_do_delconn+0x1ac>)
 8010914:	f240 429e 	movw	r2, #1182	; 0x49e
 8010918:	491c      	ldr	r1, [pc, #112]	; (801098c <lwip_netconn_do_delconn+0x1c0>)
 801091a:	4819      	ldr	r0, [pc, #100]	; (8010980 <lwip_netconn_do_delconn+0x1b4>)
 801091c:	f00c f8ca 	bl	801cab4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8010920:	e025      	b.n	801096e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8010922:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	2200      	movs	r2, #0
 801092a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010932:	2b00      	cmp	r3, #0
 8010934:	d007      	beq.n	8010946 <lwip_netconn_do_delconn+0x17a>
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801093c:	68fa      	ldr	r2, [r7, #12]
 801093e:	6810      	ldr	r0, [r2, #0]
 8010940:	2200      	movs	r2, #0
 8010942:	2100      	movs	r1, #0
 8010944:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801094c:	2b00      	cmp	r3, #0
 801094e:	d007      	beq.n	8010960 <lwip_netconn_do_delconn+0x194>
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010956:	68fa      	ldr	r2, [r7, #12]
 8010958:	6810      	ldr	r0, [r2, #0]
 801095a:	2200      	movs	r2, #0
 801095c:	2102      	movs	r1, #2
 801095e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	330c      	adds	r3, #12
 8010966:	4618      	mov	r0, r3
 8010968:	f00b fdba 	bl	801c4e0 <sys_sem_valid>
 801096c:	e000      	b.n	8010970 <lwip_netconn_do_delconn+0x1a4>
          return;
 801096e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8010970:	3710      	adds	r7, #16
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop
 8010978:	0801e43c 	.word	0x0801e43c
 801097c:	0801e7ac 	.word	0x0801e7ac
 8010980:	0801e480 	.word	0x0801e480
 8010984:	0801e7c0 	.word	0x0801e7c0
 8010988:	0801e7e0 	.word	0x0801e7e0
 801098c:	0801e7fc 	.word	0x0801e7fc
 8010990:	2000a634 	.word	0x2000a634

08010994 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d025      	beq.n	80109f6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	781b      	ldrb	r3, [r3, #0]
 80109b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80109b4:	2b10      	cmp	r3, #16
 80109b6:	d00e      	beq.n	80109d6 <lwip_netconn_do_bind+0x42>
 80109b8:	2b20      	cmp	r3, #32
 80109ba:	d119      	bne.n	80109f0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	6858      	ldr	r0, [r3, #4]
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	6899      	ldr	r1, [r3, #8]
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	899b      	ldrh	r3, [r3, #12]
 80109ca:	461a      	mov	r2, r3
 80109cc:	f009 f84a 	bl	8019a64 <udp_bind>
 80109d0:	4603      	mov	r3, r0
 80109d2:	73fb      	strb	r3, [r7, #15]
        break;
 80109d4:	e011      	b.n	80109fa <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	6858      	ldr	r0, [r3, #4]
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	6899      	ldr	r1, [r3, #8]
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	899b      	ldrh	r3, [r3, #12]
 80109e4:	461a      	mov	r2, r3
 80109e6:	f002 febd 	bl	8013764 <tcp_bind>
 80109ea:	4603      	mov	r3, r0
 80109ec:	73fb      	strb	r3, [r7, #15]
        break;
 80109ee:	e004      	b.n	80109fa <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80109f0:	23fa      	movs	r3, #250	; 0xfa
 80109f2:	73fb      	strb	r3, [r7, #15]
        break;
 80109f4:	e001      	b.n	80109fa <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80109f6:	23fa      	movs	r3, #250	; 0xfa
 80109f8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	7bfa      	ldrb	r2, [r7, #15]
 80109fe:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010a00:	bf00      	nop
 8010a02:	3710      	adds	r7, #16
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b084      	sub	sp, #16
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7ff f871 	bl	800fb00 <netconn_err>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d134      	bne.n	8010a94 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8010a2a:	68bb      	ldr	r3, [r7, #8]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d02d      	beq.n	8010a90 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a3e:	2b20      	cmp	r3, #32
 8010a40:	d123      	bne.n	8010a8a <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	689b      	ldr	r3, [r3, #8]
 8010a46:	689b      	ldr	r3, [r3, #8]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d10c      	bne.n	8010a66 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	685a      	ldr	r2, [r3, #4]
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	689b      	ldr	r3, [r3, #8]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4619      	mov	r1, r3
 8010a5a:	4610      	mov	r0, r2
 8010a5c:	f008 fe18 	bl	8019690 <udp_send>
 8010a60:	4603      	mov	r3, r0
 8010a62:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8010a64:	e016      	b.n	8010a94 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	6858      	ldr	r0, [r3, #4]
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	689b      	ldr	r3, [r3, #8]
 8010a70:	6819      	ldr	r1, [r3, #0]
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	689b      	ldr	r3, [r3, #8]
 8010a76:	f103 0208 	add.w	r2, r3, #8
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	689b      	ldr	r3, [r3, #8]
 8010a7e:	899b      	ldrh	r3, [r3, #12]
 8010a80:	f008 fe3a 	bl	80196f8 <udp_sendto>
 8010a84:	4603      	mov	r3, r0
 8010a86:	73fb      	strb	r3, [r7, #15]
          break;
 8010a88:	e004      	b.n	8010a94 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8010a8a:	23f5      	movs	r3, #245	; 0xf5
 8010a8c:	73fb      	strb	r3, [r7, #15]
          break;
 8010a8e:	e001      	b.n	8010a94 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8010a90:	23f5      	movs	r3, #245	; 0xf5
 8010a92:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	7bfa      	ldrb	r2, [r7, #15]
 8010a98:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010a9a:	bf00      	nop
 8010a9c:	3710      	adds	r7, #16
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}

08010aa2 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8010aa2:	b580      	push	{r7, lr}
 8010aa4:	b086      	sub	sp, #24
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d022      	beq.n	8010b04 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ac8:	2b10      	cmp	r3, #16
 8010aca:	d11b      	bne.n	8010b04 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	689b      	ldr	r3, [r3, #8]
 8010ad0:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ad8:	d202      	bcs.n	8010ae0 <lwip_netconn_do_recv+0x3e>
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	b29b      	uxth	r3, r3
 8010ade:	e001      	b.n	8010ae4 <lwip_netconn_do_recv+0x42>
 8010ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ae4:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8010ae6:	693b      	ldr	r3, [r7, #16]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	685b      	ldr	r3, [r3, #4]
 8010aec:	89fa      	ldrh	r2, [r7, #14]
 8010aee:	4611      	mov	r1, r2
 8010af0:	4618      	mov	r0, r3
 8010af2:	f002 ff29 	bl	8013948 <tcp_recved>
        remaining -= recved;
 8010af6:	89fb      	ldrh	r3, [r7, #14]
 8010af8:	697a      	ldr	r2, [r7, #20]
 8010afa:	1ad3      	subs	r3, r2, r3
 8010afc:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d1e6      	bne.n	8010ad2 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010b04:	bf00      	nop
 8010b06:	3718      	adds	r7, #24
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}

08010b0c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b088      	sub	sp, #32
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	460b      	mov	r3, r1
 8010b16:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d106      	bne.n	8010b30 <lwip_netconn_do_writemore+0x24>
 8010b22:	4b96      	ldr	r3, [pc, #600]	; (8010d7c <lwip_netconn_do_writemore+0x270>)
 8010b24:	f240 6273 	movw	r2, #1651	; 0x673
 8010b28:	4995      	ldr	r1, [pc, #596]	; (8010d80 <lwip_netconn_do_writemore+0x274>)
 8010b2a:	4896      	ldr	r0, [pc, #600]	; (8010d84 <lwip_netconn_do_writemore+0x278>)
 8010b2c:	f00b ffc2 	bl	801cab4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	785b      	ldrb	r3, [r3, #1]
 8010b34:	2b01      	cmp	r3, #1
 8010b36:	d006      	beq.n	8010b46 <lwip_netconn_do_writemore+0x3a>
 8010b38:	4b90      	ldr	r3, [pc, #576]	; (8010d7c <lwip_netconn_do_writemore+0x270>)
 8010b3a:	f240 6274 	movw	r2, #1652	; 0x674
 8010b3e:	4992      	ldr	r1, [pc, #584]	; (8010d88 <lwip_netconn_do_writemore+0x27c>)
 8010b40:	4890      	ldr	r0, [pc, #576]	; (8010d84 <lwip_netconn_do_writemore+0x278>)
 8010b42:	f00b ffb7 	bl	801cab4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6a1b      	ldr	r3, [r3, #32]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d106      	bne.n	8010b5c <lwip_netconn_do_writemore+0x50>
 8010b4e:	4b8b      	ldr	r3, [pc, #556]	; (8010d7c <lwip_netconn_do_writemore+0x270>)
 8010b50:	f240 6275 	movw	r2, #1653	; 0x675
 8010b54:	498d      	ldr	r1, [pc, #564]	; (8010d8c <lwip_netconn_do_writemore+0x280>)
 8010b56:	488b      	ldr	r0, [pc, #556]	; (8010d84 <lwip_netconn_do_writemore+0x278>)
 8010b58:	f00b ffac 	bl	801cab4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	685b      	ldr	r3, [r3, #4]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d106      	bne.n	8010b72 <lwip_netconn_do_writemore+0x66>
 8010b64:	4b85      	ldr	r3, [pc, #532]	; (8010d7c <lwip_netconn_do_writemore+0x270>)
 8010b66:	f240 6276 	movw	r2, #1654	; 0x676
 8010b6a:	4989      	ldr	r1, [pc, #548]	; (8010d90 <lwip_netconn_do_writemore+0x284>)
 8010b6c:	4885      	ldr	r0, [pc, #532]	; (8010d84 <lwip_netconn_do_writemore+0x278>)
 8010b6e:	f00b ffa1 	bl	801cab4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6a1b      	ldr	r3, [r3, #32]
 8010b76:	699a      	ldr	r2, [r3, #24]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6a1b      	ldr	r3, [r3, #32]
 8010b7c:	695b      	ldr	r3, [r3, #20]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d306      	bcc.n	8010b90 <lwip_netconn_do_writemore+0x84>
 8010b82:	4b7e      	ldr	r3, [pc, #504]	; (8010d7c <lwip_netconn_do_writemore+0x270>)
 8010b84:	f240 6277 	movw	r2, #1655	; 0x677
 8010b88:	4982      	ldr	r1, [pc, #520]	; (8010d94 <lwip_netconn_do_writemore+0x288>)
 8010b8a:	487e      	ldr	r0, [pc, #504]	; (8010d84 <lwip_netconn_do_writemore+0x278>)
 8010b8c:	f00b ff92 	bl	801cab4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6a1b      	ldr	r3, [r3, #32]
 8010b94:	899b      	ldrh	r3, [r3, #12]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d106      	bne.n	8010ba8 <lwip_netconn_do_writemore+0x9c>
 8010b9a:	4b78      	ldr	r3, [pc, #480]	; (8010d7c <lwip_netconn_do_writemore+0x270>)
 8010b9c:	f240 6279 	movw	r2, #1657	; 0x679
 8010ba0:	497d      	ldr	r1, [pc, #500]	; (8010d98 <lwip_netconn_do_writemore+0x28c>)
 8010ba2:	4878      	ldr	r0, [pc, #480]	; (8010d84 <lwip_netconn_do_writemore+0x278>)
 8010ba4:	f00b ff86 	bl	801cab4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6a1b      	ldr	r3, [r3, #32]
 8010bac:	7f1b      	ldrb	r3, [r3, #28]
 8010bae:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	7f1b      	ldrb	r3, [r3, #28]
 8010bb4:	f003 0302 	and.w	r3, r3, #2
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d104      	bne.n	8010bc6 <lwip_netconn_do_writemore+0xba>
 8010bbc:	7ebb      	ldrb	r3, [r7, #26]
 8010bbe:	f003 0304 	and.w	r3, r3, #4
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d001      	beq.n	8010bca <lwip_netconn_do_writemore+0xbe>
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	e000      	b.n	8010bcc <lwip_netconn_do_writemore+0xc0>
 8010bca:	2300      	movs	r3, #0
 8010bcc:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6a1b      	ldr	r3, [r3, #32]
 8010bd2:	689b      	ldr	r3, [r3, #8]
 8010bd4:	681a      	ldr	r2, [r3, #0]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6a1b      	ldr	r3, [r3, #32]
 8010bda:	691b      	ldr	r3, [r3, #16]
 8010bdc:	4413      	add	r3, r2
 8010bde:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6a1b      	ldr	r3, [r3, #32]
 8010be4:	689b      	ldr	r3, [r3, #8]
 8010be6:	685a      	ldr	r2, [r3, #4]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6a1b      	ldr	r3, [r3, #32]
 8010bec:	691b      	ldr	r3, [r3, #16]
 8010bee:	1ad3      	subs	r3, r2, r3
 8010bf0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bf8:	d307      	bcc.n	8010c0a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8010bfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010bfe:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010c00:	7ebb      	ldrb	r3, [r7, #26]
 8010c02:	f043 0302 	orr.w	r3, r3, #2
 8010c06:	76bb      	strb	r3, [r7, #26]
 8010c08:	e001      	b.n	8010c0e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010c16:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8010c18:	89fa      	ldrh	r2, [r7, #14]
 8010c1a:	8bbb      	ldrh	r3, [r7, #28]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d216      	bcs.n	8010c4e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010c20:	89fb      	ldrh	r3, [r7, #14]
 8010c22:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010c24:	7e3b      	ldrb	r3, [r7, #24]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d00d      	beq.n	8010c46 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8010c2a:	8bbb      	ldrh	r3, [r7, #28]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d10e      	bne.n	8010c4e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6a1b      	ldr	r3, [r3, #32]
 8010c34:	699b      	ldr	r3, [r3, #24]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d102      	bne.n	8010c40 <lwip_netconn_do_writemore+0x134>
 8010c3a:	f06f 0306 	mvn.w	r3, #6
 8010c3e:	e000      	b.n	8010c42 <lwip_netconn_do_writemore+0x136>
 8010c40:	2300      	movs	r3, #0
 8010c42:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010c44:	e07d      	b.n	8010d42 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8010c46:	7ebb      	ldrb	r3, [r7, #26]
 8010c48:	f043 0302 	orr.w	r3, r3, #2
 8010c4c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6a1b      	ldr	r3, [r3, #32]
 8010c52:	691a      	ldr	r2, [r3, #16]
 8010c54:	8bbb      	ldrh	r3, [r7, #28]
 8010c56:	441a      	add	r2, r3
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6a1b      	ldr	r3, [r3, #32]
 8010c5c:	689b      	ldr	r3, [r3, #8]
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d906      	bls.n	8010c72 <lwip_netconn_do_writemore+0x166>
 8010c64:	4b45      	ldr	r3, [pc, #276]	; (8010d7c <lwip_netconn_do_writemore+0x270>)
 8010c66:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8010c6a:	494c      	ldr	r1, [pc, #304]	; (8010d9c <lwip_netconn_do_writemore+0x290>)
 8010c6c:	4845      	ldr	r0, [pc, #276]	; (8010d84 <lwip_netconn_do_writemore+0x278>)
 8010c6e:	f00b ff21 	bl	801cab4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010c72:	8bbb      	ldrh	r3, [r7, #28]
 8010c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	d103      	bne.n	8010c84 <lwip_netconn_do_writemore+0x178>
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c82:	d209      	bcs.n	8010c98 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010c88:	8bba      	ldrh	r2, [r7, #28]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d10b      	bne.n	8010ca6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6a1b      	ldr	r3, [r3, #32]
 8010c92:	899b      	ldrh	r3, [r3, #12]
 8010c94:	2b01      	cmp	r3, #1
 8010c96:	d906      	bls.n	8010ca6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8010c98:	2301      	movs	r3, #1
 8010c9a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010c9c:	7ebb      	ldrb	r3, [r7, #26]
 8010c9e:	f043 0302 	orr.w	r3, r3, #2
 8010ca2:	76bb      	strb	r3, [r7, #26]
 8010ca4:	e001      	b.n	8010caa <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6858      	ldr	r0, [r3, #4]
 8010cae:	7ebb      	ldrb	r3, [r7, #26]
 8010cb0:	8bba      	ldrh	r2, [r7, #28]
 8010cb2:	6979      	ldr	r1, [r7, #20]
 8010cb4:	f006 fc50 	bl	8017558 <tcp_write>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8010cbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d12c      	bne.n	8010d1e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6a1b      	ldr	r3, [r3, #32]
 8010cc8:	6999      	ldr	r1, [r3, #24]
 8010cca:	8bba      	ldrh	r2, [r7, #28]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6a1b      	ldr	r3, [r3, #32]
 8010cd0:	440a      	add	r2, r1
 8010cd2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6a1b      	ldr	r3, [r3, #32]
 8010cd8:	6919      	ldr	r1, [r3, #16]
 8010cda:	8bba      	ldrh	r2, [r7, #28]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6a1b      	ldr	r3, [r3, #32]
 8010ce0:	440a      	add	r2, r1
 8010ce2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6a1b      	ldr	r3, [r3, #32]
 8010ce8:	691a      	ldr	r2, [r3, #16]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6a1b      	ldr	r3, [r3, #32]
 8010cee:	689b      	ldr	r3, [r3, #8]
 8010cf0:	685b      	ldr	r3, [r3, #4]
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d113      	bne.n	8010d1e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6a1b      	ldr	r3, [r3, #32]
 8010cfa:	899a      	ldrh	r2, [r3, #12]
 8010cfc:	3a01      	subs	r2, #1
 8010cfe:	b292      	uxth	r2, r2
 8010d00:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6a1b      	ldr	r3, [r3, #32]
 8010d06:	899b      	ldrh	r3, [r3, #12]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d008      	beq.n	8010d1e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6a1b      	ldr	r3, [r3, #32]
 8010d10:	689a      	ldr	r2, [r3, #8]
 8010d12:	3208      	adds	r2, #8
 8010d14:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6a1b      	ldr	r3, [r3, #32]
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010d1e:	7e7b      	ldrb	r3, [r7, #25]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d004      	beq.n	8010d2e <lwip_netconn_do_writemore+0x222>
 8010d24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f43f af50 	beq.w	8010bce <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010d2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d004      	beq.n	8010d40 <lwip_netconn_do_writemore+0x234>
 8010d36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d3e:	d146      	bne.n	8010dce <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010d40:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8010d42:	7e3b      	ldrb	r3, [r7, #24]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d02b      	beq.n	8010da0 <lwip_netconn_do_writemore+0x294>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6a1b      	ldr	r3, [r3, #32]
 8010d4c:	699a      	ldr	r2, [r3, #24]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	6a1b      	ldr	r3, [r3, #32]
 8010d52:	695b      	ldr	r3, [r3, #20]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d223      	bcs.n	8010da0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d005      	beq.n	8010d6c <lwip_netconn_do_writemore+0x260>
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d64:	2200      	movs	r2, #0
 8010d66:	2103      	movs	r1, #3
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	7f1b      	ldrb	r3, [r3, #28]
 8010d70:	f043 0310 	orr.w	r3, r3, #16
 8010d74:	b2da      	uxtb	r2, r3
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	771a      	strb	r2, [r3, #28]
 8010d7a:	e028      	b.n	8010dce <lwip_netconn_do_writemore+0x2c2>
 8010d7c:	0801e43c 	.word	0x0801e43c
 8010d80:	0801e594 	.word	0x0801e594
 8010d84:	0801e480 	.word	0x0801e480
 8010d88:	0801e89c 	.word	0x0801e89c
 8010d8c:	0801e5a4 	.word	0x0801e5a4
 8010d90:	0801e8bc 	.word	0x0801e8bc
 8010d94:	0801e8d4 	.word	0x0801e8d4
 8010d98:	0801e914 	.word	0x0801e914
 8010d9c:	0801e93c 	.word	0x0801e93c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010da8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8010dac:	d305      	bcc.n	8010dba <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010db6:	2b04      	cmp	r3, #4
 8010db8:	d909      	bls.n	8010dce <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d005      	beq.n	8010dce <lwip_netconn_do_writemore+0x2c2>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	2103      	movs	r1, #3
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010dce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d11d      	bne.n	8010e12 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6a1b      	ldr	r3, [r3, #32]
 8010dda:	699a      	ldr	r2, [r3, #24]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6a1b      	ldr	r3, [r3, #32]
 8010de0:	695b      	ldr	r3, [r3, #20]
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d002      	beq.n	8010dec <lwip_netconn_do_writemore+0x2e0>
 8010de6:	7e3b      	ldrb	r3, [r7, #24]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d001      	beq.n	8010df0 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010dec:	2301      	movs	r3, #1
 8010dee:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	4618      	mov	r0, r3
 8010df6:	f007 f999 	bl	801812c <tcp_output>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010dfe:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010e02:	f113 0f04 	cmn.w	r3, #4
 8010e06:	d12c      	bne.n	8010e62 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010e08:	7b3b      	ldrb	r3, [r7, #12]
 8010e0a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	76fb      	strb	r3, [r7, #27]
 8010e10:	e027      	b.n	8010e62 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8010e12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e1a:	d120      	bne.n	8010e5e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	685b      	ldr	r3, [r3, #4]
 8010e20:	4618      	mov	r0, r3
 8010e22:	f007 f983 	bl	801812c <tcp_output>
 8010e26:	4603      	mov	r3, r0
 8010e28:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8010e2a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010e2e:	f113 0f04 	cmn.w	r3, #4
 8010e32:	d104      	bne.n	8010e3e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010e34:	7b7b      	ldrb	r3, [r7, #13]
 8010e36:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010e38:	2301      	movs	r3, #1
 8010e3a:	76fb      	strb	r3, [r7, #27]
 8010e3c:	e011      	b.n	8010e62 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010e3e:	7e3b      	ldrb	r3, [r7, #24]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d00e      	beq.n	8010e62 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6a1b      	ldr	r3, [r3, #32]
 8010e48:	699b      	ldr	r3, [r3, #24]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d102      	bne.n	8010e54 <lwip_netconn_do_writemore+0x348>
 8010e4e:	f06f 0306 	mvn.w	r3, #6
 8010e52:	e000      	b.n	8010e56 <lwip_netconn_do_writemore+0x34a>
 8010e54:	2300      	movs	r3, #0
 8010e56:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010e58:	2301      	movs	r3, #1
 8010e5a:	76fb      	strb	r3, [r7, #27]
 8010e5c:	e001      	b.n	8010e62 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010e5e:	2301      	movs	r3, #1
 8010e60:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8010e62:	7efb      	ldrb	r3, [r7, #27]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d015      	beq.n	8010e94 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6a1b      	ldr	r3, [r3, #32]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	330c      	adds	r3, #12
 8010e70:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6a1b      	ldr	r3, [r3, #32]
 8010e76:	7ffa      	ldrb	r2, [r7, #31]
 8010e78:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2200      	movs	r2, #0
 8010e84:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010e86:	78fb      	ldrb	r3, [r7, #3]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d006      	beq.n	8010e9a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8010e8c:	68b8      	ldr	r0, [r7, #8]
 8010e8e:	f00b fb0d 	bl	801c4ac <sys_sem_signal>
 8010e92:	e002      	b.n	8010e9a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8010e94:	f04f 33ff 	mov.w	r3, #4294967295
 8010e98:	e000      	b.n	8010e9c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8010e9a:	2300      	movs	r3, #0
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3720      	adds	r7, #32
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b084      	sub	sp, #16
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	785b      	ldrb	r3, [r3, #1]
 8010eb6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d069      	beq.n	8010f96 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	781b      	ldrb	r3, [r3, #0]
 8010ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8010ecc:	2b10      	cmp	r3, #16
 8010ece:	d162      	bne.n	8010f96 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010ed4:	2b03      	cmp	r3, #3
 8010ed6:	d002      	beq.n	8010ede <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010ed8:	7afb      	ldrb	r3, [r7, #11]
 8010eda:	2b02      	cmp	r3, #2
 8010edc:	d05b      	beq.n	8010f96 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8010ede:	7afb      	ldrb	r3, [r7, #11]
 8010ee0:	2b03      	cmp	r3, #3
 8010ee2:	d103      	bne.n	8010eec <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	22f5      	movs	r2, #245	; 0xf5
 8010ee8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010eea:	e059      	b.n	8010fa0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8010eec:	7afb      	ldrb	r3, [r7, #11]
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	d103      	bne.n	8010efa <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	22fb      	movs	r2, #251	; 0xfb
 8010ef6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010ef8:	e052      	b.n	8010fa0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	7a1b      	ldrb	r3, [r3, #8]
 8010efe:	f003 0301 	and.w	r3, r3, #1
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d004      	beq.n	8010f10 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7ff fa76 	bl	80103fc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	6a1b      	ldr	r3, [r3, #32]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d006      	beq.n	8010f28 <lwip_netconn_do_close+0x84>
 8010f1a:	4b23      	ldr	r3, [pc, #140]	; (8010fa8 <lwip_netconn_do_close+0x104>)
 8010f1c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8010f20:	4922      	ldr	r1, [pc, #136]	; (8010fac <lwip_netconn_do_close+0x108>)
 8010f22:	4823      	ldr	r0, [pc, #140]	; (8010fb0 <lwip_netconn_do_close+0x10c>)
 8010f24:	f00b fdc6 	bl	801cab4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	2204      	movs	r2, #4
 8010f2e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	68fa      	ldr	r2, [r7, #12]
 8010f36:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	2100      	movs	r1, #0
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7ff fada 	bl	80104f8 <lwip_netconn_do_close_internal>
 8010f44:	4603      	mov	r3, r0
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d029      	beq.n	8010f9e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	785b      	ldrb	r3, [r3, #1]
 8010f50:	2b04      	cmp	r3, #4
 8010f52:	d006      	beq.n	8010f62 <lwip_netconn_do_close+0xbe>
 8010f54:	4b14      	ldr	r3, [pc, #80]	; (8010fa8 <lwip_netconn_do_close+0x104>)
 8010f56:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8010f5a:	4916      	ldr	r1, [pc, #88]	; (8010fb4 <lwip_netconn_do_close+0x110>)
 8010f5c:	4814      	ldr	r0, [pc, #80]	; (8010fb0 <lwip_netconn_do_close+0x10c>)
 8010f5e:	f00b fda9 	bl	801cab4 <iprintf>
        UNLOCK_TCPIP_CORE();
 8010f62:	4815      	ldr	r0, [pc, #84]	; (8010fb8 <lwip_netconn_do_close+0x114>)
 8010f64:	f00b fb13 	bl	801c58e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	330c      	adds	r3, #12
 8010f6e:	2100      	movs	r1, #0
 8010f70:	4618      	mov	r0, r3
 8010f72:	f00b fa6a 	bl	801c44a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8010f76:	4810      	ldr	r0, [pc, #64]	; (8010fb8 <lwip_netconn_do_close+0x114>)
 8010f78:	f00b fafa 	bl	801c570 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	785b      	ldrb	r3, [r3, #1]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d00b      	beq.n	8010f9e <lwip_netconn_do_close+0xfa>
 8010f86:	4b08      	ldr	r3, [pc, #32]	; (8010fa8 <lwip_netconn_do_close+0x104>)
 8010f88:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8010f8c:	4909      	ldr	r1, [pc, #36]	; (8010fb4 <lwip_netconn_do_close+0x110>)
 8010f8e:	4808      	ldr	r0, [pc, #32]	; (8010fb0 <lwip_netconn_do_close+0x10c>)
 8010f90:	f00b fd90 	bl	801cab4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8010f94:	e003      	b.n	8010f9e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	22f5      	movs	r2, #245	; 0xf5
 8010f9a:	711a      	strb	r2, [r3, #4]
 8010f9c:	e000      	b.n	8010fa0 <lwip_netconn_do_close+0xfc>
      return;
 8010f9e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010fa0:	3710      	adds	r7, #16
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	0801e43c 	.word	0x0801e43c
 8010fac:	0801e7e0 	.word	0x0801e7e0
 8010fb0:	0801e480 	.word	0x0801e480
 8010fb4:	0801e7fc 	.word	0x0801e7fc
 8010fb8:	2000a634 	.word	0x2000a634

08010fbc <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8010fc2:	2006      	movs	r0, #6
 8010fc4:	f000 ff30 	bl	8011e28 <memp_malloc>
 8010fc8:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d004      	beq.n	8010fda <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8010fd0:	2210      	movs	r2, #16
 8010fd2:	2100      	movs	r1, #0
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f00b fc85 	bl	801c8e4 <memset>
  }
  return buf;
 8010fda:	687b      	ldr	r3, [r7, #4]
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3708      	adds	r7, #8
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}

08010fe4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d013      	beq.n	801101a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d00b      	beq.n	8011012 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	4618      	mov	r0, r3
 8011000:	f001 fda4 	bl	8012b4c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2200      	movs	r2, #0
 8011008:	605a      	str	r2, [r3, #4]
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	685a      	ldr	r2, [r3, #4]
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8011012:	6879      	ldr	r1, [r7, #4]
 8011014:	2006      	movs	r0, #6
 8011016:	f000 ff59 	bl	8011ecc <memp_free>
  }
}
 801101a:	bf00      	nop
 801101c:	3708      	adds	r7, #8
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
	...

08011024 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	60f8      	str	r0, [r7, #12]
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	4613      	mov	r3, r2
 8011030:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d108      	bne.n	801104a <netbuf_ref+0x26>
 8011038:	4b1c      	ldr	r3, [pc, #112]	; (80110ac <netbuf_ref+0x88>)
 801103a:	2299      	movs	r2, #153	; 0x99
 801103c:	491c      	ldr	r1, [pc, #112]	; (80110b0 <netbuf_ref+0x8c>)
 801103e:	481d      	ldr	r0, [pc, #116]	; (80110b4 <netbuf_ref+0x90>)
 8011040:	f00b fd38 	bl	801cab4 <iprintf>
 8011044:	f06f 030f 	mvn.w	r3, #15
 8011048:	e02b      	b.n	80110a2 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d004      	beq.n	801105c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	4618      	mov	r0, r3
 8011058:	f001 fd78 	bl	8012b4c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 801105c:	2241      	movs	r2, #65	; 0x41
 801105e:	2100      	movs	r1, #0
 8011060:	2036      	movs	r0, #54	; 0x36
 8011062:	f001 fa8f 	bl	8012584 <pbuf_alloc>
 8011066:	4602      	mov	r2, r0
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d105      	bne.n	8011080 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2200      	movs	r2, #0
 8011078:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 801107a:	f04f 33ff 	mov.w	r3, #4294967295
 801107e:	e010      	b.n	80110a2 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	68ba      	ldr	r2, [r7, #8]
 8011086:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	88fa      	ldrh	r2, [r7, #6]
 801108e:	811a      	strh	r2, [r3, #8]
 8011090:	68fa      	ldr	r2, [r7, #12]
 8011092:	6812      	ldr	r2, [r2, #0]
 8011094:	891b      	ldrh	r3, [r3, #8]
 8011096:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	681a      	ldr	r2, [r3, #0]
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 80110a0:	2300      	movs	r3, #0
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3710      	adds	r7, #16
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	0801e994 	.word	0x0801e994
 80110b0:	0801ea4c 	.word	0x0801ea4c
 80110b4:	0801e9e4 	.word	0x0801e9e4

080110b8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b084      	sub	sp, #16
 80110bc:	af00      	add	r7, sp, #0
 80110be:	60f8      	str	r0, [r7, #12]
 80110c0:	60b9      	str	r1, [r7, #8]
 80110c2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d108      	bne.n	80110dc <netbuf_data+0x24>
 80110ca:	4b1b      	ldr	r3, [pc, #108]	; (8011138 <netbuf_data+0x80>)
 80110cc:	22c6      	movs	r2, #198	; 0xc6
 80110ce:	491b      	ldr	r1, [pc, #108]	; (801113c <netbuf_data+0x84>)
 80110d0:	481b      	ldr	r0, [pc, #108]	; (8011140 <netbuf_data+0x88>)
 80110d2:	f00b fcef 	bl	801cab4 <iprintf>
 80110d6:	f06f 030f 	mvn.w	r3, #15
 80110da:	e029      	b.n	8011130 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d108      	bne.n	80110f4 <netbuf_data+0x3c>
 80110e2:	4b15      	ldr	r3, [pc, #84]	; (8011138 <netbuf_data+0x80>)
 80110e4:	22c7      	movs	r2, #199	; 0xc7
 80110e6:	4917      	ldr	r1, [pc, #92]	; (8011144 <netbuf_data+0x8c>)
 80110e8:	4815      	ldr	r0, [pc, #84]	; (8011140 <netbuf_data+0x88>)
 80110ea:	f00b fce3 	bl	801cab4 <iprintf>
 80110ee:	f06f 030f 	mvn.w	r3, #15
 80110f2:	e01d      	b.n	8011130 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d108      	bne.n	801110c <netbuf_data+0x54>
 80110fa:	4b0f      	ldr	r3, [pc, #60]	; (8011138 <netbuf_data+0x80>)
 80110fc:	22c8      	movs	r2, #200	; 0xc8
 80110fe:	4912      	ldr	r1, [pc, #72]	; (8011148 <netbuf_data+0x90>)
 8011100:	480f      	ldr	r0, [pc, #60]	; (8011140 <netbuf_data+0x88>)
 8011102:	f00b fcd7 	bl	801cab4 <iprintf>
 8011106:	f06f 030f 	mvn.w	r3, #15
 801110a:	e011      	b.n	8011130 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d102      	bne.n	801111a <netbuf_data+0x62>
    return ERR_BUF;
 8011114:	f06f 0301 	mvn.w	r3, #1
 8011118:	e00a      	b.n	8011130 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	685b      	ldr	r3, [r3, #4]
 801111e:	685a      	ldr	r2, [r3, #4]
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	685b      	ldr	r3, [r3, #4]
 8011128:	895a      	ldrh	r2, [r3, #10]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 801112e:	2300      	movs	r3, #0
}
 8011130:	4618      	mov	r0, r3
 8011132:	3710      	adds	r7, #16
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}
 8011138:	0801e994 	.word	0x0801e994
 801113c:	0801ea9c 	.word	0x0801ea9c
 8011140:	0801e9e4 	.word	0x0801e9e4
 8011144:	0801eab8 	.word	0x0801eab8
 8011148:	0801ead8 	.word	0x0801ead8

0801114c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b084      	sub	sp, #16
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8011156:	f008 f8a1 	bl	801929c <sys_timeouts_sleeptime>
 801115a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011162:	d10b      	bne.n	801117c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011164:	4813      	ldr	r0, [pc, #76]	; (80111b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011166:	f00b fa12 	bl	801c58e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801116a:	2200      	movs	r2, #0
 801116c:	6839      	ldr	r1, [r7, #0]
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f00b f8ca 	bl	801c308 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011174:	480f      	ldr	r0, [pc, #60]	; (80111b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011176:	f00b f9fb 	bl	801c570 <sys_mutex_lock>
    return;
 801117a:	e018      	b.n	80111ae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d102      	bne.n	8011188 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011182:	f008 f851 	bl	8019228 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011186:	e7e6      	b.n	8011156 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011188:	480a      	ldr	r0, [pc, #40]	; (80111b4 <tcpip_timeouts_mbox_fetch+0x68>)
 801118a:	f00b fa00 	bl	801c58e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801118e:	68fa      	ldr	r2, [r7, #12]
 8011190:	6839      	ldr	r1, [r7, #0]
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f00b f8b8 	bl	801c308 <sys_arch_mbox_fetch>
 8011198:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801119a:	4806      	ldr	r0, [pc, #24]	; (80111b4 <tcpip_timeouts_mbox_fetch+0x68>)
 801119c:	f00b f9e8 	bl	801c570 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111a6:	d102      	bne.n	80111ae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80111a8:	f008 f83e 	bl	8019228 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80111ac:	e7d3      	b.n	8011156 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80111ae:	3710      	adds	r7, #16
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}
 80111b4:	2000a634 	.word	0x2000a634

080111b8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80111c0:	4810      	ldr	r0, [pc, #64]	; (8011204 <tcpip_thread+0x4c>)
 80111c2:	f00b f9d5 	bl	801c570 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80111c6:	4b10      	ldr	r3, [pc, #64]	; (8011208 <tcpip_thread+0x50>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d005      	beq.n	80111da <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80111ce:	4b0e      	ldr	r3, [pc, #56]	; (8011208 <tcpip_thread+0x50>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	4a0e      	ldr	r2, [pc, #56]	; (801120c <tcpip_thread+0x54>)
 80111d4:	6812      	ldr	r2, [r2, #0]
 80111d6:	4610      	mov	r0, r2
 80111d8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80111da:	f107 030c 	add.w	r3, r7, #12
 80111de:	4619      	mov	r1, r3
 80111e0:	480b      	ldr	r0, [pc, #44]	; (8011210 <tcpip_thread+0x58>)
 80111e2:	f7ff ffb3 	bl	801114c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d106      	bne.n	80111fa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80111ec:	4b09      	ldr	r3, [pc, #36]	; (8011214 <tcpip_thread+0x5c>)
 80111ee:	2291      	movs	r2, #145	; 0x91
 80111f0:	4909      	ldr	r1, [pc, #36]	; (8011218 <tcpip_thread+0x60>)
 80111f2:	480a      	ldr	r0, [pc, #40]	; (801121c <tcpip_thread+0x64>)
 80111f4:	f00b fc5e 	bl	801cab4 <iprintf>
      continue;
 80111f8:	e003      	b.n	8011202 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	4618      	mov	r0, r3
 80111fe:	f000 f80f 	bl	8011220 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011202:	e7ea      	b.n	80111da <tcpip_thread+0x22>
 8011204:	2000a634 	.word	0x2000a634
 8011208:	2000a628 	.word	0x2000a628
 801120c:	2000a62c 	.word	0x2000a62c
 8011210:	2000a630 	.word	0x2000a630
 8011214:	0801eb2c 	.word	0x0801eb2c
 8011218:	0801eb5c 	.word	0x0801eb5c
 801121c:	0801eb7c 	.word	0x0801eb7c

08011220 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	2b02      	cmp	r3, #2
 801122e:	d026      	beq.n	801127e <tcpip_thread_handle_msg+0x5e>
 8011230:	2b02      	cmp	r3, #2
 8011232:	dc2b      	bgt.n	801128c <tcpip_thread_handle_msg+0x6c>
 8011234:	2b00      	cmp	r3, #0
 8011236:	d002      	beq.n	801123e <tcpip_thread_handle_msg+0x1e>
 8011238:	2b01      	cmp	r3, #1
 801123a:	d015      	beq.n	8011268 <tcpip_thread_handle_msg+0x48>
 801123c:	e026      	b.n	801128c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	687a      	ldr	r2, [r7, #4]
 8011244:	6850      	ldr	r0, [r2, #4]
 8011246:	687a      	ldr	r2, [r7, #4]
 8011248:	6892      	ldr	r2, [r2, #8]
 801124a:	4611      	mov	r1, r2
 801124c:	4798      	blx	r3
 801124e:	4603      	mov	r3, r0
 8011250:	2b00      	cmp	r3, #0
 8011252:	d004      	beq.n	801125e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	685b      	ldr	r3, [r3, #4]
 8011258:	4618      	mov	r0, r3
 801125a:	f001 fc77 	bl	8012b4c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801125e:	6879      	ldr	r1, [r7, #4]
 8011260:	2009      	movs	r0, #9
 8011262:	f000 fe33 	bl	8011ecc <memp_free>
      break;
 8011266:	e018      	b.n	801129a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	685b      	ldr	r3, [r3, #4]
 801126c:	687a      	ldr	r2, [r7, #4]
 801126e:	6892      	ldr	r2, [r2, #8]
 8011270:	4610      	mov	r0, r2
 8011272:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011274:	6879      	ldr	r1, [r7, #4]
 8011276:	2008      	movs	r0, #8
 8011278:	f000 fe28 	bl	8011ecc <memp_free>
      break;
 801127c:	e00d      	b.n	801129a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	687a      	ldr	r2, [r7, #4]
 8011284:	6892      	ldr	r2, [r2, #8]
 8011286:	4610      	mov	r0, r2
 8011288:	4798      	blx	r3
      break;
 801128a:	e006      	b.n	801129a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801128c:	4b05      	ldr	r3, [pc, #20]	; (80112a4 <tcpip_thread_handle_msg+0x84>)
 801128e:	22cf      	movs	r2, #207	; 0xcf
 8011290:	4905      	ldr	r1, [pc, #20]	; (80112a8 <tcpip_thread_handle_msg+0x88>)
 8011292:	4806      	ldr	r0, [pc, #24]	; (80112ac <tcpip_thread_handle_msg+0x8c>)
 8011294:	f00b fc0e 	bl	801cab4 <iprintf>
      break;
 8011298:	bf00      	nop
  }
}
 801129a:	bf00      	nop
 801129c:	3708      	adds	r7, #8
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd80      	pop	{r7, pc}
 80112a2:	bf00      	nop
 80112a4:	0801eb2c 	.word	0x0801eb2c
 80112a8:	0801eb5c 	.word	0x0801eb5c
 80112ac:	0801eb7c 	.word	0x0801eb7c

080112b0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b086      	sub	sp, #24
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	60f8      	str	r0, [r7, #12]
 80112b8:	60b9      	str	r1, [r7, #8]
 80112ba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80112bc:	481a      	ldr	r0, [pc, #104]	; (8011328 <tcpip_inpkt+0x78>)
 80112be:	f00b f87e 	bl	801c3be <sys_mbox_valid>
 80112c2:	4603      	mov	r3, r0
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d105      	bne.n	80112d4 <tcpip_inpkt+0x24>
 80112c8:	4b18      	ldr	r3, [pc, #96]	; (801132c <tcpip_inpkt+0x7c>)
 80112ca:	22fc      	movs	r2, #252	; 0xfc
 80112cc:	4918      	ldr	r1, [pc, #96]	; (8011330 <tcpip_inpkt+0x80>)
 80112ce:	4819      	ldr	r0, [pc, #100]	; (8011334 <tcpip_inpkt+0x84>)
 80112d0:	f00b fbf0 	bl	801cab4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80112d4:	2009      	movs	r0, #9
 80112d6:	f000 fda7 	bl	8011e28 <memp_malloc>
 80112da:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d102      	bne.n	80112e8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80112e2:	f04f 33ff 	mov.w	r3, #4294967295
 80112e6:	e01a      	b.n	801131e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	2200      	movs	r2, #0
 80112ec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	68fa      	ldr	r2, [r7, #12]
 80112f2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80112f4:	697b      	ldr	r3, [r7, #20]
 80112f6:	68ba      	ldr	r2, [r7, #8]
 80112f8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	687a      	ldr	r2, [r7, #4]
 80112fe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011300:	6979      	ldr	r1, [r7, #20]
 8011302:	4809      	ldr	r0, [pc, #36]	; (8011328 <tcpip_inpkt+0x78>)
 8011304:	f00a ffe6 	bl	801c2d4 <sys_mbox_trypost>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d006      	beq.n	801131c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801130e:	6979      	ldr	r1, [r7, #20]
 8011310:	2009      	movs	r0, #9
 8011312:	f000 fddb 	bl	8011ecc <memp_free>
    return ERR_MEM;
 8011316:	f04f 33ff 	mov.w	r3, #4294967295
 801131a:	e000      	b.n	801131e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801131c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801131e:	4618      	mov	r0, r3
 8011320:	3718      	adds	r7, #24
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
 8011326:	bf00      	nop
 8011328:	2000a630 	.word	0x2000a630
 801132c:	0801eb2c 	.word	0x0801eb2c
 8011330:	0801eba4 	.word	0x0801eba4
 8011334:	0801eb7c 	.word	0x0801eb7c

08011338 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011348:	f003 0318 	and.w	r3, r3, #24
 801134c:	2b00      	cmp	r3, #0
 801134e:	d006      	beq.n	801135e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011350:	4a08      	ldr	r2, [pc, #32]	; (8011374 <tcpip_input+0x3c>)
 8011352:	6839      	ldr	r1, [r7, #0]
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f7ff ffab 	bl	80112b0 <tcpip_inpkt>
 801135a:	4603      	mov	r3, r0
 801135c:	e005      	b.n	801136a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801135e:	4a06      	ldr	r2, [pc, #24]	; (8011378 <tcpip_input+0x40>)
 8011360:	6839      	ldr	r1, [r7, #0]
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f7ff ffa4 	bl	80112b0 <tcpip_inpkt>
 8011368:	4603      	mov	r3, r0
}
 801136a:	4618      	mov	r0, r3
 801136c:	3708      	adds	r7, #8
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
 8011372:	bf00      	nop
 8011374:	0801c0c1 	.word	0x0801c0c1
 8011378:	0801afc9 	.word	0x0801afc9

0801137c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011386:	4819      	ldr	r0, [pc, #100]	; (80113ec <tcpip_try_callback+0x70>)
 8011388:	f00b f819 	bl	801c3be <sys_mbox_valid>
 801138c:	4603      	mov	r3, r0
 801138e:	2b00      	cmp	r3, #0
 8011390:	d106      	bne.n	80113a0 <tcpip_try_callback+0x24>
 8011392:	4b17      	ldr	r3, [pc, #92]	; (80113f0 <tcpip_try_callback+0x74>)
 8011394:	f240 125d 	movw	r2, #349	; 0x15d
 8011398:	4916      	ldr	r1, [pc, #88]	; (80113f4 <tcpip_try_callback+0x78>)
 801139a:	4817      	ldr	r0, [pc, #92]	; (80113f8 <tcpip_try_callback+0x7c>)
 801139c:	f00b fb8a 	bl	801cab4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80113a0:	2008      	movs	r0, #8
 80113a2:	f000 fd41 	bl	8011e28 <memp_malloc>
 80113a6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d102      	bne.n	80113b4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80113ae:	f04f 33ff 	mov.w	r3, #4294967295
 80113b2:	e017      	b.n	80113e4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	2201      	movs	r2, #1
 80113b8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	687a      	ldr	r2, [r7, #4]
 80113be:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	683a      	ldr	r2, [r7, #0]
 80113c4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80113c6:	68f9      	ldr	r1, [r7, #12]
 80113c8:	4808      	ldr	r0, [pc, #32]	; (80113ec <tcpip_try_callback+0x70>)
 80113ca:	f00a ff83 	bl	801c2d4 <sys_mbox_trypost>
 80113ce:	4603      	mov	r3, r0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d006      	beq.n	80113e2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80113d4:	68f9      	ldr	r1, [r7, #12]
 80113d6:	2008      	movs	r0, #8
 80113d8:	f000 fd78 	bl	8011ecc <memp_free>
    return ERR_MEM;
 80113dc:	f04f 33ff 	mov.w	r3, #4294967295
 80113e0:	e000      	b.n	80113e4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80113e2:	2300      	movs	r3, #0
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3710      	adds	r7, #16
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}
 80113ec:	2000a630 	.word	0x2000a630
 80113f0:	0801eb2c 	.word	0x0801eb2c
 80113f4:	0801eba4 	.word	0x0801eba4
 80113f8:	0801eb7c 	.word	0x0801eb7c

080113fc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b084      	sub	sp, #16
 8011400:	af00      	add	r7, sp, #0
 8011402:	60f8      	str	r0, [r7, #12]
 8011404:	60b9      	str	r1, [r7, #8]
 8011406:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8011408:	4806      	ldr	r0, [pc, #24]	; (8011424 <tcpip_send_msg_wait_sem+0x28>)
 801140a:	f00b f8b1 	bl	801c570 <sys_mutex_lock>
  fn(apimsg);
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	68b8      	ldr	r0, [r7, #8]
 8011412:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8011414:	4803      	ldr	r0, [pc, #12]	; (8011424 <tcpip_send_msg_wait_sem+0x28>)
 8011416:	f00b f8ba 	bl	801c58e <sys_mutex_unlock>
  return ERR_OK;
 801141a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801141c:	4618      	mov	r0, r3
 801141e:	3710      	adds	r7, #16
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}
 8011424:	2000a634 	.word	0x2000a634

08011428 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b084      	sub	sp, #16
 801142c:	af02      	add	r7, sp, #8
 801142e:	6078      	str	r0, [r7, #4]
 8011430:	6039      	str	r1, [r7, #0]
  lwip_init();
 8011432:	f000 f871 	bl	8011518 <lwip_init>

  tcpip_init_done = initfunc;
 8011436:	4a17      	ldr	r2, [pc, #92]	; (8011494 <tcpip_init+0x6c>)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801143c:	4a16      	ldr	r2, [pc, #88]	; (8011498 <tcpip_init+0x70>)
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011442:	2106      	movs	r1, #6
 8011444:	4815      	ldr	r0, [pc, #84]	; (801149c <tcpip_init+0x74>)
 8011446:	f00a ff11 	bl	801c26c <sys_mbox_new>
 801144a:	4603      	mov	r3, r0
 801144c:	2b00      	cmp	r3, #0
 801144e:	d006      	beq.n	801145e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011450:	4b13      	ldr	r3, [pc, #76]	; (80114a0 <tcpip_init+0x78>)
 8011452:	f240 2261 	movw	r2, #609	; 0x261
 8011456:	4913      	ldr	r1, [pc, #76]	; (80114a4 <tcpip_init+0x7c>)
 8011458:	4813      	ldr	r0, [pc, #76]	; (80114a8 <tcpip_init+0x80>)
 801145a:	f00b fb2b 	bl	801cab4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801145e:	4813      	ldr	r0, [pc, #76]	; (80114ac <tcpip_init+0x84>)
 8011460:	f00b f86a 	bl	801c538 <sys_mutex_new>
 8011464:	4603      	mov	r3, r0
 8011466:	2b00      	cmp	r3, #0
 8011468:	d006      	beq.n	8011478 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801146a:	4b0d      	ldr	r3, [pc, #52]	; (80114a0 <tcpip_init+0x78>)
 801146c:	f240 2265 	movw	r2, #613	; 0x265
 8011470:	490f      	ldr	r1, [pc, #60]	; (80114b0 <tcpip_init+0x88>)
 8011472:	480d      	ldr	r0, [pc, #52]	; (80114a8 <tcpip_init+0x80>)
 8011474:	f00b fb1e 	bl	801cab4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011478:	2300      	movs	r3, #0
 801147a:	9300      	str	r3, [sp, #0]
 801147c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011480:	2200      	movs	r2, #0
 8011482:	490c      	ldr	r1, [pc, #48]	; (80114b4 <tcpip_init+0x8c>)
 8011484:	480c      	ldr	r0, [pc, #48]	; (80114b8 <tcpip_init+0x90>)
 8011486:	f00b f88f 	bl	801c5a8 <sys_thread_new>
}
 801148a:	bf00      	nop
 801148c:	3708      	adds	r7, #8
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	2000a628 	.word	0x2000a628
 8011498:	2000a62c 	.word	0x2000a62c
 801149c:	2000a630 	.word	0x2000a630
 80114a0:	0801eb2c 	.word	0x0801eb2c
 80114a4:	0801ebb4 	.word	0x0801ebb4
 80114a8:	0801eb7c 	.word	0x0801eb7c
 80114ac:	2000a634 	.word	0x2000a634
 80114b0:	0801ebd8 	.word	0x0801ebd8
 80114b4:	080111b9 	.word	0x080111b9
 80114b8:	0801ebfc 	.word	0x0801ebfc

080114bc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80114bc:	b480      	push	{r7}
 80114be:	b083      	sub	sp, #12
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	4603      	mov	r3, r0
 80114c4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80114c6:	88fb      	ldrh	r3, [r7, #6]
 80114c8:	021b      	lsls	r3, r3, #8
 80114ca:	b21a      	sxth	r2, r3
 80114cc:	88fb      	ldrh	r3, [r7, #6]
 80114ce:	0a1b      	lsrs	r3, r3, #8
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	b21b      	sxth	r3, r3
 80114d4:	4313      	orrs	r3, r2
 80114d6:	b21b      	sxth	r3, r3
 80114d8:	b29b      	uxth	r3, r3
}
 80114da:	4618      	mov	r0, r3
 80114dc:	370c      	adds	r7, #12
 80114de:	46bd      	mov	sp, r7
 80114e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e4:	4770      	bx	lr

080114e6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80114e6:	b480      	push	{r7}
 80114e8:	b083      	sub	sp, #12
 80114ea:	af00      	add	r7, sp, #0
 80114ec:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	061a      	lsls	r2, r3, #24
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	021b      	lsls	r3, r3, #8
 80114f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80114fa:	431a      	orrs	r2, r3
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	0a1b      	lsrs	r3, r3, #8
 8011500:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011504:	431a      	orrs	r2, r3
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	0e1b      	lsrs	r3, r3, #24
 801150a:	4313      	orrs	r3, r2
}
 801150c:	4618      	mov	r0, r3
 801150e:	370c      	adds	r7, #12
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr

08011518 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b082      	sub	sp, #8
 801151c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801151e:	2300      	movs	r3, #0
 8011520:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8011522:	f00a fffb 	bl	801c51c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8011526:	f000 f8d5 	bl	80116d4 <mem_init>
  memp_init();
 801152a:	f000 fc31 	bl	8011d90 <memp_init>
  pbuf_init();
  netif_init();
 801152e:	f000 fcf7 	bl	8011f20 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8011532:	f007 feeb 	bl	801930c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011536:	f001 fdb3 	bl	80130a0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801153a:	f007 fe2d 	bl	8019198 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801153e:	bf00      	nop
 8011540:	3708      	adds	r7, #8
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}
	...

08011548 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011548:	b480      	push	{r7}
 801154a:	b083      	sub	sp, #12
 801154c:	af00      	add	r7, sp, #0
 801154e:	4603      	mov	r3, r0
 8011550:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011552:	4b05      	ldr	r3, [pc, #20]	; (8011568 <ptr_to_mem+0x20>)
 8011554:	681a      	ldr	r2, [r3, #0]
 8011556:	88fb      	ldrh	r3, [r7, #6]
 8011558:	4413      	add	r3, r2
}
 801155a:	4618      	mov	r0, r3
 801155c:	370c      	adds	r7, #12
 801155e:	46bd      	mov	sp, r7
 8011560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011564:	4770      	bx	lr
 8011566:	bf00      	nop
 8011568:	2000aca4 	.word	0x2000aca4

0801156c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801156c:	b480      	push	{r7}
 801156e:	b083      	sub	sp, #12
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011574:	4b05      	ldr	r3, [pc, #20]	; (801158c <mem_to_ptr+0x20>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	687a      	ldr	r2, [r7, #4]
 801157a:	1ad3      	subs	r3, r2, r3
 801157c:	b29b      	uxth	r3, r3
}
 801157e:	4618      	mov	r0, r3
 8011580:	370c      	adds	r7, #12
 8011582:	46bd      	mov	sp, r7
 8011584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011588:	4770      	bx	lr
 801158a:	bf00      	nop
 801158c:	2000aca4 	.word	0x2000aca4

08011590 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011590:	b590      	push	{r4, r7, lr}
 8011592:	b085      	sub	sp, #20
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011598:	4b45      	ldr	r3, [pc, #276]	; (80116b0 <plug_holes+0x120>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	687a      	ldr	r2, [r7, #4]
 801159e:	429a      	cmp	r2, r3
 80115a0:	d206      	bcs.n	80115b0 <plug_holes+0x20>
 80115a2:	4b44      	ldr	r3, [pc, #272]	; (80116b4 <plug_holes+0x124>)
 80115a4:	f240 12df 	movw	r2, #479	; 0x1df
 80115a8:	4943      	ldr	r1, [pc, #268]	; (80116b8 <plug_holes+0x128>)
 80115aa:	4844      	ldr	r0, [pc, #272]	; (80116bc <plug_holes+0x12c>)
 80115ac:	f00b fa82 	bl	801cab4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80115b0:	4b43      	ldr	r3, [pc, #268]	; (80116c0 <plug_holes+0x130>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	687a      	ldr	r2, [r7, #4]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d306      	bcc.n	80115c8 <plug_holes+0x38>
 80115ba:	4b3e      	ldr	r3, [pc, #248]	; (80116b4 <plug_holes+0x124>)
 80115bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80115c0:	4940      	ldr	r1, [pc, #256]	; (80116c4 <plug_holes+0x134>)
 80115c2:	483e      	ldr	r0, [pc, #248]	; (80116bc <plug_holes+0x12c>)
 80115c4:	f00b fa76 	bl	801cab4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	791b      	ldrb	r3, [r3, #4]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d006      	beq.n	80115de <plug_holes+0x4e>
 80115d0:	4b38      	ldr	r3, [pc, #224]	; (80116b4 <plug_holes+0x124>)
 80115d2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80115d6:	493c      	ldr	r1, [pc, #240]	; (80116c8 <plug_holes+0x138>)
 80115d8:	4838      	ldr	r0, [pc, #224]	; (80116bc <plug_holes+0x12c>)
 80115da:	f00b fa6b 	bl	801cab4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	881b      	ldrh	r3, [r3, #0]
 80115e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80115e6:	d906      	bls.n	80115f6 <plug_holes+0x66>
 80115e8:	4b32      	ldr	r3, [pc, #200]	; (80116b4 <plug_holes+0x124>)
 80115ea:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80115ee:	4937      	ldr	r1, [pc, #220]	; (80116cc <plug_holes+0x13c>)
 80115f0:	4832      	ldr	r0, [pc, #200]	; (80116bc <plug_holes+0x12c>)
 80115f2:	f00b fa5f 	bl	801cab4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	881b      	ldrh	r3, [r3, #0]
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7ff ffa4 	bl	8011548 <ptr_to_mem>
 8011600:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8011602:	687a      	ldr	r2, [r7, #4]
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	429a      	cmp	r2, r3
 8011608:	d024      	beq.n	8011654 <plug_holes+0xc4>
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	791b      	ldrb	r3, [r3, #4]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d120      	bne.n	8011654 <plug_holes+0xc4>
 8011612:	4b2b      	ldr	r3, [pc, #172]	; (80116c0 <plug_holes+0x130>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	68fa      	ldr	r2, [r7, #12]
 8011618:	429a      	cmp	r2, r3
 801161a:	d01b      	beq.n	8011654 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801161c:	4b2c      	ldr	r3, [pc, #176]	; (80116d0 <plug_holes+0x140>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	68fa      	ldr	r2, [r7, #12]
 8011622:	429a      	cmp	r2, r3
 8011624:	d102      	bne.n	801162c <plug_holes+0x9c>
      lfree = mem;
 8011626:	4a2a      	ldr	r2, [pc, #168]	; (80116d0 <plug_holes+0x140>)
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	881a      	ldrh	r2, [r3, #0]
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	881b      	ldrh	r3, [r3, #0]
 8011638:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801163c:	d00a      	beq.n	8011654 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	881b      	ldrh	r3, [r3, #0]
 8011642:	4618      	mov	r0, r3
 8011644:	f7ff ff80 	bl	8011548 <ptr_to_mem>
 8011648:	4604      	mov	r4, r0
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f7ff ff8e 	bl	801156c <mem_to_ptr>
 8011650:	4603      	mov	r3, r0
 8011652:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	885b      	ldrh	r3, [r3, #2]
 8011658:	4618      	mov	r0, r3
 801165a:	f7ff ff75 	bl	8011548 <ptr_to_mem>
 801165e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011660:	68ba      	ldr	r2, [r7, #8]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	429a      	cmp	r2, r3
 8011666:	d01f      	beq.n	80116a8 <plug_holes+0x118>
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	791b      	ldrb	r3, [r3, #4]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d11b      	bne.n	80116a8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011670:	4b17      	ldr	r3, [pc, #92]	; (80116d0 <plug_holes+0x140>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	687a      	ldr	r2, [r7, #4]
 8011676:	429a      	cmp	r2, r3
 8011678:	d102      	bne.n	8011680 <plug_holes+0xf0>
      lfree = pmem;
 801167a:	4a15      	ldr	r2, [pc, #84]	; (80116d0 <plug_holes+0x140>)
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	881a      	ldrh	r2, [r3, #0]
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	881b      	ldrh	r3, [r3, #0]
 801168c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011690:	d00a      	beq.n	80116a8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	881b      	ldrh	r3, [r3, #0]
 8011696:	4618      	mov	r0, r3
 8011698:	f7ff ff56 	bl	8011548 <ptr_to_mem>
 801169c:	4604      	mov	r4, r0
 801169e:	68b8      	ldr	r0, [r7, #8]
 80116a0:	f7ff ff64 	bl	801156c <mem_to_ptr>
 80116a4:	4603      	mov	r3, r0
 80116a6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80116a8:	bf00      	nop
 80116aa:	3714      	adds	r7, #20
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd90      	pop	{r4, r7, pc}
 80116b0:	2000aca4 	.word	0x2000aca4
 80116b4:	0801ec0c 	.word	0x0801ec0c
 80116b8:	0801ec3c 	.word	0x0801ec3c
 80116bc:	0801ec54 	.word	0x0801ec54
 80116c0:	2000aca8 	.word	0x2000aca8
 80116c4:	0801ec7c 	.word	0x0801ec7c
 80116c8:	0801ec98 	.word	0x0801ec98
 80116cc:	0801ecb4 	.word	0x0801ecb4
 80116d0:	2000acb0 	.word	0x2000acb0

080116d4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b082      	sub	sp, #8
 80116d8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80116da:	4b1f      	ldr	r3, [pc, #124]	; (8011758 <mem_init+0x84>)
 80116dc:	3303      	adds	r3, #3
 80116de:	f023 0303 	bic.w	r3, r3, #3
 80116e2:	461a      	mov	r2, r3
 80116e4:	4b1d      	ldr	r3, [pc, #116]	; (801175c <mem_init+0x88>)
 80116e6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80116e8:	4b1c      	ldr	r3, [pc, #112]	; (801175c <mem_init+0x88>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80116f4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2200      	movs	r2, #0
 80116fa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2200      	movs	r2, #0
 8011700:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8011702:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8011706:	f7ff ff1f 	bl	8011548 <ptr_to_mem>
 801170a:	4603      	mov	r3, r0
 801170c:	4a14      	ldr	r2, [pc, #80]	; (8011760 <mem_init+0x8c>)
 801170e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011710:	4b13      	ldr	r3, [pc, #76]	; (8011760 <mem_init+0x8c>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	2201      	movs	r2, #1
 8011716:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011718:	4b11      	ldr	r3, [pc, #68]	; (8011760 <mem_init+0x8c>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011720:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8011722:	4b0f      	ldr	r3, [pc, #60]	; (8011760 <mem_init+0x8c>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801172a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801172c:	4b0b      	ldr	r3, [pc, #44]	; (801175c <mem_init+0x88>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	4a0c      	ldr	r2, [pc, #48]	; (8011764 <mem_init+0x90>)
 8011732:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011734:	480c      	ldr	r0, [pc, #48]	; (8011768 <mem_init+0x94>)
 8011736:	f00a feff 	bl	801c538 <sys_mutex_new>
 801173a:	4603      	mov	r3, r0
 801173c:	2b00      	cmp	r3, #0
 801173e:	d006      	beq.n	801174e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011740:	4b0a      	ldr	r3, [pc, #40]	; (801176c <mem_init+0x98>)
 8011742:	f240 221f 	movw	r2, #543	; 0x21f
 8011746:	490a      	ldr	r1, [pc, #40]	; (8011770 <mem_init+0x9c>)
 8011748:	480a      	ldr	r0, [pc, #40]	; (8011774 <mem_init+0xa0>)
 801174a:	f00b f9b3 	bl	801cab4 <iprintf>
  }
}
 801174e:	bf00      	nop
 8011750:	3708      	adds	r7, #8
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}
 8011756:	bf00      	nop
 8011758:	2000a650 	.word	0x2000a650
 801175c:	2000aca4 	.word	0x2000aca4
 8011760:	2000aca8 	.word	0x2000aca8
 8011764:	2000acb0 	.word	0x2000acb0
 8011768:	2000acac 	.word	0x2000acac
 801176c:	0801ec0c 	.word	0x0801ec0c
 8011770:	0801ece0 	.word	0x0801ece0
 8011774:	0801ec54 	.word	0x0801ec54

08011778 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b086      	sub	sp, #24
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f7ff fef3 	bl	801156c <mem_to_ptr>
 8011786:	4603      	mov	r3, r0
 8011788:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	881b      	ldrh	r3, [r3, #0]
 801178e:	4618      	mov	r0, r3
 8011790:	f7ff feda 	bl	8011548 <ptr_to_mem>
 8011794:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	885b      	ldrh	r3, [r3, #2]
 801179a:	4618      	mov	r0, r3
 801179c:	f7ff fed4 	bl	8011548 <ptr_to_mem>
 80117a0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	881b      	ldrh	r3, [r3, #0]
 80117a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80117aa:	d818      	bhi.n	80117de <mem_link_valid+0x66>
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	885b      	ldrh	r3, [r3, #2]
 80117b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80117b4:	d813      	bhi.n	80117de <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80117ba:	8afa      	ldrh	r2, [r7, #22]
 80117bc:	429a      	cmp	r2, r3
 80117be:	d004      	beq.n	80117ca <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	881b      	ldrh	r3, [r3, #0]
 80117c4:	8afa      	ldrh	r2, [r7, #22]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d109      	bne.n	80117de <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80117ca:	4b08      	ldr	r3, [pc, #32]	; (80117ec <mem_link_valid+0x74>)
 80117cc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80117ce:	693a      	ldr	r2, [r7, #16]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d006      	beq.n	80117e2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	885b      	ldrh	r3, [r3, #2]
 80117d8:	8afa      	ldrh	r2, [r7, #22]
 80117da:	429a      	cmp	r2, r3
 80117dc:	d001      	beq.n	80117e2 <mem_link_valid+0x6a>
    return 0;
 80117de:	2300      	movs	r3, #0
 80117e0:	e000      	b.n	80117e4 <mem_link_valid+0x6c>
  }
  return 1;
 80117e2:	2301      	movs	r3, #1
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3718      	adds	r7, #24
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	2000aca8 	.word	0x2000aca8

080117f0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b088      	sub	sp, #32
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d070      	beq.n	80118e0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f003 0303 	and.w	r3, r3, #3
 8011804:	2b00      	cmp	r3, #0
 8011806:	d00d      	beq.n	8011824 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011808:	4b37      	ldr	r3, [pc, #220]	; (80118e8 <mem_free+0xf8>)
 801180a:	f240 2273 	movw	r2, #627	; 0x273
 801180e:	4937      	ldr	r1, [pc, #220]	; (80118ec <mem_free+0xfc>)
 8011810:	4837      	ldr	r0, [pc, #220]	; (80118f0 <mem_free+0x100>)
 8011812:	f00b f94f 	bl	801cab4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011816:	f00a feed 	bl	801c5f4 <sys_arch_protect>
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	68f8      	ldr	r0, [r7, #12]
 801181e:	f00a fef7 	bl	801c610 <sys_arch_unprotect>
    return;
 8011822:	e05e      	b.n	80118e2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	3b08      	subs	r3, #8
 8011828:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801182a:	4b32      	ldr	r3, [pc, #200]	; (80118f4 <mem_free+0x104>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	69fa      	ldr	r2, [r7, #28]
 8011830:	429a      	cmp	r2, r3
 8011832:	d306      	bcc.n	8011842 <mem_free+0x52>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f103 020c 	add.w	r2, r3, #12
 801183a:	4b2f      	ldr	r3, [pc, #188]	; (80118f8 <mem_free+0x108>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	429a      	cmp	r2, r3
 8011840:	d90d      	bls.n	801185e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011842:	4b29      	ldr	r3, [pc, #164]	; (80118e8 <mem_free+0xf8>)
 8011844:	f240 227f 	movw	r2, #639	; 0x27f
 8011848:	492c      	ldr	r1, [pc, #176]	; (80118fc <mem_free+0x10c>)
 801184a:	4829      	ldr	r0, [pc, #164]	; (80118f0 <mem_free+0x100>)
 801184c:	f00b f932 	bl	801cab4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011850:	f00a fed0 	bl	801c5f4 <sys_arch_protect>
 8011854:	6138      	str	r0, [r7, #16]
 8011856:	6938      	ldr	r0, [r7, #16]
 8011858:	f00a feda 	bl	801c610 <sys_arch_unprotect>
    return;
 801185c:	e041      	b.n	80118e2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801185e:	4828      	ldr	r0, [pc, #160]	; (8011900 <mem_free+0x110>)
 8011860:	f00a fe86 	bl	801c570 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011864:	69fb      	ldr	r3, [r7, #28]
 8011866:	791b      	ldrb	r3, [r3, #4]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d110      	bne.n	801188e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801186c:	4b1e      	ldr	r3, [pc, #120]	; (80118e8 <mem_free+0xf8>)
 801186e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8011872:	4924      	ldr	r1, [pc, #144]	; (8011904 <mem_free+0x114>)
 8011874:	481e      	ldr	r0, [pc, #120]	; (80118f0 <mem_free+0x100>)
 8011876:	f00b f91d 	bl	801cab4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801187a:	4821      	ldr	r0, [pc, #132]	; (8011900 <mem_free+0x110>)
 801187c:	f00a fe87 	bl	801c58e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011880:	f00a feb8 	bl	801c5f4 <sys_arch_protect>
 8011884:	6178      	str	r0, [r7, #20]
 8011886:	6978      	ldr	r0, [r7, #20]
 8011888:	f00a fec2 	bl	801c610 <sys_arch_unprotect>
    return;
 801188c:	e029      	b.n	80118e2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801188e:	69f8      	ldr	r0, [r7, #28]
 8011890:	f7ff ff72 	bl	8011778 <mem_link_valid>
 8011894:	4603      	mov	r3, r0
 8011896:	2b00      	cmp	r3, #0
 8011898:	d110      	bne.n	80118bc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801189a:	4b13      	ldr	r3, [pc, #76]	; (80118e8 <mem_free+0xf8>)
 801189c:	f240 2295 	movw	r2, #661	; 0x295
 80118a0:	4919      	ldr	r1, [pc, #100]	; (8011908 <mem_free+0x118>)
 80118a2:	4813      	ldr	r0, [pc, #76]	; (80118f0 <mem_free+0x100>)
 80118a4:	f00b f906 	bl	801cab4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80118a8:	4815      	ldr	r0, [pc, #84]	; (8011900 <mem_free+0x110>)
 80118aa:	f00a fe70 	bl	801c58e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80118ae:	f00a fea1 	bl	801c5f4 <sys_arch_protect>
 80118b2:	61b8      	str	r0, [r7, #24]
 80118b4:	69b8      	ldr	r0, [r7, #24]
 80118b6:	f00a feab 	bl	801c610 <sys_arch_unprotect>
    return;
 80118ba:	e012      	b.n	80118e2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80118bc:	69fb      	ldr	r3, [r7, #28]
 80118be:	2200      	movs	r2, #0
 80118c0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80118c2:	4b12      	ldr	r3, [pc, #72]	; (801190c <mem_free+0x11c>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	69fa      	ldr	r2, [r7, #28]
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d202      	bcs.n	80118d2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80118cc:	4a0f      	ldr	r2, [pc, #60]	; (801190c <mem_free+0x11c>)
 80118ce:	69fb      	ldr	r3, [r7, #28]
 80118d0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80118d2:	69f8      	ldr	r0, [r7, #28]
 80118d4:	f7ff fe5c 	bl	8011590 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80118d8:	4809      	ldr	r0, [pc, #36]	; (8011900 <mem_free+0x110>)
 80118da:	f00a fe58 	bl	801c58e <sys_mutex_unlock>
 80118de:	e000      	b.n	80118e2 <mem_free+0xf2>
    return;
 80118e0:	bf00      	nop
}
 80118e2:	3720      	adds	r7, #32
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}
 80118e8:	0801ec0c 	.word	0x0801ec0c
 80118ec:	0801ecfc 	.word	0x0801ecfc
 80118f0:	0801ec54 	.word	0x0801ec54
 80118f4:	2000aca4 	.word	0x2000aca4
 80118f8:	2000aca8 	.word	0x2000aca8
 80118fc:	0801ed20 	.word	0x0801ed20
 8011900:	2000acac 	.word	0x2000acac
 8011904:	0801ed3c 	.word	0x0801ed3c
 8011908:	0801ed64 	.word	0x0801ed64
 801190c:	2000acb0 	.word	0x2000acb0

08011910 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b088      	sub	sp, #32
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	460b      	mov	r3, r1
 801191a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801191c:	887b      	ldrh	r3, [r7, #2]
 801191e:	3303      	adds	r3, #3
 8011920:	b29b      	uxth	r3, r3
 8011922:	f023 0303 	bic.w	r3, r3, #3
 8011926:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011928:	8bfb      	ldrh	r3, [r7, #30]
 801192a:	2b0b      	cmp	r3, #11
 801192c:	d801      	bhi.n	8011932 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801192e:	230c      	movs	r3, #12
 8011930:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011932:	8bfb      	ldrh	r3, [r7, #30]
 8011934:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011938:	d803      	bhi.n	8011942 <mem_trim+0x32>
 801193a:	8bfa      	ldrh	r2, [r7, #30]
 801193c:	887b      	ldrh	r3, [r7, #2]
 801193e:	429a      	cmp	r2, r3
 8011940:	d201      	bcs.n	8011946 <mem_trim+0x36>
    return NULL;
 8011942:	2300      	movs	r3, #0
 8011944:	e0d8      	b.n	8011af8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011946:	4b6e      	ldr	r3, [pc, #440]	; (8011b00 <mem_trim+0x1f0>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	687a      	ldr	r2, [r7, #4]
 801194c:	429a      	cmp	r2, r3
 801194e:	d304      	bcc.n	801195a <mem_trim+0x4a>
 8011950:	4b6c      	ldr	r3, [pc, #432]	; (8011b04 <mem_trim+0x1f4>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	687a      	ldr	r2, [r7, #4]
 8011956:	429a      	cmp	r2, r3
 8011958:	d306      	bcc.n	8011968 <mem_trim+0x58>
 801195a:	4b6b      	ldr	r3, [pc, #428]	; (8011b08 <mem_trim+0x1f8>)
 801195c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011960:	496a      	ldr	r1, [pc, #424]	; (8011b0c <mem_trim+0x1fc>)
 8011962:	486b      	ldr	r0, [pc, #428]	; (8011b10 <mem_trim+0x200>)
 8011964:	f00b f8a6 	bl	801cab4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011968:	4b65      	ldr	r3, [pc, #404]	; (8011b00 <mem_trim+0x1f0>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	687a      	ldr	r2, [r7, #4]
 801196e:	429a      	cmp	r2, r3
 8011970:	d304      	bcc.n	801197c <mem_trim+0x6c>
 8011972:	4b64      	ldr	r3, [pc, #400]	; (8011b04 <mem_trim+0x1f4>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	687a      	ldr	r2, [r7, #4]
 8011978:	429a      	cmp	r2, r3
 801197a:	d307      	bcc.n	801198c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801197c:	f00a fe3a 	bl	801c5f4 <sys_arch_protect>
 8011980:	60b8      	str	r0, [r7, #8]
 8011982:	68b8      	ldr	r0, [r7, #8]
 8011984:	f00a fe44 	bl	801c610 <sys_arch_unprotect>
    return rmem;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	e0b5      	b.n	8011af8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	3b08      	subs	r3, #8
 8011990:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011992:	69b8      	ldr	r0, [r7, #24]
 8011994:	f7ff fdea 	bl	801156c <mem_to_ptr>
 8011998:	4603      	mov	r3, r0
 801199a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801199c:	69bb      	ldr	r3, [r7, #24]
 801199e:	881a      	ldrh	r2, [r3, #0]
 80119a0:	8afb      	ldrh	r3, [r7, #22]
 80119a2:	1ad3      	subs	r3, r2, r3
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	3b08      	subs	r3, #8
 80119a8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80119aa:	8bfa      	ldrh	r2, [r7, #30]
 80119ac:	8abb      	ldrh	r3, [r7, #20]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d906      	bls.n	80119c0 <mem_trim+0xb0>
 80119b2:	4b55      	ldr	r3, [pc, #340]	; (8011b08 <mem_trim+0x1f8>)
 80119b4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80119b8:	4956      	ldr	r1, [pc, #344]	; (8011b14 <mem_trim+0x204>)
 80119ba:	4855      	ldr	r0, [pc, #340]	; (8011b10 <mem_trim+0x200>)
 80119bc:	f00b f87a 	bl	801cab4 <iprintf>
  if (newsize > size) {
 80119c0:	8bfa      	ldrh	r2, [r7, #30]
 80119c2:	8abb      	ldrh	r3, [r7, #20]
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d901      	bls.n	80119cc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80119c8:	2300      	movs	r3, #0
 80119ca:	e095      	b.n	8011af8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80119cc:	8bfa      	ldrh	r2, [r7, #30]
 80119ce:	8abb      	ldrh	r3, [r7, #20]
 80119d0:	429a      	cmp	r2, r3
 80119d2:	d101      	bne.n	80119d8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	e08f      	b.n	8011af8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80119d8:	484f      	ldr	r0, [pc, #316]	; (8011b18 <mem_trim+0x208>)
 80119da:	f00a fdc9 	bl	801c570 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80119de:	69bb      	ldr	r3, [r7, #24]
 80119e0:	881b      	ldrh	r3, [r3, #0]
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7ff fdb0 	bl	8011548 <ptr_to_mem>
 80119e8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	791b      	ldrb	r3, [r3, #4]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d13f      	bne.n	8011a72 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80119f2:	69bb      	ldr	r3, [r7, #24]
 80119f4:	881b      	ldrh	r3, [r3, #0]
 80119f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80119fa:	d106      	bne.n	8011a0a <mem_trim+0xfa>
 80119fc:	4b42      	ldr	r3, [pc, #264]	; (8011b08 <mem_trim+0x1f8>)
 80119fe:	f240 22f5 	movw	r2, #757	; 0x2f5
 8011a02:	4946      	ldr	r1, [pc, #280]	; (8011b1c <mem_trim+0x20c>)
 8011a04:	4842      	ldr	r0, [pc, #264]	; (8011b10 <mem_trim+0x200>)
 8011a06:	f00b f855 	bl	801cab4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	881b      	ldrh	r3, [r3, #0]
 8011a0e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011a10:	8afa      	ldrh	r2, [r7, #22]
 8011a12:	8bfb      	ldrh	r3, [r7, #30]
 8011a14:	4413      	add	r3, r2
 8011a16:	b29b      	uxth	r3, r3
 8011a18:	3308      	adds	r3, #8
 8011a1a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011a1c:	4b40      	ldr	r3, [pc, #256]	; (8011b20 <mem_trim+0x210>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	693a      	ldr	r2, [r7, #16]
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d106      	bne.n	8011a34 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011a26:	89fb      	ldrh	r3, [r7, #14]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7ff fd8d 	bl	8011548 <ptr_to_mem>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	4a3b      	ldr	r2, [pc, #236]	; (8011b20 <mem_trim+0x210>)
 8011a32:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011a34:	89fb      	ldrh	r3, [r7, #14]
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7ff fd86 	bl	8011548 <ptr_to_mem>
 8011a3c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	2200      	movs	r2, #0
 8011a42:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011a44:	693b      	ldr	r3, [r7, #16]
 8011a46:	89ba      	ldrh	r2, [r7, #12]
 8011a48:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	8afa      	ldrh	r2, [r7, #22]
 8011a4e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011a50:	69bb      	ldr	r3, [r7, #24]
 8011a52:	89fa      	ldrh	r2, [r7, #14]
 8011a54:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	881b      	ldrh	r3, [r3, #0]
 8011a5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011a5e:	d047      	beq.n	8011af0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	881b      	ldrh	r3, [r3, #0]
 8011a64:	4618      	mov	r0, r3
 8011a66:	f7ff fd6f 	bl	8011548 <ptr_to_mem>
 8011a6a:	4602      	mov	r2, r0
 8011a6c:	89fb      	ldrh	r3, [r7, #14]
 8011a6e:	8053      	strh	r3, [r2, #2]
 8011a70:	e03e      	b.n	8011af0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011a72:	8bfb      	ldrh	r3, [r7, #30]
 8011a74:	f103 0214 	add.w	r2, r3, #20
 8011a78:	8abb      	ldrh	r3, [r7, #20]
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d838      	bhi.n	8011af0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011a7e:	8afa      	ldrh	r2, [r7, #22]
 8011a80:	8bfb      	ldrh	r3, [r7, #30]
 8011a82:	4413      	add	r3, r2
 8011a84:	b29b      	uxth	r3, r3
 8011a86:	3308      	adds	r3, #8
 8011a88:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	881b      	ldrh	r3, [r3, #0]
 8011a8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011a92:	d106      	bne.n	8011aa2 <mem_trim+0x192>
 8011a94:	4b1c      	ldr	r3, [pc, #112]	; (8011b08 <mem_trim+0x1f8>)
 8011a96:	f240 3216 	movw	r2, #790	; 0x316
 8011a9a:	4920      	ldr	r1, [pc, #128]	; (8011b1c <mem_trim+0x20c>)
 8011a9c:	481c      	ldr	r0, [pc, #112]	; (8011b10 <mem_trim+0x200>)
 8011a9e:	f00b f809 	bl	801cab4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011aa2:	89fb      	ldrh	r3, [r7, #14]
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f7ff fd4f 	bl	8011548 <ptr_to_mem>
 8011aaa:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011aac:	4b1c      	ldr	r3, [pc, #112]	; (8011b20 <mem_trim+0x210>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	693a      	ldr	r2, [r7, #16]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d202      	bcs.n	8011abc <mem_trim+0x1ac>
      lfree = mem2;
 8011ab6:	4a1a      	ldr	r2, [pc, #104]	; (8011b20 <mem_trim+0x210>)
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	2200      	movs	r2, #0
 8011ac0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011ac2:	69bb      	ldr	r3, [r7, #24]
 8011ac4:	881a      	ldrh	r2, [r3, #0]
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	8afa      	ldrh	r2, [r7, #22]
 8011ace:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011ad0:	69bb      	ldr	r3, [r7, #24]
 8011ad2:	89fa      	ldrh	r2, [r7, #14]
 8011ad4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	881b      	ldrh	r3, [r3, #0]
 8011ada:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011ade:	d007      	beq.n	8011af0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	881b      	ldrh	r3, [r3, #0]
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7ff fd2f 	bl	8011548 <ptr_to_mem>
 8011aea:	4602      	mov	r2, r0
 8011aec:	89fb      	ldrh	r3, [r7, #14]
 8011aee:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011af0:	4809      	ldr	r0, [pc, #36]	; (8011b18 <mem_trim+0x208>)
 8011af2:	f00a fd4c 	bl	801c58e <sys_mutex_unlock>
  return rmem;
 8011af6:	687b      	ldr	r3, [r7, #4]
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3720      	adds	r7, #32
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	2000aca4 	.word	0x2000aca4
 8011b04:	2000aca8 	.word	0x2000aca8
 8011b08:	0801ec0c 	.word	0x0801ec0c
 8011b0c:	0801ed98 	.word	0x0801ed98
 8011b10:	0801ec54 	.word	0x0801ec54
 8011b14:	0801edb0 	.word	0x0801edb0
 8011b18:	2000acac 	.word	0x2000acac
 8011b1c:	0801edd0 	.word	0x0801edd0
 8011b20:	2000acb0 	.word	0x2000acb0

08011b24 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b088      	sub	sp, #32
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011b2e:	88fb      	ldrh	r3, [r7, #6]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d101      	bne.n	8011b38 <mem_malloc+0x14>
    return NULL;
 8011b34:	2300      	movs	r3, #0
 8011b36:	e0e2      	b.n	8011cfe <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011b38:	88fb      	ldrh	r3, [r7, #6]
 8011b3a:	3303      	adds	r3, #3
 8011b3c:	b29b      	uxth	r3, r3
 8011b3e:	f023 0303 	bic.w	r3, r3, #3
 8011b42:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011b44:	8bbb      	ldrh	r3, [r7, #28]
 8011b46:	2b0b      	cmp	r3, #11
 8011b48:	d801      	bhi.n	8011b4e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011b4a:	230c      	movs	r3, #12
 8011b4c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011b4e:	8bbb      	ldrh	r3, [r7, #28]
 8011b50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011b54:	d803      	bhi.n	8011b5e <mem_malloc+0x3a>
 8011b56:	8bba      	ldrh	r2, [r7, #28]
 8011b58:	88fb      	ldrh	r3, [r7, #6]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d201      	bcs.n	8011b62 <mem_malloc+0x3e>
    return NULL;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	e0cd      	b.n	8011cfe <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011b62:	4869      	ldr	r0, [pc, #420]	; (8011d08 <mem_malloc+0x1e4>)
 8011b64:	f00a fd04 	bl	801c570 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011b68:	4b68      	ldr	r3, [pc, #416]	; (8011d0c <mem_malloc+0x1e8>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7ff fcfd 	bl	801156c <mem_to_ptr>
 8011b72:	4603      	mov	r3, r0
 8011b74:	83fb      	strh	r3, [r7, #30]
 8011b76:	e0b7      	b.n	8011ce8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011b78:	8bfb      	ldrh	r3, [r7, #30]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f7ff fce4 	bl	8011548 <ptr_to_mem>
 8011b80:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	791b      	ldrb	r3, [r3, #4]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	f040 80a7 	bne.w	8011cda <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	881b      	ldrh	r3, [r3, #0]
 8011b90:	461a      	mov	r2, r3
 8011b92:	8bfb      	ldrh	r3, [r7, #30]
 8011b94:	1ad3      	subs	r3, r2, r3
 8011b96:	f1a3 0208 	sub.w	r2, r3, #8
 8011b9a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	f0c0 809c 	bcc.w	8011cda <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	881b      	ldrh	r3, [r3, #0]
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	8bfb      	ldrh	r3, [r7, #30]
 8011baa:	1ad3      	subs	r3, r2, r3
 8011bac:	f1a3 0208 	sub.w	r2, r3, #8
 8011bb0:	8bbb      	ldrh	r3, [r7, #28]
 8011bb2:	3314      	adds	r3, #20
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d333      	bcc.n	8011c20 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011bb8:	8bfa      	ldrh	r2, [r7, #30]
 8011bba:	8bbb      	ldrh	r3, [r7, #28]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	3308      	adds	r3, #8
 8011bc2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011bc4:	8a7b      	ldrh	r3, [r7, #18]
 8011bc6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011bca:	d106      	bne.n	8011bda <mem_malloc+0xb6>
 8011bcc:	4b50      	ldr	r3, [pc, #320]	; (8011d10 <mem_malloc+0x1ec>)
 8011bce:	f240 3287 	movw	r2, #903	; 0x387
 8011bd2:	4950      	ldr	r1, [pc, #320]	; (8011d14 <mem_malloc+0x1f0>)
 8011bd4:	4850      	ldr	r0, [pc, #320]	; (8011d18 <mem_malloc+0x1f4>)
 8011bd6:	f00a ff6d 	bl	801cab4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011bda:	8a7b      	ldrh	r3, [r7, #18]
 8011bdc:	4618      	mov	r0, r3
 8011bde:	f7ff fcb3 	bl	8011548 <ptr_to_mem>
 8011be2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	2200      	movs	r2, #0
 8011be8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	881a      	ldrh	r2, [r3, #0]
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	8bfa      	ldrh	r2, [r7, #30]
 8011bf6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	8a7a      	ldrh	r2, [r7, #18]
 8011bfc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	2201      	movs	r2, #1
 8011c02:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	881b      	ldrh	r3, [r3, #0]
 8011c08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011c0c:	d00b      	beq.n	8011c26 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	881b      	ldrh	r3, [r3, #0]
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7ff fc98 	bl	8011548 <ptr_to_mem>
 8011c18:	4602      	mov	r2, r0
 8011c1a:	8a7b      	ldrh	r3, [r7, #18]
 8011c1c:	8053      	strh	r3, [r2, #2]
 8011c1e:	e002      	b.n	8011c26 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	2201      	movs	r2, #1
 8011c24:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011c26:	4b39      	ldr	r3, [pc, #228]	; (8011d0c <mem_malloc+0x1e8>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	697a      	ldr	r2, [r7, #20]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d127      	bne.n	8011c80 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011c30:	4b36      	ldr	r3, [pc, #216]	; (8011d0c <mem_malloc+0x1e8>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011c36:	e005      	b.n	8011c44 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011c38:	69bb      	ldr	r3, [r7, #24]
 8011c3a:	881b      	ldrh	r3, [r3, #0]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7ff fc83 	bl	8011548 <ptr_to_mem>
 8011c42:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011c44:	69bb      	ldr	r3, [r7, #24]
 8011c46:	791b      	ldrb	r3, [r3, #4]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d004      	beq.n	8011c56 <mem_malloc+0x132>
 8011c4c:	4b33      	ldr	r3, [pc, #204]	; (8011d1c <mem_malloc+0x1f8>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	69ba      	ldr	r2, [r7, #24]
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d1f0      	bne.n	8011c38 <mem_malloc+0x114>
          }
          lfree = cur;
 8011c56:	4a2d      	ldr	r2, [pc, #180]	; (8011d0c <mem_malloc+0x1e8>)
 8011c58:	69bb      	ldr	r3, [r7, #24]
 8011c5a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011c5c:	4b2b      	ldr	r3, [pc, #172]	; (8011d0c <mem_malloc+0x1e8>)
 8011c5e:	681a      	ldr	r2, [r3, #0]
 8011c60:	4b2e      	ldr	r3, [pc, #184]	; (8011d1c <mem_malloc+0x1f8>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d00b      	beq.n	8011c80 <mem_malloc+0x15c>
 8011c68:	4b28      	ldr	r3, [pc, #160]	; (8011d0c <mem_malloc+0x1e8>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	791b      	ldrb	r3, [r3, #4]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d006      	beq.n	8011c80 <mem_malloc+0x15c>
 8011c72:	4b27      	ldr	r3, [pc, #156]	; (8011d10 <mem_malloc+0x1ec>)
 8011c74:	f240 32b5 	movw	r2, #949	; 0x3b5
 8011c78:	4929      	ldr	r1, [pc, #164]	; (8011d20 <mem_malloc+0x1fc>)
 8011c7a:	4827      	ldr	r0, [pc, #156]	; (8011d18 <mem_malloc+0x1f4>)
 8011c7c:	f00a ff1a 	bl	801cab4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011c80:	4821      	ldr	r0, [pc, #132]	; (8011d08 <mem_malloc+0x1e4>)
 8011c82:	f00a fc84 	bl	801c58e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011c86:	8bba      	ldrh	r2, [r7, #28]
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	4413      	add	r3, r2
 8011c8c:	3308      	adds	r3, #8
 8011c8e:	4a23      	ldr	r2, [pc, #140]	; (8011d1c <mem_malloc+0x1f8>)
 8011c90:	6812      	ldr	r2, [r2, #0]
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d906      	bls.n	8011ca4 <mem_malloc+0x180>
 8011c96:	4b1e      	ldr	r3, [pc, #120]	; (8011d10 <mem_malloc+0x1ec>)
 8011c98:	f240 32b9 	movw	r2, #953	; 0x3b9
 8011c9c:	4921      	ldr	r1, [pc, #132]	; (8011d24 <mem_malloc+0x200>)
 8011c9e:	481e      	ldr	r0, [pc, #120]	; (8011d18 <mem_malloc+0x1f4>)
 8011ca0:	f00a ff08 	bl	801cab4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	f003 0303 	and.w	r3, r3, #3
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d006      	beq.n	8011cbc <mem_malloc+0x198>
 8011cae:	4b18      	ldr	r3, [pc, #96]	; (8011d10 <mem_malloc+0x1ec>)
 8011cb0:	f240 32bb 	movw	r2, #955	; 0x3bb
 8011cb4:	491c      	ldr	r1, [pc, #112]	; (8011d28 <mem_malloc+0x204>)
 8011cb6:	4818      	ldr	r0, [pc, #96]	; (8011d18 <mem_malloc+0x1f4>)
 8011cb8:	f00a fefc 	bl	801cab4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	f003 0303 	and.w	r3, r3, #3
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d006      	beq.n	8011cd4 <mem_malloc+0x1b0>
 8011cc6:	4b12      	ldr	r3, [pc, #72]	; (8011d10 <mem_malloc+0x1ec>)
 8011cc8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011ccc:	4917      	ldr	r1, [pc, #92]	; (8011d2c <mem_malloc+0x208>)
 8011cce:	4812      	ldr	r0, [pc, #72]	; (8011d18 <mem_malloc+0x1f4>)
 8011cd0:	f00a fef0 	bl	801cab4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	3308      	adds	r3, #8
 8011cd8:	e011      	b.n	8011cfe <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011cda:	8bfb      	ldrh	r3, [r7, #30]
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7ff fc33 	bl	8011548 <ptr_to_mem>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	881b      	ldrh	r3, [r3, #0]
 8011ce6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011ce8:	8bfa      	ldrh	r2, [r7, #30]
 8011cea:	8bbb      	ldrh	r3, [r7, #28]
 8011cec:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	f4ff af41 	bcc.w	8011b78 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011cf6:	4804      	ldr	r0, [pc, #16]	; (8011d08 <mem_malloc+0x1e4>)
 8011cf8:	f00a fc49 	bl	801c58e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011cfc:	2300      	movs	r3, #0
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	3720      	adds	r7, #32
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}
 8011d06:	bf00      	nop
 8011d08:	2000acac 	.word	0x2000acac
 8011d0c:	2000acb0 	.word	0x2000acb0
 8011d10:	0801ec0c 	.word	0x0801ec0c
 8011d14:	0801edd0 	.word	0x0801edd0
 8011d18:	0801ec54 	.word	0x0801ec54
 8011d1c:	2000aca8 	.word	0x2000aca8
 8011d20:	0801ede4 	.word	0x0801ede4
 8011d24:	0801ee00 	.word	0x0801ee00
 8011d28:	0801ee30 	.word	0x0801ee30
 8011d2c:	0801ee60 	.word	0x0801ee60

08011d30 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011d30:	b480      	push	{r7}
 8011d32:	b085      	sub	sp, #20
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	689b      	ldr	r3, [r3, #8]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	685b      	ldr	r3, [r3, #4]
 8011d44:	3303      	adds	r3, #3
 8011d46:	f023 0303 	bic.w	r3, r3, #3
 8011d4a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	60fb      	str	r3, [r7, #12]
 8011d50:	e011      	b.n	8011d76 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	689b      	ldr	r3, [r3, #8]
 8011d56:	681a      	ldr	r2, [r3, #0]
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	689b      	ldr	r3, [r3, #8]
 8011d60:	68ba      	ldr	r2, [r7, #8]
 8011d62:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	881b      	ldrh	r3, [r3, #0]
 8011d68:	461a      	mov	r2, r3
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	4413      	add	r3, r2
 8011d6e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	3301      	adds	r3, #1
 8011d74:	60fb      	str	r3, [r7, #12]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	885b      	ldrh	r3, [r3, #2]
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	4293      	cmp	r3, r2
 8011d80:	dbe7      	blt.n	8011d52 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011d82:	bf00      	nop
 8011d84:	bf00      	nop
 8011d86:	3714      	adds	r7, #20
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8e:	4770      	bx	lr

08011d90 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b082      	sub	sp, #8
 8011d94:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011d96:	2300      	movs	r3, #0
 8011d98:	80fb      	strh	r3, [r7, #6]
 8011d9a:	e009      	b.n	8011db0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011d9c:	88fb      	ldrh	r3, [r7, #6]
 8011d9e:	4a08      	ldr	r2, [pc, #32]	; (8011dc0 <memp_init+0x30>)
 8011da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7ff ffc3 	bl	8011d30 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011daa:	88fb      	ldrh	r3, [r7, #6]
 8011dac:	3301      	adds	r3, #1
 8011dae:	80fb      	strh	r3, [r7, #6]
 8011db0:	88fb      	ldrh	r3, [r7, #6]
 8011db2:	2b0c      	cmp	r3, #12
 8011db4:	d9f2      	bls.n	8011d9c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011db6:	bf00      	nop
 8011db8:	bf00      	nop
 8011dba:	3708      	adds	r7, #8
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	08021674 	.word	0x08021674

08011dc4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b084      	sub	sp, #16
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011dcc:	f00a fc12 	bl	801c5f4 <sys_arch_protect>
 8011dd0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	689b      	ldr	r3, [r3, #8]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011dda:	68bb      	ldr	r3, [r7, #8]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d015      	beq.n	8011e0c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	689b      	ldr	r3, [r3, #8]
 8011de4:	68ba      	ldr	r2, [r7, #8]
 8011de6:	6812      	ldr	r2, [r2, #0]
 8011de8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	f003 0303 	and.w	r3, r3, #3
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d006      	beq.n	8011e02 <do_memp_malloc_pool+0x3e>
 8011df4:	4b09      	ldr	r3, [pc, #36]	; (8011e1c <do_memp_malloc_pool+0x58>)
 8011df6:	f44f 728c 	mov.w	r2, #280	; 0x118
 8011dfa:	4909      	ldr	r1, [pc, #36]	; (8011e20 <do_memp_malloc_pool+0x5c>)
 8011dfc:	4809      	ldr	r0, [pc, #36]	; (8011e24 <do_memp_malloc_pool+0x60>)
 8011dfe:	f00a fe59 	bl	801cab4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011e02:	68f8      	ldr	r0, [r7, #12]
 8011e04:	f00a fc04 	bl	801c610 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011e08:	68bb      	ldr	r3, [r7, #8]
 8011e0a:	e003      	b.n	8011e14 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011e0c:	68f8      	ldr	r0, [r7, #12]
 8011e0e:	f00a fbff 	bl	801c610 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011e12:	2300      	movs	r3, #0
}
 8011e14:	4618      	mov	r0, r3
 8011e16:	3710      	adds	r7, #16
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}
 8011e1c:	0801ee84 	.word	0x0801ee84
 8011e20:	0801eeb4 	.word	0x0801eeb4
 8011e24:	0801eed8 	.word	0x0801eed8

08011e28 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b084      	sub	sp, #16
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	4603      	mov	r3, r0
 8011e30:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011e32:	79fb      	ldrb	r3, [r7, #7]
 8011e34:	2b0c      	cmp	r3, #12
 8011e36:	d908      	bls.n	8011e4a <memp_malloc+0x22>
 8011e38:	4b0a      	ldr	r3, [pc, #40]	; (8011e64 <memp_malloc+0x3c>)
 8011e3a:	f240 1257 	movw	r2, #343	; 0x157
 8011e3e:	490a      	ldr	r1, [pc, #40]	; (8011e68 <memp_malloc+0x40>)
 8011e40:	480a      	ldr	r0, [pc, #40]	; (8011e6c <memp_malloc+0x44>)
 8011e42:	f00a fe37 	bl	801cab4 <iprintf>
 8011e46:	2300      	movs	r3, #0
 8011e48:	e008      	b.n	8011e5c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011e4a:	79fb      	ldrb	r3, [r7, #7]
 8011e4c:	4a08      	ldr	r2, [pc, #32]	; (8011e70 <memp_malloc+0x48>)
 8011e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7ff ffb6 	bl	8011dc4 <do_memp_malloc_pool>
 8011e58:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3710      	adds	r7, #16
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}
 8011e64:	0801ee84 	.word	0x0801ee84
 8011e68:	0801ef14 	.word	0x0801ef14
 8011e6c:	0801eed8 	.word	0x0801eed8
 8011e70:	08021674 	.word	0x08021674

08011e74 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	f003 0303 	and.w	r3, r3, #3
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d006      	beq.n	8011e96 <do_memp_free_pool+0x22>
 8011e88:	4b0d      	ldr	r3, [pc, #52]	; (8011ec0 <do_memp_free_pool+0x4c>)
 8011e8a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8011e8e:	490d      	ldr	r1, [pc, #52]	; (8011ec4 <do_memp_free_pool+0x50>)
 8011e90:	480d      	ldr	r0, [pc, #52]	; (8011ec8 <do_memp_free_pool+0x54>)
 8011e92:	f00a fe0f 	bl	801cab4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8011e9a:	f00a fbab 	bl	801c5f4 <sys_arch_protect>
 8011e9e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	689b      	ldr	r3, [r3, #8]
 8011ea4:	681a      	ldr	r2, [r3, #0]
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	689b      	ldr	r3, [r3, #8]
 8011eae:	68fa      	ldr	r2, [r7, #12]
 8011eb0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011eb2:	68b8      	ldr	r0, [r7, #8]
 8011eb4:	f00a fbac 	bl	801c610 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011eb8:	bf00      	nop
 8011eba:	3710      	adds	r7, #16
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}
 8011ec0:	0801ee84 	.word	0x0801ee84
 8011ec4:	0801ef34 	.word	0x0801ef34
 8011ec8:	0801eed8 	.word	0x0801eed8

08011ecc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b082      	sub	sp, #8
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	6039      	str	r1, [r7, #0]
 8011ed6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011ed8:	79fb      	ldrb	r3, [r7, #7]
 8011eda:	2b0c      	cmp	r3, #12
 8011edc:	d907      	bls.n	8011eee <memp_free+0x22>
 8011ede:	4b0c      	ldr	r3, [pc, #48]	; (8011f10 <memp_free+0x44>)
 8011ee0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8011ee4:	490b      	ldr	r1, [pc, #44]	; (8011f14 <memp_free+0x48>)
 8011ee6:	480c      	ldr	r0, [pc, #48]	; (8011f18 <memp_free+0x4c>)
 8011ee8:	f00a fde4 	bl	801cab4 <iprintf>
 8011eec:	e00c      	b.n	8011f08 <memp_free+0x3c>

  if (mem == NULL) {
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d008      	beq.n	8011f06 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011ef4:	79fb      	ldrb	r3, [r7, #7]
 8011ef6:	4a09      	ldr	r2, [pc, #36]	; (8011f1c <memp_free+0x50>)
 8011ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011efc:	6839      	ldr	r1, [r7, #0]
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7ff ffb8 	bl	8011e74 <do_memp_free_pool>
 8011f04:	e000      	b.n	8011f08 <memp_free+0x3c>
    return;
 8011f06:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011f08:	3708      	adds	r7, #8
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	0801ee84 	.word	0x0801ee84
 8011f14:	0801ef54 	.word	0x0801ef54
 8011f18:	0801eed8 	.word	0x0801eed8
 8011f1c:	08021674 	.word	0x08021674

08011f20 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011f20:	b480      	push	{r7}
 8011f22:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011f24:	bf00      	nop
 8011f26:	46bd      	mov	sp, r7
 8011f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2c:	4770      	bx	lr
	...

08011f30 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b086      	sub	sp, #24
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	60f8      	str	r0, [r7, #12]
 8011f38:	60b9      	str	r1, [r7, #8]
 8011f3a:	607a      	str	r2, [r7, #4]
 8011f3c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d108      	bne.n	8011f56 <netif_add+0x26>
 8011f44:	4b57      	ldr	r3, [pc, #348]	; (80120a4 <netif_add+0x174>)
 8011f46:	f240 1227 	movw	r2, #295	; 0x127
 8011f4a:	4957      	ldr	r1, [pc, #348]	; (80120a8 <netif_add+0x178>)
 8011f4c:	4857      	ldr	r0, [pc, #348]	; (80120ac <netif_add+0x17c>)
 8011f4e:	f00a fdb1 	bl	801cab4 <iprintf>
 8011f52:	2300      	movs	r3, #0
 8011f54:	e0a2      	b.n	801209c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d108      	bne.n	8011f6e <netif_add+0x3e>
 8011f5c:	4b51      	ldr	r3, [pc, #324]	; (80120a4 <netif_add+0x174>)
 8011f5e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011f62:	4953      	ldr	r1, [pc, #332]	; (80120b0 <netif_add+0x180>)
 8011f64:	4851      	ldr	r0, [pc, #324]	; (80120ac <netif_add+0x17c>)
 8011f66:	f00a fda5 	bl	801cab4 <iprintf>
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	e096      	b.n	801209c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d101      	bne.n	8011f78 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011f74:	4b4f      	ldr	r3, [pc, #316]	; (80120b4 <netif_add+0x184>)
 8011f76:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d101      	bne.n	8011f82 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8011f7e:	4b4d      	ldr	r3, [pc, #308]	; (80120b4 <netif_add+0x184>)
 8011f80:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d101      	bne.n	8011f8c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011f88:	4b4a      	ldr	r3, [pc, #296]	; (80120b4 <netif_add+0x184>)
 8011f8a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	2200      	movs	r2, #0
 8011f90:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2200      	movs	r2, #0
 8011f96:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	4a45      	ldr	r2, [pc, #276]	; (80120b8 <netif_add+0x188>)
 8011fa2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	2200      	movs	r2, #0
 8011fae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	6a3a      	ldr	r2, [r7, #32]
 8011fbc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011fbe:	4b3f      	ldr	r3, [pc, #252]	; (80120bc <netif_add+0x18c>)
 8011fc0:	781a      	ldrb	r2, [r3, #0]
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011fcc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	687a      	ldr	r2, [r7, #4]
 8011fd2:	68b9      	ldr	r1, [r7, #8]
 8011fd4:	68f8      	ldr	r0, [r7, #12]
 8011fd6:	f000 f913 	bl	8012200 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fdc:	68f8      	ldr	r0, [r7, #12]
 8011fde:	4798      	blx	r3
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d001      	beq.n	8011fea <netif_add+0xba>
    return NULL;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	e058      	b.n	801209c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011ff0:	2bff      	cmp	r3, #255	; 0xff
 8011ff2:	d103      	bne.n	8011ffc <netif_add+0xcc>
        netif->num = 0;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012000:	4b2f      	ldr	r3, [pc, #188]	; (80120c0 <netif_add+0x190>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	617b      	str	r3, [r7, #20]
 8012006:	e02b      	b.n	8012060 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8012008:	697a      	ldr	r2, [r7, #20]
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	429a      	cmp	r2, r3
 801200e:	d106      	bne.n	801201e <netif_add+0xee>
 8012010:	4b24      	ldr	r3, [pc, #144]	; (80120a4 <netif_add+0x174>)
 8012012:	f240 128b 	movw	r2, #395	; 0x18b
 8012016:	492b      	ldr	r1, [pc, #172]	; (80120c4 <netif_add+0x194>)
 8012018:	4824      	ldr	r0, [pc, #144]	; (80120ac <netif_add+0x17c>)
 801201a:	f00a fd4b 	bl	801cab4 <iprintf>
        num_netifs++;
 801201e:	693b      	ldr	r3, [r7, #16]
 8012020:	3301      	adds	r3, #1
 8012022:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	2bff      	cmp	r3, #255	; 0xff
 8012028:	dd06      	ble.n	8012038 <netif_add+0x108>
 801202a:	4b1e      	ldr	r3, [pc, #120]	; (80120a4 <netif_add+0x174>)
 801202c:	f240 128d 	movw	r2, #397	; 0x18d
 8012030:	4925      	ldr	r1, [pc, #148]	; (80120c8 <netif_add+0x198>)
 8012032:	481e      	ldr	r0, [pc, #120]	; (80120ac <netif_add+0x17c>)
 8012034:	f00a fd3e 	bl	801cab4 <iprintf>
        if (netif2->num == netif->num) {
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012044:	429a      	cmp	r2, r3
 8012046:	d108      	bne.n	801205a <netif_add+0x12a>
          netif->num++;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801204e:	3301      	adds	r3, #1
 8012050:	b2da      	uxtb	r2, r3
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8012058:	e005      	b.n	8012066 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801205a:	697b      	ldr	r3, [r7, #20]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	617b      	str	r3, [r7, #20]
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d1d0      	bne.n	8012008 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8012066:	697b      	ldr	r3, [r7, #20]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d1be      	bne.n	8011fea <netif_add+0xba>
  }
  if (netif->num == 254) {
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012072:	2bfe      	cmp	r3, #254	; 0xfe
 8012074:	d103      	bne.n	801207e <netif_add+0x14e>
    netif_num = 0;
 8012076:	4b11      	ldr	r3, [pc, #68]	; (80120bc <netif_add+0x18c>)
 8012078:	2200      	movs	r2, #0
 801207a:	701a      	strb	r2, [r3, #0]
 801207c:	e006      	b.n	801208c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012084:	3301      	adds	r3, #1
 8012086:	b2da      	uxtb	r2, r3
 8012088:	4b0c      	ldr	r3, [pc, #48]	; (80120bc <netif_add+0x18c>)
 801208a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801208c:	4b0c      	ldr	r3, [pc, #48]	; (80120c0 <netif_add+0x190>)
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8012094:	4a0a      	ldr	r2, [pc, #40]	; (80120c0 <netif_add+0x190>)
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801209a:	68fb      	ldr	r3, [r7, #12]
}
 801209c:	4618      	mov	r0, r3
 801209e:	3718      	adds	r7, #24
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	0801ef70 	.word	0x0801ef70
 80120a8:	0801f004 	.word	0x0801f004
 80120ac:	0801efc0 	.word	0x0801efc0
 80120b0:	0801f020 	.word	0x0801f020
 80120b4:	080216e8 	.word	0x080216e8
 80120b8:	08012413 	.word	0x08012413
 80120bc:	2000dd88 	.word	0x2000dd88
 80120c0:	2000dd80 	.word	0x2000dd80
 80120c4:	0801f044 	.word	0x0801f044
 80120c8:	0801f058 	.word	0x0801f058

080120cc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b082      	sub	sp, #8
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80120d6:	6839      	ldr	r1, [r7, #0]
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f002 fd31 	bl	8014b40 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80120de:	6839      	ldr	r1, [r7, #0]
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f007 fdcd 	bl	8019c80 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80120e6:	bf00      	nop
 80120e8:	3708      	adds	r7, #8
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}
	...

080120f0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b086      	sub	sp, #24
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	60f8      	str	r0, [r7, #12]
 80120f8:	60b9      	str	r1, [r7, #8]
 80120fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d106      	bne.n	8012110 <netif_do_set_ipaddr+0x20>
 8012102:	4b1d      	ldr	r3, [pc, #116]	; (8012178 <netif_do_set_ipaddr+0x88>)
 8012104:	f240 12cb 	movw	r2, #459	; 0x1cb
 8012108:	491c      	ldr	r1, [pc, #112]	; (801217c <netif_do_set_ipaddr+0x8c>)
 801210a:	481d      	ldr	r0, [pc, #116]	; (8012180 <netif_do_set_ipaddr+0x90>)
 801210c:	f00a fcd2 	bl	801cab4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d106      	bne.n	8012124 <netif_do_set_ipaddr+0x34>
 8012116:	4b18      	ldr	r3, [pc, #96]	; (8012178 <netif_do_set_ipaddr+0x88>)
 8012118:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801211c:	4917      	ldr	r1, [pc, #92]	; (801217c <netif_do_set_ipaddr+0x8c>)
 801211e:	4818      	ldr	r0, [pc, #96]	; (8012180 <netif_do_set_ipaddr+0x90>)
 8012120:	f00a fcc8 	bl	801cab4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	681a      	ldr	r2, [r3, #0]
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	3304      	adds	r3, #4
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	429a      	cmp	r2, r3
 8012130:	d01c      	beq.n	801216c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	3304      	adds	r3, #4
 801213c:	681a      	ldr	r2, [r3, #0]
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8012142:	f107 0314 	add.w	r3, r7, #20
 8012146:	4619      	mov	r1, r3
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f7ff ffbf 	bl	80120cc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d002      	beq.n	801215a <netif_do_set_ipaddr+0x6a>
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	e000      	b.n	801215c <netif_do_set_ipaddr+0x6c>
 801215a:	2300      	movs	r3, #0
 801215c:	68fa      	ldr	r2, [r7, #12]
 801215e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012160:	2101      	movs	r1, #1
 8012162:	68f8      	ldr	r0, [r7, #12]
 8012164:	f000 f8d2 	bl	801230c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8012168:	2301      	movs	r3, #1
 801216a:	e000      	b.n	801216e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801216c:	2300      	movs	r3, #0
}
 801216e:	4618      	mov	r0, r3
 8012170:	3718      	adds	r7, #24
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	0801ef70 	.word	0x0801ef70
 801217c:	0801f088 	.word	0x0801f088
 8012180:	0801efc0 	.word	0x0801efc0

08012184 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012184:	b480      	push	{r7}
 8012186:	b085      	sub	sp, #20
 8012188:	af00      	add	r7, sp, #0
 801218a:	60f8      	str	r0, [r7, #12]
 801218c:	60b9      	str	r1, [r7, #8]
 801218e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	681a      	ldr	r2, [r3, #0]
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	3308      	adds	r3, #8
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	429a      	cmp	r2, r3
 801219c:	d00a      	beq.n	80121b4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801219e:	68bb      	ldr	r3, [r7, #8]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d002      	beq.n	80121aa <netif_do_set_netmask+0x26>
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	e000      	b.n	80121ac <netif_do_set_netmask+0x28>
 80121aa:	2300      	movs	r3, #0
 80121ac:	68fa      	ldr	r2, [r7, #12]
 80121ae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80121b0:	2301      	movs	r3, #1
 80121b2:	e000      	b.n	80121b6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80121b4:	2300      	movs	r3, #0
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3714      	adds	r7, #20
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr

080121c2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80121c2:	b480      	push	{r7}
 80121c4:	b085      	sub	sp, #20
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	60f8      	str	r0, [r7, #12]
 80121ca:	60b9      	str	r1, [r7, #8]
 80121cc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80121ce:	68bb      	ldr	r3, [r7, #8]
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	330c      	adds	r3, #12
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	429a      	cmp	r2, r3
 80121da:	d00a      	beq.n	80121f2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d002      	beq.n	80121e8 <netif_do_set_gw+0x26>
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	e000      	b.n	80121ea <netif_do_set_gw+0x28>
 80121e8:	2300      	movs	r3, #0
 80121ea:	68fa      	ldr	r2, [r7, #12]
 80121ec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80121ee:	2301      	movs	r3, #1
 80121f0:	e000      	b.n	80121f4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80121f2:	2300      	movs	r3, #0
}
 80121f4:	4618      	mov	r0, r3
 80121f6:	3714      	adds	r7, #20
 80121f8:	46bd      	mov	sp, r7
 80121fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fe:	4770      	bx	lr

08012200 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b088      	sub	sp, #32
 8012204:	af00      	add	r7, sp, #0
 8012206:	60f8      	str	r0, [r7, #12]
 8012208:	60b9      	str	r1, [r7, #8]
 801220a:	607a      	str	r2, [r7, #4]
 801220c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801220e:	2300      	movs	r3, #0
 8012210:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8012212:	2300      	movs	r3, #0
 8012214:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d101      	bne.n	8012220 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801221c:	4b1c      	ldr	r3, [pc, #112]	; (8012290 <netif_set_addr+0x90>)
 801221e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d101      	bne.n	801222a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8012226:	4b1a      	ldr	r3, [pc, #104]	; (8012290 <netif_set_addr+0x90>)
 8012228:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d101      	bne.n	8012234 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012230:	4b17      	ldr	r3, [pc, #92]	; (8012290 <netif_set_addr+0x90>)
 8012232:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d003      	beq.n	8012242 <netif_set_addr+0x42>
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d101      	bne.n	8012246 <netif_set_addr+0x46>
 8012242:	2301      	movs	r3, #1
 8012244:	e000      	b.n	8012248 <netif_set_addr+0x48>
 8012246:	2300      	movs	r3, #0
 8012248:	617b      	str	r3, [r7, #20]
  if (remove) {
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d006      	beq.n	801225e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012250:	f107 0310 	add.w	r3, r7, #16
 8012254:	461a      	mov	r2, r3
 8012256:	68b9      	ldr	r1, [r7, #8]
 8012258:	68f8      	ldr	r0, [r7, #12]
 801225a:	f7ff ff49 	bl	80120f0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801225e:	69fa      	ldr	r2, [r7, #28]
 8012260:	6879      	ldr	r1, [r7, #4]
 8012262:	68f8      	ldr	r0, [r7, #12]
 8012264:	f7ff ff8e 	bl	8012184 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8012268:	69ba      	ldr	r2, [r7, #24]
 801226a:	6839      	ldr	r1, [r7, #0]
 801226c:	68f8      	ldr	r0, [r7, #12]
 801226e:	f7ff ffa8 	bl	80121c2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d106      	bne.n	8012286 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012278:	f107 0310 	add.w	r3, r7, #16
 801227c:	461a      	mov	r2, r3
 801227e:	68b9      	ldr	r1, [r7, #8]
 8012280:	68f8      	ldr	r0, [r7, #12]
 8012282:	f7ff ff35 	bl	80120f0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8012286:	bf00      	nop
 8012288:	3720      	adds	r7, #32
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	080216e8 	.word	0x080216e8

08012294 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012294:	b480      	push	{r7}
 8012296:	b083      	sub	sp, #12
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801229c:	4a04      	ldr	r2, [pc, #16]	; (80122b0 <netif_set_default+0x1c>)
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80122a2:	bf00      	nop
 80122a4:	370c      	adds	r7, #12
 80122a6:	46bd      	mov	sp, r7
 80122a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ac:	4770      	bx	lr
 80122ae:	bf00      	nop
 80122b0:	2000dd84 	.word	0x2000dd84

080122b4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d107      	bne.n	80122d2 <netif_set_up+0x1e>
 80122c2:	4b0f      	ldr	r3, [pc, #60]	; (8012300 <netif_set_up+0x4c>)
 80122c4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80122c8:	490e      	ldr	r1, [pc, #56]	; (8012304 <netif_set_up+0x50>)
 80122ca:	480f      	ldr	r0, [pc, #60]	; (8012308 <netif_set_up+0x54>)
 80122cc:	f00a fbf2 	bl	801cab4 <iprintf>
 80122d0:	e013      	b.n	80122fa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80122d8:	f003 0301 	and.w	r3, r3, #1
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d10c      	bne.n	80122fa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80122e6:	f043 0301 	orr.w	r3, r3, #1
 80122ea:	b2da      	uxtb	r2, r3
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80122f2:	2103      	movs	r1, #3
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f000 f809 	bl	801230c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80122fa:	3708      	adds	r7, #8
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	0801ef70 	.word	0x0801ef70
 8012304:	0801f0f8 	.word	0x0801f0f8
 8012308:	0801efc0 	.word	0x0801efc0

0801230c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b082      	sub	sp, #8
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	460b      	mov	r3, r1
 8012316:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d106      	bne.n	801232c <netif_issue_reports+0x20>
 801231e:	4b18      	ldr	r3, [pc, #96]	; (8012380 <netif_issue_reports+0x74>)
 8012320:	f240 326d 	movw	r2, #877	; 0x36d
 8012324:	4917      	ldr	r1, [pc, #92]	; (8012384 <netif_issue_reports+0x78>)
 8012326:	4818      	ldr	r0, [pc, #96]	; (8012388 <netif_issue_reports+0x7c>)
 8012328:	f00a fbc4 	bl	801cab4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012332:	f003 0304 	and.w	r3, r3, #4
 8012336:	2b00      	cmp	r3, #0
 8012338:	d01e      	beq.n	8012378 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012340:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012344:	2b00      	cmp	r3, #0
 8012346:	d017      	beq.n	8012378 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012348:	78fb      	ldrb	r3, [r7, #3]
 801234a:	f003 0301 	and.w	r3, r3, #1
 801234e:	2b00      	cmp	r3, #0
 8012350:	d013      	beq.n	801237a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	3304      	adds	r3, #4
 8012356:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012358:	2b00      	cmp	r3, #0
 801235a:	d00e      	beq.n	801237a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012362:	f003 0308 	and.w	r3, r3, #8
 8012366:	2b00      	cmp	r3, #0
 8012368:	d007      	beq.n	801237a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	3304      	adds	r3, #4
 801236e:	4619      	mov	r1, r3
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f008 fbef 	bl	801ab54 <etharp_request>
 8012376:	e000      	b.n	801237a <netif_issue_reports+0x6e>
    return;
 8012378:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801237a:	3708      	adds	r7, #8
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	0801ef70 	.word	0x0801ef70
 8012384:	0801f114 	.word	0x0801f114
 8012388:	0801efc0 	.word	0x0801efc0

0801238c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d107      	bne.n	80123aa <netif_set_down+0x1e>
 801239a:	4b12      	ldr	r3, [pc, #72]	; (80123e4 <netif_set_down+0x58>)
 801239c:	f240 329b 	movw	r2, #923	; 0x39b
 80123a0:	4911      	ldr	r1, [pc, #68]	; (80123e8 <netif_set_down+0x5c>)
 80123a2:	4812      	ldr	r0, [pc, #72]	; (80123ec <netif_set_down+0x60>)
 80123a4:	f00a fb86 	bl	801cab4 <iprintf>
 80123a8:	e019      	b.n	80123de <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80123b0:	f003 0301 	and.w	r3, r3, #1
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d012      	beq.n	80123de <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80123be:	f023 0301 	bic.w	r3, r3, #1
 80123c2:	b2da      	uxtb	r2, r3
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80123d0:	f003 0308 	and.w	r3, r3, #8
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d002      	beq.n	80123de <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f007 ff79 	bl	801a2d0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80123de:	3708      	adds	r7, #8
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}
 80123e4:	0801ef70 	.word	0x0801ef70
 80123e8:	0801f138 	.word	0x0801f138
 80123ec:	0801efc0 	.word	0x0801efc0

080123f0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80123f0:	b480      	push	{r7}
 80123f2:	b083      	sub	sp, #12
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d002      	beq.n	8012406 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	683a      	ldr	r2, [r7, #0]
 8012404:	61da      	str	r2, [r3, #28]
  }
}
 8012406:	bf00      	nop
 8012408:	370c      	adds	r7, #12
 801240a:	46bd      	mov	sp, r7
 801240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012410:	4770      	bx	lr

08012412 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012412:	b480      	push	{r7}
 8012414:	b085      	sub	sp, #20
 8012416:	af00      	add	r7, sp, #0
 8012418:	60f8      	str	r0, [r7, #12]
 801241a:	60b9      	str	r1, [r7, #8]
 801241c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801241e:	f06f 030b 	mvn.w	r3, #11
}
 8012422:	4618      	mov	r0, r3
 8012424:	3714      	adds	r7, #20
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr
	...

08012430 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012430:	b480      	push	{r7}
 8012432:	b085      	sub	sp, #20
 8012434:	af00      	add	r7, sp, #0
 8012436:	4603      	mov	r3, r0
 8012438:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801243a:	79fb      	ldrb	r3, [r7, #7]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d013      	beq.n	8012468 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012440:	4b0d      	ldr	r3, [pc, #52]	; (8012478 <netif_get_by_index+0x48>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	60fb      	str	r3, [r7, #12]
 8012446:	e00c      	b.n	8012462 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801244e:	3301      	adds	r3, #1
 8012450:	b2db      	uxtb	r3, r3
 8012452:	79fa      	ldrb	r2, [r7, #7]
 8012454:	429a      	cmp	r2, r3
 8012456:	d101      	bne.n	801245c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	e006      	b.n	801246a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	60fb      	str	r3, [r7, #12]
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d1ef      	bne.n	8012448 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012468:	2300      	movs	r3, #0
}
 801246a:	4618      	mov	r0, r3
 801246c:	3714      	adds	r7, #20
 801246e:	46bd      	mov	sp, r7
 8012470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop
 8012478:	2000dd80 	.word	0x2000dd80

0801247c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b082      	sub	sp, #8
 8012480:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012482:	f00a f8b7 	bl	801c5f4 <sys_arch_protect>
 8012486:	6038      	str	r0, [r7, #0]
 8012488:	4b0d      	ldr	r3, [pc, #52]	; (80124c0 <pbuf_free_ooseq+0x44>)
 801248a:	2200      	movs	r2, #0
 801248c:	701a      	strb	r2, [r3, #0]
 801248e:	6838      	ldr	r0, [r7, #0]
 8012490:	f00a f8be 	bl	801c610 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012494:	4b0b      	ldr	r3, [pc, #44]	; (80124c4 <pbuf_free_ooseq+0x48>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	607b      	str	r3, [r7, #4]
 801249a:	e00a      	b.n	80124b2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d003      	beq.n	80124ac <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f002 fb89 	bl	8014bbc <tcp_free_ooseq>
      return;
 80124aa:	e005      	b.n	80124b8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	607b      	str	r3, [r7, #4]
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d1f1      	bne.n	801249c <pbuf_free_ooseq+0x20>
    }
  }
}
 80124b8:	3708      	adds	r7, #8
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	2000dd89 	.word	0x2000dd89
 80124c4:	2000dd98 	.word	0x2000dd98

080124c8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80124d0:	f7ff ffd4 	bl	801247c <pbuf_free_ooseq>
}
 80124d4:	bf00      	nop
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80124e2:	f00a f887 	bl	801c5f4 <sys_arch_protect>
 80124e6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80124e8:	4b0f      	ldr	r3, [pc, #60]	; (8012528 <pbuf_pool_is_empty+0x4c>)
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80124ee:	4b0e      	ldr	r3, [pc, #56]	; (8012528 <pbuf_pool_is_empty+0x4c>)
 80124f0:	2201      	movs	r2, #1
 80124f2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f00a f88b 	bl	801c610 <sys_arch_unprotect>

  if (!queued) {
 80124fa:	78fb      	ldrb	r3, [r7, #3]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d10f      	bne.n	8012520 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012500:	2100      	movs	r1, #0
 8012502:	480a      	ldr	r0, [pc, #40]	; (801252c <pbuf_pool_is_empty+0x50>)
 8012504:	f7fe ff3a 	bl	801137c <tcpip_try_callback>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	d008      	beq.n	8012520 <pbuf_pool_is_empty+0x44>
 801250e:	f00a f871 	bl	801c5f4 <sys_arch_protect>
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	4b04      	ldr	r3, [pc, #16]	; (8012528 <pbuf_pool_is_empty+0x4c>)
 8012516:	2200      	movs	r2, #0
 8012518:	701a      	strb	r2, [r3, #0]
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f00a f878 	bl	801c610 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012520:	bf00      	nop
 8012522:	3708      	adds	r7, #8
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}
 8012528:	2000dd89 	.word	0x2000dd89
 801252c:	080124c9 	.word	0x080124c9

08012530 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012530:	b480      	push	{r7}
 8012532:	b085      	sub	sp, #20
 8012534:	af00      	add	r7, sp, #0
 8012536:	60f8      	str	r0, [r7, #12]
 8012538:	60b9      	str	r1, [r7, #8]
 801253a:	4611      	mov	r1, r2
 801253c:	461a      	mov	r2, r3
 801253e:	460b      	mov	r3, r1
 8012540:	80fb      	strh	r3, [r7, #6]
 8012542:	4613      	mov	r3, r2
 8012544:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	2200      	movs	r2, #0
 801254a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	68ba      	ldr	r2, [r7, #8]
 8012550:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	88fa      	ldrh	r2, [r7, #6]
 8012556:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	88ba      	ldrh	r2, [r7, #4]
 801255c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801255e:	8b3b      	ldrh	r3, [r7, #24]
 8012560:	b2da      	uxtb	r2, r3
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	7f3a      	ldrb	r2, [r7, #28]
 801256a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2201      	movs	r2, #1
 8012570:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	2200      	movs	r2, #0
 8012576:	73da      	strb	r2, [r3, #15]
}
 8012578:	bf00      	nop
 801257a:	3714      	adds	r7, #20
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr

08012584 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b08c      	sub	sp, #48	; 0x30
 8012588:	af02      	add	r7, sp, #8
 801258a:	4603      	mov	r3, r0
 801258c:	71fb      	strb	r3, [r7, #7]
 801258e:	460b      	mov	r3, r1
 8012590:	80bb      	strh	r3, [r7, #4]
 8012592:	4613      	mov	r3, r2
 8012594:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012596:	79fb      	ldrb	r3, [r7, #7]
 8012598:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801259a:	887b      	ldrh	r3, [r7, #2]
 801259c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80125a0:	d07f      	beq.n	80126a2 <pbuf_alloc+0x11e>
 80125a2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80125a6:	f300 80c8 	bgt.w	801273a <pbuf_alloc+0x1b6>
 80125aa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80125ae:	d010      	beq.n	80125d2 <pbuf_alloc+0x4e>
 80125b0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80125b4:	f300 80c1 	bgt.w	801273a <pbuf_alloc+0x1b6>
 80125b8:	2b01      	cmp	r3, #1
 80125ba:	d002      	beq.n	80125c2 <pbuf_alloc+0x3e>
 80125bc:	2b41      	cmp	r3, #65	; 0x41
 80125be:	f040 80bc 	bne.w	801273a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80125c2:	887a      	ldrh	r2, [r7, #2]
 80125c4:	88bb      	ldrh	r3, [r7, #4]
 80125c6:	4619      	mov	r1, r3
 80125c8:	2000      	movs	r0, #0
 80125ca:	f000 f8d1 	bl	8012770 <pbuf_alloc_reference>
 80125ce:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80125d0:	e0bd      	b.n	801274e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80125d2:	2300      	movs	r3, #0
 80125d4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80125d6:	2300      	movs	r3, #0
 80125d8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80125da:	88bb      	ldrh	r3, [r7, #4]
 80125dc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80125de:	200c      	movs	r0, #12
 80125e0:	f7ff fc22 	bl	8011e28 <memp_malloc>
 80125e4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d109      	bne.n	8012600 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80125ec:	f7ff ff76 	bl	80124dc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80125f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d002      	beq.n	80125fc <pbuf_alloc+0x78>
            pbuf_free(p);
 80125f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125f8:	f000 faa8 	bl	8012b4c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80125fc:	2300      	movs	r3, #0
 80125fe:	e0a7      	b.n	8012750 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012600:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012602:	3303      	adds	r3, #3
 8012604:	b29b      	uxth	r3, r3
 8012606:	f023 0303 	bic.w	r3, r3, #3
 801260a:	b29b      	uxth	r3, r3
 801260c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8012610:	b29b      	uxth	r3, r3
 8012612:	8b7a      	ldrh	r2, [r7, #26]
 8012614:	4293      	cmp	r3, r2
 8012616:	bf28      	it	cs
 8012618:	4613      	movcs	r3, r2
 801261a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801261c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801261e:	3310      	adds	r3, #16
 8012620:	693a      	ldr	r2, [r7, #16]
 8012622:	4413      	add	r3, r2
 8012624:	3303      	adds	r3, #3
 8012626:	f023 0303 	bic.w	r3, r3, #3
 801262a:	4618      	mov	r0, r3
 801262c:	89f9      	ldrh	r1, [r7, #14]
 801262e:	8b7a      	ldrh	r2, [r7, #26]
 8012630:	2300      	movs	r3, #0
 8012632:	9301      	str	r3, [sp, #4]
 8012634:	887b      	ldrh	r3, [r7, #2]
 8012636:	9300      	str	r3, [sp, #0]
 8012638:	460b      	mov	r3, r1
 801263a:	4601      	mov	r1, r0
 801263c:	6938      	ldr	r0, [r7, #16]
 801263e:	f7ff ff77 	bl	8012530 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	f003 0303 	and.w	r3, r3, #3
 801264a:	2b00      	cmp	r3, #0
 801264c:	d006      	beq.n	801265c <pbuf_alloc+0xd8>
 801264e:	4b42      	ldr	r3, [pc, #264]	; (8012758 <pbuf_alloc+0x1d4>)
 8012650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012654:	4941      	ldr	r1, [pc, #260]	; (801275c <pbuf_alloc+0x1d8>)
 8012656:	4842      	ldr	r0, [pc, #264]	; (8012760 <pbuf_alloc+0x1dc>)
 8012658:	f00a fa2c 	bl	801cab4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801265c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801265e:	3303      	adds	r3, #3
 8012660:	f023 0303 	bic.w	r3, r3, #3
 8012664:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8012668:	d106      	bne.n	8012678 <pbuf_alloc+0xf4>
 801266a:	4b3b      	ldr	r3, [pc, #236]	; (8012758 <pbuf_alloc+0x1d4>)
 801266c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012670:	493c      	ldr	r1, [pc, #240]	; (8012764 <pbuf_alloc+0x1e0>)
 8012672:	483b      	ldr	r0, [pc, #236]	; (8012760 <pbuf_alloc+0x1dc>)
 8012674:	f00a fa1e 	bl	801cab4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267a:	2b00      	cmp	r3, #0
 801267c:	d102      	bne.n	8012684 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801267e:	693b      	ldr	r3, [r7, #16]
 8012680:	627b      	str	r3, [r7, #36]	; 0x24
 8012682:	e002      	b.n	801268a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012684:	69fb      	ldr	r3, [r7, #28]
 8012686:	693a      	ldr	r2, [r7, #16]
 8012688:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801268e:	8b7a      	ldrh	r2, [r7, #26]
 8012690:	89fb      	ldrh	r3, [r7, #14]
 8012692:	1ad3      	subs	r3, r2, r3
 8012694:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012696:	2300      	movs	r3, #0
 8012698:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801269a:	8b7b      	ldrh	r3, [r7, #26]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d19e      	bne.n	80125de <pbuf_alloc+0x5a>
      break;
 80126a0:	e055      	b.n	801274e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80126a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126a4:	3303      	adds	r3, #3
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	f023 0303 	bic.w	r3, r3, #3
 80126ac:	b29a      	uxth	r2, r3
 80126ae:	88bb      	ldrh	r3, [r7, #4]
 80126b0:	3303      	adds	r3, #3
 80126b2:	b29b      	uxth	r3, r3
 80126b4:	f023 0303 	bic.w	r3, r3, #3
 80126b8:	b29b      	uxth	r3, r3
 80126ba:	4413      	add	r3, r2
 80126bc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80126be:	8b3b      	ldrh	r3, [r7, #24]
 80126c0:	3310      	adds	r3, #16
 80126c2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80126c4:	8b3a      	ldrh	r2, [r7, #24]
 80126c6:	88bb      	ldrh	r3, [r7, #4]
 80126c8:	3303      	adds	r3, #3
 80126ca:	f023 0303 	bic.w	r3, r3, #3
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d306      	bcc.n	80126e0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80126d2:	8afa      	ldrh	r2, [r7, #22]
 80126d4:	88bb      	ldrh	r3, [r7, #4]
 80126d6:	3303      	adds	r3, #3
 80126d8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80126dc:	429a      	cmp	r2, r3
 80126de:	d201      	bcs.n	80126e4 <pbuf_alloc+0x160>
        return NULL;
 80126e0:	2300      	movs	r3, #0
 80126e2:	e035      	b.n	8012750 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80126e4:	8afb      	ldrh	r3, [r7, #22]
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7ff fa1c 	bl	8011b24 <mem_malloc>
 80126ec:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80126ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d101      	bne.n	80126f8 <pbuf_alloc+0x174>
        return NULL;
 80126f4:	2300      	movs	r3, #0
 80126f6:	e02b      	b.n	8012750 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80126f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126fa:	3310      	adds	r3, #16
 80126fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126fe:	4413      	add	r3, r2
 8012700:	3303      	adds	r3, #3
 8012702:	f023 0303 	bic.w	r3, r3, #3
 8012706:	4618      	mov	r0, r3
 8012708:	88b9      	ldrh	r1, [r7, #4]
 801270a:	88ba      	ldrh	r2, [r7, #4]
 801270c:	2300      	movs	r3, #0
 801270e:	9301      	str	r3, [sp, #4]
 8012710:	887b      	ldrh	r3, [r7, #2]
 8012712:	9300      	str	r3, [sp, #0]
 8012714:	460b      	mov	r3, r1
 8012716:	4601      	mov	r1, r0
 8012718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801271a:	f7ff ff09 	bl	8012530 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	f003 0303 	and.w	r3, r3, #3
 8012726:	2b00      	cmp	r3, #0
 8012728:	d010      	beq.n	801274c <pbuf_alloc+0x1c8>
 801272a:	4b0b      	ldr	r3, [pc, #44]	; (8012758 <pbuf_alloc+0x1d4>)
 801272c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8012730:	490d      	ldr	r1, [pc, #52]	; (8012768 <pbuf_alloc+0x1e4>)
 8012732:	480b      	ldr	r0, [pc, #44]	; (8012760 <pbuf_alloc+0x1dc>)
 8012734:	f00a f9be 	bl	801cab4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012738:	e008      	b.n	801274c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801273a:	4b07      	ldr	r3, [pc, #28]	; (8012758 <pbuf_alloc+0x1d4>)
 801273c:	f240 1227 	movw	r2, #295	; 0x127
 8012740:	490a      	ldr	r1, [pc, #40]	; (801276c <pbuf_alloc+0x1e8>)
 8012742:	4807      	ldr	r0, [pc, #28]	; (8012760 <pbuf_alloc+0x1dc>)
 8012744:	f00a f9b6 	bl	801cab4 <iprintf>
      return NULL;
 8012748:	2300      	movs	r3, #0
 801274a:	e001      	b.n	8012750 <pbuf_alloc+0x1cc>
      break;
 801274c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012750:	4618      	mov	r0, r3
 8012752:	3728      	adds	r7, #40	; 0x28
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}
 8012758:	0801f1a0 	.word	0x0801f1a0
 801275c:	0801f1d0 	.word	0x0801f1d0
 8012760:	0801f200 	.word	0x0801f200
 8012764:	0801f228 	.word	0x0801f228
 8012768:	0801f25c 	.word	0x0801f25c
 801276c:	0801f288 	.word	0x0801f288

08012770 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b086      	sub	sp, #24
 8012774:	af02      	add	r7, sp, #8
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	460b      	mov	r3, r1
 801277a:	807b      	strh	r3, [r7, #2]
 801277c:	4613      	mov	r3, r2
 801277e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012780:	883b      	ldrh	r3, [r7, #0]
 8012782:	2b41      	cmp	r3, #65	; 0x41
 8012784:	d009      	beq.n	801279a <pbuf_alloc_reference+0x2a>
 8012786:	883b      	ldrh	r3, [r7, #0]
 8012788:	2b01      	cmp	r3, #1
 801278a:	d006      	beq.n	801279a <pbuf_alloc_reference+0x2a>
 801278c:	4b0f      	ldr	r3, [pc, #60]	; (80127cc <pbuf_alloc_reference+0x5c>)
 801278e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8012792:	490f      	ldr	r1, [pc, #60]	; (80127d0 <pbuf_alloc_reference+0x60>)
 8012794:	480f      	ldr	r0, [pc, #60]	; (80127d4 <pbuf_alloc_reference+0x64>)
 8012796:	f00a f98d 	bl	801cab4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801279a:	200b      	movs	r0, #11
 801279c:	f7ff fb44 	bl	8011e28 <memp_malloc>
 80127a0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d101      	bne.n	80127ac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80127a8:	2300      	movs	r3, #0
 80127aa:	e00b      	b.n	80127c4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80127ac:	8879      	ldrh	r1, [r7, #2]
 80127ae:	887a      	ldrh	r2, [r7, #2]
 80127b0:	2300      	movs	r3, #0
 80127b2:	9301      	str	r3, [sp, #4]
 80127b4:	883b      	ldrh	r3, [r7, #0]
 80127b6:	9300      	str	r3, [sp, #0]
 80127b8:	460b      	mov	r3, r1
 80127ba:	6879      	ldr	r1, [r7, #4]
 80127bc:	68f8      	ldr	r0, [r7, #12]
 80127be:	f7ff feb7 	bl	8012530 <pbuf_init_alloced_pbuf>
  return p;
 80127c2:	68fb      	ldr	r3, [r7, #12]
}
 80127c4:	4618      	mov	r0, r3
 80127c6:	3710      	adds	r7, #16
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}
 80127cc:	0801f1a0 	.word	0x0801f1a0
 80127d0:	0801f2a4 	.word	0x0801f2a4
 80127d4:	0801f200 	.word	0x0801f200

080127d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b088      	sub	sp, #32
 80127dc:	af02      	add	r7, sp, #8
 80127de:	607b      	str	r3, [r7, #4]
 80127e0:	4603      	mov	r3, r0
 80127e2:	73fb      	strb	r3, [r7, #15]
 80127e4:	460b      	mov	r3, r1
 80127e6:	81bb      	strh	r3, [r7, #12]
 80127e8:	4613      	mov	r3, r2
 80127ea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80127ec:	7bfb      	ldrb	r3, [r7, #15]
 80127ee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80127f0:	8a7b      	ldrh	r3, [r7, #18]
 80127f2:	3303      	adds	r3, #3
 80127f4:	f023 0203 	bic.w	r2, r3, #3
 80127f8:	89bb      	ldrh	r3, [r7, #12]
 80127fa:	441a      	add	r2, r3
 80127fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127fe:	429a      	cmp	r2, r3
 8012800:	d901      	bls.n	8012806 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012802:	2300      	movs	r3, #0
 8012804:	e018      	b.n	8012838 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012806:	6a3b      	ldr	r3, [r7, #32]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d007      	beq.n	801281c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801280c:	8a7b      	ldrh	r3, [r7, #18]
 801280e:	3303      	adds	r3, #3
 8012810:	f023 0303 	bic.w	r3, r3, #3
 8012814:	6a3a      	ldr	r2, [r7, #32]
 8012816:	4413      	add	r3, r2
 8012818:	617b      	str	r3, [r7, #20]
 801281a:	e001      	b.n	8012820 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801281c:	2300      	movs	r3, #0
 801281e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012820:	6878      	ldr	r0, [r7, #4]
 8012822:	89b9      	ldrh	r1, [r7, #12]
 8012824:	89ba      	ldrh	r2, [r7, #12]
 8012826:	2302      	movs	r3, #2
 8012828:	9301      	str	r3, [sp, #4]
 801282a:	897b      	ldrh	r3, [r7, #10]
 801282c:	9300      	str	r3, [sp, #0]
 801282e:	460b      	mov	r3, r1
 8012830:	6979      	ldr	r1, [r7, #20]
 8012832:	f7ff fe7d 	bl	8012530 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012836:	687b      	ldr	r3, [r7, #4]
}
 8012838:	4618      	mov	r0, r3
 801283a:	3718      	adds	r7, #24
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}

08012840 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	460b      	mov	r3, r1
 801284a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d106      	bne.n	8012860 <pbuf_realloc+0x20>
 8012852:	4b3a      	ldr	r3, [pc, #232]	; (801293c <pbuf_realloc+0xfc>)
 8012854:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8012858:	4939      	ldr	r1, [pc, #228]	; (8012940 <pbuf_realloc+0x100>)
 801285a:	483a      	ldr	r0, [pc, #232]	; (8012944 <pbuf_realloc+0x104>)
 801285c:	f00a f92a 	bl	801cab4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	891b      	ldrh	r3, [r3, #8]
 8012864:	887a      	ldrh	r2, [r7, #2]
 8012866:	429a      	cmp	r2, r3
 8012868:	d263      	bcs.n	8012932 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	891a      	ldrh	r2, [r3, #8]
 801286e:	887b      	ldrh	r3, [r7, #2]
 8012870:	1ad3      	subs	r3, r2, r3
 8012872:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012874:	887b      	ldrh	r3, [r7, #2]
 8012876:	817b      	strh	r3, [r7, #10]
  q = p;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801287c:	e018      	b.n	80128b0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	895b      	ldrh	r3, [r3, #10]
 8012882:	897a      	ldrh	r2, [r7, #10]
 8012884:	1ad3      	subs	r3, r2, r3
 8012886:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	891a      	ldrh	r2, [r3, #8]
 801288c:	893b      	ldrh	r3, [r7, #8]
 801288e:	1ad3      	subs	r3, r2, r3
 8012890:	b29a      	uxth	r2, r3
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d106      	bne.n	80128b0 <pbuf_realloc+0x70>
 80128a2:	4b26      	ldr	r3, [pc, #152]	; (801293c <pbuf_realloc+0xfc>)
 80128a4:	f240 12af 	movw	r2, #431	; 0x1af
 80128a8:	4927      	ldr	r1, [pc, #156]	; (8012948 <pbuf_realloc+0x108>)
 80128aa:	4826      	ldr	r0, [pc, #152]	; (8012944 <pbuf_realloc+0x104>)
 80128ac:	f00a f902 	bl	801cab4 <iprintf>
  while (rem_len > q->len) {
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	895b      	ldrh	r3, [r3, #10]
 80128b4:	897a      	ldrh	r2, [r7, #10]
 80128b6:	429a      	cmp	r2, r3
 80128b8:	d8e1      	bhi.n	801287e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	7b1b      	ldrb	r3, [r3, #12]
 80128be:	f003 030f 	and.w	r3, r3, #15
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d121      	bne.n	801290a <pbuf_realloc+0xca>
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	895b      	ldrh	r3, [r3, #10]
 80128ca:	897a      	ldrh	r2, [r7, #10]
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d01c      	beq.n	801290a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	7b5b      	ldrb	r3, [r3, #13]
 80128d4:	f003 0302 	and.w	r3, r3, #2
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d116      	bne.n	801290a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	685a      	ldr	r2, [r3, #4]
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	1ad3      	subs	r3, r2, r3
 80128e4:	b29a      	uxth	r2, r3
 80128e6:	897b      	ldrh	r3, [r7, #10]
 80128e8:	4413      	add	r3, r2
 80128ea:	b29b      	uxth	r3, r3
 80128ec:	4619      	mov	r1, r3
 80128ee:	68f8      	ldr	r0, [r7, #12]
 80128f0:	f7ff f80e 	bl	8011910 <mem_trim>
 80128f4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d106      	bne.n	801290a <pbuf_realloc+0xca>
 80128fc:	4b0f      	ldr	r3, [pc, #60]	; (801293c <pbuf_realloc+0xfc>)
 80128fe:	f240 12bd 	movw	r2, #445	; 0x1bd
 8012902:	4912      	ldr	r1, [pc, #72]	; (801294c <pbuf_realloc+0x10c>)
 8012904:	480f      	ldr	r0, [pc, #60]	; (8012944 <pbuf_realloc+0x104>)
 8012906:	f00a f8d5 	bl	801cab4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	897a      	ldrh	r2, [r7, #10]
 801290e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	895a      	ldrh	r2, [r3, #10]
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d004      	beq.n	801292a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	4618      	mov	r0, r3
 8012926:	f000 f911 	bl	8012b4c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	2200      	movs	r2, #0
 801292e:	601a      	str	r2, [r3, #0]
 8012930:	e000      	b.n	8012934 <pbuf_realloc+0xf4>
    return;
 8012932:	bf00      	nop

}
 8012934:	3710      	adds	r7, #16
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}
 801293a:	bf00      	nop
 801293c:	0801f1a0 	.word	0x0801f1a0
 8012940:	0801f2b8 	.word	0x0801f2b8
 8012944:	0801f200 	.word	0x0801f200
 8012948:	0801f2d0 	.word	0x0801f2d0
 801294c:	0801f2e8 	.word	0x0801f2e8

08012950 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b086      	sub	sp, #24
 8012954:	af00      	add	r7, sp, #0
 8012956:	60f8      	str	r0, [r7, #12]
 8012958:	60b9      	str	r1, [r7, #8]
 801295a:	4613      	mov	r3, r2
 801295c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d106      	bne.n	8012972 <pbuf_add_header_impl+0x22>
 8012964:	4b2b      	ldr	r3, [pc, #172]	; (8012a14 <pbuf_add_header_impl+0xc4>)
 8012966:	f240 12df 	movw	r2, #479	; 0x1df
 801296a:	492b      	ldr	r1, [pc, #172]	; (8012a18 <pbuf_add_header_impl+0xc8>)
 801296c:	482b      	ldr	r0, [pc, #172]	; (8012a1c <pbuf_add_header_impl+0xcc>)
 801296e:	f00a f8a1 	bl	801cab4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d003      	beq.n	8012980 <pbuf_add_header_impl+0x30>
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801297e:	d301      	bcc.n	8012984 <pbuf_add_header_impl+0x34>
    return 1;
 8012980:	2301      	movs	r3, #1
 8012982:	e043      	b.n	8012a0c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012984:	68bb      	ldr	r3, [r7, #8]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d101      	bne.n	801298e <pbuf_add_header_impl+0x3e>
    return 0;
 801298a:	2300      	movs	r3, #0
 801298c:	e03e      	b.n	8012a0c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	891a      	ldrh	r2, [r3, #8]
 8012996:	8a7b      	ldrh	r3, [r7, #18]
 8012998:	4413      	add	r3, r2
 801299a:	b29b      	uxth	r3, r3
 801299c:	8a7a      	ldrh	r2, [r7, #18]
 801299e:	429a      	cmp	r2, r3
 80129a0:	d901      	bls.n	80129a6 <pbuf_add_header_impl+0x56>
    return 1;
 80129a2:	2301      	movs	r3, #1
 80129a4:	e032      	b.n	8012a0c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	7b1b      	ldrb	r3, [r3, #12]
 80129aa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80129ac:	8a3b      	ldrh	r3, [r7, #16]
 80129ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d00c      	beq.n	80129d0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	685a      	ldr	r2, [r3, #4]
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	425b      	negs	r3, r3
 80129be:	4413      	add	r3, r2
 80129c0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	3310      	adds	r3, #16
 80129c6:	697a      	ldr	r2, [r7, #20]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d20d      	bcs.n	80129e8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80129cc:	2301      	movs	r3, #1
 80129ce:	e01d      	b.n	8012a0c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80129d0:	79fb      	ldrb	r3, [r7, #7]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d006      	beq.n	80129e4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	685a      	ldr	r2, [r3, #4]
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	425b      	negs	r3, r3
 80129de:	4413      	add	r3, r2
 80129e0:	617b      	str	r3, [r7, #20]
 80129e2:	e001      	b.n	80129e8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80129e4:	2301      	movs	r3, #1
 80129e6:	e011      	b.n	8012a0c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	697a      	ldr	r2, [r7, #20]
 80129ec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	895a      	ldrh	r2, [r3, #10]
 80129f2:	8a7b      	ldrh	r3, [r7, #18]
 80129f4:	4413      	add	r3, r2
 80129f6:	b29a      	uxth	r2, r3
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	891a      	ldrh	r2, [r3, #8]
 8012a00:	8a7b      	ldrh	r3, [r7, #18]
 8012a02:	4413      	add	r3, r2
 8012a04:	b29a      	uxth	r2, r3
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	811a      	strh	r2, [r3, #8]


  return 0;
 8012a0a:	2300      	movs	r3, #0
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	3718      	adds	r7, #24
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	0801f1a0 	.word	0x0801f1a0
 8012a18:	0801f304 	.word	0x0801f304
 8012a1c:	0801f200 	.word	0x0801f200

08012a20 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	6839      	ldr	r1, [r7, #0]
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f7ff ff8e 	bl	8012950 <pbuf_add_header_impl>
 8012a34:	4603      	mov	r3, r0
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3708      	adds	r7, #8
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
	...

08012a40 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b084      	sub	sp, #16
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d106      	bne.n	8012a5e <pbuf_remove_header+0x1e>
 8012a50:	4b20      	ldr	r3, [pc, #128]	; (8012ad4 <pbuf_remove_header+0x94>)
 8012a52:	f240 224b 	movw	r2, #587	; 0x24b
 8012a56:	4920      	ldr	r1, [pc, #128]	; (8012ad8 <pbuf_remove_header+0x98>)
 8012a58:	4820      	ldr	r0, [pc, #128]	; (8012adc <pbuf_remove_header+0x9c>)
 8012a5a:	f00a f82b 	bl	801cab4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d003      	beq.n	8012a6c <pbuf_remove_header+0x2c>
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a6a:	d301      	bcc.n	8012a70 <pbuf_remove_header+0x30>
    return 1;
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	e02c      	b.n	8012aca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d101      	bne.n	8012a7a <pbuf_remove_header+0x3a>
    return 0;
 8012a76:	2300      	movs	r3, #0
 8012a78:	e027      	b.n	8012aca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	895b      	ldrh	r3, [r3, #10]
 8012a82:	89fa      	ldrh	r2, [r7, #14]
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d908      	bls.n	8012a9a <pbuf_remove_header+0x5a>
 8012a88:	4b12      	ldr	r3, [pc, #72]	; (8012ad4 <pbuf_remove_header+0x94>)
 8012a8a:	f240 2255 	movw	r2, #597	; 0x255
 8012a8e:	4914      	ldr	r1, [pc, #80]	; (8012ae0 <pbuf_remove_header+0xa0>)
 8012a90:	4812      	ldr	r0, [pc, #72]	; (8012adc <pbuf_remove_header+0x9c>)
 8012a92:	f00a f80f 	bl	801cab4 <iprintf>
 8012a96:	2301      	movs	r3, #1
 8012a98:	e017      	b.n	8012aca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	685a      	ldr	r2, [r3, #4]
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	441a      	add	r2, r3
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	895a      	ldrh	r2, [r3, #10]
 8012ab0:	89fb      	ldrh	r3, [r7, #14]
 8012ab2:	1ad3      	subs	r3, r2, r3
 8012ab4:	b29a      	uxth	r2, r3
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	891a      	ldrh	r2, [r3, #8]
 8012abe:	89fb      	ldrh	r3, [r7, #14]
 8012ac0:	1ad3      	subs	r3, r2, r3
 8012ac2:	b29a      	uxth	r2, r3
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012ac8:	2300      	movs	r3, #0
}
 8012aca:	4618      	mov	r0, r3
 8012acc:	3710      	adds	r7, #16
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
 8012ad2:	bf00      	nop
 8012ad4:	0801f1a0 	.word	0x0801f1a0
 8012ad8:	0801f304 	.word	0x0801f304
 8012adc:	0801f200 	.word	0x0801f200
 8012ae0:	0801f310 	.word	0x0801f310

08012ae4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b082      	sub	sp, #8
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	460b      	mov	r3, r1
 8012aee:	807b      	strh	r3, [r7, #2]
 8012af0:	4613      	mov	r3, r2
 8012af2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012af4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	da08      	bge.n	8012b0e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012afc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012b00:	425b      	negs	r3, r3
 8012b02:	4619      	mov	r1, r3
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f7ff ff9b 	bl	8012a40 <pbuf_remove_header>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	e007      	b.n	8012b1e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012b0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012b12:	787a      	ldrb	r2, [r7, #1]
 8012b14:	4619      	mov	r1, r3
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f7ff ff1a 	bl	8012950 <pbuf_add_header_impl>
 8012b1c:	4603      	mov	r3, r0
  }
}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3708      	adds	r7, #8
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}

08012b26 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012b26:	b580      	push	{r7, lr}
 8012b28:	b082      	sub	sp, #8
 8012b2a:	af00      	add	r7, sp, #0
 8012b2c:	6078      	str	r0, [r7, #4]
 8012b2e:	460b      	mov	r3, r1
 8012b30:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012b32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012b36:	2201      	movs	r2, #1
 8012b38:	4619      	mov	r1, r3
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f7ff ffd2 	bl	8012ae4 <pbuf_header_impl>
 8012b40:	4603      	mov	r3, r0
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3708      	adds	r7, #8
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}
	...

08012b4c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b088      	sub	sp, #32
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d10b      	bne.n	8012b72 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d106      	bne.n	8012b6e <pbuf_free+0x22>
 8012b60:	4b3b      	ldr	r3, [pc, #236]	; (8012c50 <pbuf_free+0x104>)
 8012b62:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012b66:	493b      	ldr	r1, [pc, #236]	; (8012c54 <pbuf_free+0x108>)
 8012b68:	483b      	ldr	r0, [pc, #236]	; (8012c58 <pbuf_free+0x10c>)
 8012b6a:	f009 ffa3 	bl	801cab4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	e069      	b.n	8012c46 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012b72:	2300      	movs	r3, #0
 8012b74:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012b76:	e062      	b.n	8012c3e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012b78:	f009 fd3c 	bl	801c5f4 <sys_arch_protect>
 8012b7c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	7b9b      	ldrb	r3, [r3, #14]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d106      	bne.n	8012b94 <pbuf_free+0x48>
 8012b86:	4b32      	ldr	r3, [pc, #200]	; (8012c50 <pbuf_free+0x104>)
 8012b88:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012b8c:	4933      	ldr	r1, [pc, #204]	; (8012c5c <pbuf_free+0x110>)
 8012b8e:	4832      	ldr	r0, [pc, #200]	; (8012c58 <pbuf_free+0x10c>)
 8012b90:	f009 ff90 	bl	801cab4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	7b9b      	ldrb	r3, [r3, #14]
 8012b98:	3b01      	subs	r3, #1
 8012b9a:	b2da      	uxtb	r2, r3
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	739a      	strb	r2, [r3, #14]
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	7b9b      	ldrb	r3, [r3, #14]
 8012ba4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012ba6:	69b8      	ldr	r0, [r7, #24]
 8012ba8:	f009 fd32 	bl	801c610 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012bac:	7dfb      	ldrb	r3, [r7, #23]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d143      	bne.n	8012c3a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	7b1b      	ldrb	r3, [r3, #12]
 8012bbc:	f003 030f 	and.w	r3, r3, #15
 8012bc0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	7b5b      	ldrb	r3, [r3, #13]
 8012bc6:	f003 0302 	and.w	r3, r3, #2
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d011      	beq.n	8012bf2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	691b      	ldr	r3, [r3, #16]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d106      	bne.n	8012be8 <pbuf_free+0x9c>
 8012bda:	4b1d      	ldr	r3, [pc, #116]	; (8012c50 <pbuf_free+0x104>)
 8012bdc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012be0:	491f      	ldr	r1, [pc, #124]	; (8012c60 <pbuf_free+0x114>)
 8012be2:	481d      	ldr	r0, [pc, #116]	; (8012c58 <pbuf_free+0x10c>)
 8012be4:	f009 ff66 	bl	801cab4 <iprintf>
        pc->custom_free_function(p);
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	691b      	ldr	r3, [r3, #16]
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	4798      	blx	r3
 8012bf0:	e01d      	b.n	8012c2e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012bf2:	7bfb      	ldrb	r3, [r7, #15]
 8012bf4:	2b02      	cmp	r3, #2
 8012bf6:	d104      	bne.n	8012c02 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012bf8:	6879      	ldr	r1, [r7, #4]
 8012bfa:	200c      	movs	r0, #12
 8012bfc:	f7ff f966 	bl	8011ecc <memp_free>
 8012c00:	e015      	b.n	8012c2e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012c02:	7bfb      	ldrb	r3, [r7, #15]
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d104      	bne.n	8012c12 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012c08:	6879      	ldr	r1, [r7, #4]
 8012c0a:	200b      	movs	r0, #11
 8012c0c:	f7ff f95e 	bl	8011ecc <memp_free>
 8012c10:	e00d      	b.n	8012c2e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012c12:	7bfb      	ldrb	r3, [r7, #15]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d103      	bne.n	8012c20 <pbuf_free+0xd4>
          mem_free(p);
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f7fe fde9 	bl	80117f0 <mem_free>
 8012c1e:	e006      	b.n	8012c2e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012c20:	4b0b      	ldr	r3, [pc, #44]	; (8012c50 <pbuf_free+0x104>)
 8012c22:	f240 320f 	movw	r2, #783	; 0x30f
 8012c26:	490f      	ldr	r1, [pc, #60]	; (8012c64 <pbuf_free+0x118>)
 8012c28:	480b      	ldr	r0, [pc, #44]	; (8012c58 <pbuf_free+0x10c>)
 8012c2a:	f009 ff43 	bl	801cab4 <iprintf>
        }
      }
      count++;
 8012c2e:	7ffb      	ldrb	r3, [r7, #31]
 8012c30:	3301      	adds	r3, #1
 8012c32:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012c34:	693b      	ldr	r3, [r7, #16]
 8012c36:	607b      	str	r3, [r7, #4]
 8012c38:	e001      	b.n	8012c3e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d199      	bne.n	8012b78 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012c44:	7ffb      	ldrb	r3, [r7, #31]
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	3720      	adds	r7, #32
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}
 8012c4e:	bf00      	nop
 8012c50:	0801f1a0 	.word	0x0801f1a0
 8012c54:	0801f304 	.word	0x0801f304
 8012c58:	0801f200 	.word	0x0801f200
 8012c5c:	0801f330 	.word	0x0801f330
 8012c60:	0801f348 	.word	0x0801f348
 8012c64:	0801f36c 	.word	0x0801f36c

08012c68 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b085      	sub	sp, #20
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012c70:	2300      	movs	r3, #0
 8012c72:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012c74:	e005      	b.n	8012c82 <pbuf_clen+0x1a>
    ++len;
 8012c76:	89fb      	ldrh	r3, [r7, #14]
 8012c78:	3301      	adds	r3, #1
 8012c7a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d1f6      	bne.n	8012c76 <pbuf_clen+0xe>
  }
  return len;
 8012c88:	89fb      	ldrh	r3, [r7, #14]
}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3714      	adds	r7, #20
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c94:	4770      	bx	lr
	...

08012c98 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b084      	sub	sp, #16
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d016      	beq.n	8012cd4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012ca6:	f009 fca5 	bl	801c5f4 <sys_arch_protect>
 8012caa:	60f8      	str	r0, [r7, #12]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	7b9b      	ldrb	r3, [r3, #14]
 8012cb0:	3301      	adds	r3, #1
 8012cb2:	b2da      	uxtb	r2, r3
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	739a      	strb	r2, [r3, #14]
 8012cb8:	68f8      	ldr	r0, [r7, #12]
 8012cba:	f009 fca9 	bl	801c610 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	7b9b      	ldrb	r3, [r3, #14]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d106      	bne.n	8012cd4 <pbuf_ref+0x3c>
 8012cc6:	4b05      	ldr	r3, [pc, #20]	; (8012cdc <pbuf_ref+0x44>)
 8012cc8:	f240 3242 	movw	r2, #834	; 0x342
 8012ccc:	4904      	ldr	r1, [pc, #16]	; (8012ce0 <pbuf_ref+0x48>)
 8012cce:	4805      	ldr	r0, [pc, #20]	; (8012ce4 <pbuf_ref+0x4c>)
 8012cd0:	f009 fef0 	bl	801cab4 <iprintf>
  }
}
 8012cd4:	bf00      	nop
 8012cd6:	3710      	adds	r7, #16
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}
 8012cdc:	0801f1a0 	.word	0x0801f1a0
 8012ce0:	0801f380 	.word	0x0801f380
 8012ce4:	0801f200 	.word	0x0801f200

08012ce8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b084      	sub	sp, #16
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
 8012cf0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d002      	beq.n	8012cfe <pbuf_cat+0x16>
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d107      	bne.n	8012d0e <pbuf_cat+0x26>
 8012cfe:	4b20      	ldr	r3, [pc, #128]	; (8012d80 <pbuf_cat+0x98>)
 8012d00:	f240 3259 	movw	r2, #857	; 0x359
 8012d04:	491f      	ldr	r1, [pc, #124]	; (8012d84 <pbuf_cat+0x9c>)
 8012d06:	4820      	ldr	r0, [pc, #128]	; (8012d88 <pbuf_cat+0xa0>)
 8012d08:	f009 fed4 	bl	801cab4 <iprintf>
 8012d0c:	e034      	b.n	8012d78 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	60fb      	str	r3, [r7, #12]
 8012d12:	e00a      	b.n	8012d2a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	891a      	ldrh	r2, [r3, #8]
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	891b      	ldrh	r3, [r3, #8]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	b29a      	uxth	r2, r3
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	60fb      	str	r3, [r7, #12]
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d1f0      	bne.n	8012d14 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	891a      	ldrh	r2, [r3, #8]
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	895b      	ldrh	r3, [r3, #10]
 8012d3a:	429a      	cmp	r2, r3
 8012d3c:	d006      	beq.n	8012d4c <pbuf_cat+0x64>
 8012d3e:	4b10      	ldr	r3, [pc, #64]	; (8012d80 <pbuf_cat+0x98>)
 8012d40:	f240 3262 	movw	r2, #866	; 0x362
 8012d44:	4911      	ldr	r1, [pc, #68]	; (8012d8c <pbuf_cat+0xa4>)
 8012d46:	4810      	ldr	r0, [pc, #64]	; (8012d88 <pbuf_cat+0xa0>)
 8012d48:	f009 feb4 	bl	801cab4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d006      	beq.n	8012d62 <pbuf_cat+0x7a>
 8012d54:	4b0a      	ldr	r3, [pc, #40]	; (8012d80 <pbuf_cat+0x98>)
 8012d56:	f240 3263 	movw	r2, #867	; 0x363
 8012d5a:	490d      	ldr	r1, [pc, #52]	; (8012d90 <pbuf_cat+0xa8>)
 8012d5c:	480a      	ldr	r0, [pc, #40]	; (8012d88 <pbuf_cat+0xa0>)
 8012d5e:	f009 fea9 	bl	801cab4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	891a      	ldrh	r2, [r3, #8]
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	891b      	ldrh	r3, [r3, #8]
 8012d6a:	4413      	add	r3, r2
 8012d6c:	b29a      	uxth	r2, r3
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	683a      	ldr	r2, [r7, #0]
 8012d76:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012d78:	3710      	adds	r7, #16
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	0801f1a0 	.word	0x0801f1a0
 8012d84:	0801f394 	.word	0x0801f394
 8012d88:	0801f200 	.word	0x0801f200
 8012d8c:	0801f3cc 	.word	0x0801f3cc
 8012d90:	0801f3fc 	.word	0x0801f3fc

08012d94 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b082      	sub	sp, #8
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8012d9e:	6839      	ldr	r1, [r7, #0]
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f7ff ffa1 	bl	8012ce8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8012da6:	6838      	ldr	r0, [r7, #0]
 8012da8:	f7ff ff76 	bl	8012c98 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8012dac:	bf00      	nop
 8012dae:	3708      	adds	r7, #8
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}

08012db4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b086      	sub	sp, #24
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	617b      	str	r3, [r7, #20]
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d008      	beq.n	8012dde <pbuf_copy+0x2a>
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d005      	beq.n	8012dde <pbuf_copy+0x2a>
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	891a      	ldrh	r2, [r3, #8]
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	891b      	ldrh	r3, [r3, #8]
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d209      	bcs.n	8012df2 <pbuf_copy+0x3e>
 8012dde:	4b57      	ldr	r3, [pc, #348]	; (8012f3c <pbuf_copy+0x188>)
 8012de0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8012de4:	4956      	ldr	r1, [pc, #344]	; (8012f40 <pbuf_copy+0x18c>)
 8012de6:	4857      	ldr	r0, [pc, #348]	; (8012f44 <pbuf_copy+0x190>)
 8012de8:	f009 fe64 	bl	801cab4 <iprintf>
 8012dec:	f06f 030f 	mvn.w	r3, #15
 8012df0:	e09f      	b.n	8012f32 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	895b      	ldrh	r3, [r3, #10]
 8012df6:	461a      	mov	r2, r3
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	1ad2      	subs	r2, r2, r3
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	895b      	ldrh	r3, [r3, #10]
 8012e00:	4619      	mov	r1, r3
 8012e02:	693b      	ldr	r3, [r7, #16]
 8012e04:	1acb      	subs	r3, r1, r3
 8012e06:	429a      	cmp	r2, r3
 8012e08:	d306      	bcc.n	8012e18 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	895b      	ldrh	r3, [r3, #10]
 8012e0e:	461a      	mov	r2, r3
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	1ad3      	subs	r3, r2, r3
 8012e14:	60fb      	str	r3, [r7, #12]
 8012e16:	e005      	b.n	8012e24 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	895b      	ldrh	r3, [r3, #10]
 8012e1c:	461a      	mov	r2, r3
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	1ad3      	subs	r3, r2, r3
 8012e22:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	685a      	ldr	r2, [r3, #4]
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	18d0      	adds	r0, r2, r3
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	685a      	ldr	r2, [r3, #4]
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	4413      	add	r3, r2
 8012e34:	68fa      	ldr	r2, [r7, #12]
 8012e36:	4619      	mov	r1, r3
 8012e38:	f009 fd2c 	bl	801c894 <memcpy>
    offset_to += len;
 8012e3c:	697a      	ldr	r2, [r7, #20]
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	4413      	add	r3, r2
 8012e42:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012e44:	693a      	ldr	r2, [r7, #16]
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	4413      	add	r3, r2
 8012e4a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	895b      	ldrh	r3, [r3, #10]
 8012e50:	461a      	mov	r2, r3
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	4293      	cmp	r3, r2
 8012e56:	d906      	bls.n	8012e66 <pbuf_copy+0xb2>
 8012e58:	4b38      	ldr	r3, [pc, #224]	; (8012f3c <pbuf_copy+0x188>)
 8012e5a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8012e5e:	493a      	ldr	r1, [pc, #232]	; (8012f48 <pbuf_copy+0x194>)
 8012e60:	4838      	ldr	r0, [pc, #224]	; (8012f44 <pbuf_copy+0x190>)
 8012e62:	f009 fe27 	bl	801cab4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	895b      	ldrh	r3, [r3, #10]
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	4293      	cmp	r3, r2
 8012e70:	d906      	bls.n	8012e80 <pbuf_copy+0xcc>
 8012e72:	4b32      	ldr	r3, [pc, #200]	; (8012f3c <pbuf_copy+0x188>)
 8012e74:	f240 32da 	movw	r2, #986	; 0x3da
 8012e78:	4934      	ldr	r1, [pc, #208]	; (8012f4c <pbuf_copy+0x198>)
 8012e7a:	4832      	ldr	r0, [pc, #200]	; (8012f44 <pbuf_copy+0x190>)
 8012e7c:	f009 fe1a 	bl	801cab4 <iprintf>
    if (offset_from >= p_from->len) {
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	895b      	ldrh	r3, [r3, #10]
 8012e84:	461a      	mov	r2, r3
 8012e86:	693b      	ldr	r3, [r7, #16]
 8012e88:	4293      	cmp	r3, r2
 8012e8a:	d304      	bcc.n	8012e96 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	895b      	ldrh	r3, [r3, #10]
 8012e9a:	461a      	mov	r2, r3
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	d114      	bne.n	8012ecc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d10c      	bne.n	8012ecc <pbuf_copy+0x118>
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d009      	beq.n	8012ecc <pbuf_copy+0x118>
 8012eb8:	4b20      	ldr	r3, [pc, #128]	; (8012f3c <pbuf_copy+0x188>)
 8012eba:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8012ebe:	4924      	ldr	r1, [pc, #144]	; (8012f50 <pbuf_copy+0x19c>)
 8012ec0:	4820      	ldr	r0, [pc, #128]	; (8012f44 <pbuf_copy+0x190>)
 8012ec2:	f009 fdf7 	bl	801cab4 <iprintf>
 8012ec6:	f06f 030f 	mvn.w	r3, #15
 8012eca:	e032      	b.n	8012f32 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d013      	beq.n	8012efa <pbuf_copy+0x146>
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	895a      	ldrh	r2, [r3, #10]
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	891b      	ldrh	r3, [r3, #8]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d10d      	bne.n	8012efa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d009      	beq.n	8012efa <pbuf_copy+0x146>
 8012ee6:	4b15      	ldr	r3, [pc, #84]	; (8012f3c <pbuf_copy+0x188>)
 8012ee8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8012eec:	4919      	ldr	r1, [pc, #100]	; (8012f54 <pbuf_copy+0x1a0>)
 8012eee:	4815      	ldr	r0, [pc, #84]	; (8012f44 <pbuf_copy+0x190>)
 8012ef0:	f009 fde0 	bl	801cab4 <iprintf>
 8012ef4:	f06f 0305 	mvn.w	r3, #5
 8012ef8:	e01b      	b.n	8012f32 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d013      	beq.n	8012f28 <pbuf_copy+0x174>
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	895a      	ldrh	r2, [r3, #10]
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	891b      	ldrh	r3, [r3, #8]
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d10d      	bne.n	8012f28 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d009      	beq.n	8012f28 <pbuf_copy+0x174>
 8012f14:	4b09      	ldr	r3, [pc, #36]	; (8012f3c <pbuf_copy+0x188>)
 8012f16:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012f1a:	490e      	ldr	r1, [pc, #56]	; (8012f54 <pbuf_copy+0x1a0>)
 8012f1c:	4809      	ldr	r0, [pc, #36]	; (8012f44 <pbuf_copy+0x190>)
 8012f1e:	f009 fdc9 	bl	801cab4 <iprintf>
 8012f22:	f06f 0305 	mvn.w	r3, #5
 8012f26:	e004      	b.n	8012f32 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	f47f af61 	bne.w	8012df2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012f30:	2300      	movs	r3, #0
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3718      	adds	r7, #24
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	0801f1a0 	.word	0x0801f1a0
 8012f40:	0801f448 	.word	0x0801f448
 8012f44:	0801f200 	.word	0x0801f200
 8012f48:	0801f478 	.word	0x0801f478
 8012f4c:	0801f490 	.word	0x0801f490
 8012f50:	0801f4ac 	.word	0x0801f4ac
 8012f54:	0801f4bc 	.word	0x0801f4bc

08012f58 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b088      	sub	sp, #32
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	4611      	mov	r1, r2
 8012f64:	461a      	mov	r2, r3
 8012f66:	460b      	mov	r3, r1
 8012f68:	80fb      	strh	r3, [r7, #6]
 8012f6a:	4613      	mov	r3, r2
 8012f6c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012f72:	2300      	movs	r3, #0
 8012f74:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d108      	bne.n	8012f8e <pbuf_copy_partial+0x36>
 8012f7c:	4b2b      	ldr	r3, [pc, #172]	; (801302c <pbuf_copy_partial+0xd4>)
 8012f7e:	f240 420a 	movw	r2, #1034	; 0x40a
 8012f82:	492b      	ldr	r1, [pc, #172]	; (8013030 <pbuf_copy_partial+0xd8>)
 8012f84:	482b      	ldr	r0, [pc, #172]	; (8013034 <pbuf_copy_partial+0xdc>)
 8012f86:	f009 fd95 	bl	801cab4 <iprintf>
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	e04a      	b.n	8013024 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d108      	bne.n	8012fa6 <pbuf_copy_partial+0x4e>
 8012f94:	4b25      	ldr	r3, [pc, #148]	; (801302c <pbuf_copy_partial+0xd4>)
 8012f96:	f240 420b 	movw	r2, #1035	; 0x40b
 8012f9a:	4927      	ldr	r1, [pc, #156]	; (8013038 <pbuf_copy_partial+0xe0>)
 8012f9c:	4825      	ldr	r0, [pc, #148]	; (8013034 <pbuf_copy_partial+0xdc>)
 8012f9e:	f009 fd89 	bl	801cab4 <iprintf>
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	e03e      	b.n	8013024 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	61fb      	str	r3, [r7, #28]
 8012faa:	e034      	b.n	8013016 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012fac:	88bb      	ldrh	r3, [r7, #4]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d00a      	beq.n	8012fc8 <pbuf_copy_partial+0x70>
 8012fb2:	69fb      	ldr	r3, [r7, #28]
 8012fb4:	895b      	ldrh	r3, [r3, #10]
 8012fb6:	88ba      	ldrh	r2, [r7, #4]
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d305      	bcc.n	8012fc8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012fbc:	69fb      	ldr	r3, [r7, #28]
 8012fbe:	895b      	ldrh	r3, [r3, #10]
 8012fc0:	88ba      	ldrh	r2, [r7, #4]
 8012fc2:	1ad3      	subs	r3, r2, r3
 8012fc4:	80bb      	strh	r3, [r7, #4]
 8012fc6:	e023      	b.n	8013010 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012fc8:	69fb      	ldr	r3, [r7, #28]
 8012fca:	895a      	ldrh	r2, [r3, #10]
 8012fcc:	88bb      	ldrh	r3, [r7, #4]
 8012fce:	1ad3      	subs	r3, r2, r3
 8012fd0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8012fd2:	8b3a      	ldrh	r2, [r7, #24]
 8012fd4:	88fb      	ldrh	r3, [r7, #6]
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d901      	bls.n	8012fde <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012fda:	88fb      	ldrh	r3, [r7, #6]
 8012fdc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012fde:	8b7b      	ldrh	r3, [r7, #26]
 8012fe0:	68ba      	ldr	r2, [r7, #8]
 8012fe2:	18d0      	adds	r0, r2, r3
 8012fe4:	69fb      	ldr	r3, [r7, #28]
 8012fe6:	685a      	ldr	r2, [r3, #4]
 8012fe8:	88bb      	ldrh	r3, [r7, #4]
 8012fea:	4413      	add	r3, r2
 8012fec:	8b3a      	ldrh	r2, [r7, #24]
 8012fee:	4619      	mov	r1, r3
 8012ff0:	f009 fc50 	bl	801c894 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012ff4:	8afa      	ldrh	r2, [r7, #22]
 8012ff6:	8b3b      	ldrh	r3, [r7, #24]
 8012ff8:	4413      	add	r3, r2
 8012ffa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012ffc:	8b7a      	ldrh	r2, [r7, #26]
 8012ffe:	8b3b      	ldrh	r3, [r7, #24]
 8013000:	4413      	add	r3, r2
 8013002:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013004:	88fa      	ldrh	r2, [r7, #6]
 8013006:	8b3b      	ldrh	r3, [r7, #24]
 8013008:	1ad3      	subs	r3, r2, r3
 801300a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801300c:	2300      	movs	r3, #0
 801300e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013010:	69fb      	ldr	r3, [r7, #28]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	61fb      	str	r3, [r7, #28]
 8013016:	88fb      	ldrh	r3, [r7, #6]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d002      	beq.n	8013022 <pbuf_copy_partial+0xca>
 801301c:	69fb      	ldr	r3, [r7, #28]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d1c4      	bne.n	8012fac <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8013022:	8afb      	ldrh	r3, [r7, #22]
}
 8013024:	4618      	mov	r0, r3
 8013026:	3720      	adds	r7, #32
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}
 801302c:	0801f1a0 	.word	0x0801f1a0
 8013030:	0801f4e8 	.word	0x0801f4e8
 8013034:	0801f200 	.word	0x0801f200
 8013038:	0801f508 	.word	0x0801f508

0801303c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b084      	sub	sp, #16
 8013040:	af00      	add	r7, sp, #0
 8013042:	4603      	mov	r3, r0
 8013044:	603a      	str	r2, [r7, #0]
 8013046:	71fb      	strb	r3, [r7, #7]
 8013048:	460b      	mov	r3, r1
 801304a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	8919      	ldrh	r1, [r3, #8]
 8013050:	88ba      	ldrh	r2, [r7, #4]
 8013052:	79fb      	ldrb	r3, [r7, #7]
 8013054:	4618      	mov	r0, r3
 8013056:	f7ff fa95 	bl	8012584 <pbuf_alloc>
 801305a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d101      	bne.n	8013066 <pbuf_clone+0x2a>
    return NULL;
 8013062:	2300      	movs	r3, #0
 8013064:	e011      	b.n	801308a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013066:	6839      	ldr	r1, [r7, #0]
 8013068:	68f8      	ldr	r0, [r7, #12]
 801306a:	f7ff fea3 	bl	8012db4 <pbuf_copy>
 801306e:	4603      	mov	r3, r0
 8013070:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8013072:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d006      	beq.n	8013088 <pbuf_clone+0x4c>
 801307a:	4b06      	ldr	r3, [pc, #24]	; (8013094 <pbuf_clone+0x58>)
 801307c:	f240 5224 	movw	r2, #1316	; 0x524
 8013080:	4905      	ldr	r1, [pc, #20]	; (8013098 <pbuf_clone+0x5c>)
 8013082:	4806      	ldr	r0, [pc, #24]	; (801309c <pbuf_clone+0x60>)
 8013084:	f009 fd16 	bl	801cab4 <iprintf>
  return q;
 8013088:	68fb      	ldr	r3, [r7, #12]
}
 801308a:	4618      	mov	r0, r3
 801308c:	3710      	adds	r7, #16
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}
 8013092:	bf00      	nop
 8013094:	0801f1a0 	.word	0x0801f1a0
 8013098:	0801f614 	.word	0x0801f614
 801309c:	0801f200 	.word	0x0801f200

080130a0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80130a4:	f009 fd1e 	bl	801cae4 <rand>
 80130a8:	4603      	mov	r3, r0
 80130aa:	b29b      	uxth	r3, r3
 80130ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80130b0:	b29b      	uxth	r3, r3
 80130b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80130b6:	b29a      	uxth	r2, r3
 80130b8:	4b01      	ldr	r3, [pc, #4]	; (80130c0 <tcp_init+0x20>)
 80130ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80130bc:	bf00      	nop
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	200002d4 	.word	0x200002d4

080130c4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	7d1b      	ldrb	r3, [r3, #20]
 80130d0:	2b01      	cmp	r3, #1
 80130d2:	d105      	bne.n	80130e0 <tcp_free+0x1c>
 80130d4:	4b06      	ldr	r3, [pc, #24]	; (80130f0 <tcp_free+0x2c>)
 80130d6:	22d4      	movs	r2, #212	; 0xd4
 80130d8:	4906      	ldr	r1, [pc, #24]	; (80130f4 <tcp_free+0x30>)
 80130da:	4807      	ldr	r0, [pc, #28]	; (80130f8 <tcp_free+0x34>)
 80130dc:	f009 fcea 	bl	801cab4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80130e0:	6879      	ldr	r1, [r7, #4]
 80130e2:	2001      	movs	r0, #1
 80130e4:	f7fe fef2 	bl	8011ecc <memp_free>
}
 80130e8:	bf00      	nop
 80130ea:	3708      	adds	r7, #8
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd80      	pop	{r7, pc}
 80130f0:	0801f6a0 	.word	0x0801f6a0
 80130f4:	0801f6d0 	.word	0x0801f6d0
 80130f8:	0801f6e4 	.word	0x0801f6e4

080130fc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	7d1b      	ldrb	r3, [r3, #20]
 8013108:	2b01      	cmp	r3, #1
 801310a:	d105      	bne.n	8013118 <tcp_free_listen+0x1c>
 801310c:	4b06      	ldr	r3, [pc, #24]	; (8013128 <tcp_free_listen+0x2c>)
 801310e:	22df      	movs	r2, #223	; 0xdf
 8013110:	4906      	ldr	r1, [pc, #24]	; (801312c <tcp_free_listen+0x30>)
 8013112:	4807      	ldr	r0, [pc, #28]	; (8013130 <tcp_free_listen+0x34>)
 8013114:	f009 fcce 	bl	801cab4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013118:	6879      	ldr	r1, [r7, #4]
 801311a:	2002      	movs	r0, #2
 801311c:	f7fe fed6 	bl	8011ecc <memp_free>
}
 8013120:	bf00      	nop
 8013122:	3708      	adds	r7, #8
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}
 8013128:	0801f6a0 	.word	0x0801f6a0
 801312c:	0801f70c 	.word	0x0801f70c
 8013130:	0801f6e4 	.word	0x0801f6e4

08013134 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013138:	f000 ffdc 	bl	80140f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801313c:	4b07      	ldr	r3, [pc, #28]	; (801315c <tcp_tmr+0x28>)
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	3301      	adds	r3, #1
 8013142:	b2da      	uxtb	r2, r3
 8013144:	4b05      	ldr	r3, [pc, #20]	; (801315c <tcp_tmr+0x28>)
 8013146:	701a      	strb	r2, [r3, #0]
 8013148:	4b04      	ldr	r3, [pc, #16]	; (801315c <tcp_tmr+0x28>)
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	f003 0301 	and.w	r3, r3, #1
 8013150:	2b00      	cmp	r3, #0
 8013152:	d001      	beq.n	8013158 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013154:	f000 fc8e 	bl	8013a74 <tcp_slowtmr>
  }
}
 8013158:	bf00      	nop
 801315a:	bd80      	pop	{r7, pc}
 801315c:	2000dda1 	.word	0x2000dda1

08013160 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b084      	sub	sp, #16
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
 8013168:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d105      	bne.n	801317c <tcp_remove_listener+0x1c>
 8013170:	4b0d      	ldr	r3, [pc, #52]	; (80131a8 <tcp_remove_listener+0x48>)
 8013172:	22ff      	movs	r2, #255	; 0xff
 8013174:	490d      	ldr	r1, [pc, #52]	; (80131ac <tcp_remove_listener+0x4c>)
 8013176:	480e      	ldr	r0, [pc, #56]	; (80131b0 <tcp_remove_listener+0x50>)
 8013178:	f009 fc9c 	bl	801cab4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	60fb      	str	r3, [r7, #12]
 8013180:	e00a      	b.n	8013198 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013186:	683a      	ldr	r2, [r7, #0]
 8013188:	429a      	cmp	r2, r3
 801318a:	d102      	bne.n	8013192 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	2200      	movs	r2, #0
 8013190:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	68db      	ldr	r3, [r3, #12]
 8013196:	60fb      	str	r3, [r7, #12]
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d1f1      	bne.n	8013182 <tcp_remove_listener+0x22>
    }
  }
}
 801319e:	bf00      	nop
 80131a0:	bf00      	nop
 80131a2:	3710      	adds	r7, #16
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}
 80131a8:	0801f6a0 	.word	0x0801f6a0
 80131ac:	0801f728 	.word	0x0801f728
 80131b0:	0801f6e4 	.word	0x0801f6e4

080131b4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b084      	sub	sp, #16
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d106      	bne.n	80131d0 <tcp_listen_closed+0x1c>
 80131c2:	4b14      	ldr	r3, [pc, #80]	; (8013214 <tcp_listen_closed+0x60>)
 80131c4:	f240 1211 	movw	r2, #273	; 0x111
 80131c8:	4913      	ldr	r1, [pc, #76]	; (8013218 <tcp_listen_closed+0x64>)
 80131ca:	4814      	ldr	r0, [pc, #80]	; (801321c <tcp_listen_closed+0x68>)
 80131cc:	f009 fc72 	bl	801cab4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	7d1b      	ldrb	r3, [r3, #20]
 80131d4:	2b01      	cmp	r3, #1
 80131d6:	d006      	beq.n	80131e6 <tcp_listen_closed+0x32>
 80131d8:	4b0e      	ldr	r3, [pc, #56]	; (8013214 <tcp_listen_closed+0x60>)
 80131da:	f44f 7289 	mov.w	r2, #274	; 0x112
 80131de:	4910      	ldr	r1, [pc, #64]	; (8013220 <tcp_listen_closed+0x6c>)
 80131e0:	480e      	ldr	r0, [pc, #56]	; (801321c <tcp_listen_closed+0x68>)
 80131e2:	f009 fc67 	bl	801cab4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80131e6:	2301      	movs	r3, #1
 80131e8:	60fb      	str	r3, [r7, #12]
 80131ea:	e00b      	b.n	8013204 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80131ec:	4a0d      	ldr	r2, [pc, #52]	; (8013224 <tcp_listen_closed+0x70>)
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	6879      	ldr	r1, [r7, #4]
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7ff ffb1 	bl	8013160 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	3301      	adds	r3, #1
 8013202:	60fb      	str	r3, [r7, #12]
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	2b03      	cmp	r3, #3
 8013208:	d9f0      	bls.n	80131ec <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801320a:	bf00      	nop
 801320c:	bf00      	nop
 801320e:	3710      	adds	r7, #16
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}
 8013214:	0801f6a0 	.word	0x0801f6a0
 8013218:	0801f750 	.word	0x0801f750
 801321c:	0801f6e4 	.word	0x0801f6e4
 8013220:	0801f75c 	.word	0x0801f75c
 8013224:	080216c0 	.word	0x080216c0

08013228 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013228:	b5b0      	push	{r4, r5, r7, lr}
 801322a:	b088      	sub	sp, #32
 801322c:	af04      	add	r7, sp, #16
 801322e:	6078      	str	r0, [r7, #4]
 8013230:	460b      	mov	r3, r1
 8013232:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d106      	bne.n	8013248 <tcp_close_shutdown+0x20>
 801323a:	4b63      	ldr	r3, [pc, #396]	; (80133c8 <tcp_close_shutdown+0x1a0>)
 801323c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8013240:	4962      	ldr	r1, [pc, #392]	; (80133cc <tcp_close_shutdown+0x1a4>)
 8013242:	4863      	ldr	r0, [pc, #396]	; (80133d0 <tcp_close_shutdown+0x1a8>)
 8013244:	f009 fc36 	bl	801cab4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013248:	78fb      	ldrb	r3, [r7, #3]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d066      	beq.n	801331c <tcp_close_shutdown+0xf4>
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	7d1b      	ldrb	r3, [r3, #20]
 8013252:	2b04      	cmp	r3, #4
 8013254:	d003      	beq.n	801325e <tcp_close_shutdown+0x36>
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	7d1b      	ldrb	r3, [r3, #20]
 801325a:	2b07      	cmp	r3, #7
 801325c:	d15e      	bne.n	801331c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013262:	2b00      	cmp	r3, #0
 8013264:	d104      	bne.n	8013270 <tcp_close_shutdown+0x48>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801326a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801326e:	d055      	beq.n	801331c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	8b5b      	ldrh	r3, [r3, #26]
 8013274:	f003 0310 	and.w	r3, r3, #16
 8013278:	2b00      	cmp	r3, #0
 801327a:	d106      	bne.n	801328a <tcp_close_shutdown+0x62>
 801327c:	4b52      	ldr	r3, [pc, #328]	; (80133c8 <tcp_close_shutdown+0x1a0>)
 801327e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8013282:	4954      	ldr	r1, [pc, #336]	; (80133d4 <tcp_close_shutdown+0x1ac>)
 8013284:	4852      	ldr	r0, [pc, #328]	; (80133d0 <tcp_close_shutdown+0x1a8>)
 8013286:	f009 fc15 	bl	801cab4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013292:	687d      	ldr	r5, [r7, #4]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	3304      	adds	r3, #4
 8013298:	687a      	ldr	r2, [r7, #4]
 801329a:	8ad2      	ldrh	r2, [r2, #22]
 801329c:	6879      	ldr	r1, [r7, #4]
 801329e:	8b09      	ldrh	r1, [r1, #24]
 80132a0:	9102      	str	r1, [sp, #8]
 80132a2:	9201      	str	r2, [sp, #4]
 80132a4:	9300      	str	r3, [sp, #0]
 80132a6:	462b      	mov	r3, r5
 80132a8:	4622      	mov	r2, r4
 80132aa:	4601      	mov	r1, r0
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f005 fcf1 	bl	8018c94 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f001 face 	bl	8014854 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80132b8:	4b47      	ldr	r3, [pc, #284]	; (80133d8 <tcp_close_shutdown+0x1b0>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	687a      	ldr	r2, [r7, #4]
 80132be:	429a      	cmp	r2, r3
 80132c0:	d105      	bne.n	80132ce <tcp_close_shutdown+0xa6>
 80132c2:	4b45      	ldr	r3, [pc, #276]	; (80133d8 <tcp_close_shutdown+0x1b0>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	68db      	ldr	r3, [r3, #12]
 80132c8:	4a43      	ldr	r2, [pc, #268]	; (80133d8 <tcp_close_shutdown+0x1b0>)
 80132ca:	6013      	str	r3, [r2, #0]
 80132cc:	e013      	b.n	80132f6 <tcp_close_shutdown+0xce>
 80132ce:	4b42      	ldr	r3, [pc, #264]	; (80133d8 <tcp_close_shutdown+0x1b0>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	60fb      	str	r3, [r7, #12]
 80132d4:	e00c      	b.n	80132f0 <tcp_close_shutdown+0xc8>
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	687a      	ldr	r2, [r7, #4]
 80132dc:	429a      	cmp	r2, r3
 80132de:	d104      	bne.n	80132ea <tcp_close_shutdown+0xc2>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	68da      	ldr	r2, [r3, #12]
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	60da      	str	r2, [r3, #12]
 80132e8:	e005      	b.n	80132f6 <tcp_close_shutdown+0xce>
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	68db      	ldr	r3, [r3, #12]
 80132ee:	60fb      	str	r3, [r7, #12]
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d1ef      	bne.n	80132d6 <tcp_close_shutdown+0xae>
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2200      	movs	r2, #0
 80132fa:	60da      	str	r2, [r3, #12]
 80132fc:	4b37      	ldr	r3, [pc, #220]	; (80133dc <tcp_close_shutdown+0x1b4>)
 80132fe:	2201      	movs	r2, #1
 8013300:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8013302:	4b37      	ldr	r3, [pc, #220]	; (80133e0 <tcp_close_shutdown+0x1b8>)
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	687a      	ldr	r2, [r7, #4]
 8013308:	429a      	cmp	r2, r3
 801330a:	d102      	bne.n	8013312 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801330c:	f003 ff66 	bl	80171dc <tcp_trigger_input_pcb_close>
 8013310:	e002      	b.n	8013318 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f7ff fed6 	bl	80130c4 <tcp_free>
      }
      return ERR_OK;
 8013318:	2300      	movs	r3, #0
 801331a:	e050      	b.n	80133be <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	7d1b      	ldrb	r3, [r3, #20]
 8013320:	2b02      	cmp	r3, #2
 8013322:	d03b      	beq.n	801339c <tcp_close_shutdown+0x174>
 8013324:	2b02      	cmp	r3, #2
 8013326:	dc44      	bgt.n	80133b2 <tcp_close_shutdown+0x18a>
 8013328:	2b00      	cmp	r3, #0
 801332a:	d002      	beq.n	8013332 <tcp_close_shutdown+0x10a>
 801332c:	2b01      	cmp	r3, #1
 801332e:	d02a      	beq.n	8013386 <tcp_close_shutdown+0x15e>
 8013330:	e03f      	b.n	80133b2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	8adb      	ldrh	r3, [r3, #22]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d021      	beq.n	801337e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801333a:	4b2a      	ldr	r3, [pc, #168]	; (80133e4 <tcp_close_shutdown+0x1bc>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	687a      	ldr	r2, [r7, #4]
 8013340:	429a      	cmp	r2, r3
 8013342:	d105      	bne.n	8013350 <tcp_close_shutdown+0x128>
 8013344:	4b27      	ldr	r3, [pc, #156]	; (80133e4 <tcp_close_shutdown+0x1bc>)
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	4a26      	ldr	r2, [pc, #152]	; (80133e4 <tcp_close_shutdown+0x1bc>)
 801334c:	6013      	str	r3, [r2, #0]
 801334e:	e013      	b.n	8013378 <tcp_close_shutdown+0x150>
 8013350:	4b24      	ldr	r3, [pc, #144]	; (80133e4 <tcp_close_shutdown+0x1bc>)
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	60bb      	str	r3, [r7, #8]
 8013356:	e00c      	b.n	8013372 <tcp_close_shutdown+0x14a>
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	68db      	ldr	r3, [r3, #12]
 801335c:	687a      	ldr	r2, [r7, #4]
 801335e:	429a      	cmp	r2, r3
 8013360:	d104      	bne.n	801336c <tcp_close_shutdown+0x144>
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	68da      	ldr	r2, [r3, #12]
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	60da      	str	r2, [r3, #12]
 801336a:	e005      	b.n	8013378 <tcp_close_shutdown+0x150>
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	68db      	ldr	r3, [r3, #12]
 8013370:	60bb      	str	r3, [r7, #8]
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d1ef      	bne.n	8013358 <tcp_close_shutdown+0x130>
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	2200      	movs	r2, #0
 801337c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f7ff fea0 	bl	80130c4 <tcp_free>
      break;
 8013384:	e01a      	b.n	80133bc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f7ff ff14 	bl	80131b4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801338c:	6879      	ldr	r1, [r7, #4]
 801338e:	4816      	ldr	r0, [pc, #88]	; (80133e8 <tcp_close_shutdown+0x1c0>)
 8013390:	f001 fab0 	bl	80148f4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f7ff feb1 	bl	80130fc <tcp_free_listen>
      break;
 801339a:	e00f      	b.n	80133bc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801339c:	6879      	ldr	r1, [r7, #4]
 801339e:	480e      	ldr	r0, [pc, #56]	; (80133d8 <tcp_close_shutdown+0x1b0>)
 80133a0:	f001 faa8 	bl	80148f4 <tcp_pcb_remove>
 80133a4:	4b0d      	ldr	r3, [pc, #52]	; (80133dc <tcp_close_shutdown+0x1b4>)
 80133a6:	2201      	movs	r2, #1
 80133a8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	f7ff fe8a 	bl	80130c4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80133b0:	e004      	b.n	80133bc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f000 f81a 	bl	80133ec <tcp_close_shutdown_fin>
 80133b8:	4603      	mov	r3, r0
 80133ba:	e000      	b.n	80133be <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80133bc:	2300      	movs	r3, #0
}
 80133be:	4618      	mov	r0, r3
 80133c0:	3710      	adds	r7, #16
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bdb0      	pop	{r4, r5, r7, pc}
 80133c6:	bf00      	nop
 80133c8:	0801f6a0 	.word	0x0801f6a0
 80133cc:	0801f774 	.word	0x0801f774
 80133d0:	0801f6e4 	.word	0x0801f6e4
 80133d4:	0801f794 	.word	0x0801f794
 80133d8:	2000dd98 	.word	0x2000dd98
 80133dc:	2000dda0 	.word	0x2000dda0
 80133e0:	2000ddd8 	.word	0x2000ddd8
 80133e4:	2000dd90 	.word	0x2000dd90
 80133e8:	2000dd94 	.word	0x2000dd94

080133ec <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b084      	sub	sp, #16
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d106      	bne.n	8013408 <tcp_close_shutdown_fin+0x1c>
 80133fa:	4b2e      	ldr	r3, [pc, #184]	; (80134b4 <tcp_close_shutdown_fin+0xc8>)
 80133fc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8013400:	492d      	ldr	r1, [pc, #180]	; (80134b8 <tcp_close_shutdown_fin+0xcc>)
 8013402:	482e      	ldr	r0, [pc, #184]	; (80134bc <tcp_close_shutdown_fin+0xd0>)
 8013404:	f009 fb56 	bl	801cab4 <iprintf>

  switch (pcb->state) {
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	7d1b      	ldrb	r3, [r3, #20]
 801340c:	2b07      	cmp	r3, #7
 801340e:	d020      	beq.n	8013452 <tcp_close_shutdown_fin+0x66>
 8013410:	2b07      	cmp	r3, #7
 8013412:	dc2b      	bgt.n	801346c <tcp_close_shutdown_fin+0x80>
 8013414:	2b03      	cmp	r3, #3
 8013416:	d002      	beq.n	801341e <tcp_close_shutdown_fin+0x32>
 8013418:	2b04      	cmp	r3, #4
 801341a:	d00d      	beq.n	8013438 <tcp_close_shutdown_fin+0x4c>
 801341c:	e026      	b.n	801346c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f004 fd46 	bl	8017eb0 <tcp_send_fin>
 8013424:	4603      	mov	r3, r0
 8013426:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d11f      	bne.n	8013470 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2205      	movs	r2, #5
 8013434:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013436:	e01b      	b.n	8013470 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	f004 fd39 	bl	8017eb0 <tcp_send_fin>
 801343e:	4603      	mov	r3, r0
 8013440:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d114      	bne.n	8013474 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	2205      	movs	r2, #5
 801344e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013450:	e010      	b.n	8013474 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8013452:	6878      	ldr	r0, [r7, #4]
 8013454:	f004 fd2c 	bl	8017eb0 <tcp_send_fin>
 8013458:	4603      	mov	r3, r0
 801345a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801345c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d109      	bne.n	8013478 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2209      	movs	r2, #9
 8013468:	751a      	strb	r2, [r3, #20]
      }
      break;
 801346a:	e005      	b.n	8013478 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801346c:	2300      	movs	r3, #0
 801346e:	e01c      	b.n	80134aa <tcp_close_shutdown_fin+0xbe>
      break;
 8013470:	bf00      	nop
 8013472:	e002      	b.n	801347a <tcp_close_shutdown_fin+0x8e>
      break;
 8013474:	bf00      	nop
 8013476:	e000      	b.n	801347a <tcp_close_shutdown_fin+0x8e>
      break;
 8013478:	bf00      	nop
  }

  if (err == ERR_OK) {
 801347a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d103      	bne.n	801348a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f004 fe52 	bl	801812c <tcp_output>
 8013488:	e00d      	b.n	80134a6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801348a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013492:	d108      	bne.n	80134a6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	8b5b      	ldrh	r3, [r3, #26]
 8013498:	f043 0308 	orr.w	r3, r3, #8
 801349c:	b29a      	uxth	r2, r3
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80134a2:	2300      	movs	r3, #0
 80134a4:	e001      	b.n	80134aa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80134a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3710      	adds	r7, #16
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
 80134b2:	bf00      	nop
 80134b4:	0801f6a0 	.word	0x0801f6a0
 80134b8:	0801f750 	.word	0x0801f750
 80134bc:	0801f6e4 	.word	0x0801f6e4

080134c0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d109      	bne.n	80134e2 <tcp_close+0x22>
 80134ce:	4b0f      	ldr	r3, [pc, #60]	; (801350c <tcp_close+0x4c>)
 80134d0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80134d4:	490e      	ldr	r1, [pc, #56]	; (8013510 <tcp_close+0x50>)
 80134d6:	480f      	ldr	r0, [pc, #60]	; (8013514 <tcp_close+0x54>)
 80134d8:	f009 faec 	bl	801cab4 <iprintf>
 80134dc:	f06f 030f 	mvn.w	r3, #15
 80134e0:	e00f      	b.n	8013502 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	7d1b      	ldrb	r3, [r3, #20]
 80134e6:	2b01      	cmp	r3, #1
 80134e8:	d006      	beq.n	80134f8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	8b5b      	ldrh	r3, [r3, #26]
 80134ee:	f043 0310 	orr.w	r3, r3, #16
 80134f2:	b29a      	uxth	r2, r3
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80134f8:	2101      	movs	r1, #1
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f7ff fe94 	bl	8013228 <tcp_close_shutdown>
 8013500:	4603      	mov	r3, r0
}
 8013502:	4618      	mov	r0, r3
 8013504:	3708      	adds	r7, #8
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	0801f6a0 	.word	0x0801f6a0
 8013510:	0801f7b0 	.word	0x0801f7b0
 8013514:	0801f6e4 	.word	0x0801f6e4

08013518 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b084      	sub	sp, #16
 801351c:	af00      	add	r7, sp, #0
 801351e:	60f8      	str	r0, [r7, #12]
 8013520:	60b9      	str	r1, [r7, #8]
 8013522:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d109      	bne.n	801353e <tcp_shutdown+0x26>
 801352a:	4b26      	ldr	r3, [pc, #152]	; (80135c4 <tcp_shutdown+0xac>)
 801352c:	f240 2207 	movw	r2, #519	; 0x207
 8013530:	4925      	ldr	r1, [pc, #148]	; (80135c8 <tcp_shutdown+0xb0>)
 8013532:	4826      	ldr	r0, [pc, #152]	; (80135cc <tcp_shutdown+0xb4>)
 8013534:	f009 fabe 	bl	801cab4 <iprintf>
 8013538:	f06f 030f 	mvn.w	r3, #15
 801353c:	e03d      	b.n	80135ba <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	7d1b      	ldrb	r3, [r3, #20]
 8013542:	2b01      	cmp	r3, #1
 8013544:	d102      	bne.n	801354c <tcp_shutdown+0x34>
    return ERR_CONN;
 8013546:	f06f 030a 	mvn.w	r3, #10
 801354a:	e036      	b.n	80135ba <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d01b      	beq.n	801358a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	8b5b      	ldrh	r3, [r3, #26]
 8013556:	f043 0310 	orr.w	r3, r3, #16
 801355a:	b29a      	uxth	r2, r3
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d005      	beq.n	8013572 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8013566:	2101      	movs	r1, #1
 8013568:	68f8      	ldr	r0, [r7, #12]
 801356a:	f7ff fe5d 	bl	8013228 <tcp_close_shutdown>
 801356e:	4603      	mov	r3, r0
 8013570:	e023      	b.n	80135ba <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013576:	2b00      	cmp	r3, #0
 8013578:	d007      	beq.n	801358a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801357e:	4618      	mov	r0, r3
 8013580:	f7ff fae4 	bl	8012b4c <pbuf_free>
      pcb->refused_data = NULL;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	2200      	movs	r2, #0
 8013588:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d013      	beq.n	80135b8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	7d1b      	ldrb	r3, [r3, #20]
 8013594:	2b04      	cmp	r3, #4
 8013596:	dc02      	bgt.n	801359e <tcp_shutdown+0x86>
 8013598:	2b03      	cmp	r3, #3
 801359a:	da02      	bge.n	80135a2 <tcp_shutdown+0x8a>
 801359c:	e009      	b.n	80135b2 <tcp_shutdown+0x9a>
 801359e:	2b07      	cmp	r3, #7
 80135a0:	d107      	bne.n	80135b2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80135a2:	68bb      	ldr	r3, [r7, #8]
 80135a4:	b2db      	uxtb	r3, r3
 80135a6:	4619      	mov	r1, r3
 80135a8:	68f8      	ldr	r0, [r7, #12]
 80135aa:	f7ff fe3d 	bl	8013228 <tcp_close_shutdown>
 80135ae:	4603      	mov	r3, r0
 80135b0:	e003      	b.n	80135ba <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80135b2:	f06f 030a 	mvn.w	r3, #10
 80135b6:	e000      	b.n	80135ba <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80135b8:	2300      	movs	r3, #0
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	3710      	adds	r7, #16
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd80      	pop	{r7, pc}
 80135c2:	bf00      	nop
 80135c4:	0801f6a0 	.word	0x0801f6a0
 80135c8:	0801f7c8 	.word	0x0801f7c8
 80135cc:	0801f6e4 	.word	0x0801f6e4

080135d0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b08e      	sub	sp, #56	; 0x38
 80135d4:	af04      	add	r7, sp, #16
 80135d6:	6078      	str	r0, [r7, #4]
 80135d8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d107      	bne.n	80135f0 <tcp_abandon+0x20>
 80135e0:	4b52      	ldr	r3, [pc, #328]	; (801372c <tcp_abandon+0x15c>)
 80135e2:	f240 223d 	movw	r2, #573	; 0x23d
 80135e6:	4952      	ldr	r1, [pc, #328]	; (8013730 <tcp_abandon+0x160>)
 80135e8:	4852      	ldr	r0, [pc, #328]	; (8013734 <tcp_abandon+0x164>)
 80135ea:	f009 fa63 	bl	801cab4 <iprintf>
 80135ee:	e099      	b.n	8013724 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	7d1b      	ldrb	r3, [r3, #20]
 80135f4:	2b01      	cmp	r3, #1
 80135f6:	d106      	bne.n	8013606 <tcp_abandon+0x36>
 80135f8:	4b4c      	ldr	r3, [pc, #304]	; (801372c <tcp_abandon+0x15c>)
 80135fa:	f44f 7210 	mov.w	r2, #576	; 0x240
 80135fe:	494e      	ldr	r1, [pc, #312]	; (8013738 <tcp_abandon+0x168>)
 8013600:	484c      	ldr	r0, [pc, #304]	; (8013734 <tcp_abandon+0x164>)
 8013602:	f009 fa57 	bl	801cab4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	7d1b      	ldrb	r3, [r3, #20]
 801360a:	2b0a      	cmp	r3, #10
 801360c:	d107      	bne.n	801361e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801360e:	6879      	ldr	r1, [r7, #4]
 8013610:	484a      	ldr	r0, [pc, #296]	; (801373c <tcp_abandon+0x16c>)
 8013612:	f001 f96f 	bl	80148f4 <tcp_pcb_remove>
    tcp_free(pcb);
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f7ff fd54 	bl	80130c4 <tcp_free>
 801361c:	e082      	b.n	8013724 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801361e:	2300      	movs	r3, #0
 8013620:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8013622:	2300      	movs	r3, #0
 8013624:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801362a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013630:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013638:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	691b      	ldr	r3, [r3, #16]
 801363e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	7d1b      	ldrb	r3, [r3, #20]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d126      	bne.n	8013696 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	8adb      	ldrh	r3, [r3, #22]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d02e      	beq.n	80136ae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013650:	4b3b      	ldr	r3, [pc, #236]	; (8013740 <tcp_abandon+0x170>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	429a      	cmp	r2, r3
 8013658:	d105      	bne.n	8013666 <tcp_abandon+0x96>
 801365a:	4b39      	ldr	r3, [pc, #228]	; (8013740 <tcp_abandon+0x170>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	68db      	ldr	r3, [r3, #12]
 8013660:	4a37      	ldr	r2, [pc, #220]	; (8013740 <tcp_abandon+0x170>)
 8013662:	6013      	str	r3, [r2, #0]
 8013664:	e013      	b.n	801368e <tcp_abandon+0xbe>
 8013666:	4b36      	ldr	r3, [pc, #216]	; (8013740 <tcp_abandon+0x170>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	61fb      	str	r3, [r7, #28]
 801366c:	e00c      	b.n	8013688 <tcp_abandon+0xb8>
 801366e:	69fb      	ldr	r3, [r7, #28]
 8013670:	68db      	ldr	r3, [r3, #12]
 8013672:	687a      	ldr	r2, [r7, #4]
 8013674:	429a      	cmp	r2, r3
 8013676:	d104      	bne.n	8013682 <tcp_abandon+0xb2>
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	68da      	ldr	r2, [r3, #12]
 801367c:	69fb      	ldr	r3, [r7, #28]
 801367e:	60da      	str	r2, [r3, #12]
 8013680:	e005      	b.n	801368e <tcp_abandon+0xbe>
 8013682:	69fb      	ldr	r3, [r7, #28]
 8013684:	68db      	ldr	r3, [r3, #12]
 8013686:	61fb      	str	r3, [r7, #28]
 8013688:	69fb      	ldr	r3, [r7, #28]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d1ef      	bne.n	801366e <tcp_abandon+0x9e>
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	2200      	movs	r2, #0
 8013692:	60da      	str	r2, [r3, #12]
 8013694:	e00b      	b.n	80136ae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	8adb      	ldrh	r3, [r3, #22]
 801369e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80136a0:	6879      	ldr	r1, [r7, #4]
 80136a2:	4828      	ldr	r0, [pc, #160]	; (8013744 <tcp_abandon+0x174>)
 80136a4:	f001 f926 	bl	80148f4 <tcp_pcb_remove>
 80136a8:	4b27      	ldr	r3, [pc, #156]	; (8013748 <tcp_abandon+0x178>)
 80136aa:	2201      	movs	r2, #1
 80136ac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d004      	beq.n	80136c0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136ba:	4618      	mov	r0, r3
 80136bc:	f000 fdfa 	bl	80142b4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d004      	beq.n	80136d2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136cc:	4618      	mov	r0, r3
 80136ce:	f000 fdf1 	bl	80142b4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d004      	beq.n	80136e4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136de:	4618      	mov	r0, r3
 80136e0:	f000 fde8 	bl	80142b4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80136e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d00e      	beq.n	8013708 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80136ea:	6879      	ldr	r1, [r7, #4]
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	3304      	adds	r3, #4
 80136f0:	687a      	ldr	r2, [r7, #4]
 80136f2:	8b12      	ldrh	r2, [r2, #24]
 80136f4:	9202      	str	r2, [sp, #8]
 80136f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80136f8:	9201      	str	r2, [sp, #4]
 80136fa:	9300      	str	r3, [sp, #0]
 80136fc:	460b      	mov	r3, r1
 80136fe:	697a      	ldr	r2, [r7, #20]
 8013700:	69b9      	ldr	r1, [r7, #24]
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f005 fac6 	bl	8018c94 <tcp_rst>
    }
    last_state = pcb->state;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	7d1b      	ldrb	r3, [r3, #20]
 801370c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	f7ff fcd8 	bl	80130c4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d004      	beq.n	8013724 <tcp_abandon+0x154>
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	f06f 010c 	mvn.w	r1, #12
 8013720:	68f8      	ldr	r0, [r7, #12]
 8013722:	4798      	blx	r3
  }
}
 8013724:	3728      	adds	r7, #40	; 0x28
 8013726:	46bd      	mov	sp, r7
 8013728:	bd80      	pop	{r7, pc}
 801372a:	bf00      	nop
 801372c:	0801f6a0 	.word	0x0801f6a0
 8013730:	0801f7e4 	.word	0x0801f7e4
 8013734:	0801f6e4 	.word	0x0801f6e4
 8013738:	0801f800 	.word	0x0801f800
 801373c:	2000dd9c 	.word	0x2000dd9c
 8013740:	2000dd90 	.word	0x2000dd90
 8013744:	2000dd98 	.word	0x2000dd98
 8013748:	2000dda0 	.word	0x2000dda0

0801374c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013754:	2101      	movs	r1, #1
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f7ff ff3a 	bl	80135d0 <tcp_abandon>
}
 801375c:	bf00      	nop
 801375e:	3708      	adds	r7, #8
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}

08013764 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b088      	sub	sp, #32
 8013768:	af00      	add	r7, sp, #0
 801376a:	60f8      	str	r0, [r7, #12]
 801376c:	60b9      	str	r1, [r7, #8]
 801376e:	4613      	mov	r3, r2
 8013770:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8013772:	2304      	movs	r3, #4
 8013774:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d101      	bne.n	8013780 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801377c:	4b3e      	ldr	r3, [pc, #248]	; (8013878 <tcp_bind+0x114>)
 801377e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d109      	bne.n	801379a <tcp_bind+0x36>
 8013786:	4b3d      	ldr	r3, [pc, #244]	; (801387c <tcp_bind+0x118>)
 8013788:	f240 22a9 	movw	r2, #681	; 0x2a9
 801378c:	493c      	ldr	r1, [pc, #240]	; (8013880 <tcp_bind+0x11c>)
 801378e:	483d      	ldr	r0, [pc, #244]	; (8013884 <tcp_bind+0x120>)
 8013790:	f009 f990 	bl	801cab4 <iprintf>
 8013794:	f06f 030f 	mvn.w	r3, #15
 8013798:	e06a      	b.n	8013870 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	7d1b      	ldrb	r3, [r3, #20]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d009      	beq.n	80137b6 <tcp_bind+0x52>
 80137a2:	4b36      	ldr	r3, [pc, #216]	; (801387c <tcp_bind+0x118>)
 80137a4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80137a8:	4937      	ldr	r1, [pc, #220]	; (8013888 <tcp_bind+0x124>)
 80137aa:	4836      	ldr	r0, [pc, #216]	; (8013884 <tcp_bind+0x120>)
 80137ac:	f009 f982 	bl	801cab4 <iprintf>
 80137b0:	f06f 0305 	mvn.w	r3, #5
 80137b4:	e05c      	b.n	8013870 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80137b6:	88fb      	ldrh	r3, [r7, #6]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d109      	bne.n	80137d0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80137bc:	f000 f914 	bl	80139e8 <tcp_new_port>
 80137c0:	4603      	mov	r3, r0
 80137c2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80137c4:	88fb      	ldrh	r3, [r7, #6]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d135      	bne.n	8013836 <tcp_bind+0xd2>
      return ERR_BUF;
 80137ca:	f06f 0301 	mvn.w	r3, #1
 80137ce:	e04f      	b.n	8013870 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80137d0:	2300      	movs	r3, #0
 80137d2:	61fb      	str	r3, [r7, #28]
 80137d4:	e02b      	b.n	801382e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80137d6:	4a2d      	ldr	r2, [pc, #180]	; (801388c <tcp_bind+0x128>)
 80137d8:	69fb      	ldr	r3, [r7, #28]
 80137da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	61bb      	str	r3, [r7, #24]
 80137e2:	e01e      	b.n	8013822 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80137e4:	69bb      	ldr	r3, [r7, #24]
 80137e6:	8adb      	ldrh	r3, [r3, #22]
 80137e8:	88fa      	ldrh	r2, [r7, #6]
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d116      	bne.n	801381c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80137ee:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d010      	beq.n	8013816 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80137f4:	69bb      	ldr	r3, [r7, #24]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d00c      	beq.n	8013816 <tcp_bind+0xb2>
 80137fc:	68bb      	ldr	r3, [r7, #8]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d009      	beq.n	8013816 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d005      	beq.n	8013816 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801380a:	69bb      	ldr	r3, [r7, #24]
 801380c:	681a      	ldr	r2, [r3, #0]
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013812:	429a      	cmp	r2, r3
 8013814:	d102      	bne.n	801381c <tcp_bind+0xb8>
              return ERR_USE;
 8013816:	f06f 0307 	mvn.w	r3, #7
 801381a:	e029      	b.n	8013870 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801381c:	69bb      	ldr	r3, [r7, #24]
 801381e:	68db      	ldr	r3, [r3, #12]
 8013820:	61bb      	str	r3, [r7, #24]
 8013822:	69bb      	ldr	r3, [r7, #24]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d1dd      	bne.n	80137e4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013828:	69fb      	ldr	r3, [r7, #28]
 801382a:	3301      	adds	r3, #1
 801382c:	61fb      	str	r3, [r7, #28]
 801382e:	69fa      	ldr	r2, [r7, #28]
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	429a      	cmp	r2, r3
 8013834:	dbcf      	blt.n	80137d6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d00c      	beq.n	8013856 <tcp_bind+0xf2>
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d008      	beq.n	8013856 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013844:	68bb      	ldr	r3, [r7, #8]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d002      	beq.n	8013850 <tcp_bind+0xec>
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	e000      	b.n	8013852 <tcp_bind+0xee>
 8013850:	2300      	movs	r3, #0
 8013852:	68fa      	ldr	r2, [r7, #12]
 8013854:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	88fa      	ldrh	r2, [r7, #6]
 801385a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801385c:	4b0c      	ldr	r3, [pc, #48]	; (8013890 <tcp_bind+0x12c>)
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	60da      	str	r2, [r3, #12]
 8013864:	4a0a      	ldr	r2, [pc, #40]	; (8013890 <tcp_bind+0x12c>)
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	6013      	str	r3, [r2, #0]
 801386a:	f005 fbd5 	bl	8019018 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801386e:	2300      	movs	r3, #0
}
 8013870:	4618      	mov	r0, r3
 8013872:	3720      	adds	r7, #32
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}
 8013878:	080216e8 	.word	0x080216e8
 801387c:	0801f6a0 	.word	0x0801f6a0
 8013880:	0801f834 	.word	0x0801f834
 8013884:	0801f6e4 	.word	0x0801f6e4
 8013888:	0801f84c 	.word	0x0801f84c
 801388c:	080216c0 	.word	0x080216c0
 8013890:	2000dd90 	.word	0x2000dd90

08013894 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b084      	sub	sp, #16
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d106      	bne.n	80138b0 <tcp_update_rcv_ann_wnd+0x1c>
 80138a2:	4b25      	ldr	r3, [pc, #148]	; (8013938 <tcp_update_rcv_ann_wnd+0xa4>)
 80138a4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80138a8:	4924      	ldr	r1, [pc, #144]	; (801393c <tcp_update_rcv_ann_wnd+0xa8>)
 80138aa:	4825      	ldr	r0, [pc, #148]	; (8013940 <tcp_update_rcv_ann_wnd+0xac>)
 80138ac:	f009 f902 	bl	801cab4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80138b8:	4413      	add	r3, r2
 80138ba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138c0:	687a      	ldr	r2, [r7, #4]
 80138c2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80138c4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80138c8:	bf28      	it	cs
 80138ca:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80138ce:	b292      	uxth	r2, r2
 80138d0:	4413      	add	r3, r2
 80138d2:	68fa      	ldr	r2, [r7, #12]
 80138d4:	1ad3      	subs	r3, r2, r3
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	db08      	blt.n	80138ec <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138e6:	68fa      	ldr	r2, [r7, #12]
 80138e8:	1ad3      	subs	r3, r2, r3
 80138ea:	e020      	b.n	801392e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138f4:	1ad3      	subs	r3, r2, r3
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	dd03      	ble.n	8013902 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2200      	movs	r2, #0
 80138fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013900:	e014      	b.n	801392c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801390a:	1ad3      	subs	r3, r2, r3
 801390c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013914:	d306      	bcc.n	8013924 <tcp_update_rcv_ann_wnd+0x90>
 8013916:	4b08      	ldr	r3, [pc, #32]	; (8013938 <tcp_update_rcv_ann_wnd+0xa4>)
 8013918:	f240 32b6 	movw	r2, #950	; 0x3b6
 801391c:	4909      	ldr	r1, [pc, #36]	; (8013944 <tcp_update_rcv_ann_wnd+0xb0>)
 801391e:	4808      	ldr	r0, [pc, #32]	; (8013940 <tcp_update_rcv_ann_wnd+0xac>)
 8013920:	f009 f8c8 	bl	801cab4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013924:	68bb      	ldr	r3, [r7, #8]
 8013926:	b29a      	uxth	r2, r3
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801392c:	2300      	movs	r3, #0
  }
}
 801392e:	4618      	mov	r0, r3
 8013930:	3710      	adds	r7, #16
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}
 8013936:	bf00      	nop
 8013938:	0801f6a0 	.word	0x0801f6a0
 801393c:	0801f8fc 	.word	0x0801f8fc
 8013940:	0801f6e4 	.word	0x0801f6e4
 8013944:	0801f920 	.word	0x0801f920

08013948 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b084      	sub	sp, #16
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	460b      	mov	r3, r1
 8013952:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d107      	bne.n	801396a <tcp_recved+0x22>
 801395a:	4b1f      	ldr	r3, [pc, #124]	; (80139d8 <tcp_recved+0x90>)
 801395c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013960:	491e      	ldr	r1, [pc, #120]	; (80139dc <tcp_recved+0x94>)
 8013962:	481f      	ldr	r0, [pc, #124]	; (80139e0 <tcp_recved+0x98>)
 8013964:	f009 f8a6 	bl	801cab4 <iprintf>
 8013968:	e032      	b.n	80139d0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	7d1b      	ldrb	r3, [r3, #20]
 801396e:	2b01      	cmp	r3, #1
 8013970:	d106      	bne.n	8013980 <tcp_recved+0x38>
 8013972:	4b19      	ldr	r3, [pc, #100]	; (80139d8 <tcp_recved+0x90>)
 8013974:	f240 32d2 	movw	r2, #978	; 0x3d2
 8013978:	491a      	ldr	r1, [pc, #104]	; (80139e4 <tcp_recved+0x9c>)
 801397a:	4819      	ldr	r0, [pc, #100]	; (80139e0 <tcp_recved+0x98>)
 801397c:	f009 f89a 	bl	801cab4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013984:	887b      	ldrh	r3, [r7, #2]
 8013986:	4413      	add	r3, r2
 8013988:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801398a:	89fb      	ldrh	r3, [r7, #14]
 801398c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013990:	d804      	bhi.n	801399c <tcp_recved+0x54>
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013996:	89fa      	ldrh	r2, [r7, #14]
 8013998:	429a      	cmp	r2, r3
 801399a:	d204      	bcs.n	80139a6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80139a2:	851a      	strh	r2, [r3, #40]	; 0x28
 80139a4:	e002      	b.n	80139ac <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	89fa      	ldrh	r2, [r7, #14]
 80139aa:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f7ff ff71 	bl	8013894 <tcp_update_rcv_ann_wnd>
 80139b2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80139ba:	d309      	bcc.n	80139d0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	8b5b      	ldrh	r3, [r3, #26]
 80139c0:	f043 0302 	orr.w	r3, r3, #2
 80139c4:	b29a      	uxth	r2, r3
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80139ca:	6878      	ldr	r0, [r7, #4]
 80139cc:	f004 fbae 	bl	801812c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80139d0:	3710      	adds	r7, #16
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}
 80139d6:	bf00      	nop
 80139d8:	0801f6a0 	.word	0x0801f6a0
 80139dc:	0801f93c 	.word	0x0801f93c
 80139e0:	0801f6e4 	.word	0x0801f6e4
 80139e4:	0801f954 	.word	0x0801f954

080139e8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80139e8:	b480      	push	{r7}
 80139ea:	b083      	sub	sp, #12
 80139ec:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80139ee:	2300      	movs	r3, #0
 80139f0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80139f2:	4b1e      	ldr	r3, [pc, #120]	; (8013a6c <tcp_new_port+0x84>)
 80139f4:	881b      	ldrh	r3, [r3, #0]
 80139f6:	3301      	adds	r3, #1
 80139f8:	b29a      	uxth	r2, r3
 80139fa:	4b1c      	ldr	r3, [pc, #112]	; (8013a6c <tcp_new_port+0x84>)
 80139fc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80139fe:	4b1b      	ldr	r3, [pc, #108]	; (8013a6c <tcp_new_port+0x84>)
 8013a00:	881b      	ldrh	r3, [r3, #0]
 8013a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a06:	4293      	cmp	r3, r2
 8013a08:	d103      	bne.n	8013a12 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013a0a:	4b18      	ldr	r3, [pc, #96]	; (8013a6c <tcp_new_port+0x84>)
 8013a0c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013a10:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013a12:	2300      	movs	r3, #0
 8013a14:	71fb      	strb	r3, [r7, #7]
 8013a16:	e01e      	b.n	8013a56 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013a18:	79fb      	ldrb	r3, [r7, #7]
 8013a1a:	4a15      	ldr	r2, [pc, #84]	; (8013a70 <tcp_new_port+0x88>)
 8013a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	603b      	str	r3, [r7, #0]
 8013a24:	e011      	b.n	8013a4a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	8ada      	ldrh	r2, [r3, #22]
 8013a2a:	4b10      	ldr	r3, [pc, #64]	; (8013a6c <tcp_new_port+0x84>)
 8013a2c:	881b      	ldrh	r3, [r3, #0]
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d108      	bne.n	8013a44 <tcp_new_port+0x5c>
        n++;
 8013a32:	88bb      	ldrh	r3, [r7, #4]
 8013a34:	3301      	adds	r3, #1
 8013a36:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013a38:	88bb      	ldrh	r3, [r7, #4]
 8013a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013a3e:	d3d8      	bcc.n	80139f2 <tcp_new_port+0xa>
          return 0;
 8013a40:	2300      	movs	r3, #0
 8013a42:	e00d      	b.n	8013a60 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	68db      	ldr	r3, [r3, #12]
 8013a48:	603b      	str	r3, [r7, #0]
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d1ea      	bne.n	8013a26 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013a50:	79fb      	ldrb	r3, [r7, #7]
 8013a52:	3301      	adds	r3, #1
 8013a54:	71fb      	strb	r3, [r7, #7]
 8013a56:	79fb      	ldrb	r3, [r7, #7]
 8013a58:	2b03      	cmp	r3, #3
 8013a5a:	d9dd      	bls.n	8013a18 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013a5c:	4b03      	ldr	r3, [pc, #12]	; (8013a6c <tcp_new_port+0x84>)
 8013a5e:	881b      	ldrh	r3, [r3, #0]
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	370c      	adds	r7, #12
 8013a64:	46bd      	mov	sp, r7
 8013a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6a:	4770      	bx	lr
 8013a6c:	200002d4 	.word	0x200002d4
 8013a70:	080216c0 	.word	0x080216c0

08013a74 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013a74:	b5b0      	push	{r4, r5, r7, lr}
 8013a76:	b090      	sub	sp, #64	; 0x40
 8013a78:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8013a80:	4b94      	ldr	r3, [pc, #592]	; (8013cd4 <tcp_slowtmr+0x260>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	3301      	adds	r3, #1
 8013a86:	4a93      	ldr	r2, [pc, #588]	; (8013cd4 <tcp_slowtmr+0x260>)
 8013a88:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013a8a:	4b93      	ldr	r3, [pc, #588]	; (8013cd8 <tcp_slowtmr+0x264>)
 8013a8c:	781b      	ldrb	r3, [r3, #0]
 8013a8e:	3301      	adds	r3, #1
 8013a90:	b2da      	uxtb	r2, r3
 8013a92:	4b91      	ldr	r3, [pc, #580]	; (8013cd8 <tcp_slowtmr+0x264>)
 8013a94:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8013a96:	2300      	movs	r3, #0
 8013a98:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8013a9a:	4b90      	ldr	r3, [pc, #576]	; (8013cdc <tcp_slowtmr+0x268>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013aa0:	e29f      	b.n	8013fe2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aa4:	7d1b      	ldrb	r3, [r3, #20]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d106      	bne.n	8013ab8 <tcp_slowtmr+0x44>
 8013aaa:	4b8d      	ldr	r3, [pc, #564]	; (8013ce0 <tcp_slowtmr+0x26c>)
 8013aac:	f240 42be 	movw	r2, #1214	; 0x4be
 8013ab0:	498c      	ldr	r1, [pc, #560]	; (8013ce4 <tcp_slowtmr+0x270>)
 8013ab2:	488d      	ldr	r0, [pc, #564]	; (8013ce8 <tcp_slowtmr+0x274>)
 8013ab4:	f008 fffe 	bl	801cab4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aba:	7d1b      	ldrb	r3, [r3, #20]
 8013abc:	2b01      	cmp	r3, #1
 8013abe:	d106      	bne.n	8013ace <tcp_slowtmr+0x5a>
 8013ac0:	4b87      	ldr	r3, [pc, #540]	; (8013ce0 <tcp_slowtmr+0x26c>)
 8013ac2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013ac6:	4989      	ldr	r1, [pc, #548]	; (8013cec <tcp_slowtmr+0x278>)
 8013ac8:	4887      	ldr	r0, [pc, #540]	; (8013ce8 <tcp_slowtmr+0x274>)
 8013aca:	f008 fff3 	bl	801cab4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad0:	7d1b      	ldrb	r3, [r3, #20]
 8013ad2:	2b0a      	cmp	r3, #10
 8013ad4:	d106      	bne.n	8013ae4 <tcp_slowtmr+0x70>
 8013ad6:	4b82      	ldr	r3, [pc, #520]	; (8013ce0 <tcp_slowtmr+0x26c>)
 8013ad8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8013adc:	4984      	ldr	r1, [pc, #528]	; (8013cf0 <tcp_slowtmr+0x27c>)
 8013ade:	4882      	ldr	r0, [pc, #520]	; (8013ce8 <tcp_slowtmr+0x274>)
 8013ae0:	f008 ffe8 	bl	801cab4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ae6:	7f9a      	ldrb	r2, [r3, #30]
 8013ae8:	4b7b      	ldr	r3, [pc, #492]	; (8013cd8 <tcp_slowtmr+0x264>)
 8013aea:	781b      	ldrb	r3, [r3, #0]
 8013aec:	429a      	cmp	r2, r3
 8013aee:	d105      	bne.n	8013afc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8013af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af6:	68db      	ldr	r3, [r3, #12]
 8013af8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8013afa:	e272      	b.n	8013fe2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8013afc:	4b76      	ldr	r3, [pc, #472]	; (8013cd8 <tcp_slowtmr+0x264>)
 8013afe:	781a      	ldrb	r2, [r3, #0]
 8013b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b02:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013b04:	2300      	movs	r3, #0
 8013b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b12:	7d1b      	ldrb	r3, [r3, #20]
 8013b14:	2b02      	cmp	r3, #2
 8013b16:	d10a      	bne.n	8013b2e <tcp_slowtmr+0xba>
 8013b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013b1e:	2b05      	cmp	r3, #5
 8013b20:	d905      	bls.n	8013b2e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8013b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b26:	3301      	adds	r3, #1
 8013b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013b2c:	e11e      	b.n	8013d6c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013b34:	2b0b      	cmp	r3, #11
 8013b36:	d905      	bls.n	8013b44 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8013b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b3c:	3301      	adds	r3, #1
 8013b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013b42:	e113      	b.n	8013d6c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8013b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b46:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d075      	beq.n	8013c3a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d006      	beq.n	8013b64 <tcp_slowtmr+0xf0>
 8013b56:	4b62      	ldr	r3, [pc, #392]	; (8013ce0 <tcp_slowtmr+0x26c>)
 8013b58:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8013b5c:	4965      	ldr	r1, [pc, #404]	; (8013cf4 <tcp_slowtmr+0x280>)
 8013b5e:	4862      	ldr	r0, [pc, #392]	; (8013ce8 <tcp_slowtmr+0x274>)
 8013b60:	f008 ffa8 	bl	801cab4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d106      	bne.n	8013b7a <tcp_slowtmr+0x106>
 8013b6c:	4b5c      	ldr	r3, [pc, #368]	; (8013ce0 <tcp_slowtmr+0x26c>)
 8013b6e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013b72:	4961      	ldr	r1, [pc, #388]	; (8013cf8 <tcp_slowtmr+0x284>)
 8013b74:	485c      	ldr	r0, [pc, #368]	; (8013ce8 <tcp_slowtmr+0x274>)
 8013b76:	f008 ff9d 	bl	801cab4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b7c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013b80:	2b0b      	cmp	r3, #11
 8013b82:	d905      	bls.n	8013b90 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b88:	3301      	adds	r3, #1
 8013b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013b8e:	e0ed      	b.n	8013d6c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013b96:	3b01      	subs	r3, #1
 8013b98:	4a58      	ldr	r2, [pc, #352]	; (8013cfc <tcp_slowtmr+0x288>)
 8013b9a:	5cd3      	ldrb	r3, [r2, r3]
 8013b9c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ba0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013ba4:	7c7a      	ldrb	r2, [r7, #17]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d907      	bls.n	8013bba <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8013baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013bb0:	3301      	adds	r3, #1
 8013bb2:	b2da      	uxtb	r2, r3
 8013bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bbc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013bc0:	7c7a      	ldrb	r2, [r7, #17]
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	f200 80d2 	bhi.w	8013d6c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013bc8:	2301      	movs	r3, #1
 8013bca:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d108      	bne.n	8013be8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013bd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013bd8:	f005 f950 	bl	8018e7c <tcp_zero_window_probe>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d014      	beq.n	8013c0c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8013be2:	2300      	movs	r3, #0
 8013be4:	623b      	str	r3, [r7, #32]
 8013be6:	e011      	b.n	8013c0c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013bee:	4619      	mov	r1, r3
 8013bf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013bf2:	f004 f815 	bl	8017c20 <tcp_split_unsent_seg>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d107      	bne.n	8013c0c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013bfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013bfe:	f004 fa95 	bl	801812c <tcp_output>
 8013c02:	4603      	mov	r3, r0
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d101      	bne.n	8013c0c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8013c08:	2300      	movs	r3, #0
 8013c0a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8013c0c:	6a3b      	ldr	r3, [r7, #32]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	f000 80ac 	beq.w	8013d6c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8013c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c16:	2200      	movs	r2, #0
 8013c18:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c1e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013c22:	2b06      	cmp	r3, #6
 8013c24:	f200 80a2 	bhi.w	8013d6c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8013c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c2a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013c2e:	3301      	adds	r3, #1
 8013c30:	b2da      	uxtb	r2, r3
 8013c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c34:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8013c38:	e098      	b.n	8013d6c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	db0f      	blt.n	8013c64 <tcp_slowtmr+0x1f0>
 8013c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c46:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013c4a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013c4e:	4293      	cmp	r3, r2
 8013c50:	d008      	beq.n	8013c64 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8013c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013c58:	b29b      	uxth	r3, r3
 8013c5a:	3301      	adds	r3, #1
 8013c5c:	b29b      	uxth	r3, r3
 8013c5e:	b21a      	sxth	r2, r3
 8013c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c62:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8013c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c66:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8013c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c6c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013c70:	429a      	cmp	r2, r3
 8013c72:	db7b      	blt.n	8013d6c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013c74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c76:	f004 fd4b 	bl	8018710 <tcp_rexmit_rto_prepare>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d007      	beq.n	8013c90 <tcp_slowtmr+0x21c>
 8013c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d171      	bne.n	8013d6c <tcp_slowtmr+0x2f8>
 8013c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d06d      	beq.n	8013d6c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8013c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c92:	7d1b      	ldrb	r3, [r3, #20]
 8013c94:	2b02      	cmp	r3, #2
 8013c96:	d03a      	beq.n	8013d0e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c9e:	2b0c      	cmp	r3, #12
 8013ca0:	bf28      	it	cs
 8013ca2:	230c      	movcs	r3, #12
 8013ca4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ca8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013cac:	10db      	asrs	r3, r3, #3
 8013cae:	b21b      	sxth	r3, r3
 8013cb0:	461a      	mov	r2, r3
 8013cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013cb8:	4413      	add	r3, r2
 8013cba:	7efa      	ldrb	r2, [r7, #27]
 8013cbc:	4910      	ldr	r1, [pc, #64]	; (8013d00 <tcp_slowtmr+0x28c>)
 8013cbe:	5c8a      	ldrb	r2, [r1, r2]
 8013cc0:	4093      	lsls	r3, r2
 8013cc2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013cca:	4293      	cmp	r3, r2
 8013ccc:	dc1a      	bgt.n	8013d04 <tcp_slowtmr+0x290>
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	b21a      	sxth	r2, r3
 8013cd2:	e019      	b.n	8013d08 <tcp_slowtmr+0x294>
 8013cd4:	2000dd8c 	.word	0x2000dd8c
 8013cd8:	2000dda2 	.word	0x2000dda2
 8013cdc:	2000dd98 	.word	0x2000dd98
 8013ce0:	0801f6a0 	.word	0x0801f6a0
 8013ce4:	0801f9e4 	.word	0x0801f9e4
 8013ce8:	0801f6e4 	.word	0x0801f6e4
 8013cec:	0801fa10 	.word	0x0801fa10
 8013cf0:	0801fa3c 	.word	0x0801fa3c
 8013cf4:	0801fa6c 	.word	0x0801fa6c
 8013cf8:	0801faa0 	.word	0x0801faa0
 8013cfc:	080216b8 	.word	0x080216b8
 8013d00:	080216a8 	.word	0x080216a8
 8013d04:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8013d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d10:	2200      	movs	r2, #0
 8013d12:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d20:	4293      	cmp	r3, r2
 8013d22:	bf28      	it	cs
 8013d24:	4613      	movcs	r3, r2
 8013d26:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013d28:	8a7b      	ldrh	r3, [r7, #18]
 8013d2a:	085b      	lsrs	r3, r3, #1
 8013d2c:	b29a      	uxth	r2, r3
 8013d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d3e:	005b      	lsls	r3, r3, #1
 8013d40:	b29b      	uxth	r3, r3
 8013d42:	429a      	cmp	r2, r3
 8013d44:	d206      	bcs.n	8013d54 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8013d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d4a:	005b      	lsls	r3, r3, #1
 8013d4c:	b29a      	uxth	r2, r3
 8013d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8013d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d56:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8013d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d60:	2200      	movs	r2, #0
 8013d62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8013d66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d68:	f004 fd42 	bl	80187f0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8013d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d6e:	7d1b      	ldrb	r3, [r3, #20]
 8013d70:	2b06      	cmp	r3, #6
 8013d72:	d111      	bne.n	8013d98 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8013d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d76:	8b5b      	ldrh	r3, [r3, #26]
 8013d78:	f003 0310 	and.w	r3, r3, #16
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d00b      	beq.n	8013d98 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013d80:	4b9d      	ldr	r3, [pc, #628]	; (8013ff8 <tcp_slowtmr+0x584>)
 8013d82:	681a      	ldr	r2, [r3, #0]
 8013d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d86:	6a1b      	ldr	r3, [r3, #32]
 8013d88:	1ad3      	subs	r3, r2, r3
 8013d8a:	2b28      	cmp	r3, #40	; 0x28
 8013d8c:	d904      	bls.n	8013d98 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8013d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d92:	3301      	adds	r3, #1
 8013d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d9a:	7a5b      	ldrb	r3, [r3, #9]
 8013d9c:	f003 0308 	and.w	r3, r3, #8
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d04c      	beq.n	8013e3e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8013da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013da6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013da8:	2b04      	cmp	r3, #4
 8013daa:	d003      	beq.n	8013db4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8013dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013db0:	2b07      	cmp	r3, #7
 8013db2:	d144      	bne.n	8013e3e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013db4:	4b90      	ldr	r3, [pc, #576]	; (8013ff8 <tcp_slowtmr+0x584>)
 8013db6:	681a      	ldr	r2, [r3, #0]
 8013db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dba:	6a1b      	ldr	r3, [r3, #32]
 8013dbc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8013dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013dc4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8013dc8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8013dcc:	498b      	ldr	r1, [pc, #556]	; (8013ffc <tcp_slowtmr+0x588>)
 8013dce:	fba1 1303 	umull	r1, r3, r1, r3
 8013dd2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013dd4:	429a      	cmp	r2, r3
 8013dd6:	d90a      	bls.n	8013dee <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8013dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ddc:	3301      	adds	r3, #1
 8013dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8013de2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013de6:	3301      	adds	r3, #1
 8013de8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013dec:	e027      	b.n	8013e3e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013dee:	4b82      	ldr	r3, [pc, #520]	; (8013ff8 <tcp_slowtmr+0x584>)
 8013df0:	681a      	ldr	r2, [r3, #0]
 8013df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df4:	6a1b      	ldr	r3, [r3, #32]
 8013df6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dfa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8013dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e00:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013e04:	4618      	mov	r0, r3
 8013e06:	4b7e      	ldr	r3, [pc, #504]	; (8014000 <tcp_slowtmr+0x58c>)
 8013e08:	fb00 f303 	mul.w	r3, r0, r3
 8013e0c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8013e0e:	497b      	ldr	r1, [pc, #492]	; (8013ffc <tcp_slowtmr+0x588>)
 8013e10:	fba1 1303 	umull	r1, r3, r1, r3
 8013e14:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d911      	bls.n	8013e3e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8013e1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e1c:	f004 ffee 	bl	8018dfc <tcp_keepalive>
 8013e20:	4603      	mov	r3, r0
 8013e22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8013e26:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d107      	bne.n	8013e3e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8013e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e30:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013e34:	3301      	adds	r3, #1
 8013e36:	b2da      	uxtb	r2, r3
 8013e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e3a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8013e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d011      	beq.n	8013e6a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8013e46:	4b6c      	ldr	r3, [pc, #432]	; (8013ff8 <tcp_slowtmr+0x584>)
 8013e48:	681a      	ldr	r2, [r3, #0]
 8013e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e4c:	6a1b      	ldr	r3, [r3, #32]
 8013e4e:	1ad2      	subs	r2, r2, r3
 8013e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e52:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013e56:	4619      	mov	r1, r3
 8013e58:	460b      	mov	r3, r1
 8013e5a:	005b      	lsls	r3, r3, #1
 8013e5c:	440b      	add	r3, r1
 8013e5e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d302      	bcc.n	8013e6a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8013e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e66:	f000 fea9 	bl	8014bbc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8013e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e6c:	7d1b      	ldrb	r3, [r3, #20]
 8013e6e:	2b03      	cmp	r3, #3
 8013e70:	d10b      	bne.n	8013e8a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013e72:	4b61      	ldr	r3, [pc, #388]	; (8013ff8 <tcp_slowtmr+0x584>)
 8013e74:	681a      	ldr	r2, [r3, #0]
 8013e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e78:	6a1b      	ldr	r3, [r3, #32]
 8013e7a:	1ad3      	subs	r3, r2, r3
 8013e7c:	2b28      	cmp	r3, #40	; 0x28
 8013e7e:	d904      	bls.n	8013e8a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8013e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e84:	3301      	adds	r3, #1
 8013e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8013e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e8c:	7d1b      	ldrb	r3, [r3, #20]
 8013e8e:	2b09      	cmp	r3, #9
 8013e90:	d10b      	bne.n	8013eaa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013e92:	4b59      	ldr	r3, [pc, #356]	; (8013ff8 <tcp_slowtmr+0x584>)
 8013e94:	681a      	ldr	r2, [r3, #0]
 8013e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e98:	6a1b      	ldr	r3, [r3, #32]
 8013e9a:	1ad3      	subs	r3, r2, r3
 8013e9c:	2bf0      	cmp	r3, #240	; 0xf0
 8013e9e:	d904      	bls.n	8013eaa <tcp_slowtmr+0x436>
        ++pcb_remove;
 8013ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ea4:	3301      	adds	r3, #1
 8013ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d060      	beq.n	8013f74 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8013eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013eb8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8013eba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ebc:	f000 fcca 	bl	8014854 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8013ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d010      	beq.n	8013ee8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013ec6:	4b4f      	ldr	r3, [pc, #316]	; (8014004 <tcp_slowtmr+0x590>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d106      	bne.n	8013ede <tcp_slowtmr+0x46a>
 8013ed0:	4b4d      	ldr	r3, [pc, #308]	; (8014008 <tcp_slowtmr+0x594>)
 8013ed2:	f240 526d 	movw	r2, #1389	; 0x56d
 8013ed6:	494d      	ldr	r1, [pc, #308]	; (801400c <tcp_slowtmr+0x598>)
 8013ed8:	484d      	ldr	r0, [pc, #308]	; (8014010 <tcp_slowtmr+0x59c>)
 8013eda:	f008 fdeb 	bl	801cab4 <iprintf>
        prev->next = pcb->next;
 8013ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee0:	68da      	ldr	r2, [r3, #12]
 8013ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee4:	60da      	str	r2, [r3, #12]
 8013ee6:	e00f      	b.n	8013f08 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013ee8:	4b46      	ldr	r3, [pc, #280]	; (8014004 <tcp_slowtmr+0x590>)
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013eee:	429a      	cmp	r2, r3
 8013ef0:	d006      	beq.n	8013f00 <tcp_slowtmr+0x48c>
 8013ef2:	4b45      	ldr	r3, [pc, #276]	; (8014008 <tcp_slowtmr+0x594>)
 8013ef4:	f240 5271 	movw	r2, #1393	; 0x571
 8013ef8:	4946      	ldr	r1, [pc, #280]	; (8014014 <tcp_slowtmr+0x5a0>)
 8013efa:	4845      	ldr	r0, [pc, #276]	; (8014010 <tcp_slowtmr+0x59c>)
 8013efc:	f008 fdda 	bl	801cab4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f02:	68db      	ldr	r3, [r3, #12]
 8013f04:	4a3f      	ldr	r2, [pc, #252]	; (8014004 <tcp_slowtmr+0x590>)
 8013f06:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8013f08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d013      	beq.n	8013f38 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f12:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f16:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013f18:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8013f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f1c:	3304      	adds	r3, #4
 8013f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f20:	8ad2      	ldrh	r2, [r2, #22]
 8013f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013f24:	8b09      	ldrh	r1, [r1, #24]
 8013f26:	9102      	str	r1, [sp, #8]
 8013f28:	9201      	str	r2, [sp, #4]
 8013f2a:	9300      	str	r3, [sp, #0]
 8013f2c:	462b      	mov	r3, r5
 8013f2e:	4622      	mov	r2, r4
 8013f30:	4601      	mov	r1, r0
 8013f32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f34:	f004 feae 	bl	8018c94 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8013f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f3a:	691b      	ldr	r3, [r3, #16]
 8013f3c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f40:	7d1b      	ldrb	r3, [r3, #20]
 8013f42:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f46:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f4a:	68db      	ldr	r3, [r3, #12]
 8013f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013f4e:	6838      	ldr	r0, [r7, #0]
 8013f50:	f7ff f8b8 	bl	80130c4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8013f54:	4b30      	ldr	r3, [pc, #192]	; (8014018 <tcp_slowtmr+0x5a4>)
 8013f56:	2200      	movs	r2, #0
 8013f58:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d004      	beq.n	8013f6a <tcp_slowtmr+0x4f6>
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	f06f 010c 	mvn.w	r1, #12
 8013f66:	68b8      	ldr	r0, [r7, #8]
 8013f68:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013f6a:	4b2b      	ldr	r3, [pc, #172]	; (8014018 <tcp_slowtmr+0x5a4>)
 8013f6c:	781b      	ldrb	r3, [r3, #0]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d037      	beq.n	8013fe2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8013f72:	e590      	b.n	8013a96 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8013f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f76:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7a:	68db      	ldr	r3, [r3, #12]
 8013f7c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8013f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f80:	7f1b      	ldrb	r3, [r3, #28]
 8013f82:	3301      	adds	r3, #1
 8013f84:	b2da      	uxtb	r2, r3
 8013f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f88:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f8c:	7f1a      	ldrb	r2, [r3, #28]
 8013f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f90:	7f5b      	ldrb	r3, [r3, #29]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d325      	bcc.n	8013fe2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8013f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f98:	2200      	movs	r2, #0
 8013f9a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8013f9c:	4b1e      	ldr	r3, [pc, #120]	; (8014018 <tcp_slowtmr+0x5a4>)
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8013fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d00b      	beq.n	8013fc4 <tcp_slowtmr+0x550>
 8013fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013fb4:	6912      	ldr	r2, [r2, #16]
 8013fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013fb8:	4610      	mov	r0, r2
 8013fba:	4798      	blx	r3
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8013fc2:	e002      	b.n	8013fca <tcp_slowtmr+0x556>
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8013fca:	4b13      	ldr	r3, [pc, #76]	; (8014018 <tcp_slowtmr+0x5a4>)
 8013fcc:	781b      	ldrb	r3, [r3, #0]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d000      	beq.n	8013fd4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8013fd2:	e560      	b.n	8013a96 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013fd4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d102      	bne.n	8013fe2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8013fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fde:	f004 f8a5 	bl	801812c <tcp_output>
  while (pcb != NULL) {
 8013fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	f47f ad5c 	bne.w	8013aa2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013fea:	2300      	movs	r3, #0
 8013fec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8013fee:	4b0b      	ldr	r3, [pc, #44]	; (801401c <tcp_slowtmr+0x5a8>)
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013ff4:	e067      	b.n	80140c6 <tcp_slowtmr+0x652>
 8013ff6:	bf00      	nop
 8013ff8:	2000dd8c 	.word	0x2000dd8c
 8013ffc:	10624dd3 	.word	0x10624dd3
 8014000:	000124f8 	.word	0x000124f8
 8014004:	2000dd98 	.word	0x2000dd98
 8014008:	0801f6a0 	.word	0x0801f6a0
 801400c:	0801fad8 	.word	0x0801fad8
 8014010:	0801f6e4 	.word	0x0801f6e4
 8014014:	0801fb04 	.word	0x0801fb04
 8014018:	2000dda0 	.word	0x2000dda0
 801401c:	2000dd9c 	.word	0x2000dd9c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014022:	7d1b      	ldrb	r3, [r3, #20]
 8014024:	2b0a      	cmp	r3, #10
 8014026:	d006      	beq.n	8014036 <tcp_slowtmr+0x5c2>
 8014028:	4b2b      	ldr	r3, [pc, #172]	; (80140d8 <tcp_slowtmr+0x664>)
 801402a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801402e:	492b      	ldr	r1, [pc, #172]	; (80140dc <tcp_slowtmr+0x668>)
 8014030:	482b      	ldr	r0, [pc, #172]	; (80140e0 <tcp_slowtmr+0x66c>)
 8014032:	f008 fd3f 	bl	801cab4 <iprintf>
    pcb_remove = 0;
 8014036:	2300      	movs	r3, #0
 8014038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801403c:	4b29      	ldr	r3, [pc, #164]	; (80140e4 <tcp_slowtmr+0x670>)
 801403e:	681a      	ldr	r2, [r3, #0]
 8014040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014042:	6a1b      	ldr	r3, [r3, #32]
 8014044:	1ad3      	subs	r3, r2, r3
 8014046:	2bf0      	cmp	r3, #240	; 0xf0
 8014048:	d904      	bls.n	8014054 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801404a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801404e:	3301      	adds	r3, #1
 8014050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014058:	2b00      	cmp	r3, #0
 801405a:	d02f      	beq.n	80140bc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801405c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801405e:	f000 fbf9 	bl	8014854 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8014062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014064:	2b00      	cmp	r3, #0
 8014066:	d010      	beq.n	801408a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014068:	4b1f      	ldr	r3, [pc, #124]	; (80140e8 <tcp_slowtmr+0x674>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801406e:	429a      	cmp	r2, r3
 8014070:	d106      	bne.n	8014080 <tcp_slowtmr+0x60c>
 8014072:	4b19      	ldr	r3, [pc, #100]	; (80140d8 <tcp_slowtmr+0x664>)
 8014074:	f240 52af 	movw	r2, #1455	; 0x5af
 8014078:	491c      	ldr	r1, [pc, #112]	; (80140ec <tcp_slowtmr+0x678>)
 801407a:	4819      	ldr	r0, [pc, #100]	; (80140e0 <tcp_slowtmr+0x66c>)
 801407c:	f008 fd1a 	bl	801cab4 <iprintf>
        prev->next = pcb->next;
 8014080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014082:	68da      	ldr	r2, [r3, #12]
 8014084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014086:	60da      	str	r2, [r3, #12]
 8014088:	e00f      	b.n	80140aa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801408a:	4b17      	ldr	r3, [pc, #92]	; (80140e8 <tcp_slowtmr+0x674>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014090:	429a      	cmp	r2, r3
 8014092:	d006      	beq.n	80140a2 <tcp_slowtmr+0x62e>
 8014094:	4b10      	ldr	r3, [pc, #64]	; (80140d8 <tcp_slowtmr+0x664>)
 8014096:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801409a:	4915      	ldr	r1, [pc, #84]	; (80140f0 <tcp_slowtmr+0x67c>)
 801409c:	4810      	ldr	r0, [pc, #64]	; (80140e0 <tcp_slowtmr+0x66c>)
 801409e:	f008 fd09 	bl	801cab4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80140a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a4:	68db      	ldr	r3, [r3, #12]
 80140a6:	4a10      	ldr	r2, [pc, #64]	; (80140e8 <tcp_slowtmr+0x674>)
 80140a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80140aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80140ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b0:	68db      	ldr	r3, [r3, #12]
 80140b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80140b4:	69f8      	ldr	r0, [r7, #28]
 80140b6:	f7ff f805 	bl	80130c4 <tcp_free>
 80140ba:	e004      	b.n	80140c6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80140bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80140c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c2:	68db      	ldr	r3, [r3, #12]
 80140c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80140c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d1a9      	bne.n	8014020 <tcp_slowtmr+0x5ac>
    }
  }
}
 80140cc:	bf00      	nop
 80140ce:	bf00      	nop
 80140d0:	3730      	adds	r7, #48	; 0x30
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bdb0      	pop	{r4, r5, r7, pc}
 80140d6:	bf00      	nop
 80140d8:	0801f6a0 	.word	0x0801f6a0
 80140dc:	0801fb30 	.word	0x0801fb30
 80140e0:	0801f6e4 	.word	0x0801f6e4
 80140e4:	2000dd8c 	.word	0x2000dd8c
 80140e8:	2000dd9c 	.word	0x2000dd9c
 80140ec:	0801fb60 	.word	0x0801fb60
 80140f0:	0801fb88 	.word	0x0801fb88

080140f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b082      	sub	sp, #8
 80140f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80140fa:	4b2d      	ldr	r3, [pc, #180]	; (80141b0 <tcp_fasttmr+0xbc>)
 80140fc:	781b      	ldrb	r3, [r3, #0]
 80140fe:	3301      	adds	r3, #1
 8014100:	b2da      	uxtb	r2, r3
 8014102:	4b2b      	ldr	r3, [pc, #172]	; (80141b0 <tcp_fasttmr+0xbc>)
 8014104:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8014106:	4b2b      	ldr	r3, [pc, #172]	; (80141b4 <tcp_fasttmr+0xc0>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801410c:	e048      	b.n	80141a0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	7f9a      	ldrb	r2, [r3, #30]
 8014112:	4b27      	ldr	r3, [pc, #156]	; (80141b0 <tcp_fasttmr+0xbc>)
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	429a      	cmp	r2, r3
 8014118:	d03f      	beq.n	801419a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801411a:	4b25      	ldr	r3, [pc, #148]	; (80141b0 <tcp_fasttmr+0xbc>)
 801411c:	781a      	ldrb	r2, [r3, #0]
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	8b5b      	ldrh	r3, [r3, #26]
 8014126:	f003 0301 	and.w	r3, r3, #1
 801412a:	2b00      	cmp	r3, #0
 801412c:	d010      	beq.n	8014150 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	8b5b      	ldrh	r3, [r3, #26]
 8014132:	f043 0302 	orr.w	r3, r3, #2
 8014136:	b29a      	uxth	r2, r3
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f003 fff5 	bl	801812c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	8b5b      	ldrh	r3, [r3, #26]
 8014146:	f023 0303 	bic.w	r3, r3, #3
 801414a:	b29a      	uxth	r2, r3
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	8b5b      	ldrh	r3, [r3, #26]
 8014154:	f003 0308 	and.w	r3, r3, #8
 8014158:	2b00      	cmp	r3, #0
 801415a:	d009      	beq.n	8014170 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	8b5b      	ldrh	r3, [r3, #26]
 8014160:	f023 0308 	bic.w	r3, r3, #8
 8014164:	b29a      	uxth	r2, r3
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f7ff f93e 	bl	80133ec <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	68db      	ldr	r3, [r3, #12]
 8014174:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801417a:	2b00      	cmp	r3, #0
 801417c:	d00a      	beq.n	8014194 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801417e:	4b0e      	ldr	r3, [pc, #56]	; (80141b8 <tcp_fasttmr+0xc4>)
 8014180:	2200      	movs	r2, #0
 8014182:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8014184:	6878      	ldr	r0, [r7, #4]
 8014186:	f000 f819 	bl	80141bc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801418a:	4b0b      	ldr	r3, [pc, #44]	; (80141b8 <tcp_fasttmr+0xc4>)
 801418c:	781b      	ldrb	r3, [r3, #0]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d000      	beq.n	8014194 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8014192:	e7b8      	b.n	8014106 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8014194:	683b      	ldr	r3, [r7, #0]
 8014196:	607b      	str	r3, [r7, #4]
 8014198:	e002      	b.n	80141a0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	68db      	ldr	r3, [r3, #12]
 801419e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d1b3      	bne.n	801410e <tcp_fasttmr+0x1a>
    }
  }
}
 80141a6:	bf00      	nop
 80141a8:	bf00      	nop
 80141aa:	3708      	adds	r7, #8
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}
 80141b0:	2000dda2 	.word	0x2000dda2
 80141b4:	2000dd98 	.word	0x2000dd98
 80141b8:	2000dda0 	.word	0x2000dda0

080141bc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80141bc:	b590      	push	{r4, r7, lr}
 80141be:	b085      	sub	sp, #20
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d109      	bne.n	80141de <tcp_process_refused_data+0x22>
 80141ca:	4b37      	ldr	r3, [pc, #220]	; (80142a8 <tcp_process_refused_data+0xec>)
 80141cc:	f240 6209 	movw	r2, #1545	; 0x609
 80141d0:	4936      	ldr	r1, [pc, #216]	; (80142ac <tcp_process_refused_data+0xf0>)
 80141d2:	4837      	ldr	r0, [pc, #220]	; (80142b0 <tcp_process_refused_data+0xf4>)
 80141d4:	f008 fc6e 	bl	801cab4 <iprintf>
 80141d8:	f06f 030f 	mvn.w	r3, #15
 80141dc:	e060      	b.n	80142a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80141e2:	7b5b      	ldrb	r3, [r3, #13]
 80141e4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80141ea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	2200      	movs	r2, #0
 80141f0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d00b      	beq.n	8014214 <tcp_process_refused_data+0x58>
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	6918      	ldr	r0, [r3, #16]
 8014206:	2300      	movs	r3, #0
 8014208:	68ba      	ldr	r2, [r7, #8]
 801420a:	6879      	ldr	r1, [r7, #4]
 801420c:	47a0      	blx	r4
 801420e:	4603      	mov	r3, r0
 8014210:	73fb      	strb	r3, [r7, #15]
 8014212:	e007      	b.n	8014224 <tcp_process_refused_data+0x68>
 8014214:	2300      	movs	r3, #0
 8014216:	68ba      	ldr	r2, [r7, #8]
 8014218:	6879      	ldr	r1, [r7, #4]
 801421a:	2000      	movs	r0, #0
 801421c:	f000 f8a4 	bl	8014368 <tcp_recv_null>
 8014220:	4603      	mov	r3, r0
 8014222:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d12a      	bne.n	8014282 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801422c:	7bbb      	ldrb	r3, [r7, #14]
 801422e:	f003 0320 	and.w	r3, r3, #32
 8014232:	2b00      	cmp	r3, #0
 8014234:	d033      	beq.n	801429e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801423a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801423e:	d005      	beq.n	801424c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014244:	3301      	adds	r3, #1
 8014246:	b29a      	uxth	r2, r3
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014252:	2b00      	cmp	r3, #0
 8014254:	d00b      	beq.n	801426e <tcp_process_refused_data+0xb2>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	6918      	ldr	r0, [r3, #16]
 8014260:	2300      	movs	r3, #0
 8014262:	2200      	movs	r2, #0
 8014264:	6879      	ldr	r1, [r7, #4]
 8014266:	47a0      	blx	r4
 8014268:	4603      	mov	r3, r0
 801426a:	73fb      	strb	r3, [r7, #15]
 801426c:	e001      	b.n	8014272 <tcp_process_refused_data+0xb6>
 801426e:	2300      	movs	r3, #0
 8014270:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8014272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014276:	f113 0f0d 	cmn.w	r3, #13
 801427a:	d110      	bne.n	801429e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801427c:	f06f 030c 	mvn.w	r3, #12
 8014280:	e00e      	b.n	80142a0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8014282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014286:	f113 0f0d 	cmn.w	r3, #13
 801428a:	d102      	bne.n	8014292 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801428c:	f06f 030c 	mvn.w	r3, #12
 8014290:	e006      	b.n	80142a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	68ba      	ldr	r2, [r7, #8]
 8014296:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8014298:	f06f 0304 	mvn.w	r3, #4
 801429c:	e000      	b.n	80142a0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801429e:	2300      	movs	r3, #0
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	3714      	adds	r7, #20
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd90      	pop	{r4, r7, pc}
 80142a8:	0801f6a0 	.word	0x0801f6a0
 80142ac:	0801fbb0 	.word	0x0801fbb0
 80142b0:	0801f6e4 	.word	0x0801f6e4

080142b4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b084      	sub	sp, #16
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80142bc:	e007      	b.n	80142ce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f000 f80a 	bl	80142de <tcp_seg_free>
    seg = next;
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d1f4      	bne.n	80142be <tcp_segs_free+0xa>
  }
}
 80142d4:	bf00      	nop
 80142d6:	bf00      	nop
 80142d8:	3710      	adds	r7, #16
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}

080142de <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80142de:	b580      	push	{r7, lr}
 80142e0:	b082      	sub	sp, #8
 80142e2:	af00      	add	r7, sp, #0
 80142e4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d00c      	beq.n	8014306 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	685b      	ldr	r3, [r3, #4]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d004      	beq.n	80142fe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	685b      	ldr	r3, [r3, #4]
 80142f8:	4618      	mov	r0, r3
 80142fa:	f7fe fc27 	bl	8012b4c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80142fe:	6879      	ldr	r1, [r7, #4]
 8014300:	2003      	movs	r0, #3
 8014302:	f7fd fde3 	bl	8011ecc <memp_free>
  }
}
 8014306:	bf00      	nop
 8014308:	3708      	adds	r7, #8
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}
	...

08014310 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b084      	sub	sp, #16
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d106      	bne.n	801432c <tcp_seg_copy+0x1c>
 801431e:	4b0f      	ldr	r3, [pc, #60]	; (801435c <tcp_seg_copy+0x4c>)
 8014320:	f240 6282 	movw	r2, #1666	; 0x682
 8014324:	490e      	ldr	r1, [pc, #56]	; (8014360 <tcp_seg_copy+0x50>)
 8014326:	480f      	ldr	r0, [pc, #60]	; (8014364 <tcp_seg_copy+0x54>)
 8014328:	f008 fbc4 	bl	801cab4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801432c:	2003      	movs	r0, #3
 801432e:	f7fd fd7b 	bl	8011e28 <memp_malloc>
 8014332:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d101      	bne.n	801433e <tcp_seg_copy+0x2e>
    return NULL;
 801433a:	2300      	movs	r3, #0
 801433c:	e00a      	b.n	8014354 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801433e:	2210      	movs	r2, #16
 8014340:	6879      	ldr	r1, [r7, #4]
 8014342:	68f8      	ldr	r0, [r7, #12]
 8014344:	f008 faa6 	bl	801c894 <memcpy>
  pbuf_ref(cseg->p);
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	685b      	ldr	r3, [r3, #4]
 801434c:	4618      	mov	r0, r3
 801434e:	f7fe fca3 	bl	8012c98 <pbuf_ref>
  return cseg;
 8014352:	68fb      	ldr	r3, [r7, #12]
}
 8014354:	4618      	mov	r0, r3
 8014356:	3710      	adds	r7, #16
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}
 801435c:	0801f6a0 	.word	0x0801f6a0
 8014360:	0801fbf4 	.word	0x0801fbf4
 8014364:	0801f6e4 	.word	0x0801f6e4

08014368 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b084      	sub	sp, #16
 801436c:	af00      	add	r7, sp, #0
 801436e:	60f8      	str	r0, [r7, #12]
 8014370:	60b9      	str	r1, [r7, #8]
 8014372:	607a      	str	r2, [r7, #4]
 8014374:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d109      	bne.n	8014390 <tcp_recv_null+0x28>
 801437c:	4b12      	ldr	r3, [pc, #72]	; (80143c8 <tcp_recv_null+0x60>)
 801437e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014382:	4912      	ldr	r1, [pc, #72]	; (80143cc <tcp_recv_null+0x64>)
 8014384:	4812      	ldr	r0, [pc, #72]	; (80143d0 <tcp_recv_null+0x68>)
 8014386:	f008 fb95 	bl	801cab4 <iprintf>
 801438a:	f06f 030f 	mvn.w	r3, #15
 801438e:	e016      	b.n	80143be <tcp_recv_null+0x56>

  if (p != NULL) {
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d009      	beq.n	80143aa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	891b      	ldrh	r3, [r3, #8]
 801439a:	4619      	mov	r1, r3
 801439c:	68b8      	ldr	r0, [r7, #8]
 801439e:	f7ff fad3 	bl	8013948 <tcp_recved>
    pbuf_free(p);
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f7fe fbd2 	bl	8012b4c <pbuf_free>
 80143a8:	e008      	b.n	80143bc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80143aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d104      	bne.n	80143bc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80143b2:	68b8      	ldr	r0, [r7, #8]
 80143b4:	f7ff f884 	bl	80134c0 <tcp_close>
 80143b8:	4603      	mov	r3, r0
 80143ba:	e000      	b.n	80143be <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80143bc:	2300      	movs	r3, #0
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3710      	adds	r7, #16
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}
 80143c6:	bf00      	nop
 80143c8:	0801f6a0 	.word	0x0801f6a0
 80143cc:	0801fc10 	.word	0x0801fc10
 80143d0:	0801f6e4 	.word	0x0801f6e4

080143d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b086      	sub	sp, #24
 80143d8:	af00      	add	r7, sp, #0
 80143da:	4603      	mov	r3, r0
 80143dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80143de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	db01      	blt.n	80143ea <tcp_kill_prio+0x16>
 80143e6:	79fb      	ldrb	r3, [r7, #7]
 80143e8:	e000      	b.n	80143ec <tcp_kill_prio+0x18>
 80143ea:	237f      	movs	r3, #127	; 0x7f
 80143ec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80143ee:	7afb      	ldrb	r3, [r7, #11]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d034      	beq.n	801445e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80143f4:	7afb      	ldrb	r3, [r7, #11]
 80143f6:	3b01      	subs	r3, #1
 80143f8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80143fa:	2300      	movs	r3, #0
 80143fc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80143fe:	2300      	movs	r3, #0
 8014400:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014402:	4b19      	ldr	r3, [pc, #100]	; (8014468 <tcp_kill_prio+0x94>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	617b      	str	r3, [r7, #20]
 8014408:	e01f      	b.n	801444a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	7d5b      	ldrb	r3, [r3, #21]
 801440e:	7afa      	ldrb	r2, [r7, #11]
 8014410:	429a      	cmp	r2, r3
 8014412:	d80c      	bhi.n	801442e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014418:	7afa      	ldrb	r2, [r7, #11]
 801441a:	429a      	cmp	r2, r3
 801441c:	d112      	bne.n	8014444 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801441e:	4b13      	ldr	r3, [pc, #76]	; (801446c <tcp_kill_prio+0x98>)
 8014420:	681a      	ldr	r2, [r3, #0]
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	6a1b      	ldr	r3, [r3, #32]
 8014426:	1ad3      	subs	r3, r2, r3
 8014428:	68fa      	ldr	r2, [r7, #12]
 801442a:	429a      	cmp	r2, r3
 801442c:	d80a      	bhi.n	8014444 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801442e:	4b0f      	ldr	r3, [pc, #60]	; (801446c <tcp_kill_prio+0x98>)
 8014430:	681a      	ldr	r2, [r3, #0]
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	6a1b      	ldr	r3, [r3, #32]
 8014436:	1ad3      	subs	r3, r2, r3
 8014438:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801443a:	697b      	ldr	r3, [r7, #20]
 801443c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801443e:	697b      	ldr	r3, [r7, #20]
 8014440:	7d5b      	ldrb	r3, [r3, #21]
 8014442:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014444:	697b      	ldr	r3, [r7, #20]
 8014446:	68db      	ldr	r3, [r3, #12]
 8014448:	617b      	str	r3, [r7, #20]
 801444a:	697b      	ldr	r3, [r7, #20]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d1dc      	bne.n	801440a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014450:	693b      	ldr	r3, [r7, #16]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d004      	beq.n	8014460 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014456:	6938      	ldr	r0, [r7, #16]
 8014458:	f7ff f978 	bl	801374c <tcp_abort>
 801445c:	e000      	b.n	8014460 <tcp_kill_prio+0x8c>
    return;
 801445e:	bf00      	nop
  }
}
 8014460:	3718      	adds	r7, #24
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}
 8014466:	bf00      	nop
 8014468:	2000dd98 	.word	0x2000dd98
 801446c:	2000dd8c 	.word	0x2000dd8c

08014470 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b086      	sub	sp, #24
 8014474:	af00      	add	r7, sp, #0
 8014476:	4603      	mov	r3, r0
 8014478:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801447a:	79fb      	ldrb	r3, [r7, #7]
 801447c:	2b08      	cmp	r3, #8
 801447e:	d009      	beq.n	8014494 <tcp_kill_state+0x24>
 8014480:	79fb      	ldrb	r3, [r7, #7]
 8014482:	2b09      	cmp	r3, #9
 8014484:	d006      	beq.n	8014494 <tcp_kill_state+0x24>
 8014486:	4b1a      	ldr	r3, [pc, #104]	; (80144f0 <tcp_kill_state+0x80>)
 8014488:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801448c:	4919      	ldr	r1, [pc, #100]	; (80144f4 <tcp_kill_state+0x84>)
 801448e:	481a      	ldr	r0, [pc, #104]	; (80144f8 <tcp_kill_state+0x88>)
 8014490:	f008 fb10 	bl	801cab4 <iprintf>

  inactivity = 0;
 8014494:	2300      	movs	r3, #0
 8014496:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014498:	2300      	movs	r3, #0
 801449a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801449c:	4b17      	ldr	r3, [pc, #92]	; (80144fc <tcp_kill_state+0x8c>)
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	617b      	str	r3, [r7, #20]
 80144a2:	e017      	b.n	80144d4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80144a4:	697b      	ldr	r3, [r7, #20]
 80144a6:	7d1b      	ldrb	r3, [r3, #20]
 80144a8:	79fa      	ldrb	r2, [r7, #7]
 80144aa:	429a      	cmp	r2, r3
 80144ac:	d10f      	bne.n	80144ce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80144ae:	4b14      	ldr	r3, [pc, #80]	; (8014500 <tcp_kill_state+0x90>)
 80144b0:	681a      	ldr	r2, [r3, #0]
 80144b2:	697b      	ldr	r3, [r7, #20]
 80144b4:	6a1b      	ldr	r3, [r3, #32]
 80144b6:	1ad3      	subs	r3, r2, r3
 80144b8:	68fa      	ldr	r2, [r7, #12]
 80144ba:	429a      	cmp	r2, r3
 80144bc:	d807      	bhi.n	80144ce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80144be:	4b10      	ldr	r3, [pc, #64]	; (8014500 <tcp_kill_state+0x90>)
 80144c0:	681a      	ldr	r2, [r3, #0]
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	6a1b      	ldr	r3, [r3, #32]
 80144c6:	1ad3      	subs	r3, r2, r3
 80144c8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80144ce:	697b      	ldr	r3, [r7, #20]
 80144d0:	68db      	ldr	r3, [r3, #12]
 80144d2:	617b      	str	r3, [r7, #20]
 80144d4:	697b      	ldr	r3, [r7, #20]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d1e4      	bne.n	80144a4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80144da:	693b      	ldr	r3, [r7, #16]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d003      	beq.n	80144e8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80144e0:	2100      	movs	r1, #0
 80144e2:	6938      	ldr	r0, [r7, #16]
 80144e4:	f7ff f874 	bl	80135d0 <tcp_abandon>
  }
}
 80144e8:	bf00      	nop
 80144ea:	3718      	adds	r7, #24
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}
 80144f0:	0801f6a0 	.word	0x0801f6a0
 80144f4:	0801fc2c 	.word	0x0801fc2c
 80144f8:	0801f6e4 	.word	0x0801f6e4
 80144fc:	2000dd98 	.word	0x2000dd98
 8014500:	2000dd8c 	.word	0x2000dd8c

08014504 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b084      	sub	sp, #16
 8014508:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801450a:	2300      	movs	r3, #0
 801450c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801450e:	2300      	movs	r3, #0
 8014510:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014512:	4b12      	ldr	r3, [pc, #72]	; (801455c <tcp_kill_timewait+0x58>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	60fb      	str	r3, [r7, #12]
 8014518:	e012      	b.n	8014540 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801451a:	4b11      	ldr	r3, [pc, #68]	; (8014560 <tcp_kill_timewait+0x5c>)
 801451c:	681a      	ldr	r2, [r3, #0]
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	6a1b      	ldr	r3, [r3, #32]
 8014522:	1ad3      	subs	r3, r2, r3
 8014524:	687a      	ldr	r2, [r7, #4]
 8014526:	429a      	cmp	r2, r3
 8014528:	d807      	bhi.n	801453a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801452a:	4b0d      	ldr	r3, [pc, #52]	; (8014560 <tcp_kill_timewait+0x5c>)
 801452c:	681a      	ldr	r2, [r3, #0]
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	6a1b      	ldr	r3, [r3, #32]
 8014532:	1ad3      	subs	r3, r2, r3
 8014534:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	68db      	ldr	r3, [r3, #12]
 801453e:	60fb      	str	r3, [r7, #12]
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d1e9      	bne.n	801451a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d002      	beq.n	8014552 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801454c:	68b8      	ldr	r0, [r7, #8]
 801454e:	f7ff f8fd 	bl	801374c <tcp_abort>
  }
}
 8014552:	bf00      	nop
 8014554:	3710      	adds	r7, #16
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}
 801455a:	bf00      	nop
 801455c:	2000dd9c 	.word	0x2000dd9c
 8014560:	2000dd8c 	.word	0x2000dd8c

08014564 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b082      	sub	sp, #8
 8014568:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801456a:	4b10      	ldr	r3, [pc, #64]	; (80145ac <tcp_handle_closepend+0x48>)
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014570:	e014      	b.n	801459c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	68db      	ldr	r3, [r3, #12]
 8014576:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	8b5b      	ldrh	r3, [r3, #26]
 801457c:	f003 0308 	and.w	r3, r3, #8
 8014580:	2b00      	cmp	r3, #0
 8014582:	d009      	beq.n	8014598 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	8b5b      	ldrh	r3, [r3, #26]
 8014588:	f023 0308 	bic.w	r3, r3, #8
 801458c:	b29a      	uxth	r2, r3
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	f7fe ff2a 	bl	80133ec <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d1e7      	bne.n	8014572 <tcp_handle_closepend+0xe>
  }
}
 80145a2:	bf00      	nop
 80145a4:	bf00      	nop
 80145a6:	3708      	adds	r7, #8
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}
 80145ac:	2000dd98 	.word	0x2000dd98

080145b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b084      	sub	sp, #16
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	4603      	mov	r3, r0
 80145b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80145ba:	2001      	movs	r0, #1
 80145bc:	f7fd fc34 	bl	8011e28 <memp_malloc>
 80145c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d126      	bne.n	8014616 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80145c8:	f7ff ffcc 	bl	8014564 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80145cc:	f7ff ff9a 	bl	8014504 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80145d0:	2001      	movs	r0, #1
 80145d2:	f7fd fc29 	bl	8011e28 <memp_malloc>
 80145d6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d11b      	bne.n	8014616 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80145de:	2009      	movs	r0, #9
 80145e0:	f7ff ff46 	bl	8014470 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80145e4:	2001      	movs	r0, #1
 80145e6:	f7fd fc1f 	bl	8011e28 <memp_malloc>
 80145ea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d111      	bne.n	8014616 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80145f2:	2008      	movs	r0, #8
 80145f4:	f7ff ff3c 	bl	8014470 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80145f8:	2001      	movs	r0, #1
 80145fa:	f7fd fc15 	bl	8011e28 <memp_malloc>
 80145fe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d107      	bne.n	8014616 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014606:	79fb      	ldrb	r3, [r7, #7]
 8014608:	4618      	mov	r0, r3
 801460a:	f7ff fee3 	bl	80143d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801460e:	2001      	movs	r0, #1
 8014610:	f7fd fc0a 	bl	8011e28 <memp_malloc>
 8014614:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d03f      	beq.n	801469c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801461c:	229c      	movs	r2, #156	; 0x9c
 801461e:	2100      	movs	r1, #0
 8014620:	68f8      	ldr	r0, [r7, #12]
 8014622:	f008 f95f 	bl	801c8e4 <memset>
    pcb->prio = prio;
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	79fa      	ldrb	r2, [r7, #7]
 801462a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014632:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801463c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	22ff      	movs	r2, #255	; 0xff
 801464a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014652:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	2206      	movs	r2, #6
 8014658:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	2206      	movs	r2, #6
 8014660:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014668:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	2201      	movs	r2, #1
 801466e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8014672:	4b0d      	ldr	r3, [pc, #52]	; (80146a8 <tcp_alloc+0xf8>)
 8014674:	681a      	ldr	r2, [r3, #0]
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801467a:	4b0c      	ldr	r3, [pc, #48]	; (80146ac <tcp_alloc+0xfc>)
 801467c:	781a      	ldrb	r2, [r3, #0]
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014688:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	4a08      	ldr	r2, [pc, #32]	; (80146b0 <tcp_alloc+0x100>)
 8014690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	4a07      	ldr	r2, [pc, #28]	; (80146b4 <tcp_alloc+0x104>)
 8014698:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801469c:	68fb      	ldr	r3, [r7, #12]
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3710      	adds	r7, #16
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	bf00      	nop
 80146a8:	2000dd8c 	.word	0x2000dd8c
 80146ac:	2000dda2 	.word	0x2000dda2
 80146b0:	08014369 	.word	0x08014369
 80146b4:	006ddd00 	.word	0x006ddd00

080146b8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b084      	sub	sp, #16
 80146bc:	af00      	add	r7, sp, #0
 80146be:	4603      	mov	r3, r0
 80146c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80146c2:	2040      	movs	r0, #64	; 0x40
 80146c4:	f7ff ff74 	bl	80145b0 <tcp_alloc>
 80146c8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80146ca:	68fb      	ldr	r3, [r7, #12]
}
 80146cc:	4618      	mov	r0, r3
 80146ce:	3710      	adds	r7, #16
 80146d0:	46bd      	mov	sp, r7
 80146d2:	bd80      	pop	{r7, pc}

080146d4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80146d4:	b480      	push	{r7}
 80146d6:	b083      	sub	sp, #12
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
 80146dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d002      	beq.n	80146ea <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	683a      	ldr	r2, [r7, #0]
 80146e8:	611a      	str	r2, [r3, #16]
  }
}
 80146ea:	bf00      	nop
 80146ec:	370c      	adds	r7, #12
 80146ee:	46bd      	mov	sp, r7
 80146f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f4:	4770      	bx	lr
	...

080146f8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b082      	sub	sp, #8
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d00e      	beq.n	8014726 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	7d1b      	ldrb	r3, [r3, #20]
 801470c:	2b01      	cmp	r3, #1
 801470e:	d106      	bne.n	801471e <tcp_recv+0x26>
 8014710:	4b07      	ldr	r3, [pc, #28]	; (8014730 <tcp_recv+0x38>)
 8014712:	f240 72df 	movw	r2, #2015	; 0x7df
 8014716:	4907      	ldr	r1, [pc, #28]	; (8014734 <tcp_recv+0x3c>)
 8014718:	4807      	ldr	r0, [pc, #28]	; (8014738 <tcp_recv+0x40>)
 801471a:	f008 f9cb 	bl	801cab4 <iprintf>
    pcb->recv = recv;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	683a      	ldr	r2, [r7, #0]
 8014722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8014726:	bf00      	nop
 8014728:	3708      	adds	r7, #8
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}
 801472e:	bf00      	nop
 8014730:	0801f6a0 	.word	0x0801f6a0
 8014734:	0801fc3c 	.word	0x0801fc3c
 8014738:	0801f6e4 	.word	0x0801f6e4

0801473c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b082      	sub	sp, #8
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d00e      	beq.n	801476a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	7d1b      	ldrb	r3, [r3, #20]
 8014750:	2b01      	cmp	r3, #1
 8014752:	d106      	bne.n	8014762 <tcp_sent+0x26>
 8014754:	4b07      	ldr	r3, [pc, #28]	; (8014774 <tcp_sent+0x38>)
 8014756:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801475a:	4907      	ldr	r1, [pc, #28]	; (8014778 <tcp_sent+0x3c>)
 801475c:	4807      	ldr	r0, [pc, #28]	; (801477c <tcp_sent+0x40>)
 801475e:	f008 f9a9 	bl	801cab4 <iprintf>
    pcb->sent = sent;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	683a      	ldr	r2, [r7, #0]
 8014766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801476a:	bf00      	nop
 801476c:	3708      	adds	r7, #8
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}
 8014772:	bf00      	nop
 8014774:	0801f6a0 	.word	0x0801f6a0
 8014778:	0801fc64 	.word	0x0801fc64
 801477c:	0801f6e4 	.word	0x0801f6e4

08014780 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b082      	sub	sp, #8
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d00e      	beq.n	80147ae <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	7d1b      	ldrb	r3, [r3, #20]
 8014794:	2b01      	cmp	r3, #1
 8014796:	d106      	bne.n	80147a6 <tcp_err+0x26>
 8014798:	4b07      	ldr	r3, [pc, #28]	; (80147b8 <tcp_err+0x38>)
 801479a:	f640 020d 	movw	r2, #2061	; 0x80d
 801479e:	4907      	ldr	r1, [pc, #28]	; (80147bc <tcp_err+0x3c>)
 80147a0:	4807      	ldr	r0, [pc, #28]	; (80147c0 <tcp_err+0x40>)
 80147a2:	f008 f987 	bl	801cab4 <iprintf>
    pcb->errf = err;
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	683a      	ldr	r2, [r7, #0]
 80147aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80147ae:	bf00      	nop
 80147b0:	3708      	adds	r7, #8
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}
 80147b6:	bf00      	nop
 80147b8:	0801f6a0 	.word	0x0801f6a0
 80147bc:	0801fc8c 	.word	0x0801fc8c
 80147c0:	0801f6e4 	.word	0x0801f6e4

080147c4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80147c4:	b480      	push	{r7}
 80147c6:	b085      	sub	sp, #20
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d008      	beq.n	80147e6 <tcp_accept+0x22>
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	7d1b      	ldrb	r3, [r3, #20]
 80147d8:	2b01      	cmp	r3, #1
 80147da:	d104      	bne.n	80147e6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	683a      	ldr	r2, [r7, #0]
 80147e4:	619a      	str	r2, [r3, #24]
  }
}
 80147e6:	bf00      	nop
 80147e8:	3714      	adds	r7, #20
 80147ea:	46bd      	mov	sp, r7
 80147ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f0:	4770      	bx	lr
	...

080147f4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b084      	sub	sp, #16
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	60b9      	str	r1, [r7, #8]
 80147fe:	4613      	mov	r3, r2
 8014800:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d107      	bne.n	8014818 <tcp_poll+0x24>
 8014808:	4b0e      	ldr	r3, [pc, #56]	; (8014844 <tcp_poll+0x50>)
 801480a:	f640 023d 	movw	r2, #2109	; 0x83d
 801480e:	490e      	ldr	r1, [pc, #56]	; (8014848 <tcp_poll+0x54>)
 8014810:	480e      	ldr	r0, [pc, #56]	; (801484c <tcp_poll+0x58>)
 8014812:	f008 f94f 	bl	801cab4 <iprintf>
 8014816:	e011      	b.n	801483c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	7d1b      	ldrb	r3, [r3, #20]
 801481c:	2b01      	cmp	r3, #1
 801481e:	d106      	bne.n	801482e <tcp_poll+0x3a>
 8014820:	4b08      	ldr	r3, [pc, #32]	; (8014844 <tcp_poll+0x50>)
 8014822:	f640 023e 	movw	r2, #2110	; 0x83e
 8014826:	490a      	ldr	r1, [pc, #40]	; (8014850 <tcp_poll+0x5c>)
 8014828:	4808      	ldr	r0, [pc, #32]	; (801484c <tcp_poll+0x58>)
 801482a:	f008 f943 	bl	801cab4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	68ba      	ldr	r2, [r7, #8]
 8014832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	79fa      	ldrb	r2, [r7, #7]
 801483a:	775a      	strb	r2, [r3, #29]
}
 801483c:	3710      	adds	r7, #16
 801483e:	46bd      	mov	sp, r7
 8014840:	bd80      	pop	{r7, pc}
 8014842:	bf00      	nop
 8014844:	0801f6a0 	.word	0x0801f6a0
 8014848:	0801fcb4 	.word	0x0801fcb4
 801484c:	0801f6e4 	.word	0x0801f6e4
 8014850:	0801fccc 	.word	0x0801fccc

08014854 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b082      	sub	sp, #8
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d107      	bne.n	8014872 <tcp_pcb_purge+0x1e>
 8014862:	4b21      	ldr	r3, [pc, #132]	; (80148e8 <tcp_pcb_purge+0x94>)
 8014864:	f640 0251 	movw	r2, #2129	; 0x851
 8014868:	4920      	ldr	r1, [pc, #128]	; (80148ec <tcp_pcb_purge+0x98>)
 801486a:	4821      	ldr	r0, [pc, #132]	; (80148f0 <tcp_pcb_purge+0x9c>)
 801486c:	f008 f922 	bl	801cab4 <iprintf>
 8014870:	e037      	b.n	80148e2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	7d1b      	ldrb	r3, [r3, #20]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d033      	beq.n	80148e2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801487e:	2b0a      	cmp	r3, #10
 8014880:	d02f      	beq.n	80148e2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014886:	2b01      	cmp	r3, #1
 8014888:	d02b      	beq.n	80148e2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801488e:	2b00      	cmp	r3, #0
 8014890:	d007      	beq.n	80148a2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014896:	4618      	mov	r0, r3
 8014898:	f7fe f958 	bl	8012b4c <pbuf_free>
      pcb->refused_data = NULL;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2200      	movs	r2, #0
 80148a0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d002      	beq.n	80148b0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80148aa:	6878      	ldr	r0, [r7, #4]
 80148ac:	f000 f986 	bl	8014bbc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148b6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148bc:	4618      	mov	r0, r3
 80148be:	f7ff fcf9 	bl	80142b4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148c6:	4618      	mov	r0, r3
 80148c8:	f7ff fcf4 	bl	80142b4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	2200      	movs	r2, #0
 80148d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	2200      	movs	r2, #0
 80148de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80148e2:	3708      	adds	r7, #8
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}
 80148e8:	0801f6a0 	.word	0x0801f6a0
 80148ec:	0801fcec 	.word	0x0801fcec
 80148f0:	0801f6e4 	.word	0x0801f6e4

080148f4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b084      	sub	sp, #16
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
 80148fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80148fe:	683b      	ldr	r3, [r7, #0]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d106      	bne.n	8014912 <tcp_pcb_remove+0x1e>
 8014904:	4b3e      	ldr	r3, [pc, #248]	; (8014a00 <tcp_pcb_remove+0x10c>)
 8014906:	f640 0283 	movw	r2, #2179	; 0x883
 801490a:	493e      	ldr	r1, [pc, #248]	; (8014a04 <tcp_pcb_remove+0x110>)
 801490c:	483e      	ldr	r0, [pc, #248]	; (8014a08 <tcp_pcb_remove+0x114>)
 801490e:	f008 f8d1 	bl	801cab4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d106      	bne.n	8014926 <tcp_pcb_remove+0x32>
 8014918:	4b39      	ldr	r3, [pc, #228]	; (8014a00 <tcp_pcb_remove+0x10c>)
 801491a:	f640 0284 	movw	r2, #2180	; 0x884
 801491e:	493b      	ldr	r1, [pc, #236]	; (8014a0c <tcp_pcb_remove+0x118>)
 8014920:	4839      	ldr	r0, [pc, #228]	; (8014a08 <tcp_pcb_remove+0x114>)
 8014922:	f008 f8c7 	bl	801cab4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	683a      	ldr	r2, [r7, #0]
 801492c:	429a      	cmp	r2, r3
 801492e:	d105      	bne.n	801493c <tcp_pcb_remove+0x48>
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	68da      	ldr	r2, [r3, #12]
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	601a      	str	r2, [r3, #0]
 801493a:	e013      	b.n	8014964 <tcp_pcb_remove+0x70>
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	60fb      	str	r3, [r7, #12]
 8014942:	e00c      	b.n	801495e <tcp_pcb_remove+0x6a>
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	68db      	ldr	r3, [r3, #12]
 8014948:	683a      	ldr	r2, [r7, #0]
 801494a:	429a      	cmp	r2, r3
 801494c:	d104      	bne.n	8014958 <tcp_pcb_remove+0x64>
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	68da      	ldr	r2, [r3, #12]
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	60da      	str	r2, [r3, #12]
 8014956:	e005      	b.n	8014964 <tcp_pcb_remove+0x70>
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	68db      	ldr	r3, [r3, #12]
 801495c:	60fb      	str	r3, [r7, #12]
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d1ef      	bne.n	8014944 <tcp_pcb_remove+0x50>
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	2200      	movs	r2, #0
 8014968:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801496a:	6838      	ldr	r0, [r7, #0]
 801496c:	f7ff ff72 	bl	8014854 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	7d1b      	ldrb	r3, [r3, #20]
 8014974:	2b0a      	cmp	r3, #10
 8014976:	d013      	beq.n	80149a0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014978:	683b      	ldr	r3, [r7, #0]
 801497a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801497c:	2b01      	cmp	r3, #1
 801497e:	d00f      	beq.n	80149a0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	8b5b      	ldrh	r3, [r3, #26]
 8014984:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014988:	2b00      	cmp	r3, #0
 801498a:	d009      	beq.n	80149a0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	8b5b      	ldrh	r3, [r3, #26]
 8014990:	f043 0302 	orr.w	r3, r3, #2
 8014994:	b29a      	uxth	r2, r3
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801499a:	6838      	ldr	r0, [r7, #0]
 801499c:	f003 fbc6 	bl	801812c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	7d1b      	ldrb	r3, [r3, #20]
 80149a4:	2b01      	cmp	r3, #1
 80149a6:	d020      	beq.n	80149ea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80149a8:	683b      	ldr	r3, [r7, #0]
 80149aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d006      	beq.n	80149be <tcp_pcb_remove+0xca>
 80149b0:	4b13      	ldr	r3, [pc, #76]	; (8014a00 <tcp_pcb_remove+0x10c>)
 80149b2:	f640 0293 	movw	r2, #2195	; 0x893
 80149b6:	4916      	ldr	r1, [pc, #88]	; (8014a10 <tcp_pcb_remove+0x11c>)
 80149b8:	4813      	ldr	r0, [pc, #76]	; (8014a08 <tcp_pcb_remove+0x114>)
 80149ba:	f008 f87b 	bl	801cab4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d006      	beq.n	80149d4 <tcp_pcb_remove+0xe0>
 80149c6:	4b0e      	ldr	r3, [pc, #56]	; (8014a00 <tcp_pcb_remove+0x10c>)
 80149c8:	f640 0294 	movw	r2, #2196	; 0x894
 80149cc:	4911      	ldr	r1, [pc, #68]	; (8014a14 <tcp_pcb_remove+0x120>)
 80149ce:	480e      	ldr	r0, [pc, #56]	; (8014a08 <tcp_pcb_remove+0x114>)
 80149d0:	f008 f870 	bl	801cab4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d006      	beq.n	80149ea <tcp_pcb_remove+0xf6>
 80149dc:	4b08      	ldr	r3, [pc, #32]	; (8014a00 <tcp_pcb_remove+0x10c>)
 80149de:	f640 0296 	movw	r2, #2198	; 0x896
 80149e2:	490d      	ldr	r1, [pc, #52]	; (8014a18 <tcp_pcb_remove+0x124>)
 80149e4:	4808      	ldr	r0, [pc, #32]	; (8014a08 <tcp_pcb_remove+0x114>)
 80149e6:	f008 f865 	bl	801cab4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	2200      	movs	r2, #0
 80149ee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	2200      	movs	r2, #0
 80149f4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80149f6:	bf00      	nop
 80149f8:	3710      	adds	r7, #16
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bd80      	pop	{r7, pc}
 80149fe:	bf00      	nop
 8014a00:	0801f6a0 	.word	0x0801f6a0
 8014a04:	0801fd08 	.word	0x0801fd08
 8014a08:	0801f6e4 	.word	0x0801f6e4
 8014a0c:	0801fd24 	.word	0x0801fd24
 8014a10:	0801fd44 	.word	0x0801fd44
 8014a14:	0801fd5c 	.word	0x0801fd5c
 8014a18:	0801fd78 	.word	0x0801fd78

08014a1c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d106      	bne.n	8014a38 <tcp_next_iss+0x1c>
 8014a2a:	4b0a      	ldr	r3, [pc, #40]	; (8014a54 <tcp_next_iss+0x38>)
 8014a2c:	f640 02af 	movw	r2, #2223	; 0x8af
 8014a30:	4909      	ldr	r1, [pc, #36]	; (8014a58 <tcp_next_iss+0x3c>)
 8014a32:	480a      	ldr	r0, [pc, #40]	; (8014a5c <tcp_next_iss+0x40>)
 8014a34:	f008 f83e 	bl	801cab4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014a38:	4b09      	ldr	r3, [pc, #36]	; (8014a60 <tcp_next_iss+0x44>)
 8014a3a:	681a      	ldr	r2, [r3, #0]
 8014a3c:	4b09      	ldr	r3, [pc, #36]	; (8014a64 <tcp_next_iss+0x48>)
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	4413      	add	r3, r2
 8014a42:	4a07      	ldr	r2, [pc, #28]	; (8014a60 <tcp_next_iss+0x44>)
 8014a44:	6013      	str	r3, [r2, #0]
  return iss;
 8014a46:	4b06      	ldr	r3, [pc, #24]	; (8014a60 <tcp_next_iss+0x44>)
 8014a48:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	3708      	adds	r7, #8
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bd80      	pop	{r7, pc}
 8014a52:	bf00      	nop
 8014a54:	0801f6a0 	.word	0x0801f6a0
 8014a58:	0801fd90 	.word	0x0801fd90
 8014a5c:	0801f6e4 	.word	0x0801f6e4
 8014a60:	200002d8 	.word	0x200002d8
 8014a64:	2000dd8c 	.word	0x2000dd8c

08014a68 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b086      	sub	sp, #24
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	4603      	mov	r3, r0
 8014a70:	60b9      	str	r1, [r7, #8]
 8014a72:	607a      	str	r2, [r7, #4]
 8014a74:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d106      	bne.n	8014a8a <tcp_eff_send_mss_netif+0x22>
 8014a7c:	4b14      	ldr	r3, [pc, #80]	; (8014ad0 <tcp_eff_send_mss_netif+0x68>)
 8014a7e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8014a82:	4914      	ldr	r1, [pc, #80]	; (8014ad4 <tcp_eff_send_mss_netif+0x6c>)
 8014a84:	4814      	ldr	r0, [pc, #80]	; (8014ad8 <tcp_eff_send_mss_netif+0x70>)
 8014a86:	f008 f815 	bl	801cab4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d101      	bne.n	8014a94 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014a90:	89fb      	ldrh	r3, [r7, #14]
 8014a92:	e019      	b.n	8014ac8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014a98:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014a9a:	8afb      	ldrh	r3, [r7, #22]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d012      	beq.n	8014ac6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014aa0:	2328      	movs	r3, #40	; 0x28
 8014aa2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014aa4:	8afa      	ldrh	r2, [r7, #22]
 8014aa6:	8abb      	ldrh	r3, [r7, #20]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d904      	bls.n	8014ab6 <tcp_eff_send_mss_netif+0x4e>
 8014aac:	8afa      	ldrh	r2, [r7, #22]
 8014aae:	8abb      	ldrh	r3, [r7, #20]
 8014ab0:	1ad3      	subs	r3, r2, r3
 8014ab2:	b29b      	uxth	r3, r3
 8014ab4:	e000      	b.n	8014ab8 <tcp_eff_send_mss_netif+0x50>
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014aba:	8a7a      	ldrh	r2, [r7, #18]
 8014abc:	89fb      	ldrh	r3, [r7, #14]
 8014abe:	4293      	cmp	r3, r2
 8014ac0:	bf28      	it	cs
 8014ac2:	4613      	movcs	r3, r2
 8014ac4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014ac6:	89fb      	ldrh	r3, [r7, #14]
}
 8014ac8:	4618      	mov	r0, r3
 8014aca:	3718      	adds	r7, #24
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}
 8014ad0:	0801f6a0 	.word	0x0801f6a0
 8014ad4:	0801fdac 	.word	0x0801fdac
 8014ad8:	0801f6e4 	.word	0x0801f6e4

08014adc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b084      	sub	sp, #16
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d119      	bne.n	8014b24 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014af0:	4b10      	ldr	r3, [pc, #64]	; (8014b34 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014af2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8014af6:	4910      	ldr	r1, [pc, #64]	; (8014b38 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014af8:	4810      	ldr	r0, [pc, #64]	; (8014b3c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014afa:	f007 ffdb 	bl	801cab4 <iprintf>

  while (pcb != NULL) {
 8014afe:	e011      	b.n	8014b24 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	681a      	ldr	r2, [r3, #0]
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	d108      	bne.n	8014b1e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	68db      	ldr	r3, [r3, #12]
 8014b10:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014b12:	68f8      	ldr	r0, [r7, #12]
 8014b14:	f7fe fe1a 	bl	801374c <tcp_abort>
      pcb = next;
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	60fb      	str	r3, [r7, #12]
 8014b1c:	e002      	b.n	8014b24 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	68db      	ldr	r3, [r3, #12]
 8014b22:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d1ea      	bne.n	8014b00 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014b2a:	bf00      	nop
 8014b2c:	bf00      	nop
 8014b2e:	3710      	adds	r7, #16
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}
 8014b34:	0801f6a0 	.word	0x0801f6a0
 8014b38:	0801fdd4 	.word	0x0801fdd4
 8014b3c:	0801f6e4 	.word	0x0801f6e4

08014b40 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b084      	sub	sp, #16
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
 8014b48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d02a      	beq.n	8014ba6 <tcp_netif_ip_addr_changed+0x66>
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d026      	beq.n	8014ba6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014b58:	4b15      	ldr	r3, [pc, #84]	; (8014bb0 <tcp_netif_ip_addr_changed+0x70>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	4619      	mov	r1, r3
 8014b5e:	6878      	ldr	r0, [r7, #4]
 8014b60:	f7ff ffbc 	bl	8014adc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014b64:	4b13      	ldr	r3, [pc, #76]	; (8014bb4 <tcp_netif_ip_addr_changed+0x74>)
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	4619      	mov	r1, r3
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f7ff ffb6 	bl	8014adc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d017      	beq.n	8014ba6 <tcp_netif_ip_addr_changed+0x66>
 8014b76:	683b      	ldr	r3, [r7, #0]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d013      	beq.n	8014ba6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014b7e:	4b0e      	ldr	r3, [pc, #56]	; (8014bb8 <tcp_netif_ip_addr_changed+0x78>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	60fb      	str	r3, [r7, #12]
 8014b84:	e00c      	b.n	8014ba0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	681a      	ldr	r2, [r3, #0]
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	429a      	cmp	r2, r3
 8014b90:	d103      	bne.n	8014b9a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	681a      	ldr	r2, [r3, #0]
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	68db      	ldr	r3, [r3, #12]
 8014b9e:	60fb      	str	r3, [r7, #12]
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d1ef      	bne.n	8014b86 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014ba6:	bf00      	nop
 8014ba8:	3710      	adds	r7, #16
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}
 8014bae:	bf00      	nop
 8014bb0:	2000dd98 	.word	0x2000dd98
 8014bb4:	2000dd90 	.word	0x2000dd90
 8014bb8:	2000dd94 	.word	0x2000dd94

08014bbc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b082      	sub	sp, #8
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d007      	beq.n	8014bdc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f7ff fb6f 	bl	80142b4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	2200      	movs	r2, #0
 8014bda:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014bdc:	bf00      	nop
 8014bde:	3708      	adds	r7, #8
 8014be0:	46bd      	mov	sp, r7
 8014be2:	bd80      	pop	{r7, pc}

08014be4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014be4:	b590      	push	{r4, r7, lr}
 8014be6:	b08d      	sub	sp, #52	; 0x34
 8014be8:	af04      	add	r7, sp, #16
 8014bea:	6078      	str	r0, [r7, #4]
 8014bec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d105      	bne.n	8014c00 <tcp_input+0x1c>
 8014bf4:	4b9b      	ldr	r3, [pc, #620]	; (8014e64 <tcp_input+0x280>)
 8014bf6:	2283      	movs	r2, #131	; 0x83
 8014bf8:	499b      	ldr	r1, [pc, #620]	; (8014e68 <tcp_input+0x284>)
 8014bfa:	489c      	ldr	r0, [pc, #624]	; (8014e6c <tcp_input+0x288>)
 8014bfc:	f007 ff5a 	bl	801cab4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	685b      	ldr	r3, [r3, #4]
 8014c04:	4a9a      	ldr	r2, [pc, #616]	; (8014e70 <tcp_input+0x28c>)
 8014c06:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	895b      	ldrh	r3, [r3, #10]
 8014c0c:	2b13      	cmp	r3, #19
 8014c0e:	f240 83d1 	bls.w	80153b4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014c12:	4b98      	ldr	r3, [pc, #608]	; (8014e74 <tcp_input+0x290>)
 8014c14:	695b      	ldr	r3, [r3, #20]
 8014c16:	4a97      	ldr	r2, [pc, #604]	; (8014e74 <tcp_input+0x290>)
 8014c18:	6812      	ldr	r2, [r2, #0]
 8014c1a:	4611      	mov	r1, r2
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f006 fbcf 	bl	801b3c0 <ip4_addr_isbroadcast_u32>
 8014c22:	4603      	mov	r3, r0
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	f040 83c7 	bne.w	80153b8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014c2a:	4b92      	ldr	r3, [pc, #584]	; (8014e74 <tcp_input+0x290>)
 8014c2c:	695b      	ldr	r3, [r3, #20]
 8014c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014c32:	2be0      	cmp	r3, #224	; 0xe0
 8014c34:	f000 83c0 	beq.w	80153b8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014c38:	4b8d      	ldr	r3, [pc, #564]	; (8014e70 <tcp_input+0x28c>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	899b      	ldrh	r3, [r3, #12]
 8014c3e:	b29b      	uxth	r3, r3
 8014c40:	4618      	mov	r0, r3
 8014c42:	f7fc fc3b 	bl	80114bc <lwip_htons>
 8014c46:	4603      	mov	r3, r0
 8014c48:	0b1b      	lsrs	r3, r3, #12
 8014c4a:	b29b      	uxth	r3, r3
 8014c4c:	b2db      	uxtb	r3, r3
 8014c4e:	009b      	lsls	r3, r3, #2
 8014c50:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014c52:	7cbb      	ldrb	r3, [r7, #18]
 8014c54:	2b13      	cmp	r3, #19
 8014c56:	f240 83b1 	bls.w	80153bc <tcp_input+0x7d8>
 8014c5a:	7cbb      	ldrb	r3, [r7, #18]
 8014c5c:	b29a      	uxth	r2, r3
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	891b      	ldrh	r3, [r3, #8]
 8014c62:	429a      	cmp	r2, r3
 8014c64:	f200 83aa 	bhi.w	80153bc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014c68:	7cbb      	ldrb	r3, [r7, #18]
 8014c6a:	b29b      	uxth	r3, r3
 8014c6c:	3b14      	subs	r3, #20
 8014c6e:	b29a      	uxth	r2, r3
 8014c70:	4b81      	ldr	r3, [pc, #516]	; (8014e78 <tcp_input+0x294>)
 8014c72:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014c74:	4b81      	ldr	r3, [pc, #516]	; (8014e7c <tcp_input+0x298>)
 8014c76:	2200      	movs	r2, #0
 8014c78:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	895a      	ldrh	r2, [r3, #10]
 8014c7e:	7cbb      	ldrb	r3, [r7, #18]
 8014c80:	b29b      	uxth	r3, r3
 8014c82:	429a      	cmp	r2, r3
 8014c84:	d309      	bcc.n	8014c9a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014c86:	4b7c      	ldr	r3, [pc, #496]	; (8014e78 <tcp_input+0x294>)
 8014c88:	881a      	ldrh	r2, [r3, #0]
 8014c8a:	4b7d      	ldr	r3, [pc, #500]	; (8014e80 <tcp_input+0x29c>)
 8014c8c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8014c8e:	7cbb      	ldrb	r3, [r7, #18]
 8014c90:	4619      	mov	r1, r3
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f7fd fed4 	bl	8012a40 <pbuf_remove_header>
 8014c98:	e04e      	b.n	8014d38 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d105      	bne.n	8014cae <tcp_input+0xca>
 8014ca2:	4b70      	ldr	r3, [pc, #448]	; (8014e64 <tcp_input+0x280>)
 8014ca4:	22c2      	movs	r2, #194	; 0xc2
 8014ca6:	4977      	ldr	r1, [pc, #476]	; (8014e84 <tcp_input+0x2a0>)
 8014ca8:	4870      	ldr	r0, [pc, #448]	; (8014e6c <tcp_input+0x288>)
 8014caa:	f007 ff03 	bl	801cab4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014cae:	2114      	movs	r1, #20
 8014cb0:	6878      	ldr	r0, [r7, #4]
 8014cb2:	f7fd fec5 	bl	8012a40 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	895a      	ldrh	r2, [r3, #10]
 8014cba:	4b71      	ldr	r3, [pc, #452]	; (8014e80 <tcp_input+0x29c>)
 8014cbc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8014cbe:	4b6e      	ldr	r3, [pc, #440]	; (8014e78 <tcp_input+0x294>)
 8014cc0:	881a      	ldrh	r2, [r3, #0]
 8014cc2:	4b6f      	ldr	r3, [pc, #444]	; (8014e80 <tcp_input+0x29c>)
 8014cc4:	881b      	ldrh	r3, [r3, #0]
 8014cc6:	1ad3      	subs	r3, r2, r3
 8014cc8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014cca:	4b6d      	ldr	r3, [pc, #436]	; (8014e80 <tcp_input+0x29c>)
 8014ccc:	881b      	ldrh	r3, [r3, #0]
 8014cce:	4619      	mov	r1, r3
 8014cd0:	6878      	ldr	r0, [r7, #4]
 8014cd2:	f7fd feb5 	bl	8012a40 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	895b      	ldrh	r3, [r3, #10]
 8014cdc:	8a3a      	ldrh	r2, [r7, #16]
 8014cde:	429a      	cmp	r2, r3
 8014ce0:	f200 836e 	bhi.w	80153c0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	685b      	ldr	r3, [r3, #4]
 8014cea:	4a64      	ldr	r2, [pc, #400]	; (8014e7c <tcp_input+0x298>)
 8014cec:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	8a3a      	ldrh	r2, [r7, #16]
 8014cf4:	4611      	mov	r1, r2
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7fd fea2 	bl	8012a40 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	891a      	ldrh	r2, [r3, #8]
 8014d00:	8a3b      	ldrh	r3, [r7, #16]
 8014d02:	1ad3      	subs	r3, r2, r3
 8014d04:	b29a      	uxth	r2, r3
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	895b      	ldrh	r3, [r3, #10]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d005      	beq.n	8014d1e <tcp_input+0x13a>
 8014d12:	4b54      	ldr	r3, [pc, #336]	; (8014e64 <tcp_input+0x280>)
 8014d14:	22df      	movs	r2, #223	; 0xdf
 8014d16:	495c      	ldr	r1, [pc, #368]	; (8014e88 <tcp_input+0x2a4>)
 8014d18:	4854      	ldr	r0, [pc, #336]	; (8014e6c <tcp_input+0x288>)
 8014d1a:	f007 fecb 	bl	801cab4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	891a      	ldrh	r2, [r3, #8]
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	891b      	ldrh	r3, [r3, #8]
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	d005      	beq.n	8014d38 <tcp_input+0x154>
 8014d2c:	4b4d      	ldr	r3, [pc, #308]	; (8014e64 <tcp_input+0x280>)
 8014d2e:	22e0      	movs	r2, #224	; 0xe0
 8014d30:	4956      	ldr	r1, [pc, #344]	; (8014e8c <tcp_input+0x2a8>)
 8014d32:	484e      	ldr	r0, [pc, #312]	; (8014e6c <tcp_input+0x288>)
 8014d34:	f007 febe 	bl	801cab4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014d38:	4b4d      	ldr	r3, [pc, #308]	; (8014e70 <tcp_input+0x28c>)
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	881b      	ldrh	r3, [r3, #0]
 8014d3e:	b29b      	uxth	r3, r3
 8014d40:	4a4b      	ldr	r2, [pc, #300]	; (8014e70 <tcp_input+0x28c>)
 8014d42:	6814      	ldr	r4, [r2, #0]
 8014d44:	4618      	mov	r0, r3
 8014d46:	f7fc fbb9 	bl	80114bc <lwip_htons>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8014d4e:	4b48      	ldr	r3, [pc, #288]	; (8014e70 <tcp_input+0x28c>)
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	885b      	ldrh	r3, [r3, #2]
 8014d54:	b29b      	uxth	r3, r3
 8014d56:	4a46      	ldr	r2, [pc, #280]	; (8014e70 <tcp_input+0x28c>)
 8014d58:	6814      	ldr	r4, [r2, #0]
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7fc fbae 	bl	80114bc <lwip_htons>
 8014d60:	4603      	mov	r3, r0
 8014d62:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014d64:	4b42      	ldr	r3, [pc, #264]	; (8014e70 <tcp_input+0x28c>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	685b      	ldr	r3, [r3, #4]
 8014d6a:	4a41      	ldr	r2, [pc, #260]	; (8014e70 <tcp_input+0x28c>)
 8014d6c:	6814      	ldr	r4, [r2, #0]
 8014d6e:	4618      	mov	r0, r3
 8014d70:	f7fc fbb9 	bl	80114e6 <lwip_htonl>
 8014d74:	4603      	mov	r3, r0
 8014d76:	6063      	str	r3, [r4, #4]
 8014d78:	6863      	ldr	r3, [r4, #4]
 8014d7a:	4a45      	ldr	r2, [pc, #276]	; (8014e90 <tcp_input+0x2ac>)
 8014d7c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8014d7e:	4b3c      	ldr	r3, [pc, #240]	; (8014e70 <tcp_input+0x28c>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	689b      	ldr	r3, [r3, #8]
 8014d84:	4a3a      	ldr	r2, [pc, #232]	; (8014e70 <tcp_input+0x28c>)
 8014d86:	6814      	ldr	r4, [r2, #0]
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f7fc fbac 	bl	80114e6 <lwip_htonl>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	60a3      	str	r3, [r4, #8]
 8014d92:	68a3      	ldr	r3, [r4, #8]
 8014d94:	4a3f      	ldr	r2, [pc, #252]	; (8014e94 <tcp_input+0x2b0>)
 8014d96:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014d98:	4b35      	ldr	r3, [pc, #212]	; (8014e70 <tcp_input+0x28c>)
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	89db      	ldrh	r3, [r3, #14]
 8014d9e:	b29b      	uxth	r3, r3
 8014da0:	4a33      	ldr	r2, [pc, #204]	; (8014e70 <tcp_input+0x28c>)
 8014da2:	6814      	ldr	r4, [r2, #0]
 8014da4:	4618      	mov	r0, r3
 8014da6:	f7fc fb89 	bl	80114bc <lwip_htons>
 8014daa:	4603      	mov	r3, r0
 8014dac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8014dae:	4b30      	ldr	r3, [pc, #192]	; (8014e70 <tcp_input+0x28c>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	899b      	ldrh	r3, [r3, #12]
 8014db4:	b29b      	uxth	r3, r3
 8014db6:	4618      	mov	r0, r3
 8014db8:	f7fc fb80 	bl	80114bc <lwip_htons>
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	b2db      	uxtb	r3, r3
 8014dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014dc4:	b2da      	uxtb	r2, r3
 8014dc6:	4b34      	ldr	r3, [pc, #208]	; (8014e98 <tcp_input+0x2b4>)
 8014dc8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	891a      	ldrh	r2, [r3, #8]
 8014dce:	4b33      	ldr	r3, [pc, #204]	; (8014e9c <tcp_input+0x2b8>)
 8014dd0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8014dd2:	4b31      	ldr	r3, [pc, #196]	; (8014e98 <tcp_input+0x2b4>)
 8014dd4:	781b      	ldrb	r3, [r3, #0]
 8014dd6:	f003 0303 	and.w	r3, r3, #3
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d00c      	beq.n	8014df8 <tcp_input+0x214>
    tcplen++;
 8014dde:	4b2f      	ldr	r3, [pc, #188]	; (8014e9c <tcp_input+0x2b8>)
 8014de0:	881b      	ldrh	r3, [r3, #0]
 8014de2:	3301      	adds	r3, #1
 8014de4:	b29a      	uxth	r2, r3
 8014de6:	4b2d      	ldr	r3, [pc, #180]	; (8014e9c <tcp_input+0x2b8>)
 8014de8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	891a      	ldrh	r2, [r3, #8]
 8014dee:	4b2b      	ldr	r3, [pc, #172]	; (8014e9c <tcp_input+0x2b8>)
 8014df0:	881b      	ldrh	r3, [r3, #0]
 8014df2:	429a      	cmp	r2, r3
 8014df4:	f200 82e6 	bhi.w	80153c4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014df8:	2300      	movs	r3, #0
 8014dfa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014dfc:	4b28      	ldr	r3, [pc, #160]	; (8014ea0 <tcp_input+0x2bc>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	61fb      	str	r3, [r7, #28]
 8014e02:	e09d      	b.n	8014f40 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014e04:	69fb      	ldr	r3, [r7, #28]
 8014e06:	7d1b      	ldrb	r3, [r3, #20]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d105      	bne.n	8014e18 <tcp_input+0x234>
 8014e0c:	4b15      	ldr	r3, [pc, #84]	; (8014e64 <tcp_input+0x280>)
 8014e0e:	22fb      	movs	r2, #251	; 0xfb
 8014e10:	4924      	ldr	r1, [pc, #144]	; (8014ea4 <tcp_input+0x2c0>)
 8014e12:	4816      	ldr	r0, [pc, #88]	; (8014e6c <tcp_input+0x288>)
 8014e14:	f007 fe4e 	bl	801cab4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014e18:	69fb      	ldr	r3, [r7, #28]
 8014e1a:	7d1b      	ldrb	r3, [r3, #20]
 8014e1c:	2b0a      	cmp	r3, #10
 8014e1e:	d105      	bne.n	8014e2c <tcp_input+0x248>
 8014e20:	4b10      	ldr	r3, [pc, #64]	; (8014e64 <tcp_input+0x280>)
 8014e22:	22fc      	movs	r2, #252	; 0xfc
 8014e24:	4920      	ldr	r1, [pc, #128]	; (8014ea8 <tcp_input+0x2c4>)
 8014e26:	4811      	ldr	r0, [pc, #68]	; (8014e6c <tcp_input+0x288>)
 8014e28:	f007 fe44 	bl	801cab4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014e2c:	69fb      	ldr	r3, [r7, #28]
 8014e2e:	7d1b      	ldrb	r3, [r3, #20]
 8014e30:	2b01      	cmp	r3, #1
 8014e32:	d105      	bne.n	8014e40 <tcp_input+0x25c>
 8014e34:	4b0b      	ldr	r3, [pc, #44]	; (8014e64 <tcp_input+0x280>)
 8014e36:	22fd      	movs	r2, #253	; 0xfd
 8014e38:	491c      	ldr	r1, [pc, #112]	; (8014eac <tcp_input+0x2c8>)
 8014e3a:	480c      	ldr	r0, [pc, #48]	; (8014e6c <tcp_input+0x288>)
 8014e3c:	f007 fe3a 	bl	801cab4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014e40:	69fb      	ldr	r3, [r7, #28]
 8014e42:	7a1b      	ldrb	r3, [r3, #8]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d033      	beq.n	8014eb0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014e48:	69fb      	ldr	r3, [r7, #28]
 8014e4a:	7a1a      	ldrb	r2, [r3, #8]
 8014e4c:	4b09      	ldr	r3, [pc, #36]	; (8014e74 <tcp_input+0x290>)
 8014e4e:	685b      	ldr	r3, [r3, #4]
 8014e50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014e54:	3301      	adds	r3, #1
 8014e56:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	d029      	beq.n	8014eb0 <tcp_input+0x2cc>
      prev = pcb;
 8014e5c:	69fb      	ldr	r3, [r7, #28]
 8014e5e:	61bb      	str	r3, [r7, #24]
      continue;
 8014e60:	e06b      	b.n	8014f3a <tcp_input+0x356>
 8014e62:	bf00      	nop
 8014e64:	0801fe08 	.word	0x0801fe08
 8014e68:	0801fe3c 	.word	0x0801fe3c
 8014e6c:	0801fe54 	.word	0x0801fe54
 8014e70:	2000ddb4 	.word	0x2000ddb4
 8014e74:	2000a638 	.word	0x2000a638
 8014e78:	2000ddb8 	.word	0x2000ddb8
 8014e7c:	2000ddbc 	.word	0x2000ddbc
 8014e80:	2000ddba 	.word	0x2000ddba
 8014e84:	0801fe7c 	.word	0x0801fe7c
 8014e88:	0801fe8c 	.word	0x0801fe8c
 8014e8c:	0801fe98 	.word	0x0801fe98
 8014e90:	2000ddc4 	.word	0x2000ddc4
 8014e94:	2000ddc8 	.word	0x2000ddc8
 8014e98:	2000ddd0 	.word	0x2000ddd0
 8014e9c:	2000ddce 	.word	0x2000ddce
 8014ea0:	2000dd98 	.word	0x2000dd98
 8014ea4:	0801feb8 	.word	0x0801feb8
 8014ea8:	0801fee0 	.word	0x0801fee0
 8014eac:	0801ff0c 	.word	0x0801ff0c
    }

    if (pcb->remote_port == tcphdr->src &&
 8014eb0:	69fb      	ldr	r3, [r7, #28]
 8014eb2:	8b1a      	ldrh	r2, [r3, #24]
 8014eb4:	4b72      	ldr	r3, [pc, #456]	; (8015080 <tcp_input+0x49c>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	881b      	ldrh	r3, [r3, #0]
 8014eba:	b29b      	uxth	r3, r3
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	d13a      	bne.n	8014f36 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014ec0:	69fb      	ldr	r3, [r7, #28]
 8014ec2:	8ada      	ldrh	r2, [r3, #22]
 8014ec4:	4b6e      	ldr	r3, [pc, #440]	; (8015080 <tcp_input+0x49c>)
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	885b      	ldrh	r3, [r3, #2]
 8014eca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	d132      	bne.n	8014f36 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014ed0:	69fb      	ldr	r3, [r7, #28]
 8014ed2:	685a      	ldr	r2, [r3, #4]
 8014ed4:	4b6b      	ldr	r3, [pc, #428]	; (8015084 <tcp_input+0x4a0>)
 8014ed6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014ed8:	429a      	cmp	r2, r3
 8014eda:	d12c      	bne.n	8014f36 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014edc:	69fb      	ldr	r3, [r7, #28]
 8014ede:	681a      	ldr	r2, [r3, #0]
 8014ee0:	4b68      	ldr	r3, [pc, #416]	; (8015084 <tcp_input+0x4a0>)
 8014ee2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014ee4:	429a      	cmp	r2, r3
 8014ee6:	d126      	bne.n	8014f36 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014ee8:	69fb      	ldr	r3, [r7, #28]
 8014eea:	68db      	ldr	r3, [r3, #12]
 8014eec:	69fa      	ldr	r2, [r7, #28]
 8014eee:	429a      	cmp	r2, r3
 8014ef0:	d106      	bne.n	8014f00 <tcp_input+0x31c>
 8014ef2:	4b65      	ldr	r3, [pc, #404]	; (8015088 <tcp_input+0x4a4>)
 8014ef4:	f240 120d 	movw	r2, #269	; 0x10d
 8014ef8:	4964      	ldr	r1, [pc, #400]	; (801508c <tcp_input+0x4a8>)
 8014efa:	4865      	ldr	r0, [pc, #404]	; (8015090 <tcp_input+0x4ac>)
 8014efc:	f007 fdda 	bl	801cab4 <iprintf>
      if (prev != NULL) {
 8014f00:	69bb      	ldr	r3, [r7, #24]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d00a      	beq.n	8014f1c <tcp_input+0x338>
        prev->next = pcb->next;
 8014f06:	69fb      	ldr	r3, [r7, #28]
 8014f08:	68da      	ldr	r2, [r3, #12]
 8014f0a:	69bb      	ldr	r3, [r7, #24]
 8014f0c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8014f0e:	4b61      	ldr	r3, [pc, #388]	; (8015094 <tcp_input+0x4b0>)
 8014f10:	681a      	ldr	r2, [r3, #0]
 8014f12:	69fb      	ldr	r3, [r7, #28]
 8014f14:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8014f16:	4a5f      	ldr	r2, [pc, #380]	; (8015094 <tcp_input+0x4b0>)
 8014f18:	69fb      	ldr	r3, [r7, #28]
 8014f1a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014f1c:	69fb      	ldr	r3, [r7, #28]
 8014f1e:	68db      	ldr	r3, [r3, #12]
 8014f20:	69fa      	ldr	r2, [r7, #28]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d111      	bne.n	8014f4a <tcp_input+0x366>
 8014f26:	4b58      	ldr	r3, [pc, #352]	; (8015088 <tcp_input+0x4a4>)
 8014f28:	f240 1215 	movw	r2, #277	; 0x115
 8014f2c:	495a      	ldr	r1, [pc, #360]	; (8015098 <tcp_input+0x4b4>)
 8014f2e:	4858      	ldr	r0, [pc, #352]	; (8015090 <tcp_input+0x4ac>)
 8014f30:	f007 fdc0 	bl	801cab4 <iprintf>
      break;
 8014f34:	e009      	b.n	8014f4a <tcp_input+0x366>
    }
    prev = pcb;
 8014f36:	69fb      	ldr	r3, [r7, #28]
 8014f38:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014f3a:	69fb      	ldr	r3, [r7, #28]
 8014f3c:	68db      	ldr	r3, [r3, #12]
 8014f3e:	61fb      	str	r3, [r7, #28]
 8014f40:	69fb      	ldr	r3, [r7, #28]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	f47f af5e 	bne.w	8014e04 <tcp_input+0x220>
 8014f48:	e000      	b.n	8014f4c <tcp_input+0x368>
      break;
 8014f4a:	bf00      	nop
  }

  if (pcb == NULL) {
 8014f4c:	69fb      	ldr	r3, [r7, #28]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	f040 80aa 	bne.w	80150a8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014f54:	4b51      	ldr	r3, [pc, #324]	; (801509c <tcp_input+0x4b8>)
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	61fb      	str	r3, [r7, #28]
 8014f5a:	e03f      	b.n	8014fdc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014f5c:	69fb      	ldr	r3, [r7, #28]
 8014f5e:	7d1b      	ldrb	r3, [r3, #20]
 8014f60:	2b0a      	cmp	r3, #10
 8014f62:	d006      	beq.n	8014f72 <tcp_input+0x38e>
 8014f64:	4b48      	ldr	r3, [pc, #288]	; (8015088 <tcp_input+0x4a4>)
 8014f66:	f240 121f 	movw	r2, #287	; 0x11f
 8014f6a:	494d      	ldr	r1, [pc, #308]	; (80150a0 <tcp_input+0x4bc>)
 8014f6c:	4848      	ldr	r0, [pc, #288]	; (8015090 <tcp_input+0x4ac>)
 8014f6e:	f007 fda1 	bl	801cab4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014f72:	69fb      	ldr	r3, [r7, #28]
 8014f74:	7a1b      	ldrb	r3, [r3, #8]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d009      	beq.n	8014f8e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014f7a:	69fb      	ldr	r3, [r7, #28]
 8014f7c:	7a1a      	ldrb	r2, [r3, #8]
 8014f7e:	4b41      	ldr	r3, [pc, #260]	; (8015084 <tcp_input+0x4a0>)
 8014f80:	685b      	ldr	r3, [r3, #4]
 8014f82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f86:	3301      	adds	r3, #1
 8014f88:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	d122      	bne.n	8014fd4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8014f8e:	69fb      	ldr	r3, [r7, #28]
 8014f90:	8b1a      	ldrh	r2, [r3, #24]
 8014f92:	4b3b      	ldr	r3, [pc, #236]	; (8015080 <tcp_input+0x49c>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	881b      	ldrh	r3, [r3, #0]
 8014f98:	b29b      	uxth	r3, r3
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	d11b      	bne.n	8014fd6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8014f9e:	69fb      	ldr	r3, [r7, #28]
 8014fa0:	8ada      	ldrh	r2, [r3, #22]
 8014fa2:	4b37      	ldr	r3, [pc, #220]	; (8015080 <tcp_input+0x49c>)
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	885b      	ldrh	r3, [r3, #2]
 8014fa8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d113      	bne.n	8014fd6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	685a      	ldr	r2, [r3, #4]
 8014fb2:	4b34      	ldr	r3, [pc, #208]	; (8015084 <tcp_input+0x4a0>)
 8014fb4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014fb6:	429a      	cmp	r2, r3
 8014fb8:	d10d      	bne.n	8014fd6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014fba:	69fb      	ldr	r3, [r7, #28]
 8014fbc:	681a      	ldr	r2, [r3, #0]
 8014fbe:	4b31      	ldr	r3, [pc, #196]	; (8015084 <tcp_input+0x4a0>)
 8014fc0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	d107      	bne.n	8014fd6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8014fc6:	69f8      	ldr	r0, [r7, #28]
 8014fc8:	f000 fb56 	bl	8015678 <tcp_timewait_input>
        }
        pbuf_free(p);
 8014fcc:	6878      	ldr	r0, [r7, #4]
 8014fce:	f7fd fdbd 	bl	8012b4c <pbuf_free>
        return;
 8014fd2:	e1fd      	b.n	80153d0 <tcp_input+0x7ec>
        continue;
 8014fd4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014fd6:	69fb      	ldr	r3, [r7, #28]
 8014fd8:	68db      	ldr	r3, [r3, #12]
 8014fda:	61fb      	str	r3, [r7, #28]
 8014fdc:	69fb      	ldr	r3, [r7, #28]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d1bc      	bne.n	8014f5c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014fe6:	4b2f      	ldr	r3, [pc, #188]	; (80150a4 <tcp_input+0x4c0>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	617b      	str	r3, [r7, #20]
 8014fec:	e02a      	b.n	8015044 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	7a1b      	ldrb	r3, [r3, #8]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d00c      	beq.n	8015010 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014ff6:	697b      	ldr	r3, [r7, #20]
 8014ff8:	7a1a      	ldrb	r2, [r3, #8]
 8014ffa:	4b22      	ldr	r3, [pc, #136]	; (8015084 <tcp_input+0x4a0>)
 8014ffc:	685b      	ldr	r3, [r3, #4]
 8014ffe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015002:	3301      	adds	r3, #1
 8015004:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015006:	429a      	cmp	r2, r3
 8015008:	d002      	beq.n	8015010 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801500a:	697b      	ldr	r3, [r7, #20]
 801500c:	61bb      	str	r3, [r7, #24]
        continue;
 801500e:	e016      	b.n	801503e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015010:	697b      	ldr	r3, [r7, #20]
 8015012:	8ada      	ldrh	r2, [r3, #22]
 8015014:	4b1a      	ldr	r3, [pc, #104]	; (8015080 <tcp_input+0x49c>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	885b      	ldrh	r3, [r3, #2]
 801501a:	b29b      	uxth	r3, r3
 801501c:	429a      	cmp	r2, r3
 801501e:	d10c      	bne.n	801503a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015020:	697b      	ldr	r3, [r7, #20]
 8015022:	681a      	ldr	r2, [r3, #0]
 8015024:	4b17      	ldr	r3, [pc, #92]	; (8015084 <tcp_input+0x4a0>)
 8015026:	695b      	ldr	r3, [r3, #20]
 8015028:	429a      	cmp	r2, r3
 801502a:	d00f      	beq.n	801504c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801502c:	697b      	ldr	r3, [r7, #20]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d00d      	beq.n	801504e <tcp_input+0x46a>
 8015032:	697b      	ldr	r3, [r7, #20]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d009      	beq.n	801504e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801503a:	697b      	ldr	r3, [r7, #20]
 801503c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801503e:	697b      	ldr	r3, [r7, #20]
 8015040:	68db      	ldr	r3, [r3, #12]
 8015042:	617b      	str	r3, [r7, #20]
 8015044:	697b      	ldr	r3, [r7, #20]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d1d1      	bne.n	8014fee <tcp_input+0x40a>
 801504a:	e000      	b.n	801504e <tcp_input+0x46a>
            break;
 801504c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801504e:	697b      	ldr	r3, [r7, #20]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d029      	beq.n	80150a8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015054:	69bb      	ldr	r3, [r7, #24]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d00a      	beq.n	8015070 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	68da      	ldr	r2, [r3, #12]
 801505e:	69bb      	ldr	r3, [r7, #24]
 8015060:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8015062:	4b10      	ldr	r3, [pc, #64]	; (80150a4 <tcp_input+0x4c0>)
 8015064:	681a      	ldr	r2, [r3, #0]
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801506a:	4a0e      	ldr	r2, [pc, #56]	; (80150a4 <tcp_input+0x4c0>)
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015070:	6978      	ldr	r0, [r7, #20]
 8015072:	f000 fa03 	bl	801547c <tcp_listen_input>
      }
      pbuf_free(p);
 8015076:	6878      	ldr	r0, [r7, #4]
 8015078:	f7fd fd68 	bl	8012b4c <pbuf_free>
      return;
 801507c:	e1a8      	b.n	80153d0 <tcp_input+0x7ec>
 801507e:	bf00      	nop
 8015080:	2000ddb4 	.word	0x2000ddb4
 8015084:	2000a638 	.word	0x2000a638
 8015088:	0801fe08 	.word	0x0801fe08
 801508c:	0801ff34 	.word	0x0801ff34
 8015090:	0801fe54 	.word	0x0801fe54
 8015094:	2000dd98 	.word	0x2000dd98
 8015098:	0801ff60 	.word	0x0801ff60
 801509c:	2000dd9c 	.word	0x2000dd9c
 80150a0:	0801ff8c 	.word	0x0801ff8c
 80150a4:	2000dd94 	.word	0x2000dd94
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80150a8:	69fb      	ldr	r3, [r7, #28]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	f000 8158 	beq.w	8015360 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80150b0:	4b95      	ldr	r3, [pc, #596]	; (8015308 <tcp_input+0x724>)
 80150b2:	2200      	movs	r2, #0
 80150b4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	891a      	ldrh	r2, [r3, #8]
 80150ba:	4b93      	ldr	r3, [pc, #588]	; (8015308 <tcp_input+0x724>)
 80150bc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80150be:	4a92      	ldr	r2, [pc, #584]	; (8015308 <tcp_input+0x724>)
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80150c4:	4b91      	ldr	r3, [pc, #580]	; (801530c <tcp_input+0x728>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	4a8f      	ldr	r2, [pc, #572]	; (8015308 <tcp_input+0x724>)
 80150ca:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80150cc:	4b90      	ldr	r3, [pc, #576]	; (8015310 <tcp_input+0x72c>)
 80150ce:	2200      	movs	r2, #0
 80150d0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80150d2:	4b90      	ldr	r3, [pc, #576]	; (8015314 <tcp_input+0x730>)
 80150d4:	2200      	movs	r2, #0
 80150d6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80150d8:	4b8f      	ldr	r3, [pc, #572]	; (8015318 <tcp_input+0x734>)
 80150da:	2200      	movs	r2, #0
 80150dc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80150de:	4b8f      	ldr	r3, [pc, #572]	; (801531c <tcp_input+0x738>)
 80150e0:	781b      	ldrb	r3, [r3, #0]
 80150e2:	f003 0308 	and.w	r3, r3, #8
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d006      	beq.n	80150f8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	7b5b      	ldrb	r3, [r3, #13]
 80150ee:	f043 0301 	orr.w	r3, r3, #1
 80150f2:	b2da      	uxtb	r2, r3
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80150f8:	69fb      	ldr	r3, [r7, #28]
 80150fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d017      	beq.n	8015130 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015100:	69f8      	ldr	r0, [r7, #28]
 8015102:	f7ff f85b 	bl	80141bc <tcp_process_refused_data>
 8015106:	4603      	mov	r3, r0
 8015108:	f113 0f0d 	cmn.w	r3, #13
 801510c:	d007      	beq.n	801511e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801510e:	69fb      	ldr	r3, [r7, #28]
 8015110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015112:	2b00      	cmp	r3, #0
 8015114:	d00c      	beq.n	8015130 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015116:	4b82      	ldr	r3, [pc, #520]	; (8015320 <tcp_input+0x73c>)
 8015118:	881b      	ldrh	r3, [r3, #0]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d008      	beq.n	8015130 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801511e:	69fb      	ldr	r3, [r7, #28]
 8015120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015122:	2b00      	cmp	r3, #0
 8015124:	f040 80e3 	bne.w	80152ee <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8015128:	69f8      	ldr	r0, [r7, #28]
 801512a:	f003 fe05 	bl	8018d38 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801512e:	e0de      	b.n	80152ee <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8015130:	4a7c      	ldr	r2, [pc, #496]	; (8015324 <tcp_input+0x740>)
 8015132:	69fb      	ldr	r3, [r7, #28]
 8015134:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8015136:	69f8      	ldr	r0, [r7, #28]
 8015138:	f000 fb18 	bl	801576c <tcp_process>
 801513c:	4603      	mov	r3, r0
 801513e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015140:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015144:	f113 0f0d 	cmn.w	r3, #13
 8015148:	f000 80d3 	beq.w	80152f2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801514c:	4b71      	ldr	r3, [pc, #452]	; (8015314 <tcp_input+0x730>)
 801514e:	781b      	ldrb	r3, [r3, #0]
 8015150:	f003 0308 	and.w	r3, r3, #8
 8015154:	2b00      	cmp	r3, #0
 8015156:	d015      	beq.n	8015184 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8015158:	69fb      	ldr	r3, [r7, #28]
 801515a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801515e:	2b00      	cmp	r3, #0
 8015160:	d008      	beq.n	8015174 <tcp_input+0x590>
 8015162:	69fb      	ldr	r3, [r7, #28]
 8015164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015168:	69fa      	ldr	r2, [r7, #28]
 801516a:	6912      	ldr	r2, [r2, #16]
 801516c:	f06f 010d 	mvn.w	r1, #13
 8015170:	4610      	mov	r0, r2
 8015172:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015174:	69f9      	ldr	r1, [r7, #28]
 8015176:	486c      	ldr	r0, [pc, #432]	; (8015328 <tcp_input+0x744>)
 8015178:	f7ff fbbc 	bl	80148f4 <tcp_pcb_remove>
        tcp_free(pcb);
 801517c:	69f8      	ldr	r0, [r7, #28]
 801517e:	f7fd ffa1 	bl	80130c4 <tcp_free>
 8015182:	e0da      	b.n	801533a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8015184:	2300      	movs	r3, #0
 8015186:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8015188:	4b63      	ldr	r3, [pc, #396]	; (8015318 <tcp_input+0x734>)
 801518a:	881b      	ldrh	r3, [r3, #0]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d01d      	beq.n	80151cc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015190:	4b61      	ldr	r3, [pc, #388]	; (8015318 <tcp_input+0x734>)
 8015192:	881b      	ldrh	r3, [r3, #0]
 8015194:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8015196:	69fb      	ldr	r3, [r7, #28]
 8015198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801519c:	2b00      	cmp	r3, #0
 801519e:	d00a      	beq.n	80151b6 <tcp_input+0x5d2>
 80151a0:	69fb      	ldr	r3, [r7, #28]
 80151a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80151a6:	69fa      	ldr	r2, [r7, #28]
 80151a8:	6910      	ldr	r0, [r2, #16]
 80151aa:	89fa      	ldrh	r2, [r7, #14]
 80151ac:	69f9      	ldr	r1, [r7, #28]
 80151ae:	4798      	blx	r3
 80151b0:	4603      	mov	r3, r0
 80151b2:	74fb      	strb	r3, [r7, #19]
 80151b4:	e001      	b.n	80151ba <tcp_input+0x5d6>
 80151b6:	2300      	movs	r3, #0
 80151b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80151ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80151be:	f113 0f0d 	cmn.w	r3, #13
 80151c2:	f000 8098 	beq.w	80152f6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80151c6:	4b54      	ldr	r3, [pc, #336]	; (8015318 <tcp_input+0x734>)
 80151c8:	2200      	movs	r2, #0
 80151ca:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80151cc:	69f8      	ldr	r0, [r7, #28]
 80151ce:	f000 f915 	bl	80153fc <tcp_input_delayed_close>
 80151d2:	4603      	mov	r3, r0
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	f040 8090 	bne.w	80152fa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80151da:	4b4d      	ldr	r3, [pc, #308]	; (8015310 <tcp_input+0x72c>)
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d041      	beq.n	8015266 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80151e2:	69fb      	ldr	r3, [r7, #28]
 80151e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d006      	beq.n	80151f8 <tcp_input+0x614>
 80151ea:	4b50      	ldr	r3, [pc, #320]	; (801532c <tcp_input+0x748>)
 80151ec:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80151f0:	494f      	ldr	r1, [pc, #316]	; (8015330 <tcp_input+0x74c>)
 80151f2:	4850      	ldr	r0, [pc, #320]	; (8015334 <tcp_input+0x750>)
 80151f4:	f007 fc5e 	bl	801cab4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80151f8:	69fb      	ldr	r3, [r7, #28]
 80151fa:	8b5b      	ldrh	r3, [r3, #26]
 80151fc:	f003 0310 	and.w	r3, r3, #16
 8015200:	2b00      	cmp	r3, #0
 8015202:	d008      	beq.n	8015216 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015204:	4b42      	ldr	r3, [pc, #264]	; (8015310 <tcp_input+0x72c>)
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	4618      	mov	r0, r3
 801520a:	f7fd fc9f 	bl	8012b4c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801520e:	69f8      	ldr	r0, [r7, #28]
 8015210:	f7fe fa9c 	bl	801374c <tcp_abort>
            goto aborted;
 8015214:	e091      	b.n	801533a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8015216:	69fb      	ldr	r3, [r7, #28]
 8015218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801521c:	2b00      	cmp	r3, #0
 801521e:	d00c      	beq.n	801523a <tcp_input+0x656>
 8015220:	69fb      	ldr	r3, [r7, #28]
 8015222:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015226:	69fb      	ldr	r3, [r7, #28]
 8015228:	6918      	ldr	r0, [r3, #16]
 801522a:	4b39      	ldr	r3, [pc, #228]	; (8015310 <tcp_input+0x72c>)
 801522c:	681a      	ldr	r2, [r3, #0]
 801522e:	2300      	movs	r3, #0
 8015230:	69f9      	ldr	r1, [r7, #28]
 8015232:	47a0      	blx	r4
 8015234:	4603      	mov	r3, r0
 8015236:	74fb      	strb	r3, [r7, #19]
 8015238:	e008      	b.n	801524c <tcp_input+0x668>
 801523a:	4b35      	ldr	r3, [pc, #212]	; (8015310 <tcp_input+0x72c>)
 801523c:	681a      	ldr	r2, [r3, #0]
 801523e:	2300      	movs	r3, #0
 8015240:	69f9      	ldr	r1, [r7, #28]
 8015242:	2000      	movs	r0, #0
 8015244:	f7ff f890 	bl	8014368 <tcp_recv_null>
 8015248:	4603      	mov	r3, r0
 801524a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801524c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015250:	f113 0f0d 	cmn.w	r3, #13
 8015254:	d053      	beq.n	80152fe <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8015256:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d003      	beq.n	8015266 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801525e:	4b2c      	ldr	r3, [pc, #176]	; (8015310 <tcp_input+0x72c>)
 8015260:	681a      	ldr	r2, [r3, #0]
 8015262:	69fb      	ldr	r3, [r7, #28]
 8015264:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8015266:	4b2b      	ldr	r3, [pc, #172]	; (8015314 <tcp_input+0x730>)
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	f003 0320 	and.w	r3, r3, #32
 801526e:	2b00      	cmp	r3, #0
 8015270:	d030      	beq.n	80152d4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8015272:	69fb      	ldr	r3, [r7, #28]
 8015274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015276:	2b00      	cmp	r3, #0
 8015278:	d009      	beq.n	801528e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801527a:	69fb      	ldr	r3, [r7, #28]
 801527c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801527e:	7b5a      	ldrb	r2, [r3, #13]
 8015280:	69fb      	ldr	r3, [r7, #28]
 8015282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015284:	f042 0220 	orr.w	r2, r2, #32
 8015288:	b2d2      	uxtb	r2, r2
 801528a:	735a      	strb	r2, [r3, #13]
 801528c:	e022      	b.n	80152d4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015292:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015296:	d005      	beq.n	80152a4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8015298:	69fb      	ldr	r3, [r7, #28]
 801529a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801529c:	3301      	adds	r3, #1
 801529e:	b29a      	uxth	r2, r3
 80152a0:	69fb      	ldr	r3, [r7, #28]
 80152a2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80152a4:	69fb      	ldr	r3, [r7, #28]
 80152a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d00b      	beq.n	80152c6 <tcp_input+0x6e2>
 80152ae:	69fb      	ldr	r3, [r7, #28]
 80152b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80152b4:	69fb      	ldr	r3, [r7, #28]
 80152b6:	6918      	ldr	r0, [r3, #16]
 80152b8:	2300      	movs	r3, #0
 80152ba:	2200      	movs	r2, #0
 80152bc:	69f9      	ldr	r1, [r7, #28]
 80152be:	47a0      	blx	r4
 80152c0:	4603      	mov	r3, r0
 80152c2:	74fb      	strb	r3, [r7, #19]
 80152c4:	e001      	b.n	80152ca <tcp_input+0x6e6>
 80152c6:	2300      	movs	r3, #0
 80152c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80152ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80152ce:	f113 0f0d 	cmn.w	r3, #13
 80152d2:	d016      	beq.n	8015302 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80152d4:	4b13      	ldr	r3, [pc, #76]	; (8015324 <tcp_input+0x740>)
 80152d6:	2200      	movs	r2, #0
 80152d8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80152da:	69f8      	ldr	r0, [r7, #28]
 80152dc:	f000 f88e 	bl	80153fc <tcp_input_delayed_close>
 80152e0:	4603      	mov	r3, r0
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d128      	bne.n	8015338 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80152e6:	69f8      	ldr	r0, [r7, #28]
 80152e8:	f002 ff20 	bl	801812c <tcp_output>
 80152ec:	e025      	b.n	801533a <tcp_input+0x756>
        goto aborted;
 80152ee:	bf00      	nop
 80152f0:	e023      	b.n	801533a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80152f2:	bf00      	nop
 80152f4:	e021      	b.n	801533a <tcp_input+0x756>
              goto aborted;
 80152f6:	bf00      	nop
 80152f8:	e01f      	b.n	801533a <tcp_input+0x756>
          goto aborted;
 80152fa:	bf00      	nop
 80152fc:	e01d      	b.n	801533a <tcp_input+0x756>
            goto aborted;
 80152fe:	bf00      	nop
 8015300:	e01b      	b.n	801533a <tcp_input+0x756>
              goto aborted;
 8015302:	bf00      	nop
 8015304:	e019      	b.n	801533a <tcp_input+0x756>
 8015306:	bf00      	nop
 8015308:	2000dda4 	.word	0x2000dda4
 801530c:	2000ddb4 	.word	0x2000ddb4
 8015310:	2000ddd4 	.word	0x2000ddd4
 8015314:	2000ddd1 	.word	0x2000ddd1
 8015318:	2000ddcc 	.word	0x2000ddcc
 801531c:	2000ddd0 	.word	0x2000ddd0
 8015320:	2000ddce 	.word	0x2000ddce
 8015324:	2000ddd8 	.word	0x2000ddd8
 8015328:	2000dd98 	.word	0x2000dd98
 801532c:	0801fe08 	.word	0x0801fe08
 8015330:	0801ffbc 	.word	0x0801ffbc
 8015334:	0801fe54 	.word	0x0801fe54
          goto aborted;
 8015338:	bf00      	nop
    tcp_input_pcb = NULL;
 801533a:	4b27      	ldr	r3, [pc, #156]	; (80153d8 <tcp_input+0x7f4>)
 801533c:	2200      	movs	r2, #0
 801533e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8015340:	4b26      	ldr	r3, [pc, #152]	; (80153dc <tcp_input+0x7f8>)
 8015342:	2200      	movs	r2, #0
 8015344:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8015346:	4b26      	ldr	r3, [pc, #152]	; (80153e0 <tcp_input+0x7fc>)
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d03f      	beq.n	80153ce <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801534e:	4b24      	ldr	r3, [pc, #144]	; (80153e0 <tcp_input+0x7fc>)
 8015350:	685b      	ldr	r3, [r3, #4]
 8015352:	4618      	mov	r0, r3
 8015354:	f7fd fbfa 	bl	8012b4c <pbuf_free>
      inseg.p = NULL;
 8015358:	4b21      	ldr	r3, [pc, #132]	; (80153e0 <tcp_input+0x7fc>)
 801535a:	2200      	movs	r2, #0
 801535c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801535e:	e036      	b.n	80153ce <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8015360:	4b20      	ldr	r3, [pc, #128]	; (80153e4 <tcp_input+0x800>)
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	899b      	ldrh	r3, [r3, #12]
 8015366:	b29b      	uxth	r3, r3
 8015368:	4618      	mov	r0, r3
 801536a:	f7fc f8a7 	bl	80114bc <lwip_htons>
 801536e:	4603      	mov	r3, r0
 8015370:	b2db      	uxtb	r3, r3
 8015372:	f003 0304 	and.w	r3, r3, #4
 8015376:	2b00      	cmp	r3, #0
 8015378:	d118      	bne.n	80153ac <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801537a:	4b1b      	ldr	r3, [pc, #108]	; (80153e8 <tcp_input+0x804>)
 801537c:	6819      	ldr	r1, [r3, #0]
 801537e:	4b1b      	ldr	r3, [pc, #108]	; (80153ec <tcp_input+0x808>)
 8015380:	881b      	ldrh	r3, [r3, #0]
 8015382:	461a      	mov	r2, r3
 8015384:	4b1a      	ldr	r3, [pc, #104]	; (80153f0 <tcp_input+0x80c>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801538a:	4b16      	ldr	r3, [pc, #88]	; (80153e4 <tcp_input+0x800>)
 801538c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801538e:	885b      	ldrh	r3, [r3, #2]
 8015390:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015392:	4a14      	ldr	r2, [pc, #80]	; (80153e4 <tcp_input+0x800>)
 8015394:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015396:	8812      	ldrh	r2, [r2, #0]
 8015398:	b292      	uxth	r2, r2
 801539a:	9202      	str	r2, [sp, #8]
 801539c:	9301      	str	r3, [sp, #4]
 801539e:	4b15      	ldr	r3, [pc, #84]	; (80153f4 <tcp_input+0x810>)
 80153a0:	9300      	str	r3, [sp, #0]
 80153a2:	4b15      	ldr	r3, [pc, #84]	; (80153f8 <tcp_input+0x814>)
 80153a4:	4602      	mov	r2, r0
 80153a6:	2000      	movs	r0, #0
 80153a8:	f003 fc74 	bl	8018c94 <tcp_rst>
    pbuf_free(p);
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f7fd fbcd 	bl	8012b4c <pbuf_free>
  return;
 80153b2:	e00c      	b.n	80153ce <tcp_input+0x7ea>
    goto dropped;
 80153b4:	bf00      	nop
 80153b6:	e006      	b.n	80153c6 <tcp_input+0x7e2>
    goto dropped;
 80153b8:	bf00      	nop
 80153ba:	e004      	b.n	80153c6 <tcp_input+0x7e2>
    goto dropped;
 80153bc:	bf00      	nop
 80153be:	e002      	b.n	80153c6 <tcp_input+0x7e2>
      goto dropped;
 80153c0:	bf00      	nop
 80153c2:	e000      	b.n	80153c6 <tcp_input+0x7e2>
      goto dropped;
 80153c4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f7fd fbc0 	bl	8012b4c <pbuf_free>
 80153cc:	e000      	b.n	80153d0 <tcp_input+0x7ec>
  return;
 80153ce:	bf00      	nop
}
 80153d0:	3724      	adds	r7, #36	; 0x24
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd90      	pop	{r4, r7, pc}
 80153d6:	bf00      	nop
 80153d8:	2000ddd8 	.word	0x2000ddd8
 80153dc:	2000ddd4 	.word	0x2000ddd4
 80153e0:	2000dda4 	.word	0x2000dda4
 80153e4:	2000ddb4 	.word	0x2000ddb4
 80153e8:	2000ddc8 	.word	0x2000ddc8
 80153ec:	2000ddce 	.word	0x2000ddce
 80153f0:	2000ddc4 	.word	0x2000ddc4
 80153f4:	2000a648 	.word	0x2000a648
 80153f8:	2000a64c 	.word	0x2000a64c

080153fc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b082      	sub	sp, #8
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d106      	bne.n	8015418 <tcp_input_delayed_close+0x1c>
 801540a:	4b17      	ldr	r3, [pc, #92]	; (8015468 <tcp_input_delayed_close+0x6c>)
 801540c:	f240 225a 	movw	r2, #602	; 0x25a
 8015410:	4916      	ldr	r1, [pc, #88]	; (801546c <tcp_input_delayed_close+0x70>)
 8015412:	4817      	ldr	r0, [pc, #92]	; (8015470 <tcp_input_delayed_close+0x74>)
 8015414:	f007 fb4e 	bl	801cab4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8015418:	4b16      	ldr	r3, [pc, #88]	; (8015474 <tcp_input_delayed_close+0x78>)
 801541a:	781b      	ldrb	r3, [r3, #0]
 801541c:	f003 0310 	and.w	r3, r3, #16
 8015420:	2b00      	cmp	r3, #0
 8015422:	d01c      	beq.n	801545e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	8b5b      	ldrh	r3, [r3, #26]
 8015428:	f003 0310 	and.w	r3, r3, #16
 801542c:	2b00      	cmp	r3, #0
 801542e:	d10d      	bne.n	801544c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015436:	2b00      	cmp	r3, #0
 8015438:	d008      	beq.n	801544c <tcp_input_delayed_close+0x50>
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015440:	687a      	ldr	r2, [r7, #4]
 8015442:	6912      	ldr	r2, [r2, #16]
 8015444:	f06f 010e 	mvn.w	r1, #14
 8015448:	4610      	mov	r0, r2
 801544a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801544c:	6879      	ldr	r1, [r7, #4]
 801544e:	480a      	ldr	r0, [pc, #40]	; (8015478 <tcp_input_delayed_close+0x7c>)
 8015450:	f7ff fa50 	bl	80148f4 <tcp_pcb_remove>
    tcp_free(pcb);
 8015454:	6878      	ldr	r0, [r7, #4]
 8015456:	f7fd fe35 	bl	80130c4 <tcp_free>
    return 1;
 801545a:	2301      	movs	r3, #1
 801545c:	e000      	b.n	8015460 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801545e:	2300      	movs	r3, #0
}
 8015460:	4618      	mov	r0, r3
 8015462:	3708      	adds	r7, #8
 8015464:	46bd      	mov	sp, r7
 8015466:	bd80      	pop	{r7, pc}
 8015468:	0801fe08 	.word	0x0801fe08
 801546c:	0801ffd8 	.word	0x0801ffd8
 8015470:	0801fe54 	.word	0x0801fe54
 8015474:	2000ddd1 	.word	0x2000ddd1
 8015478:	2000dd98 	.word	0x2000dd98

0801547c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801547c:	b590      	push	{r4, r7, lr}
 801547e:	b08b      	sub	sp, #44	; 0x2c
 8015480:	af04      	add	r7, sp, #16
 8015482:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015484:	4b6f      	ldr	r3, [pc, #444]	; (8015644 <tcp_listen_input+0x1c8>)
 8015486:	781b      	ldrb	r3, [r3, #0]
 8015488:	f003 0304 	and.w	r3, r3, #4
 801548c:	2b00      	cmp	r3, #0
 801548e:	f040 80d2 	bne.w	8015636 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d106      	bne.n	80154a6 <tcp_listen_input+0x2a>
 8015498:	4b6b      	ldr	r3, [pc, #428]	; (8015648 <tcp_listen_input+0x1cc>)
 801549a:	f240 2281 	movw	r2, #641	; 0x281
 801549e:	496b      	ldr	r1, [pc, #428]	; (801564c <tcp_listen_input+0x1d0>)
 80154a0:	486b      	ldr	r0, [pc, #428]	; (8015650 <tcp_listen_input+0x1d4>)
 80154a2:	f007 fb07 	bl	801cab4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80154a6:	4b67      	ldr	r3, [pc, #412]	; (8015644 <tcp_listen_input+0x1c8>)
 80154a8:	781b      	ldrb	r3, [r3, #0]
 80154aa:	f003 0310 	and.w	r3, r3, #16
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d019      	beq.n	80154e6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80154b2:	4b68      	ldr	r3, [pc, #416]	; (8015654 <tcp_listen_input+0x1d8>)
 80154b4:	6819      	ldr	r1, [r3, #0]
 80154b6:	4b68      	ldr	r3, [pc, #416]	; (8015658 <tcp_listen_input+0x1dc>)
 80154b8:	881b      	ldrh	r3, [r3, #0]
 80154ba:	461a      	mov	r2, r3
 80154bc:	4b67      	ldr	r3, [pc, #412]	; (801565c <tcp_listen_input+0x1e0>)
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80154c2:	4b67      	ldr	r3, [pc, #412]	; (8015660 <tcp_listen_input+0x1e4>)
 80154c4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80154c6:	885b      	ldrh	r3, [r3, #2]
 80154c8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80154ca:	4a65      	ldr	r2, [pc, #404]	; (8015660 <tcp_listen_input+0x1e4>)
 80154cc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80154ce:	8812      	ldrh	r2, [r2, #0]
 80154d0:	b292      	uxth	r2, r2
 80154d2:	9202      	str	r2, [sp, #8]
 80154d4:	9301      	str	r3, [sp, #4]
 80154d6:	4b63      	ldr	r3, [pc, #396]	; (8015664 <tcp_listen_input+0x1e8>)
 80154d8:	9300      	str	r3, [sp, #0]
 80154da:	4b63      	ldr	r3, [pc, #396]	; (8015668 <tcp_listen_input+0x1ec>)
 80154dc:	4602      	mov	r2, r0
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	f003 fbd8 	bl	8018c94 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80154e4:	e0a9      	b.n	801563a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80154e6:	4b57      	ldr	r3, [pc, #348]	; (8015644 <tcp_listen_input+0x1c8>)
 80154e8:	781b      	ldrb	r3, [r3, #0]
 80154ea:	f003 0302 	and.w	r3, r3, #2
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	f000 80a3 	beq.w	801563a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	7d5b      	ldrb	r3, [r3, #21]
 80154f8:	4618      	mov	r0, r3
 80154fa:	f7ff f859 	bl	80145b0 <tcp_alloc>
 80154fe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015500:	697b      	ldr	r3, [r7, #20]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d111      	bne.n	801552a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	699b      	ldr	r3, [r3, #24]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d00a      	beq.n	8015524 <tcp_listen_input+0xa8>
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	699b      	ldr	r3, [r3, #24]
 8015512:	687a      	ldr	r2, [r7, #4]
 8015514:	6910      	ldr	r0, [r2, #16]
 8015516:	f04f 32ff 	mov.w	r2, #4294967295
 801551a:	2100      	movs	r1, #0
 801551c:	4798      	blx	r3
 801551e:	4603      	mov	r3, r0
 8015520:	73bb      	strb	r3, [r7, #14]
      return;
 8015522:	e08b      	b.n	801563c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015524:	23f0      	movs	r3, #240	; 0xf0
 8015526:	73bb      	strb	r3, [r7, #14]
      return;
 8015528:	e088      	b.n	801563c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801552a:	4b50      	ldr	r3, [pc, #320]	; (801566c <tcp_listen_input+0x1f0>)
 801552c:	695a      	ldr	r2, [r3, #20]
 801552e:	697b      	ldr	r3, [r7, #20]
 8015530:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015532:	4b4e      	ldr	r3, [pc, #312]	; (801566c <tcp_listen_input+0x1f0>)
 8015534:	691a      	ldr	r2, [r3, #16]
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	8ada      	ldrh	r2, [r3, #22]
 801553e:	697b      	ldr	r3, [r7, #20]
 8015540:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015542:	4b47      	ldr	r3, [pc, #284]	; (8015660 <tcp_listen_input+0x1e4>)
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	881b      	ldrh	r3, [r3, #0]
 8015548:	b29a      	uxth	r2, r3
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801554e:	697b      	ldr	r3, [r7, #20]
 8015550:	2203      	movs	r2, #3
 8015552:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015554:	4b41      	ldr	r3, [pc, #260]	; (801565c <tcp_listen_input+0x1e0>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	1c5a      	adds	r2, r3, #1
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801555e:	697b      	ldr	r3, [r7, #20]
 8015560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8015566:	6978      	ldr	r0, [r7, #20]
 8015568:	f7ff fa58 	bl	8014a1c <tcp_next_iss>
 801556c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	693a      	ldr	r2, [r7, #16]
 8015572:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8015574:	697b      	ldr	r3, [r7, #20]
 8015576:	693a      	ldr	r2, [r7, #16]
 8015578:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801557a:	697b      	ldr	r3, [r7, #20]
 801557c:	693a      	ldr	r2, [r7, #16]
 801557e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	693a      	ldr	r2, [r7, #16]
 8015584:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8015586:	4b35      	ldr	r3, [pc, #212]	; (801565c <tcp_listen_input+0x1e0>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	1e5a      	subs	r2, r3, #1
 801558c:	697b      	ldr	r3, [r7, #20]
 801558e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	691a      	ldr	r2, [r3, #16]
 8015594:	697b      	ldr	r3, [r7, #20]
 8015596:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	687a      	ldr	r2, [r7, #4]
 801559c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	7a5b      	ldrb	r3, [r3, #9]
 80155a2:	f003 030c 	and.w	r3, r3, #12
 80155a6:	b2da      	uxtb	r2, r3
 80155a8:	697b      	ldr	r3, [r7, #20]
 80155aa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	7a1a      	ldrb	r2, [r3, #8]
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80155b4:	4b2e      	ldr	r3, [pc, #184]	; (8015670 <tcp_listen_input+0x1f4>)
 80155b6:	681a      	ldr	r2, [r3, #0]
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	60da      	str	r2, [r3, #12]
 80155bc:	4a2c      	ldr	r2, [pc, #176]	; (8015670 <tcp_listen_input+0x1f4>)
 80155be:	697b      	ldr	r3, [r7, #20]
 80155c0:	6013      	str	r3, [r2, #0]
 80155c2:	f003 fd29 	bl	8019018 <tcp_timer_needed>
 80155c6:	4b2b      	ldr	r3, [pc, #172]	; (8015674 <tcp_listen_input+0x1f8>)
 80155c8:	2201      	movs	r2, #1
 80155ca:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80155cc:	6978      	ldr	r0, [r7, #20]
 80155ce:	f001 fd8f 	bl	80170f0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80155d2:	4b23      	ldr	r3, [pc, #140]	; (8015660 <tcp_listen_input+0x1e4>)
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	89db      	ldrh	r3, [r3, #14]
 80155d8:	b29a      	uxth	r2, r3
 80155da:	697b      	ldr	r3, [r7, #20]
 80155dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80155e6:	697b      	ldr	r3, [r7, #20]
 80155e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80155f0:	697b      	ldr	r3, [r7, #20]
 80155f2:	3304      	adds	r3, #4
 80155f4:	4618      	mov	r0, r3
 80155f6:	f005 fc4d 	bl	801ae94 <ip4_route>
 80155fa:	4601      	mov	r1, r0
 80155fc:	697b      	ldr	r3, [r7, #20]
 80155fe:	3304      	adds	r3, #4
 8015600:	461a      	mov	r2, r3
 8015602:	4620      	mov	r0, r4
 8015604:	f7ff fa30 	bl	8014a68 <tcp_eff_send_mss_netif>
 8015608:	4603      	mov	r3, r0
 801560a:	461a      	mov	r2, r3
 801560c:	697b      	ldr	r3, [r7, #20]
 801560e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015610:	2112      	movs	r1, #18
 8015612:	6978      	ldr	r0, [r7, #20]
 8015614:	f002 fc9c 	bl	8017f50 <tcp_enqueue_flags>
 8015618:	4603      	mov	r3, r0
 801561a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801561c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d004      	beq.n	801562e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015624:	2100      	movs	r1, #0
 8015626:	6978      	ldr	r0, [r7, #20]
 8015628:	f7fd ffd2 	bl	80135d0 <tcp_abandon>
      return;
 801562c:	e006      	b.n	801563c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801562e:	6978      	ldr	r0, [r7, #20]
 8015630:	f002 fd7c 	bl	801812c <tcp_output>
  return;
 8015634:	e001      	b.n	801563a <tcp_listen_input+0x1be>
    return;
 8015636:	bf00      	nop
 8015638:	e000      	b.n	801563c <tcp_listen_input+0x1c0>
  return;
 801563a:	bf00      	nop
}
 801563c:	371c      	adds	r7, #28
 801563e:	46bd      	mov	sp, r7
 8015640:	bd90      	pop	{r4, r7, pc}
 8015642:	bf00      	nop
 8015644:	2000ddd0 	.word	0x2000ddd0
 8015648:	0801fe08 	.word	0x0801fe08
 801564c:	08020000 	.word	0x08020000
 8015650:	0801fe54 	.word	0x0801fe54
 8015654:	2000ddc8 	.word	0x2000ddc8
 8015658:	2000ddce 	.word	0x2000ddce
 801565c:	2000ddc4 	.word	0x2000ddc4
 8015660:	2000ddb4 	.word	0x2000ddb4
 8015664:	2000a648 	.word	0x2000a648
 8015668:	2000a64c 	.word	0x2000a64c
 801566c:	2000a638 	.word	0x2000a638
 8015670:	2000dd98 	.word	0x2000dd98
 8015674:	2000dda0 	.word	0x2000dda0

08015678 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b086      	sub	sp, #24
 801567c:	af04      	add	r7, sp, #16
 801567e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015680:	4b2f      	ldr	r3, [pc, #188]	; (8015740 <tcp_timewait_input+0xc8>)
 8015682:	781b      	ldrb	r3, [r3, #0]
 8015684:	f003 0304 	and.w	r3, r3, #4
 8015688:	2b00      	cmp	r3, #0
 801568a:	d153      	bne.n	8015734 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d106      	bne.n	80156a0 <tcp_timewait_input+0x28>
 8015692:	4b2c      	ldr	r3, [pc, #176]	; (8015744 <tcp_timewait_input+0xcc>)
 8015694:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015698:	492b      	ldr	r1, [pc, #172]	; (8015748 <tcp_timewait_input+0xd0>)
 801569a:	482c      	ldr	r0, [pc, #176]	; (801574c <tcp_timewait_input+0xd4>)
 801569c:	f007 fa0a 	bl	801cab4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80156a0:	4b27      	ldr	r3, [pc, #156]	; (8015740 <tcp_timewait_input+0xc8>)
 80156a2:	781b      	ldrb	r3, [r3, #0]
 80156a4:	f003 0302 	and.w	r3, r3, #2
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d02a      	beq.n	8015702 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80156ac:	4b28      	ldr	r3, [pc, #160]	; (8015750 <tcp_timewait_input+0xd8>)
 80156ae:	681a      	ldr	r2, [r3, #0]
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156b4:	1ad3      	subs	r3, r2, r3
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	db2d      	blt.n	8015716 <tcp_timewait_input+0x9e>
 80156ba:	4b25      	ldr	r3, [pc, #148]	; (8015750 <tcp_timewait_input+0xd8>)
 80156bc:	681a      	ldr	r2, [r3, #0]
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156c2:	6879      	ldr	r1, [r7, #4]
 80156c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80156c6:	440b      	add	r3, r1
 80156c8:	1ad3      	subs	r3, r2, r3
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	dc23      	bgt.n	8015716 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80156ce:	4b21      	ldr	r3, [pc, #132]	; (8015754 <tcp_timewait_input+0xdc>)
 80156d0:	6819      	ldr	r1, [r3, #0]
 80156d2:	4b21      	ldr	r3, [pc, #132]	; (8015758 <tcp_timewait_input+0xe0>)
 80156d4:	881b      	ldrh	r3, [r3, #0]
 80156d6:	461a      	mov	r2, r3
 80156d8:	4b1d      	ldr	r3, [pc, #116]	; (8015750 <tcp_timewait_input+0xd8>)
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80156de:	4b1f      	ldr	r3, [pc, #124]	; (801575c <tcp_timewait_input+0xe4>)
 80156e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80156e2:	885b      	ldrh	r3, [r3, #2]
 80156e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80156e6:	4a1d      	ldr	r2, [pc, #116]	; (801575c <tcp_timewait_input+0xe4>)
 80156e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80156ea:	8812      	ldrh	r2, [r2, #0]
 80156ec:	b292      	uxth	r2, r2
 80156ee:	9202      	str	r2, [sp, #8]
 80156f0:	9301      	str	r3, [sp, #4]
 80156f2:	4b1b      	ldr	r3, [pc, #108]	; (8015760 <tcp_timewait_input+0xe8>)
 80156f4:	9300      	str	r3, [sp, #0]
 80156f6:	4b1b      	ldr	r3, [pc, #108]	; (8015764 <tcp_timewait_input+0xec>)
 80156f8:	4602      	mov	r2, r0
 80156fa:	6878      	ldr	r0, [r7, #4]
 80156fc:	f003 faca 	bl	8018c94 <tcp_rst>
      return;
 8015700:	e01b      	b.n	801573a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015702:	4b0f      	ldr	r3, [pc, #60]	; (8015740 <tcp_timewait_input+0xc8>)
 8015704:	781b      	ldrb	r3, [r3, #0]
 8015706:	f003 0301 	and.w	r3, r3, #1
 801570a:	2b00      	cmp	r3, #0
 801570c:	d003      	beq.n	8015716 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801570e:	4b16      	ldr	r3, [pc, #88]	; (8015768 <tcp_timewait_input+0xf0>)
 8015710:	681a      	ldr	r2, [r3, #0]
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015716:	4b10      	ldr	r3, [pc, #64]	; (8015758 <tcp_timewait_input+0xe0>)
 8015718:	881b      	ldrh	r3, [r3, #0]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d00c      	beq.n	8015738 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	8b5b      	ldrh	r3, [r3, #26]
 8015722:	f043 0302 	orr.w	r3, r3, #2
 8015726:	b29a      	uxth	r2, r3
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f002 fcfd 	bl	801812c <tcp_output>
  }
  return;
 8015732:	e001      	b.n	8015738 <tcp_timewait_input+0xc0>
    return;
 8015734:	bf00      	nop
 8015736:	e000      	b.n	801573a <tcp_timewait_input+0xc2>
  return;
 8015738:	bf00      	nop
}
 801573a:	3708      	adds	r7, #8
 801573c:	46bd      	mov	sp, r7
 801573e:	bd80      	pop	{r7, pc}
 8015740:	2000ddd0 	.word	0x2000ddd0
 8015744:	0801fe08 	.word	0x0801fe08
 8015748:	08020020 	.word	0x08020020
 801574c:	0801fe54 	.word	0x0801fe54
 8015750:	2000ddc4 	.word	0x2000ddc4
 8015754:	2000ddc8 	.word	0x2000ddc8
 8015758:	2000ddce 	.word	0x2000ddce
 801575c:	2000ddb4 	.word	0x2000ddb4
 8015760:	2000a648 	.word	0x2000a648
 8015764:	2000a64c 	.word	0x2000a64c
 8015768:	2000dd8c 	.word	0x2000dd8c

0801576c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801576c:	b590      	push	{r4, r7, lr}
 801576e:	b08d      	sub	sp, #52	; 0x34
 8015770:	af04      	add	r7, sp, #16
 8015772:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015774:	2300      	movs	r3, #0
 8015776:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015778:	2300      	movs	r3, #0
 801577a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d106      	bne.n	8015790 <tcp_process+0x24>
 8015782:	4b9d      	ldr	r3, [pc, #628]	; (80159f8 <tcp_process+0x28c>)
 8015784:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015788:	499c      	ldr	r1, [pc, #624]	; (80159fc <tcp_process+0x290>)
 801578a:	489d      	ldr	r0, [pc, #628]	; (8015a00 <tcp_process+0x294>)
 801578c:	f007 f992 	bl	801cab4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015790:	4b9c      	ldr	r3, [pc, #624]	; (8015a04 <tcp_process+0x298>)
 8015792:	781b      	ldrb	r3, [r3, #0]
 8015794:	f003 0304 	and.w	r3, r3, #4
 8015798:	2b00      	cmp	r3, #0
 801579a:	d04e      	beq.n	801583a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	7d1b      	ldrb	r3, [r3, #20]
 80157a0:	2b02      	cmp	r3, #2
 80157a2:	d108      	bne.n	80157b6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80157a8:	4b97      	ldr	r3, [pc, #604]	; (8015a08 <tcp_process+0x29c>)
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d123      	bne.n	80157f8 <tcp_process+0x8c>
        acceptable = 1;
 80157b0:	2301      	movs	r3, #1
 80157b2:	76fb      	strb	r3, [r7, #27]
 80157b4:	e020      	b.n	80157f8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80157ba:	4b94      	ldr	r3, [pc, #592]	; (8015a0c <tcp_process+0x2a0>)
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	429a      	cmp	r2, r3
 80157c0:	d102      	bne.n	80157c8 <tcp_process+0x5c>
        acceptable = 1;
 80157c2:	2301      	movs	r3, #1
 80157c4:	76fb      	strb	r3, [r7, #27]
 80157c6:	e017      	b.n	80157f8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80157c8:	4b90      	ldr	r3, [pc, #576]	; (8015a0c <tcp_process+0x2a0>)
 80157ca:	681a      	ldr	r2, [r3, #0]
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157d0:	1ad3      	subs	r3, r2, r3
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	db10      	blt.n	80157f8 <tcp_process+0x8c>
 80157d6:	4b8d      	ldr	r3, [pc, #564]	; (8015a0c <tcp_process+0x2a0>)
 80157d8:	681a      	ldr	r2, [r3, #0]
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157de:	6879      	ldr	r1, [r7, #4]
 80157e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80157e2:	440b      	add	r3, r1
 80157e4:	1ad3      	subs	r3, r2, r3
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	dc06      	bgt.n	80157f8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	8b5b      	ldrh	r3, [r3, #26]
 80157ee:	f043 0302 	orr.w	r3, r3, #2
 80157f2:	b29a      	uxth	r2, r3
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80157f8:	7efb      	ldrb	r3, [r7, #27]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d01b      	beq.n	8015836 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	7d1b      	ldrb	r3, [r3, #20]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d106      	bne.n	8015814 <tcp_process+0xa8>
 8015806:	4b7c      	ldr	r3, [pc, #496]	; (80159f8 <tcp_process+0x28c>)
 8015808:	f44f 724e 	mov.w	r2, #824	; 0x338
 801580c:	4980      	ldr	r1, [pc, #512]	; (8015a10 <tcp_process+0x2a4>)
 801580e:	487c      	ldr	r0, [pc, #496]	; (8015a00 <tcp_process+0x294>)
 8015810:	f007 f950 	bl	801cab4 <iprintf>
      recv_flags |= TF_RESET;
 8015814:	4b7f      	ldr	r3, [pc, #508]	; (8015a14 <tcp_process+0x2a8>)
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	f043 0308 	orr.w	r3, r3, #8
 801581c:	b2da      	uxtb	r2, r3
 801581e:	4b7d      	ldr	r3, [pc, #500]	; (8015a14 <tcp_process+0x2a8>)
 8015820:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	8b5b      	ldrh	r3, [r3, #26]
 8015826:	f023 0301 	bic.w	r3, r3, #1
 801582a:	b29a      	uxth	r2, r3
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015830:	f06f 030d 	mvn.w	r3, #13
 8015834:	e37a      	b.n	8015f2c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015836:	2300      	movs	r3, #0
 8015838:	e378      	b.n	8015f2c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801583a:	4b72      	ldr	r3, [pc, #456]	; (8015a04 <tcp_process+0x298>)
 801583c:	781b      	ldrb	r3, [r3, #0]
 801583e:	f003 0302 	and.w	r3, r3, #2
 8015842:	2b00      	cmp	r3, #0
 8015844:	d010      	beq.n	8015868 <tcp_process+0xfc>
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	7d1b      	ldrb	r3, [r3, #20]
 801584a:	2b02      	cmp	r3, #2
 801584c:	d00c      	beq.n	8015868 <tcp_process+0xfc>
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	7d1b      	ldrb	r3, [r3, #20]
 8015852:	2b03      	cmp	r3, #3
 8015854:	d008      	beq.n	8015868 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	8b5b      	ldrh	r3, [r3, #26]
 801585a:	f043 0302 	orr.w	r3, r3, #2
 801585e:	b29a      	uxth	r2, r3
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015864:	2300      	movs	r3, #0
 8015866:	e361      	b.n	8015f2c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	8b5b      	ldrh	r3, [r3, #26]
 801586c:	f003 0310 	and.w	r3, r3, #16
 8015870:	2b00      	cmp	r3, #0
 8015872:	d103      	bne.n	801587c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015874:	4b68      	ldr	r3, [pc, #416]	; (8015a18 <tcp_process+0x2ac>)
 8015876:	681a      	ldr	r2, [r3, #0]
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	2200      	movs	r2, #0
 8015880:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	2200      	movs	r2, #0
 8015888:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801588c:	6878      	ldr	r0, [r7, #4]
 801588e:	f001 fc2f 	bl	80170f0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	7d1b      	ldrb	r3, [r3, #20]
 8015896:	3b02      	subs	r3, #2
 8015898:	2b07      	cmp	r3, #7
 801589a:	f200 8337 	bhi.w	8015f0c <tcp_process+0x7a0>
 801589e:	a201      	add	r2, pc, #4	; (adr r2, 80158a4 <tcp_process+0x138>)
 80158a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158a4:	080158c5 	.word	0x080158c5
 80158a8:	08015af5 	.word	0x08015af5
 80158ac:	08015c6d 	.word	0x08015c6d
 80158b0:	08015c97 	.word	0x08015c97
 80158b4:	08015dbb 	.word	0x08015dbb
 80158b8:	08015c6d 	.word	0x08015c6d
 80158bc:	08015e47 	.word	0x08015e47
 80158c0:	08015ed7 	.word	0x08015ed7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80158c4:	4b4f      	ldr	r3, [pc, #316]	; (8015a04 <tcp_process+0x298>)
 80158c6:	781b      	ldrb	r3, [r3, #0]
 80158c8:	f003 0310 	and.w	r3, r3, #16
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	f000 80e4 	beq.w	8015a9a <tcp_process+0x32e>
 80158d2:	4b4c      	ldr	r3, [pc, #304]	; (8015a04 <tcp_process+0x298>)
 80158d4:	781b      	ldrb	r3, [r3, #0]
 80158d6:	f003 0302 	and.w	r3, r3, #2
 80158da:	2b00      	cmp	r3, #0
 80158dc:	f000 80dd 	beq.w	8015a9a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158e4:	1c5a      	adds	r2, r3, #1
 80158e6:	4b48      	ldr	r3, [pc, #288]	; (8015a08 <tcp_process+0x29c>)
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	429a      	cmp	r2, r3
 80158ec:	f040 80d5 	bne.w	8015a9a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80158f0:	4b46      	ldr	r3, [pc, #280]	; (8015a0c <tcp_process+0x2a0>)
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	1c5a      	adds	r2, r3, #1
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8015902:	4b41      	ldr	r3, [pc, #260]	; (8015a08 <tcp_process+0x29c>)
 8015904:	681a      	ldr	r2, [r3, #0]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801590a:	4b44      	ldr	r3, [pc, #272]	; (8015a1c <tcp_process+0x2b0>)
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	89db      	ldrh	r3, [r3, #14]
 8015910:	b29a      	uxth	r2, r3
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015924:	4b39      	ldr	r3, [pc, #228]	; (8015a0c <tcp_process+0x2a0>)
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	1e5a      	subs	r2, r3, #1
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	2204      	movs	r2, #4
 8015932:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	3304      	adds	r3, #4
 801593c:	4618      	mov	r0, r3
 801593e:	f005 faa9 	bl	801ae94 <ip4_route>
 8015942:	4601      	mov	r1, r0
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	3304      	adds	r3, #4
 8015948:	461a      	mov	r2, r3
 801594a:	4620      	mov	r0, r4
 801594c:	f7ff f88c 	bl	8014a68 <tcp_eff_send_mss_netif>
 8015950:	4603      	mov	r3, r0
 8015952:	461a      	mov	r2, r3
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801595c:	009a      	lsls	r2, r3, #2
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015962:	005b      	lsls	r3, r3, #1
 8015964:	f241 111c 	movw	r1, #4380	; 0x111c
 8015968:	428b      	cmp	r3, r1
 801596a:	bf38      	it	cc
 801596c:	460b      	movcc	r3, r1
 801596e:	429a      	cmp	r2, r3
 8015970:	d204      	bcs.n	801597c <tcp_process+0x210>
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015976:	009b      	lsls	r3, r3, #2
 8015978:	b29b      	uxth	r3, r3
 801597a:	e00d      	b.n	8015998 <tcp_process+0x22c>
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015980:	005b      	lsls	r3, r3, #1
 8015982:	f241 121c 	movw	r2, #4380	; 0x111c
 8015986:	4293      	cmp	r3, r2
 8015988:	d904      	bls.n	8015994 <tcp_process+0x228>
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801598e:	005b      	lsls	r3, r3, #1
 8015990:	b29b      	uxth	r3, r3
 8015992:	e001      	b.n	8015998 <tcp_process+0x22c>
 8015994:	f241 131c 	movw	r3, #4380	; 0x111c
 8015998:	687a      	ldr	r2, [r7, #4]
 801599a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d106      	bne.n	80159b6 <tcp_process+0x24a>
 80159a8:	4b13      	ldr	r3, [pc, #76]	; (80159f8 <tcp_process+0x28c>)
 80159aa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80159ae:	491c      	ldr	r1, [pc, #112]	; (8015a20 <tcp_process+0x2b4>)
 80159b0:	4813      	ldr	r0, [pc, #76]	; (8015a00 <tcp_process+0x294>)
 80159b2:	f007 f87f 	bl	801cab4 <iprintf>
        --pcb->snd_queuelen;
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80159bc:	3b01      	subs	r3, #1
 80159be:	b29a      	uxth	r2, r3
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159ca:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80159cc:	69fb      	ldr	r3, [r7, #28]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d12a      	bne.n	8015a28 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159d6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80159d8:	69fb      	ldr	r3, [r7, #28]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d106      	bne.n	80159ec <tcp_process+0x280>
 80159de:	4b06      	ldr	r3, [pc, #24]	; (80159f8 <tcp_process+0x28c>)
 80159e0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80159e4:	490f      	ldr	r1, [pc, #60]	; (8015a24 <tcp_process+0x2b8>)
 80159e6:	4806      	ldr	r0, [pc, #24]	; (8015a00 <tcp_process+0x294>)
 80159e8:	f007 f864 	bl	801cab4 <iprintf>
          pcb->unsent = rseg->next;
 80159ec:	69fb      	ldr	r3, [r7, #28]
 80159ee:	681a      	ldr	r2, [r3, #0]
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80159f4:	e01c      	b.n	8015a30 <tcp_process+0x2c4>
 80159f6:	bf00      	nop
 80159f8:	0801fe08 	.word	0x0801fe08
 80159fc:	08020040 	.word	0x08020040
 8015a00:	0801fe54 	.word	0x0801fe54
 8015a04:	2000ddd0 	.word	0x2000ddd0
 8015a08:	2000ddc8 	.word	0x2000ddc8
 8015a0c:	2000ddc4 	.word	0x2000ddc4
 8015a10:	0802005c 	.word	0x0802005c
 8015a14:	2000ddd1 	.word	0x2000ddd1
 8015a18:	2000dd8c 	.word	0x2000dd8c
 8015a1c:	2000ddb4 	.word	0x2000ddb4
 8015a20:	0802007c 	.word	0x0802007c
 8015a24:	08020094 	.word	0x08020094
        } else {
          pcb->unacked = rseg->next;
 8015a28:	69fb      	ldr	r3, [r7, #28]
 8015a2a:	681a      	ldr	r2, [r3, #0]
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8015a30:	69f8      	ldr	r0, [r7, #28]
 8015a32:	f7fe fc54 	bl	80142de <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d104      	bne.n	8015a48 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a44:	861a      	strh	r2, [r3, #48]	; 0x30
 8015a46:	e006      	b.n	8015a56 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	2200      	movs	r2, #0
 8015a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d00a      	beq.n	8015a76 <tcp_process+0x30a>
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015a66:	687a      	ldr	r2, [r7, #4]
 8015a68:	6910      	ldr	r0, [r2, #16]
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	6879      	ldr	r1, [r7, #4]
 8015a6e:	4798      	blx	r3
 8015a70:	4603      	mov	r3, r0
 8015a72:	76bb      	strb	r3, [r7, #26]
 8015a74:	e001      	b.n	8015a7a <tcp_process+0x30e>
 8015a76:	2300      	movs	r3, #0
 8015a78:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015a7a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015a7e:	f113 0f0d 	cmn.w	r3, #13
 8015a82:	d102      	bne.n	8015a8a <tcp_process+0x31e>
          return ERR_ABRT;
 8015a84:	f06f 030c 	mvn.w	r3, #12
 8015a88:	e250      	b.n	8015f2c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	8b5b      	ldrh	r3, [r3, #26]
 8015a8e:	f043 0302 	orr.w	r3, r3, #2
 8015a92:	b29a      	uxth	r2, r3
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015a98:	e23a      	b.n	8015f10 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015a9a:	4b98      	ldr	r3, [pc, #608]	; (8015cfc <tcp_process+0x590>)
 8015a9c:	781b      	ldrb	r3, [r3, #0]
 8015a9e:	f003 0310 	and.w	r3, r3, #16
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	f000 8234 	beq.w	8015f10 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015aa8:	4b95      	ldr	r3, [pc, #596]	; (8015d00 <tcp_process+0x594>)
 8015aaa:	6819      	ldr	r1, [r3, #0]
 8015aac:	4b95      	ldr	r3, [pc, #596]	; (8015d04 <tcp_process+0x598>)
 8015aae:	881b      	ldrh	r3, [r3, #0]
 8015ab0:	461a      	mov	r2, r3
 8015ab2:	4b95      	ldr	r3, [pc, #596]	; (8015d08 <tcp_process+0x59c>)
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ab8:	4b94      	ldr	r3, [pc, #592]	; (8015d0c <tcp_process+0x5a0>)
 8015aba:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015abc:	885b      	ldrh	r3, [r3, #2]
 8015abe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ac0:	4a92      	ldr	r2, [pc, #584]	; (8015d0c <tcp_process+0x5a0>)
 8015ac2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ac4:	8812      	ldrh	r2, [r2, #0]
 8015ac6:	b292      	uxth	r2, r2
 8015ac8:	9202      	str	r2, [sp, #8]
 8015aca:	9301      	str	r3, [sp, #4]
 8015acc:	4b90      	ldr	r3, [pc, #576]	; (8015d10 <tcp_process+0x5a4>)
 8015ace:	9300      	str	r3, [sp, #0]
 8015ad0:	4b90      	ldr	r3, [pc, #576]	; (8015d14 <tcp_process+0x5a8>)
 8015ad2:	4602      	mov	r2, r0
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	f003 f8dd 	bl	8018c94 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015ae0:	2b05      	cmp	r3, #5
 8015ae2:	f200 8215 	bhi.w	8015f10 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	2200      	movs	r2, #0
 8015aea:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8015aec:	6878      	ldr	r0, [r7, #4]
 8015aee:	f002 fea7 	bl	8018840 <tcp_rexmit_rto>
      break;
 8015af2:	e20d      	b.n	8015f10 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015af4:	4b81      	ldr	r3, [pc, #516]	; (8015cfc <tcp_process+0x590>)
 8015af6:	781b      	ldrb	r3, [r3, #0]
 8015af8:	f003 0310 	and.w	r3, r3, #16
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	f000 80a1 	beq.w	8015c44 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015b02:	4b7f      	ldr	r3, [pc, #508]	; (8015d00 <tcp_process+0x594>)
 8015b04:	681a      	ldr	r2, [r3, #0]
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b0a:	1ad3      	subs	r3, r2, r3
 8015b0c:	3b01      	subs	r3, #1
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	db7e      	blt.n	8015c10 <tcp_process+0x4a4>
 8015b12:	4b7b      	ldr	r3, [pc, #492]	; (8015d00 <tcp_process+0x594>)
 8015b14:	681a      	ldr	r2, [r3, #0]
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b1a:	1ad3      	subs	r3, r2, r3
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	dc77      	bgt.n	8015c10 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	2204      	movs	r2, #4
 8015b24:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d102      	bne.n	8015b34 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015b2e:	23fa      	movs	r3, #250	; 0xfa
 8015b30:	76bb      	strb	r3, [r7, #26]
 8015b32:	e01d      	b.n	8015b70 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015b38:	699b      	ldr	r3, [r3, #24]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d106      	bne.n	8015b4c <tcp_process+0x3e0>
 8015b3e:	4b76      	ldr	r3, [pc, #472]	; (8015d18 <tcp_process+0x5ac>)
 8015b40:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8015b44:	4975      	ldr	r1, [pc, #468]	; (8015d1c <tcp_process+0x5b0>)
 8015b46:	4876      	ldr	r0, [pc, #472]	; (8015d20 <tcp_process+0x5b4>)
 8015b48:	f006 ffb4 	bl	801cab4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015b50:	699b      	ldr	r3, [r3, #24]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d00a      	beq.n	8015b6c <tcp_process+0x400>
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015b5a:	699b      	ldr	r3, [r3, #24]
 8015b5c:	687a      	ldr	r2, [r7, #4]
 8015b5e:	6910      	ldr	r0, [r2, #16]
 8015b60:	2200      	movs	r2, #0
 8015b62:	6879      	ldr	r1, [r7, #4]
 8015b64:	4798      	blx	r3
 8015b66:	4603      	mov	r3, r0
 8015b68:	76bb      	strb	r3, [r7, #26]
 8015b6a:	e001      	b.n	8015b70 <tcp_process+0x404>
 8015b6c:	23f0      	movs	r3, #240	; 0xf0
 8015b6e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015b70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d00a      	beq.n	8015b8e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015b78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015b7c:	f113 0f0d 	cmn.w	r3, #13
 8015b80:	d002      	beq.n	8015b88 <tcp_process+0x41c>
              tcp_abort(pcb);
 8015b82:	6878      	ldr	r0, [r7, #4]
 8015b84:	f7fd fde2 	bl	801374c <tcp_abort>
            }
            return ERR_ABRT;
 8015b88:	f06f 030c 	mvn.w	r3, #12
 8015b8c:	e1ce      	b.n	8015f2c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015b8e:	6878      	ldr	r0, [r7, #4]
 8015b90:	f000 fae0 	bl	8016154 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015b94:	4b63      	ldr	r3, [pc, #396]	; (8015d24 <tcp_process+0x5b8>)
 8015b96:	881b      	ldrh	r3, [r3, #0]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d005      	beq.n	8015ba8 <tcp_process+0x43c>
            recv_acked--;
 8015b9c:	4b61      	ldr	r3, [pc, #388]	; (8015d24 <tcp_process+0x5b8>)
 8015b9e:	881b      	ldrh	r3, [r3, #0]
 8015ba0:	3b01      	subs	r3, #1
 8015ba2:	b29a      	uxth	r2, r3
 8015ba4:	4b5f      	ldr	r3, [pc, #380]	; (8015d24 <tcp_process+0x5b8>)
 8015ba6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015bac:	009a      	lsls	r2, r3, #2
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015bb2:	005b      	lsls	r3, r3, #1
 8015bb4:	f241 111c 	movw	r1, #4380	; 0x111c
 8015bb8:	428b      	cmp	r3, r1
 8015bba:	bf38      	it	cc
 8015bbc:	460b      	movcc	r3, r1
 8015bbe:	429a      	cmp	r2, r3
 8015bc0:	d204      	bcs.n	8015bcc <tcp_process+0x460>
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015bc6:	009b      	lsls	r3, r3, #2
 8015bc8:	b29b      	uxth	r3, r3
 8015bca:	e00d      	b.n	8015be8 <tcp_process+0x47c>
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015bd0:	005b      	lsls	r3, r3, #1
 8015bd2:	f241 121c 	movw	r2, #4380	; 0x111c
 8015bd6:	4293      	cmp	r3, r2
 8015bd8:	d904      	bls.n	8015be4 <tcp_process+0x478>
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015bde:	005b      	lsls	r3, r3, #1
 8015be0:	b29b      	uxth	r3, r3
 8015be2:	e001      	b.n	8015be8 <tcp_process+0x47c>
 8015be4:	f241 131c 	movw	r3, #4380	; 0x111c
 8015be8:	687a      	ldr	r2, [r7, #4]
 8015bea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015bee:	4b4e      	ldr	r3, [pc, #312]	; (8015d28 <tcp_process+0x5bc>)
 8015bf0:	781b      	ldrb	r3, [r3, #0]
 8015bf2:	f003 0320 	and.w	r3, r3, #32
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d037      	beq.n	8015c6a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	8b5b      	ldrh	r3, [r3, #26]
 8015bfe:	f043 0302 	orr.w	r3, r3, #2
 8015c02:	b29a      	uxth	r2, r3
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	2207      	movs	r2, #7
 8015c0c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8015c0e:	e02c      	b.n	8015c6a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c10:	4b3b      	ldr	r3, [pc, #236]	; (8015d00 <tcp_process+0x594>)
 8015c12:	6819      	ldr	r1, [r3, #0]
 8015c14:	4b3b      	ldr	r3, [pc, #236]	; (8015d04 <tcp_process+0x598>)
 8015c16:	881b      	ldrh	r3, [r3, #0]
 8015c18:	461a      	mov	r2, r3
 8015c1a:	4b3b      	ldr	r3, [pc, #236]	; (8015d08 <tcp_process+0x59c>)
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c20:	4b3a      	ldr	r3, [pc, #232]	; (8015d0c <tcp_process+0x5a0>)
 8015c22:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c24:	885b      	ldrh	r3, [r3, #2]
 8015c26:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c28:	4a38      	ldr	r2, [pc, #224]	; (8015d0c <tcp_process+0x5a0>)
 8015c2a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c2c:	8812      	ldrh	r2, [r2, #0]
 8015c2e:	b292      	uxth	r2, r2
 8015c30:	9202      	str	r2, [sp, #8]
 8015c32:	9301      	str	r3, [sp, #4]
 8015c34:	4b36      	ldr	r3, [pc, #216]	; (8015d10 <tcp_process+0x5a4>)
 8015c36:	9300      	str	r3, [sp, #0]
 8015c38:	4b36      	ldr	r3, [pc, #216]	; (8015d14 <tcp_process+0x5a8>)
 8015c3a:	4602      	mov	r2, r0
 8015c3c:	6878      	ldr	r0, [r7, #4]
 8015c3e:	f003 f829 	bl	8018c94 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015c42:	e167      	b.n	8015f14 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015c44:	4b2d      	ldr	r3, [pc, #180]	; (8015cfc <tcp_process+0x590>)
 8015c46:	781b      	ldrb	r3, [r3, #0]
 8015c48:	f003 0302 	and.w	r3, r3, #2
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	f000 8161 	beq.w	8015f14 <tcp_process+0x7a8>
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c56:	1e5a      	subs	r2, r3, #1
 8015c58:	4b2b      	ldr	r3, [pc, #172]	; (8015d08 <tcp_process+0x59c>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	f040 8159 	bne.w	8015f14 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f002 fe0e 	bl	8018884 <tcp_rexmit>
      break;
 8015c68:	e154      	b.n	8015f14 <tcp_process+0x7a8>
 8015c6a:	e153      	b.n	8015f14 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015c6c:	6878      	ldr	r0, [r7, #4]
 8015c6e:	f000 fa71 	bl	8016154 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015c72:	4b2d      	ldr	r3, [pc, #180]	; (8015d28 <tcp_process+0x5bc>)
 8015c74:	781b      	ldrb	r3, [r3, #0]
 8015c76:	f003 0320 	and.w	r3, r3, #32
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	f000 814c 	beq.w	8015f18 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	8b5b      	ldrh	r3, [r3, #26]
 8015c84:	f043 0302 	orr.w	r3, r3, #2
 8015c88:	b29a      	uxth	r2, r3
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	2207      	movs	r2, #7
 8015c92:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015c94:	e140      	b.n	8015f18 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015c96:	6878      	ldr	r0, [r7, #4]
 8015c98:	f000 fa5c 	bl	8016154 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015c9c:	4b22      	ldr	r3, [pc, #136]	; (8015d28 <tcp_process+0x5bc>)
 8015c9e:	781b      	ldrb	r3, [r3, #0]
 8015ca0:	f003 0320 	and.w	r3, r3, #32
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d071      	beq.n	8015d8c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015ca8:	4b14      	ldr	r3, [pc, #80]	; (8015cfc <tcp_process+0x590>)
 8015caa:	781b      	ldrb	r3, [r3, #0]
 8015cac:	f003 0310 	and.w	r3, r3, #16
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d060      	beq.n	8015d76 <tcp_process+0x60a>
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015cb8:	4b11      	ldr	r3, [pc, #68]	; (8015d00 <tcp_process+0x594>)
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	d15a      	bne.n	8015d76 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d156      	bne.n	8015d76 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	8b5b      	ldrh	r3, [r3, #26]
 8015ccc:	f043 0302 	orr.w	r3, r3, #2
 8015cd0:	b29a      	uxth	r2, r3
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015cd6:	6878      	ldr	r0, [r7, #4]
 8015cd8:	f7fe fdbc 	bl	8014854 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015cdc:	4b13      	ldr	r3, [pc, #76]	; (8015d2c <tcp_process+0x5c0>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	687a      	ldr	r2, [r7, #4]
 8015ce2:	429a      	cmp	r2, r3
 8015ce4:	d105      	bne.n	8015cf2 <tcp_process+0x586>
 8015ce6:	4b11      	ldr	r3, [pc, #68]	; (8015d2c <tcp_process+0x5c0>)
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	68db      	ldr	r3, [r3, #12]
 8015cec:	4a0f      	ldr	r2, [pc, #60]	; (8015d2c <tcp_process+0x5c0>)
 8015cee:	6013      	str	r3, [r2, #0]
 8015cf0:	e02e      	b.n	8015d50 <tcp_process+0x5e4>
 8015cf2:	4b0e      	ldr	r3, [pc, #56]	; (8015d2c <tcp_process+0x5c0>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	617b      	str	r3, [r7, #20]
 8015cf8:	e027      	b.n	8015d4a <tcp_process+0x5de>
 8015cfa:	bf00      	nop
 8015cfc:	2000ddd0 	.word	0x2000ddd0
 8015d00:	2000ddc8 	.word	0x2000ddc8
 8015d04:	2000ddce 	.word	0x2000ddce
 8015d08:	2000ddc4 	.word	0x2000ddc4
 8015d0c:	2000ddb4 	.word	0x2000ddb4
 8015d10:	2000a648 	.word	0x2000a648
 8015d14:	2000a64c 	.word	0x2000a64c
 8015d18:	0801fe08 	.word	0x0801fe08
 8015d1c:	080200a8 	.word	0x080200a8
 8015d20:	0801fe54 	.word	0x0801fe54
 8015d24:	2000ddcc 	.word	0x2000ddcc
 8015d28:	2000ddd1 	.word	0x2000ddd1
 8015d2c:	2000dd98 	.word	0x2000dd98
 8015d30:	697b      	ldr	r3, [r7, #20]
 8015d32:	68db      	ldr	r3, [r3, #12]
 8015d34:	687a      	ldr	r2, [r7, #4]
 8015d36:	429a      	cmp	r2, r3
 8015d38:	d104      	bne.n	8015d44 <tcp_process+0x5d8>
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	68da      	ldr	r2, [r3, #12]
 8015d3e:	697b      	ldr	r3, [r7, #20]
 8015d40:	60da      	str	r2, [r3, #12]
 8015d42:	e005      	b.n	8015d50 <tcp_process+0x5e4>
 8015d44:	697b      	ldr	r3, [r7, #20]
 8015d46:	68db      	ldr	r3, [r3, #12]
 8015d48:	617b      	str	r3, [r7, #20]
 8015d4a:	697b      	ldr	r3, [r7, #20]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d1ef      	bne.n	8015d30 <tcp_process+0x5c4>
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	2200      	movs	r2, #0
 8015d54:	60da      	str	r2, [r3, #12]
 8015d56:	4b77      	ldr	r3, [pc, #476]	; (8015f34 <tcp_process+0x7c8>)
 8015d58:	2201      	movs	r2, #1
 8015d5a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	220a      	movs	r2, #10
 8015d60:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8015d62:	4b75      	ldr	r3, [pc, #468]	; (8015f38 <tcp_process+0x7cc>)
 8015d64:	681a      	ldr	r2, [r3, #0]
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	60da      	str	r2, [r3, #12]
 8015d6a:	4a73      	ldr	r2, [pc, #460]	; (8015f38 <tcp_process+0x7cc>)
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	6013      	str	r3, [r2, #0]
 8015d70:	f003 f952 	bl	8019018 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015d74:	e0d2      	b.n	8015f1c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	8b5b      	ldrh	r3, [r3, #26]
 8015d7a:	f043 0302 	orr.w	r3, r3, #2
 8015d7e:	b29a      	uxth	r2, r3
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	2208      	movs	r2, #8
 8015d88:	751a      	strb	r2, [r3, #20]
      break;
 8015d8a:	e0c7      	b.n	8015f1c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015d8c:	4b6b      	ldr	r3, [pc, #428]	; (8015f3c <tcp_process+0x7d0>)
 8015d8e:	781b      	ldrb	r3, [r3, #0]
 8015d90:	f003 0310 	and.w	r3, r3, #16
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	f000 80c1 	beq.w	8015f1c <tcp_process+0x7b0>
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015d9e:	4b68      	ldr	r3, [pc, #416]	; (8015f40 <tcp_process+0x7d4>)
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	429a      	cmp	r2, r3
 8015da4:	f040 80ba 	bne.w	8015f1c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	f040 80b5 	bne.w	8015f1c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	2206      	movs	r2, #6
 8015db6:	751a      	strb	r2, [r3, #20]
      break;
 8015db8:	e0b0      	b.n	8015f1c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8015dba:	6878      	ldr	r0, [r7, #4]
 8015dbc:	f000 f9ca 	bl	8016154 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015dc0:	4b60      	ldr	r3, [pc, #384]	; (8015f44 <tcp_process+0x7d8>)
 8015dc2:	781b      	ldrb	r3, [r3, #0]
 8015dc4:	f003 0320 	and.w	r3, r3, #32
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	f000 80a9 	beq.w	8015f20 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	8b5b      	ldrh	r3, [r3, #26]
 8015dd2:	f043 0302 	orr.w	r3, r3, #2
 8015dd6:	b29a      	uxth	r2, r3
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015ddc:	6878      	ldr	r0, [r7, #4]
 8015dde:	f7fe fd39 	bl	8014854 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015de2:	4b59      	ldr	r3, [pc, #356]	; (8015f48 <tcp_process+0x7dc>)
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	687a      	ldr	r2, [r7, #4]
 8015de8:	429a      	cmp	r2, r3
 8015dea:	d105      	bne.n	8015df8 <tcp_process+0x68c>
 8015dec:	4b56      	ldr	r3, [pc, #344]	; (8015f48 <tcp_process+0x7dc>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	68db      	ldr	r3, [r3, #12]
 8015df2:	4a55      	ldr	r2, [pc, #340]	; (8015f48 <tcp_process+0x7dc>)
 8015df4:	6013      	str	r3, [r2, #0]
 8015df6:	e013      	b.n	8015e20 <tcp_process+0x6b4>
 8015df8:	4b53      	ldr	r3, [pc, #332]	; (8015f48 <tcp_process+0x7dc>)
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	613b      	str	r3, [r7, #16]
 8015dfe:	e00c      	b.n	8015e1a <tcp_process+0x6ae>
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	68db      	ldr	r3, [r3, #12]
 8015e04:	687a      	ldr	r2, [r7, #4]
 8015e06:	429a      	cmp	r2, r3
 8015e08:	d104      	bne.n	8015e14 <tcp_process+0x6a8>
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	68da      	ldr	r2, [r3, #12]
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	60da      	str	r2, [r3, #12]
 8015e12:	e005      	b.n	8015e20 <tcp_process+0x6b4>
 8015e14:	693b      	ldr	r3, [r7, #16]
 8015e16:	68db      	ldr	r3, [r3, #12]
 8015e18:	613b      	str	r3, [r7, #16]
 8015e1a:	693b      	ldr	r3, [r7, #16]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d1ef      	bne.n	8015e00 <tcp_process+0x694>
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2200      	movs	r2, #0
 8015e24:	60da      	str	r2, [r3, #12]
 8015e26:	4b43      	ldr	r3, [pc, #268]	; (8015f34 <tcp_process+0x7c8>)
 8015e28:	2201      	movs	r2, #1
 8015e2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	220a      	movs	r2, #10
 8015e30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015e32:	4b41      	ldr	r3, [pc, #260]	; (8015f38 <tcp_process+0x7cc>)
 8015e34:	681a      	ldr	r2, [r3, #0]
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	60da      	str	r2, [r3, #12]
 8015e3a:	4a3f      	ldr	r2, [pc, #252]	; (8015f38 <tcp_process+0x7cc>)
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	6013      	str	r3, [r2, #0]
 8015e40:	f003 f8ea 	bl	8019018 <tcp_timer_needed>
      }
      break;
 8015e44:	e06c      	b.n	8015f20 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015e46:	6878      	ldr	r0, [r7, #4]
 8015e48:	f000 f984 	bl	8016154 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015e4c:	4b3b      	ldr	r3, [pc, #236]	; (8015f3c <tcp_process+0x7d0>)
 8015e4e:	781b      	ldrb	r3, [r3, #0]
 8015e50:	f003 0310 	and.w	r3, r3, #16
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d065      	beq.n	8015f24 <tcp_process+0x7b8>
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015e5c:	4b38      	ldr	r3, [pc, #224]	; (8015f40 <tcp_process+0x7d4>)
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	429a      	cmp	r2, r3
 8015e62:	d15f      	bne.n	8015f24 <tcp_process+0x7b8>
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d15b      	bne.n	8015f24 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8015e6c:	6878      	ldr	r0, [r7, #4]
 8015e6e:	f7fe fcf1 	bl	8014854 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015e72:	4b35      	ldr	r3, [pc, #212]	; (8015f48 <tcp_process+0x7dc>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	687a      	ldr	r2, [r7, #4]
 8015e78:	429a      	cmp	r2, r3
 8015e7a:	d105      	bne.n	8015e88 <tcp_process+0x71c>
 8015e7c:	4b32      	ldr	r3, [pc, #200]	; (8015f48 <tcp_process+0x7dc>)
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	68db      	ldr	r3, [r3, #12]
 8015e82:	4a31      	ldr	r2, [pc, #196]	; (8015f48 <tcp_process+0x7dc>)
 8015e84:	6013      	str	r3, [r2, #0]
 8015e86:	e013      	b.n	8015eb0 <tcp_process+0x744>
 8015e88:	4b2f      	ldr	r3, [pc, #188]	; (8015f48 <tcp_process+0x7dc>)
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	60fb      	str	r3, [r7, #12]
 8015e8e:	e00c      	b.n	8015eaa <tcp_process+0x73e>
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	68db      	ldr	r3, [r3, #12]
 8015e94:	687a      	ldr	r2, [r7, #4]
 8015e96:	429a      	cmp	r2, r3
 8015e98:	d104      	bne.n	8015ea4 <tcp_process+0x738>
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	68da      	ldr	r2, [r3, #12]
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	60da      	str	r2, [r3, #12]
 8015ea2:	e005      	b.n	8015eb0 <tcp_process+0x744>
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	68db      	ldr	r3, [r3, #12]
 8015ea8:	60fb      	str	r3, [r7, #12]
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d1ef      	bne.n	8015e90 <tcp_process+0x724>
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	60da      	str	r2, [r3, #12]
 8015eb6:	4b1f      	ldr	r3, [pc, #124]	; (8015f34 <tcp_process+0x7c8>)
 8015eb8:	2201      	movs	r2, #1
 8015eba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	220a      	movs	r2, #10
 8015ec0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015ec2:	4b1d      	ldr	r3, [pc, #116]	; (8015f38 <tcp_process+0x7cc>)
 8015ec4:	681a      	ldr	r2, [r3, #0]
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	60da      	str	r2, [r3, #12]
 8015eca:	4a1b      	ldr	r2, [pc, #108]	; (8015f38 <tcp_process+0x7cc>)
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	6013      	str	r3, [r2, #0]
 8015ed0:	f003 f8a2 	bl	8019018 <tcp_timer_needed>
      }
      break;
 8015ed4:	e026      	b.n	8015f24 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	f000 f93c 	bl	8016154 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015edc:	4b17      	ldr	r3, [pc, #92]	; (8015f3c <tcp_process+0x7d0>)
 8015ede:	781b      	ldrb	r3, [r3, #0]
 8015ee0:	f003 0310 	and.w	r3, r3, #16
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d01f      	beq.n	8015f28 <tcp_process+0x7bc>
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015eec:	4b14      	ldr	r3, [pc, #80]	; (8015f40 <tcp_process+0x7d4>)
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	429a      	cmp	r2, r3
 8015ef2:	d119      	bne.n	8015f28 <tcp_process+0x7bc>
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d115      	bne.n	8015f28 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015efc:	4b11      	ldr	r3, [pc, #68]	; (8015f44 <tcp_process+0x7d8>)
 8015efe:	781b      	ldrb	r3, [r3, #0]
 8015f00:	f043 0310 	orr.w	r3, r3, #16
 8015f04:	b2da      	uxtb	r2, r3
 8015f06:	4b0f      	ldr	r3, [pc, #60]	; (8015f44 <tcp_process+0x7d8>)
 8015f08:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015f0a:	e00d      	b.n	8015f28 <tcp_process+0x7bc>
    default:
      break;
 8015f0c:	bf00      	nop
 8015f0e:	e00c      	b.n	8015f2a <tcp_process+0x7be>
      break;
 8015f10:	bf00      	nop
 8015f12:	e00a      	b.n	8015f2a <tcp_process+0x7be>
      break;
 8015f14:	bf00      	nop
 8015f16:	e008      	b.n	8015f2a <tcp_process+0x7be>
      break;
 8015f18:	bf00      	nop
 8015f1a:	e006      	b.n	8015f2a <tcp_process+0x7be>
      break;
 8015f1c:	bf00      	nop
 8015f1e:	e004      	b.n	8015f2a <tcp_process+0x7be>
      break;
 8015f20:	bf00      	nop
 8015f22:	e002      	b.n	8015f2a <tcp_process+0x7be>
      break;
 8015f24:	bf00      	nop
 8015f26:	e000      	b.n	8015f2a <tcp_process+0x7be>
      break;
 8015f28:	bf00      	nop
  }
  return ERR_OK;
 8015f2a:	2300      	movs	r3, #0
}
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	3724      	adds	r7, #36	; 0x24
 8015f30:	46bd      	mov	sp, r7
 8015f32:	bd90      	pop	{r4, r7, pc}
 8015f34:	2000dda0 	.word	0x2000dda0
 8015f38:	2000dd9c 	.word	0x2000dd9c
 8015f3c:	2000ddd0 	.word	0x2000ddd0
 8015f40:	2000ddc8 	.word	0x2000ddc8
 8015f44:	2000ddd1 	.word	0x2000ddd1
 8015f48:	2000dd98 	.word	0x2000dd98

08015f4c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8015f4c:	b590      	push	{r4, r7, lr}
 8015f4e:	b085      	sub	sp, #20
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	6078      	str	r0, [r7, #4]
 8015f54:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d106      	bne.n	8015f6a <tcp_oos_insert_segment+0x1e>
 8015f5c:	4b3b      	ldr	r3, [pc, #236]	; (801604c <tcp_oos_insert_segment+0x100>)
 8015f5e:	f240 421f 	movw	r2, #1055	; 0x41f
 8015f62:	493b      	ldr	r1, [pc, #236]	; (8016050 <tcp_oos_insert_segment+0x104>)
 8015f64:	483b      	ldr	r0, [pc, #236]	; (8016054 <tcp_oos_insert_segment+0x108>)
 8015f66:	f006 fda5 	bl	801cab4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	68db      	ldr	r3, [r3, #12]
 8015f6e:	899b      	ldrh	r3, [r3, #12]
 8015f70:	b29b      	uxth	r3, r3
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7fb faa2 	bl	80114bc <lwip_htons>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	b2db      	uxtb	r3, r3
 8015f7c:	f003 0301 	and.w	r3, r3, #1
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d028      	beq.n	8015fd6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015f84:	6838      	ldr	r0, [r7, #0]
 8015f86:	f7fe f995 	bl	80142b4 <tcp_segs_free>
    next = NULL;
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	603b      	str	r3, [r7, #0]
 8015f8e:	e056      	b.n	801603e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	68db      	ldr	r3, [r3, #12]
 8015f94:	899b      	ldrh	r3, [r3, #12]
 8015f96:	b29b      	uxth	r3, r3
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7fb fa8f 	bl	80114bc <lwip_htons>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	b2db      	uxtb	r3, r3
 8015fa2:	f003 0301 	and.w	r3, r3, #1
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d00d      	beq.n	8015fc6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	68db      	ldr	r3, [r3, #12]
 8015fae:	899b      	ldrh	r3, [r3, #12]
 8015fb0:	b29c      	uxth	r4, r3
 8015fb2:	2001      	movs	r0, #1
 8015fb4:	f7fb fa82 	bl	80114bc <lwip_htons>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	461a      	mov	r2, r3
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	68db      	ldr	r3, [r3, #12]
 8015fc0:	4322      	orrs	r2, r4
 8015fc2:	b292      	uxth	r2, r2
 8015fc4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8015fc6:	683b      	ldr	r3, [r7, #0]
 8015fc8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8015fca:	683b      	ldr	r3, [r7, #0]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015fd0:	68f8      	ldr	r0, [r7, #12]
 8015fd2:	f7fe f984 	bl	80142de <tcp_seg_free>
    while (next &&
 8015fd6:	683b      	ldr	r3, [r7, #0]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d00e      	beq.n	8015ffa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	891b      	ldrh	r3, [r3, #8]
 8015fe0:	461a      	mov	r2, r3
 8015fe2:	4b1d      	ldr	r3, [pc, #116]	; (8016058 <tcp_oos_insert_segment+0x10c>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	441a      	add	r2, r3
 8015fe8:	683b      	ldr	r3, [r7, #0]
 8015fea:	68db      	ldr	r3, [r3, #12]
 8015fec:	685b      	ldr	r3, [r3, #4]
 8015fee:	6839      	ldr	r1, [r7, #0]
 8015ff0:	8909      	ldrh	r1, [r1, #8]
 8015ff2:	440b      	add	r3, r1
 8015ff4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	daca      	bge.n	8015f90 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8015ffa:	683b      	ldr	r3, [r7, #0]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d01e      	beq.n	801603e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	891b      	ldrh	r3, [r3, #8]
 8016004:	461a      	mov	r2, r3
 8016006:	4b14      	ldr	r3, [pc, #80]	; (8016058 <tcp_oos_insert_segment+0x10c>)
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	441a      	add	r2, r3
 801600c:	683b      	ldr	r3, [r7, #0]
 801600e:	68db      	ldr	r3, [r3, #12]
 8016010:	685b      	ldr	r3, [r3, #4]
 8016012:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016014:	2b00      	cmp	r3, #0
 8016016:	dd12      	ble.n	801603e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016018:	683b      	ldr	r3, [r7, #0]
 801601a:	68db      	ldr	r3, [r3, #12]
 801601c:	685b      	ldr	r3, [r3, #4]
 801601e:	b29a      	uxth	r2, r3
 8016020:	4b0d      	ldr	r3, [pc, #52]	; (8016058 <tcp_oos_insert_segment+0x10c>)
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	b29b      	uxth	r3, r3
 8016026:	1ad3      	subs	r3, r2, r3
 8016028:	b29a      	uxth	r2, r3
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	685a      	ldr	r2, [r3, #4]
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	891b      	ldrh	r3, [r3, #8]
 8016036:	4619      	mov	r1, r3
 8016038:	4610      	mov	r0, r2
 801603a:	f7fc fc01 	bl	8012840 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	683a      	ldr	r2, [r7, #0]
 8016042:	601a      	str	r2, [r3, #0]
}
 8016044:	bf00      	nop
 8016046:	3714      	adds	r7, #20
 8016048:	46bd      	mov	sp, r7
 801604a:	bd90      	pop	{r4, r7, pc}
 801604c:	0801fe08 	.word	0x0801fe08
 8016050:	080200c8 	.word	0x080200c8
 8016054:	0801fe54 	.word	0x0801fe54
 8016058:	2000ddc4 	.word	0x2000ddc4

0801605c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801605c:	b5b0      	push	{r4, r5, r7, lr}
 801605e:	b086      	sub	sp, #24
 8016060:	af00      	add	r7, sp, #0
 8016062:	60f8      	str	r0, [r7, #12]
 8016064:	60b9      	str	r1, [r7, #8]
 8016066:	607a      	str	r2, [r7, #4]
 8016068:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801606a:	e03e      	b.n	80160ea <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801606c:	68bb      	ldr	r3, [r7, #8]
 801606e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016070:	68bb      	ldr	r3, [r7, #8]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8016076:	697b      	ldr	r3, [r7, #20]
 8016078:	685b      	ldr	r3, [r3, #4]
 801607a:	4618      	mov	r0, r3
 801607c:	f7fc fdf4 	bl	8012c68 <pbuf_clen>
 8016080:	4603      	mov	r3, r0
 8016082:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801608a:	8a7a      	ldrh	r2, [r7, #18]
 801608c:	429a      	cmp	r2, r3
 801608e:	d906      	bls.n	801609e <tcp_free_acked_segments+0x42>
 8016090:	4b2a      	ldr	r3, [pc, #168]	; (801613c <tcp_free_acked_segments+0xe0>)
 8016092:	f240 4257 	movw	r2, #1111	; 0x457
 8016096:	492a      	ldr	r1, [pc, #168]	; (8016140 <tcp_free_acked_segments+0xe4>)
 8016098:	482a      	ldr	r0, [pc, #168]	; (8016144 <tcp_free_acked_segments+0xe8>)
 801609a:	f006 fd0b 	bl	801cab4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80160a4:	8a7b      	ldrh	r3, [r7, #18]
 80160a6:	1ad3      	subs	r3, r2, r3
 80160a8:	b29a      	uxth	r2, r3
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80160b0:	697b      	ldr	r3, [r7, #20]
 80160b2:	891a      	ldrh	r2, [r3, #8]
 80160b4:	4b24      	ldr	r3, [pc, #144]	; (8016148 <tcp_free_acked_segments+0xec>)
 80160b6:	881b      	ldrh	r3, [r3, #0]
 80160b8:	4413      	add	r3, r2
 80160ba:	b29a      	uxth	r2, r3
 80160bc:	4b22      	ldr	r3, [pc, #136]	; (8016148 <tcp_free_acked_segments+0xec>)
 80160be:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80160c0:	6978      	ldr	r0, [r7, #20]
 80160c2:	f7fe f90c 	bl	80142de <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d00c      	beq.n	80160ea <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80160d0:	68bb      	ldr	r3, [r7, #8]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d109      	bne.n	80160ea <tcp_free_acked_segments+0x8e>
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d106      	bne.n	80160ea <tcp_free_acked_segments+0x8e>
 80160dc:	4b17      	ldr	r3, [pc, #92]	; (801613c <tcp_free_acked_segments+0xe0>)
 80160de:	f240 4261 	movw	r2, #1121	; 0x461
 80160e2:	491a      	ldr	r1, [pc, #104]	; (801614c <tcp_free_acked_segments+0xf0>)
 80160e4:	4817      	ldr	r0, [pc, #92]	; (8016144 <tcp_free_acked_segments+0xe8>)
 80160e6:	f006 fce5 	bl	801cab4 <iprintf>
  while (seg_list != NULL &&
 80160ea:	68bb      	ldr	r3, [r7, #8]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d020      	beq.n	8016132 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80160f0:	68bb      	ldr	r3, [r7, #8]
 80160f2:	68db      	ldr	r3, [r3, #12]
 80160f4:	685b      	ldr	r3, [r3, #4]
 80160f6:	4618      	mov	r0, r3
 80160f8:	f7fb f9f5 	bl	80114e6 <lwip_htonl>
 80160fc:	4604      	mov	r4, r0
 80160fe:	68bb      	ldr	r3, [r7, #8]
 8016100:	891b      	ldrh	r3, [r3, #8]
 8016102:	461d      	mov	r5, r3
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	68db      	ldr	r3, [r3, #12]
 8016108:	899b      	ldrh	r3, [r3, #12]
 801610a:	b29b      	uxth	r3, r3
 801610c:	4618      	mov	r0, r3
 801610e:	f7fb f9d5 	bl	80114bc <lwip_htons>
 8016112:	4603      	mov	r3, r0
 8016114:	b2db      	uxtb	r3, r3
 8016116:	f003 0303 	and.w	r3, r3, #3
 801611a:	2b00      	cmp	r3, #0
 801611c:	d001      	beq.n	8016122 <tcp_free_acked_segments+0xc6>
 801611e:	2301      	movs	r3, #1
 8016120:	e000      	b.n	8016124 <tcp_free_acked_segments+0xc8>
 8016122:	2300      	movs	r3, #0
 8016124:	442b      	add	r3, r5
 8016126:	18e2      	adds	r2, r4, r3
 8016128:	4b09      	ldr	r3, [pc, #36]	; (8016150 <tcp_free_acked_segments+0xf4>)
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801612e:	2b00      	cmp	r3, #0
 8016130:	dd9c      	ble.n	801606c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8016132:	68bb      	ldr	r3, [r7, #8]
}
 8016134:	4618      	mov	r0, r3
 8016136:	3718      	adds	r7, #24
 8016138:	46bd      	mov	sp, r7
 801613a:	bdb0      	pop	{r4, r5, r7, pc}
 801613c:	0801fe08 	.word	0x0801fe08
 8016140:	080200f0 	.word	0x080200f0
 8016144:	0801fe54 	.word	0x0801fe54
 8016148:	2000ddcc 	.word	0x2000ddcc
 801614c:	08020118 	.word	0x08020118
 8016150:	2000ddc8 	.word	0x2000ddc8

08016154 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8016154:	b5b0      	push	{r4, r5, r7, lr}
 8016156:	b094      	sub	sp, #80	; 0x50
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801615c:	2300      	movs	r3, #0
 801615e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d106      	bne.n	8016174 <tcp_receive+0x20>
 8016166:	4b91      	ldr	r3, [pc, #580]	; (80163ac <tcp_receive+0x258>)
 8016168:	f240 427b 	movw	r2, #1147	; 0x47b
 801616c:	4990      	ldr	r1, [pc, #576]	; (80163b0 <tcp_receive+0x25c>)
 801616e:	4891      	ldr	r0, [pc, #580]	; (80163b4 <tcp_receive+0x260>)
 8016170:	f006 fca0 	bl	801cab4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	7d1b      	ldrb	r3, [r3, #20]
 8016178:	2b03      	cmp	r3, #3
 801617a:	d806      	bhi.n	801618a <tcp_receive+0x36>
 801617c:	4b8b      	ldr	r3, [pc, #556]	; (80163ac <tcp_receive+0x258>)
 801617e:	f240 427c 	movw	r2, #1148	; 0x47c
 8016182:	498d      	ldr	r1, [pc, #564]	; (80163b8 <tcp_receive+0x264>)
 8016184:	488b      	ldr	r0, [pc, #556]	; (80163b4 <tcp_receive+0x260>)
 8016186:	f006 fc95 	bl	801cab4 <iprintf>

  if (flags & TCP_ACK) {
 801618a:	4b8c      	ldr	r3, [pc, #560]	; (80163bc <tcp_receive+0x268>)
 801618c:	781b      	ldrb	r3, [r3, #0]
 801618e:	f003 0310 	and.w	r3, r3, #16
 8016192:	2b00      	cmp	r3, #0
 8016194:	f000 8264 	beq.w	8016660 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801619e:	461a      	mov	r2, r3
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161a4:	4413      	add	r3, r2
 80161a6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80161ac:	4b84      	ldr	r3, [pc, #528]	; (80163c0 <tcp_receive+0x26c>)
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	1ad3      	subs	r3, r2, r3
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	db1b      	blt.n	80161ee <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80161ba:	4b81      	ldr	r3, [pc, #516]	; (80163c0 <tcp_receive+0x26c>)
 80161bc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80161be:	429a      	cmp	r2, r3
 80161c0:	d106      	bne.n	80161d0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80161c6:	4b7f      	ldr	r3, [pc, #508]	; (80163c4 <tcp_receive+0x270>)
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	1ad3      	subs	r3, r2, r3
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	db0e      	blt.n	80161ee <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80161d4:	4b7b      	ldr	r3, [pc, #492]	; (80163c4 <tcp_receive+0x270>)
 80161d6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80161d8:	429a      	cmp	r2, r3
 80161da:	d125      	bne.n	8016228 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80161dc:	4b7a      	ldr	r3, [pc, #488]	; (80163c8 <tcp_receive+0x274>)
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	89db      	ldrh	r3, [r3, #14]
 80161e2:	b29a      	uxth	r2, r3
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80161ea:	429a      	cmp	r2, r3
 80161ec:	d91c      	bls.n	8016228 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80161ee:	4b76      	ldr	r3, [pc, #472]	; (80163c8 <tcp_receive+0x274>)
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	89db      	ldrh	r3, [r3, #14]
 80161f4:	b29a      	uxth	r2, r3
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016208:	429a      	cmp	r2, r3
 801620a:	d205      	bcs.n	8016218 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8016218:	4b69      	ldr	r3, [pc, #420]	; (80163c0 <tcp_receive+0x26c>)
 801621a:	681a      	ldr	r2, [r3, #0]
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8016220:	4b68      	ldr	r3, [pc, #416]	; (80163c4 <tcp_receive+0x270>)
 8016222:	681a      	ldr	r2, [r3, #0]
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8016228:	4b66      	ldr	r3, [pc, #408]	; (80163c4 <tcp_receive+0x270>)
 801622a:	681a      	ldr	r2, [r3, #0]
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016230:	1ad3      	subs	r3, r2, r3
 8016232:	2b00      	cmp	r3, #0
 8016234:	dc58      	bgt.n	80162e8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8016236:	4b65      	ldr	r3, [pc, #404]	; (80163cc <tcp_receive+0x278>)
 8016238:	881b      	ldrh	r3, [r3, #0]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d14b      	bne.n	80162d6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016242:	687a      	ldr	r2, [r7, #4]
 8016244:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8016248:	4413      	add	r3, r2
 801624a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801624c:	429a      	cmp	r2, r3
 801624e:	d142      	bne.n	80162d6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016256:	2b00      	cmp	r3, #0
 8016258:	db3d      	blt.n	80162d6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801625e:	4b59      	ldr	r3, [pc, #356]	; (80163c4 <tcp_receive+0x270>)
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	429a      	cmp	r2, r3
 8016264:	d137      	bne.n	80162d6 <tcp_receive+0x182>
              found_dupack = 1;
 8016266:	2301      	movs	r3, #1
 8016268:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016270:	2bff      	cmp	r3, #255	; 0xff
 8016272:	d007      	beq.n	8016284 <tcp_receive+0x130>
                ++pcb->dupacks;
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801627a:	3301      	adds	r3, #1
 801627c:	b2da      	uxtb	r2, r3
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801628a:	2b03      	cmp	r3, #3
 801628c:	d91b      	bls.n	80162c6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016298:	4413      	add	r3, r2
 801629a:	b29a      	uxth	r2, r3
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80162a2:	429a      	cmp	r2, r3
 80162a4:	d30a      	bcc.n	80162bc <tcp_receive+0x168>
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162b0:	4413      	add	r3, r2
 80162b2:	b29a      	uxth	r2, r3
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80162ba:	e004      	b.n	80162c6 <tcp_receive+0x172>
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80162c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80162cc:	2b02      	cmp	r3, #2
 80162ce:	d902      	bls.n	80162d6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80162d0:	6878      	ldr	r0, [r7, #4]
 80162d2:	f002 fb43 	bl	801895c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80162d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80162d8:	2b00      	cmp	r3, #0
 80162da:	f040 8161 	bne.w	80165a0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	2200      	movs	r2, #0
 80162e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80162e6:	e15b      	b.n	80165a0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80162e8:	4b36      	ldr	r3, [pc, #216]	; (80163c4 <tcp_receive+0x270>)
 80162ea:	681a      	ldr	r2, [r3, #0]
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162f0:	1ad3      	subs	r3, r2, r3
 80162f2:	3b01      	subs	r3, #1
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	f2c0 814e 	blt.w	8016596 <tcp_receive+0x442>
 80162fa:	4b32      	ldr	r3, [pc, #200]	; (80163c4 <tcp_receive+0x270>)
 80162fc:	681a      	ldr	r2, [r3, #0]
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016302:	1ad3      	subs	r3, r2, r3
 8016304:	2b00      	cmp	r3, #0
 8016306:	f300 8146 	bgt.w	8016596 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	8b5b      	ldrh	r3, [r3, #26]
 801630e:	f003 0304 	and.w	r3, r3, #4
 8016312:	2b00      	cmp	r3, #0
 8016314:	d010      	beq.n	8016338 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	8b5b      	ldrh	r3, [r3, #26]
 801631a:	f023 0304 	bic.w	r3, r3, #4
 801631e:	b29a      	uxth	r2, r3
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	2200      	movs	r2, #0
 8016334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	2200      	movs	r2, #0
 801633c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016346:	10db      	asrs	r3, r3, #3
 8016348:	b21b      	sxth	r3, r3
 801634a:	b29a      	uxth	r2, r3
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016352:	b29b      	uxth	r3, r3
 8016354:	4413      	add	r3, r2
 8016356:	b29b      	uxth	r3, r3
 8016358:	b21a      	sxth	r2, r3
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8016360:	4b18      	ldr	r3, [pc, #96]	; (80163c4 <tcp_receive+0x270>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	b29a      	uxth	r2, r3
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801636a:	b29b      	uxth	r3, r3
 801636c:	1ad3      	subs	r3, r2, r3
 801636e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	2200      	movs	r2, #0
 8016374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8016378:	4b12      	ldr	r3, [pc, #72]	; (80163c4 <tcp_receive+0x270>)
 801637a:	681a      	ldr	r2, [r3, #0]
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	7d1b      	ldrb	r3, [r3, #20]
 8016384:	2b03      	cmp	r3, #3
 8016386:	f240 8097 	bls.w	80164b8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016396:	429a      	cmp	r2, r3
 8016398:	d245      	bcs.n	8016426 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	8b5b      	ldrh	r3, [r3, #26]
 801639e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d014      	beq.n	80163d0 <tcp_receive+0x27c>
 80163a6:	2301      	movs	r3, #1
 80163a8:	e013      	b.n	80163d2 <tcp_receive+0x27e>
 80163aa:	bf00      	nop
 80163ac:	0801fe08 	.word	0x0801fe08
 80163b0:	08020138 	.word	0x08020138
 80163b4:	0801fe54 	.word	0x0801fe54
 80163b8:	08020154 	.word	0x08020154
 80163bc:	2000ddd0 	.word	0x2000ddd0
 80163c0:	2000ddc4 	.word	0x2000ddc4
 80163c4:	2000ddc8 	.word	0x2000ddc8
 80163c8:	2000ddb4 	.word	0x2000ddb4
 80163cc:	2000ddce 	.word	0x2000ddce
 80163d0:	2302      	movs	r3, #2
 80163d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80163d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80163da:	b29a      	uxth	r2, r3
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80163e0:	fb12 f303 	smulbb	r3, r2, r3
 80163e4:	b29b      	uxth	r3, r3
 80163e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80163e8:	4293      	cmp	r3, r2
 80163ea:	bf28      	it	cs
 80163ec:	4613      	movcs	r3, r2
 80163ee:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80163f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80163f8:	4413      	add	r3, r2
 80163fa:	b29a      	uxth	r2, r3
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016402:	429a      	cmp	r2, r3
 8016404:	d309      	bcc.n	801641a <tcp_receive+0x2c6>
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801640c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801640e:	4413      	add	r3, r2
 8016410:	b29a      	uxth	r2, r3
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016418:	e04e      	b.n	80164b8 <tcp_receive+0x364>
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016420:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016424:	e048      	b.n	80164b8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801642c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801642e:	4413      	add	r3, r2
 8016430:	b29a      	uxth	r2, r3
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8016438:	429a      	cmp	r2, r3
 801643a:	d309      	bcc.n	8016450 <tcp_receive+0x2fc>
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016442:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016444:	4413      	add	r3, r2
 8016446:	b29a      	uxth	r2, r3
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801644e:	e004      	b.n	801645a <tcp_receive+0x306>
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016456:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016466:	429a      	cmp	r2, r3
 8016468:	d326      	bcc.n	80164b8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016476:	1ad3      	subs	r3, r2, r3
 8016478:	b29a      	uxth	r2, r3
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801648a:	4413      	add	r3, r2
 801648c:	b29a      	uxth	r2, r3
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016494:	429a      	cmp	r2, r3
 8016496:	d30a      	bcc.n	80164ae <tcp_receive+0x35a>
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80164a2:	4413      	add	r3, r2
 80164a4:	b29a      	uxth	r2, r3
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80164ac:	e004      	b.n	80164b8 <tcp_receive+0x364>
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80164b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164c0:	4a98      	ldr	r2, [pc, #608]	; (8016724 <tcp_receive+0x5d0>)
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	f7ff fdca 	bl	801605c <tcp_free_acked_segments>
 80164c8:	4602      	mov	r2, r0
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80164d6:	4a94      	ldr	r2, [pc, #592]	; (8016728 <tcp_receive+0x5d4>)
 80164d8:	6878      	ldr	r0, [r7, #4]
 80164da:	f7ff fdbf 	bl	801605c <tcp_free_acked_segments>
 80164de:	4602      	mov	r2, r0
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d104      	bne.n	80164f6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80164f2:	861a      	strh	r2, [r3, #48]	; 0x30
 80164f4:	e002      	b.n	80164fc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	2200      	movs	r2, #0
 80164fa:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	2200      	movs	r2, #0
 8016500:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016506:	2b00      	cmp	r3, #0
 8016508:	d103      	bne.n	8016512 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	2200      	movs	r2, #0
 801650e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016518:	4b84      	ldr	r3, [pc, #528]	; (801672c <tcp_receive+0x5d8>)
 801651a:	881b      	ldrh	r3, [r3, #0]
 801651c:	4413      	add	r3, r2
 801651e:	b29a      	uxth	r2, r3
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	8b5b      	ldrh	r3, [r3, #26]
 801652a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801652e:	2b00      	cmp	r3, #0
 8016530:	d035      	beq.n	801659e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016536:	2b00      	cmp	r3, #0
 8016538:	d118      	bne.n	801656c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801653e:	2b00      	cmp	r3, #0
 8016540:	d00c      	beq.n	801655c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801654a:	68db      	ldr	r3, [r3, #12]
 801654c:	685b      	ldr	r3, [r3, #4]
 801654e:	4618      	mov	r0, r3
 8016550:	f7fa ffc9 	bl	80114e6 <lwip_htonl>
 8016554:	4603      	mov	r3, r0
 8016556:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8016558:	2b00      	cmp	r3, #0
 801655a:	dc20      	bgt.n	801659e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	8b5b      	ldrh	r3, [r3, #26]
 8016560:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016564:	b29a      	uxth	r2, r3
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801656a:	e018      	b.n	801659e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016574:	68db      	ldr	r3, [r3, #12]
 8016576:	685b      	ldr	r3, [r3, #4]
 8016578:	4618      	mov	r0, r3
 801657a:	f7fa ffb4 	bl	80114e6 <lwip_htonl>
 801657e:	4603      	mov	r3, r0
 8016580:	1ae3      	subs	r3, r4, r3
 8016582:	2b00      	cmp	r3, #0
 8016584:	dc0b      	bgt.n	801659e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	8b5b      	ldrh	r3, [r3, #26]
 801658a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801658e:	b29a      	uxth	r2, r3
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016594:	e003      	b.n	801659e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016596:	6878      	ldr	r0, [r7, #4]
 8016598:	f002 fbce 	bl	8018d38 <tcp_send_empty_ack>
 801659c:	e000      	b.n	80165a0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801659e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d05b      	beq.n	8016660 <tcp_receive+0x50c>
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80165ac:	4b60      	ldr	r3, [pc, #384]	; (8016730 <tcp_receive+0x5dc>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	1ad3      	subs	r3, r2, r3
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	da54      	bge.n	8016660 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80165b6:	4b5f      	ldr	r3, [pc, #380]	; (8016734 <tcp_receive+0x5e0>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	b29a      	uxth	r2, r3
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165c0:	b29b      	uxth	r3, r3
 80165c2:	1ad3      	subs	r3, r2, r3
 80165c4:	b29b      	uxth	r3, r3
 80165c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80165ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80165d4:	10db      	asrs	r3, r3, #3
 80165d6:	b21b      	sxth	r3, r3
 80165d8:	b29b      	uxth	r3, r3
 80165da:	1ad3      	subs	r3, r2, r3
 80165dc:	b29b      	uxth	r3, r3
 80165de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80165e8:	b29a      	uxth	r2, r3
 80165ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80165ee:	4413      	add	r3, r2
 80165f0:	b29b      	uxth	r3, r3
 80165f2:	b21a      	sxth	r2, r3
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80165f8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	da05      	bge.n	801660c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016600:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016604:	425b      	negs	r3, r3
 8016606:	b29b      	uxth	r3, r3
 8016608:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801660c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016616:	109b      	asrs	r3, r3, #2
 8016618:	b21b      	sxth	r3, r3
 801661a:	b29b      	uxth	r3, r3
 801661c:	1ad3      	subs	r3, r2, r3
 801661e:	b29b      	uxth	r3, r3
 8016620:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801662a:	b29a      	uxth	r2, r3
 801662c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016630:	4413      	add	r3, r2
 8016632:	b29b      	uxth	r3, r3
 8016634:	b21a      	sxth	r2, r3
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016640:	10db      	asrs	r3, r3, #3
 8016642:	b21b      	sxth	r3, r3
 8016644:	b29a      	uxth	r2, r3
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801664c:	b29b      	uxth	r3, r3
 801664e:	4413      	add	r3, r2
 8016650:	b29b      	uxth	r3, r3
 8016652:	b21a      	sxth	r2, r3
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	2200      	movs	r2, #0
 801665e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016660:	4b35      	ldr	r3, [pc, #212]	; (8016738 <tcp_receive+0x5e4>)
 8016662:	881b      	ldrh	r3, [r3, #0]
 8016664:	2b00      	cmp	r3, #0
 8016666:	f000 84e2 	beq.w	801702e <tcp_receive+0xeda>
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	7d1b      	ldrb	r3, [r3, #20]
 801666e:	2b06      	cmp	r3, #6
 8016670:	f200 84dd 	bhi.w	801702e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016678:	4b30      	ldr	r3, [pc, #192]	; (801673c <tcp_receive+0x5e8>)
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	1ad3      	subs	r3, r2, r3
 801667e:	3b01      	subs	r3, #1
 8016680:	2b00      	cmp	r3, #0
 8016682:	f2c0 808f 	blt.w	80167a4 <tcp_receive+0x650>
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801668a:	4b2b      	ldr	r3, [pc, #172]	; (8016738 <tcp_receive+0x5e4>)
 801668c:	881b      	ldrh	r3, [r3, #0]
 801668e:	4619      	mov	r1, r3
 8016690:	4b2a      	ldr	r3, [pc, #168]	; (801673c <tcp_receive+0x5e8>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	440b      	add	r3, r1
 8016696:	1ad3      	subs	r3, r2, r3
 8016698:	3301      	adds	r3, #1
 801669a:	2b00      	cmp	r3, #0
 801669c:	f300 8082 	bgt.w	80167a4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80166a0:	4b27      	ldr	r3, [pc, #156]	; (8016740 <tcp_receive+0x5ec>)
 80166a2:	685b      	ldr	r3, [r3, #4]
 80166a4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80166aa:	4b24      	ldr	r3, [pc, #144]	; (801673c <tcp_receive+0x5e8>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	1ad3      	subs	r3, r2, r3
 80166b0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80166b2:	4b23      	ldr	r3, [pc, #140]	; (8016740 <tcp_receive+0x5ec>)
 80166b4:	685b      	ldr	r3, [r3, #4]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d106      	bne.n	80166c8 <tcp_receive+0x574>
 80166ba:	4b22      	ldr	r3, [pc, #136]	; (8016744 <tcp_receive+0x5f0>)
 80166bc:	f240 5294 	movw	r2, #1428	; 0x594
 80166c0:	4921      	ldr	r1, [pc, #132]	; (8016748 <tcp_receive+0x5f4>)
 80166c2:	4822      	ldr	r0, [pc, #136]	; (801674c <tcp_receive+0x5f8>)
 80166c4:	f006 f9f6 	bl	801cab4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80166c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80166ce:	4293      	cmp	r3, r2
 80166d0:	d906      	bls.n	80166e0 <tcp_receive+0x58c>
 80166d2:	4b1c      	ldr	r3, [pc, #112]	; (8016744 <tcp_receive+0x5f0>)
 80166d4:	f240 5295 	movw	r2, #1429	; 0x595
 80166d8:	491d      	ldr	r1, [pc, #116]	; (8016750 <tcp_receive+0x5fc>)
 80166da:	481c      	ldr	r0, [pc, #112]	; (801674c <tcp_receive+0x5f8>)
 80166dc:	f006 f9ea 	bl	801cab4 <iprintf>
      off = (u16_t)off32;
 80166e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80166e6:	4b16      	ldr	r3, [pc, #88]	; (8016740 <tcp_receive+0x5ec>)
 80166e8:	685b      	ldr	r3, [r3, #4]
 80166ea:	891b      	ldrh	r3, [r3, #8]
 80166ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80166f0:	429a      	cmp	r2, r3
 80166f2:	d906      	bls.n	8016702 <tcp_receive+0x5ae>
 80166f4:	4b13      	ldr	r3, [pc, #76]	; (8016744 <tcp_receive+0x5f0>)
 80166f6:	f240 5297 	movw	r2, #1431	; 0x597
 80166fa:	4916      	ldr	r1, [pc, #88]	; (8016754 <tcp_receive+0x600>)
 80166fc:	4813      	ldr	r0, [pc, #76]	; (801674c <tcp_receive+0x5f8>)
 80166fe:	f006 f9d9 	bl	801cab4 <iprintf>
      inseg.len -= off;
 8016702:	4b0f      	ldr	r3, [pc, #60]	; (8016740 <tcp_receive+0x5ec>)
 8016704:	891a      	ldrh	r2, [r3, #8]
 8016706:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801670a:	1ad3      	subs	r3, r2, r3
 801670c:	b29a      	uxth	r2, r3
 801670e:	4b0c      	ldr	r3, [pc, #48]	; (8016740 <tcp_receive+0x5ec>)
 8016710:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016712:	4b0b      	ldr	r3, [pc, #44]	; (8016740 <tcp_receive+0x5ec>)
 8016714:	685b      	ldr	r3, [r3, #4]
 8016716:	891a      	ldrh	r2, [r3, #8]
 8016718:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801671c:	1ad3      	subs	r3, r2, r3
 801671e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8016720:	e02a      	b.n	8016778 <tcp_receive+0x624>
 8016722:	bf00      	nop
 8016724:	08020170 	.word	0x08020170
 8016728:	08020178 	.word	0x08020178
 801672c:	2000ddcc 	.word	0x2000ddcc
 8016730:	2000ddc8 	.word	0x2000ddc8
 8016734:	2000dd8c 	.word	0x2000dd8c
 8016738:	2000ddce 	.word	0x2000ddce
 801673c:	2000ddc4 	.word	0x2000ddc4
 8016740:	2000dda4 	.word	0x2000dda4
 8016744:	0801fe08 	.word	0x0801fe08
 8016748:	08020180 	.word	0x08020180
 801674c:	0801fe54 	.word	0x0801fe54
 8016750:	08020190 	.word	0x08020190
 8016754:	080201a0 	.word	0x080201a0
        off -= p->len;
 8016758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801675a:	895b      	ldrh	r3, [r3, #10]
 801675c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016760:	1ad3      	subs	r3, r2, r3
 8016762:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016768:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801676a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801676c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801676e:	2200      	movs	r2, #0
 8016770:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801677a:	895b      	ldrh	r3, [r3, #10]
 801677c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016780:	429a      	cmp	r2, r3
 8016782:	d8e9      	bhi.n	8016758 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016784:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016788:	4619      	mov	r1, r3
 801678a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801678c:	f7fc f958 	bl	8012a40 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016794:	4a91      	ldr	r2, [pc, #580]	; (80169dc <tcp_receive+0x888>)
 8016796:	6013      	str	r3, [r2, #0]
 8016798:	4b91      	ldr	r3, [pc, #580]	; (80169e0 <tcp_receive+0x88c>)
 801679a:	68db      	ldr	r3, [r3, #12]
 801679c:	4a8f      	ldr	r2, [pc, #572]	; (80169dc <tcp_receive+0x888>)
 801679e:	6812      	ldr	r2, [r2, #0]
 80167a0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80167a2:	e00d      	b.n	80167c0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80167a4:	4b8d      	ldr	r3, [pc, #564]	; (80169dc <tcp_receive+0x888>)
 80167a6:	681a      	ldr	r2, [r3, #0]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167ac:	1ad3      	subs	r3, r2, r3
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	da06      	bge.n	80167c0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	8b5b      	ldrh	r3, [r3, #26]
 80167b6:	f043 0302 	orr.w	r3, r3, #2
 80167ba:	b29a      	uxth	r2, r3
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80167c0:	4b86      	ldr	r3, [pc, #536]	; (80169dc <tcp_receive+0x888>)
 80167c2:	681a      	ldr	r2, [r3, #0]
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167c8:	1ad3      	subs	r3, r2, r3
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	f2c0 842a 	blt.w	8017024 <tcp_receive+0xed0>
 80167d0:	4b82      	ldr	r3, [pc, #520]	; (80169dc <tcp_receive+0x888>)
 80167d2:	681a      	ldr	r2, [r3, #0]
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167d8:	6879      	ldr	r1, [r7, #4]
 80167da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80167dc:	440b      	add	r3, r1
 80167de:	1ad3      	subs	r3, r2, r3
 80167e0:	3301      	adds	r3, #1
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	f300 841e 	bgt.w	8017024 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80167ec:	4b7b      	ldr	r3, [pc, #492]	; (80169dc <tcp_receive+0x888>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	429a      	cmp	r2, r3
 80167f2:	f040 829a 	bne.w	8016d2a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80167f6:	4b7a      	ldr	r3, [pc, #488]	; (80169e0 <tcp_receive+0x88c>)
 80167f8:	891c      	ldrh	r4, [r3, #8]
 80167fa:	4b79      	ldr	r3, [pc, #484]	; (80169e0 <tcp_receive+0x88c>)
 80167fc:	68db      	ldr	r3, [r3, #12]
 80167fe:	899b      	ldrh	r3, [r3, #12]
 8016800:	b29b      	uxth	r3, r3
 8016802:	4618      	mov	r0, r3
 8016804:	f7fa fe5a 	bl	80114bc <lwip_htons>
 8016808:	4603      	mov	r3, r0
 801680a:	b2db      	uxtb	r3, r3
 801680c:	f003 0303 	and.w	r3, r3, #3
 8016810:	2b00      	cmp	r3, #0
 8016812:	d001      	beq.n	8016818 <tcp_receive+0x6c4>
 8016814:	2301      	movs	r3, #1
 8016816:	e000      	b.n	801681a <tcp_receive+0x6c6>
 8016818:	2300      	movs	r3, #0
 801681a:	4423      	add	r3, r4
 801681c:	b29a      	uxth	r2, r3
 801681e:	4b71      	ldr	r3, [pc, #452]	; (80169e4 <tcp_receive+0x890>)
 8016820:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016826:	4b6f      	ldr	r3, [pc, #444]	; (80169e4 <tcp_receive+0x890>)
 8016828:	881b      	ldrh	r3, [r3, #0]
 801682a:	429a      	cmp	r2, r3
 801682c:	d275      	bcs.n	801691a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801682e:	4b6c      	ldr	r3, [pc, #432]	; (80169e0 <tcp_receive+0x88c>)
 8016830:	68db      	ldr	r3, [r3, #12]
 8016832:	899b      	ldrh	r3, [r3, #12]
 8016834:	b29b      	uxth	r3, r3
 8016836:	4618      	mov	r0, r3
 8016838:	f7fa fe40 	bl	80114bc <lwip_htons>
 801683c:	4603      	mov	r3, r0
 801683e:	b2db      	uxtb	r3, r3
 8016840:	f003 0301 	and.w	r3, r3, #1
 8016844:	2b00      	cmp	r3, #0
 8016846:	d01f      	beq.n	8016888 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016848:	4b65      	ldr	r3, [pc, #404]	; (80169e0 <tcp_receive+0x88c>)
 801684a:	68db      	ldr	r3, [r3, #12]
 801684c:	899b      	ldrh	r3, [r3, #12]
 801684e:	b29b      	uxth	r3, r3
 8016850:	b21b      	sxth	r3, r3
 8016852:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016856:	b21c      	sxth	r4, r3
 8016858:	4b61      	ldr	r3, [pc, #388]	; (80169e0 <tcp_receive+0x88c>)
 801685a:	68db      	ldr	r3, [r3, #12]
 801685c:	899b      	ldrh	r3, [r3, #12]
 801685e:	b29b      	uxth	r3, r3
 8016860:	4618      	mov	r0, r3
 8016862:	f7fa fe2b 	bl	80114bc <lwip_htons>
 8016866:	4603      	mov	r3, r0
 8016868:	b2db      	uxtb	r3, r3
 801686a:	b29b      	uxth	r3, r3
 801686c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016870:	b29b      	uxth	r3, r3
 8016872:	4618      	mov	r0, r3
 8016874:	f7fa fe22 	bl	80114bc <lwip_htons>
 8016878:	4603      	mov	r3, r0
 801687a:	b21b      	sxth	r3, r3
 801687c:	4323      	orrs	r3, r4
 801687e:	b21a      	sxth	r2, r3
 8016880:	4b57      	ldr	r3, [pc, #348]	; (80169e0 <tcp_receive+0x88c>)
 8016882:	68db      	ldr	r3, [r3, #12]
 8016884:	b292      	uxth	r2, r2
 8016886:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801688c:	4b54      	ldr	r3, [pc, #336]	; (80169e0 <tcp_receive+0x88c>)
 801688e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016890:	4b53      	ldr	r3, [pc, #332]	; (80169e0 <tcp_receive+0x88c>)
 8016892:	68db      	ldr	r3, [r3, #12]
 8016894:	899b      	ldrh	r3, [r3, #12]
 8016896:	b29b      	uxth	r3, r3
 8016898:	4618      	mov	r0, r3
 801689a:	f7fa fe0f 	bl	80114bc <lwip_htons>
 801689e:	4603      	mov	r3, r0
 80168a0:	b2db      	uxtb	r3, r3
 80168a2:	f003 0302 	and.w	r3, r3, #2
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d005      	beq.n	80168b6 <tcp_receive+0x762>
            inseg.len -= 1;
 80168aa:	4b4d      	ldr	r3, [pc, #308]	; (80169e0 <tcp_receive+0x88c>)
 80168ac:	891b      	ldrh	r3, [r3, #8]
 80168ae:	3b01      	subs	r3, #1
 80168b0:	b29a      	uxth	r2, r3
 80168b2:	4b4b      	ldr	r3, [pc, #300]	; (80169e0 <tcp_receive+0x88c>)
 80168b4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80168b6:	4b4a      	ldr	r3, [pc, #296]	; (80169e0 <tcp_receive+0x88c>)
 80168b8:	685b      	ldr	r3, [r3, #4]
 80168ba:	4a49      	ldr	r2, [pc, #292]	; (80169e0 <tcp_receive+0x88c>)
 80168bc:	8912      	ldrh	r2, [r2, #8]
 80168be:	4611      	mov	r1, r2
 80168c0:	4618      	mov	r0, r3
 80168c2:	f7fb ffbd 	bl	8012840 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80168c6:	4b46      	ldr	r3, [pc, #280]	; (80169e0 <tcp_receive+0x88c>)
 80168c8:	891c      	ldrh	r4, [r3, #8]
 80168ca:	4b45      	ldr	r3, [pc, #276]	; (80169e0 <tcp_receive+0x88c>)
 80168cc:	68db      	ldr	r3, [r3, #12]
 80168ce:	899b      	ldrh	r3, [r3, #12]
 80168d0:	b29b      	uxth	r3, r3
 80168d2:	4618      	mov	r0, r3
 80168d4:	f7fa fdf2 	bl	80114bc <lwip_htons>
 80168d8:	4603      	mov	r3, r0
 80168da:	b2db      	uxtb	r3, r3
 80168dc:	f003 0303 	and.w	r3, r3, #3
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d001      	beq.n	80168e8 <tcp_receive+0x794>
 80168e4:	2301      	movs	r3, #1
 80168e6:	e000      	b.n	80168ea <tcp_receive+0x796>
 80168e8:	2300      	movs	r3, #0
 80168ea:	4423      	add	r3, r4
 80168ec:	b29a      	uxth	r2, r3
 80168ee:	4b3d      	ldr	r3, [pc, #244]	; (80169e4 <tcp_receive+0x890>)
 80168f0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80168f2:	4b3c      	ldr	r3, [pc, #240]	; (80169e4 <tcp_receive+0x890>)
 80168f4:	881b      	ldrh	r3, [r3, #0]
 80168f6:	461a      	mov	r2, r3
 80168f8:	4b38      	ldr	r3, [pc, #224]	; (80169dc <tcp_receive+0x888>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	441a      	add	r2, r3
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016902:	6879      	ldr	r1, [r7, #4]
 8016904:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016906:	440b      	add	r3, r1
 8016908:	429a      	cmp	r2, r3
 801690a:	d006      	beq.n	801691a <tcp_receive+0x7c6>
 801690c:	4b36      	ldr	r3, [pc, #216]	; (80169e8 <tcp_receive+0x894>)
 801690e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8016912:	4936      	ldr	r1, [pc, #216]	; (80169ec <tcp_receive+0x898>)
 8016914:	4836      	ldr	r0, [pc, #216]	; (80169f0 <tcp_receive+0x89c>)
 8016916:	f006 f8cd 	bl	801cab4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801691e:	2b00      	cmp	r3, #0
 8016920:	f000 80e7 	beq.w	8016af2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016924:	4b2e      	ldr	r3, [pc, #184]	; (80169e0 <tcp_receive+0x88c>)
 8016926:	68db      	ldr	r3, [r3, #12]
 8016928:	899b      	ldrh	r3, [r3, #12]
 801692a:	b29b      	uxth	r3, r3
 801692c:	4618      	mov	r0, r3
 801692e:	f7fa fdc5 	bl	80114bc <lwip_htons>
 8016932:	4603      	mov	r3, r0
 8016934:	b2db      	uxtb	r3, r3
 8016936:	f003 0301 	and.w	r3, r3, #1
 801693a:	2b00      	cmp	r3, #0
 801693c:	d010      	beq.n	8016960 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801693e:	e00a      	b.n	8016956 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016944:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801694a:	681a      	ldr	r2, [r3, #0]
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8016950:	68f8      	ldr	r0, [r7, #12]
 8016952:	f7fd fcc4 	bl	80142de <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801695a:	2b00      	cmp	r3, #0
 801695c:	d1f0      	bne.n	8016940 <tcp_receive+0x7ec>
 801695e:	e0c8      	b.n	8016af2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016964:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016966:	e052      	b.n	8016a0e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801696a:	68db      	ldr	r3, [r3, #12]
 801696c:	899b      	ldrh	r3, [r3, #12]
 801696e:	b29b      	uxth	r3, r3
 8016970:	4618      	mov	r0, r3
 8016972:	f7fa fda3 	bl	80114bc <lwip_htons>
 8016976:	4603      	mov	r3, r0
 8016978:	b2db      	uxtb	r3, r3
 801697a:	f003 0301 	and.w	r3, r3, #1
 801697e:	2b00      	cmp	r3, #0
 8016980:	d03d      	beq.n	80169fe <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016982:	4b17      	ldr	r3, [pc, #92]	; (80169e0 <tcp_receive+0x88c>)
 8016984:	68db      	ldr	r3, [r3, #12]
 8016986:	899b      	ldrh	r3, [r3, #12]
 8016988:	b29b      	uxth	r3, r3
 801698a:	4618      	mov	r0, r3
 801698c:	f7fa fd96 	bl	80114bc <lwip_htons>
 8016990:	4603      	mov	r3, r0
 8016992:	b2db      	uxtb	r3, r3
 8016994:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016998:	2b00      	cmp	r3, #0
 801699a:	d130      	bne.n	80169fe <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801699c:	4b10      	ldr	r3, [pc, #64]	; (80169e0 <tcp_receive+0x88c>)
 801699e:	68db      	ldr	r3, [r3, #12]
 80169a0:	899b      	ldrh	r3, [r3, #12]
 80169a2:	b29c      	uxth	r4, r3
 80169a4:	2001      	movs	r0, #1
 80169a6:	f7fa fd89 	bl	80114bc <lwip_htons>
 80169aa:	4603      	mov	r3, r0
 80169ac:	461a      	mov	r2, r3
 80169ae:	4b0c      	ldr	r3, [pc, #48]	; (80169e0 <tcp_receive+0x88c>)
 80169b0:	68db      	ldr	r3, [r3, #12]
 80169b2:	4322      	orrs	r2, r4
 80169b4:	b292      	uxth	r2, r2
 80169b6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80169b8:	4b09      	ldr	r3, [pc, #36]	; (80169e0 <tcp_receive+0x88c>)
 80169ba:	891c      	ldrh	r4, [r3, #8]
 80169bc:	4b08      	ldr	r3, [pc, #32]	; (80169e0 <tcp_receive+0x88c>)
 80169be:	68db      	ldr	r3, [r3, #12]
 80169c0:	899b      	ldrh	r3, [r3, #12]
 80169c2:	b29b      	uxth	r3, r3
 80169c4:	4618      	mov	r0, r3
 80169c6:	f7fa fd79 	bl	80114bc <lwip_htons>
 80169ca:	4603      	mov	r3, r0
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	f003 0303 	and.w	r3, r3, #3
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d00e      	beq.n	80169f4 <tcp_receive+0x8a0>
 80169d6:	2301      	movs	r3, #1
 80169d8:	e00d      	b.n	80169f6 <tcp_receive+0x8a2>
 80169da:	bf00      	nop
 80169dc:	2000ddc4 	.word	0x2000ddc4
 80169e0:	2000dda4 	.word	0x2000dda4
 80169e4:	2000ddce 	.word	0x2000ddce
 80169e8:	0801fe08 	.word	0x0801fe08
 80169ec:	080201b0 	.word	0x080201b0
 80169f0:	0801fe54 	.word	0x0801fe54
 80169f4:	2300      	movs	r3, #0
 80169f6:	4423      	add	r3, r4
 80169f8:	b29a      	uxth	r2, r3
 80169fa:	4b98      	ldr	r3, [pc, #608]	; (8016c5c <tcp_receive+0xb08>)
 80169fc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80169fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a00:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016a08:	6938      	ldr	r0, [r7, #16]
 8016a0a:	f7fd fc68 	bl	80142de <tcp_seg_free>
            while (next &&
 8016a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d00e      	beq.n	8016a32 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016a14:	4b91      	ldr	r3, [pc, #580]	; (8016c5c <tcp_receive+0xb08>)
 8016a16:	881b      	ldrh	r3, [r3, #0]
 8016a18:	461a      	mov	r2, r3
 8016a1a:	4b91      	ldr	r3, [pc, #580]	; (8016c60 <tcp_receive+0xb0c>)
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	441a      	add	r2, r3
 8016a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a22:	68db      	ldr	r3, [r3, #12]
 8016a24:	685b      	ldr	r3, [r3, #4]
 8016a26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016a28:	8909      	ldrh	r1, [r1, #8]
 8016a2a:	440b      	add	r3, r1
 8016a2c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	da9a      	bge.n	8016968 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d059      	beq.n	8016aec <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8016a38:	4b88      	ldr	r3, [pc, #544]	; (8016c5c <tcp_receive+0xb08>)
 8016a3a:	881b      	ldrh	r3, [r3, #0]
 8016a3c:	461a      	mov	r2, r3
 8016a3e:	4b88      	ldr	r3, [pc, #544]	; (8016c60 <tcp_receive+0xb0c>)
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	441a      	add	r2, r3
 8016a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a46:	68db      	ldr	r3, [r3, #12]
 8016a48:	685b      	ldr	r3, [r3, #4]
 8016a4a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	dd4d      	ble.n	8016aec <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a52:	68db      	ldr	r3, [r3, #12]
 8016a54:	685b      	ldr	r3, [r3, #4]
 8016a56:	b29a      	uxth	r2, r3
 8016a58:	4b81      	ldr	r3, [pc, #516]	; (8016c60 <tcp_receive+0xb0c>)
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	b29b      	uxth	r3, r3
 8016a5e:	1ad3      	subs	r3, r2, r3
 8016a60:	b29a      	uxth	r2, r3
 8016a62:	4b80      	ldr	r3, [pc, #512]	; (8016c64 <tcp_receive+0xb10>)
 8016a64:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016a66:	4b7f      	ldr	r3, [pc, #508]	; (8016c64 <tcp_receive+0xb10>)
 8016a68:	68db      	ldr	r3, [r3, #12]
 8016a6a:	899b      	ldrh	r3, [r3, #12]
 8016a6c:	b29b      	uxth	r3, r3
 8016a6e:	4618      	mov	r0, r3
 8016a70:	f7fa fd24 	bl	80114bc <lwip_htons>
 8016a74:	4603      	mov	r3, r0
 8016a76:	b2db      	uxtb	r3, r3
 8016a78:	f003 0302 	and.w	r3, r3, #2
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d005      	beq.n	8016a8c <tcp_receive+0x938>
                inseg.len -= 1;
 8016a80:	4b78      	ldr	r3, [pc, #480]	; (8016c64 <tcp_receive+0xb10>)
 8016a82:	891b      	ldrh	r3, [r3, #8]
 8016a84:	3b01      	subs	r3, #1
 8016a86:	b29a      	uxth	r2, r3
 8016a88:	4b76      	ldr	r3, [pc, #472]	; (8016c64 <tcp_receive+0xb10>)
 8016a8a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016a8c:	4b75      	ldr	r3, [pc, #468]	; (8016c64 <tcp_receive+0xb10>)
 8016a8e:	685b      	ldr	r3, [r3, #4]
 8016a90:	4a74      	ldr	r2, [pc, #464]	; (8016c64 <tcp_receive+0xb10>)
 8016a92:	8912      	ldrh	r2, [r2, #8]
 8016a94:	4611      	mov	r1, r2
 8016a96:	4618      	mov	r0, r3
 8016a98:	f7fb fed2 	bl	8012840 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016a9c:	4b71      	ldr	r3, [pc, #452]	; (8016c64 <tcp_receive+0xb10>)
 8016a9e:	891c      	ldrh	r4, [r3, #8]
 8016aa0:	4b70      	ldr	r3, [pc, #448]	; (8016c64 <tcp_receive+0xb10>)
 8016aa2:	68db      	ldr	r3, [r3, #12]
 8016aa4:	899b      	ldrh	r3, [r3, #12]
 8016aa6:	b29b      	uxth	r3, r3
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f7fa fd07 	bl	80114bc <lwip_htons>
 8016aae:	4603      	mov	r3, r0
 8016ab0:	b2db      	uxtb	r3, r3
 8016ab2:	f003 0303 	and.w	r3, r3, #3
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d001      	beq.n	8016abe <tcp_receive+0x96a>
 8016aba:	2301      	movs	r3, #1
 8016abc:	e000      	b.n	8016ac0 <tcp_receive+0x96c>
 8016abe:	2300      	movs	r3, #0
 8016ac0:	4423      	add	r3, r4
 8016ac2:	b29a      	uxth	r2, r3
 8016ac4:	4b65      	ldr	r3, [pc, #404]	; (8016c5c <tcp_receive+0xb08>)
 8016ac6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016ac8:	4b64      	ldr	r3, [pc, #400]	; (8016c5c <tcp_receive+0xb08>)
 8016aca:	881b      	ldrh	r3, [r3, #0]
 8016acc:	461a      	mov	r2, r3
 8016ace:	4b64      	ldr	r3, [pc, #400]	; (8016c60 <tcp_receive+0xb0c>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	441a      	add	r2, r3
 8016ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ad6:	68db      	ldr	r3, [r3, #12]
 8016ad8:	685b      	ldr	r3, [r3, #4]
 8016ada:	429a      	cmp	r2, r3
 8016adc:	d006      	beq.n	8016aec <tcp_receive+0x998>
 8016ade:	4b62      	ldr	r3, [pc, #392]	; (8016c68 <tcp_receive+0xb14>)
 8016ae0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8016ae4:	4961      	ldr	r1, [pc, #388]	; (8016c6c <tcp_receive+0xb18>)
 8016ae6:	4862      	ldr	r0, [pc, #392]	; (8016c70 <tcp_receive+0xb1c>)
 8016ae8:	f005 ffe4 	bl	801cab4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016af0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016af2:	4b5a      	ldr	r3, [pc, #360]	; (8016c5c <tcp_receive+0xb08>)
 8016af4:	881b      	ldrh	r3, [r3, #0]
 8016af6:	461a      	mov	r2, r3
 8016af8:	4b59      	ldr	r3, [pc, #356]	; (8016c60 <tcp_receive+0xb0c>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	441a      	add	r2, r3
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016b06:	4b55      	ldr	r3, [pc, #340]	; (8016c5c <tcp_receive+0xb08>)
 8016b08:	881b      	ldrh	r3, [r3, #0]
 8016b0a:	429a      	cmp	r2, r3
 8016b0c:	d206      	bcs.n	8016b1c <tcp_receive+0x9c8>
 8016b0e:	4b56      	ldr	r3, [pc, #344]	; (8016c68 <tcp_receive+0xb14>)
 8016b10:	f240 6207 	movw	r2, #1543	; 0x607
 8016b14:	4957      	ldr	r1, [pc, #348]	; (8016c74 <tcp_receive+0xb20>)
 8016b16:	4856      	ldr	r0, [pc, #344]	; (8016c70 <tcp_receive+0xb1c>)
 8016b18:	f005 ffcc 	bl	801cab4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016b20:	4b4e      	ldr	r3, [pc, #312]	; (8016c5c <tcp_receive+0xb08>)
 8016b22:	881b      	ldrh	r3, [r3, #0]
 8016b24:	1ad3      	subs	r3, r2, r3
 8016b26:	b29a      	uxth	r2, r3
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016b2c:	6878      	ldr	r0, [r7, #4]
 8016b2e:	f7fc feb1 	bl	8013894 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016b32:	4b4c      	ldr	r3, [pc, #304]	; (8016c64 <tcp_receive+0xb10>)
 8016b34:	685b      	ldr	r3, [r3, #4]
 8016b36:	891b      	ldrh	r3, [r3, #8]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d006      	beq.n	8016b4a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8016b3c:	4b49      	ldr	r3, [pc, #292]	; (8016c64 <tcp_receive+0xb10>)
 8016b3e:	685b      	ldr	r3, [r3, #4]
 8016b40:	4a4d      	ldr	r2, [pc, #308]	; (8016c78 <tcp_receive+0xb24>)
 8016b42:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016b44:	4b47      	ldr	r3, [pc, #284]	; (8016c64 <tcp_receive+0xb10>)
 8016b46:	2200      	movs	r2, #0
 8016b48:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016b4a:	4b46      	ldr	r3, [pc, #280]	; (8016c64 <tcp_receive+0xb10>)
 8016b4c:	68db      	ldr	r3, [r3, #12]
 8016b4e:	899b      	ldrh	r3, [r3, #12]
 8016b50:	b29b      	uxth	r3, r3
 8016b52:	4618      	mov	r0, r3
 8016b54:	f7fa fcb2 	bl	80114bc <lwip_htons>
 8016b58:	4603      	mov	r3, r0
 8016b5a:	b2db      	uxtb	r3, r3
 8016b5c:	f003 0301 	and.w	r3, r3, #1
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	f000 80b8 	beq.w	8016cd6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016b66:	4b45      	ldr	r3, [pc, #276]	; (8016c7c <tcp_receive+0xb28>)
 8016b68:	781b      	ldrb	r3, [r3, #0]
 8016b6a:	f043 0320 	orr.w	r3, r3, #32
 8016b6e:	b2da      	uxtb	r2, r3
 8016b70:	4b42      	ldr	r3, [pc, #264]	; (8016c7c <tcp_receive+0xb28>)
 8016b72:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016b74:	e0af      	b.n	8016cd6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016b7a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016b80:	68db      	ldr	r3, [r3, #12]
 8016b82:	685b      	ldr	r3, [r3, #4]
 8016b84:	4a36      	ldr	r2, [pc, #216]	; (8016c60 <tcp_receive+0xb0c>)
 8016b86:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016b88:	68bb      	ldr	r3, [r7, #8]
 8016b8a:	891b      	ldrh	r3, [r3, #8]
 8016b8c:	461c      	mov	r4, r3
 8016b8e:	68bb      	ldr	r3, [r7, #8]
 8016b90:	68db      	ldr	r3, [r3, #12]
 8016b92:	899b      	ldrh	r3, [r3, #12]
 8016b94:	b29b      	uxth	r3, r3
 8016b96:	4618      	mov	r0, r3
 8016b98:	f7fa fc90 	bl	80114bc <lwip_htons>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	b2db      	uxtb	r3, r3
 8016ba0:	f003 0303 	and.w	r3, r3, #3
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d001      	beq.n	8016bac <tcp_receive+0xa58>
 8016ba8:	2301      	movs	r3, #1
 8016baa:	e000      	b.n	8016bae <tcp_receive+0xa5a>
 8016bac:	2300      	movs	r3, #0
 8016bae:	191a      	adds	r2, r3, r4
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bb4:	441a      	add	r2, r3
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016bbe:	461c      	mov	r4, r3
 8016bc0:	68bb      	ldr	r3, [r7, #8]
 8016bc2:	891b      	ldrh	r3, [r3, #8]
 8016bc4:	461d      	mov	r5, r3
 8016bc6:	68bb      	ldr	r3, [r7, #8]
 8016bc8:	68db      	ldr	r3, [r3, #12]
 8016bca:	899b      	ldrh	r3, [r3, #12]
 8016bcc:	b29b      	uxth	r3, r3
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7fa fc74 	bl	80114bc <lwip_htons>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	b2db      	uxtb	r3, r3
 8016bd8:	f003 0303 	and.w	r3, r3, #3
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d001      	beq.n	8016be4 <tcp_receive+0xa90>
 8016be0:	2301      	movs	r3, #1
 8016be2:	e000      	b.n	8016be6 <tcp_receive+0xa92>
 8016be4:	2300      	movs	r3, #0
 8016be6:	442b      	add	r3, r5
 8016be8:	429c      	cmp	r4, r3
 8016bea:	d206      	bcs.n	8016bfa <tcp_receive+0xaa6>
 8016bec:	4b1e      	ldr	r3, [pc, #120]	; (8016c68 <tcp_receive+0xb14>)
 8016bee:	f240 622b 	movw	r2, #1579	; 0x62b
 8016bf2:	4923      	ldr	r1, [pc, #140]	; (8016c80 <tcp_receive+0xb2c>)
 8016bf4:	481e      	ldr	r0, [pc, #120]	; (8016c70 <tcp_receive+0xb1c>)
 8016bf6:	f005 ff5d 	bl	801cab4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016bfa:	68bb      	ldr	r3, [r7, #8]
 8016bfc:	891b      	ldrh	r3, [r3, #8]
 8016bfe:	461c      	mov	r4, r3
 8016c00:	68bb      	ldr	r3, [r7, #8]
 8016c02:	68db      	ldr	r3, [r3, #12]
 8016c04:	899b      	ldrh	r3, [r3, #12]
 8016c06:	b29b      	uxth	r3, r3
 8016c08:	4618      	mov	r0, r3
 8016c0a:	f7fa fc57 	bl	80114bc <lwip_htons>
 8016c0e:	4603      	mov	r3, r0
 8016c10:	b2db      	uxtb	r3, r3
 8016c12:	f003 0303 	and.w	r3, r3, #3
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d001      	beq.n	8016c1e <tcp_receive+0xaca>
 8016c1a:	2301      	movs	r3, #1
 8016c1c:	e000      	b.n	8016c20 <tcp_receive+0xacc>
 8016c1e:	2300      	movs	r3, #0
 8016c20:	1919      	adds	r1, r3, r4
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016c26:	b28b      	uxth	r3, r1
 8016c28:	1ad3      	subs	r3, r2, r3
 8016c2a:	b29a      	uxth	r2, r3
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016c30:	6878      	ldr	r0, [r7, #4]
 8016c32:	f7fc fe2f 	bl	8013894 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016c36:	68bb      	ldr	r3, [r7, #8]
 8016c38:	685b      	ldr	r3, [r3, #4]
 8016c3a:	891b      	ldrh	r3, [r3, #8]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d028      	beq.n	8016c92 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016c40:	4b0d      	ldr	r3, [pc, #52]	; (8016c78 <tcp_receive+0xb24>)
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d01d      	beq.n	8016c84 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8016c48:	4b0b      	ldr	r3, [pc, #44]	; (8016c78 <tcp_receive+0xb24>)
 8016c4a:	681a      	ldr	r2, [r3, #0]
 8016c4c:	68bb      	ldr	r3, [r7, #8]
 8016c4e:	685b      	ldr	r3, [r3, #4]
 8016c50:	4619      	mov	r1, r3
 8016c52:	4610      	mov	r0, r2
 8016c54:	f7fc f848 	bl	8012ce8 <pbuf_cat>
 8016c58:	e018      	b.n	8016c8c <tcp_receive+0xb38>
 8016c5a:	bf00      	nop
 8016c5c:	2000ddce 	.word	0x2000ddce
 8016c60:	2000ddc4 	.word	0x2000ddc4
 8016c64:	2000dda4 	.word	0x2000dda4
 8016c68:	0801fe08 	.word	0x0801fe08
 8016c6c:	080201e8 	.word	0x080201e8
 8016c70:	0801fe54 	.word	0x0801fe54
 8016c74:	08020224 	.word	0x08020224
 8016c78:	2000ddd4 	.word	0x2000ddd4
 8016c7c:	2000ddd1 	.word	0x2000ddd1
 8016c80:	08020244 	.word	0x08020244
            } else {
              recv_data = cseg->p;
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	685b      	ldr	r3, [r3, #4]
 8016c88:	4a70      	ldr	r2, [pc, #448]	; (8016e4c <tcp_receive+0xcf8>)
 8016c8a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016c8c:	68bb      	ldr	r3, [r7, #8]
 8016c8e:	2200      	movs	r2, #0
 8016c90:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016c92:	68bb      	ldr	r3, [r7, #8]
 8016c94:	68db      	ldr	r3, [r3, #12]
 8016c96:	899b      	ldrh	r3, [r3, #12]
 8016c98:	b29b      	uxth	r3, r3
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	f7fa fc0e 	bl	80114bc <lwip_htons>
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	b2db      	uxtb	r3, r3
 8016ca4:	f003 0301 	and.w	r3, r3, #1
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d00d      	beq.n	8016cc8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016cac:	4b68      	ldr	r3, [pc, #416]	; (8016e50 <tcp_receive+0xcfc>)
 8016cae:	781b      	ldrb	r3, [r3, #0]
 8016cb0:	f043 0320 	orr.w	r3, r3, #32
 8016cb4:	b2da      	uxtb	r2, r3
 8016cb6:	4b66      	ldr	r3, [pc, #408]	; (8016e50 <tcp_receive+0xcfc>)
 8016cb8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	7d1b      	ldrb	r3, [r3, #20]
 8016cbe:	2b04      	cmp	r3, #4
 8016cc0:	d102      	bne.n	8016cc8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	2207      	movs	r2, #7
 8016cc6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016cc8:	68bb      	ldr	r3, [r7, #8]
 8016cca:	681a      	ldr	r2, [r3, #0]
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8016cd0:	68b8      	ldr	r0, [r7, #8]
 8016cd2:	f7fd fb04 	bl	80142de <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d008      	beq.n	8016cf0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ce2:	68db      	ldr	r3, [r3, #12]
 8016ce4:	685a      	ldr	r2, [r3, #4]
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8016cea:	429a      	cmp	r2, r3
 8016cec:	f43f af43 	beq.w	8016b76 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	8b5b      	ldrh	r3, [r3, #26]
 8016cf4:	f003 0301 	and.w	r3, r3, #1
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d00e      	beq.n	8016d1a <tcp_receive+0xbc6>
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	8b5b      	ldrh	r3, [r3, #26]
 8016d00:	f023 0301 	bic.w	r3, r3, #1
 8016d04:	b29a      	uxth	r2, r3
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	835a      	strh	r2, [r3, #26]
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	8b5b      	ldrh	r3, [r3, #26]
 8016d0e:	f043 0302 	orr.w	r3, r3, #2
 8016d12:	b29a      	uxth	r2, r3
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016d18:	e188      	b.n	801702c <tcp_receive+0xed8>
        tcp_ack(pcb);
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	8b5b      	ldrh	r3, [r3, #26]
 8016d1e:	f043 0301 	orr.w	r3, r3, #1
 8016d22:	b29a      	uxth	r2, r3
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016d28:	e180      	b.n	801702c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d106      	bne.n	8016d40 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016d32:	4848      	ldr	r0, [pc, #288]	; (8016e54 <tcp_receive+0xd00>)
 8016d34:	f7fd faec 	bl	8014310 <tcp_seg_copy>
 8016d38:	4602      	mov	r2, r0
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	675a      	str	r2, [r3, #116]	; 0x74
 8016d3e:	e16d      	b.n	801701c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8016d40:	2300      	movs	r3, #0
 8016d42:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d48:	63bb      	str	r3, [r7, #56]	; 0x38
 8016d4a:	e157      	b.n	8016ffc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8016d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d4e:	68db      	ldr	r3, [r3, #12]
 8016d50:	685a      	ldr	r2, [r3, #4]
 8016d52:	4b41      	ldr	r3, [pc, #260]	; (8016e58 <tcp_receive+0xd04>)
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	429a      	cmp	r2, r3
 8016d58:	d11d      	bne.n	8016d96 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016d5a:	4b3e      	ldr	r3, [pc, #248]	; (8016e54 <tcp_receive+0xd00>)
 8016d5c:	891a      	ldrh	r2, [r3, #8]
 8016d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d60:	891b      	ldrh	r3, [r3, #8]
 8016d62:	429a      	cmp	r2, r3
 8016d64:	f240 814f 	bls.w	8017006 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016d68:	483a      	ldr	r0, [pc, #232]	; (8016e54 <tcp_receive+0xd00>)
 8016d6a:	f7fd fad1 	bl	8014310 <tcp_seg_copy>
 8016d6e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8016d70:	697b      	ldr	r3, [r7, #20]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	f000 8149 	beq.w	801700a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8016d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d003      	beq.n	8016d86 <tcp_receive+0xc32>
                    prev->next = cseg;
 8016d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d80:	697a      	ldr	r2, [r7, #20]
 8016d82:	601a      	str	r2, [r3, #0]
 8016d84:	e002      	b.n	8016d8c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	697a      	ldr	r2, [r7, #20]
 8016d8a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016d8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016d8e:	6978      	ldr	r0, [r7, #20]
 8016d90:	f7ff f8dc 	bl	8015f4c <tcp_oos_insert_segment>
                }
                break;
 8016d94:	e139      	b.n	801700a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d117      	bne.n	8016dcc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016d9c:	4b2e      	ldr	r3, [pc, #184]	; (8016e58 <tcp_receive+0xd04>)
 8016d9e:	681a      	ldr	r2, [r3, #0]
 8016da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016da2:	68db      	ldr	r3, [r3, #12]
 8016da4:	685b      	ldr	r3, [r3, #4]
 8016da6:	1ad3      	subs	r3, r2, r3
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	da57      	bge.n	8016e5c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016dac:	4829      	ldr	r0, [pc, #164]	; (8016e54 <tcp_receive+0xd00>)
 8016dae:	f7fd faaf 	bl	8014310 <tcp_seg_copy>
 8016db2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016db4:	69bb      	ldr	r3, [r7, #24]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	f000 8129 	beq.w	801700e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	69ba      	ldr	r2, [r7, #24]
 8016dc0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8016dc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016dc4:	69b8      	ldr	r0, [r7, #24]
 8016dc6:	f7ff f8c1 	bl	8015f4c <tcp_oos_insert_segment>
                  }
                  break;
 8016dca:	e120      	b.n	801700e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016dcc:	4b22      	ldr	r3, [pc, #136]	; (8016e58 <tcp_receive+0xd04>)
 8016dce:	681a      	ldr	r2, [r3, #0]
 8016dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dd2:	68db      	ldr	r3, [r3, #12]
 8016dd4:	685b      	ldr	r3, [r3, #4]
 8016dd6:	1ad3      	subs	r3, r2, r3
 8016dd8:	3b01      	subs	r3, #1
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	db3e      	blt.n	8016e5c <tcp_receive+0xd08>
 8016dde:	4b1e      	ldr	r3, [pc, #120]	; (8016e58 <tcp_receive+0xd04>)
 8016de0:	681a      	ldr	r2, [r3, #0]
 8016de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016de4:	68db      	ldr	r3, [r3, #12]
 8016de6:	685b      	ldr	r3, [r3, #4]
 8016de8:	1ad3      	subs	r3, r2, r3
 8016dea:	3301      	adds	r3, #1
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	dc35      	bgt.n	8016e5c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016df0:	4818      	ldr	r0, [pc, #96]	; (8016e54 <tcp_receive+0xd00>)
 8016df2:	f7fd fa8d 	bl	8014310 <tcp_seg_copy>
 8016df6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8016df8:	69fb      	ldr	r3, [r7, #28]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	f000 8109 	beq.w	8017012 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8016e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e02:	68db      	ldr	r3, [r3, #12]
 8016e04:	685b      	ldr	r3, [r3, #4]
 8016e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e08:	8912      	ldrh	r2, [r2, #8]
 8016e0a:	441a      	add	r2, r3
 8016e0c:	4b12      	ldr	r3, [pc, #72]	; (8016e58 <tcp_receive+0xd04>)
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	1ad3      	subs	r3, r2, r3
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	dd12      	ble.n	8016e3c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016e16:	4b10      	ldr	r3, [pc, #64]	; (8016e58 <tcp_receive+0xd04>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	b29a      	uxth	r2, r3
 8016e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e1e:	68db      	ldr	r3, [r3, #12]
 8016e20:	685b      	ldr	r3, [r3, #4]
 8016e22:	b29b      	uxth	r3, r3
 8016e24:	1ad3      	subs	r3, r2, r3
 8016e26:	b29a      	uxth	r2, r3
 8016e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e2a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e2e:	685a      	ldr	r2, [r3, #4]
 8016e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e32:	891b      	ldrh	r3, [r3, #8]
 8016e34:	4619      	mov	r1, r3
 8016e36:	4610      	mov	r0, r2
 8016e38:	f7fb fd02 	bl	8012840 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e3e:	69fa      	ldr	r2, [r7, #28]
 8016e40:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8016e42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016e44:	69f8      	ldr	r0, [r7, #28]
 8016e46:	f7ff f881 	bl	8015f4c <tcp_oos_insert_segment>
                  }
                  break;
 8016e4a:	e0e2      	b.n	8017012 <tcp_receive+0xebe>
 8016e4c:	2000ddd4 	.word	0x2000ddd4
 8016e50:	2000ddd1 	.word	0x2000ddd1
 8016e54:	2000dda4 	.word	0x2000dda4
 8016e58:	2000ddc4 	.word	0x2000ddc4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e5e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8016e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	f040 80c6 	bne.w	8016ff6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016e6a:	4b80      	ldr	r3, [pc, #512]	; (801706c <tcp_receive+0xf18>)
 8016e6c:	681a      	ldr	r2, [r3, #0]
 8016e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e70:	68db      	ldr	r3, [r3, #12]
 8016e72:	685b      	ldr	r3, [r3, #4]
 8016e74:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	f340 80bd 	ble.w	8016ff6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e7e:	68db      	ldr	r3, [r3, #12]
 8016e80:	899b      	ldrh	r3, [r3, #12]
 8016e82:	b29b      	uxth	r3, r3
 8016e84:	4618      	mov	r0, r3
 8016e86:	f7fa fb19 	bl	80114bc <lwip_htons>
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	b2db      	uxtb	r3, r3
 8016e8e:	f003 0301 	and.w	r3, r3, #1
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	f040 80bf 	bne.w	8017016 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016e98:	4875      	ldr	r0, [pc, #468]	; (8017070 <tcp_receive+0xf1c>)
 8016e9a:	f7fd fa39 	bl	8014310 <tcp_seg_copy>
 8016e9e:	4602      	mov	r2, r0
 8016ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ea2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	f000 80b6 	beq.w	801701a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8016eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eb0:	68db      	ldr	r3, [r3, #12]
 8016eb2:	685b      	ldr	r3, [r3, #4]
 8016eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016eb6:	8912      	ldrh	r2, [r2, #8]
 8016eb8:	441a      	add	r2, r3
 8016eba:	4b6c      	ldr	r3, [pc, #432]	; (801706c <tcp_receive+0xf18>)
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	1ad3      	subs	r3, r2, r3
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	dd12      	ble.n	8016eea <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016ec4:	4b69      	ldr	r3, [pc, #420]	; (801706c <tcp_receive+0xf18>)
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	b29a      	uxth	r2, r3
 8016eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ecc:	68db      	ldr	r3, [r3, #12]
 8016ece:	685b      	ldr	r3, [r3, #4]
 8016ed0:	b29b      	uxth	r3, r3
 8016ed2:	1ad3      	subs	r3, r2, r3
 8016ed4:	b29a      	uxth	r2, r3
 8016ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ed8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8016eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016edc:	685a      	ldr	r2, [r3, #4]
 8016ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ee0:	891b      	ldrh	r3, [r3, #8]
 8016ee2:	4619      	mov	r1, r3
 8016ee4:	4610      	mov	r0, r2
 8016ee6:	f7fb fcab 	bl	8012840 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8016eea:	4b62      	ldr	r3, [pc, #392]	; (8017074 <tcp_receive+0xf20>)
 8016eec:	881b      	ldrh	r3, [r3, #0]
 8016eee:	461a      	mov	r2, r3
 8016ef0:	4b5e      	ldr	r3, [pc, #376]	; (801706c <tcp_receive+0xf18>)
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	441a      	add	r2, r3
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016efa:	6879      	ldr	r1, [r7, #4]
 8016efc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016efe:	440b      	add	r3, r1
 8016f00:	1ad3      	subs	r3, r2, r3
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	f340 8089 	ble.w	801701a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	68db      	ldr	r3, [r3, #12]
 8016f0e:	899b      	ldrh	r3, [r3, #12]
 8016f10:	b29b      	uxth	r3, r3
 8016f12:	4618      	mov	r0, r3
 8016f14:	f7fa fad2 	bl	80114bc <lwip_htons>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	b2db      	uxtb	r3, r3
 8016f1c:	f003 0301 	and.w	r3, r3, #1
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d022      	beq.n	8016f6a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	68db      	ldr	r3, [r3, #12]
 8016f2a:	899b      	ldrh	r3, [r3, #12]
 8016f2c:	b29b      	uxth	r3, r3
 8016f2e:	b21b      	sxth	r3, r3
 8016f30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016f34:	b21c      	sxth	r4, r3
 8016f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	68db      	ldr	r3, [r3, #12]
 8016f3c:	899b      	ldrh	r3, [r3, #12]
 8016f3e:	b29b      	uxth	r3, r3
 8016f40:	4618      	mov	r0, r3
 8016f42:	f7fa fabb 	bl	80114bc <lwip_htons>
 8016f46:	4603      	mov	r3, r0
 8016f48:	b2db      	uxtb	r3, r3
 8016f4a:	b29b      	uxth	r3, r3
 8016f4c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016f50:	b29b      	uxth	r3, r3
 8016f52:	4618      	mov	r0, r3
 8016f54:	f7fa fab2 	bl	80114bc <lwip_htons>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	b21b      	sxth	r3, r3
 8016f5c:	4323      	orrs	r3, r4
 8016f5e:	b21a      	sxth	r2, r3
 8016f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	68db      	ldr	r3, [r3, #12]
 8016f66:	b292      	uxth	r2, r2
 8016f68:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f6e:	b29a      	uxth	r2, r3
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f74:	4413      	add	r3, r2
 8016f76:	b299      	uxth	r1, r3
 8016f78:	4b3c      	ldr	r3, [pc, #240]	; (801706c <tcp_receive+0xf18>)
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	b29a      	uxth	r2, r3
 8016f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	1a8a      	subs	r2, r1, r2
 8016f84:	b292      	uxth	r2, r2
 8016f86:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	685a      	ldr	r2, [r3, #4]
 8016f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	891b      	ldrh	r3, [r3, #8]
 8016f94:	4619      	mov	r1, r3
 8016f96:	4610      	mov	r0, r2
 8016f98:	f7fb fc52 	bl	8012840 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	891c      	ldrh	r4, [r3, #8]
 8016fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	68db      	ldr	r3, [r3, #12]
 8016fa8:	899b      	ldrh	r3, [r3, #12]
 8016faa:	b29b      	uxth	r3, r3
 8016fac:	4618      	mov	r0, r3
 8016fae:	f7fa fa85 	bl	80114bc <lwip_htons>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	b2db      	uxtb	r3, r3
 8016fb6:	f003 0303 	and.w	r3, r3, #3
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d001      	beq.n	8016fc2 <tcp_receive+0xe6e>
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	e000      	b.n	8016fc4 <tcp_receive+0xe70>
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	4423      	add	r3, r4
 8016fc6:	b29a      	uxth	r2, r3
 8016fc8:	4b2a      	ldr	r3, [pc, #168]	; (8017074 <tcp_receive+0xf20>)
 8016fca:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016fcc:	4b29      	ldr	r3, [pc, #164]	; (8017074 <tcp_receive+0xf20>)
 8016fce:	881b      	ldrh	r3, [r3, #0]
 8016fd0:	461a      	mov	r2, r3
 8016fd2:	4b26      	ldr	r3, [pc, #152]	; (801706c <tcp_receive+0xf18>)
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	441a      	add	r2, r3
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fdc:	6879      	ldr	r1, [r7, #4]
 8016fde:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016fe0:	440b      	add	r3, r1
 8016fe2:	429a      	cmp	r2, r3
 8016fe4:	d019      	beq.n	801701a <tcp_receive+0xec6>
 8016fe6:	4b24      	ldr	r3, [pc, #144]	; (8017078 <tcp_receive+0xf24>)
 8016fe8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8016fec:	4923      	ldr	r1, [pc, #140]	; (801707c <tcp_receive+0xf28>)
 8016fee:	4824      	ldr	r0, [pc, #144]	; (8017080 <tcp_receive+0xf2c>)
 8016ff0:	f005 fd60 	bl	801cab4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8016ff4:	e011      	b.n	801701a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8016ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	f47f aea4 	bne.w	8016d4c <tcp_receive+0xbf8>
 8017004:	e00a      	b.n	801701c <tcp_receive+0xec8>
                break;
 8017006:	bf00      	nop
 8017008:	e008      	b.n	801701c <tcp_receive+0xec8>
                break;
 801700a:	bf00      	nop
 801700c:	e006      	b.n	801701c <tcp_receive+0xec8>
                  break;
 801700e:	bf00      	nop
 8017010:	e004      	b.n	801701c <tcp_receive+0xec8>
                  break;
 8017012:	bf00      	nop
 8017014:	e002      	b.n	801701c <tcp_receive+0xec8>
                  break;
 8017016:	bf00      	nop
 8017018:	e000      	b.n	801701c <tcp_receive+0xec8>
                break;
 801701a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801701c:	6878      	ldr	r0, [r7, #4]
 801701e:	f001 fe8b 	bl	8018d38 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017022:	e003      	b.n	801702c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017024:	6878      	ldr	r0, [r7, #4]
 8017026:	f001 fe87 	bl	8018d38 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801702a:	e01a      	b.n	8017062 <tcp_receive+0xf0e>
 801702c:	e019      	b.n	8017062 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801702e:	4b0f      	ldr	r3, [pc, #60]	; (801706c <tcp_receive+0xf18>)
 8017030:	681a      	ldr	r2, [r3, #0]
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017036:	1ad3      	subs	r3, r2, r3
 8017038:	2b00      	cmp	r3, #0
 801703a:	db0a      	blt.n	8017052 <tcp_receive+0xefe>
 801703c:	4b0b      	ldr	r3, [pc, #44]	; (801706c <tcp_receive+0xf18>)
 801703e:	681a      	ldr	r2, [r3, #0]
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017044:	6879      	ldr	r1, [r7, #4]
 8017046:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017048:	440b      	add	r3, r1
 801704a:	1ad3      	subs	r3, r2, r3
 801704c:	3301      	adds	r3, #1
 801704e:	2b00      	cmp	r3, #0
 8017050:	dd07      	ble.n	8017062 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	8b5b      	ldrh	r3, [r3, #26]
 8017056:	f043 0302 	orr.w	r3, r3, #2
 801705a:	b29a      	uxth	r2, r3
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8017060:	e7ff      	b.n	8017062 <tcp_receive+0xf0e>
 8017062:	bf00      	nop
 8017064:	3750      	adds	r7, #80	; 0x50
 8017066:	46bd      	mov	sp, r7
 8017068:	bdb0      	pop	{r4, r5, r7, pc}
 801706a:	bf00      	nop
 801706c:	2000ddc4 	.word	0x2000ddc4
 8017070:	2000dda4 	.word	0x2000dda4
 8017074:	2000ddce 	.word	0x2000ddce
 8017078:	0801fe08 	.word	0x0801fe08
 801707c:	080201b0 	.word	0x080201b0
 8017080:	0801fe54 	.word	0x0801fe54

08017084 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8017084:	b480      	push	{r7}
 8017086:	b083      	sub	sp, #12
 8017088:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801708a:	4b15      	ldr	r3, [pc, #84]	; (80170e0 <tcp_get_next_optbyte+0x5c>)
 801708c:	881b      	ldrh	r3, [r3, #0]
 801708e:	1c5a      	adds	r2, r3, #1
 8017090:	b291      	uxth	r1, r2
 8017092:	4a13      	ldr	r2, [pc, #76]	; (80170e0 <tcp_get_next_optbyte+0x5c>)
 8017094:	8011      	strh	r1, [r2, #0]
 8017096:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017098:	4b12      	ldr	r3, [pc, #72]	; (80170e4 <tcp_get_next_optbyte+0x60>)
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d004      	beq.n	80170aa <tcp_get_next_optbyte+0x26>
 80170a0:	4b11      	ldr	r3, [pc, #68]	; (80170e8 <tcp_get_next_optbyte+0x64>)
 80170a2:	881b      	ldrh	r3, [r3, #0]
 80170a4:	88fa      	ldrh	r2, [r7, #6]
 80170a6:	429a      	cmp	r2, r3
 80170a8:	d208      	bcs.n	80170bc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80170aa:	4b10      	ldr	r3, [pc, #64]	; (80170ec <tcp_get_next_optbyte+0x68>)
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	3314      	adds	r3, #20
 80170b0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80170b2:	88fb      	ldrh	r3, [r7, #6]
 80170b4:	683a      	ldr	r2, [r7, #0]
 80170b6:	4413      	add	r3, r2
 80170b8:	781b      	ldrb	r3, [r3, #0]
 80170ba:	e00b      	b.n	80170d4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80170bc:	88fb      	ldrh	r3, [r7, #6]
 80170be:	b2da      	uxtb	r2, r3
 80170c0:	4b09      	ldr	r3, [pc, #36]	; (80170e8 <tcp_get_next_optbyte+0x64>)
 80170c2:	881b      	ldrh	r3, [r3, #0]
 80170c4:	b2db      	uxtb	r3, r3
 80170c6:	1ad3      	subs	r3, r2, r3
 80170c8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80170ca:	4b06      	ldr	r3, [pc, #24]	; (80170e4 <tcp_get_next_optbyte+0x60>)
 80170cc:	681a      	ldr	r2, [r3, #0]
 80170ce:	797b      	ldrb	r3, [r7, #5]
 80170d0:	4413      	add	r3, r2
 80170d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80170d4:	4618      	mov	r0, r3
 80170d6:	370c      	adds	r7, #12
 80170d8:	46bd      	mov	sp, r7
 80170da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170de:	4770      	bx	lr
 80170e0:	2000ddc0 	.word	0x2000ddc0
 80170e4:	2000ddbc 	.word	0x2000ddbc
 80170e8:	2000ddba 	.word	0x2000ddba
 80170ec:	2000ddb4 	.word	0x2000ddb4

080170f0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80170f0:	b580      	push	{r7, lr}
 80170f2:	b084      	sub	sp, #16
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d106      	bne.n	801710c <tcp_parseopt+0x1c>
 80170fe:	4b32      	ldr	r3, [pc, #200]	; (80171c8 <tcp_parseopt+0xd8>)
 8017100:	f240 727d 	movw	r2, #1917	; 0x77d
 8017104:	4931      	ldr	r1, [pc, #196]	; (80171cc <tcp_parseopt+0xdc>)
 8017106:	4832      	ldr	r0, [pc, #200]	; (80171d0 <tcp_parseopt+0xe0>)
 8017108:	f005 fcd4 	bl	801cab4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801710c:	4b31      	ldr	r3, [pc, #196]	; (80171d4 <tcp_parseopt+0xe4>)
 801710e:	881b      	ldrh	r3, [r3, #0]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d055      	beq.n	80171c0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017114:	4b30      	ldr	r3, [pc, #192]	; (80171d8 <tcp_parseopt+0xe8>)
 8017116:	2200      	movs	r2, #0
 8017118:	801a      	strh	r2, [r3, #0]
 801711a:	e045      	b.n	80171a8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801711c:	f7ff ffb2 	bl	8017084 <tcp_get_next_optbyte>
 8017120:	4603      	mov	r3, r0
 8017122:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017124:	7bfb      	ldrb	r3, [r7, #15]
 8017126:	2b02      	cmp	r3, #2
 8017128:	d006      	beq.n	8017138 <tcp_parseopt+0x48>
 801712a:	2b02      	cmp	r3, #2
 801712c:	dc2b      	bgt.n	8017186 <tcp_parseopt+0x96>
 801712e:	2b00      	cmp	r3, #0
 8017130:	d041      	beq.n	80171b6 <tcp_parseopt+0xc6>
 8017132:	2b01      	cmp	r3, #1
 8017134:	d127      	bne.n	8017186 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8017136:	e037      	b.n	80171a8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8017138:	f7ff ffa4 	bl	8017084 <tcp_get_next_optbyte>
 801713c:	4603      	mov	r3, r0
 801713e:	2b04      	cmp	r3, #4
 8017140:	d13b      	bne.n	80171ba <tcp_parseopt+0xca>
 8017142:	4b25      	ldr	r3, [pc, #148]	; (80171d8 <tcp_parseopt+0xe8>)
 8017144:	881b      	ldrh	r3, [r3, #0]
 8017146:	3301      	adds	r3, #1
 8017148:	4a22      	ldr	r2, [pc, #136]	; (80171d4 <tcp_parseopt+0xe4>)
 801714a:	8812      	ldrh	r2, [r2, #0]
 801714c:	4293      	cmp	r3, r2
 801714e:	da34      	bge.n	80171ba <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8017150:	f7ff ff98 	bl	8017084 <tcp_get_next_optbyte>
 8017154:	4603      	mov	r3, r0
 8017156:	b29b      	uxth	r3, r3
 8017158:	021b      	lsls	r3, r3, #8
 801715a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801715c:	f7ff ff92 	bl	8017084 <tcp_get_next_optbyte>
 8017160:	4603      	mov	r3, r0
 8017162:	b29a      	uxth	r2, r3
 8017164:	89bb      	ldrh	r3, [r7, #12]
 8017166:	4313      	orrs	r3, r2
 8017168:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801716a:	89bb      	ldrh	r3, [r7, #12]
 801716c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017170:	d804      	bhi.n	801717c <tcp_parseopt+0x8c>
 8017172:	89bb      	ldrh	r3, [r7, #12]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d001      	beq.n	801717c <tcp_parseopt+0x8c>
 8017178:	89ba      	ldrh	r2, [r7, #12]
 801717a:	e001      	b.n	8017180 <tcp_parseopt+0x90>
 801717c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8017184:	e010      	b.n	80171a8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8017186:	f7ff ff7d 	bl	8017084 <tcp_get_next_optbyte>
 801718a:	4603      	mov	r3, r0
 801718c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801718e:	7afb      	ldrb	r3, [r7, #11]
 8017190:	2b01      	cmp	r3, #1
 8017192:	d914      	bls.n	80171be <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8017194:	7afb      	ldrb	r3, [r7, #11]
 8017196:	b29a      	uxth	r2, r3
 8017198:	4b0f      	ldr	r3, [pc, #60]	; (80171d8 <tcp_parseopt+0xe8>)
 801719a:	881b      	ldrh	r3, [r3, #0]
 801719c:	4413      	add	r3, r2
 801719e:	b29b      	uxth	r3, r3
 80171a0:	3b02      	subs	r3, #2
 80171a2:	b29a      	uxth	r2, r3
 80171a4:	4b0c      	ldr	r3, [pc, #48]	; (80171d8 <tcp_parseopt+0xe8>)
 80171a6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80171a8:	4b0b      	ldr	r3, [pc, #44]	; (80171d8 <tcp_parseopt+0xe8>)
 80171aa:	881a      	ldrh	r2, [r3, #0]
 80171ac:	4b09      	ldr	r3, [pc, #36]	; (80171d4 <tcp_parseopt+0xe4>)
 80171ae:	881b      	ldrh	r3, [r3, #0]
 80171b0:	429a      	cmp	r2, r3
 80171b2:	d3b3      	bcc.n	801711c <tcp_parseopt+0x2c>
 80171b4:	e004      	b.n	80171c0 <tcp_parseopt+0xd0>
          return;
 80171b6:	bf00      	nop
 80171b8:	e002      	b.n	80171c0 <tcp_parseopt+0xd0>
            return;
 80171ba:	bf00      	nop
 80171bc:	e000      	b.n	80171c0 <tcp_parseopt+0xd0>
            return;
 80171be:	bf00      	nop
      }
    }
  }
}
 80171c0:	3710      	adds	r7, #16
 80171c2:	46bd      	mov	sp, r7
 80171c4:	bd80      	pop	{r7, pc}
 80171c6:	bf00      	nop
 80171c8:	0801fe08 	.word	0x0801fe08
 80171cc:	0802026c 	.word	0x0802026c
 80171d0:	0801fe54 	.word	0x0801fe54
 80171d4:	2000ddb8 	.word	0x2000ddb8
 80171d8:	2000ddc0 	.word	0x2000ddc0

080171dc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80171dc:	b480      	push	{r7}
 80171de:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80171e0:	4b05      	ldr	r3, [pc, #20]	; (80171f8 <tcp_trigger_input_pcb_close+0x1c>)
 80171e2:	781b      	ldrb	r3, [r3, #0]
 80171e4:	f043 0310 	orr.w	r3, r3, #16
 80171e8:	b2da      	uxtb	r2, r3
 80171ea:	4b03      	ldr	r3, [pc, #12]	; (80171f8 <tcp_trigger_input_pcb_close+0x1c>)
 80171ec:	701a      	strb	r2, [r3, #0]
}
 80171ee:	bf00      	nop
 80171f0:	46bd      	mov	sp, r7
 80171f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f6:	4770      	bx	lr
 80171f8:	2000ddd1 	.word	0x2000ddd1

080171fc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b084      	sub	sp, #16
 8017200:	af00      	add	r7, sp, #0
 8017202:	60f8      	str	r0, [r7, #12]
 8017204:	60b9      	str	r1, [r7, #8]
 8017206:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d00a      	beq.n	8017224 <tcp_route+0x28>
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	7a1b      	ldrb	r3, [r3, #8]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d006      	beq.n	8017224 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	7a1b      	ldrb	r3, [r3, #8]
 801721a:	4618      	mov	r0, r3
 801721c:	f7fb f908 	bl	8012430 <netif_get_by_index>
 8017220:	4603      	mov	r3, r0
 8017222:	e003      	b.n	801722c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017224:	6878      	ldr	r0, [r7, #4]
 8017226:	f003 fe35 	bl	801ae94 <ip4_route>
 801722a:	4603      	mov	r3, r0
  }
}
 801722c:	4618      	mov	r0, r3
 801722e:	3710      	adds	r7, #16
 8017230:	46bd      	mov	sp, r7
 8017232:	bd80      	pop	{r7, pc}

08017234 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8017234:	b590      	push	{r4, r7, lr}
 8017236:	b087      	sub	sp, #28
 8017238:	af00      	add	r7, sp, #0
 801723a:	60f8      	str	r0, [r7, #12]
 801723c:	60b9      	str	r1, [r7, #8]
 801723e:	603b      	str	r3, [r7, #0]
 8017240:	4613      	mov	r3, r2
 8017242:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d105      	bne.n	8017256 <tcp_create_segment+0x22>
 801724a:	4b44      	ldr	r3, [pc, #272]	; (801735c <tcp_create_segment+0x128>)
 801724c:	22a3      	movs	r2, #163	; 0xa3
 801724e:	4944      	ldr	r1, [pc, #272]	; (8017360 <tcp_create_segment+0x12c>)
 8017250:	4844      	ldr	r0, [pc, #272]	; (8017364 <tcp_create_segment+0x130>)
 8017252:	f005 fc2f 	bl	801cab4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8017256:	68bb      	ldr	r3, [r7, #8]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d105      	bne.n	8017268 <tcp_create_segment+0x34>
 801725c:	4b3f      	ldr	r3, [pc, #252]	; (801735c <tcp_create_segment+0x128>)
 801725e:	22a4      	movs	r2, #164	; 0xa4
 8017260:	4941      	ldr	r1, [pc, #260]	; (8017368 <tcp_create_segment+0x134>)
 8017262:	4840      	ldr	r0, [pc, #256]	; (8017364 <tcp_create_segment+0x130>)
 8017264:	f005 fc26 	bl	801cab4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017268:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801726c:	009b      	lsls	r3, r3, #2
 801726e:	b2db      	uxtb	r3, r3
 8017270:	f003 0304 	and.w	r3, r3, #4
 8017274:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8017276:	2003      	movs	r0, #3
 8017278:	f7fa fdd6 	bl	8011e28 <memp_malloc>
 801727c:	6138      	str	r0, [r7, #16]
 801727e:	693b      	ldr	r3, [r7, #16]
 8017280:	2b00      	cmp	r3, #0
 8017282:	d104      	bne.n	801728e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8017284:	68b8      	ldr	r0, [r7, #8]
 8017286:	f7fb fc61 	bl	8012b4c <pbuf_free>
    return NULL;
 801728a:	2300      	movs	r3, #0
 801728c:	e061      	b.n	8017352 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801728e:	693b      	ldr	r3, [r7, #16]
 8017290:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017294:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8017296:	693b      	ldr	r3, [r7, #16]
 8017298:	2200      	movs	r2, #0
 801729a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801729c:	693b      	ldr	r3, [r7, #16]
 801729e:	68ba      	ldr	r2, [r7, #8]
 80172a0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80172a2:	68bb      	ldr	r3, [r7, #8]
 80172a4:	891a      	ldrh	r2, [r3, #8]
 80172a6:	7dfb      	ldrb	r3, [r7, #23]
 80172a8:	b29b      	uxth	r3, r3
 80172aa:	429a      	cmp	r2, r3
 80172ac:	d205      	bcs.n	80172ba <tcp_create_segment+0x86>
 80172ae:	4b2b      	ldr	r3, [pc, #172]	; (801735c <tcp_create_segment+0x128>)
 80172b0:	22b0      	movs	r2, #176	; 0xb0
 80172b2:	492e      	ldr	r1, [pc, #184]	; (801736c <tcp_create_segment+0x138>)
 80172b4:	482b      	ldr	r0, [pc, #172]	; (8017364 <tcp_create_segment+0x130>)
 80172b6:	f005 fbfd 	bl	801cab4 <iprintf>
  seg->len = p->tot_len - optlen;
 80172ba:	68bb      	ldr	r3, [r7, #8]
 80172bc:	891a      	ldrh	r2, [r3, #8]
 80172be:	7dfb      	ldrb	r3, [r7, #23]
 80172c0:	b29b      	uxth	r3, r3
 80172c2:	1ad3      	subs	r3, r2, r3
 80172c4:	b29a      	uxth	r2, r3
 80172c6:	693b      	ldr	r3, [r7, #16]
 80172c8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80172ca:	2114      	movs	r1, #20
 80172cc:	68b8      	ldr	r0, [r7, #8]
 80172ce:	f7fb fba7 	bl	8012a20 <pbuf_add_header>
 80172d2:	4603      	mov	r3, r0
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d004      	beq.n	80172e2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80172d8:	6938      	ldr	r0, [r7, #16]
 80172da:	f7fd f800 	bl	80142de <tcp_seg_free>
    return NULL;
 80172de:	2300      	movs	r3, #0
 80172e0:	e037      	b.n	8017352 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80172e2:	693b      	ldr	r3, [r7, #16]
 80172e4:	685b      	ldr	r3, [r3, #4]
 80172e6:	685a      	ldr	r2, [r3, #4]
 80172e8:	693b      	ldr	r3, [r7, #16]
 80172ea:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	8ada      	ldrh	r2, [r3, #22]
 80172f0:	693b      	ldr	r3, [r7, #16]
 80172f2:	68dc      	ldr	r4, [r3, #12]
 80172f4:	4610      	mov	r0, r2
 80172f6:	f7fa f8e1 	bl	80114bc <lwip_htons>
 80172fa:	4603      	mov	r3, r0
 80172fc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	8b1a      	ldrh	r2, [r3, #24]
 8017302:	693b      	ldr	r3, [r7, #16]
 8017304:	68dc      	ldr	r4, [r3, #12]
 8017306:	4610      	mov	r0, r2
 8017308:	f7fa f8d8 	bl	80114bc <lwip_htons>
 801730c:	4603      	mov	r3, r0
 801730e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017310:	693b      	ldr	r3, [r7, #16]
 8017312:	68dc      	ldr	r4, [r3, #12]
 8017314:	6838      	ldr	r0, [r7, #0]
 8017316:	f7fa f8e6 	bl	80114e6 <lwip_htonl>
 801731a:	4603      	mov	r3, r0
 801731c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801731e:	7dfb      	ldrb	r3, [r7, #23]
 8017320:	089b      	lsrs	r3, r3, #2
 8017322:	b2db      	uxtb	r3, r3
 8017324:	b29b      	uxth	r3, r3
 8017326:	3305      	adds	r3, #5
 8017328:	b29b      	uxth	r3, r3
 801732a:	031b      	lsls	r3, r3, #12
 801732c:	b29a      	uxth	r2, r3
 801732e:	79fb      	ldrb	r3, [r7, #7]
 8017330:	b29b      	uxth	r3, r3
 8017332:	4313      	orrs	r3, r2
 8017334:	b29a      	uxth	r2, r3
 8017336:	693b      	ldr	r3, [r7, #16]
 8017338:	68dc      	ldr	r4, [r3, #12]
 801733a:	4610      	mov	r0, r2
 801733c:	f7fa f8be 	bl	80114bc <lwip_htons>
 8017340:	4603      	mov	r3, r0
 8017342:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8017344:	693b      	ldr	r3, [r7, #16]
 8017346:	68db      	ldr	r3, [r3, #12]
 8017348:	2200      	movs	r2, #0
 801734a:	749a      	strb	r2, [r3, #18]
 801734c:	2200      	movs	r2, #0
 801734e:	74da      	strb	r2, [r3, #19]
  return seg;
 8017350:	693b      	ldr	r3, [r7, #16]
}
 8017352:	4618      	mov	r0, r3
 8017354:	371c      	adds	r7, #28
 8017356:	46bd      	mov	sp, r7
 8017358:	bd90      	pop	{r4, r7, pc}
 801735a:	bf00      	nop
 801735c:	08020288 	.word	0x08020288
 8017360:	080202bc 	.word	0x080202bc
 8017364:	080202dc 	.word	0x080202dc
 8017368:	08020304 	.word	0x08020304
 801736c:	08020328 	.word	0x08020328

08017370 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b086      	sub	sp, #24
 8017374:	af00      	add	r7, sp, #0
 8017376:	607b      	str	r3, [r7, #4]
 8017378:	4603      	mov	r3, r0
 801737a:	73fb      	strb	r3, [r7, #15]
 801737c:	460b      	mov	r3, r1
 801737e:	81bb      	strh	r3, [r7, #12]
 8017380:	4613      	mov	r3, r2
 8017382:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8017384:	89bb      	ldrh	r3, [r7, #12]
 8017386:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d105      	bne.n	801739a <tcp_pbuf_prealloc+0x2a>
 801738e:	4b30      	ldr	r3, [pc, #192]	; (8017450 <tcp_pbuf_prealloc+0xe0>)
 8017390:	22e8      	movs	r2, #232	; 0xe8
 8017392:	4930      	ldr	r1, [pc, #192]	; (8017454 <tcp_pbuf_prealloc+0xe4>)
 8017394:	4830      	ldr	r0, [pc, #192]	; (8017458 <tcp_pbuf_prealloc+0xe8>)
 8017396:	f005 fb8d 	bl	801cab4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801739a:	6a3b      	ldr	r3, [r7, #32]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d105      	bne.n	80173ac <tcp_pbuf_prealloc+0x3c>
 80173a0:	4b2b      	ldr	r3, [pc, #172]	; (8017450 <tcp_pbuf_prealloc+0xe0>)
 80173a2:	22e9      	movs	r2, #233	; 0xe9
 80173a4:	492d      	ldr	r1, [pc, #180]	; (801745c <tcp_pbuf_prealloc+0xec>)
 80173a6:	482c      	ldr	r0, [pc, #176]	; (8017458 <tcp_pbuf_prealloc+0xe8>)
 80173a8:	f005 fb84 	bl	801cab4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80173ac:	89ba      	ldrh	r2, [r7, #12]
 80173ae:	897b      	ldrh	r3, [r7, #10]
 80173b0:	429a      	cmp	r2, r3
 80173b2:	d221      	bcs.n	80173f8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80173b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80173b8:	f003 0302 	and.w	r3, r3, #2
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d111      	bne.n	80173e4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80173c0:	6a3b      	ldr	r3, [r7, #32]
 80173c2:	8b5b      	ldrh	r3, [r3, #26]
 80173c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d115      	bne.n	80173f8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80173cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d007      	beq.n	80173e4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80173d4:	6a3b      	ldr	r3, [r7, #32]
 80173d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d103      	bne.n	80173e4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80173dc:	6a3b      	ldr	r3, [r7, #32]
 80173de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d009      	beq.n	80173f8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80173e4:	89bb      	ldrh	r3, [r7, #12]
 80173e6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80173ea:	f023 0203 	bic.w	r2, r3, #3
 80173ee:	897b      	ldrh	r3, [r7, #10]
 80173f0:	4293      	cmp	r3, r2
 80173f2:	bf28      	it	cs
 80173f4:	4613      	movcs	r3, r2
 80173f6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80173f8:	8af9      	ldrh	r1, [r7, #22]
 80173fa:	7bfb      	ldrb	r3, [r7, #15]
 80173fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017400:	4618      	mov	r0, r3
 8017402:	f7fb f8bf 	bl	8012584 <pbuf_alloc>
 8017406:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017408:	693b      	ldr	r3, [r7, #16]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d101      	bne.n	8017412 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801740e:	2300      	movs	r3, #0
 8017410:	e019      	b.n	8017446 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8017412:	693b      	ldr	r3, [r7, #16]
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d006      	beq.n	8017428 <tcp_pbuf_prealloc+0xb8>
 801741a:	4b0d      	ldr	r3, [pc, #52]	; (8017450 <tcp_pbuf_prealloc+0xe0>)
 801741c:	f240 120b 	movw	r2, #267	; 0x10b
 8017420:	490f      	ldr	r1, [pc, #60]	; (8017460 <tcp_pbuf_prealloc+0xf0>)
 8017422:	480d      	ldr	r0, [pc, #52]	; (8017458 <tcp_pbuf_prealloc+0xe8>)
 8017424:	f005 fb46 	bl	801cab4 <iprintf>
  *oversize = p->len - length;
 8017428:	693b      	ldr	r3, [r7, #16]
 801742a:	895a      	ldrh	r2, [r3, #10]
 801742c:	89bb      	ldrh	r3, [r7, #12]
 801742e:	1ad3      	subs	r3, r2, r3
 8017430:	b29a      	uxth	r2, r3
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8017436:	693b      	ldr	r3, [r7, #16]
 8017438:	89ba      	ldrh	r2, [r7, #12]
 801743a:	811a      	strh	r2, [r3, #8]
 801743c:	693b      	ldr	r3, [r7, #16]
 801743e:	891a      	ldrh	r2, [r3, #8]
 8017440:	693b      	ldr	r3, [r7, #16]
 8017442:	815a      	strh	r2, [r3, #10]
  return p;
 8017444:	693b      	ldr	r3, [r7, #16]
}
 8017446:	4618      	mov	r0, r3
 8017448:	3718      	adds	r7, #24
 801744a:	46bd      	mov	sp, r7
 801744c:	bd80      	pop	{r7, pc}
 801744e:	bf00      	nop
 8017450:	08020288 	.word	0x08020288
 8017454:	08020340 	.word	0x08020340
 8017458:	080202dc 	.word	0x080202dc
 801745c:	08020364 	.word	0x08020364
 8017460:	08020384 	.word	0x08020384

08017464 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8017464:	b580      	push	{r7, lr}
 8017466:	b082      	sub	sp, #8
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
 801746c:	460b      	mov	r3, r1
 801746e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d106      	bne.n	8017484 <tcp_write_checks+0x20>
 8017476:	4b33      	ldr	r3, [pc, #204]	; (8017544 <tcp_write_checks+0xe0>)
 8017478:	f240 1233 	movw	r2, #307	; 0x133
 801747c:	4932      	ldr	r1, [pc, #200]	; (8017548 <tcp_write_checks+0xe4>)
 801747e:	4833      	ldr	r0, [pc, #204]	; (801754c <tcp_write_checks+0xe8>)
 8017480:	f005 fb18 	bl	801cab4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	7d1b      	ldrb	r3, [r3, #20]
 8017488:	2b04      	cmp	r3, #4
 801748a:	d00e      	beq.n	80174aa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017490:	2b07      	cmp	r3, #7
 8017492:	d00a      	beq.n	80174aa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017498:	2b02      	cmp	r3, #2
 801749a:	d006      	beq.n	80174aa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80174a0:	2b03      	cmp	r3, #3
 80174a2:	d002      	beq.n	80174aa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80174a4:	f06f 030a 	mvn.w	r3, #10
 80174a8:	e048      	b.n	801753c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80174aa:	887b      	ldrh	r3, [r7, #2]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d101      	bne.n	80174b4 <tcp_write_checks+0x50>
    return ERR_OK;
 80174b0:	2300      	movs	r3, #0
 80174b2:	e043      	b.n	801753c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80174ba:	887a      	ldrh	r2, [r7, #2]
 80174bc:	429a      	cmp	r2, r3
 80174be:	d909      	bls.n	80174d4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	8b5b      	ldrh	r3, [r3, #26]
 80174c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174c8:	b29a      	uxth	r2, r3
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80174ce:	f04f 33ff 	mov.w	r3, #4294967295
 80174d2:	e033      	b.n	801753c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80174da:	2b08      	cmp	r3, #8
 80174dc:	d909      	bls.n	80174f2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	8b5b      	ldrh	r3, [r3, #26]
 80174e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174e6:	b29a      	uxth	r2, r3
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80174ec:	f04f 33ff 	mov.w	r3, #4294967295
 80174f0:	e024      	b.n	801753c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d00f      	beq.n	801751c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017500:	2b00      	cmp	r3, #0
 8017502:	d11a      	bne.n	801753a <tcp_write_checks+0xd6>
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017508:	2b00      	cmp	r3, #0
 801750a:	d116      	bne.n	801753a <tcp_write_checks+0xd6>
 801750c:	4b0d      	ldr	r3, [pc, #52]	; (8017544 <tcp_write_checks+0xe0>)
 801750e:	f240 1255 	movw	r2, #341	; 0x155
 8017512:	490f      	ldr	r1, [pc, #60]	; (8017550 <tcp_write_checks+0xec>)
 8017514:	480d      	ldr	r0, [pc, #52]	; (801754c <tcp_write_checks+0xe8>)
 8017516:	f005 facd 	bl	801cab4 <iprintf>
 801751a:	e00e      	b.n	801753a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017520:	2b00      	cmp	r3, #0
 8017522:	d103      	bne.n	801752c <tcp_write_checks+0xc8>
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017528:	2b00      	cmp	r3, #0
 801752a:	d006      	beq.n	801753a <tcp_write_checks+0xd6>
 801752c:	4b05      	ldr	r3, [pc, #20]	; (8017544 <tcp_write_checks+0xe0>)
 801752e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8017532:	4908      	ldr	r1, [pc, #32]	; (8017554 <tcp_write_checks+0xf0>)
 8017534:	4805      	ldr	r0, [pc, #20]	; (801754c <tcp_write_checks+0xe8>)
 8017536:	f005 fabd 	bl	801cab4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801753a:	2300      	movs	r3, #0
}
 801753c:	4618      	mov	r0, r3
 801753e:	3708      	adds	r7, #8
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}
 8017544:	08020288 	.word	0x08020288
 8017548:	08020398 	.word	0x08020398
 801754c:	080202dc 	.word	0x080202dc
 8017550:	080203b8 	.word	0x080203b8
 8017554:	080203f4 	.word	0x080203f4

08017558 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8017558:	b590      	push	{r4, r7, lr}
 801755a:	b09b      	sub	sp, #108	; 0x6c
 801755c:	af04      	add	r7, sp, #16
 801755e:	60f8      	str	r0, [r7, #12]
 8017560:	60b9      	str	r1, [r7, #8]
 8017562:	4611      	mov	r1, r2
 8017564:	461a      	mov	r2, r3
 8017566:	460b      	mov	r3, r1
 8017568:	80fb      	strh	r3, [r7, #6]
 801756a:	4613      	mov	r3, r2
 801756c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801756e:	2300      	movs	r3, #0
 8017570:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8017572:	2300      	movs	r3, #0
 8017574:	653b      	str	r3, [r7, #80]	; 0x50
 8017576:	2300      	movs	r3, #0
 8017578:	64fb      	str	r3, [r7, #76]	; 0x4c
 801757a:	2300      	movs	r3, #0
 801757c:	64bb      	str	r3, [r7, #72]	; 0x48
 801757e:	2300      	movs	r3, #0
 8017580:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8017582:	2300      	movs	r3, #0
 8017584:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017588:	2300      	movs	r3, #0
 801758a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801758e:	2300      	movs	r3, #0
 8017590:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8017592:	2300      	movs	r3, #0
 8017594:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8017596:	2300      	movs	r3, #0
 8017598:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d109      	bne.n	80175b4 <tcp_write+0x5c>
 80175a0:	4ba4      	ldr	r3, [pc, #656]	; (8017834 <tcp_write+0x2dc>)
 80175a2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80175a6:	49a4      	ldr	r1, [pc, #656]	; (8017838 <tcp_write+0x2e0>)
 80175a8:	48a4      	ldr	r0, [pc, #656]	; (801783c <tcp_write+0x2e4>)
 80175aa:	f005 fa83 	bl	801cab4 <iprintf>
 80175ae:	f06f 030f 	mvn.w	r3, #15
 80175b2:	e32a      	b.n	8017c0a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80175ba:	085b      	lsrs	r3, r3, #1
 80175bc:	b29a      	uxth	r2, r3
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80175c2:	4293      	cmp	r3, r2
 80175c4:	bf28      	it	cs
 80175c6:	4613      	movcs	r3, r2
 80175c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80175ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d102      	bne.n	80175d6 <tcp_write+0x7e>
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80175d4:	e000      	b.n	80175d8 <tcp_write+0x80>
 80175d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80175da:	68bb      	ldr	r3, [r7, #8]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d109      	bne.n	80175f4 <tcp_write+0x9c>
 80175e0:	4b94      	ldr	r3, [pc, #592]	; (8017834 <tcp_write+0x2dc>)
 80175e2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80175e6:	4996      	ldr	r1, [pc, #600]	; (8017840 <tcp_write+0x2e8>)
 80175e8:	4894      	ldr	r0, [pc, #592]	; (801783c <tcp_write+0x2e4>)
 80175ea:	f005 fa63 	bl	801cab4 <iprintf>
 80175ee:	f06f 030f 	mvn.w	r3, #15
 80175f2:	e30a      	b.n	8017c0a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80175f4:	88fb      	ldrh	r3, [r7, #6]
 80175f6:	4619      	mov	r1, r3
 80175f8:	68f8      	ldr	r0, [r7, #12]
 80175fa:	f7ff ff33 	bl	8017464 <tcp_write_checks>
 80175fe:	4603      	mov	r3, r0
 8017600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8017604:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017608:	2b00      	cmp	r3, #0
 801760a:	d002      	beq.n	8017612 <tcp_write+0xba>
    return err;
 801760c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017610:	e2fb      	b.n	8017c0a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017618:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801761c:	2300      	movs	r3, #0
 801761e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017626:	2b00      	cmp	r3, #0
 8017628:	f000 80f6 	beq.w	8017818 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017630:	653b      	str	r3, [r7, #80]	; 0x50
 8017632:	e002      	b.n	801763a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8017634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801763a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d1f8      	bne.n	8017634 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8017642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017644:	7a9b      	ldrb	r3, [r3, #10]
 8017646:	009b      	lsls	r3, r3, #2
 8017648:	b29b      	uxth	r3, r3
 801764a:	f003 0304 	and.w	r3, r3, #4
 801764e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017650:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017654:	891b      	ldrh	r3, [r3, #8]
 8017656:	4619      	mov	r1, r3
 8017658:	8c3b      	ldrh	r3, [r7, #32]
 801765a:	440b      	add	r3, r1
 801765c:	429a      	cmp	r2, r3
 801765e:	da06      	bge.n	801766e <tcp_write+0x116>
 8017660:	4b74      	ldr	r3, [pc, #464]	; (8017834 <tcp_write+0x2dc>)
 8017662:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017666:	4977      	ldr	r1, [pc, #476]	; (8017844 <tcp_write+0x2ec>)
 8017668:	4874      	ldr	r0, [pc, #464]	; (801783c <tcp_write+0x2e4>)
 801766a:	f005 fa23 	bl	801cab4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801766e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017670:	891a      	ldrh	r2, [r3, #8]
 8017672:	8c3b      	ldrh	r3, [r7, #32]
 8017674:	4413      	add	r3, r2
 8017676:	b29b      	uxth	r3, r3
 8017678:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801767a:	1ad3      	subs	r3, r2, r3
 801767c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017684:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017686:	8a7b      	ldrh	r3, [r7, #18]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d026      	beq.n	80176da <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801768c:	8a7b      	ldrh	r3, [r7, #18]
 801768e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017690:	429a      	cmp	r2, r3
 8017692:	d206      	bcs.n	80176a2 <tcp_write+0x14a>
 8017694:	4b67      	ldr	r3, [pc, #412]	; (8017834 <tcp_write+0x2dc>)
 8017696:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801769a:	496b      	ldr	r1, [pc, #428]	; (8017848 <tcp_write+0x2f0>)
 801769c:	4867      	ldr	r0, [pc, #412]	; (801783c <tcp_write+0x2e4>)
 801769e:	f005 fa09 	bl	801cab4 <iprintf>
      seg = last_unsent;
 80176a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176a4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80176a6:	8a7b      	ldrh	r3, [r7, #18]
 80176a8:	88fa      	ldrh	r2, [r7, #6]
 80176aa:	4293      	cmp	r3, r2
 80176ac:	bf28      	it	cs
 80176ae:	4613      	movcs	r3, r2
 80176b0:	b29b      	uxth	r3, r3
 80176b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80176b4:	4293      	cmp	r3, r2
 80176b6:	bf28      	it	cs
 80176b8:	4613      	movcs	r3, r2
 80176ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80176bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80176c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80176c2:	4413      	add	r3, r2
 80176c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80176c8:	8a7a      	ldrh	r2, [r7, #18]
 80176ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80176cc:	1ad3      	subs	r3, r2, r3
 80176ce:	b29b      	uxth	r3, r3
 80176d0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80176d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80176d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80176d6:	1ad3      	subs	r3, r2, r3
 80176d8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80176da:	8a7b      	ldrh	r3, [r7, #18]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d00b      	beq.n	80176f8 <tcp_write+0x1a0>
 80176e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80176e4:	88fb      	ldrh	r3, [r7, #6]
 80176e6:	429a      	cmp	r2, r3
 80176e8:	d006      	beq.n	80176f8 <tcp_write+0x1a0>
 80176ea:	4b52      	ldr	r3, [pc, #328]	; (8017834 <tcp_write+0x2dc>)
 80176ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80176f0:	4956      	ldr	r1, [pc, #344]	; (801784c <tcp_write+0x2f4>)
 80176f2:	4852      	ldr	r0, [pc, #328]	; (801783c <tcp_write+0x2e4>)
 80176f4:	f005 f9de 	bl	801cab4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80176f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80176fc:	88fb      	ldrh	r3, [r7, #6]
 80176fe:	429a      	cmp	r2, r3
 8017700:	f080 8167 	bcs.w	80179d2 <tcp_write+0x47a>
 8017704:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017706:	2b00      	cmp	r3, #0
 8017708:	f000 8163 	beq.w	80179d2 <tcp_write+0x47a>
 801770c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801770e:	891b      	ldrh	r3, [r3, #8]
 8017710:	2b00      	cmp	r3, #0
 8017712:	f000 815e 	beq.w	80179d2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017716:	88fa      	ldrh	r2, [r7, #6]
 8017718:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801771c:	1ad2      	subs	r2, r2, r3
 801771e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017720:	4293      	cmp	r3, r2
 8017722:	bfa8      	it	ge
 8017724:	4613      	movge	r3, r2
 8017726:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801772a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801772c:	797b      	ldrb	r3, [r7, #5]
 801772e:	f003 0301 	and.w	r3, r3, #1
 8017732:	2b00      	cmp	r3, #0
 8017734:	d027      	beq.n	8017786 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8017736:	f107 0012 	add.w	r0, r7, #18
 801773a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801773c:	8bf9      	ldrh	r1, [r7, #30]
 801773e:	2301      	movs	r3, #1
 8017740:	9302      	str	r3, [sp, #8]
 8017742:	797b      	ldrb	r3, [r7, #5]
 8017744:	9301      	str	r3, [sp, #4]
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	9300      	str	r3, [sp, #0]
 801774a:	4603      	mov	r3, r0
 801774c:	2000      	movs	r0, #0
 801774e:	f7ff fe0f 	bl	8017370 <tcp_pbuf_prealloc>
 8017752:	6578      	str	r0, [r7, #84]	; 0x54
 8017754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017756:	2b00      	cmp	r3, #0
 8017758:	f000 8225 	beq.w	8017ba6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801775c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801775e:	6858      	ldr	r0, [r3, #4]
 8017760:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017764:	68ba      	ldr	r2, [r7, #8]
 8017766:	4413      	add	r3, r2
 8017768:	8bfa      	ldrh	r2, [r7, #30]
 801776a:	4619      	mov	r1, r3
 801776c:	f005 f892 	bl	801c894 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017770:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017772:	f7fb fa79 	bl	8012c68 <pbuf_clen>
 8017776:	4603      	mov	r3, r0
 8017778:	461a      	mov	r2, r3
 801777a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801777e:	4413      	add	r3, r2
 8017780:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017784:	e041      	b.n	801780a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017788:	685b      	ldr	r3, [r3, #4]
 801778a:	637b      	str	r3, [r7, #52]	; 0x34
 801778c:	e002      	b.n	8017794 <tcp_write+0x23c>
 801778e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	637b      	str	r3, [r7, #52]	; 0x34
 8017794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d1f8      	bne.n	801778e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801779e:	7b1b      	ldrb	r3, [r3, #12]
 80177a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d115      	bne.n	80177d4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80177a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177aa:	685b      	ldr	r3, [r3, #4]
 80177ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80177ae:	8952      	ldrh	r2, [r2, #10]
 80177b0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80177b2:	68ba      	ldr	r2, [r7, #8]
 80177b4:	429a      	cmp	r2, r3
 80177b6:	d10d      	bne.n	80177d4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80177b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d006      	beq.n	80177ce <tcp_write+0x276>
 80177c0:	4b1c      	ldr	r3, [pc, #112]	; (8017834 <tcp_write+0x2dc>)
 80177c2:	f240 2231 	movw	r2, #561	; 0x231
 80177c6:	4922      	ldr	r1, [pc, #136]	; (8017850 <tcp_write+0x2f8>)
 80177c8:	481c      	ldr	r0, [pc, #112]	; (801783c <tcp_write+0x2e4>)
 80177ca:	f005 f973 	bl	801cab4 <iprintf>
          extendlen = seglen;
 80177ce:	8bfb      	ldrh	r3, [r7, #30]
 80177d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80177d2:	e01a      	b.n	801780a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80177d4:	8bfb      	ldrh	r3, [r7, #30]
 80177d6:	2201      	movs	r2, #1
 80177d8:	4619      	mov	r1, r3
 80177da:	2000      	movs	r0, #0
 80177dc:	f7fa fed2 	bl	8012584 <pbuf_alloc>
 80177e0:	6578      	str	r0, [r7, #84]	; 0x54
 80177e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	f000 81e0 	beq.w	8017baa <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80177ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80177ee:	68ba      	ldr	r2, [r7, #8]
 80177f0:	441a      	add	r2, r3
 80177f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177f4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80177f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80177f8:	f7fb fa36 	bl	8012c68 <pbuf_clen>
 80177fc:	4603      	mov	r3, r0
 80177fe:	461a      	mov	r2, r3
 8017800:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017804:	4413      	add	r3, r2
 8017806:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801780a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801780e:	8bfb      	ldrh	r3, [r7, #30]
 8017810:	4413      	add	r3, r2
 8017812:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017816:	e0dc      	b.n	80179d2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801781e:	2b00      	cmp	r3, #0
 8017820:	f000 80d7 	beq.w	80179d2 <tcp_write+0x47a>
 8017824:	4b03      	ldr	r3, [pc, #12]	; (8017834 <tcp_write+0x2dc>)
 8017826:	f240 224a 	movw	r2, #586	; 0x24a
 801782a:	490a      	ldr	r1, [pc, #40]	; (8017854 <tcp_write+0x2fc>)
 801782c:	4803      	ldr	r0, [pc, #12]	; (801783c <tcp_write+0x2e4>)
 801782e:	f005 f941 	bl	801cab4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017832:	e0ce      	b.n	80179d2 <tcp_write+0x47a>
 8017834:	08020288 	.word	0x08020288
 8017838:	08020428 	.word	0x08020428
 801783c:	080202dc 	.word	0x080202dc
 8017840:	08020440 	.word	0x08020440
 8017844:	08020474 	.word	0x08020474
 8017848:	0802048c 	.word	0x0802048c
 801784c:	080204ac 	.word	0x080204ac
 8017850:	080204cc 	.word	0x080204cc
 8017854:	080204f8 	.word	0x080204f8
    struct pbuf *p;
    u16_t left = len - pos;
 8017858:	88fa      	ldrh	r2, [r7, #6]
 801785a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801785e:	1ad3      	subs	r3, r2, r3
 8017860:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017862:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017866:	b29b      	uxth	r3, r3
 8017868:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801786a:	1ad3      	subs	r3, r2, r3
 801786c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801786e:	8b7a      	ldrh	r2, [r7, #26]
 8017870:	8bbb      	ldrh	r3, [r7, #28]
 8017872:	4293      	cmp	r3, r2
 8017874:	bf28      	it	cs
 8017876:	4613      	movcs	r3, r2
 8017878:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801787a:	797b      	ldrb	r3, [r7, #5]
 801787c:	f003 0301 	and.w	r3, r3, #1
 8017880:	2b00      	cmp	r3, #0
 8017882:	d036      	beq.n	80178f2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017884:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017888:	b29a      	uxth	r2, r3
 801788a:	8b3b      	ldrh	r3, [r7, #24]
 801788c:	4413      	add	r3, r2
 801788e:	b299      	uxth	r1, r3
 8017890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017892:	2b00      	cmp	r3, #0
 8017894:	bf0c      	ite	eq
 8017896:	2301      	moveq	r3, #1
 8017898:	2300      	movne	r3, #0
 801789a:	b2db      	uxtb	r3, r3
 801789c:	f107 0012 	add.w	r0, r7, #18
 80178a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80178a2:	9302      	str	r3, [sp, #8]
 80178a4:	797b      	ldrb	r3, [r7, #5]
 80178a6:	9301      	str	r3, [sp, #4]
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	9300      	str	r3, [sp, #0]
 80178ac:	4603      	mov	r3, r0
 80178ae:	2036      	movs	r0, #54	; 0x36
 80178b0:	f7ff fd5e 	bl	8017370 <tcp_pbuf_prealloc>
 80178b4:	6338      	str	r0, [r7, #48]	; 0x30
 80178b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	f000 8178 	beq.w	8017bae <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80178be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178c0:	895b      	ldrh	r3, [r3, #10]
 80178c2:	8b3a      	ldrh	r2, [r7, #24]
 80178c4:	429a      	cmp	r2, r3
 80178c6:	d906      	bls.n	80178d6 <tcp_write+0x37e>
 80178c8:	4b8c      	ldr	r3, [pc, #560]	; (8017afc <tcp_write+0x5a4>)
 80178ca:	f240 2266 	movw	r2, #614	; 0x266
 80178ce:	498c      	ldr	r1, [pc, #560]	; (8017b00 <tcp_write+0x5a8>)
 80178d0:	488c      	ldr	r0, [pc, #560]	; (8017b04 <tcp_write+0x5ac>)
 80178d2:	f005 f8ef 	bl	801cab4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80178d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178d8:	685a      	ldr	r2, [r3, #4]
 80178da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80178de:	18d0      	adds	r0, r2, r3
 80178e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80178e4:	68ba      	ldr	r2, [r7, #8]
 80178e6:	4413      	add	r3, r2
 80178e8:	8b3a      	ldrh	r2, [r7, #24]
 80178ea:	4619      	mov	r1, r3
 80178ec:	f004 ffd2 	bl	801c894 <memcpy>
 80178f0:	e02f      	b.n	8017952 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80178f2:	8a7b      	ldrh	r3, [r7, #18]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d006      	beq.n	8017906 <tcp_write+0x3ae>
 80178f8:	4b80      	ldr	r3, [pc, #512]	; (8017afc <tcp_write+0x5a4>)
 80178fa:	f240 2271 	movw	r2, #625	; 0x271
 80178fe:	4982      	ldr	r1, [pc, #520]	; (8017b08 <tcp_write+0x5b0>)
 8017900:	4880      	ldr	r0, [pc, #512]	; (8017b04 <tcp_write+0x5ac>)
 8017902:	f005 f8d7 	bl	801cab4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017906:	8b3b      	ldrh	r3, [r7, #24]
 8017908:	2201      	movs	r2, #1
 801790a:	4619      	mov	r1, r3
 801790c:	2036      	movs	r0, #54	; 0x36
 801790e:	f7fa fe39 	bl	8012584 <pbuf_alloc>
 8017912:	6178      	str	r0, [r7, #20]
 8017914:	697b      	ldr	r3, [r7, #20]
 8017916:	2b00      	cmp	r3, #0
 8017918:	f000 814b 	beq.w	8017bb2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801791c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017920:	68ba      	ldr	r2, [r7, #8]
 8017922:	441a      	add	r2, r3
 8017924:	697b      	ldr	r3, [r7, #20]
 8017926:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017928:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801792c:	b29b      	uxth	r3, r3
 801792e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017932:	4619      	mov	r1, r3
 8017934:	2036      	movs	r0, #54	; 0x36
 8017936:	f7fa fe25 	bl	8012584 <pbuf_alloc>
 801793a:	6338      	str	r0, [r7, #48]	; 0x30
 801793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801793e:	2b00      	cmp	r3, #0
 8017940:	d103      	bne.n	801794a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8017942:	6978      	ldr	r0, [r7, #20]
 8017944:	f7fb f902 	bl	8012b4c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017948:	e136      	b.n	8017bb8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801794a:	6979      	ldr	r1, [r7, #20]
 801794c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801794e:	f7fb f9cb 	bl	8012ce8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8017952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017954:	f7fb f988 	bl	8012c68 <pbuf_clen>
 8017958:	4603      	mov	r3, r0
 801795a:	461a      	mov	r2, r3
 801795c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017960:	4413      	add	r3, r2
 8017962:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017966:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801796a:	2b09      	cmp	r3, #9
 801796c:	d903      	bls.n	8017976 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801796e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017970:	f7fb f8ec 	bl	8012b4c <pbuf_free>
      goto memerr;
 8017974:	e120      	b.n	8017bb8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801797a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801797e:	441a      	add	r2, r3
 8017980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017984:	9300      	str	r3, [sp, #0]
 8017986:	4613      	mov	r3, r2
 8017988:	2200      	movs	r2, #0
 801798a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801798c:	68f8      	ldr	r0, [r7, #12]
 801798e:	f7ff fc51 	bl	8017234 <tcp_create_segment>
 8017992:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017996:	2b00      	cmp	r3, #0
 8017998:	f000 810d 	beq.w	8017bb6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801799c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d102      	bne.n	80179a8 <tcp_write+0x450>
      queue = seg;
 80179a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80179a4:	647b      	str	r3, [r7, #68]	; 0x44
 80179a6:	e00c      	b.n	80179c2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80179a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d106      	bne.n	80179bc <tcp_write+0x464>
 80179ae:	4b53      	ldr	r3, [pc, #332]	; (8017afc <tcp_write+0x5a4>)
 80179b0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80179b4:	4955      	ldr	r1, [pc, #340]	; (8017b0c <tcp_write+0x5b4>)
 80179b6:	4853      	ldr	r0, [pc, #332]	; (8017b04 <tcp_write+0x5ac>)
 80179b8:	f005 f87c 	bl	801cab4 <iprintf>
      prev_seg->next = seg;
 80179bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80179be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80179c0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80179c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80179c4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80179c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80179ca:	8b3b      	ldrh	r3, [r7, #24]
 80179cc:	4413      	add	r3, r2
 80179ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80179d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80179d6:	88fb      	ldrh	r3, [r7, #6]
 80179d8:	429a      	cmp	r2, r3
 80179da:	f4ff af3d 	bcc.w	8017858 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80179de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d02c      	beq.n	8017a3e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80179e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179e6:	685b      	ldr	r3, [r3, #4]
 80179e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179ea:	e01e      	b.n	8017a2a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80179ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179ee:	891a      	ldrh	r2, [r3, #8]
 80179f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80179f2:	4413      	add	r3, r2
 80179f4:	b29a      	uxth	r2, r3
 80179f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179f8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80179fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d110      	bne.n	8017a24 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a04:	685b      	ldr	r3, [r3, #4]
 8017a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a08:	8952      	ldrh	r2, [r2, #10]
 8017a0a:	4413      	add	r3, r2
 8017a0c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017a0e:	68b9      	ldr	r1, [r7, #8]
 8017a10:	4618      	mov	r0, r3
 8017a12:	f004 ff3f 	bl	801c894 <memcpy>
        p->len += oversize_used;
 8017a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a18:	895a      	ldrh	r2, [r3, #10]
 8017a1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017a1c:	4413      	add	r3, r2
 8017a1e:	b29a      	uxth	r2, r3
 8017a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a22:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d1dd      	bne.n	80179ec <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8017a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a32:	891a      	ldrh	r2, [r3, #8]
 8017a34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017a36:	4413      	add	r3, r2
 8017a38:	b29a      	uxth	r2, r3
 8017a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a3c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017a3e:	8a7a      	ldrh	r2, [r7, #18]
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d018      	beq.n	8017a7e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d106      	bne.n	8017a60 <tcp_write+0x508>
 8017a52:	4b2a      	ldr	r3, [pc, #168]	; (8017afc <tcp_write+0x5a4>)
 8017a54:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017a58:	492d      	ldr	r1, [pc, #180]	; (8017b10 <tcp_write+0x5b8>)
 8017a5a:	482a      	ldr	r0, [pc, #168]	; (8017b04 <tcp_write+0x5ac>)
 8017a5c:	f005 f82a 	bl	801cab4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a62:	685b      	ldr	r3, [r3, #4]
 8017a64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017a66:	4618      	mov	r0, r3
 8017a68:	f7fb f93e 	bl	8012ce8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a6e:	891a      	ldrh	r2, [r3, #8]
 8017a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a72:	891b      	ldrh	r3, [r3, #8]
 8017a74:	4413      	add	r3, r2
 8017a76:	b29a      	uxth	r2, r3
 8017a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a7a:	811a      	strh	r2, [r3, #8]
 8017a7c:	e037      	b.n	8017aee <tcp_write+0x596>
  } else if (extendlen > 0) {
 8017a7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d034      	beq.n	8017aee <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d003      	beq.n	8017a92 <tcp_write+0x53a>
 8017a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a8c:	685b      	ldr	r3, [r3, #4]
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d106      	bne.n	8017aa0 <tcp_write+0x548>
 8017a92:	4b1a      	ldr	r3, [pc, #104]	; (8017afc <tcp_write+0x5a4>)
 8017a94:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017a98:	491e      	ldr	r1, [pc, #120]	; (8017b14 <tcp_write+0x5bc>)
 8017a9a:	481a      	ldr	r0, [pc, #104]	; (8017b04 <tcp_write+0x5ac>)
 8017a9c:	f005 f80a 	bl	801cab4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017aa2:	685b      	ldr	r3, [r3, #4]
 8017aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8017aa6:	e009      	b.n	8017abc <tcp_write+0x564>
      p->tot_len += extendlen;
 8017aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aaa:	891a      	ldrh	r2, [r3, #8]
 8017aac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017aae:	4413      	add	r3, r2
 8017ab0:	b29a      	uxth	r2, r3
 8017ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ab4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8017abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d1f1      	bne.n	8017aa8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ac6:	891a      	ldrh	r2, [r3, #8]
 8017ac8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017aca:	4413      	add	r3, r2
 8017acc:	b29a      	uxth	r2, r3
 8017ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ad0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ad4:	895a      	ldrh	r2, [r3, #10]
 8017ad6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017ad8:	4413      	add	r3, r2
 8017ada:	b29a      	uxth	r2, r3
 8017adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ade:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ae2:	891a      	ldrh	r2, [r3, #8]
 8017ae4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017ae6:	4413      	add	r3, r2
 8017ae8:	b29a      	uxth	r2, r3
 8017aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017aec:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d111      	bne.n	8017b18 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017af8:	66da      	str	r2, [r3, #108]	; 0x6c
 8017afa:	e010      	b.n	8017b1e <tcp_write+0x5c6>
 8017afc:	08020288 	.word	0x08020288
 8017b00:	08020528 	.word	0x08020528
 8017b04:	080202dc 	.word	0x080202dc
 8017b08:	08020568 	.word	0x08020568
 8017b0c:	08020578 	.word	0x08020578
 8017b10:	0802058c 	.word	0x0802058c
 8017b14:	080205c4 	.word	0x080205c4
  } else {
    last_unsent->next = queue;
 8017b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017b1c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017b22:	88fb      	ldrh	r3, [r7, #6]
 8017b24:	441a      	add	r2, r3
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017b30:	88fb      	ldrh	r3, [r7, #6]
 8017b32:	1ad3      	subs	r3, r2, r3
 8017b34:	b29a      	uxth	r2, r3
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017b42:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d00e      	beq.n	8017b6e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d10a      	bne.n	8017b6e <tcp_write+0x616>
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d106      	bne.n	8017b6e <tcp_write+0x616>
 8017b60:	4b2c      	ldr	r3, [pc, #176]	; (8017c14 <tcp_write+0x6bc>)
 8017b62:	f240 3212 	movw	r2, #786	; 0x312
 8017b66:	492c      	ldr	r1, [pc, #176]	; (8017c18 <tcp_write+0x6c0>)
 8017b68:	482c      	ldr	r0, [pc, #176]	; (8017c1c <tcp_write+0x6c4>)
 8017b6a:	f004 ffa3 	bl	801cab4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d016      	beq.n	8017ba2 <tcp_write+0x64a>
 8017b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b76:	68db      	ldr	r3, [r3, #12]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d012      	beq.n	8017ba2 <tcp_write+0x64a>
 8017b7c:	797b      	ldrb	r3, [r7, #5]
 8017b7e:	f003 0302 	and.w	r3, r3, #2
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d10d      	bne.n	8017ba2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b88:	68db      	ldr	r3, [r3, #12]
 8017b8a:	899b      	ldrh	r3, [r3, #12]
 8017b8c:	b29c      	uxth	r4, r3
 8017b8e:	2008      	movs	r0, #8
 8017b90:	f7f9 fc94 	bl	80114bc <lwip_htons>
 8017b94:	4603      	mov	r3, r0
 8017b96:	461a      	mov	r2, r3
 8017b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b9a:	68db      	ldr	r3, [r3, #12]
 8017b9c:	4322      	orrs	r2, r4
 8017b9e:	b292      	uxth	r2, r2
 8017ba0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	e031      	b.n	8017c0a <tcp_write+0x6b2>
          goto memerr;
 8017ba6:	bf00      	nop
 8017ba8:	e006      	b.n	8017bb8 <tcp_write+0x660>
            goto memerr;
 8017baa:	bf00      	nop
 8017bac:	e004      	b.n	8017bb8 <tcp_write+0x660>
        goto memerr;
 8017bae:	bf00      	nop
 8017bb0:	e002      	b.n	8017bb8 <tcp_write+0x660>
        goto memerr;
 8017bb2:	bf00      	nop
 8017bb4:	e000      	b.n	8017bb8 <tcp_write+0x660>
      goto memerr;
 8017bb6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	8b5b      	ldrh	r3, [r3, #26]
 8017bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bc0:	b29a      	uxth	r2, r3
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d002      	beq.n	8017bd2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017bcc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017bce:	f7fa ffbd 	bl	8012b4c <pbuf_free>
  }
  if (queue != NULL) {
 8017bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d002      	beq.n	8017bde <tcp_write+0x686>
    tcp_segs_free(queue);
 8017bd8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017bda:	f7fc fb6b 	bl	80142b4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d00e      	beq.n	8017c06 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d10a      	bne.n	8017c06 <tcp_write+0x6ae>
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d106      	bne.n	8017c06 <tcp_write+0x6ae>
 8017bf8:	4b06      	ldr	r3, [pc, #24]	; (8017c14 <tcp_write+0x6bc>)
 8017bfa:	f240 3227 	movw	r2, #807	; 0x327
 8017bfe:	4906      	ldr	r1, [pc, #24]	; (8017c18 <tcp_write+0x6c0>)
 8017c00:	4806      	ldr	r0, [pc, #24]	; (8017c1c <tcp_write+0x6c4>)
 8017c02:	f004 ff57 	bl	801cab4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	375c      	adds	r7, #92	; 0x5c
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	bd90      	pop	{r4, r7, pc}
 8017c12:	bf00      	nop
 8017c14:	08020288 	.word	0x08020288
 8017c18:	080205fc 	.word	0x080205fc
 8017c1c:	080202dc 	.word	0x080202dc

08017c20 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8017c20:	b590      	push	{r4, r7, lr}
 8017c22:	b08b      	sub	sp, #44	; 0x2c
 8017c24:	af02      	add	r7, sp, #8
 8017c26:	6078      	str	r0, [r7, #4]
 8017c28:	460b      	mov	r3, r1
 8017c2a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	61fb      	str	r3, [r7, #28]
 8017c30:	2300      	movs	r3, #0
 8017c32:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017c34:	2300      	movs	r3, #0
 8017c36:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d106      	bne.n	8017c4c <tcp_split_unsent_seg+0x2c>
 8017c3e:	4b95      	ldr	r3, [pc, #596]	; (8017e94 <tcp_split_unsent_seg+0x274>)
 8017c40:	f240 324b 	movw	r2, #843	; 0x34b
 8017c44:	4994      	ldr	r1, [pc, #592]	; (8017e98 <tcp_split_unsent_seg+0x278>)
 8017c46:	4895      	ldr	r0, [pc, #596]	; (8017e9c <tcp_split_unsent_seg+0x27c>)
 8017c48:	f004 ff34 	bl	801cab4 <iprintf>

  useg = pcb->unsent;
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c50:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8017c52:	697b      	ldr	r3, [r7, #20]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d102      	bne.n	8017c5e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017c58:	f04f 33ff 	mov.w	r3, #4294967295
 8017c5c:	e116      	b.n	8017e8c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8017c5e:	887b      	ldrh	r3, [r7, #2]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d109      	bne.n	8017c78 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017c64:	4b8b      	ldr	r3, [pc, #556]	; (8017e94 <tcp_split_unsent_seg+0x274>)
 8017c66:	f240 3253 	movw	r2, #851	; 0x353
 8017c6a:	498d      	ldr	r1, [pc, #564]	; (8017ea0 <tcp_split_unsent_seg+0x280>)
 8017c6c:	488b      	ldr	r0, [pc, #556]	; (8017e9c <tcp_split_unsent_seg+0x27c>)
 8017c6e:	f004 ff21 	bl	801cab4 <iprintf>
    return ERR_VAL;
 8017c72:	f06f 0305 	mvn.w	r3, #5
 8017c76:	e109      	b.n	8017e8c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017c78:	697b      	ldr	r3, [r7, #20]
 8017c7a:	891b      	ldrh	r3, [r3, #8]
 8017c7c:	887a      	ldrh	r2, [r7, #2]
 8017c7e:	429a      	cmp	r2, r3
 8017c80:	d301      	bcc.n	8017c86 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8017c82:	2300      	movs	r3, #0
 8017c84:	e102      	b.n	8017e8c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017c8a:	887a      	ldrh	r2, [r7, #2]
 8017c8c:	429a      	cmp	r2, r3
 8017c8e:	d906      	bls.n	8017c9e <tcp_split_unsent_seg+0x7e>
 8017c90:	4b80      	ldr	r3, [pc, #512]	; (8017e94 <tcp_split_unsent_seg+0x274>)
 8017c92:	f240 325b 	movw	r2, #859	; 0x35b
 8017c96:	4983      	ldr	r1, [pc, #524]	; (8017ea4 <tcp_split_unsent_seg+0x284>)
 8017c98:	4880      	ldr	r0, [pc, #512]	; (8017e9c <tcp_split_unsent_seg+0x27c>)
 8017c9a:	f004 ff0b 	bl	801cab4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8017c9e:	697b      	ldr	r3, [r7, #20]
 8017ca0:	891b      	ldrh	r3, [r3, #8]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d106      	bne.n	8017cb4 <tcp_split_unsent_seg+0x94>
 8017ca6:	4b7b      	ldr	r3, [pc, #492]	; (8017e94 <tcp_split_unsent_seg+0x274>)
 8017ca8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8017cac:	497e      	ldr	r1, [pc, #504]	; (8017ea8 <tcp_split_unsent_seg+0x288>)
 8017cae:	487b      	ldr	r0, [pc, #492]	; (8017e9c <tcp_split_unsent_seg+0x27c>)
 8017cb0:	f004 ff00 	bl	801cab4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017cb4:	697b      	ldr	r3, [r7, #20]
 8017cb6:	7a9b      	ldrb	r3, [r3, #10]
 8017cb8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017cba:	7bfb      	ldrb	r3, [r7, #15]
 8017cbc:	009b      	lsls	r3, r3, #2
 8017cbe:	b2db      	uxtb	r3, r3
 8017cc0:	f003 0304 	and.w	r3, r3, #4
 8017cc4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017cc6:	697b      	ldr	r3, [r7, #20]
 8017cc8:	891a      	ldrh	r2, [r3, #8]
 8017cca:	887b      	ldrh	r3, [r7, #2]
 8017ccc:	1ad3      	subs	r3, r2, r3
 8017cce:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017cd0:	7bbb      	ldrb	r3, [r7, #14]
 8017cd2:	b29a      	uxth	r2, r3
 8017cd4:	89bb      	ldrh	r3, [r7, #12]
 8017cd6:	4413      	add	r3, r2
 8017cd8:	b29b      	uxth	r3, r3
 8017cda:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017cde:	4619      	mov	r1, r3
 8017ce0:	2036      	movs	r0, #54	; 0x36
 8017ce2:	f7fa fc4f 	bl	8012584 <pbuf_alloc>
 8017ce6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017ce8:	693b      	ldr	r3, [r7, #16]
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	f000 80b7 	beq.w	8017e5e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8017cf0:	697b      	ldr	r3, [r7, #20]
 8017cf2:	685b      	ldr	r3, [r3, #4]
 8017cf4:	891a      	ldrh	r2, [r3, #8]
 8017cf6:	697b      	ldr	r3, [r7, #20]
 8017cf8:	891b      	ldrh	r3, [r3, #8]
 8017cfa:	1ad3      	subs	r3, r2, r3
 8017cfc:	b29a      	uxth	r2, r3
 8017cfe:	887b      	ldrh	r3, [r7, #2]
 8017d00:	4413      	add	r3, r2
 8017d02:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017d04:	697b      	ldr	r3, [r7, #20]
 8017d06:	6858      	ldr	r0, [r3, #4]
 8017d08:	693b      	ldr	r3, [r7, #16]
 8017d0a:	685a      	ldr	r2, [r3, #4]
 8017d0c:	7bbb      	ldrb	r3, [r7, #14]
 8017d0e:	18d1      	adds	r1, r2, r3
 8017d10:	897b      	ldrh	r3, [r7, #10]
 8017d12:	89ba      	ldrh	r2, [r7, #12]
 8017d14:	f7fb f920 	bl	8012f58 <pbuf_copy_partial>
 8017d18:	4603      	mov	r3, r0
 8017d1a:	461a      	mov	r2, r3
 8017d1c:	89bb      	ldrh	r3, [r7, #12]
 8017d1e:	4293      	cmp	r3, r2
 8017d20:	f040 809f 	bne.w	8017e62 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017d24:	697b      	ldr	r3, [r7, #20]
 8017d26:	68db      	ldr	r3, [r3, #12]
 8017d28:	899b      	ldrh	r3, [r3, #12]
 8017d2a:	b29b      	uxth	r3, r3
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	f7f9 fbc5 	bl	80114bc <lwip_htons>
 8017d32:	4603      	mov	r3, r0
 8017d34:	b2db      	uxtb	r3, r3
 8017d36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017d3a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8017d40:	7efb      	ldrb	r3, [r7, #27]
 8017d42:	f003 0308 	and.w	r3, r3, #8
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d007      	beq.n	8017d5a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017d4a:	7efb      	ldrb	r3, [r7, #27]
 8017d4c:	f023 0308 	bic.w	r3, r3, #8
 8017d50:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8017d52:	7ebb      	ldrb	r3, [r7, #26]
 8017d54:	f043 0308 	orr.w	r3, r3, #8
 8017d58:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017d5a:	7efb      	ldrb	r3, [r7, #27]
 8017d5c:	f003 0301 	and.w	r3, r3, #1
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d007      	beq.n	8017d74 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017d64:	7efb      	ldrb	r3, [r7, #27]
 8017d66:	f023 0301 	bic.w	r3, r3, #1
 8017d6a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017d6c:	7ebb      	ldrb	r3, [r7, #26]
 8017d6e:	f043 0301 	orr.w	r3, r3, #1
 8017d72:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017d74:	697b      	ldr	r3, [r7, #20]
 8017d76:	68db      	ldr	r3, [r3, #12]
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	f7f9 fbb3 	bl	80114e6 <lwip_htonl>
 8017d80:	4602      	mov	r2, r0
 8017d82:	887b      	ldrh	r3, [r7, #2]
 8017d84:	18d1      	adds	r1, r2, r3
 8017d86:	7eba      	ldrb	r2, [r7, #26]
 8017d88:	7bfb      	ldrb	r3, [r7, #15]
 8017d8a:	9300      	str	r3, [sp, #0]
 8017d8c:	460b      	mov	r3, r1
 8017d8e:	6939      	ldr	r1, [r7, #16]
 8017d90:	6878      	ldr	r0, [r7, #4]
 8017d92:	f7ff fa4f 	bl	8017234 <tcp_create_segment>
 8017d96:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8017d98:	69fb      	ldr	r3, [r7, #28]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d063      	beq.n	8017e66 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8017d9e:	697b      	ldr	r3, [r7, #20]
 8017da0:	685b      	ldr	r3, [r3, #4]
 8017da2:	4618      	mov	r0, r3
 8017da4:	f7fa ff60 	bl	8012c68 <pbuf_clen>
 8017da8:	4603      	mov	r3, r0
 8017daa:	461a      	mov	r2, r3
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017db2:	1a9b      	subs	r3, r3, r2
 8017db4:	b29a      	uxth	r2, r3
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8017dbc:	697b      	ldr	r3, [r7, #20]
 8017dbe:	6858      	ldr	r0, [r3, #4]
 8017dc0:	697b      	ldr	r3, [r7, #20]
 8017dc2:	685b      	ldr	r3, [r3, #4]
 8017dc4:	891a      	ldrh	r2, [r3, #8]
 8017dc6:	89bb      	ldrh	r3, [r7, #12]
 8017dc8:	1ad3      	subs	r3, r2, r3
 8017dca:	b29b      	uxth	r3, r3
 8017dcc:	4619      	mov	r1, r3
 8017dce:	f7fa fd37 	bl	8012840 <pbuf_realloc>
  useg->len -= remainder;
 8017dd2:	697b      	ldr	r3, [r7, #20]
 8017dd4:	891a      	ldrh	r2, [r3, #8]
 8017dd6:	89bb      	ldrh	r3, [r7, #12]
 8017dd8:	1ad3      	subs	r3, r2, r3
 8017dda:	b29a      	uxth	r2, r3
 8017ddc:	697b      	ldr	r3, [r7, #20]
 8017dde:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8017de0:	697b      	ldr	r3, [r7, #20]
 8017de2:	68db      	ldr	r3, [r3, #12]
 8017de4:	899b      	ldrh	r3, [r3, #12]
 8017de6:	b29c      	uxth	r4, r3
 8017de8:	7efb      	ldrb	r3, [r7, #27]
 8017dea:	b29b      	uxth	r3, r3
 8017dec:	4618      	mov	r0, r3
 8017dee:	f7f9 fb65 	bl	80114bc <lwip_htons>
 8017df2:	4603      	mov	r3, r0
 8017df4:	461a      	mov	r2, r3
 8017df6:	697b      	ldr	r3, [r7, #20]
 8017df8:	68db      	ldr	r3, [r3, #12]
 8017dfa:	4322      	orrs	r2, r4
 8017dfc:	b292      	uxth	r2, r2
 8017dfe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8017e00:	697b      	ldr	r3, [r7, #20]
 8017e02:	685b      	ldr	r3, [r3, #4]
 8017e04:	4618      	mov	r0, r3
 8017e06:	f7fa ff2f 	bl	8012c68 <pbuf_clen>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	461a      	mov	r2, r3
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017e14:	4413      	add	r3, r2
 8017e16:	b29a      	uxth	r2, r3
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017e1e:	69fb      	ldr	r3, [r7, #28]
 8017e20:	685b      	ldr	r3, [r3, #4]
 8017e22:	4618      	mov	r0, r3
 8017e24:	f7fa ff20 	bl	8012c68 <pbuf_clen>
 8017e28:	4603      	mov	r3, r0
 8017e2a:	461a      	mov	r2, r3
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017e32:	4413      	add	r3, r2
 8017e34:	b29a      	uxth	r2, r3
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8017e3c:	697b      	ldr	r3, [r7, #20]
 8017e3e:	681a      	ldr	r2, [r3, #0]
 8017e40:	69fb      	ldr	r3, [r7, #28]
 8017e42:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017e44:	697b      	ldr	r3, [r7, #20]
 8017e46:	69fa      	ldr	r2, [r7, #28]
 8017e48:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017e4a:	69fb      	ldr	r3, [r7, #28]
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d103      	bne.n	8017e5a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	2200      	movs	r2, #0
 8017e56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	e016      	b.n	8017e8c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8017e5e:	bf00      	nop
 8017e60:	e002      	b.n	8017e68 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017e62:	bf00      	nop
 8017e64:	e000      	b.n	8017e68 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017e66:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8017e68:	69fb      	ldr	r3, [r7, #28]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d006      	beq.n	8017e7c <tcp_split_unsent_seg+0x25c>
 8017e6e:	4b09      	ldr	r3, [pc, #36]	; (8017e94 <tcp_split_unsent_seg+0x274>)
 8017e70:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8017e74:	490d      	ldr	r1, [pc, #52]	; (8017eac <tcp_split_unsent_seg+0x28c>)
 8017e76:	4809      	ldr	r0, [pc, #36]	; (8017e9c <tcp_split_unsent_seg+0x27c>)
 8017e78:	f004 fe1c 	bl	801cab4 <iprintf>
  if (p != NULL) {
 8017e7c:	693b      	ldr	r3, [r7, #16]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d002      	beq.n	8017e88 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8017e82:	6938      	ldr	r0, [r7, #16]
 8017e84:	f7fa fe62 	bl	8012b4c <pbuf_free>
  }

  return ERR_MEM;
 8017e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	3724      	adds	r7, #36	; 0x24
 8017e90:	46bd      	mov	sp, r7
 8017e92:	bd90      	pop	{r4, r7, pc}
 8017e94:	08020288 	.word	0x08020288
 8017e98:	0802061c 	.word	0x0802061c
 8017e9c:	080202dc 	.word	0x080202dc
 8017ea0:	08020640 	.word	0x08020640
 8017ea4:	08020664 	.word	0x08020664
 8017ea8:	08020674 	.word	0x08020674
 8017eac:	08020684 	.word	0x08020684

08017eb0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8017eb0:	b590      	push	{r4, r7, lr}
 8017eb2:	b085      	sub	sp, #20
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d106      	bne.n	8017ecc <tcp_send_fin+0x1c>
 8017ebe:	4b21      	ldr	r3, [pc, #132]	; (8017f44 <tcp_send_fin+0x94>)
 8017ec0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8017ec4:	4920      	ldr	r1, [pc, #128]	; (8017f48 <tcp_send_fin+0x98>)
 8017ec6:	4821      	ldr	r0, [pc, #132]	; (8017f4c <tcp_send_fin+0x9c>)
 8017ec8:	f004 fdf4 	bl	801cab4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d02e      	beq.n	8017f32 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ed8:	60fb      	str	r3, [r7, #12]
 8017eda:	e002      	b.n	8017ee2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d1f8      	bne.n	8017edc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	68db      	ldr	r3, [r3, #12]
 8017eee:	899b      	ldrh	r3, [r3, #12]
 8017ef0:	b29b      	uxth	r3, r3
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	f7f9 fae2 	bl	80114bc <lwip_htons>
 8017ef8:	4603      	mov	r3, r0
 8017efa:	b2db      	uxtb	r3, r3
 8017efc:	f003 0307 	and.w	r3, r3, #7
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d116      	bne.n	8017f32 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	68db      	ldr	r3, [r3, #12]
 8017f08:	899b      	ldrh	r3, [r3, #12]
 8017f0a:	b29c      	uxth	r4, r3
 8017f0c:	2001      	movs	r0, #1
 8017f0e:	f7f9 fad5 	bl	80114bc <lwip_htons>
 8017f12:	4603      	mov	r3, r0
 8017f14:	461a      	mov	r2, r3
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	68db      	ldr	r3, [r3, #12]
 8017f1a:	4322      	orrs	r2, r4
 8017f1c:	b292      	uxth	r2, r2
 8017f1e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	8b5b      	ldrh	r3, [r3, #26]
 8017f24:	f043 0320 	orr.w	r3, r3, #32
 8017f28:	b29a      	uxth	r2, r3
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017f2e:	2300      	movs	r3, #0
 8017f30:	e004      	b.n	8017f3c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017f32:	2101      	movs	r1, #1
 8017f34:	6878      	ldr	r0, [r7, #4]
 8017f36:	f000 f80b 	bl	8017f50 <tcp_enqueue_flags>
 8017f3a:	4603      	mov	r3, r0
}
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	3714      	adds	r7, #20
 8017f40:	46bd      	mov	sp, r7
 8017f42:	bd90      	pop	{r4, r7, pc}
 8017f44:	08020288 	.word	0x08020288
 8017f48:	08020690 	.word	0x08020690
 8017f4c:	080202dc 	.word	0x080202dc

08017f50 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b08a      	sub	sp, #40	; 0x28
 8017f54:	af02      	add	r7, sp, #8
 8017f56:	6078      	str	r0, [r7, #4]
 8017f58:	460b      	mov	r3, r1
 8017f5a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8017f60:	2300      	movs	r3, #0
 8017f62:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017f64:	78fb      	ldrb	r3, [r7, #3]
 8017f66:	f003 0303 	and.w	r3, r3, #3
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d106      	bne.n	8017f7c <tcp_enqueue_flags+0x2c>
 8017f6e:	4b67      	ldr	r3, [pc, #412]	; (801810c <tcp_enqueue_flags+0x1bc>)
 8017f70:	f240 4211 	movw	r2, #1041	; 0x411
 8017f74:	4966      	ldr	r1, [pc, #408]	; (8018110 <tcp_enqueue_flags+0x1c0>)
 8017f76:	4867      	ldr	r0, [pc, #412]	; (8018114 <tcp_enqueue_flags+0x1c4>)
 8017f78:	f004 fd9c 	bl	801cab4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d106      	bne.n	8017f90 <tcp_enqueue_flags+0x40>
 8017f82:	4b62      	ldr	r3, [pc, #392]	; (801810c <tcp_enqueue_flags+0x1bc>)
 8017f84:	f240 4213 	movw	r2, #1043	; 0x413
 8017f88:	4963      	ldr	r1, [pc, #396]	; (8018118 <tcp_enqueue_flags+0x1c8>)
 8017f8a:	4862      	ldr	r0, [pc, #392]	; (8018114 <tcp_enqueue_flags+0x1c4>)
 8017f8c:	f004 fd92 	bl	801cab4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8017f90:	78fb      	ldrb	r3, [r7, #3]
 8017f92:	f003 0302 	and.w	r3, r3, #2
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d001      	beq.n	8017f9e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8017f9a:	2301      	movs	r3, #1
 8017f9c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017f9e:	7ffb      	ldrb	r3, [r7, #31]
 8017fa0:	009b      	lsls	r3, r3, #2
 8017fa2:	b2db      	uxtb	r3, r3
 8017fa4:	f003 0304 	and.w	r3, r3, #4
 8017fa8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017faa:	7dfb      	ldrb	r3, [r7, #23]
 8017fac:	b29b      	uxth	r3, r3
 8017fae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017fb2:	4619      	mov	r1, r3
 8017fb4:	2036      	movs	r0, #54	; 0x36
 8017fb6:	f7fa fae5 	bl	8012584 <pbuf_alloc>
 8017fba:	6138      	str	r0, [r7, #16]
 8017fbc:	693b      	ldr	r3, [r7, #16]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d109      	bne.n	8017fd6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	8b5b      	ldrh	r3, [r3, #26]
 8017fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017fca:	b29a      	uxth	r2, r3
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8017fd4:	e095      	b.n	8018102 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8017fd6:	693b      	ldr	r3, [r7, #16]
 8017fd8:	895a      	ldrh	r2, [r3, #10]
 8017fda:	7dfb      	ldrb	r3, [r7, #23]
 8017fdc:	b29b      	uxth	r3, r3
 8017fde:	429a      	cmp	r2, r3
 8017fe0:	d206      	bcs.n	8017ff0 <tcp_enqueue_flags+0xa0>
 8017fe2:	4b4a      	ldr	r3, [pc, #296]	; (801810c <tcp_enqueue_flags+0x1bc>)
 8017fe4:	f240 4239 	movw	r2, #1081	; 0x439
 8017fe8:	494c      	ldr	r1, [pc, #304]	; (801811c <tcp_enqueue_flags+0x1cc>)
 8017fea:	484a      	ldr	r0, [pc, #296]	; (8018114 <tcp_enqueue_flags+0x1c4>)
 8017fec:	f004 fd62 	bl	801cab4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8017ff4:	78fa      	ldrb	r2, [r7, #3]
 8017ff6:	7ffb      	ldrb	r3, [r7, #31]
 8017ff8:	9300      	str	r3, [sp, #0]
 8017ffa:	460b      	mov	r3, r1
 8017ffc:	6939      	ldr	r1, [r7, #16]
 8017ffe:	6878      	ldr	r0, [r7, #4]
 8018000:	f7ff f918 	bl	8017234 <tcp_create_segment>
 8018004:	60f8      	str	r0, [r7, #12]
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d109      	bne.n	8018020 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	8b5b      	ldrh	r3, [r3, #26]
 8018010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018014:	b29a      	uxth	r2, r3
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801801a:	f04f 33ff 	mov.w	r3, #4294967295
 801801e:	e070      	b.n	8018102 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	68db      	ldr	r3, [r3, #12]
 8018024:	f003 0303 	and.w	r3, r3, #3
 8018028:	2b00      	cmp	r3, #0
 801802a:	d006      	beq.n	801803a <tcp_enqueue_flags+0xea>
 801802c:	4b37      	ldr	r3, [pc, #220]	; (801810c <tcp_enqueue_flags+0x1bc>)
 801802e:	f240 4242 	movw	r2, #1090	; 0x442
 8018032:	493b      	ldr	r1, [pc, #236]	; (8018120 <tcp_enqueue_flags+0x1d0>)
 8018034:	4837      	ldr	r0, [pc, #220]	; (8018114 <tcp_enqueue_flags+0x1c4>)
 8018036:	f004 fd3d 	bl	801cab4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	891b      	ldrh	r3, [r3, #8]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d006      	beq.n	8018050 <tcp_enqueue_flags+0x100>
 8018042:	4b32      	ldr	r3, [pc, #200]	; (801810c <tcp_enqueue_flags+0x1bc>)
 8018044:	f240 4243 	movw	r2, #1091	; 0x443
 8018048:	4936      	ldr	r1, [pc, #216]	; (8018124 <tcp_enqueue_flags+0x1d4>)
 801804a:	4832      	ldr	r0, [pc, #200]	; (8018114 <tcp_enqueue_flags+0x1c4>)
 801804c:	f004 fd32 	bl	801cab4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018054:	2b00      	cmp	r3, #0
 8018056:	d103      	bne.n	8018060 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	68fa      	ldr	r2, [r7, #12]
 801805c:	66da      	str	r2, [r3, #108]	; 0x6c
 801805e:	e00d      	b.n	801807c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018064:	61bb      	str	r3, [r7, #24]
 8018066:	e002      	b.n	801806e <tcp_enqueue_flags+0x11e>
 8018068:	69bb      	ldr	r3, [r7, #24]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	61bb      	str	r3, [r7, #24]
 801806e:	69bb      	ldr	r3, [r7, #24]
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d1f8      	bne.n	8018068 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8018076:	69bb      	ldr	r3, [r7, #24]
 8018078:	68fa      	ldr	r2, [r7, #12]
 801807a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	2200      	movs	r2, #0
 8018080:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8018084:	78fb      	ldrb	r3, [r7, #3]
 8018086:	f003 0302 	and.w	r3, r3, #2
 801808a:	2b00      	cmp	r3, #0
 801808c:	d104      	bne.n	8018098 <tcp_enqueue_flags+0x148>
 801808e:	78fb      	ldrb	r3, [r7, #3]
 8018090:	f003 0301 	and.w	r3, r3, #1
 8018094:	2b00      	cmp	r3, #0
 8018096:	d004      	beq.n	80180a2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801809c:	1c5a      	adds	r2, r3, #1
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80180a2:	78fb      	ldrb	r3, [r7, #3]
 80180a4:	f003 0301 	and.w	r3, r3, #1
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d006      	beq.n	80180ba <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	8b5b      	ldrh	r3, [r3, #26]
 80180b0:	f043 0320 	orr.w	r3, r3, #32
 80180b4:	b29a      	uxth	r2, r3
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	685b      	ldr	r3, [r3, #4]
 80180be:	4618      	mov	r0, r3
 80180c0:	f7fa fdd2 	bl	8012c68 <pbuf_clen>
 80180c4:	4603      	mov	r3, r0
 80180c6:	461a      	mov	r2, r3
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80180ce:	4413      	add	r3, r2
 80180d0:	b29a      	uxth	r2, r3
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d00e      	beq.n	8018100 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d10a      	bne.n	8018100 <tcp_enqueue_flags+0x1b0>
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d106      	bne.n	8018100 <tcp_enqueue_flags+0x1b0>
 80180f2:	4b06      	ldr	r3, [pc, #24]	; (801810c <tcp_enqueue_flags+0x1bc>)
 80180f4:	f240 4265 	movw	r2, #1125	; 0x465
 80180f8:	490b      	ldr	r1, [pc, #44]	; (8018128 <tcp_enqueue_flags+0x1d8>)
 80180fa:	4806      	ldr	r0, [pc, #24]	; (8018114 <tcp_enqueue_flags+0x1c4>)
 80180fc:	f004 fcda 	bl	801cab4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018100:	2300      	movs	r3, #0
}
 8018102:	4618      	mov	r0, r3
 8018104:	3720      	adds	r7, #32
 8018106:	46bd      	mov	sp, r7
 8018108:	bd80      	pop	{r7, pc}
 801810a:	bf00      	nop
 801810c:	08020288 	.word	0x08020288
 8018110:	080206ac 	.word	0x080206ac
 8018114:	080202dc 	.word	0x080202dc
 8018118:	08020704 	.word	0x08020704
 801811c:	08020724 	.word	0x08020724
 8018120:	08020760 	.word	0x08020760
 8018124:	08020778 	.word	0x08020778
 8018128:	080207a4 	.word	0x080207a4

0801812c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801812c:	b5b0      	push	{r4, r5, r7, lr}
 801812e:	b08a      	sub	sp, #40	; 0x28
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d106      	bne.n	8018148 <tcp_output+0x1c>
 801813a:	4b8a      	ldr	r3, [pc, #552]	; (8018364 <tcp_output+0x238>)
 801813c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8018140:	4989      	ldr	r1, [pc, #548]	; (8018368 <tcp_output+0x23c>)
 8018142:	488a      	ldr	r0, [pc, #552]	; (801836c <tcp_output+0x240>)
 8018144:	f004 fcb6 	bl	801cab4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	7d1b      	ldrb	r3, [r3, #20]
 801814c:	2b01      	cmp	r3, #1
 801814e:	d106      	bne.n	801815e <tcp_output+0x32>
 8018150:	4b84      	ldr	r3, [pc, #528]	; (8018364 <tcp_output+0x238>)
 8018152:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8018156:	4986      	ldr	r1, [pc, #536]	; (8018370 <tcp_output+0x244>)
 8018158:	4884      	ldr	r0, [pc, #528]	; (801836c <tcp_output+0x240>)
 801815a:	f004 fcab 	bl	801cab4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801815e:	4b85      	ldr	r3, [pc, #532]	; (8018374 <tcp_output+0x248>)
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	687a      	ldr	r2, [r7, #4]
 8018164:	429a      	cmp	r2, r3
 8018166:	d101      	bne.n	801816c <tcp_output+0x40>
    return ERR_OK;
 8018168:	2300      	movs	r3, #0
 801816a:	e1ce      	b.n	801850a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018178:	4293      	cmp	r3, r2
 801817a:	bf28      	it	cs
 801817c:	4613      	movcs	r3, r2
 801817e:	b29b      	uxth	r3, r3
 8018180:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018186:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8018188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801818a:	2b00      	cmp	r3, #0
 801818c:	d10b      	bne.n	80181a6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	8b5b      	ldrh	r3, [r3, #26]
 8018192:	f003 0302 	and.w	r3, r3, #2
 8018196:	2b00      	cmp	r3, #0
 8018198:	f000 81aa 	beq.w	80184f0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801819c:	6878      	ldr	r0, [r7, #4]
 801819e:	f000 fdcb 	bl	8018d38 <tcp_send_empty_ack>
 80181a2:	4603      	mov	r3, r0
 80181a4:	e1b1      	b.n	801850a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80181a6:	6879      	ldr	r1, [r7, #4]
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	3304      	adds	r3, #4
 80181ac:	461a      	mov	r2, r3
 80181ae:	6878      	ldr	r0, [r7, #4]
 80181b0:	f7ff f824 	bl	80171fc <tcp_route>
 80181b4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80181b6:	697b      	ldr	r3, [r7, #20]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d102      	bne.n	80181c2 <tcp_output+0x96>
    return ERR_RTE;
 80181bc:	f06f 0303 	mvn.w	r3, #3
 80181c0:	e1a3      	b.n	801850a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d003      	beq.n	80181d0 <tcp_output+0xa4>
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d111      	bne.n	80181f4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80181d0:	697b      	ldr	r3, [r7, #20]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d002      	beq.n	80181dc <tcp_output+0xb0>
 80181d6:	697b      	ldr	r3, [r7, #20]
 80181d8:	3304      	adds	r3, #4
 80181da:	e000      	b.n	80181de <tcp_output+0xb2>
 80181dc:	2300      	movs	r3, #0
 80181de:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80181e0:	693b      	ldr	r3, [r7, #16]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d102      	bne.n	80181ec <tcp_output+0xc0>
      return ERR_RTE;
 80181e6:	f06f 0303 	mvn.w	r3, #3
 80181ea:	e18e      	b.n	801850a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80181ec:	693b      	ldr	r3, [r7, #16]
 80181ee:	681a      	ldr	r2, [r3, #0]
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80181f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181f6:	68db      	ldr	r3, [r3, #12]
 80181f8:	685b      	ldr	r3, [r3, #4]
 80181fa:	4618      	mov	r0, r3
 80181fc:	f7f9 f973 	bl	80114e6 <lwip_htonl>
 8018200:	4602      	mov	r2, r0
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018206:	1ad3      	subs	r3, r2, r3
 8018208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801820a:	8912      	ldrh	r2, [r2, #8]
 801820c:	4413      	add	r3, r2
 801820e:	69ba      	ldr	r2, [r7, #24]
 8018210:	429a      	cmp	r2, r3
 8018212:	d227      	bcs.n	8018264 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801821a:	461a      	mov	r2, r3
 801821c:	69bb      	ldr	r3, [r7, #24]
 801821e:	4293      	cmp	r3, r2
 8018220:	d114      	bne.n	801824c <tcp_output+0x120>
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018226:	2b00      	cmp	r3, #0
 8018228:	d110      	bne.n	801824c <tcp_output+0x120>
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018230:	2b00      	cmp	r3, #0
 8018232:	d10b      	bne.n	801824c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	2200      	movs	r2, #0
 8018238:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	2201      	movs	r2, #1
 8018240:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	2200      	movs	r2, #0
 8018248:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	8b5b      	ldrh	r3, [r3, #26]
 8018250:	f003 0302 	and.w	r3, r3, #2
 8018254:	2b00      	cmp	r3, #0
 8018256:	f000 814d 	beq.w	80184f4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801825a:	6878      	ldr	r0, [r7, #4]
 801825c:	f000 fd6c 	bl	8018d38 <tcp_send_empty_ack>
 8018260:	4603      	mov	r3, r0
 8018262:	e152      	b.n	801850a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	2200      	movs	r2, #0
 8018268:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018270:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8018272:	6a3b      	ldr	r3, [r7, #32]
 8018274:	2b00      	cmp	r3, #0
 8018276:	f000 811c 	beq.w	80184b2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801827a:	e002      	b.n	8018282 <tcp_output+0x156>
 801827c:	6a3b      	ldr	r3, [r7, #32]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	623b      	str	r3, [r7, #32]
 8018282:	6a3b      	ldr	r3, [r7, #32]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d1f8      	bne.n	801827c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801828a:	e112      	b.n	80184b2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801828e:	68db      	ldr	r3, [r3, #12]
 8018290:	899b      	ldrh	r3, [r3, #12]
 8018292:	b29b      	uxth	r3, r3
 8018294:	4618      	mov	r0, r3
 8018296:	f7f9 f911 	bl	80114bc <lwip_htons>
 801829a:	4603      	mov	r3, r0
 801829c:	b2db      	uxtb	r3, r3
 801829e:	f003 0304 	and.w	r3, r3, #4
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d006      	beq.n	80182b4 <tcp_output+0x188>
 80182a6:	4b2f      	ldr	r3, [pc, #188]	; (8018364 <tcp_output+0x238>)
 80182a8:	f240 5236 	movw	r2, #1334	; 0x536
 80182ac:	4932      	ldr	r1, [pc, #200]	; (8018378 <tcp_output+0x24c>)
 80182ae:	482f      	ldr	r0, [pc, #188]	; (801836c <tcp_output+0x240>)
 80182b0:	f004 fc00 	bl	801cab4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d01f      	beq.n	80182fc <tcp_output+0x1d0>
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	8b5b      	ldrh	r3, [r3, #26]
 80182c0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d119      	bne.n	80182fc <tcp_output+0x1d0>
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d00b      	beq.n	80182e8 <tcp_output+0x1bc>
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d110      	bne.n	80182fc <tcp_output+0x1d0>
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182de:	891a      	ldrh	r2, [r3, #8]
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80182e4:	429a      	cmp	r2, r3
 80182e6:	d209      	bcs.n	80182fc <tcp_output+0x1d0>
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d004      	beq.n	80182fc <tcp_output+0x1d0>
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80182f8:	2b08      	cmp	r3, #8
 80182fa:	d901      	bls.n	8018300 <tcp_output+0x1d4>
 80182fc:	2301      	movs	r3, #1
 80182fe:	e000      	b.n	8018302 <tcp_output+0x1d6>
 8018300:	2300      	movs	r3, #0
 8018302:	2b00      	cmp	r3, #0
 8018304:	d106      	bne.n	8018314 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	8b5b      	ldrh	r3, [r3, #26]
 801830a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801830e:	2b00      	cmp	r3, #0
 8018310:	f000 80e4 	beq.w	80184dc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	7d1b      	ldrb	r3, [r3, #20]
 8018318:	2b02      	cmp	r3, #2
 801831a:	d00d      	beq.n	8018338 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801831e:	68db      	ldr	r3, [r3, #12]
 8018320:	899b      	ldrh	r3, [r3, #12]
 8018322:	b29c      	uxth	r4, r3
 8018324:	2010      	movs	r0, #16
 8018326:	f7f9 f8c9 	bl	80114bc <lwip_htons>
 801832a:	4603      	mov	r3, r0
 801832c:	461a      	mov	r2, r3
 801832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018330:	68db      	ldr	r3, [r3, #12]
 8018332:	4322      	orrs	r2, r4
 8018334:	b292      	uxth	r2, r2
 8018336:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018338:	697a      	ldr	r2, [r7, #20]
 801833a:	6879      	ldr	r1, [r7, #4]
 801833c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801833e:	f000 f909 	bl	8018554 <tcp_output_segment>
 8018342:	4603      	mov	r3, r0
 8018344:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d016      	beq.n	801837c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	8b5b      	ldrh	r3, [r3, #26]
 8018352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018356:	b29a      	uxth	r2, r3
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	835a      	strh	r2, [r3, #26]
      return err;
 801835c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018360:	e0d3      	b.n	801850a <tcp_output+0x3de>
 8018362:	bf00      	nop
 8018364:	08020288 	.word	0x08020288
 8018368:	080207cc 	.word	0x080207cc
 801836c:	080202dc 	.word	0x080202dc
 8018370:	080207e4 	.word	0x080207e4
 8018374:	2000ddd8 	.word	0x2000ddd8
 8018378:	0802080c 	.word	0x0802080c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801837e:	681a      	ldr	r2, [r3, #0]
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	7d1b      	ldrb	r3, [r3, #20]
 8018388:	2b02      	cmp	r3, #2
 801838a:	d006      	beq.n	801839a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	8b5b      	ldrh	r3, [r3, #26]
 8018390:	f023 0303 	bic.w	r3, r3, #3
 8018394:	b29a      	uxth	r2, r3
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801839c:	68db      	ldr	r3, [r3, #12]
 801839e:	685b      	ldr	r3, [r3, #4]
 80183a0:	4618      	mov	r0, r3
 80183a2:	f7f9 f8a0 	bl	80114e6 <lwip_htonl>
 80183a6:	4604      	mov	r4, r0
 80183a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183aa:	891b      	ldrh	r3, [r3, #8]
 80183ac:	461d      	mov	r5, r3
 80183ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183b0:	68db      	ldr	r3, [r3, #12]
 80183b2:	899b      	ldrh	r3, [r3, #12]
 80183b4:	b29b      	uxth	r3, r3
 80183b6:	4618      	mov	r0, r3
 80183b8:	f7f9 f880 	bl	80114bc <lwip_htons>
 80183bc:	4603      	mov	r3, r0
 80183be:	b2db      	uxtb	r3, r3
 80183c0:	f003 0303 	and.w	r3, r3, #3
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d001      	beq.n	80183cc <tcp_output+0x2a0>
 80183c8:	2301      	movs	r3, #1
 80183ca:	e000      	b.n	80183ce <tcp_output+0x2a2>
 80183cc:	2300      	movs	r3, #0
 80183ce:	442b      	add	r3, r5
 80183d0:	4423      	add	r3, r4
 80183d2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80183d8:	68bb      	ldr	r3, [r7, #8]
 80183da:	1ad3      	subs	r3, r2, r3
 80183dc:	2b00      	cmp	r3, #0
 80183de:	da02      	bge.n	80183e6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	68ba      	ldr	r2, [r7, #8]
 80183e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80183e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183e8:	891b      	ldrh	r3, [r3, #8]
 80183ea:	461c      	mov	r4, r3
 80183ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183ee:	68db      	ldr	r3, [r3, #12]
 80183f0:	899b      	ldrh	r3, [r3, #12]
 80183f2:	b29b      	uxth	r3, r3
 80183f4:	4618      	mov	r0, r3
 80183f6:	f7f9 f861 	bl	80114bc <lwip_htons>
 80183fa:	4603      	mov	r3, r0
 80183fc:	b2db      	uxtb	r3, r3
 80183fe:	f003 0303 	and.w	r3, r3, #3
 8018402:	2b00      	cmp	r3, #0
 8018404:	d001      	beq.n	801840a <tcp_output+0x2de>
 8018406:	2301      	movs	r3, #1
 8018408:	e000      	b.n	801840c <tcp_output+0x2e0>
 801840a:	2300      	movs	r3, #0
 801840c:	4423      	add	r3, r4
 801840e:	2b00      	cmp	r3, #0
 8018410:	d049      	beq.n	80184a6 <tcp_output+0x37a>
      seg->next = NULL;
 8018412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018414:	2200      	movs	r2, #0
 8018416:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801841c:	2b00      	cmp	r3, #0
 801841e:	d105      	bne.n	801842c <tcp_output+0x300>
        pcb->unacked = seg;
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018424:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8018426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018428:	623b      	str	r3, [r7, #32]
 801842a:	e03f      	b.n	80184ac <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801842e:	68db      	ldr	r3, [r3, #12]
 8018430:	685b      	ldr	r3, [r3, #4]
 8018432:	4618      	mov	r0, r3
 8018434:	f7f9 f857 	bl	80114e6 <lwip_htonl>
 8018438:	4604      	mov	r4, r0
 801843a:	6a3b      	ldr	r3, [r7, #32]
 801843c:	68db      	ldr	r3, [r3, #12]
 801843e:	685b      	ldr	r3, [r3, #4]
 8018440:	4618      	mov	r0, r3
 8018442:	f7f9 f850 	bl	80114e6 <lwip_htonl>
 8018446:	4603      	mov	r3, r0
 8018448:	1ae3      	subs	r3, r4, r3
 801844a:	2b00      	cmp	r3, #0
 801844c:	da24      	bge.n	8018498 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	3370      	adds	r3, #112	; 0x70
 8018452:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018454:	e002      	b.n	801845c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018456:	69fb      	ldr	r3, [r7, #28]
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801845c:	69fb      	ldr	r3, [r7, #28]
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d011      	beq.n	8018488 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018464:	69fb      	ldr	r3, [r7, #28]
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	68db      	ldr	r3, [r3, #12]
 801846a:	685b      	ldr	r3, [r3, #4]
 801846c:	4618      	mov	r0, r3
 801846e:	f7f9 f83a 	bl	80114e6 <lwip_htonl>
 8018472:	4604      	mov	r4, r0
 8018474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018476:	68db      	ldr	r3, [r3, #12]
 8018478:	685b      	ldr	r3, [r3, #4]
 801847a:	4618      	mov	r0, r3
 801847c:	f7f9 f833 	bl	80114e6 <lwip_htonl>
 8018480:	4603      	mov	r3, r0
 8018482:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018484:	2b00      	cmp	r3, #0
 8018486:	dbe6      	blt.n	8018456 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018488:	69fb      	ldr	r3, [r7, #28]
 801848a:	681a      	ldr	r2, [r3, #0]
 801848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801848e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018490:	69fb      	ldr	r3, [r7, #28]
 8018492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018494:	601a      	str	r2, [r3, #0]
 8018496:	e009      	b.n	80184ac <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018498:	6a3b      	ldr	r3, [r7, #32]
 801849a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801849c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801849e:	6a3b      	ldr	r3, [r7, #32]
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	623b      	str	r3, [r7, #32]
 80184a4:	e002      	b.n	80184ac <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80184a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184a8:	f7fb ff19 	bl	80142de <tcp_seg_free>
    }
    seg = pcb->unsent;
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80184b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d012      	beq.n	80184de <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80184b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ba:	68db      	ldr	r3, [r3, #12]
 80184bc:	685b      	ldr	r3, [r3, #4]
 80184be:	4618      	mov	r0, r3
 80184c0:	f7f9 f811 	bl	80114e6 <lwip_htonl>
 80184c4:	4602      	mov	r2, r0
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184ca:	1ad3      	subs	r3, r2, r3
 80184cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184ce:	8912      	ldrh	r2, [r2, #8]
 80184d0:	4413      	add	r3, r2
  while (seg != NULL &&
 80184d2:	69ba      	ldr	r2, [r7, #24]
 80184d4:	429a      	cmp	r2, r3
 80184d6:	f4bf aed9 	bcs.w	801828c <tcp_output+0x160>
 80184da:	e000      	b.n	80184de <tcp_output+0x3b2>
      break;
 80184dc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d108      	bne.n	80184f8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	2200      	movs	r2, #0
 80184ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80184ee:	e004      	b.n	80184fa <tcp_output+0x3ce>
    goto output_done;
 80184f0:	bf00      	nop
 80184f2:	e002      	b.n	80184fa <tcp_output+0x3ce>
    goto output_done;
 80184f4:	bf00      	nop
 80184f6:	e000      	b.n	80184fa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80184f8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	8b5b      	ldrh	r3, [r3, #26]
 80184fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018502:	b29a      	uxth	r2, r3
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018508:	2300      	movs	r3, #0
}
 801850a:	4618      	mov	r0, r3
 801850c:	3728      	adds	r7, #40	; 0x28
 801850e:	46bd      	mov	sp, r7
 8018510:	bdb0      	pop	{r4, r5, r7, pc}
 8018512:	bf00      	nop

08018514 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b082      	sub	sp, #8
 8018518:	af00      	add	r7, sp, #0
 801851a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d106      	bne.n	8018530 <tcp_output_segment_busy+0x1c>
 8018522:	4b09      	ldr	r3, [pc, #36]	; (8018548 <tcp_output_segment_busy+0x34>)
 8018524:	f240 529a 	movw	r2, #1434	; 0x59a
 8018528:	4908      	ldr	r1, [pc, #32]	; (801854c <tcp_output_segment_busy+0x38>)
 801852a:	4809      	ldr	r0, [pc, #36]	; (8018550 <tcp_output_segment_busy+0x3c>)
 801852c:	f004 fac2 	bl	801cab4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	685b      	ldr	r3, [r3, #4]
 8018534:	7b9b      	ldrb	r3, [r3, #14]
 8018536:	2b01      	cmp	r3, #1
 8018538:	d001      	beq.n	801853e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801853a:	2301      	movs	r3, #1
 801853c:	e000      	b.n	8018540 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801853e:	2300      	movs	r3, #0
}
 8018540:	4618      	mov	r0, r3
 8018542:	3708      	adds	r7, #8
 8018544:	46bd      	mov	sp, r7
 8018546:	bd80      	pop	{r7, pc}
 8018548:	08020288 	.word	0x08020288
 801854c:	08020824 	.word	0x08020824
 8018550:	080202dc 	.word	0x080202dc

08018554 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018554:	b5b0      	push	{r4, r5, r7, lr}
 8018556:	b08c      	sub	sp, #48	; 0x30
 8018558:	af04      	add	r7, sp, #16
 801855a:	60f8      	str	r0, [r7, #12]
 801855c:	60b9      	str	r1, [r7, #8]
 801855e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d106      	bne.n	8018574 <tcp_output_segment+0x20>
 8018566:	4b63      	ldr	r3, [pc, #396]	; (80186f4 <tcp_output_segment+0x1a0>)
 8018568:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801856c:	4962      	ldr	r1, [pc, #392]	; (80186f8 <tcp_output_segment+0x1a4>)
 801856e:	4863      	ldr	r0, [pc, #396]	; (80186fc <tcp_output_segment+0x1a8>)
 8018570:	f004 faa0 	bl	801cab4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018574:	68bb      	ldr	r3, [r7, #8]
 8018576:	2b00      	cmp	r3, #0
 8018578:	d106      	bne.n	8018588 <tcp_output_segment+0x34>
 801857a:	4b5e      	ldr	r3, [pc, #376]	; (80186f4 <tcp_output_segment+0x1a0>)
 801857c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8018580:	495f      	ldr	r1, [pc, #380]	; (8018700 <tcp_output_segment+0x1ac>)
 8018582:	485e      	ldr	r0, [pc, #376]	; (80186fc <tcp_output_segment+0x1a8>)
 8018584:	f004 fa96 	bl	801cab4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d106      	bne.n	801859c <tcp_output_segment+0x48>
 801858e:	4b59      	ldr	r3, [pc, #356]	; (80186f4 <tcp_output_segment+0x1a0>)
 8018590:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8018594:	495b      	ldr	r1, [pc, #364]	; (8018704 <tcp_output_segment+0x1b0>)
 8018596:	4859      	ldr	r0, [pc, #356]	; (80186fc <tcp_output_segment+0x1a8>)
 8018598:	f004 fa8c 	bl	801cab4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801859c:	68f8      	ldr	r0, [r7, #12]
 801859e:	f7ff ffb9 	bl	8018514 <tcp_output_segment_busy>
 80185a2:	4603      	mov	r3, r0
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d001      	beq.n	80185ac <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80185a8:	2300      	movs	r3, #0
 80185aa:	e09f      	b.n	80186ec <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80185ac:	68bb      	ldr	r3, [r7, #8]
 80185ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	68dc      	ldr	r4, [r3, #12]
 80185b4:	4610      	mov	r0, r2
 80185b6:	f7f8 ff96 	bl	80114e6 <lwip_htonl>
 80185ba:	4603      	mov	r3, r0
 80185bc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80185be:	68bb      	ldr	r3, [r7, #8]
 80185c0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	68dc      	ldr	r4, [r3, #12]
 80185c6:	4610      	mov	r0, r2
 80185c8:	f7f8 ff78 	bl	80114bc <lwip_htons>
 80185cc:	4603      	mov	r3, r0
 80185ce:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80185d0:	68bb      	ldr	r3, [r7, #8]
 80185d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185d4:	68ba      	ldr	r2, [r7, #8]
 80185d6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80185d8:	441a      	add	r2, r3
 80185da:	68bb      	ldr	r3, [r7, #8]
 80185dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	68db      	ldr	r3, [r3, #12]
 80185e2:	3314      	adds	r3, #20
 80185e4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	7a9b      	ldrb	r3, [r3, #10]
 80185ea:	f003 0301 	and.w	r3, r3, #1
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d015      	beq.n	801861e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80185f2:	68bb      	ldr	r3, [r7, #8]
 80185f4:	3304      	adds	r3, #4
 80185f6:	461a      	mov	r2, r3
 80185f8:	6879      	ldr	r1, [r7, #4]
 80185fa:	f44f 7006 	mov.w	r0, #536	; 0x218
 80185fe:	f7fc fa33 	bl	8014a68 <tcp_eff_send_mss_netif>
 8018602:	4603      	mov	r3, r0
 8018604:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018606:	8b7b      	ldrh	r3, [r7, #26]
 8018608:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801860c:	4618      	mov	r0, r3
 801860e:	f7f8 ff6a 	bl	80114e6 <lwip_htonl>
 8018612:	4602      	mov	r2, r0
 8018614:	69fb      	ldr	r3, [r7, #28]
 8018616:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018618:	69fb      	ldr	r3, [r7, #28]
 801861a:	3304      	adds	r3, #4
 801861c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801861e:	68bb      	ldr	r3, [r7, #8]
 8018620:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018624:	2b00      	cmp	r3, #0
 8018626:	da02      	bge.n	801862e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018628:	68bb      	ldr	r3, [r7, #8]
 801862a:	2200      	movs	r2, #0
 801862c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801862e:	68bb      	ldr	r3, [r7, #8]
 8018630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018632:	2b00      	cmp	r3, #0
 8018634:	d10c      	bne.n	8018650 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018636:	4b34      	ldr	r3, [pc, #208]	; (8018708 <tcp_output_segment+0x1b4>)
 8018638:	681a      	ldr	r2, [r3, #0]
 801863a:	68bb      	ldr	r3, [r7, #8]
 801863c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801863e:	68fb      	ldr	r3, [r7, #12]
 8018640:	68db      	ldr	r3, [r3, #12]
 8018642:	685b      	ldr	r3, [r3, #4]
 8018644:	4618      	mov	r0, r3
 8018646:	f7f8 ff4e 	bl	80114e6 <lwip_htonl>
 801864a:	4602      	mov	r2, r0
 801864c:	68bb      	ldr	r3, [r7, #8]
 801864e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	68da      	ldr	r2, [r3, #12]
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	685b      	ldr	r3, [r3, #4]
 8018658:	685b      	ldr	r3, [r3, #4]
 801865a:	1ad3      	subs	r3, r2, r3
 801865c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	685b      	ldr	r3, [r3, #4]
 8018662:	8959      	ldrh	r1, [r3, #10]
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	685b      	ldr	r3, [r3, #4]
 8018668:	8b3a      	ldrh	r2, [r7, #24]
 801866a:	1a8a      	subs	r2, r1, r2
 801866c:	b292      	uxth	r2, r2
 801866e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	685b      	ldr	r3, [r3, #4]
 8018674:	8919      	ldrh	r1, [r3, #8]
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	685b      	ldr	r3, [r3, #4]
 801867a:	8b3a      	ldrh	r2, [r7, #24]
 801867c:	1a8a      	subs	r2, r1, r2
 801867e:	b292      	uxth	r2, r2
 8018680:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	685b      	ldr	r3, [r3, #4]
 8018686:	68fa      	ldr	r2, [r7, #12]
 8018688:	68d2      	ldr	r2, [r2, #12]
 801868a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	68db      	ldr	r3, [r3, #12]
 8018690:	2200      	movs	r2, #0
 8018692:	741a      	strb	r2, [r3, #16]
 8018694:	2200      	movs	r2, #0
 8018696:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	68db      	ldr	r3, [r3, #12]
 801869c:	f103 0214 	add.w	r2, r3, #20
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	7a9b      	ldrb	r3, [r3, #10]
 80186a4:	009b      	lsls	r3, r3, #2
 80186a6:	f003 0304 	and.w	r3, r3, #4
 80186aa:	4413      	add	r3, r2
 80186ac:	69fa      	ldr	r2, [r7, #28]
 80186ae:	429a      	cmp	r2, r3
 80186b0:	d006      	beq.n	80186c0 <tcp_output_segment+0x16c>
 80186b2:	4b10      	ldr	r3, [pc, #64]	; (80186f4 <tcp_output_segment+0x1a0>)
 80186b4:	f240 621c 	movw	r2, #1564	; 0x61c
 80186b8:	4914      	ldr	r1, [pc, #80]	; (801870c <tcp_output_segment+0x1b8>)
 80186ba:	4810      	ldr	r0, [pc, #64]	; (80186fc <tcp_output_segment+0x1a8>)
 80186bc:	f004 f9fa 	bl	801cab4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	6858      	ldr	r0, [r3, #4]
 80186c4:	68b9      	ldr	r1, [r7, #8]
 80186c6:	68bb      	ldr	r3, [r7, #8]
 80186c8:	1d1c      	adds	r4, r3, #4
 80186ca:	68bb      	ldr	r3, [r7, #8]
 80186cc:	7add      	ldrb	r5, [r3, #11]
 80186ce:	68bb      	ldr	r3, [r7, #8]
 80186d0:	7a9b      	ldrb	r3, [r3, #10]
 80186d2:	687a      	ldr	r2, [r7, #4]
 80186d4:	9202      	str	r2, [sp, #8]
 80186d6:	2206      	movs	r2, #6
 80186d8:	9201      	str	r2, [sp, #4]
 80186da:	9300      	str	r3, [sp, #0]
 80186dc:	462b      	mov	r3, r5
 80186de:	4622      	mov	r2, r4
 80186e0:	f002 fd96 	bl	801b210 <ip4_output_if>
 80186e4:	4603      	mov	r3, r0
 80186e6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80186e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80186ec:	4618      	mov	r0, r3
 80186ee:	3720      	adds	r7, #32
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bdb0      	pop	{r4, r5, r7, pc}
 80186f4:	08020288 	.word	0x08020288
 80186f8:	0802084c 	.word	0x0802084c
 80186fc:	080202dc 	.word	0x080202dc
 8018700:	0802086c 	.word	0x0802086c
 8018704:	0802088c 	.word	0x0802088c
 8018708:	2000dd8c 	.word	0x2000dd8c
 801870c:	080208b0 	.word	0x080208b0

08018710 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018710:	b5b0      	push	{r4, r5, r7, lr}
 8018712:	b084      	sub	sp, #16
 8018714:	af00      	add	r7, sp, #0
 8018716:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d106      	bne.n	801872c <tcp_rexmit_rto_prepare+0x1c>
 801871e:	4b31      	ldr	r3, [pc, #196]	; (80187e4 <tcp_rexmit_rto_prepare+0xd4>)
 8018720:	f240 6263 	movw	r2, #1635	; 0x663
 8018724:	4930      	ldr	r1, [pc, #192]	; (80187e8 <tcp_rexmit_rto_prepare+0xd8>)
 8018726:	4831      	ldr	r0, [pc, #196]	; (80187ec <tcp_rexmit_rto_prepare+0xdc>)
 8018728:	f004 f9c4 	bl	801cab4 <iprintf>

  if (pcb->unacked == NULL) {
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018730:	2b00      	cmp	r3, #0
 8018732:	d102      	bne.n	801873a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018734:	f06f 0305 	mvn.w	r3, #5
 8018738:	e050      	b.n	80187dc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801873e:	60fb      	str	r3, [r7, #12]
 8018740:	e00b      	b.n	801875a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018742:	68f8      	ldr	r0, [r7, #12]
 8018744:	f7ff fee6 	bl	8018514 <tcp_output_segment_busy>
 8018748:	4603      	mov	r3, r0
 801874a:	2b00      	cmp	r3, #0
 801874c:	d002      	beq.n	8018754 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801874e:	f06f 0305 	mvn.w	r3, #5
 8018752:	e043      	b.n	80187dc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	60fb      	str	r3, [r7, #12]
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d1ef      	bne.n	8018742 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018762:	68f8      	ldr	r0, [r7, #12]
 8018764:	f7ff fed6 	bl	8018514 <tcp_output_segment_busy>
 8018768:	4603      	mov	r3, r0
 801876a:	2b00      	cmp	r3, #0
 801876c:	d002      	beq.n	8018774 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801876e:	f06f 0305 	mvn.w	r3, #5
 8018772:	e033      	b.n	80187dc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	2200      	movs	r2, #0
 8018788:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	8b5b      	ldrh	r3, [r3, #26]
 801878e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018792:	b29a      	uxth	r2, r3
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	68db      	ldr	r3, [r3, #12]
 801879c:	685b      	ldr	r3, [r3, #4]
 801879e:	4618      	mov	r0, r3
 80187a0:	f7f8 fea1 	bl	80114e6 <lwip_htonl>
 80187a4:	4604      	mov	r4, r0
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	891b      	ldrh	r3, [r3, #8]
 80187aa:	461d      	mov	r5, r3
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	68db      	ldr	r3, [r3, #12]
 80187b0:	899b      	ldrh	r3, [r3, #12]
 80187b2:	b29b      	uxth	r3, r3
 80187b4:	4618      	mov	r0, r3
 80187b6:	f7f8 fe81 	bl	80114bc <lwip_htons>
 80187ba:	4603      	mov	r3, r0
 80187bc:	b2db      	uxtb	r3, r3
 80187be:	f003 0303 	and.w	r3, r3, #3
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d001      	beq.n	80187ca <tcp_rexmit_rto_prepare+0xba>
 80187c6:	2301      	movs	r3, #1
 80187c8:	e000      	b.n	80187cc <tcp_rexmit_rto_prepare+0xbc>
 80187ca:	2300      	movs	r3, #0
 80187cc:	442b      	add	r3, r5
 80187ce:	18e2      	adds	r2, r4, r3
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	2200      	movs	r2, #0
 80187d8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80187da:	2300      	movs	r3, #0
}
 80187dc:	4618      	mov	r0, r3
 80187de:	3710      	adds	r7, #16
 80187e0:	46bd      	mov	sp, r7
 80187e2:	bdb0      	pop	{r4, r5, r7, pc}
 80187e4:	08020288 	.word	0x08020288
 80187e8:	080208c4 	.word	0x080208c4
 80187ec:	080202dc 	.word	0x080202dc

080187f0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b082      	sub	sp, #8
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d106      	bne.n	801880c <tcp_rexmit_rto_commit+0x1c>
 80187fe:	4b0d      	ldr	r3, [pc, #52]	; (8018834 <tcp_rexmit_rto_commit+0x44>)
 8018800:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018804:	490c      	ldr	r1, [pc, #48]	; (8018838 <tcp_rexmit_rto_commit+0x48>)
 8018806:	480d      	ldr	r0, [pc, #52]	; (801883c <tcp_rexmit_rto_commit+0x4c>)
 8018808:	f004 f954 	bl	801cab4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018812:	2bff      	cmp	r3, #255	; 0xff
 8018814:	d007      	beq.n	8018826 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801881c:	3301      	adds	r3, #1
 801881e:	b2da      	uxtb	r2, r3
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018826:	6878      	ldr	r0, [r7, #4]
 8018828:	f7ff fc80 	bl	801812c <tcp_output>
}
 801882c:	bf00      	nop
 801882e:	3708      	adds	r7, #8
 8018830:	46bd      	mov	sp, r7
 8018832:	bd80      	pop	{r7, pc}
 8018834:	08020288 	.word	0x08020288
 8018838:	080208e8 	.word	0x080208e8
 801883c:	080202dc 	.word	0x080202dc

08018840 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018840:	b580      	push	{r7, lr}
 8018842:	b082      	sub	sp, #8
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d106      	bne.n	801885c <tcp_rexmit_rto+0x1c>
 801884e:	4b0a      	ldr	r3, [pc, #40]	; (8018878 <tcp_rexmit_rto+0x38>)
 8018850:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018854:	4909      	ldr	r1, [pc, #36]	; (801887c <tcp_rexmit_rto+0x3c>)
 8018856:	480a      	ldr	r0, [pc, #40]	; (8018880 <tcp_rexmit_rto+0x40>)
 8018858:	f004 f92c 	bl	801cab4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801885c:	6878      	ldr	r0, [r7, #4]
 801885e:	f7ff ff57 	bl	8018710 <tcp_rexmit_rto_prepare>
 8018862:	4603      	mov	r3, r0
 8018864:	2b00      	cmp	r3, #0
 8018866:	d102      	bne.n	801886e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018868:	6878      	ldr	r0, [r7, #4]
 801886a:	f7ff ffc1 	bl	80187f0 <tcp_rexmit_rto_commit>
  }
}
 801886e:	bf00      	nop
 8018870:	3708      	adds	r7, #8
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}
 8018876:	bf00      	nop
 8018878:	08020288 	.word	0x08020288
 801887c:	0802090c 	.word	0x0802090c
 8018880:	080202dc 	.word	0x080202dc

08018884 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018884:	b590      	push	{r4, r7, lr}
 8018886:	b085      	sub	sp, #20
 8018888:	af00      	add	r7, sp, #0
 801888a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d106      	bne.n	80188a0 <tcp_rexmit+0x1c>
 8018892:	4b2f      	ldr	r3, [pc, #188]	; (8018950 <tcp_rexmit+0xcc>)
 8018894:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018898:	492e      	ldr	r1, [pc, #184]	; (8018954 <tcp_rexmit+0xd0>)
 801889a:	482f      	ldr	r0, [pc, #188]	; (8018958 <tcp_rexmit+0xd4>)
 801889c:	f004 f90a 	bl	801cab4 <iprintf>

  if (pcb->unacked == NULL) {
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d102      	bne.n	80188ae <tcp_rexmit+0x2a>
    return ERR_VAL;
 80188a8:	f06f 0305 	mvn.w	r3, #5
 80188ac:	e04c      	b.n	8018948 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80188b2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80188b4:	68b8      	ldr	r0, [r7, #8]
 80188b6:	f7ff fe2d 	bl	8018514 <tcp_output_segment_busy>
 80188ba:	4603      	mov	r3, r0
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d002      	beq.n	80188c6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80188c0:	f06f 0305 	mvn.w	r3, #5
 80188c4:	e040      	b.n	8018948 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80188c6:	68bb      	ldr	r3, [r7, #8]
 80188c8:	681a      	ldr	r2, [r3, #0]
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	336c      	adds	r3, #108	; 0x6c
 80188d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80188d4:	e002      	b.n	80188dc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d011      	beq.n	8018908 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	68db      	ldr	r3, [r3, #12]
 80188ea:	685b      	ldr	r3, [r3, #4]
 80188ec:	4618      	mov	r0, r3
 80188ee:	f7f8 fdfa 	bl	80114e6 <lwip_htonl>
 80188f2:	4604      	mov	r4, r0
 80188f4:	68bb      	ldr	r3, [r7, #8]
 80188f6:	68db      	ldr	r3, [r3, #12]
 80188f8:	685b      	ldr	r3, [r3, #4]
 80188fa:	4618      	mov	r0, r3
 80188fc:	f7f8 fdf3 	bl	80114e6 <lwip_htonl>
 8018900:	4603      	mov	r3, r0
 8018902:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018904:	2b00      	cmp	r3, #0
 8018906:	dbe6      	blt.n	80188d6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	681a      	ldr	r2, [r3, #0]
 801890c:	68bb      	ldr	r3, [r7, #8]
 801890e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	68ba      	ldr	r2, [r7, #8]
 8018914:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018916:	68bb      	ldr	r3, [r7, #8]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d103      	bne.n	8018926 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	2200      	movs	r2, #0
 8018922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801892c:	2bff      	cmp	r3, #255	; 0xff
 801892e:	d007      	beq.n	8018940 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018936:	3301      	adds	r3, #1
 8018938:	b2da      	uxtb	r2, r3
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	2200      	movs	r2, #0
 8018944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018946:	2300      	movs	r3, #0
}
 8018948:	4618      	mov	r0, r3
 801894a:	3714      	adds	r7, #20
 801894c:	46bd      	mov	sp, r7
 801894e:	bd90      	pop	{r4, r7, pc}
 8018950:	08020288 	.word	0x08020288
 8018954:	08020928 	.word	0x08020928
 8018958:	080202dc 	.word	0x080202dc

0801895c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801895c:	b580      	push	{r7, lr}
 801895e:	b082      	sub	sp, #8
 8018960:	af00      	add	r7, sp, #0
 8018962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d106      	bne.n	8018978 <tcp_rexmit_fast+0x1c>
 801896a:	4b2a      	ldr	r3, [pc, #168]	; (8018a14 <tcp_rexmit_fast+0xb8>)
 801896c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018970:	4929      	ldr	r1, [pc, #164]	; (8018a18 <tcp_rexmit_fast+0xbc>)
 8018972:	482a      	ldr	r0, [pc, #168]	; (8018a1c <tcp_rexmit_fast+0xc0>)
 8018974:	f004 f89e 	bl	801cab4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801897c:	2b00      	cmp	r3, #0
 801897e:	d044      	beq.n	8018a0a <tcp_rexmit_fast+0xae>
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	8b5b      	ldrh	r3, [r3, #26]
 8018984:	f003 0304 	and.w	r3, r3, #4
 8018988:	2b00      	cmp	r3, #0
 801898a:	d13e      	bne.n	8018a0a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801898c:	6878      	ldr	r0, [r7, #4]
 801898e:	f7ff ff79 	bl	8018884 <tcp_rexmit>
 8018992:	4603      	mov	r3, r0
 8018994:	2b00      	cmp	r3, #0
 8018996:	d138      	bne.n	8018a0a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80189a4:	4293      	cmp	r3, r2
 80189a6:	bf28      	it	cs
 80189a8:	4613      	movcs	r3, r2
 80189aa:	b29b      	uxth	r3, r3
 80189ac:	0fda      	lsrs	r2, r3, #31
 80189ae:	4413      	add	r3, r2
 80189b0:	105b      	asrs	r3, r3, #1
 80189b2:	b29a      	uxth	r2, r3
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80189c0:	461a      	mov	r2, r3
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80189c6:	005b      	lsls	r3, r3, #1
 80189c8:	429a      	cmp	r2, r3
 80189ca:	d206      	bcs.n	80189da <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80189d0:	005b      	lsls	r3, r3, #1
 80189d2:	b29a      	uxth	r2, r3
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80189e4:	4619      	mov	r1, r3
 80189e6:	0049      	lsls	r1, r1, #1
 80189e8:	440b      	add	r3, r1
 80189ea:	b29b      	uxth	r3, r3
 80189ec:	4413      	add	r3, r2
 80189ee:	b29a      	uxth	r2, r3
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	8b5b      	ldrh	r3, [r3, #26]
 80189fa:	f043 0304 	orr.w	r3, r3, #4
 80189fe:	b29a      	uxth	r2, r3
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	2200      	movs	r2, #0
 8018a08:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8018a0a:	bf00      	nop
 8018a0c:	3708      	adds	r7, #8
 8018a0e:	46bd      	mov	sp, r7
 8018a10:	bd80      	pop	{r7, pc}
 8018a12:	bf00      	nop
 8018a14:	08020288 	.word	0x08020288
 8018a18:	08020940 	.word	0x08020940
 8018a1c:	080202dc 	.word	0x080202dc

08018a20 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b086      	sub	sp, #24
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	60f8      	str	r0, [r7, #12]
 8018a28:	607b      	str	r3, [r7, #4]
 8018a2a:	460b      	mov	r3, r1
 8018a2c:	817b      	strh	r3, [r7, #10]
 8018a2e:	4613      	mov	r3, r2
 8018a30:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018a32:	897a      	ldrh	r2, [r7, #10]
 8018a34:	893b      	ldrh	r3, [r7, #8]
 8018a36:	4413      	add	r3, r2
 8018a38:	b29b      	uxth	r3, r3
 8018a3a:	3314      	adds	r3, #20
 8018a3c:	b29b      	uxth	r3, r3
 8018a3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a42:	4619      	mov	r1, r3
 8018a44:	2022      	movs	r0, #34	; 0x22
 8018a46:	f7f9 fd9d 	bl	8012584 <pbuf_alloc>
 8018a4a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018a4c:	697b      	ldr	r3, [r7, #20]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d04d      	beq.n	8018aee <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018a52:	897b      	ldrh	r3, [r7, #10]
 8018a54:	3313      	adds	r3, #19
 8018a56:	697a      	ldr	r2, [r7, #20]
 8018a58:	8952      	ldrh	r2, [r2, #10]
 8018a5a:	4293      	cmp	r3, r2
 8018a5c:	db06      	blt.n	8018a6c <tcp_output_alloc_header_common+0x4c>
 8018a5e:	4b26      	ldr	r3, [pc, #152]	; (8018af8 <tcp_output_alloc_header_common+0xd8>)
 8018a60:	f240 7223 	movw	r2, #1827	; 0x723
 8018a64:	4925      	ldr	r1, [pc, #148]	; (8018afc <tcp_output_alloc_header_common+0xdc>)
 8018a66:	4826      	ldr	r0, [pc, #152]	; (8018b00 <tcp_output_alloc_header_common+0xe0>)
 8018a68:	f004 f824 	bl	801cab4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018a6c:	697b      	ldr	r3, [r7, #20]
 8018a6e:	685b      	ldr	r3, [r3, #4]
 8018a70:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018a72:	8c3b      	ldrh	r3, [r7, #32]
 8018a74:	4618      	mov	r0, r3
 8018a76:	f7f8 fd21 	bl	80114bc <lwip_htons>
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	461a      	mov	r2, r3
 8018a7e:	693b      	ldr	r3, [r7, #16]
 8018a80:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018a82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a84:	4618      	mov	r0, r3
 8018a86:	f7f8 fd19 	bl	80114bc <lwip_htons>
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	461a      	mov	r2, r3
 8018a8e:	693b      	ldr	r3, [r7, #16]
 8018a90:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018a92:	693b      	ldr	r3, [r7, #16]
 8018a94:	687a      	ldr	r2, [r7, #4]
 8018a96:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018a98:	68f8      	ldr	r0, [r7, #12]
 8018a9a:	f7f8 fd24 	bl	80114e6 <lwip_htonl>
 8018a9e:	4602      	mov	r2, r0
 8018aa0:	693b      	ldr	r3, [r7, #16]
 8018aa2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018aa4:	897b      	ldrh	r3, [r7, #10]
 8018aa6:	089b      	lsrs	r3, r3, #2
 8018aa8:	b29b      	uxth	r3, r3
 8018aaa:	3305      	adds	r3, #5
 8018aac:	b29b      	uxth	r3, r3
 8018aae:	031b      	lsls	r3, r3, #12
 8018ab0:	b29a      	uxth	r2, r3
 8018ab2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018ab6:	b29b      	uxth	r3, r3
 8018ab8:	4313      	orrs	r3, r2
 8018aba:	b29b      	uxth	r3, r3
 8018abc:	4618      	mov	r0, r3
 8018abe:	f7f8 fcfd 	bl	80114bc <lwip_htons>
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	461a      	mov	r2, r3
 8018ac6:	693b      	ldr	r3, [r7, #16]
 8018ac8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018aca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018acc:	4618      	mov	r0, r3
 8018ace:	f7f8 fcf5 	bl	80114bc <lwip_htons>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	461a      	mov	r2, r3
 8018ad6:	693b      	ldr	r3, [r7, #16]
 8018ad8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018ada:	693b      	ldr	r3, [r7, #16]
 8018adc:	2200      	movs	r2, #0
 8018ade:	741a      	strb	r2, [r3, #16]
 8018ae0:	2200      	movs	r2, #0
 8018ae2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018ae4:	693b      	ldr	r3, [r7, #16]
 8018ae6:	2200      	movs	r2, #0
 8018ae8:	749a      	strb	r2, [r3, #18]
 8018aea:	2200      	movs	r2, #0
 8018aec:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018aee:	697b      	ldr	r3, [r7, #20]
}
 8018af0:	4618      	mov	r0, r3
 8018af2:	3718      	adds	r7, #24
 8018af4:	46bd      	mov	sp, r7
 8018af6:	bd80      	pop	{r7, pc}
 8018af8:	08020288 	.word	0x08020288
 8018afc:	08020960 	.word	0x08020960
 8018b00:	080202dc 	.word	0x080202dc

08018b04 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018b04:	b5b0      	push	{r4, r5, r7, lr}
 8018b06:	b08a      	sub	sp, #40	; 0x28
 8018b08:	af04      	add	r7, sp, #16
 8018b0a:	60f8      	str	r0, [r7, #12]
 8018b0c:	607b      	str	r3, [r7, #4]
 8018b0e:	460b      	mov	r3, r1
 8018b10:	817b      	strh	r3, [r7, #10]
 8018b12:	4613      	mov	r3, r2
 8018b14:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d106      	bne.n	8018b2a <tcp_output_alloc_header+0x26>
 8018b1c:	4b15      	ldr	r3, [pc, #84]	; (8018b74 <tcp_output_alloc_header+0x70>)
 8018b1e:	f240 7242 	movw	r2, #1858	; 0x742
 8018b22:	4915      	ldr	r1, [pc, #84]	; (8018b78 <tcp_output_alloc_header+0x74>)
 8018b24:	4815      	ldr	r0, [pc, #84]	; (8018b7c <tcp_output_alloc_header+0x78>)
 8018b26:	f003 ffc5 	bl	801cab4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	8adb      	ldrh	r3, [r3, #22]
 8018b32:	68fa      	ldr	r2, [r7, #12]
 8018b34:	8b12      	ldrh	r2, [r2, #24]
 8018b36:	68f9      	ldr	r1, [r7, #12]
 8018b38:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8018b3a:	893d      	ldrh	r5, [r7, #8]
 8018b3c:	897c      	ldrh	r4, [r7, #10]
 8018b3e:	9103      	str	r1, [sp, #12]
 8018b40:	2110      	movs	r1, #16
 8018b42:	9102      	str	r1, [sp, #8]
 8018b44:	9201      	str	r2, [sp, #4]
 8018b46:	9300      	str	r3, [sp, #0]
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	462a      	mov	r2, r5
 8018b4c:	4621      	mov	r1, r4
 8018b4e:	f7ff ff67 	bl	8018a20 <tcp_output_alloc_header_common>
 8018b52:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018b54:	697b      	ldr	r3, [r7, #20]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d006      	beq.n	8018b68 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b5e:	68fa      	ldr	r2, [r7, #12]
 8018b60:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018b62:	441a      	add	r2, r3
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018b68:	697b      	ldr	r3, [r7, #20]
}
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	3718      	adds	r7, #24
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	bdb0      	pop	{r4, r5, r7, pc}
 8018b72:	bf00      	nop
 8018b74:	08020288 	.word	0x08020288
 8018b78:	08020990 	.word	0x08020990
 8018b7c:	080202dc 	.word	0x080202dc

08018b80 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b088      	sub	sp, #32
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	60f8      	str	r0, [r7, #12]
 8018b88:	60b9      	str	r1, [r7, #8]
 8018b8a:	4611      	mov	r1, r2
 8018b8c:	461a      	mov	r2, r3
 8018b8e:	460b      	mov	r3, r1
 8018b90:	71fb      	strb	r3, [r7, #7]
 8018b92:	4613      	mov	r3, r2
 8018b94:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018b96:	2300      	movs	r3, #0
 8018b98:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018b9a:	68bb      	ldr	r3, [r7, #8]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d106      	bne.n	8018bae <tcp_output_fill_options+0x2e>
 8018ba0:	4b13      	ldr	r3, [pc, #76]	; (8018bf0 <tcp_output_fill_options+0x70>)
 8018ba2:	f240 7256 	movw	r2, #1878	; 0x756
 8018ba6:	4913      	ldr	r1, [pc, #76]	; (8018bf4 <tcp_output_fill_options+0x74>)
 8018ba8:	4813      	ldr	r0, [pc, #76]	; (8018bf8 <tcp_output_fill_options+0x78>)
 8018baa:	f003 ff83 	bl	801cab4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018bae:	68bb      	ldr	r3, [r7, #8]
 8018bb0:	685b      	ldr	r3, [r3, #4]
 8018bb2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018bb4:	69bb      	ldr	r3, [r7, #24]
 8018bb6:	3314      	adds	r3, #20
 8018bb8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018bba:	69bb      	ldr	r3, [r7, #24]
 8018bbc:	f103 0214 	add.w	r2, r3, #20
 8018bc0:	8bfb      	ldrh	r3, [r7, #30]
 8018bc2:	009b      	lsls	r3, r3, #2
 8018bc4:	4619      	mov	r1, r3
 8018bc6:	79fb      	ldrb	r3, [r7, #7]
 8018bc8:	009b      	lsls	r3, r3, #2
 8018bca:	f003 0304 	and.w	r3, r3, #4
 8018bce:	440b      	add	r3, r1
 8018bd0:	4413      	add	r3, r2
 8018bd2:	697a      	ldr	r2, [r7, #20]
 8018bd4:	429a      	cmp	r2, r3
 8018bd6:	d006      	beq.n	8018be6 <tcp_output_fill_options+0x66>
 8018bd8:	4b05      	ldr	r3, [pc, #20]	; (8018bf0 <tcp_output_fill_options+0x70>)
 8018bda:	f240 7275 	movw	r2, #1909	; 0x775
 8018bde:	4907      	ldr	r1, [pc, #28]	; (8018bfc <tcp_output_fill_options+0x7c>)
 8018be0:	4805      	ldr	r0, [pc, #20]	; (8018bf8 <tcp_output_fill_options+0x78>)
 8018be2:	f003 ff67 	bl	801cab4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018be6:	bf00      	nop
 8018be8:	3720      	adds	r7, #32
 8018bea:	46bd      	mov	sp, r7
 8018bec:	bd80      	pop	{r7, pc}
 8018bee:	bf00      	nop
 8018bf0:	08020288 	.word	0x08020288
 8018bf4:	080209b8 	.word	0x080209b8
 8018bf8:	080202dc 	.word	0x080202dc
 8018bfc:	080208b0 	.word	0x080208b0

08018c00 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b08a      	sub	sp, #40	; 0x28
 8018c04:	af04      	add	r7, sp, #16
 8018c06:	60f8      	str	r0, [r7, #12]
 8018c08:	60b9      	str	r1, [r7, #8]
 8018c0a:	607a      	str	r2, [r7, #4]
 8018c0c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8018c0e:	68bb      	ldr	r3, [r7, #8]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d106      	bne.n	8018c22 <tcp_output_control_segment+0x22>
 8018c14:	4b1c      	ldr	r3, [pc, #112]	; (8018c88 <tcp_output_control_segment+0x88>)
 8018c16:	f240 7287 	movw	r2, #1927	; 0x787
 8018c1a:	491c      	ldr	r1, [pc, #112]	; (8018c8c <tcp_output_control_segment+0x8c>)
 8018c1c:	481c      	ldr	r0, [pc, #112]	; (8018c90 <tcp_output_control_segment+0x90>)
 8018c1e:	f003 ff49 	bl	801cab4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8018c22:	683a      	ldr	r2, [r7, #0]
 8018c24:	6879      	ldr	r1, [r7, #4]
 8018c26:	68f8      	ldr	r0, [r7, #12]
 8018c28:	f7fe fae8 	bl	80171fc <tcp_route>
 8018c2c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8018c2e:	693b      	ldr	r3, [r7, #16]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d102      	bne.n	8018c3a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018c34:	23fc      	movs	r3, #252	; 0xfc
 8018c36:	75fb      	strb	r3, [r7, #23]
 8018c38:	e01c      	b.n	8018c74 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d006      	beq.n	8018c4e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8018c40:	68fb      	ldr	r3, [r7, #12]
 8018c42:	7adb      	ldrb	r3, [r3, #11]
 8018c44:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	7a9b      	ldrb	r3, [r3, #10]
 8018c4a:	757b      	strb	r3, [r7, #21]
 8018c4c:	e003      	b.n	8018c56 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8018c4e:	23ff      	movs	r3, #255	; 0xff
 8018c50:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8018c52:	2300      	movs	r3, #0
 8018c54:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018c56:	7dba      	ldrb	r2, [r7, #22]
 8018c58:	693b      	ldr	r3, [r7, #16]
 8018c5a:	9302      	str	r3, [sp, #8]
 8018c5c:	2306      	movs	r3, #6
 8018c5e:	9301      	str	r3, [sp, #4]
 8018c60:	7d7b      	ldrb	r3, [r7, #21]
 8018c62:	9300      	str	r3, [sp, #0]
 8018c64:	4613      	mov	r3, r2
 8018c66:	683a      	ldr	r2, [r7, #0]
 8018c68:	6879      	ldr	r1, [r7, #4]
 8018c6a:	68b8      	ldr	r0, [r7, #8]
 8018c6c:	f002 fad0 	bl	801b210 <ip4_output_if>
 8018c70:	4603      	mov	r3, r0
 8018c72:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8018c74:	68b8      	ldr	r0, [r7, #8]
 8018c76:	f7f9 ff69 	bl	8012b4c <pbuf_free>
  return err;
 8018c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018c7e:	4618      	mov	r0, r3
 8018c80:	3718      	adds	r7, #24
 8018c82:	46bd      	mov	sp, r7
 8018c84:	bd80      	pop	{r7, pc}
 8018c86:	bf00      	nop
 8018c88:	08020288 	.word	0x08020288
 8018c8c:	080209e0 	.word	0x080209e0
 8018c90:	080202dc 	.word	0x080202dc

08018c94 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018c94:	b590      	push	{r4, r7, lr}
 8018c96:	b08b      	sub	sp, #44	; 0x2c
 8018c98:	af04      	add	r7, sp, #16
 8018c9a:	60f8      	str	r0, [r7, #12]
 8018c9c:	60b9      	str	r1, [r7, #8]
 8018c9e:	607a      	str	r2, [r7, #4]
 8018ca0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8018ca2:	683b      	ldr	r3, [r7, #0]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d106      	bne.n	8018cb6 <tcp_rst+0x22>
 8018ca8:	4b1f      	ldr	r3, [pc, #124]	; (8018d28 <tcp_rst+0x94>)
 8018caa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8018cae:	491f      	ldr	r1, [pc, #124]	; (8018d2c <tcp_rst+0x98>)
 8018cb0:	481f      	ldr	r0, [pc, #124]	; (8018d30 <tcp_rst+0x9c>)
 8018cb2:	f003 feff 	bl	801cab4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d106      	bne.n	8018cca <tcp_rst+0x36>
 8018cbc:	4b1a      	ldr	r3, [pc, #104]	; (8018d28 <tcp_rst+0x94>)
 8018cbe:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8018cc2:	491c      	ldr	r1, [pc, #112]	; (8018d34 <tcp_rst+0xa0>)
 8018cc4:	481a      	ldr	r0, [pc, #104]	; (8018d30 <tcp_rst+0x9c>)
 8018cc6:	f003 fef5 	bl	801cab4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018cca:	2300      	movs	r3, #0
 8018ccc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8018cce:	f246 0308 	movw	r3, #24584	; 0x6008
 8018cd2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018cd4:	7dfb      	ldrb	r3, [r7, #23]
 8018cd6:	b29c      	uxth	r4, r3
 8018cd8:	68b8      	ldr	r0, [r7, #8]
 8018cda:	f7f8 fc04 	bl	80114e6 <lwip_htonl>
 8018cde:	4602      	mov	r2, r0
 8018ce0:	8abb      	ldrh	r3, [r7, #20]
 8018ce2:	9303      	str	r3, [sp, #12]
 8018ce4:	2314      	movs	r3, #20
 8018ce6:	9302      	str	r3, [sp, #8]
 8018ce8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018cea:	9301      	str	r3, [sp, #4]
 8018cec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018cee:	9300      	str	r3, [sp, #0]
 8018cf0:	4613      	mov	r3, r2
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	4621      	mov	r1, r4
 8018cf6:	6878      	ldr	r0, [r7, #4]
 8018cf8:	f7ff fe92 	bl	8018a20 <tcp_output_alloc_header_common>
 8018cfc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8018cfe:	693b      	ldr	r3, [r7, #16]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d00c      	beq.n	8018d1e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018d04:	7dfb      	ldrb	r3, [r7, #23]
 8018d06:	2200      	movs	r2, #0
 8018d08:	6939      	ldr	r1, [r7, #16]
 8018d0a:	68f8      	ldr	r0, [r7, #12]
 8018d0c:	f7ff ff38 	bl	8018b80 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8018d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d12:	683a      	ldr	r2, [r7, #0]
 8018d14:	6939      	ldr	r1, [r7, #16]
 8018d16:	68f8      	ldr	r0, [r7, #12]
 8018d18:	f7ff ff72 	bl	8018c00 <tcp_output_control_segment>
 8018d1c:	e000      	b.n	8018d20 <tcp_rst+0x8c>
    return;
 8018d1e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018d20:	371c      	adds	r7, #28
 8018d22:	46bd      	mov	sp, r7
 8018d24:	bd90      	pop	{r4, r7, pc}
 8018d26:	bf00      	nop
 8018d28:	08020288 	.word	0x08020288
 8018d2c:	08020a0c 	.word	0x08020a0c
 8018d30:	080202dc 	.word	0x080202dc
 8018d34:	08020a28 	.word	0x08020a28

08018d38 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018d38:	b590      	push	{r4, r7, lr}
 8018d3a:	b087      	sub	sp, #28
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8018d40:	2300      	movs	r3, #0
 8018d42:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018d44:	2300      	movs	r3, #0
 8018d46:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d106      	bne.n	8018d5c <tcp_send_empty_ack+0x24>
 8018d4e:	4b28      	ldr	r3, [pc, #160]	; (8018df0 <tcp_send_empty_ack+0xb8>)
 8018d50:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8018d54:	4927      	ldr	r1, [pc, #156]	; (8018df4 <tcp_send_empty_ack+0xbc>)
 8018d56:	4828      	ldr	r0, [pc, #160]	; (8018df8 <tcp_send_empty_ack+0xc0>)
 8018d58:	f003 feac 	bl	801cab4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018d5c:	7dfb      	ldrb	r3, [r7, #23]
 8018d5e:	009b      	lsls	r3, r3, #2
 8018d60:	b2db      	uxtb	r3, r3
 8018d62:	f003 0304 	and.w	r3, r3, #4
 8018d66:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018d68:	7d7b      	ldrb	r3, [r7, #21]
 8018d6a:	b29c      	uxth	r4, r3
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d70:	4618      	mov	r0, r3
 8018d72:	f7f8 fbb8 	bl	80114e6 <lwip_htonl>
 8018d76:	4603      	mov	r3, r0
 8018d78:	2200      	movs	r2, #0
 8018d7a:	4621      	mov	r1, r4
 8018d7c:	6878      	ldr	r0, [r7, #4]
 8018d7e:	f7ff fec1 	bl	8018b04 <tcp_output_alloc_header>
 8018d82:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018d84:	693b      	ldr	r3, [r7, #16]
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d109      	bne.n	8018d9e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	8b5b      	ldrh	r3, [r3, #26]
 8018d8e:	f043 0303 	orr.w	r3, r3, #3
 8018d92:	b29a      	uxth	r2, r3
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8018d98:	f06f 0301 	mvn.w	r3, #1
 8018d9c:	e023      	b.n	8018de6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8018d9e:	7dbb      	ldrb	r3, [r7, #22]
 8018da0:	7dfa      	ldrb	r2, [r7, #23]
 8018da2:	6939      	ldr	r1, [r7, #16]
 8018da4:	6878      	ldr	r0, [r7, #4]
 8018da6:	f7ff feeb 	bl	8018b80 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018daa:	687a      	ldr	r2, [r7, #4]
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	3304      	adds	r3, #4
 8018db0:	6939      	ldr	r1, [r7, #16]
 8018db2:	6878      	ldr	r0, [r7, #4]
 8018db4:	f7ff ff24 	bl	8018c00 <tcp_output_control_segment>
 8018db8:	4603      	mov	r3, r0
 8018dba:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d007      	beq.n	8018dd4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	8b5b      	ldrh	r3, [r3, #26]
 8018dc8:	f043 0303 	orr.w	r3, r3, #3
 8018dcc:	b29a      	uxth	r2, r3
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	835a      	strh	r2, [r3, #26]
 8018dd2:	e006      	b.n	8018de2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	8b5b      	ldrh	r3, [r3, #26]
 8018dd8:	f023 0303 	bic.w	r3, r3, #3
 8018ddc:	b29a      	uxth	r2, r3
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8018de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018de6:	4618      	mov	r0, r3
 8018de8:	371c      	adds	r7, #28
 8018dea:	46bd      	mov	sp, r7
 8018dec:	bd90      	pop	{r4, r7, pc}
 8018dee:	bf00      	nop
 8018df0:	08020288 	.word	0x08020288
 8018df4:	08020a44 	.word	0x08020a44
 8018df8:	080202dc 	.word	0x080202dc

08018dfc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018dfc:	b590      	push	{r4, r7, lr}
 8018dfe:	b087      	sub	sp, #28
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018e04:	2300      	movs	r3, #0
 8018e06:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d106      	bne.n	8018e1c <tcp_keepalive+0x20>
 8018e0e:	4b18      	ldr	r3, [pc, #96]	; (8018e70 <tcp_keepalive+0x74>)
 8018e10:	f640 0224 	movw	r2, #2084	; 0x824
 8018e14:	4917      	ldr	r1, [pc, #92]	; (8018e74 <tcp_keepalive+0x78>)
 8018e16:	4818      	ldr	r0, [pc, #96]	; (8018e78 <tcp_keepalive+0x7c>)
 8018e18:	f003 fe4c 	bl	801cab4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018e1c:	7dfb      	ldrb	r3, [r7, #23]
 8018e1e:	b29c      	uxth	r4, r3
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e24:	3b01      	subs	r3, #1
 8018e26:	4618      	mov	r0, r3
 8018e28:	f7f8 fb5d 	bl	80114e6 <lwip_htonl>
 8018e2c:	4603      	mov	r3, r0
 8018e2e:	2200      	movs	r2, #0
 8018e30:	4621      	mov	r1, r4
 8018e32:	6878      	ldr	r0, [r7, #4]
 8018e34:	f7ff fe66 	bl	8018b04 <tcp_output_alloc_header>
 8018e38:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018e3a:	693b      	ldr	r3, [r7, #16]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d102      	bne.n	8018e46 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8018e40:	f04f 33ff 	mov.w	r3, #4294967295
 8018e44:	e010      	b.n	8018e68 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018e46:	7dfb      	ldrb	r3, [r7, #23]
 8018e48:	2200      	movs	r2, #0
 8018e4a:	6939      	ldr	r1, [r7, #16]
 8018e4c:	6878      	ldr	r0, [r7, #4]
 8018e4e:	f7ff fe97 	bl	8018b80 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018e52:	687a      	ldr	r2, [r7, #4]
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	3304      	adds	r3, #4
 8018e58:	6939      	ldr	r1, [r7, #16]
 8018e5a:	6878      	ldr	r0, [r7, #4]
 8018e5c:	f7ff fed0 	bl	8018c00 <tcp_output_control_segment>
 8018e60:	4603      	mov	r3, r0
 8018e62:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018e68:	4618      	mov	r0, r3
 8018e6a:	371c      	adds	r7, #28
 8018e6c:	46bd      	mov	sp, r7
 8018e6e:	bd90      	pop	{r4, r7, pc}
 8018e70:	08020288 	.word	0x08020288
 8018e74:	08020a64 	.word	0x08020a64
 8018e78:	080202dc 	.word	0x080202dc

08018e7c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8018e7c:	b590      	push	{r4, r7, lr}
 8018e7e:	b08b      	sub	sp, #44	; 0x2c
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018e84:	2300      	movs	r3, #0
 8018e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d106      	bne.n	8018e9e <tcp_zero_window_probe+0x22>
 8018e90:	4b4c      	ldr	r3, [pc, #304]	; (8018fc4 <tcp_zero_window_probe+0x148>)
 8018e92:	f640 024f 	movw	r2, #2127	; 0x84f
 8018e96:	494c      	ldr	r1, [pc, #304]	; (8018fc8 <tcp_zero_window_probe+0x14c>)
 8018e98:	484c      	ldr	r0, [pc, #304]	; (8018fcc <tcp_zero_window_probe+0x150>)
 8018e9a:	f003 fe0b 	bl	801cab4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018ea2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8018ea4:	6a3b      	ldr	r3, [r7, #32]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d101      	bne.n	8018eae <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8018eaa:	2300      	movs	r3, #0
 8018eac:	e086      	b.n	8018fbc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018eb4:	2bff      	cmp	r3, #255	; 0xff
 8018eb6:	d007      	beq.n	8018ec8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018ebe:	3301      	adds	r3, #1
 8018ec0:	b2da      	uxtb	r2, r3
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018ec8:	6a3b      	ldr	r3, [r7, #32]
 8018eca:	68db      	ldr	r3, [r3, #12]
 8018ecc:	899b      	ldrh	r3, [r3, #12]
 8018ece:	b29b      	uxth	r3, r3
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	f7f8 faf3 	bl	80114bc <lwip_htons>
 8018ed6:	4603      	mov	r3, r0
 8018ed8:	b2db      	uxtb	r3, r3
 8018eda:	f003 0301 	and.w	r3, r3, #1
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d005      	beq.n	8018eee <tcp_zero_window_probe+0x72>
 8018ee2:	6a3b      	ldr	r3, [r7, #32]
 8018ee4:	891b      	ldrh	r3, [r3, #8]
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d101      	bne.n	8018eee <tcp_zero_window_probe+0x72>
 8018eea:	2301      	movs	r3, #1
 8018eec:	e000      	b.n	8018ef0 <tcp_zero_window_probe+0x74>
 8018eee:	2300      	movs	r3, #0
 8018ef0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018ef2:	7ffb      	ldrb	r3, [r7, #31]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	bf0c      	ite	eq
 8018ef8:	2301      	moveq	r3, #1
 8018efa:	2300      	movne	r3, #0
 8018efc:	b2db      	uxtb	r3, r3
 8018efe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f04:	b299      	uxth	r1, r3
 8018f06:	6a3b      	ldr	r3, [r7, #32]
 8018f08:	68db      	ldr	r3, [r3, #12]
 8018f0a:	685b      	ldr	r3, [r3, #4]
 8018f0c:	8bba      	ldrh	r2, [r7, #28]
 8018f0e:	6878      	ldr	r0, [r7, #4]
 8018f10:	f7ff fdf8 	bl	8018b04 <tcp_output_alloc_header>
 8018f14:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018f16:	69bb      	ldr	r3, [r7, #24]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d102      	bne.n	8018f22 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8018f20:	e04c      	b.n	8018fbc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018f22:	69bb      	ldr	r3, [r7, #24]
 8018f24:	685b      	ldr	r3, [r3, #4]
 8018f26:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018f28:	7ffb      	ldrb	r3, [r7, #31]
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d011      	beq.n	8018f52 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018f2e:	697b      	ldr	r3, [r7, #20]
 8018f30:	899b      	ldrh	r3, [r3, #12]
 8018f32:	b29b      	uxth	r3, r3
 8018f34:	b21b      	sxth	r3, r3
 8018f36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018f3a:	b21c      	sxth	r4, r3
 8018f3c:	2011      	movs	r0, #17
 8018f3e:	f7f8 fabd 	bl	80114bc <lwip_htons>
 8018f42:	4603      	mov	r3, r0
 8018f44:	b21b      	sxth	r3, r3
 8018f46:	4323      	orrs	r3, r4
 8018f48:	b21b      	sxth	r3, r3
 8018f4a:	b29a      	uxth	r2, r3
 8018f4c:	697b      	ldr	r3, [r7, #20]
 8018f4e:	819a      	strh	r2, [r3, #12]
 8018f50:	e010      	b.n	8018f74 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8018f52:	69bb      	ldr	r3, [r7, #24]
 8018f54:	685b      	ldr	r3, [r3, #4]
 8018f56:	3314      	adds	r3, #20
 8018f58:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018f5a:	6a3b      	ldr	r3, [r7, #32]
 8018f5c:	6858      	ldr	r0, [r3, #4]
 8018f5e:	6a3b      	ldr	r3, [r7, #32]
 8018f60:	685b      	ldr	r3, [r3, #4]
 8018f62:	891a      	ldrh	r2, [r3, #8]
 8018f64:	6a3b      	ldr	r3, [r7, #32]
 8018f66:	891b      	ldrh	r3, [r3, #8]
 8018f68:	1ad3      	subs	r3, r2, r3
 8018f6a:	b29b      	uxth	r3, r3
 8018f6c:	2201      	movs	r2, #1
 8018f6e:	6939      	ldr	r1, [r7, #16]
 8018f70:	f7f9 fff2 	bl	8012f58 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018f74:	6a3b      	ldr	r3, [r7, #32]
 8018f76:	68db      	ldr	r3, [r3, #12]
 8018f78:	685b      	ldr	r3, [r3, #4]
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	f7f8 fab3 	bl	80114e6 <lwip_htonl>
 8018f80:	4603      	mov	r3, r0
 8018f82:	3301      	adds	r3, #1
 8018f84:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	1ad3      	subs	r3, r2, r3
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	da02      	bge.n	8018f98 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	68fa      	ldr	r2, [r7, #12]
 8018f96:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	69b9      	ldr	r1, [r7, #24]
 8018fa0:	6878      	ldr	r0, [r7, #4]
 8018fa2:	f7ff fded 	bl	8018b80 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018fa6:	687a      	ldr	r2, [r7, #4]
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	3304      	adds	r3, #4
 8018fac:	69b9      	ldr	r1, [r7, #24]
 8018fae:	6878      	ldr	r0, [r7, #4]
 8018fb0:	f7ff fe26 	bl	8018c00 <tcp_output_control_segment>
 8018fb4:	4603      	mov	r3, r0
 8018fb6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018fb8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	372c      	adds	r7, #44	; 0x2c
 8018fc0:	46bd      	mov	sp, r7
 8018fc2:	bd90      	pop	{r4, r7, pc}
 8018fc4:	08020288 	.word	0x08020288
 8018fc8:	08020a80 	.word	0x08020a80
 8018fcc:	080202dc 	.word	0x080202dc

08018fd0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8018fd0:	b580      	push	{r7, lr}
 8018fd2:	b082      	sub	sp, #8
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8018fd8:	f7fa f8ac 	bl	8013134 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8018fdc:	4b0a      	ldr	r3, [pc, #40]	; (8019008 <tcpip_tcp_timer+0x38>)
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d103      	bne.n	8018fec <tcpip_tcp_timer+0x1c>
 8018fe4:	4b09      	ldr	r3, [pc, #36]	; (801900c <tcpip_tcp_timer+0x3c>)
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d005      	beq.n	8018ff8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018fec:	2200      	movs	r2, #0
 8018fee:	4908      	ldr	r1, [pc, #32]	; (8019010 <tcpip_tcp_timer+0x40>)
 8018ff0:	20fa      	movs	r0, #250	; 0xfa
 8018ff2:	f000 f8f3 	bl	80191dc <sys_timeout>
 8018ff6:	e003      	b.n	8019000 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018ff8:	4b06      	ldr	r3, [pc, #24]	; (8019014 <tcpip_tcp_timer+0x44>)
 8018ffa:	2200      	movs	r2, #0
 8018ffc:	601a      	str	r2, [r3, #0]
  }
}
 8018ffe:	bf00      	nop
 8019000:	bf00      	nop
 8019002:	3708      	adds	r7, #8
 8019004:	46bd      	mov	sp, r7
 8019006:	bd80      	pop	{r7, pc}
 8019008:	2000dd98 	.word	0x2000dd98
 801900c:	2000dd9c 	.word	0x2000dd9c
 8019010:	08018fd1 	.word	0x08018fd1
 8019014:	2000dde4 	.word	0x2000dde4

08019018 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019018:	b580      	push	{r7, lr}
 801901a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801901c:	4b0a      	ldr	r3, [pc, #40]	; (8019048 <tcp_timer_needed+0x30>)
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	2b00      	cmp	r3, #0
 8019022:	d10f      	bne.n	8019044 <tcp_timer_needed+0x2c>
 8019024:	4b09      	ldr	r3, [pc, #36]	; (801904c <tcp_timer_needed+0x34>)
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d103      	bne.n	8019034 <tcp_timer_needed+0x1c>
 801902c:	4b08      	ldr	r3, [pc, #32]	; (8019050 <tcp_timer_needed+0x38>)
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d007      	beq.n	8019044 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019034:	4b04      	ldr	r3, [pc, #16]	; (8019048 <tcp_timer_needed+0x30>)
 8019036:	2201      	movs	r2, #1
 8019038:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801903a:	2200      	movs	r2, #0
 801903c:	4905      	ldr	r1, [pc, #20]	; (8019054 <tcp_timer_needed+0x3c>)
 801903e:	20fa      	movs	r0, #250	; 0xfa
 8019040:	f000 f8cc 	bl	80191dc <sys_timeout>
  }
}
 8019044:	bf00      	nop
 8019046:	bd80      	pop	{r7, pc}
 8019048:	2000dde4 	.word	0x2000dde4
 801904c:	2000dd98 	.word	0x2000dd98
 8019050:	2000dd9c 	.word	0x2000dd9c
 8019054:	08018fd1 	.word	0x08018fd1

08019058 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019058:	b580      	push	{r7, lr}
 801905a:	b086      	sub	sp, #24
 801905c:	af00      	add	r7, sp, #0
 801905e:	60f8      	str	r0, [r7, #12]
 8019060:	60b9      	str	r1, [r7, #8]
 8019062:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019064:	200a      	movs	r0, #10
 8019066:	f7f8 fedf 	bl	8011e28 <memp_malloc>
 801906a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801906c:	693b      	ldr	r3, [r7, #16]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d109      	bne.n	8019086 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8019072:	693b      	ldr	r3, [r7, #16]
 8019074:	2b00      	cmp	r3, #0
 8019076:	d151      	bne.n	801911c <sys_timeout_abs+0xc4>
 8019078:	4b2a      	ldr	r3, [pc, #168]	; (8019124 <sys_timeout_abs+0xcc>)
 801907a:	22be      	movs	r2, #190	; 0xbe
 801907c:	492a      	ldr	r1, [pc, #168]	; (8019128 <sys_timeout_abs+0xd0>)
 801907e:	482b      	ldr	r0, [pc, #172]	; (801912c <sys_timeout_abs+0xd4>)
 8019080:	f003 fd18 	bl	801cab4 <iprintf>
    return;
 8019084:	e04a      	b.n	801911c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8019086:	693b      	ldr	r3, [r7, #16]
 8019088:	2200      	movs	r2, #0
 801908a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801908c:	693b      	ldr	r3, [r7, #16]
 801908e:	68ba      	ldr	r2, [r7, #8]
 8019090:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8019092:	693b      	ldr	r3, [r7, #16]
 8019094:	687a      	ldr	r2, [r7, #4]
 8019096:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019098:	693b      	ldr	r3, [r7, #16]
 801909a:	68fa      	ldr	r2, [r7, #12]
 801909c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801909e:	4b24      	ldr	r3, [pc, #144]	; (8019130 <sys_timeout_abs+0xd8>)
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d103      	bne.n	80190ae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80190a6:	4a22      	ldr	r2, [pc, #136]	; (8019130 <sys_timeout_abs+0xd8>)
 80190a8:	693b      	ldr	r3, [r7, #16]
 80190aa:	6013      	str	r3, [r2, #0]
    return;
 80190ac:	e037      	b.n	801911e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80190ae:	693b      	ldr	r3, [r7, #16]
 80190b0:	685a      	ldr	r2, [r3, #4]
 80190b2:	4b1f      	ldr	r3, [pc, #124]	; (8019130 <sys_timeout_abs+0xd8>)
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	685b      	ldr	r3, [r3, #4]
 80190b8:	1ad3      	subs	r3, r2, r3
 80190ba:	0fdb      	lsrs	r3, r3, #31
 80190bc:	f003 0301 	and.w	r3, r3, #1
 80190c0:	b2db      	uxtb	r3, r3
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d007      	beq.n	80190d6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80190c6:	4b1a      	ldr	r3, [pc, #104]	; (8019130 <sys_timeout_abs+0xd8>)
 80190c8:	681a      	ldr	r2, [r3, #0]
 80190ca:	693b      	ldr	r3, [r7, #16]
 80190cc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80190ce:	4a18      	ldr	r2, [pc, #96]	; (8019130 <sys_timeout_abs+0xd8>)
 80190d0:	693b      	ldr	r3, [r7, #16]
 80190d2:	6013      	str	r3, [r2, #0]
 80190d4:	e023      	b.n	801911e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80190d6:	4b16      	ldr	r3, [pc, #88]	; (8019130 <sys_timeout_abs+0xd8>)
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	617b      	str	r3, [r7, #20]
 80190dc:	e01a      	b.n	8019114 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80190de:	697b      	ldr	r3, [r7, #20]
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d00b      	beq.n	80190fe <sys_timeout_abs+0xa6>
 80190e6:	693b      	ldr	r3, [r7, #16]
 80190e8:	685a      	ldr	r2, [r3, #4]
 80190ea:	697b      	ldr	r3, [r7, #20]
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	685b      	ldr	r3, [r3, #4]
 80190f0:	1ad3      	subs	r3, r2, r3
 80190f2:	0fdb      	lsrs	r3, r3, #31
 80190f4:	f003 0301 	and.w	r3, r3, #1
 80190f8:	b2db      	uxtb	r3, r3
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d007      	beq.n	801910e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80190fe:	697b      	ldr	r3, [r7, #20]
 8019100:	681a      	ldr	r2, [r3, #0]
 8019102:	693b      	ldr	r3, [r7, #16]
 8019104:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8019106:	697b      	ldr	r3, [r7, #20]
 8019108:	693a      	ldr	r2, [r7, #16]
 801910a:	601a      	str	r2, [r3, #0]
        break;
 801910c:	e007      	b.n	801911e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801910e:	697b      	ldr	r3, [r7, #20]
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	617b      	str	r3, [r7, #20]
 8019114:	697b      	ldr	r3, [r7, #20]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d1e1      	bne.n	80190de <sys_timeout_abs+0x86>
 801911a:	e000      	b.n	801911e <sys_timeout_abs+0xc6>
    return;
 801911c:	bf00      	nop
      }
    }
  }
}
 801911e:	3718      	adds	r7, #24
 8019120:	46bd      	mov	sp, r7
 8019122:	bd80      	pop	{r7, pc}
 8019124:	08020aa4 	.word	0x08020aa4
 8019128:	08020ad8 	.word	0x08020ad8
 801912c:	08020b18 	.word	0x08020b18
 8019130:	2000dddc 	.word	0x2000dddc

08019134 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019134:	b580      	push	{r7, lr}
 8019136:	b086      	sub	sp, #24
 8019138:	af00      	add	r7, sp, #0
 801913a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019140:	697b      	ldr	r3, [r7, #20]
 8019142:	685b      	ldr	r3, [r3, #4]
 8019144:	4798      	blx	r3

  now = sys_now();
 8019146:	f7f2 fe8b 	bl	800be60 <sys_now>
 801914a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801914c:	697b      	ldr	r3, [r7, #20]
 801914e:	681a      	ldr	r2, [r3, #0]
 8019150:	4b0f      	ldr	r3, [pc, #60]	; (8019190 <lwip_cyclic_timer+0x5c>)
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	4413      	add	r3, r2
 8019156:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019158:	68fa      	ldr	r2, [r7, #12]
 801915a:	693b      	ldr	r3, [r7, #16]
 801915c:	1ad3      	subs	r3, r2, r3
 801915e:	0fdb      	lsrs	r3, r3, #31
 8019160:	f003 0301 	and.w	r3, r3, #1
 8019164:	b2db      	uxtb	r3, r3
 8019166:	2b00      	cmp	r3, #0
 8019168:	d009      	beq.n	801917e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801916a:	697b      	ldr	r3, [r7, #20]
 801916c:	681a      	ldr	r2, [r3, #0]
 801916e:	693b      	ldr	r3, [r7, #16]
 8019170:	4413      	add	r3, r2
 8019172:	687a      	ldr	r2, [r7, #4]
 8019174:	4907      	ldr	r1, [pc, #28]	; (8019194 <lwip_cyclic_timer+0x60>)
 8019176:	4618      	mov	r0, r3
 8019178:	f7ff ff6e 	bl	8019058 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801917c:	e004      	b.n	8019188 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801917e:	687a      	ldr	r2, [r7, #4]
 8019180:	4904      	ldr	r1, [pc, #16]	; (8019194 <lwip_cyclic_timer+0x60>)
 8019182:	68f8      	ldr	r0, [r7, #12]
 8019184:	f7ff ff68 	bl	8019058 <sys_timeout_abs>
}
 8019188:	bf00      	nop
 801918a:	3718      	adds	r7, #24
 801918c:	46bd      	mov	sp, r7
 801918e:	bd80      	pop	{r7, pc}
 8019190:	2000dde0 	.word	0x2000dde0
 8019194:	08019135 	.word	0x08019135

08019198 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b082      	sub	sp, #8
 801919c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801919e:	2301      	movs	r3, #1
 80191a0:	607b      	str	r3, [r7, #4]
 80191a2:	e00e      	b.n	80191c2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80191a4:	4a0b      	ldr	r2, [pc, #44]	; (80191d4 <sys_timeouts_init+0x3c>)
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	00db      	lsls	r3, r3, #3
 80191b0:	4a08      	ldr	r2, [pc, #32]	; (80191d4 <sys_timeouts_init+0x3c>)
 80191b2:	4413      	add	r3, r2
 80191b4:	461a      	mov	r2, r3
 80191b6:	4908      	ldr	r1, [pc, #32]	; (80191d8 <sys_timeouts_init+0x40>)
 80191b8:	f000 f810 	bl	80191dc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	3301      	adds	r3, #1
 80191c0:	607b      	str	r3, [r7, #4]
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	2b02      	cmp	r3, #2
 80191c6:	d9ed      	bls.n	80191a4 <sys_timeouts_init+0xc>
  }
}
 80191c8:	bf00      	nop
 80191ca:	bf00      	nop
 80191cc:	3708      	adds	r7, #8
 80191ce:	46bd      	mov	sp, r7
 80191d0:	bd80      	pop	{r7, pc}
 80191d2:	bf00      	nop
 80191d4:	080216d0 	.word	0x080216d0
 80191d8:	08019135 	.word	0x08019135

080191dc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b086      	sub	sp, #24
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	60f8      	str	r0, [r7, #12]
 80191e4:	60b9      	str	r1, [r7, #8]
 80191e6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80191ee:	d306      	bcc.n	80191fe <sys_timeout+0x22>
 80191f0:	4b0a      	ldr	r3, [pc, #40]	; (801921c <sys_timeout+0x40>)
 80191f2:	f240 1229 	movw	r2, #297	; 0x129
 80191f6:	490a      	ldr	r1, [pc, #40]	; (8019220 <sys_timeout+0x44>)
 80191f8:	480a      	ldr	r0, [pc, #40]	; (8019224 <sys_timeout+0x48>)
 80191fa:	f003 fc5b 	bl	801cab4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80191fe:	f7f2 fe2f 	bl	800be60 <sys_now>
 8019202:	4602      	mov	r2, r0
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	4413      	add	r3, r2
 8019208:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801920a:	687a      	ldr	r2, [r7, #4]
 801920c:	68b9      	ldr	r1, [r7, #8]
 801920e:	6978      	ldr	r0, [r7, #20]
 8019210:	f7ff ff22 	bl	8019058 <sys_timeout_abs>
#endif
}
 8019214:	bf00      	nop
 8019216:	3718      	adds	r7, #24
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}
 801921c:	08020aa4 	.word	0x08020aa4
 8019220:	08020b40 	.word	0x08020b40
 8019224:	08020b18 	.word	0x08020b18

08019228 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b084      	sub	sp, #16
 801922c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801922e:	f7f2 fe17 	bl	800be60 <sys_now>
 8019232:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019234:	4b17      	ldr	r3, [pc, #92]	; (8019294 <sys_check_timeouts+0x6c>)
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801923a:	68bb      	ldr	r3, [r7, #8]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d022      	beq.n	8019286 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019240:	68bb      	ldr	r3, [r7, #8]
 8019242:	685b      	ldr	r3, [r3, #4]
 8019244:	68fa      	ldr	r2, [r7, #12]
 8019246:	1ad3      	subs	r3, r2, r3
 8019248:	0fdb      	lsrs	r3, r3, #31
 801924a:	f003 0301 	and.w	r3, r3, #1
 801924e:	b2db      	uxtb	r3, r3
 8019250:	2b00      	cmp	r3, #0
 8019252:	d11a      	bne.n	801928a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019254:	68bb      	ldr	r3, [r7, #8]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	4a0e      	ldr	r2, [pc, #56]	; (8019294 <sys_check_timeouts+0x6c>)
 801925a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801925c:	68bb      	ldr	r3, [r7, #8]
 801925e:	689b      	ldr	r3, [r3, #8]
 8019260:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8019262:	68bb      	ldr	r3, [r7, #8]
 8019264:	68db      	ldr	r3, [r3, #12]
 8019266:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019268:	68bb      	ldr	r3, [r7, #8]
 801926a:	685b      	ldr	r3, [r3, #4]
 801926c:	4a0a      	ldr	r2, [pc, #40]	; (8019298 <sys_check_timeouts+0x70>)
 801926e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019270:	68b9      	ldr	r1, [r7, #8]
 8019272:	200a      	movs	r0, #10
 8019274:	f7f8 fe2a 	bl	8011ecc <memp_free>
    if (handler != NULL) {
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	2b00      	cmp	r3, #0
 801927c:	d0da      	beq.n	8019234 <sys_check_timeouts+0xc>
      handler(arg);
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	6838      	ldr	r0, [r7, #0]
 8019282:	4798      	blx	r3
  do {
 8019284:	e7d6      	b.n	8019234 <sys_check_timeouts+0xc>
      return;
 8019286:	bf00      	nop
 8019288:	e000      	b.n	801928c <sys_check_timeouts+0x64>
      return;
 801928a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801928c:	3710      	adds	r7, #16
 801928e:	46bd      	mov	sp, r7
 8019290:	bd80      	pop	{r7, pc}
 8019292:	bf00      	nop
 8019294:	2000dddc 	.word	0x2000dddc
 8019298:	2000dde0 	.word	0x2000dde0

0801929c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801929c:	b580      	push	{r7, lr}
 801929e:	b082      	sub	sp, #8
 80192a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80192a2:	4b16      	ldr	r3, [pc, #88]	; (80192fc <sys_timeouts_sleeptime+0x60>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d102      	bne.n	80192b0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80192aa:	f04f 33ff 	mov.w	r3, #4294967295
 80192ae:	e020      	b.n	80192f2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80192b0:	f7f2 fdd6 	bl	800be60 <sys_now>
 80192b4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80192b6:	4b11      	ldr	r3, [pc, #68]	; (80192fc <sys_timeouts_sleeptime+0x60>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	685a      	ldr	r2, [r3, #4]
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	1ad3      	subs	r3, r2, r3
 80192c0:	0fdb      	lsrs	r3, r3, #31
 80192c2:	f003 0301 	and.w	r3, r3, #1
 80192c6:	b2db      	uxtb	r3, r3
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d001      	beq.n	80192d0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80192cc:	2300      	movs	r3, #0
 80192ce:	e010      	b.n	80192f2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80192d0:	4b0a      	ldr	r3, [pc, #40]	; (80192fc <sys_timeouts_sleeptime+0x60>)
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	685a      	ldr	r2, [r3, #4]
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	1ad3      	subs	r3, r2, r3
 80192da:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80192dc:	683b      	ldr	r3, [r7, #0]
 80192de:	2b00      	cmp	r3, #0
 80192e0:	da06      	bge.n	80192f0 <sys_timeouts_sleeptime+0x54>
 80192e2:	4b07      	ldr	r3, [pc, #28]	; (8019300 <sys_timeouts_sleeptime+0x64>)
 80192e4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80192e8:	4906      	ldr	r1, [pc, #24]	; (8019304 <sys_timeouts_sleeptime+0x68>)
 80192ea:	4807      	ldr	r0, [pc, #28]	; (8019308 <sys_timeouts_sleeptime+0x6c>)
 80192ec:	f003 fbe2 	bl	801cab4 <iprintf>
    return ret;
 80192f0:	683b      	ldr	r3, [r7, #0]
  }
}
 80192f2:	4618      	mov	r0, r3
 80192f4:	3708      	adds	r7, #8
 80192f6:	46bd      	mov	sp, r7
 80192f8:	bd80      	pop	{r7, pc}
 80192fa:	bf00      	nop
 80192fc:	2000dddc 	.word	0x2000dddc
 8019300:	08020aa4 	.word	0x08020aa4
 8019304:	08020b78 	.word	0x08020b78
 8019308:	08020b18 	.word	0x08020b18

0801930c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801930c:	b580      	push	{r7, lr}
 801930e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019310:	f003 fbe8 	bl	801cae4 <rand>
 8019314:	4603      	mov	r3, r0
 8019316:	b29b      	uxth	r3, r3
 8019318:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801931c:	b29b      	uxth	r3, r3
 801931e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8019322:	b29a      	uxth	r2, r3
 8019324:	4b01      	ldr	r3, [pc, #4]	; (801932c <udp_init+0x20>)
 8019326:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019328:	bf00      	nop
 801932a:	bd80      	pop	{r7, pc}
 801932c:	200002dc 	.word	0x200002dc

08019330 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019330:	b480      	push	{r7}
 8019332:	b083      	sub	sp, #12
 8019334:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8019336:	2300      	movs	r3, #0
 8019338:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801933a:	4b17      	ldr	r3, [pc, #92]	; (8019398 <udp_new_port+0x68>)
 801933c:	881b      	ldrh	r3, [r3, #0]
 801933e:	1c5a      	adds	r2, r3, #1
 8019340:	b291      	uxth	r1, r2
 8019342:	4a15      	ldr	r2, [pc, #84]	; (8019398 <udp_new_port+0x68>)
 8019344:	8011      	strh	r1, [r2, #0]
 8019346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801934a:	4293      	cmp	r3, r2
 801934c:	d103      	bne.n	8019356 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801934e:	4b12      	ldr	r3, [pc, #72]	; (8019398 <udp_new_port+0x68>)
 8019350:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019354:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019356:	4b11      	ldr	r3, [pc, #68]	; (801939c <udp_new_port+0x6c>)
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	603b      	str	r3, [r7, #0]
 801935c:	e011      	b.n	8019382 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801935e:	683b      	ldr	r3, [r7, #0]
 8019360:	8a5a      	ldrh	r2, [r3, #18]
 8019362:	4b0d      	ldr	r3, [pc, #52]	; (8019398 <udp_new_port+0x68>)
 8019364:	881b      	ldrh	r3, [r3, #0]
 8019366:	429a      	cmp	r2, r3
 8019368:	d108      	bne.n	801937c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801936a:	88fb      	ldrh	r3, [r7, #6]
 801936c:	3301      	adds	r3, #1
 801936e:	80fb      	strh	r3, [r7, #6]
 8019370:	88fb      	ldrh	r3, [r7, #6]
 8019372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019376:	d3e0      	bcc.n	801933a <udp_new_port+0xa>
        return 0;
 8019378:	2300      	movs	r3, #0
 801937a:	e007      	b.n	801938c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801937c:	683b      	ldr	r3, [r7, #0]
 801937e:	68db      	ldr	r3, [r3, #12]
 8019380:	603b      	str	r3, [r7, #0]
 8019382:	683b      	ldr	r3, [r7, #0]
 8019384:	2b00      	cmp	r3, #0
 8019386:	d1ea      	bne.n	801935e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019388:	4b03      	ldr	r3, [pc, #12]	; (8019398 <udp_new_port+0x68>)
 801938a:	881b      	ldrh	r3, [r3, #0]
}
 801938c:	4618      	mov	r0, r3
 801938e:	370c      	adds	r7, #12
 8019390:	46bd      	mov	sp, r7
 8019392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019396:	4770      	bx	lr
 8019398:	200002dc 	.word	0x200002dc
 801939c:	2000dde8 	.word	0x2000dde8

080193a0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b084      	sub	sp, #16
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	60f8      	str	r0, [r7, #12]
 80193a8:	60b9      	str	r1, [r7, #8]
 80193aa:	4613      	mov	r3, r2
 80193ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d105      	bne.n	80193c0 <udp_input_local_match+0x20>
 80193b4:	4b27      	ldr	r3, [pc, #156]	; (8019454 <udp_input_local_match+0xb4>)
 80193b6:	2287      	movs	r2, #135	; 0x87
 80193b8:	4927      	ldr	r1, [pc, #156]	; (8019458 <udp_input_local_match+0xb8>)
 80193ba:	4828      	ldr	r0, [pc, #160]	; (801945c <udp_input_local_match+0xbc>)
 80193bc:	f003 fb7a 	bl	801cab4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80193c0:	68bb      	ldr	r3, [r7, #8]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d105      	bne.n	80193d2 <udp_input_local_match+0x32>
 80193c6:	4b23      	ldr	r3, [pc, #140]	; (8019454 <udp_input_local_match+0xb4>)
 80193c8:	2288      	movs	r2, #136	; 0x88
 80193ca:	4925      	ldr	r1, [pc, #148]	; (8019460 <udp_input_local_match+0xc0>)
 80193cc:	4823      	ldr	r0, [pc, #140]	; (801945c <udp_input_local_match+0xbc>)
 80193ce:	f003 fb71 	bl	801cab4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	7a1b      	ldrb	r3, [r3, #8]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d00b      	beq.n	80193f2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	7a1a      	ldrb	r2, [r3, #8]
 80193de:	4b21      	ldr	r3, [pc, #132]	; (8019464 <udp_input_local_match+0xc4>)
 80193e0:	685b      	ldr	r3, [r3, #4]
 80193e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80193e6:	3301      	adds	r3, #1
 80193e8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80193ea:	429a      	cmp	r2, r3
 80193ec:	d001      	beq.n	80193f2 <udp_input_local_match+0x52>
    return 0;
 80193ee:	2300      	movs	r3, #0
 80193f0:	e02b      	b.n	801944a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80193f2:	79fb      	ldrb	r3, [r7, #7]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d018      	beq.n	801942a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d013      	beq.n	8019426 <udp_input_local_match+0x86>
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d00f      	beq.n	8019426 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019406:	4b17      	ldr	r3, [pc, #92]	; (8019464 <udp_input_local_match+0xc4>)
 8019408:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801940a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801940e:	d00a      	beq.n	8019426 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	681a      	ldr	r2, [r3, #0]
 8019414:	4b13      	ldr	r3, [pc, #76]	; (8019464 <udp_input_local_match+0xc4>)
 8019416:	695b      	ldr	r3, [r3, #20]
 8019418:	405a      	eors	r2, r3
 801941a:	68bb      	ldr	r3, [r7, #8]
 801941c:	3308      	adds	r3, #8
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019422:	2b00      	cmp	r3, #0
 8019424:	d110      	bne.n	8019448 <udp_input_local_match+0xa8>
          return 1;
 8019426:	2301      	movs	r3, #1
 8019428:	e00f      	b.n	801944a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	2b00      	cmp	r3, #0
 801942e:	d009      	beq.n	8019444 <udp_input_local_match+0xa4>
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d005      	beq.n	8019444 <udp_input_local_match+0xa4>
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	681a      	ldr	r2, [r3, #0]
 801943c:	4b09      	ldr	r3, [pc, #36]	; (8019464 <udp_input_local_match+0xc4>)
 801943e:	695b      	ldr	r3, [r3, #20]
 8019440:	429a      	cmp	r2, r3
 8019442:	d101      	bne.n	8019448 <udp_input_local_match+0xa8>
        return 1;
 8019444:	2301      	movs	r3, #1
 8019446:	e000      	b.n	801944a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019448:	2300      	movs	r3, #0
}
 801944a:	4618      	mov	r0, r3
 801944c:	3710      	adds	r7, #16
 801944e:	46bd      	mov	sp, r7
 8019450:	bd80      	pop	{r7, pc}
 8019452:	bf00      	nop
 8019454:	08020b8c 	.word	0x08020b8c
 8019458:	08020bbc 	.word	0x08020bbc
 801945c:	08020be0 	.word	0x08020be0
 8019460:	08020c08 	.word	0x08020c08
 8019464:	2000a638 	.word	0x2000a638

08019468 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019468:	b590      	push	{r4, r7, lr}
 801946a:	b08d      	sub	sp, #52	; 0x34
 801946c:	af02      	add	r7, sp, #8
 801946e:	6078      	str	r0, [r7, #4]
 8019470:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8019472:	2300      	movs	r3, #0
 8019474:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d105      	bne.n	8019488 <udp_input+0x20>
 801947c:	4b7c      	ldr	r3, [pc, #496]	; (8019670 <udp_input+0x208>)
 801947e:	22cf      	movs	r2, #207	; 0xcf
 8019480:	497c      	ldr	r1, [pc, #496]	; (8019674 <udp_input+0x20c>)
 8019482:	487d      	ldr	r0, [pc, #500]	; (8019678 <udp_input+0x210>)
 8019484:	f003 fb16 	bl	801cab4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019488:	683b      	ldr	r3, [r7, #0]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d105      	bne.n	801949a <udp_input+0x32>
 801948e:	4b78      	ldr	r3, [pc, #480]	; (8019670 <udp_input+0x208>)
 8019490:	22d0      	movs	r2, #208	; 0xd0
 8019492:	497a      	ldr	r1, [pc, #488]	; (801967c <udp_input+0x214>)
 8019494:	4878      	ldr	r0, [pc, #480]	; (8019678 <udp_input+0x210>)
 8019496:	f003 fb0d 	bl	801cab4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	895b      	ldrh	r3, [r3, #10]
 801949e:	2b07      	cmp	r3, #7
 80194a0:	d803      	bhi.n	80194aa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80194a2:	6878      	ldr	r0, [r7, #4]
 80194a4:	f7f9 fb52 	bl	8012b4c <pbuf_free>
    goto end;
 80194a8:	e0de      	b.n	8019668 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	685b      	ldr	r3, [r3, #4]
 80194ae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80194b0:	4b73      	ldr	r3, [pc, #460]	; (8019680 <udp_input+0x218>)
 80194b2:	695b      	ldr	r3, [r3, #20]
 80194b4:	4a72      	ldr	r2, [pc, #456]	; (8019680 <udp_input+0x218>)
 80194b6:	6812      	ldr	r2, [r2, #0]
 80194b8:	4611      	mov	r1, r2
 80194ba:	4618      	mov	r0, r3
 80194bc:	f001 ff80 	bl	801b3c0 <ip4_addr_isbroadcast_u32>
 80194c0:	4603      	mov	r3, r0
 80194c2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80194c4:	697b      	ldr	r3, [r7, #20]
 80194c6:	881b      	ldrh	r3, [r3, #0]
 80194c8:	b29b      	uxth	r3, r3
 80194ca:	4618      	mov	r0, r3
 80194cc:	f7f7 fff6 	bl	80114bc <lwip_htons>
 80194d0:	4603      	mov	r3, r0
 80194d2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80194d4:	697b      	ldr	r3, [r7, #20]
 80194d6:	885b      	ldrh	r3, [r3, #2]
 80194d8:	b29b      	uxth	r3, r3
 80194da:	4618      	mov	r0, r3
 80194dc:	f7f7 ffee 	bl	80114bc <lwip_htons>
 80194e0:	4603      	mov	r3, r0
 80194e2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80194e4:	2300      	movs	r3, #0
 80194e6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80194e8:	2300      	movs	r3, #0
 80194ea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80194ec:	2300      	movs	r3, #0
 80194ee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80194f0:	4b64      	ldr	r3, [pc, #400]	; (8019684 <udp_input+0x21c>)
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	627b      	str	r3, [r7, #36]	; 0x24
 80194f6:	e054      	b.n	80195a2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80194f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194fa:	8a5b      	ldrh	r3, [r3, #18]
 80194fc:	89fa      	ldrh	r2, [r7, #14]
 80194fe:	429a      	cmp	r2, r3
 8019500:	d14a      	bne.n	8019598 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8019502:	7cfb      	ldrb	r3, [r7, #19]
 8019504:	461a      	mov	r2, r3
 8019506:	6839      	ldr	r1, [r7, #0]
 8019508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801950a:	f7ff ff49 	bl	80193a0 <udp_input_local_match>
 801950e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019510:	2b00      	cmp	r3, #0
 8019512:	d041      	beq.n	8019598 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019516:	7c1b      	ldrb	r3, [r3, #16]
 8019518:	f003 0304 	and.w	r3, r3, #4
 801951c:	2b00      	cmp	r3, #0
 801951e:	d11d      	bne.n	801955c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019520:	69fb      	ldr	r3, [r7, #28]
 8019522:	2b00      	cmp	r3, #0
 8019524:	d102      	bne.n	801952c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8019526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019528:	61fb      	str	r3, [r7, #28]
 801952a:	e017      	b.n	801955c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801952c:	7cfb      	ldrb	r3, [r7, #19]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d014      	beq.n	801955c <udp_input+0xf4>
 8019532:	4b53      	ldr	r3, [pc, #332]	; (8019680 <udp_input+0x218>)
 8019534:	695b      	ldr	r3, [r3, #20]
 8019536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801953a:	d10f      	bne.n	801955c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801953c:	69fb      	ldr	r3, [r7, #28]
 801953e:	681a      	ldr	r2, [r3, #0]
 8019540:	683b      	ldr	r3, [r7, #0]
 8019542:	3304      	adds	r3, #4
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	429a      	cmp	r2, r3
 8019548:	d008      	beq.n	801955c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801954c:	681a      	ldr	r2, [r3, #0]
 801954e:	683b      	ldr	r3, [r7, #0]
 8019550:	3304      	adds	r3, #4
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	429a      	cmp	r2, r3
 8019556:	d101      	bne.n	801955c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801955a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801955e:	8a9b      	ldrh	r3, [r3, #20]
 8019560:	8a3a      	ldrh	r2, [r7, #16]
 8019562:	429a      	cmp	r2, r3
 8019564:	d118      	bne.n	8019598 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019568:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801956a:	2b00      	cmp	r3, #0
 801956c:	d005      	beq.n	801957a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019570:	685a      	ldr	r2, [r3, #4]
 8019572:	4b43      	ldr	r3, [pc, #268]	; (8019680 <udp_input+0x218>)
 8019574:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019576:	429a      	cmp	r2, r3
 8019578:	d10e      	bne.n	8019598 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801957a:	6a3b      	ldr	r3, [r7, #32]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d014      	beq.n	80195aa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019582:	68da      	ldr	r2, [r3, #12]
 8019584:	6a3b      	ldr	r3, [r7, #32]
 8019586:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019588:	4b3e      	ldr	r3, [pc, #248]	; (8019684 <udp_input+0x21c>)
 801958a:	681a      	ldr	r2, [r3, #0]
 801958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801958e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019590:	4a3c      	ldr	r2, [pc, #240]	; (8019684 <udp_input+0x21c>)
 8019592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019594:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8019596:	e008      	b.n	80195aa <udp_input+0x142>
      }
    }

    prev = pcb;
 8019598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801959a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801959e:	68db      	ldr	r3, [r3, #12]
 80195a0:	627b      	str	r3, [r7, #36]	; 0x24
 80195a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d1a7      	bne.n	80194f8 <udp_input+0x90>
 80195a8:	e000      	b.n	80195ac <udp_input+0x144>
        break;
 80195aa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80195ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d101      	bne.n	80195b6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80195b2:	69fb      	ldr	r3, [r7, #28]
 80195b4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80195b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d002      	beq.n	80195c2 <udp_input+0x15a>
    for_us = 1;
 80195bc:	2301      	movs	r3, #1
 80195be:	76fb      	strb	r3, [r7, #27]
 80195c0:	e00a      	b.n	80195d8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80195c2:	683b      	ldr	r3, [r7, #0]
 80195c4:	3304      	adds	r3, #4
 80195c6:	681a      	ldr	r2, [r3, #0]
 80195c8:	4b2d      	ldr	r3, [pc, #180]	; (8019680 <udp_input+0x218>)
 80195ca:	695b      	ldr	r3, [r3, #20]
 80195cc:	429a      	cmp	r2, r3
 80195ce:	bf0c      	ite	eq
 80195d0:	2301      	moveq	r3, #1
 80195d2:	2300      	movne	r3, #0
 80195d4:	b2db      	uxtb	r3, r3
 80195d6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80195d8:	7efb      	ldrb	r3, [r7, #27]
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d041      	beq.n	8019662 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80195de:	2108      	movs	r1, #8
 80195e0:	6878      	ldr	r0, [r7, #4]
 80195e2:	f7f9 fa2d 	bl	8012a40 <pbuf_remove_header>
 80195e6:	4603      	mov	r3, r0
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d00a      	beq.n	8019602 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80195ec:	4b20      	ldr	r3, [pc, #128]	; (8019670 <udp_input+0x208>)
 80195ee:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80195f2:	4925      	ldr	r1, [pc, #148]	; (8019688 <udp_input+0x220>)
 80195f4:	4820      	ldr	r0, [pc, #128]	; (8019678 <udp_input+0x210>)
 80195f6:	f003 fa5d 	bl	801cab4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80195fa:	6878      	ldr	r0, [r7, #4]
 80195fc:	f7f9 faa6 	bl	8012b4c <pbuf_free>
      goto end;
 8019600:	e032      	b.n	8019668 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8019602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019604:	2b00      	cmp	r3, #0
 8019606:	d012      	beq.n	801962e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801960a:	699b      	ldr	r3, [r3, #24]
 801960c:	2b00      	cmp	r3, #0
 801960e:	d00a      	beq.n	8019626 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019612:	699c      	ldr	r4, [r3, #24]
 8019614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019616:	69d8      	ldr	r0, [r3, #28]
 8019618:	8a3b      	ldrh	r3, [r7, #16]
 801961a:	9300      	str	r3, [sp, #0]
 801961c:	4b1b      	ldr	r3, [pc, #108]	; (801968c <udp_input+0x224>)
 801961e:	687a      	ldr	r2, [r7, #4]
 8019620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019622:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019624:	e021      	b.n	801966a <udp_input+0x202>
        pbuf_free(p);
 8019626:	6878      	ldr	r0, [r7, #4]
 8019628:	f7f9 fa90 	bl	8012b4c <pbuf_free>
        goto end;
 801962c:	e01c      	b.n	8019668 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801962e:	7cfb      	ldrb	r3, [r7, #19]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d112      	bne.n	801965a <udp_input+0x1f2>
 8019634:	4b12      	ldr	r3, [pc, #72]	; (8019680 <udp_input+0x218>)
 8019636:	695b      	ldr	r3, [r3, #20]
 8019638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801963c:	2be0      	cmp	r3, #224	; 0xe0
 801963e:	d00c      	beq.n	801965a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019640:	4b0f      	ldr	r3, [pc, #60]	; (8019680 <udp_input+0x218>)
 8019642:	899b      	ldrh	r3, [r3, #12]
 8019644:	3308      	adds	r3, #8
 8019646:	b29b      	uxth	r3, r3
 8019648:	b21b      	sxth	r3, r3
 801964a:	4619      	mov	r1, r3
 801964c:	6878      	ldr	r0, [r7, #4]
 801964e:	f7f9 fa6a 	bl	8012b26 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8019652:	2103      	movs	r1, #3
 8019654:	6878      	ldr	r0, [r7, #4]
 8019656:	f001 fb93 	bl	801ad80 <icmp_dest_unreach>
      pbuf_free(p);
 801965a:	6878      	ldr	r0, [r7, #4]
 801965c:	f7f9 fa76 	bl	8012b4c <pbuf_free>
  return;
 8019660:	e003      	b.n	801966a <udp_input+0x202>
    pbuf_free(p);
 8019662:	6878      	ldr	r0, [r7, #4]
 8019664:	f7f9 fa72 	bl	8012b4c <pbuf_free>
  return;
 8019668:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801966a:	372c      	adds	r7, #44	; 0x2c
 801966c:	46bd      	mov	sp, r7
 801966e:	bd90      	pop	{r4, r7, pc}
 8019670:	08020b8c 	.word	0x08020b8c
 8019674:	08020c30 	.word	0x08020c30
 8019678:	08020be0 	.word	0x08020be0
 801967c:	08020c48 	.word	0x08020c48
 8019680:	2000a638 	.word	0x2000a638
 8019684:	2000dde8 	.word	0x2000dde8
 8019688:	08020c64 	.word	0x08020c64
 801968c:	2000a648 	.word	0x2000a648

08019690 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b082      	sub	sp, #8
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
 8019698:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	2b00      	cmp	r3, #0
 801969e:	d109      	bne.n	80196b4 <udp_send+0x24>
 80196a0:	4b11      	ldr	r3, [pc, #68]	; (80196e8 <udp_send+0x58>)
 80196a2:	f240 12d5 	movw	r2, #469	; 0x1d5
 80196a6:	4911      	ldr	r1, [pc, #68]	; (80196ec <udp_send+0x5c>)
 80196a8:	4811      	ldr	r0, [pc, #68]	; (80196f0 <udp_send+0x60>)
 80196aa:	f003 fa03 	bl	801cab4 <iprintf>
 80196ae:	f06f 030f 	mvn.w	r3, #15
 80196b2:	e015      	b.n	80196e0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80196b4:	683b      	ldr	r3, [r7, #0]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d109      	bne.n	80196ce <udp_send+0x3e>
 80196ba:	4b0b      	ldr	r3, [pc, #44]	; (80196e8 <udp_send+0x58>)
 80196bc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80196c0:	490c      	ldr	r1, [pc, #48]	; (80196f4 <udp_send+0x64>)
 80196c2:	480b      	ldr	r0, [pc, #44]	; (80196f0 <udp_send+0x60>)
 80196c4:	f003 f9f6 	bl	801cab4 <iprintf>
 80196c8:	f06f 030f 	mvn.w	r3, #15
 80196cc:	e008      	b.n	80196e0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	1d1a      	adds	r2, r3, #4
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	8a9b      	ldrh	r3, [r3, #20]
 80196d6:	6839      	ldr	r1, [r7, #0]
 80196d8:	6878      	ldr	r0, [r7, #4]
 80196da:	f000 f80d 	bl	80196f8 <udp_sendto>
 80196de:	4603      	mov	r3, r0
}
 80196e0:	4618      	mov	r0, r3
 80196e2:	3708      	adds	r7, #8
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd80      	pop	{r7, pc}
 80196e8:	08020b8c 	.word	0x08020b8c
 80196ec:	08020c80 	.word	0x08020c80
 80196f0:	08020be0 	.word	0x08020be0
 80196f4:	08020c98 	.word	0x08020c98

080196f8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b088      	sub	sp, #32
 80196fc:	af02      	add	r7, sp, #8
 80196fe:	60f8      	str	r0, [r7, #12]
 8019700:	60b9      	str	r1, [r7, #8]
 8019702:	607a      	str	r2, [r7, #4]
 8019704:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	2b00      	cmp	r3, #0
 801970a:	d109      	bne.n	8019720 <udp_sendto+0x28>
 801970c:	4b23      	ldr	r3, [pc, #140]	; (801979c <udp_sendto+0xa4>)
 801970e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019712:	4923      	ldr	r1, [pc, #140]	; (80197a0 <udp_sendto+0xa8>)
 8019714:	4823      	ldr	r0, [pc, #140]	; (80197a4 <udp_sendto+0xac>)
 8019716:	f003 f9cd 	bl	801cab4 <iprintf>
 801971a:	f06f 030f 	mvn.w	r3, #15
 801971e:	e038      	b.n	8019792 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8019720:	68bb      	ldr	r3, [r7, #8]
 8019722:	2b00      	cmp	r3, #0
 8019724:	d109      	bne.n	801973a <udp_sendto+0x42>
 8019726:	4b1d      	ldr	r3, [pc, #116]	; (801979c <udp_sendto+0xa4>)
 8019728:	f240 2219 	movw	r2, #537	; 0x219
 801972c:	491e      	ldr	r1, [pc, #120]	; (80197a8 <udp_sendto+0xb0>)
 801972e:	481d      	ldr	r0, [pc, #116]	; (80197a4 <udp_sendto+0xac>)
 8019730:	f003 f9c0 	bl	801cab4 <iprintf>
 8019734:	f06f 030f 	mvn.w	r3, #15
 8019738:	e02b      	b.n	8019792 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d109      	bne.n	8019754 <udp_sendto+0x5c>
 8019740:	4b16      	ldr	r3, [pc, #88]	; (801979c <udp_sendto+0xa4>)
 8019742:	f240 221a 	movw	r2, #538	; 0x21a
 8019746:	4919      	ldr	r1, [pc, #100]	; (80197ac <udp_sendto+0xb4>)
 8019748:	4816      	ldr	r0, [pc, #88]	; (80197a4 <udp_sendto+0xac>)
 801974a:	f003 f9b3 	bl	801cab4 <iprintf>
 801974e:	f06f 030f 	mvn.w	r3, #15
 8019752:	e01e      	b.n	8019792 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	7a1b      	ldrb	r3, [r3, #8]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d006      	beq.n	801976a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	7a1b      	ldrb	r3, [r3, #8]
 8019760:	4618      	mov	r0, r3
 8019762:	f7f8 fe65 	bl	8012430 <netif_get_by_index>
 8019766:	6178      	str	r0, [r7, #20]
 8019768:	e003      	b.n	8019772 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801976a:	6878      	ldr	r0, [r7, #4]
 801976c:	f001 fb92 	bl	801ae94 <ip4_route>
 8019770:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8019772:	697b      	ldr	r3, [r7, #20]
 8019774:	2b00      	cmp	r3, #0
 8019776:	d102      	bne.n	801977e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8019778:	f06f 0303 	mvn.w	r3, #3
 801977c:	e009      	b.n	8019792 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801977e:	887a      	ldrh	r2, [r7, #2]
 8019780:	697b      	ldr	r3, [r7, #20]
 8019782:	9300      	str	r3, [sp, #0]
 8019784:	4613      	mov	r3, r2
 8019786:	687a      	ldr	r2, [r7, #4]
 8019788:	68b9      	ldr	r1, [r7, #8]
 801978a:	68f8      	ldr	r0, [r7, #12]
 801978c:	f000 f810 	bl	80197b0 <udp_sendto_if>
 8019790:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019792:	4618      	mov	r0, r3
 8019794:	3718      	adds	r7, #24
 8019796:	46bd      	mov	sp, r7
 8019798:	bd80      	pop	{r7, pc}
 801979a:	bf00      	nop
 801979c:	08020b8c 	.word	0x08020b8c
 80197a0:	08020cb0 	.word	0x08020cb0
 80197a4:	08020be0 	.word	0x08020be0
 80197a8:	08020cc8 	.word	0x08020cc8
 80197ac:	08020ce4 	.word	0x08020ce4

080197b0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b088      	sub	sp, #32
 80197b4:	af02      	add	r7, sp, #8
 80197b6:	60f8      	str	r0, [r7, #12]
 80197b8:	60b9      	str	r1, [r7, #8]
 80197ba:	607a      	str	r2, [r7, #4]
 80197bc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d109      	bne.n	80197d8 <udp_sendto_if+0x28>
 80197c4:	4b2e      	ldr	r3, [pc, #184]	; (8019880 <udp_sendto_if+0xd0>)
 80197c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80197ca:	492e      	ldr	r1, [pc, #184]	; (8019884 <udp_sendto_if+0xd4>)
 80197cc:	482e      	ldr	r0, [pc, #184]	; (8019888 <udp_sendto_if+0xd8>)
 80197ce:	f003 f971 	bl	801cab4 <iprintf>
 80197d2:	f06f 030f 	mvn.w	r3, #15
 80197d6:	e04f      	b.n	8019878 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80197d8:	68bb      	ldr	r3, [r7, #8]
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d109      	bne.n	80197f2 <udp_sendto_if+0x42>
 80197de:	4b28      	ldr	r3, [pc, #160]	; (8019880 <udp_sendto_if+0xd0>)
 80197e0:	f240 2281 	movw	r2, #641	; 0x281
 80197e4:	4929      	ldr	r1, [pc, #164]	; (801988c <udp_sendto_if+0xdc>)
 80197e6:	4828      	ldr	r0, [pc, #160]	; (8019888 <udp_sendto_if+0xd8>)
 80197e8:	f003 f964 	bl	801cab4 <iprintf>
 80197ec:	f06f 030f 	mvn.w	r3, #15
 80197f0:	e042      	b.n	8019878 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d109      	bne.n	801980c <udp_sendto_if+0x5c>
 80197f8:	4b21      	ldr	r3, [pc, #132]	; (8019880 <udp_sendto_if+0xd0>)
 80197fa:	f240 2282 	movw	r2, #642	; 0x282
 80197fe:	4924      	ldr	r1, [pc, #144]	; (8019890 <udp_sendto_if+0xe0>)
 8019800:	4821      	ldr	r0, [pc, #132]	; (8019888 <udp_sendto_if+0xd8>)
 8019802:	f003 f957 	bl	801cab4 <iprintf>
 8019806:	f06f 030f 	mvn.w	r3, #15
 801980a:	e035      	b.n	8019878 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801980c:	6a3b      	ldr	r3, [r7, #32]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d109      	bne.n	8019826 <udp_sendto_if+0x76>
 8019812:	4b1b      	ldr	r3, [pc, #108]	; (8019880 <udp_sendto_if+0xd0>)
 8019814:	f240 2283 	movw	r2, #643	; 0x283
 8019818:	491e      	ldr	r1, [pc, #120]	; (8019894 <udp_sendto_if+0xe4>)
 801981a:	481b      	ldr	r0, [pc, #108]	; (8019888 <udp_sendto_if+0xd8>)
 801981c:	f003 f94a 	bl	801cab4 <iprintf>
 8019820:	f06f 030f 	mvn.w	r3, #15
 8019824:	e028      	b.n	8019878 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d009      	beq.n	8019840 <udp_sendto_if+0x90>
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	2b00      	cmp	r3, #0
 8019832:	d005      	beq.n	8019840 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801983c:	2be0      	cmp	r3, #224	; 0xe0
 801983e:	d103      	bne.n	8019848 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019840:	6a3b      	ldr	r3, [r7, #32]
 8019842:	3304      	adds	r3, #4
 8019844:	617b      	str	r3, [r7, #20]
 8019846:	e00b      	b.n	8019860 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	681a      	ldr	r2, [r3, #0]
 801984c:	6a3b      	ldr	r3, [r7, #32]
 801984e:	3304      	adds	r3, #4
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	429a      	cmp	r2, r3
 8019854:	d002      	beq.n	801985c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8019856:	f06f 0303 	mvn.w	r3, #3
 801985a:	e00d      	b.n	8019878 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8019860:	887a      	ldrh	r2, [r7, #2]
 8019862:	697b      	ldr	r3, [r7, #20]
 8019864:	9301      	str	r3, [sp, #4]
 8019866:	6a3b      	ldr	r3, [r7, #32]
 8019868:	9300      	str	r3, [sp, #0]
 801986a:	4613      	mov	r3, r2
 801986c:	687a      	ldr	r2, [r7, #4]
 801986e:	68b9      	ldr	r1, [r7, #8]
 8019870:	68f8      	ldr	r0, [r7, #12]
 8019872:	f000 f811 	bl	8019898 <udp_sendto_if_src>
 8019876:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019878:	4618      	mov	r0, r3
 801987a:	3718      	adds	r7, #24
 801987c:	46bd      	mov	sp, r7
 801987e:	bd80      	pop	{r7, pc}
 8019880:	08020b8c 	.word	0x08020b8c
 8019884:	08020d00 	.word	0x08020d00
 8019888:	08020be0 	.word	0x08020be0
 801988c:	08020d1c 	.word	0x08020d1c
 8019890:	08020d38 	.word	0x08020d38
 8019894:	08020d58 	.word	0x08020d58

08019898 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8019898:	b580      	push	{r7, lr}
 801989a:	b08c      	sub	sp, #48	; 0x30
 801989c:	af04      	add	r7, sp, #16
 801989e:	60f8      	str	r0, [r7, #12]
 80198a0:	60b9      	str	r1, [r7, #8]
 80198a2:	607a      	str	r2, [r7, #4]
 80198a4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80198a6:	68fb      	ldr	r3, [r7, #12]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d109      	bne.n	80198c0 <udp_sendto_if_src+0x28>
 80198ac:	4b65      	ldr	r3, [pc, #404]	; (8019a44 <udp_sendto_if_src+0x1ac>)
 80198ae:	f240 22d1 	movw	r2, #721	; 0x2d1
 80198b2:	4965      	ldr	r1, [pc, #404]	; (8019a48 <udp_sendto_if_src+0x1b0>)
 80198b4:	4865      	ldr	r0, [pc, #404]	; (8019a4c <udp_sendto_if_src+0x1b4>)
 80198b6:	f003 f8fd 	bl	801cab4 <iprintf>
 80198ba:	f06f 030f 	mvn.w	r3, #15
 80198be:	e0bc      	b.n	8019a3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80198c0:	68bb      	ldr	r3, [r7, #8]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d109      	bne.n	80198da <udp_sendto_if_src+0x42>
 80198c6:	4b5f      	ldr	r3, [pc, #380]	; (8019a44 <udp_sendto_if_src+0x1ac>)
 80198c8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80198cc:	4960      	ldr	r1, [pc, #384]	; (8019a50 <udp_sendto_if_src+0x1b8>)
 80198ce:	485f      	ldr	r0, [pc, #380]	; (8019a4c <udp_sendto_if_src+0x1b4>)
 80198d0:	f003 f8f0 	bl	801cab4 <iprintf>
 80198d4:	f06f 030f 	mvn.w	r3, #15
 80198d8:	e0af      	b.n	8019a3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d109      	bne.n	80198f4 <udp_sendto_if_src+0x5c>
 80198e0:	4b58      	ldr	r3, [pc, #352]	; (8019a44 <udp_sendto_if_src+0x1ac>)
 80198e2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80198e6:	495b      	ldr	r1, [pc, #364]	; (8019a54 <udp_sendto_if_src+0x1bc>)
 80198e8:	4858      	ldr	r0, [pc, #352]	; (8019a4c <udp_sendto_if_src+0x1b4>)
 80198ea:	f003 f8e3 	bl	801cab4 <iprintf>
 80198ee:	f06f 030f 	mvn.w	r3, #15
 80198f2:	e0a2      	b.n	8019a3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80198f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d109      	bne.n	801990e <udp_sendto_if_src+0x76>
 80198fa:	4b52      	ldr	r3, [pc, #328]	; (8019a44 <udp_sendto_if_src+0x1ac>)
 80198fc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8019900:	4955      	ldr	r1, [pc, #340]	; (8019a58 <udp_sendto_if_src+0x1c0>)
 8019902:	4852      	ldr	r0, [pc, #328]	; (8019a4c <udp_sendto_if_src+0x1b4>)
 8019904:	f003 f8d6 	bl	801cab4 <iprintf>
 8019908:	f06f 030f 	mvn.w	r3, #15
 801990c:	e095      	b.n	8019a3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019910:	2b00      	cmp	r3, #0
 8019912:	d109      	bne.n	8019928 <udp_sendto_if_src+0x90>
 8019914:	4b4b      	ldr	r3, [pc, #300]	; (8019a44 <udp_sendto_if_src+0x1ac>)
 8019916:	f240 22d5 	movw	r2, #725	; 0x2d5
 801991a:	4950      	ldr	r1, [pc, #320]	; (8019a5c <udp_sendto_if_src+0x1c4>)
 801991c:	484b      	ldr	r0, [pc, #300]	; (8019a4c <udp_sendto_if_src+0x1b4>)
 801991e:	f003 f8c9 	bl	801cab4 <iprintf>
 8019922:	f06f 030f 	mvn.w	r3, #15
 8019926:	e088      	b.n	8019a3a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	8a5b      	ldrh	r3, [r3, #18]
 801992c:	2b00      	cmp	r3, #0
 801992e:	d10f      	bne.n	8019950 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019930:	68f9      	ldr	r1, [r7, #12]
 8019932:	68fb      	ldr	r3, [r7, #12]
 8019934:	8a5b      	ldrh	r3, [r3, #18]
 8019936:	461a      	mov	r2, r3
 8019938:	68f8      	ldr	r0, [r7, #12]
 801993a:	f000 f893 	bl	8019a64 <udp_bind>
 801993e:	4603      	mov	r3, r0
 8019940:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019942:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019946:	2b00      	cmp	r3, #0
 8019948:	d002      	beq.n	8019950 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801994a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801994e:	e074      	b.n	8019a3a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019950:	68bb      	ldr	r3, [r7, #8]
 8019952:	891b      	ldrh	r3, [r3, #8]
 8019954:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019958:	4293      	cmp	r3, r2
 801995a:	d902      	bls.n	8019962 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801995c:	f04f 33ff 	mov.w	r3, #4294967295
 8019960:	e06b      	b.n	8019a3a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8019962:	2108      	movs	r1, #8
 8019964:	68b8      	ldr	r0, [r7, #8]
 8019966:	f7f9 f85b 	bl	8012a20 <pbuf_add_header>
 801996a:	4603      	mov	r3, r0
 801996c:	2b00      	cmp	r3, #0
 801996e:	d015      	beq.n	801999c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019970:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019974:	2108      	movs	r1, #8
 8019976:	2022      	movs	r0, #34	; 0x22
 8019978:	f7f8 fe04 	bl	8012584 <pbuf_alloc>
 801997c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801997e:	69fb      	ldr	r3, [r7, #28]
 8019980:	2b00      	cmp	r3, #0
 8019982:	d102      	bne.n	801998a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8019984:	f04f 33ff 	mov.w	r3, #4294967295
 8019988:	e057      	b.n	8019a3a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801998a:	68bb      	ldr	r3, [r7, #8]
 801998c:	891b      	ldrh	r3, [r3, #8]
 801998e:	2b00      	cmp	r3, #0
 8019990:	d006      	beq.n	80199a0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8019992:	68b9      	ldr	r1, [r7, #8]
 8019994:	69f8      	ldr	r0, [r7, #28]
 8019996:	f7f9 f9fd 	bl	8012d94 <pbuf_chain>
 801999a:	e001      	b.n	80199a0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801999c:	68bb      	ldr	r3, [r7, #8]
 801999e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80199a0:	69fb      	ldr	r3, [r7, #28]
 80199a2:	895b      	ldrh	r3, [r3, #10]
 80199a4:	2b07      	cmp	r3, #7
 80199a6:	d806      	bhi.n	80199b6 <udp_sendto_if_src+0x11e>
 80199a8:	4b26      	ldr	r3, [pc, #152]	; (8019a44 <udp_sendto_if_src+0x1ac>)
 80199aa:	f240 320d 	movw	r2, #781	; 0x30d
 80199ae:	492c      	ldr	r1, [pc, #176]	; (8019a60 <udp_sendto_if_src+0x1c8>)
 80199b0:	4826      	ldr	r0, [pc, #152]	; (8019a4c <udp_sendto_if_src+0x1b4>)
 80199b2:	f003 f87f 	bl	801cab4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80199b6:	69fb      	ldr	r3, [r7, #28]
 80199b8:	685b      	ldr	r3, [r3, #4]
 80199ba:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	8a5b      	ldrh	r3, [r3, #18]
 80199c0:	4618      	mov	r0, r3
 80199c2:	f7f7 fd7b 	bl	80114bc <lwip_htons>
 80199c6:	4603      	mov	r3, r0
 80199c8:	461a      	mov	r2, r3
 80199ca:	697b      	ldr	r3, [r7, #20]
 80199cc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80199ce:	887b      	ldrh	r3, [r7, #2]
 80199d0:	4618      	mov	r0, r3
 80199d2:	f7f7 fd73 	bl	80114bc <lwip_htons>
 80199d6:	4603      	mov	r3, r0
 80199d8:	461a      	mov	r2, r3
 80199da:	697b      	ldr	r3, [r7, #20]
 80199dc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80199de:	697b      	ldr	r3, [r7, #20]
 80199e0:	2200      	movs	r2, #0
 80199e2:	719a      	strb	r2, [r3, #6]
 80199e4:	2200      	movs	r2, #0
 80199e6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80199e8:	69fb      	ldr	r3, [r7, #28]
 80199ea:	891b      	ldrh	r3, [r3, #8]
 80199ec:	4618      	mov	r0, r3
 80199ee:	f7f7 fd65 	bl	80114bc <lwip_htons>
 80199f2:	4603      	mov	r3, r0
 80199f4:	461a      	mov	r2, r3
 80199f6:	697b      	ldr	r3, [r7, #20]
 80199f8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80199fa:	2311      	movs	r3, #17
 80199fc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	7adb      	ldrb	r3, [r3, #11]
 8019a02:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	7a9b      	ldrb	r3, [r3, #10]
 8019a08:	7cb9      	ldrb	r1, [r7, #18]
 8019a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a0c:	9202      	str	r2, [sp, #8]
 8019a0e:	7cfa      	ldrb	r2, [r7, #19]
 8019a10:	9201      	str	r2, [sp, #4]
 8019a12:	9300      	str	r3, [sp, #0]
 8019a14:	460b      	mov	r3, r1
 8019a16:	687a      	ldr	r2, [r7, #4]
 8019a18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019a1a:	69f8      	ldr	r0, [r7, #28]
 8019a1c:	f001 fc22 	bl	801b264 <ip4_output_if_src>
 8019a20:	4603      	mov	r3, r0
 8019a22:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019a24:	69fa      	ldr	r2, [r7, #28]
 8019a26:	68bb      	ldr	r3, [r7, #8]
 8019a28:	429a      	cmp	r2, r3
 8019a2a:	d004      	beq.n	8019a36 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8019a2c:	69f8      	ldr	r0, [r7, #28]
 8019a2e:	f7f9 f88d 	bl	8012b4c <pbuf_free>
    q = NULL;
 8019a32:	2300      	movs	r3, #0
 8019a34:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8019a36:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	3720      	adds	r7, #32
 8019a3e:	46bd      	mov	sp, r7
 8019a40:	bd80      	pop	{r7, pc}
 8019a42:	bf00      	nop
 8019a44:	08020b8c 	.word	0x08020b8c
 8019a48:	08020d78 	.word	0x08020d78
 8019a4c:	08020be0 	.word	0x08020be0
 8019a50:	08020d98 	.word	0x08020d98
 8019a54:	08020db8 	.word	0x08020db8
 8019a58:	08020ddc 	.word	0x08020ddc
 8019a5c:	08020e00 	.word	0x08020e00
 8019a60:	08020e24 	.word	0x08020e24

08019a64 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019a64:	b580      	push	{r7, lr}
 8019a66:	b086      	sub	sp, #24
 8019a68:	af00      	add	r7, sp, #0
 8019a6a:	60f8      	str	r0, [r7, #12]
 8019a6c:	60b9      	str	r1, [r7, #8]
 8019a6e:	4613      	mov	r3, r2
 8019a70:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019a72:	68bb      	ldr	r3, [r7, #8]
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d101      	bne.n	8019a7c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019a78:	4b39      	ldr	r3, [pc, #228]	; (8019b60 <udp_bind+0xfc>)
 8019a7a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d109      	bne.n	8019a96 <udp_bind+0x32>
 8019a82:	4b38      	ldr	r3, [pc, #224]	; (8019b64 <udp_bind+0x100>)
 8019a84:	f240 32b7 	movw	r2, #951	; 0x3b7
 8019a88:	4937      	ldr	r1, [pc, #220]	; (8019b68 <udp_bind+0x104>)
 8019a8a:	4838      	ldr	r0, [pc, #224]	; (8019b6c <udp_bind+0x108>)
 8019a8c:	f003 f812 	bl	801cab4 <iprintf>
 8019a90:	f06f 030f 	mvn.w	r3, #15
 8019a94:	e060      	b.n	8019b58 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8019a96:	2300      	movs	r3, #0
 8019a98:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019a9a:	4b35      	ldr	r3, [pc, #212]	; (8019b70 <udp_bind+0x10c>)
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	617b      	str	r3, [r7, #20]
 8019aa0:	e009      	b.n	8019ab6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019aa2:	68fa      	ldr	r2, [r7, #12]
 8019aa4:	697b      	ldr	r3, [r7, #20]
 8019aa6:	429a      	cmp	r2, r3
 8019aa8:	d102      	bne.n	8019ab0 <udp_bind+0x4c>
      rebind = 1;
 8019aaa:	2301      	movs	r3, #1
 8019aac:	74fb      	strb	r3, [r7, #19]
      break;
 8019aae:	e005      	b.n	8019abc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019ab0:	697b      	ldr	r3, [r7, #20]
 8019ab2:	68db      	ldr	r3, [r3, #12]
 8019ab4:	617b      	str	r3, [r7, #20]
 8019ab6:	697b      	ldr	r3, [r7, #20]
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d1f2      	bne.n	8019aa2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019abc:	88fb      	ldrh	r3, [r7, #6]
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d109      	bne.n	8019ad6 <udp_bind+0x72>
    port = udp_new_port();
 8019ac2:	f7ff fc35 	bl	8019330 <udp_new_port>
 8019ac6:	4603      	mov	r3, r0
 8019ac8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019aca:	88fb      	ldrh	r3, [r7, #6]
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d12c      	bne.n	8019b2a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019ad0:	f06f 0307 	mvn.w	r3, #7
 8019ad4:	e040      	b.n	8019b58 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019ad6:	4b26      	ldr	r3, [pc, #152]	; (8019b70 <udp_bind+0x10c>)
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	617b      	str	r3, [r7, #20]
 8019adc:	e022      	b.n	8019b24 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019ade:	68fa      	ldr	r2, [r7, #12]
 8019ae0:	697b      	ldr	r3, [r7, #20]
 8019ae2:	429a      	cmp	r2, r3
 8019ae4:	d01b      	beq.n	8019b1e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019ae6:	697b      	ldr	r3, [r7, #20]
 8019ae8:	8a5b      	ldrh	r3, [r3, #18]
 8019aea:	88fa      	ldrh	r2, [r7, #6]
 8019aec:	429a      	cmp	r2, r3
 8019aee:	d116      	bne.n	8019b1e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019af0:	697b      	ldr	r3, [r7, #20]
 8019af2:	681a      	ldr	r2, [r3, #0]
 8019af4:	68bb      	ldr	r3, [r7, #8]
 8019af6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019af8:	429a      	cmp	r2, r3
 8019afa:	d00d      	beq.n	8019b18 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019afc:	68bb      	ldr	r3, [r7, #8]
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d00a      	beq.n	8019b18 <udp_bind+0xb4>
 8019b02:	68bb      	ldr	r3, [r7, #8]
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d006      	beq.n	8019b18 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019b0a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d003      	beq.n	8019b18 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019b10:	697b      	ldr	r3, [r7, #20]
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d102      	bne.n	8019b1e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019b18:	f06f 0307 	mvn.w	r3, #7
 8019b1c:	e01c      	b.n	8019b58 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019b1e:	697b      	ldr	r3, [r7, #20]
 8019b20:	68db      	ldr	r3, [r3, #12]
 8019b22:	617b      	str	r3, [r7, #20]
 8019b24:	697b      	ldr	r3, [r7, #20]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d1d9      	bne.n	8019ade <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019b2a:	68bb      	ldr	r3, [r7, #8]
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d002      	beq.n	8019b36 <udp_bind+0xd2>
 8019b30:	68bb      	ldr	r3, [r7, #8]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	e000      	b.n	8019b38 <udp_bind+0xd4>
 8019b36:	2300      	movs	r3, #0
 8019b38:	68fa      	ldr	r2, [r7, #12]
 8019b3a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	88fa      	ldrh	r2, [r7, #6]
 8019b40:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019b42:	7cfb      	ldrb	r3, [r7, #19]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d106      	bne.n	8019b56 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019b48:	4b09      	ldr	r3, [pc, #36]	; (8019b70 <udp_bind+0x10c>)
 8019b4a:	681a      	ldr	r2, [r3, #0]
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019b50:	4a07      	ldr	r2, [pc, #28]	; (8019b70 <udp_bind+0x10c>)
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019b56:	2300      	movs	r3, #0
}
 8019b58:	4618      	mov	r0, r3
 8019b5a:	3718      	adds	r7, #24
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	bd80      	pop	{r7, pc}
 8019b60:	080216e8 	.word	0x080216e8
 8019b64:	08020b8c 	.word	0x08020b8c
 8019b68:	08020e54 	.word	0x08020e54
 8019b6c:	08020be0 	.word	0x08020be0
 8019b70:	2000dde8 	.word	0x2000dde8

08019b74 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019b74:	b580      	push	{r7, lr}
 8019b76:	b084      	sub	sp, #16
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	60f8      	str	r0, [r7, #12]
 8019b7c:	60b9      	str	r1, [r7, #8]
 8019b7e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d107      	bne.n	8019b96 <udp_recv+0x22>
 8019b86:	4b08      	ldr	r3, [pc, #32]	; (8019ba8 <udp_recv+0x34>)
 8019b88:	f240 428a 	movw	r2, #1162	; 0x48a
 8019b8c:	4907      	ldr	r1, [pc, #28]	; (8019bac <udp_recv+0x38>)
 8019b8e:	4808      	ldr	r0, [pc, #32]	; (8019bb0 <udp_recv+0x3c>)
 8019b90:	f002 ff90 	bl	801cab4 <iprintf>
 8019b94:	e005      	b.n	8019ba2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	68ba      	ldr	r2, [r7, #8]
 8019b9a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	687a      	ldr	r2, [r7, #4]
 8019ba0:	61da      	str	r2, [r3, #28]
}
 8019ba2:	3710      	adds	r7, #16
 8019ba4:	46bd      	mov	sp, r7
 8019ba6:	bd80      	pop	{r7, pc}
 8019ba8:	08020b8c 	.word	0x08020b8c
 8019bac:	08020ec0 	.word	0x08020ec0
 8019bb0:	08020be0 	.word	0x08020be0

08019bb4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019bb4:	b580      	push	{r7, lr}
 8019bb6:	b084      	sub	sp, #16
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d107      	bne.n	8019bd2 <udp_remove+0x1e>
 8019bc2:	4b19      	ldr	r3, [pc, #100]	; (8019c28 <udp_remove+0x74>)
 8019bc4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8019bc8:	4918      	ldr	r1, [pc, #96]	; (8019c2c <udp_remove+0x78>)
 8019bca:	4819      	ldr	r0, [pc, #100]	; (8019c30 <udp_remove+0x7c>)
 8019bcc:	f002 ff72 	bl	801cab4 <iprintf>
 8019bd0:	e026      	b.n	8019c20 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8019bd2:	4b18      	ldr	r3, [pc, #96]	; (8019c34 <udp_remove+0x80>)
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	687a      	ldr	r2, [r7, #4]
 8019bd8:	429a      	cmp	r2, r3
 8019bda:	d105      	bne.n	8019be8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019bdc:	4b15      	ldr	r3, [pc, #84]	; (8019c34 <udp_remove+0x80>)
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	68db      	ldr	r3, [r3, #12]
 8019be2:	4a14      	ldr	r2, [pc, #80]	; (8019c34 <udp_remove+0x80>)
 8019be4:	6013      	str	r3, [r2, #0]
 8019be6:	e017      	b.n	8019c18 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019be8:	4b12      	ldr	r3, [pc, #72]	; (8019c34 <udp_remove+0x80>)
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	60fb      	str	r3, [r7, #12]
 8019bee:	e010      	b.n	8019c12 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	68db      	ldr	r3, [r3, #12]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d009      	beq.n	8019c0c <udp_remove+0x58>
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	68db      	ldr	r3, [r3, #12]
 8019bfc:	687a      	ldr	r2, [r7, #4]
 8019bfe:	429a      	cmp	r2, r3
 8019c00:	d104      	bne.n	8019c0c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	68da      	ldr	r2, [r3, #12]
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	60da      	str	r2, [r3, #12]
        break;
 8019c0a:	e005      	b.n	8019c18 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	68db      	ldr	r3, [r3, #12]
 8019c10:	60fb      	str	r3, [r7, #12]
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d1eb      	bne.n	8019bf0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8019c18:	6879      	ldr	r1, [r7, #4]
 8019c1a:	2000      	movs	r0, #0
 8019c1c:	f7f8 f956 	bl	8011ecc <memp_free>
}
 8019c20:	3710      	adds	r7, #16
 8019c22:	46bd      	mov	sp, r7
 8019c24:	bd80      	pop	{r7, pc}
 8019c26:	bf00      	nop
 8019c28:	08020b8c 	.word	0x08020b8c
 8019c2c:	08020ed8 	.word	0x08020ed8
 8019c30:	08020be0 	.word	0x08020be0
 8019c34:	2000dde8 	.word	0x2000dde8

08019c38 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b082      	sub	sp, #8
 8019c3c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8019c3e:	2000      	movs	r0, #0
 8019c40:	f7f8 f8f2 	bl	8011e28 <memp_malloc>
 8019c44:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d007      	beq.n	8019c5c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8019c4c:	2220      	movs	r2, #32
 8019c4e:	2100      	movs	r1, #0
 8019c50:	6878      	ldr	r0, [r7, #4]
 8019c52:	f002 fe47 	bl	801c8e4 <memset>
    pcb->ttl = UDP_TTL;
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	22ff      	movs	r2, #255	; 0xff
 8019c5a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8019c5c:	687b      	ldr	r3, [r7, #4]
}
 8019c5e:	4618      	mov	r0, r3
 8019c60:	3708      	adds	r7, #8
 8019c62:	46bd      	mov	sp, r7
 8019c64:	bd80      	pop	{r7, pc}

08019c66 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8019c66:	b580      	push	{r7, lr}
 8019c68:	b084      	sub	sp, #16
 8019c6a:	af00      	add	r7, sp, #0
 8019c6c:	4603      	mov	r3, r0
 8019c6e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8019c70:	f7ff ffe2 	bl	8019c38 <udp_new>
 8019c74:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8019c76:	68fb      	ldr	r3, [r7, #12]
}
 8019c78:	4618      	mov	r0, r3
 8019c7a:	3710      	adds	r7, #16
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	bd80      	pop	{r7, pc}

08019c80 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019c80:	b480      	push	{r7}
 8019c82:	b085      	sub	sp, #20
 8019c84:	af00      	add	r7, sp, #0
 8019c86:	6078      	str	r0, [r7, #4]
 8019c88:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d01e      	beq.n	8019cce <udp_netif_ip_addr_changed+0x4e>
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d01a      	beq.n	8019cce <udp_netif_ip_addr_changed+0x4e>
 8019c98:	683b      	ldr	r3, [r7, #0]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d017      	beq.n	8019cce <udp_netif_ip_addr_changed+0x4e>
 8019c9e:	683b      	ldr	r3, [r7, #0]
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d013      	beq.n	8019cce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019ca6:	4b0d      	ldr	r3, [pc, #52]	; (8019cdc <udp_netif_ip_addr_changed+0x5c>)
 8019ca8:	681b      	ldr	r3, [r3, #0]
 8019caa:	60fb      	str	r3, [r7, #12]
 8019cac:	e00c      	b.n	8019cc8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	681a      	ldr	r2, [r3, #0]
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	429a      	cmp	r2, r3
 8019cb8:	d103      	bne.n	8019cc2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019cba:	683b      	ldr	r3, [r7, #0]
 8019cbc:	681a      	ldr	r2, [r3, #0]
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	68db      	ldr	r3, [r3, #12]
 8019cc6:	60fb      	str	r3, [r7, #12]
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d1ef      	bne.n	8019cae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019cce:	bf00      	nop
 8019cd0:	3714      	adds	r7, #20
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd8:	4770      	bx	lr
 8019cda:	bf00      	nop
 8019cdc:	2000dde8 	.word	0x2000dde8

08019ce0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b082      	sub	sp, #8
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8019ce8:	4915      	ldr	r1, [pc, #84]	; (8019d40 <etharp_free_entry+0x60>)
 8019cea:	687a      	ldr	r2, [r7, #4]
 8019cec:	4613      	mov	r3, r2
 8019cee:	005b      	lsls	r3, r3, #1
 8019cf0:	4413      	add	r3, r2
 8019cf2:	00db      	lsls	r3, r3, #3
 8019cf4:	440b      	add	r3, r1
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d013      	beq.n	8019d24 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019cfc:	4910      	ldr	r1, [pc, #64]	; (8019d40 <etharp_free_entry+0x60>)
 8019cfe:	687a      	ldr	r2, [r7, #4]
 8019d00:	4613      	mov	r3, r2
 8019d02:	005b      	lsls	r3, r3, #1
 8019d04:	4413      	add	r3, r2
 8019d06:	00db      	lsls	r3, r3, #3
 8019d08:	440b      	add	r3, r1
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	f7f8 ff1d 	bl	8012b4c <pbuf_free>
    arp_table[i].q = NULL;
 8019d12:	490b      	ldr	r1, [pc, #44]	; (8019d40 <etharp_free_entry+0x60>)
 8019d14:	687a      	ldr	r2, [r7, #4]
 8019d16:	4613      	mov	r3, r2
 8019d18:	005b      	lsls	r3, r3, #1
 8019d1a:	4413      	add	r3, r2
 8019d1c:	00db      	lsls	r3, r3, #3
 8019d1e:	440b      	add	r3, r1
 8019d20:	2200      	movs	r2, #0
 8019d22:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8019d24:	4906      	ldr	r1, [pc, #24]	; (8019d40 <etharp_free_entry+0x60>)
 8019d26:	687a      	ldr	r2, [r7, #4]
 8019d28:	4613      	mov	r3, r2
 8019d2a:	005b      	lsls	r3, r3, #1
 8019d2c:	4413      	add	r3, r2
 8019d2e:	00db      	lsls	r3, r3, #3
 8019d30:	440b      	add	r3, r1
 8019d32:	3314      	adds	r3, #20
 8019d34:	2200      	movs	r2, #0
 8019d36:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8019d38:	bf00      	nop
 8019d3a:	3708      	adds	r7, #8
 8019d3c:	46bd      	mov	sp, r7
 8019d3e:	bd80      	pop	{r7, pc}
 8019d40:	2000ddec 	.word	0x2000ddec

08019d44 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b082      	sub	sp, #8
 8019d48:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019d4a:	2300      	movs	r3, #0
 8019d4c:	607b      	str	r3, [r7, #4]
 8019d4e:	e096      	b.n	8019e7e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019d50:	494f      	ldr	r1, [pc, #316]	; (8019e90 <etharp_tmr+0x14c>)
 8019d52:	687a      	ldr	r2, [r7, #4]
 8019d54:	4613      	mov	r3, r2
 8019d56:	005b      	lsls	r3, r3, #1
 8019d58:	4413      	add	r3, r2
 8019d5a:	00db      	lsls	r3, r3, #3
 8019d5c:	440b      	add	r3, r1
 8019d5e:	3314      	adds	r3, #20
 8019d60:	781b      	ldrb	r3, [r3, #0]
 8019d62:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8019d64:	78fb      	ldrb	r3, [r7, #3]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	f000 8086 	beq.w	8019e78 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019d6c:	4948      	ldr	r1, [pc, #288]	; (8019e90 <etharp_tmr+0x14c>)
 8019d6e:	687a      	ldr	r2, [r7, #4]
 8019d70:	4613      	mov	r3, r2
 8019d72:	005b      	lsls	r3, r3, #1
 8019d74:	4413      	add	r3, r2
 8019d76:	00db      	lsls	r3, r3, #3
 8019d78:	440b      	add	r3, r1
 8019d7a:	3312      	adds	r3, #18
 8019d7c:	881b      	ldrh	r3, [r3, #0]
 8019d7e:	3301      	adds	r3, #1
 8019d80:	b298      	uxth	r0, r3
 8019d82:	4943      	ldr	r1, [pc, #268]	; (8019e90 <etharp_tmr+0x14c>)
 8019d84:	687a      	ldr	r2, [r7, #4]
 8019d86:	4613      	mov	r3, r2
 8019d88:	005b      	lsls	r3, r3, #1
 8019d8a:	4413      	add	r3, r2
 8019d8c:	00db      	lsls	r3, r3, #3
 8019d8e:	440b      	add	r3, r1
 8019d90:	3312      	adds	r3, #18
 8019d92:	4602      	mov	r2, r0
 8019d94:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019d96:	493e      	ldr	r1, [pc, #248]	; (8019e90 <etharp_tmr+0x14c>)
 8019d98:	687a      	ldr	r2, [r7, #4]
 8019d9a:	4613      	mov	r3, r2
 8019d9c:	005b      	lsls	r3, r3, #1
 8019d9e:	4413      	add	r3, r2
 8019da0:	00db      	lsls	r3, r3, #3
 8019da2:	440b      	add	r3, r1
 8019da4:	3312      	adds	r3, #18
 8019da6:	881b      	ldrh	r3, [r3, #0]
 8019da8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8019dac:	d215      	bcs.n	8019dda <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019dae:	4938      	ldr	r1, [pc, #224]	; (8019e90 <etharp_tmr+0x14c>)
 8019db0:	687a      	ldr	r2, [r7, #4]
 8019db2:	4613      	mov	r3, r2
 8019db4:	005b      	lsls	r3, r3, #1
 8019db6:	4413      	add	r3, r2
 8019db8:	00db      	lsls	r3, r3, #3
 8019dba:	440b      	add	r3, r1
 8019dbc:	3314      	adds	r3, #20
 8019dbe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019dc0:	2b01      	cmp	r3, #1
 8019dc2:	d10e      	bne.n	8019de2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019dc4:	4932      	ldr	r1, [pc, #200]	; (8019e90 <etharp_tmr+0x14c>)
 8019dc6:	687a      	ldr	r2, [r7, #4]
 8019dc8:	4613      	mov	r3, r2
 8019dca:	005b      	lsls	r3, r3, #1
 8019dcc:	4413      	add	r3, r2
 8019dce:	00db      	lsls	r3, r3, #3
 8019dd0:	440b      	add	r3, r1
 8019dd2:	3312      	adds	r3, #18
 8019dd4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019dd6:	2b04      	cmp	r3, #4
 8019dd8:	d903      	bls.n	8019de2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019dda:	6878      	ldr	r0, [r7, #4]
 8019ddc:	f7ff ff80 	bl	8019ce0 <etharp_free_entry>
 8019de0:	e04a      	b.n	8019e78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8019de2:	492b      	ldr	r1, [pc, #172]	; (8019e90 <etharp_tmr+0x14c>)
 8019de4:	687a      	ldr	r2, [r7, #4]
 8019de6:	4613      	mov	r3, r2
 8019de8:	005b      	lsls	r3, r3, #1
 8019dea:	4413      	add	r3, r2
 8019dec:	00db      	lsls	r3, r3, #3
 8019dee:	440b      	add	r3, r1
 8019df0:	3314      	adds	r3, #20
 8019df2:	781b      	ldrb	r3, [r3, #0]
 8019df4:	2b03      	cmp	r3, #3
 8019df6:	d10a      	bne.n	8019e0e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019df8:	4925      	ldr	r1, [pc, #148]	; (8019e90 <etharp_tmr+0x14c>)
 8019dfa:	687a      	ldr	r2, [r7, #4]
 8019dfc:	4613      	mov	r3, r2
 8019dfe:	005b      	lsls	r3, r3, #1
 8019e00:	4413      	add	r3, r2
 8019e02:	00db      	lsls	r3, r3, #3
 8019e04:	440b      	add	r3, r1
 8019e06:	3314      	adds	r3, #20
 8019e08:	2204      	movs	r2, #4
 8019e0a:	701a      	strb	r2, [r3, #0]
 8019e0c:	e034      	b.n	8019e78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019e0e:	4920      	ldr	r1, [pc, #128]	; (8019e90 <etharp_tmr+0x14c>)
 8019e10:	687a      	ldr	r2, [r7, #4]
 8019e12:	4613      	mov	r3, r2
 8019e14:	005b      	lsls	r3, r3, #1
 8019e16:	4413      	add	r3, r2
 8019e18:	00db      	lsls	r3, r3, #3
 8019e1a:	440b      	add	r3, r1
 8019e1c:	3314      	adds	r3, #20
 8019e1e:	781b      	ldrb	r3, [r3, #0]
 8019e20:	2b04      	cmp	r3, #4
 8019e22:	d10a      	bne.n	8019e3a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019e24:	491a      	ldr	r1, [pc, #104]	; (8019e90 <etharp_tmr+0x14c>)
 8019e26:	687a      	ldr	r2, [r7, #4]
 8019e28:	4613      	mov	r3, r2
 8019e2a:	005b      	lsls	r3, r3, #1
 8019e2c:	4413      	add	r3, r2
 8019e2e:	00db      	lsls	r3, r3, #3
 8019e30:	440b      	add	r3, r1
 8019e32:	3314      	adds	r3, #20
 8019e34:	2202      	movs	r2, #2
 8019e36:	701a      	strb	r2, [r3, #0]
 8019e38:	e01e      	b.n	8019e78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019e3a:	4915      	ldr	r1, [pc, #84]	; (8019e90 <etharp_tmr+0x14c>)
 8019e3c:	687a      	ldr	r2, [r7, #4]
 8019e3e:	4613      	mov	r3, r2
 8019e40:	005b      	lsls	r3, r3, #1
 8019e42:	4413      	add	r3, r2
 8019e44:	00db      	lsls	r3, r3, #3
 8019e46:	440b      	add	r3, r1
 8019e48:	3314      	adds	r3, #20
 8019e4a:	781b      	ldrb	r3, [r3, #0]
 8019e4c:	2b01      	cmp	r3, #1
 8019e4e:	d113      	bne.n	8019e78 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019e50:	490f      	ldr	r1, [pc, #60]	; (8019e90 <etharp_tmr+0x14c>)
 8019e52:	687a      	ldr	r2, [r7, #4]
 8019e54:	4613      	mov	r3, r2
 8019e56:	005b      	lsls	r3, r3, #1
 8019e58:	4413      	add	r3, r2
 8019e5a:	00db      	lsls	r3, r3, #3
 8019e5c:	440b      	add	r3, r1
 8019e5e:	3308      	adds	r3, #8
 8019e60:	6818      	ldr	r0, [r3, #0]
 8019e62:	687a      	ldr	r2, [r7, #4]
 8019e64:	4613      	mov	r3, r2
 8019e66:	005b      	lsls	r3, r3, #1
 8019e68:	4413      	add	r3, r2
 8019e6a:	00db      	lsls	r3, r3, #3
 8019e6c:	4a08      	ldr	r2, [pc, #32]	; (8019e90 <etharp_tmr+0x14c>)
 8019e6e:	4413      	add	r3, r2
 8019e70:	3304      	adds	r3, #4
 8019e72:	4619      	mov	r1, r3
 8019e74:	f000 fe6e 	bl	801ab54 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	3301      	adds	r3, #1
 8019e7c:	607b      	str	r3, [r7, #4]
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	2b09      	cmp	r3, #9
 8019e82:	f77f af65 	ble.w	8019d50 <etharp_tmr+0xc>
      }
    }
  }
}
 8019e86:	bf00      	nop
 8019e88:	bf00      	nop
 8019e8a:	3708      	adds	r7, #8
 8019e8c:	46bd      	mov	sp, r7
 8019e8e:	bd80      	pop	{r7, pc}
 8019e90:	2000ddec 	.word	0x2000ddec

08019e94 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019e94:	b580      	push	{r7, lr}
 8019e96:	b08a      	sub	sp, #40	; 0x28
 8019e98:	af00      	add	r7, sp, #0
 8019e9a:	60f8      	str	r0, [r7, #12]
 8019e9c:	460b      	mov	r3, r1
 8019e9e:	607a      	str	r2, [r7, #4]
 8019ea0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019ea2:	230a      	movs	r3, #10
 8019ea4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8019ea6:	230a      	movs	r3, #10
 8019ea8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8019eaa:	230a      	movs	r3, #10
 8019eac:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8019eae:	2300      	movs	r3, #0
 8019eb0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8019eb2:	230a      	movs	r3, #10
 8019eb4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8019eb6:	2300      	movs	r3, #0
 8019eb8:	83bb      	strh	r3, [r7, #28]
 8019eba:	2300      	movs	r3, #0
 8019ebc:	837b      	strh	r3, [r7, #26]
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	843b      	strh	r3, [r7, #32]
 8019ec6:	e0ae      	b.n	801a026 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8019ec8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019ecc:	49a6      	ldr	r1, [pc, #664]	; (801a168 <etharp_find_entry+0x2d4>)
 8019ece:	4613      	mov	r3, r2
 8019ed0:	005b      	lsls	r3, r3, #1
 8019ed2:	4413      	add	r3, r2
 8019ed4:	00db      	lsls	r3, r3, #3
 8019ed6:	440b      	add	r3, r1
 8019ed8:	3314      	adds	r3, #20
 8019eda:	781b      	ldrb	r3, [r3, #0]
 8019edc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8019ede:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019ee2:	2b0a      	cmp	r3, #10
 8019ee4:	d105      	bne.n	8019ef2 <etharp_find_entry+0x5e>
 8019ee6:	7dfb      	ldrb	r3, [r7, #23]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d102      	bne.n	8019ef2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019eec:	8c3b      	ldrh	r3, [r7, #32]
 8019eee:	847b      	strh	r3, [r7, #34]	; 0x22
 8019ef0:	e095      	b.n	801a01e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8019ef2:	7dfb      	ldrb	r3, [r7, #23]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	f000 8092 	beq.w	801a01e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019efa:	7dfb      	ldrb	r3, [r7, #23]
 8019efc:	2b01      	cmp	r3, #1
 8019efe:	d009      	beq.n	8019f14 <etharp_find_entry+0x80>
 8019f00:	7dfb      	ldrb	r3, [r7, #23]
 8019f02:	2b01      	cmp	r3, #1
 8019f04:	d806      	bhi.n	8019f14 <etharp_find_entry+0x80>
 8019f06:	4b99      	ldr	r3, [pc, #612]	; (801a16c <etharp_find_entry+0x2d8>)
 8019f08:	f240 1223 	movw	r2, #291	; 0x123
 8019f0c:	4998      	ldr	r1, [pc, #608]	; (801a170 <etharp_find_entry+0x2dc>)
 8019f0e:	4899      	ldr	r0, [pc, #612]	; (801a174 <etharp_find_entry+0x2e0>)
 8019f10:	f002 fdd0 	bl	801cab4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d020      	beq.n	8019f5c <etharp_find_entry+0xc8>
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	6819      	ldr	r1, [r3, #0]
 8019f1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019f22:	4891      	ldr	r0, [pc, #580]	; (801a168 <etharp_find_entry+0x2d4>)
 8019f24:	4613      	mov	r3, r2
 8019f26:	005b      	lsls	r3, r3, #1
 8019f28:	4413      	add	r3, r2
 8019f2a:	00db      	lsls	r3, r3, #3
 8019f2c:	4403      	add	r3, r0
 8019f2e:	3304      	adds	r3, #4
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	4299      	cmp	r1, r3
 8019f34:	d112      	bne.n	8019f5c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d00c      	beq.n	8019f56 <etharp_find_entry+0xc2>
 8019f3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019f40:	4989      	ldr	r1, [pc, #548]	; (801a168 <etharp_find_entry+0x2d4>)
 8019f42:	4613      	mov	r3, r2
 8019f44:	005b      	lsls	r3, r3, #1
 8019f46:	4413      	add	r3, r2
 8019f48:	00db      	lsls	r3, r3, #3
 8019f4a:	440b      	add	r3, r1
 8019f4c:	3308      	adds	r3, #8
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	687a      	ldr	r2, [r7, #4]
 8019f52:	429a      	cmp	r2, r3
 8019f54:	d102      	bne.n	8019f5c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019f56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019f5a:	e100      	b.n	801a15e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019f5c:	7dfb      	ldrb	r3, [r7, #23]
 8019f5e:	2b01      	cmp	r3, #1
 8019f60:	d140      	bne.n	8019fe4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019f62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019f66:	4980      	ldr	r1, [pc, #512]	; (801a168 <etharp_find_entry+0x2d4>)
 8019f68:	4613      	mov	r3, r2
 8019f6a:	005b      	lsls	r3, r3, #1
 8019f6c:	4413      	add	r3, r2
 8019f6e:	00db      	lsls	r3, r3, #3
 8019f70:	440b      	add	r3, r1
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d01a      	beq.n	8019fae <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8019f78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019f7c:	497a      	ldr	r1, [pc, #488]	; (801a168 <etharp_find_entry+0x2d4>)
 8019f7e:	4613      	mov	r3, r2
 8019f80:	005b      	lsls	r3, r3, #1
 8019f82:	4413      	add	r3, r2
 8019f84:	00db      	lsls	r3, r3, #3
 8019f86:	440b      	add	r3, r1
 8019f88:	3312      	adds	r3, #18
 8019f8a:	881b      	ldrh	r3, [r3, #0]
 8019f8c:	8bba      	ldrh	r2, [r7, #28]
 8019f8e:	429a      	cmp	r2, r3
 8019f90:	d845      	bhi.n	801a01e <etharp_find_entry+0x18a>
            old_queue = i;
 8019f92:	8c3b      	ldrh	r3, [r7, #32]
 8019f94:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8019f96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019f9a:	4973      	ldr	r1, [pc, #460]	; (801a168 <etharp_find_entry+0x2d4>)
 8019f9c:	4613      	mov	r3, r2
 8019f9e:	005b      	lsls	r3, r3, #1
 8019fa0:	4413      	add	r3, r2
 8019fa2:	00db      	lsls	r3, r3, #3
 8019fa4:	440b      	add	r3, r1
 8019fa6:	3312      	adds	r3, #18
 8019fa8:	881b      	ldrh	r3, [r3, #0]
 8019faa:	83bb      	strh	r3, [r7, #28]
 8019fac:	e037      	b.n	801a01e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019fae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019fb2:	496d      	ldr	r1, [pc, #436]	; (801a168 <etharp_find_entry+0x2d4>)
 8019fb4:	4613      	mov	r3, r2
 8019fb6:	005b      	lsls	r3, r3, #1
 8019fb8:	4413      	add	r3, r2
 8019fba:	00db      	lsls	r3, r3, #3
 8019fbc:	440b      	add	r3, r1
 8019fbe:	3312      	adds	r3, #18
 8019fc0:	881b      	ldrh	r3, [r3, #0]
 8019fc2:	8b7a      	ldrh	r2, [r7, #26]
 8019fc4:	429a      	cmp	r2, r3
 8019fc6:	d82a      	bhi.n	801a01e <etharp_find_entry+0x18a>
            old_pending = i;
 8019fc8:	8c3b      	ldrh	r3, [r7, #32]
 8019fca:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8019fcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019fd0:	4965      	ldr	r1, [pc, #404]	; (801a168 <etharp_find_entry+0x2d4>)
 8019fd2:	4613      	mov	r3, r2
 8019fd4:	005b      	lsls	r3, r3, #1
 8019fd6:	4413      	add	r3, r2
 8019fd8:	00db      	lsls	r3, r3, #3
 8019fda:	440b      	add	r3, r1
 8019fdc:	3312      	adds	r3, #18
 8019fde:	881b      	ldrh	r3, [r3, #0]
 8019fe0:	837b      	strh	r3, [r7, #26]
 8019fe2:	e01c      	b.n	801a01e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019fe4:	7dfb      	ldrb	r3, [r7, #23]
 8019fe6:	2b01      	cmp	r3, #1
 8019fe8:	d919      	bls.n	801a01e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019fea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019fee:	495e      	ldr	r1, [pc, #376]	; (801a168 <etharp_find_entry+0x2d4>)
 8019ff0:	4613      	mov	r3, r2
 8019ff2:	005b      	lsls	r3, r3, #1
 8019ff4:	4413      	add	r3, r2
 8019ff6:	00db      	lsls	r3, r3, #3
 8019ff8:	440b      	add	r3, r1
 8019ffa:	3312      	adds	r3, #18
 8019ffc:	881b      	ldrh	r3, [r3, #0]
 8019ffe:	8b3a      	ldrh	r2, [r7, #24]
 801a000:	429a      	cmp	r2, r3
 801a002:	d80c      	bhi.n	801a01e <etharp_find_entry+0x18a>
            old_stable = i;
 801a004:	8c3b      	ldrh	r3, [r7, #32]
 801a006:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801a008:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a00c:	4956      	ldr	r1, [pc, #344]	; (801a168 <etharp_find_entry+0x2d4>)
 801a00e:	4613      	mov	r3, r2
 801a010:	005b      	lsls	r3, r3, #1
 801a012:	4413      	add	r3, r2
 801a014:	00db      	lsls	r3, r3, #3
 801a016:	440b      	add	r3, r1
 801a018:	3312      	adds	r3, #18
 801a01a:	881b      	ldrh	r3, [r3, #0]
 801a01c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a01e:	8c3b      	ldrh	r3, [r7, #32]
 801a020:	3301      	adds	r3, #1
 801a022:	b29b      	uxth	r3, r3
 801a024:	843b      	strh	r3, [r7, #32]
 801a026:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a02a:	2b09      	cmp	r3, #9
 801a02c:	f77f af4c 	ble.w	8019ec8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a030:	7afb      	ldrb	r3, [r7, #11]
 801a032:	f003 0302 	and.w	r3, r3, #2
 801a036:	2b00      	cmp	r3, #0
 801a038:	d108      	bne.n	801a04c <etharp_find_entry+0x1b8>
 801a03a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a03e:	2b0a      	cmp	r3, #10
 801a040:	d107      	bne.n	801a052 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a042:	7afb      	ldrb	r3, [r7, #11]
 801a044:	f003 0301 	and.w	r3, r3, #1
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d102      	bne.n	801a052 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a04c:	f04f 33ff 	mov.w	r3, #4294967295
 801a050:	e085      	b.n	801a15e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a052:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a056:	2b09      	cmp	r3, #9
 801a058:	dc02      	bgt.n	801a060 <etharp_find_entry+0x1cc>
    i = empty;
 801a05a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a05c:	843b      	strh	r3, [r7, #32]
 801a05e:	e039      	b.n	801a0d4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a060:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801a064:	2b09      	cmp	r3, #9
 801a066:	dc14      	bgt.n	801a092 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a06a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a06c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a070:	493d      	ldr	r1, [pc, #244]	; (801a168 <etharp_find_entry+0x2d4>)
 801a072:	4613      	mov	r3, r2
 801a074:	005b      	lsls	r3, r3, #1
 801a076:	4413      	add	r3, r2
 801a078:	00db      	lsls	r3, r3, #3
 801a07a:	440b      	add	r3, r1
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d018      	beq.n	801a0b4 <etharp_find_entry+0x220>
 801a082:	4b3a      	ldr	r3, [pc, #232]	; (801a16c <etharp_find_entry+0x2d8>)
 801a084:	f240 126d 	movw	r2, #365	; 0x16d
 801a088:	493b      	ldr	r1, [pc, #236]	; (801a178 <etharp_find_entry+0x2e4>)
 801a08a:	483a      	ldr	r0, [pc, #232]	; (801a174 <etharp_find_entry+0x2e0>)
 801a08c:	f002 fd12 	bl	801cab4 <iprintf>
 801a090:	e010      	b.n	801a0b4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a092:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801a096:	2b09      	cmp	r3, #9
 801a098:	dc02      	bgt.n	801a0a0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a09a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a09c:	843b      	strh	r3, [r7, #32]
 801a09e:	e009      	b.n	801a0b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a0a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a0a4:	2b09      	cmp	r3, #9
 801a0a6:	dc02      	bgt.n	801a0ae <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a0a8:	8bfb      	ldrh	r3, [r7, #30]
 801a0aa:	843b      	strh	r3, [r7, #32]
 801a0ac:	e002      	b.n	801a0b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a0ae:	f04f 33ff 	mov.w	r3, #4294967295
 801a0b2:	e054      	b.n	801a15e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a0b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a0b8:	2b09      	cmp	r3, #9
 801a0ba:	dd06      	ble.n	801a0ca <etharp_find_entry+0x236>
 801a0bc:	4b2b      	ldr	r3, [pc, #172]	; (801a16c <etharp_find_entry+0x2d8>)
 801a0be:	f240 127f 	movw	r2, #383	; 0x17f
 801a0c2:	492e      	ldr	r1, [pc, #184]	; (801a17c <etharp_find_entry+0x2e8>)
 801a0c4:	482b      	ldr	r0, [pc, #172]	; (801a174 <etharp_find_entry+0x2e0>)
 801a0c6:	f002 fcf5 	bl	801cab4 <iprintf>
    etharp_free_entry(i);
 801a0ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	f7ff fe06 	bl	8019ce0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a0d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a0d8:	2b09      	cmp	r3, #9
 801a0da:	dd06      	ble.n	801a0ea <etharp_find_entry+0x256>
 801a0dc:	4b23      	ldr	r3, [pc, #140]	; (801a16c <etharp_find_entry+0x2d8>)
 801a0de:	f240 1283 	movw	r2, #387	; 0x183
 801a0e2:	4926      	ldr	r1, [pc, #152]	; (801a17c <etharp_find_entry+0x2e8>)
 801a0e4:	4823      	ldr	r0, [pc, #140]	; (801a174 <etharp_find_entry+0x2e0>)
 801a0e6:	f002 fce5 	bl	801cab4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a0ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a0ee:	491e      	ldr	r1, [pc, #120]	; (801a168 <etharp_find_entry+0x2d4>)
 801a0f0:	4613      	mov	r3, r2
 801a0f2:	005b      	lsls	r3, r3, #1
 801a0f4:	4413      	add	r3, r2
 801a0f6:	00db      	lsls	r3, r3, #3
 801a0f8:	440b      	add	r3, r1
 801a0fa:	3314      	adds	r3, #20
 801a0fc:	781b      	ldrb	r3, [r3, #0]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d006      	beq.n	801a110 <etharp_find_entry+0x27c>
 801a102:	4b1a      	ldr	r3, [pc, #104]	; (801a16c <etharp_find_entry+0x2d8>)
 801a104:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801a108:	491d      	ldr	r1, [pc, #116]	; (801a180 <etharp_find_entry+0x2ec>)
 801a10a:	481a      	ldr	r0, [pc, #104]	; (801a174 <etharp_find_entry+0x2e0>)
 801a10c:	f002 fcd2 	bl	801cab4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	2b00      	cmp	r3, #0
 801a114:	d00b      	beq.n	801a12e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a116:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a11a:	68fb      	ldr	r3, [r7, #12]
 801a11c:	6819      	ldr	r1, [r3, #0]
 801a11e:	4812      	ldr	r0, [pc, #72]	; (801a168 <etharp_find_entry+0x2d4>)
 801a120:	4613      	mov	r3, r2
 801a122:	005b      	lsls	r3, r3, #1
 801a124:	4413      	add	r3, r2
 801a126:	00db      	lsls	r3, r3, #3
 801a128:	4403      	add	r3, r0
 801a12a:	3304      	adds	r3, #4
 801a12c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a12e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a132:	490d      	ldr	r1, [pc, #52]	; (801a168 <etharp_find_entry+0x2d4>)
 801a134:	4613      	mov	r3, r2
 801a136:	005b      	lsls	r3, r3, #1
 801a138:	4413      	add	r3, r2
 801a13a:	00db      	lsls	r3, r3, #3
 801a13c:	440b      	add	r3, r1
 801a13e:	3312      	adds	r3, #18
 801a140:	2200      	movs	r2, #0
 801a142:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a144:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a148:	4907      	ldr	r1, [pc, #28]	; (801a168 <etharp_find_entry+0x2d4>)
 801a14a:	4613      	mov	r3, r2
 801a14c:	005b      	lsls	r3, r3, #1
 801a14e:	4413      	add	r3, r2
 801a150:	00db      	lsls	r3, r3, #3
 801a152:	440b      	add	r3, r1
 801a154:	3308      	adds	r3, #8
 801a156:	687a      	ldr	r2, [r7, #4]
 801a158:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a15a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a15e:	4618      	mov	r0, r3
 801a160:	3728      	adds	r7, #40	; 0x28
 801a162:	46bd      	mov	sp, r7
 801a164:	bd80      	pop	{r7, pc}
 801a166:	bf00      	nop
 801a168:	2000ddec 	.word	0x2000ddec
 801a16c:	08020ef0 	.word	0x08020ef0
 801a170:	08020f28 	.word	0x08020f28
 801a174:	08020f68 	.word	0x08020f68
 801a178:	08020f90 	.word	0x08020f90
 801a17c:	08020fa8 	.word	0x08020fa8
 801a180:	08020fbc 	.word	0x08020fbc

0801a184 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a184:	b580      	push	{r7, lr}
 801a186:	b088      	sub	sp, #32
 801a188:	af02      	add	r7, sp, #8
 801a18a:	60f8      	str	r0, [r7, #12]
 801a18c:	60b9      	str	r1, [r7, #8]
 801a18e:	607a      	str	r2, [r7, #4]
 801a190:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a198:	2b06      	cmp	r3, #6
 801a19a:	d006      	beq.n	801a1aa <etharp_update_arp_entry+0x26>
 801a19c:	4b48      	ldr	r3, [pc, #288]	; (801a2c0 <etharp_update_arp_entry+0x13c>)
 801a19e:	f240 12a9 	movw	r2, #425	; 0x1a9
 801a1a2:	4948      	ldr	r1, [pc, #288]	; (801a2c4 <etharp_update_arp_entry+0x140>)
 801a1a4:	4848      	ldr	r0, [pc, #288]	; (801a2c8 <etharp_update_arp_entry+0x144>)
 801a1a6:	f002 fc85 	bl	801cab4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a1aa:	68bb      	ldr	r3, [r7, #8]
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d012      	beq.n	801a1d6 <etharp_update_arp_entry+0x52>
 801a1b0:	68bb      	ldr	r3, [r7, #8]
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d00e      	beq.n	801a1d6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a1b8:	68bb      	ldr	r3, [r7, #8]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	68f9      	ldr	r1, [r7, #12]
 801a1be:	4618      	mov	r0, r3
 801a1c0:	f001 f8fe 	bl	801b3c0 <ip4_addr_isbroadcast_u32>
 801a1c4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d105      	bne.n	801a1d6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a1ca:	68bb      	ldr	r3, [r7, #8]
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a1d2:	2be0      	cmp	r3, #224	; 0xe0
 801a1d4:	d102      	bne.n	801a1dc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a1d6:	f06f 030f 	mvn.w	r3, #15
 801a1da:	e06c      	b.n	801a2b6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a1dc:	78fb      	ldrb	r3, [r7, #3]
 801a1de:	68fa      	ldr	r2, [r7, #12]
 801a1e0:	4619      	mov	r1, r3
 801a1e2:	68b8      	ldr	r0, [r7, #8]
 801a1e4:	f7ff fe56 	bl	8019e94 <etharp_find_entry>
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a1ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	da02      	bge.n	801a1fa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a1f4:	8afb      	ldrh	r3, [r7, #22]
 801a1f6:	b25b      	sxtb	r3, r3
 801a1f8:	e05d      	b.n	801a2b6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a1fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a1fe:	4933      	ldr	r1, [pc, #204]	; (801a2cc <etharp_update_arp_entry+0x148>)
 801a200:	4613      	mov	r3, r2
 801a202:	005b      	lsls	r3, r3, #1
 801a204:	4413      	add	r3, r2
 801a206:	00db      	lsls	r3, r3, #3
 801a208:	440b      	add	r3, r1
 801a20a:	3314      	adds	r3, #20
 801a20c:	2202      	movs	r2, #2
 801a20e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a210:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a214:	492d      	ldr	r1, [pc, #180]	; (801a2cc <etharp_update_arp_entry+0x148>)
 801a216:	4613      	mov	r3, r2
 801a218:	005b      	lsls	r3, r3, #1
 801a21a:	4413      	add	r3, r2
 801a21c:	00db      	lsls	r3, r3, #3
 801a21e:	440b      	add	r3, r1
 801a220:	3308      	adds	r3, #8
 801a222:	68fa      	ldr	r2, [r7, #12]
 801a224:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a226:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a22a:	4613      	mov	r3, r2
 801a22c:	005b      	lsls	r3, r3, #1
 801a22e:	4413      	add	r3, r2
 801a230:	00db      	lsls	r3, r3, #3
 801a232:	3308      	adds	r3, #8
 801a234:	4a25      	ldr	r2, [pc, #148]	; (801a2cc <etharp_update_arp_entry+0x148>)
 801a236:	4413      	add	r3, r2
 801a238:	3304      	adds	r3, #4
 801a23a:	2206      	movs	r2, #6
 801a23c:	6879      	ldr	r1, [r7, #4]
 801a23e:	4618      	mov	r0, r3
 801a240:	f002 fb28 	bl	801c894 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a244:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a248:	4920      	ldr	r1, [pc, #128]	; (801a2cc <etharp_update_arp_entry+0x148>)
 801a24a:	4613      	mov	r3, r2
 801a24c:	005b      	lsls	r3, r3, #1
 801a24e:	4413      	add	r3, r2
 801a250:	00db      	lsls	r3, r3, #3
 801a252:	440b      	add	r3, r1
 801a254:	3312      	adds	r3, #18
 801a256:	2200      	movs	r2, #0
 801a258:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a25a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a25e:	491b      	ldr	r1, [pc, #108]	; (801a2cc <etharp_update_arp_entry+0x148>)
 801a260:	4613      	mov	r3, r2
 801a262:	005b      	lsls	r3, r3, #1
 801a264:	4413      	add	r3, r2
 801a266:	00db      	lsls	r3, r3, #3
 801a268:	440b      	add	r3, r1
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d021      	beq.n	801a2b4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a270:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a274:	4915      	ldr	r1, [pc, #84]	; (801a2cc <etharp_update_arp_entry+0x148>)
 801a276:	4613      	mov	r3, r2
 801a278:	005b      	lsls	r3, r3, #1
 801a27a:	4413      	add	r3, r2
 801a27c:	00db      	lsls	r3, r3, #3
 801a27e:	440b      	add	r3, r1
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a284:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a288:	4910      	ldr	r1, [pc, #64]	; (801a2cc <etharp_update_arp_entry+0x148>)
 801a28a:	4613      	mov	r3, r2
 801a28c:	005b      	lsls	r3, r3, #1
 801a28e:	4413      	add	r3, r2
 801a290:	00db      	lsls	r3, r3, #3
 801a292:	440b      	add	r3, r1
 801a294:	2200      	movs	r2, #0
 801a296:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a298:	68fb      	ldr	r3, [r7, #12]
 801a29a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801a29e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a2a2:	9300      	str	r3, [sp, #0]
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	6939      	ldr	r1, [r7, #16]
 801a2a8:	68f8      	ldr	r0, [r7, #12]
 801a2aa:	f001 ff97 	bl	801c1dc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a2ae:	6938      	ldr	r0, [r7, #16]
 801a2b0:	f7f8 fc4c 	bl	8012b4c <pbuf_free>
  }
  return ERR_OK;
 801a2b4:	2300      	movs	r3, #0
}
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	3718      	adds	r7, #24
 801a2ba:	46bd      	mov	sp, r7
 801a2bc:	bd80      	pop	{r7, pc}
 801a2be:	bf00      	nop
 801a2c0:	08020ef0 	.word	0x08020ef0
 801a2c4:	08020fe8 	.word	0x08020fe8
 801a2c8:	08020f68 	.word	0x08020f68
 801a2cc:	2000ddec 	.word	0x2000ddec

0801a2d0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b084      	sub	sp, #16
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a2d8:	2300      	movs	r3, #0
 801a2da:	60fb      	str	r3, [r7, #12]
 801a2dc:	e01e      	b.n	801a31c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a2de:	4913      	ldr	r1, [pc, #76]	; (801a32c <etharp_cleanup_netif+0x5c>)
 801a2e0:	68fa      	ldr	r2, [r7, #12]
 801a2e2:	4613      	mov	r3, r2
 801a2e4:	005b      	lsls	r3, r3, #1
 801a2e6:	4413      	add	r3, r2
 801a2e8:	00db      	lsls	r3, r3, #3
 801a2ea:	440b      	add	r3, r1
 801a2ec:	3314      	adds	r3, #20
 801a2ee:	781b      	ldrb	r3, [r3, #0]
 801a2f0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a2f2:	7afb      	ldrb	r3, [r7, #11]
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d00e      	beq.n	801a316 <etharp_cleanup_netif+0x46>
 801a2f8:	490c      	ldr	r1, [pc, #48]	; (801a32c <etharp_cleanup_netif+0x5c>)
 801a2fa:	68fa      	ldr	r2, [r7, #12]
 801a2fc:	4613      	mov	r3, r2
 801a2fe:	005b      	lsls	r3, r3, #1
 801a300:	4413      	add	r3, r2
 801a302:	00db      	lsls	r3, r3, #3
 801a304:	440b      	add	r3, r1
 801a306:	3308      	adds	r3, #8
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	687a      	ldr	r2, [r7, #4]
 801a30c:	429a      	cmp	r2, r3
 801a30e:	d102      	bne.n	801a316 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a310:	68f8      	ldr	r0, [r7, #12]
 801a312:	f7ff fce5 	bl	8019ce0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a316:	68fb      	ldr	r3, [r7, #12]
 801a318:	3301      	adds	r3, #1
 801a31a:	60fb      	str	r3, [r7, #12]
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	2b09      	cmp	r3, #9
 801a320:	dddd      	ble.n	801a2de <etharp_cleanup_netif+0xe>
    }
  }
}
 801a322:	bf00      	nop
 801a324:	bf00      	nop
 801a326:	3710      	adds	r7, #16
 801a328:	46bd      	mov	sp, r7
 801a32a:	bd80      	pop	{r7, pc}
 801a32c:	2000ddec 	.word	0x2000ddec

0801a330 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a330:	b5b0      	push	{r4, r5, r7, lr}
 801a332:	b08a      	sub	sp, #40	; 0x28
 801a334:	af04      	add	r7, sp, #16
 801a336:	6078      	str	r0, [r7, #4]
 801a338:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a33a:	683b      	ldr	r3, [r7, #0]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d107      	bne.n	801a350 <etharp_input+0x20>
 801a340:	4b3d      	ldr	r3, [pc, #244]	; (801a438 <etharp_input+0x108>)
 801a342:	f240 228a 	movw	r2, #650	; 0x28a
 801a346:	493d      	ldr	r1, [pc, #244]	; (801a43c <etharp_input+0x10c>)
 801a348:	483d      	ldr	r0, [pc, #244]	; (801a440 <etharp_input+0x110>)
 801a34a:	f002 fbb3 	bl	801cab4 <iprintf>
 801a34e:	e06f      	b.n	801a430 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	685b      	ldr	r3, [r3, #4]
 801a354:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a356:	693b      	ldr	r3, [r7, #16]
 801a358:	881b      	ldrh	r3, [r3, #0]
 801a35a:	b29b      	uxth	r3, r3
 801a35c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a360:	d10c      	bne.n	801a37c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a362:	693b      	ldr	r3, [r7, #16]
 801a364:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a366:	2b06      	cmp	r3, #6
 801a368:	d108      	bne.n	801a37c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a36a:	693b      	ldr	r3, [r7, #16]
 801a36c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a36e:	2b04      	cmp	r3, #4
 801a370:	d104      	bne.n	801a37c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a372:	693b      	ldr	r3, [r7, #16]
 801a374:	885b      	ldrh	r3, [r3, #2]
 801a376:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a378:	2b08      	cmp	r3, #8
 801a37a:	d003      	beq.n	801a384 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a37c:	6878      	ldr	r0, [r7, #4]
 801a37e:	f7f8 fbe5 	bl	8012b4c <pbuf_free>
    return;
 801a382:	e055      	b.n	801a430 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a384:	693b      	ldr	r3, [r7, #16]
 801a386:	330e      	adds	r3, #14
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a38c:	693b      	ldr	r3, [r7, #16]
 801a38e:	3318      	adds	r3, #24
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a394:	683b      	ldr	r3, [r7, #0]
 801a396:	3304      	adds	r3, #4
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d102      	bne.n	801a3a4 <etharp_input+0x74>
    for_us = 0;
 801a39e:	2300      	movs	r3, #0
 801a3a0:	75fb      	strb	r3, [r7, #23]
 801a3a2:	e009      	b.n	801a3b8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a3a4:	68ba      	ldr	r2, [r7, #8]
 801a3a6:	683b      	ldr	r3, [r7, #0]
 801a3a8:	3304      	adds	r3, #4
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	429a      	cmp	r2, r3
 801a3ae:	bf0c      	ite	eq
 801a3b0:	2301      	moveq	r3, #1
 801a3b2:	2300      	movne	r3, #0
 801a3b4:	b2db      	uxtb	r3, r3
 801a3b6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a3b8:	693b      	ldr	r3, [r7, #16]
 801a3ba:	f103 0208 	add.w	r2, r3, #8
 801a3be:	7dfb      	ldrb	r3, [r7, #23]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d001      	beq.n	801a3c8 <etharp_input+0x98>
 801a3c4:	2301      	movs	r3, #1
 801a3c6:	e000      	b.n	801a3ca <etharp_input+0x9a>
 801a3c8:	2302      	movs	r3, #2
 801a3ca:	f107 010c 	add.w	r1, r7, #12
 801a3ce:	6838      	ldr	r0, [r7, #0]
 801a3d0:	f7ff fed8 	bl	801a184 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a3d4:	693b      	ldr	r3, [r7, #16]
 801a3d6:	88db      	ldrh	r3, [r3, #6]
 801a3d8:	b29b      	uxth	r3, r3
 801a3da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a3de:	d003      	beq.n	801a3e8 <etharp_input+0xb8>
 801a3e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a3e4:	d01e      	beq.n	801a424 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a3e6:	e020      	b.n	801a42a <etharp_input+0xfa>
      if (for_us) {
 801a3e8:	7dfb      	ldrb	r3, [r7, #23]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d01c      	beq.n	801a428 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a3ee:	683b      	ldr	r3, [r7, #0]
 801a3f0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801a3f4:	693b      	ldr	r3, [r7, #16]
 801a3f6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a3fa:	683b      	ldr	r3, [r7, #0]
 801a3fc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801a400:	683b      	ldr	r3, [r7, #0]
 801a402:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a404:	693a      	ldr	r2, [r7, #16]
 801a406:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a408:	2102      	movs	r1, #2
 801a40a:	9103      	str	r1, [sp, #12]
 801a40c:	f107 010c 	add.w	r1, r7, #12
 801a410:	9102      	str	r1, [sp, #8]
 801a412:	9201      	str	r2, [sp, #4]
 801a414:	9300      	str	r3, [sp, #0]
 801a416:	462b      	mov	r3, r5
 801a418:	4622      	mov	r2, r4
 801a41a:	4601      	mov	r1, r0
 801a41c:	6838      	ldr	r0, [r7, #0]
 801a41e:	f000 faeb 	bl	801a9f8 <etharp_raw>
      break;
 801a422:	e001      	b.n	801a428 <etharp_input+0xf8>
      break;
 801a424:	bf00      	nop
 801a426:	e000      	b.n	801a42a <etharp_input+0xfa>
      break;
 801a428:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a42a:	6878      	ldr	r0, [r7, #4]
 801a42c:	f7f8 fb8e 	bl	8012b4c <pbuf_free>
}
 801a430:	3718      	adds	r7, #24
 801a432:	46bd      	mov	sp, r7
 801a434:	bdb0      	pop	{r4, r5, r7, pc}
 801a436:	bf00      	nop
 801a438:	08020ef0 	.word	0x08020ef0
 801a43c:	08021040 	.word	0x08021040
 801a440:	08020f68 	.word	0x08020f68

0801a444 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a444:	b580      	push	{r7, lr}
 801a446:	b086      	sub	sp, #24
 801a448:	af02      	add	r7, sp, #8
 801a44a:	60f8      	str	r0, [r7, #12]
 801a44c:	60b9      	str	r1, [r7, #8]
 801a44e:	4613      	mov	r3, r2
 801a450:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a452:	79fa      	ldrb	r2, [r7, #7]
 801a454:	4944      	ldr	r1, [pc, #272]	; (801a568 <etharp_output_to_arp_index+0x124>)
 801a456:	4613      	mov	r3, r2
 801a458:	005b      	lsls	r3, r3, #1
 801a45a:	4413      	add	r3, r2
 801a45c:	00db      	lsls	r3, r3, #3
 801a45e:	440b      	add	r3, r1
 801a460:	3314      	adds	r3, #20
 801a462:	781b      	ldrb	r3, [r3, #0]
 801a464:	2b01      	cmp	r3, #1
 801a466:	d806      	bhi.n	801a476 <etharp_output_to_arp_index+0x32>
 801a468:	4b40      	ldr	r3, [pc, #256]	; (801a56c <etharp_output_to_arp_index+0x128>)
 801a46a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a46e:	4940      	ldr	r1, [pc, #256]	; (801a570 <etharp_output_to_arp_index+0x12c>)
 801a470:	4840      	ldr	r0, [pc, #256]	; (801a574 <etharp_output_to_arp_index+0x130>)
 801a472:	f002 fb1f 	bl	801cab4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a476:	79fa      	ldrb	r2, [r7, #7]
 801a478:	493b      	ldr	r1, [pc, #236]	; (801a568 <etharp_output_to_arp_index+0x124>)
 801a47a:	4613      	mov	r3, r2
 801a47c:	005b      	lsls	r3, r3, #1
 801a47e:	4413      	add	r3, r2
 801a480:	00db      	lsls	r3, r3, #3
 801a482:	440b      	add	r3, r1
 801a484:	3314      	adds	r3, #20
 801a486:	781b      	ldrb	r3, [r3, #0]
 801a488:	2b02      	cmp	r3, #2
 801a48a:	d153      	bne.n	801a534 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a48c:	79fa      	ldrb	r2, [r7, #7]
 801a48e:	4936      	ldr	r1, [pc, #216]	; (801a568 <etharp_output_to_arp_index+0x124>)
 801a490:	4613      	mov	r3, r2
 801a492:	005b      	lsls	r3, r3, #1
 801a494:	4413      	add	r3, r2
 801a496:	00db      	lsls	r3, r3, #3
 801a498:	440b      	add	r3, r1
 801a49a:	3312      	adds	r3, #18
 801a49c:	881b      	ldrh	r3, [r3, #0]
 801a49e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801a4a2:	d919      	bls.n	801a4d8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a4a4:	79fa      	ldrb	r2, [r7, #7]
 801a4a6:	4613      	mov	r3, r2
 801a4a8:	005b      	lsls	r3, r3, #1
 801a4aa:	4413      	add	r3, r2
 801a4ac:	00db      	lsls	r3, r3, #3
 801a4ae:	4a2e      	ldr	r2, [pc, #184]	; (801a568 <etharp_output_to_arp_index+0x124>)
 801a4b0:	4413      	add	r3, r2
 801a4b2:	3304      	adds	r3, #4
 801a4b4:	4619      	mov	r1, r3
 801a4b6:	68f8      	ldr	r0, [r7, #12]
 801a4b8:	f000 fb4c 	bl	801ab54 <etharp_request>
 801a4bc:	4603      	mov	r3, r0
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d138      	bne.n	801a534 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a4c2:	79fa      	ldrb	r2, [r7, #7]
 801a4c4:	4928      	ldr	r1, [pc, #160]	; (801a568 <etharp_output_to_arp_index+0x124>)
 801a4c6:	4613      	mov	r3, r2
 801a4c8:	005b      	lsls	r3, r3, #1
 801a4ca:	4413      	add	r3, r2
 801a4cc:	00db      	lsls	r3, r3, #3
 801a4ce:	440b      	add	r3, r1
 801a4d0:	3314      	adds	r3, #20
 801a4d2:	2203      	movs	r2, #3
 801a4d4:	701a      	strb	r2, [r3, #0]
 801a4d6:	e02d      	b.n	801a534 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a4d8:	79fa      	ldrb	r2, [r7, #7]
 801a4da:	4923      	ldr	r1, [pc, #140]	; (801a568 <etharp_output_to_arp_index+0x124>)
 801a4dc:	4613      	mov	r3, r2
 801a4de:	005b      	lsls	r3, r3, #1
 801a4e0:	4413      	add	r3, r2
 801a4e2:	00db      	lsls	r3, r3, #3
 801a4e4:	440b      	add	r3, r1
 801a4e6:	3312      	adds	r3, #18
 801a4e8:	881b      	ldrh	r3, [r3, #0]
 801a4ea:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801a4ee:	d321      	bcc.n	801a534 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a4f0:	79fa      	ldrb	r2, [r7, #7]
 801a4f2:	4613      	mov	r3, r2
 801a4f4:	005b      	lsls	r3, r3, #1
 801a4f6:	4413      	add	r3, r2
 801a4f8:	00db      	lsls	r3, r3, #3
 801a4fa:	4a1b      	ldr	r2, [pc, #108]	; (801a568 <etharp_output_to_arp_index+0x124>)
 801a4fc:	4413      	add	r3, r2
 801a4fe:	1d19      	adds	r1, r3, #4
 801a500:	79fa      	ldrb	r2, [r7, #7]
 801a502:	4613      	mov	r3, r2
 801a504:	005b      	lsls	r3, r3, #1
 801a506:	4413      	add	r3, r2
 801a508:	00db      	lsls	r3, r3, #3
 801a50a:	3308      	adds	r3, #8
 801a50c:	4a16      	ldr	r2, [pc, #88]	; (801a568 <etharp_output_to_arp_index+0x124>)
 801a50e:	4413      	add	r3, r2
 801a510:	3304      	adds	r3, #4
 801a512:	461a      	mov	r2, r3
 801a514:	68f8      	ldr	r0, [r7, #12]
 801a516:	f000 fafb 	bl	801ab10 <etharp_request_dst>
 801a51a:	4603      	mov	r3, r0
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d109      	bne.n	801a534 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a520:	79fa      	ldrb	r2, [r7, #7]
 801a522:	4911      	ldr	r1, [pc, #68]	; (801a568 <etharp_output_to_arp_index+0x124>)
 801a524:	4613      	mov	r3, r2
 801a526:	005b      	lsls	r3, r3, #1
 801a528:	4413      	add	r3, r2
 801a52a:	00db      	lsls	r3, r3, #3
 801a52c:	440b      	add	r3, r1
 801a52e:	3314      	adds	r3, #20
 801a530:	2203      	movs	r2, #3
 801a532:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801a53a:	79fa      	ldrb	r2, [r7, #7]
 801a53c:	4613      	mov	r3, r2
 801a53e:	005b      	lsls	r3, r3, #1
 801a540:	4413      	add	r3, r2
 801a542:	00db      	lsls	r3, r3, #3
 801a544:	3308      	adds	r3, #8
 801a546:	4a08      	ldr	r2, [pc, #32]	; (801a568 <etharp_output_to_arp_index+0x124>)
 801a548:	4413      	add	r3, r2
 801a54a:	3304      	adds	r3, #4
 801a54c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a550:	9200      	str	r2, [sp, #0]
 801a552:	460a      	mov	r2, r1
 801a554:	68b9      	ldr	r1, [r7, #8]
 801a556:	68f8      	ldr	r0, [r7, #12]
 801a558:	f001 fe40 	bl	801c1dc <ethernet_output>
 801a55c:	4603      	mov	r3, r0
}
 801a55e:	4618      	mov	r0, r3
 801a560:	3710      	adds	r7, #16
 801a562:	46bd      	mov	sp, r7
 801a564:	bd80      	pop	{r7, pc}
 801a566:	bf00      	nop
 801a568:	2000ddec 	.word	0x2000ddec
 801a56c:	08020ef0 	.word	0x08020ef0
 801a570:	08021060 	.word	0x08021060
 801a574:	08020f68 	.word	0x08020f68

0801a578 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a578:	b580      	push	{r7, lr}
 801a57a:	b08a      	sub	sp, #40	; 0x28
 801a57c:	af02      	add	r7, sp, #8
 801a57e:	60f8      	str	r0, [r7, #12]
 801a580:	60b9      	str	r1, [r7, #8]
 801a582:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d106      	bne.n	801a59c <etharp_output+0x24>
 801a58e:	4b73      	ldr	r3, [pc, #460]	; (801a75c <etharp_output+0x1e4>)
 801a590:	f240 321e 	movw	r2, #798	; 0x31e
 801a594:	4972      	ldr	r1, [pc, #456]	; (801a760 <etharp_output+0x1e8>)
 801a596:	4873      	ldr	r0, [pc, #460]	; (801a764 <etharp_output+0x1ec>)
 801a598:	f002 fa8c 	bl	801cab4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a59c:	68bb      	ldr	r3, [r7, #8]
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d106      	bne.n	801a5b0 <etharp_output+0x38>
 801a5a2:	4b6e      	ldr	r3, [pc, #440]	; (801a75c <etharp_output+0x1e4>)
 801a5a4:	f240 321f 	movw	r2, #799	; 0x31f
 801a5a8:	496f      	ldr	r1, [pc, #444]	; (801a768 <etharp_output+0x1f0>)
 801a5aa:	486e      	ldr	r0, [pc, #440]	; (801a764 <etharp_output+0x1ec>)
 801a5ac:	f002 fa82 	bl	801cab4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d106      	bne.n	801a5c4 <etharp_output+0x4c>
 801a5b6:	4b69      	ldr	r3, [pc, #420]	; (801a75c <etharp_output+0x1e4>)
 801a5b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a5bc:	496b      	ldr	r1, [pc, #428]	; (801a76c <etharp_output+0x1f4>)
 801a5be:	4869      	ldr	r0, [pc, #420]	; (801a764 <etharp_output+0x1ec>)
 801a5c0:	f002 fa78 	bl	801cab4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	68f9      	ldr	r1, [r7, #12]
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	f000 fef8 	bl	801b3c0 <ip4_addr_isbroadcast_u32>
 801a5d0:	4603      	mov	r3, r0
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d002      	beq.n	801a5dc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a5d6:	4b66      	ldr	r3, [pc, #408]	; (801a770 <etharp_output+0x1f8>)
 801a5d8:	61fb      	str	r3, [r7, #28]
 801a5da:	e0af      	b.n	801a73c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a5e4:	2be0      	cmp	r3, #224	; 0xe0
 801a5e6:	d118      	bne.n	801a61a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a5e8:	2301      	movs	r3, #1
 801a5ea:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a5ec:	2300      	movs	r3, #0
 801a5ee:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a5f0:	235e      	movs	r3, #94	; 0x5e
 801a5f2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	3301      	adds	r3, #1
 801a5f8:	781b      	ldrb	r3, [r3, #0]
 801a5fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a5fe:	b2db      	uxtb	r3, r3
 801a600:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	3302      	adds	r3, #2
 801a606:	781b      	ldrb	r3, [r3, #0]
 801a608:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	3303      	adds	r3, #3
 801a60e:	781b      	ldrb	r3, [r3, #0]
 801a610:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801a612:	f107 0310 	add.w	r3, r7, #16
 801a616:	61fb      	str	r3, [r7, #28]
 801a618:	e090      	b.n	801a73c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	681a      	ldr	r2, [r3, #0]
 801a61e:	68fb      	ldr	r3, [r7, #12]
 801a620:	3304      	adds	r3, #4
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	405a      	eors	r2, r3
 801a626:	68fb      	ldr	r3, [r7, #12]
 801a628:	3308      	adds	r3, #8
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	4013      	ands	r3, r2
 801a62e:	2b00      	cmp	r3, #0
 801a630:	d012      	beq.n	801a658 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a638:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801a63c:	4293      	cmp	r3, r2
 801a63e:	d00b      	beq.n	801a658 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a640:	68fb      	ldr	r3, [r7, #12]
 801a642:	330c      	adds	r3, #12
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	2b00      	cmp	r3, #0
 801a648:	d003      	beq.n	801a652 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	330c      	adds	r3, #12
 801a64e:	61bb      	str	r3, [r7, #24]
 801a650:	e002      	b.n	801a658 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801a652:	f06f 0303 	mvn.w	r3, #3
 801a656:	e07d      	b.n	801a754 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a658:	4b46      	ldr	r3, [pc, #280]	; (801a774 <etharp_output+0x1fc>)
 801a65a:	781b      	ldrb	r3, [r3, #0]
 801a65c:	4619      	mov	r1, r3
 801a65e:	4a46      	ldr	r2, [pc, #280]	; (801a778 <etharp_output+0x200>)
 801a660:	460b      	mov	r3, r1
 801a662:	005b      	lsls	r3, r3, #1
 801a664:	440b      	add	r3, r1
 801a666:	00db      	lsls	r3, r3, #3
 801a668:	4413      	add	r3, r2
 801a66a:	3314      	adds	r3, #20
 801a66c:	781b      	ldrb	r3, [r3, #0]
 801a66e:	2b01      	cmp	r3, #1
 801a670:	d925      	bls.n	801a6be <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a672:	4b40      	ldr	r3, [pc, #256]	; (801a774 <etharp_output+0x1fc>)
 801a674:	781b      	ldrb	r3, [r3, #0]
 801a676:	4619      	mov	r1, r3
 801a678:	4a3f      	ldr	r2, [pc, #252]	; (801a778 <etharp_output+0x200>)
 801a67a:	460b      	mov	r3, r1
 801a67c:	005b      	lsls	r3, r3, #1
 801a67e:	440b      	add	r3, r1
 801a680:	00db      	lsls	r3, r3, #3
 801a682:	4413      	add	r3, r2
 801a684:	3308      	adds	r3, #8
 801a686:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a688:	68fa      	ldr	r2, [r7, #12]
 801a68a:	429a      	cmp	r2, r3
 801a68c:	d117      	bne.n	801a6be <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801a68e:	69bb      	ldr	r3, [r7, #24]
 801a690:	681a      	ldr	r2, [r3, #0]
 801a692:	4b38      	ldr	r3, [pc, #224]	; (801a774 <etharp_output+0x1fc>)
 801a694:	781b      	ldrb	r3, [r3, #0]
 801a696:	4618      	mov	r0, r3
 801a698:	4937      	ldr	r1, [pc, #220]	; (801a778 <etharp_output+0x200>)
 801a69a:	4603      	mov	r3, r0
 801a69c:	005b      	lsls	r3, r3, #1
 801a69e:	4403      	add	r3, r0
 801a6a0:	00db      	lsls	r3, r3, #3
 801a6a2:	440b      	add	r3, r1
 801a6a4:	3304      	adds	r3, #4
 801a6a6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a6a8:	429a      	cmp	r2, r3
 801a6aa:	d108      	bne.n	801a6be <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801a6ac:	4b31      	ldr	r3, [pc, #196]	; (801a774 <etharp_output+0x1fc>)
 801a6ae:	781b      	ldrb	r3, [r3, #0]
 801a6b0:	461a      	mov	r2, r3
 801a6b2:	68b9      	ldr	r1, [r7, #8]
 801a6b4:	68f8      	ldr	r0, [r7, #12]
 801a6b6:	f7ff fec5 	bl	801a444 <etharp_output_to_arp_index>
 801a6ba:	4603      	mov	r3, r0
 801a6bc:	e04a      	b.n	801a754 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a6be:	2300      	movs	r3, #0
 801a6c0:	75fb      	strb	r3, [r7, #23]
 801a6c2:	e031      	b.n	801a728 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a6c4:	7dfa      	ldrb	r2, [r7, #23]
 801a6c6:	492c      	ldr	r1, [pc, #176]	; (801a778 <etharp_output+0x200>)
 801a6c8:	4613      	mov	r3, r2
 801a6ca:	005b      	lsls	r3, r3, #1
 801a6cc:	4413      	add	r3, r2
 801a6ce:	00db      	lsls	r3, r3, #3
 801a6d0:	440b      	add	r3, r1
 801a6d2:	3314      	adds	r3, #20
 801a6d4:	781b      	ldrb	r3, [r3, #0]
 801a6d6:	2b01      	cmp	r3, #1
 801a6d8:	d923      	bls.n	801a722 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801a6da:	7dfa      	ldrb	r2, [r7, #23]
 801a6dc:	4926      	ldr	r1, [pc, #152]	; (801a778 <etharp_output+0x200>)
 801a6de:	4613      	mov	r3, r2
 801a6e0:	005b      	lsls	r3, r3, #1
 801a6e2:	4413      	add	r3, r2
 801a6e4:	00db      	lsls	r3, r3, #3
 801a6e6:	440b      	add	r3, r1
 801a6e8:	3308      	adds	r3, #8
 801a6ea:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a6ec:	68fa      	ldr	r2, [r7, #12]
 801a6ee:	429a      	cmp	r2, r3
 801a6f0:	d117      	bne.n	801a722 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801a6f2:	69bb      	ldr	r3, [r7, #24]
 801a6f4:	6819      	ldr	r1, [r3, #0]
 801a6f6:	7dfa      	ldrb	r2, [r7, #23]
 801a6f8:	481f      	ldr	r0, [pc, #124]	; (801a778 <etharp_output+0x200>)
 801a6fa:	4613      	mov	r3, r2
 801a6fc:	005b      	lsls	r3, r3, #1
 801a6fe:	4413      	add	r3, r2
 801a700:	00db      	lsls	r3, r3, #3
 801a702:	4403      	add	r3, r0
 801a704:	3304      	adds	r3, #4
 801a706:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801a708:	4299      	cmp	r1, r3
 801a70a:	d10a      	bne.n	801a722 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801a70c:	4a19      	ldr	r2, [pc, #100]	; (801a774 <etharp_output+0x1fc>)
 801a70e:	7dfb      	ldrb	r3, [r7, #23]
 801a710:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801a712:	7dfb      	ldrb	r3, [r7, #23]
 801a714:	461a      	mov	r2, r3
 801a716:	68b9      	ldr	r1, [r7, #8]
 801a718:	68f8      	ldr	r0, [r7, #12]
 801a71a:	f7ff fe93 	bl	801a444 <etharp_output_to_arp_index>
 801a71e:	4603      	mov	r3, r0
 801a720:	e018      	b.n	801a754 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a722:	7dfb      	ldrb	r3, [r7, #23]
 801a724:	3301      	adds	r3, #1
 801a726:	75fb      	strb	r3, [r7, #23]
 801a728:	7dfb      	ldrb	r3, [r7, #23]
 801a72a:	2b09      	cmp	r3, #9
 801a72c:	d9ca      	bls.n	801a6c4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801a72e:	68ba      	ldr	r2, [r7, #8]
 801a730:	69b9      	ldr	r1, [r7, #24]
 801a732:	68f8      	ldr	r0, [r7, #12]
 801a734:	f000 f822 	bl	801a77c <etharp_query>
 801a738:	4603      	mov	r3, r0
 801a73a:	e00b      	b.n	801a754 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801a742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a746:	9300      	str	r3, [sp, #0]
 801a748:	69fb      	ldr	r3, [r7, #28]
 801a74a:	68b9      	ldr	r1, [r7, #8]
 801a74c:	68f8      	ldr	r0, [r7, #12]
 801a74e:	f001 fd45 	bl	801c1dc <ethernet_output>
 801a752:	4603      	mov	r3, r0
}
 801a754:	4618      	mov	r0, r3
 801a756:	3720      	adds	r7, #32
 801a758:	46bd      	mov	sp, r7
 801a75a:	bd80      	pop	{r7, pc}
 801a75c:	08020ef0 	.word	0x08020ef0
 801a760:	08021040 	.word	0x08021040
 801a764:	08020f68 	.word	0x08020f68
 801a768:	08021090 	.word	0x08021090
 801a76c:	08021030 	.word	0x08021030
 801a770:	080216ec 	.word	0x080216ec
 801a774:	2000dedc 	.word	0x2000dedc
 801a778:	2000ddec 	.word	0x2000ddec

0801a77c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801a77c:	b580      	push	{r7, lr}
 801a77e:	b08c      	sub	sp, #48	; 0x30
 801a780:	af02      	add	r7, sp, #8
 801a782:	60f8      	str	r0, [r7, #12]
 801a784:	60b9      	str	r1, [r7, #8]
 801a786:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	3326      	adds	r3, #38	; 0x26
 801a78c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801a78e:	23ff      	movs	r3, #255	; 0xff
 801a790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801a794:	2300      	movs	r3, #0
 801a796:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a798:	68bb      	ldr	r3, [r7, #8]
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	68f9      	ldr	r1, [r7, #12]
 801a79e:	4618      	mov	r0, r3
 801a7a0:	f000 fe0e 	bl	801b3c0 <ip4_addr_isbroadcast_u32>
 801a7a4:	4603      	mov	r3, r0
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d10c      	bne.n	801a7c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a7aa:	68bb      	ldr	r3, [r7, #8]
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a7b2:	2be0      	cmp	r3, #224	; 0xe0
 801a7b4:	d006      	beq.n	801a7c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a7b6:	68bb      	ldr	r3, [r7, #8]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d003      	beq.n	801a7c4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801a7bc:	68bb      	ldr	r3, [r7, #8]
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	d102      	bne.n	801a7ca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a7c4:	f06f 030f 	mvn.w	r3, #15
 801a7c8:	e101      	b.n	801a9ce <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801a7ca:	68fa      	ldr	r2, [r7, #12]
 801a7cc:	2101      	movs	r1, #1
 801a7ce:	68b8      	ldr	r0, [r7, #8]
 801a7d0:	f7ff fb60 	bl	8019e94 <etharp_find_entry>
 801a7d4:	4603      	mov	r3, r0
 801a7d6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801a7d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	da02      	bge.n	801a7e6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801a7e0:	8a7b      	ldrh	r3, [r7, #18]
 801a7e2:	b25b      	sxtb	r3, r3
 801a7e4:	e0f3      	b.n	801a9ce <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a7e6:	8a7b      	ldrh	r3, [r7, #18]
 801a7e8:	2b7e      	cmp	r3, #126	; 0x7e
 801a7ea:	d906      	bls.n	801a7fa <etharp_query+0x7e>
 801a7ec:	4b7a      	ldr	r3, [pc, #488]	; (801a9d8 <etharp_query+0x25c>)
 801a7ee:	f240 32c1 	movw	r2, #961	; 0x3c1
 801a7f2:	497a      	ldr	r1, [pc, #488]	; (801a9dc <etharp_query+0x260>)
 801a7f4:	487a      	ldr	r0, [pc, #488]	; (801a9e0 <etharp_query+0x264>)
 801a7f6:	f002 f95d 	bl	801cab4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801a7fa:	8a7b      	ldrh	r3, [r7, #18]
 801a7fc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801a7fe:	7c7a      	ldrb	r2, [r7, #17]
 801a800:	4978      	ldr	r1, [pc, #480]	; (801a9e4 <etharp_query+0x268>)
 801a802:	4613      	mov	r3, r2
 801a804:	005b      	lsls	r3, r3, #1
 801a806:	4413      	add	r3, r2
 801a808:	00db      	lsls	r3, r3, #3
 801a80a:	440b      	add	r3, r1
 801a80c:	3314      	adds	r3, #20
 801a80e:	781b      	ldrb	r3, [r3, #0]
 801a810:	2b00      	cmp	r3, #0
 801a812:	d115      	bne.n	801a840 <etharp_query+0xc4>
    is_new_entry = 1;
 801a814:	2301      	movs	r3, #1
 801a816:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801a818:	7c7a      	ldrb	r2, [r7, #17]
 801a81a:	4972      	ldr	r1, [pc, #456]	; (801a9e4 <etharp_query+0x268>)
 801a81c:	4613      	mov	r3, r2
 801a81e:	005b      	lsls	r3, r3, #1
 801a820:	4413      	add	r3, r2
 801a822:	00db      	lsls	r3, r3, #3
 801a824:	440b      	add	r3, r1
 801a826:	3314      	adds	r3, #20
 801a828:	2201      	movs	r2, #1
 801a82a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801a82c:	7c7a      	ldrb	r2, [r7, #17]
 801a82e:	496d      	ldr	r1, [pc, #436]	; (801a9e4 <etharp_query+0x268>)
 801a830:	4613      	mov	r3, r2
 801a832:	005b      	lsls	r3, r3, #1
 801a834:	4413      	add	r3, r2
 801a836:	00db      	lsls	r3, r3, #3
 801a838:	440b      	add	r3, r1
 801a83a:	3308      	adds	r3, #8
 801a83c:	68fa      	ldr	r2, [r7, #12]
 801a83e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801a840:	7c7a      	ldrb	r2, [r7, #17]
 801a842:	4968      	ldr	r1, [pc, #416]	; (801a9e4 <etharp_query+0x268>)
 801a844:	4613      	mov	r3, r2
 801a846:	005b      	lsls	r3, r3, #1
 801a848:	4413      	add	r3, r2
 801a84a:	00db      	lsls	r3, r3, #3
 801a84c:	440b      	add	r3, r1
 801a84e:	3314      	adds	r3, #20
 801a850:	781b      	ldrb	r3, [r3, #0]
 801a852:	2b01      	cmp	r3, #1
 801a854:	d011      	beq.n	801a87a <etharp_query+0xfe>
 801a856:	7c7a      	ldrb	r2, [r7, #17]
 801a858:	4962      	ldr	r1, [pc, #392]	; (801a9e4 <etharp_query+0x268>)
 801a85a:	4613      	mov	r3, r2
 801a85c:	005b      	lsls	r3, r3, #1
 801a85e:	4413      	add	r3, r2
 801a860:	00db      	lsls	r3, r3, #3
 801a862:	440b      	add	r3, r1
 801a864:	3314      	adds	r3, #20
 801a866:	781b      	ldrb	r3, [r3, #0]
 801a868:	2b01      	cmp	r3, #1
 801a86a:	d806      	bhi.n	801a87a <etharp_query+0xfe>
 801a86c:	4b5a      	ldr	r3, [pc, #360]	; (801a9d8 <etharp_query+0x25c>)
 801a86e:	f240 32cd 	movw	r2, #973	; 0x3cd
 801a872:	495d      	ldr	r1, [pc, #372]	; (801a9e8 <etharp_query+0x26c>)
 801a874:	485a      	ldr	r0, [pc, #360]	; (801a9e0 <etharp_query+0x264>)
 801a876:	f002 f91d 	bl	801cab4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801a87a:	6a3b      	ldr	r3, [r7, #32]
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d102      	bne.n	801a886 <etharp_query+0x10a>
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	2b00      	cmp	r3, #0
 801a884:	d10c      	bne.n	801a8a0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801a886:	68b9      	ldr	r1, [r7, #8]
 801a888:	68f8      	ldr	r0, [r7, #12]
 801a88a:	f000 f963 	bl	801ab54 <etharp_request>
 801a88e:	4603      	mov	r3, r0
 801a890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	2b00      	cmp	r3, #0
 801a898:	d102      	bne.n	801a8a0 <etharp_query+0x124>
      return result;
 801a89a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a89e:	e096      	b.n	801a9ce <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d106      	bne.n	801a8b4 <etharp_query+0x138>
 801a8a6:	4b4c      	ldr	r3, [pc, #304]	; (801a9d8 <etharp_query+0x25c>)
 801a8a8:	f240 32e1 	movw	r2, #993	; 0x3e1
 801a8ac:	494f      	ldr	r1, [pc, #316]	; (801a9ec <etharp_query+0x270>)
 801a8ae:	484c      	ldr	r0, [pc, #304]	; (801a9e0 <etharp_query+0x264>)
 801a8b0:	f002 f900 	bl	801cab4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801a8b4:	7c7a      	ldrb	r2, [r7, #17]
 801a8b6:	494b      	ldr	r1, [pc, #300]	; (801a9e4 <etharp_query+0x268>)
 801a8b8:	4613      	mov	r3, r2
 801a8ba:	005b      	lsls	r3, r3, #1
 801a8bc:	4413      	add	r3, r2
 801a8be:	00db      	lsls	r3, r3, #3
 801a8c0:	440b      	add	r3, r1
 801a8c2:	3314      	adds	r3, #20
 801a8c4:	781b      	ldrb	r3, [r3, #0]
 801a8c6:	2b01      	cmp	r3, #1
 801a8c8:	d917      	bls.n	801a8fa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801a8ca:	4a49      	ldr	r2, [pc, #292]	; (801a9f0 <etharp_query+0x274>)
 801a8cc:	7c7b      	ldrb	r3, [r7, #17]
 801a8ce:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801a8d0:	7c7a      	ldrb	r2, [r7, #17]
 801a8d2:	4613      	mov	r3, r2
 801a8d4:	005b      	lsls	r3, r3, #1
 801a8d6:	4413      	add	r3, r2
 801a8d8:	00db      	lsls	r3, r3, #3
 801a8da:	3308      	adds	r3, #8
 801a8dc:	4a41      	ldr	r2, [pc, #260]	; (801a9e4 <etharp_query+0x268>)
 801a8de:	4413      	add	r3, r2
 801a8e0:	3304      	adds	r3, #4
 801a8e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a8e6:	9200      	str	r2, [sp, #0]
 801a8e8:	697a      	ldr	r2, [r7, #20]
 801a8ea:	6879      	ldr	r1, [r7, #4]
 801a8ec:	68f8      	ldr	r0, [r7, #12]
 801a8ee:	f001 fc75 	bl	801c1dc <ethernet_output>
 801a8f2:	4603      	mov	r3, r0
 801a8f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a8f8:	e067      	b.n	801a9ca <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a8fa:	7c7a      	ldrb	r2, [r7, #17]
 801a8fc:	4939      	ldr	r1, [pc, #228]	; (801a9e4 <etharp_query+0x268>)
 801a8fe:	4613      	mov	r3, r2
 801a900:	005b      	lsls	r3, r3, #1
 801a902:	4413      	add	r3, r2
 801a904:	00db      	lsls	r3, r3, #3
 801a906:	440b      	add	r3, r1
 801a908:	3314      	adds	r3, #20
 801a90a:	781b      	ldrb	r3, [r3, #0]
 801a90c:	2b01      	cmp	r3, #1
 801a90e:	d15c      	bne.n	801a9ca <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801a910:	2300      	movs	r3, #0
 801a912:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a918:	e01c      	b.n	801a954 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801a91a:	69fb      	ldr	r3, [r7, #28]
 801a91c:	895a      	ldrh	r2, [r3, #10]
 801a91e:	69fb      	ldr	r3, [r7, #28]
 801a920:	891b      	ldrh	r3, [r3, #8]
 801a922:	429a      	cmp	r2, r3
 801a924:	d10a      	bne.n	801a93c <etharp_query+0x1c0>
 801a926:	69fb      	ldr	r3, [r7, #28]
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d006      	beq.n	801a93c <etharp_query+0x1c0>
 801a92e:	4b2a      	ldr	r3, [pc, #168]	; (801a9d8 <etharp_query+0x25c>)
 801a930:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801a934:	492f      	ldr	r1, [pc, #188]	; (801a9f4 <etharp_query+0x278>)
 801a936:	482a      	ldr	r0, [pc, #168]	; (801a9e0 <etharp_query+0x264>)
 801a938:	f002 f8bc 	bl	801cab4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801a93c:	69fb      	ldr	r3, [r7, #28]
 801a93e:	7b1b      	ldrb	r3, [r3, #12]
 801a940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a944:	2b00      	cmp	r3, #0
 801a946:	d002      	beq.n	801a94e <etharp_query+0x1d2>
        copy_needed = 1;
 801a948:	2301      	movs	r3, #1
 801a94a:	61bb      	str	r3, [r7, #24]
        break;
 801a94c:	e005      	b.n	801a95a <etharp_query+0x1de>
      }
      p = p->next;
 801a94e:	69fb      	ldr	r3, [r7, #28]
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a954:	69fb      	ldr	r3, [r7, #28]
 801a956:	2b00      	cmp	r3, #0
 801a958:	d1df      	bne.n	801a91a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801a95a:	69bb      	ldr	r3, [r7, #24]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d007      	beq.n	801a970 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801a960:	687a      	ldr	r2, [r7, #4]
 801a962:	f44f 7120 	mov.w	r1, #640	; 0x280
 801a966:	200e      	movs	r0, #14
 801a968:	f7f8 fb68 	bl	801303c <pbuf_clone>
 801a96c:	61f8      	str	r0, [r7, #28]
 801a96e:	e004      	b.n	801a97a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801a974:	69f8      	ldr	r0, [r7, #28]
 801a976:	f7f8 f98f 	bl	8012c98 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801a97a:	69fb      	ldr	r3, [r7, #28]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d021      	beq.n	801a9c4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801a980:	7c7a      	ldrb	r2, [r7, #17]
 801a982:	4918      	ldr	r1, [pc, #96]	; (801a9e4 <etharp_query+0x268>)
 801a984:	4613      	mov	r3, r2
 801a986:	005b      	lsls	r3, r3, #1
 801a988:	4413      	add	r3, r2
 801a98a:	00db      	lsls	r3, r3, #3
 801a98c:	440b      	add	r3, r1
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	2b00      	cmp	r3, #0
 801a992:	d00a      	beq.n	801a9aa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801a994:	7c7a      	ldrb	r2, [r7, #17]
 801a996:	4913      	ldr	r1, [pc, #76]	; (801a9e4 <etharp_query+0x268>)
 801a998:	4613      	mov	r3, r2
 801a99a:	005b      	lsls	r3, r3, #1
 801a99c:	4413      	add	r3, r2
 801a99e:	00db      	lsls	r3, r3, #3
 801a9a0:	440b      	add	r3, r1
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	f7f8 f8d1 	bl	8012b4c <pbuf_free>
      }
      arp_table[i].q = p;
 801a9aa:	7c7a      	ldrb	r2, [r7, #17]
 801a9ac:	490d      	ldr	r1, [pc, #52]	; (801a9e4 <etharp_query+0x268>)
 801a9ae:	4613      	mov	r3, r2
 801a9b0:	005b      	lsls	r3, r3, #1
 801a9b2:	4413      	add	r3, r2
 801a9b4:	00db      	lsls	r3, r3, #3
 801a9b6:	440b      	add	r3, r1
 801a9b8:	69fa      	ldr	r2, [r7, #28]
 801a9ba:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801a9bc:	2300      	movs	r3, #0
 801a9be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a9c2:	e002      	b.n	801a9ca <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801a9c4:	23ff      	movs	r3, #255	; 0xff
 801a9c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801a9ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801a9ce:	4618      	mov	r0, r3
 801a9d0:	3728      	adds	r7, #40	; 0x28
 801a9d2:	46bd      	mov	sp, r7
 801a9d4:	bd80      	pop	{r7, pc}
 801a9d6:	bf00      	nop
 801a9d8:	08020ef0 	.word	0x08020ef0
 801a9dc:	0802109c 	.word	0x0802109c
 801a9e0:	08020f68 	.word	0x08020f68
 801a9e4:	2000ddec 	.word	0x2000ddec
 801a9e8:	080210ac 	.word	0x080210ac
 801a9ec:	08021090 	.word	0x08021090
 801a9f0:	2000dedc 	.word	0x2000dedc
 801a9f4:	080210d4 	.word	0x080210d4

0801a9f8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b08a      	sub	sp, #40	; 0x28
 801a9fc:	af02      	add	r7, sp, #8
 801a9fe:	60f8      	str	r0, [r7, #12]
 801aa00:	60b9      	str	r1, [r7, #8]
 801aa02:	607a      	str	r2, [r7, #4]
 801aa04:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801aa06:	2300      	movs	r3, #0
 801aa08:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d106      	bne.n	801aa1e <etharp_raw+0x26>
 801aa10:	4b3a      	ldr	r3, [pc, #232]	; (801aafc <etharp_raw+0x104>)
 801aa12:	f240 4257 	movw	r2, #1111	; 0x457
 801aa16:	493a      	ldr	r1, [pc, #232]	; (801ab00 <etharp_raw+0x108>)
 801aa18:	483a      	ldr	r0, [pc, #232]	; (801ab04 <etharp_raw+0x10c>)
 801aa1a:	f002 f84b 	bl	801cab4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801aa1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aa22:	211c      	movs	r1, #28
 801aa24:	200e      	movs	r0, #14
 801aa26:	f7f7 fdad 	bl	8012584 <pbuf_alloc>
 801aa2a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801aa2c:	69bb      	ldr	r3, [r7, #24]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d102      	bne.n	801aa38 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801aa32:	f04f 33ff 	mov.w	r3, #4294967295
 801aa36:	e05d      	b.n	801aaf4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801aa38:	69bb      	ldr	r3, [r7, #24]
 801aa3a:	895b      	ldrh	r3, [r3, #10]
 801aa3c:	2b1b      	cmp	r3, #27
 801aa3e:	d806      	bhi.n	801aa4e <etharp_raw+0x56>
 801aa40:	4b2e      	ldr	r3, [pc, #184]	; (801aafc <etharp_raw+0x104>)
 801aa42:	f240 4262 	movw	r2, #1122	; 0x462
 801aa46:	4930      	ldr	r1, [pc, #192]	; (801ab08 <etharp_raw+0x110>)
 801aa48:	482e      	ldr	r0, [pc, #184]	; (801ab04 <etharp_raw+0x10c>)
 801aa4a:	f002 f833 	bl	801cab4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801aa4e:	69bb      	ldr	r3, [r7, #24]
 801aa50:	685b      	ldr	r3, [r3, #4]
 801aa52:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801aa54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801aa56:	4618      	mov	r0, r3
 801aa58:	f7f6 fd30 	bl	80114bc <lwip_htons>
 801aa5c:	4603      	mov	r3, r0
 801aa5e:	461a      	mov	r2, r3
 801aa60:	697b      	ldr	r3, [r7, #20]
 801aa62:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801aa6a:	2b06      	cmp	r3, #6
 801aa6c:	d006      	beq.n	801aa7c <etharp_raw+0x84>
 801aa6e:	4b23      	ldr	r3, [pc, #140]	; (801aafc <etharp_raw+0x104>)
 801aa70:	f240 4269 	movw	r2, #1129	; 0x469
 801aa74:	4925      	ldr	r1, [pc, #148]	; (801ab0c <etharp_raw+0x114>)
 801aa76:	4823      	ldr	r0, [pc, #140]	; (801ab04 <etharp_raw+0x10c>)
 801aa78:	f002 f81c 	bl	801cab4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801aa7c:	697b      	ldr	r3, [r7, #20]
 801aa7e:	3308      	adds	r3, #8
 801aa80:	2206      	movs	r2, #6
 801aa82:	6839      	ldr	r1, [r7, #0]
 801aa84:	4618      	mov	r0, r3
 801aa86:	f001 ff05 	bl	801c894 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801aa8a:	697b      	ldr	r3, [r7, #20]
 801aa8c:	3312      	adds	r3, #18
 801aa8e:	2206      	movs	r2, #6
 801aa90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801aa92:	4618      	mov	r0, r3
 801aa94:	f001 fefe 	bl	801c894 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801aa98:	697b      	ldr	r3, [r7, #20]
 801aa9a:	330e      	adds	r3, #14
 801aa9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aa9e:	6812      	ldr	r2, [r2, #0]
 801aaa0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801aaa2:	697b      	ldr	r3, [r7, #20]
 801aaa4:	3318      	adds	r3, #24
 801aaa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aaa8:	6812      	ldr	r2, [r2, #0]
 801aaaa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801aaac:	697b      	ldr	r3, [r7, #20]
 801aaae:	2200      	movs	r2, #0
 801aab0:	701a      	strb	r2, [r3, #0]
 801aab2:	2200      	movs	r2, #0
 801aab4:	f042 0201 	orr.w	r2, r2, #1
 801aab8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801aaba:	697b      	ldr	r3, [r7, #20]
 801aabc:	2200      	movs	r2, #0
 801aabe:	f042 0208 	orr.w	r2, r2, #8
 801aac2:	709a      	strb	r2, [r3, #2]
 801aac4:	2200      	movs	r2, #0
 801aac6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801aac8:	697b      	ldr	r3, [r7, #20]
 801aaca:	2206      	movs	r2, #6
 801aacc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801aace:	697b      	ldr	r3, [r7, #20]
 801aad0:	2204      	movs	r2, #4
 801aad2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801aad4:	f640 0306 	movw	r3, #2054	; 0x806
 801aad8:	9300      	str	r3, [sp, #0]
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	68ba      	ldr	r2, [r7, #8]
 801aade:	69b9      	ldr	r1, [r7, #24]
 801aae0:	68f8      	ldr	r0, [r7, #12]
 801aae2:	f001 fb7b 	bl	801c1dc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801aae6:	69b8      	ldr	r0, [r7, #24]
 801aae8:	f7f8 f830 	bl	8012b4c <pbuf_free>
  p = NULL;
 801aaec:	2300      	movs	r3, #0
 801aaee:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801aaf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801aaf4:	4618      	mov	r0, r3
 801aaf6:	3720      	adds	r7, #32
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	bd80      	pop	{r7, pc}
 801aafc:	08020ef0 	.word	0x08020ef0
 801ab00:	08021040 	.word	0x08021040
 801ab04:	08020f68 	.word	0x08020f68
 801ab08:	080210f0 	.word	0x080210f0
 801ab0c:	08021124 	.word	0x08021124

0801ab10 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801ab10:	b580      	push	{r7, lr}
 801ab12:	b088      	sub	sp, #32
 801ab14:	af04      	add	r7, sp, #16
 801ab16:	60f8      	str	r0, [r7, #12]
 801ab18:	60b9      	str	r1, [r7, #8]
 801ab1a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ab2c:	2201      	movs	r2, #1
 801ab2e:	9203      	str	r2, [sp, #12]
 801ab30:	68ba      	ldr	r2, [r7, #8]
 801ab32:	9202      	str	r2, [sp, #8]
 801ab34:	4a06      	ldr	r2, [pc, #24]	; (801ab50 <etharp_request_dst+0x40>)
 801ab36:	9201      	str	r2, [sp, #4]
 801ab38:	9300      	str	r3, [sp, #0]
 801ab3a:	4603      	mov	r3, r0
 801ab3c:	687a      	ldr	r2, [r7, #4]
 801ab3e:	68f8      	ldr	r0, [r7, #12]
 801ab40:	f7ff ff5a 	bl	801a9f8 <etharp_raw>
 801ab44:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801ab46:	4618      	mov	r0, r3
 801ab48:	3710      	adds	r7, #16
 801ab4a:	46bd      	mov	sp, r7
 801ab4c:	bd80      	pop	{r7, pc}
 801ab4e:	bf00      	nop
 801ab50:	080216f4 	.word	0x080216f4

0801ab54 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801ab54:	b580      	push	{r7, lr}
 801ab56:	b082      	sub	sp, #8
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	6078      	str	r0, [r7, #4]
 801ab5c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801ab5e:	4a05      	ldr	r2, [pc, #20]	; (801ab74 <etharp_request+0x20>)
 801ab60:	6839      	ldr	r1, [r7, #0]
 801ab62:	6878      	ldr	r0, [r7, #4]
 801ab64:	f7ff ffd4 	bl	801ab10 <etharp_request_dst>
 801ab68:	4603      	mov	r3, r0
}
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	3708      	adds	r7, #8
 801ab6e:	46bd      	mov	sp, r7
 801ab70:	bd80      	pop	{r7, pc}
 801ab72:	bf00      	nop
 801ab74:	080216ec 	.word	0x080216ec

0801ab78 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b08e      	sub	sp, #56	; 0x38
 801ab7c:	af04      	add	r7, sp, #16
 801ab7e:	6078      	str	r0, [r7, #4]
 801ab80:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801ab82:	4b79      	ldr	r3, [pc, #484]	; (801ad68 <icmp_input+0x1f0>)
 801ab84:	689b      	ldr	r3, [r3, #8]
 801ab86:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab8a:	781b      	ldrb	r3, [r3, #0]
 801ab8c:	f003 030f 	and.w	r3, r3, #15
 801ab90:	b2db      	uxtb	r3, r3
 801ab92:	009b      	lsls	r3, r3, #2
 801ab94:	b2db      	uxtb	r3, r3
 801ab96:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801ab98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ab9a:	2b13      	cmp	r3, #19
 801ab9c:	f240 80cd 	bls.w	801ad3a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	895b      	ldrh	r3, [r3, #10]
 801aba4:	2b03      	cmp	r3, #3
 801aba6:	f240 80ca 	bls.w	801ad3e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	685b      	ldr	r3, [r3, #4]
 801abae:	781b      	ldrb	r3, [r3, #0]
 801abb0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801abb4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801abb8:	2b00      	cmp	r3, #0
 801abba:	f000 80b7 	beq.w	801ad2c <icmp_input+0x1b4>
 801abbe:	2b08      	cmp	r3, #8
 801abc0:	f040 80b7 	bne.w	801ad32 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801abc4:	4b69      	ldr	r3, [pc, #420]	; (801ad6c <icmp_input+0x1f4>)
 801abc6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801abc8:	4b67      	ldr	r3, [pc, #412]	; (801ad68 <icmp_input+0x1f0>)
 801abca:	695b      	ldr	r3, [r3, #20]
 801abcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801abd0:	2be0      	cmp	r3, #224	; 0xe0
 801abd2:	f000 80bb 	beq.w	801ad4c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801abd6:	4b64      	ldr	r3, [pc, #400]	; (801ad68 <icmp_input+0x1f0>)
 801abd8:	695b      	ldr	r3, [r3, #20]
 801abda:	4a63      	ldr	r2, [pc, #396]	; (801ad68 <icmp_input+0x1f0>)
 801abdc:	6812      	ldr	r2, [r2, #0]
 801abde:	4611      	mov	r1, r2
 801abe0:	4618      	mov	r0, r3
 801abe2:	f000 fbed 	bl	801b3c0 <ip4_addr_isbroadcast_u32>
 801abe6:	4603      	mov	r3, r0
 801abe8:	2b00      	cmp	r3, #0
 801abea:	f040 80b1 	bne.w	801ad50 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	891b      	ldrh	r3, [r3, #8]
 801abf2:	2b07      	cmp	r3, #7
 801abf4:	f240 80a5 	bls.w	801ad42 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801abf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801abfa:	330e      	adds	r3, #14
 801abfc:	4619      	mov	r1, r3
 801abfe:	6878      	ldr	r0, [r7, #4]
 801ac00:	f7f7 ff0e 	bl	8012a20 <pbuf_add_header>
 801ac04:	4603      	mov	r3, r0
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	d04b      	beq.n	801aca2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	891a      	ldrh	r2, [r3, #8]
 801ac0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ac10:	4413      	add	r3, r2
 801ac12:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	891b      	ldrh	r3, [r3, #8]
 801ac18:	8b7a      	ldrh	r2, [r7, #26]
 801ac1a:	429a      	cmp	r2, r3
 801ac1c:	f0c0 809a 	bcc.w	801ad54 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801ac20:	8b7b      	ldrh	r3, [r7, #26]
 801ac22:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ac26:	4619      	mov	r1, r3
 801ac28:	200e      	movs	r0, #14
 801ac2a:	f7f7 fcab 	bl	8012584 <pbuf_alloc>
 801ac2e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801ac30:	697b      	ldr	r3, [r7, #20]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	f000 8090 	beq.w	801ad58 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801ac38:	697b      	ldr	r3, [r7, #20]
 801ac3a:	895b      	ldrh	r3, [r3, #10]
 801ac3c:	461a      	mov	r2, r3
 801ac3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ac40:	3308      	adds	r3, #8
 801ac42:	429a      	cmp	r2, r3
 801ac44:	d203      	bcs.n	801ac4e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801ac46:	6978      	ldr	r0, [r7, #20]
 801ac48:	f7f7 ff80 	bl	8012b4c <pbuf_free>
          goto icmperr;
 801ac4c:	e085      	b.n	801ad5a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801ac4e:	697b      	ldr	r3, [r7, #20]
 801ac50:	685b      	ldr	r3, [r3, #4]
 801ac52:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ac54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ac56:	4618      	mov	r0, r3
 801ac58:	f001 fe1c 	bl	801c894 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801ac5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ac5e:	4619      	mov	r1, r3
 801ac60:	6978      	ldr	r0, [r7, #20]
 801ac62:	f7f7 feed 	bl	8012a40 <pbuf_remove_header>
 801ac66:	4603      	mov	r3, r0
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d009      	beq.n	801ac80 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801ac6c:	4b40      	ldr	r3, [pc, #256]	; (801ad70 <icmp_input+0x1f8>)
 801ac6e:	22b6      	movs	r2, #182	; 0xb6
 801ac70:	4940      	ldr	r1, [pc, #256]	; (801ad74 <icmp_input+0x1fc>)
 801ac72:	4841      	ldr	r0, [pc, #260]	; (801ad78 <icmp_input+0x200>)
 801ac74:	f001 ff1e 	bl	801cab4 <iprintf>
          pbuf_free(r);
 801ac78:	6978      	ldr	r0, [r7, #20]
 801ac7a:	f7f7 ff67 	bl	8012b4c <pbuf_free>
          goto icmperr;
 801ac7e:	e06c      	b.n	801ad5a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801ac80:	6879      	ldr	r1, [r7, #4]
 801ac82:	6978      	ldr	r0, [r7, #20]
 801ac84:	f7f8 f896 	bl	8012db4 <pbuf_copy>
 801ac88:	4603      	mov	r3, r0
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d003      	beq.n	801ac96 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801ac8e:	6978      	ldr	r0, [r7, #20]
 801ac90:	f7f7 ff5c 	bl	8012b4c <pbuf_free>
          goto icmperr;
 801ac94:	e061      	b.n	801ad5a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801ac96:	6878      	ldr	r0, [r7, #4]
 801ac98:	f7f7 ff58 	bl	8012b4c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801ac9c:	697b      	ldr	r3, [r7, #20]
 801ac9e:	607b      	str	r3, [r7, #4]
 801aca0:	e00f      	b.n	801acc2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801aca2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801aca4:	330e      	adds	r3, #14
 801aca6:	4619      	mov	r1, r3
 801aca8:	6878      	ldr	r0, [r7, #4]
 801acaa:	f7f7 fec9 	bl	8012a40 <pbuf_remove_header>
 801acae:	4603      	mov	r3, r0
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d006      	beq.n	801acc2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801acb4:	4b2e      	ldr	r3, [pc, #184]	; (801ad70 <icmp_input+0x1f8>)
 801acb6:	22c7      	movs	r2, #199	; 0xc7
 801acb8:	4930      	ldr	r1, [pc, #192]	; (801ad7c <icmp_input+0x204>)
 801acba:	482f      	ldr	r0, [pc, #188]	; (801ad78 <icmp_input+0x200>)
 801acbc:	f001 fefa 	bl	801cab4 <iprintf>
          goto icmperr;
 801acc0:	e04b      	b.n	801ad5a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	685b      	ldr	r3, [r3, #4]
 801acc6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801acc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801acca:	4619      	mov	r1, r3
 801accc:	6878      	ldr	r0, [r7, #4]
 801acce:	f7f7 fea7 	bl	8012a20 <pbuf_add_header>
 801acd2:	4603      	mov	r3, r0
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d12b      	bne.n	801ad30 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	685b      	ldr	r3, [r3, #4]
 801acdc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801acde:	69fb      	ldr	r3, [r7, #28]
 801ace0:	681a      	ldr	r2, [r3, #0]
 801ace2:	68fb      	ldr	r3, [r7, #12]
 801ace4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801ace6:	4b20      	ldr	r3, [pc, #128]	; (801ad68 <icmp_input+0x1f0>)
 801ace8:	691a      	ldr	r2, [r3, #16]
 801acea:	68fb      	ldr	r3, [r7, #12]
 801acec:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801acee:	693b      	ldr	r3, [r7, #16]
 801acf0:	2200      	movs	r2, #0
 801acf2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801acf4:	693b      	ldr	r3, [r7, #16]
 801acf6:	2200      	movs	r2, #0
 801acf8:	709a      	strb	r2, [r3, #2]
 801acfa:	2200      	movs	r2, #0
 801acfc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801acfe:	68fb      	ldr	r3, [r7, #12]
 801ad00:	22ff      	movs	r2, #255	; 0xff
 801ad02:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	2200      	movs	r2, #0
 801ad08:	729a      	strb	r2, [r3, #10]
 801ad0a:	2200      	movs	r2, #0
 801ad0c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801ad0e:	683b      	ldr	r3, [r7, #0]
 801ad10:	9302      	str	r3, [sp, #8]
 801ad12:	2301      	movs	r3, #1
 801ad14:	9301      	str	r3, [sp, #4]
 801ad16:	2300      	movs	r3, #0
 801ad18:	9300      	str	r3, [sp, #0]
 801ad1a:	23ff      	movs	r3, #255	; 0xff
 801ad1c:	2200      	movs	r2, #0
 801ad1e:	69f9      	ldr	r1, [r7, #28]
 801ad20:	6878      	ldr	r0, [r7, #4]
 801ad22:	f000 fa75 	bl	801b210 <ip4_output_if>
 801ad26:	4603      	mov	r3, r0
 801ad28:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801ad2a:	e001      	b.n	801ad30 <icmp_input+0x1b8>
      break;
 801ad2c:	bf00      	nop
 801ad2e:	e000      	b.n	801ad32 <icmp_input+0x1ba>
      break;
 801ad30:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801ad32:	6878      	ldr	r0, [r7, #4]
 801ad34:	f7f7 ff0a 	bl	8012b4c <pbuf_free>
  return;
 801ad38:	e013      	b.n	801ad62 <icmp_input+0x1ea>
    goto lenerr;
 801ad3a:	bf00      	nop
 801ad3c:	e002      	b.n	801ad44 <icmp_input+0x1cc>
    goto lenerr;
 801ad3e:	bf00      	nop
 801ad40:	e000      	b.n	801ad44 <icmp_input+0x1cc>
        goto lenerr;
 801ad42:	bf00      	nop
lenerr:
  pbuf_free(p);
 801ad44:	6878      	ldr	r0, [r7, #4]
 801ad46:	f7f7 ff01 	bl	8012b4c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801ad4a:	e00a      	b.n	801ad62 <icmp_input+0x1ea>
        goto icmperr;
 801ad4c:	bf00      	nop
 801ad4e:	e004      	b.n	801ad5a <icmp_input+0x1e2>
        goto icmperr;
 801ad50:	bf00      	nop
 801ad52:	e002      	b.n	801ad5a <icmp_input+0x1e2>
          goto icmperr;
 801ad54:	bf00      	nop
 801ad56:	e000      	b.n	801ad5a <icmp_input+0x1e2>
          goto icmperr;
 801ad58:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801ad5a:	6878      	ldr	r0, [r7, #4]
 801ad5c:	f7f7 fef6 	bl	8012b4c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801ad60:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801ad62:	3728      	adds	r7, #40	; 0x28
 801ad64:	46bd      	mov	sp, r7
 801ad66:	bd80      	pop	{r7, pc}
 801ad68:	2000a638 	.word	0x2000a638
 801ad6c:	2000a64c 	.word	0x2000a64c
 801ad70:	08021168 	.word	0x08021168
 801ad74:	080211a0 	.word	0x080211a0
 801ad78:	080211d8 	.word	0x080211d8
 801ad7c:	08021200 	.word	0x08021200

0801ad80 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801ad80:	b580      	push	{r7, lr}
 801ad82:	b082      	sub	sp, #8
 801ad84:	af00      	add	r7, sp, #0
 801ad86:	6078      	str	r0, [r7, #4]
 801ad88:	460b      	mov	r3, r1
 801ad8a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801ad8c:	78fb      	ldrb	r3, [r7, #3]
 801ad8e:	461a      	mov	r2, r3
 801ad90:	2103      	movs	r1, #3
 801ad92:	6878      	ldr	r0, [r7, #4]
 801ad94:	f000 f814 	bl	801adc0 <icmp_send_response>
}
 801ad98:	bf00      	nop
 801ad9a:	3708      	adds	r7, #8
 801ad9c:	46bd      	mov	sp, r7
 801ad9e:	bd80      	pop	{r7, pc}

0801ada0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b082      	sub	sp, #8
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	6078      	str	r0, [r7, #4]
 801ada8:	460b      	mov	r3, r1
 801adaa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801adac:	78fb      	ldrb	r3, [r7, #3]
 801adae:	461a      	mov	r2, r3
 801adb0:	210b      	movs	r1, #11
 801adb2:	6878      	ldr	r0, [r7, #4]
 801adb4:	f000 f804 	bl	801adc0 <icmp_send_response>
}
 801adb8:	bf00      	nop
 801adba:	3708      	adds	r7, #8
 801adbc:	46bd      	mov	sp, r7
 801adbe:	bd80      	pop	{r7, pc}

0801adc0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801adc0:	b580      	push	{r7, lr}
 801adc2:	b08c      	sub	sp, #48	; 0x30
 801adc4:	af04      	add	r7, sp, #16
 801adc6:	6078      	str	r0, [r7, #4]
 801adc8:	460b      	mov	r3, r1
 801adca:	70fb      	strb	r3, [r7, #3]
 801adcc:	4613      	mov	r3, r2
 801adce:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801add0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801add4:	2124      	movs	r1, #36	; 0x24
 801add6:	2022      	movs	r0, #34	; 0x22
 801add8:	f7f7 fbd4 	bl	8012584 <pbuf_alloc>
 801addc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801adde:	69fb      	ldr	r3, [r7, #28]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d04c      	beq.n	801ae7e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801ade4:	69fb      	ldr	r3, [r7, #28]
 801ade6:	895b      	ldrh	r3, [r3, #10]
 801ade8:	2b23      	cmp	r3, #35	; 0x23
 801adea:	d806      	bhi.n	801adfa <icmp_send_response+0x3a>
 801adec:	4b26      	ldr	r3, [pc, #152]	; (801ae88 <icmp_send_response+0xc8>)
 801adee:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801adf2:	4926      	ldr	r1, [pc, #152]	; (801ae8c <icmp_send_response+0xcc>)
 801adf4:	4826      	ldr	r0, [pc, #152]	; (801ae90 <icmp_send_response+0xd0>)
 801adf6:	f001 fe5d 	bl	801cab4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	685b      	ldr	r3, [r3, #4]
 801adfe:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801ae00:	69fb      	ldr	r3, [r7, #28]
 801ae02:	685b      	ldr	r3, [r3, #4]
 801ae04:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801ae06:	697b      	ldr	r3, [r7, #20]
 801ae08:	78fa      	ldrb	r2, [r7, #3]
 801ae0a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801ae0c:	697b      	ldr	r3, [r7, #20]
 801ae0e:	78ba      	ldrb	r2, [r7, #2]
 801ae10:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801ae12:	697b      	ldr	r3, [r7, #20]
 801ae14:	2200      	movs	r2, #0
 801ae16:	711a      	strb	r2, [r3, #4]
 801ae18:	2200      	movs	r2, #0
 801ae1a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801ae1c:	697b      	ldr	r3, [r7, #20]
 801ae1e:	2200      	movs	r2, #0
 801ae20:	719a      	strb	r2, [r3, #6]
 801ae22:	2200      	movs	r2, #0
 801ae24:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801ae26:	69fb      	ldr	r3, [r7, #28]
 801ae28:	685b      	ldr	r3, [r3, #4]
 801ae2a:	f103 0008 	add.w	r0, r3, #8
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	685b      	ldr	r3, [r3, #4]
 801ae32:	221c      	movs	r2, #28
 801ae34:	4619      	mov	r1, r3
 801ae36:	f001 fd2d 	bl	801c894 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801ae3a:	69bb      	ldr	r3, [r7, #24]
 801ae3c:	68db      	ldr	r3, [r3, #12]
 801ae3e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801ae40:	f107 030c 	add.w	r3, r7, #12
 801ae44:	4618      	mov	r0, r3
 801ae46:	f000 f825 	bl	801ae94 <ip4_route>
 801ae4a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801ae4c:	693b      	ldr	r3, [r7, #16]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d011      	beq.n	801ae76 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801ae52:	697b      	ldr	r3, [r7, #20]
 801ae54:	2200      	movs	r2, #0
 801ae56:	709a      	strb	r2, [r3, #2]
 801ae58:	2200      	movs	r2, #0
 801ae5a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ae5c:	f107 020c 	add.w	r2, r7, #12
 801ae60:	693b      	ldr	r3, [r7, #16]
 801ae62:	9302      	str	r3, [sp, #8]
 801ae64:	2301      	movs	r3, #1
 801ae66:	9301      	str	r3, [sp, #4]
 801ae68:	2300      	movs	r3, #0
 801ae6a:	9300      	str	r3, [sp, #0]
 801ae6c:	23ff      	movs	r3, #255	; 0xff
 801ae6e:	2100      	movs	r1, #0
 801ae70:	69f8      	ldr	r0, [r7, #28]
 801ae72:	f000 f9cd 	bl	801b210 <ip4_output_if>
  }
  pbuf_free(q);
 801ae76:	69f8      	ldr	r0, [r7, #28]
 801ae78:	f7f7 fe68 	bl	8012b4c <pbuf_free>
 801ae7c:	e000      	b.n	801ae80 <icmp_send_response+0xc0>
    return;
 801ae7e:	bf00      	nop
}
 801ae80:	3720      	adds	r7, #32
 801ae82:	46bd      	mov	sp, r7
 801ae84:	bd80      	pop	{r7, pc}
 801ae86:	bf00      	nop
 801ae88:	08021168 	.word	0x08021168
 801ae8c:	08021234 	.word	0x08021234
 801ae90:	080211d8 	.word	0x080211d8

0801ae94 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801ae94:	b480      	push	{r7}
 801ae96:	b085      	sub	sp, #20
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801ae9c:	4b33      	ldr	r3, [pc, #204]	; (801af6c <ip4_route+0xd8>)
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	60fb      	str	r3, [r7, #12]
 801aea2:	e036      	b.n	801af12 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801aeaa:	f003 0301 	and.w	r3, r3, #1
 801aeae:	b2db      	uxtb	r3, r3
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d02b      	beq.n	801af0c <ip4_route+0x78>
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801aeba:	089b      	lsrs	r3, r3, #2
 801aebc:	f003 0301 	and.w	r3, r3, #1
 801aec0:	b2db      	uxtb	r3, r3
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d022      	beq.n	801af0c <ip4_route+0x78>
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	3304      	adds	r3, #4
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	2b00      	cmp	r3, #0
 801aece:	d01d      	beq.n	801af0c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	681a      	ldr	r2, [r3, #0]
 801aed4:	68fb      	ldr	r3, [r7, #12]
 801aed6:	3304      	adds	r3, #4
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	405a      	eors	r2, r3
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	3308      	adds	r3, #8
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	4013      	ands	r3, r2
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d101      	bne.n	801aeec <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	e038      	b.n	801af5e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801aeec:	68fb      	ldr	r3, [r7, #12]
 801aeee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801aef2:	f003 0302 	and.w	r3, r3, #2
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d108      	bne.n	801af0c <ip4_route+0x78>
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	681a      	ldr	r2, [r3, #0]
 801aefe:	68fb      	ldr	r3, [r7, #12]
 801af00:	330c      	adds	r3, #12
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	429a      	cmp	r2, r3
 801af06:	d101      	bne.n	801af0c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	e028      	b.n	801af5e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	60fb      	str	r3, [r7, #12]
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	2b00      	cmp	r3, #0
 801af16:	d1c5      	bne.n	801aea4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801af18:	4b15      	ldr	r3, [pc, #84]	; (801af70 <ip4_route+0xdc>)
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d01a      	beq.n	801af56 <ip4_route+0xc2>
 801af20:	4b13      	ldr	r3, [pc, #76]	; (801af70 <ip4_route+0xdc>)
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801af28:	f003 0301 	and.w	r3, r3, #1
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d012      	beq.n	801af56 <ip4_route+0xc2>
 801af30:	4b0f      	ldr	r3, [pc, #60]	; (801af70 <ip4_route+0xdc>)
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801af38:	f003 0304 	and.w	r3, r3, #4
 801af3c:	2b00      	cmp	r3, #0
 801af3e:	d00a      	beq.n	801af56 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801af40:	4b0b      	ldr	r3, [pc, #44]	; (801af70 <ip4_route+0xdc>)
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	3304      	adds	r3, #4
 801af46:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d004      	beq.n	801af56 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	b2db      	uxtb	r3, r3
 801af52:	2b7f      	cmp	r3, #127	; 0x7f
 801af54:	d101      	bne.n	801af5a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801af56:	2300      	movs	r3, #0
 801af58:	e001      	b.n	801af5e <ip4_route+0xca>
  }

  return netif_default;
 801af5a:	4b05      	ldr	r3, [pc, #20]	; (801af70 <ip4_route+0xdc>)
 801af5c:	681b      	ldr	r3, [r3, #0]
}
 801af5e:	4618      	mov	r0, r3
 801af60:	3714      	adds	r7, #20
 801af62:	46bd      	mov	sp, r7
 801af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af68:	4770      	bx	lr
 801af6a:	bf00      	nop
 801af6c:	2000dd80 	.word	0x2000dd80
 801af70:	2000dd84 	.word	0x2000dd84

0801af74 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b082      	sub	sp, #8
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801af82:	f003 0301 	and.w	r3, r3, #1
 801af86:	b2db      	uxtb	r3, r3
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d016      	beq.n	801afba <ip4_input_accept+0x46>
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	3304      	adds	r3, #4
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	2b00      	cmp	r3, #0
 801af94:	d011      	beq.n	801afba <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801af96:	4b0b      	ldr	r3, [pc, #44]	; (801afc4 <ip4_input_accept+0x50>)
 801af98:	695a      	ldr	r2, [r3, #20]
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	3304      	adds	r3, #4
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	429a      	cmp	r2, r3
 801afa2:	d008      	beq.n	801afb6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801afa4:	4b07      	ldr	r3, [pc, #28]	; (801afc4 <ip4_input_accept+0x50>)
 801afa6:	695b      	ldr	r3, [r3, #20]
 801afa8:	6879      	ldr	r1, [r7, #4]
 801afaa:	4618      	mov	r0, r3
 801afac:	f000 fa08 	bl	801b3c0 <ip4_addr_isbroadcast_u32>
 801afb0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d001      	beq.n	801afba <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801afb6:	2301      	movs	r3, #1
 801afb8:	e000      	b.n	801afbc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801afba:	2300      	movs	r3, #0
}
 801afbc:	4618      	mov	r0, r3
 801afbe:	3708      	adds	r7, #8
 801afc0:	46bd      	mov	sp, r7
 801afc2:	bd80      	pop	{r7, pc}
 801afc4:	2000a638 	.word	0x2000a638

0801afc8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801afc8:	b580      	push	{r7, lr}
 801afca:	b086      	sub	sp, #24
 801afcc:	af00      	add	r7, sp, #0
 801afce:	6078      	str	r0, [r7, #4]
 801afd0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	685b      	ldr	r3, [r3, #4]
 801afd6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801afd8:	697b      	ldr	r3, [r7, #20]
 801afda:	781b      	ldrb	r3, [r3, #0]
 801afdc:	091b      	lsrs	r3, r3, #4
 801afde:	b2db      	uxtb	r3, r3
 801afe0:	2b04      	cmp	r3, #4
 801afe2:	d004      	beq.n	801afee <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801afe4:	6878      	ldr	r0, [r7, #4]
 801afe6:	f7f7 fdb1 	bl	8012b4c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801afea:	2300      	movs	r3, #0
 801afec:	e107      	b.n	801b1fe <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801afee:	697b      	ldr	r3, [r7, #20]
 801aff0:	781b      	ldrb	r3, [r3, #0]
 801aff2:	f003 030f 	and.w	r3, r3, #15
 801aff6:	b2db      	uxtb	r3, r3
 801aff8:	009b      	lsls	r3, r3, #2
 801affa:	b2db      	uxtb	r3, r3
 801affc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801affe:	697b      	ldr	r3, [r7, #20]
 801b000:	885b      	ldrh	r3, [r3, #2]
 801b002:	b29b      	uxth	r3, r3
 801b004:	4618      	mov	r0, r3
 801b006:	f7f6 fa59 	bl	80114bc <lwip_htons>
 801b00a:	4603      	mov	r3, r0
 801b00c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	891b      	ldrh	r3, [r3, #8]
 801b012:	89ba      	ldrh	r2, [r7, #12]
 801b014:	429a      	cmp	r2, r3
 801b016:	d204      	bcs.n	801b022 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801b018:	89bb      	ldrh	r3, [r7, #12]
 801b01a:	4619      	mov	r1, r3
 801b01c:	6878      	ldr	r0, [r7, #4]
 801b01e:	f7f7 fc0f 	bl	8012840 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	895b      	ldrh	r3, [r3, #10]
 801b026:	89fa      	ldrh	r2, [r7, #14]
 801b028:	429a      	cmp	r2, r3
 801b02a:	d807      	bhi.n	801b03c <ip4_input+0x74>
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	891b      	ldrh	r3, [r3, #8]
 801b030:	89ba      	ldrh	r2, [r7, #12]
 801b032:	429a      	cmp	r2, r3
 801b034:	d802      	bhi.n	801b03c <ip4_input+0x74>
 801b036:	89fb      	ldrh	r3, [r7, #14]
 801b038:	2b13      	cmp	r3, #19
 801b03a:	d804      	bhi.n	801b046 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b03c:	6878      	ldr	r0, [r7, #4]
 801b03e:	f7f7 fd85 	bl	8012b4c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b042:	2300      	movs	r3, #0
 801b044:	e0db      	b.n	801b1fe <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b046:	697b      	ldr	r3, [r7, #20]
 801b048:	691b      	ldr	r3, [r3, #16]
 801b04a:	4a6f      	ldr	r2, [pc, #444]	; (801b208 <ip4_input+0x240>)
 801b04c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b04e:	697b      	ldr	r3, [r7, #20]
 801b050:	68db      	ldr	r3, [r3, #12]
 801b052:	4a6d      	ldr	r2, [pc, #436]	; (801b208 <ip4_input+0x240>)
 801b054:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b056:	4b6c      	ldr	r3, [pc, #432]	; (801b208 <ip4_input+0x240>)
 801b058:	695b      	ldr	r3, [r3, #20]
 801b05a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b05e:	2be0      	cmp	r3, #224	; 0xe0
 801b060:	d112      	bne.n	801b088 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b062:	683b      	ldr	r3, [r7, #0]
 801b064:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b068:	f003 0301 	and.w	r3, r3, #1
 801b06c:	b2db      	uxtb	r3, r3
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d007      	beq.n	801b082 <ip4_input+0xba>
 801b072:	683b      	ldr	r3, [r7, #0]
 801b074:	3304      	adds	r3, #4
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d002      	beq.n	801b082 <ip4_input+0xba>
      netif = inp;
 801b07c:	683b      	ldr	r3, [r7, #0]
 801b07e:	613b      	str	r3, [r7, #16]
 801b080:	e02a      	b.n	801b0d8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b082:	2300      	movs	r3, #0
 801b084:	613b      	str	r3, [r7, #16]
 801b086:	e027      	b.n	801b0d8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b088:	6838      	ldr	r0, [r7, #0]
 801b08a:	f7ff ff73 	bl	801af74 <ip4_input_accept>
 801b08e:	4603      	mov	r3, r0
 801b090:	2b00      	cmp	r3, #0
 801b092:	d002      	beq.n	801b09a <ip4_input+0xd2>
      netif = inp;
 801b094:	683b      	ldr	r3, [r7, #0]
 801b096:	613b      	str	r3, [r7, #16]
 801b098:	e01e      	b.n	801b0d8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b09a:	2300      	movs	r3, #0
 801b09c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b09e:	4b5a      	ldr	r3, [pc, #360]	; (801b208 <ip4_input+0x240>)
 801b0a0:	695b      	ldr	r3, [r3, #20]
 801b0a2:	b2db      	uxtb	r3, r3
 801b0a4:	2b7f      	cmp	r3, #127	; 0x7f
 801b0a6:	d017      	beq.n	801b0d8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b0a8:	4b58      	ldr	r3, [pc, #352]	; (801b20c <ip4_input+0x244>)
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	613b      	str	r3, [r7, #16]
 801b0ae:	e00e      	b.n	801b0ce <ip4_input+0x106>
          if (netif == inp) {
 801b0b0:	693a      	ldr	r2, [r7, #16]
 801b0b2:	683b      	ldr	r3, [r7, #0]
 801b0b4:	429a      	cmp	r2, r3
 801b0b6:	d006      	beq.n	801b0c6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b0b8:	6938      	ldr	r0, [r7, #16]
 801b0ba:	f7ff ff5b 	bl	801af74 <ip4_input_accept>
 801b0be:	4603      	mov	r3, r0
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d108      	bne.n	801b0d6 <ip4_input+0x10e>
 801b0c4:	e000      	b.n	801b0c8 <ip4_input+0x100>
            continue;
 801b0c6:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b0c8:	693b      	ldr	r3, [r7, #16]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	613b      	str	r3, [r7, #16]
 801b0ce:	693b      	ldr	r3, [r7, #16]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d1ed      	bne.n	801b0b0 <ip4_input+0xe8>
 801b0d4:	e000      	b.n	801b0d8 <ip4_input+0x110>
            break;
 801b0d6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b0d8:	4b4b      	ldr	r3, [pc, #300]	; (801b208 <ip4_input+0x240>)
 801b0da:	691b      	ldr	r3, [r3, #16]
 801b0dc:	6839      	ldr	r1, [r7, #0]
 801b0de:	4618      	mov	r0, r3
 801b0e0:	f000 f96e 	bl	801b3c0 <ip4_addr_isbroadcast_u32>
 801b0e4:	4603      	mov	r3, r0
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d105      	bne.n	801b0f6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b0ea:	4b47      	ldr	r3, [pc, #284]	; (801b208 <ip4_input+0x240>)
 801b0ec:	691b      	ldr	r3, [r3, #16]
 801b0ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b0f2:	2be0      	cmp	r3, #224	; 0xe0
 801b0f4:	d104      	bne.n	801b100 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b0f6:	6878      	ldr	r0, [r7, #4]
 801b0f8:	f7f7 fd28 	bl	8012b4c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b0fc:	2300      	movs	r3, #0
 801b0fe:	e07e      	b.n	801b1fe <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b100:	693b      	ldr	r3, [r7, #16]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d104      	bne.n	801b110 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b106:	6878      	ldr	r0, [r7, #4]
 801b108:	f7f7 fd20 	bl	8012b4c <pbuf_free>
    return ERR_OK;
 801b10c:	2300      	movs	r3, #0
 801b10e:	e076      	b.n	801b1fe <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b110:	697b      	ldr	r3, [r7, #20]
 801b112:	88db      	ldrh	r3, [r3, #6]
 801b114:	b29b      	uxth	r3, r3
 801b116:	461a      	mov	r2, r3
 801b118:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801b11c:	4013      	ands	r3, r2
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d00b      	beq.n	801b13a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b122:	6878      	ldr	r0, [r7, #4]
 801b124:	f000 fc92 	bl	801ba4c <ip4_reass>
 801b128:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d101      	bne.n	801b134 <ip4_input+0x16c>
      return ERR_OK;
 801b130:	2300      	movs	r3, #0
 801b132:	e064      	b.n	801b1fe <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	685b      	ldr	r3, [r3, #4]
 801b138:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b13a:	4a33      	ldr	r2, [pc, #204]	; (801b208 <ip4_input+0x240>)
 801b13c:	693b      	ldr	r3, [r7, #16]
 801b13e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b140:	4a31      	ldr	r2, [pc, #196]	; (801b208 <ip4_input+0x240>)
 801b142:	683b      	ldr	r3, [r7, #0]
 801b144:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b146:	4a30      	ldr	r2, [pc, #192]	; (801b208 <ip4_input+0x240>)
 801b148:	697b      	ldr	r3, [r7, #20]
 801b14a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b14c:	697b      	ldr	r3, [r7, #20]
 801b14e:	781b      	ldrb	r3, [r3, #0]
 801b150:	f003 030f 	and.w	r3, r3, #15
 801b154:	b2db      	uxtb	r3, r3
 801b156:	009b      	lsls	r3, r3, #2
 801b158:	b2db      	uxtb	r3, r3
 801b15a:	b29a      	uxth	r2, r3
 801b15c:	4b2a      	ldr	r3, [pc, #168]	; (801b208 <ip4_input+0x240>)
 801b15e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b160:	89fb      	ldrh	r3, [r7, #14]
 801b162:	4619      	mov	r1, r3
 801b164:	6878      	ldr	r0, [r7, #4]
 801b166:	f7f7 fc6b 	bl	8012a40 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b16a:	697b      	ldr	r3, [r7, #20]
 801b16c:	7a5b      	ldrb	r3, [r3, #9]
 801b16e:	2b11      	cmp	r3, #17
 801b170:	d006      	beq.n	801b180 <ip4_input+0x1b8>
 801b172:	2b11      	cmp	r3, #17
 801b174:	dc13      	bgt.n	801b19e <ip4_input+0x1d6>
 801b176:	2b01      	cmp	r3, #1
 801b178:	d00c      	beq.n	801b194 <ip4_input+0x1cc>
 801b17a:	2b06      	cmp	r3, #6
 801b17c:	d005      	beq.n	801b18a <ip4_input+0x1c2>
 801b17e:	e00e      	b.n	801b19e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b180:	6839      	ldr	r1, [r7, #0]
 801b182:	6878      	ldr	r0, [r7, #4]
 801b184:	f7fe f970 	bl	8019468 <udp_input>
        break;
 801b188:	e026      	b.n	801b1d8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b18a:	6839      	ldr	r1, [r7, #0]
 801b18c:	6878      	ldr	r0, [r7, #4]
 801b18e:	f7f9 fd29 	bl	8014be4 <tcp_input>
        break;
 801b192:	e021      	b.n	801b1d8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b194:	6839      	ldr	r1, [r7, #0]
 801b196:	6878      	ldr	r0, [r7, #4]
 801b198:	f7ff fcee 	bl	801ab78 <icmp_input>
        break;
 801b19c:	e01c      	b.n	801b1d8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b19e:	4b1a      	ldr	r3, [pc, #104]	; (801b208 <ip4_input+0x240>)
 801b1a0:	695b      	ldr	r3, [r3, #20]
 801b1a2:	6939      	ldr	r1, [r7, #16]
 801b1a4:	4618      	mov	r0, r3
 801b1a6:	f000 f90b 	bl	801b3c0 <ip4_addr_isbroadcast_u32>
 801b1aa:	4603      	mov	r3, r0
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d10f      	bne.n	801b1d0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b1b0:	4b15      	ldr	r3, [pc, #84]	; (801b208 <ip4_input+0x240>)
 801b1b2:	695b      	ldr	r3, [r3, #20]
 801b1b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b1b8:	2be0      	cmp	r3, #224	; 0xe0
 801b1ba:	d009      	beq.n	801b1d0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b1bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b1c0:	4619      	mov	r1, r3
 801b1c2:	6878      	ldr	r0, [r7, #4]
 801b1c4:	f7f7 fcaf 	bl	8012b26 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b1c8:	2102      	movs	r1, #2
 801b1ca:	6878      	ldr	r0, [r7, #4]
 801b1cc:	f7ff fdd8 	bl	801ad80 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b1d0:	6878      	ldr	r0, [r7, #4]
 801b1d2:	f7f7 fcbb 	bl	8012b4c <pbuf_free>
        break;
 801b1d6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b1d8:	4b0b      	ldr	r3, [pc, #44]	; (801b208 <ip4_input+0x240>)
 801b1da:	2200      	movs	r2, #0
 801b1dc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b1de:	4b0a      	ldr	r3, [pc, #40]	; (801b208 <ip4_input+0x240>)
 801b1e0:	2200      	movs	r2, #0
 801b1e2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b1e4:	4b08      	ldr	r3, [pc, #32]	; (801b208 <ip4_input+0x240>)
 801b1e6:	2200      	movs	r2, #0
 801b1e8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b1ea:	4b07      	ldr	r3, [pc, #28]	; (801b208 <ip4_input+0x240>)
 801b1ec:	2200      	movs	r2, #0
 801b1ee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b1f0:	4b05      	ldr	r3, [pc, #20]	; (801b208 <ip4_input+0x240>)
 801b1f2:	2200      	movs	r2, #0
 801b1f4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b1f6:	4b04      	ldr	r3, [pc, #16]	; (801b208 <ip4_input+0x240>)
 801b1f8:	2200      	movs	r2, #0
 801b1fa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b1fc:	2300      	movs	r3, #0
}
 801b1fe:	4618      	mov	r0, r3
 801b200:	3718      	adds	r7, #24
 801b202:	46bd      	mov	sp, r7
 801b204:	bd80      	pop	{r7, pc}
 801b206:	bf00      	nop
 801b208:	2000a638 	.word	0x2000a638
 801b20c:	2000dd80 	.word	0x2000dd80

0801b210 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b210:	b580      	push	{r7, lr}
 801b212:	b08a      	sub	sp, #40	; 0x28
 801b214:	af04      	add	r7, sp, #16
 801b216:	60f8      	str	r0, [r7, #12]
 801b218:	60b9      	str	r1, [r7, #8]
 801b21a:	607a      	str	r2, [r7, #4]
 801b21c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b21e:	68bb      	ldr	r3, [r7, #8]
 801b220:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	2b00      	cmp	r3, #0
 801b226:	d009      	beq.n	801b23c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b228:	68bb      	ldr	r3, [r7, #8]
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	d003      	beq.n	801b236 <ip4_output_if+0x26>
 801b22e:	68bb      	ldr	r3, [r7, #8]
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	2b00      	cmp	r3, #0
 801b234:	d102      	bne.n	801b23c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b238:	3304      	adds	r3, #4
 801b23a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b23c:	78fa      	ldrb	r2, [r7, #3]
 801b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b240:	9302      	str	r3, [sp, #8]
 801b242:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b246:	9301      	str	r3, [sp, #4]
 801b248:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b24c:	9300      	str	r3, [sp, #0]
 801b24e:	4613      	mov	r3, r2
 801b250:	687a      	ldr	r2, [r7, #4]
 801b252:	6979      	ldr	r1, [r7, #20]
 801b254:	68f8      	ldr	r0, [r7, #12]
 801b256:	f000 f805 	bl	801b264 <ip4_output_if_src>
 801b25a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b25c:	4618      	mov	r0, r3
 801b25e:	3718      	adds	r7, #24
 801b260:	46bd      	mov	sp, r7
 801b262:	bd80      	pop	{r7, pc}

0801b264 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b264:	b580      	push	{r7, lr}
 801b266:	b088      	sub	sp, #32
 801b268:	af00      	add	r7, sp, #0
 801b26a:	60f8      	str	r0, [r7, #12]
 801b26c:	60b9      	str	r1, [r7, #8]
 801b26e:	607a      	str	r2, [r7, #4]
 801b270:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	7b9b      	ldrb	r3, [r3, #14]
 801b276:	2b01      	cmp	r3, #1
 801b278:	d006      	beq.n	801b288 <ip4_output_if_src+0x24>
 801b27a:	4b4b      	ldr	r3, [pc, #300]	; (801b3a8 <ip4_output_if_src+0x144>)
 801b27c:	f44f 7255 	mov.w	r2, #852	; 0x354
 801b280:	494a      	ldr	r1, [pc, #296]	; (801b3ac <ip4_output_if_src+0x148>)
 801b282:	484b      	ldr	r0, [pc, #300]	; (801b3b0 <ip4_output_if_src+0x14c>)
 801b284:	f001 fc16 	bl	801cab4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d060      	beq.n	801b350 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b28e:	2314      	movs	r3, #20
 801b290:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b292:	2114      	movs	r1, #20
 801b294:	68f8      	ldr	r0, [r7, #12]
 801b296:	f7f7 fbc3 	bl	8012a20 <pbuf_add_header>
 801b29a:	4603      	mov	r3, r0
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d002      	beq.n	801b2a6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b2a0:	f06f 0301 	mvn.w	r3, #1
 801b2a4:	e07c      	b.n	801b3a0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	685b      	ldr	r3, [r3, #4]
 801b2aa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b2ac:	68fb      	ldr	r3, [r7, #12]
 801b2ae:	895b      	ldrh	r3, [r3, #10]
 801b2b0:	2b13      	cmp	r3, #19
 801b2b2:	d806      	bhi.n	801b2c2 <ip4_output_if_src+0x5e>
 801b2b4:	4b3c      	ldr	r3, [pc, #240]	; (801b3a8 <ip4_output_if_src+0x144>)
 801b2b6:	f44f 7262 	mov.w	r2, #904	; 0x388
 801b2ba:	493e      	ldr	r1, [pc, #248]	; (801b3b4 <ip4_output_if_src+0x150>)
 801b2bc:	483c      	ldr	r0, [pc, #240]	; (801b3b0 <ip4_output_if_src+0x14c>)
 801b2be:	f001 fbf9 	bl	801cab4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b2c2:	69fb      	ldr	r3, [r7, #28]
 801b2c4:	78fa      	ldrb	r2, [r7, #3]
 801b2c6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b2c8:	69fb      	ldr	r3, [r7, #28]
 801b2ca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801b2ce:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	681a      	ldr	r2, [r3, #0]
 801b2d4:	69fb      	ldr	r3, [r7, #28]
 801b2d6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b2d8:	8b7b      	ldrh	r3, [r7, #26]
 801b2da:	089b      	lsrs	r3, r3, #2
 801b2dc:	b29b      	uxth	r3, r3
 801b2de:	b2db      	uxtb	r3, r3
 801b2e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2e4:	b2da      	uxtb	r2, r3
 801b2e6:	69fb      	ldr	r3, [r7, #28]
 801b2e8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b2ea:	69fb      	ldr	r3, [r7, #28]
 801b2ec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b2f0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	891b      	ldrh	r3, [r3, #8]
 801b2f6:	4618      	mov	r0, r3
 801b2f8:	f7f6 f8e0 	bl	80114bc <lwip_htons>
 801b2fc:	4603      	mov	r3, r0
 801b2fe:	461a      	mov	r2, r3
 801b300:	69fb      	ldr	r3, [r7, #28]
 801b302:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b304:	69fb      	ldr	r3, [r7, #28]
 801b306:	2200      	movs	r2, #0
 801b308:	719a      	strb	r2, [r3, #6]
 801b30a:	2200      	movs	r2, #0
 801b30c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b30e:	4b2a      	ldr	r3, [pc, #168]	; (801b3b8 <ip4_output_if_src+0x154>)
 801b310:	881b      	ldrh	r3, [r3, #0]
 801b312:	4618      	mov	r0, r3
 801b314:	f7f6 f8d2 	bl	80114bc <lwip_htons>
 801b318:	4603      	mov	r3, r0
 801b31a:	461a      	mov	r2, r3
 801b31c:	69fb      	ldr	r3, [r7, #28]
 801b31e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b320:	4b25      	ldr	r3, [pc, #148]	; (801b3b8 <ip4_output_if_src+0x154>)
 801b322:	881b      	ldrh	r3, [r3, #0]
 801b324:	3301      	adds	r3, #1
 801b326:	b29a      	uxth	r2, r3
 801b328:	4b23      	ldr	r3, [pc, #140]	; (801b3b8 <ip4_output_if_src+0x154>)
 801b32a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b32c:	68bb      	ldr	r3, [r7, #8]
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d104      	bne.n	801b33c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b332:	4b22      	ldr	r3, [pc, #136]	; (801b3bc <ip4_output_if_src+0x158>)
 801b334:	681a      	ldr	r2, [r3, #0]
 801b336:	69fb      	ldr	r3, [r7, #28]
 801b338:	60da      	str	r2, [r3, #12]
 801b33a:	e003      	b.n	801b344 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b33c:	68bb      	ldr	r3, [r7, #8]
 801b33e:	681a      	ldr	r2, [r3, #0]
 801b340:	69fb      	ldr	r3, [r7, #28]
 801b342:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b344:	69fb      	ldr	r3, [r7, #28]
 801b346:	2200      	movs	r2, #0
 801b348:	729a      	strb	r2, [r3, #10]
 801b34a:	2200      	movs	r2, #0
 801b34c:	72da      	strb	r2, [r3, #11]
 801b34e:	e00f      	b.n	801b370 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b350:	68fb      	ldr	r3, [r7, #12]
 801b352:	895b      	ldrh	r3, [r3, #10]
 801b354:	2b13      	cmp	r3, #19
 801b356:	d802      	bhi.n	801b35e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b358:	f06f 0301 	mvn.w	r3, #1
 801b35c:	e020      	b.n	801b3a0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	685b      	ldr	r3, [r3, #4]
 801b362:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b364:	69fb      	ldr	r3, [r7, #28]
 801b366:	691b      	ldr	r3, [r3, #16]
 801b368:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b36a:	f107 0314 	add.w	r3, r7, #20
 801b36e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b372:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b374:	2b00      	cmp	r3, #0
 801b376:	d00c      	beq.n	801b392 <ip4_output_if_src+0x12e>
 801b378:	68fb      	ldr	r3, [r7, #12]
 801b37a:	891a      	ldrh	r2, [r3, #8]
 801b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b37e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b380:	429a      	cmp	r2, r3
 801b382:	d906      	bls.n	801b392 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b384:	687a      	ldr	r2, [r7, #4]
 801b386:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b388:	68f8      	ldr	r0, [r7, #12]
 801b38a:	f000 fd53 	bl	801be34 <ip4_frag>
 801b38e:	4603      	mov	r3, r0
 801b390:	e006      	b.n	801b3a0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b394:	695b      	ldr	r3, [r3, #20]
 801b396:	687a      	ldr	r2, [r7, #4]
 801b398:	68f9      	ldr	r1, [r7, #12]
 801b39a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b39c:	4798      	blx	r3
 801b39e:	4603      	mov	r3, r0
}
 801b3a0:	4618      	mov	r0, r3
 801b3a2:	3720      	adds	r7, #32
 801b3a4:	46bd      	mov	sp, r7
 801b3a6:	bd80      	pop	{r7, pc}
 801b3a8:	08021260 	.word	0x08021260
 801b3ac:	08021294 	.word	0x08021294
 801b3b0:	080212a0 	.word	0x080212a0
 801b3b4:	080212c8 	.word	0x080212c8
 801b3b8:	2000dede 	.word	0x2000dede
 801b3bc:	080216e8 	.word	0x080216e8

0801b3c0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b3c0:	b480      	push	{r7}
 801b3c2:	b085      	sub	sp, #20
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	6078      	str	r0, [r7, #4]
 801b3c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b3d4:	d002      	beq.n	801b3dc <ip4_addr_isbroadcast_u32+0x1c>
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d101      	bne.n	801b3e0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b3dc:	2301      	movs	r3, #1
 801b3de:	e02a      	b.n	801b436 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b3e0:	683b      	ldr	r3, [r7, #0]
 801b3e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b3e6:	f003 0302 	and.w	r3, r3, #2
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d101      	bne.n	801b3f2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b3ee:	2300      	movs	r3, #0
 801b3f0:	e021      	b.n	801b436 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b3f2:	683b      	ldr	r3, [r7, #0]
 801b3f4:	3304      	adds	r3, #4
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	687a      	ldr	r2, [r7, #4]
 801b3fa:	429a      	cmp	r2, r3
 801b3fc:	d101      	bne.n	801b402 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b3fe:	2300      	movs	r3, #0
 801b400:	e019      	b.n	801b436 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b402:	68fa      	ldr	r2, [r7, #12]
 801b404:	683b      	ldr	r3, [r7, #0]
 801b406:	3304      	adds	r3, #4
 801b408:	681b      	ldr	r3, [r3, #0]
 801b40a:	405a      	eors	r2, r3
 801b40c:	683b      	ldr	r3, [r7, #0]
 801b40e:	3308      	adds	r3, #8
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	4013      	ands	r3, r2
 801b414:	2b00      	cmp	r3, #0
 801b416:	d10d      	bne.n	801b434 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b418:	683b      	ldr	r3, [r7, #0]
 801b41a:	3308      	adds	r3, #8
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	43da      	mvns	r2, r3
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b424:	683b      	ldr	r3, [r7, #0]
 801b426:	3308      	adds	r3, #8
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b42c:	429a      	cmp	r2, r3
 801b42e:	d101      	bne.n	801b434 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b430:	2301      	movs	r3, #1
 801b432:	e000      	b.n	801b436 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b434:	2300      	movs	r3, #0
  }
}
 801b436:	4618      	mov	r0, r3
 801b438:	3714      	adds	r7, #20
 801b43a:	46bd      	mov	sp, r7
 801b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b440:	4770      	bx	lr
	...

0801b444 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b444:	b580      	push	{r7, lr}
 801b446:	b084      	sub	sp, #16
 801b448:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b44a:	2300      	movs	r3, #0
 801b44c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b44e:	4b12      	ldr	r3, [pc, #72]	; (801b498 <ip_reass_tmr+0x54>)
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b454:	e018      	b.n	801b488 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	7fdb      	ldrb	r3, [r3, #31]
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d00b      	beq.n	801b476 <ip_reass_tmr+0x32>
      r->timer--;
 801b45e:	68fb      	ldr	r3, [r7, #12]
 801b460:	7fdb      	ldrb	r3, [r3, #31]
 801b462:	3b01      	subs	r3, #1
 801b464:	b2da      	uxtb	r2, r3
 801b466:	68fb      	ldr	r3, [r7, #12]
 801b468:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b46a:	68fb      	ldr	r3, [r7, #12]
 801b46c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b46e:	68fb      	ldr	r3, [r7, #12]
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	60fb      	str	r3, [r7, #12]
 801b474:	e008      	b.n	801b488 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b476:	68fb      	ldr	r3, [r7, #12]
 801b478:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b47a:	68fb      	ldr	r3, [r7, #12]
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b480:	68b9      	ldr	r1, [r7, #8]
 801b482:	6878      	ldr	r0, [r7, #4]
 801b484:	f000 f80a 	bl	801b49c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b488:	68fb      	ldr	r3, [r7, #12]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d1e3      	bne.n	801b456 <ip_reass_tmr+0x12>
    }
  }
}
 801b48e:	bf00      	nop
 801b490:	bf00      	nop
 801b492:	3710      	adds	r7, #16
 801b494:	46bd      	mov	sp, r7
 801b496:	bd80      	pop	{r7, pc}
 801b498:	2000dee0 	.word	0x2000dee0

0801b49c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b49c:	b580      	push	{r7, lr}
 801b49e:	b088      	sub	sp, #32
 801b4a0:	af00      	add	r7, sp, #0
 801b4a2:	6078      	str	r0, [r7, #4]
 801b4a4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b4a6:	2300      	movs	r3, #0
 801b4a8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b4aa:	683a      	ldr	r2, [r7, #0]
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	429a      	cmp	r2, r3
 801b4b0:	d105      	bne.n	801b4be <ip_reass_free_complete_datagram+0x22>
 801b4b2:	4b45      	ldr	r3, [pc, #276]	; (801b5c8 <ip_reass_free_complete_datagram+0x12c>)
 801b4b4:	22ab      	movs	r2, #171	; 0xab
 801b4b6:	4945      	ldr	r1, [pc, #276]	; (801b5cc <ip_reass_free_complete_datagram+0x130>)
 801b4b8:	4845      	ldr	r0, [pc, #276]	; (801b5d0 <ip_reass_free_complete_datagram+0x134>)
 801b4ba:	f001 fafb 	bl	801cab4 <iprintf>
  if (prev != NULL) {
 801b4be:	683b      	ldr	r3, [r7, #0]
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d00a      	beq.n	801b4da <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b4c4:	683b      	ldr	r3, [r7, #0]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	687a      	ldr	r2, [r7, #4]
 801b4ca:	429a      	cmp	r2, r3
 801b4cc:	d005      	beq.n	801b4da <ip_reass_free_complete_datagram+0x3e>
 801b4ce:	4b3e      	ldr	r3, [pc, #248]	; (801b5c8 <ip_reass_free_complete_datagram+0x12c>)
 801b4d0:	22ad      	movs	r2, #173	; 0xad
 801b4d2:	4940      	ldr	r1, [pc, #256]	; (801b5d4 <ip_reass_free_complete_datagram+0x138>)
 801b4d4:	483e      	ldr	r0, [pc, #248]	; (801b5d0 <ip_reass_free_complete_datagram+0x134>)
 801b4d6:	f001 faed 	bl	801cab4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	685b      	ldr	r3, [r3, #4]
 801b4de:	685b      	ldr	r3, [r3, #4]
 801b4e0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b4e2:	697b      	ldr	r3, [r7, #20]
 801b4e4:	889b      	ldrh	r3, [r3, #4]
 801b4e6:	b29b      	uxth	r3, r3
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d12a      	bne.n	801b542 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	685b      	ldr	r3, [r3, #4]
 801b4f0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b4f2:	697b      	ldr	r3, [r7, #20]
 801b4f4:	681a      	ldr	r2, [r3, #0]
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b4fa:	69bb      	ldr	r3, [r7, #24]
 801b4fc:	6858      	ldr	r0, [r3, #4]
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	3308      	adds	r3, #8
 801b502:	2214      	movs	r2, #20
 801b504:	4619      	mov	r1, r3
 801b506:	f001 f9c5 	bl	801c894 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b50a:	2101      	movs	r1, #1
 801b50c:	69b8      	ldr	r0, [r7, #24]
 801b50e:	f7ff fc47 	bl	801ada0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b512:	69b8      	ldr	r0, [r7, #24]
 801b514:	f7f7 fba8 	bl	8012c68 <pbuf_clen>
 801b518:	4603      	mov	r3, r0
 801b51a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b51c:	8bfa      	ldrh	r2, [r7, #30]
 801b51e:	8a7b      	ldrh	r3, [r7, #18]
 801b520:	4413      	add	r3, r2
 801b522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b526:	db05      	blt.n	801b534 <ip_reass_free_complete_datagram+0x98>
 801b528:	4b27      	ldr	r3, [pc, #156]	; (801b5c8 <ip_reass_free_complete_datagram+0x12c>)
 801b52a:	22bc      	movs	r2, #188	; 0xbc
 801b52c:	492a      	ldr	r1, [pc, #168]	; (801b5d8 <ip_reass_free_complete_datagram+0x13c>)
 801b52e:	4828      	ldr	r0, [pc, #160]	; (801b5d0 <ip_reass_free_complete_datagram+0x134>)
 801b530:	f001 fac0 	bl	801cab4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b534:	8bfa      	ldrh	r2, [r7, #30]
 801b536:	8a7b      	ldrh	r3, [r7, #18]
 801b538:	4413      	add	r3, r2
 801b53a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b53c:	69b8      	ldr	r0, [r7, #24]
 801b53e:	f7f7 fb05 	bl	8012b4c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	685b      	ldr	r3, [r3, #4]
 801b546:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b548:	e01f      	b.n	801b58a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b54a:	69bb      	ldr	r3, [r7, #24]
 801b54c:	685b      	ldr	r3, [r3, #4]
 801b54e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b550:	69bb      	ldr	r3, [r7, #24]
 801b552:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b554:	697b      	ldr	r3, [r7, #20]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b55a:	68f8      	ldr	r0, [r7, #12]
 801b55c:	f7f7 fb84 	bl	8012c68 <pbuf_clen>
 801b560:	4603      	mov	r3, r0
 801b562:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b564:	8bfa      	ldrh	r2, [r7, #30]
 801b566:	8a7b      	ldrh	r3, [r7, #18]
 801b568:	4413      	add	r3, r2
 801b56a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b56e:	db05      	blt.n	801b57c <ip_reass_free_complete_datagram+0xe0>
 801b570:	4b15      	ldr	r3, [pc, #84]	; (801b5c8 <ip_reass_free_complete_datagram+0x12c>)
 801b572:	22cc      	movs	r2, #204	; 0xcc
 801b574:	4918      	ldr	r1, [pc, #96]	; (801b5d8 <ip_reass_free_complete_datagram+0x13c>)
 801b576:	4816      	ldr	r0, [pc, #88]	; (801b5d0 <ip_reass_free_complete_datagram+0x134>)
 801b578:	f001 fa9c 	bl	801cab4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b57c:	8bfa      	ldrh	r2, [r7, #30]
 801b57e:	8a7b      	ldrh	r3, [r7, #18]
 801b580:	4413      	add	r3, r2
 801b582:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b584:	68f8      	ldr	r0, [r7, #12]
 801b586:	f7f7 fae1 	bl	8012b4c <pbuf_free>
  while (p != NULL) {
 801b58a:	69bb      	ldr	r3, [r7, #24]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d1dc      	bne.n	801b54a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b590:	6839      	ldr	r1, [r7, #0]
 801b592:	6878      	ldr	r0, [r7, #4]
 801b594:	f000 f8c2 	bl	801b71c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b598:	4b10      	ldr	r3, [pc, #64]	; (801b5dc <ip_reass_free_complete_datagram+0x140>)
 801b59a:	881b      	ldrh	r3, [r3, #0]
 801b59c:	8bfa      	ldrh	r2, [r7, #30]
 801b59e:	429a      	cmp	r2, r3
 801b5a0:	d905      	bls.n	801b5ae <ip_reass_free_complete_datagram+0x112>
 801b5a2:	4b09      	ldr	r3, [pc, #36]	; (801b5c8 <ip_reass_free_complete_datagram+0x12c>)
 801b5a4:	22d2      	movs	r2, #210	; 0xd2
 801b5a6:	490e      	ldr	r1, [pc, #56]	; (801b5e0 <ip_reass_free_complete_datagram+0x144>)
 801b5a8:	4809      	ldr	r0, [pc, #36]	; (801b5d0 <ip_reass_free_complete_datagram+0x134>)
 801b5aa:	f001 fa83 	bl	801cab4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b5ae:	4b0b      	ldr	r3, [pc, #44]	; (801b5dc <ip_reass_free_complete_datagram+0x140>)
 801b5b0:	881a      	ldrh	r2, [r3, #0]
 801b5b2:	8bfb      	ldrh	r3, [r7, #30]
 801b5b4:	1ad3      	subs	r3, r2, r3
 801b5b6:	b29a      	uxth	r2, r3
 801b5b8:	4b08      	ldr	r3, [pc, #32]	; (801b5dc <ip_reass_free_complete_datagram+0x140>)
 801b5ba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b5bc:	8bfb      	ldrh	r3, [r7, #30]
}
 801b5be:	4618      	mov	r0, r3
 801b5c0:	3720      	adds	r7, #32
 801b5c2:	46bd      	mov	sp, r7
 801b5c4:	bd80      	pop	{r7, pc}
 801b5c6:	bf00      	nop
 801b5c8:	080212f8 	.word	0x080212f8
 801b5cc:	08021334 	.word	0x08021334
 801b5d0:	08021340 	.word	0x08021340
 801b5d4:	08021368 	.word	0x08021368
 801b5d8:	0802137c 	.word	0x0802137c
 801b5dc:	2000dee4 	.word	0x2000dee4
 801b5e0:	0802139c 	.word	0x0802139c

0801b5e4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b08a      	sub	sp, #40	; 0x28
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	6078      	str	r0, [r7, #4]
 801b5ec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b5f2:	2300      	movs	r3, #0
 801b5f4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b5f6:	2300      	movs	r3, #0
 801b5f8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b5fa:	2300      	movs	r3, #0
 801b5fc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b5fe:	2300      	movs	r3, #0
 801b600:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b602:	4b28      	ldr	r3, [pc, #160]	; (801b6a4 <ip_reass_remove_oldest_datagram+0xc0>)
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b608:	e030      	b.n	801b66c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b60c:	695a      	ldr	r2, [r3, #20]
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	68db      	ldr	r3, [r3, #12]
 801b612:	429a      	cmp	r2, r3
 801b614:	d10c      	bne.n	801b630 <ip_reass_remove_oldest_datagram+0x4c>
 801b616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b618:	699a      	ldr	r2, [r3, #24]
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	691b      	ldr	r3, [r3, #16]
 801b61e:	429a      	cmp	r2, r3
 801b620:	d106      	bne.n	801b630 <ip_reass_remove_oldest_datagram+0x4c>
 801b622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b624:	899a      	ldrh	r2, [r3, #12]
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	889b      	ldrh	r3, [r3, #4]
 801b62a:	b29b      	uxth	r3, r3
 801b62c:	429a      	cmp	r2, r3
 801b62e:	d014      	beq.n	801b65a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b630:	693b      	ldr	r3, [r7, #16]
 801b632:	3301      	adds	r3, #1
 801b634:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b636:	6a3b      	ldr	r3, [r7, #32]
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d104      	bne.n	801b646 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b63e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b640:	69fb      	ldr	r3, [r7, #28]
 801b642:	61bb      	str	r3, [r7, #24]
 801b644:	e009      	b.n	801b65a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b648:	7fda      	ldrb	r2, [r3, #31]
 801b64a:	6a3b      	ldr	r3, [r7, #32]
 801b64c:	7fdb      	ldrb	r3, [r3, #31]
 801b64e:	429a      	cmp	r2, r3
 801b650:	d803      	bhi.n	801b65a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b654:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b656:	69fb      	ldr	r3, [r7, #28]
 801b658:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d001      	beq.n	801b666 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b664:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d1cb      	bne.n	801b60a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b672:	6a3b      	ldr	r3, [r7, #32]
 801b674:	2b00      	cmp	r3, #0
 801b676:	d008      	beq.n	801b68a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b678:	69b9      	ldr	r1, [r7, #24]
 801b67a:	6a38      	ldr	r0, [r7, #32]
 801b67c:	f7ff ff0e 	bl	801b49c <ip_reass_free_complete_datagram>
 801b680:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b682:	697a      	ldr	r2, [r7, #20]
 801b684:	68fb      	ldr	r3, [r7, #12]
 801b686:	4413      	add	r3, r2
 801b688:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b68a:	697a      	ldr	r2, [r7, #20]
 801b68c:	683b      	ldr	r3, [r7, #0]
 801b68e:	429a      	cmp	r2, r3
 801b690:	da02      	bge.n	801b698 <ip_reass_remove_oldest_datagram+0xb4>
 801b692:	693b      	ldr	r3, [r7, #16]
 801b694:	2b01      	cmp	r3, #1
 801b696:	dcac      	bgt.n	801b5f2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b698:	697b      	ldr	r3, [r7, #20]
}
 801b69a:	4618      	mov	r0, r3
 801b69c:	3728      	adds	r7, #40	; 0x28
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	bd80      	pop	{r7, pc}
 801b6a2:	bf00      	nop
 801b6a4:	2000dee0 	.word	0x2000dee0

0801b6a8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b6a8:	b580      	push	{r7, lr}
 801b6aa:	b084      	sub	sp, #16
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	6078      	str	r0, [r7, #4]
 801b6b0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b6b2:	2004      	movs	r0, #4
 801b6b4:	f7f6 fbb8 	bl	8011e28 <memp_malloc>
 801b6b8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b6ba:	68fb      	ldr	r3, [r7, #12]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d110      	bne.n	801b6e2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b6c0:	6839      	ldr	r1, [r7, #0]
 801b6c2:	6878      	ldr	r0, [r7, #4]
 801b6c4:	f7ff ff8e 	bl	801b5e4 <ip_reass_remove_oldest_datagram>
 801b6c8:	4602      	mov	r2, r0
 801b6ca:	683b      	ldr	r3, [r7, #0]
 801b6cc:	4293      	cmp	r3, r2
 801b6ce:	dc03      	bgt.n	801b6d8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b6d0:	2004      	movs	r0, #4
 801b6d2:	f7f6 fba9 	bl	8011e28 <memp_malloc>
 801b6d6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b6d8:	68fb      	ldr	r3, [r7, #12]
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	d101      	bne.n	801b6e2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801b6de:	2300      	movs	r3, #0
 801b6e0:	e016      	b.n	801b710 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b6e2:	2220      	movs	r2, #32
 801b6e4:	2100      	movs	r1, #0
 801b6e6:	68f8      	ldr	r0, [r7, #12]
 801b6e8:	f001 f8fc 	bl	801c8e4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b6ec:	68fb      	ldr	r3, [r7, #12]
 801b6ee:	220f      	movs	r2, #15
 801b6f0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b6f2:	4b09      	ldr	r3, [pc, #36]	; (801b718 <ip_reass_enqueue_new_datagram+0x70>)
 801b6f4:	681a      	ldr	r2, [r3, #0]
 801b6f6:	68fb      	ldr	r3, [r7, #12]
 801b6f8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b6fa:	4a07      	ldr	r2, [pc, #28]	; (801b718 <ip_reass_enqueue_new_datagram+0x70>)
 801b6fc:	68fb      	ldr	r3, [r7, #12]
 801b6fe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b700:	68fb      	ldr	r3, [r7, #12]
 801b702:	3308      	adds	r3, #8
 801b704:	2214      	movs	r2, #20
 801b706:	6879      	ldr	r1, [r7, #4]
 801b708:	4618      	mov	r0, r3
 801b70a:	f001 f8c3 	bl	801c894 <memcpy>
  return ipr;
 801b70e:	68fb      	ldr	r3, [r7, #12]
}
 801b710:	4618      	mov	r0, r3
 801b712:	3710      	adds	r7, #16
 801b714:	46bd      	mov	sp, r7
 801b716:	bd80      	pop	{r7, pc}
 801b718:	2000dee0 	.word	0x2000dee0

0801b71c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b71c:	b580      	push	{r7, lr}
 801b71e:	b082      	sub	sp, #8
 801b720:	af00      	add	r7, sp, #0
 801b722:	6078      	str	r0, [r7, #4]
 801b724:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b726:	4b10      	ldr	r3, [pc, #64]	; (801b768 <ip_reass_dequeue_datagram+0x4c>)
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	687a      	ldr	r2, [r7, #4]
 801b72c:	429a      	cmp	r2, r3
 801b72e:	d104      	bne.n	801b73a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	4a0c      	ldr	r2, [pc, #48]	; (801b768 <ip_reass_dequeue_datagram+0x4c>)
 801b736:	6013      	str	r3, [r2, #0]
 801b738:	e00d      	b.n	801b756 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b73a:	683b      	ldr	r3, [r7, #0]
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d106      	bne.n	801b74e <ip_reass_dequeue_datagram+0x32>
 801b740:	4b0a      	ldr	r3, [pc, #40]	; (801b76c <ip_reass_dequeue_datagram+0x50>)
 801b742:	f240 1245 	movw	r2, #325	; 0x145
 801b746:	490a      	ldr	r1, [pc, #40]	; (801b770 <ip_reass_dequeue_datagram+0x54>)
 801b748:	480a      	ldr	r0, [pc, #40]	; (801b774 <ip_reass_dequeue_datagram+0x58>)
 801b74a:	f001 f9b3 	bl	801cab4 <iprintf>
    prev->next = ipr->next;
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	681a      	ldr	r2, [r3, #0]
 801b752:	683b      	ldr	r3, [r7, #0]
 801b754:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b756:	6879      	ldr	r1, [r7, #4]
 801b758:	2004      	movs	r0, #4
 801b75a:	f7f6 fbb7 	bl	8011ecc <memp_free>
}
 801b75e:	bf00      	nop
 801b760:	3708      	adds	r7, #8
 801b762:	46bd      	mov	sp, r7
 801b764:	bd80      	pop	{r7, pc}
 801b766:	bf00      	nop
 801b768:	2000dee0 	.word	0x2000dee0
 801b76c:	080212f8 	.word	0x080212f8
 801b770:	080213c0 	.word	0x080213c0
 801b774:	08021340 	.word	0x08021340

0801b778 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b778:	b580      	push	{r7, lr}
 801b77a:	b08c      	sub	sp, #48	; 0x30
 801b77c:	af00      	add	r7, sp, #0
 801b77e:	60f8      	str	r0, [r7, #12]
 801b780:	60b9      	str	r1, [r7, #8]
 801b782:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801b784:	2300      	movs	r3, #0
 801b786:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b788:	2301      	movs	r3, #1
 801b78a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801b78c:	68bb      	ldr	r3, [r7, #8]
 801b78e:	685b      	ldr	r3, [r3, #4]
 801b790:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b792:	69fb      	ldr	r3, [r7, #28]
 801b794:	885b      	ldrh	r3, [r3, #2]
 801b796:	b29b      	uxth	r3, r3
 801b798:	4618      	mov	r0, r3
 801b79a:	f7f5 fe8f 	bl	80114bc <lwip_htons>
 801b79e:	4603      	mov	r3, r0
 801b7a0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801b7a2:	69fb      	ldr	r3, [r7, #28]
 801b7a4:	781b      	ldrb	r3, [r3, #0]
 801b7a6:	f003 030f 	and.w	r3, r3, #15
 801b7aa:	b2db      	uxtb	r3, r3
 801b7ac:	009b      	lsls	r3, r3, #2
 801b7ae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801b7b0:	7e7b      	ldrb	r3, [r7, #25]
 801b7b2:	b29b      	uxth	r3, r3
 801b7b4:	8b7a      	ldrh	r2, [r7, #26]
 801b7b6:	429a      	cmp	r2, r3
 801b7b8:	d202      	bcs.n	801b7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b7ba:	f04f 33ff 	mov.w	r3, #4294967295
 801b7be:	e135      	b.n	801ba2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801b7c0:	7e7b      	ldrb	r3, [r7, #25]
 801b7c2:	b29b      	uxth	r3, r3
 801b7c4:	8b7a      	ldrh	r2, [r7, #26]
 801b7c6:	1ad3      	subs	r3, r2, r3
 801b7c8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801b7ca:	69fb      	ldr	r3, [r7, #28]
 801b7cc:	88db      	ldrh	r3, [r3, #6]
 801b7ce:	b29b      	uxth	r3, r3
 801b7d0:	4618      	mov	r0, r3
 801b7d2:	f7f5 fe73 	bl	80114bc <lwip_htons>
 801b7d6:	4603      	mov	r3, r0
 801b7d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b7dc:	b29b      	uxth	r3, r3
 801b7de:	00db      	lsls	r3, r3, #3
 801b7e0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801b7e2:	68bb      	ldr	r3, [r7, #8]
 801b7e4:	685b      	ldr	r3, [r3, #4]
 801b7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801b7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7ea:	2200      	movs	r2, #0
 801b7ec:	701a      	strb	r2, [r3, #0]
 801b7ee:	2200      	movs	r2, #0
 801b7f0:	705a      	strb	r2, [r3, #1]
 801b7f2:	2200      	movs	r2, #0
 801b7f4:	709a      	strb	r2, [r3, #2]
 801b7f6:	2200      	movs	r2, #0
 801b7f8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7fc:	8afa      	ldrh	r2, [r7, #22]
 801b7fe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801b800:	8afa      	ldrh	r2, [r7, #22]
 801b802:	8b7b      	ldrh	r3, [r7, #26]
 801b804:	4413      	add	r3, r2
 801b806:	b29a      	uxth	r2, r3
 801b808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b80a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801b80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b80e:	88db      	ldrh	r3, [r3, #6]
 801b810:	b29b      	uxth	r3, r3
 801b812:	8afa      	ldrh	r2, [r7, #22]
 801b814:	429a      	cmp	r2, r3
 801b816:	d902      	bls.n	801b81e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b818:	f04f 33ff 	mov.w	r3, #4294967295
 801b81c:	e106      	b.n	801ba2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b81e:	68fb      	ldr	r3, [r7, #12]
 801b820:	685b      	ldr	r3, [r3, #4]
 801b822:	627b      	str	r3, [r7, #36]	; 0x24
 801b824:	e068      	b.n	801b8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b828:	685b      	ldr	r3, [r3, #4]
 801b82a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801b82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b82e:	889b      	ldrh	r3, [r3, #4]
 801b830:	b29a      	uxth	r2, r3
 801b832:	693b      	ldr	r3, [r7, #16]
 801b834:	889b      	ldrh	r3, [r3, #4]
 801b836:	b29b      	uxth	r3, r3
 801b838:	429a      	cmp	r2, r3
 801b83a:	d235      	bcs.n	801b8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b83e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b840:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b844:	2b00      	cmp	r3, #0
 801b846:	d020      	beq.n	801b88a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b84a:	889b      	ldrh	r3, [r3, #4]
 801b84c:	b29a      	uxth	r2, r3
 801b84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b850:	88db      	ldrh	r3, [r3, #6]
 801b852:	b29b      	uxth	r3, r3
 801b854:	429a      	cmp	r2, r3
 801b856:	d307      	bcc.n	801b868 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b85a:	88db      	ldrh	r3, [r3, #6]
 801b85c:	b29a      	uxth	r2, r3
 801b85e:	693b      	ldr	r3, [r7, #16]
 801b860:	889b      	ldrh	r3, [r3, #4]
 801b862:	b29b      	uxth	r3, r3
 801b864:	429a      	cmp	r2, r3
 801b866:	d902      	bls.n	801b86e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b868:	f04f 33ff 	mov.w	r3, #4294967295
 801b86c:	e0de      	b.n	801ba2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b870:	68ba      	ldr	r2, [r7, #8]
 801b872:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b876:	88db      	ldrh	r3, [r3, #6]
 801b878:	b29a      	uxth	r2, r3
 801b87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b87c:	889b      	ldrh	r3, [r3, #4]
 801b87e:	b29b      	uxth	r3, r3
 801b880:	429a      	cmp	r2, r3
 801b882:	d03d      	beq.n	801b900 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b884:	2300      	movs	r3, #0
 801b886:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b888:	e03a      	b.n	801b900 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801b88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b88c:	88db      	ldrh	r3, [r3, #6]
 801b88e:	b29a      	uxth	r2, r3
 801b890:	693b      	ldr	r3, [r7, #16]
 801b892:	889b      	ldrh	r3, [r3, #4]
 801b894:	b29b      	uxth	r3, r3
 801b896:	429a      	cmp	r2, r3
 801b898:	d902      	bls.n	801b8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b89a:	f04f 33ff 	mov.w	r3, #4294967295
 801b89e:	e0c5      	b.n	801ba2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	68ba      	ldr	r2, [r7, #8]
 801b8a4:	605a      	str	r2, [r3, #4]
      break;
 801b8a6:	e02b      	b.n	801b900 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801b8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8aa:	889b      	ldrh	r3, [r3, #4]
 801b8ac:	b29a      	uxth	r2, r3
 801b8ae:	693b      	ldr	r3, [r7, #16]
 801b8b0:	889b      	ldrh	r3, [r3, #4]
 801b8b2:	b29b      	uxth	r3, r3
 801b8b4:	429a      	cmp	r2, r3
 801b8b6:	d102      	bne.n	801b8be <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b8b8:	f04f 33ff 	mov.w	r3, #4294967295
 801b8bc:	e0b6      	b.n	801ba2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8c0:	889b      	ldrh	r3, [r3, #4]
 801b8c2:	b29a      	uxth	r2, r3
 801b8c4:	693b      	ldr	r3, [r7, #16]
 801b8c6:	88db      	ldrh	r3, [r3, #6]
 801b8c8:	b29b      	uxth	r3, r3
 801b8ca:	429a      	cmp	r2, r3
 801b8cc:	d202      	bcs.n	801b8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b8ce:	f04f 33ff 	mov.w	r3, #4294967295
 801b8d2:	e0ab      	b.n	801ba2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d009      	beq.n	801b8ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8dc:	88db      	ldrh	r3, [r3, #6]
 801b8de:	b29a      	uxth	r2, r3
 801b8e0:	693b      	ldr	r3, [r7, #16]
 801b8e2:	889b      	ldrh	r3, [r3, #4]
 801b8e4:	b29b      	uxth	r3, r3
 801b8e6:	429a      	cmp	r2, r3
 801b8e8:	d001      	beq.n	801b8ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b8ea:	2300      	movs	r3, #0
 801b8ec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b8ee:	693b      	ldr	r3, [r7, #16]
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801b8f4:	693b      	ldr	r3, [r7, #16]
 801b8f6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d193      	bne.n	801b826 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801b8fe:	e000      	b.n	801b902 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801b900:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b904:	2b00      	cmp	r3, #0
 801b906:	d12d      	bne.n	801b964 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801b908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d01c      	beq.n	801b948 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b910:	88db      	ldrh	r3, [r3, #6]
 801b912:	b29a      	uxth	r2, r3
 801b914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b916:	889b      	ldrh	r3, [r3, #4]
 801b918:	b29b      	uxth	r3, r3
 801b91a:	429a      	cmp	r2, r3
 801b91c:	d906      	bls.n	801b92c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801b91e:	4b45      	ldr	r3, [pc, #276]	; (801ba34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b920:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801b924:	4944      	ldr	r1, [pc, #272]	; (801ba38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b926:	4845      	ldr	r0, [pc, #276]	; (801ba3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b928:	f001 f8c4 	bl	801cab4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b92e:	68ba      	ldr	r2, [r7, #8]
 801b930:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b934:	88db      	ldrh	r3, [r3, #6]
 801b936:	b29a      	uxth	r2, r3
 801b938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b93a:	889b      	ldrh	r3, [r3, #4]
 801b93c:	b29b      	uxth	r3, r3
 801b93e:	429a      	cmp	r2, r3
 801b940:	d010      	beq.n	801b964 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b942:	2300      	movs	r3, #0
 801b944:	623b      	str	r3, [r7, #32]
 801b946:	e00d      	b.n	801b964 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	685b      	ldr	r3, [r3, #4]
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d006      	beq.n	801b95e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b950:	4b38      	ldr	r3, [pc, #224]	; (801ba34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b952:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801b956:	493a      	ldr	r1, [pc, #232]	; (801ba40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b958:	4838      	ldr	r0, [pc, #224]	; (801ba3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b95a:	f001 f8ab 	bl	801cab4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	68ba      	ldr	r2, [r7, #8]
 801b962:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	2b00      	cmp	r3, #0
 801b968:	d105      	bne.n	801b976 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801b96a:	68fb      	ldr	r3, [r7, #12]
 801b96c:	7f9b      	ldrb	r3, [r3, #30]
 801b96e:	f003 0301 	and.w	r3, r3, #1
 801b972:	2b00      	cmp	r3, #0
 801b974:	d059      	beq.n	801ba2a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801b976:	6a3b      	ldr	r3, [r7, #32]
 801b978:	2b00      	cmp	r3, #0
 801b97a:	d04f      	beq.n	801ba1c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801b97c:	68fb      	ldr	r3, [r7, #12]
 801b97e:	685b      	ldr	r3, [r3, #4]
 801b980:	2b00      	cmp	r3, #0
 801b982:	d006      	beq.n	801b992 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801b984:	68fb      	ldr	r3, [r7, #12]
 801b986:	685b      	ldr	r3, [r3, #4]
 801b988:	685b      	ldr	r3, [r3, #4]
 801b98a:	889b      	ldrh	r3, [r3, #4]
 801b98c:	b29b      	uxth	r3, r3
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d002      	beq.n	801b998 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801b992:	2300      	movs	r3, #0
 801b994:	623b      	str	r3, [r7, #32]
 801b996:	e041      	b.n	801ba1c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b99a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b9a2:	e012      	b.n	801b9ca <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9a6:	685b      	ldr	r3, [r3, #4]
 801b9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801b9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9ac:	88db      	ldrh	r3, [r3, #6]
 801b9ae:	b29a      	uxth	r2, r3
 801b9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9b2:	889b      	ldrh	r3, [r3, #4]
 801b9b4:	b29b      	uxth	r3, r3
 801b9b6:	429a      	cmp	r2, r3
 801b9b8:	d002      	beq.n	801b9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801b9ba:	2300      	movs	r3, #0
 801b9bc:	623b      	str	r3, [r7, #32]
            break;
 801b9be:	e007      	b.n	801b9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801b9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9c2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801b9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d1e9      	bne.n	801b9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b9d0:	6a3b      	ldr	r3, [r7, #32]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d022      	beq.n	801ba1c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b9d6:	68fb      	ldr	r3, [r7, #12]
 801b9d8:	685b      	ldr	r3, [r3, #4]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d106      	bne.n	801b9ec <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801b9de:	4b15      	ldr	r3, [pc, #84]	; (801ba34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b9e0:	f240 12df 	movw	r2, #479	; 0x1df
 801b9e4:	4917      	ldr	r1, [pc, #92]	; (801ba44 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b9e6:	4815      	ldr	r0, [pc, #84]	; (801ba3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b9e8:	f001 f864 	bl	801cab4 <iprintf>
          LWIP_ASSERT("sanity check",
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	685b      	ldr	r3, [r3, #4]
 801b9f0:	685b      	ldr	r3, [r3, #4]
 801b9f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b9f4:	429a      	cmp	r2, r3
 801b9f6:	d106      	bne.n	801ba06 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801b9f8:	4b0e      	ldr	r3, [pc, #56]	; (801ba34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b9fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801b9fe:	4911      	ldr	r1, [pc, #68]	; (801ba44 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ba00:	480e      	ldr	r0, [pc, #56]	; (801ba3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ba02:	f001 f857 	bl	801cab4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ba06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba08:	681b      	ldr	r3, [r3, #0]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d006      	beq.n	801ba1c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801ba0e:	4b09      	ldr	r3, [pc, #36]	; (801ba34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ba10:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801ba14:	490c      	ldr	r1, [pc, #48]	; (801ba48 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801ba16:	4809      	ldr	r0, [pc, #36]	; (801ba3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ba18:	f001 f84c 	bl	801cab4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801ba1c:	6a3b      	ldr	r3, [r7, #32]
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	bf14      	ite	ne
 801ba22:	2301      	movne	r3, #1
 801ba24:	2300      	moveq	r3, #0
 801ba26:	b2db      	uxtb	r3, r3
 801ba28:	e000      	b.n	801ba2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801ba2a:	2300      	movs	r3, #0
}
 801ba2c:	4618      	mov	r0, r3
 801ba2e:	3730      	adds	r7, #48	; 0x30
 801ba30:	46bd      	mov	sp, r7
 801ba32:	bd80      	pop	{r7, pc}
 801ba34:	080212f8 	.word	0x080212f8
 801ba38:	080213dc 	.word	0x080213dc
 801ba3c:	08021340 	.word	0x08021340
 801ba40:	080213fc 	.word	0x080213fc
 801ba44:	08021434 	.word	0x08021434
 801ba48:	08021444 	.word	0x08021444

0801ba4c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801ba4c:	b580      	push	{r7, lr}
 801ba4e:	b08e      	sub	sp, #56	; 0x38
 801ba50:	af00      	add	r7, sp, #0
 801ba52:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	685b      	ldr	r3, [r3, #4]
 801ba58:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba5c:	781b      	ldrb	r3, [r3, #0]
 801ba5e:	f003 030f 	and.w	r3, r3, #15
 801ba62:	b2db      	uxtb	r3, r3
 801ba64:	009b      	lsls	r3, r3, #2
 801ba66:	b2db      	uxtb	r3, r3
 801ba68:	2b14      	cmp	r3, #20
 801ba6a:	f040 8171 	bne.w	801bd50 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801ba6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba70:	88db      	ldrh	r3, [r3, #6]
 801ba72:	b29b      	uxth	r3, r3
 801ba74:	4618      	mov	r0, r3
 801ba76:	f7f5 fd21 	bl	80114bc <lwip_htons>
 801ba7a:	4603      	mov	r3, r0
 801ba7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ba80:	b29b      	uxth	r3, r3
 801ba82:	00db      	lsls	r3, r3, #3
 801ba84:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ba86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba88:	885b      	ldrh	r3, [r3, #2]
 801ba8a:	b29b      	uxth	r3, r3
 801ba8c:	4618      	mov	r0, r3
 801ba8e:	f7f5 fd15 	bl	80114bc <lwip_htons>
 801ba92:	4603      	mov	r3, r0
 801ba94:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba98:	781b      	ldrb	r3, [r3, #0]
 801ba9a:	f003 030f 	and.w	r3, r3, #15
 801ba9e:	b2db      	uxtb	r3, r3
 801baa0:	009b      	lsls	r3, r3, #2
 801baa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801baa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801baaa:	b29b      	uxth	r3, r3
 801baac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801baae:	429a      	cmp	r2, r3
 801bab0:	f0c0 8150 	bcc.w	801bd54 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801bab4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801bab8:	b29b      	uxth	r3, r3
 801baba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801babc:	1ad3      	subs	r3, r2, r3
 801babe:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801bac0:	6878      	ldr	r0, [r7, #4]
 801bac2:	f7f7 f8d1 	bl	8012c68 <pbuf_clen>
 801bac6:	4603      	mov	r3, r0
 801bac8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801baca:	4b8c      	ldr	r3, [pc, #560]	; (801bcfc <ip4_reass+0x2b0>)
 801bacc:	881b      	ldrh	r3, [r3, #0]
 801bace:	461a      	mov	r2, r3
 801bad0:	8c3b      	ldrh	r3, [r7, #32]
 801bad2:	4413      	add	r3, r2
 801bad4:	2b0a      	cmp	r3, #10
 801bad6:	dd10      	ble.n	801bafa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bad8:	8c3b      	ldrh	r3, [r7, #32]
 801bada:	4619      	mov	r1, r3
 801badc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bade:	f7ff fd81 	bl	801b5e4 <ip_reass_remove_oldest_datagram>
 801bae2:	4603      	mov	r3, r0
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	f000 8137 	beq.w	801bd58 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801baea:	4b84      	ldr	r3, [pc, #528]	; (801bcfc <ip4_reass+0x2b0>)
 801baec:	881b      	ldrh	r3, [r3, #0]
 801baee:	461a      	mov	r2, r3
 801baf0:	8c3b      	ldrh	r3, [r7, #32]
 801baf2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801baf4:	2b0a      	cmp	r3, #10
 801baf6:	f300 812f 	bgt.w	801bd58 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bafa:	4b81      	ldr	r3, [pc, #516]	; (801bd00 <ip4_reass+0x2b4>)
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	633b      	str	r3, [r7, #48]	; 0x30
 801bb00:	e015      	b.n	801bb2e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb04:	695a      	ldr	r2, [r3, #20]
 801bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb08:	68db      	ldr	r3, [r3, #12]
 801bb0a:	429a      	cmp	r2, r3
 801bb0c:	d10c      	bne.n	801bb28 <ip4_reass+0xdc>
 801bb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb10:	699a      	ldr	r2, [r3, #24]
 801bb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb14:	691b      	ldr	r3, [r3, #16]
 801bb16:	429a      	cmp	r2, r3
 801bb18:	d106      	bne.n	801bb28 <ip4_reass+0xdc>
 801bb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb1c:	899a      	ldrh	r2, [r3, #12]
 801bb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb20:	889b      	ldrh	r3, [r3, #4]
 801bb22:	b29b      	uxth	r3, r3
 801bb24:	429a      	cmp	r2, r3
 801bb26:	d006      	beq.n	801bb36 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb2a:	681b      	ldr	r3, [r3, #0]
 801bb2c:	633b      	str	r3, [r7, #48]	; 0x30
 801bb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d1e6      	bne.n	801bb02 <ip4_reass+0xb6>
 801bb34:	e000      	b.n	801bb38 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801bb36:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801bb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d109      	bne.n	801bb52 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801bb3e:	8c3b      	ldrh	r3, [r7, #32]
 801bb40:	4619      	mov	r1, r3
 801bb42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bb44:	f7ff fdb0 	bl	801b6a8 <ip_reass_enqueue_new_datagram>
 801bb48:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801bb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d11c      	bne.n	801bb8a <ip4_reass+0x13e>
      goto nullreturn;
 801bb50:	e105      	b.n	801bd5e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801bb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb54:	88db      	ldrh	r3, [r3, #6]
 801bb56:	b29b      	uxth	r3, r3
 801bb58:	4618      	mov	r0, r3
 801bb5a:	f7f5 fcaf 	bl	80114bc <lwip_htons>
 801bb5e:	4603      	mov	r3, r0
 801bb60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d110      	bne.n	801bb8a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801bb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb6a:	89db      	ldrh	r3, [r3, #14]
 801bb6c:	4618      	mov	r0, r3
 801bb6e:	f7f5 fca5 	bl	80114bc <lwip_htons>
 801bb72:	4603      	mov	r3, r0
 801bb74:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d006      	beq.n	801bb8a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801bb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb7e:	3308      	adds	r3, #8
 801bb80:	2214      	movs	r2, #20
 801bb82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bb84:	4618      	mov	r0, r3
 801bb86:	f000 fe85 	bl	801c894 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801bb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb8c:	88db      	ldrh	r3, [r3, #6]
 801bb8e:	b29b      	uxth	r3, r3
 801bb90:	f003 0320 	and.w	r3, r3, #32
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	bf0c      	ite	eq
 801bb98:	2301      	moveq	r3, #1
 801bb9a:	2300      	movne	r3, #0
 801bb9c:	b2db      	uxtb	r3, r3
 801bb9e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801bba0:	69fb      	ldr	r3, [r7, #28]
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d00e      	beq.n	801bbc4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801bba6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801bba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bbaa:	4413      	add	r3, r2
 801bbac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801bbae:	8b7a      	ldrh	r2, [r7, #26]
 801bbb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bbb2:	429a      	cmp	r2, r3
 801bbb4:	f0c0 80a0 	bcc.w	801bcf8 <ip4_reass+0x2ac>
 801bbb8:	8b7b      	ldrh	r3, [r7, #26]
 801bbba:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801bbbe:	4293      	cmp	r3, r2
 801bbc0:	f200 809a 	bhi.w	801bcf8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801bbc4:	69fa      	ldr	r2, [r7, #28]
 801bbc6:	6879      	ldr	r1, [r7, #4]
 801bbc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bbca:	f7ff fdd5 	bl	801b778 <ip_reass_chain_frag_into_datagram_and_validate>
 801bbce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801bbd0:	697b      	ldr	r3, [r7, #20]
 801bbd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bbd6:	f000 809b 	beq.w	801bd10 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801bbda:	4b48      	ldr	r3, [pc, #288]	; (801bcfc <ip4_reass+0x2b0>)
 801bbdc:	881a      	ldrh	r2, [r3, #0]
 801bbde:	8c3b      	ldrh	r3, [r7, #32]
 801bbe0:	4413      	add	r3, r2
 801bbe2:	b29a      	uxth	r2, r3
 801bbe4:	4b45      	ldr	r3, [pc, #276]	; (801bcfc <ip4_reass+0x2b0>)
 801bbe6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801bbe8:	69fb      	ldr	r3, [r7, #28]
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d00d      	beq.n	801bc0a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801bbee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801bbf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bbf2:	4413      	add	r3, r2
 801bbf4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801bbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbf8:	8a7a      	ldrh	r2, [r7, #18]
 801bbfa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbfe:	7f9b      	ldrb	r3, [r3, #30]
 801bc00:	f043 0301 	orr.w	r3, r3, #1
 801bc04:	b2da      	uxtb	r2, r3
 801bc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc08:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801bc0a:	697b      	ldr	r3, [r7, #20]
 801bc0c:	2b01      	cmp	r3, #1
 801bc0e:	d171      	bne.n	801bcf4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801bc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc12:	8b9b      	ldrh	r3, [r3, #28]
 801bc14:	3314      	adds	r3, #20
 801bc16:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801bc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc1a:	685b      	ldr	r3, [r3, #4]
 801bc1c:	685b      	ldr	r3, [r3, #4]
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801bc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc24:	685b      	ldr	r3, [r3, #4]
 801bc26:	685b      	ldr	r3, [r3, #4]
 801bc28:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801bc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc2c:	3308      	adds	r3, #8
 801bc2e:	2214      	movs	r2, #20
 801bc30:	4619      	mov	r1, r3
 801bc32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bc34:	f000 fe2e 	bl	801c894 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801bc38:	8a3b      	ldrh	r3, [r7, #16]
 801bc3a:	4618      	mov	r0, r3
 801bc3c:	f7f5 fc3e 	bl	80114bc <lwip_htons>
 801bc40:	4603      	mov	r3, r0
 801bc42:	461a      	mov	r2, r3
 801bc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc46:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801bc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc4a:	2200      	movs	r2, #0
 801bc4c:	719a      	strb	r2, [r3, #6]
 801bc4e:	2200      	movs	r2, #0
 801bc50:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801bc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc54:	2200      	movs	r2, #0
 801bc56:	729a      	strb	r2, [r3, #10]
 801bc58:	2200      	movs	r2, #0
 801bc5a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801bc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc5e:	685b      	ldr	r3, [r3, #4]
 801bc60:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801bc62:	e00d      	b.n	801bc80 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801bc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc66:	685b      	ldr	r3, [r3, #4]
 801bc68:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801bc6a:	2114      	movs	r1, #20
 801bc6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801bc6e:	f7f6 fee7 	bl	8012a40 <pbuf_remove_header>
      pbuf_cat(p, r);
 801bc72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801bc74:	6878      	ldr	r0, [r7, #4]
 801bc76:	f7f7 f837 	bl	8012ce8 <pbuf_cat>
      r = iprh->next_pbuf;
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801bc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d1ee      	bne.n	801bc64 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801bc86:	4b1e      	ldr	r3, [pc, #120]	; (801bd00 <ip4_reass+0x2b4>)
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bc8c:	429a      	cmp	r2, r3
 801bc8e:	d102      	bne.n	801bc96 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801bc90:	2300      	movs	r3, #0
 801bc92:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bc94:	e010      	b.n	801bcb8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801bc96:	4b1a      	ldr	r3, [pc, #104]	; (801bd00 <ip4_reass+0x2b4>)
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bc9c:	e007      	b.n	801bcae <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801bc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bca4:	429a      	cmp	r2, r3
 801bca6:	d006      	beq.n	801bcb6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801bca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcaa:	681b      	ldr	r3, [r3, #0]
 801bcac:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	d1f4      	bne.n	801bc9e <ip4_reass+0x252>
 801bcb4:	e000      	b.n	801bcb8 <ip4_reass+0x26c>
          break;
 801bcb6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801bcb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bcba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bcbc:	f7ff fd2e 	bl	801b71c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801bcc0:	6878      	ldr	r0, [r7, #4]
 801bcc2:	f7f6 ffd1 	bl	8012c68 <pbuf_clen>
 801bcc6:	4603      	mov	r3, r0
 801bcc8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801bcca:	4b0c      	ldr	r3, [pc, #48]	; (801bcfc <ip4_reass+0x2b0>)
 801bccc:	881b      	ldrh	r3, [r3, #0]
 801bcce:	8c3a      	ldrh	r2, [r7, #32]
 801bcd0:	429a      	cmp	r2, r3
 801bcd2:	d906      	bls.n	801bce2 <ip4_reass+0x296>
 801bcd4:	4b0b      	ldr	r3, [pc, #44]	; (801bd04 <ip4_reass+0x2b8>)
 801bcd6:	f240 229b 	movw	r2, #667	; 0x29b
 801bcda:	490b      	ldr	r1, [pc, #44]	; (801bd08 <ip4_reass+0x2bc>)
 801bcdc:	480b      	ldr	r0, [pc, #44]	; (801bd0c <ip4_reass+0x2c0>)
 801bcde:	f000 fee9 	bl	801cab4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801bce2:	4b06      	ldr	r3, [pc, #24]	; (801bcfc <ip4_reass+0x2b0>)
 801bce4:	881a      	ldrh	r2, [r3, #0]
 801bce6:	8c3b      	ldrh	r3, [r7, #32]
 801bce8:	1ad3      	subs	r3, r2, r3
 801bcea:	b29a      	uxth	r2, r3
 801bcec:	4b03      	ldr	r3, [pc, #12]	; (801bcfc <ip4_reass+0x2b0>)
 801bcee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	e038      	b.n	801bd66 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801bcf4:	2300      	movs	r3, #0
 801bcf6:	e036      	b.n	801bd66 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801bcf8:	bf00      	nop
 801bcfa:	e00a      	b.n	801bd12 <ip4_reass+0x2c6>
 801bcfc:	2000dee4 	.word	0x2000dee4
 801bd00:	2000dee0 	.word	0x2000dee0
 801bd04:	080212f8 	.word	0x080212f8
 801bd08:	08021468 	.word	0x08021468
 801bd0c:	08021340 	.word	0x08021340
    goto nullreturn_ipr;
 801bd10:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d106      	bne.n	801bd26 <ip4_reass+0x2da>
 801bd18:	4b15      	ldr	r3, [pc, #84]	; (801bd70 <ip4_reass+0x324>)
 801bd1a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801bd1e:	4915      	ldr	r1, [pc, #84]	; (801bd74 <ip4_reass+0x328>)
 801bd20:	4815      	ldr	r0, [pc, #84]	; (801bd78 <ip4_reass+0x32c>)
 801bd22:	f000 fec7 	bl	801cab4 <iprintf>
  if (ipr->p == NULL) {
 801bd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd28:	685b      	ldr	r3, [r3, #4]
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d116      	bne.n	801bd5c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801bd2e:	4b13      	ldr	r3, [pc, #76]	; (801bd7c <ip4_reass+0x330>)
 801bd30:	681b      	ldr	r3, [r3, #0]
 801bd32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bd34:	429a      	cmp	r2, r3
 801bd36:	d006      	beq.n	801bd46 <ip4_reass+0x2fa>
 801bd38:	4b0d      	ldr	r3, [pc, #52]	; (801bd70 <ip4_reass+0x324>)
 801bd3a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801bd3e:	4910      	ldr	r1, [pc, #64]	; (801bd80 <ip4_reass+0x334>)
 801bd40:	480d      	ldr	r0, [pc, #52]	; (801bd78 <ip4_reass+0x32c>)
 801bd42:	f000 feb7 	bl	801cab4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801bd46:	2100      	movs	r1, #0
 801bd48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bd4a:	f7ff fce7 	bl	801b71c <ip_reass_dequeue_datagram>
 801bd4e:	e006      	b.n	801bd5e <ip4_reass+0x312>
    goto nullreturn;
 801bd50:	bf00      	nop
 801bd52:	e004      	b.n	801bd5e <ip4_reass+0x312>
    goto nullreturn;
 801bd54:	bf00      	nop
 801bd56:	e002      	b.n	801bd5e <ip4_reass+0x312>
      goto nullreturn;
 801bd58:	bf00      	nop
 801bd5a:	e000      	b.n	801bd5e <ip4_reass+0x312>
  }

nullreturn:
 801bd5c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801bd5e:	6878      	ldr	r0, [r7, #4]
 801bd60:	f7f6 fef4 	bl	8012b4c <pbuf_free>
  return NULL;
 801bd64:	2300      	movs	r3, #0
}
 801bd66:	4618      	mov	r0, r3
 801bd68:	3738      	adds	r7, #56	; 0x38
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	bd80      	pop	{r7, pc}
 801bd6e:	bf00      	nop
 801bd70:	080212f8 	.word	0x080212f8
 801bd74:	08021484 	.word	0x08021484
 801bd78:	08021340 	.word	0x08021340
 801bd7c:	2000dee0 	.word	0x2000dee0
 801bd80:	08021490 	.word	0x08021490

0801bd84 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801bd84:	b580      	push	{r7, lr}
 801bd86:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801bd88:	2005      	movs	r0, #5
 801bd8a:	f7f6 f84d 	bl	8011e28 <memp_malloc>
 801bd8e:	4603      	mov	r3, r0
}
 801bd90:	4618      	mov	r0, r3
 801bd92:	bd80      	pop	{r7, pc}

0801bd94 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b082      	sub	sp, #8
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d106      	bne.n	801bdb0 <ip_frag_free_pbuf_custom_ref+0x1c>
 801bda2:	4b07      	ldr	r3, [pc, #28]	; (801bdc0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801bda4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801bda8:	4906      	ldr	r1, [pc, #24]	; (801bdc4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801bdaa:	4807      	ldr	r0, [pc, #28]	; (801bdc8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801bdac:	f000 fe82 	bl	801cab4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801bdb0:	6879      	ldr	r1, [r7, #4]
 801bdb2:	2005      	movs	r0, #5
 801bdb4:	f7f6 f88a 	bl	8011ecc <memp_free>
}
 801bdb8:	bf00      	nop
 801bdba:	3708      	adds	r7, #8
 801bdbc:	46bd      	mov	sp, r7
 801bdbe:	bd80      	pop	{r7, pc}
 801bdc0:	080212f8 	.word	0x080212f8
 801bdc4:	080214b0 	.word	0x080214b0
 801bdc8:	08021340 	.word	0x08021340

0801bdcc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801bdcc:	b580      	push	{r7, lr}
 801bdce:	b084      	sub	sp, #16
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801bdd8:	68fb      	ldr	r3, [r7, #12]
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d106      	bne.n	801bdec <ipfrag_free_pbuf_custom+0x20>
 801bdde:	4b11      	ldr	r3, [pc, #68]	; (801be24 <ipfrag_free_pbuf_custom+0x58>)
 801bde0:	f240 22ce 	movw	r2, #718	; 0x2ce
 801bde4:	4910      	ldr	r1, [pc, #64]	; (801be28 <ipfrag_free_pbuf_custom+0x5c>)
 801bde6:	4811      	ldr	r0, [pc, #68]	; (801be2c <ipfrag_free_pbuf_custom+0x60>)
 801bde8:	f000 fe64 	bl	801cab4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801bdec:	68fa      	ldr	r2, [r7, #12]
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	429a      	cmp	r2, r3
 801bdf2:	d006      	beq.n	801be02 <ipfrag_free_pbuf_custom+0x36>
 801bdf4:	4b0b      	ldr	r3, [pc, #44]	; (801be24 <ipfrag_free_pbuf_custom+0x58>)
 801bdf6:	f240 22cf 	movw	r2, #719	; 0x2cf
 801bdfa:	490d      	ldr	r1, [pc, #52]	; (801be30 <ipfrag_free_pbuf_custom+0x64>)
 801bdfc:	480b      	ldr	r0, [pc, #44]	; (801be2c <ipfrag_free_pbuf_custom+0x60>)
 801bdfe:	f000 fe59 	bl	801cab4 <iprintf>
  if (pcr->original != NULL) {
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	695b      	ldr	r3, [r3, #20]
 801be06:	2b00      	cmp	r3, #0
 801be08:	d004      	beq.n	801be14 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801be0a:	68fb      	ldr	r3, [r7, #12]
 801be0c:	695b      	ldr	r3, [r3, #20]
 801be0e:	4618      	mov	r0, r3
 801be10:	f7f6 fe9c 	bl	8012b4c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801be14:	68f8      	ldr	r0, [r7, #12]
 801be16:	f7ff ffbd 	bl	801bd94 <ip_frag_free_pbuf_custom_ref>
}
 801be1a:	bf00      	nop
 801be1c:	3710      	adds	r7, #16
 801be1e:	46bd      	mov	sp, r7
 801be20:	bd80      	pop	{r7, pc}
 801be22:	bf00      	nop
 801be24:	080212f8 	.word	0x080212f8
 801be28:	080214bc 	.word	0x080214bc
 801be2c:	08021340 	.word	0x08021340
 801be30:	080214c8 	.word	0x080214c8

0801be34 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801be34:	b580      	push	{r7, lr}
 801be36:	b094      	sub	sp, #80	; 0x50
 801be38:	af02      	add	r7, sp, #8
 801be3a:	60f8      	str	r0, [r7, #12]
 801be3c:	60b9      	str	r1, [r7, #8]
 801be3e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801be40:	2300      	movs	r3, #0
 801be42:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801be46:	68bb      	ldr	r3, [r7, #8]
 801be48:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801be4a:	3b14      	subs	r3, #20
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	da00      	bge.n	801be52 <ip4_frag+0x1e>
 801be50:	3307      	adds	r3, #7
 801be52:	10db      	asrs	r3, r3, #3
 801be54:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801be56:	2314      	movs	r3, #20
 801be58:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	685b      	ldr	r3, [r3, #4]
 801be5e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801be60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be62:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801be64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be66:	781b      	ldrb	r3, [r3, #0]
 801be68:	f003 030f 	and.w	r3, r3, #15
 801be6c:	b2db      	uxtb	r3, r3
 801be6e:	009b      	lsls	r3, r3, #2
 801be70:	b2db      	uxtb	r3, r3
 801be72:	2b14      	cmp	r3, #20
 801be74:	d002      	beq.n	801be7c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801be76:	f06f 0305 	mvn.w	r3, #5
 801be7a:	e110      	b.n	801c09e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801be7c:	68fb      	ldr	r3, [r7, #12]
 801be7e:	895b      	ldrh	r3, [r3, #10]
 801be80:	2b13      	cmp	r3, #19
 801be82:	d809      	bhi.n	801be98 <ip4_frag+0x64>
 801be84:	4b88      	ldr	r3, [pc, #544]	; (801c0a8 <ip4_frag+0x274>)
 801be86:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801be8a:	4988      	ldr	r1, [pc, #544]	; (801c0ac <ip4_frag+0x278>)
 801be8c:	4888      	ldr	r0, [pc, #544]	; (801c0b0 <ip4_frag+0x27c>)
 801be8e:	f000 fe11 	bl	801cab4 <iprintf>
 801be92:	f06f 0305 	mvn.w	r3, #5
 801be96:	e102      	b.n	801c09e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be9a:	88db      	ldrh	r3, [r3, #6]
 801be9c:	b29b      	uxth	r3, r3
 801be9e:	4618      	mov	r0, r3
 801bea0:	f7f5 fb0c 	bl	80114bc <lwip_htons>
 801bea4:	4603      	mov	r3, r0
 801bea6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801bea8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801beaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801beae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801beb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801beb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801beb8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801beba:	68fb      	ldr	r3, [r7, #12]
 801bebc:	891b      	ldrh	r3, [r3, #8]
 801bebe:	3b14      	subs	r3, #20
 801bec0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801bec4:	e0e1      	b.n	801c08a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801bec6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bec8:	00db      	lsls	r3, r3, #3
 801beca:	b29b      	uxth	r3, r3
 801becc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bed0:	4293      	cmp	r3, r2
 801bed2:	bf28      	it	cs
 801bed4:	4613      	movcs	r3, r2
 801bed6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801bed8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bedc:	2114      	movs	r1, #20
 801bede:	200e      	movs	r0, #14
 801bee0:	f7f6 fb50 	bl	8012584 <pbuf_alloc>
 801bee4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801bee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bee8:	2b00      	cmp	r3, #0
 801beea:	f000 80d5 	beq.w	801c098 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bef0:	895b      	ldrh	r3, [r3, #10]
 801bef2:	2b13      	cmp	r3, #19
 801bef4:	d806      	bhi.n	801bf04 <ip4_frag+0xd0>
 801bef6:	4b6c      	ldr	r3, [pc, #432]	; (801c0a8 <ip4_frag+0x274>)
 801bef8:	f44f 7249 	mov.w	r2, #804	; 0x324
 801befc:	496d      	ldr	r1, [pc, #436]	; (801c0b4 <ip4_frag+0x280>)
 801befe:	486c      	ldr	r0, [pc, #432]	; (801c0b0 <ip4_frag+0x27c>)
 801bf00:	f000 fdd8 	bl	801cab4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf06:	685b      	ldr	r3, [r3, #4]
 801bf08:	2214      	movs	r2, #20
 801bf0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801bf0c:	4618      	mov	r0, r3
 801bf0e:	f000 fcc1 	bl	801c894 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801bf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf14:	685b      	ldr	r3, [r3, #4]
 801bf16:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801bf18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bf1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801bf1e:	e064      	b.n	801bfea <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801bf20:	68fb      	ldr	r3, [r7, #12]
 801bf22:	895a      	ldrh	r2, [r3, #10]
 801bf24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bf26:	1ad3      	subs	r3, r2, r3
 801bf28:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801bf2a:	68fb      	ldr	r3, [r7, #12]
 801bf2c:	895b      	ldrh	r3, [r3, #10]
 801bf2e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801bf30:	429a      	cmp	r2, r3
 801bf32:	d906      	bls.n	801bf42 <ip4_frag+0x10e>
 801bf34:	4b5c      	ldr	r3, [pc, #368]	; (801c0a8 <ip4_frag+0x274>)
 801bf36:	f240 322d 	movw	r2, #813	; 0x32d
 801bf3a:	495f      	ldr	r1, [pc, #380]	; (801c0b8 <ip4_frag+0x284>)
 801bf3c:	485c      	ldr	r0, [pc, #368]	; (801c0b0 <ip4_frag+0x27c>)
 801bf3e:	f000 fdb9 	bl	801cab4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801bf42:	8bfa      	ldrh	r2, [r7, #30]
 801bf44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bf48:	4293      	cmp	r3, r2
 801bf4a:	bf28      	it	cs
 801bf4c:	4613      	movcs	r3, r2
 801bf4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801bf52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	d105      	bne.n	801bf66 <ip4_frag+0x132>
        poff = 0;
 801bf5a:	2300      	movs	r3, #0
 801bf5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801bf5e:	68fb      	ldr	r3, [r7, #12]
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	60fb      	str	r3, [r7, #12]
        continue;
 801bf64:	e041      	b.n	801bfea <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801bf66:	f7ff ff0d 	bl	801bd84 <ip_frag_alloc_pbuf_custom_ref>
 801bf6a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801bf6c:	69bb      	ldr	r3, [r7, #24]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d103      	bne.n	801bf7a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801bf72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bf74:	f7f6 fdea 	bl	8012b4c <pbuf_free>
        goto memerr;
 801bf78:	e08f      	b.n	801c09a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801bf7a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801bf7c:	68fb      	ldr	r3, [r7, #12]
 801bf7e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801bf80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bf82:	4413      	add	r3, r2
 801bf84:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801bf88:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801bf8c:	9201      	str	r2, [sp, #4]
 801bf8e:	9300      	str	r3, [sp, #0]
 801bf90:	4603      	mov	r3, r0
 801bf92:	2241      	movs	r2, #65	; 0x41
 801bf94:	2000      	movs	r0, #0
 801bf96:	f7f6 fc1f 	bl	80127d8 <pbuf_alloced_custom>
 801bf9a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801bf9c:	697b      	ldr	r3, [r7, #20]
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	d106      	bne.n	801bfb0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801bfa2:	69b8      	ldr	r0, [r7, #24]
 801bfa4:	f7ff fef6 	bl	801bd94 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801bfa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bfaa:	f7f6 fdcf 	bl	8012b4c <pbuf_free>
        goto memerr;
 801bfae:	e074      	b.n	801c09a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801bfb0:	68f8      	ldr	r0, [r7, #12]
 801bfb2:	f7f6 fe71 	bl	8012c98 <pbuf_ref>
      pcr->original = p;
 801bfb6:	69bb      	ldr	r3, [r7, #24]
 801bfb8:	68fa      	ldr	r2, [r7, #12]
 801bfba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801bfbc:	69bb      	ldr	r3, [r7, #24]
 801bfbe:	4a3f      	ldr	r2, [pc, #252]	; (801c0bc <ip4_frag+0x288>)
 801bfc0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801bfc2:	6979      	ldr	r1, [r7, #20]
 801bfc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bfc6:	f7f6 fe8f 	bl	8012ce8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801bfca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801bfce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bfd2:	1ad3      	subs	r3, r2, r3
 801bfd4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801bfd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d004      	beq.n	801bfea <ip4_frag+0x1b6>
        poff = 0;
 801bfe0:	2300      	movs	r3, #0
 801bfe2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801bfe4:	68fb      	ldr	r3, [r7, #12]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801bfea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	d196      	bne.n	801bf20 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801bff2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801bff4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bff8:	4413      	add	r3, r2
 801bffa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801bffc:	68bb      	ldr	r3, [r7, #8]
 801bffe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c000:	f1a3 0213 	sub.w	r2, r3, #19
 801c004:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c008:	429a      	cmp	r2, r3
 801c00a:	bfcc      	ite	gt
 801c00c:	2301      	movgt	r3, #1
 801c00e:	2300      	movle	r3, #0
 801c010:	b2db      	uxtb	r3, r3
 801c012:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c014:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c01c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801c01e:	6a3b      	ldr	r3, [r7, #32]
 801c020:	2b00      	cmp	r3, #0
 801c022:	d002      	beq.n	801c02a <ip4_frag+0x1f6>
 801c024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c026:	2b00      	cmp	r3, #0
 801c028:	d003      	beq.n	801c032 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c02a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c02c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c030:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c032:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c034:	4618      	mov	r0, r3
 801c036:	f7f5 fa41 	bl	80114bc <lwip_htons>
 801c03a:	4603      	mov	r3, r0
 801c03c:	461a      	mov	r2, r3
 801c03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c040:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c042:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c044:	3314      	adds	r3, #20
 801c046:	b29b      	uxth	r3, r3
 801c048:	4618      	mov	r0, r3
 801c04a:	f7f5 fa37 	bl	80114bc <lwip_htons>
 801c04e:	4603      	mov	r3, r0
 801c050:	461a      	mov	r2, r3
 801c052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c054:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c058:	2200      	movs	r2, #0
 801c05a:	729a      	strb	r2, [r3, #10]
 801c05c:	2200      	movs	r2, #0
 801c05e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c060:	68bb      	ldr	r3, [r7, #8]
 801c062:	695b      	ldr	r3, [r3, #20]
 801c064:	687a      	ldr	r2, [r7, #4]
 801c066:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c068:	68b8      	ldr	r0, [r7, #8]
 801c06a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c06c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c06e:	f7f6 fd6d 	bl	8012b4c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c072:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c076:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c078:	1ad3      	subs	r3, r2, r3
 801c07a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801c07e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801c082:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c084:	4413      	add	r3, r2
 801c086:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801c08a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c08e:	2b00      	cmp	r3, #0
 801c090:	f47f af19 	bne.w	801bec6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c094:	2300      	movs	r3, #0
 801c096:	e002      	b.n	801c09e <ip4_frag+0x26a>
      goto memerr;
 801c098:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c09a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c09e:	4618      	mov	r0, r3
 801c0a0:	3748      	adds	r7, #72	; 0x48
 801c0a2:	46bd      	mov	sp, r7
 801c0a4:	bd80      	pop	{r7, pc}
 801c0a6:	bf00      	nop
 801c0a8:	080212f8 	.word	0x080212f8
 801c0ac:	080214d4 	.word	0x080214d4
 801c0b0:	08021340 	.word	0x08021340
 801c0b4:	080214f0 	.word	0x080214f0
 801c0b8:	08021510 	.word	0x08021510
 801c0bc:	0801bdcd 	.word	0x0801bdcd

0801c0c0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c0c0:	b580      	push	{r7, lr}
 801c0c2:	b086      	sub	sp, #24
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	6078      	str	r0, [r7, #4]
 801c0c8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c0ca:	230e      	movs	r3, #14
 801c0cc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	895b      	ldrh	r3, [r3, #10]
 801c0d2:	2b0e      	cmp	r3, #14
 801c0d4:	d96e      	bls.n	801c1b4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	7bdb      	ldrb	r3, [r3, #15]
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	d106      	bne.n	801c0ec <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c0de:	683b      	ldr	r3, [r7, #0]
 801c0e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c0e4:	3301      	adds	r3, #1
 801c0e6:	b2da      	uxtb	r2, r3
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	685b      	ldr	r3, [r3, #4]
 801c0f0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c0f2:	693b      	ldr	r3, [r7, #16]
 801c0f4:	7b1a      	ldrb	r2, [r3, #12]
 801c0f6:	7b5b      	ldrb	r3, [r3, #13]
 801c0f8:	021b      	lsls	r3, r3, #8
 801c0fa:	4313      	orrs	r3, r2
 801c0fc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c0fe:	693b      	ldr	r3, [r7, #16]
 801c100:	781b      	ldrb	r3, [r3, #0]
 801c102:	f003 0301 	and.w	r3, r3, #1
 801c106:	2b00      	cmp	r3, #0
 801c108:	d023      	beq.n	801c152 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c10a:	693b      	ldr	r3, [r7, #16]
 801c10c:	781b      	ldrb	r3, [r3, #0]
 801c10e:	2b01      	cmp	r3, #1
 801c110:	d10f      	bne.n	801c132 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c112:	693b      	ldr	r3, [r7, #16]
 801c114:	785b      	ldrb	r3, [r3, #1]
 801c116:	2b00      	cmp	r3, #0
 801c118:	d11b      	bne.n	801c152 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c11a:	693b      	ldr	r3, [r7, #16]
 801c11c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c11e:	2b5e      	cmp	r3, #94	; 0x5e
 801c120:	d117      	bne.n	801c152 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	7b5b      	ldrb	r3, [r3, #13]
 801c126:	f043 0310 	orr.w	r3, r3, #16
 801c12a:	b2da      	uxtb	r2, r3
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	735a      	strb	r2, [r3, #13]
 801c130:	e00f      	b.n	801c152 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c132:	693b      	ldr	r3, [r7, #16]
 801c134:	2206      	movs	r2, #6
 801c136:	4928      	ldr	r1, [pc, #160]	; (801c1d8 <ethernet_input+0x118>)
 801c138:	4618      	mov	r0, r3
 801c13a:	f000 fb9b 	bl	801c874 <memcmp>
 801c13e:	4603      	mov	r3, r0
 801c140:	2b00      	cmp	r3, #0
 801c142:	d106      	bne.n	801c152 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	7b5b      	ldrb	r3, [r3, #13]
 801c148:	f043 0308 	orr.w	r3, r3, #8
 801c14c:	b2da      	uxtb	r2, r3
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c152:	89fb      	ldrh	r3, [r7, #14]
 801c154:	2b08      	cmp	r3, #8
 801c156:	d003      	beq.n	801c160 <ethernet_input+0xa0>
 801c158:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801c15c:	d014      	beq.n	801c188 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c15e:	e032      	b.n	801c1c6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c160:	683b      	ldr	r3, [r7, #0]
 801c162:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c166:	f003 0308 	and.w	r3, r3, #8
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	d024      	beq.n	801c1b8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c16e:	8afb      	ldrh	r3, [r7, #22]
 801c170:	4619      	mov	r1, r3
 801c172:	6878      	ldr	r0, [r7, #4]
 801c174:	f7f6 fc64 	bl	8012a40 <pbuf_remove_header>
 801c178:	4603      	mov	r3, r0
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d11e      	bne.n	801c1bc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c17e:	6839      	ldr	r1, [r7, #0]
 801c180:	6878      	ldr	r0, [r7, #4]
 801c182:	f7fe ff21 	bl	801afc8 <ip4_input>
      break;
 801c186:	e013      	b.n	801c1b0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c188:	683b      	ldr	r3, [r7, #0]
 801c18a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c18e:	f003 0308 	and.w	r3, r3, #8
 801c192:	2b00      	cmp	r3, #0
 801c194:	d014      	beq.n	801c1c0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c196:	8afb      	ldrh	r3, [r7, #22]
 801c198:	4619      	mov	r1, r3
 801c19a:	6878      	ldr	r0, [r7, #4]
 801c19c:	f7f6 fc50 	bl	8012a40 <pbuf_remove_header>
 801c1a0:	4603      	mov	r3, r0
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d10e      	bne.n	801c1c4 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c1a6:	6839      	ldr	r1, [r7, #0]
 801c1a8:	6878      	ldr	r0, [r7, #4]
 801c1aa:	f7fe f8c1 	bl	801a330 <etharp_input>
      break;
 801c1ae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c1b0:	2300      	movs	r3, #0
 801c1b2:	e00c      	b.n	801c1ce <ethernet_input+0x10e>
    goto free_and_return;
 801c1b4:	bf00      	nop
 801c1b6:	e006      	b.n	801c1c6 <ethernet_input+0x106>
        goto free_and_return;
 801c1b8:	bf00      	nop
 801c1ba:	e004      	b.n	801c1c6 <ethernet_input+0x106>
        goto free_and_return;
 801c1bc:	bf00      	nop
 801c1be:	e002      	b.n	801c1c6 <ethernet_input+0x106>
        goto free_and_return;
 801c1c0:	bf00      	nop
 801c1c2:	e000      	b.n	801c1c6 <ethernet_input+0x106>
        goto free_and_return;
 801c1c4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c1c6:	6878      	ldr	r0, [r7, #4]
 801c1c8:	f7f6 fcc0 	bl	8012b4c <pbuf_free>
  return ERR_OK;
 801c1cc:	2300      	movs	r3, #0
}
 801c1ce:	4618      	mov	r0, r3
 801c1d0:	3718      	adds	r7, #24
 801c1d2:	46bd      	mov	sp, r7
 801c1d4:	bd80      	pop	{r7, pc}
 801c1d6:	bf00      	nop
 801c1d8:	080216ec 	.word	0x080216ec

0801c1dc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c1dc:	b580      	push	{r7, lr}
 801c1de:	b086      	sub	sp, #24
 801c1e0:	af00      	add	r7, sp, #0
 801c1e2:	60f8      	str	r0, [r7, #12]
 801c1e4:	60b9      	str	r1, [r7, #8]
 801c1e6:	607a      	str	r2, [r7, #4]
 801c1e8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c1ea:	8c3b      	ldrh	r3, [r7, #32]
 801c1ec:	4618      	mov	r0, r3
 801c1ee:	f7f5 f965 	bl	80114bc <lwip_htons>
 801c1f2:	4603      	mov	r3, r0
 801c1f4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c1f6:	210e      	movs	r1, #14
 801c1f8:	68b8      	ldr	r0, [r7, #8]
 801c1fa:	f7f6 fc11 	bl	8012a20 <pbuf_add_header>
 801c1fe:	4603      	mov	r3, r0
 801c200:	2b00      	cmp	r3, #0
 801c202:	d125      	bne.n	801c250 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c204:	68bb      	ldr	r3, [r7, #8]
 801c206:	685b      	ldr	r3, [r3, #4]
 801c208:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c20a:	693b      	ldr	r3, [r7, #16]
 801c20c:	8afa      	ldrh	r2, [r7, #22]
 801c20e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c210:	693b      	ldr	r3, [r7, #16]
 801c212:	2206      	movs	r2, #6
 801c214:	6839      	ldr	r1, [r7, #0]
 801c216:	4618      	mov	r0, r3
 801c218:	f000 fb3c 	bl	801c894 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c21c:	693b      	ldr	r3, [r7, #16]
 801c21e:	3306      	adds	r3, #6
 801c220:	2206      	movs	r2, #6
 801c222:	6879      	ldr	r1, [r7, #4]
 801c224:	4618      	mov	r0, r3
 801c226:	f000 fb35 	bl	801c894 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c22a:	68fb      	ldr	r3, [r7, #12]
 801c22c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c230:	2b06      	cmp	r3, #6
 801c232:	d006      	beq.n	801c242 <ethernet_output+0x66>
 801c234:	4b0a      	ldr	r3, [pc, #40]	; (801c260 <ethernet_output+0x84>)
 801c236:	f44f 7299 	mov.w	r2, #306	; 0x132
 801c23a:	490a      	ldr	r1, [pc, #40]	; (801c264 <ethernet_output+0x88>)
 801c23c:	480a      	ldr	r0, [pc, #40]	; (801c268 <ethernet_output+0x8c>)
 801c23e:	f000 fc39 	bl	801cab4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	699b      	ldr	r3, [r3, #24]
 801c246:	68b9      	ldr	r1, [r7, #8]
 801c248:	68f8      	ldr	r0, [r7, #12]
 801c24a:	4798      	blx	r3
 801c24c:	4603      	mov	r3, r0
 801c24e:	e002      	b.n	801c256 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c250:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c252:	f06f 0301 	mvn.w	r3, #1
}
 801c256:	4618      	mov	r0, r3
 801c258:	3718      	adds	r7, #24
 801c25a:	46bd      	mov	sp, r7
 801c25c:	bd80      	pop	{r7, pc}
 801c25e:	bf00      	nop
 801c260:	08021520 	.word	0x08021520
 801c264:	08021558 	.word	0x08021558
 801c268:	0802158c 	.word	0x0802158c

0801c26c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c26c:	b580      	push	{r7, lr}
 801c26e:	b086      	sub	sp, #24
 801c270:	af00      	add	r7, sp, #0
 801c272:	6078      	str	r0, [r7, #4]
 801c274:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801c276:	683b      	ldr	r3, [r7, #0]
 801c278:	60bb      	str	r3, [r7, #8]
 801c27a:	2304      	movs	r3, #4
 801c27c:	60fb      	str	r3, [r7, #12]
 801c27e:	2300      	movs	r3, #0
 801c280:	613b      	str	r3, [r7, #16]
 801c282:	2300      	movs	r3, #0
 801c284:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c286:	f107 0308 	add.w	r3, r7, #8
 801c28a:	2100      	movs	r1, #0
 801c28c:	4618      	mov	r0, r3
 801c28e:	f7f0 f97c 	bl	800c58a <osMessageCreate>
 801c292:	4602      	mov	r2, r0
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	681b      	ldr	r3, [r3, #0]
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d102      	bne.n	801c2a6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801c2a0:	f04f 33ff 	mov.w	r3, #4294967295
 801c2a4:	e000      	b.n	801c2a8 <sys_mbox_new+0x3c>

  return ERR_OK;
 801c2a6:	2300      	movs	r3, #0
}
 801c2a8:	4618      	mov	r0, r3
 801c2aa:	3718      	adds	r7, #24
 801c2ac:	46bd      	mov	sp, r7
 801c2ae:	bd80      	pop	{r7, pc}

0801c2b0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c2b0:	b580      	push	{r7, lr}
 801c2b2:	b082      	sub	sp, #8
 801c2b4:	af00      	add	r7, sp, #0
 801c2b6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	4618      	mov	r0, r3
 801c2be:	f7f0 fb76 	bl	800c9ae <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	4618      	mov	r0, r3
 801c2c8:	f7f0 fb87 	bl	800c9da <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801c2cc:	bf00      	nop
 801c2ce:	3708      	adds	r7, #8
 801c2d0:	46bd      	mov	sp, r7
 801c2d2:	bd80      	pop	{r7, pc}

0801c2d4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c2d4:	b580      	push	{r7, lr}
 801c2d6:	b084      	sub	sp, #16
 801c2d8:	af00      	add	r7, sp, #0
 801c2da:	6078      	str	r0, [r7, #4]
 801c2dc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	681b      	ldr	r3, [r3, #0]
 801c2e2:	6839      	ldr	r1, [r7, #0]
 801c2e4:	2200      	movs	r2, #0
 801c2e6:	4618      	mov	r0, r3
 801c2e8:	f7f0 f978 	bl	800c5dc <osMessagePut>
 801c2ec:	4603      	mov	r3, r0
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d102      	bne.n	801c2f8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801c2f2:	2300      	movs	r3, #0
 801c2f4:	73fb      	strb	r3, [r7, #15]
 801c2f6:	e001      	b.n	801c2fc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c2f8:	23ff      	movs	r3, #255	; 0xff
 801c2fa:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c2fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c300:	4618      	mov	r0, r3
 801c302:	3710      	adds	r7, #16
 801c304:	46bd      	mov	sp, r7
 801c306:	bd80      	pop	{r7, pc}

0801c308 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c308:	b580      	push	{r7, lr}
 801c30a:	b08c      	sub	sp, #48	; 0x30
 801c30c:	af00      	add	r7, sp, #0
 801c30e:	61f8      	str	r0, [r7, #28]
 801c310:	61b9      	str	r1, [r7, #24]
 801c312:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801c314:	f7ef fe63 	bl	800bfde <osKernelSysTick>
 801c318:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c31a:	697b      	ldr	r3, [r7, #20]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d017      	beq.n	801c350 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801c320:	69fb      	ldr	r3, [r7, #28]
 801c322:	6819      	ldr	r1, [r3, #0]
 801c324:	f107 0320 	add.w	r3, r7, #32
 801c328:	697a      	ldr	r2, [r7, #20]
 801c32a:	4618      	mov	r0, r3
 801c32c:	f7f0 f996 	bl	800c65c <osMessageGet>

    if(event.status == osEventMessage)
 801c330:	6a3b      	ldr	r3, [r7, #32]
 801c332:	2b10      	cmp	r3, #16
 801c334:	d109      	bne.n	801c34a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801c336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c338:	461a      	mov	r2, r3
 801c33a:	69bb      	ldr	r3, [r7, #24]
 801c33c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801c33e:	f7ef fe4e 	bl	800bfde <osKernelSysTick>
 801c342:	4602      	mov	r2, r0
 801c344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c346:	1ad3      	subs	r3, r2, r3
 801c348:	e019      	b.n	801c37e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c34a:	f04f 33ff 	mov.w	r3, #4294967295
 801c34e:	e016      	b.n	801c37e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801c350:	69fb      	ldr	r3, [r7, #28]
 801c352:	6819      	ldr	r1, [r3, #0]
 801c354:	463b      	mov	r3, r7
 801c356:	f04f 32ff 	mov.w	r2, #4294967295
 801c35a:	4618      	mov	r0, r3
 801c35c:	f7f0 f97e 	bl	800c65c <osMessageGet>
 801c360:	f107 0320 	add.w	r3, r7, #32
 801c364:	463a      	mov	r2, r7
 801c366:	ca07      	ldmia	r2, {r0, r1, r2}
 801c368:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c36e:	461a      	mov	r2, r3
 801c370:	69bb      	ldr	r3, [r7, #24]
 801c372:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801c374:	f7ef fe33 	bl	800bfde <osKernelSysTick>
 801c378:	4602      	mov	r2, r0
 801c37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c37c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c37e:	4618      	mov	r0, r3
 801c380:	3730      	adds	r7, #48	; 0x30
 801c382:	46bd      	mov	sp, r7
 801c384:	bd80      	pop	{r7, pc}

0801c386 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c386:	b580      	push	{r7, lr}
 801c388:	b086      	sub	sp, #24
 801c38a:	af00      	add	r7, sp, #0
 801c38c:	6078      	str	r0, [r7, #4]
 801c38e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	6819      	ldr	r1, [r3, #0]
 801c394:	f107 030c 	add.w	r3, r7, #12
 801c398:	2200      	movs	r2, #0
 801c39a:	4618      	mov	r0, r3
 801c39c:	f7f0 f95e 	bl	800c65c <osMessageGet>

  if(event.status == osEventMessage)
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	2b10      	cmp	r3, #16
 801c3a4:	d105      	bne.n	801c3b2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801c3a6:	693b      	ldr	r3, [r7, #16]
 801c3a8:	461a      	mov	r2, r3
 801c3aa:	683b      	ldr	r3, [r7, #0]
 801c3ac:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801c3ae:	2300      	movs	r3, #0
 801c3b0:	e001      	b.n	801c3b6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c3b2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801c3b6:	4618      	mov	r0, r3
 801c3b8:	3718      	adds	r7, #24
 801c3ba:	46bd      	mov	sp, r7
 801c3bc:	bd80      	pop	{r7, pc}

0801c3be <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c3be:	b480      	push	{r7}
 801c3c0:	b083      	sub	sp, #12
 801c3c2:	af00      	add	r7, sp, #0
 801c3c4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	681b      	ldr	r3, [r3, #0]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d101      	bne.n	801c3d2 <sys_mbox_valid+0x14>
    return 0;
 801c3ce:	2300      	movs	r3, #0
 801c3d0:	e000      	b.n	801c3d4 <sys_mbox_valid+0x16>
  else
    return 1;
 801c3d2:	2301      	movs	r3, #1
}
 801c3d4:	4618      	mov	r0, r3
 801c3d6:	370c      	adds	r7, #12
 801c3d8:	46bd      	mov	sp, r7
 801c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3de:	4770      	bx	lr

0801c3e0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801c3e0:	b480      	push	{r7}
 801c3e2:	b083      	sub	sp, #12
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	2200      	movs	r2, #0
 801c3ec:	601a      	str	r2, [r3, #0]
}
 801c3ee:	bf00      	nop
 801c3f0:	370c      	adds	r7, #12
 801c3f2:	46bd      	mov	sp, r7
 801c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3f8:	4770      	bx	lr

0801c3fa <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c3fa:	b580      	push	{r7, lr}
 801c3fc:	b084      	sub	sp, #16
 801c3fe:	af00      	add	r7, sp, #0
 801c400:	6078      	str	r0, [r7, #4]
 801c402:	460b      	mov	r3, r1
 801c404:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801c406:	2300      	movs	r3, #0
 801c408:	60bb      	str	r3, [r7, #8]
 801c40a:	2300      	movs	r3, #0
 801c40c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801c40e:	f107 0308 	add.w	r3, r7, #8
 801c412:	2101      	movs	r1, #1
 801c414:	4618      	mov	r0, r3
 801c416:	f7ef feef 	bl	800c1f8 <osSemaphoreCreate>
 801c41a:	4602      	mov	r2, r0
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	681b      	ldr	r3, [r3, #0]
 801c424:	2b00      	cmp	r3, #0
 801c426:	d102      	bne.n	801c42e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c428:	f04f 33ff 	mov.w	r3, #4294967295
 801c42c:	e009      	b.n	801c442 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801c42e:	78fb      	ldrb	r3, [r7, #3]
 801c430:	2b00      	cmp	r3, #0
 801c432:	d105      	bne.n	801c440 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	2100      	movs	r1, #0
 801c43a:	4618      	mov	r0, r3
 801c43c:	f7ef ff0e 	bl	800c25c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801c440:	2300      	movs	r3, #0
}
 801c442:	4618      	mov	r0, r3
 801c444:	3710      	adds	r7, #16
 801c446:	46bd      	mov	sp, r7
 801c448:	bd80      	pop	{r7, pc}

0801c44a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c44a:	b580      	push	{r7, lr}
 801c44c:	b084      	sub	sp, #16
 801c44e:	af00      	add	r7, sp, #0
 801c450:	6078      	str	r0, [r7, #4]
 801c452:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801c454:	f7ef fdc3 	bl	800bfde <osKernelSysTick>
 801c458:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c45a:	683b      	ldr	r3, [r7, #0]
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d011      	beq.n	801c484 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	6839      	ldr	r1, [r7, #0]
 801c466:	4618      	mov	r0, r3
 801c468:	f7ef fef8 	bl	800c25c <osSemaphoreWait>
 801c46c:	4603      	mov	r3, r0
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d105      	bne.n	801c47e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801c472:	f7ef fdb4 	bl	800bfde <osKernelSysTick>
 801c476:	4602      	mov	r2, r0
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	1ad3      	subs	r3, r2, r3
 801c47c:	e012      	b.n	801c4a4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c47e:	f04f 33ff 	mov.w	r3, #4294967295
 801c482:	e00f      	b.n	801c4a4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801c484:	bf00      	nop
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	f04f 31ff 	mov.w	r1, #4294967295
 801c48e:	4618      	mov	r0, r3
 801c490:	f7ef fee4 	bl	800c25c <osSemaphoreWait>
 801c494:	4603      	mov	r3, r0
 801c496:	2b00      	cmp	r3, #0
 801c498:	d1f5      	bne.n	801c486 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801c49a:	f7ef fda0 	bl	800bfde <osKernelSysTick>
 801c49e:	4602      	mov	r2, r0
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c4a4:	4618      	mov	r0, r3
 801c4a6:	3710      	adds	r7, #16
 801c4a8:	46bd      	mov	sp, r7
 801c4aa:	bd80      	pop	{r7, pc}

0801c4ac <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c4ac:	b580      	push	{r7, lr}
 801c4ae:	b082      	sub	sp, #8
 801c4b0:	af00      	add	r7, sp, #0
 801c4b2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	4618      	mov	r0, r3
 801c4ba:	f7ef ff1d 	bl	800c2f8 <osSemaphoreRelease>
}
 801c4be:	bf00      	nop
 801c4c0:	3708      	adds	r7, #8
 801c4c2:	46bd      	mov	sp, r7
 801c4c4:	bd80      	pop	{r7, pc}

0801c4c6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c4c6:	b580      	push	{r7, lr}
 801c4c8:	b082      	sub	sp, #8
 801c4ca:	af00      	add	r7, sp, #0
 801c4cc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	4618      	mov	r0, r3
 801c4d4:	f7ef ff46 	bl	800c364 <osSemaphoreDelete>
}
 801c4d8:	bf00      	nop
 801c4da:	3708      	adds	r7, #8
 801c4dc:	46bd      	mov	sp, r7
 801c4de:	bd80      	pop	{r7, pc}

0801c4e0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801c4e0:	b480      	push	{r7}
 801c4e2:	b083      	sub	sp, #12
 801c4e4:	af00      	add	r7, sp, #0
 801c4e6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d101      	bne.n	801c4f4 <sys_sem_valid+0x14>
    return 0;
 801c4f0:	2300      	movs	r3, #0
 801c4f2:	e000      	b.n	801c4f6 <sys_sem_valid+0x16>
  else
    return 1;
 801c4f4:	2301      	movs	r3, #1
}
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	370c      	adds	r7, #12
 801c4fa:	46bd      	mov	sp, r7
 801c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c500:	4770      	bx	lr

0801c502 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801c502:	b480      	push	{r7}
 801c504:	b083      	sub	sp, #12
 801c506:	af00      	add	r7, sp, #0
 801c508:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	2200      	movs	r2, #0
 801c50e:	601a      	str	r2, [r3, #0]
}
 801c510:	bf00      	nop
 801c512:	370c      	adds	r7, #12
 801c514:	46bd      	mov	sp, r7
 801c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c51a:	4770      	bx	lr

0801c51c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c51c:	b580      	push	{r7, lr}
 801c51e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c520:	4803      	ldr	r0, [pc, #12]	; (801c530 <sys_init+0x14>)
 801c522:	f7ef fdcc 	bl	800c0be <osMutexCreate>
 801c526:	4603      	mov	r3, r0
 801c528:	4a02      	ldr	r2, [pc, #8]	; (801c534 <sys_init+0x18>)
 801c52a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801c52c:	bf00      	nop
 801c52e:	bd80      	pop	{r7, pc}
 801c530:	080216fc 	.word	0x080216fc
 801c534:	2000dee8 	.word	0x2000dee8

0801c538 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c538:	b580      	push	{r7, lr}
 801c53a:	b084      	sub	sp, #16
 801c53c:	af00      	add	r7, sp, #0
 801c53e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801c540:	2300      	movs	r3, #0
 801c542:	60bb      	str	r3, [r7, #8]
 801c544:	2300      	movs	r3, #0
 801c546:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c548:	f107 0308 	add.w	r3, r7, #8
 801c54c:	4618      	mov	r0, r3
 801c54e:	f7ef fdb6 	bl	800c0be <osMutexCreate>
 801c552:	4602      	mov	r2, r0
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d102      	bne.n	801c566 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c560:	f04f 33ff 	mov.w	r3, #4294967295
 801c564:	e000      	b.n	801c568 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c566:	2300      	movs	r3, #0
}
 801c568:	4618      	mov	r0, r3
 801c56a:	3710      	adds	r7, #16
 801c56c:	46bd      	mov	sp, r7
 801c56e:	bd80      	pop	{r7, pc}

0801c570 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c570:	b580      	push	{r7, lr}
 801c572:	b082      	sub	sp, #8
 801c574:	af00      	add	r7, sp, #0
 801c576:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	f04f 31ff 	mov.w	r1, #4294967295
 801c580:	4618      	mov	r0, r3
 801c582:	f7ef fdb5 	bl	800c0f0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801c586:	bf00      	nop
 801c588:	3708      	adds	r7, #8
 801c58a:	46bd      	mov	sp, r7
 801c58c:	bd80      	pop	{r7, pc}

0801c58e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c58e:	b580      	push	{r7, lr}
 801c590:	b082      	sub	sp, #8
 801c592:	af00      	add	r7, sp, #0
 801c594:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	4618      	mov	r0, r3
 801c59c:	f7ef fdf6 	bl	800c18c <osMutexRelease>
}
 801c5a0:	bf00      	nop
 801c5a2:	3708      	adds	r7, #8
 801c5a4:	46bd      	mov	sp, r7
 801c5a6:	bd80      	pop	{r7, pc}

0801c5a8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	b08c      	sub	sp, #48	; 0x30
 801c5ac:	af00      	add	r7, sp, #0
 801c5ae:	60f8      	str	r0, [r7, #12]
 801c5b0:	60b9      	str	r1, [r7, #8]
 801c5b2:	607a      	str	r2, [r7, #4]
 801c5b4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c5b6:	f107 0314 	add.w	r3, r7, #20
 801c5ba:	2200      	movs	r2, #0
 801c5bc:	601a      	str	r2, [r3, #0]
 801c5be:	605a      	str	r2, [r3, #4]
 801c5c0:	609a      	str	r2, [r3, #8]
 801c5c2:	60da      	str	r2, [r3, #12]
 801c5c4:	611a      	str	r2, [r3, #16]
 801c5c6:	615a      	str	r2, [r3, #20]
 801c5c8:	619a      	str	r2, [r3, #24]
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	617b      	str	r3, [r7, #20]
 801c5ce:	68bb      	ldr	r3, [r7, #8]
 801c5d0:	61bb      	str	r3, [r7, #24]
 801c5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5d4:	b21b      	sxth	r3, r3
 801c5d6:	83bb      	strh	r3, [r7, #28]
 801c5d8:	683b      	ldr	r3, [r7, #0]
 801c5da:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801c5dc:	f107 0314 	add.w	r3, r7, #20
 801c5e0:	6879      	ldr	r1, [r7, #4]
 801c5e2:	4618      	mov	r0, r3
 801c5e4:	f7ef fd0b 	bl	800bffe <osThreadCreate>
 801c5e8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801c5ea:	4618      	mov	r0, r3
 801c5ec:	3730      	adds	r7, #48	; 0x30
 801c5ee:	46bd      	mov	sp, r7
 801c5f0:	bd80      	pop	{r7, pc}
	...

0801c5f4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c5f4:	b580      	push	{r7, lr}
 801c5f6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801c5f8:	4b04      	ldr	r3, [pc, #16]	; (801c60c <sys_arch_protect+0x18>)
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	f04f 31ff 	mov.w	r1, #4294967295
 801c600:	4618      	mov	r0, r3
 801c602:	f7ef fd75 	bl	800c0f0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801c606:	2301      	movs	r3, #1
}
 801c608:	4618      	mov	r0, r3
 801c60a:	bd80      	pop	{r7, pc}
 801c60c:	2000dee8 	.word	0x2000dee8

0801c610 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c610:	b580      	push	{r7, lr}
 801c612:	b082      	sub	sp, #8
 801c614:	af00      	add	r7, sp, #0
 801c616:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c618:	4b04      	ldr	r3, [pc, #16]	; (801c62c <sys_arch_unprotect+0x1c>)
 801c61a:	681b      	ldr	r3, [r3, #0]
 801c61c:	4618      	mov	r0, r3
 801c61e:	f7ef fdb5 	bl	800c18c <osMutexRelease>
}
 801c622:	bf00      	nop
 801c624:	3708      	adds	r7, #8
 801c626:	46bd      	mov	sp, r7
 801c628:	bd80      	pop	{r7, pc}
 801c62a:	bf00      	nop
 801c62c:	2000dee8 	.word	0x2000dee8

0801c630 <std>:
 801c630:	2300      	movs	r3, #0
 801c632:	b510      	push	{r4, lr}
 801c634:	4604      	mov	r4, r0
 801c636:	e9c0 3300 	strd	r3, r3, [r0]
 801c63a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c63e:	6083      	str	r3, [r0, #8]
 801c640:	8181      	strh	r1, [r0, #12]
 801c642:	6643      	str	r3, [r0, #100]	; 0x64
 801c644:	81c2      	strh	r2, [r0, #14]
 801c646:	6183      	str	r3, [r0, #24]
 801c648:	4619      	mov	r1, r3
 801c64a:	2208      	movs	r2, #8
 801c64c:	305c      	adds	r0, #92	; 0x5c
 801c64e:	f000 f949 	bl	801c8e4 <memset>
 801c652:	4b05      	ldr	r3, [pc, #20]	; (801c668 <std+0x38>)
 801c654:	6263      	str	r3, [r4, #36]	; 0x24
 801c656:	4b05      	ldr	r3, [pc, #20]	; (801c66c <std+0x3c>)
 801c658:	62a3      	str	r3, [r4, #40]	; 0x28
 801c65a:	4b05      	ldr	r3, [pc, #20]	; (801c670 <std+0x40>)
 801c65c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c65e:	4b05      	ldr	r3, [pc, #20]	; (801c674 <std+0x44>)
 801c660:	6224      	str	r4, [r4, #32]
 801c662:	6323      	str	r3, [r4, #48]	; 0x30
 801c664:	bd10      	pop	{r4, pc}
 801c666:	bf00      	nop
 801c668:	0801cc95 	.word	0x0801cc95
 801c66c:	0801ccb7 	.word	0x0801ccb7
 801c670:	0801ccef 	.word	0x0801ccef
 801c674:	0801cd13 	.word	0x0801cd13

0801c678 <_cleanup_r>:
 801c678:	4901      	ldr	r1, [pc, #4]	; (801c680 <_cleanup_r+0x8>)
 801c67a:	f000 b8af 	b.w	801c7dc <_fwalk_reent>
 801c67e:	bf00      	nop
 801c680:	0801cef5 	.word	0x0801cef5

0801c684 <__sfmoreglue>:
 801c684:	b570      	push	{r4, r5, r6, lr}
 801c686:	2268      	movs	r2, #104	; 0x68
 801c688:	1e4d      	subs	r5, r1, #1
 801c68a:	4355      	muls	r5, r2
 801c68c:	460e      	mov	r6, r1
 801c68e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c692:	f000 f99b 	bl	801c9cc <_malloc_r>
 801c696:	4604      	mov	r4, r0
 801c698:	b140      	cbz	r0, 801c6ac <__sfmoreglue+0x28>
 801c69a:	2100      	movs	r1, #0
 801c69c:	e9c0 1600 	strd	r1, r6, [r0]
 801c6a0:	300c      	adds	r0, #12
 801c6a2:	60a0      	str	r0, [r4, #8]
 801c6a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c6a8:	f000 f91c 	bl	801c8e4 <memset>
 801c6ac:	4620      	mov	r0, r4
 801c6ae:	bd70      	pop	{r4, r5, r6, pc}

0801c6b0 <__sfp_lock_acquire>:
 801c6b0:	4801      	ldr	r0, [pc, #4]	; (801c6b8 <__sfp_lock_acquire+0x8>)
 801c6b2:	f7e8 be3b 	b.w	800532c <__retarget_lock_acquire_recursive>
 801c6b6:	bf00      	nop
 801c6b8:	20001024 	.word	0x20001024

0801c6bc <__sfp_lock_release>:
 801c6bc:	4801      	ldr	r0, [pc, #4]	; (801c6c4 <__sfp_lock_release+0x8>)
 801c6be:	f7e8 be49 	b.w	8005354 <__retarget_lock_release_recursive>
 801c6c2:	bf00      	nop
 801c6c4:	20001024 	.word	0x20001024

0801c6c8 <__sinit_lock_acquire>:
 801c6c8:	4801      	ldr	r0, [pc, #4]	; (801c6d0 <__sinit_lock_acquire+0x8>)
 801c6ca:	f7e8 be2f 	b.w	800532c <__retarget_lock_acquire_recursive>
 801c6ce:	bf00      	nop
 801c6d0:	20001018 	.word	0x20001018

0801c6d4 <__sinit_lock_release>:
 801c6d4:	4801      	ldr	r0, [pc, #4]	; (801c6dc <__sinit_lock_release+0x8>)
 801c6d6:	f7e8 be3d 	b.w	8005354 <__retarget_lock_release_recursive>
 801c6da:	bf00      	nop
 801c6dc:	20001018 	.word	0x20001018

0801c6e0 <__sinit>:
 801c6e0:	b510      	push	{r4, lr}
 801c6e2:	4604      	mov	r4, r0
 801c6e4:	f7ff fff0 	bl	801c6c8 <__sinit_lock_acquire>
 801c6e8:	69a3      	ldr	r3, [r4, #24]
 801c6ea:	b11b      	cbz	r3, 801c6f4 <__sinit+0x14>
 801c6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c6f0:	f7ff bff0 	b.w	801c6d4 <__sinit_lock_release>
 801c6f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c6f8:	6523      	str	r3, [r4, #80]	; 0x50
 801c6fa:	4b13      	ldr	r3, [pc, #76]	; (801c748 <__sinit+0x68>)
 801c6fc:	4a13      	ldr	r2, [pc, #76]	; (801c74c <__sinit+0x6c>)
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	62a2      	str	r2, [r4, #40]	; 0x28
 801c702:	42a3      	cmp	r3, r4
 801c704:	bf04      	itt	eq
 801c706:	2301      	moveq	r3, #1
 801c708:	61a3      	streq	r3, [r4, #24]
 801c70a:	4620      	mov	r0, r4
 801c70c:	f000 f820 	bl	801c750 <__sfp>
 801c710:	6060      	str	r0, [r4, #4]
 801c712:	4620      	mov	r0, r4
 801c714:	f000 f81c 	bl	801c750 <__sfp>
 801c718:	60a0      	str	r0, [r4, #8]
 801c71a:	4620      	mov	r0, r4
 801c71c:	f000 f818 	bl	801c750 <__sfp>
 801c720:	2200      	movs	r2, #0
 801c722:	60e0      	str	r0, [r4, #12]
 801c724:	2104      	movs	r1, #4
 801c726:	6860      	ldr	r0, [r4, #4]
 801c728:	f7ff ff82 	bl	801c630 <std>
 801c72c:	68a0      	ldr	r0, [r4, #8]
 801c72e:	2201      	movs	r2, #1
 801c730:	2109      	movs	r1, #9
 801c732:	f7ff ff7d 	bl	801c630 <std>
 801c736:	68e0      	ldr	r0, [r4, #12]
 801c738:	2202      	movs	r2, #2
 801c73a:	2112      	movs	r1, #18
 801c73c:	f7ff ff78 	bl	801c630 <std>
 801c740:	2301      	movs	r3, #1
 801c742:	61a3      	str	r3, [r4, #24]
 801c744:	e7d2      	b.n	801c6ec <__sinit+0xc>
 801c746:	bf00      	nop
 801c748:	08021764 	.word	0x08021764
 801c74c:	0801c679 	.word	0x0801c679

0801c750 <__sfp>:
 801c750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c752:	4607      	mov	r7, r0
 801c754:	f7ff ffac 	bl	801c6b0 <__sfp_lock_acquire>
 801c758:	4b1e      	ldr	r3, [pc, #120]	; (801c7d4 <__sfp+0x84>)
 801c75a:	681e      	ldr	r6, [r3, #0]
 801c75c:	69b3      	ldr	r3, [r6, #24]
 801c75e:	b913      	cbnz	r3, 801c766 <__sfp+0x16>
 801c760:	4630      	mov	r0, r6
 801c762:	f7ff ffbd 	bl	801c6e0 <__sinit>
 801c766:	3648      	adds	r6, #72	; 0x48
 801c768:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c76c:	3b01      	subs	r3, #1
 801c76e:	d503      	bpl.n	801c778 <__sfp+0x28>
 801c770:	6833      	ldr	r3, [r6, #0]
 801c772:	b30b      	cbz	r3, 801c7b8 <__sfp+0x68>
 801c774:	6836      	ldr	r6, [r6, #0]
 801c776:	e7f7      	b.n	801c768 <__sfp+0x18>
 801c778:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c77c:	b9d5      	cbnz	r5, 801c7b4 <__sfp+0x64>
 801c77e:	4b16      	ldr	r3, [pc, #88]	; (801c7d8 <__sfp+0x88>)
 801c780:	60e3      	str	r3, [r4, #12]
 801c782:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c786:	6665      	str	r5, [r4, #100]	; 0x64
 801c788:	f7e8 fdaa 	bl	80052e0 <__retarget_lock_init_recursive>
 801c78c:	f7ff ff96 	bl	801c6bc <__sfp_lock_release>
 801c790:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c794:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c798:	6025      	str	r5, [r4, #0]
 801c79a:	61a5      	str	r5, [r4, #24]
 801c79c:	2208      	movs	r2, #8
 801c79e:	4629      	mov	r1, r5
 801c7a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c7a4:	f000 f89e 	bl	801c8e4 <memset>
 801c7a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c7ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c7b0:	4620      	mov	r0, r4
 801c7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7b4:	3468      	adds	r4, #104	; 0x68
 801c7b6:	e7d9      	b.n	801c76c <__sfp+0x1c>
 801c7b8:	2104      	movs	r1, #4
 801c7ba:	4638      	mov	r0, r7
 801c7bc:	f7ff ff62 	bl	801c684 <__sfmoreglue>
 801c7c0:	4604      	mov	r4, r0
 801c7c2:	6030      	str	r0, [r6, #0]
 801c7c4:	2800      	cmp	r0, #0
 801c7c6:	d1d5      	bne.n	801c774 <__sfp+0x24>
 801c7c8:	f7ff ff78 	bl	801c6bc <__sfp_lock_release>
 801c7cc:	230c      	movs	r3, #12
 801c7ce:	603b      	str	r3, [r7, #0]
 801c7d0:	e7ee      	b.n	801c7b0 <__sfp+0x60>
 801c7d2:	bf00      	nop
 801c7d4:	08021764 	.word	0x08021764
 801c7d8:	ffff0001 	.word	0xffff0001

0801c7dc <_fwalk_reent>:
 801c7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c7e0:	4606      	mov	r6, r0
 801c7e2:	4688      	mov	r8, r1
 801c7e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c7e8:	2700      	movs	r7, #0
 801c7ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c7ee:	f1b9 0901 	subs.w	r9, r9, #1
 801c7f2:	d505      	bpl.n	801c800 <_fwalk_reent+0x24>
 801c7f4:	6824      	ldr	r4, [r4, #0]
 801c7f6:	2c00      	cmp	r4, #0
 801c7f8:	d1f7      	bne.n	801c7ea <_fwalk_reent+0xe>
 801c7fa:	4638      	mov	r0, r7
 801c7fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c800:	89ab      	ldrh	r3, [r5, #12]
 801c802:	2b01      	cmp	r3, #1
 801c804:	d907      	bls.n	801c816 <_fwalk_reent+0x3a>
 801c806:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c80a:	3301      	adds	r3, #1
 801c80c:	d003      	beq.n	801c816 <_fwalk_reent+0x3a>
 801c80e:	4629      	mov	r1, r5
 801c810:	4630      	mov	r0, r6
 801c812:	47c0      	blx	r8
 801c814:	4307      	orrs	r7, r0
 801c816:	3568      	adds	r5, #104	; 0x68
 801c818:	e7e9      	b.n	801c7ee <_fwalk_reent+0x12>
	...

0801c81c <__libc_init_array>:
 801c81c:	b570      	push	{r4, r5, r6, lr}
 801c81e:	4d0d      	ldr	r5, [pc, #52]	; (801c854 <__libc_init_array+0x38>)
 801c820:	4c0d      	ldr	r4, [pc, #52]	; (801c858 <__libc_init_array+0x3c>)
 801c822:	1b64      	subs	r4, r4, r5
 801c824:	10a4      	asrs	r4, r4, #2
 801c826:	2600      	movs	r6, #0
 801c828:	42a6      	cmp	r6, r4
 801c82a:	d109      	bne.n	801c840 <__libc_init_array+0x24>
 801c82c:	4d0b      	ldr	r5, [pc, #44]	; (801c85c <__libc_init_array+0x40>)
 801c82e:	4c0c      	ldr	r4, [pc, #48]	; (801c860 <__libc_init_array+0x44>)
 801c830:	f001 f9f2 	bl	801dc18 <_init>
 801c834:	1b64      	subs	r4, r4, r5
 801c836:	10a4      	asrs	r4, r4, #2
 801c838:	2600      	movs	r6, #0
 801c83a:	42a6      	cmp	r6, r4
 801c83c:	d105      	bne.n	801c84a <__libc_init_array+0x2e>
 801c83e:	bd70      	pop	{r4, r5, r6, pc}
 801c840:	f855 3b04 	ldr.w	r3, [r5], #4
 801c844:	4798      	blx	r3
 801c846:	3601      	adds	r6, #1
 801c848:	e7ee      	b.n	801c828 <__libc_init_array+0xc>
 801c84a:	f855 3b04 	ldr.w	r3, [r5], #4
 801c84e:	4798      	blx	r3
 801c850:	3601      	adds	r6, #1
 801c852:	e7f2      	b.n	801c83a <__libc_init_array+0x1e>
 801c854:	08021854 	.word	0x08021854
 801c858:	08021854 	.word	0x08021854
 801c85c:	08021854 	.word	0x08021854
 801c860:	08021858 	.word	0x08021858

0801c864 <malloc>:
 801c864:	4b02      	ldr	r3, [pc, #8]	; (801c870 <malloc+0xc>)
 801c866:	4601      	mov	r1, r0
 801c868:	6818      	ldr	r0, [r3, #0]
 801c86a:	f000 b8af 	b.w	801c9cc <_malloc_r>
 801c86e:	bf00      	nop
 801c870:	200002e0 	.word	0x200002e0

0801c874 <memcmp>:
 801c874:	b510      	push	{r4, lr}
 801c876:	3901      	subs	r1, #1
 801c878:	4402      	add	r2, r0
 801c87a:	4290      	cmp	r0, r2
 801c87c:	d101      	bne.n	801c882 <memcmp+0xe>
 801c87e:	2000      	movs	r0, #0
 801c880:	e005      	b.n	801c88e <memcmp+0x1a>
 801c882:	7803      	ldrb	r3, [r0, #0]
 801c884:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c888:	42a3      	cmp	r3, r4
 801c88a:	d001      	beq.n	801c890 <memcmp+0x1c>
 801c88c:	1b18      	subs	r0, r3, r4
 801c88e:	bd10      	pop	{r4, pc}
 801c890:	3001      	adds	r0, #1
 801c892:	e7f2      	b.n	801c87a <memcmp+0x6>

0801c894 <memcpy>:
 801c894:	440a      	add	r2, r1
 801c896:	4291      	cmp	r1, r2
 801c898:	f100 33ff 	add.w	r3, r0, #4294967295
 801c89c:	d100      	bne.n	801c8a0 <memcpy+0xc>
 801c89e:	4770      	bx	lr
 801c8a0:	b510      	push	{r4, lr}
 801c8a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c8a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c8aa:	4291      	cmp	r1, r2
 801c8ac:	d1f9      	bne.n	801c8a2 <memcpy+0xe>
 801c8ae:	bd10      	pop	{r4, pc}

0801c8b0 <memmove>:
 801c8b0:	4288      	cmp	r0, r1
 801c8b2:	b510      	push	{r4, lr}
 801c8b4:	eb01 0402 	add.w	r4, r1, r2
 801c8b8:	d902      	bls.n	801c8c0 <memmove+0x10>
 801c8ba:	4284      	cmp	r4, r0
 801c8bc:	4623      	mov	r3, r4
 801c8be:	d807      	bhi.n	801c8d0 <memmove+0x20>
 801c8c0:	1e43      	subs	r3, r0, #1
 801c8c2:	42a1      	cmp	r1, r4
 801c8c4:	d008      	beq.n	801c8d8 <memmove+0x28>
 801c8c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c8ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c8ce:	e7f8      	b.n	801c8c2 <memmove+0x12>
 801c8d0:	4402      	add	r2, r0
 801c8d2:	4601      	mov	r1, r0
 801c8d4:	428a      	cmp	r2, r1
 801c8d6:	d100      	bne.n	801c8da <memmove+0x2a>
 801c8d8:	bd10      	pop	{r4, pc}
 801c8da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c8de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c8e2:	e7f7      	b.n	801c8d4 <memmove+0x24>

0801c8e4 <memset>:
 801c8e4:	4402      	add	r2, r0
 801c8e6:	4603      	mov	r3, r0
 801c8e8:	4293      	cmp	r3, r2
 801c8ea:	d100      	bne.n	801c8ee <memset+0xa>
 801c8ec:	4770      	bx	lr
 801c8ee:	f803 1b01 	strb.w	r1, [r3], #1
 801c8f2:	e7f9      	b.n	801c8e8 <memset+0x4>

0801c8f4 <_free_r>:
 801c8f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c8f6:	2900      	cmp	r1, #0
 801c8f8:	d044      	beq.n	801c984 <_free_r+0x90>
 801c8fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c8fe:	9001      	str	r0, [sp, #4]
 801c900:	2b00      	cmp	r3, #0
 801c902:	f1a1 0404 	sub.w	r4, r1, #4
 801c906:	bfb8      	it	lt
 801c908:	18e4      	addlt	r4, r4, r3
 801c90a:	f000 fb53 	bl	801cfb4 <__malloc_lock>
 801c90e:	4a1e      	ldr	r2, [pc, #120]	; (801c988 <_free_r+0x94>)
 801c910:	9801      	ldr	r0, [sp, #4]
 801c912:	6813      	ldr	r3, [r2, #0]
 801c914:	b933      	cbnz	r3, 801c924 <_free_r+0x30>
 801c916:	6063      	str	r3, [r4, #4]
 801c918:	6014      	str	r4, [r2, #0]
 801c91a:	b003      	add	sp, #12
 801c91c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c920:	f000 bb4e 	b.w	801cfc0 <__malloc_unlock>
 801c924:	42a3      	cmp	r3, r4
 801c926:	d908      	bls.n	801c93a <_free_r+0x46>
 801c928:	6825      	ldr	r5, [r4, #0]
 801c92a:	1961      	adds	r1, r4, r5
 801c92c:	428b      	cmp	r3, r1
 801c92e:	bf01      	itttt	eq
 801c930:	6819      	ldreq	r1, [r3, #0]
 801c932:	685b      	ldreq	r3, [r3, #4]
 801c934:	1949      	addeq	r1, r1, r5
 801c936:	6021      	streq	r1, [r4, #0]
 801c938:	e7ed      	b.n	801c916 <_free_r+0x22>
 801c93a:	461a      	mov	r2, r3
 801c93c:	685b      	ldr	r3, [r3, #4]
 801c93e:	b10b      	cbz	r3, 801c944 <_free_r+0x50>
 801c940:	42a3      	cmp	r3, r4
 801c942:	d9fa      	bls.n	801c93a <_free_r+0x46>
 801c944:	6811      	ldr	r1, [r2, #0]
 801c946:	1855      	adds	r5, r2, r1
 801c948:	42a5      	cmp	r5, r4
 801c94a:	d10b      	bne.n	801c964 <_free_r+0x70>
 801c94c:	6824      	ldr	r4, [r4, #0]
 801c94e:	4421      	add	r1, r4
 801c950:	1854      	adds	r4, r2, r1
 801c952:	42a3      	cmp	r3, r4
 801c954:	6011      	str	r1, [r2, #0]
 801c956:	d1e0      	bne.n	801c91a <_free_r+0x26>
 801c958:	681c      	ldr	r4, [r3, #0]
 801c95a:	685b      	ldr	r3, [r3, #4]
 801c95c:	6053      	str	r3, [r2, #4]
 801c95e:	4421      	add	r1, r4
 801c960:	6011      	str	r1, [r2, #0]
 801c962:	e7da      	b.n	801c91a <_free_r+0x26>
 801c964:	d902      	bls.n	801c96c <_free_r+0x78>
 801c966:	230c      	movs	r3, #12
 801c968:	6003      	str	r3, [r0, #0]
 801c96a:	e7d6      	b.n	801c91a <_free_r+0x26>
 801c96c:	6825      	ldr	r5, [r4, #0]
 801c96e:	1961      	adds	r1, r4, r5
 801c970:	428b      	cmp	r3, r1
 801c972:	bf04      	itt	eq
 801c974:	6819      	ldreq	r1, [r3, #0]
 801c976:	685b      	ldreq	r3, [r3, #4]
 801c978:	6063      	str	r3, [r4, #4]
 801c97a:	bf04      	itt	eq
 801c97c:	1949      	addeq	r1, r1, r5
 801c97e:	6021      	streq	r1, [r4, #0]
 801c980:	6054      	str	r4, [r2, #4]
 801c982:	e7ca      	b.n	801c91a <_free_r+0x26>
 801c984:	b003      	add	sp, #12
 801c986:	bd30      	pop	{r4, r5, pc}
 801c988:	2000deec 	.word	0x2000deec

0801c98c <sbrk_aligned>:
 801c98c:	b570      	push	{r4, r5, r6, lr}
 801c98e:	4e0e      	ldr	r6, [pc, #56]	; (801c9c8 <sbrk_aligned+0x3c>)
 801c990:	460c      	mov	r4, r1
 801c992:	6831      	ldr	r1, [r6, #0]
 801c994:	4605      	mov	r5, r0
 801c996:	b911      	cbnz	r1, 801c99e <sbrk_aligned+0x12>
 801c998:	f000 f94c 	bl	801cc34 <_sbrk_r>
 801c99c:	6030      	str	r0, [r6, #0]
 801c99e:	4621      	mov	r1, r4
 801c9a0:	4628      	mov	r0, r5
 801c9a2:	f000 f947 	bl	801cc34 <_sbrk_r>
 801c9a6:	1c43      	adds	r3, r0, #1
 801c9a8:	d00a      	beq.n	801c9c0 <sbrk_aligned+0x34>
 801c9aa:	1cc4      	adds	r4, r0, #3
 801c9ac:	f024 0403 	bic.w	r4, r4, #3
 801c9b0:	42a0      	cmp	r0, r4
 801c9b2:	d007      	beq.n	801c9c4 <sbrk_aligned+0x38>
 801c9b4:	1a21      	subs	r1, r4, r0
 801c9b6:	4628      	mov	r0, r5
 801c9b8:	f000 f93c 	bl	801cc34 <_sbrk_r>
 801c9bc:	3001      	adds	r0, #1
 801c9be:	d101      	bne.n	801c9c4 <sbrk_aligned+0x38>
 801c9c0:	f04f 34ff 	mov.w	r4, #4294967295
 801c9c4:	4620      	mov	r0, r4
 801c9c6:	bd70      	pop	{r4, r5, r6, pc}
 801c9c8:	2000def0 	.word	0x2000def0

0801c9cc <_malloc_r>:
 801c9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9d0:	1ccd      	adds	r5, r1, #3
 801c9d2:	f025 0503 	bic.w	r5, r5, #3
 801c9d6:	3508      	adds	r5, #8
 801c9d8:	2d0c      	cmp	r5, #12
 801c9da:	bf38      	it	cc
 801c9dc:	250c      	movcc	r5, #12
 801c9de:	2d00      	cmp	r5, #0
 801c9e0:	4607      	mov	r7, r0
 801c9e2:	db01      	blt.n	801c9e8 <_malloc_r+0x1c>
 801c9e4:	42a9      	cmp	r1, r5
 801c9e6:	d905      	bls.n	801c9f4 <_malloc_r+0x28>
 801c9e8:	230c      	movs	r3, #12
 801c9ea:	603b      	str	r3, [r7, #0]
 801c9ec:	2600      	movs	r6, #0
 801c9ee:	4630      	mov	r0, r6
 801c9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9f4:	4e2e      	ldr	r6, [pc, #184]	; (801cab0 <_malloc_r+0xe4>)
 801c9f6:	f000 fadd 	bl	801cfb4 <__malloc_lock>
 801c9fa:	6833      	ldr	r3, [r6, #0]
 801c9fc:	461c      	mov	r4, r3
 801c9fe:	bb34      	cbnz	r4, 801ca4e <_malloc_r+0x82>
 801ca00:	4629      	mov	r1, r5
 801ca02:	4638      	mov	r0, r7
 801ca04:	f7ff ffc2 	bl	801c98c <sbrk_aligned>
 801ca08:	1c43      	adds	r3, r0, #1
 801ca0a:	4604      	mov	r4, r0
 801ca0c:	d14d      	bne.n	801caaa <_malloc_r+0xde>
 801ca0e:	6834      	ldr	r4, [r6, #0]
 801ca10:	4626      	mov	r6, r4
 801ca12:	2e00      	cmp	r6, #0
 801ca14:	d140      	bne.n	801ca98 <_malloc_r+0xcc>
 801ca16:	6823      	ldr	r3, [r4, #0]
 801ca18:	4631      	mov	r1, r6
 801ca1a:	4638      	mov	r0, r7
 801ca1c:	eb04 0803 	add.w	r8, r4, r3
 801ca20:	f000 f908 	bl	801cc34 <_sbrk_r>
 801ca24:	4580      	cmp	r8, r0
 801ca26:	d13a      	bne.n	801ca9e <_malloc_r+0xd2>
 801ca28:	6821      	ldr	r1, [r4, #0]
 801ca2a:	3503      	adds	r5, #3
 801ca2c:	1a6d      	subs	r5, r5, r1
 801ca2e:	f025 0503 	bic.w	r5, r5, #3
 801ca32:	3508      	adds	r5, #8
 801ca34:	2d0c      	cmp	r5, #12
 801ca36:	bf38      	it	cc
 801ca38:	250c      	movcc	r5, #12
 801ca3a:	4629      	mov	r1, r5
 801ca3c:	4638      	mov	r0, r7
 801ca3e:	f7ff ffa5 	bl	801c98c <sbrk_aligned>
 801ca42:	3001      	adds	r0, #1
 801ca44:	d02b      	beq.n	801ca9e <_malloc_r+0xd2>
 801ca46:	6823      	ldr	r3, [r4, #0]
 801ca48:	442b      	add	r3, r5
 801ca4a:	6023      	str	r3, [r4, #0]
 801ca4c:	e00e      	b.n	801ca6c <_malloc_r+0xa0>
 801ca4e:	6822      	ldr	r2, [r4, #0]
 801ca50:	1b52      	subs	r2, r2, r5
 801ca52:	d41e      	bmi.n	801ca92 <_malloc_r+0xc6>
 801ca54:	2a0b      	cmp	r2, #11
 801ca56:	d916      	bls.n	801ca86 <_malloc_r+0xba>
 801ca58:	1961      	adds	r1, r4, r5
 801ca5a:	42a3      	cmp	r3, r4
 801ca5c:	6025      	str	r5, [r4, #0]
 801ca5e:	bf18      	it	ne
 801ca60:	6059      	strne	r1, [r3, #4]
 801ca62:	6863      	ldr	r3, [r4, #4]
 801ca64:	bf08      	it	eq
 801ca66:	6031      	streq	r1, [r6, #0]
 801ca68:	5162      	str	r2, [r4, r5]
 801ca6a:	604b      	str	r3, [r1, #4]
 801ca6c:	4638      	mov	r0, r7
 801ca6e:	f104 060b 	add.w	r6, r4, #11
 801ca72:	f000 faa5 	bl	801cfc0 <__malloc_unlock>
 801ca76:	f026 0607 	bic.w	r6, r6, #7
 801ca7a:	1d23      	adds	r3, r4, #4
 801ca7c:	1af2      	subs	r2, r6, r3
 801ca7e:	d0b6      	beq.n	801c9ee <_malloc_r+0x22>
 801ca80:	1b9b      	subs	r3, r3, r6
 801ca82:	50a3      	str	r3, [r4, r2]
 801ca84:	e7b3      	b.n	801c9ee <_malloc_r+0x22>
 801ca86:	6862      	ldr	r2, [r4, #4]
 801ca88:	42a3      	cmp	r3, r4
 801ca8a:	bf0c      	ite	eq
 801ca8c:	6032      	streq	r2, [r6, #0]
 801ca8e:	605a      	strne	r2, [r3, #4]
 801ca90:	e7ec      	b.n	801ca6c <_malloc_r+0xa0>
 801ca92:	4623      	mov	r3, r4
 801ca94:	6864      	ldr	r4, [r4, #4]
 801ca96:	e7b2      	b.n	801c9fe <_malloc_r+0x32>
 801ca98:	4634      	mov	r4, r6
 801ca9a:	6876      	ldr	r6, [r6, #4]
 801ca9c:	e7b9      	b.n	801ca12 <_malloc_r+0x46>
 801ca9e:	230c      	movs	r3, #12
 801caa0:	603b      	str	r3, [r7, #0]
 801caa2:	4638      	mov	r0, r7
 801caa4:	f000 fa8c 	bl	801cfc0 <__malloc_unlock>
 801caa8:	e7a1      	b.n	801c9ee <_malloc_r+0x22>
 801caaa:	6025      	str	r5, [r4, #0]
 801caac:	e7de      	b.n	801ca6c <_malloc_r+0xa0>
 801caae:	bf00      	nop
 801cab0:	2000deec 	.word	0x2000deec

0801cab4 <iprintf>:
 801cab4:	b40f      	push	{r0, r1, r2, r3}
 801cab6:	4b0a      	ldr	r3, [pc, #40]	; (801cae0 <iprintf+0x2c>)
 801cab8:	b513      	push	{r0, r1, r4, lr}
 801caba:	681c      	ldr	r4, [r3, #0]
 801cabc:	b124      	cbz	r4, 801cac8 <iprintf+0x14>
 801cabe:	69a3      	ldr	r3, [r4, #24]
 801cac0:	b913      	cbnz	r3, 801cac8 <iprintf+0x14>
 801cac2:	4620      	mov	r0, r4
 801cac4:	f7ff fe0c 	bl	801c6e0 <__sinit>
 801cac8:	ab05      	add	r3, sp, #20
 801caca:	9a04      	ldr	r2, [sp, #16]
 801cacc:	68a1      	ldr	r1, [r4, #8]
 801cace:	9301      	str	r3, [sp, #4]
 801cad0:	4620      	mov	r0, r4
 801cad2:	f000 fc01 	bl	801d2d8 <_vfiprintf_r>
 801cad6:	b002      	add	sp, #8
 801cad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cadc:	b004      	add	sp, #16
 801cade:	4770      	bx	lr
 801cae0:	200002e0 	.word	0x200002e0

0801cae4 <rand>:
 801cae4:	4b16      	ldr	r3, [pc, #88]	; (801cb40 <rand+0x5c>)
 801cae6:	b510      	push	{r4, lr}
 801cae8:	681c      	ldr	r4, [r3, #0]
 801caea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801caec:	b9b3      	cbnz	r3, 801cb1c <rand+0x38>
 801caee:	2018      	movs	r0, #24
 801caf0:	f7ff feb8 	bl	801c864 <malloc>
 801caf4:	63a0      	str	r0, [r4, #56]	; 0x38
 801caf6:	b928      	cbnz	r0, 801cb04 <rand+0x20>
 801caf8:	4602      	mov	r2, r0
 801cafa:	4b12      	ldr	r3, [pc, #72]	; (801cb44 <rand+0x60>)
 801cafc:	4812      	ldr	r0, [pc, #72]	; (801cb48 <rand+0x64>)
 801cafe:	214e      	movs	r1, #78	; 0x4e
 801cb00:	f000 f944 	bl	801cd8c <__assert_func>
 801cb04:	4a11      	ldr	r2, [pc, #68]	; (801cb4c <rand+0x68>)
 801cb06:	4b12      	ldr	r3, [pc, #72]	; (801cb50 <rand+0x6c>)
 801cb08:	e9c0 2300 	strd	r2, r3, [r0]
 801cb0c:	4b11      	ldr	r3, [pc, #68]	; (801cb54 <rand+0x70>)
 801cb0e:	6083      	str	r3, [r0, #8]
 801cb10:	230b      	movs	r3, #11
 801cb12:	8183      	strh	r3, [r0, #12]
 801cb14:	2201      	movs	r2, #1
 801cb16:	2300      	movs	r3, #0
 801cb18:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801cb1c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801cb1e:	4a0e      	ldr	r2, [pc, #56]	; (801cb58 <rand+0x74>)
 801cb20:	6920      	ldr	r0, [r4, #16]
 801cb22:	6963      	ldr	r3, [r4, #20]
 801cb24:	490d      	ldr	r1, [pc, #52]	; (801cb5c <rand+0x78>)
 801cb26:	4342      	muls	r2, r0
 801cb28:	fb01 2203 	mla	r2, r1, r3, r2
 801cb2c:	fba0 0101 	umull	r0, r1, r0, r1
 801cb30:	1c43      	adds	r3, r0, #1
 801cb32:	eb42 0001 	adc.w	r0, r2, r1
 801cb36:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801cb3a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801cb3e:	bd10      	pop	{r4, pc}
 801cb40:	200002e0 	.word	0x200002e0
 801cb44:	08021768 	.word	0x08021768
 801cb48:	0802177f 	.word	0x0802177f
 801cb4c:	abcd330e 	.word	0xabcd330e
 801cb50:	e66d1234 	.word	0xe66d1234
 801cb54:	0005deec 	.word	0x0005deec
 801cb58:	5851f42d 	.word	0x5851f42d
 801cb5c:	4c957f2d 	.word	0x4c957f2d

0801cb60 <cleanup_glue>:
 801cb60:	b538      	push	{r3, r4, r5, lr}
 801cb62:	460c      	mov	r4, r1
 801cb64:	6809      	ldr	r1, [r1, #0]
 801cb66:	4605      	mov	r5, r0
 801cb68:	b109      	cbz	r1, 801cb6e <cleanup_glue+0xe>
 801cb6a:	f7ff fff9 	bl	801cb60 <cleanup_glue>
 801cb6e:	4621      	mov	r1, r4
 801cb70:	4628      	mov	r0, r5
 801cb72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cb76:	f7ff bebd 	b.w	801c8f4 <_free_r>
	...

0801cb7c <_reclaim_reent>:
 801cb7c:	4b2c      	ldr	r3, [pc, #176]	; (801cc30 <_reclaim_reent+0xb4>)
 801cb7e:	681b      	ldr	r3, [r3, #0]
 801cb80:	4283      	cmp	r3, r0
 801cb82:	b570      	push	{r4, r5, r6, lr}
 801cb84:	4604      	mov	r4, r0
 801cb86:	d051      	beq.n	801cc2c <_reclaim_reent+0xb0>
 801cb88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801cb8a:	b143      	cbz	r3, 801cb9e <_reclaim_reent+0x22>
 801cb8c:	68db      	ldr	r3, [r3, #12]
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d14a      	bne.n	801cc28 <_reclaim_reent+0xac>
 801cb92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cb94:	6819      	ldr	r1, [r3, #0]
 801cb96:	b111      	cbz	r1, 801cb9e <_reclaim_reent+0x22>
 801cb98:	4620      	mov	r0, r4
 801cb9a:	f7ff feab 	bl	801c8f4 <_free_r>
 801cb9e:	6961      	ldr	r1, [r4, #20]
 801cba0:	b111      	cbz	r1, 801cba8 <_reclaim_reent+0x2c>
 801cba2:	4620      	mov	r0, r4
 801cba4:	f7ff fea6 	bl	801c8f4 <_free_r>
 801cba8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801cbaa:	b111      	cbz	r1, 801cbb2 <_reclaim_reent+0x36>
 801cbac:	4620      	mov	r0, r4
 801cbae:	f7ff fea1 	bl	801c8f4 <_free_r>
 801cbb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801cbb4:	b111      	cbz	r1, 801cbbc <_reclaim_reent+0x40>
 801cbb6:	4620      	mov	r0, r4
 801cbb8:	f7ff fe9c 	bl	801c8f4 <_free_r>
 801cbbc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801cbbe:	b111      	cbz	r1, 801cbc6 <_reclaim_reent+0x4a>
 801cbc0:	4620      	mov	r0, r4
 801cbc2:	f7ff fe97 	bl	801c8f4 <_free_r>
 801cbc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801cbc8:	b111      	cbz	r1, 801cbd0 <_reclaim_reent+0x54>
 801cbca:	4620      	mov	r0, r4
 801cbcc:	f7ff fe92 	bl	801c8f4 <_free_r>
 801cbd0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801cbd2:	b111      	cbz	r1, 801cbda <_reclaim_reent+0x5e>
 801cbd4:	4620      	mov	r0, r4
 801cbd6:	f7ff fe8d 	bl	801c8f4 <_free_r>
 801cbda:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801cbdc:	b111      	cbz	r1, 801cbe4 <_reclaim_reent+0x68>
 801cbde:	4620      	mov	r0, r4
 801cbe0:	f7ff fe88 	bl	801c8f4 <_free_r>
 801cbe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cbe6:	b111      	cbz	r1, 801cbee <_reclaim_reent+0x72>
 801cbe8:	4620      	mov	r0, r4
 801cbea:	f7ff fe83 	bl	801c8f4 <_free_r>
 801cbee:	69a3      	ldr	r3, [r4, #24]
 801cbf0:	b1e3      	cbz	r3, 801cc2c <_reclaim_reent+0xb0>
 801cbf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cbf4:	4620      	mov	r0, r4
 801cbf6:	4798      	blx	r3
 801cbf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801cbfa:	b1b9      	cbz	r1, 801cc2c <_reclaim_reent+0xb0>
 801cbfc:	4620      	mov	r0, r4
 801cbfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc02:	f7ff bfad 	b.w	801cb60 <cleanup_glue>
 801cc06:	5949      	ldr	r1, [r1, r5]
 801cc08:	b941      	cbnz	r1, 801cc1c <_reclaim_reent+0xa0>
 801cc0a:	3504      	adds	r5, #4
 801cc0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc0e:	2d80      	cmp	r5, #128	; 0x80
 801cc10:	68d9      	ldr	r1, [r3, #12]
 801cc12:	d1f8      	bne.n	801cc06 <_reclaim_reent+0x8a>
 801cc14:	4620      	mov	r0, r4
 801cc16:	f7ff fe6d 	bl	801c8f4 <_free_r>
 801cc1a:	e7ba      	b.n	801cb92 <_reclaim_reent+0x16>
 801cc1c:	680e      	ldr	r6, [r1, #0]
 801cc1e:	4620      	mov	r0, r4
 801cc20:	f7ff fe68 	bl	801c8f4 <_free_r>
 801cc24:	4631      	mov	r1, r6
 801cc26:	e7ef      	b.n	801cc08 <_reclaim_reent+0x8c>
 801cc28:	2500      	movs	r5, #0
 801cc2a:	e7ef      	b.n	801cc0c <_reclaim_reent+0x90>
 801cc2c:	bd70      	pop	{r4, r5, r6, pc}
 801cc2e:	bf00      	nop
 801cc30:	200002e0 	.word	0x200002e0

0801cc34 <_sbrk_r>:
 801cc34:	b538      	push	{r3, r4, r5, lr}
 801cc36:	4d06      	ldr	r5, [pc, #24]	; (801cc50 <_sbrk_r+0x1c>)
 801cc38:	2300      	movs	r3, #0
 801cc3a:	4604      	mov	r4, r0
 801cc3c:	4608      	mov	r0, r1
 801cc3e:	602b      	str	r3, [r5, #0]
 801cc40:	f7e8 f820 	bl	8004c84 <_sbrk>
 801cc44:	1c43      	adds	r3, r0, #1
 801cc46:	d102      	bne.n	801cc4e <_sbrk_r+0x1a>
 801cc48:	682b      	ldr	r3, [r5, #0]
 801cc4a:	b103      	cbz	r3, 801cc4e <_sbrk_r+0x1a>
 801cc4c:	6023      	str	r3, [r4, #0]
 801cc4e:	bd38      	pop	{r3, r4, r5, pc}
 801cc50:	2000def4 	.word	0x2000def4

0801cc54 <siprintf>:
 801cc54:	b40e      	push	{r1, r2, r3}
 801cc56:	b500      	push	{lr}
 801cc58:	b09c      	sub	sp, #112	; 0x70
 801cc5a:	ab1d      	add	r3, sp, #116	; 0x74
 801cc5c:	9002      	str	r0, [sp, #8]
 801cc5e:	9006      	str	r0, [sp, #24]
 801cc60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cc64:	4809      	ldr	r0, [pc, #36]	; (801cc8c <siprintf+0x38>)
 801cc66:	9107      	str	r1, [sp, #28]
 801cc68:	9104      	str	r1, [sp, #16]
 801cc6a:	4909      	ldr	r1, [pc, #36]	; (801cc90 <siprintf+0x3c>)
 801cc6c:	f853 2b04 	ldr.w	r2, [r3], #4
 801cc70:	9105      	str	r1, [sp, #20]
 801cc72:	6800      	ldr	r0, [r0, #0]
 801cc74:	9301      	str	r3, [sp, #4]
 801cc76:	a902      	add	r1, sp, #8
 801cc78:	f000 fa04 	bl	801d084 <_svfiprintf_r>
 801cc7c:	9b02      	ldr	r3, [sp, #8]
 801cc7e:	2200      	movs	r2, #0
 801cc80:	701a      	strb	r2, [r3, #0]
 801cc82:	b01c      	add	sp, #112	; 0x70
 801cc84:	f85d eb04 	ldr.w	lr, [sp], #4
 801cc88:	b003      	add	sp, #12
 801cc8a:	4770      	bx	lr
 801cc8c:	200002e0 	.word	0x200002e0
 801cc90:	ffff0208 	.word	0xffff0208

0801cc94 <__sread>:
 801cc94:	b510      	push	{r4, lr}
 801cc96:	460c      	mov	r4, r1
 801cc98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc9c:	f000 fde0 	bl	801d860 <_read_r>
 801cca0:	2800      	cmp	r0, #0
 801cca2:	bfab      	itete	ge
 801cca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cca6:	89a3      	ldrhlt	r3, [r4, #12]
 801cca8:	181b      	addge	r3, r3, r0
 801ccaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ccae:	bfac      	ite	ge
 801ccb0:	6563      	strge	r3, [r4, #84]	; 0x54
 801ccb2:	81a3      	strhlt	r3, [r4, #12]
 801ccb4:	bd10      	pop	{r4, pc}

0801ccb6 <__swrite>:
 801ccb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccba:	461f      	mov	r7, r3
 801ccbc:	898b      	ldrh	r3, [r1, #12]
 801ccbe:	05db      	lsls	r3, r3, #23
 801ccc0:	4605      	mov	r5, r0
 801ccc2:	460c      	mov	r4, r1
 801ccc4:	4616      	mov	r6, r2
 801ccc6:	d505      	bpl.n	801ccd4 <__swrite+0x1e>
 801ccc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cccc:	2302      	movs	r3, #2
 801ccce:	2200      	movs	r2, #0
 801ccd0:	f000 f95e 	bl	801cf90 <_lseek_r>
 801ccd4:	89a3      	ldrh	r3, [r4, #12]
 801ccd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ccda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ccde:	81a3      	strh	r3, [r4, #12]
 801cce0:	4632      	mov	r2, r6
 801cce2:	463b      	mov	r3, r7
 801cce4:	4628      	mov	r0, r5
 801cce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ccea:	f000 b83d 	b.w	801cd68 <_write_r>

0801ccee <__sseek>:
 801ccee:	b510      	push	{r4, lr}
 801ccf0:	460c      	mov	r4, r1
 801ccf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ccf6:	f000 f94b 	bl	801cf90 <_lseek_r>
 801ccfa:	1c43      	adds	r3, r0, #1
 801ccfc:	89a3      	ldrh	r3, [r4, #12]
 801ccfe:	bf15      	itete	ne
 801cd00:	6560      	strne	r0, [r4, #84]	; 0x54
 801cd02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cd06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cd0a:	81a3      	strheq	r3, [r4, #12]
 801cd0c:	bf18      	it	ne
 801cd0e:	81a3      	strhne	r3, [r4, #12]
 801cd10:	bd10      	pop	{r4, pc}

0801cd12 <__sclose>:
 801cd12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd16:	f000 b857 	b.w	801cdc8 <_close_r>

0801cd1a <strncmp>:
 801cd1a:	b510      	push	{r4, lr}
 801cd1c:	b17a      	cbz	r2, 801cd3e <strncmp+0x24>
 801cd1e:	4603      	mov	r3, r0
 801cd20:	3901      	subs	r1, #1
 801cd22:	1884      	adds	r4, r0, r2
 801cd24:	f813 0b01 	ldrb.w	r0, [r3], #1
 801cd28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801cd2c:	4290      	cmp	r0, r2
 801cd2e:	d101      	bne.n	801cd34 <strncmp+0x1a>
 801cd30:	42a3      	cmp	r3, r4
 801cd32:	d101      	bne.n	801cd38 <strncmp+0x1e>
 801cd34:	1a80      	subs	r0, r0, r2
 801cd36:	bd10      	pop	{r4, pc}
 801cd38:	2800      	cmp	r0, #0
 801cd3a:	d1f3      	bne.n	801cd24 <strncmp+0xa>
 801cd3c:	e7fa      	b.n	801cd34 <strncmp+0x1a>
 801cd3e:	4610      	mov	r0, r2
 801cd40:	e7f9      	b.n	801cd36 <strncmp+0x1c>

0801cd42 <strncpy>:
 801cd42:	b510      	push	{r4, lr}
 801cd44:	3901      	subs	r1, #1
 801cd46:	4603      	mov	r3, r0
 801cd48:	b132      	cbz	r2, 801cd58 <strncpy+0x16>
 801cd4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801cd4e:	f803 4b01 	strb.w	r4, [r3], #1
 801cd52:	3a01      	subs	r2, #1
 801cd54:	2c00      	cmp	r4, #0
 801cd56:	d1f7      	bne.n	801cd48 <strncpy+0x6>
 801cd58:	441a      	add	r2, r3
 801cd5a:	2100      	movs	r1, #0
 801cd5c:	4293      	cmp	r3, r2
 801cd5e:	d100      	bne.n	801cd62 <strncpy+0x20>
 801cd60:	bd10      	pop	{r4, pc}
 801cd62:	f803 1b01 	strb.w	r1, [r3], #1
 801cd66:	e7f9      	b.n	801cd5c <strncpy+0x1a>

0801cd68 <_write_r>:
 801cd68:	b538      	push	{r3, r4, r5, lr}
 801cd6a:	4d07      	ldr	r5, [pc, #28]	; (801cd88 <_write_r+0x20>)
 801cd6c:	4604      	mov	r4, r0
 801cd6e:	4608      	mov	r0, r1
 801cd70:	4611      	mov	r1, r2
 801cd72:	2200      	movs	r2, #0
 801cd74:	602a      	str	r2, [r5, #0]
 801cd76:	461a      	mov	r2, r3
 801cd78:	f7e7 ff33 	bl	8004be2 <_write>
 801cd7c:	1c43      	adds	r3, r0, #1
 801cd7e:	d102      	bne.n	801cd86 <_write_r+0x1e>
 801cd80:	682b      	ldr	r3, [r5, #0]
 801cd82:	b103      	cbz	r3, 801cd86 <_write_r+0x1e>
 801cd84:	6023      	str	r3, [r4, #0]
 801cd86:	bd38      	pop	{r3, r4, r5, pc}
 801cd88:	2000def4 	.word	0x2000def4

0801cd8c <__assert_func>:
 801cd8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cd8e:	4614      	mov	r4, r2
 801cd90:	461a      	mov	r2, r3
 801cd92:	4b09      	ldr	r3, [pc, #36]	; (801cdb8 <__assert_func+0x2c>)
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	4605      	mov	r5, r0
 801cd98:	68d8      	ldr	r0, [r3, #12]
 801cd9a:	b14c      	cbz	r4, 801cdb0 <__assert_func+0x24>
 801cd9c:	4b07      	ldr	r3, [pc, #28]	; (801cdbc <__assert_func+0x30>)
 801cd9e:	9100      	str	r1, [sp, #0]
 801cda0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cda4:	4906      	ldr	r1, [pc, #24]	; (801cdc0 <__assert_func+0x34>)
 801cda6:	462b      	mov	r3, r5
 801cda8:	f000 f8e0 	bl	801cf6c <fiprintf>
 801cdac:	f000 fe2a 	bl	801da04 <abort>
 801cdb0:	4b04      	ldr	r3, [pc, #16]	; (801cdc4 <__assert_func+0x38>)
 801cdb2:	461c      	mov	r4, r3
 801cdb4:	e7f3      	b.n	801cd9e <__assert_func+0x12>
 801cdb6:	bf00      	nop
 801cdb8:	200002e0 	.word	0x200002e0
 801cdbc:	080217da 	.word	0x080217da
 801cdc0:	080217e7 	.word	0x080217e7
 801cdc4:	08021815 	.word	0x08021815

0801cdc8 <_close_r>:
 801cdc8:	b538      	push	{r3, r4, r5, lr}
 801cdca:	4d06      	ldr	r5, [pc, #24]	; (801cde4 <_close_r+0x1c>)
 801cdcc:	2300      	movs	r3, #0
 801cdce:	4604      	mov	r4, r0
 801cdd0:	4608      	mov	r0, r1
 801cdd2:	602b      	str	r3, [r5, #0]
 801cdd4:	f7e7 ff21 	bl	8004c1a <_close>
 801cdd8:	1c43      	adds	r3, r0, #1
 801cdda:	d102      	bne.n	801cde2 <_close_r+0x1a>
 801cddc:	682b      	ldr	r3, [r5, #0]
 801cdde:	b103      	cbz	r3, 801cde2 <_close_r+0x1a>
 801cde0:	6023      	str	r3, [r4, #0]
 801cde2:	bd38      	pop	{r3, r4, r5, pc}
 801cde4:	2000def4 	.word	0x2000def4

0801cde8 <__sflush_r>:
 801cde8:	898a      	ldrh	r2, [r1, #12]
 801cdea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdee:	4605      	mov	r5, r0
 801cdf0:	0710      	lsls	r0, r2, #28
 801cdf2:	460c      	mov	r4, r1
 801cdf4:	d458      	bmi.n	801cea8 <__sflush_r+0xc0>
 801cdf6:	684b      	ldr	r3, [r1, #4]
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	dc05      	bgt.n	801ce08 <__sflush_r+0x20>
 801cdfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	dc02      	bgt.n	801ce08 <__sflush_r+0x20>
 801ce02:	2000      	movs	r0, #0
 801ce04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ce0a:	2e00      	cmp	r6, #0
 801ce0c:	d0f9      	beq.n	801ce02 <__sflush_r+0x1a>
 801ce0e:	2300      	movs	r3, #0
 801ce10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ce14:	682f      	ldr	r7, [r5, #0]
 801ce16:	602b      	str	r3, [r5, #0]
 801ce18:	d032      	beq.n	801ce80 <__sflush_r+0x98>
 801ce1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ce1c:	89a3      	ldrh	r3, [r4, #12]
 801ce1e:	075a      	lsls	r2, r3, #29
 801ce20:	d505      	bpl.n	801ce2e <__sflush_r+0x46>
 801ce22:	6863      	ldr	r3, [r4, #4]
 801ce24:	1ac0      	subs	r0, r0, r3
 801ce26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ce28:	b10b      	cbz	r3, 801ce2e <__sflush_r+0x46>
 801ce2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ce2c:	1ac0      	subs	r0, r0, r3
 801ce2e:	2300      	movs	r3, #0
 801ce30:	4602      	mov	r2, r0
 801ce32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ce34:	6a21      	ldr	r1, [r4, #32]
 801ce36:	4628      	mov	r0, r5
 801ce38:	47b0      	blx	r6
 801ce3a:	1c43      	adds	r3, r0, #1
 801ce3c:	89a3      	ldrh	r3, [r4, #12]
 801ce3e:	d106      	bne.n	801ce4e <__sflush_r+0x66>
 801ce40:	6829      	ldr	r1, [r5, #0]
 801ce42:	291d      	cmp	r1, #29
 801ce44:	d82c      	bhi.n	801cea0 <__sflush_r+0xb8>
 801ce46:	4a2a      	ldr	r2, [pc, #168]	; (801cef0 <__sflush_r+0x108>)
 801ce48:	40ca      	lsrs	r2, r1
 801ce4a:	07d6      	lsls	r6, r2, #31
 801ce4c:	d528      	bpl.n	801cea0 <__sflush_r+0xb8>
 801ce4e:	2200      	movs	r2, #0
 801ce50:	6062      	str	r2, [r4, #4]
 801ce52:	04d9      	lsls	r1, r3, #19
 801ce54:	6922      	ldr	r2, [r4, #16]
 801ce56:	6022      	str	r2, [r4, #0]
 801ce58:	d504      	bpl.n	801ce64 <__sflush_r+0x7c>
 801ce5a:	1c42      	adds	r2, r0, #1
 801ce5c:	d101      	bne.n	801ce62 <__sflush_r+0x7a>
 801ce5e:	682b      	ldr	r3, [r5, #0]
 801ce60:	b903      	cbnz	r3, 801ce64 <__sflush_r+0x7c>
 801ce62:	6560      	str	r0, [r4, #84]	; 0x54
 801ce64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ce66:	602f      	str	r7, [r5, #0]
 801ce68:	2900      	cmp	r1, #0
 801ce6a:	d0ca      	beq.n	801ce02 <__sflush_r+0x1a>
 801ce6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ce70:	4299      	cmp	r1, r3
 801ce72:	d002      	beq.n	801ce7a <__sflush_r+0x92>
 801ce74:	4628      	mov	r0, r5
 801ce76:	f7ff fd3d 	bl	801c8f4 <_free_r>
 801ce7a:	2000      	movs	r0, #0
 801ce7c:	6360      	str	r0, [r4, #52]	; 0x34
 801ce7e:	e7c1      	b.n	801ce04 <__sflush_r+0x1c>
 801ce80:	6a21      	ldr	r1, [r4, #32]
 801ce82:	2301      	movs	r3, #1
 801ce84:	4628      	mov	r0, r5
 801ce86:	47b0      	blx	r6
 801ce88:	1c41      	adds	r1, r0, #1
 801ce8a:	d1c7      	bne.n	801ce1c <__sflush_r+0x34>
 801ce8c:	682b      	ldr	r3, [r5, #0]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d0c4      	beq.n	801ce1c <__sflush_r+0x34>
 801ce92:	2b1d      	cmp	r3, #29
 801ce94:	d001      	beq.n	801ce9a <__sflush_r+0xb2>
 801ce96:	2b16      	cmp	r3, #22
 801ce98:	d101      	bne.n	801ce9e <__sflush_r+0xb6>
 801ce9a:	602f      	str	r7, [r5, #0]
 801ce9c:	e7b1      	b.n	801ce02 <__sflush_r+0x1a>
 801ce9e:	89a3      	ldrh	r3, [r4, #12]
 801cea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cea4:	81a3      	strh	r3, [r4, #12]
 801cea6:	e7ad      	b.n	801ce04 <__sflush_r+0x1c>
 801cea8:	690f      	ldr	r7, [r1, #16]
 801ceaa:	2f00      	cmp	r7, #0
 801ceac:	d0a9      	beq.n	801ce02 <__sflush_r+0x1a>
 801ceae:	0793      	lsls	r3, r2, #30
 801ceb0:	680e      	ldr	r6, [r1, #0]
 801ceb2:	bf08      	it	eq
 801ceb4:	694b      	ldreq	r3, [r1, #20]
 801ceb6:	600f      	str	r7, [r1, #0]
 801ceb8:	bf18      	it	ne
 801ceba:	2300      	movne	r3, #0
 801cebc:	eba6 0807 	sub.w	r8, r6, r7
 801cec0:	608b      	str	r3, [r1, #8]
 801cec2:	f1b8 0f00 	cmp.w	r8, #0
 801cec6:	dd9c      	ble.n	801ce02 <__sflush_r+0x1a>
 801cec8:	6a21      	ldr	r1, [r4, #32]
 801ceca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cecc:	4643      	mov	r3, r8
 801cece:	463a      	mov	r2, r7
 801ced0:	4628      	mov	r0, r5
 801ced2:	47b0      	blx	r6
 801ced4:	2800      	cmp	r0, #0
 801ced6:	dc06      	bgt.n	801cee6 <__sflush_r+0xfe>
 801ced8:	89a3      	ldrh	r3, [r4, #12]
 801ceda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cede:	81a3      	strh	r3, [r4, #12]
 801cee0:	f04f 30ff 	mov.w	r0, #4294967295
 801cee4:	e78e      	b.n	801ce04 <__sflush_r+0x1c>
 801cee6:	4407      	add	r7, r0
 801cee8:	eba8 0800 	sub.w	r8, r8, r0
 801ceec:	e7e9      	b.n	801cec2 <__sflush_r+0xda>
 801ceee:	bf00      	nop
 801cef0:	20400001 	.word	0x20400001

0801cef4 <_fflush_r>:
 801cef4:	b538      	push	{r3, r4, r5, lr}
 801cef6:	690b      	ldr	r3, [r1, #16]
 801cef8:	4605      	mov	r5, r0
 801cefa:	460c      	mov	r4, r1
 801cefc:	b913      	cbnz	r3, 801cf04 <_fflush_r+0x10>
 801cefe:	2500      	movs	r5, #0
 801cf00:	4628      	mov	r0, r5
 801cf02:	bd38      	pop	{r3, r4, r5, pc}
 801cf04:	b118      	cbz	r0, 801cf0e <_fflush_r+0x1a>
 801cf06:	6983      	ldr	r3, [r0, #24]
 801cf08:	b90b      	cbnz	r3, 801cf0e <_fflush_r+0x1a>
 801cf0a:	f7ff fbe9 	bl	801c6e0 <__sinit>
 801cf0e:	4b14      	ldr	r3, [pc, #80]	; (801cf60 <_fflush_r+0x6c>)
 801cf10:	429c      	cmp	r4, r3
 801cf12:	d11b      	bne.n	801cf4c <_fflush_r+0x58>
 801cf14:	686c      	ldr	r4, [r5, #4]
 801cf16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d0ef      	beq.n	801cefe <_fflush_r+0xa>
 801cf1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cf20:	07d0      	lsls	r0, r2, #31
 801cf22:	d404      	bmi.n	801cf2e <_fflush_r+0x3a>
 801cf24:	0599      	lsls	r1, r3, #22
 801cf26:	d402      	bmi.n	801cf2e <_fflush_r+0x3a>
 801cf28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cf2a:	f7e8 f9ff 	bl	800532c <__retarget_lock_acquire_recursive>
 801cf2e:	4628      	mov	r0, r5
 801cf30:	4621      	mov	r1, r4
 801cf32:	f7ff ff59 	bl	801cde8 <__sflush_r>
 801cf36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cf38:	07da      	lsls	r2, r3, #31
 801cf3a:	4605      	mov	r5, r0
 801cf3c:	d4e0      	bmi.n	801cf00 <_fflush_r+0xc>
 801cf3e:	89a3      	ldrh	r3, [r4, #12]
 801cf40:	059b      	lsls	r3, r3, #22
 801cf42:	d4dd      	bmi.n	801cf00 <_fflush_r+0xc>
 801cf44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cf46:	f7e8 fa05 	bl	8005354 <__retarget_lock_release_recursive>
 801cf4a:	e7d9      	b.n	801cf00 <_fflush_r+0xc>
 801cf4c:	4b05      	ldr	r3, [pc, #20]	; (801cf64 <_fflush_r+0x70>)
 801cf4e:	429c      	cmp	r4, r3
 801cf50:	d101      	bne.n	801cf56 <_fflush_r+0x62>
 801cf52:	68ac      	ldr	r4, [r5, #8]
 801cf54:	e7df      	b.n	801cf16 <_fflush_r+0x22>
 801cf56:	4b04      	ldr	r3, [pc, #16]	; (801cf68 <_fflush_r+0x74>)
 801cf58:	429c      	cmp	r4, r3
 801cf5a:	bf08      	it	eq
 801cf5c:	68ec      	ldreq	r4, [r5, #12]
 801cf5e:	e7da      	b.n	801cf16 <_fflush_r+0x22>
 801cf60:	08021724 	.word	0x08021724
 801cf64:	08021744 	.word	0x08021744
 801cf68:	08021704 	.word	0x08021704

0801cf6c <fiprintf>:
 801cf6c:	b40e      	push	{r1, r2, r3}
 801cf6e:	b503      	push	{r0, r1, lr}
 801cf70:	4601      	mov	r1, r0
 801cf72:	ab03      	add	r3, sp, #12
 801cf74:	4805      	ldr	r0, [pc, #20]	; (801cf8c <fiprintf+0x20>)
 801cf76:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf7a:	6800      	ldr	r0, [r0, #0]
 801cf7c:	9301      	str	r3, [sp, #4]
 801cf7e:	f000 f9ab 	bl	801d2d8 <_vfiprintf_r>
 801cf82:	b002      	add	sp, #8
 801cf84:	f85d eb04 	ldr.w	lr, [sp], #4
 801cf88:	b003      	add	sp, #12
 801cf8a:	4770      	bx	lr
 801cf8c:	200002e0 	.word	0x200002e0

0801cf90 <_lseek_r>:
 801cf90:	b538      	push	{r3, r4, r5, lr}
 801cf92:	4d07      	ldr	r5, [pc, #28]	; (801cfb0 <_lseek_r+0x20>)
 801cf94:	4604      	mov	r4, r0
 801cf96:	4608      	mov	r0, r1
 801cf98:	4611      	mov	r1, r2
 801cf9a:	2200      	movs	r2, #0
 801cf9c:	602a      	str	r2, [r5, #0]
 801cf9e:	461a      	mov	r2, r3
 801cfa0:	f7e7 fe62 	bl	8004c68 <_lseek>
 801cfa4:	1c43      	adds	r3, r0, #1
 801cfa6:	d102      	bne.n	801cfae <_lseek_r+0x1e>
 801cfa8:	682b      	ldr	r3, [r5, #0]
 801cfaa:	b103      	cbz	r3, 801cfae <_lseek_r+0x1e>
 801cfac:	6023      	str	r3, [r4, #0]
 801cfae:	bd38      	pop	{r3, r4, r5, pc}
 801cfb0:	2000def4 	.word	0x2000def4

0801cfb4 <__malloc_lock>:
 801cfb4:	4801      	ldr	r0, [pc, #4]	; (801cfbc <__malloc_lock+0x8>)
 801cfb6:	f7e8 b9b9 	b.w	800532c <__retarget_lock_acquire_recursive>
 801cfba:	bf00      	nop
 801cfbc:	20001030 	.word	0x20001030

0801cfc0 <__malloc_unlock>:
 801cfc0:	4801      	ldr	r0, [pc, #4]	; (801cfc8 <__malloc_unlock+0x8>)
 801cfc2:	f7e8 b9c7 	b.w	8005354 <__retarget_lock_release_recursive>
 801cfc6:	bf00      	nop
 801cfc8:	20001030 	.word	0x20001030

0801cfcc <__ssputs_r>:
 801cfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cfd0:	688e      	ldr	r6, [r1, #8]
 801cfd2:	429e      	cmp	r6, r3
 801cfd4:	4682      	mov	sl, r0
 801cfd6:	460c      	mov	r4, r1
 801cfd8:	4690      	mov	r8, r2
 801cfda:	461f      	mov	r7, r3
 801cfdc:	d838      	bhi.n	801d050 <__ssputs_r+0x84>
 801cfde:	898a      	ldrh	r2, [r1, #12]
 801cfe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cfe4:	d032      	beq.n	801d04c <__ssputs_r+0x80>
 801cfe6:	6825      	ldr	r5, [r4, #0]
 801cfe8:	6909      	ldr	r1, [r1, #16]
 801cfea:	eba5 0901 	sub.w	r9, r5, r1
 801cfee:	6965      	ldr	r5, [r4, #20]
 801cff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cff8:	3301      	adds	r3, #1
 801cffa:	444b      	add	r3, r9
 801cffc:	106d      	asrs	r5, r5, #1
 801cffe:	429d      	cmp	r5, r3
 801d000:	bf38      	it	cc
 801d002:	461d      	movcc	r5, r3
 801d004:	0553      	lsls	r3, r2, #21
 801d006:	d531      	bpl.n	801d06c <__ssputs_r+0xa0>
 801d008:	4629      	mov	r1, r5
 801d00a:	f7ff fcdf 	bl	801c9cc <_malloc_r>
 801d00e:	4606      	mov	r6, r0
 801d010:	b950      	cbnz	r0, 801d028 <__ssputs_r+0x5c>
 801d012:	230c      	movs	r3, #12
 801d014:	f8ca 3000 	str.w	r3, [sl]
 801d018:	89a3      	ldrh	r3, [r4, #12]
 801d01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d01e:	81a3      	strh	r3, [r4, #12]
 801d020:	f04f 30ff 	mov.w	r0, #4294967295
 801d024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d028:	6921      	ldr	r1, [r4, #16]
 801d02a:	464a      	mov	r2, r9
 801d02c:	f7ff fc32 	bl	801c894 <memcpy>
 801d030:	89a3      	ldrh	r3, [r4, #12]
 801d032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d03a:	81a3      	strh	r3, [r4, #12]
 801d03c:	6126      	str	r6, [r4, #16]
 801d03e:	6165      	str	r5, [r4, #20]
 801d040:	444e      	add	r6, r9
 801d042:	eba5 0509 	sub.w	r5, r5, r9
 801d046:	6026      	str	r6, [r4, #0]
 801d048:	60a5      	str	r5, [r4, #8]
 801d04a:	463e      	mov	r6, r7
 801d04c:	42be      	cmp	r6, r7
 801d04e:	d900      	bls.n	801d052 <__ssputs_r+0x86>
 801d050:	463e      	mov	r6, r7
 801d052:	6820      	ldr	r0, [r4, #0]
 801d054:	4632      	mov	r2, r6
 801d056:	4641      	mov	r1, r8
 801d058:	f7ff fc2a 	bl	801c8b0 <memmove>
 801d05c:	68a3      	ldr	r3, [r4, #8]
 801d05e:	1b9b      	subs	r3, r3, r6
 801d060:	60a3      	str	r3, [r4, #8]
 801d062:	6823      	ldr	r3, [r4, #0]
 801d064:	4433      	add	r3, r6
 801d066:	6023      	str	r3, [r4, #0]
 801d068:	2000      	movs	r0, #0
 801d06a:	e7db      	b.n	801d024 <__ssputs_r+0x58>
 801d06c:	462a      	mov	r2, r5
 801d06e:	f000 fd35 	bl	801dadc <_realloc_r>
 801d072:	4606      	mov	r6, r0
 801d074:	2800      	cmp	r0, #0
 801d076:	d1e1      	bne.n	801d03c <__ssputs_r+0x70>
 801d078:	6921      	ldr	r1, [r4, #16]
 801d07a:	4650      	mov	r0, sl
 801d07c:	f7ff fc3a 	bl	801c8f4 <_free_r>
 801d080:	e7c7      	b.n	801d012 <__ssputs_r+0x46>
	...

0801d084 <_svfiprintf_r>:
 801d084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d088:	4698      	mov	r8, r3
 801d08a:	898b      	ldrh	r3, [r1, #12]
 801d08c:	061b      	lsls	r3, r3, #24
 801d08e:	b09d      	sub	sp, #116	; 0x74
 801d090:	4607      	mov	r7, r0
 801d092:	460d      	mov	r5, r1
 801d094:	4614      	mov	r4, r2
 801d096:	d50e      	bpl.n	801d0b6 <_svfiprintf_r+0x32>
 801d098:	690b      	ldr	r3, [r1, #16]
 801d09a:	b963      	cbnz	r3, 801d0b6 <_svfiprintf_r+0x32>
 801d09c:	2140      	movs	r1, #64	; 0x40
 801d09e:	f7ff fc95 	bl	801c9cc <_malloc_r>
 801d0a2:	6028      	str	r0, [r5, #0]
 801d0a4:	6128      	str	r0, [r5, #16]
 801d0a6:	b920      	cbnz	r0, 801d0b2 <_svfiprintf_r+0x2e>
 801d0a8:	230c      	movs	r3, #12
 801d0aa:	603b      	str	r3, [r7, #0]
 801d0ac:	f04f 30ff 	mov.w	r0, #4294967295
 801d0b0:	e0d1      	b.n	801d256 <_svfiprintf_r+0x1d2>
 801d0b2:	2340      	movs	r3, #64	; 0x40
 801d0b4:	616b      	str	r3, [r5, #20]
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	9309      	str	r3, [sp, #36]	; 0x24
 801d0ba:	2320      	movs	r3, #32
 801d0bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d0c0:	f8cd 800c 	str.w	r8, [sp, #12]
 801d0c4:	2330      	movs	r3, #48	; 0x30
 801d0c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d270 <_svfiprintf_r+0x1ec>
 801d0ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d0ce:	f04f 0901 	mov.w	r9, #1
 801d0d2:	4623      	mov	r3, r4
 801d0d4:	469a      	mov	sl, r3
 801d0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d0da:	b10a      	cbz	r2, 801d0e0 <_svfiprintf_r+0x5c>
 801d0dc:	2a25      	cmp	r2, #37	; 0x25
 801d0de:	d1f9      	bne.n	801d0d4 <_svfiprintf_r+0x50>
 801d0e0:	ebba 0b04 	subs.w	fp, sl, r4
 801d0e4:	d00b      	beq.n	801d0fe <_svfiprintf_r+0x7a>
 801d0e6:	465b      	mov	r3, fp
 801d0e8:	4622      	mov	r2, r4
 801d0ea:	4629      	mov	r1, r5
 801d0ec:	4638      	mov	r0, r7
 801d0ee:	f7ff ff6d 	bl	801cfcc <__ssputs_r>
 801d0f2:	3001      	adds	r0, #1
 801d0f4:	f000 80aa 	beq.w	801d24c <_svfiprintf_r+0x1c8>
 801d0f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d0fa:	445a      	add	r2, fp
 801d0fc:	9209      	str	r2, [sp, #36]	; 0x24
 801d0fe:	f89a 3000 	ldrb.w	r3, [sl]
 801d102:	2b00      	cmp	r3, #0
 801d104:	f000 80a2 	beq.w	801d24c <_svfiprintf_r+0x1c8>
 801d108:	2300      	movs	r3, #0
 801d10a:	f04f 32ff 	mov.w	r2, #4294967295
 801d10e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d112:	f10a 0a01 	add.w	sl, sl, #1
 801d116:	9304      	str	r3, [sp, #16]
 801d118:	9307      	str	r3, [sp, #28]
 801d11a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d11e:	931a      	str	r3, [sp, #104]	; 0x68
 801d120:	4654      	mov	r4, sl
 801d122:	2205      	movs	r2, #5
 801d124:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d128:	4851      	ldr	r0, [pc, #324]	; (801d270 <_svfiprintf_r+0x1ec>)
 801d12a:	f7e3 f859 	bl	80001e0 <memchr>
 801d12e:	9a04      	ldr	r2, [sp, #16]
 801d130:	b9d8      	cbnz	r0, 801d16a <_svfiprintf_r+0xe6>
 801d132:	06d0      	lsls	r0, r2, #27
 801d134:	bf44      	itt	mi
 801d136:	2320      	movmi	r3, #32
 801d138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d13c:	0711      	lsls	r1, r2, #28
 801d13e:	bf44      	itt	mi
 801d140:	232b      	movmi	r3, #43	; 0x2b
 801d142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d146:	f89a 3000 	ldrb.w	r3, [sl]
 801d14a:	2b2a      	cmp	r3, #42	; 0x2a
 801d14c:	d015      	beq.n	801d17a <_svfiprintf_r+0xf6>
 801d14e:	9a07      	ldr	r2, [sp, #28]
 801d150:	4654      	mov	r4, sl
 801d152:	2000      	movs	r0, #0
 801d154:	f04f 0c0a 	mov.w	ip, #10
 801d158:	4621      	mov	r1, r4
 801d15a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d15e:	3b30      	subs	r3, #48	; 0x30
 801d160:	2b09      	cmp	r3, #9
 801d162:	d94e      	bls.n	801d202 <_svfiprintf_r+0x17e>
 801d164:	b1b0      	cbz	r0, 801d194 <_svfiprintf_r+0x110>
 801d166:	9207      	str	r2, [sp, #28]
 801d168:	e014      	b.n	801d194 <_svfiprintf_r+0x110>
 801d16a:	eba0 0308 	sub.w	r3, r0, r8
 801d16e:	fa09 f303 	lsl.w	r3, r9, r3
 801d172:	4313      	orrs	r3, r2
 801d174:	9304      	str	r3, [sp, #16]
 801d176:	46a2      	mov	sl, r4
 801d178:	e7d2      	b.n	801d120 <_svfiprintf_r+0x9c>
 801d17a:	9b03      	ldr	r3, [sp, #12]
 801d17c:	1d19      	adds	r1, r3, #4
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	9103      	str	r1, [sp, #12]
 801d182:	2b00      	cmp	r3, #0
 801d184:	bfbb      	ittet	lt
 801d186:	425b      	neglt	r3, r3
 801d188:	f042 0202 	orrlt.w	r2, r2, #2
 801d18c:	9307      	strge	r3, [sp, #28]
 801d18e:	9307      	strlt	r3, [sp, #28]
 801d190:	bfb8      	it	lt
 801d192:	9204      	strlt	r2, [sp, #16]
 801d194:	7823      	ldrb	r3, [r4, #0]
 801d196:	2b2e      	cmp	r3, #46	; 0x2e
 801d198:	d10c      	bne.n	801d1b4 <_svfiprintf_r+0x130>
 801d19a:	7863      	ldrb	r3, [r4, #1]
 801d19c:	2b2a      	cmp	r3, #42	; 0x2a
 801d19e:	d135      	bne.n	801d20c <_svfiprintf_r+0x188>
 801d1a0:	9b03      	ldr	r3, [sp, #12]
 801d1a2:	1d1a      	adds	r2, r3, #4
 801d1a4:	681b      	ldr	r3, [r3, #0]
 801d1a6:	9203      	str	r2, [sp, #12]
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	bfb8      	it	lt
 801d1ac:	f04f 33ff 	movlt.w	r3, #4294967295
 801d1b0:	3402      	adds	r4, #2
 801d1b2:	9305      	str	r3, [sp, #20]
 801d1b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d280 <_svfiprintf_r+0x1fc>
 801d1b8:	7821      	ldrb	r1, [r4, #0]
 801d1ba:	2203      	movs	r2, #3
 801d1bc:	4650      	mov	r0, sl
 801d1be:	f7e3 f80f 	bl	80001e0 <memchr>
 801d1c2:	b140      	cbz	r0, 801d1d6 <_svfiprintf_r+0x152>
 801d1c4:	2340      	movs	r3, #64	; 0x40
 801d1c6:	eba0 000a 	sub.w	r0, r0, sl
 801d1ca:	fa03 f000 	lsl.w	r0, r3, r0
 801d1ce:	9b04      	ldr	r3, [sp, #16]
 801d1d0:	4303      	orrs	r3, r0
 801d1d2:	3401      	adds	r4, #1
 801d1d4:	9304      	str	r3, [sp, #16]
 801d1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d1da:	4826      	ldr	r0, [pc, #152]	; (801d274 <_svfiprintf_r+0x1f0>)
 801d1dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d1e0:	2206      	movs	r2, #6
 801d1e2:	f7e2 fffd 	bl	80001e0 <memchr>
 801d1e6:	2800      	cmp	r0, #0
 801d1e8:	d038      	beq.n	801d25c <_svfiprintf_r+0x1d8>
 801d1ea:	4b23      	ldr	r3, [pc, #140]	; (801d278 <_svfiprintf_r+0x1f4>)
 801d1ec:	bb1b      	cbnz	r3, 801d236 <_svfiprintf_r+0x1b2>
 801d1ee:	9b03      	ldr	r3, [sp, #12]
 801d1f0:	3307      	adds	r3, #7
 801d1f2:	f023 0307 	bic.w	r3, r3, #7
 801d1f6:	3308      	adds	r3, #8
 801d1f8:	9303      	str	r3, [sp, #12]
 801d1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1fc:	4433      	add	r3, r6
 801d1fe:	9309      	str	r3, [sp, #36]	; 0x24
 801d200:	e767      	b.n	801d0d2 <_svfiprintf_r+0x4e>
 801d202:	fb0c 3202 	mla	r2, ip, r2, r3
 801d206:	460c      	mov	r4, r1
 801d208:	2001      	movs	r0, #1
 801d20a:	e7a5      	b.n	801d158 <_svfiprintf_r+0xd4>
 801d20c:	2300      	movs	r3, #0
 801d20e:	3401      	adds	r4, #1
 801d210:	9305      	str	r3, [sp, #20]
 801d212:	4619      	mov	r1, r3
 801d214:	f04f 0c0a 	mov.w	ip, #10
 801d218:	4620      	mov	r0, r4
 801d21a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d21e:	3a30      	subs	r2, #48	; 0x30
 801d220:	2a09      	cmp	r2, #9
 801d222:	d903      	bls.n	801d22c <_svfiprintf_r+0x1a8>
 801d224:	2b00      	cmp	r3, #0
 801d226:	d0c5      	beq.n	801d1b4 <_svfiprintf_r+0x130>
 801d228:	9105      	str	r1, [sp, #20]
 801d22a:	e7c3      	b.n	801d1b4 <_svfiprintf_r+0x130>
 801d22c:	fb0c 2101 	mla	r1, ip, r1, r2
 801d230:	4604      	mov	r4, r0
 801d232:	2301      	movs	r3, #1
 801d234:	e7f0      	b.n	801d218 <_svfiprintf_r+0x194>
 801d236:	ab03      	add	r3, sp, #12
 801d238:	9300      	str	r3, [sp, #0]
 801d23a:	462a      	mov	r2, r5
 801d23c:	4b0f      	ldr	r3, [pc, #60]	; (801d27c <_svfiprintf_r+0x1f8>)
 801d23e:	a904      	add	r1, sp, #16
 801d240:	4638      	mov	r0, r7
 801d242:	f3af 8000 	nop.w
 801d246:	1c42      	adds	r2, r0, #1
 801d248:	4606      	mov	r6, r0
 801d24a:	d1d6      	bne.n	801d1fa <_svfiprintf_r+0x176>
 801d24c:	89ab      	ldrh	r3, [r5, #12]
 801d24e:	065b      	lsls	r3, r3, #25
 801d250:	f53f af2c 	bmi.w	801d0ac <_svfiprintf_r+0x28>
 801d254:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d256:	b01d      	add	sp, #116	; 0x74
 801d258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d25c:	ab03      	add	r3, sp, #12
 801d25e:	9300      	str	r3, [sp, #0]
 801d260:	462a      	mov	r2, r5
 801d262:	4b06      	ldr	r3, [pc, #24]	; (801d27c <_svfiprintf_r+0x1f8>)
 801d264:	a904      	add	r1, sp, #16
 801d266:	4638      	mov	r0, r7
 801d268:	f000 f9d4 	bl	801d614 <_printf_i>
 801d26c:	e7eb      	b.n	801d246 <_svfiprintf_r+0x1c2>
 801d26e:	bf00      	nop
 801d270:	08021816 	.word	0x08021816
 801d274:	08021820 	.word	0x08021820
 801d278:	00000000 	.word	0x00000000
 801d27c:	0801cfcd 	.word	0x0801cfcd
 801d280:	0802181c 	.word	0x0802181c

0801d284 <__sfputc_r>:
 801d284:	6893      	ldr	r3, [r2, #8]
 801d286:	3b01      	subs	r3, #1
 801d288:	2b00      	cmp	r3, #0
 801d28a:	b410      	push	{r4}
 801d28c:	6093      	str	r3, [r2, #8]
 801d28e:	da08      	bge.n	801d2a2 <__sfputc_r+0x1e>
 801d290:	6994      	ldr	r4, [r2, #24]
 801d292:	42a3      	cmp	r3, r4
 801d294:	db01      	blt.n	801d29a <__sfputc_r+0x16>
 801d296:	290a      	cmp	r1, #10
 801d298:	d103      	bne.n	801d2a2 <__sfputc_r+0x1e>
 801d29a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d29e:	f000 baf1 	b.w	801d884 <__swbuf_r>
 801d2a2:	6813      	ldr	r3, [r2, #0]
 801d2a4:	1c58      	adds	r0, r3, #1
 801d2a6:	6010      	str	r0, [r2, #0]
 801d2a8:	7019      	strb	r1, [r3, #0]
 801d2aa:	4608      	mov	r0, r1
 801d2ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d2b0:	4770      	bx	lr

0801d2b2 <__sfputs_r>:
 801d2b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2b4:	4606      	mov	r6, r0
 801d2b6:	460f      	mov	r7, r1
 801d2b8:	4614      	mov	r4, r2
 801d2ba:	18d5      	adds	r5, r2, r3
 801d2bc:	42ac      	cmp	r4, r5
 801d2be:	d101      	bne.n	801d2c4 <__sfputs_r+0x12>
 801d2c0:	2000      	movs	r0, #0
 801d2c2:	e007      	b.n	801d2d4 <__sfputs_r+0x22>
 801d2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d2c8:	463a      	mov	r2, r7
 801d2ca:	4630      	mov	r0, r6
 801d2cc:	f7ff ffda 	bl	801d284 <__sfputc_r>
 801d2d0:	1c43      	adds	r3, r0, #1
 801d2d2:	d1f3      	bne.n	801d2bc <__sfputs_r+0xa>
 801d2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d2d8 <_vfiprintf_r>:
 801d2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2dc:	460d      	mov	r5, r1
 801d2de:	b09d      	sub	sp, #116	; 0x74
 801d2e0:	4614      	mov	r4, r2
 801d2e2:	4698      	mov	r8, r3
 801d2e4:	4606      	mov	r6, r0
 801d2e6:	b118      	cbz	r0, 801d2f0 <_vfiprintf_r+0x18>
 801d2e8:	6983      	ldr	r3, [r0, #24]
 801d2ea:	b90b      	cbnz	r3, 801d2f0 <_vfiprintf_r+0x18>
 801d2ec:	f7ff f9f8 	bl	801c6e0 <__sinit>
 801d2f0:	4b89      	ldr	r3, [pc, #548]	; (801d518 <_vfiprintf_r+0x240>)
 801d2f2:	429d      	cmp	r5, r3
 801d2f4:	d11b      	bne.n	801d32e <_vfiprintf_r+0x56>
 801d2f6:	6875      	ldr	r5, [r6, #4]
 801d2f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d2fa:	07d9      	lsls	r1, r3, #31
 801d2fc:	d405      	bmi.n	801d30a <_vfiprintf_r+0x32>
 801d2fe:	89ab      	ldrh	r3, [r5, #12]
 801d300:	059a      	lsls	r2, r3, #22
 801d302:	d402      	bmi.n	801d30a <_vfiprintf_r+0x32>
 801d304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d306:	f7e8 f811 	bl	800532c <__retarget_lock_acquire_recursive>
 801d30a:	89ab      	ldrh	r3, [r5, #12]
 801d30c:	071b      	lsls	r3, r3, #28
 801d30e:	d501      	bpl.n	801d314 <_vfiprintf_r+0x3c>
 801d310:	692b      	ldr	r3, [r5, #16]
 801d312:	b9eb      	cbnz	r3, 801d350 <_vfiprintf_r+0x78>
 801d314:	4629      	mov	r1, r5
 801d316:	4630      	mov	r0, r6
 801d318:	f000 fb06 	bl	801d928 <__swsetup_r>
 801d31c:	b1c0      	cbz	r0, 801d350 <_vfiprintf_r+0x78>
 801d31e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d320:	07dc      	lsls	r4, r3, #31
 801d322:	d50e      	bpl.n	801d342 <_vfiprintf_r+0x6a>
 801d324:	f04f 30ff 	mov.w	r0, #4294967295
 801d328:	b01d      	add	sp, #116	; 0x74
 801d32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d32e:	4b7b      	ldr	r3, [pc, #492]	; (801d51c <_vfiprintf_r+0x244>)
 801d330:	429d      	cmp	r5, r3
 801d332:	d101      	bne.n	801d338 <_vfiprintf_r+0x60>
 801d334:	68b5      	ldr	r5, [r6, #8]
 801d336:	e7df      	b.n	801d2f8 <_vfiprintf_r+0x20>
 801d338:	4b79      	ldr	r3, [pc, #484]	; (801d520 <_vfiprintf_r+0x248>)
 801d33a:	429d      	cmp	r5, r3
 801d33c:	bf08      	it	eq
 801d33e:	68f5      	ldreq	r5, [r6, #12]
 801d340:	e7da      	b.n	801d2f8 <_vfiprintf_r+0x20>
 801d342:	89ab      	ldrh	r3, [r5, #12]
 801d344:	0598      	lsls	r0, r3, #22
 801d346:	d4ed      	bmi.n	801d324 <_vfiprintf_r+0x4c>
 801d348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d34a:	f7e8 f803 	bl	8005354 <__retarget_lock_release_recursive>
 801d34e:	e7e9      	b.n	801d324 <_vfiprintf_r+0x4c>
 801d350:	2300      	movs	r3, #0
 801d352:	9309      	str	r3, [sp, #36]	; 0x24
 801d354:	2320      	movs	r3, #32
 801d356:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d35a:	f8cd 800c 	str.w	r8, [sp, #12]
 801d35e:	2330      	movs	r3, #48	; 0x30
 801d360:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d524 <_vfiprintf_r+0x24c>
 801d364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d368:	f04f 0901 	mov.w	r9, #1
 801d36c:	4623      	mov	r3, r4
 801d36e:	469a      	mov	sl, r3
 801d370:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d374:	b10a      	cbz	r2, 801d37a <_vfiprintf_r+0xa2>
 801d376:	2a25      	cmp	r2, #37	; 0x25
 801d378:	d1f9      	bne.n	801d36e <_vfiprintf_r+0x96>
 801d37a:	ebba 0b04 	subs.w	fp, sl, r4
 801d37e:	d00b      	beq.n	801d398 <_vfiprintf_r+0xc0>
 801d380:	465b      	mov	r3, fp
 801d382:	4622      	mov	r2, r4
 801d384:	4629      	mov	r1, r5
 801d386:	4630      	mov	r0, r6
 801d388:	f7ff ff93 	bl	801d2b2 <__sfputs_r>
 801d38c:	3001      	adds	r0, #1
 801d38e:	f000 80aa 	beq.w	801d4e6 <_vfiprintf_r+0x20e>
 801d392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d394:	445a      	add	r2, fp
 801d396:	9209      	str	r2, [sp, #36]	; 0x24
 801d398:	f89a 3000 	ldrb.w	r3, [sl]
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	f000 80a2 	beq.w	801d4e6 <_vfiprintf_r+0x20e>
 801d3a2:	2300      	movs	r3, #0
 801d3a4:	f04f 32ff 	mov.w	r2, #4294967295
 801d3a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d3ac:	f10a 0a01 	add.w	sl, sl, #1
 801d3b0:	9304      	str	r3, [sp, #16]
 801d3b2:	9307      	str	r3, [sp, #28]
 801d3b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d3b8:	931a      	str	r3, [sp, #104]	; 0x68
 801d3ba:	4654      	mov	r4, sl
 801d3bc:	2205      	movs	r2, #5
 801d3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d3c2:	4858      	ldr	r0, [pc, #352]	; (801d524 <_vfiprintf_r+0x24c>)
 801d3c4:	f7e2 ff0c 	bl	80001e0 <memchr>
 801d3c8:	9a04      	ldr	r2, [sp, #16]
 801d3ca:	b9d8      	cbnz	r0, 801d404 <_vfiprintf_r+0x12c>
 801d3cc:	06d1      	lsls	r1, r2, #27
 801d3ce:	bf44      	itt	mi
 801d3d0:	2320      	movmi	r3, #32
 801d3d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d3d6:	0713      	lsls	r3, r2, #28
 801d3d8:	bf44      	itt	mi
 801d3da:	232b      	movmi	r3, #43	; 0x2b
 801d3dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d3e0:	f89a 3000 	ldrb.w	r3, [sl]
 801d3e4:	2b2a      	cmp	r3, #42	; 0x2a
 801d3e6:	d015      	beq.n	801d414 <_vfiprintf_r+0x13c>
 801d3e8:	9a07      	ldr	r2, [sp, #28]
 801d3ea:	4654      	mov	r4, sl
 801d3ec:	2000      	movs	r0, #0
 801d3ee:	f04f 0c0a 	mov.w	ip, #10
 801d3f2:	4621      	mov	r1, r4
 801d3f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d3f8:	3b30      	subs	r3, #48	; 0x30
 801d3fa:	2b09      	cmp	r3, #9
 801d3fc:	d94e      	bls.n	801d49c <_vfiprintf_r+0x1c4>
 801d3fe:	b1b0      	cbz	r0, 801d42e <_vfiprintf_r+0x156>
 801d400:	9207      	str	r2, [sp, #28]
 801d402:	e014      	b.n	801d42e <_vfiprintf_r+0x156>
 801d404:	eba0 0308 	sub.w	r3, r0, r8
 801d408:	fa09 f303 	lsl.w	r3, r9, r3
 801d40c:	4313      	orrs	r3, r2
 801d40e:	9304      	str	r3, [sp, #16]
 801d410:	46a2      	mov	sl, r4
 801d412:	e7d2      	b.n	801d3ba <_vfiprintf_r+0xe2>
 801d414:	9b03      	ldr	r3, [sp, #12]
 801d416:	1d19      	adds	r1, r3, #4
 801d418:	681b      	ldr	r3, [r3, #0]
 801d41a:	9103      	str	r1, [sp, #12]
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	bfbb      	ittet	lt
 801d420:	425b      	neglt	r3, r3
 801d422:	f042 0202 	orrlt.w	r2, r2, #2
 801d426:	9307      	strge	r3, [sp, #28]
 801d428:	9307      	strlt	r3, [sp, #28]
 801d42a:	bfb8      	it	lt
 801d42c:	9204      	strlt	r2, [sp, #16]
 801d42e:	7823      	ldrb	r3, [r4, #0]
 801d430:	2b2e      	cmp	r3, #46	; 0x2e
 801d432:	d10c      	bne.n	801d44e <_vfiprintf_r+0x176>
 801d434:	7863      	ldrb	r3, [r4, #1]
 801d436:	2b2a      	cmp	r3, #42	; 0x2a
 801d438:	d135      	bne.n	801d4a6 <_vfiprintf_r+0x1ce>
 801d43a:	9b03      	ldr	r3, [sp, #12]
 801d43c:	1d1a      	adds	r2, r3, #4
 801d43e:	681b      	ldr	r3, [r3, #0]
 801d440:	9203      	str	r2, [sp, #12]
 801d442:	2b00      	cmp	r3, #0
 801d444:	bfb8      	it	lt
 801d446:	f04f 33ff 	movlt.w	r3, #4294967295
 801d44a:	3402      	adds	r4, #2
 801d44c:	9305      	str	r3, [sp, #20]
 801d44e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d534 <_vfiprintf_r+0x25c>
 801d452:	7821      	ldrb	r1, [r4, #0]
 801d454:	2203      	movs	r2, #3
 801d456:	4650      	mov	r0, sl
 801d458:	f7e2 fec2 	bl	80001e0 <memchr>
 801d45c:	b140      	cbz	r0, 801d470 <_vfiprintf_r+0x198>
 801d45e:	2340      	movs	r3, #64	; 0x40
 801d460:	eba0 000a 	sub.w	r0, r0, sl
 801d464:	fa03 f000 	lsl.w	r0, r3, r0
 801d468:	9b04      	ldr	r3, [sp, #16]
 801d46a:	4303      	orrs	r3, r0
 801d46c:	3401      	adds	r4, #1
 801d46e:	9304      	str	r3, [sp, #16]
 801d470:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d474:	482c      	ldr	r0, [pc, #176]	; (801d528 <_vfiprintf_r+0x250>)
 801d476:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d47a:	2206      	movs	r2, #6
 801d47c:	f7e2 feb0 	bl	80001e0 <memchr>
 801d480:	2800      	cmp	r0, #0
 801d482:	d03f      	beq.n	801d504 <_vfiprintf_r+0x22c>
 801d484:	4b29      	ldr	r3, [pc, #164]	; (801d52c <_vfiprintf_r+0x254>)
 801d486:	bb1b      	cbnz	r3, 801d4d0 <_vfiprintf_r+0x1f8>
 801d488:	9b03      	ldr	r3, [sp, #12]
 801d48a:	3307      	adds	r3, #7
 801d48c:	f023 0307 	bic.w	r3, r3, #7
 801d490:	3308      	adds	r3, #8
 801d492:	9303      	str	r3, [sp, #12]
 801d494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d496:	443b      	add	r3, r7
 801d498:	9309      	str	r3, [sp, #36]	; 0x24
 801d49a:	e767      	b.n	801d36c <_vfiprintf_r+0x94>
 801d49c:	fb0c 3202 	mla	r2, ip, r2, r3
 801d4a0:	460c      	mov	r4, r1
 801d4a2:	2001      	movs	r0, #1
 801d4a4:	e7a5      	b.n	801d3f2 <_vfiprintf_r+0x11a>
 801d4a6:	2300      	movs	r3, #0
 801d4a8:	3401      	adds	r4, #1
 801d4aa:	9305      	str	r3, [sp, #20]
 801d4ac:	4619      	mov	r1, r3
 801d4ae:	f04f 0c0a 	mov.w	ip, #10
 801d4b2:	4620      	mov	r0, r4
 801d4b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d4b8:	3a30      	subs	r2, #48	; 0x30
 801d4ba:	2a09      	cmp	r2, #9
 801d4bc:	d903      	bls.n	801d4c6 <_vfiprintf_r+0x1ee>
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d0c5      	beq.n	801d44e <_vfiprintf_r+0x176>
 801d4c2:	9105      	str	r1, [sp, #20]
 801d4c4:	e7c3      	b.n	801d44e <_vfiprintf_r+0x176>
 801d4c6:	fb0c 2101 	mla	r1, ip, r1, r2
 801d4ca:	4604      	mov	r4, r0
 801d4cc:	2301      	movs	r3, #1
 801d4ce:	e7f0      	b.n	801d4b2 <_vfiprintf_r+0x1da>
 801d4d0:	ab03      	add	r3, sp, #12
 801d4d2:	9300      	str	r3, [sp, #0]
 801d4d4:	462a      	mov	r2, r5
 801d4d6:	4b16      	ldr	r3, [pc, #88]	; (801d530 <_vfiprintf_r+0x258>)
 801d4d8:	a904      	add	r1, sp, #16
 801d4da:	4630      	mov	r0, r6
 801d4dc:	f3af 8000 	nop.w
 801d4e0:	4607      	mov	r7, r0
 801d4e2:	1c78      	adds	r0, r7, #1
 801d4e4:	d1d6      	bne.n	801d494 <_vfiprintf_r+0x1bc>
 801d4e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d4e8:	07d9      	lsls	r1, r3, #31
 801d4ea:	d405      	bmi.n	801d4f8 <_vfiprintf_r+0x220>
 801d4ec:	89ab      	ldrh	r3, [r5, #12]
 801d4ee:	059a      	lsls	r2, r3, #22
 801d4f0:	d402      	bmi.n	801d4f8 <_vfiprintf_r+0x220>
 801d4f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d4f4:	f7e7 ff2e 	bl	8005354 <__retarget_lock_release_recursive>
 801d4f8:	89ab      	ldrh	r3, [r5, #12]
 801d4fa:	065b      	lsls	r3, r3, #25
 801d4fc:	f53f af12 	bmi.w	801d324 <_vfiprintf_r+0x4c>
 801d500:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d502:	e711      	b.n	801d328 <_vfiprintf_r+0x50>
 801d504:	ab03      	add	r3, sp, #12
 801d506:	9300      	str	r3, [sp, #0]
 801d508:	462a      	mov	r2, r5
 801d50a:	4b09      	ldr	r3, [pc, #36]	; (801d530 <_vfiprintf_r+0x258>)
 801d50c:	a904      	add	r1, sp, #16
 801d50e:	4630      	mov	r0, r6
 801d510:	f000 f880 	bl	801d614 <_printf_i>
 801d514:	e7e4      	b.n	801d4e0 <_vfiprintf_r+0x208>
 801d516:	bf00      	nop
 801d518:	08021724 	.word	0x08021724
 801d51c:	08021744 	.word	0x08021744
 801d520:	08021704 	.word	0x08021704
 801d524:	08021816 	.word	0x08021816
 801d528:	08021820 	.word	0x08021820
 801d52c:	00000000 	.word	0x00000000
 801d530:	0801d2b3 	.word	0x0801d2b3
 801d534:	0802181c 	.word	0x0802181c

0801d538 <_printf_common>:
 801d538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d53c:	4616      	mov	r6, r2
 801d53e:	4699      	mov	r9, r3
 801d540:	688a      	ldr	r2, [r1, #8]
 801d542:	690b      	ldr	r3, [r1, #16]
 801d544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d548:	4293      	cmp	r3, r2
 801d54a:	bfb8      	it	lt
 801d54c:	4613      	movlt	r3, r2
 801d54e:	6033      	str	r3, [r6, #0]
 801d550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d554:	4607      	mov	r7, r0
 801d556:	460c      	mov	r4, r1
 801d558:	b10a      	cbz	r2, 801d55e <_printf_common+0x26>
 801d55a:	3301      	adds	r3, #1
 801d55c:	6033      	str	r3, [r6, #0]
 801d55e:	6823      	ldr	r3, [r4, #0]
 801d560:	0699      	lsls	r1, r3, #26
 801d562:	bf42      	ittt	mi
 801d564:	6833      	ldrmi	r3, [r6, #0]
 801d566:	3302      	addmi	r3, #2
 801d568:	6033      	strmi	r3, [r6, #0]
 801d56a:	6825      	ldr	r5, [r4, #0]
 801d56c:	f015 0506 	ands.w	r5, r5, #6
 801d570:	d106      	bne.n	801d580 <_printf_common+0x48>
 801d572:	f104 0a19 	add.w	sl, r4, #25
 801d576:	68e3      	ldr	r3, [r4, #12]
 801d578:	6832      	ldr	r2, [r6, #0]
 801d57a:	1a9b      	subs	r3, r3, r2
 801d57c:	42ab      	cmp	r3, r5
 801d57e:	dc26      	bgt.n	801d5ce <_printf_common+0x96>
 801d580:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d584:	1e13      	subs	r3, r2, #0
 801d586:	6822      	ldr	r2, [r4, #0]
 801d588:	bf18      	it	ne
 801d58a:	2301      	movne	r3, #1
 801d58c:	0692      	lsls	r2, r2, #26
 801d58e:	d42b      	bmi.n	801d5e8 <_printf_common+0xb0>
 801d590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d594:	4649      	mov	r1, r9
 801d596:	4638      	mov	r0, r7
 801d598:	47c0      	blx	r8
 801d59a:	3001      	adds	r0, #1
 801d59c:	d01e      	beq.n	801d5dc <_printf_common+0xa4>
 801d59e:	6823      	ldr	r3, [r4, #0]
 801d5a0:	68e5      	ldr	r5, [r4, #12]
 801d5a2:	6832      	ldr	r2, [r6, #0]
 801d5a4:	f003 0306 	and.w	r3, r3, #6
 801d5a8:	2b04      	cmp	r3, #4
 801d5aa:	bf08      	it	eq
 801d5ac:	1aad      	subeq	r5, r5, r2
 801d5ae:	68a3      	ldr	r3, [r4, #8]
 801d5b0:	6922      	ldr	r2, [r4, #16]
 801d5b2:	bf0c      	ite	eq
 801d5b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d5b8:	2500      	movne	r5, #0
 801d5ba:	4293      	cmp	r3, r2
 801d5bc:	bfc4      	itt	gt
 801d5be:	1a9b      	subgt	r3, r3, r2
 801d5c0:	18ed      	addgt	r5, r5, r3
 801d5c2:	2600      	movs	r6, #0
 801d5c4:	341a      	adds	r4, #26
 801d5c6:	42b5      	cmp	r5, r6
 801d5c8:	d11a      	bne.n	801d600 <_printf_common+0xc8>
 801d5ca:	2000      	movs	r0, #0
 801d5cc:	e008      	b.n	801d5e0 <_printf_common+0xa8>
 801d5ce:	2301      	movs	r3, #1
 801d5d0:	4652      	mov	r2, sl
 801d5d2:	4649      	mov	r1, r9
 801d5d4:	4638      	mov	r0, r7
 801d5d6:	47c0      	blx	r8
 801d5d8:	3001      	adds	r0, #1
 801d5da:	d103      	bne.n	801d5e4 <_printf_common+0xac>
 801d5dc:	f04f 30ff 	mov.w	r0, #4294967295
 801d5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d5e4:	3501      	adds	r5, #1
 801d5e6:	e7c6      	b.n	801d576 <_printf_common+0x3e>
 801d5e8:	18e1      	adds	r1, r4, r3
 801d5ea:	1c5a      	adds	r2, r3, #1
 801d5ec:	2030      	movs	r0, #48	; 0x30
 801d5ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d5f2:	4422      	add	r2, r4
 801d5f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d5f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d5fc:	3302      	adds	r3, #2
 801d5fe:	e7c7      	b.n	801d590 <_printf_common+0x58>
 801d600:	2301      	movs	r3, #1
 801d602:	4622      	mov	r2, r4
 801d604:	4649      	mov	r1, r9
 801d606:	4638      	mov	r0, r7
 801d608:	47c0      	blx	r8
 801d60a:	3001      	adds	r0, #1
 801d60c:	d0e6      	beq.n	801d5dc <_printf_common+0xa4>
 801d60e:	3601      	adds	r6, #1
 801d610:	e7d9      	b.n	801d5c6 <_printf_common+0x8e>
	...

0801d614 <_printf_i>:
 801d614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d618:	7e0f      	ldrb	r7, [r1, #24]
 801d61a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d61c:	2f78      	cmp	r7, #120	; 0x78
 801d61e:	4691      	mov	r9, r2
 801d620:	4680      	mov	r8, r0
 801d622:	460c      	mov	r4, r1
 801d624:	469a      	mov	sl, r3
 801d626:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d62a:	d807      	bhi.n	801d63c <_printf_i+0x28>
 801d62c:	2f62      	cmp	r7, #98	; 0x62
 801d62e:	d80a      	bhi.n	801d646 <_printf_i+0x32>
 801d630:	2f00      	cmp	r7, #0
 801d632:	f000 80d8 	beq.w	801d7e6 <_printf_i+0x1d2>
 801d636:	2f58      	cmp	r7, #88	; 0x58
 801d638:	f000 80a3 	beq.w	801d782 <_printf_i+0x16e>
 801d63c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d644:	e03a      	b.n	801d6bc <_printf_i+0xa8>
 801d646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d64a:	2b15      	cmp	r3, #21
 801d64c:	d8f6      	bhi.n	801d63c <_printf_i+0x28>
 801d64e:	a101      	add	r1, pc, #4	; (adr r1, 801d654 <_printf_i+0x40>)
 801d650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d654:	0801d6ad 	.word	0x0801d6ad
 801d658:	0801d6c1 	.word	0x0801d6c1
 801d65c:	0801d63d 	.word	0x0801d63d
 801d660:	0801d63d 	.word	0x0801d63d
 801d664:	0801d63d 	.word	0x0801d63d
 801d668:	0801d63d 	.word	0x0801d63d
 801d66c:	0801d6c1 	.word	0x0801d6c1
 801d670:	0801d63d 	.word	0x0801d63d
 801d674:	0801d63d 	.word	0x0801d63d
 801d678:	0801d63d 	.word	0x0801d63d
 801d67c:	0801d63d 	.word	0x0801d63d
 801d680:	0801d7cd 	.word	0x0801d7cd
 801d684:	0801d6f1 	.word	0x0801d6f1
 801d688:	0801d7af 	.word	0x0801d7af
 801d68c:	0801d63d 	.word	0x0801d63d
 801d690:	0801d63d 	.word	0x0801d63d
 801d694:	0801d7ef 	.word	0x0801d7ef
 801d698:	0801d63d 	.word	0x0801d63d
 801d69c:	0801d6f1 	.word	0x0801d6f1
 801d6a0:	0801d63d 	.word	0x0801d63d
 801d6a4:	0801d63d 	.word	0x0801d63d
 801d6a8:	0801d7b7 	.word	0x0801d7b7
 801d6ac:	682b      	ldr	r3, [r5, #0]
 801d6ae:	1d1a      	adds	r2, r3, #4
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	602a      	str	r2, [r5, #0]
 801d6b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d6b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d6bc:	2301      	movs	r3, #1
 801d6be:	e0a3      	b.n	801d808 <_printf_i+0x1f4>
 801d6c0:	6820      	ldr	r0, [r4, #0]
 801d6c2:	6829      	ldr	r1, [r5, #0]
 801d6c4:	0606      	lsls	r6, r0, #24
 801d6c6:	f101 0304 	add.w	r3, r1, #4
 801d6ca:	d50a      	bpl.n	801d6e2 <_printf_i+0xce>
 801d6cc:	680e      	ldr	r6, [r1, #0]
 801d6ce:	602b      	str	r3, [r5, #0]
 801d6d0:	2e00      	cmp	r6, #0
 801d6d2:	da03      	bge.n	801d6dc <_printf_i+0xc8>
 801d6d4:	232d      	movs	r3, #45	; 0x2d
 801d6d6:	4276      	negs	r6, r6
 801d6d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d6dc:	485e      	ldr	r0, [pc, #376]	; (801d858 <_printf_i+0x244>)
 801d6de:	230a      	movs	r3, #10
 801d6e0:	e019      	b.n	801d716 <_printf_i+0x102>
 801d6e2:	680e      	ldr	r6, [r1, #0]
 801d6e4:	602b      	str	r3, [r5, #0]
 801d6e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d6ea:	bf18      	it	ne
 801d6ec:	b236      	sxthne	r6, r6
 801d6ee:	e7ef      	b.n	801d6d0 <_printf_i+0xbc>
 801d6f0:	682b      	ldr	r3, [r5, #0]
 801d6f2:	6820      	ldr	r0, [r4, #0]
 801d6f4:	1d19      	adds	r1, r3, #4
 801d6f6:	6029      	str	r1, [r5, #0]
 801d6f8:	0601      	lsls	r1, r0, #24
 801d6fa:	d501      	bpl.n	801d700 <_printf_i+0xec>
 801d6fc:	681e      	ldr	r6, [r3, #0]
 801d6fe:	e002      	b.n	801d706 <_printf_i+0xf2>
 801d700:	0646      	lsls	r6, r0, #25
 801d702:	d5fb      	bpl.n	801d6fc <_printf_i+0xe8>
 801d704:	881e      	ldrh	r6, [r3, #0]
 801d706:	4854      	ldr	r0, [pc, #336]	; (801d858 <_printf_i+0x244>)
 801d708:	2f6f      	cmp	r7, #111	; 0x6f
 801d70a:	bf0c      	ite	eq
 801d70c:	2308      	moveq	r3, #8
 801d70e:	230a      	movne	r3, #10
 801d710:	2100      	movs	r1, #0
 801d712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d716:	6865      	ldr	r5, [r4, #4]
 801d718:	60a5      	str	r5, [r4, #8]
 801d71a:	2d00      	cmp	r5, #0
 801d71c:	bfa2      	ittt	ge
 801d71e:	6821      	ldrge	r1, [r4, #0]
 801d720:	f021 0104 	bicge.w	r1, r1, #4
 801d724:	6021      	strge	r1, [r4, #0]
 801d726:	b90e      	cbnz	r6, 801d72c <_printf_i+0x118>
 801d728:	2d00      	cmp	r5, #0
 801d72a:	d04d      	beq.n	801d7c8 <_printf_i+0x1b4>
 801d72c:	4615      	mov	r5, r2
 801d72e:	fbb6 f1f3 	udiv	r1, r6, r3
 801d732:	fb03 6711 	mls	r7, r3, r1, r6
 801d736:	5dc7      	ldrb	r7, [r0, r7]
 801d738:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d73c:	4637      	mov	r7, r6
 801d73e:	42bb      	cmp	r3, r7
 801d740:	460e      	mov	r6, r1
 801d742:	d9f4      	bls.n	801d72e <_printf_i+0x11a>
 801d744:	2b08      	cmp	r3, #8
 801d746:	d10b      	bne.n	801d760 <_printf_i+0x14c>
 801d748:	6823      	ldr	r3, [r4, #0]
 801d74a:	07de      	lsls	r6, r3, #31
 801d74c:	d508      	bpl.n	801d760 <_printf_i+0x14c>
 801d74e:	6923      	ldr	r3, [r4, #16]
 801d750:	6861      	ldr	r1, [r4, #4]
 801d752:	4299      	cmp	r1, r3
 801d754:	bfde      	ittt	le
 801d756:	2330      	movle	r3, #48	; 0x30
 801d758:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d75c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d760:	1b52      	subs	r2, r2, r5
 801d762:	6122      	str	r2, [r4, #16]
 801d764:	f8cd a000 	str.w	sl, [sp]
 801d768:	464b      	mov	r3, r9
 801d76a:	aa03      	add	r2, sp, #12
 801d76c:	4621      	mov	r1, r4
 801d76e:	4640      	mov	r0, r8
 801d770:	f7ff fee2 	bl	801d538 <_printf_common>
 801d774:	3001      	adds	r0, #1
 801d776:	d14c      	bne.n	801d812 <_printf_i+0x1fe>
 801d778:	f04f 30ff 	mov.w	r0, #4294967295
 801d77c:	b004      	add	sp, #16
 801d77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d782:	4835      	ldr	r0, [pc, #212]	; (801d858 <_printf_i+0x244>)
 801d784:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801d788:	6829      	ldr	r1, [r5, #0]
 801d78a:	6823      	ldr	r3, [r4, #0]
 801d78c:	f851 6b04 	ldr.w	r6, [r1], #4
 801d790:	6029      	str	r1, [r5, #0]
 801d792:	061d      	lsls	r5, r3, #24
 801d794:	d514      	bpl.n	801d7c0 <_printf_i+0x1ac>
 801d796:	07df      	lsls	r7, r3, #31
 801d798:	bf44      	itt	mi
 801d79a:	f043 0320 	orrmi.w	r3, r3, #32
 801d79e:	6023      	strmi	r3, [r4, #0]
 801d7a0:	b91e      	cbnz	r6, 801d7aa <_printf_i+0x196>
 801d7a2:	6823      	ldr	r3, [r4, #0]
 801d7a4:	f023 0320 	bic.w	r3, r3, #32
 801d7a8:	6023      	str	r3, [r4, #0]
 801d7aa:	2310      	movs	r3, #16
 801d7ac:	e7b0      	b.n	801d710 <_printf_i+0xfc>
 801d7ae:	6823      	ldr	r3, [r4, #0]
 801d7b0:	f043 0320 	orr.w	r3, r3, #32
 801d7b4:	6023      	str	r3, [r4, #0]
 801d7b6:	2378      	movs	r3, #120	; 0x78
 801d7b8:	4828      	ldr	r0, [pc, #160]	; (801d85c <_printf_i+0x248>)
 801d7ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d7be:	e7e3      	b.n	801d788 <_printf_i+0x174>
 801d7c0:	0659      	lsls	r1, r3, #25
 801d7c2:	bf48      	it	mi
 801d7c4:	b2b6      	uxthmi	r6, r6
 801d7c6:	e7e6      	b.n	801d796 <_printf_i+0x182>
 801d7c8:	4615      	mov	r5, r2
 801d7ca:	e7bb      	b.n	801d744 <_printf_i+0x130>
 801d7cc:	682b      	ldr	r3, [r5, #0]
 801d7ce:	6826      	ldr	r6, [r4, #0]
 801d7d0:	6961      	ldr	r1, [r4, #20]
 801d7d2:	1d18      	adds	r0, r3, #4
 801d7d4:	6028      	str	r0, [r5, #0]
 801d7d6:	0635      	lsls	r5, r6, #24
 801d7d8:	681b      	ldr	r3, [r3, #0]
 801d7da:	d501      	bpl.n	801d7e0 <_printf_i+0x1cc>
 801d7dc:	6019      	str	r1, [r3, #0]
 801d7de:	e002      	b.n	801d7e6 <_printf_i+0x1d2>
 801d7e0:	0670      	lsls	r0, r6, #25
 801d7e2:	d5fb      	bpl.n	801d7dc <_printf_i+0x1c8>
 801d7e4:	8019      	strh	r1, [r3, #0]
 801d7e6:	2300      	movs	r3, #0
 801d7e8:	6123      	str	r3, [r4, #16]
 801d7ea:	4615      	mov	r5, r2
 801d7ec:	e7ba      	b.n	801d764 <_printf_i+0x150>
 801d7ee:	682b      	ldr	r3, [r5, #0]
 801d7f0:	1d1a      	adds	r2, r3, #4
 801d7f2:	602a      	str	r2, [r5, #0]
 801d7f4:	681d      	ldr	r5, [r3, #0]
 801d7f6:	6862      	ldr	r2, [r4, #4]
 801d7f8:	2100      	movs	r1, #0
 801d7fa:	4628      	mov	r0, r5
 801d7fc:	f7e2 fcf0 	bl	80001e0 <memchr>
 801d800:	b108      	cbz	r0, 801d806 <_printf_i+0x1f2>
 801d802:	1b40      	subs	r0, r0, r5
 801d804:	6060      	str	r0, [r4, #4]
 801d806:	6863      	ldr	r3, [r4, #4]
 801d808:	6123      	str	r3, [r4, #16]
 801d80a:	2300      	movs	r3, #0
 801d80c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d810:	e7a8      	b.n	801d764 <_printf_i+0x150>
 801d812:	6923      	ldr	r3, [r4, #16]
 801d814:	462a      	mov	r2, r5
 801d816:	4649      	mov	r1, r9
 801d818:	4640      	mov	r0, r8
 801d81a:	47d0      	blx	sl
 801d81c:	3001      	adds	r0, #1
 801d81e:	d0ab      	beq.n	801d778 <_printf_i+0x164>
 801d820:	6823      	ldr	r3, [r4, #0]
 801d822:	079b      	lsls	r3, r3, #30
 801d824:	d413      	bmi.n	801d84e <_printf_i+0x23a>
 801d826:	68e0      	ldr	r0, [r4, #12]
 801d828:	9b03      	ldr	r3, [sp, #12]
 801d82a:	4298      	cmp	r0, r3
 801d82c:	bfb8      	it	lt
 801d82e:	4618      	movlt	r0, r3
 801d830:	e7a4      	b.n	801d77c <_printf_i+0x168>
 801d832:	2301      	movs	r3, #1
 801d834:	4632      	mov	r2, r6
 801d836:	4649      	mov	r1, r9
 801d838:	4640      	mov	r0, r8
 801d83a:	47d0      	blx	sl
 801d83c:	3001      	adds	r0, #1
 801d83e:	d09b      	beq.n	801d778 <_printf_i+0x164>
 801d840:	3501      	adds	r5, #1
 801d842:	68e3      	ldr	r3, [r4, #12]
 801d844:	9903      	ldr	r1, [sp, #12]
 801d846:	1a5b      	subs	r3, r3, r1
 801d848:	42ab      	cmp	r3, r5
 801d84a:	dcf2      	bgt.n	801d832 <_printf_i+0x21e>
 801d84c:	e7eb      	b.n	801d826 <_printf_i+0x212>
 801d84e:	2500      	movs	r5, #0
 801d850:	f104 0619 	add.w	r6, r4, #25
 801d854:	e7f5      	b.n	801d842 <_printf_i+0x22e>
 801d856:	bf00      	nop
 801d858:	08021827 	.word	0x08021827
 801d85c:	08021838 	.word	0x08021838

0801d860 <_read_r>:
 801d860:	b538      	push	{r3, r4, r5, lr}
 801d862:	4d07      	ldr	r5, [pc, #28]	; (801d880 <_read_r+0x20>)
 801d864:	4604      	mov	r4, r0
 801d866:	4608      	mov	r0, r1
 801d868:	4611      	mov	r1, r2
 801d86a:	2200      	movs	r2, #0
 801d86c:	602a      	str	r2, [r5, #0]
 801d86e:	461a      	mov	r2, r3
 801d870:	f7e7 f99a 	bl	8004ba8 <_read>
 801d874:	1c43      	adds	r3, r0, #1
 801d876:	d102      	bne.n	801d87e <_read_r+0x1e>
 801d878:	682b      	ldr	r3, [r5, #0]
 801d87a:	b103      	cbz	r3, 801d87e <_read_r+0x1e>
 801d87c:	6023      	str	r3, [r4, #0]
 801d87e:	bd38      	pop	{r3, r4, r5, pc}
 801d880:	2000def4 	.word	0x2000def4

0801d884 <__swbuf_r>:
 801d884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d886:	460e      	mov	r6, r1
 801d888:	4614      	mov	r4, r2
 801d88a:	4605      	mov	r5, r0
 801d88c:	b118      	cbz	r0, 801d896 <__swbuf_r+0x12>
 801d88e:	6983      	ldr	r3, [r0, #24]
 801d890:	b90b      	cbnz	r3, 801d896 <__swbuf_r+0x12>
 801d892:	f7fe ff25 	bl	801c6e0 <__sinit>
 801d896:	4b21      	ldr	r3, [pc, #132]	; (801d91c <__swbuf_r+0x98>)
 801d898:	429c      	cmp	r4, r3
 801d89a:	d12b      	bne.n	801d8f4 <__swbuf_r+0x70>
 801d89c:	686c      	ldr	r4, [r5, #4]
 801d89e:	69a3      	ldr	r3, [r4, #24]
 801d8a0:	60a3      	str	r3, [r4, #8]
 801d8a2:	89a3      	ldrh	r3, [r4, #12]
 801d8a4:	071a      	lsls	r2, r3, #28
 801d8a6:	d52f      	bpl.n	801d908 <__swbuf_r+0x84>
 801d8a8:	6923      	ldr	r3, [r4, #16]
 801d8aa:	b36b      	cbz	r3, 801d908 <__swbuf_r+0x84>
 801d8ac:	6923      	ldr	r3, [r4, #16]
 801d8ae:	6820      	ldr	r0, [r4, #0]
 801d8b0:	1ac0      	subs	r0, r0, r3
 801d8b2:	6963      	ldr	r3, [r4, #20]
 801d8b4:	b2f6      	uxtb	r6, r6
 801d8b6:	4283      	cmp	r3, r0
 801d8b8:	4637      	mov	r7, r6
 801d8ba:	dc04      	bgt.n	801d8c6 <__swbuf_r+0x42>
 801d8bc:	4621      	mov	r1, r4
 801d8be:	4628      	mov	r0, r5
 801d8c0:	f7ff fb18 	bl	801cef4 <_fflush_r>
 801d8c4:	bb30      	cbnz	r0, 801d914 <__swbuf_r+0x90>
 801d8c6:	68a3      	ldr	r3, [r4, #8]
 801d8c8:	3b01      	subs	r3, #1
 801d8ca:	60a3      	str	r3, [r4, #8]
 801d8cc:	6823      	ldr	r3, [r4, #0]
 801d8ce:	1c5a      	adds	r2, r3, #1
 801d8d0:	6022      	str	r2, [r4, #0]
 801d8d2:	701e      	strb	r6, [r3, #0]
 801d8d4:	6963      	ldr	r3, [r4, #20]
 801d8d6:	3001      	adds	r0, #1
 801d8d8:	4283      	cmp	r3, r0
 801d8da:	d004      	beq.n	801d8e6 <__swbuf_r+0x62>
 801d8dc:	89a3      	ldrh	r3, [r4, #12]
 801d8de:	07db      	lsls	r3, r3, #31
 801d8e0:	d506      	bpl.n	801d8f0 <__swbuf_r+0x6c>
 801d8e2:	2e0a      	cmp	r6, #10
 801d8e4:	d104      	bne.n	801d8f0 <__swbuf_r+0x6c>
 801d8e6:	4621      	mov	r1, r4
 801d8e8:	4628      	mov	r0, r5
 801d8ea:	f7ff fb03 	bl	801cef4 <_fflush_r>
 801d8ee:	b988      	cbnz	r0, 801d914 <__swbuf_r+0x90>
 801d8f0:	4638      	mov	r0, r7
 801d8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8f4:	4b0a      	ldr	r3, [pc, #40]	; (801d920 <__swbuf_r+0x9c>)
 801d8f6:	429c      	cmp	r4, r3
 801d8f8:	d101      	bne.n	801d8fe <__swbuf_r+0x7a>
 801d8fa:	68ac      	ldr	r4, [r5, #8]
 801d8fc:	e7cf      	b.n	801d89e <__swbuf_r+0x1a>
 801d8fe:	4b09      	ldr	r3, [pc, #36]	; (801d924 <__swbuf_r+0xa0>)
 801d900:	429c      	cmp	r4, r3
 801d902:	bf08      	it	eq
 801d904:	68ec      	ldreq	r4, [r5, #12]
 801d906:	e7ca      	b.n	801d89e <__swbuf_r+0x1a>
 801d908:	4621      	mov	r1, r4
 801d90a:	4628      	mov	r0, r5
 801d90c:	f000 f80c 	bl	801d928 <__swsetup_r>
 801d910:	2800      	cmp	r0, #0
 801d912:	d0cb      	beq.n	801d8ac <__swbuf_r+0x28>
 801d914:	f04f 37ff 	mov.w	r7, #4294967295
 801d918:	e7ea      	b.n	801d8f0 <__swbuf_r+0x6c>
 801d91a:	bf00      	nop
 801d91c:	08021724 	.word	0x08021724
 801d920:	08021744 	.word	0x08021744
 801d924:	08021704 	.word	0x08021704

0801d928 <__swsetup_r>:
 801d928:	4b32      	ldr	r3, [pc, #200]	; (801d9f4 <__swsetup_r+0xcc>)
 801d92a:	b570      	push	{r4, r5, r6, lr}
 801d92c:	681d      	ldr	r5, [r3, #0]
 801d92e:	4606      	mov	r6, r0
 801d930:	460c      	mov	r4, r1
 801d932:	b125      	cbz	r5, 801d93e <__swsetup_r+0x16>
 801d934:	69ab      	ldr	r3, [r5, #24]
 801d936:	b913      	cbnz	r3, 801d93e <__swsetup_r+0x16>
 801d938:	4628      	mov	r0, r5
 801d93a:	f7fe fed1 	bl	801c6e0 <__sinit>
 801d93e:	4b2e      	ldr	r3, [pc, #184]	; (801d9f8 <__swsetup_r+0xd0>)
 801d940:	429c      	cmp	r4, r3
 801d942:	d10f      	bne.n	801d964 <__swsetup_r+0x3c>
 801d944:	686c      	ldr	r4, [r5, #4]
 801d946:	89a3      	ldrh	r3, [r4, #12]
 801d948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d94c:	0719      	lsls	r1, r3, #28
 801d94e:	d42c      	bmi.n	801d9aa <__swsetup_r+0x82>
 801d950:	06dd      	lsls	r5, r3, #27
 801d952:	d411      	bmi.n	801d978 <__swsetup_r+0x50>
 801d954:	2309      	movs	r3, #9
 801d956:	6033      	str	r3, [r6, #0]
 801d958:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d95c:	81a3      	strh	r3, [r4, #12]
 801d95e:	f04f 30ff 	mov.w	r0, #4294967295
 801d962:	e03e      	b.n	801d9e2 <__swsetup_r+0xba>
 801d964:	4b25      	ldr	r3, [pc, #148]	; (801d9fc <__swsetup_r+0xd4>)
 801d966:	429c      	cmp	r4, r3
 801d968:	d101      	bne.n	801d96e <__swsetup_r+0x46>
 801d96a:	68ac      	ldr	r4, [r5, #8]
 801d96c:	e7eb      	b.n	801d946 <__swsetup_r+0x1e>
 801d96e:	4b24      	ldr	r3, [pc, #144]	; (801da00 <__swsetup_r+0xd8>)
 801d970:	429c      	cmp	r4, r3
 801d972:	bf08      	it	eq
 801d974:	68ec      	ldreq	r4, [r5, #12]
 801d976:	e7e6      	b.n	801d946 <__swsetup_r+0x1e>
 801d978:	0758      	lsls	r0, r3, #29
 801d97a:	d512      	bpl.n	801d9a2 <__swsetup_r+0x7a>
 801d97c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d97e:	b141      	cbz	r1, 801d992 <__swsetup_r+0x6a>
 801d980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d984:	4299      	cmp	r1, r3
 801d986:	d002      	beq.n	801d98e <__swsetup_r+0x66>
 801d988:	4630      	mov	r0, r6
 801d98a:	f7fe ffb3 	bl	801c8f4 <_free_r>
 801d98e:	2300      	movs	r3, #0
 801d990:	6363      	str	r3, [r4, #52]	; 0x34
 801d992:	89a3      	ldrh	r3, [r4, #12]
 801d994:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d998:	81a3      	strh	r3, [r4, #12]
 801d99a:	2300      	movs	r3, #0
 801d99c:	6063      	str	r3, [r4, #4]
 801d99e:	6923      	ldr	r3, [r4, #16]
 801d9a0:	6023      	str	r3, [r4, #0]
 801d9a2:	89a3      	ldrh	r3, [r4, #12]
 801d9a4:	f043 0308 	orr.w	r3, r3, #8
 801d9a8:	81a3      	strh	r3, [r4, #12]
 801d9aa:	6923      	ldr	r3, [r4, #16]
 801d9ac:	b94b      	cbnz	r3, 801d9c2 <__swsetup_r+0x9a>
 801d9ae:	89a3      	ldrh	r3, [r4, #12]
 801d9b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d9b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d9b8:	d003      	beq.n	801d9c2 <__swsetup_r+0x9a>
 801d9ba:	4621      	mov	r1, r4
 801d9bc:	4630      	mov	r0, r6
 801d9be:	f000 f84d 	bl	801da5c <__smakebuf_r>
 801d9c2:	89a0      	ldrh	r0, [r4, #12]
 801d9c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d9c8:	f010 0301 	ands.w	r3, r0, #1
 801d9cc:	d00a      	beq.n	801d9e4 <__swsetup_r+0xbc>
 801d9ce:	2300      	movs	r3, #0
 801d9d0:	60a3      	str	r3, [r4, #8]
 801d9d2:	6963      	ldr	r3, [r4, #20]
 801d9d4:	425b      	negs	r3, r3
 801d9d6:	61a3      	str	r3, [r4, #24]
 801d9d8:	6923      	ldr	r3, [r4, #16]
 801d9da:	b943      	cbnz	r3, 801d9ee <__swsetup_r+0xc6>
 801d9dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d9e0:	d1ba      	bne.n	801d958 <__swsetup_r+0x30>
 801d9e2:	bd70      	pop	{r4, r5, r6, pc}
 801d9e4:	0781      	lsls	r1, r0, #30
 801d9e6:	bf58      	it	pl
 801d9e8:	6963      	ldrpl	r3, [r4, #20]
 801d9ea:	60a3      	str	r3, [r4, #8]
 801d9ec:	e7f4      	b.n	801d9d8 <__swsetup_r+0xb0>
 801d9ee:	2000      	movs	r0, #0
 801d9f0:	e7f7      	b.n	801d9e2 <__swsetup_r+0xba>
 801d9f2:	bf00      	nop
 801d9f4:	200002e0 	.word	0x200002e0
 801d9f8:	08021724 	.word	0x08021724
 801d9fc:	08021744 	.word	0x08021744
 801da00:	08021704 	.word	0x08021704

0801da04 <abort>:
 801da04:	b508      	push	{r3, lr}
 801da06:	2006      	movs	r0, #6
 801da08:	f000 f8c0 	bl	801db8c <raise>
 801da0c:	2001      	movs	r0, #1
 801da0e:	f7e7 f8c1 	bl	8004b94 <_exit>

0801da12 <__swhatbuf_r>:
 801da12:	b570      	push	{r4, r5, r6, lr}
 801da14:	460e      	mov	r6, r1
 801da16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da1a:	2900      	cmp	r1, #0
 801da1c:	b096      	sub	sp, #88	; 0x58
 801da1e:	4614      	mov	r4, r2
 801da20:	461d      	mov	r5, r3
 801da22:	da08      	bge.n	801da36 <__swhatbuf_r+0x24>
 801da24:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801da28:	2200      	movs	r2, #0
 801da2a:	602a      	str	r2, [r5, #0]
 801da2c:	061a      	lsls	r2, r3, #24
 801da2e:	d410      	bmi.n	801da52 <__swhatbuf_r+0x40>
 801da30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801da34:	e00e      	b.n	801da54 <__swhatbuf_r+0x42>
 801da36:	466a      	mov	r2, sp
 801da38:	f000 f8c4 	bl	801dbc4 <_fstat_r>
 801da3c:	2800      	cmp	r0, #0
 801da3e:	dbf1      	blt.n	801da24 <__swhatbuf_r+0x12>
 801da40:	9a01      	ldr	r2, [sp, #4]
 801da42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801da46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801da4a:	425a      	negs	r2, r3
 801da4c:	415a      	adcs	r2, r3
 801da4e:	602a      	str	r2, [r5, #0]
 801da50:	e7ee      	b.n	801da30 <__swhatbuf_r+0x1e>
 801da52:	2340      	movs	r3, #64	; 0x40
 801da54:	2000      	movs	r0, #0
 801da56:	6023      	str	r3, [r4, #0]
 801da58:	b016      	add	sp, #88	; 0x58
 801da5a:	bd70      	pop	{r4, r5, r6, pc}

0801da5c <__smakebuf_r>:
 801da5c:	898b      	ldrh	r3, [r1, #12]
 801da5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801da60:	079d      	lsls	r5, r3, #30
 801da62:	4606      	mov	r6, r0
 801da64:	460c      	mov	r4, r1
 801da66:	d507      	bpl.n	801da78 <__smakebuf_r+0x1c>
 801da68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801da6c:	6023      	str	r3, [r4, #0]
 801da6e:	6123      	str	r3, [r4, #16]
 801da70:	2301      	movs	r3, #1
 801da72:	6163      	str	r3, [r4, #20]
 801da74:	b002      	add	sp, #8
 801da76:	bd70      	pop	{r4, r5, r6, pc}
 801da78:	ab01      	add	r3, sp, #4
 801da7a:	466a      	mov	r2, sp
 801da7c:	f7ff ffc9 	bl	801da12 <__swhatbuf_r>
 801da80:	9900      	ldr	r1, [sp, #0]
 801da82:	4605      	mov	r5, r0
 801da84:	4630      	mov	r0, r6
 801da86:	f7fe ffa1 	bl	801c9cc <_malloc_r>
 801da8a:	b948      	cbnz	r0, 801daa0 <__smakebuf_r+0x44>
 801da8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da90:	059a      	lsls	r2, r3, #22
 801da92:	d4ef      	bmi.n	801da74 <__smakebuf_r+0x18>
 801da94:	f023 0303 	bic.w	r3, r3, #3
 801da98:	f043 0302 	orr.w	r3, r3, #2
 801da9c:	81a3      	strh	r3, [r4, #12]
 801da9e:	e7e3      	b.n	801da68 <__smakebuf_r+0xc>
 801daa0:	4b0d      	ldr	r3, [pc, #52]	; (801dad8 <__smakebuf_r+0x7c>)
 801daa2:	62b3      	str	r3, [r6, #40]	; 0x28
 801daa4:	89a3      	ldrh	r3, [r4, #12]
 801daa6:	6020      	str	r0, [r4, #0]
 801daa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801daac:	81a3      	strh	r3, [r4, #12]
 801daae:	9b00      	ldr	r3, [sp, #0]
 801dab0:	6163      	str	r3, [r4, #20]
 801dab2:	9b01      	ldr	r3, [sp, #4]
 801dab4:	6120      	str	r0, [r4, #16]
 801dab6:	b15b      	cbz	r3, 801dad0 <__smakebuf_r+0x74>
 801dab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dabc:	4630      	mov	r0, r6
 801dabe:	f000 f893 	bl	801dbe8 <_isatty_r>
 801dac2:	b128      	cbz	r0, 801dad0 <__smakebuf_r+0x74>
 801dac4:	89a3      	ldrh	r3, [r4, #12]
 801dac6:	f023 0303 	bic.w	r3, r3, #3
 801daca:	f043 0301 	orr.w	r3, r3, #1
 801dace:	81a3      	strh	r3, [r4, #12]
 801dad0:	89a0      	ldrh	r0, [r4, #12]
 801dad2:	4305      	orrs	r5, r0
 801dad4:	81a5      	strh	r5, [r4, #12]
 801dad6:	e7cd      	b.n	801da74 <__smakebuf_r+0x18>
 801dad8:	0801c679 	.word	0x0801c679

0801dadc <_realloc_r>:
 801dadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dae0:	4680      	mov	r8, r0
 801dae2:	4614      	mov	r4, r2
 801dae4:	460e      	mov	r6, r1
 801dae6:	b921      	cbnz	r1, 801daf2 <_realloc_r+0x16>
 801dae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801daec:	4611      	mov	r1, r2
 801daee:	f7fe bf6d 	b.w	801c9cc <_malloc_r>
 801daf2:	b92a      	cbnz	r2, 801db00 <_realloc_r+0x24>
 801daf4:	f7fe fefe 	bl	801c8f4 <_free_r>
 801daf8:	4625      	mov	r5, r4
 801dafa:	4628      	mov	r0, r5
 801dafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db00:	f000 f882 	bl	801dc08 <_malloc_usable_size_r>
 801db04:	4284      	cmp	r4, r0
 801db06:	4607      	mov	r7, r0
 801db08:	d802      	bhi.n	801db10 <_realloc_r+0x34>
 801db0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801db0e:	d812      	bhi.n	801db36 <_realloc_r+0x5a>
 801db10:	4621      	mov	r1, r4
 801db12:	4640      	mov	r0, r8
 801db14:	f7fe ff5a 	bl	801c9cc <_malloc_r>
 801db18:	4605      	mov	r5, r0
 801db1a:	2800      	cmp	r0, #0
 801db1c:	d0ed      	beq.n	801dafa <_realloc_r+0x1e>
 801db1e:	42bc      	cmp	r4, r7
 801db20:	4622      	mov	r2, r4
 801db22:	4631      	mov	r1, r6
 801db24:	bf28      	it	cs
 801db26:	463a      	movcs	r2, r7
 801db28:	f7fe feb4 	bl	801c894 <memcpy>
 801db2c:	4631      	mov	r1, r6
 801db2e:	4640      	mov	r0, r8
 801db30:	f7fe fee0 	bl	801c8f4 <_free_r>
 801db34:	e7e1      	b.n	801dafa <_realloc_r+0x1e>
 801db36:	4635      	mov	r5, r6
 801db38:	e7df      	b.n	801dafa <_realloc_r+0x1e>

0801db3a <_raise_r>:
 801db3a:	291f      	cmp	r1, #31
 801db3c:	b538      	push	{r3, r4, r5, lr}
 801db3e:	4604      	mov	r4, r0
 801db40:	460d      	mov	r5, r1
 801db42:	d904      	bls.n	801db4e <_raise_r+0x14>
 801db44:	2316      	movs	r3, #22
 801db46:	6003      	str	r3, [r0, #0]
 801db48:	f04f 30ff 	mov.w	r0, #4294967295
 801db4c:	bd38      	pop	{r3, r4, r5, pc}
 801db4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801db50:	b112      	cbz	r2, 801db58 <_raise_r+0x1e>
 801db52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801db56:	b94b      	cbnz	r3, 801db6c <_raise_r+0x32>
 801db58:	4620      	mov	r0, r4
 801db5a:	f000 f831 	bl	801dbc0 <_getpid_r>
 801db5e:	462a      	mov	r2, r5
 801db60:	4601      	mov	r1, r0
 801db62:	4620      	mov	r0, r4
 801db64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801db68:	f000 b818 	b.w	801db9c <_kill_r>
 801db6c:	2b01      	cmp	r3, #1
 801db6e:	d00a      	beq.n	801db86 <_raise_r+0x4c>
 801db70:	1c59      	adds	r1, r3, #1
 801db72:	d103      	bne.n	801db7c <_raise_r+0x42>
 801db74:	2316      	movs	r3, #22
 801db76:	6003      	str	r3, [r0, #0]
 801db78:	2001      	movs	r0, #1
 801db7a:	e7e7      	b.n	801db4c <_raise_r+0x12>
 801db7c:	2400      	movs	r4, #0
 801db7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801db82:	4628      	mov	r0, r5
 801db84:	4798      	blx	r3
 801db86:	2000      	movs	r0, #0
 801db88:	e7e0      	b.n	801db4c <_raise_r+0x12>
	...

0801db8c <raise>:
 801db8c:	4b02      	ldr	r3, [pc, #8]	; (801db98 <raise+0xc>)
 801db8e:	4601      	mov	r1, r0
 801db90:	6818      	ldr	r0, [r3, #0]
 801db92:	f7ff bfd2 	b.w	801db3a <_raise_r>
 801db96:	bf00      	nop
 801db98:	200002e0 	.word	0x200002e0

0801db9c <_kill_r>:
 801db9c:	b538      	push	{r3, r4, r5, lr}
 801db9e:	4d07      	ldr	r5, [pc, #28]	; (801dbbc <_kill_r+0x20>)
 801dba0:	2300      	movs	r3, #0
 801dba2:	4604      	mov	r4, r0
 801dba4:	4608      	mov	r0, r1
 801dba6:	4611      	mov	r1, r2
 801dba8:	602b      	str	r3, [r5, #0]
 801dbaa:	f7e6 ffe1 	bl	8004b70 <_kill>
 801dbae:	1c43      	adds	r3, r0, #1
 801dbb0:	d102      	bne.n	801dbb8 <_kill_r+0x1c>
 801dbb2:	682b      	ldr	r3, [r5, #0]
 801dbb4:	b103      	cbz	r3, 801dbb8 <_kill_r+0x1c>
 801dbb6:	6023      	str	r3, [r4, #0]
 801dbb8:	bd38      	pop	{r3, r4, r5, pc}
 801dbba:	bf00      	nop
 801dbbc:	2000def4 	.word	0x2000def4

0801dbc0 <_getpid_r>:
 801dbc0:	f7e6 bfce 	b.w	8004b60 <_getpid>

0801dbc4 <_fstat_r>:
 801dbc4:	b538      	push	{r3, r4, r5, lr}
 801dbc6:	4d07      	ldr	r5, [pc, #28]	; (801dbe4 <_fstat_r+0x20>)
 801dbc8:	2300      	movs	r3, #0
 801dbca:	4604      	mov	r4, r0
 801dbcc:	4608      	mov	r0, r1
 801dbce:	4611      	mov	r1, r2
 801dbd0:	602b      	str	r3, [r5, #0]
 801dbd2:	f7e7 f82e 	bl	8004c32 <_fstat>
 801dbd6:	1c43      	adds	r3, r0, #1
 801dbd8:	d102      	bne.n	801dbe0 <_fstat_r+0x1c>
 801dbda:	682b      	ldr	r3, [r5, #0]
 801dbdc:	b103      	cbz	r3, 801dbe0 <_fstat_r+0x1c>
 801dbde:	6023      	str	r3, [r4, #0]
 801dbe0:	bd38      	pop	{r3, r4, r5, pc}
 801dbe2:	bf00      	nop
 801dbe4:	2000def4 	.word	0x2000def4

0801dbe8 <_isatty_r>:
 801dbe8:	b538      	push	{r3, r4, r5, lr}
 801dbea:	4d06      	ldr	r5, [pc, #24]	; (801dc04 <_isatty_r+0x1c>)
 801dbec:	2300      	movs	r3, #0
 801dbee:	4604      	mov	r4, r0
 801dbf0:	4608      	mov	r0, r1
 801dbf2:	602b      	str	r3, [r5, #0]
 801dbf4:	f7e7 f82d 	bl	8004c52 <_isatty>
 801dbf8:	1c43      	adds	r3, r0, #1
 801dbfa:	d102      	bne.n	801dc02 <_isatty_r+0x1a>
 801dbfc:	682b      	ldr	r3, [r5, #0]
 801dbfe:	b103      	cbz	r3, 801dc02 <_isatty_r+0x1a>
 801dc00:	6023      	str	r3, [r4, #0]
 801dc02:	bd38      	pop	{r3, r4, r5, pc}
 801dc04:	2000def4 	.word	0x2000def4

0801dc08 <_malloc_usable_size_r>:
 801dc08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dc0c:	1f18      	subs	r0, r3, #4
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	bfbc      	itt	lt
 801dc12:	580b      	ldrlt	r3, [r1, r0]
 801dc14:	18c0      	addlt	r0, r0, r3
 801dc16:	4770      	bx	lr

0801dc18 <_init>:
 801dc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc1a:	bf00      	nop
 801dc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dc1e:	bc08      	pop	{r3}
 801dc20:	469e      	mov	lr, r3
 801dc22:	4770      	bx	lr

0801dc24 <_fini>:
 801dc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc26:	bf00      	nop
 801dc28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dc2a:	bc08      	pop	{r3}
 801dc2c:	469e      	mov	lr, r3
 801dc2e:	4770      	bx	lr
