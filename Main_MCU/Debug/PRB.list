
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022f88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004050  08023118  08023118  00033118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027168  08027168  00040534  2**0
                  CONTENTS
  4 .ARM          00000008  08027168  08027168  00037168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027170  08027170  00040534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027170  08027170  00037170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027174  08027174  00037174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000534  20000000  08027178  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040534  2**0
                  CONTENTS
 10 .bss          0000dbec  20000534  20000534  00040534  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000e120  2000e120  00040534  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040534  2**0
                  CONTENTS, READONLY
 13 .debug_info   00059ddd  00000000  00000000  00040564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ac38  00000000  00000000  0009a341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029d8  00000000  00000000  000a4f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000027d0  00000000  00000000  000a7958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000380eb  00000000  00000000  000aa128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000454ab  00000000  00000000  000e2213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001031aa  00000000  00000000  001276be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0022a868  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c020  00000000  00000000  0022a8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000534 	.word	0x20000534
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08023100 	.word	0x08023100

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000538 	.word	0x20000538
 80001cc:	08023100 	.word	0x08023100

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <Analog_Start>:
extern Settings_Struct settings;

static void Calc_Pt100();

void Analog_Start(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&pt100_input_buffer, sizeof(pt100_input_buffer)/2);
 8000ff0:	2206      	movs	r2, #6
 8000ff2:	4904      	ldr	r1, [pc, #16]	; (8001004 <Analog_Start+0x18>)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <Analog_Start+0x1c>)
 8000ff6:	f005 ff03 	bl	8006e00 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <Analog_Start+0x20>)
 8000ffc:	f009 ff82 	bl	800af04 <HAL_TIM_Base_Start>

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20006fa8 	.word	0x20006fa8
 8001008:	20007238 	.word	0x20007238
 800100c:	20007198 	.word	0x20007198

08001010 <Analog_Read>:

void Analog_Read(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	Calc_Pt100();
 8001014:	f000 f802 	bl	800101c <Calc_Pt100>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <Calc_Pt100>:

static void Calc_Pt100()
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
	float sum = 0;
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
	if(pt100_data_ready)
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <Calc_Pt100+0x64>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d020      	beq.n	8001072 <Calc_Pt100+0x56>
	{
		for (int i = 0; i < PT100_INPUT_BUFFER_SIZE; ++i) {
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	e00e      	b.n	8001054 <Calc_Pt100+0x38>
			sum+=pt100_buf[i];
 8001036:	4a13      	ldr	r2, [pc, #76]	; (8001084 <Calc_Pt100+0x68>)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a01 	vldr	s14, [r7, #4]
 8001046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104a:	edc7 7a01 	vstr	s15, [r7, #4]
		for (int i = 0; i < PT100_INPUT_BUFFER_SIZE; ++i) {
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b27      	cmp	r3, #39	; 0x27
 8001058:	dded      	ble.n	8001036 <Calc_Pt100+0x1a>
		}
		meas_data.pt100 = sum/PT100_INPUT_BUFFER_SIZE;
 800105a:	ed97 7a01 	vldr	s14, [r7, #4]
 800105e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001088 <Calc_Pt100+0x6c>
 8001062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <Calc_Pt100+0x70>)
 8001068:	edc3 7a02 	vstr	s15, [r3, #8]
		pt100_data_ready = 0;
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <Calc_Pt100+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
	}
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20006f00 	.word	0x20006f00
 8001084:	20006f08 	.word	0x20006f08
 8001088:	42200000 	.word	0x42200000
 800108c:	200074ac 	.word	0x200074ac

08001090 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001090:	b480      	push	{r7}
 8001092:	b08b      	sub	sp, #44	; 0x2c
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	float pt100_0, pt100_1, pt100_3, vRef;
	vRef = pt100_input_buffer.V_ref;
 8001098:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <HAL_ADC_ConvCpltCallback+0x120>)
 800109a:	895b      	ldrh	r3, [r3, #10]
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	vRef = 3.3f*(float)V_REF_VALUE/vRef;
 80010a8:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <HAL_ADC_ConvCpltCallback+0x124>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80011b8 <HAL_ADC_ConvCpltCallback+0x128>
 80010b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pt100_0 = pt100_input_buffer.Pt100_0 * 3.3f/vRef;
 80010c8:	4b39      	ldr	r3, [pc, #228]	; (80011b0 <HAL_ADC_ConvCpltCallback+0x120>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80011b8 <HAL_ADC_ConvCpltCallback+0x128>
 80010d8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e4:	edc7 7a08 	vstr	s15, [r7, #32]
	pt100_1 = pt100_input_buffer.Pt100_1 * 3.3f/vRef;
 80010e8:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <HAL_ADC_ConvCpltCallback+0x120>)
 80010ea:	885b      	ldrh	r3, [r3, #2]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80011b8 <HAL_ADC_ConvCpltCallback+0x128>
 80010f8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010fc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001104:	edc7 7a07 	vstr	s15, [r7, #28]
	pt100_3 = pt100_input_buffer.Pt100_3 * 3.3f/vRef;
 8001108:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <HAL_ADC_ConvCpltCallback+0x120>)
 800110a:	88db      	ldrh	r3, [r3, #6]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001114:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80011b8 <HAL_ADC_ConvCpltCallback+0x128>
 8001118:	ee67 6a87 	vmul.f32	s13, s15, s14
 800111c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001124:	edc7 7a06 	vstr	s15, [r7, #24]
	float vpt100 = pt100_3 - pt100_1;
 8001128:	ed97 7a06 	vldr	s14, [r7, #24]
 800112c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001134:	edc7 7a05 	vstr	s15, [r7, #20]
	float ref = pt100_1-pt100_0;
 8001138:	ed97 7a07 	vldr	s14, [r7, #28]
 800113c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	edc7 7a04 	vstr	s15, [r7, #16]
	float v_result = vpt100*100/ref;
 8001148:	edd7 7a05 	vldr	s15, [r7, #20]
 800114c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80011bc <HAL_ADC_ConvCpltCallback+0x12c>
 8001150:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001154:	ed97 7a04 	vldr	s14, [r7, #16]
 8001158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800115c:	edc7 7a03 	vstr	s15, [r7, #12]
	pt100_buf[j] = (v_result - 100)*2.5974f;
 8001160:	edd7 7a03 	vldr	s15, [r7, #12]
 8001164:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80011bc <HAL_ADC_ConvCpltCallback+0x12c>
 8001168:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80011c4 <HAL_ADC_ConvCpltCallback+0x134>
 8001174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001178:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <HAL_ADC_ConvCpltCallback+0x138>)
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	edc3 7a00 	vstr	s15, [r3]
	j++;
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 800118c:	701a      	strb	r2, [r3, #0]
	if(j>=PT100_INPUT_BUFFER_SIZE)j=0;
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b27      	cmp	r3, #39	; 0x27
 8001194:	d902      	bls.n	800119c <HAL_ADC_ConvCpltCallback+0x10c>
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
	pt100_data_ready = 1;
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_ADC_ConvCpltCallback+0x13c>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	372c      	adds	r7, #44	; 0x2c
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20006fa8 	.word	0x20006fa8
 80011b4:	1fff7a2a 	.word	0x1fff7a2a
 80011b8:	40533333 	.word	0x40533333
 80011bc:	42c80000 	.word	0x42c80000
 80011c0:	20006f01 	.word	0x20006f01
 80011c4:	40263bcd 	.word	0x40263bcd
 80011c8:	20006f08 	.word	0x20006f08
 80011cc:	20006f00 	.word	0x20006f00

080011d0 <set_bit>:
 */

#include <control_bit.h>

uint16_t set_bit(uint16_t value, uint8_t num)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	80fb      	strh	r3, [r7, #6]
 80011dc:	4613      	mov	r3, r2
 80011de:	717b      	strb	r3, [r7, #5]
     return value | (1 << num);
 80011e0:	797b      	ldrb	r3, [r7, #5]
 80011e2:	2201      	movs	r2, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	b29b      	uxth	r3, r3
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <Read_Inputs>:




void Read_Inputs()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	Filter_Inputs();
 8001204:	f000 fb16 	bl	8001834 <Filter_Inputs>
	meas_data.d_inputs.in0 	= settings.retain.input_emulation_switches.in0  ? settings.retain.input_emulation_values.in0 :  filters_inputs[0];
 8001208:	4b84      	ldr	r3, [pc, #528]	; (800141c <Read_Inputs+0x21c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <Read_Inputs+0x22>
 8001216:	4b81      	ldr	r3, [pc, #516]	; (800141c <Read_Inputs+0x21c>)
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800121e:	b2da      	uxtb	r2, r3
 8001220:	e004      	b.n	800122c <Read_Inputs+0x2c>
 8001222:	4b7f      	ldr	r3, [pc, #508]	; (8001420 <Read_Inputs+0x220>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	497d      	ldr	r1, [pc, #500]	; (8001424 <Read_Inputs+0x224>)
 800122e:	780b      	ldrb	r3, [r1, #0]
 8001230:	f362 0300 	bfi	r3, r2, #0, #1
 8001234:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in1 	= settings.retain.input_emulation_switches.in1  ? settings.retain.input_emulation_values.in1 :  filters_inputs[1];
 8001236:	4b79      	ldr	r3, [pc, #484]	; (800141c <Read_Inputs+0x21c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <Read_Inputs+0x50>
 8001244:	4b75      	ldr	r3, [pc, #468]	; (800141c <Read_Inputs+0x21c>)
 8001246:	789b      	ldrb	r3, [r3, #2]
 8001248:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	e004      	b.n	800125a <Read_Inputs+0x5a>
 8001250:	4b73      	ldr	r3, [pc, #460]	; (8001420 <Read_Inputs+0x220>)
 8001252:	785b      	ldrb	r3, [r3, #1]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4972      	ldr	r1, [pc, #456]	; (8001424 <Read_Inputs+0x224>)
 800125c:	780b      	ldrb	r3, [r1, #0]
 800125e:	f362 0341 	bfi	r3, r2, #1, #1
 8001262:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in2 	= settings.retain.input_emulation_switches.in2  ? settings.retain.input_emulation_values.in2 :  filters_inputs[2];
 8001264:	4b6d      	ldr	r3, [pc, #436]	; (800141c <Read_Inputs+0x21c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d005      	beq.n	800127e <Read_Inputs+0x7e>
 8001272:	4b6a      	ldr	r3, [pc, #424]	; (800141c <Read_Inputs+0x21c>)
 8001274:	789b      	ldrb	r3, [r3, #2]
 8001276:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800127a:	b2da      	uxtb	r2, r3
 800127c:	e004      	b.n	8001288 <Read_Inputs+0x88>
 800127e:	4b68      	ldr	r3, [pc, #416]	; (8001420 <Read_Inputs+0x220>)
 8001280:	789b      	ldrb	r3, [r3, #2]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4966      	ldr	r1, [pc, #408]	; (8001424 <Read_Inputs+0x224>)
 800128a:	780b      	ldrb	r3, [r1, #0]
 800128c:	f362 0382 	bfi	r3, r2, #2, #1
 8001290:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in3 	= settings.retain.input_emulation_switches.in3  ? settings.retain.input_emulation_values.in3 :  filters_inputs[3];
 8001292:	4b62      	ldr	r3, [pc, #392]	; (800141c <Read_Inputs+0x21c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <Read_Inputs+0xac>
 80012a0:	4b5e      	ldr	r3, [pc, #376]	; (800141c <Read_Inputs+0x21c>)
 80012a2:	789b      	ldrb	r3, [r3, #2]
 80012a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	e004      	b.n	80012b6 <Read_Inputs+0xb6>
 80012ac:	4b5c      	ldr	r3, [pc, #368]	; (8001420 <Read_Inputs+0x220>)
 80012ae:	78db      	ldrb	r3, [r3, #3]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	495b      	ldr	r1, [pc, #364]	; (8001424 <Read_Inputs+0x224>)
 80012b8:	780b      	ldrb	r3, [r1, #0]
 80012ba:	f362 03c3 	bfi	r3, r2, #3, #1
 80012be:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in4 	= settings.retain.input_emulation_switches.in4  ? settings.retain.input_emulation_values.in4 :  filters_inputs[4];
 80012c0:	4b56      	ldr	r3, [pc, #344]	; (800141c <Read_Inputs+0x21c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <Read_Inputs+0xda>
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <Read_Inputs+0x21c>)
 80012d0:	789b      	ldrb	r3, [r3, #2]
 80012d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	e004      	b.n	80012e4 <Read_Inputs+0xe4>
 80012da:	4b51      	ldr	r3, [pc, #324]	; (8001420 <Read_Inputs+0x220>)
 80012dc:	791b      	ldrb	r3, [r3, #4]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	494f      	ldr	r1, [pc, #316]	; (8001424 <Read_Inputs+0x224>)
 80012e6:	780b      	ldrb	r3, [r1, #0]
 80012e8:	f362 1304 	bfi	r3, r2, #4, #1
 80012ec:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in5 	= settings.retain.input_emulation_switches.in5  ? settings.retain.input_emulation_values.in5 :  filters_inputs[5];
 80012ee:	4b4b      	ldr	r3, [pc, #300]	; (800141c <Read_Inputs+0x21c>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <Read_Inputs+0x108>
 80012fc:	4b47      	ldr	r3, [pc, #284]	; (800141c <Read_Inputs+0x21c>)
 80012fe:	789b      	ldrb	r3, [r3, #2]
 8001300:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	e004      	b.n	8001312 <Read_Inputs+0x112>
 8001308:	4b45      	ldr	r3, [pc, #276]	; (8001420 <Read_Inputs+0x220>)
 800130a:	795b      	ldrb	r3, [r3, #5]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4944      	ldr	r1, [pc, #272]	; (8001424 <Read_Inputs+0x224>)
 8001314:	780b      	ldrb	r3, [r1, #0]
 8001316:	f362 1345 	bfi	r3, r2, #5, #1
 800131a:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in6 	= settings.retain.input_emulation_switches.in6  ? settings.retain.input_emulation_values.in6 :  filters_inputs[6];
 800131c:	4b3f      	ldr	r3, [pc, #252]	; (800141c <Read_Inputs+0x21c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <Read_Inputs+0x136>
 800132a:	4b3c      	ldr	r3, [pc, #240]	; (800141c <Read_Inputs+0x21c>)
 800132c:	789b      	ldrb	r3, [r3, #2]
 800132e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	e004      	b.n	8001340 <Read_Inputs+0x140>
 8001336:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <Read_Inputs+0x220>)
 8001338:	799b      	ldrb	r3, [r3, #6]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4938      	ldr	r1, [pc, #224]	; (8001424 <Read_Inputs+0x224>)
 8001342:	780b      	ldrb	r3, [r1, #0]
 8001344:	f362 1386 	bfi	r3, r2, #6, #1
 8001348:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in7 	= settings.retain.input_emulation_switches.in7  ? settings.retain.input_emulation_values.in7 :  filters_inputs[7];
 800134a:	4b34      	ldr	r3, [pc, #208]	; (800141c <Read_Inputs+0x21c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <Read_Inputs+0x164>
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <Read_Inputs+0x21c>)
 800135a:	789b      	ldrb	r3, [r3, #2]
 800135c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	e004      	b.n	800136e <Read_Inputs+0x16e>
 8001364:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <Read_Inputs+0x220>)
 8001366:	79db      	ldrb	r3, [r3, #7]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	b2da      	uxtb	r2, r3
 800136e:	492d      	ldr	r1, [pc, #180]	; (8001424 <Read_Inputs+0x224>)
 8001370:	780b      	ldrb	r3, [r1, #0]
 8001372:	f362 13c7 	bfi	r3, r2, #7, #1
 8001376:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in8 	= settings.retain.input_emulation_switches.in8  ? settings.retain.input_emulation_values.in8 :  filters_inputs[8];
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <Read_Inputs+0x21c>)
 800137a:	785b      	ldrb	r3, [r3, #1]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <Read_Inputs+0x192>
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <Read_Inputs+0x21c>)
 8001388:	78db      	ldrb	r3, [r3, #3]
 800138a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	e004      	b.n	800139c <Read_Inputs+0x19c>
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <Read_Inputs+0x220>)
 8001394:	7a1b      	ldrb	r3, [r3, #8]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4921      	ldr	r1, [pc, #132]	; (8001424 <Read_Inputs+0x224>)
 800139e:	784b      	ldrb	r3, [r1, #1]
 80013a0:	f362 0300 	bfi	r3, r2, #0, #1
 80013a4:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in9 	= settings.retain.input_emulation_switches.in9  ? settings.retain.input_emulation_values.in9 :  filters_inputs[9];
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <Read_Inputs+0x21c>)
 80013a8:	785b      	ldrb	r3, [r3, #1]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <Read_Inputs+0x1c0>
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <Read_Inputs+0x21c>)
 80013b6:	78db      	ldrb	r3, [r3, #3]
 80013b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	e004      	b.n	80013ca <Read_Inputs+0x1ca>
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <Read_Inputs+0x220>)
 80013c2:	7a5b      	ldrb	r3, [r3, #9]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4916      	ldr	r1, [pc, #88]	; (8001424 <Read_Inputs+0x224>)
 80013cc:	784b      	ldrb	r3, [r1, #1]
 80013ce:	f362 0341 	bfi	r3, r2, #1, #1
 80013d2:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in10 = settings.retain.input_emulation_switches.in10 ? settings.retain.input_emulation_values.in10 : filters_inputs[10];
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <Read_Inputs+0x21c>)
 80013d6:	785b      	ldrb	r3, [r3, #1]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <Read_Inputs+0x1ee>
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <Read_Inputs+0x21c>)
 80013e4:	78db      	ldrb	r3, [r3, #3]
 80013e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	e004      	b.n	80013f8 <Read_Inputs+0x1f8>
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <Read_Inputs+0x220>)
 80013f0:	7a9b      	ldrb	r3, [r3, #10]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490a      	ldr	r1, [pc, #40]	; (8001424 <Read_Inputs+0x224>)
 80013fa:	784b      	ldrb	r3, [r1, #1]
 80013fc:	f362 0382 	bfi	r3, r2, #2, #1
 8001400:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in11 = settings.retain.input_emulation_switches.in11 ? settings.retain.input_emulation_values.in11 : filters_inputs[11];
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <Read_Inputs+0x21c>)
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00b      	beq.n	8001428 <Read_Inputs+0x228>
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <Read_Inputs+0x21c>)
 8001412:	78db      	ldrb	r3, [r3, #3]
 8001414:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001418:	b2da      	uxtb	r2, r3
 800141a:	e00a      	b.n	8001432 <Read_Inputs+0x232>
 800141c:	20007408 	.word	0x20007408
 8001420:	20006fb4 	.word	0x20006fb4
 8001424:	200074ac 	.word	0x200074ac
 8001428:	4b3c      	ldr	r3, [pc, #240]	; (800151c <Read_Inputs+0x31c>)
 800142a:	7adb      	ldrb	r3, [r3, #11]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	b2da      	uxtb	r2, r3
 8001432:	493b      	ldr	r1, [pc, #236]	; (8001520 <Read_Inputs+0x320>)
 8001434:	784b      	ldrb	r3, [r1, #1]
 8001436:	f362 03c3 	bfi	r3, r2, #3, #1
 800143a:	704b      	strb	r3, [r1, #1]

	d_inputs.uz_prob_fail 				= meas_data.d_inputs.in0;
 800143c:	4b38      	ldr	r3, [pc, #224]	; (8001520 <Read_Inputs+0x320>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001444:	b2d9      	uxtb	r1, r3
 8001446:	4a37      	ldr	r2, [pc, #220]	; (8001524 <Read_Inputs+0x324>)
 8001448:	7813      	ldrb	r3, [r2, #0]
 800144a:	f361 0300 	bfi	r3, r1, #0, #1
 800144e:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_right_1 		= meas_data.d_inputs.in1;
 8001450:	4b33      	ldr	r3, [pc, #204]	; (8001520 <Read_Inputs+0x320>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001458:	b2d9      	uxtb	r1, r3
 800145a:	4a32      	ldr	r2, [pc, #200]	; (8001524 <Read_Inputs+0x324>)
 800145c:	7813      	ldrb	r3, [r2, #0]
 800145e:	f361 0341 	bfi	r3, r1, #1, #1
 8001462:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_right_2		= meas_data.d_inputs.in2;
 8001464:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <Read_Inputs+0x320>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800146c:	b2d9      	uxtb	r1, r3
 800146e:	4a2d      	ldr	r2, [pc, #180]	; (8001524 <Read_Inputs+0x324>)
 8001470:	7813      	ldrb	r3, [r2, #0]
 8001472:	f361 0382 	bfi	r3, r1, #2, #1
 8001476:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_left_1 		= meas_data.d_inputs.in3;
 8001478:	4b29      	ldr	r3, [pc, #164]	; (8001520 <Read_Inputs+0x320>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001480:	b2d9      	uxtb	r1, r3
 8001482:	4a28      	ldr	r2, [pc, #160]	; (8001524 <Read_Inputs+0x324>)
 8001484:	7813      	ldrb	r3, [r2, #0]
 8001486:	f361 03c3 	bfi	r3, r1, #3, #1
 800148a:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_left_2		= meas_data.d_inputs.in4;
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <Read_Inputs+0x320>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001494:	b2d9      	uxtb	r1, r3
 8001496:	4a23      	ldr	r2, [pc, #140]	; (8001524 <Read_Inputs+0x324>)
 8001498:	7813      	ldrb	r3, [r2, #0]
 800149a:	f361 1304 	bfi	r3, r1, #4, #1
 800149e:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_stop					= meas_data.d_inputs.in5;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <Read_Inputs+0x320>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80014a8:	b2d9      	uxtb	r1, r3
 80014aa:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <Read_Inputs+0x324>)
 80014ac:	7813      	ldrb	r3, [r2, #0]
 80014ae:	f361 1345 	bfi	r3, r1, #5, #1
 80014b2:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_make_proba				= meas_data.d_inputs.in6;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <Read_Inputs+0x320>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80014bc:	b2d9      	uxtb	r1, r3
 80014be:	4a19      	ldr	r2, [pc, #100]	; (8001524 <Read_Inputs+0x324>)
 80014c0:	7813      	ldrb	r3, [r2, #0]
 80014c2:	f361 1386 	bfi	r3, r1, #6, #1
 80014c6:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_vozvrat					= meas_data.d_inputs.in7;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <Read_Inputs+0x320>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80014d0:	b2d9      	uxtb	r1, r3
 80014d2:	4a14      	ldr	r2, [pc, #80]	; (8001524 <Read_Inputs+0x324>)
 80014d4:	7813      	ldrb	r3, [r2, #0]
 80014d6:	f361 13c7 	bfi	r3, r1, #7, #1
 80014da:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_auto_local				= meas_data.d_inputs.in8;
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <Read_Inputs+0x320>)
 80014de:	785b      	ldrb	r3, [r3, #1]
 80014e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80014e4:	b2d9      	uxtb	r1, r3
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <Read_Inputs+0x324>)
 80014e8:	7853      	ldrb	r3, [r2, #1]
 80014ea:	f361 0300 	bfi	r3, r1, #0, #1
 80014ee:	7053      	strb	r3, [r2, #1]
	d_inputs.sq_kanistra				= meas_data.d_inputs.in9;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <Read_Inputs+0x320>)
 80014f2:	785b      	ldrb	r3, [r3, #1]
 80014f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80014f8:	b2d9      	uxtb	r1, r3
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <Read_Inputs+0x324>)
 80014fc:	7853      	ldrb	r3, [r2, #1]
 80014fe:	f361 0341 	bfi	r3, r1, #1, #1
 8001502:	7053      	strb	r3, [r2, #1]
	d_inputs.sq_kanistra_door			= meas_data.d_inputs.in10;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <Read_Inputs+0x320>)
 8001506:	785b      	ldrb	r3, [r3, #1]
 8001508:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800150c:	b2d9      	uxtb	r1, r3
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <Read_Inputs+0x324>)
 8001510:	7853      	ldrb	r3, [r2, #1]
 8001512:	f361 0382 	bfi	r3, r1, #2, #1
 8001516:	7053      	strb	r3, [r2, #1]




}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20006fb4 	.word	0x20006fb4
 8001520:	200074ac 	.word	0x200074ac
 8001524:	20006fc4 	.word	0x20006fc4

08001528 <Write_Outputs>:

void Write_Outputs()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	meas_data.d_outputs.out0  = settings.retain.output_emulation_switches.out0  ? settings.retain.output_emulation_values.out0  :  d_outputs.uz_prob_forv;
 800152c:	4b74      	ldr	r3, [pc, #464]	; (8001700 <Write_Outputs+0x1d8>)
 800152e:	791b      	ldrb	r3, [r3, #4]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <Write_Outputs+0x1e>
 800153a:	4b71      	ldr	r3, [pc, #452]	; (8001700 <Write_Outputs+0x1d8>)
 800153c:	799b      	ldrb	r3, [r3, #6]
 800153e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001542:	b2da      	uxtb	r2, r3
 8001544:	e004      	b.n	8001550 <Write_Outputs+0x28>
 8001546:	4b6f      	ldr	r3, [pc, #444]	; (8001704 <Write_Outputs+0x1dc>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	496d      	ldr	r1, [pc, #436]	; (8001708 <Write_Outputs+0x1e0>)
 8001552:	788b      	ldrb	r3, [r1, #2]
 8001554:	f362 0300 	bfi	r3, r2, #0, #1
 8001558:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out1  = settings.retain.output_emulation_switches.out1  ? settings.retain.output_emulation_values.out1  :  d_outputs.uz_prob_rev;
 800155a:	4b69      	ldr	r3, [pc, #420]	; (8001700 <Write_Outputs+0x1d8>)
 800155c:	791b      	ldrb	r3, [r3, #4]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <Write_Outputs+0x4c>
 8001568:	4b65      	ldr	r3, [pc, #404]	; (8001700 <Write_Outputs+0x1d8>)
 800156a:	799b      	ldrb	r3, [r3, #6]
 800156c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001570:	b2da      	uxtb	r2, r3
 8001572:	e004      	b.n	800157e <Write_Outputs+0x56>
 8001574:	4b63      	ldr	r3, [pc, #396]	; (8001704 <Write_Outputs+0x1dc>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4962      	ldr	r1, [pc, #392]	; (8001708 <Write_Outputs+0x1e0>)
 8001580:	788b      	ldrb	r3, [r1, #2]
 8001582:	f362 0341 	bfi	r3, r2, #1, #1
 8001586:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out2  = settings.retain.output_emulation_switches.out2  ? settings.retain.output_emulation_values.out2  :  d_outputs.prob_ready;
 8001588:	4b5d      	ldr	r3, [pc, #372]	; (8001700 <Write_Outputs+0x1d8>)
 800158a:	791b      	ldrb	r3, [r3, #4]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <Write_Outputs+0x7a>
 8001596:	4b5a      	ldr	r3, [pc, #360]	; (8001700 <Write_Outputs+0x1d8>)
 8001598:	799b      	ldrb	r3, [r3, #6]
 800159a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	e004      	b.n	80015ac <Write_Outputs+0x84>
 80015a2:	4b58      	ldr	r3, [pc, #352]	; (8001704 <Write_Outputs+0x1dc>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4956      	ldr	r1, [pc, #344]	; (8001708 <Write_Outputs+0x1e0>)
 80015ae:	788b      	ldrb	r3, [r1, #2]
 80015b0:	f362 0382 	bfi	r3, r2, #2, #1
 80015b4:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out3  = settings.retain.output_emulation_switches.out3  ? settings.retain.output_emulation_values.out3  :  0;
 80015b6:	4b52      	ldr	r3, [pc, #328]	; (8001700 <Write_Outputs+0x1d8>)
 80015b8:	791b      	ldrb	r3, [r3, #4]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <Write_Outputs+0xa8>
 80015c4:	4b4e      	ldr	r3, [pc, #312]	; (8001700 <Write_Outputs+0x1d8>)
 80015c6:	799b      	ldrb	r3, [r3, #6]
 80015c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80015cc:	b2d9      	uxtb	r1, r3
 80015ce:	e000      	b.n	80015d2 <Write_Outputs+0xaa>
 80015d0:	2100      	movs	r1, #0
 80015d2:	4a4d      	ldr	r2, [pc, #308]	; (8001708 <Write_Outputs+0x1e0>)
 80015d4:	7893      	ldrb	r3, [r2, #2]
 80015d6:	f361 03c3 	bfi	r3, r1, #3, #1
 80015da:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out4  = settings.retain.output_emulation_switches.out4  ? settings.retain.output_emulation_values.out4  :  0;
 80015dc:	4b48      	ldr	r3, [pc, #288]	; (8001700 <Write_Outputs+0x1d8>)
 80015de:	791b      	ldrb	r3, [r3, #4]
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <Write_Outputs+0xce>
 80015ea:	4b45      	ldr	r3, [pc, #276]	; (8001700 <Write_Outputs+0x1d8>)
 80015ec:	799b      	ldrb	r3, [r3, #6]
 80015ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80015f2:	b2d9      	uxtb	r1, r3
 80015f4:	e000      	b.n	80015f8 <Write_Outputs+0xd0>
 80015f6:	2100      	movs	r1, #0
 80015f8:	4a43      	ldr	r2, [pc, #268]	; (8001708 <Write_Outputs+0x1e0>)
 80015fa:	7893      	ldrb	r3, [r2, #2]
 80015fc:	f361 1304 	bfi	r3, r1, #4, #1
 8001600:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out5  = settings.retain.output_emulation_switches.out5  ? settings.retain.output_emulation_values.out5  :  0;
 8001602:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <Write_Outputs+0x1d8>)
 8001604:	791b      	ldrb	r3, [r3, #4]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <Write_Outputs+0xf4>
 8001610:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <Write_Outputs+0x1d8>)
 8001612:	799b      	ldrb	r3, [r3, #6]
 8001614:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001618:	b2d9      	uxtb	r1, r3
 800161a:	e000      	b.n	800161e <Write_Outputs+0xf6>
 800161c:	2100      	movs	r1, #0
 800161e:	4a3a      	ldr	r2, [pc, #232]	; (8001708 <Write_Outputs+0x1e0>)
 8001620:	7893      	ldrb	r3, [r2, #2]
 8001622:	f361 1345 	bfi	r3, r1, #5, #1
 8001626:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out6  = settings.retain.output_emulation_switches.out6  ? settings.retain.output_emulation_values.out6  :  0;
 8001628:	4b35      	ldr	r3, [pc, #212]	; (8001700 <Write_Outputs+0x1d8>)
 800162a:	791b      	ldrb	r3, [r3, #4]
 800162c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <Write_Outputs+0x11a>
 8001636:	4b32      	ldr	r3, [pc, #200]	; (8001700 <Write_Outputs+0x1d8>)
 8001638:	799b      	ldrb	r3, [r3, #6]
 800163a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800163e:	b2d9      	uxtb	r1, r3
 8001640:	e000      	b.n	8001644 <Write_Outputs+0x11c>
 8001642:	2100      	movs	r1, #0
 8001644:	4a30      	ldr	r2, [pc, #192]	; (8001708 <Write_Outputs+0x1e0>)
 8001646:	7893      	ldrb	r3, [r2, #2]
 8001648:	f361 1386 	bfi	r3, r1, #6, #1
 800164c:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out7  = settings.retain.output_emulation_switches.out7  ? settings.retain.output_emulation_values.out7  :  0;
 800164e:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <Write_Outputs+0x1d8>)
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <Write_Outputs+0x140>
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <Write_Outputs+0x1d8>)
 800165e:	799b      	ldrb	r3, [r3, #6]
 8001660:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001664:	b2d9      	uxtb	r1, r3
 8001666:	e000      	b.n	800166a <Write_Outputs+0x142>
 8001668:	2100      	movs	r1, #0
 800166a:	4a27      	ldr	r2, [pc, #156]	; (8001708 <Write_Outputs+0x1e0>)
 800166c:	7893      	ldrb	r3, [r2, #2]
 800166e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001672:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out8  = settings.retain.output_emulation_switches.out8  ? settings.retain.output_emulation_values.out8  :  0;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <Write_Outputs+0x1d8>)
 8001676:	795b      	ldrb	r3, [r3, #5]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <Write_Outputs+0x166>
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <Write_Outputs+0x1d8>)
 8001684:	79db      	ldrb	r3, [r3, #7]
 8001686:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800168a:	b2d9      	uxtb	r1, r3
 800168c:	e000      	b.n	8001690 <Write_Outputs+0x168>
 800168e:	2100      	movs	r1, #0
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <Write_Outputs+0x1e0>)
 8001692:	78d3      	ldrb	r3, [r2, #3]
 8001694:	f361 0300 	bfi	r3, r1, #0, #1
 8001698:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out9  = settings.retain.output_emulation_switches.out9  ? settings.retain.output_emulation_values.out9  :  0;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <Write_Outputs+0x1d8>)
 800169c:	795b      	ldrb	r3, [r3, #5]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <Write_Outputs+0x18c>
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <Write_Outputs+0x1d8>)
 80016aa:	79db      	ldrb	r3, [r3, #7]
 80016ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80016b0:	b2d9      	uxtb	r1, r3
 80016b2:	e000      	b.n	80016b6 <Write_Outputs+0x18e>
 80016b4:	2100      	movs	r1, #0
 80016b6:	4a14      	ldr	r2, [pc, #80]	; (8001708 <Write_Outputs+0x1e0>)
 80016b8:	78d3      	ldrb	r3, [r2, #3]
 80016ba:	f361 0341 	bfi	r3, r1, #1, #1
 80016be:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out10 = settings.retain.output_emulation_switches.out10 ? settings.retain.output_emulation_values.out10 :  0;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <Write_Outputs+0x1d8>)
 80016c2:	795b      	ldrb	r3, [r3, #5]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <Write_Outputs+0x1b2>
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <Write_Outputs+0x1d8>)
 80016d0:	79db      	ldrb	r3, [r3, #7]
 80016d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80016d6:	b2d9      	uxtb	r1, r3
 80016d8:	e000      	b.n	80016dc <Write_Outputs+0x1b4>
 80016da:	2100      	movs	r1, #0
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <Write_Outputs+0x1e0>)
 80016de:	78d3      	ldrb	r3, [r2, #3]
 80016e0:	f361 0382 	bfi	r3, r1, #2, #1
 80016e4:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out11 = settings.retain.output_emulation_switches.out11 ? settings.retain.output_emulation_values.out11 :  0;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <Write_Outputs+0x1d8>)
 80016e8:	795b      	ldrb	r3, [r3, #5]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00b      	beq.n	800170c <Write_Outputs+0x1e4>
 80016f4:	4b02      	ldr	r3, [pc, #8]	; (8001700 <Write_Outputs+0x1d8>)
 80016f6:	79db      	ldrb	r3, [r3, #7]
 80016f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80016fc:	b2d9      	uxtb	r1, r3
 80016fe:	e006      	b.n	800170e <Write_Outputs+0x1e6>
 8001700:	20007408 	.word	0x20007408
 8001704:	20006fc0 	.word	0x20006fc0
 8001708:	200074ac 	.word	0x200074ac
 800170c:	2100      	movs	r1, #0
 800170e:	4a45      	ldr	r2, [pc, #276]	; (8001824 <Write_Outputs+0x2fc>)
 8001710:	78d3      	ldrb	r3, [r2, #3]
 8001712:	f361 03c3 	bfi	r3, r1, #3, #1
 8001716:	70d3      	strb	r3, [r2, #3]
	HAL_GPIO_WritePin(DOUT_0_GPIO_Port, DOUT_0_Pin, meas_data.d_outputs.out0);
 8001718:	4b42      	ldr	r3, [pc, #264]	; (8001824 <Write_Outputs+0x2fc>)
 800171a:	789b      	ldrb	r3, [r3, #2]
 800171c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	4840      	ldr	r0, [pc, #256]	; (8001828 <Write_Outputs+0x300>)
 8001728:	f008 f8f8 	bl	800991c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_1_GPIO_Port, DOUT_1_Pin, meas_data.d_outputs.out1);
 800172c:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <Write_Outputs+0x2fc>)
 800172e:	789b      	ldrb	r3, [r3, #2]
 8001730:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173c:	483a      	ldr	r0, [pc, #232]	; (8001828 <Write_Outputs+0x300>)
 800173e:	f008 f8ed 	bl	800991c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_2_GPIO_Port, DOUT_2_Pin, meas_data.d_outputs.out2);
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <Write_Outputs+0x2fc>)
 8001744:	789b      	ldrb	r3, [r3, #2]
 8001746:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001752:	4835      	ldr	r0, [pc, #212]	; (8001828 <Write_Outputs+0x300>)
 8001754:	f008 f8e2 	bl	800991c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_3_GPIO_Port, DOUT_3_Pin, meas_data.d_outputs.out3);
 8001758:	4b32      	ldr	r3, [pc, #200]	; (8001824 <Write_Outputs+0x2fc>)
 800175a:	789b      	ldrb	r3, [r3, #2]
 800175c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001768:	482f      	ldr	r0, [pc, #188]	; (8001828 <Write_Outputs+0x300>)
 800176a:	f008 f8d7 	bl	800991c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_4_GPIO_Port, DOUT_4_Pin, meas_data.d_outputs.out4);
 800176e:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <Write_Outputs+0x2fc>)
 8001770:	789b      	ldrb	r3, [r3, #2]
 8001772:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177e:	482a      	ldr	r0, [pc, #168]	; (8001828 <Write_Outputs+0x300>)
 8001780:	f008 f8cc 	bl	800991c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_5_GPIO_Port, DOUT_5_Pin, meas_data.d_outputs.out5);
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <Write_Outputs+0x2fc>)
 8001786:	789b      	ldrb	r3, [r3, #2]
 8001788:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001794:	4824      	ldr	r0, [pc, #144]	; (8001828 <Write_Outputs+0x300>)
 8001796:	f008 f8c1 	bl	800991c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_6_GPIO_Port, DOUT_6_Pin, meas_data.d_outputs.out6);
 800179a:	4b22      	ldr	r3, [pc, #136]	; (8001824 <Write_Outputs+0x2fc>)
 800179c:	789b      	ldrb	r3, [r3, #2]
 800179e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017aa:	481f      	ldr	r0, [pc, #124]	; (8001828 <Write_Outputs+0x300>)
 80017ac:	f008 f8b6 	bl	800991c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_7_GPIO_Port, DOUT_7_Pin, meas_data.d_outputs.out7);
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <Write_Outputs+0x2fc>)
 80017b2:	789b      	ldrb	r3, [r3, #2]
 80017b4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c0:	4819      	ldr	r0, [pc, #100]	; (8001828 <Write_Outputs+0x300>)
 80017c2:	f008 f8ab 	bl	800991c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_8_GPIO_Port, DOUT_8_Pin, meas_data.d_outputs.out8);
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <Write_Outputs+0x2fc>)
 80017c8:	78db      	ldrb	r3, [r3, #3]
 80017ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d6:	4814      	ldr	r0, [pc, #80]	; (8001828 <Write_Outputs+0x300>)
 80017d8:	f008 f8a0 	bl	800991c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_9_GPIO_Port, DOUT_9_Pin, meas_data.d_outputs.out9);
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <Write_Outputs+0x2fc>)
 80017de:	78db      	ldrb	r3, [r3, #3]
 80017e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ec:	480f      	ldr	r0, [pc, #60]	; (800182c <Write_Outputs+0x304>)
 80017ee:	f008 f895 	bl	800991c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_10_GPIO_Port, DOUT_10_Pin, meas_data.d_outputs.out10);
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <Write_Outputs+0x2fc>)
 80017f4:	78db      	ldrb	r3, [r3, #3]
 80017f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001802:	480b      	ldr	r0, [pc, #44]	; (8001830 <Write_Outputs+0x308>)
 8001804:	f008 f88a 	bl	800991c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_11_GPIO_Port, DOUT_11_Pin, meas_data.d_outputs.out11);
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <Write_Outputs+0x2fc>)
 800180a:	78db      	ldrb	r3, [r3, #3]
 800180c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <Write_Outputs+0x308>)
 800181a:	f008 f87f 	bl	800991c <HAL_GPIO_WritePin>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200074ac 	.word	0x200074ac
 8001828:	40021000 	.word	0x40021000
 800182c:	40020400 	.word	0x40020400
 8001830:	40020c00 	.word	0x40020c00

08001834 <Filter_Inputs>:

static void Filter_Inputs()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
	uint8_t inputs[INPUT_NUMBER];

	inputs[0] = !HAL_GPIO_ReadPin(DIN_0_GPIO_Port, DIN_0_Pin);
 800183a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183e:	486a      	ldr	r0, [pc, #424]	; (80019e8 <Filter_Inputs+0x1b4>)
 8001840:	f008 f854 	bl	80098ec <HAL_GPIO_ReadPin>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf0c      	ite	eq
 800184a:	2301      	moveq	r3, #1
 800184c:	2300      	movne	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	703b      	strb	r3, [r7, #0]
	inputs[1] = !HAL_GPIO_ReadPin(DIN_1_GPIO_Port, DIN_1_Pin);
 8001852:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001856:	4864      	ldr	r0, [pc, #400]	; (80019e8 <Filter_Inputs+0x1b4>)
 8001858:	f008 f848 	bl	80098ec <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf0c      	ite	eq
 8001862:	2301      	moveq	r3, #1
 8001864:	2300      	movne	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	707b      	strb	r3, [r7, #1]
	inputs[2] = !HAL_GPIO_ReadPin(DIN_2_GPIO_Port, DIN_2_Pin);
 800186a:	2101      	movs	r1, #1
 800186c:	485f      	ldr	r0, [pc, #380]	; (80019ec <Filter_Inputs+0x1b8>)
 800186e:	f008 f83d 	bl	80098ec <HAL_GPIO_ReadPin>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	70bb      	strb	r3, [r7, #2]
	inputs[3] = !HAL_GPIO_ReadPin(DIN_3_GPIO_Port, DIN_3_Pin);
 8001880:	2102      	movs	r1, #2
 8001882:	485a      	ldr	r0, [pc, #360]	; (80019ec <Filter_Inputs+0x1b8>)
 8001884:	f008 f832 	bl	80098ec <HAL_GPIO_ReadPin>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf0c      	ite	eq
 800188e:	2301      	moveq	r3, #1
 8001890:	2300      	movne	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	70fb      	strb	r3, [r7, #3]
	inputs[4] = !HAL_GPIO_ReadPin(DIN_4_GPIO_Port, DIN_4_Pin);
 8001896:	2104      	movs	r1, #4
 8001898:	4854      	ldr	r0, [pc, #336]	; (80019ec <Filter_Inputs+0x1b8>)
 800189a:	f008 f827 	bl	80098ec <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf0c      	ite	eq
 80018a4:	2301      	moveq	r3, #1
 80018a6:	2300      	movne	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	713b      	strb	r3, [r7, #4]
	inputs[5] = !HAL_GPIO_ReadPin(DIN_5_GPIO_Port, DIN_5_Pin);
 80018ac:	2108      	movs	r1, #8
 80018ae:	484f      	ldr	r0, [pc, #316]	; (80019ec <Filter_Inputs+0x1b8>)
 80018b0:	f008 f81c 	bl	80098ec <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bf0c      	ite	eq
 80018ba:	2301      	moveq	r3, #1
 80018bc:	2300      	movne	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	717b      	strb	r3, [r7, #5]
	inputs[6] = !HAL_GPIO_ReadPin(DIN_6_GPIO_Port, DIN_6_Pin);
 80018c2:	2110      	movs	r1, #16
 80018c4:	4849      	ldr	r0, [pc, #292]	; (80019ec <Filter_Inputs+0x1b8>)
 80018c6:	f008 f811 	bl	80098ec <HAL_GPIO_ReadPin>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf0c      	ite	eq
 80018d0:	2301      	moveq	r3, #1
 80018d2:	2300      	movne	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	71bb      	strb	r3, [r7, #6]
	inputs[7] = !HAL_GPIO_ReadPin(DIN_7_GPIO_Port, DIN_7_Pin);
 80018d8:	2120      	movs	r1, #32
 80018da:	4844      	ldr	r0, [pc, #272]	; (80019ec <Filter_Inputs+0x1b8>)
 80018dc:	f008 f806 	bl	80098ec <HAL_GPIO_ReadPin>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	71fb      	strb	r3, [r7, #7]
	inputs[8] = !HAL_GPIO_ReadPin(DIN_8_GPIO_Port, DIN_8_Pin);
 80018ee:	2140      	movs	r1, #64	; 0x40
 80018f0:	483e      	ldr	r0, [pc, #248]	; (80019ec <Filter_Inputs+0x1b8>)
 80018f2:	f007 fffb 	bl	80098ec <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf0c      	ite	eq
 80018fc:	2301      	moveq	r3, #1
 80018fe:	2300      	movne	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	723b      	strb	r3, [r7, #8]
	inputs[9] = !HAL_GPIO_ReadPin(DIN_9_GPIO_Port, DIN_9_Pin);
 8001904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001908:	4839      	ldr	r0, [pc, #228]	; (80019f0 <Filter_Inputs+0x1bc>)
 800190a:	f007 ffef 	bl	80098ec <HAL_GPIO_ReadPin>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	727b      	strb	r3, [r7, #9]
	inputs[10] = !HAL_GPIO_ReadPin(DIN_10_GPIO_Port, DIN_10_Pin);
 800191c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001920:	4833      	ldr	r0, [pc, #204]	; (80019f0 <Filter_Inputs+0x1bc>)
 8001922:	f007 ffe3 	bl	80098ec <HAL_GPIO_ReadPin>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf0c      	ite	eq
 800192c:	2301      	moveq	r3, #1
 800192e:	2300      	movne	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	72bb      	strb	r3, [r7, #10]
	inputs[11] = !HAL_GPIO_ReadPin(DIN_11_GPIO_Port, DIN_11_Pin);
 8001934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001938:	482d      	ldr	r0, [pc, #180]	; (80019f0 <Filter_Inputs+0x1bc>)
 800193a:	f007 ffd7 	bl	80098ec <HAL_GPIO_ReadPin>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < INPUT_NUMBER; ++i) {
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e041      	b.n	80019d6 <Filter_Inputs+0x1a2>
		if(inputs[i])
 8001952:	463a      	mov	r2, r7
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00f      	beq.n	800197e <Filter_Inputs+0x14a>
		{
			filter_state[i] = filter_state[i]<ANTIDREBEZG_CNT ? filter_state[i]+1 : ANTIDREBEZG_CNT;
 800195e:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <Filter_Inputs+0x1c0>)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	b2db      	uxtb	r3, r3
 800196e:	3301      	adds	r3, #1
 8001970:	b2d9      	uxtb	r1, r3
 8001972:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <Filter_Inputs+0x1c0>)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	460a      	mov	r2, r1
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	e011      	b.n	80019a2 <Filter_Inputs+0x16e>
		}
		else
		{
			filter_state[i] = filter_state[i]>0 ? filter_state[i]-1 : 0;
 800197e:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <Filter_Inputs+0x1c0>)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <Filter_Inputs+0x164>
 800198a:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <Filter_Inputs+0x1c0>)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	3b01      	subs	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	e000      	b.n	800199a <Filter_Inputs+0x166>
 8001998:	2200      	movs	r2, #0
 800199a:	4916      	ldr	r1, [pc, #88]	; (80019f4 <Filter_Inputs+0x1c0>)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	440b      	add	r3, r1
 80019a0:	701a      	strb	r2, [r3, #0]
		}
		if (filter_state[i]>=ANTIDREBEZG_CNT) {
 80019a2:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <Filter_Inputs+0x1c0>)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d905      	bls.n	80019ba <Filter_Inputs+0x186>
			filters_inputs[i]=1;
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <Filter_Inputs+0x1c4>)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	e00a      	b.n	80019d0 <Filter_Inputs+0x19c>
		} else if(filter_state[i]==0) {
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <Filter_Inputs+0x1c0>)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d104      	bne.n	80019d0 <Filter_Inputs+0x19c>
			filters_inputs[i]=0;
 80019c6:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <Filter_Inputs+0x1c4>)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < INPUT_NUMBER; ++i) {
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3301      	adds	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b0b      	cmp	r3, #11
 80019da:	ddba      	ble.n	8001952 <Filter_Inputs+0x11e>
		}
	}

}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40020400 	.word	0x40020400
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40020800 	.word	0x40020800
 80019f4:	20006fc8 	.word	0x20006fc8
 80019f8:	20006fb4 	.word	0x20006fb4

080019fc <ethernet_reset>:

static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer);
static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf);

void ethernet_reset()
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2101      	movs	r1, #1
 8001a04:	4806      	ldr	r0, [pc, #24]	; (8001a20 <ethernet_reset+0x24>)
 8001a06:	f007 ff89 	bl	800991c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001a0a:	2064      	movs	r0, #100	; 0x64
 8001a0c:	f005 f990 	bl	8006d30 <HAL_Delay>
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, SET);
 8001a10:	2201      	movs	r2, #1
 8001a12:	2101      	movs	r1, #1
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <ethernet_reset+0x24>)
 8001a16:	f007 ff81 	bl	800991c <HAL_GPIO_WritePin>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40020000 	.word	0x40020000

08001a24 <ethernet_thread>:

void ethernet_thread(void *arg)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0cc      	sub	sp, #304	; 0x130
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	6018      	str	r0, [r3, #0]
	struct netconn *conn;
	struct netbuf *buf;
	ip_addr_t *client_addr;
	unsigned short local_port;
	unsigned short client_port;
	local_port = *((unsigned short*)arg);
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	void* data;
	uint8_t answer[256];
	u16_t len;
	uint16_t answer_len;
	conn = netconn_new(NETCONN_UDP);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2020      	movs	r0, #32
 8001a3e:	f00f f8e7 	bl	8010c10 <netconn_new_with_proto_and_callback>
 8001a42:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
	if (conn!= NULL)
 8001a46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d05b      	beq.n	8001b06 <ethernet_thread+0xe2>
	{
	  err = netconn_bind(conn, IP_ADDR_ANY, local_port);
 8001a4e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8001a52:	461a      	mov	r2, r3
 8001a54:	492e      	ldr	r1, [pc, #184]	; (8001b10 <ethernet_thread+0xec>)
 8001a56:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001a5a:	f00f f993 	bl	8010d84 <netconn_bind>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  if (err == ERR_OK)
 8001a64:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d148      	bne.n	8001afe <ethernet_thread+0xda>
	  {
		  for(;;)
		  {
			  recv_err = netconn_recv(conn, &buf);
 8001a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a70:	4619      	mov	r1, r3
 8001a72:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001a76:	f00f fb39 	bl	80110ec <netconn_recv>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
			  if (recv_err == ERR_OK)
 8001a80:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f1      	bne.n	8001a6c <ethernet_thread+0x48>
			  {
				  client_addr = netbuf_fromaddr(buf);
 8001a88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a8c:	3308      	adds	r3, #8
 8001a8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				  client_port = netbuf_fromport(buf);
 8001a92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a96:	899b      	ldrh	r3, [r3, #12]
 8001a98:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

				  netbuf_data(buf, &data, &len);
 8001a9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001aa0:	f107 020a 	add.w	r2, r7, #10
 8001aa4:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f010 fef1 	bl	8012890 <netbuf_data>
				  answer_len = ethernet_answer(data, len, answer);
 8001aae:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001ab2:	f107 030a 	add.w	r3, r7, #10
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	f107 020c 	add.w	r2, r7, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	f000 f859 	bl	8001b74 <ethernet_answer>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				  if(answer_len)
 8001ac8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d010      	beq.n	8001af2 <ethernet_thread+0xce>
				  {
					  Send(conn, answer, answer_len, client_addr, client_port, buf);
 8001ad0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ad4:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001ad8:	f107 010c 	add.w	r1, r7, #12
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ae8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001aec:	f000 f812 	bl	8001b14 <Send>
 8001af0:	e7bc      	b.n	8001a6c <ethernet_thread+0x48>
				  }
				  else netbuf_delete(buf);
 8001af2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001af6:	4618      	mov	r0, r3
 8001af8:	f010 fe60 	bl	80127bc <netbuf_delete>
			  recv_err = netconn_recv(conn, &buf);
 8001afc:	e7b6      	b.n	8001a6c <ethernet_thread+0x48>

		  }
	  }
	  else
	  {
	    netconn_delete(conn);
 8001afe:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001b02:	f00f f923 	bl	8010d4c <netconn_delete>
	  }
	}
}
 8001b06:	bf00      	nop
 8001b08:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	08026c24 	.word	0x08026c24

08001b14 <Send>:

static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	80fb      	strh	r3, [r7, #6]
	u32_t address = addr->addr;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	617b      	str	r3, [r7, #20]
	netbuf_delete(buf);
 8001b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b2c:	f010 fe46 	bl	80127bc <netbuf_delete>
	buf = netbuf_new();
 8001b30:	f010 fe30 	bl	8012794 <netbuf_new>
 8001b34:	6278      	str	r0, [r7, #36]	; 0x24
	buf->port = port;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	8c3a      	ldrh	r2, [r7, #32]
 8001b3a:	819a      	strh	r2, [r3, #12]
	addr->addr = address;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	601a      	str	r2, [r3, #0]
	err_t err;
	err  = netbuf_ref(buf, pointer, size);
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	461a      	mov	r2, r3
 8001b46:	68b9      	ldr	r1, [r7, #8]
 8001b48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b4a:	f010 fe57 	bl	80127fc <netbuf_ref>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	74fb      	strb	r3, [r7, #19]
	if(err==ERR_OK)
 8001b52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d108      	bne.n	8001b6c <Send+0x58>
	{
		netconn_sendto(conn, buf, addr, port);
 8001b5a:	8c3b      	ldrh	r3, [r7, #32]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f00f fb3d 	bl	80111e0 <netconn_sendto>
		netbuf_delete(buf);
 8001b66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b68:	f010 fe28 	bl	80127bc <netbuf_delete>
	}
}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <ethernet_answer>:

//Возвращает кол-во байт для отправки клиенту
static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	817b      	strh	r3, [r7, #10]
	int result = ModbusParse(data, data_length, answer, ETHERNET);
 8001b82:	8979      	ldrh	r1, [r7, #10]
 8001b84:	2301      	movs	r3, #1
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f003 f827 	bl	8004bdc <ModbusParse>
 8001b8e:	6178      	str	r0, [r7, #20]
	if(result)return result;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <ethernet_answer+0x26>
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	e00d      	b.n	8001bb6 <ethernet_answer+0x42>
	result = OnKeyPress(data, data_length, answer);
 8001b9a:	897b      	ldrh	r3, [r7, #10]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fc96 	bl	80024d4 <OnKeyPress>
 8001ba8:	6178      	str	r0, [r7, #20]
	if(result!=0)return 81;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <ethernet_answer+0x40>
 8001bb0:	2351      	movs	r3, #81	; 0x51
 8001bb2:	e000      	b.n	8001bb6 <ethernet_answer+0x42>
	return 0;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <framDataRead>:
#include <fram.h>

extern SPI_HandleTypeDef hspi3;

int framDataRead (uint16_t address, uint8_t * data, uint16_t size)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	80fb      	strh	r3, [r7, #6]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	80bb      	strh	r3, [r7, #4]
	int result = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
	uint8_t buff[3];

	buff[0] = FRAM_CMD_READ;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	723b      	strb	r3, [r7, #8]
	buff[1] = address >> 8;
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	727b      	strb	r3, [r7, #9]
	buff[2] = address & 0xFF;
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bee:	4811      	ldr	r0, [pc, #68]	; (8001c34 <framDataRead+0x74>)
 8001bf0:	f007 fe94 	bl	800991c <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi3, buff, 3, 200);
 8001bf4:	f107 0108 	add.w	r1, r7, #8
 8001bf8:	23c8      	movs	r3, #200	; 0xc8
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	480e      	ldr	r0, [pc, #56]	; (8001c38 <framDataRead+0x78>)
 8001bfe:	f008 fc12 	bl	800a426 <HAL_SPI_Transmit>
 8001c02:	4603      	mov	r3, r0
 8001c04:	60fb      	str	r3, [r7, #12]
	result |= HAL_SPI_Receive(&hspi3, data, size, 200);
 8001c06:	88ba      	ldrh	r2, [r7, #4]
 8001c08:	23c8      	movs	r3, #200	; 0xc8
 8001c0a:	6839      	ldr	r1, [r7, #0]
 8001c0c:	480a      	ldr	r0, [pc, #40]	; (8001c38 <framDataRead+0x78>)
 8001c0e:	f008 fd46 	bl	800a69e <HAL_SPI_Receive>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c22:	4804      	ldr	r0, [pc, #16]	; (8001c34 <framDataRead+0x74>)
 8001c24:	f007 fe7a 	bl	800991c <HAL_GPIO_WritePin>

	return result;
 8001c28:	68fb      	ldr	r3, [r7, #12]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40020000 	.word	0x40020000
 8001c38:	200071e0 	.word	0x200071e0

08001c3c <framDataWrite>:

int framDataWrite (uint16_t address, uint8_t * data, uint16_t size)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	80fb      	strh	r3, [r7, #6]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	80bb      	strh	r3, [r7, #4]
	int result = 0, status = 0, cntr = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
	uint8_t buff[3];

	buff[0] = FRAM_CMD_WREN;
 8001c58:	2306      	movs	r3, #6
 8001c5a:	723b      	strb	r3, [r7, #8]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c62:	483f      	ldr	r0, [pc, #252]	; (8001d60 <framDataWrite+0x124>)
 8001c64:	f007 fe5a 	bl	800991c <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi3, buff, 1, 200);
 8001c68:	f107 0108 	add.w	r1, r7, #8
 8001c6c:	23c8      	movs	r3, #200	; 0xc8
 8001c6e:	2201      	movs	r2, #1
 8001c70:	483c      	ldr	r0, [pc, #240]	; (8001d64 <framDataWrite+0x128>)
 8001c72:	f008 fbd8 	bl	800a426 <HAL_SPI_Transmit>
 8001c76:	4603      	mov	r3, r0
 8001c78:	617b      	str	r3, [r7, #20]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c80:	4837      	ldr	r0, [pc, #220]	; (8001d60 <framDataWrite+0x124>)
 8001c82:	f007 fe4b 	bl	800991c <HAL_GPIO_WritePin>
	buff[0] = FRAM_CMD_RDSR;
 8001c86:	2305      	movs	r3, #5
 8001c88:	723b      	strb	r3, [r7, #8]
	while ((status == 0) && (cntr++ < 100))
 8001c8a:	e027      	b.n	8001cdc <framDataWrite+0xa0>
	{
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c92:	4833      	ldr	r0, [pc, #204]	; (8001d60 <framDataWrite+0x124>)
 8001c94:	f007 fe42 	bl	800991c <HAL_GPIO_WritePin>
		result |= HAL_SPI_Transmit(&hspi3, buff, 1, 200);
 8001c98:	f107 0108 	add.w	r1, r7, #8
 8001c9c:	23c8      	movs	r3, #200	; 0xc8
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4830      	ldr	r0, [pc, #192]	; (8001d64 <framDataWrite+0x128>)
 8001ca2:	f008 fbc0 	bl	800a426 <HAL_SPI_Transmit>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
		result |= HAL_SPI_Receive(&hspi3, buff, 1, 200);
 8001cb0:	f107 0108 	add.w	r1, r7, #8
 8001cb4:	23c8      	movs	r3, #200	; 0xc8
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	482a      	ldr	r0, [pc, #168]	; (8001d64 <framDataWrite+0x128>)
 8001cba:	f008 fcf0 	bl	800a69e <HAL_SPI_Receive>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cce:	4824      	ldr	r0, [pc, #144]	; (8001d60 <framDataWrite+0x124>)
 8001cd0:	f007 fe24 	bl	800991c <HAL_GPIO_WritePin>
		status = buff[0] & 0x02;
 8001cd4:	7a3b      	ldrb	r3, [r7, #8]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	613b      	str	r3, [r7, #16]
	while ((status == 0) && (cntr++ < 100))
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d104      	bne.n	8001cec <framDataWrite+0xb0>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	60fa      	str	r2, [r7, #12]
 8001ce8:	2b63      	cmp	r3, #99	; 0x63
 8001cea:	ddcf      	ble.n	8001c8c <framDataWrite+0x50>
	}
	if (!status)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d103      	bne.n	8001cfa <framDataWrite+0xbe>
		result = -2;
 8001cf2:	f06f 0301 	mvn.w	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	e02c      	b.n	8001d54 <framDataWrite+0x118>
	else
	{
		buff[0] = FRAM_CMD_WRITE;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	723b      	strb	r3, [r7, #8]
		buff[1] = address >> 8;
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	727b      	strb	r3, [r7, #9]
		buff[2] = address & 0xFF;
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	72bb      	strb	r3, [r7, #10]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d14:	4812      	ldr	r0, [pc, #72]	; (8001d60 <framDataWrite+0x124>)
 8001d16:	f007 fe01 	bl	800991c <HAL_GPIO_WritePin>
		result |= HAL_SPI_Transmit(&hspi3, buff, 3, 200);
 8001d1a:	f107 0108 	add.w	r1, r7, #8
 8001d1e:	23c8      	movs	r3, #200	; 0xc8
 8001d20:	2203      	movs	r2, #3
 8001d22:	4810      	ldr	r0, [pc, #64]	; (8001d64 <framDataWrite+0x128>)
 8001d24:	f008 fb7f 	bl	800a426 <HAL_SPI_Transmit>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
		result |= HAL_SPI_Transmit(&hspi3, data, size, 200);
 8001d32:	88ba      	ldrh	r2, [r7, #4]
 8001d34:	23c8      	movs	r3, #200	; 0xc8
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	480a      	ldr	r0, [pc, #40]	; (8001d64 <framDataWrite+0x128>)
 8001d3a:	f008 fb74 	bl	800a426 <HAL_SPI_Transmit>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d4e:	4804      	ldr	r0, [pc, #16]	; (8001d60 <framDataWrite+0x124>)
 8001d50:	f007 fde4 	bl	800991c <HAL_GPIO_WritePin>
	}

	return result;
 8001d54:	697b      	ldr	r3, [r7, #20]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40020000 	.word	0x40020000
 8001d64:	200071e0 	.word	0x200071e0

08001d68 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <vApplicationGetIdleTaskMemory+0x30>)
 8001d7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000550 	.word	0x20000550
 8001d98:	20000604 	.word	0x20000604

08001d9c <task_init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void task_init()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af02      	add	r7, sp, #8
	size_t fre = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
	fre=xPortGetFreeHeapSize();
 8001da6:	f00e fe4d 	bl	8010a44 <xPortGetFreeHeapSize>
 8001daa:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread1", ethernet_thread, (void*)&port1, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8001dac:	2300      	movs	r3, #0
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <task_init+0x90>)
 8001db6:	491e      	ldr	r1, [pc, #120]	; (8001e30 <task_init+0x94>)
 8001db8:	481e      	ldr	r0, [pc, #120]	; (8001e34 <task_init+0x98>)
 8001dba:	f01b ffd7 	bl	801dd6c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001dbe:	f00e fe41 	bl	8010a44 <xPortGetFreeHeapSize>
 8001dc2:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread2", ethernet_thread, (void*)&port2, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dcc:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <task_init+0x9c>)
 8001dce:	4918      	ldr	r1, [pc, #96]	; (8001e30 <task_init+0x94>)
 8001dd0:	481a      	ldr	r0, [pc, #104]	; (8001e3c <task_init+0xa0>)
 8001dd2:	f01b ffcb 	bl	801dd6c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001dd6:	f00e fe35 	bl	8010a44 <xPortGetFreeHeapSize>
 8001dda:	6178      	str	r0, [r7, #20]
	sys_thread_new("uart_thread", uart_thread, (void*)NULL, 512, osPriorityNormal );
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de4:	2200      	movs	r2, #0
 8001de6:	4916      	ldr	r1, [pc, #88]	; (8001e40 <task_init+0xa4>)
 8001de8:	4816      	ldr	r0, [pc, #88]	; (8001e44 <task_init+0xa8>)
 8001dea:	f01b ffbf 	bl	801dd6c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001dee:	f00e fe29 	bl	8010a44 <xPortGetFreeHeapSize>
 8001df2:	6178      	str	r0, [r7, #20]
	osMailQDef(uart_queue, UART_QUEUE_SIZE, Uart_Queue_Struct);
 8001df4:	2303      	movs	r3, #3
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	2310      	movs	r3, #16
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	60fb      	str	r3, [r7, #12]
	uart_queue = osMailCreate(osMailQ(uart_queue), NULL);
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f00c f892 	bl	800df30 <osMailCreate>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <task_init+0xac>)
 8001e10:	6013      	str	r3, [r2, #0]
	sys_thread_new("keyboard_thread", keyscan_thread, (void*)NULL, 128, osPriorityNormal );
 8001e12:	2300      	movs	r3, #0
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	2200      	movs	r2, #0
 8001e1a:	490c      	ldr	r1, [pc, #48]	; (8001e4c <task_init+0xb0>)
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <task_init+0xb4>)
 8001e1e:	f01b ffa5 	bl	801dd6c <sys_thread_new>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	08001a25 	.word	0x08001a25
 8001e34:	08023118 	.word	0x08023118
 8001e38:	20000002 	.word	0x20000002
 8001e3c:	08023124 	.word	0x08023124
 8001e40:	08006765 	.word	0x08006765
 8001e44:	08023130 	.word	0x08023130
 8001e48:	20006fd4 	.word	0x20006fd4
 8001e4c:	08001e55 	.word	0x08001e55
 8001e50:	0802313c 	.word	0x0802313c

08001e54 <keyscan_thread>:
static void key_filter_all();
static void PrintSymbol(const char *str);


void keyscan_thread(void *argument)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	int result = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
	int time;
	int last_time;

	result = OnKeyPress("F1", strlen("F1"), lcd);
 8001e60:	4a40      	ldr	r2, [pc, #256]	; (8001f64 <keyscan_thread+0x110>)
 8001e62:	2102      	movs	r1, #2
 8001e64:	4840      	ldr	r0, [pc, #256]	; (8001f68 <keyscan_thread+0x114>)
 8001e66:	f000 fb35 	bl	80024d4 <OnKeyPress>
 8001e6a:	6138      	str	r0, [r7, #16]
	if(result!=0)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <keyscan_thread+0x22>
	{
		SendToLcd();
 8001e72:	f000 fb0f 	bl	8002494 <SendToLcd>
	}
	while(1)
	{
		Tact_pins();
 8001e76:	f000 f87d 	bl	8001f74 <Tact_pins>
		Key_Read();
 8001e7a:	f000 f987 	bl	800218c <Key_Read>
		key_filter_all();
 8001e7e:	f000 f9fb 	bl	8002278 <key_filter_all>
		GetPositiveFront();
 8001e82:	f000 faa9 	bl	80023d8 <GetPositiveFront>
		for (int i = 0; i < 6; ++i) {
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	e04a      	b.n	8001f22 <keyscan_thread+0xce>
			for (int j = 0; j < 6; ++j) {
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e041      	b.n	8001f16 <keyscan_thread+0xc2>
				if(positive_fronts[i][j])
 8001e92:	4936      	ldr	r1, [pc, #216]	; (8001f6c <keyscan_thread+0x118>)
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4613      	mov	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	18ca      	adds	r2, r1, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d032      	beq.n	8001f10 <keyscan_thread+0xbc>
				{
					if(keys[i][j]!=NULL)
 8001eaa:	4931      	ldr	r1, [pc, #196]	; (8001f70 <keyscan_thread+0x11c>)
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d026      	beq.n	8001f10 <keyscan_thread+0xbc>
					{
						result = OnKeyPress(keys[i][j], strlen(keys[i][j]), (uint8_t*)lcd);
 8001ec2:	492b      	ldr	r1, [pc, #172]	; (8001f70 <keyscan_thread+0x11c>)
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8001ed6:	4926      	ldr	r1, [pc, #152]	; (8001f70 <keyscan_thread+0x11c>)
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe f970 	bl	80001d0 <strlen>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <keyscan_thread+0x110>)
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f000 faeb 	bl	80024d4 <OnKeyPress>
 8001efe:	6138      	str	r0, [r7, #16]
						if(result!=0)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <keyscan_thread+0xbc>
						{
							SendToLcd();
 8001f06:	f000 fac5 	bl	8002494 <SendToLcd>
							SetCursor(result);
 8001f0a:	6938      	ldr	r0, [r7, #16]
 8001f0c:	f002 f8f8 	bl	8004100 <SetCursor>
			for (int j = 0; j < 6; ++j) {
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	ddba      	ble.n	8001e92 <keyscan_thread+0x3e>
		for (int i = 0; i < 6; ++i) {
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	ddb1      	ble.n	8001e8c <keyscan_thread+0x38>
						}
					}
				}
			}
		}
		time = HAL_GetTick();
 8001f28:	f004 fef6 	bl	8006d18 <HAL_GetTick>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60fb      	str	r3, [r7, #12]
		if((time-last_time)>500)
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f3a:	dd0f      	ble.n	8001f5c <keyscan_thread+0x108>
		{
			result = LcdUpdate((uint8_t*)lcd);
 8001f3c:	4809      	ldr	r0, [pc, #36]	; (8001f64 <keyscan_thread+0x110>)
 8001f3e:	f001 fc99 	bl	8003874 <LcdUpdate>
 8001f42:	4603      	mov	r3, r0
 8001f44:	613b      	str	r3, [r7, #16]
			if(result!=0)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <keyscan_thread+0x104>
			{
				SendToLcd();
 8001f4c:	f000 faa2 	bl	8002494 <SendToLcd>
				SetCursor(-1);
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	f002 f8d4 	bl	8004100 <SetCursor>
			}
			last_time = time;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	61fb      	str	r3, [r7, #28]
		}
		osDelay(2);
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	f00b fc90 	bl	800d882 <osDelay>
		Tact_pins();
 8001f62:	e788      	b.n	8001e76 <keyscan_thread+0x22>
 8001f64:	20006fd8 	.word	0x20006fd8
 8001f68:	08023164 	.word	0x08023164
 8001f6c:	20000894 	.word	0x20000894
 8001f70:	20000004 	.word	0x20000004

08001f74 <Tact_pins>:
	}
}

static void Tact_pins(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	out_key_pin = (out_key_pin+1)%COLUMNS_COUNT;
 8001f78:	4b81      	ldr	r3, [pc, #516]	; (8002180 <Tact_pins+0x20c>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	4b81      	ldr	r3, [pc, #516]	; (8002184 <Tact_pins+0x210>)
 8001f80:	fb83 3102 	smull	r3, r1, r3, r2
 8001f84:	17d3      	asrs	r3, r2, #31
 8001f86:	1ac9      	subs	r1, r1, r3
 8001f88:	460b      	mov	r3, r1
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	440b      	add	r3, r1
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	1ad1      	subs	r1, r2, r3
 8001f92:	b2ca      	uxtb	r2, r1
 8001f94:	4b7a      	ldr	r3, [pc, #488]	; (8002180 <Tact_pins+0x20c>)
 8001f96:	701a      	strb	r2, [r3, #0]
	switch(out_key_pin)
 8001f98:	4b79      	ldr	r3, [pc, #484]	; (8002180 <Tact_pins+0x20c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b05      	cmp	r3, #5
 8001f9e:	f200 80ed 	bhi.w	800217c <Tact_pins+0x208>
 8001fa2:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <Tact_pins+0x34>)
 8001fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa8:	08001fc1 	.word	0x08001fc1
 8001fac:	0800200b 	.word	0x0800200b
 8001fb0:	08002055 	.word	0x08002055
 8001fb4:	0800209f 	.word	0x0800209f
 8001fb8:	080020e9 	.word	0x080020e9
 8001fbc:	08002133 	.word	0x08002133
	{
		case 0:
			C0_HIGH;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc6:	4870      	ldr	r0, [pc, #448]	; (8002188 <Tact_pins+0x214>)
 8001fc8:	f007 fca8 	bl	800991c <HAL_GPIO_WritePin>
			C1_LOW;
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd2:	486d      	ldr	r0, [pc, #436]	; (8002188 <Tact_pins+0x214>)
 8001fd4:	f007 fca2 	bl	800991c <HAL_GPIO_WritePin>
			C2_LOW;
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fde:	486a      	ldr	r0, [pc, #424]	; (8002188 <Tact_pins+0x214>)
 8001fe0:	f007 fc9c 	bl	800991c <HAL_GPIO_WritePin>
			C3_LOW;
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fea:	4867      	ldr	r0, [pc, #412]	; (8002188 <Tact_pins+0x214>)
 8001fec:	f007 fc96 	bl	800991c <HAL_GPIO_WritePin>
			C4_LOW;
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ff6:	4864      	ldr	r0, [pc, #400]	; (8002188 <Tact_pins+0x214>)
 8001ff8:	f007 fc90 	bl	800991c <HAL_GPIO_WritePin>
			C5_LOW;
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002002:	4861      	ldr	r0, [pc, #388]	; (8002188 <Tact_pins+0x214>)
 8002004:	f007 fc8a 	bl	800991c <HAL_GPIO_WritePin>
			break;
 8002008:	e0b8      	b.n	800217c <Tact_pins+0x208>
		case 1:
			C0_LOW;
 800200a:	2200      	movs	r2, #0
 800200c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002010:	485d      	ldr	r0, [pc, #372]	; (8002188 <Tact_pins+0x214>)
 8002012:	f007 fc83 	bl	800991c <HAL_GPIO_WritePin>
			C1_HIGH;
 8002016:	2201      	movs	r2, #1
 8002018:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800201c:	485a      	ldr	r0, [pc, #360]	; (8002188 <Tact_pins+0x214>)
 800201e:	f007 fc7d 	bl	800991c <HAL_GPIO_WritePin>
			C2_LOW;
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002028:	4857      	ldr	r0, [pc, #348]	; (8002188 <Tact_pins+0x214>)
 800202a:	f007 fc77 	bl	800991c <HAL_GPIO_WritePin>
			C3_LOW;
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002034:	4854      	ldr	r0, [pc, #336]	; (8002188 <Tact_pins+0x214>)
 8002036:	f007 fc71 	bl	800991c <HAL_GPIO_WritePin>
			C4_LOW;
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002040:	4851      	ldr	r0, [pc, #324]	; (8002188 <Tact_pins+0x214>)
 8002042:	f007 fc6b 	bl	800991c <HAL_GPIO_WritePin>
			C5_LOW;
 8002046:	2200      	movs	r2, #0
 8002048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800204c:	484e      	ldr	r0, [pc, #312]	; (8002188 <Tact_pins+0x214>)
 800204e:	f007 fc65 	bl	800991c <HAL_GPIO_WritePin>
			break;
 8002052:	e093      	b.n	800217c <Tact_pins+0x208>
		case 2:
			C0_LOW;
 8002054:	2200      	movs	r2, #0
 8002056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800205a:	484b      	ldr	r0, [pc, #300]	; (8002188 <Tact_pins+0x214>)
 800205c:	f007 fc5e 	bl	800991c <HAL_GPIO_WritePin>
			C1_LOW;
 8002060:	2200      	movs	r2, #0
 8002062:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002066:	4848      	ldr	r0, [pc, #288]	; (8002188 <Tact_pins+0x214>)
 8002068:	f007 fc58 	bl	800991c <HAL_GPIO_WritePin>
			C2_HIGH;
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002072:	4845      	ldr	r0, [pc, #276]	; (8002188 <Tact_pins+0x214>)
 8002074:	f007 fc52 	bl	800991c <HAL_GPIO_WritePin>
			C3_LOW;
 8002078:	2200      	movs	r2, #0
 800207a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800207e:	4842      	ldr	r0, [pc, #264]	; (8002188 <Tact_pins+0x214>)
 8002080:	f007 fc4c 	bl	800991c <HAL_GPIO_WritePin>
			C4_LOW;
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800208a:	483f      	ldr	r0, [pc, #252]	; (8002188 <Tact_pins+0x214>)
 800208c:	f007 fc46 	bl	800991c <HAL_GPIO_WritePin>
			C5_LOW;
 8002090:	2200      	movs	r2, #0
 8002092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002096:	483c      	ldr	r0, [pc, #240]	; (8002188 <Tact_pins+0x214>)
 8002098:	f007 fc40 	bl	800991c <HAL_GPIO_WritePin>
			break;
 800209c:	e06e      	b.n	800217c <Tact_pins+0x208>
		case 3:
			C0_LOW;
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020a4:	4838      	ldr	r0, [pc, #224]	; (8002188 <Tact_pins+0x214>)
 80020a6:	f007 fc39 	bl	800991c <HAL_GPIO_WritePin>
			C1_LOW;
 80020aa:	2200      	movs	r2, #0
 80020ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b0:	4835      	ldr	r0, [pc, #212]	; (8002188 <Tact_pins+0x214>)
 80020b2:	f007 fc33 	bl	800991c <HAL_GPIO_WritePin>
			C2_LOW;
 80020b6:	2200      	movs	r2, #0
 80020b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020bc:	4832      	ldr	r0, [pc, #200]	; (8002188 <Tact_pins+0x214>)
 80020be:	f007 fc2d 	bl	800991c <HAL_GPIO_WritePin>
			C3_HIGH;
 80020c2:	2201      	movs	r2, #1
 80020c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c8:	482f      	ldr	r0, [pc, #188]	; (8002188 <Tact_pins+0x214>)
 80020ca:	f007 fc27 	bl	800991c <HAL_GPIO_WritePin>
			C4_LOW;
 80020ce:	2200      	movs	r2, #0
 80020d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020d4:	482c      	ldr	r0, [pc, #176]	; (8002188 <Tact_pins+0x214>)
 80020d6:	f007 fc21 	bl	800991c <HAL_GPIO_WritePin>
			C5_LOW;
 80020da:	2200      	movs	r2, #0
 80020dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020e0:	4829      	ldr	r0, [pc, #164]	; (8002188 <Tact_pins+0x214>)
 80020e2:	f007 fc1b 	bl	800991c <HAL_GPIO_WritePin>
			break;
 80020e6:	e049      	b.n	800217c <Tact_pins+0x208>
		case 4:
			C0_LOW;
 80020e8:	2200      	movs	r2, #0
 80020ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ee:	4826      	ldr	r0, [pc, #152]	; (8002188 <Tact_pins+0x214>)
 80020f0:	f007 fc14 	bl	800991c <HAL_GPIO_WritePin>
			C1_LOW;
 80020f4:	2200      	movs	r2, #0
 80020f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020fa:	4823      	ldr	r0, [pc, #140]	; (8002188 <Tact_pins+0x214>)
 80020fc:	f007 fc0e 	bl	800991c <HAL_GPIO_WritePin>
			C2_LOW;
 8002100:	2200      	movs	r2, #0
 8002102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002106:	4820      	ldr	r0, [pc, #128]	; (8002188 <Tact_pins+0x214>)
 8002108:	f007 fc08 	bl	800991c <HAL_GPIO_WritePin>
			C3_LOW;
 800210c:	2200      	movs	r2, #0
 800210e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002112:	481d      	ldr	r0, [pc, #116]	; (8002188 <Tact_pins+0x214>)
 8002114:	f007 fc02 	bl	800991c <HAL_GPIO_WritePin>
			C4_HIGH;
 8002118:	2201      	movs	r2, #1
 800211a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800211e:	481a      	ldr	r0, [pc, #104]	; (8002188 <Tact_pins+0x214>)
 8002120:	f007 fbfc 	bl	800991c <HAL_GPIO_WritePin>
			C5_LOW;
 8002124:	2200      	movs	r2, #0
 8002126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800212a:	4817      	ldr	r0, [pc, #92]	; (8002188 <Tact_pins+0x214>)
 800212c:	f007 fbf6 	bl	800991c <HAL_GPIO_WritePin>
			break;
 8002130:	e024      	b.n	800217c <Tact_pins+0x208>
		case 5:
			C0_LOW;
 8002132:	2200      	movs	r2, #0
 8002134:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002138:	4813      	ldr	r0, [pc, #76]	; (8002188 <Tact_pins+0x214>)
 800213a:	f007 fbef 	bl	800991c <HAL_GPIO_WritePin>
			C1_LOW;
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002144:	4810      	ldr	r0, [pc, #64]	; (8002188 <Tact_pins+0x214>)
 8002146:	f007 fbe9 	bl	800991c <HAL_GPIO_WritePin>
			C2_LOW;
 800214a:	2200      	movs	r2, #0
 800214c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002150:	480d      	ldr	r0, [pc, #52]	; (8002188 <Tact_pins+0x214>)
 8002152:	f007 fbe3 	bl	800991c <HAL_GPIO_WritePin>
			C3_LOW;
 8002156:	2200      	movs	r2, #0
 8002158:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800215c:	480a      	ldr	r0, [pc, #40]	; (8002188 <Tact_pins+0x214>)
 800215e:	f007 fbdd 	bl	800991c <HAL_GPIO_WritePin>
			C4_LOW;
 8002162:	2200      	movs	r2, #0
 8002164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002168:	4807      	ldr	r0, [pc, #28]	; (8002188 <Tact_pins+0x214>)
 800216a:	f007 fbd7 	bl	800991c <HAL_GPIO_WritePin>
			C5_HIGH;
 800216e:	2201      	movs	r2, #1
 8002170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002174:	4804      	ldr	r0, [pc, #16]	; (8002188 <Tact_pins+0x214>)
 8002176:	f007 fbd1 	bl	800991c <HAL_GPIO_WritePin>
			break;
 800217a:	bf00      	nop
	}
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20007028 	.word	0x20007028
 8002184:	2aaaaaab 	.word	0x2aaaaaab
 8002188:	40020c00 	.word	0x40020c00

0800218c <Key_Read>:


static void Key_Read(void)
{
 800218c:	b598      	push	{r3, r4, r7, lr}
 800218e:	af00      	add	r7, sp, #0
	key_input_mask[out_key_pin][0] = R0_IN;
 8002190:	4b36      	ldr	r3, [pc, #216]	; (800226c <Key_Read+0xe0>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	461c      	mov	r4, r3
 8002196:	2101      	movs	r1, #1
 8002198:	4835      	ldr	r0, [pc, #212]	; (8002270 <Key_Read+0xe4>)
 800219a:	f007 fba7 	bl	80098ec <HAL_GPIO_ReadPin>
 800219e:	4603      	mov	r3, r0
 80021a0:	4619      	mov	r1, r3
 80021a2:	4a34      	ldr	r2, [pc, #208]	; (8002274 <Key_Read+0xe8>)
 80021a4:	4623      	mov	r3, r4
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4423      	add	r3, r4
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	460a      	mov	r2, r1
 80021b0:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][1] = R1_IN;
 80021b2:	4b2e      	ldr	r3, [pc, #184]	; (800226c <Key_Read+0xe0>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461c      	mov	r4, r3
 80021b8:	2102      	movs	r1, #2
 80021ba:	482d      	ldr	r0, [pc, #180]	; (8002270 <Key_Read+0xe4>)
 80021bc:	f007 fb96 	bl	80098ec <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4619      	mov	r1, r3
 80021c4:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <Key_Read+0xe8>)
 80021c6:	4623      	mov	r3, r4
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4423      	add	r3, r4
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	3301      	adds	r3, #1
 80021d2:	460a      	mov	r2, r1
 80021d4:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][2] = R2_IN;
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <Key_Read+0xe0>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	461c      	mov	r4, r3
 80021dc:	2104      	movs	r1, #4
 80021de:	4824      	ldr	r0, [pc, #144]	; (8002270 <Key_Read+0xe4>)
 80021e0:	f007 fb84 	bl	80098ec <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4619      	mov	r1, r3
 80021e8:	4a22      	ldr	r2, [pc, #136]	; (8002274 <Key_Read+0xe8>)
 80021ea:	4623      	mov	r3, r4
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4423      	add	r3, r4
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	3302      	adds	r3, #2
 80021f6:	460a      	mov	r2, r1
 80021f8:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][3] = R3_IN;
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <Key_Read+0xe0>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461c      	mov	r4, r3
 8002200:	2108      	movs	r1, #8
 8002202:	481b      	ldr	r0, [pc, #108]	; (8002270 <Key_Read+0xe4>)
 8002204:	f007 fb72 	bl	80098ec <HAL_GPIO_ReadPin>
 8002208:	4603      	mov	r3, r0
 800220a:	4619      	mov	r1, r3
 800220c:	4a19      	ldr	r2, [pc, #100]	; (8002274 <Key_Read+0xe8>)
 800220e:	4623      	mov	r3, r4
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4423      	add	r3, r4
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	3303      	adds	r3, #3
 800221a:	460a      	mov	r2, r1
 800221c:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][4] = R4_IN;
 800221e:	4b13      	ldr	r3, [pc, #76]	; (800226c <Key_Read+0xe0>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461c      	mov	r4, r3
 8002224:	2110      	movs	r1, #16
 8002226:	4812      	ldr	r0, [pc, #72]	; (8002270 <Key_Read+0xe4>)
 8002228:	f007 fb60 	bl	80098ec <HAL_GPIO_ReadPin>
 800222c:	4603      	mov	r3, r0
 800222e:	4619      	mov	r1, r3
 8002230:	4a10      	ldr	r2, [pc, #64]	; (8002274 <Key_Read+0xe8>)
 8002232:	4623      	mov	r3, r4
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4423      	add	r3, r4
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	3304      	adds	r3, #4
 800223e:	460a      	mov	r2, r1
 8002240:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][5] = R5_IN;
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <Key_Read+0xe0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461c      	mov	r4, r3
 8002248:	2120      	movs	r1, #32
 800224a:	4809      	ldr	r0, [pc, #36]	; (8002270 <Key_Read+0xe4>)
 800224c:	f007 fb4e 	bl	80098ec <HAL_GPIO_ReadPin>
 8002250:	4603      	mov	r3, r0
 8002252:	4619      	mov	r1, r3
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <Key_Read+0xe8>)
 8002256:	4623      	mov	r3, r4
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4423      	add	r3, r4
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	3305      	adds	r3, #5
 8002262:	460a      	mov	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
}
 8002266:	bf00      	nop
 8002268:	bd98      	pop	{r3, r4, r7, pc}
 800226a:	bf00      	nop
 800226c:	20007028 	.word	0x20007028
 8002270:	40020c00 	.word	0x40020c00
 8002274:	20000804 	.word	0x20000804

08002278 <key_filter_all>:

static void key_filter_all()
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	e013      	b.n	80022ac <key_filter_all+0x34>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 8002284:	2300      	movs	r3, #0
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	e00a      	b.n	80022a0 <key_filter_all+0x28>
			key_filter(x, y);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f811 	bl	80022bc <key_filter>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	ddf1      	ble.n	800228a <key_filter_all+0x12>
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3301      	adds	r3, #1
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	dde8      	ble.n	8002284 <key_filter_all+0xc>
		}
	}
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <key_filter>:

static void key_filter(uint8_t x, uint8_t y)
{
 80022bc:	b490      	push	{r4, r7}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	460a      	mov	r2, r1
 80022c6:	71fb      	strb	r3, [r7, #7]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71bb      	strb	r3, [r7, #6]
	if(key_input_mask[x][y])
 80022cc:	79fa      	ldrb	r2, [r7, #7]
 80022ce:	79b9      	ldrb	r1, [r7, #6]
 80022d0:	483e      	ldr	r0, [pc, #248]	; (80023cc <key_filter+0x110>)
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4403      	add	r3, r0
 80022dc:	440b      	add	r3, r1
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01b      	beq.n	800231c <key_filter+0x60>
	{
		key_sence_count[x][y]= key_sence_count[x][y]>=KEY_SENCE ? KEY_SENCE : key_sence_count[x][y]+1;
 80022e4:	79fa      	ldrb	r2, [r7, #7]
 80022e6:	79b9      	ldrb	r1, [r7, #6]
 80022e8:	4839      	ldr	r0, [pc, #228]	; (80023d0 <key_filter+0x114>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4403      	add	r3, r0
 80022f4:	440b      	add	r3, r1
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b0f      	cmp	r3, #15
 80022fa:	bf28      	it	cs
 80022fc:	230f      	movcs	r3, #15
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	79fa      	ldrb	r2, [r7, #7]
 8002302:	79b9      	ldrb	r1, [r7, #6]
 8002304:	3301      	adds	r3, #1
 8002306:	b2dc      	uxtb	r4, r3
 8002308:	4831      	ldr	r0, [pc, #196]	; (80023d0 <key_filter+0x114>)
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4403      	add	r3, r0
 8002314:	440b      	add	r3, r1
 8002316:	4622      	mov	r2, r4
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	e024      	b.n	8002366 <key_filter+0xaa>
	}
	else{
		key_sence_count[x][y]= key_sence_count[x][y]<=0 ? 0 : key_sence_count[x][y]-1;
 800231c:	79fa      	ldrb	r2, [r7, #7]
 800231e:	79b9      	ldrb	r1, [r7, #6]
 8002320:	482b      	ldr	r0, [pc, #172]	; (80023d0 <key_filter+0x114>)
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4403      	add	r3, r0
 800232c:	440b      	add	r3, r1
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00c      	beq.n	800234e <key_filter+0x92>
 8002334:	79fa      	ldrb	r2, [r7, #7]
 8002336:	79b9      	ldrb	r1, [r7, #6]
 8002338:	4825      	ldr	r0, [pc, #148]	; (80023d0 <key_filter+0x114>)
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4403      	add	r3, r0
 8002344:	440b      	add	r3, r1
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3b01      	subs	r3, #1
 800234a:	b2d8      	uxtb	r0, r3
 800234c:	e000      	b.n	8002350 <key_filter+0x94>
 800234e:	2000      	movs	r0, #0
 8002350:	79fa      	ldrb	r2, [r7, #7]
 8002352:	79b9      	ldrb	r1, [r7, #6]
 8002354:	4c1e      	ldr	r4, [pc, #120]	; (80023d0 <key_filter+0x114>)
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4423      	add	r3, r4
 8002360:	440b      	add	r3, r1
 8002362:	4602      	mov	r2, r0
 8002364:	701a      	strb	r2, [r3, #0]
		//key_sence_count[x][y]= 0;
	}
	if(key_sence_count[x][y]==KEY_SENCE)key_input_filtered_mask[x][y] = 1;
 8002366:	79fa      	ldrb	r2, [r7, #7]
 8002368:	79b9      	ldrb	r1, [r7, #6]
 800236a:	4819      	ldr	r0, [pc, #100]	; (80023d0 <key_filter+0x114>)
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4403      	add	r3, r0
 8002376:	440b      	add	r3, r1
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b10      	cmp	r3, #16
 800237c:	d10a      	bne.n	8002394 <key_filter+0xd8>
 800237e:	79fa      	ldrb	r2, [r7, #7]
 8002380:	79b9      	ldrb	r1, [r7, #6]
 8002382:	4814      	ldr	r0, [pc, #80]	; (80023d4 <key_filter+0x118>)
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4403      	add	r3, r0
 800238e:	440b      	add	r3, r1
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
	if(key_sence_count[x][y]==0)key_input_filtered_mask[x][y] = 0;
 8002394:	79fa      	ldrb	r2, [r7, #7]
 8002396:	79b9      	ldrb	r1, [r7, #6]
 8002398:	480d      	ldr	r0, [pc, #52]	; (80023d0 <key_filter+0x114>)
 800239a:	4613      	mov	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4413      	add	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4403      	add	r3, r0
 80023a4:	440b      	add	r3, r1
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10a      	bne.n	80023c2 <key_filter+0x106>
 80023ac:	79fa      	ldrb	r2, [r7, #7]
 80023ae:	79b9      	ldrb	r1, [r7, #6]
 80023b0:	4808      	ldr	r0, [pc, #32]	; (80023d4 <key_filter+0x118>)
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4403      	add	r3, r0
 80023bc:	440b      	add	r3, r1
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc90      	pop	{r4, r7}
 80023ca:	4770      	bx	lr
 80023cc:	20000804 	.word	0x20000804
 80023d0:	20000870 	.word	0x20000870
 80023d4:	20000828 	.word	0x20000828

080023d8 <GetPositiveFront>:

static void GetPositiveFront()
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	e047      	b.n	8002474 <GetPositiveFront+0x9c>
		for (int row = 0; row < ROWS_COUNT; ++row) {
 80023e4:	2300      	movs	r3, #0
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	e03e      	b.n	8002468 <GetPositiveFront+0x90>
			positive_fronts[col][row] = key_input_filtered_mask[col][row]==1 && key_input_old_mask[col][row]==0 ? 1:0;
 80023ea:	4927      	ldr	r1, [pc, #156]	; (8002488 <GetPositiveFront+0xb0>)
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	18ca      	adds	r2, r1, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10d      	bne.n	800241e <GetPositiveFront+0x46>
 8002402:	4922      	ldr	r1, [pc, #136]	; (800248c <GetPositiveFront+0xb4>)
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	18ca      	adds	r2, r1, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4413      	add	r3, r2
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <GetPositiveFront+0x46>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <GetPositiveFront+0x48>
 800241e:	2300      	movs	r3, #0
 8002420:	b2d8      	uxtb	r0, r3
 8002422:	491b      	ldr	r1, [pc, #108]	; (8002490 <GetPositiveFront+0xb8>)
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	18ca      	adds	r2, r1, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4413      	add	r3, r2
 8002434:	4602      	mov	r2, r0
 8002436:	701a      	strb	r2, [r3, #0]
			key_input_old_mask[col][row] = key_input_filtered_mask[col][row];
 8002438:	4913      	ldr	r1, [pc, #76]	; (8002488 <GetPositiveFront+0xb0>)
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	18ca      	adds	r2, r1, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	4413      	add	r3, r2
 800244a:	7818      	ldrb	r0, [r3, #0]
 800244c:	490f      	ldr	r1, [pc, #60]	; (800248c <GetPositiveFront+0xb4>)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4413      	add	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	18ca      	adds	r2, r1, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	4413      	add	r3, r2
 800245e:	4602      	mov	r2, r0
 8002460:	701a      	strb	r2, [r3, #0]
		for (int row = 0; row < ROWS_COUNT; ++row) {
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b05      	cmp	r3, #5
 800246c:	ddbd      	ble.n	80023ea <GetPositiveFront+0x12>
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3301      	adds	r3, #1
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b05      	cmp	r3, #5
 8002478:	ddb4      	ble.n	80023e4 <GetPositiveFront+0xc>
		}
	}
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	20000828 	.word	0x20000828
 800248c:	2000084c 	.word	0x2000084c
 8002490:	20000894 	.word	0x20000894

08002494 <SendToLcd>:



static void SendToLcd()
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
	sendStr(lcd[0], 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	4809      	ldr	r0, [pc, #36]	; (80024c4 <SendToLcd+0x30>)
 800249e:	f001 ff1d 	bl	80042dc <sendStr>
	sendStr(lcd[1], 1, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2101      	movs	r1, #1
 80024a6:	4808      	ldr	r0, [pc, #32]	; (80024c8 <SendToLcd+0x34>)
 80024a8:	f001 ff18 	bl	80042dc <sendStr>
	sendStr(lcd[2], 2, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2102      	movs	r1, #2
 80024b0:	4806      	ldr	r0, [pc, #24]	; (80024cc <SendToLcd+0x38>)
 80024b2:	f001 ff13 	bl	80042dc <sendStr>
	sendStr(lcd[3], 3, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2103      	movs	r1, #3
 80024ba:	4805      	ldr	r0, [pc, #20]	; (80024d0 <SendToLcd+0x3c>)
 80024bc:	f001 ff0e 	bl	80042dc <sendStr>
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20006fd8 	.word	0x20006fd8
 80024c8:	20006fec 	.word	0x20006fec
 80024cc:	20007000 	.word	0x20007000
 80024d0:	20007014 	.word	0x20007014

080024d4 <OnKeyPress>:
		},
};


int OnKeyPress(uint8_t *req,uint8_t req_length, uint8_t *answer)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	460b      	mov	r3, r1
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	72fb      	strb	r3, [r7, #11]
	char *p = (char*)req;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	617b      	str	r3, [r7, #20]
	if(!strncmp(p, "Enter", strlen("Enter")))
 80024e6:	2205      	movs	r2, #5
 80024e8:	49c4      	ldr	r1, [pc, #784]	; (80027fc <OnKeyPress+0x328>)
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f01c fe7c 	bl	801f1e8 <strncmp>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d107      	bne.n	8002506 <OnKeyPress+0x32>
	{
		if(!OnEnterPressAction()) return 0;
 80024f6:	f000 f9b1 	bl	800285c <OnEnterPressAction>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 8156 	bne.w	80027ae <OnKeyPress+0x2da>
 8002502:	2300      	movs	r3, #0
 8002504:	e175      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "Esc", strlen("Esc")))
 8002506:	2203      	movs	r2, #3
 8002508:	49bd      	ldr	r1, [pc, #756]	; (8002800 <OnKeyPress+0x32c>)
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f01c fe6c 	bl	801f1e8 <strncmp>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d107      	bne.n	8002526 <OnKeyPress+0x52>
	{
		if(!OnEscPressKey()) return 0;
 8002516:	f000 fe53 	bl	80031c0 <OnEscPressKey>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 8146 	bne.w	80027ae <OnKeyPress+0x2da>
 8002522:	2300      	movs	r3, #0
 8002524:	e165      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "Delete", strlen("Delete")))
 8002526:	2206      	movs	r2, #6
 8002528:	49b6      	ldr	r1, [pc, #728]	; (8002804 <OnKeyPress+0x330>)
 800252a:	6978      	ldr	r0, [r7, #20]
 800252c:	f01c fe5c 	bl	801f1e8 <strncmp>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d107      	bne.n	8002546 <OnKeyPress+0x72>
	{
		if(!OnDeletePressKey())return 0;
 8002536:	f001 fbfb 	bl	8003d30 <OnDeletePressKey>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 8136 	bne.w	80027ae <OnKeyPress+0x2da>
 8002542:	2300      	movs	r3, #0
 8002544:	e155      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "Up", strlen("Up")))
 8002546:	2202      	movs	r2, #2
 8002548:	49af      	ldr	r1, [pc, #700]	; (8002808 <OnKeyPress+0x334>)
 800254a:	6978      	ldr	r0, [r7, #20]
 800254c:	f01c fe4c 	bl	801f1e8 <strncmp>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d107      	bne.n	8002566 <OnKeyPress+0x92>
	{
		if(!OnUpPressKey())return 0;
 8002556:	f000 fd2d 	bl	8002fb4 <OnUpPressKey>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	f040 8126 	bne.w	80027ae <OnKeyPress+0x2da>
 8002562:	2300      	movs	r3, #0
 8002564:	e145      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "Right", strlen("Right")))
 8002566:	2205      	movs	r2, #5
 8002568:	49a8      	ldr	r1, [pc, #672]	; (800280c <OnKeyPress+0x338>)
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f01c fe3c 	bl	801f1e8 <strncmp>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d107      	bne.n	8002586 <OnKeyPress+0xb2>
	{
		if(!OnRightPressKey())return 0;
 8002576:	f000 fc8f 	bl	8002e98 <OnRightPressKey>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	f040 8116 	bne.w	80027ae <OnKeyPress+0x2da>
 8002582:	2300      	movs	r3, #0
 8002584:	e135      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "Left", strlen("Left")))
 8002586:	2204      	movs	r2, #4
 8002588:	49a1      	ldr	r1, [pc, #644]	; (8002810 <OnKeyPress+0x33c>)
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f01c fe2c 	bl	801f1e8 <strncmp>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d107      	bne.n	80025a6 <OnKeyPress+0xd2>
	{
		if(!OnLeftPressKey())return 0;
 8002596:	f000 fbf1 	bl	8002d7c <OnLeftPressKey>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	f040 8106 	bne.w	80027ae <OnKeyPress+0x2da>
 80025a2:	2300      	movs	r3, #0
 80025a4:	e125      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "Down", strlen("Down")))
 80025a6:	2204      	movs	r2, #4
 80025a8:	499a      	ldr	r1, [pc, #616]	; (8002814 <OnKeyPress+0x340>)
 80025aa:	6978      	ldr	r0, [r7, #20]
 80025ac:	f01c fe1c 	bl	801f1e8 <strncmp>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d107      	bne.n	80025c6 <OnKeyPress+0xf2>
	{
		if(!OnDownPressKey())return 0;
 80025b6:	f000 fb75 	bl	8002ca4 <OnDownPressKey>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f040 80f6 	bne.w	80027ae <OnKeyPress+0x2da>
 80025c2:	2300      	movs	r3, #0
 80025c4:	e115      	b.n	80027f2 <OnKeyPress+0x31e>

	}
	else if(!strncmp(p, "F1", strlen("F1")))
 80025c6:	2202      	movs	r2, #2
 80025c8:	4993      	ldr	r1, [pc, #588]	; (8002818 <OnKeyPress+0x344>)
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f01c fe0c 	bl	801f1e8 <strncmp>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d107      	bne.n	80025e6 <OnKeyPress+0x112>
	{
		if(!OnF1PressKey())return 0;
 80025d6:	f000 fd5b 	bl	8003090 <OnF1PressKey>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f040 80e6 	bne.w	80027ae <OnKeyPress+0x2da>
 80025e2:	2300      	movs	r3, #0
 80025e4:	e105      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "F2", strlen("F2")))
 80025e6:	2202      	movs	r2, #2
 80025e8:	498c      	ldr	r1, [pc, #560]	; (800281c <OnKeyPress+0x348>)
 80025ea:	6978      	ldr	r0, [r7, #20]
 80025ec:	f01c fdfc 	bl	801f1e8 <strncmp>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d107      	bne.n	8002606 <OnKeyPress+0x132>
	{
		if(!OnF2PressKey())return 0;
 80025f6:	f000 fd5d 	bl	80030b4 <OnF2PressKey>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f040 80d6 	bne.w	80027ae <OnKeyPress+0x2da>
 8002602:	2300      	movs	r3, #0
 8002604:	e0f5      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "F3", strlen("F3")))
 8002606:	2202      	movs	r2, #2
 8002608:	4985      	ldr	r1, [pc, #532]	; (8002820 <OnKeyPress+0x34c>)
 800260a:	6978      	ldr	r0, [r7, #20]
 800260c:	f01c fdec 	bl	801f1e8 <strncmp>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d107      	bne.n	8002626 <OnKeyPress+0x152>
	{
		if(!OnF3PressKey())return 0;
 8002616:	f000 fd7f 	bl	8003118 <OnF3PressKey>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 80c6 	bne.w	80027ae <OnKeyPress+0x2da>
 8002622:	2300      	movs	r3, #0
 8002624:	e0e5      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "F4", strlen("F4")))
 8002626:	2202      	movs	r2, #2
 8002628:	497e      	ldr	r1, [pc, #504]	; (8002824 <OnKeyPress+0x350>)
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f01c fddc 	bl	801f1e8 <strncmp>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d107      	bne.n	8002646 <OnKeyPress+0x172>
	{
		if(!OnF4PressKey())return 0;
 8002636:	f000 fda5 	bl	8003184 <OnF4PressKey>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 80b6 	bne.w	80027ae <OnKeyPress+0x2da>
 8002642:	2300      	movs	r3, #0
 8002644:	e0d5      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "NumPad0", strlen("NumPad0")))
 8002646:	2207      	movs	r2, #7
 8002648:	4977      	ldr	r1, [pc, #476]	; (8002828 <OnKeyPress+0x354>)
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f01c fdcc 	bl	801f1e8 <strncmp>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d108      	bne.n	8002668 <OnKeyPress+0x194>
	{
		if(!OnNumberPressKey(0))return 0;
 8002656:	2000      	movs	r0, #0
 8002658:	f001 fb1e 	bl	8003c98 <OnNumberPressKey>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 80a5 	bne.w	80027ae <OnKeyPress+0x2da>
 8002664:	2300      	movs	r3, #0
 8002666:	e0c4      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "NumPad1", strlen("NumPad1")))
 8002668:	2207      	movs	r2, #7
 800266a:	4970      	ldr	r1, [pc, #448]	; (800282c <OnKeyPress+0x358>)
 800266c:	6978      	ldr	r0, [r7, #20]
 800266e:	f01c fdbb 	bl	801f1e8 <strncmp>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d108      	bne.n	800268a <OnKeyPress+0x1b6>
	{
		if(!OnNumberPressKey(1))return 0;
 8002678:	2001      	movs	r0, #1
 800267a:	f001 fb0d 	bl	8003c98 <OnNumberPressKey>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 8094 	bne.w	80027ae <OnKeyPress+0x2da>
 8002686:	2300      	movs	r3, #0
 8002688:	e0b3      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "NumPad2", strlen("NumPad2")))
 800268a:	2207      	movs	r2, #7
 800268c:	4968      	ldr	r1, [pc, #416]	; (8002830 <OnKeyPress+0x35c>)
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f01c fdaa 	bl	801f1e8 <strncmp>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d108      	bne.n	80026ac <OnKeyPress+0x1d8>
	{
		if(!OnNumberPressKey(2))return 0;
 800269a:	2002      	movs	r0, #2
 800269c:	f001 fafc 	bl	8003c98 <OnNumberPressKey>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 8083 	bne.w	80027ae <OnKeyPress+0x2da>
 80026a8:	2300      	movs	r3, #0
 80026aa:	e0a2      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "NumPad3", strlen("NumPad3")))
 80026ac:	2207      	movs	r2, #7
 80026ae:	4961      	ldr	r1, [pc, #388]	; (8002834 <OnKeyPress+0x360>)
 80026b0:	6978      	ldr	r0, [r7, #20]
 80026b2:	f01c fd99 	bl	801f1e8 <strncmp>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d107      	bne.n	80026cc <OnKeyPress+0x1f8>
	{
		if(!OnNumberPressKey(3))return 0;
 80026bc:	2003      	movs	r0, #3
 80026be:	f001 faeb 	bl	8003c98 <OnNumberPressKey>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d172      	bne.n	80027ae <OnKeyPress+0x2da>
 80026c8:	2300      	movs	r3, #0
 80026ca:	e092      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "NumPad4", strlen("NumPad4")))
 80026cc:	2207      	movs	r2, #7
 80026ce:	495a      	ldr	r1, [pc, #360]	; (8002838 <OnKeyPress+0x364>)
 80026d0:	6978      	ldr	r0, [r7, #20]
 80026d2:	f01c fd89 	bl	801f1e8 <strncmp>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <OnKeyPress+0x218>
	{
		if(!OnNumberPressKey(4))return 0;
 80026dc:	2004      	movs	r0, #4
 80026de:	f001 fadb 	bl	8003c98 <OnNumberPressKey>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d162      	bne.n	80027ae <OnKeyPress+0x2da>
 80026e8:	2300      	movs	r3, #0
 80026ea:	e082      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "NumPad5", strlen("NumPad5")))
 80026ec:	2207      	movs	r2, #7
 80026ee:	4953      	ldr	r1, [pc, #332]	; (800283c <OnKeyPress+0x368>)
 80026f0:	6978      	ldr	r0, [r7, #20]
 80026f2:	f01c fd79 	bl	801f1e8 <strncmp>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d107      	bne.n	800270c <OnKeyPress+0x238>
	{
		if(!OnNumberPressKey(5))return 0;
 80026fc:	2005      	movs	r0, #5
 80026fe:	f001 facb 	bl	8003c98 <OnNumberPressKey>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d152      	bne.n	80027ae <OnKeyPress+0x2da>
 8002708:	2300      	movs	r3, #0
 800270a:	e072      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "NumPad6", strlen("NumPad6")))
 800270c:	2207      	movs	r2, #7
 800270e:	494c      	ldr	r1, [pc, #304]	; (8002840 <OnKeyPress+0x36c>)
 8002710:	6978      	ldr	r0, [r7, #20]
 8002712:	f01c fd69 	bl	801f1e8 <strncmp>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d107      	bne.n	800272c <OnKeyPress+0x258>
	{
		if(!OnNumberPressKey(6))return 0;
 800271c:	2006      	movs	r0, #6
 800271e:	f001 fabb 	bl	8003c98 <OnNumberPressKey>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d142      	bne.n	80027ae <OnKeyPress+0x2da>
 8002728:	2300      	movs	r3, #0
 800272a:	e062      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "NumPad7", strlen("NumPad7")))
 800272c:	2207      	movs	r2, #7
 800272e:	4945      	ldr	r1, [pc, #276]	; (8002844 <OnKeyPress+0x370>)
 8002730:	6978      	ldr	r0, [r7, #20]
 8002732:	f01c fd59 	bl	801f1e8 <strncmp>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d107      	bne.n	800274c <OnKeyPress+0x278>
	{
		if(!OnNumberPressKey(7))return 0;
 800273c:	2007      	movs	r0, #7
 800273e:	f001 faab 	bl	8003c98 <OnNumberPressKey>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d132      	bne.n	80027ae <OnKeyPress+0x2da>
 8002748:	2300      	movs	r3, #0
 800274a:	e052      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "NumPad8", strlen("NumPad8")))
 800274c:	2207      	movs	r2, #7
 800274e:	493e      	ldr	r1, [pc, #248]	; (8002848 <OnKeyPress+0x374>)
 8002750:	6978      	ldr	r0, [r7, #20]
 8002752:	f01c fd49 	bl	801f1e8 <strncmp>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d107      	bne.n	800276c <OnKeyPress+0x298>
	{
		if(!OnNumberPressKey(8))return 0;
 800275c:	2008      	movs	r0, #8
 800275e:	f001 fa9b 	bl	8003c98 <OnNumberPressKey>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d122      	bne.n	80027ae <OnKeyPress+0x2da>
 8002768:	2300      	movs	r3, #0
 800276a:	e042      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "NumPad9", strlen("NumPad9")))
 800276c:	2207      	movs	r2, #7
 800276e:	4937      	ldr	r1, [pc, #220]	; (800284c <OnKeyPress+0x378>)
 8002770:	6978      	ldr	r0, [r7, #20]
 8002772:	f01c fd39 	bl	801f1e8 <strncmp>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d107      	bne.n	800278c <OnKeyPress+0x2b8>
	{
		if(!OnNumberPressKey(9))return 0;
 800277c:	2009      	movs	r0, #9
 800277e:	f001 fa8b 	bl	8003c98 <OnNumberPressKey>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d112      	bne.n	80027ae <OnKeyPress+0x2da>
 8002788:	2300      	movs	r3, #0
 800278a:	e032      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else if(!strncmp(p, "Dec", strlen("Dec")))
 800278c:	2203      	movs	r2, #3
 800278e:	4930      	ldr	r1, [pc, #192]	; (8002850 <OnKeyPress+0x37c>)
 8002790:	6978      	ldr	r0, [r7, #20]
 8002792:	f01c fd29 	bl	801f1e8 <strncmp>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <OnKeyPress+0x2d6>
	{
		if(!OnDecPressKey())return 0;
 800279c:	f001 fb22 	bl	8003de4 <OnDecPressKey>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <OnKeyPress+0x2da>
 80027a6:	2300      	movs	r3, #0
 80027a8:	e023      	b.n	80027f2 <OnKeyPress+0x31e>
	}
	else return 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e021      	b.n	80027f2 <OnKeyPress+0x31e>
	memcpy(answer,lcdAnswer,80);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a28      	ldr	r2, [pc, #160]	; (8002854 <OnKeyPress+0x380>)
 80027b2:	4618      	mov	r0, r3
 80027b4:	4611      	mov	r1, r2
 80027b6:	2350      	movs	r3, #80	; 0x50
 80027b8:	461a      	mov	r2, r3
 80027ba:	f01b fc4b 	bl	801e054 <memcpy>
	if(currentCursorPosition==-1)
 80027be:	4b26      	ldr	r3, [pc, #152]	; (8002858 <OnKeyPress+0x384>)
 80027c0:	f993 3000 	ldrsb.w	r3, [r3]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d106      	bne.n	80027d8 <OnKeyPress+0x304>
	{
		answer[80] = 255;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3350      	adds	r3, #80	; 0x50
 80027ce:	22ff      	movs	r2, #255	; 0xff
 80027d0:	701a      	strb	r2, [r3, #0]
		return -1;
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
 80027d6:	e00c      	b.n	80027f2 <OnKeyPress+0x31e>

	}
	else
	{
		answer[80] = currentCursorPosition+40;
 80027d8:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <OnKeyPress+0x384>)
 80027da:	f993 3000 	ldrsb.w	r3, [r3]
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3350      	adds	r3, #80	; 0x50
 80027e4:	3228      	adds	r2, #40	; 0x28
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]
	}
	return currentCursorPosition+40;
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <OnKeyPress+0x384>)
 80027ec:	f993 3000 	ldrsb.w	r3, [r3]
 80027f0:	3328      	adds	r3, #40	; 0x28
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	08023244 	.word	0x08023244
 8002800:	0802324c 	.word	0x0802324c
 8002804:	08023250 	.word	0x08023250
 8002808:	08023258 	.word	0x08023258
 800280c:	0802325c 	.word	0x0802325c
 8002810:	08023264 	.word	0x08023264
 8002814:	0802326c 	.word	0x0802326c
 8002818:	08023274 	.word	0x08023274
 800281c:	08023278 	.word	0x08023278
 8002820:	0802327c 	.word	0x0802327c
 8002824:	08023280 	.word	0x08023280
 8002828:	08023284 	.word	0x08023284
 800282c:	0802328c 	.word	0x0802328c
 8002830:	08023294 	.word	0x08023294
 8002834:	0802329c 	.word	0x0802329c
 8002838:	080232a4 	.word	0x080232a4
 800283c:	080232ac 	.word	0x080232ac
 8002840:	080232b4 	.word	0x080232b4
 8002844:	080232bc 	.word	0x080232bc
 8002848:	080232c4 	.word	0x080232c4
 800284c:	080232cc 	.word	0x080232cc
 8002850:	080232d4 	.word	0x080232d4
 8002854:	2000702c 	.word	0x2000702c
 8002858:	200000c3 	.word	0x200000c3

0800285c <OnEnterPressAction>:

static uint8_t OnEnterPressAction()
{
 800285c:	b5b0      	push	{r4, r5, r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
	Row *par = NULL;
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
	if(currentParameters == NULL)
 8002866:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <OnEnterPressAction+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d11f      	bne.n	80028ae <OnEnterPressAction+0x52>
	{
		currentCursorPosition = -1;
 800286e:	4b6c      	ldr	r3, [pc, #432]	; (8002a20 <OnEnterPressAction+0x1c4>)
 8002870:	22ff      	movs	r2, #255	; 0xff
 8002872:	701a      	strb	r2, [r3, #0]
		currentParameters = indication_rows;
 8002874:	4b69      	ldr	r3, [pc, #420]	; (8002a1c <OnEnterPressAction+0x1c0>)
 8002876:	4a6b      	ldr	r2, [pc, #428]	; (8002a24 <OnEnterPressAction+0x1c8>)
 8002878:	601a      	str	r2, [r3, #0]
		paramIndex = 0;
 800287a:	4b6b      	ldr	r3, [pc, #428]	; (8002a28 <OnEnterPressAction+0x1cc>)
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
		currentParamLength = sizeof(indication_rows)/sizeof(Row);
 8002880:	4b6a      	ldr	r3, [pc, #424]	; (8002a2c <OnEnterPressAction+0x1d0>)
 8002882:	2203      	movs	r2, #3
 8002884:	701a      	strb	r2, [r3, #0]
		editMode = 0;
 8002886:	4b6a      	ldr	r3, [pc, #424]	; (8002a30 <OnEnterPressAction+0x1d4>)
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
		groupParamName = indicationName;
 800288c:	4b69      	ldr	r3, [pc, #420]	; (8002a34 <OnEnterPressAction+0x1d8>)
 800288e:	4a6a      	ldr	r2, [pc, #424]	; (8002a38 <OnEnterPressAction+0x1dc>)
 8002890:	601a      	str	r2, [r3, #0]
		groupParamNameLength = strlen(indicationName);
 8002892:	4869      	ldr	r0, [pc, #420]	; (8002a38 <OnEnterPressAction+0x1dc>)
 8002894:	f7fd fc9c 	bl	80001d0 <strlen>
 8002898:	4603      	mov	r3, r0
 800289a:	b2da      	uxtb	r2, r3
 800289c:	4b67      	ldr	r3, [pc, #412]	; (8002a3c <OnEnterPressAction+0x1e0>)
 800289e:	701a      	strb	r2, [r3, #0]
		ShowParameter(currentParameters);
 80028a0:	4b5e      	ldr	r3, [pc, #376]	; (8002a1c <OnEnterPressAction+0x1c0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fcbd 	bl	8003224 <ShowParameter>
		return 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0b2      	b.n	8002a14 <OnEnterPressAction+0x1b8>
	}
	else if(currentParameters!=Errors)// В случае если находимся в параметре
 80028ae:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <OnEnterPressAction+0x1c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a63      	ldr	r2, [pc, #396]	; (8002a40 <OnEnterPressAction+0x1e4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	f000 80ac 	beq.w	8002a12 <OnEnterPressAction+0x1b6>
	{
		par = currentParameters+paramIndex;
 80028ba:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <OnEnterPressAction+0x1c0>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b5a      	ldr	r3, [pc, #360]	; (8002a28 <OnEnterPressAction+0x1cc>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	4619      	mov	r1, r3
 80028c4:	460b      	mov	r3, r1
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	440b      	add	r3, r1
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	607b      	str	r3, [r7, #4]
		if(!editMode)// Если находимся не в режиме редактирования
 80028d0:	4b57      	ldr	r3, [pc, #348]	; (8002a30 <OnEnterPressAction+0x1d4>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f040 8094 	bne.w	8002a02 <OnEnterPressAction+0x1a6>
		{

			if(par->isEdited)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	791b      	ldrb	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8097 	beq.w	8002a12 <OnEnterPressAction+0x1b6>
			{
				memset(editedValue,0,20);
 80028e4:	2214      	movs	r2, #20
 80028e6:	2100      	movs	r1, #0
 80028e8:	4856      	ldr	r0, [pc, #344]	; (8002a44 <OnEnterPressAction+0x1e8>)
 80028ea:	f01b fbdb 	bl	801e0a4 <memset>
				Clear();
 80028ee:	f000 f8ad 	bl	8002a4c <Clear>
				if(!par->isEnum)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	7a1b      	ldrb	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10f      	bne.n	800291a <OnEnterPressAction+0xbe>
				{
					GetEditedValue(par);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f001 fb3e 	bl	8003f7c <GetEditedValue>
					editMode = 1;
 8002900:	4b4b      	ldr	r3, [pc, #300]	; (8002a30 <OnEnterPressAction+0x1d4>)
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
					currentCursorPosition = par->param_pos;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	79db      	ldrb	r3, [r3, #7]
 800290a:	b25a      	sxtb	r2, r3
 800290c:	4b44      	ldr	r3, [pc, #272]	; (8002a20 <OnEnterPressAction+0x1c4>)
 800290e:	701a      	strb	r2, [r3, #0]
					ShowParameter(par);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fc87 	bl	8003224 <ShowParameter>
					return 1;
 8002916:	2301      	movs	r3, #1
 8002918:	e07c      	b.n	8002a14 <OnEnterPressAction+0x1b8>
				}
				else
				{
					if(par->enums==NULL)return 0;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <OnEnterPressAction+0xca>
 8002922:	2300      	movs	r3, #0
 8002924:	e076      	b.n	8002a14 <OnEnterPressAction+0x1b8>
					memset(editedValue,0,20);
 8002926:	2214      	movs	r2, #20
 8002928:	2100      	movs	r1, #0
 800292a:	4846      	ldr	r0, [pc, #280]	; (8002a44 <OnEnterPressAction+0x1e8>)
 800292c:	f01b fbba 	bl	801e0a4 <memset>
					switch (par->type) {
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7d5b      	ldrb	r3, [r3, #21]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <OnEnterPressAction+0xe2>
 8002938:	2b01      	cmp	r3, #1
 800293a:	d00b      	beq.n	8002954 <OnEnterPressAction+0xf8>
							break;
						case ROW_UINT:
							currentEnumKey = *((uint32_t*)par->data);
							break;
						default:
							break;
 800293c:	e015      	b.n	800296a <OnEnterPressAction+0x10e>
							currentEnumKey = *((uint16_t*)par->data);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294c:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <OnEnterPressAction+0x1ec>)
 800294e:	edc3 7a00 	vstr	s15, [r3]
							break;
 8002952:	e00a      	b.n	800296a <OnEnterPressAction+0x10e>
							currentEnumKey = *((uint32_t*)par->data);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002962:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <OnEnterPressAction+0x1ec>)
 8002964:	edc3 7a00 	vstr	s15, [r3]
							break;
 8002968:	bf00      	nop
					}
					Dictionary *dict = FindDictionaryFromValue(currentEnumKey, par->enums, par->enums_len);
 800296a:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <OnEnterPressAction+0x1ec>)
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7d1b      	ldrb	r3, [r3, #20]
 8002978:	4619      	mov	r1, r3
 800297a:	4610      	mov	r0, r2
 800297c:	eeb0 0a67 	vmov.f32	s0, s15
 8002980:	f000 ff1e 	bl	80037c0 <FindDictionaryFromValue>
 8002984:	6038      	str	r0, [r7, #0]
					if(dict==NULL)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d119      	bne.n	80029c0 <OnEnterPressAction+0x164>
					{
						currentEnumKey = par->enums->value;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a2d      	ldr	r2, [pc, #180]	; (8002a48 <OnEnterPressAction+0x1ec>)
 8002994:	6013      	str	r3, [r2, #0]
						memcpy(editedValue+par->param_pos,par->enums->name, strlen(par->enums->name));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	79db      	ldrb	r3, [r3, #7]
 800299a:	461a      	mov	r2, r3
 800299c:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <OnEnterPressAction+0x1e8>)
 800299e:	18d4      	adds	r4, r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	685d      	ldr	r5, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fd fc0f 	bl	80001d0 <strlen>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	4629      	mov	r1, r5
 80029b8:	4620      	mov	r0, r4
 80029ba:	f01b fb4b 	bl	801e054 <memcpy>
 80029be:	e015      	b.n	80029ec <OnEnterPressAction+0x190>
					}
					else
					{
						currentEnumKey = dict->value;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a20      	ldr	r2, [pc, #128]	; (8002a48 <OnEnterPressAction+0x1ec>)
 80029c6:	6013      	str	r3, [r2, #0]
						memcpy(editedValue+par->param_pos,dict->name, strlen(dict->name));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	79db      	ldrb	r3, [r3, #7]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <OnEnterPressAction+0x1e8>)
 80029d0:	18d4      	adds	r4, r2, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685d      	ldr	r5, [r3, #4]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fbf8 	bl	80001d0 <strlen>
 80029e0:	4603      	mov	r3, r0
 80029e2:	461a      	mov	r2, r3
 80029e4:	4629      	mov	r1, r5
 80029e6:	4620      	mov	r0, r4
 80029e8:	f01b fb34 	bl	801e054 <memcpy>
					}
					currentCursorPosition = -1;
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <OnEnterPressAction+0x1c4>)
 80029ee:	22ff      	movs	r2, #255	; 0xff
 80029f0:	701a      	strb	r2, [r3, #0]
					editMode = 1;
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <OnEnterPressAction+0x1d4>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
					ShowParameter(par);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fc13 	bl	8003224 <ShowParameter>
					return 1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e008      	b.n	8002a14 <OnEnterPressAction+0x1b8>
				}
			}
		}
		else
		{
			AcceptEdit(par);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f001 f848 	bl	8003a98 <AcceptEdit>
			ShowParameter(par);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fc0b 	bl	8003224 <ShowParameter>
			return 1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <OnEnterPressAction+0x1b8>
		}
	}
	return 0;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a1c:	200008b8 	.word	0x200008b8
 8002a20:	200000c3 	.word	0x200000c3
 8002a24:	200002fc 	.word	0x200002fc
 8002a28:	200008bc 	.word	0x200008bc
 8002a2c:	200070e8 	.word	0x200070e8
 8002a30:	200008bd 	.word	0x200008bd
 8002a34:	200070e4 	.word	0x200070e4
 8002a38:	200000b8 	.word	0x200000b8
 8002a3c:	2000707c 	.word	0x2000707c
 8002a40:	2000011c 	.word	0x2000011c
 8002a44:	20007080 	.word	0x20007080
 8002a48:	200008c0 	.word	0x200008c0

08002a4c <Clear>:



static void Clear()
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; ++i) {
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	e016      	b.n	8002a86 <Clear+0x3a>
		for (int j = 0; j < 20; ++j) {
 8002a58:	2300      	movs	r3, #0
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	e00d      	b.n	8002a7a <Clear+0x2e>
			lcdAnswer[i][j] = 0;
 8002a5e:	490f      	ldr	r1, [pc, #60]	; (8002a9c <Clear+0x50>)
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	18ca      	adds	r2, r1, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 20; ++j) {
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	603b      	str	r3, [r7, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b13      	cmp	r3, #19
 8002a7e:	ddee      	ble.n	8002a5e <Clear+0x12>
	for (int i = 0; i < 4; ++i) {
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3301      	adds	r3, #1
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	dde5      	ble.n	8002a58 <Clear+0xc>
		}
	}
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	2000702c 	.word	0x2000702c

08002aa0 <ShowMainDisplay>:

static uint8_t ShowMainDisplay()
{
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b0a8      	sub	sp, #160	; 0xa0
 8002aa4:	af02      	add	r7, sp, #8
	Clear();
 8002aa6:	f7ff ffd1 	bl	8002a4c <Clear>

	if(meas_data.automat_mode)
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <ShowMainDisplay+0x1c0>)
 8002aac:	8a5b      	ldrh	r3, [r3, #18]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d03e      	beq.n	8002b30 <ShowMainDisplay+0x90>
	{
		//Aвто ВКЛ
		char  autoOn[] = {0x41, 0xE2, 0xF2, 0xEE, 0x20, 0xC2, 0xCA, 0xCB,  0x00};
 8002ab2:	4a6c      	ldr	r2, [pc, #432]	; (8002c64 <ShowMainDisplay+0x1c4>)
 8002ab4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ab8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aba:	c303      	stmia	r3!, {r0, r1}
 8002abc:	701a      	strb	r2, [r3, #0]
		sprintf(lcdAnswer[0],"%s %d/%d",autoOn, meas_data.probInKanistra, settings.retain.nakop_SV);
 8002abe:	4b68      	ldr	r3, [pc, #416]	; (8002c60 <ShowMainDisplay+0x1c0>)
 8002ac0:	8a9b      	ldrh	r3, [r3, #20]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4b68      	ldr	r3, [pc, #416]	; (8002c68 <ShowMainDisplay+0x1c8>)
 8002ac6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002ac8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4966      	ldr	r1, [pc, #408]	; (8002c6c <ShowMainDisplay+0x1cc>)
 8002ad2:	4867      	ldr	r0, [pc, #412]	; (8002c70 <ShowMainDisplay+0x1d0>)
 8002ad4:	f01c faea 	bl	801f0ac <siprintf>
		//Отбор через n с
		char next[] = {0xCE, 0xF2, 0xE1, 0xEE, 0xF0, 0x20, 0xF7, 0xE5, 0xF0, 0xE5, 0xE7,  0x00};
 8002ad8:	4a66      	ldr	r2, [pc, #408]	; (8002c74 <ShowMainDisplay+0x1d4>)
 8002ada:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ade:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ae0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		// Накопитель полный
		char full[] = {0xCD, 0xE0, 0xEA, 0xEE, 0xEF, 0xE8, 0xF2, 0xE5, 0xEB, 0xFC, 0x20, 0xEF, 0xEE, 0xEB, 0xED, 0xFB, 0xE9,  0x00};
 8002ae4:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <ShowMainDisplay+0x1d8>)
 8002ae6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002aea:	461d      	mov	r5, r3
 8002aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002af0:	682b      	ldr	r3, [r5, #0]
 8002af2:	8023      	strh	r3, [r4, #0]

		if(meas_data.nakopitelFull)
 8002af4:	4b5a      	ldr	r3, [pc, #360]	; (8002c60 <ShowMainDisplay+0x1c0>)
 8002af6:	8adb      	ldrh	r3, [r3, #22]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00c      	beq.n	8002b16 <ShowMainDisplay+0x76>
		{
			memcpy(lcdAnswer[2],full,sizeof(full));
 8002afc:	4b5c      	ldr	r3, [pc, #368]	; (8002c70 <ShowMainDisplay+0x1d0>)
 8002afe:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8002b02:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b08:	6028      	str	r0, [r5, #0]
 8002b0a:	6069      	str	r1, [r5, #4]
 8002b0c:	60aa      	str	r2, [r5, #8]
 8002b0e:	60eb      	str	r3, [r5, #12]
 8002b10:	8823      	ldrh	r3, [r4, #0]
 8002b12:	822b      	strh	r3, [r5, #16]
 8002b14:	e01f      	b.n	8002b56 <ShowMainDisplay+0xb6>
		}
		else
		{
			if(meas_data.probotbor_ready)sprintf(lcdAnswer[2],"%s %d c",next, meas_data.toNextOtborTime);
 8002b16:	4b52      	ldr	r3, [pc, #328]	; (8002c60 <ShowMainDisplay+0x1c0>)
 8002b18:	899b      	ldrh	r3, [r3, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01b      	beq.n	8002b56 <ShowMainDisplay+0xb6>
 8002b1e:	4b50      	ldr	r3, [pc, #320]	; (8002c60 <ShowMainDisplay+0x1c0>)
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002b26:	4955      	ldr	r1, [pc, #340]	; (8002c7c <ShowMainDisplay+0x1dc>)
 8002b28:	4855      	ldr	r0, [pc, #340]	; (8002c80 <ShowMainDisplay+0x1e0>)
 8002b2a:	f01c fabf 	bl	801f0ac <siprintf>
 8002b2e:	e012      	b.n	8002b56 <ShowMainDisplay+0xb6>

	}
	else
	{
		//Aвто ОТКЛ
		char  autoOff[] = {0x41, 0xE2, 0xF2, 0xEE, 0x20, 0xCE, 0xD2, 0xCA, 0xCB,  0x00};
 8002b30:	4a54      	ldr	r2, [pc, #336]	; (8002c84 <ShowMainDisplay+0x1e4>)
 8002b32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b36:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b38:	c303      	stmia	r3!, {r0, r1}
 8002b3a:	801a      	strh	r2, [r3, #0]
		sprintf(lcdAnswer[0],"%s %d/%d",autoOff, meas_data.probInKanistra, settings.retain.nakop_SV);
 8002b3c:	4b48      	ldr	r3, [pc, #288]	; (8002c60 <ShowMainDisplay+0x1c0>)
 8002b3e:	8a9b      	ldrh	r3, [r3, #20]
 8002b40:	4619      	mov	r1, r3
 8002b42:	4b49      	ldr	r3, [pc, #292]	; (8002c68 <ShowMainDisplay+0x1c8>)
 8002b44:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002b46:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4947      	ldr	r1, [pc, #284]	; (8002c6c <ShowMainDisplay+0x1cc>)
 8002b50:	4847      	ldr	r0, [pc, #284]	; (8002c70 <ShowMainDisplay+0x1d0>)
 8002b52:	f01c faab 	bl	801f0ac <siprintf>
	}

	if(meas_data.probotbor_ready)
 8002b56:	4b42      	ldr	r3, [pc, #264]	; (8002c60 <ShowMainDisplay+0x1c0>)
 8002b58:	899b      	ldrh	r3, [r3, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d011      	beq.n	8002b82 <ShowMainDisplay+0xe2>
	{
		//Готов к отбору
		char  ready[] = {0xC3,0xEE,0xF2,0xEE,0xE2,0x20,0xEA,0x20,0xEE,0xF2,0xE1,0xEE,0xF0,0xF3};
 8002b5e:	4b4a      	ldr	r3, [pc, #296]	; (8002c88 <ShowMainDisplay+0x1e8>)
 8002b60:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b66:	c407      	stmia	r4!, {r0, r1, r2}
 8002b68:	8023      	strh	r3, [r4, #0]
		memcpy(lcdAnswer[1],ready,sizeof(ready));
 8002b6a:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <ShowMainDisplay+0x1d0>)
 8002b6c:	f103 0414 	add.w	r4, r3, #20
 8002b70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b76:	6020      	str	r0, [r4, #0]
 8002b78:	6061      	str	r1, [r4, #4]
 8002b7a:	60a2      	str	r2, [r4, #8]
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	81a3      	strh	r3, [r4, #12]
 8002b80:	e055      	b.n	8002c2e <ShowMainDisplay+0x18e>
	}
	else if(meas_data.probotbor_busy)
 8002b82:	4b37      	ldr	r3, [pc, #220]	; (8002c60 <ShowMainDisplay+0x1c0>)
 8002b84:	89db      	ldrh	r3, [r3, #14]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d014      	beq.n	8002bb4 <ShowMainDisplay+0x114>
	{
		//Выполняется отбор
		char  execSel[] = {0xC2,0xFB,0xEF,0xEE,0xEB,0xED,0xFF,0xE5,0xF2,0xF1,0xFF,0x20,0xEE,0xF2,0xE1,0xEE,0xF0};
 8002b8a:	4b40      	ldr	r3, [pc, #256]	; (8002c8c <ShowMainDisplay+0x1ec>)
 8002b8c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b90:	461d      	mov	r5, r3
 8002b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b96:	682b      	ldr	r3, [r5, #0]
 8002b98:	7023      	strb	r3, [r4, #0]
		memcpy(lcdAnswer[1],execSel,sizeof(execSel));
 8002b9a:	4b35      	ldr	r3, [pc, #212]	; (8002c70 <ShowMainDisplay+0x1d0>)
 8002b9c:	f103 0514 	add.w	r5, r3, #20
 8002ba0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba6:	6028      	str	r0, [r5, #0]
 8002ba8:	6069      	str	r1, [r5, #4]
 8002baa:	60aa      	str	r2, [r5, #8]
 8002bac:	60eb      	str	r3, [r5, #12]
 8002bae:	7823      	ldrb	r3, [r4, #0]
 8002bb0:	742b      	strb	r3, [r5, #16]
 8002bb2:	e03c      	b.n	8002c2e <ShowMainDisplay+0x18e>
	}
	else if(meas_data.vozvrat_probotbor_busy)
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	; (8002c60 <ShowMainDisplay+0x1c0>)
 8002bb6:	8a1b      	ldrh	r3, [r3, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01b      	beq.n	8002bf4 <ShowMainDisplay+0x154>
	{
		//Выполняется возврат
		char  execRet[] = {0xC2,0xFB,0xEF,0xEE,0xEB,0xED,0xFF,0xE5,0xF2,0xF1,0xFF,0x20,0xE2,0xEE,0xE7,0xE2,0xF0,0xE0,0xF2};
 8002bbc:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <ShowMainDisplay+0x1f0>)
 8002bbe:	f107 0414 	add.w	r4, r7, #20
 8002bc2:	461d      	mov	r5, r3
 8002bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bc8:	682b      	ldr	r3, [r5, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	8022      	strh	r2, [r4, #0]
 8002bce:	3402      	adds	r4, #2
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	7023      	strb	r3, [r4, #0]
		memcpy(lcdAnswer[1],execRet,sizeof(execRet));
 8002bd4:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <ShowMainDisplay+0x1d0>)
 8002bd6:	f103 0514 	add.w	r5, r3, #20
 8002bda:	f107 0414 	add.w	r4, r7, #20
 8002bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be0:	6028      	str	r0, [r5, #0]
 8002be2:	6069      	str	r1, [r5, #4]
 8002be4:	60aa      	str	r2, [r5, #8]
 8002be6:	60eb      	str	r3, [r5, #12]
 8002be8:	8823      	ldrh	r3, [r4, #0]
 8002bea:	78a2      	ldrb	r2, [r4, #2]
 8002bec:	822b      	strh	r3, [r5, #16]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	74ab      	strb	r3, [r5, #18]
 8002bf2:	e01c      	b.n	8002c2e <ShowMainDisplay+0x18e>
	}
	else if(*((uint16_t*)&meas_data.errors))
 8002bf4:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <ShowMainDisplay+0x1f4>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d018      	beq.n	8002c2e <ShowMainDisplay+0x18e>
	{
		// Ошибки, нажмите F4
		char err[] = {0xCE, 0xF8, 0xE8, 0xE1, 0xEA, 0xE8, 0x2C, 0x20, 0xED, 0xE0, 0xE6, 0xEC, 0xE8, 0xF2, 0xE5, 0x20, 0x46, 0x34,  0x00};
 8002bfc:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <ShowMainDisplay+0x1f8>)
 8002bfe:	463c      	mov	r4, r7
 8002c00:	461d      	mov	r5, r3
 8002c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c06:	682b      	ldr	r3, [r5, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	8022      	strh	r2, [r4, #0]
 8002c0c:	3402      	adds	r4, #2
 8002c0e:	0c1b      	lsrs	r3, r3, #16
 8002c10:	7023      	strb	r3, [r4, #0]
		memcpy(lcdAnswer[1],err,sizeof(err));
 8002c12:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <ShowMainDisplay+0x1d0>)
 8002c14:	f103 0514 	add.w	r5, r3, #20
 8002c18:	463c      	mov	r4, r7
 8002c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c1c:	6028      	str	r0, [r5, #0]
 8002c1e:	6069      	str	r1, [r5, #4]
 8002c20:	60aa      	str	r2, [r5, #8]
 8002c22:	60eb      	str	r3, [r5, #12]
 8002c24:	8823      	ldrh	r3, [r4, #0]
 8002c26:	78a2      	ldrb	r2, [r4, #2]
 8002c28:	822b      	strh	r3, [r5, #16]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	74ab      	strb	r3, [r5, #18]
	}
	// Мониторинг->Enter
	char toMonitor[] = {0xCC, 0xEE, 0xED, 0xE8, 0xF2, 0xEE, 0xF0, 0xE8, 0xED, 0xE3, 0x2D, 0x3E, 0x45, 0x6E, 0x74, 0x65, 0x72};
 8002c2e:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <ShowMainDisplay+0x1fc>)
 8002c30:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8002c34:	461d      	mov	r5, r3
 8002c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c3a:	682b      	ldr	r3, [r5, #0]
 8002c3c:	7023      	strb	r3, [r4, #0]
	memcpy(lcdAnswer[3]+3,toMonitor,sizeof(toMonitor));
 8002c3e:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <ShowMainDisplay+0x200>)
 8002c40:	461d      	mov	r5, r3
 8002c42:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8002c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c48:	6028      	str	r0, [r5, #0]
 8002c4a:	6069      	str	r1, [r5, #4]
 8002c4c:	60aa      	str	r2, [r5, #8]
 8002c4e:	60eb      	str	r3, [r5, #12]
 8002c50:	7823      	ldrb	r3, [r4, #0]
 8002c52:	742b      	strb	r3, [r5, #16]
	return 1;
 8002c54:	2301      	movs	r3, #1

}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3798      	adds	r7, #152	; 0x98
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200074ac 	.word	0x200074ac
 8002c64:	080232ec 	.word	0x080232ec
 8002c68:	20007408 	.word	0x20007408
 8002c6c:	080232d8 	.word	0x080232d8
 8002c70:	2000702c 	.word	0x2000702c
 8002c74:	080232f8 	.word	0x080232f8
 8002c78:	08023304 	.word	0x08023304
 8002c7c:	080232e4 	.word	0x080232e4
 8002c80:	20007054 	.word	0x20007054
 8002c84:	08023318 	.word	0x08023318
 8002c88:	08023324 	.word	0x08023324
 8002c8c:	08023334 	.word	0x08023334
 8002c90:	08023348 	.word	0x08023348
 8002c94:	200074c8 	.word	0x200074c8
 8002c98:	0802335c 	.word	0x0802335c
 8002c9c:	08023370 	.word	0x08023370
 8002ca0:	2000706b 	.word	0x2000706b

08002ca4 <OnDownPressKey>:


static uint8_t OnDownPressKey()
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
	if(currentParameters == NULL)return 0; // Если находимся на главном экране, то не реагируем
 8002caa:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <OnDownPressKey+0xbc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <OnDownPressKey+0x12>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e050      	b.n	8002d58 <OnDownPressKey+0xb4>
	if(editMode)
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <OnDownPressKey+0xc0>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01f      	beq.n	8002cfe <OnDownPressKey+0x5a>
	{
		Row *par = currentParameters+paramIndex;
 8002cbe:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <OnDownPressKey+0xbc>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <OnDownPressKey+0xc4>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	460b      	mov	r3, r1
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	440b      	add	r3, r1
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	607b      	str	r3, [r7, #4]
		if(par->isEnum)return 0;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7a1b      	ldrb	r3, [r3, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <OnDownPressKey+0x3c>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e03b      	b.n	8002d58 <OnDownPressKey+0xb4>
		DecIncSymbol(editedValue+currentCursorPosition, 0);
 8002ce0:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <OnDownPressKey+0xc8>)
 8002ce2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <OnDownPressKey+0xcc>)
 8002cea:	4413      	add	r3, r2
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 f916 	bl	8003f20 <DecIncSymbol>
		ShowParameter(par);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fa95 	bl	8003224 <ShowParameter>
		return 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e02c      	b.n	8002d58 <OnDownPressKey+0xb4>
	}
	if(paramIndex>=currentParamLength-1)return 0;// Если курсор находится внизу, не реагируем
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <OnDownPressKey+0xc4>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <OnDownPressKey+0xd0>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	db01      	blt.n	8002d12 <OnDownPressKey+0x6e>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e022      	b.n	8002d58 <OnDownPressKey+0xb4>
	if(currentParameters == Errors)
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <OnDownPressKey+0xbc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a18      	ldr	r2, [pc, #96]	; (8002d78 <OnDownPressKey+0xd4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d109      	bne.n	8002d30 <OnDownPressKey+0x8c>
	{
		paramIndex++;
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <OnDownPressKey+0xc4>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	3301      	adds	r3, #1
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <OnDownPressKey+0xc4>)
 8002d26:	701a      	strb	r2, [r3, #0]
		return ShowErrors();
 8002d28:	f000 fb86 	bl	8003438 <ShowErrors>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	e013      	b.n	8002d58 <OnDownPressKey+0xb4>
	}
	paramIndex++;
 8002d30:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <OnDownPressKey+0xc4>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	3301      	adds	r3, #1
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <OnDownPressKey+0xc4>)
 8002d3a:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters+paramIndex);
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <OnDownPressKey+0xbc>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <OnDownPressKey+0xc4>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	460b      	mov	r3, r1
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	440b      	add	r3, r1
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fa67 	bl	8003224 <ShowParameter>
	return 1;
 8002d56:	2301      	movs	r3, #1
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	200008b8 	.word	0x200008b8
 8002d64:	200008bd 	.word	0x200008bd
 8002d68:	200008bc 	.word	0x200008bc
 8002d6c:	200000c3 	.word	0x200000c3
 8002d70:	20007080 	.word	0x20007080
 8002d74:	200070e8 	.word	0x200070e8
 8002d78:	2000011c 	.word	0x2000011c

08002d7c <OnLeftPressKey>:

static uint8_t OnLeftPressKey()
{
 8002d7c:	b5b0      	push	{r4, r5, r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
	int index = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	607b      	str	r3, [r7, #4]
	if(!editMode)return 0;
 8002d86:	4b3e      	ldr	r3, [pc, #248]	; (8002e80 <OnLeftPressKey+0x104>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <OnLeftPressKey+0x16>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e071      	b.n	8002e76 <OnLeftPressKey+0xfa>
	if(currentParameters==NULL)return 0;
 8002d92:	4b3c      	ldr	r3, [pc, #240]	; (8002e84 <OnLeftPressKey+0x108>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <OnLeftPressKey+0x22>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e06b      	b.n	8002e76 <OnLeftPressKey+0xfa>
	Row *par = currentParameters+paramIndex;
 8002d9e:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <OnLeftPressKey+0x108>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <OnLeftPressKey+0x10c>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	4619      	mov	r1, r3
 8002da8:	460b      	mov	r3, r1
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	440b      	add	r3, r1
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	603b      	str	r3, [r7, #0]
	if(par->isEnum)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	7a1b      	ldrb	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d04f      	beq.n	8002e5c <OnLeftPressKey+0xe0>
	{
		if(par->enums==NULL)return 0;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <OnLeftPressKey+0x4c>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e056      	b.n	8002e76 <OnLeftPressKey+0xfa>
		// поиск индекса вхождения
		index = FindIndexFromValue(currentEnumKey, par->enums, par->enums_len);
 8002dc8:	4b30      	ldr	r3, [pc, #192]	; (8002e8c <OnLeftPressKey+0x110>)
 8002dca:	edd3 7a00 	vldr	s15, [r3]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	7d1b      	ldrb	r3, [r3, #20]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	eeb0 0a67 	vmov.f32	s0, s15
 8002dde:	f000 fd1b 	bl	8003818 <FindIndexFromValue>
 8002de2:	6078      	str	r0, [r7, #4]
		if(index==-1)return 0;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dea:	d101      	bne.n	8002df0 <OnLeftPressKey+0x74>
 8002dec:	2300      	movs	r3, #0
 8002dee:	e042      	b.n	8002e76 <OnLeftPressKey+0xfa>
		index = index==0 ? par->enums_len-1 : index-1;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d103      	bne.n	8002dfe <OnLeftPressKey+0x82>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	7d1b      	ldrb	r3, [r3, #20]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	e001      	b.n	8002e02 <OnLeftPressKey+0x86>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	607b      	str	r3, [r7, #4]
		currentEnumKey = (par->enums+index)->value;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1e      	ldr	r2, [pc, #120]	; (8002e8c <OnLeftPressKey+0x110>)
 8002e12:	6013      	str	r3, [r2, #0]
		memset(editedValue,0,20);
 8002e14:	2214      	movs	r2, #20
 8002e16:	2100      	movs	r1, #0
 8002e18:	481d      	ldr	r0, [pc, #116]	; (8002e90 <OnLeftPressKey+0x114>)
 8002e1a:	f01b f943 	bl	801e0a4 <memset>
		strncpy(editedValue+par->param_pos,(par->enums+index)->name, strlen((par->enums+index)->name));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	79db      	ldrb	r3, [r3, #7]
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <OnLeftPressKey+0x114>)
 8002e26:	18d4      	adds	r4, r2, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	685d      	ldr	r5, [r3, #4]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd f9c5 	bl	80001d0 <strlen>
 8002e46:	4603      	mov	r3, r0
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f01c f9dd 	bl	801f20c <strncpy>
		ShowParameter(par);
 8002e52:	6838      	ldr	r0, [r7, #0]
 8002e54:	f000 f9e6 	bl	8003224 <ShowParameter>
		return 1;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e00c      	b.n	8002e76 <OnLeftPressKey+0xfa>


	}
	else
	{
		currentCursorPosition = ShiftCursor(0, par, 1);
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	6839      	ldr	r1, [r7, #0]
 8002e60:	2000      	movs	r0, #0
 8002e62:	f000 feaf 	bl	8003bc4 <ShiftCursor>
 8002e66:	4603      	mov	r3, r0
 8002e68:	b25a      	sxtb	r2, r3
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <OnLeftPressKey+0x118>)
 8002e6c:	701a      	strb	r2, [r3, #0]
		ShowParameter(par);
 8002e6e:	6838      	ldr	r0, [r7, #0]
 8002e70:	f000 f9d8 	bl	8003224 <ShowParameter>
		return 1;
 8002e74:	2301      	movs	r3, #1

	}
	return 0;
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200008bd 	.word	0x200008bd
 8002e84:	200008b8 	.word	0x200008b8
 8002e88:	200008bc 	.word	0x200008bc
 8002e8c:	200008c0 	.word	0x200008c0
 8002e90:	20007080 	.word	0x20007080
 8002e94:	200000c3 	.word	0x200000c3

08002e98 <OnRightPressKey>:

static uint8_t OnRightPressKey()
{
 8002e98:	b5b0      	push	{r4, r5, r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
	int index = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
	if(!editMode)return 0;
 8002ea2:	4b3e      	ldr	r3, [pc, #248]	; (8002f9c <OnRightPressKey+0x104>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <OnRightPressKey+0x16>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e072      	b.n	8002f94 <OnRightPressKey+0xfc>
	if(currentParameters==NULL)return 0;
 8002eae:	4b3c      	ldr	r3, [pc, #240]	; (8002fa0 <OnRightPressKey+0x108>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <OnRightPressKey+0x22>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e06c      	b.n	8002f94 <OnRightPressKey+0xfc>
	Row *par = currentParameters+paramIndex;
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <OnRightPressKey+0x108>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <OnRightPressKey+0x10c>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	440b      	add	r3, r1
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	603b      	str	r3, [r7, #0]
	if(par->isEnum)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	7a1b      	ldrb	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d050      	beq.n	8002f7a <OnRightPressKey+0xe2>
	{
		if(par->enums==NULL)return 0;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <OnRightPressKey+0x4c>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e057      	b.n	8002f94 <OnRightPressKey+0xfc>
		// поиск индекса вхождения
		index = FindIndexFromValue(currentEnumKey, par->enums, par->enums_len);
 8002ee4:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <OnRightPressKey+0x110>)
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	7d1b      	ldrb	r3, [r3, #20]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8002efa:	f000 fc8d 	bl	8003818 <FindIndexFromValue>
 8002efe:	6078      	str	r0, [r7, #4]
		if(index==-1)return 0;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	d101      	bne.n	8002f0c <OnRightPressKey+0x74>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e043      	b.n	8002f94 <OnRightPressKey+0xfc>
		index = index==par->enums_len-1 ? 0 : index+1;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	7d1b      	ldrb	r3, [r3, #20]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d002      	beq.n	8002f1e <OnRightPressKey+0x86>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	e000      	b.n	8002f20 <OnRightPressKey+0x88>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
		currentEnumKey = (par->enums+index)->value;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1e      	ldr	r2, [pc, #120]	; (8002fa8 <OnRightPressKey+0x110>)
 8002f30:	6013      	str	r3, [r2, #0]
		memset(editedValue,0,20);
 8002f32:	2214      	movs	r2, #20
 8002f34:	2100      	movs	r1, #0
 8002f36:	481d      	ldr	r0, [pc, #116]	; (8002fac <OnRightPressKey+0x114>)
 8002f38:	f01b f8b4 	bl	801e0a4 <memset>
		strncpy(editedValue+par->param_pos,(par->enums+index)->name, strlen((par->enums+index)->name));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	79db      	ldrb	r3, [r3, #7]
 8002f40:	461a      	mov	r2, r3
 8002f42:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <OnRightPressKey+0x114>)
 8002f44:	18d4      	adds	r4, r2, r3
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	685d      	ldr	r5, [r3, #4]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd f936 	bl	80001d0 <strlen>
 8002f64:	4603      	mov	r3, r0
 8002f66:	461a      	mov	r2, r3
 8002f68:	4629      	mov	r1, r5
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f01c f94e 	bl	801f20c <strncpy>
		ShowParameter(par);
 8002f70:	6838      	ldr	r0, [r7, #0]
 8002f72:	f000 f957 	bl	8003224 <ShowParameter>
		return 1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e00c      	b.n	8002f94 <OnRightPressKey+0xfc>

	}
	else
	{
		currentCursorPosition = ShiftCursor(1, par, 1);
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f000 fe20 	bl	8003bc4 <ShiftCursor>
 8002f84:	4603      	mov	r3, r0
 8002f86:	b25a      	sxtb	r2, r3
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <OnRightPressKey+0x118>)
 8002f8a:	701a      	strb	r2, [r3, #0]
		ShowParameter(par);
 8002f8c:	6838      	ldr	r0, [r7, #0]
 8002f8e:	f000 f949 	bl	8003224 <ShowParameter>
		return 1;
 8002f92:	2301      	movs	r3, #1
	}
	return 0;
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f9c:	200008bd 	.word	0x200008bd
 8002fa0:	200008b8 	.word	0x200008b8
 8002fa4:	200008bc 	.word	0x200008bc
 8002fa8:	200008c0 	.word	0x200008c0
 8002fac:	20007080 	.word	0x20007080
 8002fb0:	200000c3 	.word	0x200000c3

08002fb4 <OnUpPressKey>:

static uint8_t OnUpPressKey()
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
	if(currentParameters == NULL)return 0; // Если находимся на главном экране, то не реагируем
 8002fba:	4b2f      	ldr	r3, [pc, #188]	; (8003078 <OnUpPressKey+0xc4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <OnUpPressKey+0x12>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e053      	b.n	800306e <OnUpPressKey+0xba>
	if(editMode)
 8002fc6:	4b2d      	ldr	r3, [pc, #180]	; (800307c <OnUpPressKey+0xc8>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01f      	beq.n	800300e <OnUpPressKey+0x5a>
	{
		Row *par = currentParameters+paramIndex;
 8002fce:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <OnUpPressKey+0xc4>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <OnUpPressKey+0xcc>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	460b      	mov	r3, r1
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	440b      	add	r3, r1
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	607b      	str	r3, [r7, #4]
		if(par->isEnum)return 0;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7a1b      	ldrb	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <OnUpPressKey+0x3c>
 8002fec:	2300      	movs	r3, #0
 8002fee:	e03e      	b.n	800306e <OnUpPressKey+0xba>
		DecIncSymbol(editedValue+currentCursorPosition, 1);
 8002ff0:	4b24      	ldr	r3, [pc, #144]	; (8003084 <OnUpPressKey+0xd0>)
 8002ff2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b23      	ldr	r3, [pc, #140]	; (8003088 <OnUpPressKey+0xd4>)
 8002ffa:	4413      	add	r3, r2
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 ff8e 	bl	8003f20 <DecIncSymbol>
		ShowParameter(par);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f90d 	bl	8003224 <ShowParameter>
		return 1;
 800300a:	2301      	movs	r3, #1
 800300c:	e02f      	b.n	800306e <OnUpPressKey+0xba>
	}
	if(paramIndex<=0)return 0;// Если курсор находится ddth[e, не реагируем
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <OnUpPressKey+0xcc>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <OnUpPressKey+0x66>
 8003016:	2300      	movs	r3, #0
 8003018:	e029      	b.n	800306e <OnUpPressKey+0xba>
	if(currentParameters == Errors)
 800301a:	4b17      	ldr	r3, [pc, #92]	; (8003078 <OnUpPressKey+0xc4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1b      	ldr	r2, [pc, #108]	; (800308c <OnUpPressKey+0xd8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d110      	bne.n	8003046 <OnUpPressKey+0x92>
	{
		paramIndex = paramIndex == 0 ? paramIndex : paramIndex -1;
 8003024:	4b16      	ldr	r3, [pc, #88]	; (8003080 <OnUpPressKey+0xcc>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <OnUpPressKey+0x82>
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <OnUpPressKey+0xcc>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	3b01      	subs	r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	e001      	b.n	800303a <OnUpPressKey+0x86>
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <OnUpPressKey+0xcc>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	4a11      	ldr	r2, [pc, #68]	; (8003080 <OnUpPressKey+0xcc>)
 800303c:	7013      	strb	r3, [r2, #0]
		return ShowErrors();
 800303e:	f000 f9fb 	bl	8003438 <ShowErrors>
 8003042:	4603      	mov	r3, r0
 8003044:	e013      	b.n	800306e <OnUpPressKey+0xba>

	}
	paramIndex--;
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <OnUpPressKey+0xcc>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	3b01      	subs	r3, #1
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <OnUpPressKey+0xcc>)
 8003050:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters+paramIndex);
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <OnUpPressKey+0xc4>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <OnUpPressKey+0xcc>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	4619      	mov	r1, r3
 800305c:	460b      	mov	r3, r1
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	440b      	add	r3, r1
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f8dc 	bl	8003224 <ShowParameter>
	return 1;
 800306c:	2301      	movs	r3, #1
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	200008b8 	.word	0x200008b8
 800307c:	200008bd 	.word	0x200008bd
 8003080:	200008bc 	.word	0x200008bc
 8003084:	200000c3 	.word	0x200000c3
 8003088:	20007080 	.word	0x20007080
 800308c:	2000011c 	.word	0x2000011c

08003090 <OnF1PressKey>:


static uint8_t OnF1PressKey()
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <OnF1PressKey+0x1c>)
 8003096:	22ff      	movs	r2, #255	; 0xff
 8003098:	701a      	strb	r2, [r3, #0]
	currentParameters = NULL;
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <OnF1PressKey+0x20>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
	return ShowMainDisplay();
 80030a0:	f7ff fcfe 	bl	8002aa0 <ShowMainDisplay>
 80030a4:	4603      	mov	r3, r0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	200000c3 	.word	0x200000c3
 80030b0:	200008b8 	.word	0x200008b8

080030b4 <OnF2PressKey>:

static uint8_t OnF2PressKey()
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 80030b8:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <OnF2PressKey+0x40>)
 80030ba:	22ff      	movs	r2, #255	; 0xff
 80030bc:	701a      	strb	r2, [r3, #0]
	currentParameters = probotbor_parameters;
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <OnF2PressKey+0x44>)
 80030c0:	4a0e      	ldr	r2, [pc, #56]	; (80030fc <OnF2PressKey+0x48>)
 80030c2:	601a      	str	r2, [r3, #0]
	paramIndex = 0;
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <OnF2PressKey+0x4c>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
	currentParamLength = sizeof(probotbor_parameters)/sizeof(Row);
 80030ca:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <OnF2PressKey+0x50>)
 80030cc:	2204      	movs	r2, #4
 80030ce:	701a      	strb	r2, [r3, #0]
	editMode = 0;
 80030d0:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <OnF2PressKey+0x54>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
	groupParamName = processParametersName;
 80030d6:	4b0d      	ldr	r3, [pc, #52]	; (800310c <OnF2PressKey+0x58>)
 80030d8:	4a0d      	ldr	r2, [pc, #52]	; (8003110 <OnF2PressKey+0x5c>)
 80030da:	601a      	str	r2, [r3, #0]
	groupParamNameLength = sizeof(processParametersName);
 80030dc:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <OnF2PressKey+0x60>)
 80030de:	2211      	movs	r2, #17
 80030e0:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters);
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <OnF2PressKey+0x44>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f89c 	bl	8003224 <ShowParameter>
	return 1;
 80030ec:	2301      	movs	r3, #1
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200000c3 	.word	0x200000c3
 80030f8:	200008b8 	.word	0x200008b8
 80030fc:	2000020c 	.word	0x2000020c
 8003100:	200008bc 	.word	0x200008bc
 8003104:	200070e8 	.word	0x200070e8
 8003108:	200008bd 	.word	0x200008bd
 800310c:	200070e4 	.word	0x200070e4
 8003110:	200000a4 	.word	0x200000a4
 8003114:	2000707c 	.word	0x2000707c

08003118 <OnF3PressKey>:

static uint8_t OnF3PressKey()
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 800311c:	4b10      	ldr	r3, [pc, #64]	; (8003160 <OnF3PressKey+0x48>)
 800311e:	22ff      	movs	r2, #255	; 0xff
 8003120:	701a      	strb	r2, [r3, #0]
	currentParameters = commParameters;
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <OnF3PressKey+0x4c>)
 8003124:	4a10      	ldr	r2, [pc, #64]	; (8003168 <OnF3PressKey+0x50>)
 8003126:	601a      	str	r2, [r3, #0]
	paramIndex = 0;
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <OnF3PressKey+0x54>)
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
	currentParamLength = sizeof(commParameters)/sizeof(Row);
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <OnF3PressKey+0x58>)
 8003130:	2206      	movs	r2, #6
 8003132:	701a      	strb	r2, [r3, #0]
	editMode = 0;
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <OnF3PressKey+0x5c>)
 8003136:	2200      	movs	r2, #0
 8003138:	701a      	strb	r2, [r3, #0]
	groupParamName = commParametersName;
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <OnF3PressKey+0x60>)
 800313c:	4a0f      	ldr	r2, [pc, #60]	; (800317c <OnF3PressKey+0x64>)
 800313e:	601a      	str	r2, [r3, #0]
	groupParamNameLength = strlen(commParametersName);
 8003140:	480e      	ldr	r0, [pc, #56]	; (800317c <OnF3PressKey+0x64>)
 8003142:	f7fd f845 	bl	80001d0 <strlen>
 8003146:	4603      	mov	r3, r0
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <OnF3PressKey+0x68>)
 800314c:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters);
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <OnF3PressKey+0x4c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f866 	bl	8003224 <ShowParameter>
	return 1;
 8003158:	2301      	movs	r3, #1
}
 800315a:	4618      	mov	r0, r3
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	200000c3 	.word	0x200000c3
 8003164:	200008b8 	.word	0x200008b8
 8003168:	2000026c 	.word	0x2000026c
 800316c:	200008bc 	.word	0x200008bc
 8003170:	200070e8 	.word	0x200070e8
 8003174:	200008bd 	.word	0x200008bd
 8003178:	200070e4 	.word	0x200070e4
 800317c:	20000094 	.word	0x20000094
 8003180:	2000707c 	.word	0x2000707c

08003184 <OnF4PressKey>:

static uint8_t OnF4PressKey()
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 8003188:	4b08      	ldr	r3, [pc, #32]	; (80031ac <OnF4PressKey+0x28>)
 800318a:	22ff      	movs	r2, #255	; 0xff
 800318c:	701a      	strb	r2, [r3, #0]
	currentParameters = Errors;
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <OnF4PressKey+0x2c>)
 8003190:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <OnF4PressKey+0x30>)
 8003192:	601a      	str	r2, [r3, #0]
	editMode  = 0;
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <OnF4PressKey+0x34>)
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
	paramIndex = 0;
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <OnF4PressKey+0x38>)
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
	return ShowErrors();
 80031a0:	f000 f94a 	bl	8003438 <ShowErrors>
 80031a4:	4603      	mov	r3, r0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	200000c3 	.word	0x200000c3
 80031b0:	200008b8 	.word	0x200008b8
 80031b4:	2000011c 	.word	0x2000011c
 80031b8:	200008bd 	.word	0x200008bd
 80031bc:	200008bc 	.word	0x200008bc

080031c0 <OnEscPressKey>:

static uint8_t OnEscPressKey()
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 80031c4:	4b13      	ldr	r3, [pc, #76]	; (8003214 <OnEscPressKey+0x54>)
 80031c6:	22ff      	movs	r2, #255	; 0xff
 80031c8:	701a      	strb	r2, [r3, #0]
	if(currentParameters==NULL)return 0;
 80031ca:	4b13      	ldr	r3, [pc, #76]	; (8003218 <OnEscPressKey+0x58>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <OnEscPressKey+0x16>
 80031d2:	2300      	movs	r3, #0
 80031d4:	e01b      	b.n	800320e <OnEscPressKey+0x4e>
	if(!editMode)
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <OnEscPressKey+0x5c>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <OnEscPressKey+0x2c>
	{
		currentParameters = NULL;
 80031de:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <OnEscPressKey+0x58>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
		return ShowMainDisplay();
 80031e4:	f7ff fc5c 	bl	8002aa0 <ShowMainDisplay>
 80031e8:	4603      	mov	r3, r0
 80031ea:	e010      	b.n	800320e <OnEscPressKey+0x4e>
	}
	else
	{
		editMode = 0;
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <OnEscPressKey+0x5c>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
		ShowParameter(currentParameters+paramIndex);
 80031f2:	4b09      	ldr	r3, [pc, #36]	; (8003218 <OnEscPressKey+0x58>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <OnEscPressKey+0x60>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	4619      	mov	r1, r3
 80031fc:	460b      	mov	r3, r1
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	440b      	add	r3, r1
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f80c 	bl	8003224 <ShowParameter>
		return 1;
 800320c:	2301      	movs	r3, #1
	}
	return 0;
}
 800320e:	4618      	mov	r0, r3
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200000c3 	.word	0x200000c3
 8003218:	200008b8 	.word	0x200008b8
 800321c:	200008bd 	.word	0x200008bd
 8003220:	200008bc 	.word	0x200008bc

08003224 <ShowParameter>:

static void ShowParameter(Row *parameter)
{
 8003224:	b5b0      	push	{r4, r5, r7, lr}
 8003226:	b092      	sub	sp, #72	; 0x48
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	Clear();
 800322c:	f7ff fc0e 	bl	8002a4c <Clear>
	memcpy(lcdAnswer[0],groupParamName,groupParamNameLength); // Имя группы параметра
 8003230:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <ShowParameter+0x1b0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a68      	ldr	r2, [pc, #416]	; (80033d8 <ShowParameter+0x1b4>)
 8003236:	7812      	ldrb	r2, [r2, #0]
 8003238:	4619      	mov	r1, r3
 800323a:	4868      	ldr	r0, [pc, #416]	; (80033dc <ShowParameter+0x1b8>)
 800323c:	f01a ff0a 	bl	801e054 <memcpy>
	memcpy(lcdAnswer[1],parameter->name,parameter->name_len); // Имя  параметра
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	795b      	ldrb	r3, [r3, #5]
 8003248:	461a      	mov	r2, r3
 800324a:	4865      	ldr	r0, [pc, #404]	; (80033e0 <ShowParameter+0x1bc>)
 800324c:	f01a ff02 	bl	801e054 <memcpy>
	if(parameter->isEnum)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	7a1b      	ldrb	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d069      	beq.n	800332c <ShowParameter+0x108>
	{
		if(editMode)
 8003258:	4b62      	ldr	r3, [pc, #392]	; (80033e4 <ShowParameter+0x1c0>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d018      	beq.n	8003292 <ShowParameter+0x6e>
		{
			strncpy(lcdAnswer[2]+parameter->param_pos,editedValue+parameter->param_pos, strlen(editedValue+parameter->param_pos));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	79db      	ldrb	r3, [r3, #7]
 8003264:	461a      	mov	r2, r3
 8003266:	4b60      	ldr	r3, [pc, #384]	; (80033e8 <ShowParameter+0x1c4>)
 8003268:	18d4      	adds	r4, r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	79db      	ldrb	r3, [r3, #7]
 800326e:	461a      	mov	r2, r3
 8003270:	4b5e      	ldr	r3, [pc, #376]	; (80033ec <ShowParameter+0x1c8>)
 8003272:	18d5      	adds	r5, r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	79db      	ldrb	r3, [r3, #7]
 8003278:	461a      	mov	r2, r3
 800327a:	4b5c      	ldr	r3, [pc, #368]	; (80033ec <ShowParameter+0x1c8>)
 800327c:	4413      	add	r3, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f7fc ffa6 	bl	80001d0 <strlen>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	4629      	mov	r1, r5
 800328a:	4620      	mov	r0, r4
 800328c:	f01b ffbe 	bl	801f20c <strncpy>
 8003290:	e050      	b.n	8003334 <ShowParameter+0x110>
		}
		else
		{
			float value = 0;
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	647b      	str	r3, [r7, #68]	; 0x44
			switch (parameter->type) {
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7d5b      	ldrb	r3, [r3, #21]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <ShowParameter+0x82>
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d00a      	beq.n	80032ba <ShowParameter+0x96>
					break;
				case ROW_UINT:
					value = *((uint32_t*)parameter->data);
					break;
				default:
					break;
 80032a4:	e013      	b.n	80032ce <ShowParameter+0xaa>
					value = *((uint16_t*)parameter->data);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	ee07 3a90 	vmov	s15, r3
 80032b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
					break;
 80032b8:	e009      	b.n	80032ce <ShowParameter+0xaa>
					value = *((uint32_t*)parameter->data);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	ee07 3a90 	vmov	s15, r3
 80032c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
					break;
 80032cc:	bf00      	nop
			}
			Dictionary *pair = FindDictionaryFromValue(value, parameter->enums, parameter->enums_len);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	7d1b      	ldrb	r3, [r3, #20]
 80032d6:	4619      	mov	r1, r3
 80032d8:	4610      	mov	r0, r2
 80032da:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80032de:	f000 fa6f 	bl	80037c0 <FindDictionaryFromValue>
 80032e2:	6438      	str	r0, [r7, #64]	; 0x40
			if(pair == NULL)
 80032e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10d      	bne.n	8003306 <ShowParameter+0xe2>
			{
				strncpy(lcdAnswer[2]+parameter->param_pos,"Undefined", strlen("Undefined"));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	79db      	ldrb	r3, [r3, #7]
 80032ee:	461a      	mov	r2, r3
 80032f0:	4b3d      	ldr	r3, [pc, #244]	; (80033e8 <ShowParameter+0x1c4>)
 80032f2:	4413      	add	r3, r2
 80032f4:	493e      	ldr	r1, [pc, #248]	; (80033f0 <ShowParameter+0x1cc>)
 80032f6:	461a      	mov	r2, r3
 80032f8:	460b      	mov	r3, r1
 80032fa:	cb03      	ldmia	r3!, {r0, r1}
 80032fc:	6010      	str	r0, [r2, #0]
 80032fe:	6051      	str	r1, [r2, #4]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	7213      	strb	r3, [r2, #8]
 8003304:	e016      	b.n	8003334 <ShowParameter+0x110>
			}
			else
			{
				strncpy(lcdAnswer[2]+parameter->param_pos,pair->name, strlen(pair->name));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	79db      	ldrb	r3, [r3, #7]
 800330a:	461a      	mov	r2, r3
 800330c:	4b36      	ldr	r3, [pc, #216]	; (80033e8 <ShowParameter+0x1c4>)
 800330e:	18d4      	adds	r4, r2, r3
 8003310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003312:	685d      	ldr	r5, [r3, #4]
 8003314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fc ff59 	bl	80001d0 <strlen>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	4629      	mov	r1, r5
 8003324:	4620      	mov	r0, r4
 8003326:	f01b ff71 	bl	801f20c <strncpy>
 800332a:	e003      	b.n	8003334 <ShowParameter+0x110>
		}

	}
	else
	{
		Print(parameter, 2);
 800332c:	2102      	movs	r1, #2
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 faea 	bl	8003908 <Print>
	}

	if(parameter->isEdited)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	791b      	ldrb	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d034      	beq.n	80033a6 <ShowParameter+0x182>
	{
		if(!editMode)
 800333c:	4b29      	ldr	r3, [pc, #164]	; (80033e4 <ShowParameter+0x1c0>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d110      	bne.n	8003366 <ShowParameter+0x142>
		{
			//Изм.->Enter
			char edit[] = {0xC8, 0xE7, 0xEC, 0x2E, 0x2D, 0x3E, 0x45, 0x6E, 0x74, 0x65, 0x72};
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <ShowParameter+0x1d0>)
 8003346:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800334a:	ca07      	ldmia	r2, {r0, r1, r2}
 800334c:	c303      	stmia	r3!, {r0, r1}
 800334e:	801a      	strh	r2, [r3, #0]
 8003350:	3302      	adds	r3, #2
 8003352:	0c12      	lsrs	r2, r2, #16
 8003354:	701a      	strb	r2, [r3, #0]
			strncpy(lcdAnswer[3]+9, edit, sizeof(edit));
 8003356:	4828      	ldr	r0, [pc, #160]	; (80033f8 <ShowParameter+0x1d4>)
 8003358:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800335c:	220b      	movs	r2, #11
 800335e:	4619      	mov	r1, r3
 8003360:	f01b ff54 	bl	801f20c <strncpy>
	{
		//Главная->Esc
		char toMain[] = {0xC3, 0xEB, 0xE0, 0xE2, 0xED, 0xE0, 0xFF, 0x2D, 0x3E, 0x45, 0x73, 0x63,  0x00};
		memcpy(lcdAnswer[3]+8,toMain, sizeof(toMain));
	}
}
 8003364:	e031      	b.n	80033ca <ShowParameter+0x1a6>
			char back[] = {0xCD, 0xE0, 0xE7, 0xE0, 0xE4, 0x2D, 0x3E, 0x45, 0x73, 0x63};
 8003366:	4a25      	ldr	r2, [pc, #148]	; (80033fc <ShowParameter+0x1d8>)
 8003368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800336c:	ca07      	ldmia	r2, {r0, r1, r2}
 800336e:	c303      	stmia	r3!, {r0, r1}
 8003370:	801a      	strh	r2, [r3, #0]
			memcpy(lcdAnswer[3],back, sizeof(back));
 8003372:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <ShowParameter+0x1b8>)
 8003374:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800337c:	cb03      	ldmia	r3!, {r0, r1}
 800337e:	6010      	str	r0, [r2, #0]
 8003380:	6051      	str	r1, [r2, #4]
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	8113      	strh	r3, [r2, #8]
			char ok[] = { 0x4F, 0x6B, 0x2D, 0x3E, 0x45, 0x6E, 0x74, 0x65, 0x72};
 8003386:	4a1e      	ldr	r2, [pc, #120]	; (8003400 <ShowParameter+0x1dc>)
 8003388:	f107 031c 	add.w	r3, r7, #28
 800338c:	ca07      	ldmia	r2, {r0, r1, r2}
 800338e:	c303      	stmia	r3!, {r0, r1}
 8003390:	701a      	strb	r2, [r3, #0]
			memcpy(lcdAnswer[3]+11,ok, sizeof(ok));
 8003392:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <ShowParameter+0x1e0>)
 8003394:	461a      	mov	r2, r3
 8003396:	f107 031c 	add.w	r3, r7, #28
 800339a:	cb03      	ldmia	r3!, {r0, r1}
 800339c:	6010      	str	r0, [r2, #0]
 800339e:	6051      	str	r1, [r2, #4]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	7213      	strb	r3, [r2, #8]
}
 80033a4:	e011      	b.n	80033ca <ShowParameter+0x1a6>
	else if(currentParameters == indication_rows)
 80033a6:	4b18      	ldr	r3, [pc, #96]	; (8003408 <ShowParameter+0x1e4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a18      	ldr	r2, [pc, #96]	; (800340c <ShowParameter+0x1e8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d10c      	bne.n	80033ca <ShowParameter+0x1a6>
		char toMain[] = {0xC3, 0xEB, 0xE0, 0xE2, 0xED, 0xE0, 0xFF, 0x2D, 0x3E, 0x45, 0x73, 0x63,  0x00};
 80033b0:	4b17      	ldr	r3, [pc, #92]	; (8003410 <ShowParameter+0x1ec>)
 80033b2:	f107 040c 	add.w	r4, r7, #12
 80033b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033b8:	c407      	stmia	r4!, {r0, r1, r2}
 80033ba:	7023      	strb	r3, [r4, #0]
		memcpy(lcdAnswer[3]+8,toMain, sizeof(toMain));
 80033bc:	4815      	ldr	r0, [pc, #84]	; (8003414 <ShowParameter+0x1f0>)
 80033be:	f107 030c 	add.w	r3, r7, #12
 80033c2:	220d      	movs	r2, #13
 80033c4:	4619      	mov	r1, r3
 80033c6:	f01a fe45 	bl	801e054 <memcpy>
}
 80033ca:	bf00      	nop
 80033cc:	3748      	adds	r7, #72	; 0x48
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bdb0      	pop	{r4, r5, r7, pc}
 80033d2:	bf00      	nop
 80033d4:	200070e4 	.word	0x200070e4
 80033d8:	2000707c 	.word	0x2000707c
 80033dc:	2000702c 	.word	0x2000702c
 80033e0:	20007040 	.word	0x20007040
 80033e4:	200008bd 	.word	0x200008bd
 80033e8:	20007054 	.word	0x20007054
 80033ec:	20007080 	.word	0x20007080
 80033f0:	08023384 	.word	0x08023384
 80033f4:	08023390 	.word	0x08023390
 80033f8:	20007071 	.word	0x20007071
 80033fc:	0802339c 	.word	0x0802339c
 8003400:	080233a8 	.word	0x080233a8
 8003404:	20007073 	.word	0x20007073
 8003408:	200008b8 	.word	0x200008b8
 800340c:	200002fc 	.word	0x200002fc
 8003410:	080233b4 	.word	0x080233b4
 8003414:	20007070 	.word	0x20007070

08003418 <Min>:

static int Min(int x,int y)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
	return x<y?x:y;
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4293      	cmp	r3, r2
 8003428:	bfa8      	it	ge
 800342a:	4613      	movge	r3, r2
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <ShowErrors>:

static uint8_t ShowErrors()
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
	GetAllErrors();
 800343e:	f000 f86f 	bl	8003520 <GetAllErrors>
	Clear();
 8003442:	f7ff fb03 	bl	8002a4c <Clear>
	//Ошибки
	char erors[] = {0xCE, 0xF8, 0xE8, 0xE1, 0xEA, 0xE8,  0x00};
 8003446:	4a30      	ldr	r2, [pc, #192]	; (8003508 <ShowErrors+0xd0>)
 8003448:	1d3b      	adds	r3, r7, #4
 800344a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800344e:	6018      	str	r0, [r3, #0]
 8003450:	3304      	adds	r3, #4
 8003452:	8019      	strh	r1, [r3, #0]
 8003454:	3302      	adds	r3, #2
 8003456:	0c0a      	lsrs	r2, r1, #16
 8003458:	701a      	strb	r2, [r3, #0]
	memcpy(lcdAnswer[0],erors, sizeof(erors));
 800345a:	4b2c      	ldr	r3, [pc, #176]	; (800350c <ShowErrors+0xd4>)
 800345c:	461a      	mov	r2, r3
 800345e:	1d3b      	adds	r3, r7, #4
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	6010      	str	r0, [r2, #0]
 8003464:	8899      	ldrh	r1, [r3, #4]
 8003466:	799b      	ldrb	r3, [r3, #6]
 8003468:	8091      	strh	r1, [r2, #4]
 800346a:	7193      	strb	r3, [r2, #6]
	if(err_count==0)return 1;
 800346c:	4b28      	ldr	r3, [pc, #160]	; (8003510 <ShowErrors+0xd8>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <ShowErrors+0x40>
 8003474:	2301      	movs	r3, #1
 8003476:	e042      	b.n	80034fe <ShowErrors+0xc6>
	if(paramIndex>=err_count-1)paramIndex = err_count==0 ? 0 : err_count-1;
 8003478:	4b26      	ldr	r3, [pc, #152]	; (8003514 <ShowErrors+0xdc>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	4b24      	ldr	r3, [pc, #144]	; (8003510 <ShowErrors+0xd8>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	3b01      	subs	r3, #1
 8003484:	429a      	cmp	r2, r3
 8003486:	db0b      	blt.n	80034a0 <ShowErrors+0x68>
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <ShowErrors+0xd8>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d004      	beq.n	800349a <ShowErrors+0x62>
 8003490:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <ShowErrors+0xd8>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	3b01      	subs	r3, #1
 8003496:	b2db      	uxtb	r3, r3
 8003498:	e000      	b.n	800349c <ShowErrors+0x64>
 800349a:	2300      	movs	r3, #0
 800349c:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <ShowErrors+0xdc>)
 800349e:	7013      	strb	r3, [r2, #0]
	for (int i = paramIndex; i < Min(err_count, paramIndex+3); ++i) {
 80034a0:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <ShowErrors+0xdc>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e01b      	b.n	80034e0 <ShowErrors+0xa8>
		sprintf(lcdAnswer[1+i-paramIndex],"%d.%s",errors_info[i].num, errors_info[i].errorName);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3301      	adds	r3, #1
 80034ac:	4a19      	ldr	r2, [pc, #100]	; (8003514 <ShowErrors+0xdc>)
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	1a9a      	subs	r2, r3, r2
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4a14      	ldr	r2, [pc, #80]	; (800350c <ShowErrors+0xd4>)
 80034bc:	1898      	adds	r0, r3, r2
 80034be:	4a16      	ldr	r2, [pc, #88]	; (8003518 <ShowErrors+0xe0>)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80034c6:	4619      	mov	r1, r3
 80034c8:	4a13      	ldr	r2, [pc, #76]	; (8003518 <ShowErrors+0xe0>)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	460a      	mov	r2, r1
 80034d4:	4911      	ldr	r1, [pc, #68]	; (800351c <ShowErrors+0xe4>)
 80034d6:	f01b fde9 	bl	801f0ac <siprintf>
	for (int i = paramIndex; i < Min(err_count, paramIndex+3); ++i) {
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3301      	adds	r3, #1
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <ShowErrors+0xd8>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <ShowErrors+0xdc>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	3303      	adds	r3, #3
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f7ff ff92 	bl	8003418 <Min>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4293      	cmp	r3, r2
 80034fa:	dbd5      	blt.n	80034a8 <ShowErrors+0x70>
	}
	return 1;
 80034fc:	2301      	movs	r3, #1
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	080233cc 	.word	0x080233cc
 800350c:	2000702c 	.word	0x2000702c
 8003510:	200070e9 	.word	0x200070e9
 8003514:	200008bc 	.word	0x200008bc
 8003518:	20007094 	.word	0x20007094
 800351c:	080233c4 	.word	0x080233c4

08003520 <GetAllErrors>:

static uint8_t GetAllErrors()
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
	err_count = 0;
 8003524:	4b9c      	ldr	r3, [pc, #624]	; (8003798 <GetAllErrors+0x278>)
 8003526:	2200      	movs	r2, #0
 8003528:	701a      	strb	r2, [r3, #0]
	if(meas_data.errors.nakopitel_kanistra_err)
 800352a:	4b9c      	ldr	r3, [pc, #624]	; (800379c <GetAllErrors+0x27c>)
 800352c:	7f1b      	ldrb	r3, [r3, #28]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d017      	beq.n	8003568 <GetAllErrors+0x48>
	{
		errors_info[err_count].num = err_count+1;
 8003538:	4b97      	ldr	r3, [pc, #604]	; (8003798 <GetAllErrors+0x278>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	4a96      	ldr	r2, [pc, #600]	; (8003798 <GetAllErrors+0x278>)
 800353e:	7812      	ldrb	r2, [r2, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	b2d9      	uxtb	r1, r3
 8003544:	4b96      	ldr	r3, [pc, #600]	; (80037a0 <GetAllErrors+0x280>)
 8003546:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[0].name;
 800354a:	4b93      	ldr	r3, [pc, #588]	; (8003798 <GetAllErrors+0x278>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	4b94      	ldr	r3, [pc, #592]	; (80037a4 <GetAllErrors+0x284>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4992      	ldr	r1, [pc, #584]	; (80037a0 <GetAllErrors+0x280>)
 8003556:	00c3      	lsls	r3, r0, #3
 8003558:	440b      	add	r3, r1
 800355a:	605a      	str	r2, [r3, #4]
		err_count++;
 800355c:	4b8e      	ldr	r3, [pc, #568]	; (8003798 <GetAllErrors+0x278>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	b2da      	uxtb	r2, r3
 8003564:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <GetAllErrors+0x278>)
 8003566:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.nakopitel_door_err)
 8003568:	4b8c      	ldr	r3, [pc, #560]	; (800379c <GetAllErrors+0x27c>)
 800356a:	7f1b      	ldrb	r3, [r3, #28]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d017      	beq.n	80035a6 <GetAllErrors+0x86>
	{
		errors_info[err_count].num = err_count+1;
 8003576:	4b88      	ldr	r3, [pc, #544]	; (8003798 <GetAllErrors+0x278>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	4a87      	ldr	r2, [pc, #540]	; (8003798 <GetAllErrors+0x278>)
 800357c:	7812      	ldrb	r2, [r2, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	b2d9      	uxtb	r1, r3
 8003582:	4b87      	ldr	r3, [pc, #540]	; (80037a0 <GetAllErrors+0x280>)
 8003584:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[1].name;
 8003588:	4b83      	ldr	r3, [pc, #524]	; (8003798 <GetAllErrors+0x278>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	4b85      	ldr	r3, [pc, #532]	; (80037a4 <GetAllErrors+0x284>)
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	4983      	ldr	r1, [pc, #524]	; (80037a0 <GetAllErrors+0x280>)
 8003594:	00c3      	lsls	r3, r0, #3
 8003596:	440b      	add	r3, r1
 8003598:	605a      	str	r2, [r3, #4]
		err_count++;
 800359a:	4b7f      	ldr	r3, [pc, #508]	; (8003798 <GetAllErrors+0x278>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	3301      	adds	r3, #1
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	4b7d      	ldr	r3, [pc, #500]	; (8003798 <GetAllErrors+0x278>)
 80035a4:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.uz_err)
 80035a6:	4b7d      	ldr	r3, [pc, #500]	; (800379c <GetAllErrors+0x27c>)
 80035a8:	7f1b      	ldrb	r3, [r3, #28]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d017      	beq.n	80035e4 <GetAllErrors+0xc4>
	{
		errors_info[err_count].num = err_count+1;
 80035b4:	4b78      	ldr	r3, [pc, #480]	; (8003798 <GetAllErrors+0x278>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	4a77      	ldr	r2, [pc, #476]	; (8003798 <GetAllErrors+0x278>)
 80035ba:	7812      	ldrb	r2, [r2, #0]
 80035bc:	3301      	adds	r3, #1
 80035be:	b2d9      	uxtb	r1, r3
 80035c0:	4b77      	ldr	r3, [pc, #476]	; (80037a0 <GetAllErrors+0x280>)
 80035c2:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[2].name;
 80035c6:	4b74      	ldr	r3, [pc, #464]	; (8003798 <GetAllErrors+0x278>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	4b75      	ldr	r3, [pc, #468]	; (80037a4 <GetAllErrors+0x284>)
 80035ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d0:	4973      	ldr	r1, [pc, #460]	; (80037a0 <GetAllErrors+0x280>)
 80035d2:	00c3      	lsls	r3, r0, #3
 80035d4:	440b      	add	r3, r1
 80035d6:	605a      	str	r2, [r3, #4]
		err_count++;
 80035d8:	4b6f      	ldr	r3, [pc, #444]	; (8003798 <GetAllErrors+0x278>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	3301      	adds	r3, #1
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	4b6d      	ldr	r3, [pc, #436]	; (8003798 <GetAllErrors+0x278>)
 80035e2:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sb_abort_err)
 80035e4:	4b6d      	ldr	r3, [pc, #436]	; (800379c <GetAllErrors+0x27c>)
 80035e6:	7f1b      	ldrb	r3, [r3, #28]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d017      	beq.n	8003622 <GetAllErrors+0x102>
	{
		errors_info[err_count].num = err_count+1;
 80035f2:	4b69      	ldr	r3, [pc, #420]	; (8003798 <GetAllErrors+0x278>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	4a68      	ldr	r2, [pc, #416]	; (8003798 <GetAllErrors+0x278>)
 80035f8:	7812      	ldrb	r2, [r2, #0]
 80035fa:	3301      	adds	r3, #1
 80035fc:	b2d9      	uxtb	r1, r3
 80035fe:	4b68      	ldr	r3, [pc, #416]	; (80037a0 <GetAllErrors+0x280>)
 8003600:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[3].name;
 8003604:	4b64      	ldr	r3, [pc, #400]	; (8003798 <GetAllErrors+0x278>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	4b66      	ldr	r3, [pc, #408]	; (80037a4 <GetAllErrors+0x284>)
 800360c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800360e:	4964      	ldr	r1, [pc, #400]	; (80037a0 <GetAllErrors+0x280>)
 8003610:	00c3      	lsls	r3, r0, #3
 8003612:	440b      	add	r3, r1
 8003614:	605a      	str	r2, [r3, #4]
		err_count++;
 8003616:	4b60      	ldr	r3, [pc, #384]	; (8003798 <GetAllErrors+0x278>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	3301      	adds	r3, #1
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4b5e      	ldr	r3, [pc, #376]	; (8003798 <GetAllErrors+0x278>)
 8003620:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sq_left_err)
 8003622:	4b5e      	ldr	r3, [pc, #376]	; (800379c <GetAllErrors+0x27c>)
 8003624:	7f1b      	ldrb	r3, [r3, #28]
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d017      	beq.n	8003660 <GetAllErrors+0x140>
	{
		errors_info[err_count].num = err_count+1;
 8003630:	4b59      	ldr	r3, [pc, #356]	; (8003798 <GetAllErrors+0x278>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	4a58      	ldr	r2, [pc, #352]	; (8003798 <GetAllErrors+0x278>)
 8003636:	7812      	ldrb	r2, [r2, #0]
 8003638:	3301      	adds	r3, #1
 800363a:	b2d9      	uxtb	r1, r3
 800363c:	4b58      	ldr	r3, [pc, #352]	; (80037a0 <GetAllErrors+0x280>)
 800363e:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[4].name;
 8003642:	4b55      	ldr	r3, [pc, #340]	; (8003798 <GetAllErrors+0x278>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	4b56      	ldr	r3, [pc, #344]	; (80037a4 <GetAllErrors+0x284>)
 800364a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800364c:	4954      	ldr	r1, [pc, #336]	; (80037a0 <GetAllErrors+0x280>)
 800364e:	00c3      	lsls	r3, r0, #3
 8003650:	440b      	add	r3, r1
 8003652:	605a      	str	r2, [r3, #4]
		err_count++;
 8003654:	4b50      	ldr	r3, [pc, #320]	; (8003798 <GetAllErrors+0x278>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	b2da      	uxtb	r2, r3
 800365c:	4b4e      	ldr	r3, [pc, #312]	; (8003798 <GetAllErrors+0x278>)
 800365e:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sq_right_err)
 8003660:	4b4e      	ldr	r3, [pc, #312]	; (800379c <GetAllErrors+0x27c>)
 8003662:	7f1b      	ldrb	r3, [r3, #28]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d017      	beq.n	800369e <GetAllErrors+0x17e>
	{
		errors_info[err_count].num = err_count+1;
 800366e:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <GetAllErrors+0x278>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	4a49      	ldr	r2, [pc, #292]	; (8003798 <GetAllErrors+0x278>)
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	3301      	adds	r3, #1
 8003678:	b2d9      	uxtb	r1, r3
 800367a:	4b49      	ldr	r3, [pc, #292]	; (80037a0 <GetAllErrors+0x280>)
 800367c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[5].name;
 8003680:	4b45      	ldr	r3, [pc, #276]	; (8003798 <GetAllErrors+0x278>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <GetAllErrors+0x284>)
 8003688:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800368a:	4945      	ldr	r1, [pc, #276]	; (80037a0 <GetAllErrors+0x280>)
 800368c:	00c3      	lsls	r3, r0, #3
 800368e:	440b      	add	r3, r1
 8003690:	605a      	str	r2, [r3, #4]
		err_count++;
 8003692:	4b41      	ldr	r3, [pc, #260]	; (8003798 <GetAllErrors+0x278>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4b3f      	ldr	r3, [pc, #252]	; (8003798 <GetAllErrors+0x278>)
 800369c:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.timeout_moving_right_err)
 800369e:	4b3f      	ldr	r3, [pc, #252]	; (800379c <GetAllErrors+0x27c>)
 80036a0:	7f1b      	ldrb	r3, [r3, #28]
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d018      	beq.n	80036de <GetAllErrors+0x1be>
	{
		errors_info[err_count].num = err_count+1;
 80036ac:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <GetAllErrors+0x278>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	4a39      	ldr	r2, [pc, #228]	; (8003798 <GetAllErrors+0x278>)
 80036b2:	7812      	ldrb	r2, [r2, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	b2d9      	uxtb	r1, r3
 80036b8:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <GetAllErrors+0x280>)
 80036ba:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[6].name;
 80036be:	4b36      	ldr	r3, [pc, #216]	; (8003798 <GetAllErrors+0x278>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	4b37      	ldr	r3, [pc, #220]	; (80037a4 <GetAllErrors+0x284>)
 80036c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80036ca:	4935      	ldr	r1, [pc, #212]	; (80037a0 <GetAllErrors+0x280>)
 80036cc:	00c3      	lsls	r3, r0, #3
 80036ce:	440b      	add	r3, r1
 80036d0:	605a      	str	r2, [r3, #4]
		err_count++;
 80036d2:	4b31      	ldr	r3, [pc, #196]	; (8003798 <GetAllErrors+0x278>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4b2f      	ldr	r3, [pc, #188]	; (8003798 <GetAllErrors+0x278>)
 80036dc:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.timeout_moving_left_err)
 80036de:	4b2f      	ldr	r3, [pc, #188]	; (800379c <GetAllErrors+0x27c>)
 80036e0:	7f1b      	ldrb	r3, [r3, #28]
 80036e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d018      	beq.n	800371e <GetAllErrors+0x1fe>
	{
		errors_info[err_count].num = err_count+1;
 80036ec:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <GetAllErrors+0x278>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	4a29      	ldr	r2, [pc, #164]	; (8003798 <GetAllErrors+0x278>)
 80036f2:	7812      	ldrb	r2, [r2, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	b2d9      	uxtb	r1, r3
 80036f8:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <GetAllErrors+0x280>)
 80036fa:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[7].name;
 80036fe:	4b26      	ldr	r3, [pc, #152]	; (8003798 <GetAllErrors+0x278>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	4b27      	ldr	r3, [pc, #156]	; (80037a4 <GetAllErrors+0x284>)
 8003706:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800370a:	4925      	ldr	r1, [pc, #148]	; (80037a0 <GetAllErrors+0x280>)
 800370c:	00c3      	lsls	r3, r0, #3
 800370e:	440b      	add	r3, r1
 8003710:	605a      	str	r2, [r3, #4]
		err_count++;
 8003712:	4b21      	ldr	r3, [pc, #132]	; (8003798 <GetAllErrors+0x278>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <GetAllErrors+0x278>)
 800371c:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.need_return_err)
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <GetAllErrors+0x27c>)
 8003720:	7f5b      	ldrb	r3, [r3, #29]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d018      	beq.n	800375e <GetAllErrors+0x23e>
	{
		errors_info[err_count].num = err_count+1;
 800372c:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <GetAllErrors+0x278>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	4a19      	ldr	r2, [pc, #100]	; (8003798 <GetAllErrors+0x278>)
 8003732:	7812      	ldrb	r2, [r2, #0]
 8003734:	3301      	adds	r3, #1
 8003736:	b2d9      	uxtb	r1, r3
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <GetAllErrors+0x280>)
 800373a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[8].name;
 800373e:	4b16      	ldr	r3, [pc, #88]	; (8003798 <GetAllErrors+0x278>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <GetAllErrors+0x284>)
 8003746:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800374a:	4915      	ldr	r1, [pc, #84]	; (80037a0 <GetAllErrors+0x280>)
 800374c:	00c3      	lsls	r3, r0, #3
 800374e:	440b      	add	r3, r1
 8003750:	605a      	str	r2, [r3, #4]
		err_count++;
 8003752:	4b11      	ldr	r3, [pc, #68]	; (8003798 <GetAllErrors+0x278>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	3301      	adds	r3, #1
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <GetAllErrors+0x278>)
 800375c:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.full_nakop_err)
 800375e:	4b0f      	ldr	r3, [pc, #60]	; (800379c <GetAllErrors+0x27c>)
 8003760:	7f5b      	ldrb	r3, [r3, #29]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d021      	beq.n	80037b0 <GetAllErrors+0x290>
{
		errors_info[err_count].num = err_count+1;
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <GetAllErrors+0x278>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	4a09      	ldr	r2, [pc, #36]	; (8003798 <GetAllErrors+0x278>)
 8003772:	7812      	ldrb	r2, [r2, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	b2d9      	uxtb	r1, r3
 8003778:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <GetAllErrors+0x280>)
 800377a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[9].name;
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <GetAllErrors+0x278>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <GetAllErrors+0x284>)
 8003786:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800378a:	4905      	ldr	r1, [pc, #20]	; (80037a0 <GetAllErrors+0x280>)
 800378c:	00c3      	lsls	r3, r0, #3
 800378e:	440b      	add	r3, r1
 8003790:	605a      	str	r2, [r3, #4]
		err_count++;
 8003792:	4b01      	ldr	r3, [pc, #4]	; (8003798 <GetAllErrors+0x278>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	e007      	b.n	80037a8 <GetAllErrors+0x288>
 8003798:	200070e9 	.word	0x200070e9
 800379c:	200074ac 	.word	0x200074ac
 80037a0:	20007094 	.word	0x20007094
 80037a4:	2000011c 	.word	0x2000011c
 80037a8:	3301      	adds	r3, #1
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <GetAllErrors+0x29c>)
 80037ae:	701a      	strb	r2, [r3, #0]
}
	return 1;
 80037b0:	2301      	movs	r3, #1

}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	200070e9 	.word	0x200070e9

080037c0 <FindDictionaryFromValue>:

/*Возращает ссылку на пару "ключ-значение", если записи нет, то возвращает NULL */
static Dictionary *FindDictionaryFromValue(float value, Dictionary *dictionary, uint8_t dict_len)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80037ca:	60b8      	str	r0, [r7, #8]
 80037cc:	460b      	mov	r3, r1
 80037ce:	71fb      	strb	r3, [r7, #7]
	Dictionary *temp = NULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < dict_len; ++i) {
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	e013      	b.n	8003802 <FindDictionaryFromValue+0x42>
		temp = dictionary+i;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	4413      	add	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
		if(temp->value == value)return temp;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	edd3 7a00 	vldr	s15, [r3]
 80037ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80037ee:	eeb4 7a67 	vcmp.f32	s14, s15
 80037f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f6:	d101      	bne.n	80037fc <FindDictionaryFromValue+0x3c>
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	e007      	b.n	800380c <FindDictionaryFromValue+0x4c>
	for (int i = 0; i < dict_len; ++i) {
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	3301      	adds	r3, #1
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	429a      	cmp	r2, r3
 8003808:	dbe7      	blt.n	80037da <FindDictionaryFromValue+0x1a>

	}
	return NULL;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <FindIndexFromValue>:

/*Возращает индекс "ключ-значение", если записи нет, -1*/
static int FindIndexFromValue(float value, Dictionary *dictionary, uint8_t dict_len)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003822:	60b8      	str	r0, [r7, #8]
 8003824:	460b      	mov	r3, r1
 8003826:	71fb      	strb	r3, [r7, #7]
	Dictionary *temp = NULL;
 8003828:	2300      	movs	r3, #0
 800382a:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < dict_len; ++i) {
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	e013      	b.n	800385a <FindIndexFromValue+0x42>
		temp = dictionary+i;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	4413      	add	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
		if(temp->value == value)return i;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	edd3 7a00 	vldr	s15, [r3]
 8003842:	ed97 7a03 	vldr	s14, [r7, #12]
 8003846:	eeb4 7a67 	vcmp.f32	s14, s15
 800384a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384e:	d101      	bne.n	8003854 <FindIndexFromValue+0x3c>
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	e008      	b.n	8003866 <FindIndexFromValue+0x4e>
	for (int i = 0; i < dict_len; ++i) {
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	3301      	adds	r3, #1
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	429a      	cmp	r2, r3
 8003860:	dbe7      	blt.n	8003832 <FindIndexFromValue+0x1a>

	}
	return -1;
 8003862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003866:	4618      	mov	r0, r3
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <LcdUpdate>:



uint8_t LcdUpdate(uint8_t *answer)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]
	if(currentParameters==NULL)
 8003880:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <LcdUpdate+0x80>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <LcdUpdate+0x1e>
	{
		result =  ShowMainDisplay();
 8003888:	f7ff f90a 	bl	8002aa0 <ShowMainDisplay>
 800388c:	4603      	mov	r3, r0
 800388e:	73fb      	strb	r3, [r7, #15]
 8003890:	e01d      	b.n	80038ce <LcdUpdate+0x5a>
	}
	else if(currentParameters==Errors)
 8003892:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <LcdUpdate+0x80>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a18      	ldr	r2, [pc, #96]	; (80038f8 <LcdUpdate+0x84>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d104      	bne.n	80038a6 <LcdUpdate+0x32>
	{
		result =  ShowErrors();
 800389c:	f7ff fdcc 	bl	8003438 <ShowErrors>
 80038a0:	4603      	mov	r3, r0
 80038a2:	73fb      	strb	r3, [r7, #15]
 80038a4:	e013      	b.n	80038ce <LcdUpdate+0x5a>
	}
	else if(currentParameters == indication_rows)
 80038a6:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <LcdUpdate+0x80>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a14      	ldr	r2, [pc, #80]	; (80038fc <LcdUpdate+0x88>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d10e      	bne.n	80038ce <LcdUpdate+0x5a>
	{
		ShowParameter(currentParameters+paramIndex);
 80038b0:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <LcdUpdate+0x80>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b12      	ldr	r3, [pc, #72]	; (8003900 <LcdUpdate+0x8c>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	4619      	mov	r1, r3
 80038ba:	460b      	mov	r3, r1
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	440b      	add	r3, r1
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fcad 	bl	8003224 <ShowParameter>
		result =  1;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
	}
	if(result)
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d009      	beq.n	80038e8 <LcdUpdate+0x74>
	{
		memcpy(answer,lcdAnswer,80);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a0b      	ldr	r2, [pc, #44]	; (8003904 <LcdUpdate+0x90>)
 80038d8:	4618      	mov	r0, r3
 80038da:	4611      	mov	r1, r2
 80038dc:	2350      	movs	r3, #80	; 0x50
 80038de:	461a      	mov	r2, r3
 80038e0:	f01a fbb8 	bl	801e054 <memcpy>
		return 1;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <LcdUpdate+0x76>
	}
	return 0;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200008b8 	.word	0x200008b8
 80038f8:	2000011c 	.word	0x2000011c
 80038fc:	200002fc 	.word	0x200002fc
 8003900:	200008bc 	.word	0x200008bc
 8003904:	2000702c 	.word	0x2000702c

08003908 <Print>:

static void Print(Row *parameter, uint8_t index)
{
 8003908:	b5b0      	push	{r4, r5, r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af02      	add	r7, sp, #8
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	70fb      	strb	r3, [r7, #3]
	uint16_t temp = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	817b      	strh	r3, [r7, #10]
	if(editMode)
 8003918:	4b58      	ldr	r3, [pc, #352]	; (8003a7c <Print+0x174>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d012      	beq.n	8003946 <Print+0x3e>
	{
		memcpy(lcdAnswer[index],editedValue,20);
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4a55      	ldr	r2, [pc, #340]	; (8003a80 <Print+0x178>)
 800392c:	4413      	add	r3, r2
 800392e:	4a55      	ldr	r2, [pc, #340]	; (8003a84 <Print+0x17c>)
 8003930:	6811      	ldr	r1, [r2, #0]
 8003932:	6855      	ldr	r5, [r2, #4]
 8003934:	6894      	ldr	r4, [r2, #8]
 8003936:	68d0      	ldr	r0, [r2, #12]
 8003938:	6019      	str	r1, [r3, #0]
 800393a:	605d      	str	r5, [r3, #4]
 800393c:	609c      	str	r4, [r3, #8]
 800393e:	60d8      	str	r0, [r3, #12]
 8003940:	6911      	ldr	r1, [r2, #16]
 8003942:	6119      	str	r1, [r3, #16]
		return;
 8003944:	e097      	b.n	8003a76 <Print+0x16e>
	}
	switch (parameter->type) {
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	7d5b      	ldrb	r3, [r3, #21]
 800394a:	2b04      	cmp	r3, #4
 800394c:	f200 8092 	bhi.w	8003a74 <Print+0x16c>
 8003950:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <Print+0x50>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	080039b5 	.word	0x080039b5
 800395c:	08003a07 	.word	0x08003a07
 8003960:	080039d9 	.word	0x080039d9
 8003964:	08003a2b 	.word	0x08003a2b
 8003968:	0800396d 	.word	0x0800396d
		case ROW_ETH_ADDR:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%03d.%03d.%03d.%03d",*((uint16_t*)parameter->data),*(((uint16_t*)parameter->data)+1),*(((uint16_t*)parameter->data)+2),*(((uint16_t*)parameter->data)+3));
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4a42      	ldr	r2, [pc, #264]	; (8003a80 <Print+0x178>)
 8003978:	4413      	add	r3, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	79d2      	ldrb	r2, [r2, #7]
 800397e:	1898      	adds	r0, r3, r2
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	4619      	mov	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	3302      	adds	r3, #2
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	461c      	mov	r4, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	3304      	adds	r3, #4
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	3306      	adds	r3, #6
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	9200      	str	r2, [sp, #0]
 80039a8:	4623      	mov	r3, r4
 80039aa:	460a      	mov	r2, r1
 80039ac:	4936      	ldr	r1, [pc, #216]	; (8003a88 <Print+0x180>)
 80039ae:	f01b fb7d 	bl	801f0ac <siprintf>
			break;
 80039b2:	e060      	b.n	8003a76 <Print+0x16e>
		case ROW_USHORT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d",*((uint16_t*)parameter->data));
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <Print+0x178>)
 80039c0:	4413      	add	r3, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	79d2      	ldrb	r2, [r2, #7]
 80039c6:	1898      	adds	r0, r3, r2
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	492e      	ldr	r1, [pc, #184]	; (8003a8c <Print+0x184>)
 80039d2:	f01b fb6b 	bl	801f0ac <siprintf>
			break;
 80039d6:	e04e      	b.n	8003a76 <Print+0x16e>
		case ROW_FLOAT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%f",*((float*)parameter->data));
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4a27      	ldr	r2, [pc, #156]	; (8003a80 <Print+0x178>)
 80039e4:	4413      	add	r3, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	79d2      	ldrb	r2, [r2, #7]
 80039ea:	189c      	adds	r4, r3, r2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fc fda8 	bl	8000548 <__aeabi_f2d>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4924      	ldr	r1, [pc, #144]	; (8003a90 <Print+0x188>)
 80039fe:	4620      	mov	r0, r4
 8003a00:	f01b fb54 	bl	801f0ac <siprintf>
			break;
 8003a04:	e037      	b.n	8003a76 <Print+0x16e>
		case ROW_UINT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d",*((uint32_t*)parameter->data));
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4a1b      	ldr	r2, [pc, #108]	; (8003a80 <Print+0x178>)
 8003a12:	4413      	add	r3, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	79d2      	ldrb	r2, [r2, #7]
 8003a18:	1898      	adds	r0, r3, r2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	491a      	ldr	r1, [pc, #104]	; (8003a8c <Print+0x184>)
 8003a24:	f01b fb42 	bl	801f0ac <siprintf>
			break;
 8003a28:	e025      	b.n	8003a76 <Print+0x16e>
		case ROW_BINARY_12:
			temp = *(uint16_t*)parameter->data;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	817b      	strh	r3, [r7, #10]
			for (int j = 0; j < 12; ++j) {
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e01a      	b.n	8003a6e <Print+0x166>
				uint8_t num = (temp & (1<<j))>0;
 8003a38:	897a      	ldrh	r2, [r7, #10]
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bfcc      	ite	gt
 8003a48:	2301      	movgt	r3, #1
 8003a4a:	2300      	movle	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	727b      	strb	r3, [r7, #9]
				sprintf(lcdAnswer[2]+parameter->param_pos+j,"%d",num);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	79db      	ldrb	r3, [r3, #7]
 8003a54:	461a      	mov	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	4a0e      	ldr	r2, [pc, #56]	; (8003a94 <Print+0x18c>)
 8003a5c:	4413      	add	r3, r2
 8003a5e:	7a7a      	ldrb	r2, [r7, #9]
 8003a60:	490a      	ldr	r1, [pc, #40]	; (8003a8c <Print+0x184>)
 8003a62:	4618      	mov	r0, r3
 8003a64:	f01b fb22 	bl	801f0ac <siprintf>
			for (int j = 0; j < 12; ++j) {
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b0b      	cmp	r3, #11
 8003a72:	dde1      	ble.n	8003a38 <Print+0x130>
			}

		default:
			break;
 8003a74:	bf00      	nop
	}
}
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7c:	200008bd 	.word	0x200008bd
 8003a80:	2000702c 	.word	0x2000702c
 8003a84:	20007080 	.word	0x20007080
 8003a88:	080233d4 	.word	0x080233d4
 8003a8c:	080233e8 	.word	0x080233e8
 8003a90:	080233ec 	.word	0x080233ec
 8003a94:	20007054 	.word	0x20007054

08003a98 <AcceptEdit>:

static void AcceptEdit(Row *par)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	if(editMode==0)return;
 8003aa0:	4b42      	ldr	r3, [pc, #264]	; (8003bac <AcceptEdit+0x114>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d07c      	beq.n	8003ba2 <AcceptEdit+0x10a>
	if(par->isEnum)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	7a1b      	ldrb	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d027      	beq.n	8003b00 <AcceptEdit+0x68>
	{
		switch (par->type) {
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	7d5b      	ldrb	r3, [r3, #21]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d01d      	beq.n	8003af4 <AcceptEdit+0x5c>
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	dc66      	bgt.n	8003b8a <AcceptEdit+0xf2>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <AcceptEdit+0x2e>
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d00c      	beq.n	8003ade <AcceptEdit+0x46>
				break;
			case ROW_FLOAT:
				*((float*)par->data) = currentEnumKey;
				break;
			default:
				break;
 8003ac4:	e061      	b.n	8003b8a <AcceptEdit+0xf2>
				*((uint16_t*)par->data) = (uint16_t)currentEnumKey;
 8003ac6:	4b3a      	ldr	r3, [pc, #232]	; (8003bb0 <AcceptEdit+0x118>)
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad4:	ee17 2a90 	vmov	r2, s15
 8003ad8:	b292      	uxth	r2, r2
 8003ada:	801a      	strh	r2, [r3, #0]
				break;
 8003adc:	e058      	b.n	8003b90 <AcceptEdit+0xf8>
				*((uint32_t*)par->data) = (uint32_t)currentEnumKey;
 8003ade:	4b34      	ldr	r3, [pc, #208]	; (8003bb0 <AcceptEdit+0x118>)
 8003ae0:	edd3 7a00 	vldr	s15, [r3]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aec:	ee17 2a90 	vmov	r2, s15
 8003af0:	601a      	str	r2, [r3, #0]
				break;
 8003af2:	e04d      	b.n	8003b90 <AcceptEdit+0xf8>
				*((float*)par->data) = currentEnumKey;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a2d      	ldr	r2, [pc, #180]	; (8003bb0 <AcceptEdit+0x118>)
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	601a      	str	r2, [r3, #0]
				break;
 8003afe:	e047      	b.n	8003b90 <AcceptEdit+0xf8>
		}
	}
	else
	{
		int tmpi = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]
		float tmpf;
		switch (par->type) {
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	7d5b      	ldrb	r3, [r3, #21]
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d840      	bhi.n	8003b8e <AcceptEdit+0xf6>
 8003b0c:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <AcceptEdit+0x7c>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b69 	.word	0x08003b69
 8003b18:	08003b49 	.word	0x08003b49
 8003b1c:	08003b31 	.word	0x08003b31
 8003b20:	08003b8f 	.word	0x08003b8f
 8003b24:	08003b29 	.word	0x08003b29
			case ROW_ETH_ADDR:
				ParseEthernetAddress(par);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f9a7 	bl	8003e7c <ParseEthernetAddress>
				break;
 8003b2e:	e02f      	b.n	8003b90 <AcceptEdit+0xf8>
			case ROW_FLOAT:
				sscanf(editedValue+par->param_pos, "%f", (float*)par->data);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	79db      	ldrb	r3, [r3, #7]
 8003b34:	461a      	mov	r2, r3
 8003b36:	4b1f      	ldr	r3, [pc, #124]	; (8003bb4 <AcceptEdit+0x11c>)
 8003b38:	18d0      	adds	r0, r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	491d      	ldr	r1, [pc, #116]	; (8003bb8 <AcceptEdit+0x120>)
 8003b42:	f01b fad3 	bl	801f0ec <siscanf>
				break;
 8003b46:	e023      	b.n	8003b90 <AcceptEdit+0xf8>
			case ROW_UINT:
				sscanf(editedValue+par->param_pos, "%d", &tmpi);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	79db      	ldrb	r3, [r3, #7]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <AcceptEdit+0x11c>)
 8003b50:	4413      	add	r3, r2
 8003b52:	f107 020c 	add.w	r2, r7, #12
 8003b56:	4919      	ldr	r1, [pc, #100]	; (8003bbc <AcceptEdit+0x124>)
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f01b fac7 	bl	801f0ec <siscanf>
				*((uint32_t*)(par->data)) = tmpi;
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	601a      	str	r2, [r3, #0]
				break;
 8003b66:	e013      	b.n	8003b90 <AcceptEdit+0xf8>
			case ROW_USHORT:
				sscanf(editedValue+par->param_pos, "%d", &tmpi);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	79db      	ldrb	r3, [r3, #7]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <AcceptEdit+0x11c>)
 8003b70:	4413      	add	r3, r2
 8003b72:	f107 020c 	add.w	r2, r7, #12
 8003b76:	4911      	ldr	r1, [pc, #68]	; (8003bbc <AcceptEdit+0x124>)
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f01b fab7 	bl	801f0ec <siscanf>
				*((uint16_t*)(par->data)) = (uint16_t)tmpi;
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	b292      	uxth	r2, r2
 8003b86:	801a      	strh	r2, [r3, #0]
				break;
 8003b88:	e002      	b.n	8003b90 <AcceptEdit+0xf8>
				break;
 8003b8a:	bf00      	nop
 8003b8c:	e000      	b.n	8003b90 <AcceptEdit+0xf8>
			default:
				break;
 8003b8e:	bf00      	nop
		}
	}
	settingsSaveFRAM();
 8003b90:	f002 f8e4 	bl	8005d5c <settingsSaveFRAM>
	editMode = 0;
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <AcceptEdit+0x114>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	701a      	strb	r2, [r3, #0]
	currentCursorPosition = -1;
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <AcceptEdit+0x128>)
 8003b9c:	22ff      	movs	r2, #255	; 0xff
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	e000      	b.n	8003ba4 <AcceptEdit+0x10c>
	if(editMode==0)return;
 8003ba2:	bf00      	nop

}
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	200008bd 	.word	0x200008bd
 8003bb0:	200008c0 	.word	0x200008c0
 8003bb4:	20007080 	.word	0x20007080
 8003bb8:	080233ec 	.word	0x080233ec
 8003bbc:	080233e8 	.word	0x080233e8
 8003bc0:	200000c3 	.word	0x200000c3

08003bc4 <ShiftCursor>:

// direction == 0 ->left
// direction == 1 ->right
// return position
static int ShiftCursor(uint8_t direction, Row *par, uint8_t stepSize)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	6039      	str	r1, [r7, #0]
 8003bce:	71fb      	strb	r3, [r7, #7]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	71bb      	strb	r3, [r7, #6]
	if(!editMode)return -1;
 8003bd4:	4b2d      	ldr	r3, [pc, #180]	; (8003c8c <ShiftCursor+0xc8>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d102      	bne.n	8003be2 <ShiftCursor+0x1e>
 8003bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003be0:	e04d      	b.n	8003c7e <ShiftCursor+0xba>
	if(par->isEnum)return -1;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	7a1b      	ldrb	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <ShiftCursor+0x2c>
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295
 8003bee:	e046      	b.n	8003c7e <ShiftCursor+0xba>
	int tempPos = direction ? currentCursorPosition+stepSize : currentCursorPosition-stepSize;
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d006      	beq.n	8003c04 <ShiftCursor+0x40>
 8003bf6:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <ShiftCursor+0xcc>)
 8003bf8:	f993 3000 	ldrsb.w	r3, [r3]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	79bb      	ldrb	r3, [r7, #6]
 8003c00:	4413      	add	r3, r2
 8003c02:	e005      	b.n	8003c10 <ShiftCursor+0x4c>
 8003c04:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <ShiftCursor+0xcc>)
 8003c06:	f993 3000 	ldrsb.w	r3, [r3]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	79bb      	ldrb	r3, [r7, #6]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	60fb      	str	r3, [r7, #12]
	// Проверка на границы

	if(tempPos<par->param_pos)tempPos = par->param_pos;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	79db      	ldrb	r3, [r3, #7]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	da02      	bge.n	8003c24 <ShiftCursor+0x60>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	79db      	ldrb	r3, [r3, #7]
 8003c22:	60fb      	str	r3, [r7, #12]
	if(tempPos>19)tempPos = 19;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b13      	cmp	r3, #19
 8003c28:	dd05      	ble.n	8003c36 <ShiftCursor+0x72>
 8003c2a:	2313      	movs	r3, #19
 8003c2c:	60fb      	str	r3, [r7, #12]
	while(editedValue[tempPos]==0 && tempPos>par->param_pos)
 8003c2e:	e002      	b.n	8003c36 <ShiftCursor+0x72>
	{
		tempPos--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
	while(editedValue[tempPos]==0 && tempPos>par->param_pos)
 8003c36:	4a17      	ldr	r2, [pc, #92]	; (8003c94 <ShiftCursor+0xd0>)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <ShiftCursor+0x8a>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	79db      	ldrb	r3, [r3, #7]
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	dcf0      	bgt.n	8003c30 <ShiftCursor+0x6c>
	}
	switch (par->type) {
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	7d5b      	ldrb	r3, [r3, #21]
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d10f      	bne.n	8003c76 <ShiftCursor+0xb2>
		case ROW_ETH_ADDR:
			if(editedValue[tempPos]=='.')
 8003c56:	4a0f      	ldr	r2, [pc, #60]	; (8003c94 <ShiftCursor+0xd0>)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c60:	d10b      	bne.n	8003c7a <ShiftCursor+0xb6>
			{
				tempPos = direction ? tempPos+1 : tempPos-1;
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <ShiftCursor+0xaa>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	e001      	b.n	8003c72 <ShiftCursor+0xae>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	60fb      	str	r3, [r7, #12]
			}
			break;
 8003c74:	e001      	b.n	8003c7a <ShiftCursor+0xb6>
		default:
			break;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <ShiftCursor+0xb8>
			break;
 8003c7a:	bf00      	nop
	}
	return tempPos;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	200008bd 	.word	0x200008bd
 8003c90:	200000c3 	.word	0x200000c3
 8003c94:	20007080 	.word	0x20007080

08003c98 <OnNumberPressKey>:

static uint8_t OnNumberPressKey(uint8_t key)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
	if(key>9)return 0;
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	2b09      	cmp	r3, #9
 8003ca6:	d901      	bls.n	8003cac <OnNumberPressKey+0x14>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e032      	b.n	8003d12 <OnNumberPressKey+0x7a>
	uint8_t i = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]
	if(!editMode)return 0;
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <OnNumberPressKey+0x84>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <OnNumberPressKey+0x24>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e02a      	b.n	8003d12 <OnNumberPressKey+0x7a>
	if(currentParameters==NULL)return 0;
 8003cbc:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <OnNumberPressKey+0x88>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <OnNumberPressKey+0x30>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e024      	b.n	8003d12 <OnNumberPressKey+0x7a>
	Row *par = currentParameters+paramIndex;
 8003cc8:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <OnNumberPressKey+0x88>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <OnNumberPressKey+0x8c>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	440b      	add	r3, r1
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	60bb      	str	r3, [r7, #8]
	switch (par->type) {
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	7d5b      	ldrb	r3, [r3, #21]
 8003ce2:	2b04      	cmp	r3, #4
		case ROW_ETH_ADDR:
			break;
		default:
			break;
 8003ce4:	bf00      	nop
	}
	editedValue[currentCursorPosition] = 48+key;
 8003ce6:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <OnNumberPressKey+0x90>)
 8003ce8:	f993 3000 	ldrsb.w	r3, [r3]
 8003cec:	461a      	mov	r2, r3
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	3330      	adds	r3, #48	; 0x30
 8003cf2:	b2d9      	uxtb	r1, r3
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <OnNumberPressKey+0x94>)
 8003cf6:	5499      	strb	r1, [r3, r2]
	currentCursorPosition = ShiftCursor(1, par, 1);
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	f7ff ff61 	bl	8003bc4 <ShiftCursor>
 8003d02:	4603      	mov	r3, r0
 8003d04:	b25a      	sxtb	r2, r3
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <OnNumberPressKey+0x90>)
 8003d08:	701a      	strb	r2, [r3, #0]
	ShowParameter(par);
 8003d0a:	68b8      	ldr	r0, [r7, #8]
 8003d0c:	f7ff fa8a 	bl	8003224 <ShowParameter>
	return 1;
 8003d10:	2301      	movs	r3, #1
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	200008bd 	.word	0x200008bd
 8003d20:	200008b8 	.word	0x200008b8
 8003d24:	200008bc 	.word	0x200008bc
 8003d28:	200000c3 	.word	0x200000c3
 8003d2c:	20007080 	.word	0x20007080

08003d30 <OnDeletePressKey>:

static uint8_t OnDeletePressKey()
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
	uint8_t i;
	if(!editMode)return 0;
 8003d36:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <OnDeletePressKey+0xa0>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <OnDeletePressKey+0x12>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e041      	b.n	8003dc6 <OnDeletePressKey+0x96>
	if(currentParameters==NULL)return 0;
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <OnDeletePressKey+0xa4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <OnDeletePressKey+0x1e>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e03b      	b.n	8003dc6 <OnDeletePressKey+0x96>
	Row *par = currentParameters+paramIndex;
 8003d4e:	4b21      	ldr	r3, [pc, #132]	; (8003dd4 <OnDeletePressKey+0xa4>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <OnDeletePressKey+0xa8>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	4619      	mov	r1, r3
 8003d58:	460b      	mov	r3, r1
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	440b      	add	r3, r1
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	603b      	str	r3, [r7, #0]
	switch (par->type) {
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	7d5b      	ldrb	r3, [r3, #21]
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d101      	bne.n	8003d70 <OnDeletePressKey+0x40>
		case ROW_ETH_ADDR:
			return 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e02a      	b.n	8003dc6 <OnDeletePressKey+0x96>
		default:
			editedValue[par->param_len+par->param_pos-1]='0';
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	799b      	ldrb	r3, [r3, #6]
 8003d74:	461a      	mov	r2, r3
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	79db      	ldrb	r3, [r3, #7]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <OnDeletePressKey+0xac>)
 8003d80:	2130      	movs	r1, #48	; 0x30
 8003d82:	54d1      	strb	r1, [r2, r3]
			for (i = currentCursorPosition; i < par->param_len+par->param_pos-1; ++i) {
 8003d84:	4b16      	ldr	r3, [pc, #88]	; (8003de0 <OnDeletePressKey+0xb0>)
 8003d86:	f993 3000 	ldrsb.w	r3, [r3]
 8003d8a:	71fb      	strb	r3, [r7, #7]
 8003d8c:	e009      	b.n	8003da2 <OnDeletePressKey+0x72>
				editedValue[i] = editedValue[i+1];
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	4911      	ldr	r1, [pc, #68]	; (8003ddc <OnDeletePressKey+0xac>)
 8003d96:	5c89      	ldrb	r1, [r1, r2]
 8003d98:	4a10      	ldr	r2, [pc, #64]	; (8003ddc <OnDeletePressKey+0xac>)
 8003d9a:	54d1      	strb	r1, [r2, r3]
			for (i = currentCursorPosition; i < par->param_len+par->param_pos-1; ++i) {
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	71fb      	strb	r3, [r7, #7]
 8003da2:	79fa      	ldrb	r2, [r7, #7]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	799b      	ldrb	r3, [r3, #6]
 8003da8:	4619      	mov	r1, r3
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	79db      	ldrb	r3, [r3, #7]
 8003dae:	440b      	add	r3, r1
 8003db0:	3b01      	subs	r3, #1
 8003db2:	429a      	cmp	r2, r3
 8003db4:	dbeb      	blt.n	8003d8e <OnDeletePressKey+0x5e>
			}
			editedValue[19]=0;
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <OnDeletePressKey+0xac>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	74da      	strb	r2, [r3, #19]
			break;
 8003dbc:	bf00      	nop
	}
	ShowParameter(par);
 8003dbe:	6838      	ldr	r0, [r7, #0]
 8003dc0:	f7ff fa30 	bl	8003224 <ShowParameter>
	return 1;
 8003dc4:	2301      	movs	r3, #1
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	200008bd 	.word	0x200008bd
 8003dd4:	200008b8 	.word	0x200008b8
 8003dd8:	200008bc 	.word	0x200008bc
 8003ddc:	20007080 	.word	0x20007080
 8003de0:	200000c3 	.word	0x200000c3

08003de4 <OnDecPressKey>:

static uint8_t OnDecPressKey()
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	71fb      	strb	r3, [r7, #7]
	if(!editMode)return 0;
 8003dee:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <OnDecPressKey+0x84>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <OnDecPressKey+0x16>
 8003df6:	2300      	movs	r3, #0
 8003df8:	e031      	b.n	8003e5e <OnDecPressKey+0x7a>
	if(currentParameters==NULL)return 0;
 8003dfa:	4b1c      	ldr	r3, [pc, #112]	; (8003e6c <OnDecPressKey+0x88>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <OnDecPressKey+0x22>
 8003e02:	2300      	movs	r3, #0
 8003e04:	e02b      	b.n	8003e5e <OnDecPressKey+0x7a>
	Row *par = currentParameters+paramIndex;
 8003e06:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <OnDecPressKey+0x88>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <OnDecPressKey+0x8c>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	460b      	mov	r3, r1
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	440b      	add	r3, r1
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	603b      	str	r3, [r7, #0]
	if(par->type != ROW_FLOAT)return 0;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	7d5b      	ldrb	r3, [r3, #21]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d001      	beq.n	8003e28 <OnDecPressKey+0x44>
 8003e24:	2300      	movs	r3, #0
 8003e26:	e01a      	b.n	8003e5e <OnDecPressKey+0x7a>
	switch (par->type) {
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	7d5b      	ldrb	r3, [r3, #21]
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d101      	bne.n	8003e34 <OnDecPressKey+0x50>
		case ROW_ETH_ADDR:
			return 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e014      	b.n	8003e5e <OnDecPressKey+0x7a>
		default:
			break;
 8003e34:	bf00      	nop
	}
	editedValue[currentCursorPosition] = '.';
 8003e36:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <OnDecPressKey+0x90>)
 8003e38:	f993 3000 	ldrsb.w	r3, [r3]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <OnDecPressKey+0x94>)
 8003e40:	212e      	movs	r1, #46	; 0x2e
 8003e42:	5499      	strb	r1, [r3, r2]
	currentCursorPosition = ShiftCursor(1, par, 1);
 8003e44:	2201      	movs	r2, #1
 8003e46:	6839      	ldr	r1, [r7, #0]
 8003e48:	2001      	movs	r0, #1
 8003e4a:	f7ff febb 	bl	8003bc4 <ShiftCursor>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	b25a      	sxtb	r2, r3
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <OnDecPressKey+0x90>)
 8003e54:	701a      	strb	r2, [r3, #0]
	ShowParameter(par);
 8003e56:	6838      	ldr	r0, [r7, #0]
 8003e58:	f7ff f9e4 	bl	8003224 <ShowParameter>
	return 1;
 8003e5c:	2301      	movs	r3, #1
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	200008bd 	.word	0x200008bd
 8003e6c:	200008b8 	.word	0x200008b8
 8003e70:	200008bc 	.word	0x200008bc
 8003e74:	200000c3 	.word	0x200000c3
 8003e78:	20007080 	.word	0x20007080

08003e7c <ParseEthernetAddress>:

static void ParseEthernetAddress(Row *par)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	int tmp;
	char *p = editedValue+par->param_pos;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	79db      	ldrb	r3, [r3, #7]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4b18      	ldr	r3, [pc, #96]	; (8003eec <ParseEthernetAddress+0x70>)
 8003e8c:	4413      	add	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 4; ++i) {
 8003e90:	2300      	movs	r3, #0
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	e021      	b.n	8003eda <ParseEthernetAddress+0x5e>
		sscanf(p, "%d", &tmp);
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4914      	ldr	r1, [pc, #80]	; (8003ef0 <ParseEthernetAddress+0x74>)
 8003e9e:	6978      	ldr	r0, [r7, #20]
 8003ea0:	f01b f924 	bl	801f0ec <siscanf>
		p = strchr(p, '.');
 8003ea4:	212e      	movs	r1, #46	; 0x2e
 8003ea6:	6978      	ldr	r0, [r7, #20]
 8003ea8:	f01b f991 	bl	801f1ce <strchr>
 8003eac:	6178      	str	r0, [r7, #20]
		if(p!=NULL)p=p+1;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <ParseEthernetAddress+0x3e>
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	617b      	str	r3, [r7, #20]
		*((uint16_t*)par->data+i) = tmp%256;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	425a      	negs	r2, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	bf58      	it	pl
 8003ec4:	4253      	negpl	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68d1      	ldr	r1, [r2, #12]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	0052      	lsls	r2, r2, #1
 8003ece:	440a      	add	r2, r1
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	8013      	strh	r3, [r2, #0]
	for (int i = 0; i < 4; ++i) {
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	ddda      	ble.n	8003e96 <ParseEthernetAddress+0x1a>
	}
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20007080 	.word	0x20007080
 8003ef0:	080233e8 	.word	0x080233e8

08003ef4 <IsNumber>:

static uint8_t IsNumber(char *symbol)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	return *symbol>=48 && *symbol<=57;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b2f      	cmp	r3, #47	; 0x2f
 8003f02:	d905      	bls.n	8003f10 <IsNumber+0x1c>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b39      	cmp	r3, #57	; 0x39
 8003f0a:	d801      	bhi.n	8003f10 <IsNumber+0x1c>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <IsNumber+0x1e>
 8003f10:	2300      	movs	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <DecIncSymbol>:

static void DecIncSymbol(char *symbol, uint8_t dir)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	70fb      	strb	r3, [r7, #3]
	if(!IsNumber(symbol))return;
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff ffe1 	bl	8003ef4 <IsNumber>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01c      	beq.n	8003f72 <DecIncSymbol+0x52>
	if(dir)
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <DecIncSymbol+0x38>
	{
		*symbol = *symbol < 57 ? *symbol+1 : 48;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b38      	cmp	r3, #56	; 0x38
 8003f44:	d804      	bhi.n	8003f50 <DecIncSymbol+0x30>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	e000      	b.n	8003f52 <DecIncSymbol+0x32>
 8003f50:	2230      	movs	r2, #48	; 0x30
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	e00d      	b.n	8003f74 <DecIncSymbol+0x54>
	}
	else
	{
		*symbol = *symbol > 48 ? *symbol-1 : 57;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b30      	cmp	r3, #48	; 0x30
 8003f5e:	d904      	bls.n	8003f6a <DecIncSymbol+0x4a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	e000      	b.n	8003f6c <DecIncSymbol+0x4c>
 8003f6a:	2239      	movs	r2, #57	; 0x39
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	701a      	strb	r2, [r3, #0]
 8003f70:	e000      	b.n	8003f74 <DecIncSymbol+0x54>
	if(!IsNumber(symbol))return;
 8003f72:	bf00      	nop
	}
}
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <GetEditedValue>:

static void GetEditedValue(Row *par)
{
 8003f7c:	b5b0      	push	{r4, r5, r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	6078      	str	r0, [r7, #4]
	if(par == NULL)return;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d065      	beq.n	8004056 <GetEditedValue+0xda>
	switch (par->type) {
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	7d5b      	ldrb	r3, [r3, #21]
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d863      	bhi.n	800405a <GetEditedValue+0xde>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <GetEditedValue+0x1c>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08004009 	.word	0x08004009
 8003f9c:	08003feb 	.word	0x08003feb
 8003fa0:	08004027 	.word	0x08004027
 8003fa4:	0800405b 	.word	0x0800405b
 8003fa8:	08003fad 	.word	0x08003fad
		case ROW_ETH_ADDR:
			sprintf(editedValue+par->param_pos,"%03d.%03d.%03d.%03d",*((uint16_t*)par->data),*(((uint16_t*)par->data)+1),*(((uint16_t*)par->data)+2),*(((uint16_t*)par->data)+3));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	79db      	ldrb	r3, [r3, #7]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4b2c      	ldr	r3, [pc, #176]	; (8004064 <GetEditedValue+0xe8>)
 8003fb4:	18d0      	adds	r0, r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	3302      	adds	r3, #2
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	461c      	mov	r4, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	3306      	adds	r3, #6
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	9200      	str	r2, [sp, #0]
 8003fde:	4623      	mov	r3, r4
 8003fe0:	460a      	mov	r2, r1
 8003fe2:	4921      	ldr	r1, [pc, #132]	; (8004068 <GetEditedValue+0xec>)
 8003fe4:	f01b f862 	bl	801f0ac <siprintf>
			break;
 8003fe8:	e038      	b.n	800405c <GetEditedValue+0xe0>
		case ROW_UINT:
			sprintf(editedValue+par->param_pos,"%0*d",par->param_len, *((uint32_t*)par->data));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	79db      	ldrb	r3, [r3, #7]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <GetEditedValue+0xe8>)
 8003ff2:	18d0      	adds	r0, r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	799b      	ldrb	r3, [r3, #6]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	491a      	ldr	r1, [pc, #104]	; (800406c <GetEditedValue+0xf0>)
 8004002:	f01b f853 	bl	801f0ac <siprintf>
			break;
 8004006:	e029      	b.n	800405c <GetEditedValue+0xe0>
		case ROW_USHORT:
			sprintf(editedValue+par->param_pos,"%0*d",par->param_len, *((uint16_t*)par->data));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	79db      	ldrb	r3, [r3, #7]
 800400c:	461a      	mov	r2, r3
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <GetEditedValue+0xe8>)
 8004010:	18d0      	adds	r0, r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	799b      	ldrb	r3, [r3, #6]
 8004016:	461a      	mov	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	4913      	ldr	r1, [pc, #76]	; (800406c <GetEditedValue+0xf0>)
 8004020:	f01b f844 	bl	801f0ac <siprintf>
			break;
 8004024:	e01a      	b.n	800405c <GetEditedValue+0xe0>
		case ROW_FLOAT:
			sprintf(editedValue+par->param_pos,"%0*f",par->param_len, *((float*)par->data));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	79db      	ldrb	r3, [r3, #7]
 800402a:	461a      	mov	r2, r3
 800402c:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <GetEditedValue+0xe8>)
 800402e:	18d4      	adds	r4, r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	799b      	ldrb	r3, [r3, #6]
 8004034:	461d      	mov	r5, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc fa83 	bl	8000548 <__aeabi_f2d>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	e9cd 2300 	strd	r2, r3, [sp]
 800404a:	462a      	mov	r2, r5
 800404c:	4908      	ldr	r1, [pc, #32]	; (8004070 <GetEditedValue+0xf4>)
 800404e:	4620      	mov	r0, r4
 8004050:	f01b f82c 	bl	801f0ac <siprintf>
			break;
 8004054:	e002      	b.n	800405c <GetEditedValue+0xe0>
	if(par == NULL)return;
 8004056:	bf00      	nop
 8004058:	e000      	b.n	800405c <GetEditedValue+0xe0>
		default:
			break;
 800405a:	bf00      	nop
	}

}
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bdb0      	pop	{r4, r5, r7, pc}
 8004062:	bf00      	nop
 8004064:	20007080 	.word	0x20007080
 8004068:	080233d4 	.word	0x080233d4
 800406c:	080233f0 	.word	0x080233f0
 8004070:	080233f8 	.word	0x080233f8

08004074 <lcd_init>:


static void sendByte(uint8_t byte, int isData);

void lcd_init()
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCDLED_GPIO_Port, LCDLED_Pin, SET);// Включаем подсветку
 8004078:	2201      	movs	r2, #1
 800407a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800407e:	481f      	ldr	r0, [pc, #124]	; (80040fc <lcd_init+0x88>)
 8004080:	f005 fc4c 	bl	800991c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDR_GPIO_Port, LCDR_Pin, RESET);
 8004084:	2200      	movs	r2, #0
 8004086:	2110      	movs	r1, #16
 8004088:	481c      	ldr	r0, [pc, #112]	; (80040fc <lcd_init+0x88>)
 800408a:	f005 fc47 	bl	800991c <HAL_GPIO_WritePin>
	HAL_Delay(15);
 800408e:	200f      	movs	r0, #15
 8004090:	f002 fe4e 	bl	8006d30 <HAL_Delay>

	sendByte(0x33, 0); // шлем в одном байте два 0011
 8004094:	2100      	movs	r1, #0
 8004096:	2033      	movs	r0, #51	; 0x33
 8004098:	f000 f892 	bl	80041c0 <sendByte>
	HAL_Delay(1);
 800409c:	2001      	movs	r0, #1
 800409e:	f002 fe47 	bl	8006d30 <HAL_Delay>

	sendByte(0x32, 0); // шлем в одном байте  00110010
 80040a2:	2100      	movs	r1, #0
 80040a4:	2032      	movs	r0, #50	; 0x32
 80040a6:	f000 f88b 	bl	80041c0 <sendByte>
	HAL_Delay(1);
 80040aa:	2001      	movs	r0, #1
 80040ac:	f002 fe40 	bl	8006d30 <HAL_Delay>

	sendByte(DATA_BUS_4BIT_PAGE1, 0); // включаем режим 4 бит
 80040b0:	2100      	movs	r1, #0
 80040b2:	202a      	movs	r0, #42	; 0x2a
 80040b4:	f000 f884 	bl	80041c0 <sendByte>
	HAL_Delay(2);
 80040b8:	2002      	movs	r0, #2
 80040ba:	f002 fe39 	bl	8006d30 <HAL_Delay>
	sendByte(DISPLAY_OFF, 0); // выключаем дисплей
 80040be:	2100      	movs	r1, #0
 80040c0:	2008      	movs	r0, #8
 80040c2:	f000 f87d 	bl	80041c0 <sendByte>
	HAL_Delay(1);
 80040c6:	2001      	movs	r0, #1
 80040c8:	f002 fe32 	bl	8006d30 <HAL_Delay>
	sendByte(CLEAR_DISPLAY, 0); // очищаем дисплей
 80040cc:	2100      	movs	r1, #0
 80040ce:	2001      	movs	r0, #1
 80040d0:	f000 f876 	bl	80041c0 <sendByte>
	HAL_Delay(2);
 80040d4:	2002      	movs	r0, #2
 80040d6:	f002 fe2b 	bl	8006d30 <HAL_Delay>
	sendByte(ENTRY_MODE_SET, 0); //ставим режим смещение курсора экран не смещается
 80040da:	2100      	movs	r1, #0
 80040dc:	2006      	movs	r0, #6
 80040de:	f000 f86f 	bl	80041c0 <sendByte>
	HAL_Delay(1);
 80040e2:	2001      	movs	r0, #1
 80040e4:	f002 fe24 	bl	8006d30 <HAL_Delay>
	sendByte(DISPLAY_ON_CURSOR_OFF, 0);// включаем дисплей и убираем курсор
 80040e8:	2100      	movs	r1, #0
 80040ea:	200c      	movs	r0, #12
 80040ec:	f000 f868 	bl	80041c0 <sendByte>
	HAL_Delay(1);
 80040f0:	2001      	movs	r0, #1
 80040f2:	f002 fe1d 	bl	8006d30 <HAL_Delay>
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40020400 	.word	0x40020400

08004100 <SetCursor>:

void SetCursor(int position)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	if(position==-1 || position>79)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d002      	beq.n	8004116 <SetCursor+0x16>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b4f      	cmp	r3, #79	; 0x4f
 8004114:	dd07      	ble.n	8004126 <SetCursor+0x26>
	{
		sendByte(DISPLAY_ON_CURSOR_OFF, 0);// включаем дисплей и убираем курсор
 8004116:	2100      	movs	r1, #0
 8004118:	200c      	movs	r0, #12
 800411a:	f000 f851 	bl	80041c0 <sendByte>
		HAL_Delay(1);
 800411e:	2001      	movs	r0, #1
 8004120:	f002 fe06 	bl	8006d30 <HAL_Delay>
 8004124:	e047      	b.n	80041b6 <SetCursor+0xb6>
	}
	else
	{
		sendByte(DISPLAY_ON_CURSOR_ON, 0);// включаем дисплей и ставим курсор
 8004126:	2100      	movs	r1, #0
 8004128:	200f      	movs	r0, #15
 800412a:	f000 f849 	bl	80041c0 <sendByte>
		HAL_Delay(1);
 800412e:	2001      	movs	r0, #1
 8004130:	f002 fdfe 	bl	8006d30 <HAL_Delay>
		uint8_t row = position/20;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a21      	ldr	r2, [pc, #132]	; (80041bc <SetCursor+0xbc>)
 8004138:	fb82 1203 	smull	r1, r2, r2, r3
 800413c:	10d2      	asrs	r2, r2, #3
 800413e:	17db      	asrs	r3, r3, #31
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	73bb      	strb	r3, [r7, #14]
		uint8_t col = position%20;
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <SetCursor+0xbc>)
 8004148:	fb83 1302 	smull	r1, r3, r3, r2
 800414c:	10d9      	asrs	r1, r3, #3
 800414e:	17d3      	asrs	r3, r2, #31
 8004150:	1ac9      	subs	r1, r1, r3
 8004152:	460b      	mov	r3, r1
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	1ad1      	subs	r1, r2, r3
 800415c:	460b      	mov	r3, r1
 800415e:	737b      	strb	r3, [r7, #13]
		uint8_t addr = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	73fb      	strb	r3, [r7, #15]
		switch (row) {
 8004164:	7bbb      	ldrb	r3, [r7, #14]
 8004166:	2b03      	cmp	r3, #3
 8004168:	d824      	bhi.n	80041b4 <SetCursor+0xb4>
 800416a:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <SetCursor+0x70>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	08004181 	.word	0x08004181
 8004174:	08004187 	.word	0x08004187
 8004178:	0800418d 	.word	0x0800418d
 800417c:	08004193 	.word	0x08004193
			case 0:
				addr = 0x0;
 8004180:	2300      	movs	r3, #0
 8004182:	73fb      	strb	r3, [r7, #15]
				break;
 8004184:	e008      	b.n	8004198 <SetCursor+0x98>
			case 1:
				addr = 0x40;
 8004186:	2340      	movs	r3, #64	; 0x40
 8004188:	73fb      	strb	r3, [r7, #15]
				break;
 800418a:	e005      	b.n	8004198 <SetCursor+0x98>
			case 2:
				addr = 0x14;
 800418c:	2314      	movs	r3, #20
 800418e:	73fb      	strb	r3, [r7, #15]
				break;
 8004190:	e002      	b.n	8004198 <SetCursor+0x98>
			case 3:
				addr = 0x54;
 8004192:	2354      	movs	r3, #84	; 0x54
 8004194:	73fb      	strb	r3, [r7, #15]
				break;
 8004196:	bf00      	nop
			default:
				return;
		}
		sendByte(64+addr+col, 0); // установка курсора
 8004198:	7bfa      	ldrb	r2, [r7, #15]
 800419a:	7b7b      	ldrb	r3, [r7, #13]
 800419c:	4413      	add	r3, r2
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	3340      	adds	r3, #64	; 0x40
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2100      	movs	r1, #0
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f80a 	bl	80041c0 <sendByte>
		HAL_Delay(1);
 80041ac:	2001      	movs	r0, #1
 80041ae:	f002 fdbf 	bl	8006d30 <HAL_Delay>
 80041b2:	e000      	b.n	80041b6 <SetCursor+0xb6>
				return;
 80041b4:	bf00      	nop
	}
}
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	66666667 	.word	0x66666667

080041c0 <sendByte>:

static void sendByte(uint8_t byte, int isData)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	6039      	str	r1, [r7, #0]
 80041ca:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD_PIN_MASK, RESET);
 80041cc:	2200      	movs	r2, #0
 80041ce:	216f      	movs	r1, #111	; 0x6f
 80041d0:	4841      	ldr	r0, [pc, #260]	; (80042d8 <sendByte+0x118>)
 80041d2:	f005 fba3 	bl	800991c <HAL_GPIO_WritePin>

	if(isData == 1) HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, SET); // если данные ставмим A
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d105      	bne.n	80041e8 <sendByte+0x28>
 80041dc:	2201      	movs	r2, #1
 80041de:	2140      	movs	r1, #64	; 0x40
 80041e0:	483d      	ldr	r0, [pc, #244]	; (80042d8 <sendByte+0x118>)
 80041e2:	f005 fb9b 	bl	800991c <HAL_GPIO_WritePin>
 80041e6:	e004      	b.n	80041f2 <sendByte+0x32>
	else HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, RESET);		   // иначе скидываем A
 80041e8:	2200      	movs	r2, #0
 80041ea:	2140      	movs	r1, #64	; 0x40
 80041ec:	483a      	ldr	r0, [pc, #232]	; (80042d8 <sendByte+0x118>)
 80041ee:	f005 fb95 	bl	800991c <HAL_GPIO_WritePin>

	// ставим старшую тетраду на порт
	if(byte & 0x80) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	da04      	bge.n	8004204 <sendByte+0x44>
 80041fa:	2201      	movs	r2, #1
 80041fc:	2108      	movs	r1, #8
 80041fe:	4836      	ldr	r0, [pc, #216]	; (80042d8 <sendByte+0x118>)
 8004200:	f005 fb8c 	bl	800991c <HAL_GPIO_WritePin>
	if(byte & 0x40) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d004      	beq.n	8004218 <sendByte+0x58>
 800420e:	2201      	movs	r2, #1
 8004210:	2104      	movs	r1, #4
 8004212:	4831      	ldr	r0, [pc, #196]	; (80042d8 <sendByte+0x118>)
 8004214:	f005 fb82 	bl	800991c <HAL_GPIO_WritePin>
	if(byte & 0x20) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d004      	beq.n	800422c <sendByte+0x6c>
 8004222:	2201      	movs	r2, #1
 8004224:	2102      	movs	r1, #2
 8004226:	482c      	ldr	r0, [pc, #176]	; (80042d8 <sendByte+0x118>)
 8004228:	f005 fb78 	bl	800991c <HAL_GPIO_WritePin>
	if(byte & 0x10) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	2b00      	cmp	r3, #0
 8004234:	d004      	beq.n	8004240 <sendByte+0x80>
 8004236:	2201      	movs	r2, #1
 8004238:	2101      	movs	r1, #1
 800423a:	4827      	ldr	r0, [pc, #156]	; (80042d8 <sendByte+0x118>)
 800423c:	f005 fb6e 	bl	800991c <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8004240:	2201      	movs	r2, #1
 8004242:	2120      	movs	r1, #32
 8004244:	4824      	ldr	r0, [pc, #144]	; (80042d8 <sendByte+0x118>)
 8004246:	f005 fb69 	bl	800991c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800424a:	2001      	movs	r0, #1
 800424c:	f002 fd70 	bl	8006d30 <HAL_Delay>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 8004250:	2200      	movs	r2, #0
 8004252:	2120      	movs	r1, #32
 8004254:	4820      	ldr	r0, [pc, #128]	; (80042d8 <sendByte+0x118>)
 8004256:	f005 fb61 	bl	800991c <HAL_GPIO_WritePin>

	//обнуляем все пины дисплея кроме RS
	HAL_GPIO_WritePin(LCD0_GPIO_Port, (LCD_PIN_MASK & ~LCDA_Pin), RESET);
 800425a:	2200      	movs	r2, #0
 800425c:	212f      	movs	r1, #47	; 0x2f
 800425e:	481e      	ldr	r0, [pc, #120]	; (80042d8 <sendByte+0x118>)
 8004260:	f005 fb5c 	bl	800991c <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8004264:	2201      	movs	r2, #1
 8004266:	2120      	movs	r1, #32
 8004268:	481b      	ldr	r0, [pc, #108]	; (80042d8 <sendByte+0x118>)
 800426a:	f005 fb57 	bl	800991c <HAL_GPIO_WritePin>
	if(byte & 0x08) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <sendByte+0xc2>
 8004278:	2201      	movs	r2, #1
 800427a:	2108      	movs	r1, #8
 800427c:	4816      	ldr	r0, [pc, #88]	; (80042d8 <sendByte+0x118>)
 800427e:	f005 fb4d 	bl	800991c <HAL_GPIO_WritePin>
	if(byte & 0x04) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d004      	beq.n	8004296 <sendByte+0xd6>
 800428c:	2201      	movs	r2, #1
 800428e:	2104      	movs	r1, #4
 8004290:	4811      	ldr	r0, [pc, #68]	; (80042d8 <sendByte+0x118>)
 8004292:	f005 fb43 	bl	800991c <HAL_GPIO_WritePin>
	if(byte & 0x02) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d004      	beq.n	80042aa <sendByte+0xea>
 80042a0:	2201      	movs	r2, #1
 80042a2:	2102      	movs	r1, #2
 80042a4:	480c      	ldr	r0, [pc, #48]	; (80042d8 <sendByte+0x118>)
 80042a6:	f005 fb39 	bl	800991c <HAL_GPIO_WritePin>
	if(byte & 0x01) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d004      	beq.n	80042be <sendByte+0xfe>
 80042b4:	2201      	movs	r2, #1
 80042b6:	2101      	movs	r1, #1
 80042b8:	4807      	ldr	r0, [pc, #28]	; (80042d8 <sendByte+0x118>)
 80042ba:	f005 fb2f 	bl	800991c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 80042be:	2200      	movs	r2, #0
 80042c0:	2120      	movs	r1, #32
 80042c2:	4805      	ldr	r0, [pc, #20]	; (80042d8 <sendByte+0x118>)
 80042c4:	f005 fb2a 	bl	800991c <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80042c8:	2001      	movs	r0, #1
 80042ca:	f002 fd31 	bl	8006d30 <HAL_Delay>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40020400 	.word	0x40020400

080042dc <sendStr>:


void sendStr( char *str, int row , int position )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d816      	bhi.n	800431c <sendStr+0x40>
 80042ee:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <sendStr+0x18>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	08004305 	.word	0x08004305
 80042f8:	0800430b 	.word	0x0800430b
 80042fc:	08004311 	.word	0x08004311
 8004300:	08004317 	.word	0x08004317

	switch (row)
	{

		case 0:
			start_address = 0x0; // 1 строка
 8004304:	2300      	movs	r3, #0
 8004306:	75fb      	strb	r3, [r7, #23]
			break;
 8004308:	e008      	b.n	800431c <sendStr+0x40>

		case 1:
			start_address = 0x40; // 2 строка
 800430a:	2340      	movs	r3, #64	; 0x40
 800430c:	75fb      	strb	r3, [r7, #23]
			break;
 800430e:	e005      	b.n	800431c <sendStr+0x40>

		case 2:
			start_address = 0x14; // 3 строка
 8004310:	2314      	movs	r3, #20
 8004312:	75fb      	strb	r3, [r7, #23]
			break;
 8004314:	e002      	b.n	800431c <sendStr+0x40>

		case 3:
			start_address = 0x54; // 4 строка
 8004316:	2354      	movs	r3, #84	; 0x54
 8004318:	75fb      	strb	r3, [r7, #23]
			break;
 800431a:	bf00      	nop

	}

	start_address += position; // к началу строки прибавляем позицию в строке
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	4413      	add	r3, r2
 8004324:	75fb      	strb	r3, [r7, #23]

	sendByte((start_address |= SET_DDRAM_ADDRESS), 0); // ставим курсор на начало нужной строки  в DDRAM
 8004326:	7dfb      	ldrb	r3, [r7, #23]
 8004328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800432c:	75fb      	strb	r3, [r7, #23]
 800432e:	7dfb      	ldrb	r3, [r7, #23]
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff44 	bl	80041c0 <sendByte>

	HAL_Delay(4);
 8004338:	2004      	movs	r0, #4
 800433a:	f002 fcf9 	bl	8006d30 <HAL_Delay>
//	while(*str != '\0'){
//
//		sendByte(*str, 1);
//		str++;
//	}
	uint8_t byte  = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < 20; ++i) {
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	e011      	b.n	800436c <sendStr+0x90>
		byte = *(str+i);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4413      	add	r3, r2
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	75bb      	strb	r3, [r7, #22]
		if(byte==0)byte = 32;
 8004352:	7dbb      	ldrb	r3, [r7, #22]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <sendStr+0x80>
 8004358:	2320      	movs	r3, #32
 800435a:	75bb      	strb	r3, [r7, #22]
		sendByte(byte, 1);
 800435c:	7dbb      	ldrb	r3, [r7, #22]
 800435e:	2101      	movs	r1, #1
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff ff2d 	bl	80041c0 <sendByte>
	for (int i = 0; i < 20; ++i) {
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	3301      	adds	r3, #1
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b13      	cmp	r3, #19
 8004370:	ddea      	ble.n	8004348 <sendStr+0x6c>
	}
}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800437c:	b5b0      	push	{r4, r5, r7, lr}
 800437e:	b08a      	sub	sp, #40	; 0x28
 8004380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  ModbusInit();
 8004382:	f000 fc05 	bl	8004b90 <ModbusInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004386:	f002 fc91 	bl	8006cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800438a:	f000 f83f 	bl	800440c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800438e:	f000 fa9b 	bl	80048c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004392:	f000 fa69 	bl	8004868 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004396:	f000 fa13 	bl	80047c0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800439a:	f000 fa3b 	bl	8004814 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 800439e:	f000 f93d 	bl	800461c <MX_SPI3_Init>
  MX_ADC1_Init();
 80043a2:	f000 f8a3 	bl	80044ec <MX_ADC1_Init>
  MX_TIM3_Init();
 80043a6:	f000 f96f 	bl	8004688 <MX_TIM3_Init>
  MX_TIM4_Init();
 80043aa:	f000 f9bb 	bl	8004724 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80043ae:	f7ff fe61 	bl	8004074 <lcd_init>
  ethernet_reset();
 80043b2:	f7fd fb23 	bl	80019fc <ethernet_reset>
  Analog_Start();
 80043b6:	f7fc fe19 	bl	8000fec <Analog_Start>
  Start_Timers();
 80043ba:	f002 f945 	bl	8006648 <Start_Timers>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of writeMemorySemaphore */
  osSemaphoreDef(writeMemorySemaphore);
 80043be:	2300      	movs	r3, #0
 80043c0:	623b      	str	r3, [r7, #32]
 80043c2:	2300      	movs	r3, #0
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
  writeMemorySemaphoreHandle = osSemaphoreCreate(osSemaphore(writeMemorySemaphore), 1);
 80043c6:	f107 0320 	add.w	r3, r7, #32
 80043ca:	2101      	movs	r1, #1
 80043cc:	4618      	mov	r0, r3
 80043ce:	f009 fb09 	bl	800d9e4 <osSemaphoreCreate>
 80043d2:	4603      	mov	r3, r0
 80043d4:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <main+0x84>)
 80043d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <main+0x88>)
 80043da:	1d3c      	adds	r4, r7, #4
 80043dc:	461d      	mov	r5, r3
 80043de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80043e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80043ea:	1d3b      	adds	r3, r7, #4
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f009 f9fb 	bl	800d7ea <osThreadCreate>
 80043f4:	4603      	mov	r3, r0
 80043f6:	4a04      	ldr	r2, [pc, #16]	; (8004408 <main+0x8c>)
 80043f8:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80043fa:	f009 f9df 	bl	800d7bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80043fe:	e7fe      	b.n	80043fe <main+0x82>
 8004400:	20007384 	.word	0x20007384
 8004404:	0802340c 	.word	0x0802340c
 8004408:	200070ec 	.word	0x200070ec

0800440c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b094      	sub	sp, #80	; 0x50
 8004410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004412:	f107 0320 	add.w	r3, r7, #32
 8004416:	2230      	movs	r2, #48	; 0x30
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f019 fe42 	bl	801e0a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004420:	f107 030c 	add.w	r3, r7, #12
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	60da      	str	r2, [r3, #12]
 800442e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004430:	2300      	movs	r3, #0
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <SystemClock_Config+0xd8>)
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	4a2a      	ldr	r2, [pc, #168]	; (80044e4 <SystemClock_Config+0xd8>)
 800443a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443e:	6413      	str	r3, [r2, #64]	; 0x40
 8004440:	4b28      	ldr	r3, [pc, #160]	; (80044e4 <SystemClock_Config+0xd8>)
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800444c:	2300      	movs	r3, #0
 800444e:	607b      	str	r3, [r7, #4]
 8004450:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <SystemClock_Config+0xdc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <SystemClock_Config+0xdc>)
 8004456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	4b22      	ldr	r3, [pc, #136]	; (80044e8 <SystemClock_Config+0xdc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004468:	2301      	movs	r3, #1
 800446a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800446c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004472:	2302      	movs	r3, #2
 8004474:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004476:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800447a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800447c:	2319      	movs	r3, #25
 800447e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004480:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004484:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004486:	2302      	movs	r3, #2
 8004488:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800448a:	2304      	movs	r3, #4
 800448c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800448e:	f107 0320 	add.w	r3, r7, #32
 8004492:	4618      	mov	r0, r3
 8004494:	f005 fa5c 	bl	8009950 <HAL_RCC_OscConfig>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800449e:	f000 fb5b 	bl	8004b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044a2:	230f      	movs	r3, #15
 80044a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044a6:	2302      	movs	r3, #2
 80044a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80044ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80044b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80044b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80044ba:	f107 030c 	add.w	r3, r7, #12
 80044be:	2105      	movs	r1, #5
 80044c0:	4618      	mov	r0, r3
 80044c2:	f005 fcbd 	bl	8009e40 <HAL_RCC_ClockConfig>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80044cc:	f000 fb44 	bl	8004b58 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80044d0:	2200      	movs	r2, #0
 80044d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044d6:	2000      	movs	r0, #0
 80044d8:	f005 fd98 	bl	800a00c <HAL_RCC_MCOConfig>
}
 80044dc:	bf00      	nop
 80044de:	3750      	adds	r7, #80	; 0x50
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40023800 	.word	0x40023800
 80044e8:	40007000 	.word	0x40007000

080044ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80044f2:	463b      	mov	r3, r7
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	605a      	str	r2, [r3, #4]
 80044fa:	609a      	str	r2, [r3, #8]
 80044fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80044fe:	4b45      	ldr	r3, [pc, #276]	; (8004614 <MX_ADC1_Init+0x128>)
 8004500:	4a45      	ldr	r2, [pc, #276]	; (8004618 <MX_ADC1_Init+0x12c>)
 8004502:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004504:	4b43      	ldr	r3, [pc, #268]	; (8004614 <MX_ADC1_Init+0x128>)
 8004506:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800450a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800450c:	4b41      	ldr	r3, [pc, #260]	; (8004614 <MX_ADC1_Init+0x128>)
 800450e:	2200      	movs	r2, #0
 8004510:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004512:	4b40      	ldr	r3, [pc, #256]	; (8004614 <MX_ADC1_Init+0x128>)
 8004514:	2201      	movs	r2, #1
 8004516:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004518:	4b3e      	ldr	r3, [pc, #248]	; (8004614 <MX_ADC1_Init+0x128>)
 800451a:	2200      	movs	r2, #0
 800451c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800451e:	4b3d      	ldr	r3, [pc, #244]	; (8004614 <MX_ADC1_Init+0x128>)
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004526:	4b3b      	ldr	r3, [pc, #236]	; (8004614 <MX_ADC1_Init+0x128>)
 8004528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800452c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800452e:	4b39      	ldr	r3, [pc, #228]	; (8004614 <MX_ADC1_Init+0x128>)
 8004530:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004534:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004536:	4b37      	ldr	r3, [pc, #220]	; (8004614 <MX_ADC1_Init+0x128>)
 8004538:	2200      	movs	r2, #0
 800453a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 800453c:	4b35      	ldr	r3, [pc, #212]	; (8004614 <MX_ADC1_Init+0x128>)
 800453e:	2206      	movs	r2, #6
 8004540:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004542:	4b34      	ldr	r3, [pc, #208]	; (8004614 <MX_ADC1_Init+0x128>)
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800454a:	4b32      	ldr	r3, [pc, #200]	; (8004614 <MX_ADC1_Init+0x128>)
 800454c:	2201      	movs	r2, #1
 800454e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004550:	4830      	ldr	r0, [pc, #192]	; (8004614 <MX_ADC1_Init+0x128>)
 8004552:	f002 fc11 	bl	8006d78 <HAL_ADC_Init>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800455c:	f000 fafc 	bl	8004b58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004560:	230a      	movs	r3, #10
 8004562:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004564:	2301      	movs	r3, #1
 8004566:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004568:	2307      	movs	r3, #7
 800456a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800456c:	463b      	mov	r3, r7
 800456e:	4619      	mov	r1, r3
 8004570:	4828      	ldr	r0, [pc, #160]	; (8004614 <MX_ADC1_Init+0x128>)
 8004572:	f002 fd69 	bl	8007048 <HAL_ADC_ConfigChannel>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800457c:	f000 faec 	bl	8004b58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004580:	230c      	movs	r3, #12
 8004582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004584:	2302      	movs	r3, #2
 8004586:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004588:	463b      	mov	r3, r7
 800458a:	4619      	mov	r1, r3
 800458c:	4821      	ldr	r0, [pc, #132]	; (8004614 <MX_ADC1_Init+0x128>)
 800458e:	f002 fd5b 	bl	8007048 <HAL_ADC_ConfigChannel>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8004598:	f000 fade 	bl	8004b58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800459c:	230d      	movs	r3, #13
 800459e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80045a0:	2303      	movs	r3, #3
 80045a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045a4:	463b      	mov	r3, r7
 80045a6:	4619      	mov	r1, r3
 80045a8:	481a      	ldr	r0, [pc, #104]	; (8004614 <MX_ADC1_Init+0x128>)
 80045aa:	f002 fd4d 	bl	8007048 <HAL_ADC_ConfigChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80045b4:	f000 fad0 	bl	8004b58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80045b8:	2303      	movs	r3, #3
 80045ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80045bc:	2304      	movs	r3, #4
 80045be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045c0:	463b      	mov	r3, r7
 80045c2:	4619      	mov	r1, r3
 80045c4:	4813      	ldr	r0, [pc, #76]	; (8004614 <MX_ADC1_Init+0x128>)
 80045c6:	f002 fd3f 	bl	8007048 <HAL_ADC_ConfigChannel>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80045d0:	f000 fac2 	bl	8004b58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80045d4:	2304      	movs	r3, #4
 80045d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80045d8:	2305      	movs	r3, #5
 80045da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045dc:	463b      	mov	r3, r7
 80045de:	4619      	mov	r1, r3
 80045e0:	480c      	ldr	r0, [pc, #48]	; (8004614 <MX_ADC1_Init+0x128>)
 80045e2:	f002 fd31 	bl	8007048 <HAL_ADC_ConfigChannel>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80045ec:	f000 fab4 	bl	8004b58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80045f0:	2311      	movs	r3, #17
 80045f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80045f4:	2306      	movs	r3, #6
 80045f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045f8:	463b      	mov	r3, r7
 80045fa:	4619      	mov	r1, r3
 80045fc:	4805      	ldr	r0, [pc, #20]	; (8004614 <MX_ADC1_Init+0x128>)
 80045fe:	f002 fd23 	bl	8007048 <HAL_ADC_ConfigChannel>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8004608:	f000 faa6 	bl	8004b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20007238 	.word	0x20007238
 8004618:	40012000 	.word	0x40012000

0800461c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004620:	4b17      	ldr	r3, [pc, #92]	; (8004680 <MX_SPI3_Init+0x64>)
 8004622:	4a18      	ldr	r2, [pc, #96]	; (8004684 <MX_SPI3_Init+0x68>)
 8004624:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004626:	4b16      	ldr	r3, [pc, #88]	; (8004680 <MX_SPI3_Init+0x64>)
 8004628:	f44f 7282 	mov.w	r2, #260	; 0x104
 800462c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <MX_SPI3_Init+0x64>)
 8004630:	2200      	movs	r2, #0
 8004632:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004634:	4b12      	ldr	r3, [pc, #72]	; (8004680 <MX_SPI3_Init+0x64>)
 8004636:	2200      	movs	r2, #0
 8004638:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800463a:	4b11      	ldr	r3, [pc, #68]	; (8004680 <MX_SPI3_Init+0x64>)
 800463c:	2200      	movs	r2, #0
 800463e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004640:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <MX_SPI3_Init+0x64>)
 8004642:	2200      	movs	r2, #0
 8004644:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004646:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <MX_SPI3_Init+0x64>)
 8004648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800464c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <MX_SPI3_Init+0x64>)
 8004650:	2200      	movs	r2, #0
 8004652:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004654:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <MX_SPI3_Init+0x64>)
 8004656:	2200      	movs	r2, #0
 8004658:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <MX_SPI3_Init+0x64>)
 800465c:	2200      	movs	r2, #0
 800465e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004660:	4b07      	ldr	r3, [pc, #28]	; (8004680 <MX_SPI3_Init+0x64>)
 8004662:	2200      	movs	r2, #0
 8004664:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <MX_SPI3_Init+0x64>)
 8004668:	220a      	movs	r2, #10
 800466a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800466c:	4804      	ldr	r0, [pc, #16]	; (8004680 <MX_SPI3_Init+0x64>)
 800466e:	f005 fe51 	bl	800a314 <HAL_SPI_Init>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004678:	f000 fa6e 	bl	8004b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800467c:	bf00      	nop
 800467e:	bd80      	pop	{r7, pc}
 8004680:	200071e0 	.word	0x200071e0
 8004684:	40003c00 	.word	0x40003c00

08004688 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800468e:	f107 0308 	add.w	r3, r7, #8
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	605a      	str	r2, [r3, #4]
 8004698:	609a      	str	r2, [r3, #8]
 800469a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800469c:	463b      	mov	r3, r7
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80046a4:	4b1d      	ldr	r3, [pc, #116]	; (800471c <MX_TIM3_Init+0x94>)
 80046a6:	4a1e      	ldr	r2, [pc, #120]	; (8004720 <MX_TIM3_Init+0x98>)
 80046a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <MX_TIM3_Init+0x94>)
 80046ac:	2229      	movs	r2, #41	; 0x29
 80046ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <MX_TIM3_Init+0x94>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80046b6:	4b19      	ldr	r3, [pc, #100]	; (800471c <MX_TIM3_Init+0x94>)
 80046b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80046bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046be:	4b17      	ldr	r3, [pc, #92]	; (800471c <MX_TIM3_Init+0x94>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046c4:	4b15      	ldr	r3, [pc, #84]	; (800471c <MX_TIM3_Init+0x94>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80046ca:	4814      	ldr	r0, [pc, #80]	; (800471c <MX_TIM3_Init+0x94>)
 80046cc:	f006 fbca 	bl	800ae64 <HAL_TIM_Base_Init>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80046d6:	f000 fa3f 	bl	8004b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80046e0:	f107 0308 	add.w	r3, r7, #8
 80046e4:	4619      	mov	r1, r3
 80046e6:	480d      	ldr	r0, [pc, #52]	; (800471c <MX_TIM3_Init+0x94>)
 80046e8:	f006 fdec 	bl	800b2c4 <HAL_TIM_ConfigClockSource>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80046f2:	f000 fa31 	bl	8004b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80046f6:	2320      	movs	r3, #32
 80046f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80046fe:	463b      	mov	r3, r7
 8004700:	4619      	mov	r1, r3
 8004702:	4806      	ldr	r0, [pc, #24]	; (800471c <MX_TIM3_Init+0x94>)
 8004704:	f007 f808 	bl	800b718 <HAL_TIMEx_MasterConfigSynchronization>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800470e:	f000 fa23 	bl	8004b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004712:	bf00      	nop
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20007198 	.word	0x20007198
 8004720:	40000400 	.word	0x40000400

08004724 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800472a:	f107 0308 	add.w	r3, r7, #8
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	609a      	str	r2, [r3, #8]
 8004736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004738:	463b      	mov	r3, r7
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004740:	4b1d      	ldr	r3, [pc, #116]	; (80047b8 <MX_TIM4_Init+0x94>)
 8004742:	4a1e      	ldr	r2, [pc, #120]	; (80047bc <MX_TIM4_Init+0x98>)
 8004744:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 8004746:	4b1c      	ldr	r3, [pc, #112]	; (80047b8 <MX_TIM4_Init+0x94>)
 8004748:	2229      	movs	r2, #41	; 0x29
 800474a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800474c:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <MX_TIM4_Init+0x94>)
 800474e:	2200      	movs	r2, #0
 8004750:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8004752:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <MX_TIM4_Init+0x94>)
 8004754:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004758:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800475a:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <MX_TIM4_Init+0x94>)
 800475c:	2200      	movs	r2, #0
 800475e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004760:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <MX_TIM4_Init+0x94>)
 8004762:	2200      	movs	r2, #0
 8004764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004766:	4814      	ldr	r0, [pc, #80]	; (80047b8 <MX_TIM4_Init+0x94>)
 8004768:	f006 fb7c 	bl	800ae64 <HAL_TIM_Base_Init>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004772:	f000 f9f1 	bl	8004b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800477a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800477c:	f107 0308 	add.w	r3, r7, #8
 8004780:	4619      	mov	r1, r3
 8004782:	480d      	ldr	r0, [pc, #52]	; (80047b8 <MX_TIM4_Init+0x94>)
 8004784:	f006 fd9e 	bl	800b2c4 <HAL_TIM_ConfigClockSource>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800478e:	f000 f9e3 	bl	8004b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004792:	2320      	movs	r3, #32
 8004794:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004796:	2300      	movs	r3, #0
 8004798:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800479a:	463b      	mov	r3, r7
 800479c:	4619      	mov	r1, r3
 800479e:	4806      	ldr	r0, [pc, #24]	; (80047b8 <MX_TIM4_Init+0x94>)
 80047a0:	f006 ffba 	bl	800b718 <HAL_TIMEx_MasterConfigSynchronization>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80047aa:	f000 f9d5 	bl	8004b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80047ae:	bf00      	nop
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20007150 	.word	0x20007150
 80047bc:	40000800 	.word	0x40000800

080047c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <MX_USART1_UART_Init+0x4c>)
 80047c6:	4a12      	ldr	r2, [pc, #72]	; (8004810 <MX_USART1_UART_Init+0x50>)
 80047c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80047ca:	4b10      	ldr	r3, [pc, #64]	; (800480c <MX_USART1_UART_Init+0x4c>)
 80047cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80047d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047d2:	4b0e      	ldr	r3, [pc, #56]	; (800480c <MX_USART1_UART_Init+0x4c>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80047d8:	4b0c      	ldr	r3, [pc, #48]	; (800480c <MX_USART1_UART_Init+0x4c>)
 80047da:	2200      	movs	r2, #0
 80047dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80047de:	4b0b      	ldr	r3, [pc, #44]	; (800480c <MX_USART1_UART_Init+0x4c>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047e4:	4b09      	ldr	r3, [pc, #36]	; (800480c <MX_USART1_UART_Init+0x4c>)
 80047e6:	220c      	movs	r2, #12
 80047e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047ea:	4b08      	ldr	r3, [pc, #32]	; (800480c <MX_USART1_UART_Init+0x4c>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <MX_USART1_UART_Init+0x4c>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047f6:	4805      	ldr	r0, [pc, #20]	; (800480c <MX_USART1_UART_Init+0x4c>)
 80047f8:	f007 f81e 	bl	800b838 <HAL_UART_Init>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004802:	f000 f9a9 	bl	8004b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004806:	bf00      	nop
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	200072e0 	.word	0x200072e0
 8004810:	40011000 	.word	0x40011000

08004814 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004818:	4b11      	ldr	r3, [pc, #68]	; (8004860 <MX_USART6_UART_Init+0x4c>)
 800481a:	4a12      	ldr	r2, [pc, #72]	; (8004864 <MX_USART6_UART_Init+0x50>)
 800481c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800481e:	4b10      	ldr	r3, [pc, #64]	; (8004860 <MX_USART6_UART_Init+0x4c>)
 8004820:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004824:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004826:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <MX_USART6_UART_Init+0x4c>)
 8004828:	2200      	movs	r2, #0
 800482a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <MX_USART6_UART_Init+0x4c>)
 800482e:	2200      	movs	r2, #0
 8004830:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004832:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <MX_USART6_UART_Init+0x4c>)
 8004834:	2200      	movs	r2, #0
 8004836:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004838:	4b09      	ldr	r3, [pc, #36]	; (8004860 <MX_USART6_UART_Init+0x4c>)
 800483a:	220c      	movs	r2, #12
 800483c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800483e:	4b08      	ldr	r3, [pc, #32]	; (8004860 <MX_USART6_UART_Init+0x4c>)
 8004840:	2200      	movs	r2, #0
 8004842:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004844:	4b06      	ldr	r3, [pc, #24]	; (8004860 <MX_USART6_UART_Init+0x4c>)
 8004846:	2200      	movs	r2, #0
 8004848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800484a:	4805      	ldr	r0, [pc, #20]	; (8004860 <MX_USART6_UART_Init+0x4c>)
 800484c:	f006 fff4 	bl	800b838 <HAL_UART_Init>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004856:	f000 f97f 	bl	8004b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800485a:	bf00      	nop
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20007388 	.word	0x20007388
 8004864:	40011400 	.word	0x40011400

08004868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <MX_DMA_Init+0x5c>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	4a13      	ldr	r2, [pc, #76]	; (80048c4 <MX_DMA_Init+0x5c>)
 8004878:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800487c:	6313      	str	r3, [r2, #48]	; 0x30
 800487e:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <MX_DMA_Init+0x5c>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004886:	607b      	str	r3, [r7, #4]
 8004888:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800488a:	2200      	movs	r2, #0
 800488c:	2105      	movs	r1, #5
 800488e:	2038      	movs	r0, #56	; 0x38
 8004890:	f002 ff56 	bl	8007740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004894:	2038      	movs	r0, #56	; 0x38
 8004896:	f002 ff6f 	bl	8007778 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800489a:	2200      	movs	r2, #0
 800489c:	2105      	movs	r1, #5
 800489e:	2039      	movs	r0, #57	; 0x39
 80048a0:	f002 ff4e 	bl	8007740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80048a4:	2039      	movs	r0, #57	; 0x39
 80048a6:	f002 ff67 	bl	8007778 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80048aa:	2200      	movs	r2, #0
 80048ac:	2105      	movs	r1, #5
 80048ae:	203a      	movs	r0, #58	; 0x3a
 80048b0:	f002 ff46 	bl	8007740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80048b4:	203a      	movs	r0, #58	; 0x3a
 80048b6:	f002 ff5f 	bl	8007778 <HAL_NVIC_EnableIRQ>

}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800

080048c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08c      	sub	sp, #48	; 0x30
 80048cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ce:	f107 031c 	add.w	r3, r7, #28
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	605a      	str	r2, [r3, #4]
 80048d8:	609a      	str	r2, [r3, #8]
 80048da:	60da      	str	r2, [r3, #12]
 80048dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	4b83      	ldr	r3, [pc, #524]	; (8004af0 <MX_GPIO_Init+0x228>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	4a82      	ldr	r2, [pc, #520]	; (8004af0 <MX_GPIO_Init+0x228>)
 80048e8:	f043 0310 	orr.w	r3, r3, #16
 80048ec:	6313      	str	r3, [r2, #48]	; 0x30
 80048ee:	4b80      	ldr	r3, [pc, #512]	; (8004af0 <MX_GPIO_Init+0x228>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	61bb      	str	r3, [r7, #24]
 80048f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	4b7c      	ldr	r3, [pc, #496]	; (8004af0 <MX_GPIO_Init+0x228>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	4a7b      	ldr	r2, [pc, #492]	; (8004af0 <MX_GPIO_Init+0x228>)
 8004904:	f043 0304 	orr.w	r3, r3, #4
 8004908:	6313      	str	r3, [r2, #48]	; 0x30
 800490a:	4b79      	ldr	r3, [pc, #484]	; (8004af0 <MX_GPIO_Init+0x228>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	4b75      	ldr	r3, [pc, #468]	; (8004af0 <MX_GPIO_Init+0x228>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	4a74      	ldr	r2, [pc, #464]	; (8004af0 <MX_GPIO_Init+0x228>)
 8004920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004924:	6313      	str	r3, [r2, #48]	; 0x30
 8004926:	4b72      	ldr	r3, [pc, #456]	; (8004af0 <MX_GPIO_Init+0x228>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	4b6e      	ldr	r3, [pc, #440]	; (8004af0 <MX_GPIO_Init+0x228>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	4a6d      	ldr	r2, [pc, #436]	; (8004af0 <MX_GPIO_Init+0x228>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	6313      	str	r3, [r2, #48]	; 0x30
 8004942:	4b6b      	ldr	r3, [pc, #428]	; (8004af0 <MX_GPIO_Init+0x228>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	4b67      	ldr	r3, [pc, #412]	; (8004af0 <MX_GPIO_Init+0x228>)
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	4a66      	ldr	r2, [pc, #408]	; (8004af0 <MX_GPIO_Init+0x228>)
 8004958:	f043 0302 	orr.w	r3, r3, #2
 800495c:	6313      	str	r3, [r2, #48]	; 0x30
 800495e:	4b64      	ldr	r3, [pc, #400]	; (8004af0 <MX_GPIO_Init+0x228>)
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	60bb      	str	r3, [r7, #8]
 8004968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	4b60      	ldr	r3, [pc, #384]	; (8004af0 <MX_GPIO_Init+0x228>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	4a5f      	ldr	r2, [pc, #380]	; (8004af0 <MX_GPIO_Init+0x228>)
 8004974:	f043 0308 	orr.w	r3, r3, #8
 8004978:	6313      	str	r3, [r2, #48]	; 0x30
 800497a:	4b5d      	ldr	r3, [pc, #372]	; (8004af0 <MX_GPIO_Init+0x228>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	607b      	str	r3, [r7, #4]
 8004984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, GPIO_PIN_RESET);
 8004986:	2200      	movs	r2, #0
 8004988:	2101      	movs	r1, #1
 800498a:	485a      	ldr	r0, [pc, #360]	; (8004af4 <MX_GPIO_Init+0x22c>)
 800498c:	f004 ffc6 	bl	800991c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8004990:	2200      	movs	r2, #0
 8004992:	f24c 417f 	movw	r1, #50303	; 0xc47f
 8004996:	4858      	ldr	r0, [pc, #352]	; (8004af8 <MX_GPIO_Init+0x230>)
 8004998:	f004 ffc0 	bl	800991c <HAL_GPIO_WritePin>
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 800499c:	2200      	movs	r2, #0
 800499e:	f64f 7180 	movw	r1, #65408	; 0xff80
 80049a2:	4856      	ldr	r0, [pc, #344]	; (8004afc <MX_GPIO_Init+0x234>)
 80049a4:	f004 ffba 	bl	800991c <HAL_GPIO_WritePin>
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 80049a8:	2200      	movs	r2, #0
 80049aa:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80049ae:	4854      	ldr	r0, [pc, #336]	; (8004b00 <MX_GPIO_Init+0x238>)
 80049b0:	f004 ffb4 	bl	800991c <HAL_GPIO_WritePin>
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, GPIO_PIN_RESET);
 80049b4:	2200      	movs	r2, #0
 80049b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049ba:	4852      	ldr	r0, [pc, #328]	; (8004b04 <MX_GPIO_Init+0x23c>)
 80049bc:	f004 ffae 	bl	800991c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 80049c0:	2201      	movs	r2, #1
 80049c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049c6:	484b      	ldr	r0, [pc, #300]	; (8004af4 <MX_GPIO_Init+0x22c>)
 80049c8:	f004 ffa8 	bl	800991c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN_4_Pin DIN_5_Pin DIN_6_Pin DIN_7_Pin
                           DIN_8_Pin DIN_2_Pin DIN_3_Pin */
  GPIO_InitStruct.Pin = DIN_4_Pin|DIN_5_Pin|DIN_6_Pin|DIN_7_Pin
 80049cc:	237f      	movs	r3, #127	; 0x7f
 80049ce:	61fb      	str	r3, [r7, #28]
                          |DIN_8_Pin|DIN_2_Pin|DIN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049d0:	2300      	movs	r3, #0
 80049d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049d4:	2301      	movs	r3, #1
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049d8:	f107 031c 	add.w	r3, r7, #28
 80049dc:	4619      	mov	r1, r3
 80049de:	4847      	ldr	r0, [pc, #284]	; (8004afc <MX_GPIO_Init+0x234>)
 80049e0:	f004 fcec 	bl	80093bc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_9_Pin DIN_10_Pin DIN_11_Pin */
  GPIO_InitStruct.Pin = DIN_9_Pin|DIN_10_Pin|DIN_11_Pin;
 80049e4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80049e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049ea:	2300      	movs	r3, #0
 80049ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049ee:	2301      	movs	r3, #1
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049f2:	f107 031c 	add.w	r3, r7, #28
 80049f6:	4619      	mov	r1, r3
 80049f8:	4842      	ldr	r0, [pc, #264]	; (8004b04 <MX_GPIO_Init+0x23c>)
 80049fa:	f004 fcdf 	bl	80093bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ERESET_Pin S3CS0_Pin */
  GPIO_InitStruct.Pin = ERESET_Pin|S3CS0_Pin;
 80049fe:	f248 0301 	movw	r3, #32769	; 0x8001
 8004a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a04:	2301      	movs	r3, #1
 8004a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a10:	f107 031c 	add.w	r3, r7, #28
 8004a14:	4619      	mov	r1, r3
 8004a16:	4837      	ldr	r0, [pc, #220]	; (8004af4 <MX_GPIO_Init+0x22c>)
 8004a18:	f004 fcd0 	bl	80093bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD0_Pin LCD1_Pin LCD2_Pin DOUT_9_Pin
                           LED_Pin LCDLED_Pin LCD3_Pin LCDR_Pin
                           LCDE_Pin LCDA_Pin */
  GPIO_InitStruct.Pin = LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8004a1c:	f24c 437f 	movw	r3, #50303	; 0xc47f
 8004a20:	61fb      	str	r3, [r7, #28]
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a22:	2301      	movs	r3, #1
 8004a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2e:	f107 031c 	add.w	r3, r7, #28
 8004a32:	4619      	mov	r1, r3
 8004a34:	4830      	ldr	r0, [pc, #192]	; (8004af8 <MX_GPIO_Init+0x230>)
 8004a36:	f004 fcc1 	bl	80093bc <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_0_Pin DOUT_1_Pin DOUT_2_Pin DOUT_3_Pin
                           DOUT_4_Pin DOUT_5_Pin DOUT_6_Pin DOUT_7_Pin
                           DOUT_8_Pin */
  GPIO_InitStruct.Pin = DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8004a3a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004a3e:	61fb      	str	r3, [r7, #28]
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a40:	2301      	movs	r3, #1
 8004a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a4c:	f107 031c 	add.w	r3, r7, #28
 8004a50:	4619      	mov	r1, r3
 8004a52:	482a      	ldr	r0, [pc, #168]	; (8004afc <MX_GPIO_Init+0x234>)
 8004a54:	f004 fcb2 	bl	80093bc <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_10_Pin DOUT_11_Pin KEYB_C0_Pin KEYB_C1_Pin
                           KEYB_C2_Pin KEYB_C3_Pin KEYB_C4_Pin KEYB_C5_Pin */
  GPIO_InitStruct.Pin = DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 8004a58:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004a5c:	61fb      	str	r3, [r7, #28]
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a66:	2300      	movs	r3, #0
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a6a:	f107 031c 	add.w	r3, r7, #28
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4823      	ldr	r0, [pc, #140]	; (8004b00 <MX_GPIO_Init+0x238>)
 8004a72:	f004 fca3 	bl	80093bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_TX_Pin */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 8004a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a84:	2300      	movs	r3, #0
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8004a88:	f107 031c 	add.w	r3, r7, #28
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	481d      	ldr	r0, [pc, #116]	; (8004b04 <MX_GPIO_Init+0x23c>)
 8004a90:	f004 fc94 	bl	80093bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aaa:	f107 031c 	add.w	r3, r7, #28
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4810      	ldr	r0, [pc, #64]	; (8004af4 <MX_GPIO_Init+0x22c>)
 8004ab2:	f004 fc83 	bl	80093bc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYB_R0_Pin KEYB_R1_Pin KEYB_R2_Pin KEYB_R3_Pin
                           KEYB_R4_Pin KEYB_R5_Pin */
  GPIO_InitStruct.Pin = KEYB_R0_Pin|KEYB_R1_Pin|KEYB_R2_Pin|KEYB_R3_Pin
 8004ab6:	233f      	movs	r3, #63	; 0x3f
 8004ab8:	61fb      	str	r3, [r7, #28]
                          |KEYB_R4_Pin|KEYB_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004aba:	2300      	movs	r3, #0
 8004abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004abe:	2302      	movs	r3, #2
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ac2:	f107 031c 	add.w	r3, r7, #28
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	480d      	ldr	r0, [pc, #52]	; (8004b00 <MX_GPIO_Init+0x238>)
 8004aca:	f004 fc77 	bl	80093bc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_0_Pin DIN_1_Pin */
  GPIO_InitStruct.Pin = DIN_0_Pin|DIN_1_Pin;
 8004ace:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004adc:	f107 031c 	add.w	r3, r7, #28
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4805      	ldr	r0, [pc, #20]	; (8004af8 <MX_GPIO_Init+0x230>)
 8004ae4:	f004 fc6a 	bl	80093bc <HAL_GPIO_Init>

}
 8004ae8:	bf00      	nop
 8004aea:	3730      	adds	r7, #48	; 0x30
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40020000 	.word	0x40020000
 8004af8:	40020400 	.word	0x40020400
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40020c00 	.word	0x40020c00
 8004b04:	40020800 	.word	0x40020800

08004b08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8004b10:	f008 f90a 	bl	800cd28 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  int result = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]
  task_init();
 8004b18:	f7fd f940 	bl	8001d9c <task_init>
  result = settingsLoadFRAM();
 8004b1c:	f001 f8d6 	bl	8005ccc <settingsLoadFRAM>
 8004b20:	60f8      	str	r0, [r7, #12]
  main_process_init();
 8004b22:	f000 f82d 	bl	8004b80 <main_process_init>
  /* Infinite loop */
  for(;;)
  {
	main_process();
 8004b26:	f000 f81c 	bl	8004b62 <main_process>
    osDelay(1);
 8004b2a:	2001      	movs	r0, #1
 8004b2c:	f008 fea9 	bl	800d882 <osDelay>
	main_process();
 8004b30:	e7f9      	b.n	8004b26 <StartDefaultTask+0x1e>
	...

08004b34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a04      	ldr	r2, [pc, #16]	; (8004b54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d101      	bne.n	8004b4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004b46:	f002 f8d3 	bl	8006cf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40010000 	.word	0x40010000

08004b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b5c:	b672      	cpsid	i
}
 8004b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b60:	e7fe      	b.n	8004b60 <Error_Handler+0x8>

08004b62 <main_process>:
#include <probotbornik.h>



void main_process()
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	af00      	add	r7, sp, #0
	Read_Inputs();
 8004b66:	f7fc fb4b 	bl	8001200 <Read_Inputs>
	Analog_Read();
 8004b6a:	f7fc fa51 	bl	8001010 <Analog_Read>
	probotbor_process();
 8004b6e:	f000 fc47 	bl	8005400 <probotbor_process>
	Write_Outputs();
 8004b72:	f7fc fcd9 	bl	8001528 <Write_Outputs>

	osDelay(1);
 8004b76:	2001      	movs	r0, #1
 8004b78:	f008 fe83 	bl	800d882 <osDelay>
}
 8004b7c:	bf00      	nop
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <main_process_init>:

void main_process_init()
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0

}
 8004b84:	bf00      	nop
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <ModbusInit>:
static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source);
static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source);
static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource));

void ModbusInit()
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
	holding_pointer = (uint16_t*)&settings;
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <ModbusInit+0x34>)
 8004b96:	4a0c      	ldr	r2, [pc, #48]	; (8004bc8 <ModbusInit+0x38>)
 8004b98:	601a      	str	r2, [r3, #0]
	reading_pointer = (uint16_t*)&meas_data;
 8004b9a:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <ModbusInit+0x3c>)
 8004b9c:	4a0c      	ldr	r2, [pc, #48]	; (8004bd0 <ModbusInit+0x40>)
 8004b9e:	601a      	str	r2, [r3, #0]
	holding_size = sizeof(settings)/2;
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <ModbusInit+0x44>)
 8004ba2:	2252      	movs	r2, #82	; 0x52
 8004ba4:	801a      	strh	r2, [r3, #0]
	reading_size = sizeof(meas_data)/2;
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <ModbusInit+0x48>)
 8004ba8:	2238      	movs	r2, #56	; 0x38
 8004baa:	801a      	strh	r2, [r3, #0]
	if(settings.retain.mb_addr==0)settings.retain.mb_addr = 1;
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <ModbusInit+0x38>)
 8004bae:	891b      	ldrh	r3, [r3, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d102      	bne.n	8004bba <ModbusInit+0x2a>
 8004bb4:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <ModbusInit+0x38>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	811a      	strh	r2, [r3, #8]
}
 8004bba:	bf00      	nop
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	200008c4 	.word	0x200008c4
 8004bc8:	20007408 	.word	0x20007408
 8004bcc:	200008c8 	.word	0x200008c8
 8004bd0:	200074ac 	.word	0x200074ac
 8004bd4:	200008cc 	.word	0x200008cc
 8004bd8:	200008ce 	.word	0x200008ce

08004bdc <ModbusParse>:


//Ф-я парсинга входящего буфера, если это Modbus, то возвращает кол-во байт
int ModbusParse(uint8_t *request, uint16_t req_length, uint8_t *answer, ModbusSource source)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	461a      	mov	r2, r3
 8004be8:	460b      	mov	r3, r1
 8004bea:	817b      	strh	r3, [r7, #10]
 8004bec:	4613      	mov	r3, r2
 8004bee:	727b      	strb	r3, [r7, #9]
	settings.non_retain.data[37]++;
 8004bf0:	4b26      	ldr	r3, [pc, #152]	; (8004c8c <ModbusParse+0xb0>)
 8004bf2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <ModbusParse+0xb0>)
 8004bfc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	if(answer==NULL)return 0; // Проверка, выделилась ли память под ответ
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <ModbusParse+0x2e>
 8004c06:	2300      	movs	r3, #0
 8004c08:	e03c      	b.n	8004c84 <ModbusParse+0xa8>
	if(!CheckRequestLength(request,req_length,source))return 0; // Проверка корректности длины пакета
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	7a7a      	ldrb	r2, [r7, #9]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f83d 	bl	8004c90 <CheckRequestLength>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <ModbusParse+0x44>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e031      	b.n	8004c84 <ModbusParse+0xa8>
	if(!CheckMbAddr(request, source))return 0; // Проверка корректности адреса
 8004c20:	7a7b      	ldrb	r3, [r7, #9]
 8004c22:	4619      	mov	r1, r3
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f857 	bl	8004cd8 <CheckMbAddr>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <ModbusParse+0x58>
 8004c30:	2300      	movs	r3, #0
 8004c32:	e027      	b.n	8004c84 <ModbusParse+0xa8>
	if(!IsCorrectMbCommand(request, source))// Проверка корректности функционального кода
 8004c34:	7a7b      	ldrb	r3, [r7, #9]
 8004c36:	4619      	mov	r1, r3
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f873 	bl	8004d24 <IsCorrectMbCommand>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d107      	bne.n	8004c54 <ModbusParse+0x78>
	{
		return SetInvalidCommand(request, answer, 1, source);
 8004c44:	7a7b      	ldrb	r3, [r7, #9]
 8004c46:	2201      	movs	r2, #1
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 f89e 	bl	8004d8c <SetInvalidCommand>
 8004c50:	4603      	mov	r3, r0
 8004c52:	e017      	b.n	8004c84 <ModbusParse+0xa8>
	}
	if(!CheckCrc(request, req_length, source))
 8004c54:	897b      	ldrh	r3, [r7, #10]
 8004c56:	7a7a      	ldrb	r2, [r7, #9]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f93f 	bl	8004ede <CheckCrc>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d107      	bne.n	8004c76 <ModbusParse+0x9a>
	{
		return SetInvalidCommand(request, answer, 3, source);
 8004c66:	7a7b      	ldrb	r3, [r7, #9]
 8004c68:	2203      	movs	r2, #3
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f88d 	bl	8004d8c <SetInvalidCommand>
 8004c72:	4603      	mov	r3, r0
 8004c74:	e006      	b.n	8004c84 <ModbusParse+0xa8>
	}
	return GetModbusAnswer(request, answer, source);
 8004c76:	7a7b      	ldrb	r3, [r7, #9]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f963 	bl	8004f48 <GetModbusAnswer>
 8004c82:	4603      	mov	r3, r0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20007408 	.word	0x20007408

08004c90 <CheckRequestLength>:

//Проверка соответствия длины данных, передаваемых в буфере
static uint8_t CheckRequestLength(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	71fb      	strb	r3, [r7, #7]
	if(source==RS485)return 1;
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <CheckRequestLength+0x18>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e010      	b.n	8004cca <CheckRequestLength+0x3a>
    int len_from_packet = (*(request_pointer+4))*256 + *(request_pointer+5);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3304      	adds	r3, #4
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	3205      	adds	r2, #5
 8004cb4:	7812      	ldrb	r2, [r2, #0]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]
    return len_from_packet+6 == request_length;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	3306      	adds	r3, #6
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <CheckMbAddr>:

//Проверка соответсия адреса в сети Modbus сервера
static uint8_t CheckMbAddr(uint8_t *request,ModbusSource source)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	70fb      	strb	r3, [r7, #3]
	uint8_t addr = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d103      	bne.n	8004cf6 <CheckMbAddr+0x1e>
	{
		addr =  *(request+6);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	799b      	ldrb	r3, [r3, #6]
 8004cf2:	73fb      	strb	r3, [r7, #15]
 8004cf4:	e005      	b.n	8004d02 <CheckMbAddr+0x2a>
	}
	else if(source==RS485)
 8004cf6:	78fb      	ldrb	r3, [r7, #3]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <CheckMbAddr+0x2a>
	{
		addr =  *(request);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	73fb      	strb	r3, [r7, #15]
	}
	return addr == settings.retain.mb_addr;
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <CheckMbAddr+0x48>)
 8004d08:	891b      	ldrh	r3, [r3, #8]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	bf0c      	ite	eq
 8004d0e:	2301      	moveq	r3, #1
 8004d10:	2300      	movne	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20007408 	.word	0x20007408

08004d24 <IsCorrectMbCommand>:

//Проверка корректности функционального кода
static uint8_t IsCorrectMbCommand(uint8_t *request,ModbusSource source)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d103      	bne.n	8004d42 <IsCorrectMbCommand+0x1e>
	{
		cmd = *(request+7);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	79db      	ldrb	r3, [r3, #7]
 8004d3e:	73fb      	strb	r3, [r7, #15]
 8004d40:	e005      	b.n	8004d4e <IsCorrectMbCommand+0x2a>
	}
	else if(source==RS485)
 8004d42:	78fb      	ldrb	r3, [r7, #3]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d102      	bne.n	8004d4e <IsCorrectMbCommand+0x2a>
	{
		cmd = *(request+1);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	73fb      	strb	r3, [r7, #15]
	}
	/*
	 * Функция возвращает 1, если номер команды корректен, 0 - если некорректен
	 * cmd - номер команды
	 * */
	switch (cmd) {
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	bf8c      	ite	hi
 8004d54:	2201      	movhi	r2, #1
 8004d56:	2200      	movls	r2, #0
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	2a00      	cmp	r2, #0
 8004d5c:	d10c      	bne.n	8004d78 <IsCorrectMbCommand+0x54>
 8004d5e:	2201      	movs	r2, #1
 8004d60:	409a      	lsls	r2, r3
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <IsCorrectMbCommand+0x64>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bf14      	ite	ne
 8004d6a:	2301      	movne	r3, #1
 8004d6c:	2300      	moveq	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <IsCorrectMbCommand+0x54>
		case 3:
		case 4:
		case 6:
		//case 5:
        case 16:
            return 1;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <IsCorrectMbCommand+0x56>
		default:
			return 0;
 8004d78:	2300      	movs	r3, #0
	}
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	00010058 	.word	0x00010058

08004d8c <SetInvalidCommand>:

//Формирует телеграмму ошиобного запроса
static int SetInvalidCommand(uint8_t *request, uint8_t *answer, uint8_t code, ModbusSource source)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	4611      	mov	r1, r2
 8004d98:	461a      	mov	r2, r3
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	71fb      	strb	r3, [r7, #7]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	71bb      	strb	r3, [r7, #6]
	uint8_t func_code = source ? *(request+1) : *(request+1);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	785b      	ldrb	r3, [r3, #1]
 8004da6:	75fb      	strb	r3, [r7, #23]
	func_code = set_bit(func_code, 7);
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2107      	movs	r1, #7
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fc fa0e 	bl	80011d0 <set_bit>
 8004db4:	4603      	mov	r3, r0
 8004db6:	75fb      	strb	r3, [r7, #23]
	if(source==RS485)
 8004db8:	79bb      	ldrb	r3, [r7, #6]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d11d      	bne.n	8004dfa <SetInvalidCommand+0x6e>
	{
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	82bb      	strh	r3, [r7, #20]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	781a      	ldrb	r2, [r3, #0]
		memcpy(answer,request,1);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	701a      	strb	r2, [r3, #0]
		*(answer+1) = func_code;//Функциональный код с измененным битом
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	7dfa      	ldrb	r2, [r7, #23]
 8004dd0:	701a      	strb	r2, [r3, #0]
		*(answer+2) = code;//Функциональный код с измененным битом
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	3302      	adds	r3, #2
 8004dd6:	79fa      	ldrb	r2, [r7, #7]
 8004dd8:	701a      	strb	r2, [r3, #0]
		CRC16_CALC(answer,check_sum,3);
 8004dda:	f107 0314 	add.w	r3, r7, #20
 8004dde:	2203      	movs	r2, #3
 8004de0:	4619      	mov	r1, r3
 8004de2:	68b8      	ldr	r0, [r7, #8]
 8004de4:	f000 f832 	bl	8004e4c <CRC16_CALC>
		*(answer+3) = check_sum[0];
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	3303      	adds	r3, #3
 8004dec:	7d3a      	ldrb	r2, [r7, #20]
 8004dee:	701a      	strb	r2, [r3, #0]
		*(answer+4) = check_sum[1];
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	3304      	adds	r3, #4
 8004df4:	7d7a      	ldrb	r2, [r7, #21]
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	e01c      	b.n	8004e34 <SetInvalidCommand+0xa8>
	}
	else if(source==ETHERNET)
 8004dfa:	79bb      	ldrb	r3, [r7, #6]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d119      	bne.n	8004e34 <SetInvalidCommand+0xa8>
	{
		memcpy(answer,request,8);
 8004e00:	2208      	movs	r2, #8
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	68b8      	ldr	r0, [r7, #8]
 8004e06:	f019 f925 	bl	801e054 <memcpy>
		*(answer+4) = 0;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
		*(answer+5) = 3;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	3305      	adds	r3, #5
 8004e16:	2203      	movs	r2, #3
 8004e18:	701a      	strb	r2, [r3, #0]
		*(answer+7) |= 128;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	3307      	adds	r3, #7
 8004e1e:	781a      	ldrb	r2, [r3, #0]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	3307      	adds	r3, #7
 8004e24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]
		*(answer+8) = code;
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	79fa      	ldrb	r2, [r7, #7]
 8004e32:	701a      	strb	r2, [r3, #0]
	}

	uint8_t len = source==RS485 ? 5 : 9;
 8004e34:	79bb      	ldrb	r3, [r7, #6]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <SetInvalidCommand+0xb2>
 8004e3a:	2305      	movs	r3, #5
 8004e3c:	e000      	b.n	8004e40 <SetInvalidCommand+0xb4>
 8004e3e:	2309      	movs	r3, #9
 8004e40:	75bb      	strb	r3, [r7, #22]
	return len;
 8004e42:	7dbb      	ldrb	r3, [r7, #22]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <CRC16_CALC>:

static void CRC16_CALC(uint8_t* arr, uint8_t* checkSum, uint8_t messageLength)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b089      	sub	sp, #36	; 0x24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	71fb      	strb	r3, [r7, #7]
	/*Функция расчета контрольной суммы
		 * arr - указатель на массив байт, по которым нужно посчитать CRC
		 * checkSum - указатель на массив из 2 байт, куда нужно положить CRC
		 * messageLength - ко-во байт, по которым нужно считать CRC	 *
		 * */
		uint16_t reg = 0xFFFF;
 8004e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e5e:	83fb      	strh	r3, [r7, #30]
		uint16_t polinom = 0xA001;
 8004e60:	f24a 0301 	movw	r3, #40961	; 0xa001
 8004e64:	827b      	strh	r3, [r7, #18]
		for(int i=0;i < messageLength;i++)
 8004e66:	2300      	movs	r3, #0
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	e023      	b.n	8004eb4 <CRC16_CALC+0x68>
		{
			reg^=*(arr+i);
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4413      	add	r3, r2
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	8bfb      	ldrh	r3, [r7, #30]
 8004e78:	4053      	eors	r3, r2
 8004e7a:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	e012      	b.n	8004ea8 <CRC16_CALC+0x5c>
			{
				if ((reg&1)==1) {
 8004e82:	8bfb      	ldrh	r3, [r7, #30]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <CRC16_CALC+0x50>
					reg>>=1;
 8004e8c:	8bfb      	ldrh	r3, [r7, #30]
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	83fb      	strh	r3, [r7, #30]
					reg^=polinom;
 8004e92:	8bfa      	ldrh	r2, [r7, #30]
 8004e94:	8a7b      	ldrh	r3, [r7, #18]
 8004e96:	4053      	eors	r3, r2
 8004e98:	83fb      	strh	r3, [r7, #30]
 8004e9a:	e002      	b.n	8004ea2 <CRC16_CALC+0x56>
				}
				else reg>>=1;
 8004e9c:	8bfb      	ldrh	r3, [r7, #30]
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b07      	cmp	r3, #7
 8004eac:	dde9      	ble.n	8004e82 <CRC16_CALC+0x36>
		for(int i=0;i < messageLength;i++)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	dbd7      	blt.n	8004e6c <CRC16_CALC+0x20>
			}
		}
		*(checkSum+1)=(uint8_t)(reg>>8);
 8004ebc:	8bfb      	ldrh	r3, [r7, #30]
 8004ebe:	0a1b      	lsrs	r3, r3, #8
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]
		*checkSum = (uint8_t)(reg & 0x00FF);
 8004eca:	8bfb      	ldrh	r3, [r7, #30]
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	701a      	strb	r2, [r3, #0]
}
 8004ed2:	bf00      	nop
 8004ed4:	3724      	adds	r7, #36	; 0x24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <CheckCrc>:

//Проверка контрольной суммы запроса
static uint8_t CheckCrc(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b086      	sub	sp, #24
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	71fb      	strb	r3, [r7, #7]
	if(source==ETHERNET)return 1;
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <CheckCrc+0x18>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e024      	b.n	8004f40 <CheckCrc+0x62>
	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	82bb      	strh	r3, [r7, #20]
	if(request_length<4)return 0;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	dc01      	bgt.n	8004f04 <CheckCrc+0x26>
 8004f00:	2300      	movs	r3, #0
 8004f02:	e01d      	b.n	8004f40 <CheckCrc+0x62>
	CRC16_CALC(request_pointer, check_sum, request_length-2);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	3b02      	subs	r3, #2
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	f107 0314 	add.w	r3, r7, #20
 8004f10:	4619      	mov	r1, r3
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f7ff ff9a 	bl	8004e4c <CRC16_CALC>
	return request_pointer[request_length-2]==check_sum[0] && request_pointer[request_length-1]==check_sum[1];
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	3b02      	subs	r3, #2
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	781a      	ldrb	r2, [r3, #0]
 8004f22:	7d3b      	ldrb	r3, [r7, #20]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d109      	bne.n	8004f3c <CheckCrc+0x5e>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	781a      	ldrb	r2, [r3, #0]
 8004f32:	7d7b      	ldrb	r3, [r7, #21]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d101      	bne.n	8004f3c <CheckCrc+0x5e>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <CheckCrc+0x60>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <GetModbusAnswer>:

//Возвращает кол-во байт, котрые нужно передать обратно
static int GetModbusAnswer(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	4613      	mov	r3, r2
 8004f54:	71fb      	strb	r3, [r7, #7]
	uint8_t func_code = source==RS485 ? *(request+1) : *(request+7);
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <GetModbusAnswer+0x1a>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	e001      	b.n	8004f66 <GetModbusAnswer+0x1e>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	79db      	ldrb	r3, [r3, #7]
 8004f66:	75fb      	strb	r3, [r7, #23]

	switch (func_code) {
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	3b03      	subs	r3, #3
 8004f6c:	2b0d      	cmp	r3, #13
 8004f6e:	d849      	bhi.n	8005004 <GetModbusAnswer+0xbc>
 8004f70:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <GetModbusAnswer+0x30>)
 8004f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f76:	bf00      	nop
 8004f78:	08004fb1 	.word	0x08004fb1
 8004f7c:	08004fcb 	.word	0x08004fcb
 8004f80:	08005005 	.word	0x08005005
 8004f84:	08004fe5 	.word	0x08004fe5
 8004f88:	08005005 	.word	0x08005005
 8004f8c:	08005005 	.word	0x08005005
 8004f90:	08005005 	.word	0x08005005
 8004f94:	08005005 	.word	0x08005005
 8004f98:	08005005 	.word	0x08005005
 8004f9c:	08005005 	.word	0x08005005
 8004fa0:	08005005 	.word	0x08005005
 8004fa4:	08005005 	.word	0x08005005
 8004fa8:	08005005 	.word	0x08005005
 8004fac:	08004ff5 	.word	0x08004ff5
		case READ_HOLDING_REGS:
			return ReadRegisters(request, answer, holding_pointer, holding_size, source);
 8004fb0:	4b17      	ldr	r3, [pc, #92]	; (8005010 <GetModbusAnswer+0xc8>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b17      	ldr	r3, [pc, #92]	; (8005014 <GetModbusAnswer+0xcc>)
 8004fb6:	8819      	ldrh	r1, [r3, #0]
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f831 	bl	8005028 <ReadRegisters>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	e01e      	b.n	8005008 <GetModbusAnswer+0xc0>
		case READ_INPUT_REGS:
			return ReadRegisters(request, answer, reading_pointer, reading_size, source);
 8004fca:	4b13      	ldr	r3, [pc, #76]	; (8005018 <GetModbusAnswer+0xd0>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <GetModbusAnswer+0xd4>)
 8004fd0:	8819      	ldrh	r1, [r3, #0]
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f824 	bl	8005028 <ReadRegisters>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	e011      	b.n	8005008 <GetModbusAnswer+0xc0>
		case WRITE_SINGLE_REG:
			return WriteToHoldings(request, answer, source, &WriteSingleRegister);
 8004fe4:	79fa      	ldrb	r2, [r7, #7]
 8004fe6:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <GetModbusAnswer+0xd8>)
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f9dc 	bl	80053a8 <WriteToHoldings>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	e009      	b.n	8005008 <GetModbusAnswer+0xc0>
		case WRITE_MULTIPLY_REGS:
			return WriteToHoldings(request, answer, source, &WrieMultiplyRegisters);
 8004ff4:	79fa      	ldrb	r2, [r7, #7]
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <GetModbusAnswer+0xdc>)
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f9d4 	bl	80053a8 <WriteToHoldings>
 8005000:	4603      	mov	r3, r0
 8005002:	e001      	b.n	8005008 <GetModbusAnswer+0xc0>
		default:
			break;
 8005004:	bf00      	nop
	}
	return 0;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	200008c4 	.word	0x200008c4
 8005014:	200008cc 	.word	0x200008cc
 8005018:	200008c8 	.word	0x200008c8
 800501c:	200008ce 	.word	0x200008ce
 8005020:	08005209 	.word	0x08005209
 8005024:	080052ad 	.word	0x080052ad

08005028 <ReadRegisters>:

//Ф-я чтения регистров из памяти memory_pointer размером memory_size
static int ReadRegisters(uint8_t *request, uint8_t *answer, uint16_t *memory_pointer, uint16_t memory_size, ModbusSource source)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	807b      	strh	r3, [r7, #2]
	uint16_t  maxAddr = memory_size-1;
 8005036:	887b      	ldrh	r3, [r7, #2]
 8005038:	3b01      	subs	r3, #1
 800503a:	83fb      	strh	r3, [r7, #30]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 800503c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <ReadRegisters+0x20>
 8005044:	2302      	movs	r3, #2
 8005046:	e000      	b.n	800504a <ReadRegisters+0x22>
 8005048:	2308      	movs	r3, #8
 800504a:	4619      	mov	r1, r3
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f882 	bl	8005156 <GetWordFromBytes>
 8005052:	4603      	mov	r3, r0
 8005054:	83bb      	strh	r3, [r7, #28]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 8005056:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <ReadRegisters+0x3a>
 800505e:	2304      	movs	r3, #4
 8005060:	e000      	b.n	8005064 <ReadRegisters+0x3c>
 8005062:	230a      	movs	r3, #10
 8005064:	4619      	mov	r1, r3
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f875 	bl	8005156 <GetWordFromBytes>
 800506c:	4603      	mov	r3, r0
 800506e:	837b      	strh	r3, [r7, #26]
	if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8005070:	8bba      	ldrh	r2, [r7, #28]
 8005072:	8b7b      	ldrh	r3, [r7, #26]
 8005074:	4413      	add	r3, r2
 8005076:	1e5a      	subs	r2, r3, #1
 8005078:	8bfb      	ldrh	r3, [r7, #30]
 800507a:	429a      	cmp	r2, r3
 800507c:	dd08      	ble.n	8005090 <ReadRegisters+0x68>
 800507e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005082:	2202      	movs	r2, #2
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff fe80 	bl	8004d8c <SetInvalidCommand>
 800508c:	4603      	mov	r3, r0
 800508e:	e05e      	b.n	800514e <ReadRegisters+0x126>
	if(source==ETHERNET)
 8005090:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005094:	2b01      	cmp	r3, #1
 8005096:	d124      	bne.n	80050e2 <ReadRegisters+0xba>
	{
		memcpy(answer,request,8);
 8005098:	2208      	movs	r2, #8
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	68b8      	ldr	r0, [r7, #8]
 800509e:	f018 ffd9 	bl	801e054 <memcpy>
		InsertWordToMemory(reg_count*2+3, answer+4);//Длина сообщения
 80050a2:	8b7b      	ldrh	r3, [r7, #26]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3303      	adds	r3, #3
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f000 f86a 	bl	800518c <InsertWordToMemory>
		*(answer+8) = reg_count*2;//количесво байт далее
 80050b8:	8b7b      	ldrh	r3, [r7, #26]
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	3308      	adds	r3, #8
 80050c0:	0052      	lsls	r2, r2, #1
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+9,reg_count);
 80050c6:	8bbb      	ldrh	r3, [r7, #28]
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	18d0      	adds	r0, r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	3309      	adds	r3, #9
 80050d2:	8b7a      	ldrh	r2, [r7, #26]
 80050d4:	4619      	mov	r1, r3
 80050d6:	f000 f869 	bl	80051ac <InsertWordsToMemory>
		return 9+reg_count*2;
 80050da:	8b7b      	ldrh	r3, [r7, #26]
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	3309      	adds	r3, #9
 80050e0:	e035      	b.n	800514e <ReadRegisters+0x126>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29a      	uxth	r2, r3
	}
	else
	{
		memcpy(answer,request,2);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	801a      	strh	r2, [r3, #0]
		*(answer+2) = reg_count*2;//количесво байт далее
 80050ec:	8b7b      	ldrh	r3, [r7, #26]
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	3302      	adds	r3, #2
 80050f4:	0052      	lsls	r2, r2, #1
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+3,reg_count);//Данные
 80050fa:	8bbb      	ldrh	r3, [r7, #28]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	18d0      	adds	r0, r2, r3
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	3303      	adds	r3, #3
 8005106:	8b7a      	ldrh	r2, [r7, #26]
 8005108:	4619      	mov	r1, r3
 800510a:	f000 f84f 	bl	80051ac <InsertWordsToMemory>
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 800510e:	2300      	movs	r3, #0
 8005110:	823b      	strh	r3, [r7, #16]
		CRC16_CALC(answer,check_sum,3+reg_count*2);
 8005112:	8b7b      	ldrh	r3, [r7, #26]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	b2db      	uxtb	r3, r3
 800511a:	3303      	adds	r3, #3
 800511c:	b2da      	uxtb	r2, r3
 800511e:	f107 0310 	add.w	r3, r7, #16
 8005122:	4619      	mov	r1, r3
 8005124:	68b8      	ldr	r0, [r7, #8]
 8005126:	f7ff fe91 	bl	8004e4c <CRC16_CALC>
		int offset = 3+reg_count*2;
 800512a:	8b7b      	ldrh	r3, [r7, #26]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	3303      	adds	r3, #3
 8005130:	617b      	str	r3, [r7, #20]
		*(answer+offset)=check_sum[0];
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	4413      	add	r3, r2
 8005138:	7c3a      	ldrb	r2, [r7, #16]
 800513a:	701a      	strb	r2, [r3, #0]
		*(answer+offset+1)=check_sum[1];
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3301      	adds	r3, #1
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	4413      	add	r3, r2
 8005144:	7c7a      	ldrb	r2, [r7, #17]
 8005146:	701a      	strb	r2, [r3, #0]
		return 5+reg_count*2;
 8005148:	8b7b      	ldrh	r3, [r7, #26]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	3305      	adds	r3, #5

	}
	return 0;
}
 800514e:	4618      	mov	r0, r3
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <GetWordFromBytes>:

static uint16_t GetWordFromBytes(uint8_t *arr, uint8_t pos)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	70fb      	strb	r3, [r7, #3]
	/*Получает 16 битное число из 2x байт, и возвращает его
	 * arr -  указатель на массив байт, из которого нужно получить word
	 * pos - индекс первого байта в массиве
	 *
	 * */
	return (((uint16_t)(*(arr+pos)))<<8) + (uint16_t)(*(arr + pos+1));
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	4413      	add	r3, r2
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	b29a      	uxth	r2, r3
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	3301      	adds	r3, #1
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	440b      	add	r3, r1
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	4413      	add	r3, r2
 800517e:	b29b      	uxth	r3, r3
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <InsertWordToMemory>:

static void InsertWordToMemory(uint16_t value, uint8_t* memory)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	6039      	str	r1, [r7, #0]
 8005196:	80fb      	strh	r3, [r7, #6]
    InsertWordsToMemory(&value,memory,1);
 8005198:	1dbb      	adds	r3, r7, #6
 800519a:	2201      	movs	r2, #1
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 f804 	bl	80051ac <InsertWordsToMemory>
}
 80051a4:	bf00      	nop
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <InsertWordsToMemory>:

static void InsertWordsToMemory(uint16_t *source, uint8_t * destination, uint16_t count)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]
    for(i=0;i<count*2;i+=2)
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	e014      	b.n	80051ee <InsertWordsToMemory+0x42>
    {
        *(destination+i+1)=*((uint8_t*)source+i);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	441a      	add	r2, r3
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	3301      	adds	r3, #1
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	440b      	add	r3, r1
 80051d2:	7812      	ldrb	r2, [r2, #0]
 80051d4:	701a      	strb	r2, [r3, #0]
        *(destination+i)=*((uint8_t*)source+i+1);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	3301      	adds	r3, #1
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	441a      	add	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	440b      	add	r3, r1
 80051e4:	7812      	ldrb	r2, [r2, #0]
 80051e6:	701a      	strb	r2, [r3, #0]
    for(i=0;i<count*2;i+=2)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	3302      	adds	r3, #2
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	dbe5      	blt.n	80051c4 <InsertWordsToMemory+0x18>
    }
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <WriteSingleRegister>:


static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	71fb      	strb	r3, [r7, #7]
    uint16_t  maxAddr = holding_size-1;
 8005216:	4b23      	ldr	r3, [pc, #140]	; (80052a4 <WriteSingleRegister+0x9c>)
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	3b01      	subs	r3, #1
 800521c:	82fb      	strh	r3, [r7, #22]
    uint16_t addr = GetWordFromBytes(request,source==RS485?2:8);
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <WriteSingleRegister+0x20>
 8005224:	2302      	movs	r3, #2
 8005226:	e000      	b.n	800522a <WriteSingleRegister+0x22>
 8005228:	2308      	movs	r3, #8
 800522a:	4619      	mov	r1, r3
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff ff92 	bl	8005156 <GetWordFromBytes>
 8005232:	4603      	mov	r3, r0
 8005234:	82bb      	strh	r3, [r7, #20]
    if(addr>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8005236:	8aba      	ldrh	r2, [r7, #20]
 8005238:	8afb      	ldrh	r3, [r7, #22]
 800523a:	429a      	cmp	r2, r3
 800523c:	d907      	bls.n	800524e <WriteSingleRegister+0x46>
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	2202      	movs	r2, #2
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7ff fda1 	bl	8004d8c <SetInvalidCommand>
 800524a:	4603      	mov	r3, r0
 800524c:	e026      	b.n	800529c <WriteSingleRegister+0x94>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d112      	bne.n	800527a <WriteSingleRegister+0x72>
    {
    	InsertWordsToMemory((uint16_t*)(request+10), ((uint8_t*)holding_pointer)+addr*2,1);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f103 000a 	add.w	r0, r3, #10
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <WriteSingleRegister+0xa0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	8aba      	ldrh	r2, [r7, #20]
 8005260:	0052      	lsls	r2, r2, #1
 8005262:	4413      	add	r3, r2
 8005264:	2201      	movs	r2, #1
 8005266:	4619      	mov	r1, r3
 8005268:	f7ff ffa0 	bl	80051ac <InsertWordsToMemory>
    	memcpy(answer, request,12);
 800526c:	220c      	movs	r2, #12
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	68b8      	ldr	r0, [r7, #8]
 8005272:	f018 feef 	bl	801e054 <memcpy>
    	return 12;
 8005276:	230c      	movs	r3, #12
 8005278:	e010      	b.n	800529c <WriteSingleRegister+0x94>
    }
    else
    {
    	InsertWordsToMemory((uint16_t*)(request+4), ((uint8_t*)holding_pointer)+addr*2,1);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1d18      	adds	r0, r3, #4
 800527e:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <WriteSingleRegister+0xa0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	8aba      	ldrh	r2, [r7, #20]
 8005284:	0052      	lsls	r2, r2, #1
 8005286:	4413      	add	r3, r2
 8005288:	2201      	movs	r2, #1
 800528a:	4619      	mov	r1, r3
 800528c:	f7ff ff8e 	bl	80051ac <InsertWordsToMemory>
    	memcpy(answer, request,8);
 8005290:	2208      	movs	r2, #8
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	68b8      	ldr	r0, [r7, #8]
 8005296:	f018 fedd 	bl	801e054 <memcpy>
    	return 8;
 800529a:	2308      	movs	r3, #8
    }
    settingsSaveFRAM();
    return 0;
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	200008cc 	.word	0x200008cc
 80052a8:	200008c4 	.word	0x200008c4

080052ac <WrieMultiplyRegisters>:

static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	4613      	mov	r3, r2
 80052b8:	71fb      	strb	r3, [r7, #7]
	uint16_t  maxAddr = holding_size-1;
 80052ba:	4b39      	ldr	r3, [pc, #228]	; (80053a0 <WrieMultiplyRegisters+0xf4>)
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	3b01      	subs	r3, #1
 80052c0:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <WrieMultiplyRegisters+0x20>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e000      	b.n	80052ce <WrieMultiplyRegisters+0x22>
 80052cc:	2308      	movs	r3, #8
 80052ce:	4619      	mov	r1, r3
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f7ff ff40 	bl	8005156 <GetWordFromBytes>
 80052d6:	4603      	mov	r3, r0
 80052d8:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <WrieMultiplyRegisters+0x38>
 80052e0:	2304      	movs	r3, #4
 80052e2:	e000      	b.n	80052e6 <WrieMultiplyRegisters+0x3a>
 80052e4:	230a      	movs	r3, #10
 80052e6:	4619      	mov	r1, r3
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f7ff ff34 	bl	8005156 <GetWordFromBytes>
 80052ee:	4603      	mov	r3, r0
 80052f0:	827b      	strh	r3, [r7, #18]
    if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 80052f2:	8aba      	ldrh	r2, [r7, #20]
 80052f4:	8a7b      	ldrh	r3, [r7, #18]
 80052f6:	4413      	add	r3, r2
 80052f8:	1e5a      	subs	r2, r3, #1
 80052fa:	8afb      	ldrh	r3, [r7, #22]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	dd07      	ble.n	8005310 <WrieMultiplyRegisters+0x64>
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	2202      	movs	r2, #2
 8005304:	68b9      	ldr	r1, [r7, #8]
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f7ff fd40 	bl	8004d8c <SetInvalidCommand>
 800530c:	4603      	mov	r3, r0
 800530e:	e042      	b.n	8005396 <WrieMultiplyRegisters+0xea>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d11d      	bne.n	8005352 <WrieMultiplyRegisters+0xa6>
    {
    	memcpy(answer, request,12);//сначала повторяющиеся с запросом данные
 8005316:	220c      	movs	r2, #12
 8005318:	68f9      	ldr	r1, [r7, #12]
 800531a:	68b8      	ldr	r0, [r7, #8]
 800531c:	f018 fe9a 	bl	801e054 <memcpy>
    	InsertWordToMemory(reg_count*2+4, answer+4);//Длина сообщения
 8005320:	8a7b      	ldrh	r3, [r7, #18]
 8005322:	3302      	adds	r3, #2
 8005324:	b29b      	uxth	r3, r3
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	3304      	adds	r3, #4
 800532e:	4619      	mov	r1, r3
 8005330:	4610      	mov	r0, r2
 8005332:	f7ff ff2b 	bl	800518c <InsertWordToMemory>
    	InsertWordsToMemory((uint16_t*)(request+13), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f103 000d 	add.w	r0, r3, #13
 800533c:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <WrieMultiplyRegisters+0xf8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	8aba      	ldrh	r2, [r7, #20]
 8005342:	0052      	lsls	r2, r2, #1
 8005344:	4413      	add	r3, r2
 8005346:	8a7a      	ldrh	r2, [r7, #18]
 8005348:	4619      	mov	r1, r3
 800534a:	f7ff ff2f 	bl	80051ac <InsertWordsToMemory>
        return 12;
 800534e:	230c      	movs	r3, #12
 8005350:	e021      	b.n	8005396 <WrieMultiplyRegisters+0xea>
    }
    else
    {
    	memcpy(answer, request,6);//сначала повторяющиеся с запросом данные
 8005352:	2206      	movs	r2, #6
 8005354:	68f9      	ldr	r1, [r7, #12]
 8005356:	68b8      	ldr	r0, [r7, #8]
 8005358:	f018 fe7c 	bl	801e054 <memcpy>
    	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 800535c:	2300      	movs	r3, #0
 800535e:	823b      	strh	r3, [r7, #16]
    	CRC16_CALC(answer,check_sum,6);
 8005360:	f107 0310 	add.w	r3, r7, #16
 8005364:	2206      	movs	r2, #6
 8005366:	4619      	mov	r1, r3
 8005368:	68b8      	ldr	r0, [r7, #8]
 800536a:	f7ff fd6f 	bl	8004e4c <CRC16_CALC>
		*(answer+6)=check_sum[0];
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	3306      	adds	r3, #6
 8005372:	7c3a      	ldrb	r2, [r7, #16]
 8005374:	701a      	strb	r2, [r3, #0]
		*(answer+7)=check_sum[1];
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	3307      	adds	r3, #7
 800537a:	7c7a      	ldrb	r2, [r7, #17]
 800537c:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory((uint16_t*)(request+7), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1dd8      	adds	r0, r3, #7
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <WrieMultiplyRegisters+0xf8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	8aba      	ldrh	r2, [r7, #20]
 8005388:	0052      	lsls	r2, r2, #1
 800538a:	4413      	add	r3, r2
 800538c:	8a7a      	ldrh	r2, [r7, #18]
 800538e:	4619      	mov	r1, r3
 8005390:	f7ff ff0c 	bl	80051ac <InsertWordsToMemory>
		return 8;
 8005394:	2308      	movs	r3, #8
    }

    return 0;
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	200008cc 	.word	0x200008cc
 80053a4:	200008c4 	.word	0x200008c4

080053a8 <WriteToHoldings>:

static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource))
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	71fb      	strb	r3, [r7, #7]
	int result = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
	if(writeMemorySemaphoreHandle!=NULL)
 80053bc:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <WriteToHoldings+0x54>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d016      	beq.n	80053f2 <WriteToHoldings+0x4a>
	{
		if(osSemaphoreWait(writeMemorySemaphoreHandle, 1000)==osOK)
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <WriteToHoldings+0x54>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80053cc:	4618      	mov	r0, r3
 80053ce:	f008 fb3b 	bl	800da48 <osSemaphoreWait>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10c      	bne.n	80053f2 <WriteToHoldings+0x4a>
		{
			result =  (*write)(request,answer,source);
 80053d8:	79fa      	ldrb	r2, [r7, #7]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	4798      	blx	r3
 80053e2:	6178      	str	r0, [r7, #20]
			settingsSaveFRAM();
 80053e4:	f000 fcba 	bl	8005d5c <settingsSaveFRAM>
			osSemaphoreRelease(writeMemorySemaphoreHandle);
 80053e8:	4b04      	ldr	r3, [pc, #16]	; (80053fc <WriteToHoldings+0x54>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f008 fb79 	bl	800dae4 <osSemaphoreRelease>
		}
	}
	return result;
 80053f2:	697b      	ldr	r3, [r7, #20]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20007384 	.word	0x20007384

08005400 <probotbor_process>:
static void Indication();
static void GetPositiveFronts();
static void NakopitelCheck();

void probotbor_process()
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
	SetTimers();
 8005404:	f000 f924 	bl	8005650 <SetTimers>
	if(!initialized)
 8005408:	4b14      	ldr	r3, [pc, #80]	; (800545c <probotbor_process+0x5c>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d108      	bne.n	8005422 <probotbor_process+0x22>
	{
		if(!Init_timers())return;
 8005410:	f000 f8e2 	bl	80055d8 <Init_timers>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01e      	beq.n	8005458 <probotbor_process+0x58>
		initialized = 1;
 800541a:	4b10      	ldr	r3, [pc, #64]	; (800545c <probotbor_process+0x5c>)
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
		return;
 8005420:	e01b      	b.n	800545a <probotbor_process+0x5a>
	}
	NakopitelCheck();
 8005422:	f000 fc29 	bl	8005c78 <NakopitelCheck>
	GetPositiveFronts();
 8005426:	f000 fb8d 	bl	8005b44 <GetPositiveFronts>
	GetErrors();
 800542a:	f000 f81f 	bl	800546c <GetErrors>
	OnCommandCycle();
 800542e:	f000 fa9f 	bl	8005970 <OnCommandCycle>
	Moving();
 8005432:	f000 f97d 	bl	8005730 <Moving>
	if(automatTON.OUT && d_outputs.prob_ready)
 8005436:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <probotbor_process+0x60>)
 8005438:	7a5b      	ldrb	r3, [r3, #9]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <probotbor_process+0x52>
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <probotbor_process+0x64>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <probotbor_process+0x52>
	{
		startOtborCommand = 1;
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <probotbor_process+0x68>)
 800544e:	2201      	movs	r2, #1
 8005450:	701a      	strb	r2, [r3, #0]
	}
	Indication();
 8005452:	f000 fb3b 	bl	8005acc <Indication>
 8005456:	e000      	b.n	800545a <probotbor_process+0x5a>
		if(!Init_timers())return;
 8005458:	bf00      	nop

}
 800545a:	bd80      	pop	{r7, pc}
 800545c:	200073f4 	.word	0x200073f4
 8005460:	200073d0 	.word	0x200073d0
 8005464:	20006fc0 	.word	0x20006fc0
 8005468:	200073f0 	.word	0x200073f0

0800546c <GetErrors>:

static void GetErrors()
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
	// Inputs
	meas_data.errors.nakopitel_door_err = !d_inputs.sq_kanistra_door;
 8005470:	4b52      	ldr	r3, [pc, #328]	; (80055bc <GetErrors+0x150>)
 8005472:	785b      	ldrb	r3, [r3, #1]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	bf0c      	ite	eq
 800547e:	2301      	moveq	r3, #1
 8005480:	2300      	movne	r3, #0
 8005482:	b2d9      	uxtb	r1, r3
 8005484:	4a4e      	ldr	r2, [pc, #312]	; (80055c0 <GetErrors+0x154>)
 8005486:	7f13      	ldrb	r3, [r2, #28]
 8005488:	f361 0341 	bfi	r3, r1, #1, #1
 800548c:	7713      	strb	r3, [r2, #28]
	meas_data.errors.nakopitel_kanistra_err = !d_inputs.sq_kanistra;
 800548e:	4b4b      	ldr	r3, [pc, #300]	; (80055bc <GetErrors+0x150>)
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2d9      	uxtb	r1, r3
 80054a2:	4a47      	ldr	r2, [pc, #284]	; (80055c0 <GetErrors+0x154>)
 80054a4:	7f13      	ldrb	r3, [r2, #28]
 80054a6:	f361 0300 	bfi	r3, r1, #0, #1
 80054aa:	7713      	strb	r3, [r2, #28]
	meas_data.errors.uz_err = !d_inputs.uz_prob_fail;
 80054ac:	4b43      	ldr	r3, [pc, #268]	; (80055bc <GetErrors+0x150>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bf0c      	ite	eq
 80054ba:	2301      	moveq	r3, #1
 80054bc:	2300      	movne	r3, #0
 80054be:	b2d9      	uxtb	r1, r3
 80054c0:	4a3f      	ldr	r2, [pc, #252]	; (80055c0 <GetErrors+0x154>)
 80054c2:	7f13      	ldrb	r3, [r2, #28]
 80054c4:	f361 0382 	bfi	r3, r1, #2, #1
 80054c8:	7713      	strb	r3, [r2, #28]
	meas_data.errors.sb_abort_err = d_inputs.sb_stop;
 80054ca:	4b3c      	ldr	r3, [pc, #240]	; (80055bc <GetErrors+0x150>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80054d2:	b2d9      	uxtb	r1, r3
 80054d4:	4a3a      	ldr	r2, [pc, #232]	; (80055c0 <GetErrors+0x154>)
 80054d6:	7f13      	ldrb	r3, [r2, #28]
 80054d8:	f361 03c3 	bfi	r3, r1, #3, #1
 80054dc:	7713      	strb	r3, [r2, #28]
	meas_data.errors.sq_left_err = d_inputs.sq_kovsh_prob_left_1;
 80054de:	4b37      	ldr	r3, [pc, #220]	; (80055bc <GetErrors+0x150>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80054e6:	b2d9      	uxtb	r1, r3
 80054e8:	4a35      	ldr	r2, [pc, #212]	; (80055c0 <GetErrors+0x154>)
 80054ea:	7f13      	ldrb	r3, [r2, #28]
 80054ec:	f361 1304 	bfi	r3, r1, #4, #1
 80054f0:	7713      	strb	r3, [r2, #28]
	meas_data.errors.sq_right_err = d_inputs.sq_kovsh_prob_right_1;
 80054f2:	4b32      	ldr	r3, [pc, #200]	; (80055bc <GetErrors+0x150>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80054fa:	b2d9      	uxtb	r1, r3
 80054fc:	4a30      	ldr	r2, [pc, #192]	; (80055c0 <GetErrors+0x154>)
 80054fe:	7f13      	ldrb	r3, [r2, #28]
 8005500:	f361 1345 	bfi	r3, r1, #5, #1
 8005504:	7713      	strb	r3, [r2, #28]
	meas_data.errors.full_nakop_err = meas_data.nakopitelFull;
 8005506:	4b2e      	ldr	r3, [pc, #184]	; (80055c0 <GetErrors+0x154>)
 8005508:	8adb      	ldrh	r3, [r3, #22]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	b2d9      	uxtb	r1, r3
 8005510:	4a2b      	ldr	r2, [pc, #172]	; (80055c0 <GetErrors+0x154>)
 8005512:	7f53      	ldrb	r3, [r2, #29]
 8005514:	f361 0341 	bfi	r3, r1, #1, #1
 8005518:	7753      	strb	r3, [r2, #29]

	//Timeouts
	if(sqHomeTON.OUT){
 800551a:	4b2a      	ldr	r3, [pc, #168]	; (80055c4 <GetErrors+0x158>)
 800551c:	7a5b      	ldrb	r3, [r3, #9]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <GetErrors+0xc0>
		meas_data.errors.timeout_moving_left_err = 1;
 8005522:	4a27      	ldr	r2, [pc, #156]	; (80055c0 <GetErrors+0x154>)
 8005524:	7f13      	ldrb	r3, [r2, #28]
 8005526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800552a:	7713      	strb	r3, [r2, #28]
	}
	if(sqWorkTON.OUT){
 800552c:	4b26      	ldr	r3, [pc, #152]	; (80055c8 <GetErrors+0x15c>)
 800552e:	7a5b      	ldrb	r3, [r3, #9]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d004      	beq.n	800553e <GetErrors+0xd2>
		meas_data.errors.timeout_moving_right_err = 1;
 8005534:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <GetErrors+0x154>)
 8005536:	7f13      	ldrb	r3, [r2, #28]
 8005538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800553c:	7713      	strb	r3, [r2, #28]
	}
	if(rtSbMakeProba|| rtSbMakeVozvrat)
 800553e:	4b23      	ldr	r3, [pc, #140]	; (80055cc <GetErrors+0x160>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d103      	bne.n	800554e <GetErrors+0xe2>
 8005546:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <GetErrors+0x164>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <GetErrors+0xf6>
	{
		meas_data.errors.timeout_moving_left_err = 0;
 800554e:	4a1c      	ldr	r2, [pc, #112]	; (80055c0 <GetErrors+0x154>)
 8005550:	7f13      	ldrb	r3, [r2, #28]
 8005552:	f36f 13c7 	bfc	r3, #7, #1
 8005556:	7713      	strb	r3, [r2, #28]
		meas_data.errors.timeout_moving_right_err = 0;
 8005558:	4a19      	ldr	r2, [pc, #100]	; (80055c0 <GetErrors+0x154>)
 800555a:	7f13      	ldrb	r3, [r2, #28]
 800555c:	f36f 1386 	bfc	r3, #6, #1
 8005560:	7713      	strb	r3, [r2, #28]
	}
	// Need Return
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 8005562:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <GetErrors+0x168>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d116      	bne.n	800559e <GetErrors+0x132>
 8005570:	4b18      	ldr	r3, [pc, #96]	; (80055d4 <GetErrors+0x168>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10f      	bne.n	800559e <GetErrors+0x132>
			(!d_inputs.sq_kovsh_prob_left_2 && !d_inputs.sq_kovsh_prob_right_2);
 800557e:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <GetErrors+0x150>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	f003 0310 	and.w	r3, r3, #16
 8005586:	b2db      	uxtb	r3, r3
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 8005588:	2b00      	cmp	r3, #0
 800558a:	d108      	bne.n	800559e <GetErrors+0x132>
			(!d_inputs.sq_kovsh_prob_left_2 && !d_inputs.sq_kovsh_prob_right_2);
 800558c:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <GetErrors+0x150>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <GetErrors+0x132>
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <GetErrors+0x134>
 800559e:	2300      	movs	r3, #0
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	b2d9      	uxtb	r1, r3
 80055a6:	4a06      	ldr	r2, [pc, #24]	; (80055c0 <GetErrors+0x154>)
 80055a8:	7f53      	ldrb	r3, [r2, #29]
 80055aa:	f361 0300 	bfi	r3, r1, #0, #1
 80055ae:	7753      	strb	r3, [r2, #29]

}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20006fc4 	.word	0x20006fc4
 80055c0:	200074ac 	.word	0x200074ac
 80055c4:	200073f8 	.word	0x200073f8
 80055c8:	200073e0 	.word	0x200073e0
 80055cc:	200073ef 	.word	0x200073ef
 80055d0:	200073ee 	.word	0x200073ee
 80055d4:	20006fc0 	.word	0x20006fc0

080055d8 <Init_timers>:

static uint8_t Init_timers()
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
	if(Timer_Init(&(sqHomeTON))==TIMER_FAIL)return 0;
 80055dc:	4818      	ldr	r0, [pc, #96]	; (8005640 <Init_timers+0x68>)
 80055de:	f001 f83d 	bl	800665c <Timer_Init>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <Init_timers+0x14>
 80055e8:	2300      	movs	r3, #0
 80055ea:	e027      	b.n	800563c <Init_timers+0x64>
	if(Timer_Init(&(sqWorkTON))==TIMER_FAIL)return 0;
 80055ec:	4815      	ldr	r0, [pc, #84]	; (8005644 <Init_timers+0x6c>)
 80055ee:	f001 f835 	bl	800665c <Timer_Init>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <Init_timers+0x24>
 80055f8:	2300      	movs	r3, #0
 80055fa:	e01f      	b.n	800563c <Init_timers+0x64>
	if(Timer_Init(&(automatTON))==TIMER_FAIL)return 0;
 80055fc:	4812      	ldr	r0, [pc, #72]	; (8005648 <Init_timers+0x70>)
 80055fe:	f001 f82d 	bl	800665c <Timer_Init>
 8005602:	4603      	mov	r3, r0
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <Init_timers+0x34>
 8005608:	2300      	movs	r3, #0
 800560a:	e017      	b.n	800563c <Init_timers+0x64>
	if(settings.retain.prob_toHomeTime==0)settings.retain.prob_toHomeTime = 10;
 800560c:	4b0f      	ldr	r3, [pc, #60]	; (800564c <Init_timers+0x74>)
 800560e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d102      	bne.n	800561a <Init_timers+0x42>
 8005614:	4b0d      	ldr	r3, [pc, #52]	; (800564c <Init_timers+0x74>)
 8005616:	220a      	movs	r2, #10
 8005618:	859a      	strh	r2, [r3, #44]	; 0x2c
	if(settings.retain.prob_toWorkTime==0)settings.retain.prob_toWorkTime = 10;
 800561a:	4b0c      	ldr	r3, [pc, #48]	; (800564c <Init_timers+0x74>)
 800561c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800561e:	2b00      	cmp	r3, #0
 8005620:	d102      	bne.n	8005628 <Init_timers+0x50>
 8005622:	4b0a      	ldr	r3, [pc, #40]	; (800564c <Init_timers+0x74>)
 8005624:	220a      	movs	r2, #10
 8005626:	85da      	strh	r2, [r3, #46]	; 0x2e
	if(settings.retain.automat_timer==0)settings.retain.automat_timer = 60;
 8005628:	4b08      	ldr	r3, [pc, #32]	; (800564c <Init_timers+0x74>)
 800562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562c:	2b00      	cmp	r3, #0
 800562e:	d102      	bne.n	8005636 <Init_timers+0x5e>
 8005630:	4b06      	ldr	r3, [pc, #24]	; (800564c <Init_timers+0x74>)
 8005632:	223c      	movs	r2, #60	; 0x3c
 8005634:	635a      	str	r2, [r3, #52]	; 0x34
	SetTimers();
 8005636:	f000 f80b 	bl	8005650 <SetTimers>
	return 1;
 800563a:	2301      	movs	r3, #1
}
 800563c:	4618      	mov	r0, r3
 800563e:	bd80      	pop	{r7, pc}
 8005640:	200073f8 	.word	0x200073f8
 8005644:	200073e0 	.word	0x200073e0
 8005648:	200073d0 	.word	0x200073d0
 800564c:	20007408 	.word	0x20007408

08005650 <SetTimers>:

static void SetTimers()
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
	// Тайм-аут движения влево
	sqHomeTON.IN = !d_inputs.sq_kovsh_prob_left_2 && d_outputs.uz_prob_rev;
 8005654:	4b2e      	ldr	r3, [pc, #184]	; (8005710 <SetTimers+0xc0>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f003 0310 	and.w	r3, r3, #16
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d108      	bne.n	8005674 <SetTimers+0x24>
 8005662:	4b2c      	ldr	r3, [pc, #176]	; (8005714 <SetTimers+0xc4>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <SetTimers+0x24>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <SetTimers+0x26>
 8005674:	2300      	movs	r3, #0
 8005676:	b2da      	uxtb	r2, r3
 8005678:	4b27      	ldr	r3, [pc, #156]	; (8005718 <SetTimers+0xc8>)
 800567a:	721a      	strb	r2, [r3, #8]
	sqHomeTON.SV = settings.retain.prob_toHomeTime * 1000;
 800567c:	4b27      	ldr	r3, [pc, #156]	; (800571c <SetTimers+0xcc>)
 800567e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005680:	461a      	mov	r2, r3
 8005682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005686:	fb03 f302 	mul.w	r3, r3, r2
 800568a:	461a      	mov	r2, r3
 800568c:	4b22      	ldr	r3, [pc, #136]	; (8005718 <SetTimers+0xc8>)
 800568e:	601a      	str	r2, [r3, #0]

	// Тайм-аут движения вправо
	sqWorkTON.IN = !d_inputs.sq_kovsh_prob_right_2 && d_outputs.uz_prob_forv;
 8005690:	4b1f      	ldr	r3, [pc, #124]	; (8005710 <SetTimers+0xc0>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d108      	bne.n	80056b0 <SetTimers+0x60>
 800569e:	4b1d      	ldr	r3, [pc, #116]	; (8005714 <SetTimers+0xc4>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <SetTimers+0x60>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <SetTimers+0x62>
 80056b0:	2300      	movs	r3, #0
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	4b1a      	ldr	r3, [pc, #104]	; (8005720 <SetTimers+0xd0>)
 80056b6:	721a      	strb	r2, [r3, #8]
	sqWorkTON.SV = settings.retain.prob_toWorkTime * 1000;
 80056b8:	4b18      	ldr	r3, [pc, #96]	; (800571c <SetTimers+0xcc>)
 80056ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056bc:	461a      	mov	r2, r3
 80056be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056c2:	fb03 f302 	mul.w	r3, r3, r2
 80056c6:	461a      	mov	r2, r3
 80056c8:	4b15      	ldr	r3, [pc, #84]	; (8005720 <SetTimers+0xd0>)
 80056ca:	601a      	str	r2, [r3, #0]

	// Таймер автоматической работы
	automatTON.IN = d_inputs.sb_auto_local && !cycle_probotbor && !meas_data.nakopitelFull;
 80056cc:	4b10      	ldr	r3, [pc, #64]	; (8005710 <SetTimers+0xc0>)
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <SetTimers+0x9e>
 80056da:	4b12      	ldr	r3, [pc, #72]	; (8005724 <SetTimers+0xd4>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d105      	bne.n	80056ee <SetTimers+0x9e>
 80056e2:	4b11      	ldr	r3, [pc, #68]	; (8005728 <SetTimers+0xd8>)
 80056e4:	8adb      	ldrh	r3, [r3, #22]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <SetTimers+0x9e>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <SetTimers+0xa0>
 80056ee:	2300      	movs	r3, #0
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	4b0e      	ldr	r3, [pc, #56]	; (800572c <SetTimers+0xdc>)
 80056f4:	721a      	strb	r2, [r3, #8]
	automatTON.SV = settings.retain.automat_timer * 1000;
 80056f6:	4b09      	ldr	r3, [pc, #36]	; (800571c <SetTimers+0xcc>)
 80056f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056fe:	fb02 f303 	mul.w	r3, r2, r3
 8005702:	4a0a      	ldr	r2, [pc, #40]	; (800572c <SetTimers+0xdc>)
 8005704:	6013      	str	r3, [r2, #0]

	// Осталось до следующей пробы
}
 8005706:	bf00      	nop
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	20006fc4 	.word	0x20006fc4
 8005714:	20006fc0 	.word	0x20006fc0
 8005718:	200073f8 	.word	0x200073f8
 800571c:	20007408 	.word	0x20007408
 8005720:	200073e0 	.word	0x200073e0
 8005724:	200073f2 	.word	0x200073f2
 8005728:	200074ac 	.word	0x200074ac
 800572c:	200073d0 	.word	0x200073d0

08005730 <Moving>:

static void Moving()
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
	if(!CheckCriticalError())
 8005734:	f000 f8ba 	bl	80058ac <CheckCriticalError>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d102      	bne.n	8005744 <Moving+0x14>
	{
		cycle_probotbor = 0;
 800573e:	4b47      	ldr	r3, [pc, #284]	; (800585c <Moving+0x12c>)
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]
	}
	// Условия остановки движения
	if(cycle_probotbor || cycle_vozvrat)
 8005744:	4b45      	ldr	r3, [pc, #276]	; (800585c <Moving+0x12c>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d103      	bne.n	8005754 <Moving+0x24>
 800574c:	4b44      	ldr	r3, [pc, #272]	; (8005860 <Moving+0x130>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d03e      	beq.n	80057d2 <Moving+0xa2>
	{
		// остановка по концевикам b
		if((targetSq && (d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2))||
 8005754:	4b43      	ldr	r3, [pc, #268]	; (8005864 <Moving+0x134>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00d      	beq.n	8005778 <Moving+0x48>
 800575c:	4b42      	ldr	r3, [pc, #264]	; (8005868 <Moving+0x138>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d120      	bne.n	80057ac <Moving+0x7c>
 800576a:	4b3f      	ldr	r3, [pc, #252]	; (8005868 <Moving+0x138>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d119      	bne.n	80057ac <Moving+0x7c>
				(!targetSq && (d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2))
 8005778:	4b3a      	ldr	r3, [pc, #232]	; (8005864 <Moving+0x134>)
 800577a:	781b      	ldrb	r3, [r3, #0]
		if((targetSq && (d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2))||
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10d      	bne.n	800579c <Moving+0x6c>
				(!targetSq && (d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2))
 8005780:	4b39      	ldr	r3, [pc, #228]	; (8005868 <Moving+0x138>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10e      	bne.n	80057ac <Moving+0x7c>
 800578e:	4b36      	ldr	r3, [pc, #216]	; (8005868 <Moving+0x138>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	f003 0310 	and.w	r3, r3, #16
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d107      	bne.n	80057ac <Moving+0x7c>
				|| rtSq_kovsh_left_1 || rtSq_kovsh_right_1)
 800579c:	4b33      	ldr	r3, [pc, #204]	; (800586c <Moving+0x13c>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d103      	bne.n	80057ac <Moving+0x7c>
 80057a4:	4b32      	ldr	r3, [pc, #200]	; (8005870 <Moving+0x140>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <Moving+0x94>
		{
			if(cycle_probotbor)
 80057ac:	4b2b      	ldr	r3, [pc, #172]	; (800585c <Moving+0x12c>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <Moving+0x90>
			{
				meas_data.probInKanistra++;
 80057b4:	4b2f      	ldr	r3, [pc, #188]	; (8005874 <Moving+0x144>)
 80057b6:	8a9b      	ldrh	r3, [r3, #20]
 80057b8:	3301      	adds	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	4b2d      	ldr	r3, [pc, #180]	; (8005874 <Moving+0x144>)
 80057be:	829a      	strh	r2, [r3, #20]
			}
			StopCycles();
 80057c0:	f000 f8c4 	bl	800594c <StopCycles>

		}
		// остановка по критической ошибке
		if(!CheckCriticalError()){
 80057c4:	f000 f872 	bl	80058ac <CheckCriticalError>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <Moving+0xa2>
			StopCycles();
 80057ce:	f000 f8bd 	bl	800594c <StopCycles>
		}
	}


	// Управление двигателем
	if(cycle_probotbor || cycle_vozvrat)
 80057d2:	4b22      	ldr	r3, [pc, #136]	; (800585c <Moving+0x12c>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d103      	bne.n	80057e2 <Moving+0xb2>
 80057da:	4b21      	ldr	r3, [pc, #132]	; (8005860 <Moving+0x130>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d023      	beq.n	800582a <Moving+0xfa>
	{
		d_outputs.prob_ready=0;
 80057e2:	4a25      	ldr	r2, [pc, #148]	; (8005878 <Moving+0x148>)
 80057e4:	7813      	ldrb	r3, [r2, #0]
 80057e6:	f36f 0382 	bfc	r3, #2, #1
 80057ea:	7013      	strb	r3, [r2, #0]
		if(targetSq)
 80057ec:	4b1d      	ldr	r3, [pc, #116]	; (8005864 <Moving+0x134>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <Moving+0xda>
		{
			d_outputs.uz_prob_forv = 1;
 80057f4:	4a20      	ldr	r2, [pc, #128]	; (8005878 <Moving+0x148>)
 80057f6:	7813      	ldrb	r3, [r2, #0]
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	7013      	strb	r3, [r2, #0]
			d_outputs.uz_prob_rev = 0;
 80057fe:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <Moving+0x148>)
 8005800:	7813      	ldrb	r3, [r2, #0]
 8005802:	f36f 0341 	bfc	r3, #1, #1
 8005806:	7013      	strb	r3, [r2, #0]
 8005808:	e009      	b.n	800581e <Moving+0xee>
		}
		else
		{
			d_outputs.uz_prob_forv = 0;
 800580a:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <Moving+0x148>)
 800580c:	7813      	ldrb	r3, [r2, #0]
 800580e:	f36f 0300 	bfc	r3, #0, #1
 8005812:	7013      	strb	r3, [r2, #0]
			d_outputs.uz_prob_rev = 1;
 8005814:	4a18      	ldr	r2, [pc, #96]	; (8005878 <Moving+0x148>)
 8005816:	7813      	ldrb	r3, [r2, #0]
 8005818:	f043 0302 	orr.w	r3, r3, #2
 800581c:	7013      	strb	r3, [r2, #0]
		}
		d_outputs.prob_ready = 0;
 800581e:	4a16      	ldr	r2, [pc, #88]	; (8005878 <Moving+0x148>)
 8005820:	7813      	ldrb	r3, [r2, #0]
 8005822:	f36f 0382 	bfc	r3, #2, #1
 8005826:	7013      	strb	r3, [r2, #0]
 8005828:	e015      	b.n	8005856 <Moving+0x126>
	}
	else
	{
		d_outputs.uz_prob_forv =0 ;
 800582a:	4a13      	ldr	r2, [pc, #76]	; (8005878 <Moving+0x148>)
 800582c:	7813      	ldrb	r3, [r2, #0]
 800582e:	f36f 0300 	bfc	r3, #0, #1
 8005832:	7013      	strb	r3, [r2, #0]
		d_outputs.uz_prob_rev = 0 ;
 8005834:	4a10      	ldr	r2, [pc, #64]	; (8005878 <Moving+0x148>)
 8005836:	7813      	ldrb	r3, [r2, #0]
 8005838:	f36f 0341 	bfc	r3, #1, #1
 800583c:	7013      	strb	r3, [r2, #0]
		d_outputs.prob_ready = CheckCommonError();
 800583e:	f000 f81d 	bl	800587c <CheckCommonError>
 8005842:	4603      	mov	r3, r0
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	b2d9      	uxtb	r1, r3
 800584a:	4a0b      	ldr	r2, [pc, #44]	; (8005878 <Moving+0x148>)
 800584c:	7813      	ldrb	r3, [r2, #0]
 800584e:	f361 0382 	bfi	r3, r1, #2, #1
 8005852:	7013      	strb	r3, [r2, #0]
	}
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	200073f2 	.word	0x200073f2
 8005860:	200073f3 	.word	0x200073f3
 8005864:	200073ec 	.word	0x200073ec
 8005868:	20006fc4 	.word	0x20006fc4
 800586c:	200073cd 	.word	0x200073cd
 8005870:	200073ed 	.word	0x200073ed
 8005874:	200074ac 	.word	0x200074ac
 8005878:	20006fc0 	.word	0x20006fc0

0800587c <CheckCommonError>:

static uint8_t CheckCommonError()
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
	uint16_t *errPointer = (uint16_t*)&(meas_data.errors);
 8005882:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <CheckCommonError+0x2c>)
 8005884:	607b      	str	r3, [r7, #4]
	uint16_t result = *errPointer ? 0 : 1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	bf0c      	ite	eq
 800588e:	2301      	moveq	r3, #1
 8005890:	2300      	movne	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	807b      	strh	r3, [r7, #2]
	return result;
 8005896:	887b      	ldrh	r3, [r7, #2]
 8005898:	b2db      	uxtb	r3, r3

}
 800589a:	4618      	mov	r0, r3
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	200074c8 	.word	0x200074c8

080058ac <CheckCriticalError>:

static uint8_t CheckCriticalError()
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
	// Ошибки, при которых нужно срочно остановить ковш
	uint8_t error =  meas_data.errors.sb_abort_err ||
 80058b2:	4b24      	ldr	r3, [pc, #144]	; (8005944 <CheckCriticalError+0x98>)
 80058b4:	7f1b      	ldrb	r3, [r3, #28]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	b2db      	uxtb	r3, r3
			meas_data.errors.uz_err ||
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
			(meas_data.errors.timeout_moving_left_err)||
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d130      	bne.n	8005922 <CheckCriticalError+0x76>
	uint8_t error =  meas_data.errors.sb_abort_err ||
 80058c0:	4b20      	ldr	r3, [pc, #128]	; (8005944 <CheckCriticalError+0x98>)
 80058c2:	7f1b      	ldrb	r3, [r3, #28]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d129      	bne.n	8005922 <CheckCriticalError+0x76>
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 80058ce:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <CheckCriticalError+0x98>)
 80058d0:	7f1b      	ldrb	r3, [r3, #28]
 80058d2:	f003 0310 	and.w	r3, r3, #16
 80058d6:	b2db      	uxtb	r3, r3
			meas_data.errors.uz_err ||
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d006      	beq.n	80058ea <CheckCriticalError+0x3e>
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 80058dc:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <CheckCriticalError+0x9c>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d11b      	bne.n	8005922 <CheckCriticalError+0x76>
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
 80058ea:	4b16      	ldr	r3, [pc, #88]	; (8005944 <CheckCriticalError+0x98>)
 80058ec:	7f1b      	ldrb	r3, [r3, #28]
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	b2db      	uxtb	r3, r3
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d006      	beq.n	8005906 <CheckCriticalError+0x5a>
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
 80058f8:	4b13      	ldr	r3, [pc, #76]	; (8005948 <CheckCriticalError+0x9c>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10d      	bne.n	8005922 <CheckCriticalError+0x76>
 8005906:	4b0f      	ldr	r3, [pc, #60]	; (8005944 <CheckCriticalError+0x98>)
 8005908:	7f1b      	ldrb	r3, [r3, #28]
 800590a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d106      	bne.n	8005922 <CheckCriticalError+0x76>
			(meas_data.errors.timeout_moving_left_err)||
 8005914:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <CheckCriticalError+0x98>)
 8005916:	7f1b      	ldrb	r3, [r3, #28]
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <CheckCriticalError+0x7a>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <CheckCriticalError+0x7c>
 8005926:	2300      	movs	r3, #0
	uint8_t error =  meas_data.errors.sb_abort_err ||
 8005928:	71fb      	strb	r3, [r7, #7]
			(meas_data.errors.timeout_moving_right_err);
	return !error;
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	2b00      	cmp	r3, #0
 800592e:	bf0c      	ite	eq
 8005930:	2301      	moveq	r3, #1
 8005932:	2300      	movne	r3, #0
 8005934:	b2db      	uxtb	r3, r3
}
 8005936:	4618      	mov	r0, r3
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	200074ac 	.word	0x200074ac
 8005948:	20006fc0 	.word	0x20006fc0

0800594c <StopCycles>:

static void StopCycles()
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
	cycle_probotbor = 0;
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <StopCycles+0x1c>)
 8005952:	2200      	movs	r2, #0
 8005954:	701a      	strb	r2, [r3, #0]
	cycle_vozvrat = 0;
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <StopCycles+0x20>)
 8005958:	2200      	movs	r2, #0
 800595a:	701a      	strb	r2, [r3, #0]
}
 800595c:	bf00      	nop
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	200073f2 	.word	0x200073f2
 800596c:	200073f3 	.word	0x200073f3

08005970 <OnCommandCycle>:

static void OnCommandCycle()
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
	// действия по нажатию кнопки
	if(d_inputs.sb_make_proba ||
 8005974:	4b4d      	ldr	r3, [pc, #308]	; (8005aac <OnCommandCycle+0x13c>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d103      	bne.n	800598a <OnCommandCycle+0x1a>
			settings.non_retain.start_otbor)
 8005982:	4b4b      	ldr	r3, [pc, #300]	; (8005ab0 <OnCommandCycle+0x140>)
 8005984:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
	if(d_inputs.sb_make_proba ||
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <OnCommandCycle+0x26>
	{
		settings.non_retain.start_otbor = 0;
 800598a:	4b49      	ldr	r3, [pc, #292]	; (8005ab0 <OnCommandCycle+0x140>)
 800598c:	2200      	movs	r2, #0
 800598e:	871a      	strh	r2, [r3, #56]	; 0x38
		startOtborCommand = 1;
 8005990:	4b48      	ldr	r3, [pc, #288]	; (8005ab4 <OnCommandCycle+0x144>)
 8005992:	2201      	movs	r2, #1
 8005994:	701a      	strb	r2, [r3, #0]
	}

	if(meas_data.errors.need_return_err &&
 8005996:	4b48      	ldr	r3, [pc, #288]	; (8005ab8 <OnCommandCycle+0x148>)
 8005998:	7f5b      	ldrb	r3, [r3, #29]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d047      	beq.n	8005a34 <OnCommandCycle+0xc4>
			CheckCriticalError() &&
 80059a4:	f7ff ff82 	bl	80058ac <CheckCriticalError>
 80059a8:	4603      	mov	r3, r0
	if(meas_data.errors.need_return_err &&
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d042      	beq.n	8005a34 <OnCommandCycle+0xc4>
			!cycle_vozvrat &&
 80059ae:	4b43      	ldr	r3, [pc, #268]	; (8005abc <OnCommandCycle+0x14c>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
			CheckCriticalError() &&
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d13e      	bne.n	8005a34 <OnCommandCycle+0xc4>
			(d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat))
 80059b6:	4b3d      	ldr	r3, [pc, #244]	; (8005aac <OnCommandCycle+0x13c>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059be:	b2db      	uxtb	r3, r3
			!cycle_vozvrat &&
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d103      	bne.n	80059cc <OnCommandCycle+0x5c>
			(d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat))
 80059c4:	4b3a      	ldr	r3, [pc, #232]	; (8005ab0 <OnCommandCycle+0x140>)
 80059c6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d033      	beq.n	8005a34 <OnCommandCycle+0xc4>
	{
		cycle_probotbor = 0;
 80059cc:	4b3c      	ldr	r3, [pc, #240]	; (8005ac0 <OnCommandCycle+0x150>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	701a      	strb	r2, [r3, #0]
		cycle_vozvrat = 1;
 80059d2:	4b3a      	ldr	r3, [pc, #232]	; (8005abc <OnCommandCycle+0x14c>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	701a      	strb	r2, [r3, #0]
		if(d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2 ){
 80059d8:	4b34      	ldr	r3, [pc, #208]	; (8005aac <OnCommandCycle+0x13c>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <OnCommandCycle+0x84>
 80059e6:	4b31      	ldr	r3, [pc, #196]	; (8005aac <OnCommandCycle+0x13c>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <OnCommandCycle+0x8c>
			targetSq = 1;
 80059f4:	4b33      	ldr	r3, [pc, #204]	; (8005ac4 <OnCommandCycle+0x154>)
 80059f6:	2201      	movs	r2, #1
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	e01b      	b.n	8005a34 <OnCommandCycle+0xc4>
		}
		else if(d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2){
 80059fc:	4b2b      	ldr	r3, [pc, #172]	; (8005aac <OnCommandCycle+0x13c>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <OnCommandCycle+0xa8>
 8005a0a:	4b28      	ldr	r3, [pc, #160]	; (8005aac <OnCommandCycle+0x13c>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <OnCommandCycle+0xb0>
			targetSq = 0;
 8005a18:	4b2a      	ldr	r3, [pc, #168]	; (8005ac4 <OnCommandCycle+0x154>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	e009      	b.n	8005a34 <OnCommandCycle+0xc4>
		}
		else{
			targetSq = !targetSq;
 8005a20:	4b28      	ldr	r3, [pc, #160]	; (8005ac4 <OnCommandCycle+0x154>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bf0c      	ite	eq
 8005a28:	2301      	moveq	r3, #1
 8005a2a:	2300      	movne	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4b24      	ldr	r3, [pc, #144]	; (8005ac4 <OnCommandCycle+0x154>)
 8005a32:	701a      	strb	r2, [r3, #0]
		};
	}
	settings.non_retain.start_vozvrat = 0;
 8005a34:	4b1e      	ldr	r3, [pc, #120]	; (8005ab0 <OnCommandCycle+0x140>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	875a      	strh	r2, [r3, #58]	; 0x3a

	if(startOtborCommand)
 8005a3a:	4b1e      	ldr	r3, [pc, #120]	; (8005ab4 <OnCommandCycle+0x144>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d032      	beq.n	8005aa8 <OnCommandCycle+0x138>
	{
		startOtborCommand = 0;
 8005a42:	4b1c      	ldr	r3, [pc, #112]	; (8005ab4 <OnCommandCycle+0x144>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
		if(d_outputs.prob_ready)
 8005a48:	4b1f      	ldr	r3, [pc, #124]	; (8005ac8 <OnCommandCycle+0x158>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d028      	beq.n	8005aa8 <OnCommandCycle+0x138>
		{
			cycle_probotbor = 1;
 8005a56:	4b1a      	ldr	r3, [pc, #104]	; (8005ac0 <OnCommandCycle+0x150>)
 8005a58:	2201      	movs	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]
			cycle_vozvrat = 0;
 8005a5c:	4b17      	ldr	r3, [pc, #92]	; (8005abc <OnCommandCycle+0x14c>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	701a      	strb	r2, [r3, #0]

			if(d_inputs.sq_kovsh_prob_left_2 || d_inputs.sq_kovsh_prob_left_1)
 8005a62:	4b12      	ldr	r3, [pc, #72]	; (8005aac <OnCommandCycle+0x13c>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	f003 0310 	and.w	r3, r3, #16
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d106      	bne.n	8005a7e <OnCommandCycle+0x10e>
 8005a70:	4b0e      	ldr	r3, [pc, #56]	; (8005aac <OnCommandCycle+0x13c>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <OnCommandCycle+0x116>
			{
				targetSq = 1;
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <OnCommandCycle+0x154>)
 8005a80:	2201      	movs	r2, #1
 8005a82:	701a      	strb	r2, [r3, #0]
			{
				targetSq = 0;
			}
		}
	}
}
 8005a84:	e010      	b.n	8005aa8 <OnCommandCycle+0x138>
			else if(d_inputs.sq_kovsh_prob_right_2 || d_inputs.sq_kovsh_prob_right_1)
 8005a86:	4b09      	ldr	r3, [pc, #36]	; (8005aac <OnCommandCycle+0x13c>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d106      	bne.n	8005aa2 <OnCommandCycle+0x132>
 8005a94:	4b05      	ldr	r3, [pc, #20]	; (8005aac <OnCommandCycle+0x13c>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <OnCommandCycle+0x138>
				targetSq = 0;
 8005aa2:	4b08      	ldr	r3, [pc, #32]	; (8005ac4 <OnCommandCycle+0x154>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	701a      	strb	r2, [r3, #0]
}
 8005aa8:	bf00      	nop
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	20006fc4 	.word	0x20006fc4
 8005ab0:	20007408 	.word	0x20007408
 8005ab4:	200073f0 	.word	0x200073f0
 8005ab8:	200074ac 	.word	0x200074ac
 8005abc:	200073f3 	.word	0x200073f3
 8005ac0:	200073f2 	.word	0x200073f2
 8005ac4:	200073ec 	.word	0x200073ec
 8005ac8:	20006fc0 	.word	0x20006fc0

08005acc <Indication>:

static void Indication()
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
	meas_data.probotbor_ready = d_outputs.prob_ready;
 8005ad0:	4b14      	ldr	r3, [pc, #80]	; (8005b24 <Indication+0x58>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <Indication+0x5c>)
 8005ade:	819a      	strh	r2, [r3, #12]
	meas_data.probotbor_busy = cycle_probotbor;
 8005ae0:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <Indication+0x60>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <Indication+0x5c>)
 8005ae8:	81da      	strh	r2, [r3, #14]
	meas_data.vozvrat_probotbor_busy = cycle_vozvrat;
 8005aea:	4b11      	ldr	r3, [pc, #68]	; (8005b30 <Indication+0x64>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	4b0d      	ldr	r3, [pc, #52]	; (8005b28 <Indication+0x5c>)
 8005af2:	821a      	strh	r2, [r3, #16]
	meas_data.automat_mode = d_inputs.sb_auto_local;
 8005af4:	4b0f      	ldr	r3, [pc, #60]	; (8005b34 <Indication+0x68>)
 8005af6:	785b      	ldrb	r3, [r3, #1]
 8005af8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <Indication+0x5c>)
 8005b02:	825a      	strh	r2, [r3, #18]
	meas_data.toNextOtborTime = settings.retain.automat_timer - automatTON.ET/1000;
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <Indication+0x6c>)
 8005b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b08:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <Indication+0x70>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	490c      	ldr	r1, [pc, #48]	; (8005b40 <Indication+0x74>)
 8005b0e:	fba1 1303 	umull	r1, r3, r1, r3
 8005b12:	099b      	lsrs	r3, r3, #6
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	4a04      	ldr	r2, [pc, #16]	; (8005b28 <Indication+0x5c>)
 8005b18:	6193      	str	r3, [r2, #24]
}
 8005b1a:	bf00      	nop
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	20006fc0 	.word	0x20006fc0
 8005b28:	200074ac 	.word	0x200074ac
 8005b2c:	200073f2 	.word	0x200073f2
 8005b30:	200073f3 	.word	0x200073f3
 8005b34:	20006fc4 	.word	0x20006fc4
 8005b38:	20007408 	.word	0x20007408
 8005b3c:	200073d0 	.word	0x200073d0
 8005b40:	10624dd3 	.word	0x10624dd3

08005b44 <GetPositiveFronts>:

static void GetPositiveFronts()
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
	rtSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_left_1 && !lastSq_kovsh_left_1;
 8005b48:	4b41      	ldr	r3, [pc, #260]	; (8005c50 <GetPositiveFronts+0x10c>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <GetPositiveFronts+0x1e>
 8005b56:	4b3f      	ldr	r3, [pc, #252]	; (8005c54 <GetPositiveFronts+0x110>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <GetPositiveFronts+0x1e>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <GetPositiveFronts+0x20>
 8005b62:	2300      	movs	r3, #0
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	4b3c      	ldr	r3, [pc, #240]	; (8005c58 <GetPositiveFronts+0x114>)
 8005b68:	701a      	strb	r2, [r3, #0]
	rtSq_kovsh_right_1 = d_inputs.sq_kovsh_prob_right_1 && !lastSq_kovsh_right_1;
 8005b6a:	4b39      	ldr	r3, [pc, #228]	; (8005c50 <GetPositiveFronts+0x10c>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <GetPositiveFronts+0x40>
 8005b78:	4b38      	ldr	r3, [pc, #224]	; (8005c5c <GetPositiveFronts+0x118>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <GetPositiveFronts+0x40>
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <GetPositiveFronts+0x42>
 8005b84:	2300      	movs	r3, #0
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	4b35      	ldr	r3, [pc, #212]	; (8005c60 <GetPositiveFronts+0x11c>)
 8005b8a:	701a      	strb	r2, [r3, #0]
	rtSbMakeProba =  (d_inputs.sb_make_proba || settings.non_retain.start_otbor) && !lastSbMakeProba;
 8005b8c:	4b30      	ldr	r3, [pc, #192]	; (8005c50 <GetPositiveFronts+0x10c>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <GetPositiveFronts+0x5e>
 8005b9a:	4b32      	ldr	r3, [pc, #200]	; (8005c64 <GetPositiveFronts+0x120>)
 8005b9c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <GetPositiveFronts+0x6a>
 8005ba2:	4b31      	ldr	r3, [pc, #196]	; (8005c68 <GetPositiveFronts+0x124>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <GetPositiveFronts+0x6a>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <GetPositiveFronts+0x6c>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	4b2e      	ldr	r3, [pc, #184]	; (8005c6c <GetPositiveFronts+0x128>)
 8005bb4:	701a      	strb	r2, [r3, #0]
	rtSbMakeVozvrat = (d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat) && !lastSbMakeVozvrat;
 8005bb6:	4b26      	ldr	r3, [pc, #152]	; (8005c50 <GetPositiveFronts+0x10c>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d103      	bne.n	8005bcc <GetPositiveFronts+0x88>
 8005bc4:	4b27      	ldr	r3, [pc, #156]	; (8005c64 <GetPositiveFronts+0x120>)
 8005bc6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <GetPositiveFronts+0x94>
 8005bcc:	4b28      	ldr	r3, [pc, #160]	; (8005c70 <GetPositiveFronts+0x12c>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <GetPositiveFronts+0x94>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <GetPositiveFronts+0x96>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	4b25      	ldr	r3, [pc, #148]	; (8005c74 <GetPositiveFronts+0x130>)
 8005bde:	701a      	strb	r2, [r3, #0]
	lastSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_left_1;
 8005be0:	4b1b      	ldr	r3, [pc, #108]	; (8005c50 <GetPositiveFronts+0x10c>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	4b19      	ldr	r3, [pc, #100]	; (8005c54 <GetPositiveFronts+0x110>)
 8005bee:	701a      	strb	r2, [r3, #0]
	lastSq_kovsh_right_1 = d_inputs.sq_kovsh_prob_right_1;
 8005bf0:	4b17      	ldr	r3, [pc, #92]	; (8005c50 <GetPositiveFronts+0x10c>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	4b17      	ldr	r3, [pc, #92]	; (8005c5c <GetPositiveFronts+0x118>)
 8005bfe:	701a      	strb	r2, [r3, #0]
	lastSbMakeProba = d_inputs.sb_make_proba || settings.non_retain.start_otbor;
 8005c00:	4b13      	ldr	r3, [pc, #76]	; (8005c50 <GetPositiveFronts+0x10c>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d103      	bne.n	8005c16 <GetPositiveFronts+0xd2>
 8005c0e:	4b15      	ldr	r3, [pc, #84]	; (8005c64 <GetPositiveFronts+0x120>)
 8005c10:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <GetPositiveFronts+0xd6>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <GetPositiveFronts+0xd8>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	4b12      	ldr	r3, [pc, #72]	; (8005c68 <GetPositiveFronts+0x124>)
 8005c20:	701a      	strb	r2, [r3, #0]
	lastSbMakeVozvrat = d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat;
 8005c22:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <GetPositiveFronts+0x10c>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d103      	bne.n	8005c38 <GetPositiveFronts+0xf4>
 8005c30:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <GetPositiveFronts+0x120>)
 8005c32:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <GetPositiveFronts+0xf8>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <GetPositiveFronts+0xfa>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <GetPositiveFronts+0x12c>)
 8005c42:	701a      	strb	r2, [r3, #0]

}
 8005c44:	bf00      	nop
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20006fc4 	.word	0x20006fc4
 8005c54:	200073f1 	.word	0x200073f1
 8005c58:	200073cd 	.word	0x200073cd
 8005c5c:	200073dc 	.word	0x200073dc
 8005c60:	200073ed 	.word	0x200073ed
 8005c64:	20007408 	.word	0x20007408
 8005c68:	20007404 	.word	0x20007404
 8005c6c:	200073ef 	.word	0x200073ef
 8005c70:	200073cc 	.word	0x200073cc
 8005c74:	200073ee 	.word	0x200073ee

08005c78 <NakopitelCheck>:

static void NakopitelCheck()
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
	if(settings.retain.nakop_SV==0)settings.retain.nakop_SV = 1;
 8005c7c:	4b10      	ldr	r3, [pc, #64]	; (8005cc0 <NakopitelCheck+0x48>)
 8005c7e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d102      	bne.n	8005c8a <NakopitelCheck+0x12>
 8005c84:	4b0e      	ldr	r3, [pc, #56]	; (8005cc0 <NakopitelCheck+0x48>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	861a      	strh	r2, [r3, #48]	; 0x30
	if(!d_inputs.sq_kanistra)meas_data.probInKanistra = 0;
 8005c8a:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <NakopitelCheck+0x4c>)
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <NakopitelCheck+0x26>
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <NakopitelCheck+0x50>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	829a      	strh	r2, [r3, #20]
	meas_data.nakopitelFull = meas_data.probInKanistra>=settings.retain.nakop_SV;
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <NakopitelCheck+0x50>)
 8005ca0:	8a9a      	ldrh	r2, [r3, #20]
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <NakopitelCheck+0x48>)
 8005ca4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	bf2c      	ite	cs
 8005caa:	2301      	movcs	r3, #1
 8005cac:	2300      	movcc	r3, #0
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <NakopitelCheck+0x50>)
 8005cb4:	82da      	strh	r2, [r3, #22]

}
 8005cb6:	bf00      	nop
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20007408 	.word	0x20007408
 8005cc4:	20006fc4 	.word	0x20006fc4
 8005cc8:	200074ac 	.word	0x200074ac

08005ccc <settingsLoadFRAM>:
Meas_Data meas_data;

static uint8_t checksumCalc (uint8_t * data, uint16_t size);

int settingsLoadFRAM (void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
	int result = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
	uint16_t header;

	result = framDataRead(FRAM_SETTINGS_ADDR, (uint8_t *) &header, sizeof(header));
 8005cd6:	f107 0308 	add.w	r3, r7, #8
 8005cda:	2202      	movs	r2, #2
 8005cdc:	4619      	mov	r1, r3
 8005cde:	2000      	movs	r0, #0
 8005ce0:	f7fb ff6e 	bl	8001bc0 <framDataRead>
 8005ce4:	60f8      	str	r0, [r7, #12]
	if (!result)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d130      	bne.n	8005d4e <settingsLoadFRAM+0x82>
	{
		if (header == FRAM_SETTINGS_HEADER)
 8005cec:	893b      	ldrh	r3, [r7, #8]
 8005cee:	f64a 32d8 	movw	r2, #43992	; 0xabd8
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d128      	bne.n	8005d48 <settingsLoadFRAM+0x7c>
		{
			result = framDataRead(FRAM_SETTINGS_ADDR + sizeof(header), (uint8_t *) &(settings.retain), sizeof(Retain));
 8005cf6:	2238      	movs	r2, #56	; 0x38
 8005cf8:	4917      	ldr	r1, [pc, #92]	; (8005d58 <settingsLoadFRAM+0x8c>)
 8005cfa:	2002      	movs	r0, #2
 8005cfc:	f7fb ff60 	bl	8001bc0 <framDataRead>
 8005d00:	60f8      	str	r0, [r7, #12]
			if (!result)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d11b      	bne.n	8005d40 <settingsLoadFRAM+0x74>
			{

				uint8_t xor = checksumCalc((uint8_t *) &(settings.retain), sizeof(Retain));
 8005d08:	2138      	movs	r1, #56	; 0x38
 8005d0a:	4813      	ldr	r0, [pc, #76]	; (8005d58 <settingsLoadFRAM+0x8c>)
 8005d0c:	f000 f864 	bl	8005dd8 <checksumCalc>
 8005d10:	4603      	mov	r3, r0
 8005d12:	72fb      	strb	r3, [r7, #11]
				uint8_t checksum;
				result = framDataRead(FRAM_SETTINGS_ADDR + sizeof(header) + sizeof(Retain), &checksum, sizeof(checksum));
 8005d14:	1dfb      	adds	r3, r7, #7
 8005d16:	2201      	movs	r2, #1
 8005d18:	4619      	mov	r1, r3
 8005d1a:	203a      	movs	r0, #58	; 0x3a
 8005d1c:	f7fb ff50 	bl	8001bc0 <framDataRead>
 8005d20:	60f8      	str	r0, [r7, #12]
 				if (!result)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d107      	bne.n	8005d38 <settingsLoadFRAM+0x6c>
				{
					if (xor != checksum)
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	7afa      	ldrb	r2, [r7, #11]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d00e      	beq.n	8005d4e <settingsLoadFRAM+0x82>
						result = -2;
 8005d30:	f06f 0301 	mvn.w	r3, #1
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	e00a      	b.n	8005d4e <settingsLoadFRAM+0x82>
				}
				else
					result = -1;
 8005d38:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	e006      	b.n	8005d4e <settingsLoadFRAM+0x82>
			}
			else
				result = -1;
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e002      	b.n	8005d4e <settingsLoadFRAM+0x82>
		}
		else
			result = -1;
 8005d48:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4c:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20007408 	.word	0x20007408

08005d5c <settingsSaveFRAM>:

int settingsSaveFRAM (void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
	int result = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]
	uint16_t header = FRAM_SETTINGS_HEADER, address = FRAM_SETTINGS_ADDR;
 8005d66:	f64a 33d8 	movw	r3, #43992	; 0xabd8
 8005d6a:	813b      	strh	r3, [r7, #8]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	817b      	strh	r3, [r7, #10]

	result = framDataWrite(address, (uint8_t *) &header, sizeof(header));
 8005d70:	f107 0108 	add.w	r1, r7, #8
 8005d74:	897b      	ldrh	r3, [r7, #10]
 8005d76:	2202      	movs	r2, #2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fb ff5f 	bl	8001c3c <framDataWrite>
 8005d7e:	60f8      	str	r0, [r7, #12]
	address += sizeof(header);
 8005d80:	897b      	ldrh	r3, [r7, #10]
 8005d82:	3302      	adds	r3, #2
 8005d84:	817b      	strh	r3, [r7, #10]
	vTaskSuspendAll();	// Останавливаем планировщик, чтобы предотвратить фоновое изменение структуры settings
 8005d86:	f009 fcf7 	bl	800f778 <vTaskSuspendAll>
	result |= framDataWrite(address, (uint8_t *) &(settings.retain), sizeof(Retain));
 8005d8a:	897b      	ldrh	r3, [r7, #10]
 8005d8c:	2238      	movs	r2, #56	; 0x38
 8005d8e:	4911      	ldr	r1, [pc, #68]	; (8005dd4 <settingsSaveFRAM+0x78>)
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fb ff53 	bl	8001c3c <framDataWrite>
 8005d96:	4602      	mov	r2, r0
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
	address += sizeof(Retain);
 8005d9e:	897b      	ldrh	r3, [r7, #10]
 8005da0:	3338      	adds	r3, #56	; 0x38
 8005da2:	817b      	strh	r3, [r7, #10]
	uint8_t xor = checksumCalc((uint8_t *) &(settings.retain), sizeof(Retain));
 8005da4:	2138      	movs	r1, #56	; 0x38
 8005da6:	480b      	ldr	r0, [pc, #44]	; (8005dd4 <settingsSaveFRAM+0x78>)
 8005da8:	f000 f816 	bl	8005dd8 <checksumCalc>
 8005dac:	4603      	mov	r3, r0
 8005dae:	71fb      	strb	r3, [r7, #7]
	xTaskResumeAll();	// Возобновляем работу планировщика
 8005db0:	f009 fcf0 	bl	800f794 <xTaskResumeAll>
	result |= framDataWrite(address, &xor, sizeof(xor));
 8005db4:	1df9      	adds	r1, r7, #7
 8005db6:	897b      	ldrh	r3, [r7, #10]
 8005db8:	2201      	movs	r2, #1
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fb ff3e 	bl	8001c3c <framDataWrite>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]

	return result;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20007408 	.word	0x20007408

08005dd8 <checksumCalc>:

static uint8_t checksumCalc (uint8_t * data, uint16_t size)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	807b      	strh	r3, [r7, #2]
	uint8_t xor = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size; i++)
 8005de8:	2300      	movs	r3, #0
 8005dea:	60bb      	str	r3, [r7, #8]
 8005dec:	e009      	b.n	8005e02 <checksumCalc+0x2a>
		xor ^= data[i];
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	4413      	add	r3, r2
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
 8005df8:	4053      	eors	r3, r2
 8005dfa:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size; i++)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	60bb      	str	r3, [r7, #8]
 8005e02:	887b      	ldrh	r3, [r7, #2]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	dbf1      	blt.n	8005dee <checksumCalc+0x16>
	return xor;
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e1e:	2300      	movs	r3, #0
 8005e20:	607b      	str	r3, [r7, #4]
 8005e22:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <HAL_MspInit+0x54>)
 8005e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e26:	4a11      	ldr	r2, [pc, #68]	; (8005e6c <HAL_MspInit+0x54>)
 8005e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e2e:	4b0f      	ldr	r3, [pc, #60]	; (8005e6c <HAL_MspInit+0x54>)
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e36:	607b      	str	r3, [r7, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <HAL_MspInit+0x54>)
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	4a0a      	ldr	r2, [pc, #40]	; (8005e6c <HAL_MspInit+0x54>)
 8005e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e48:	6413      	str	r3, [r2, #64]	; 0x40
 8005e4a:	4b08      	ldr	r3, [pc, #32]	; (8005e6c <HAL_MspInit+0x54>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005e56:	2200      	movs	r2, #0
 8005e58:	210f      	movs	r1, #15
 8005e5a:	f06f 0001 	mvn.w	r0, #1
 8005e5e:	f001 fc6f 	bl	8007740 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e62:	bf00      	nop
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40023800 	.word	0x40023800

08005e70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	; 0x28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e78:	f107 0314 	add.w	r3, r7, #20
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	605a      	str	r2, [r3, #4]
 8005e82:	609a      	str	r2, [r3, #8]
 8005e84:	60da      	str	r2, [r3, #12]
 8005e86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a3c      	ldr	r2, [pc, #240]	; (8005f80 <HAL_ADC_MspInit+0x110>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d171      	bne.n	8005f76 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005e92:	2300      	movs	r3, #0
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	4b3b      	ldr	r3, [pc, #236]	; (8005f84 <HAL_ADC_MspInit+0x114>)
 8005e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9a:	4a3a      	ldr	r2, [pc, #232]	; (8005f84 <HAL_ADC_MspInit+0x114>)
 8005e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ea2:	4b38      	ldr	r3, [pc, #224]	; (8005f84 <HAL_ADC_MspInit+0x114>)
 8005ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	4b34      	ldr	r3, [pc, #208]	; (8005f84 <HAL_ADC_MspInit+0x114>)
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	4a33      	ldr	r2, [pc, #204]	; (8005f84 <HAL_ADC_MspInit+0x114>)
 8005eb8:	f043 0304 	orr.w	r3, r3, #4
 8005ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8005ebe:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <HAL_ADC_MspInit+0x114>)
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60bb      	str	r3, [r7, #8]
 8005ece:	4b2d      	ldr	r3, [pc, #180]	; (8005f84 <HAL_ADC_MspInit+0x114>)
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	4a2c      	ldr	r2, [pc, #176]	; (8005f84 <HAL_ADC_MspInit+0x114>)
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8005eda:	4b2a      	ldr	r3, [pc, #168]	; (8005f84 <HAL_ADC_MspInit+0x114>)
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	60bb      	str	r3, [r7, #8]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_T0_Pin|ADC_T1_Pin|ADC_T2_Pin;
 8005ee6:	230d      	movs	r3, #13
 8005ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005eea:	2303      	movs	r3, #3
 8005eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ef2:	f107 0314 	add.w	r3, r7, #20
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4823      	ldr	r0, [pc, #140]	; (8005f88 <HAL_ADC_MspInit+0x118>)
 8005efa:	f003 fa5f 	bl	80093bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AD_T3_Pin|ADC_T4_Pin;
 8005efe:	2318      	movs	r3, #24
 8005f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f02:	2303      	movs	r3, #3
 8005f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f0a:	f107 0314 	add.w	r3, r7, #20
 8005f0e:	4619      	mov	r1, r3
 8005f10:	481e      	ldr	r0, [pc, #120]	; (8005f8c <HAL_ADC_MspInit+0x11c>)
 8005f12:	f003 fa53 	bl	80093bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005f16:	4b1e      	ldr	r3, [pc, #120]	; (8005f90 <HAL_ADC_MspInit+0x120>)
 8005f18:	4a1e      	ldr	r2, [pc, #120]	; (8005f94 <HAL_ADC_MspInit+0x124>)
 8005f1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005f1c:	4b1c      	ldr	r3, [pc, #112]	; (8005f90 <HAL_ADC_MspInit+0x120>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f22:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <HAL_ADC_MspInit+0x120>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f28:	4b19      	ldr	r3, [pc, #100]	; (8005f90 <HAL_ADC_MspInit+0x120>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005f2e:	4b18      	ldr	r3, [pc, #96]	; (8005f90 <HAL_ADC_MspInit+0x120>)
 8005f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f36:	4b16      	ldr	r3, [pc, #88]	; (8005f90 <HAL_ADC_MspInit+0x120>)
 8005f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f3e:	4b14      	ldr	r3, [pc, #80]	; (8005f90 <HAL_ADC_MspInit+0x120>)
 8005f40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005f46:	4b12      	ldr	r3, [pc, #72]	; (8005f90 <HAL_ADC_MspInit+0x120>)
 8005f48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f4c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005f4e:	4b10      	ldr	r3, [pc, #64]	; (8005f90 <HAL_ADC_MspInit+0x120>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f54:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <HAL_ADC_MspInit+0x120>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005f5a:	480d      	ldr	r0, [pc, #52]	; (8005f90 <HAL_ADC_MspInit+0x120>)
 8005f5c:	f001 fc28 	bl	80077b0 <HAL_DMA_Init>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8005f66:	f7fe fdf7 	bl	8004b58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a08      	ldr	r2, [pc, #32]	; (8005f90 <HAL_ADC_MspInit+0x120>)
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38
 8005f70:	4a07      	ldr	r2, [pc, #28]	; (8005f90 <HAL_ADC_MspInit+0x120>)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005f76:	bf00      	nop
 8005f78:	3728      	adds	r7, #40	; 0x28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	40012000 	.word	0x40012000
 8005f84:	40023800 	.word	0x40023800
 8005f88:	40020800 	.word	0x40020800
 8005f8c:	40020000 	.word	0x40020000
 8005f90:	20007324 	.word	0x20007324
 8005f94:	40026410 	.word	0x40026410

08005f98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08a      	sub	sp, #40	; 0x28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa0:	f107 0314 	add.w	r3, r7, #20
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	605a      	str	r2, [r3, #4]
 8005faa:	609a      	str	r2, [r3, #8]
 8005fac:	60da      	str	r2, [r3, #12]
 8005fae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a19      	ldr	r2, [pc, #100]	; (800601c <HAL_SPI_MspInit+0x84>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d12c      	bne.n	8006014 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005fba:	2300      	movs	r3, #0
 8005fbc:	613b      	str	r3, [r7, #16]
 8005fbe:	4b18      	ldr	r3, [pc, #96]	; (8006020 <HAL_SPI_MspInit+0x88>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	4a17      	ldr	r2, [pc, #92]	; (8006020 <HAL_SPI_MspInit+0x88>)
 8005fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8005fca:	4b15      	ldr	r3, [pc, #84]	; (8006020 <HAL_SPI_MspInit+0x88>)
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fd2:	613b      	str	r3, [r7, #16]
 8005fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	4b11      	ldr	r3, [pc, #68]	; (8006020 <HAL_SPI_MspInit+0x88>)
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	4a10      	ldr	r2, [pc, #64]	; (8006020 <HAL_SPI_MspInit+0x88>)
 8005fe0:	f043 0304 	orr.w	r3, r3, #4
 8005fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fe6:	4b0e      	ldr	r3, [pc, #56]	; (8006020 <HAL_SPI_MspInit+0x88>)
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = S3SCK_Pin|S3MISO_Pin|S3MOSI_Pin;
 8005ff2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006000:	2303      	movs	r3, #3
 8006002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006004:	2306      	movs	r3, #6
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006008:	f107 0314 	add.w	r3, r7, #20
 800600c:	4619      	mov	r1, r3
 800600e:	4805      	ldr	r0, [pc, #20]	; (8006024 <HAL_SPI_MspInit+0x8c>)
 8006010:	f003 f9d4 	bl	80093bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006014:	bf00      	nop
 8006016:	3728      	adds	r7, #40	; 0x28
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40003c00 	.word	0x40003c00
 8006020:	40023800 	.word	0x40023800
 8006024:	40020800 	.word	0x40020800

08006028 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a18      	ldr	r2, [pc, #96]	; (8006098 <HAL_TIM_Base_MspInit+0x70>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d10e      	bne.n	8006058 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	4b17      	ldr	r3, [pc, #92]	; (800609c <HAL_TIM_Base_MspInit+0x74>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	4a16      	ldr	r2, [pc, #88]	; (800609c <HAL_TIM_Base_MspInit+0x74>)
 8006044:	f043 0302 	orr.w	r3, r3, #2
 8006048:	6413      	str	r3, [r2, #64]	; 0x40
 800604a:	4b14      	ldr	r3, [pc, #80]	; (800609c <HAL_TIM_Base_MspInit+0x74>)
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006056:	e01a      	b.n	800608e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a10      	ldr	r2, [pc, #64]	; (80060a0 <HAL_TIM_Base_MspInit+0x78>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d115      	bne.n	800608e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006062:	2300      	movs	r3, #0
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	4b0d      	ldr	r3, [pc, #52]	; (800609c <HAL_TIM_Base_MspInit+0x74>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	4a0c      	ldr	r2, [pc, #48]	; (800609c <HAL_TIM_Base_MspInit+0x74>)
 800606c:	f043 0304 	orr.w	r3, r3, #4
 8006070:	6413      	str	r3, [r2, #64]	; 0x40
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <HAL_TIM_Base_MspInit+0x74>)
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	60bb      	str	r3, [r7, #8]
 800607c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800607e:	2200      	movs	r2, #0
 8006080:	2105      	movs	r1, #5
 8006082:	201e      	movs	r0, #30
 8006084:	f001 fb5c 	bl	8007740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006088:	201e      	movs	r0, #30
 800608a:	f001 fb75 	bl	8007778 <HAL_NVIC_EnableIRQ>
}
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	40000400 	.word	0x40000400
 800609c:	40023800 	.word	0x40023800
 80060a0:	40000800 	.word	0x40000800

080060a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08c      	sub	sp, #48	; 0x30
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060ac:	f107 031c 	add.w	r3, r7, #28
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	605a      	str	r2, [r3, #4]
 80060b6:	609a      	str	r2, [r3, #8]
 80060b8:	60da      	str	r2, [r3, #12]
 80060ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a68      	ldr	r2, [pc, #416]	; (8006264 <HAL_UART_MspInit+0x1c0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d163      	bne.n	800618e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80060c6:	2300      	movs	r3, #0
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	4b67      	ldr	r3, [pc, #412]	; (8006268 <HAL_UART_MspInit+0x1c4>)
 80060cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ce:	4a66      	ldr	r2, [pc, #408]	; (8006268 <HAL_UART_MspInit+0x1c4>)
 80060d0:	f043 0310 	orr.w	r3, r3, #16
 80060d4:	6453      	str	r3, [r2, #68]	; 0x44
 80060d6:	4b64      	ldr	r3, [pc, #400]	; (8006268 <HAL_UART_MspInit+0x1c4>)
 80060d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	61bb      	str	r3, [r7, #24]
 80060e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060e2:	2300      	movs	r3, #0
 80060e4:	617b      	str	r3, [r7, #20]
 80060e6:	4b60      	ldr	r3, [pc, #384]	; (8006268 <HAL_UART_MspInit+0x1c4>)
 80060e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ea:	4a5f      	ldr	r2, [pc, #380]	; (8006268 <HAL_UART_MspInit+0x1c4>)
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	6313      	str	r3, [r2, #48]	; 0x30
 80060f2:	4b5d      	ldr	r3, [pc, #372]	; (8006268 <HAL_UART_MspInit+0x1c4>)
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80060fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006104:	2302      	movs	r3, #2
 8006106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006108:	2300      	movs	r3, #0
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800610c:	2303      	movs	r3, #3
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006110:	2307      	movs	r3, #7
 8006112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006114:	f107 031c 	add.w	r3, r7, #28
 8006118:	4619      	mov	r1, r3
 800611a:	4854      	ldr	r0, [pc, #336]	; (800626c <HAL_UART_MspInit+0x1c8>)
 800611c:	f003 f94e 	bl	80093bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006120:	4b53      	ldr	r3, [pc, #332]	; (8006270 <HAL_UART_MspInit+0x1cc>)
 8006122:	4a54      	ldr	r2, [pc, #336]	; (8006274 <HAL_UART_MspInit+0x1d0>)
 8006124:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006126:	4b52      	ldr	r3, [pc, #328]	; (8006270 <HAL_UART_MspInit+0x1cc>)
 8006128:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800612c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800612e:	4b50      	ldr	r3, [pc, #320]	; (8006270 <HAL_UART_MspInit+0x1cc>)
 8006130:	2200      	movs	r2, #0
 8006132:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006134:	4b4e      	ldr	r3, [pc, #312]	; (8006270 <HAL_UART_MspInit+0x1cc>)
 8006136:	2200      	movs	r2, #0
 8006138:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800613a:	4b4d      	ldr	r3, [pc, #308]	; (8006270 <HAL_UART_MspInit+0x1cc>)
 800613c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006140:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006142:	4b4b      	ldr	r3, [pc, #300]	; (8006270 <HAL_UART_MspInit+0x1cc>)
 8006144:	2200      	movs	r2, #0
 8006146:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006148:	4b49      	ldr	r3, [pc, #292]	; (8006270 <HAL_UART_MspInit+0x1cc>)
 800614a:	2200      	movs	r2, #0
 800614c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800614e:	4b48      	ldr	r3, [pc, #288]	; (8006270 <HAL_UART_MspInit+0x1cc>)
 8006150:	2200      	movs	r2, #0
 8006152:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006154:	4b46      	ldr	r3, [pc, #280]	; (8006270 <HAL_UART_MspInit+0x1cc>)
 8006156:	2200      	movs	r2, #0
 8006158:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800615a:	4b45      	ldr	r3, [pc, #276]	; (8006270 <HAL_UART_MspInit+0x1cc>)
 800615c:	2200      	movs	r2, #0
 800615e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006160:	4843      	ldr	r0, [pc, #268]	; (8006270 <HAL_UART_MspInit+0x1cc>)
 8006162:	f001 fb25 	bl	80077b0 <HAL_DMA_Init>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800616c:	f7fe fcf4 	bl	8004b58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a3f      	ldr	r2, [pc, #252]	; (8006270 <HAL_UART_MspInit+0x1cc>)
 8006174:	639a      	str	r2, [r3, #56]	; 0x38
 8006176:	4a3e      	ldr	r2, [pc, #248]	; (8006270 <HAL_UART_MspInit+0x1cc>)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800617c:	2200      	movs	r2, #0
 800617e:	2105      	movs	r1, #5
 8006180:	2025      	movs	r0, #37	; 0x25
 8006182:	f001 fadd 	bl	8007740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006186:	2025      	movs	r0, #37	; 0x25
 8006188:	f001 faf6 	bl	8007778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800618c:	e066      	b.n	800625c <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a39      	ldr	r2, [pc, #228]	; (8006278 <HAL_UART_MspInit+0x1d4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d161      	bne.n	800625c <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006198:	2300      	movs	r3, #0
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	4b32      	ldr	r3, [pc, #200]	; (8006268 <HAL_UART_MspInit+0x1c4>)
 800619e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a0:	4a31      	ldr	r2, [pc, #196]	; (8006268 <HAL_UART_MspInit+0x1c4>)
 80061a2:	f043 0320 	orr.w	r3, r3, #32
 80061a6:	6453      	str	r3, [r2, #68]	; 0x44
 80061a8:	4b2f      	ldr	r3, [pc, #188]	; (8006268 <HAL_UART_MspInit+0x1c4>)
 80061aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	4b2b      	ldr	r3, [pc, #172]	; (8006268 <HAL_UART_MspInit+0x1c4>)
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	4a2a      	ldr	r2, [pc, #168]	; (8006268 <HAL_UART_MspInit+0x1c4>)
 80061be:	f043 0304 	orr.w	r3, r3, #4
 80061c2:	6313      	str	r3, [r2, #48]	; 0x30
 80061c4:	4b28      	ldr	r3, [pc, #160]	; (8006268 <HAL_UART_MspInit+0x1c4>)
 80061c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80061d0:	23c0      	movs	r3, #192	; 0xc0
 80061d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061d4:	2302      	movs	r3, #2
 80061d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061dc:	2303      	movs	r3, #3
 80061de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80061e0:	2308      	movs	r3, #8
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061e4:	f107 031c 	add.w	r3, r7, #28
 80061e8:	4619      	mov	r1, r3
 80061ea:	4824      	ldr	r0, [pc, #144]	; (800627c <HAL_UART_MspInit+0x1d8>)
 80061ec:	f003 f8e6 	bl	80093bc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80061f0:	4b23      	ldr	r3, [pc, #140]	; (8006280 <HAL_UART_MspInit+0x1dc>)
 80061f2:	4a24      	ldr	r2, [pc, #144]	; (8006284 <HAL_UART_MspInit+0x1e0>)
 80061f4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80061f6:	4b22      	ldr	r3, [pc, #136]	; (8006280 <HAL_UART_MspInit+0x1dc>)
 80061f8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80061fc:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061fe:	4b20      	ldr	r3, [pc, #128]	; (8006280 <HAL_UART_MspInit+0x1dc>)
 8006200:	2200      	movs	r2, #0
 8006202:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006204:	4b1e      	ldr	r3, [pc, #120]	; (8006280 <HAL_UART_MspInit+0x1dc>)
 8006206:	2200      	movs	r2, #0
 8006208:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800620a:	4b1d      	ldr	r3, [pc, #116]	; (8006280 <HAL_UART_MspInit+0x1dc>)
 800620c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006210:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006212:	4b1b      	ldr	r3, [pc, #108]	; (8006280 <HAL_UART_MspInit+0x1dc>)
 8006214:	2200      	movs	r2, #0
 8006216:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006218:	4b19      	ldr	r3, [pc, #100]	; (8006280 <HAL_UART_MspInit+0x1dc>)
 800621a:	2200      	movs	r2, #0
 800621c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800621e:	4b18      	ldr	r3, [pc, #96]	; (8006280 <HAL_UART_MspInit+0x1dc>)
 8006220:	2200      	movs	r2, #0
 8006222:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006224:	4b16      	ldr	r3, [pc, #88]	; (8006280 <HAL_UART_MspInit+0x1dc>)
 8006226:	2200      	movs	r2, #0
 8006228:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800622a:	4b15      	ldr	r3, [pc, #84]	; (8006280 <HAL_UART_MspInit+0x1dc>)
 800622c:	2200      	movs	r2, #0
 800622e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006230:	4813      	ldr	r0, [pc, #76]	; (8006280 <HAL_UART_MspInit+0x1dc>)
 8006232:	f001 fabd 	bl	80077b0 <HAL_DMA_Init>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 800623c:	f7fe fc8c 	bl	8004b58 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a0f      	ldr	r2, [pc, #60]	; (8006280 <HAL_UART_MspInit+0x1dc>)
 8006244:	639a      	str	r2, [r3, #56]	; 0x38
 8006246:	4a0e      	ldr	r2, [pc, #56]	; (8006280 <HAL_UART_MspInit+0x1dc>)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800624c:	2200      	movs	r2, #0
 800624e:	2105      	movs	r1, #5
 8006250:	2047      	movs	r0, #71	; 0x47
 8006252:	f001 fa75 	bl	8007740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006256:	2047      	movs	r0, #71	; 0x47
 8006258:	f001 fa8e 	bl	8007778 <HAL_NVIC_EnableIRQ>
}
 800625c:	bf00      	nop
 800625e:	3730      	adds	r7, #48	; 0x30
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40011000 	.word	0x40011000
 8006268:	40023800 	.word	0x40023800
 800626c:	40020000 	.word	0x40020000
 8006270:	20007280 	.word	0x20007280
 8006274:	40026440 	.word	0x40026440
 8006278:	40011400 	.word	0x40011400
 800627c:	40020800 	.word	0x40020800
 8006280:	200070f0 	.word	0x200070f0
 8006284:	40026428 	.word	0x40026428

08006288 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <HAL_UART_MspDeInit+0x70>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d113      	bne.n	80062c2 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800629a:	4b18      	ldr	r3, [pc, #96]	; (80062fc <HAL_UART_MspDeInit+0x74>)
 800629c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629e:	4a17      	ldr	r2, [pc, #92]	; (80062fc <HAL_UART_MspDeInit+0x74>)
 80062a0:	f023 0310 	bic.w	r3, r3, #16
 80062a4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80062a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80062aa:	4815      	ldr	r0, [pc, #84]	; (8006300 <HAL_UART_MspDeInit+0x78>)
 80062ac:	f003 fa22 	bl	80096f4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	4618      	mov	r0, r3
 80062b6:	f001 fb29 	bl	800790c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80062ba:	2025      	movs	r0, #37	; 0x25
 80062bc:	f001 fa6a 	bl	8007794 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80062c0:	e016      	b.n	80062f0 <HAL_UART_MspDeInit+0x68>
  else if(huart->Instance==USART6)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a0f      	ldr	r2, [pc, #60]	; (8006304 <HAL_UART_MspDeInit+0x7c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d111      	bne.n	80062f0 <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART6_CLK_DISABLE();
 80062cc:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <HAL_UART_MspDeInit+0x74>)
 80062ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d0:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <HAL_UART_MspDeInit+0x74>)
 80062d2:	f023 0320 	bic.w	r3, r3, #32
 80062d6:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 80062d8:	21c0      	movs	r1, #192	; 0xc0
 80062da:	480b      	ldr	r0, [pc, #44]	; (8006308 <HAL_UART_MspDeInit+0x80>)
 80062dc:	f003 fa0a 	bl	80096f4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 fb11 	bl	800790c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80062ea:	2047      	movs	r0, #71	; 0x47
 80062ec:	f001 fa52 	bl	8007794 <HAL_NVIC_DisableIRQ>
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	40011000 	.word	0x40011000
 80062fc:	40023800 	.word	0x40023800
 8006300:	40020000 	.word	0x40020000
 8006304:	40011400 	.word	0x40011400
 8006308:	40020800 	.word	0x40020800

0800630c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08c      	sub	sp, #48	; 0x30
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006318:	2300      	movs	r3, #0
 800631a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800631c:	2200      	movs	r2, #0
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	2019      	movs	r0, #25
 8006322:	f001 fa0d 	bl	8007740 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006326:	2019      	movs	r0, #25
 8006328:	f001 fa26 	bl	8007778 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800632c:	2300      	movs	r3, #0
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	4b1f      	ldr	r3, [pc, #124]	; (80063b0 <HAL_InitTick+0xa4>)
 8006332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006334:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <HAL_InitTick+0xa4>)
 8006336:	f043 0301 	orr.w	r3, r3, #1
 800633a:	6453      	str	r3, [r2, #68]	; 0x44
 800633c:	4b1c      	ldr	r3, [pc, #112]	; (80063b0 <HAL_InitTick+0xa4>)
 800633e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006348:	f107 0210 	add.w	r2, r7, #16
 800634c:	f107 0314 	add.w	r3, r7, #20
 8006350:	4611      	mov	r1, r2
 8006352:	4618      	mov	r0, r3
 8006354:	f003 ffac 	bl	800a2b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8006358:	f003 ff96 	bl	800a288 <HAL_RCC_GetPCLK2Freq>
 800635c:	4603      	mov	r3, r0
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	4a13      	ldr	r2, [pc, #76]	; (80063b4 <HAL_InitTick+0xa8>)
 8006366:	fba2 2303 	umull	r2, r3, r2, r3
 800636a:	0c9b      	lsrs	r3, r3, #18
 800636c:	3b01      	subs	r3, #1
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006370:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <HAL_InitTick+0xac>)
 8006372:	4a12      	ldr	r2, [pc, #72]	; (80063bc <HAL_InitTick+0xb0>)
 8006374:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006376:	4b10      	ldr	r3, [pc, #64]	; (80063b8 <HAL_InitTick+0xac>)
 8006378:	f240 32e7 	movw	r2, #999	; 0x3e7
 800637c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800637e:	4a0e      	ldr	r2, [pc, #56]	; (80063b8 <HAL_InitTick+0xac>)
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <HAL_InitTick+0xac>)
 8006386:	2200      	movs	r2, #0
 8006388:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800638a:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <HAL_InitTick+0xac>)
 800638c:	2200      	movs	r2, #0
 800638e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8006390:	4809      	ldr	r0, [pc, #36]	; (80063b8 <HAL_InitTick+0xac>)
 8006392:	f004 fd67 	bl	800ae64 <HAL_TIM_Base_Init>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d104      	bne.n	80063a6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800639c:	4806      	ldr	r0, [pc, #24]	; (80063b8 <HAL_InitTick+0xac>)
 800639e:	f004 fe19 	bl	800afd4 <HAL_TIM_Base_Start_IT>
 80063a2:	4603      	mov	r3, r0
 80063a4:	e000      	b.n	80063a8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3730      	adds	r7, #48	; 0x30
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	40023800 	.word	0x40023800
 80063b4:	431bde83 	.word	0x431bde83
 80063b8:	2000751c 	.word	0x2000751c
 80063bc:	40010000 	.word	0x40010000

080063c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80063c4:	e7fe      	b.n	80063c4 <NMI_Handler+0x4>

080063c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063c6:	b480      	push	{r7}
 80063c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063ca:	e7fe      	b.n	80063ca <HardFault_Handler+0x4>

080063cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063d0:	e7fe      	b.n	80063d0 <MemManage_Handler+0x4>

080063d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063d2:	b480      	push	{r7}
 80063d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063d6:	e7fe      	b.n	80063d6 <BusFault_Handler+0x4>

080063d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063dc:	e7fe      	b.n	80063dc <UsageFault_Handler+0x4>

080063de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063de:	b480      	push	{r7}
 80063e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063e2:	bf00      	nop
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80063f0:	4802      	ldr	r0, [pc, #8]	; (80063fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80063f2:	f004 fe5f 	bl	800b0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80063f6:	bf00      	nop
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	2000751c 	.word	0x2000751c

08006400 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006404:	4803      	ldr	r0, [pc, #12]	; (8006414 <TIM4_IRQHandler+0x14>)
 8006406:	f004 fe55 	bl	800b0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  UpdateTimers();
 800640a:	f000 f965 	bl	80066d8 <UpdateTimers>
  /* USER CODE END TIM4_IRQn 1 */
}
 800640e:	bf00      	nop
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20007150 	.word	0x20007150

08006418 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800641c:	4802      	ldr	r0, [pc, #8]	; (8006428 <USART1_IRQHandler+0x10>)
 800641e:	f005 fb7f 	bl	800bb20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	200072e0 	.word	0x200072e0

0800642c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006430:	4802      	ldr	r0, [pc, #8]	; (800643c <DMA2_Stream0_IRQHandler+0x10>)
 8006432:	f001 fbb3 	bl	8007b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006436:	bf00      	nop
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	20007324 	.word	0x20007324

08006440 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006444:	4802      	ldr	r0, [pc, #8]	; (8006450 <DMA2_Stream1_IRQHandler+0x10>)
 8006446:	f001 fba9 	bl	8007b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800644a:	bf00      	nop
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	200070f0 	.word	0x200070f0

08006454 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006458:	4802      	ldr	r0, [pc, #8]	; (8006464 <DMA2_Stream2_IRQHandler+0x10>)
 800645a:	f001 fb9f 	bl	8007b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20007280 	.word	0x20007280

08006468 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800646c:	4802      	ldr	r0, [pc, #8]	; (8006478 <ETH_IRQHandler+0x10>)
 800646e:	f002 f9e3 	bl	8008838 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8006472:	bf00      	nop
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	2000918c 	.word	0x2000918c

0800647c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006480:	4802      	ldr	r0, [pc, #8]	; (800648c <USART6_IRQHandler+0x10>)
 8006482:	f005 fb4d 	bl	800bb20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006486:	bf00      	nop
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20007388 	.word	0x20007388

08006490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
	return 1;
 8006494:	2301      	movs	r3, #1
}
 8006496:	4618      	mov	r0, r3
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <_kill>:

int _kill(int pid, int sig)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80064aa:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <_kill+0x20>)
 80064ac:	2216      	movs	r2, #22
 80064ae:	601a      	str	r2, [r3, #0]
	return -1;
 80064b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	2000e11c 	.word	0x2000e11c

080064c4 <_exit>:

void _exit (int status)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80064cc:	f04f 31ff 	mov.w	r1, #4294967295
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff ffe5 	bl	80064a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80064d6:	e7fe      	b.n	80064d6 <_exit+0x12>

080064d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064e4:	2300      	movs	r3, #0
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e00a      	b.n	8006500 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80064ea:	f3af 8000 	nop.w
 80064ee:	4601      	mov	r1, r0
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	60ba      	str	r2, [r7, #8]
 80064f6:	b2ca      	uxtb	r2, r1
 80064f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	3301      	adds	r3, #1
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	429a      	cmp	r2, r3
 8006506:	dbf0      	blt.n	80064ea <_read+0x12>
	}

return len;
 8006508:	687b      	ldr	r3, [r7, #4]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b086      	sub	sp, #24
 8006516:	af00      	add	r7, sp, #0
 8006518:	60f8      	str	r0, [r7, #12]
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800651e:	2300      	movs	r3, #0
 8006520:	617b      	str	r3, [r7, #20]
 8006522:	e009      	b.n	8006538 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	60ba      	str	r2, [r7, #8]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	3301      	adds	r3, #1
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	429a      	cmp	r2, r3
 800653e:	dbf1      	blt.n	8006524 <_write+0x12>
	}
	return len;
 8006540:	687b      	ldr	r3, [r7, #4]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <_close>:

int _close(int file)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
	return -1;
 8006552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006572:	605a      	str	r2, [r3, #4]
	return 0;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <_isatty>:

int _isatty(int file)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
	return 1;
 800658a:	2301      	movs	r3, #1
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
	return 0;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80065bc:	4a14      	ldr	r2, [pc, #80]	; (8006610 <_sbrk+0x5c>)
 80065be:	4b15      	ldr	r3, [pc, #84]	; (8006614 <_sbrk+0x60>)
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065c8:	4b13      	ldr	r3, [pc, #76]	; (8006618 <_sbrk+0x64>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d102      	bne.n	80065d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065d0:	4b11      	ldr	r3, [pc, #68]	; (8006618 <_sbrk+0x64>)
 80065d2:	4a12      	ldr	r2, [pc, #72]	; (800661c <_sbrk+0x68>)
 80065d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <_sbrk+0x64>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4413      	add	r3, r2
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d205      	bcs.n	80065f0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80065e4:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <_sbrk+0x6c>)
 80065e6:	220c      	movs	r2, #12
 80065e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065ea:	f04f 33ff 	mov.w	r3, #4294967295
 80065ee:	e009      	b.n	8006604 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80065f0:	4b09      	ldr	r3, [pc, #36]	; (8006618 <_sbrk+0x64>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065f6:	4b08      	ldr	r3, [pc, #32]	; (8006618 <_sbrk+0x64>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4413      	add	r3, r2
 80065fe:	4a06      	ldr	r2, [pc, #24]	; (8006618 <_sbrk+0x64>)
 8006600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006602:	68fb      	ldr	r3, [r7, #12]
}
 8006604:	4618      	mov	r0, r3
 8006606:	371c      	adds	r7, #28
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	20020000 	.word	0x20020000
 8006614:	00000400 	.word	0x00000400
 8006618:	200008d0 	.word	0x200008d0
 800661c:	2000e120 	.word	0x2000e120
 8006620:	2000e11c 	.word	0x2000e11c

08006624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006628:	4b06      	ldr	r3, [pc, #24]	; (8006644 <SystemInit+0x20>)
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662e:	4a05      	ldr	r2, [pc, #20]	; (8006644 <SystemInit+0x20>)
 8006630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006638:	bf00      	nop
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	e000ed00 	.word	0xe000ed00

08006648 <Start_Timers>:

static Timer_Init_State Push_To_List(TON *timer);
static void UpdateTimer(TON *timer);

void Start_Timers(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 800664c:	4802      	ldr	r0, [pc, #8]	; (8006658 <Start_Timers+0x10>)
 800664e:	f004 fcc1 	bl	800afd4 <HAL_TIM_Base_Start_IT>

}
 8006652:	bf00      	nop
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20007150 	.word	0x20007150

0800665c <Timer_Init>:

Timer_Init_State Timer_Init(TON *timer)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
	return Push_To_List(timer);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f805 	bl	8006674 <Push_To_List>
 800666a:	4603      	mov	r3, r0

}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <Push_To_List>:

static Timer_Init_State Push_To_List(TON *timer)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	struct list_item *tmp, *top;
	tmp = malloc(sizeof(struct list_item));
 800667c:	2008      	movs	r0, #8
 800667e:	f017 fcd3 	bl	801e028 <malloc>
 8006682:	4603      	mov	r3, r0
 8006684:	60bb      	str	r3, [r7, #8]
	if(tmp == NULL)return TIMER_FAIL;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <Push_To_List+0x1c>
 800668c:	2301      	movs	r3, #1
 800668e:	e01c      	b.n	80066ca <Push_To_List+0x56>
	tmp->next = NULL;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2200      	movs	r2, #0
 8006694:	605a      	str	r2, [r3, #4]
	tmp->timer = timer;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	601a      	str	r2, [r3, #0]
	if(timers)
 800669c:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <Push_To_List+0x60>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00e      	beq.n	80066c2 <Push_To_List+0x4e>
	{
		top = timers;
 80066a4:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <Push_To_List+0x60>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60fb      	str	r3, [r7, #12]
		while(top->next)
 80066aa:	e002      	b.n	80066b2 <Push_To_List+0x3e>
		{
			top = top->next;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	60fb      	str	r3, [r7, #12]
		while(top->next)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f8      	bne.n	80066ac <Push_To_List+0x38>
		}
		top->next = tmp;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	605a      	str	r2, [r3, #4]
 80066c0:	e002      	b.n	80066c8 <Push_To_List+0x54>
	}
	else
	{
		timers = tmp;
 80066c2:	4a04      	ldr	r2, [pc, #16]	; (80066d4 <Push_To_List+0x60>)
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	6013      	str	r3, [r2, #0]
	}
	return TIMER_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	200008d4 	.word	0x200008d4

080066d8 <UpdateTimers>:

/*Функция обновления значений всех таймеров*/
void UpdateTimers()
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
	struct list_item *tmp = timers;
 80066de:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <UpdateTimers+0x30>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	607b      	str	r3, [r7, #4]
	while(tmp)
 80066e4:	e007      	b.n	80066f6 <UpdateTimers+0x1e>
	{
		UpdateTimer(tmp->timer);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 f80e 	bl	800670c <UpdateTimer>
		tmp = tmp->next;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	607b      	str	r3, [r7, #4]
	while(tmp)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1f4      	bne.n	80066e6 <UpdateTimers+0xe>
	}
}
 80066fc:	bf00      	nop
 80066fe:	bf00      	nop
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	200008d4 	.word	0x200008d4

0800670c <UpdateTimer>:

/*Функция обновления значений одного таймера*/
static void UpdateTimer(TON *timer)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	if(timer->IN)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	7a1b      	ldrb	r3, [r3, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00e      	beq.n	800673a <UpdateTimer+0x2e>
	{
		timer->ET = timer->ET < timer->SV ? timer->ET+1 : timer->ET;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d203      	bcs.n	8006730 <UpdateTimer+0x24>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	3301      	adds	r3, #1
 800672e:	e001      	b.n	8006734 <UpdateTimer+0x28>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6053      	str	r3, [r2, #4]
 8006738:	e002      	b.n	8006740 <UpdateTimer+0x34>
	}
	else
	{
		timer->ET = 0;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	605a      	str	r2, [r3, #4]
	}
	timer->OUT = timer->ET == timer->SV;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	429a      	cmp	r2, r3
 800674a:	bf0c      	ite	eq
 800674c:	2301      	moveq	r3, #1
 800674e:	2300      	movne	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	725a      	strb	r2, [r3, #9]
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <uart_thread>:
static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size);



void uart_thread(void *argument)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
	osEvent event;
	Uart_Queue_Struct *queue_arg;
	RsReInit();
 800676c:	f000 f958 	bl	8006a20 <RsReInit>
	StartReciveUartAll();
 8006770:	f000 f82c 	bl	80067cc <StartReciveUartAll>
	while(1)
	{
		event = osMailGet(uart_queue, osWaitForever);
 8006774:	4b14      	ldr	r3, [pc, #80]	; (80067c8 <uart_thread+0x64>)
 8006776:	6819      	ldr	r1, [r3, #0]
 8006778:	f107 030c 	add.w	r3, r7, #12
 800677c:	f04f 32ff 	mov.w	r2, #4294967295
 8006780:	4618      	mov	r0, r3
 8006782:	f007 fc81 	bl	800e088 <osMailGet>
		if(event.status == osEventMail)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b20      	cmp	r3, #32
 800678a:	d1f3      	bne.n	8006774 <uart_thread+0x10>
		{
			int result = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	61fb      	str	r3, [r7, #28]
			queue_arg = event.value.p;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	61bb      	str	r3, [r7, #24]
			result = RecognizePacket(queue_arg);
 8006794:	69b8      	ldr	r0, [r7, #24]
 8006796:	f000 f8c5 	bl	8006924 <RecognizePacket>
 800679a:	61f8      	str	r0, [r7, #28]
			if(result)Transmit(queue_arg->huart, queue_arg->output_pointer, result);
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d008      	beq.n	80067b4 <uart_thread+0x50>
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	68d8      	ldr	r0, [r3, #12]
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	69fa      	ldr	r2, [r7, #28]
 80067ac:	b292      	uxth	r2, r2
 80067ae:	4619      	mov	r1, r3
 80067b0:	f000 f90e 	bl	80069d0 <Transmit>
			StartReceive(1);
 80067b4:	2001      	movs	r0, #1
 80067b6:	f000 f81d 	bl	80067f4 <StartReceive>
			osMailFree(uart_queue, queue_arg);
 80067ba:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <uart_thread+0x64>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69b9      	ldr	r1, [r7, #24]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f007 fcd5 	bl	800e170 <osMailFree>
		event = osMailGet(uart_queue, osWaitForever);
 80067c6:	e7d5      	b.n	8006774 <uart_thread+0x10>
 80067c8:	20006fd4 	.word	0x20006fd4

080067cc <StartReciveUartAll>:
	}
}


static void StartReciveUartAll()
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; ++i) {
 80067d2:	2300      	movs	r3, #0
 80067d4:	607b      	str	r3, [r7, #4]
 80067d6:	e005      	b.n	80067e4 <StartReciveUartAll+0x18>
		StartReceive(i);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f80b 	bl	80067f4 <StartReceive>
	for (int i = 0; i < 2; ++i) {
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3301      	adds	r3, #1
 80067e2:	607b      	str	r3, [r7, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	ddf6      	ble.n	80067d8 <StartReciveUartAll+0xc>
	}
}
 80067ea:	bf00      	nop
 80067ec:	bf00      	nop
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <StartReceive>:


static void StartReceive(int index)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
	switch (index) {
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <StartReceive+0x16>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d016      	beq.n	8006836 <StartReceive+0x42>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
			}
			break;
		default:
			break;
 8006808:	e02e      	b.n	8006868 <StartReceive+0x74>
			if (huart1.hdmarx->State==HAL_DMA_STATE_READY) {
 800680a:	4b19      	ldr	r3, [pc, #100]	; (8006870 <StartReceive+0x7c>)
 800680c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	d124      	bne.n	8006862 <StartReceive+0x6e>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_input_buffer[0], UART_INPUT_BUFFER_SZ);
 8006818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800681c:	4915      	ldr	r1, [pc, #84]	; (8006874 <StartReceive+0x80>)
 800681e:	4814      	ldr	r0, [pc, #80]	; (8006870 <StartReceive+0x7c>)
 8006820:	f005 f918 	bl	800ba54 <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8006824:	4b14      	ldr	r3, [pc, #80]	; (8006878 <StartReceive+0x84>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	4b13      	ldr	r3, [pc, #76]	; (8006878 <StartReceive+0x84>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0208 	bic.w	r2, r2, #8
 8006832:	601a      	str	r2, [r3, #0]
			break;
 8006834:	e015      	b.n	8006862 <StartReceive+0x6e>
			if(huart6.hdmarx->State==HAL_DMA_STATE_READY){
 8006836:	4b11      	ldr	r3, [pc, #68]	; (800687c <StartReceive+0x88>)
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b01      	cmp	r3, #1
 8006842:	d110      	bne.n	8006866 <StartReceive+0x72>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
 8006844:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006848:	490d      	ldr	r1, [pc, #52]	; (8006880 <StartReceive+0x8c>)
 800684a:	480c      	ldr	r0, [pc, #48]	; (800687c <StartReceive+0x88>)
 800684c:	f005 f902 	bl	800ba54 <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
 8006850:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <StartReceive+0x90>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <StartReceive+0x90>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0208 	bic.w	r2, r2, #8
 800685e:	601a      	str	r2, [r3, #0]
			break;
 8006860:	e001      	b.n	8006866 <StartReceive+0x72>
			break;
 8006862:	bf00      	nop
 8006864:	e000      	b.n	8006868 <StartReceive+0x74>
			break;
 8006866:	bf00      	nop
	}
}
 8006868:	bf00      	nop
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	200072e0 	.word	0x200072e0
 8006874:	20007564 	.word	0x20007564
 8006878:	20007280 	.word	0x20007280
 800687c:	20007388 	.word	0x20007388
 8006880:	20007664 	.word	0x20007664
 8006884:	200070f0 	.word	0x200070f0

08006888 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	807b      	strh	r3, [r7, #2]
	Uart_Queue_Struct *queue_arg;
	uint8_t *input_pointer = NULL;
 8006894:	2300      	movs	r3, #0
 8006896:	617b      	str	r3, [r7, #20]
	uint8_t *output_pointer = NULL;
 8006898:	2300      	movs	r3, #0
 800689a:	613b      	str	r3, [r7, #16]
	if (huart->Instance==USART1) {
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a1a      	ldr	r2, [pc, #104]	; (800690c <HAL_UARTEx_RxEventCallback+0x84>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d105      	bne.n	80068b2 <HAL_UARTEx_RxEventCallback+0x2a>
		input_pointer = uart_input_buffer[0];
 80068a6:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <HAL_UARTEx_RxEventCallback+0x88>)
 80068a8:	617b      	str	r3, [r7, #20]
		StartReceive(0);
 80068aa:	2000      	movs	r0, #0
 80068ac:	f7ff ffa2 	bl	80067f4 <StartReceive>
 80068b0:	e008      	b.n	80068c4 <HAL_UARTEx_RxEventCallback+0x3c>
	}
	else if(huart->Instance==USART6){
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a17      	ldr	r2, [pc, #92]	; (8006914 <HAL_UARTEx_RxEventCallback+0x8c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d120      	bne.n	80068fe <HAL_UARTEx_RxEventCallback+0x76>
		input_pointer = uart_input_buffer[1];
 80068bc:	4b16      	ldr	r3, [pc, #88]	; (8006918 <HAL_UARTEx_RxEventCallback+0x90>)
 80068be:	617b      	str	r3, [r7, #20]
		output_pointer = rs_answer;
 80068c0:	4b16      	ldr	r3, [pc, #88]	; (800691c <HAL_UARTEx_RxEventCallback+0x94>)
 80068c2:	613b      	str	r3, [r7, #16]

	}
	else return;
	queue_arg = osMailAlloc(uart_queue, 0);
 80068c4:	4b16      	ldr	r3, [pc, #88]	; (8006920 <HAL_UARTEx_RxEventCallback+0x98>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2100      	movs	r1, #0
 80068ca:	4618      	mov	r0, r3
 80068cc:	f007 fb88 	bl	800dfe0 <osMailAlloc>
 80068d0:	60f8      	str	r0, [r7, #12]
	if(queue_arg==NULL)return;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d014      	beq.n	8006902 <HAL_UARTEx_RxEventCallback+0x7a>
	queue_arg->inpit_size = size;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	887a      	ldrh	r2, [r7, #2]
 80068dc:	811a      	strh	r2, [r3, #8]
	queue_arg->input_pointer = input_pointer;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	601a      	str	r2, [r3, #0]
	queue_arg->output_pointer = output_pointer;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	605a      	str	r2, [r3, #4]
	queue_arg->huart = huart;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	60da      	str	r2, [r3, #12]
	osMailPut(uart_queue, queue_arg);
 80068f0:	4b0b      	ldr	r3, [pc, #44]	; (8006920 <HAL_UARTEx_RxEventCallback+0x98>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68f9      	ldr	r1, [r7, #12]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f007 fb88 	bl	800e00c <osMailPut>
 80068fc:	e002      	b.n	8006904 <HAL_UARTEx_RxEventCallback+0x7c>
	else return;
 80068fe:	bf00      	nop
 8006900:	e000      	b.n	8006904 <HAL_UARTEx_RxEventCallback+0x7c>
	if(queue_arg==NULL)return;
 8006902:	bf00      	nop
}
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	40011000 	.word	0x40011000
 8006910:	20007564 	.word	0x20007564
 8006914:	40011400 	.word	0x40011400
 8006918:	20007664 	.word	0x20007664
 800691c:	20007764 	.word	0x20007764
 8006920:	20006fd4 	.word	0x20006fd4

08006924 <RecognizePacket>:

static int RecognizePacket(Uart_Queue_Struct *request)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	int result = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]
	if(request->input_pointer==NULL)return 0;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <RecognizePacket+0x18>
 8006938:	2300      	movs	r3, #0
 800693a:	e03e      	b.n	80069ba <RecognizePacket+0x96>
	if(request->huart->Instance==USART1)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a20      	ldr	r2, [pc, #128]	; (80069c4 <RecognizePacket+0xa0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d121      	bne.n	800698c <RecognizePacket+0x68>
	{
		float analog = 0;
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	60bb      	str	r3, [r7, #8]
		if(request->inpit_size==6 && *(request->input_pointer)==0x0A && *(request->input_pointer+5)==0x0D)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	891b      	ldrh	r3, [r3, #8]
 8006952:	2b06      	cmp	r3, #6
 8006954:	d118      	bne.n	8006988 <RecognizePacket+0x64>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b0a      	cmp	r3, #10
 800695e:	d113      	bne.n	8006988 <RecognizePacket+0x64>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3305      	adds	r3, #5
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b0d      	cmp	r3, #13
 800696a:	d10d      	bne.n	8006988 <RecognizePacket+0x64>
		{
			memcpy(&analog,(request->input_pointer)+1,sizeof(float));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3301      	adds	r3, #1
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60bb      	str	r3, [r7, #8]
			meas_data.analog_input = analog * 10;
 8006976:	edd7 7a02 	vldr	s15, [r7, #8]
 800697a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800697e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006982:	4b11      	ldr	r3, [pc, #68]	; (80069c8 <RecognizePacket+0xa4>)
 8006984:	edc3 7a01 	vstr	s15, [r3, #4]
		}
		return 0;
 8006988:	2300      	movs	r3, #0
 800698a:	e016      	b.n	80069ba <RecognizePacket+0x96>
	}
	else if (request->huart->Instance==USART6) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a0e      	ldr	r2, [pc, #56]	; (80069cc <RecognizePacket+0xa8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d10f      	bne.n	80069b8 <RecognizePacket+0x94>
		if(request->output_pointer == NULL)return 0;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <RecognizePacket+0x80>
 80069a0:	2300      	movs	r3, #0
 80069a2:	e00a      	b.n	80069ba <RecognizePacket+0x96>
		result = ModbusParse(request->input_pointer, request->inpit_size, request->output_pointer, RS485);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	8919      	ldrh	r1, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	2300      	movs	r3, #0
 80069b2:	f7fe f913 	bl	8004bdc <ModbusParse>
 80069b6:	60f8      	str	r0, [r7, #12]
	}
	return result;
 80069b8:	68fb      	ldr	r3, [r7, #12]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	40011000 	.word	0x40011000
 80069c8:	200074ac 	.word	0x200074ac
 80069cc:	40011400 	.word	0x40011400

080069d0 <Transmit>:

static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	4613      	mov	r3, r2
 80069dc:	80fb      	strh	r3, [r7, #6]
	if(huart->Instance==USART6)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a0d      	ldr	r2, [pc, #52]	; (8006a18 <Transmit+0x48>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d112      	bne.n	8006a0e <Transmit+0x3e>
	{
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, SET);
 80069e8:	2201      	movs	r2, #1
 80069ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069ee:	480b      	ldr	r0, [pc, #44]	; (8006a1c <Transmit+0x4c>)
 80069f0:	f002 ff94 	bl	800991c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(huart, p, size, 1000);
 80069f4:	88fa      	ldrh	r2, [r7, #6]
 80069f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069fa:	68b9      	ldr	r1, [r7, #8]
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f004 ff97 	bl	800b930 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, RESET);
 8006a02:	2200      	movs	r2, #0
 8006a04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a08:	4804      	ldr	r0, [pc, #16]	; (8006a1c <Transmit+0x4c>)
 8006a0a:	f002 ff87 	bl	800991c <HAL_GPIO_WritePin>

	}
}
 8006a0e:	bf00      	nop
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40011400 	.word	0x40011400
 8006a1c:	40020800 	.word	0x40020800

08006a20 <RsReInit>:

int RsReInit (void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
	int result = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	607b      	str	r3, [r7, #4]
	result = HAL_UART_DeInit(&huart1);
 8006a2a:	4823      	ldr	r0, [pc, #140]	; (8006ab8 <RsReInit+0x98>)
 8006a2c:	f004 ff51 	bl	800b8d2 <HAL_UART_DeInit>
 8006a30:	4603      	mov	r3, r0
 8006a32:	607b      	str	r3, [r7, #4]
	if (result == HAL_OK)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d138      	bne.n	8006aac <RsReInit+0x8c>
	{
		uint32_t parity = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	603b      	str	r3, [r7, #0]
		switch (settings.retain.rs_sett.parity) {
 8006a3e:	4b1f      	ldr	r3, [pc, #124]	; (8006abc <RsReInit+0x9c>)
 8006a40:	8a1b      	ldrh	r3, [r3, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <RsReInit+0x2c>
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d003      	beq.n	8006a52 <RsReInit+0x32>
 8006a4a:	e006      	b.n	8006a5a <RsReInit+0x3a>
			case 0:
				parity = UART_PARITY_NONE;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	603b      	str	r3, [r7, #0]
				break;
 8006a50:	e007      	b.n	8006a62 <RsReInit+0x42>
			case 1:
				parity = UART_PARITY_EVEN;
 8006a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a56:	603b      	str	r3, [r7, #0]
				break;
 8006a58:	e003      	b.n	8006a62 <RsReInit+0x42>
			default:
				parity = UART_PARITY_ODD;
 8006a5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006a5e:	603b      	str	r3, [r7, #0]
				break;
 8006a60:	bf00      	nop
		}
		huart6.Instance = USART6;
 8006a62:	4b17      	ldr	r3, [pc, #92]	; (8006ac0 <RsReInit+0xa0>)
 8006a64:	4a17      	ldr	r2, [pc, #92]	; (8006ac4 <RsReInit+0xa4>)
 8006a66:	601a      	str	r2, [r3, #0]
		huart6.Init.BaudRate = settings.retain.rs_sett.baudrate>0 ? settings.retain.rs_sett.baudrate : 9600;
 8006a68:	4b14      	ldr	r3, [pc, #80]	; (8006abc <RsReInit+0x9c>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <RsReInit+0x56>
 8006a70:	4b12      	ldr	r3, [pc, #72]	; (8006abc <RsReInit+0x9c>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	e001      	b.n	8006a7a <RsReInit+0x5a>
 8006a76:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8006a7a:	4a11      	ldr	r2, [pc, #68]	; (8006ac0 <RsReInit+0xa0>)
 8006a7c:	6053      	str	r3, [r2, #4]
		huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006a7e:	4b10      	ldr	r3, [pc, #64]	; (8006ac0 <RsReInit+0xa0>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	609a      	str	r2, [r3, #8]
		huart6.Init.StopBits = UART_STOPBITS_1;
 8006a84:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <RsReInit+0xa0>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	60da      	str	r2, [r3, #12]
		huart6.Init.Parity = parity;
 8006a8a:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <RsReInit+0xa0>)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	6113      	str	r3, [r2, #16]
		huart6.Init.Mode = UART_MODE_TX_RX;
 8006a90:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <RsReInit+0xa0>)
 8006a92:	220c      	movs	r2, #12
 8006a94:	615a      	str	r2, [r3, #20]
		huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a96:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <RsReInit+0xa0>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	619a      	str	r2, [r3, #24]
		huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a9c:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <RsReInit+0xa0>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	61da      	str	r2, [r3, #28]
		result = HAL_UART_Init(&huart6);
 8006aa2:	4807      	ldr	r0, [pc, #28]	; (8006ac0 <RsReInit+0xa0>)
 8006aa4:	f004 fec8 	bl	800b838 <HAL_UART_Init>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	607b      	str	r3, [r7, #4]
	}
  return result;
 8006aac:	687b      	ldr	r3, [r7, #4]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200072e0 	.word	0x200072e0
 8006abc:	20007408 	.word	0x20007408
 8006ac0:	20007388 	.word	0x20007388
 8006ac4:	40011400 	.word	0x40011400

08006ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006acc:	480d      	ldr	r0, [pc, #52]	; (8006b04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006ace:	490e      	ldr	r1, [pc, #56]	; (8006b08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006ad0:	4a0e      	ldr	r2, [pc, #56]	; (8006b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ad4:	e002      	b.n	8006adc <LoopCopyDataInit>

08006ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ada:	3304      	adds	r3, #4

08006adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ae0:	d3f9      	bcc.n	8006ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ae2:	4a0b      	ldr	r2, [pc, #44]	; (8006b10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006ae4:	4c0b      	ldr	r4, [pc, #44]	; (8006b14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ae8:	e001      	b.n	8006aee <LoopFillZerobss>

08006aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006aec:	3204      	adds	r2, #4

08006aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006af0:	d3fb      	bcc.n	8006aea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006af2:	f7ff fd97 	bl	8006624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006af6:	f017 fa73 	bl	801dfe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006afa:	f7fd fc3f 	bl	800437c <main>
  bx  lr    
 8006afe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b08:	20000534 	.word	0x20000534
  ldr r2, =_sidata
 8006b0c:	08027178 	.word	0x08027178
  ldr r2, =_sbss
 8006b10:	20000534 	.word	0x20000534
  ldr r4, =_ebss
 8006b14:	2000e120 	.word	0x2000e120

08006b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b18:	e7fe      	b.n	8006b18 <ADC_IRQHandler>

08006b1a <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006b28:	b672      	cpsid	i
}
 8006b2a:	bf00      	nop
 8006b2c:	f7fe f814 	bl	8004b58 <Error_Handler>
 8006b30:	e7fe      	b.n	8006b30 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	e007      	b.n	8006b48 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3301      	adds	r3, #1
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d9f4      	bls.n	8006b38 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	721a      	strb	r2, [r3, #8]
}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d104      	bne.n	8006b74 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006b6a:	b672      	cpsid	i
}
 8006b6c:	bf00      	nop
 8006b6e:	f7fd fff3 	bl	8004b58 <Error_Handler>
 8006b72:	e7fe      	b.n	8006b72 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	7a1b      	ldrb	r3, [r3, #8]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d904      	bls.n	8006b86 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8006b7c:	b672      	cpsid	i
}
 8006b7e:	bf00      	nop
 8006b80:	f7fd ffea 	bl	8004b58 <Error_Handler>
 8006b84:	e7fe      	b.n	8006b84 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	7a1b      	ldrb	r3, [r3, #8]
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	b2d1      	uxtb	r1, r2
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	7211      	strb	r1, [r2, #8]
 8006b92:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b94:	f3ef 8211 	mrs	r2, BASEPRI
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	60fa      	str	r2, [r7, #12]
 8006baa:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8006bb4:	bf00      	nop
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d104      	bne.n	8006bd4 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006bca:	b672      	cpsid	i
}
 8006bcc:	bf00      	nop
 8006bce:	f7fd ffc3 	bl	8004b58 <Error_Handler>
 8006bd2:	e7fe      	b.n	8006bd2 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	7a1b      	ldrb	r3, [r3, #8]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	7a1b      	ldrb	r3, [r3, #8]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d904      	bls.n	8006bf2 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8006be8:	b672      	cpsid	i
}
 8006bea:	bf00      	nop
 8006bec:	f7fd ffb4 	bl	8004b58 <Error_Handler>
 8006bf0:	e7fe      	b.n	8006bf0 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	7a1b      	ldrb	r3, [r3, #8]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfe:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c06:	bf00      	nop
}
 8006c08:	bf00      	nop
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d103      	bne.n	8006c26 <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 8006c1e:	4b0e      	ldr	r3, [pc, #56]	; (8006c58 <__retarget_lock_init_recursive+0x48>)
 8006c20:	2216      	movs	r2, #22
 8006c22:	601a      	str	r2, [r3, #0]
    return;
 8006c24:	e015      	b.n	8006c52 <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8006c26:	200c      	movs	r0, #12
 8006c28:	f017 f9fe 	bl	801e028 <malloc>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	461a      	mov	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff ff6a 	bl	8006b1a <stm32_lock_init>
    return;
 8006c46:	e004      	b.n	8006c52 <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8006c48:	b672      	cpsid	i
}
 8006c4a:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8006c4c:	f7fd ff84 	bl	8004b58 <Error_Handler>
 8006c50:	e7fe      	b.n	8006c50 <__retarget_lock_init_recursive+0x40>
}
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	2000e11c 	.word	0x2000e11c

08006c5c <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d104      	bne.n	8006c74 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006c6a:	b672      	cpsid	i
}
 8006c6c:	bf00      	nop
 8006c6e:	f7fd ff73 	bl	8004b58 <Error_Handler>
 8006c72:	e7fe      	b.n	8006c72 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff ff70 	bl	8006b5c <stm32_lock_acquire>
}
 8006c7c:	bf00      	nop
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d104      	bne.n	8006c9c <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006c92:	b672      	cpsid	i
}
 8006c94:	bf00      	nop
 8006c96:	f7fd ff5f 	bl	8004b58 <Error_Handler>
 8006c9a:	e7fe      	b.n	8006c9a <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff ff8c 	bl	8006bbc <stm32_lock_release>
}
 8006ca4:	bf00      	nop
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006cb0:	4b0e      	ldr	r3, [pc, #56]	; (8006cec <HAL_Init+0x40>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a0d      	ldr	r2, [pc, #52]	; (8006cec <HAL_Init+0x40>)
 8006cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006cbc:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <HAL_Init+0x40>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <HAL_Init+0x40>)
 8006cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006cc8:	4b08      	ldr	r3, [pc, #32]	; (8006cec <HAL_Init+0x40>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a07      	ldr	r2, [pc, #28]	; (8006cec <HAL_Init+0x40>)
 8006cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006cd4:	2003      	movs	r0, #3
 8006cd6:	f000 fd28 	bl	800772a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006cda:	200f      	movs	r0, #15
 8006cdc:	f7ff fb16 	bl	800630c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ce0:	f7ff f89a 	bl	8005e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	40023c00 	.word	0x40023c00

08006cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006cf4:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <HAL_IncTick+0x20>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <HAL_IncTick+0x24>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4413      	add	r3, r2
 8006d00:	4a04      	ldr	r2, [pc, #16]	; (8006d14 <HAL_IncTick+0x24>)
 8006d02:	6013      	str	r3, [r2, #0]
}
 8006d04:	bf00      	nop
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	2000034c 	.word	0x2000034c
 8006d14:	20007864 	.word	0x20007864

08006d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8006d1c:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <HAL_GetTick+0x14>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	20007864 	.word	0x20007864

08006d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d38:	f7ff ffee 	bl	8006d18 <HAL_GetTick>
 8006d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d005      	beq.n	8006d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d4a:	4b0a      	ldr	r3, [pc, #40]	; (8006d74 <HAL_Delay+0x44>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4413      	add	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006d56:	bf00      	nop
 8006d58:	f7ff ffde 	bl	8006d18 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d8f7      	bhi.n	8006d58 <HAL_Delay+0x28>
  {
  }
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	2000034c 	.word	0x2000034c

08006d78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e033      	b.n	8006df6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d109      	bne.n	8006daa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff f86a 	bl	8005e70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	f003 0310 	and.w	r3, r3, #16
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d118      	bne.n	8006de8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006dbe:	f023 0302 	bic.w	r3, r3, #2
 8006dc2:	f043 0202 	orr.w	r2, r3, #2
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fa5e 	bl	800728c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	f023 0303 	bic.w	r3, r3, #3
 8006dde:	f043 0201 	orr.w	r2, r3, #1
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	641a      	str	r2, [r3, #64]	; 0x40
 8006de6:	e001      	b.n	8006dec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_ADC_Start_DMA+0x1e>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e0e9      	b.n	8006ff2 <HAL_ADC_Start_DMA+0x1f2>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d018      	beq.n	8006e66 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0201 	orr.w	r2, r2, #1
 8006e42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006e44:	4b6d      	ldr	r3, [pc, #436]	; (8006ffc <HAL_ADC_Start_DMA+0x1fc>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a6d      	ldr	r2, [pc, #436]	; (8007000 <HAL_ADC_Start_DMA+0x200>)
 8006e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4e:	0c9a      	lsrs	r2, r3, #18
 8006e50:	4613      	mov	r3, r2
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	4413      	add	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006e58:	e002      	b.n	8006e60 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1f9      	bne.n	8006e5a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e74:	d107      	bne.n	8006e86 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e84:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	f040 80a1 	bne.w	8006fd8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e9e:	f023 0301 	bic.w	r3, r3, #1
 8006ea2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d007      	beq.n	8006ec8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006ec0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed4:	d106      	bne.n	8006ee4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eda:	f023 0206 	bic.w	r2, r3, #6
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	645a      	str	r2, [r3, #68]	; 0x44
 8006ee2:	e002      	b.n	8006eea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ef2:	4b44      	ldr	r3, [pc, #272]	; (8007004 <HAL_ADC_Start_DMA+0x204>)
 8006ef4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efa:	4a43      	ldr	r2, [pc, #268]	; (8007008 <HAL_ADC_Start_DMA+0x208>)
 8006efc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	4a42      	ldr	r2, [pc, #264]	; (800700c <HAL_ADC_Start_DMA+0x20c>)
 8006f04:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0a:	4a41      	ldr	r2, [pc, #260]	; (8007010 <HAL_ADC_Start_DMA+0x210>)
 8006f0c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006f16:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006f26:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689a      	ldr	r2, [r3, #8]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f36:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	334c      	adds	r3, #76	; 0x4c
 8006f42:	4619      	mov	r1, r3
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f000 fd3e 	bl	80079c8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d12a      	bne.n	8006fae <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a2d      	ldr	r2, [pc, #180]	; (8007014 <HAL_ADC_Start_DMA+0x214>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d015      	beq.n	8006f8e <HAL_ADC_Start_DMA+0x18e>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a2c      	ldr	r2, [pc, #176]	; (8007018 <HAL_ADC_Start_DMA+0x218>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d105      	bne.n	8006f78 <HAL_ADC_Start_DMA+0x178>
 8006f6c:	4b25      	ldr	r3, [pc, #148]	; (8007004 <HAL_ADC_Start_DMA+0x204>)
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f003 031f 	and.w	r3, r3, #31
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00a      	beq.n	8006f8e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a27      	ldr	r2, [pc, #156]	; (800701c <HAL_ADC_Start_DMA+0x21c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d136      	bne.n	8006ff0 <HAL_ADC_Start_DMA+0x1f0>
 8006f82:	4b20      	ldr	r3, [pc, #128]	; (8007004 <HAL_ADC_Start_DMA+0x204>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f003 0310 	and.w	r3, r3, #16
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d130      	bne.n	8006ff0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d129      	bne.n	8006ff0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006faa:	609a      	str	r2, [r3, #8]
 8006fac:	e020      	b.n	8006ff0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a18      	ldr	r2, [pc, #96]	; (8007014 <HAL_ADC_Start_DMA+0x214>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d11b      	bne.n	8006ff0 <HAL_ADC_Start_DMA+0x1f0>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d114      	bne.n	8006ff0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006fd4:	609a      	str	r2, [r3, #8]
 8006fd6:	e00b      	b.n	8006ff0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fdc:	f043 0210 	orr.w	r2, r3, #16
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe8:	f043 0201 	orr.w	r2, r3, #1
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000344 	.word	0x20000344
 8007000:	431bde83 	.word	0x431bde83
 8007004:	40012300 	.word	0x40012300
 8007008:	08007485 	.word	0x08007485
 800700c:	0800753f 	.word	0x0800753f
 8007010:	0800755b 	.word	0x0800755b
 8007014:	40012000 	.word	0x40012000
 8007018:	40012100 	.word	0x40012100
 800701c:	40012200 	.word	0x40012200

08007020 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_ADC_ConfigChannel+0x1c>
 8007060:	2302      	movs	r3, #2
 8007062:	e105      	b.n	8007270 <HAL_ADC_ConfigChannel+0x228>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b09      	cmp	r3, #9
 8007072:	d925      	bls.n	80070c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68d9      	ldr	r1, [r3, #12]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	b29b      	uxth	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	4613      	mov	r3, r2
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	4413      	add	r3, r2
 8007088:	3b1e      	subs	r3, #30
 800708a:	2207      	movs	r2, #7
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	43da      	mvns	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	400a      	ands	r2, r1
 8007098:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68d9      	ldr	r1, [r3, #12]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	4618      	mov	r0, r3
 80070ac:	4603      	mov	r3, r0
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	4403      	add	r3, r0
 80070b2:	3b1e      	subs	r3, #30
 80070b4:	409a      	lsls	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	60da      	str	r2, [r3, #12]
 80070be:	e022      	b.n	8007106 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6919      	ldr	r1, [r3, #16]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	461a      	mov	r2, r3
 80070ce:	4613      	mov	r3, r2
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	4413      	add	r3, r2
 80070d4:	2207      	movs	r2, #7
 80070d6:	fa02 f303 	lsl.w	r3, r2, r3
 80070da:	43da      	mvns	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	400a      	ands	r2, r1
 80070e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6919      	ldr	r1, [r3, #16]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689a      	ldr	r2, [r3, #8]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	4618      	mov	r0, r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	4403      	add	r3, r0
 80070fc:	409a      	lsls	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2b06      	cmp	r3, #6
 800710c:	d824      	bhi.n	8007158 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	3b05      	subs	r3, #5
 8007120:	221f      	movs	r2, #31
 8007122:	fa02 f303 	lsl.w	r3, r2, r3
 8007126:	43da      	mvns	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	400a      	ands	r2, r1
 800712e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	4618      	mov	r0, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	3b05      	subs	r3, #5
 800714a:	fa00 f203 	lsl.w	r2, r0, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	635a      	str	r2, [r3, #52]	; 0x34
 8007156:	e04c      	b.n	80071f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2b0c      	cmp	r3, #12
 800715e:	d824      	bhi.n	80071aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	3b23      	subs	r3, #35	; 0x23
 8007172:	221f      	movs	r2, #31
 8007174:	fa02 f303 	lsl.w	r3, r2, r3
 8007178:	43da      	mvns	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	400a      	ands	r2, r1
 8007180:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	b29b      	uxth	r3, r3
 800718e:	4618      	mov	r0, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	3b23      	subs	r3, #35	; 0x23
 800719c:	fa00 f203 	lsl.w	r2, r0, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	631a      	str	r2, [r3, #48]	; 0x30
 80071a8:	e023      	b.n	80071f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	4613      	mov	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	3b41      	subs	r3, #65	; 0x41
 80071bc:	221f      	movs	r2, #31
 80071be:	fa02 f303 	lsl.w	r3, r2, r3
 80071c2:	43da      	mvns	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	400a      	ands	r2, r1
 80071ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	4618      	mov	r0, r3
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	3b41      	subs	r3, #65	; 0x41
 80071e6:	fa00 f203 	lsl.w	r2, r0, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80071f2:	4b22      	ldr	r3, [pc, #136]	; (800727c <HAL_ADC_ConfigChannel+0x234>)
 80071f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a21      	ldr	r2, [pc, #132]	; (8007280 <HAL_ADC_ConfigChannel+0x238>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d109      	bne.n	8007214 <HAL_ADC_ConfigChannel+0x1cc>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b12      	cmp	r3, #18
 8007206:	d105      	bne.n	8007214 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a19      	ldr	r2, [pc, #100]	; (8007280 <HAL_ADC_ConfigChannel+0x238>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d123      	bne.n	8007266 <HAL_ADC_ConfigChannel+0x21e>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b10      	cmp	r3, #16
 8007224:	d003      	beq.n	800722e <HAL_ADC_ConfigChannel+0x1e6>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b11      	cmp	r3, #17
 800722c:	d11b      	bne.n	8007266 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b10      	cmp	r3, #16
 8007240:	d111      	bne.n	8007266 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007242:	4b10      	ldr	r3, [pc, #64]	; (8007284 <HAL_ADC_ConfigChannel+0x23c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a10      	ldr	r2, [pc, #64]	; (8007288 <HAL_ADC_ConfigChannel+0x240>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	0c9a      	lsrs	r2, r3, #18
 800724e:	4613      	mov	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007258:	e002      	b.n	8007260 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	3b01      	subs	r3, #1
 800725e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1f9      	bne.n	800725a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	40012300 	.word	0x40012300
 8007280:	40012000 	.word	0x40012000
 8007284:	20000344 	.word	0x20000344
 8007288:	431bde83 	.word	0x431bde83

0800728c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007294:	4b79      	ldr	r3, [pc, #484]	; (800747c <ADC_Init+0x1f0>)
 8007296:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	431a      	orrs	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6859      	ldr	r1, [r3, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	021a      	lsls	r2, r3, #8
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80072e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6859      	ldr	r1, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6899      	ldr	r1, [r3, #8]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731e:	4a58      	ldr	r2, [pc, #352]	; (8007480 <ADC_Init+0x1f4>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d022      	beq.n	800736a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007332:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6899      	ldr	r1, [r3, #8]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6899      	ldr	r1, [r3, #8]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	609a      	str	r2, [r3, #8]
 8007368:	e00f      	b.n	800738a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007378:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007388:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 0202 	bic.w	r2, r2, #2
 8007398:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6899      	ldr	r1, [r3, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	7e1b      	ldrb	r3, [r3, #24]
 80073a4:	005a      	lsls	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01b      	beq.n	80073f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80073d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6859      	ldr	r1, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	3b01      	subs	r3, #1
 80073e4:	035a      	lsls	r2, r3, #13
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	605a      	str	r2, [r3, #4]
 80073ee:	e007      	b.n	8007400 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800740e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	3b01      	subs	r3, #1
 800741c:	051a      	lsls	r2, r3, #20
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6899      	ldr	r1, [r3, #8]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007442:	025a      	lsls	r2, r3, #9
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800745a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6899      	ldr	r1, [r3, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	029a      	lsls	r2, r3, #10
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	609a      	str	r2, [r3, #8]
}
 8007470:	bf00      	nop
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	40012300 	.word	0x40012300
 8007480:	0f000001 	.word	0x0f000001

08007484 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007496:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800749a:	2b00      	cmp	r3, #0
 800749c:	d13c      	bne.n	8007518 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d12b      	bne.n	8007510 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d127      	bne.n	8007510 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d006      	beq.n	80074dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d119      	bne.n	8007510 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0220 	bic.w	r2, r2, #32
 80074ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d105      	bne.n	8007510 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007508:	f043 0201 	orr.w	r2, r3, #1
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f7f9 fdbd 	bl	8001090 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007516:	e00e      	b.n	8007536 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751c:	f003 0310 	and.w	r3, r3, #16
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7ff fd85 	bl	8007034 <HAL_ADC_ErrorCallback>
}
 800752a:	e004      	b.n	8007536 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	4798      	blx	r3
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7ff fd67 	bl	8007020 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2240      	movs	r2, #64	; 0x40
 800756c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007572:	f043 0204 	orr.w	r2, r3, #4
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f7ff fd5a 	bl	8007034 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007580:	bf00      	nop
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007598:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <__NVIC_SetPriorityGrouping+0x44>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80075a4:	4013      	ands	r3, r2
 80075a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80075b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075ba:	4a04      	ldr	r2, [pc, #16]	; (80075cc <__NVIC_SetPriorityGrouping+0x44>)
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	60d3      	str	r3, [r2, #12]
}
 80075c0:	bf00      	nop
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	e000ed00 	.word	0xe000ed00

080075d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075d4:	4b04      	ldr	r3, [pc, #16]	; (80075e8 <__NVIC_GetPriorityGrouping+0x18>)
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	0a1b      	lsrs	r3, r3, #8
 80075da:	f003 0307 	and.w	r3, r3, #7
}
 80075de:	4618      	mov	r0, r3
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	e000ed00 	.word	0xe000ed00

080075ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	db0b      	blt.n	8007616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075fe:	79fb      	ldrb	r3, [r7, #7]
 8007600:	f003 021f 	and.w	r2, r3, #31
 8007604:	4907      	ldr	r1, [pc, #28]	; (8007624 <__NVIC_EnableIRQ+0x38>)
 8007606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	2001      	movs	r0, #1
 800760e:	fa00 f202 	lsl.w	r2, r0, r2
 8007612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	e000e100 	.word	0xe000e100

08007628 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007636:	2b00      	cmp	r3, #0
 8007638:	db12      	blt.n	8007660 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800763a:	79fb      	ldrb	r3, [r7, #7]
 800763c:	f003 021f 	and.w	r2, r3, #31
 8007640:	490a      	ldr	r1, [pc, #40]	; (800766c <__NVIC_DisableIRQ+0x44>)
 8007642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007646:	095b      	lsrs	r3, r3, #5
 8007648:	2001      	movs	r0, #1
 800764a:	fa00 f202 	lsl.w	r2, r0, r2
 800764e:	3320      	adds	r3, #32
 8007650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007654:	f3bf 8f4f 	dsb	sy
}
 8007658:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800765a:	f3bf 8f6f 	isb	sy
}
 800765e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	e000e100 	.word	0xe000e100

08007670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	4603      	mov	r3, r0
 8007678:	6039      	str	r1, [r7, #0]
 800767a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800767c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007680:	2b00      	cmp	r3, #0
 8007682:	db0a      	blt.n	800769a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	b2da      	uxtb	r2, r3
 8007688:	490c      	ldr	r1, [pc, #48]	; (80076bc <__NVIC_SetPriority+0x4c>)
 800768a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800768e:	0112      	lsls	r2, r2, #4
 8007690:	b2d2      	uxtb	r2, r2
 8007692:	440b      	add	r3, r1
 8007694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007698:	e00a      	b.n	80076b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	b2da      	uxtb	r2, r3
 800769e:	4908      	ldr	r1, [pc, #32]	; (80076c0 <__NVIC_SetPriority+0x50>)
 80076a0:	79fb      	ldrb	r3, [r7, #7]
 80076a2:	f003 030f 	and.w	r3, r3, #15
 80076a6:	3b04      	subs	r3, #4
 80076a8:	0112      	lsls	r2, r2, #4
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	440b      	add	r3, r1
 80076ae:	761a      	strb	r2, [r3, #24]
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	e000e100 	.word	0xe000e100
 80076c0:	e000ed00 	.word	0xe000ed00

080076c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b089      	sub	sp, #36	; 0x24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	f1c3 0307 	rsb	r3, r3, #7
 80076de:	2b04      	cmp	r3, #4
 80076e0:	bf28      	it	cs
 80076e2:	2304      	movcs	r3, #4
 80076e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	3304      	adds	r3, #4
 80076ea:	2b06      	cmp	r3, #6
 80076ec:	d902      	bls.n	80076f4 <NVIC_EncodePriority+0x30>
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	3b03      	subs	r3, #3
 80076f2:	e000      	b.n	80076f6 <NVIC_EncodePriority+0x32>
 80076f4:	2300      	movs	r3, #0
 80076f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076f8:	f04f 32ff 	mov.w	r2, #4294967295
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007702:	43da      	mvns	r2, r3
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	401a      	ands	r2, r3
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800770c:	f04f 31ff 	mov.w	r1, #4294967295
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	fa01 f303 	lsl.w	r3, r1, r3
 8007716:	43d9      	mvns	r1, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800771c:	4313      	orrs	r3, r2
         );
}
 800771e:	4618      	mov	r0, r3
 8007720:	3724      	adds	r7, #36	; 0x24
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff ff28 	bl	8007588 <__NVIC_SetPriorityGrouping>
}
 8007738:	bf00      	nop
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800774e:	2300      	movs	r3, #0
 8007750:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007752:	f7ff ff3d 	bl	80075d0 <__NVIC_GetPriorityGrouping>
 8007756:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	6978      	ldr	r0, [r7, #20]
 800775e:	f7ff ffb1 	bl	80076c4 <NVIC_EncodePriority>
 8007762:	4602      	mov	r2, r0
 8007764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007768:	4611      	mov	r1, r2
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff ff80 	bl	8007670 <__NVIC_SetPriority>
}
 8007770:	bf00      	nop
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007786:	4618      	mov	r0, r3
 8007788:	f7ff ff30 	bl	80075ec <__NVIC_EnableIRQ>
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800779e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff ff40 	bl	8007628 <__NVIC_DisableIRQ>
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80077bc:	f7ff faac 	bl	8006d18 <HAL_GetTick>
 80077c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e099      	b.n	8007900 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 0201 	bic.w	r2, r2, #1
 80077ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077ec:	e00f      	b.n	800780e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80077ee:	f7ff fa93 	bl	8006d18 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b05      	cmp	r3, #5
 80077fa:	d908      	bls.n	800780e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2220      	movs	r2, #32
 8007800:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2203      	movs	r2, #3
 8007806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e078      	b.n	8007900 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e8      	bne.n	80077ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	4b38      	ldr	r3, [pc, #224]	; (8007908 <HAL_DMA_Init+0x158>)
 8007828:	4013      	ands	r3, r2
 800782a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800783a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007846:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007852:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	4313      	orrs	r3, r2
 800785e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	2b04      	cmp	r3, #4
 8007866:	d107      	bne.n	8007878 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	4313      	orrs	r3, r2
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f023 0307 	bic.w	r3, r3, #7
 800788e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	4313      	orrs	r3, r2
 8007898:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d117      	bne.n	80078d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00e      	beq.n	80078d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fb5f 	bl	8007f78 <DMA_CheckFifoParam>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d008      	beq.n	80078d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2240      	movs	r2, #64	; 0x40
 80078c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80078ce:	2301      	movs	r3, #1
 80078d0:	e016      	b.n	8007900 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fb16 	bl	8007f0c <DMA_CalcBaseAndBitshift>
 80078e0:	4603      	mov	r3, r0
 80078e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e8:	223f      	movs	r2, #63	; 0x3f
 80078ea:	409a      	lsls	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	f010803f 	.word	0xf010803f

0800790c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e050      	b.n	80079c0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b02      	cmp	r3, #2
 8007928:	d101      	bne.n	800792e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800792a:	2302      	movs	r3, #2
 800792c:	e048      	b.n	80079c0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0201 	bic.w	r2, r2, #1
 800793c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2200      	movs	r2, #0
 800794c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2200      	movs	r2, #0
 8007954:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2200      	movs	r2, #0
 800795c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2200      	movs	r2, #0
 8007964:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2221      	movs	r2, #33	; 0x21
 800796c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 facc 	bl	8007f0c <DMA_CalcBaseAndBitshift>
 8007974:	4603      	mov	r3, r0
 8007976:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a0:	223f      	movs	r2, #63	; 0x3f
 80079a2:	409a      	lsls	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d101      	bne.n	80079ee <HAL_DMA_Start_IT+0x26>
 80079ea:	2302      	movs	r3, #2
 80079ec:	e040      	b.n	8007a70 <HAL_DMA_Start_IT+0xa8>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d12f      	bne.n	8007a62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2202      	movs	r2, #2
 8007a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	68b9      	ldr	r1, [r7, #8]
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 fa4a 	bl	8007eb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a20:	223f      	movs	r2, #63	; 0x3f
 8007a22:	409a      	lsls	r2, r3
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0216 	orr.w	r2, r2, #22
 8007a36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d007      	beq.n	8007a50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f042 0208 	orr.w	r2, r2, #8
 8007a4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0201 	orr.w	r2, r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	e005      	b.n	8007a6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007a86:	f7ff f947 	bl	8006d18 <HAL_GetTick>
 8007a8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d008      	beq.n	8007aaa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2280      	movs	r2, #128	; 0x80
 8007a9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e052      	b.n	8007b50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0216 	bic.w	r2, r2, #22
 8007ab8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	695a      	ldr	r2, [r3, #20]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ac8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d103      	bne.n	8007ada <HAL_DMA_Abort+0x62>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d007      	beq.n	8007aea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0208 	bic.w	r2, r2, #8
 8007ae8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0201 	bic.w	r2, r2, #1
 8007af8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007afa:	e013      	b.n	8007b24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007afc:	f7ff f90c 	bl	8006d18 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b05      	cmp	r3, #5
 8007b08:	d90c      	bls.n	8007b24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2203      	movs	r2, #3
 8007b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e015      	b.n	8007b50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1e4      	bne.n	8007afc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b36:	223f      	movs	r2, #63	; 0x3f
 8007b38:	409a      	lsls	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d004      	beq.n	8007b76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2280      	movs	r2, #128	; 0x80
 8007b70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e00c      	b.n	8007b90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2205      	movs	r2, #5
 8007b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0201 	bic.w	r2, r2, #1
 8007b8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ba8:	4b92      	ldr	r3, [pc, #584]	; (8007df4 <HAL_DMA_IRQHandler+0x258>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a92      	ldr	r2, [pc, #584]	; (8007df8 <HAL_DMA_IRQHandler+0x25c>)
 8007bae:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb2:	0a9b      	lsrs	r3, r3, #10
 8007bb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc6:	2208      	movs	r2, #8
 8007bc8:	409a      	lsls	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01a      	beq.n	8007c08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d013      	beq.n	8007c08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 0204 	bic.w	r2, r2, #4
 8007bee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf4:	2208      	movs	r2, #8
 8007bf6:	409a      	lsls	r2, r3
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c00:	f043 0201 	orr.w	r2, r3, #1
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	409a      	lsls	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4013      	ands	r3, r2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d012      	beq.n	8007c3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00b      	beq.n	8007c3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	409a      	lsls	r2, r3
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c36:	f043 0202 	orr.w	r2, r3, #2
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c42:	2204      	movs	r2, #4
 8007c44:	409a      	lsls	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	4013      	ands	r3, r2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d012      	beq.n	8007c74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c60:	2204      	movs	r2, #4
 8007c62:	409a      	lsls	r2, r3
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6c:	f043 0204 	orr.w	r2, r3, #4
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c78:	2210      	movs	r2, #16
 8007c7a:	409a      	lsls	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4013      	ands	r3, r2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d043      	beq.n	8007d0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0308 	and.w	r3, r3, #8
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d03c      	beq.n	8007d0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c96:	2210      	movs	r2, #16
 8007c98:	409a      	lsls	r2, r3
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d018      	beq.n	8007cde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d108      	bne.n	8007ccc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d024      	beq.n	8007d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4798      	blx	r3
 8007cca:	e01f      	b.n	8007d0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d01b      	beq.n	8007d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	4798      	blx	r3
 8007cdc:	e016      	b.n	8007d0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d107      	bne.n	8007cfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0208 	bic.w	r2, r2, #8
 8007cfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d10:	2220      	movs	r2, #32
 8007d12:	409a      	lsls	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4013      	ands	r3, r2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 808e 	beq.w	8007e3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0310 	and.w	r3, r3, #16
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 8086 	beq.w	8007e3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d32:	2220      	movs	r2, #32
 8007d34:	409a      	lsls	r2, r3
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b05      	cmp	r3, #5
 8007d44:	d136      	bne.n	8007db4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0216 	bic.w	r2, r2, #22
 8007d54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	695a      	ldr	r2, [r3, #20]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d103      	bne.n	8007d76 <HAL_DMA_IRQHandler+0x1da>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d007      	beq.n	8007d86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0208 	bic.w	r2, r2, #8
 8007d84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8a:	223f      	movs	r2, #63	; 0x3f
 8007d8c:	409a      	lsls	r2, r3
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d07d      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4798      	blx	r3
        }
        return;
 8007db2:	e078      	b.n	8007ea6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d01c      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d108      	bne.n	8007de2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d030      	beq.n	8007e3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	4798      	blx	r3
 8007de0:	e02b      	b.n	8007e3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d027      	beq.n	8007e3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	4798      	blx	r3
 8007df2:	e022      	b.n	8007e3a <HAL_DMA_IRQHandler+0x29e>
 8007df4:	20000344 	.word	0x20000344
 8007df8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10f      	bne.n	8007e2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f022 0210 	bic.w	r2, r2, #16
 8007e18:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d032      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d022      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2205      	movs	r2, #5
 8007e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0201 	bic.w	r2, r2, #1
 8007e64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	60bb      	str	r3, [r7, #8]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d307      	bcc.n	8007e82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1f2      	bne.n	8007e66 <HAL_DMA_IRQHandler+0x2ca>
 8007e80:	e000      	b.n	8007e84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007e82:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d005      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	4798      	blx	r3
 8007ea4:	e000      	b.n	8007ea8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007ea6:	bf00      	nop
    }
  }
}
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop

08007eb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ecc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	2b40      	cmp	r3, #64	; 0x40
 8007edc:	d108      	bne.n	8007ef0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007eee:	e007      	b.n	8007f00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	60da      	str	r2, [r3, #12]
}
 8007f00:	bf00      	nop
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	3b10      	subs	r3, #16
 8007f1c:	4a14      	ldr	r2, [pc, #80]	; (8007f70 <DMA_CalcBaseAndBitshift+0x64>)
 8007f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f22:	091b      	lsrs	r3, r3, #4
 8007f24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007f26:	4a13      	ldr	r2, [pc, #76]	; (8007f74 <DMA_CalcBaseAndBitshift+0x68>)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d909      	bls.n	8007f4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007f42:	f023 0303 	bic.w	r3, r3, #3
 8007f46:	1d1a      	adds	r2, r3, #4
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	659a      	str	r2, [r3, #88]	; 0x58
 8007f4c:	e007      	b.n	8007f5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007f56:	f023 0303 	bic.w	r3, r3, #3
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	aaaaaaab 	.word	0xaaaaaaab
 8007f74:	08026b08 	.word	0x08026b08

08007f78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d11f      	bne.n	8007fd2 <DMA_CheckFifoParam+0x5a>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d856      	bhi.n	8008046 <DMA_CheckFifoParam+0xce>
 8007f98:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <DMA_CheckFifoParam+0x28>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	08007fb1 	.word	0x08007fb1
 8007fa4:	08007fc3 	.word	0x08007fc3
 8007fa8:	08007fb1 	.word	0x08007fb1
 8007fac:	08008047 	.word	0x08008047
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d046      	beq.n	800804a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fc0:	e043      	b.n	800804a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007fca:	d140      	bne.n	800804e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fd0:	e03d      	b.n	800804e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fda:	d121      	bne.n	8008020 <DMA_CheckFifoParam+0xa8>
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d837      	bhi.n	8008052 <DMA_CheckFifoParam+0xda>
 8007fe2:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <DMA_CheckFifoParam+0x70>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	08007ff9 	.word	0x08007ff9
 8007fec:	08007fff 	.word	0x08007fff
 8007ff0:	08007ff9 	.word	0x08007ff9
 8007ff4:	08008011 	.word	0x08008011
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8007ffc:	e030      	b.n	8008060 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d025      	beq.n	8008056 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800800e:	e022      	b.n	8008056 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008014:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008018:	d11f      	bne.n	800805a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800801e:	e01c      	b.n	800805a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2b02      	cmp	r3, #2
 8008024:	d903      	bls.n	800802e <DMA_CheckFifoParam+0xb6>
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2b03      	cmp	r3, #3
 800802a:	d003      	beq.n	8008034 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800802c:	e018      	b.n	8008060 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	73fb      	strb	r3, [r7, #15]
      break;
 8008032:	e015      	b.n	8008060 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00e      	beq.n	800805e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	73fb      	strb	r3, [r7, #15]
      break;
 8008044:	e00b      	b.n	800805e <DMA_CheckFifoParam+0xe6>
      break;
 8008046:	bf00      	nop
 8008048:	e00a      	b.n	8008060 <DMA_CheckFifoParam+0xe8>
      break;
 800804a:	bf00      	nop
 800804c:	e008      	b.n	8008060 <DMA_CheckFifoParam+0xe8>
      break;
 800804e:	bf00      	nop
 8008050:	e006      	b.n	8008060 <DMA_CheckFifoParam+0xe8>
      break;
 8008052:	bf00      	nop
 8008054:	e004      	b.n	8008060 <DMA_CheckFifoParam+0xe8>
      break;
 8008056:	bf00      	nop
 8008058:	e002      	b.n	8008060 <DMA_CheckFifoParam+0xe8>
      break;   
 800805a:	bf00      	nop
 800805c:	e000      	b.n	8008060 <DMA_CheckFifoParam+0xe8>
      break;
 800805e:	bf00      	nop
    }
  } 
  
  return status; 
 8008060:	7bfb      	ldrb	r3, [r7, #15]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop

08008070 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	61fb      	str	r3, [r7, #28]
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8008080:	4baa      	ldr	r3, [pc, #680]	; (800832c <HAL_ETH_Init+0x2bc>)
 8008082:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8008088:	2300      	movs	r3, #0
 800808a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e183      	b.n	800839e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f004 ff8a 	bl	800cfc4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080b0:	2300      	movs	r3, #0
 80080b2:	60bb      	str	r3, [r7, #8]
 80080b4:	4b9e      	ldr	r3, [pc, #632]	; (8008330 <HAL_ETH_Init+0x2c0>)
 80080b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b8:	4a9d      	ldr	r2, [pc, #628]	; (8008330 <HAL_ETH_Init+0x2c0>)
 80080ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080be:	6453      	str	r3, [r2, #68]	; 0x44
 80080c0:	4b9b      	ldr	r3, [pc, #620]	; (8008330 <HAL_ETH_Init+0x2c0>)
 80080c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080c8:	60bb      	str	r3, [r7, #8]
 80080ca:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80080cc:	4b99      	ldr	r3, [pc, #612]	; (8008334 <HAL_ETH_Init+0x2c4>)
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	4a98      	ldr	r2, [pc, #608]	; (8008334 <HAL_ETH_Init+0x2c4>)
 80080d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80080d6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80080d8:	4b96      	ldr	r3, [pc, #600]	; (8008334 <HAL_ETH_Init+0x2c4>)
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	4994      	ldr	r1, [pc, #592]	; (8008334 <HAL_ETH_Init+0x2c4>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f042 0201 	orr.w	r2, r2, #1
 80080f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080fc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80080fe:	f7fe fe0b 	bl	8006d18 <HAL_GetTick>
 8008102:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008104:	e011      	b.n	800812a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8008106:	f7fe fe07 	bl	8006d18 <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008114:	d909      	bls.n	800812a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2203      	movs	r2, #3
 800811a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e139      	b.n	800839e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e4      	bne.n	8008106 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	f023 031c 	bic.w	r3, r3, #28
 800814a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800814c:	f002 f87c 	bl	800a248 <HAL_RCC_GetHCLKFreq>
 8008150:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	4a78      	ldr	r2, [pc, #480]	; (8008338 <HAL_ETH_Init+0x2c8>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d908      	bls.n	800816c <HAL_ETH_Init+0xfc>
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	4a77      	ldr	r2, [pc, #476]	; (800833c <HAL_ETH_Init+0x2cc>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d804      	bhi.n	800816c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	f043 0308 	orr.w	r3, r3, #8
 8008168:	61fb      	str	r3, [r7, #28]
 800816a:	e027      	b.n	80081bc <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	4a73      	ldr	r2, [pc, #460]	; (800833c <HAL_ETH_Init+0x2cc>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d908      	bls.n	8008186 <HAL_ETH_Init+0x116>
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	4a6d      	ldr	r2, [pc, #436]	; (800832c <HAL_ETH_Init+0x2bc>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d204      	bcs.n	8008186 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	f043 030c 	orr.w	r3, r3, #12
 8008182:	61fb      	str	r3, [r7, #28]
 8008184:	e01a      	b.n	80081bc <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	4a68      	ldr	r2, [pc, #416]	; (800832c <HAL_ETH_Init+0x2bc>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d303      	bcc.n	8008196 <HAL_ETH_Init+0x126>
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	4a6b      	ldr	r2, [pc, #428]	; (8008340 <HAL_ETH_Init+0x2d0>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d911      	bls.n	80081ba <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	4a69      	ldr	r2, [pc, #420]	; (8008340 <HAL_ETH_Init+0x2d0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d908      	bls.n	80081b0 <HAL_ETH_Init+0x140>
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	4a68      	ldr	r2, [pc, #416]	; (8008344 <HAL_ETH_Init+0x2d4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d804      	bhi.n	80081b0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	f043 0304 	orr.w	r3, r3, #4
 80081ac:	61fb      	str	r3, [r7, #28]
 80081ae:	e005      	b.n	80081bc <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	f043 0310 	orr.w	r3, r3, #16
 80081b6:	61fb      	str	r3, [r7, #28]
 80081b8:	e000      	b.n	80081bc <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80081ba:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	69fa      	ldr	r2, [r7, #28]
 80081c2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80081c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80081c8:	2100      	movs	r1, #0
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fc17 	bl	80089fe <HAL_ETH_WritePHYRegister>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00b      	beq.n	80081ee <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80081da:	6939      	ldr	r1, [r7, #16]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fdcd 	bl	8008d7c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e0d7      	b.n	800839e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80081ee:	20ff      	movs	r0, #255	; 0xff
 80081f0:	f7fe fd9e 	bl	8006d30 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 80a5 	beq.w	8008348 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80081fe:	f7fe fd8b 	bl	8006d18 <HAL_GetTick>
 8008202:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008204:	f107 030c 	add.w	r3, r7, #12
 8008208:	461a      	mov	r2, r3
 800820a:	2101      	movs	r1, #1
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fb8e 	bl	800892e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8008212:	f7fe fd81 	bl	8006d18 <HAL_GetTick>
 8008216:	4602      	mov	r2, r0
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008220:	4293      	cmp	r3, r2
 8008222:	d90f      	bls.n	8008244 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8008228:	6939      	ldr	r1, [r7, #16]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fda6 	bl	8008d7c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e0ac      	b.n	800839e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f003 0304 	and.w	r3, r3, #4
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0da      	beq.n	8008204 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800824e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008252:	2100      	movs	r1, #0
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fbd2 	bl	80089fe <HAL_ETH_WritePHYRegister>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00b      	beq.n	8008278 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008264:	6939      	ldr	r1, [r7, #16]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fd88 	bl	8008d7c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8008274:	2301      	movs	r3, #1
 8008276:	e092      	b.n	800839e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8008278:	f7fe fd4e 	bl	8006d18 <HAL_GetTick>
 800827c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800827e:	f107 030c 	add.w	r3, r7, #12
 8008282:	461a      	mov	r2, r3
 8008284:	2101      	movs	r1, #1
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fb51 	bl	800892e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800828c:	f7fe fd44 	bl	8006d18 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	f241 3288 	movw	r2, #5000	; 0x1388
 800829a:	4293      	cmp	r3, r2
 800829c:	d90f      	bls.n	80082be <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80082a2:	6939      	ldr	r1, [r7, #16]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fd69 	bl	8008d7c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e06f      	b.n	800839e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d0da      	beq.n	800827e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80082c8:	f107 030c 	add.w	r3, r7, #12
 80082cc:	461a      	mov	r2, r3
 80082ce:	2110      	movs	r1, #16
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fb2c 	bl	800892e <HAL_ETH_ReadPHYRegister>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00b      	beq.n	80082f4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80082e0:	6939      	ldr	r1, [r7, #16]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fd4a 	bl	8008d7c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80082f0:	2301      	movs	r3, #1
 80082f2:	e054      	b.n	800839e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f003 0304 	and.w	r3, r3, #4
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008304:	60da      	str	r2, [r3, #12]
 8008306:	e002      	b.n	800830e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	609a      	str	r2, [r3, #8]
 800831e:	e035      	b.n	800838c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008326:	609a      	str	r2, [r3, #8]
 8008328:	e030      	b.n	800838c <HAL_ETH_Init+0x31c>
 800832a:	bf00      	nop
 800832c:	03938700 	.word	0x03938700
 8008330:	40023800 	.word	0x40023800
 8008334:	40013800 	.word	0x40013800
 8008338:	01312cff 	.word	0x01312cff
 800833c:	02160ebf 	.word	0x02160ebf
 8008340:	05f5e0ff 	.word	0x05f5e0ff
 8008344:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	08db      	lsrs	r3, r3, #3
 800834e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	085b      	lsrs	r3, r3, #1
 8008356:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8008358:	4313      	orrs	r3, r2
 800835a:	b29b      	uxth	r3, r3
 800835c:	461a      	mov	r2, r3
 800835e:	2100      	movs	r1, #0
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fb4c 	bl	80089fe <HAL_ETH_WritePHYRegister>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00b      	beq.n	8008384 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008370:	6939      	ldr	r1, [r7, #16]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fd02 	bl	8008d7c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e00c      	b.n	800839e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8008384:	f640 70ff 	movw	r0, #4095	; 0xfff
 8008388:	f7fe fcd2 	bl	8006d30 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800838c:	6939      	ldr	r1, [r7, #16]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fcf4 	bl	8008d7c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3720      	adds	r7, #32
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop

080083a8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
 80083b4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d101      	bne.n	80083c8 <HAL_ETH_DMATxDescListInit+0x20>
 80083c4:	2302      	movs	r3, #2
 80083c6:	e052      	b.n	800846e <HAL_ETH_DMATxDescListInit+0xc6>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80083de:	2300      	movs	r3, #0
 80083e0:	617b      	str	r3, [r7, #20]
 80083e2:	e030      	b.n	8008446 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	015b      	lsls	r3, r3, #5
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	4413      	add	r3, r2
 80083ec:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80083f4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80083fc:	fb02 f303 	mul.w	r3, r2, r3
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	4413      	add	r3, r2
 8008404:	461a      	mov	r2, r3
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d105      	bne.n	800841e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	3b01      	subs	r3, #1
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	429a      	cmp	r2, r3
 8008426:	d208      	bcs.n	800843a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	3301      	adds	r3, #1
 800842c:	015b      	lsls	r3, r3, #5
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	4413      	add	r3, r2
 8008432:	461a      	mov	r2, r3
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	60da      	str	r2, [r3, #12]
 8008438:	e002      	b.n	8008440 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	3301      	adds	r3, #1
 8008444:	617b      	str	r3, [r7, #20]
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	429a      	cmp	r2, r3
 800844c:	d3ca      	bcc.n	80083e4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008458:	3310      	adds	r3, #16
 800845a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	371c      	adds	r7, #28
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800847a:	b480      	push	{r7}
 800847c:	b087      	sub	sp, #28
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	607a      	str	r2, [r7, #4]
 8008486:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008492:	2b01      	cmp	r3, #1
 8008494:	d101      	bne.n	800849a <HAL_ETH_DMARxDescListInit+0x20>
 8008496:	2302      	movs	r3, #2
 8008498:	e056      	b.n	8008548 <HAL_ETH_DMARxDescListInit+0xce>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2202      	movs	r2, #2
 80084a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80084b0:	2300      	movs	r3, #0
 80084b2:	617b      	str	r3, [r7, #20]
 80084b4:	e034      	b.n	8008520 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	015b      	lsls	r3, r3, #5
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	4413      	add	r3, r2
 80084be:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084c6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80084ce:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80084d6:	fb02 f303 	mul.w	r3, r2, r3
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	4413      	add	r3, r2
 80084de:	461a      	mov	r2, r3
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d105      	bne.n	80084f8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d208      	bcs.n	8008514 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	3301      	adds	r3, #1
 8008506:	015b      	lsls	r3, r3, #5
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	4413      	add	r3, r2
 800850c:	461a      	mov	r2, r3
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	60da      	str	r2, [r3, #12]
 8008512:	e002      	b.n	800851a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	3301      	adds	r3, #1
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	429a      	cmp	r2, r3
 8008526:	d3c6      	bcc.n	80084b6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008532:	330c      	adds	r3, #12
 8008534:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	371c      	adds	r7, #28
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	617b      	str	r3, [r7, #20]
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]
 8008566:	2300      	movs	r3, #0
 8008568:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008570:	2b01      	cmp	r3, #1
 8008572:	d101      	bne.n	8008578 <HAL_ETH_TransmitFrame+0x24>
 8008574:	2302      	movs	r3, #2
 8008576:	e0cd      	b.n	8008714 <HAL_ETH_TransmitFrame+0x1c0>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2202      	movs	r2, #2
 8008584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d109      	bne.n	80085a2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800859e:	2301      	movs	r3, #1
 80085a0:	e0b8      	b.n	8008714 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	da09      	bge.n	80085c0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2212      	movs	r2, #18
 80085b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e0a9      	b.n	8008714 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d915      	bls.n	80085f6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	4a54      	ldr	r2, [pc, #336]	; (8008720 <HAL_ETH_TransmitFrame+0x1cc>)
 80085ce:	fba2 2303 	umull	r2, r3, r2, r3
 80085d2:	0a9b      	lsrs	r3, r3, #10
 80085d4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	4b51      	ldr	r3, [pc, #324]	; (8008720 <HAL_ETH_TransmitFrame+0x1cc>)
 80085da:	fba3 1302 	umull	r1, r3, r3, r2
 80085de:	0a9b      	lsrs	r3, r3, #10
 80085e0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80085e4:	fb01 f303 	mul.w	r3, r1, r3
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d005      	beq.n	80085fa <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	3301      	adds	r3, #1
 80085f2:	617b      	str	r3, [r7, #20]
 80085f4:	e001      	b.n	80085fa <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80085f6:	2301      	movs	r3, #1
 80085f8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d11c      	bne.n	800863a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800860e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800861a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008626:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800862a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	461a      	mov	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	62da      	str	r2, [r3, #44]	; 0x2c
 8008638:	e04b      	b.n	80086d2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800863a:	2300      	movs	r3, #0
 800863c:	613b      	str	r3, [r7, #16]
 800863e:	e044      	b.n	80086ca <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800864e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d107      	bne.n	8008666 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008664:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800866e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	3b01      	subs	r3, #1
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	429a      	cmp	r2, r3
 8008678:	d116      	bne.n	80086a8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008688:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	4a25      	ldr	r2, [pc, #148]	; (8008724 <HAL_ETH_TransmitFrame+0x1d0>)
 800868e:	fb02 f203 	mul.w	r2, r2, r3
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	4413      	add	r3, r2
 8008696:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800869a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80086a6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80086b6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	461a      	mov	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	3301      	adds	r3, #1
 80086c8:	613b      	str	r3, [r7, #16]
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d3b6      	bcc.n	8008640 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086da:	3314      	adds	r3, #20
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0304 	and.w	r3, r3, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00d      	beq.n	8008702 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ee:	3314      	adds	r3, #20
 80086f0:	2204      	movs	r2, #4
 80086f2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086fc:	3304      	adds	r3, #4
 80086fe:	2200      	movs	r2, #0
 8008700:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	371c      	adds	r7, #28
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	ac02b00b 	.word	0xac02b00b
 8008724:	fffffa0c 	.word	0xfffffa0c

08008728 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8008730:	2300      	movs	r3, #0
 8008732:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800873a:	2b01      	cmp	r3, #1
 800873c:	d101      	bne.n	8008742 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800873e:	2302      	movs	r3, #2
 8008740:	e074      	b.n	800882c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2202      	movs	r2, #2
 800874e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8008752:	e05a      	b.n	800880a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	3301      	adds	r3, #1
 8008758:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008768:	d10d      	bne.n	8008786 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	461a      	mov	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	629a      	str	r2, [r3, #40]	; 0x28
 8008784:	e041      	b.n	800880a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10b      	bne.n	80087ac <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	1c5a      	adds	r2, r3, #1
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	461a      	mov	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	629a      	str	r2, [r3, #40]	; 0x28
 80087aa:	e02e      	b.n	800880a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d103      	bne.n	80087ce <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	0c1b      	lsrs	r3, r3, #16
 80087d6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80087da:	1f1a      	subs	r2, r3, #4
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e4:	689a      	ldr	r2, [r3, #8]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	461a      	mov	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	e010      	b.n	800882c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	db02      	blt.n	800881a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2b03      	cmp	r3, #3
 8008818:	d99c      	bls.n	8008754 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008848:	3314      	adds	r3, #20
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008850:	2b40      	cmp	r3, #64	; 0x40
 8008852:	d112      	bne.n	800887a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f004 fc63 	bl	800d120 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008862:	3314      	adds	r3, #20
 8008864:	2240      	movs	r2, #64	; 0x40
 8008866:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008878:	e01b      	b.n	80088b2 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008882:	3314      	adds	r3, #20
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	2b01      	cmp	r3, #1
 800888c:	d111      	bne.n	80088b2 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f839 	bl	8008906 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800889c:	3314      	adds	r3, #20
 800889e:	2201      	movs	r2, #1
 80088a0:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ba:	3314      	adds	r3, #20
 80088bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80088c0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ca:	3314      	adds	r3, #20
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088d6:	d112      	bne.n	80088fe <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f81e 	bl	800891a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e6:	3314      	adds	r3, #20
 80088e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80088ec:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008906:	b480      	push	{r7}
 8008908:	b083      	sub	sp, #12
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800890e:	bf00      	nop
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800891a:	b480      	push	{r7}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8008922:	bf00      	nop
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b086      	sub	sp, #24
 8008932:	af00      	add	r7, sp, #0
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	460b      	mov	r3, r1
 8008938:	607a      	str	r2, [r7, #4]
 800893a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800893c:	2300      	movs	r3, #0
 800893e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8008940:	2300      	movs	r3, #0
 8008942:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b82      	cmp	r3, #130	; 0x82
 800894e:	d101      	bne.n	8008954 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8008950:	2302      	movs	r3, #2
 8008952:	e050      	b.n	80089f6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2282      	movs	r2, #130	; 0x82
 8008958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f003 031c 	and.w	r3, r3, #28
 800896a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	8a1b      	ldrh	r3, [r3, #16]
 8008970:	02db      	lsls	r3, r3, #11
 8008972:	b29b      	uxth	r3, r3
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	4313      	orrs	r3, r2
 8008978:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800897a:	897b      	ldrh	r3, [r7, #10]
 800897c:	019b      	lsls	r3, r3, #6
 800897e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	4313      	orrs	r3, r2
 8008986:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f023 0302 	bic.w	r3, r3, #2
 800898e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f043 0301 	orr.w	r3, r3, #1
 8008996:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80089a0:	f7fe f9ba 	bl	8006d18 <HAL_GetTick>
 80089a4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80089a6:	e015      	b.n	80089d4 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80089a8:	f7fe f9b6 	bl	8006d18 <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089b6:	d309      	bcc.n	80089cc <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e014      	b.n	80089f6 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1e4      	bne.n	80089a8 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	461a      	mov	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b086      	sub	sp, #24
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	60f8      	str	r0, [r7, #12]
 8008a06:	460b      	mov	r3, r1
 8008a08:	607a      	str	r2, [r7, #4]
 8008a0a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b42      	cmp	r3, #66	; 0x42
 8008a1e:	d101      	bne.n	8008a24 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8008a20:	2302      	movs	r3, #2
 8008a22:	e04e      	b.n	8008ac2 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2242      	movs	r2, #66	; 0x42
 8008a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f003 031c 	and.w	r3, r3, #28
 8008a3a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	8a1b      	ldrh	r3, [r3, #16]
 8008a40:	02db      	lsls	r3, r3, #11
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8008a4a:	897b      	ldrh	r3, [r7, #10]
 8008a4c:	019b      	lsls	r3, r3, #6
 8008a4e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f043 0302 	orr.w	r3, r3, #2
 8008a5e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f043 0301 	orr.w	r3, r3, #1
 8008a66:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8008a7a:	f7fe f94d 	bl	8006d18 <HAL_GetTick>
 8008a7e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008a80:	e015      	b.n	8008aae <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8008a82:	f7fe f949 	bl	8006d18 <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a90:	d309      	bcc.n	8008aa6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e00d      	b.n	8008ac2 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1e4      	bne.n	8008a82 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3718      	adds	r7, #24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <HAL_ETH_Start+0x16>
 8008adc:	2302      	movs	r3, #2
 8008ade:	e01f      	b.n	8008b20 <HAL_ETH_Start+0x56>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2202      	movs	r2, #2
 8008aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fb45 	bl	8009180 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fb7c 	bl	80091f4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fc13 	bl	8009328 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fbb0 	bl	8009268 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fbdd 	bl	80092c8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d101      	bne.n	8008b3e <HAL_ETH_Stop+0x16>
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	e01f      	b.n	8008b7e <HAL_ETH_Stop+0x56>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2202      	movs	r2, #2
 8008b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fba2 	bl	8009298 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fbcf 	bl	80092f8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fb67 	bl	800922e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fbe1 	bl	8009328 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fb27 	bl	80091ba <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d101      	bne.n	8008ba4 <HAL_ETH_ConfigMAC+0x1c>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	e0e4      	b.n	8008d6e <HAL_ETH_ConfigMAC+0x1e6>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f000 80b1 	beq.w	8008d1e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	4b6c      	ldr	r3, [pc, #432]	; (8008d78 <HAL_ETH_ConfigMAC+0x1f0>)
 8008bc8:	4013      	ands	r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8008bd4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8008bda:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8008be0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8008be6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8008bec:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8008bf2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8008bf8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8008bfe:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8008c04:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8008c0a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8008c10:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8008c16:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008c2e:	2001      	movs	r0, #1
 8008c30:	f7fe f87e 	bl	8006d30 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008c44:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8008c4a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8008c50:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8008c56:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8008c5c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8008c62:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8008c6e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008c70:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008c7a:	2001      	movs	r0, #1
 8008c7c:	f7fe f858 	bl	8006d30 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008c90:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008c9a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8008caa:	4013      	ands	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8008cb8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8008cbe:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8008cc4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8008cca:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8008cd0:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008ce8:	2001      	movs	r0, #1
 8008cea:	f7fe f821 	bl	8006d30 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	69db      	ldr	r3, [r3, #28]
 8008d0c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8008d0e:	2001      	movs	r0, #1
 8008d10:	f7fe f80e 	bl	8006d30 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	61da      	str	r2, [r3, #28]
 8008d1c:	e01e      	b.n	8008d5c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008d2c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689a      	ldr	r2, [r3, #8]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008d4e:	2001      	movs	r0, #1
 8008d50:	f7fd ffee 	bl	8006d30 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	ff20810f 	.word	0xff20810f

08008d7c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b0b0      	sub	sp, #192	; 0xc0
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d007      	beq.n	8008da2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d98:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008da0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8008da2:	2300      	movs	r3, #0
 8008da4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8008da6:	2300      	movs	r3, #0
 8008da8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8008daa:	2300      	movs	r3, #0
 8008dac:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8008dae:	2300      	movs	r3, #0
 8008db0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8008db2:	2300      	movs	r3, #0
 8008db4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8008db6:	2300      	movs	r3, #0
 8008db8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d103      	bne.n	8008dca <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8008dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dc6:	663b      	str	r3, [r7, #96]	; 0x60
 8008dc8:	e001      	b.n	8008dce <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8008dce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dd2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8008de0:	2300      	movs	r3, #0
 8008de2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8008de4:	2300      	movs	r3, #0
 8008de6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8008de8:	2340      	movs	r3, #64	; 0x40
 8008dea:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8008dec:	2300      	movs	r3, #0
 8008dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8008e04:	2300      	movs	r3, #0
 8008e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8008e1c:	2380      	movs	r3, #128	; 0x80
 8008e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8008e22:	2300      	movs	r3, #0
 8008e24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8008e34:	2300      	movs	r3, #0
 8008e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008e50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008e54:	4bac      	ldr	r3, [pc, #688]	; (8009108 <ETH_MACDMAConfig+0x38c>)
 8008e56:	4013      	ands	r3, r2
 8008e58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8008e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8008e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8008e60:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8008e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8008e64:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8008e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8008e68:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8008e6e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8008e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8008e72:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8008e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8008e76:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8008e7c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8008e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8008e80:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8008e82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8008e84:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8008e86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8008e88:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8008e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8008e8c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8008e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8008e90:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8008e92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008e96:	4313      	orrs	r3, r2
 8008e98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008ea4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008eb0:	2001      	movs	r0, #1
 8008eb2:	f7fd ff3d 	bl	8006d30 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008ebe:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008ec0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8008ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008ec4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8008ec6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8008ec8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8008eca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8008ece:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8008ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8008ed4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8008ed6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8008eda:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8008edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8008ee0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8008ee4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8008eec:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008eee:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008efa:	2001      	movs	r0, #1
 8008efc:	f7fd ff18 	bl	8006d30 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008f08:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f12:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008f1c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008f28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008f2c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8008f30:	4013      	ands	r3, r2
 8008f32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8008f36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f3a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8008f3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8008f40:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8008f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8008f46:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8008f48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8008f4c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8008f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8008f52:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8008f54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8008f58:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8008f5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008f6c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008f78:	2001      	movs	r0, #1
 8008f7a:	f7fd fed9 	bl	8006d30 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008f86:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8008f88:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8008f8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008fa2:	2001      	movs	r0, #1
 8008fa4:	f7fd fec4 	bl	8006d30 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008fb0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8008fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fba:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8008fc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008fc4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8008fd6:	2304      	movs	r3, #4
 8008fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8008fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8008fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008fe4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008fe6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008fea:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ff0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8008ff2:	2380      	movs	r3, #128	; 0x80
 8008ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009006:	3318      	adds	r3, #24
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800900e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009012:	4b3e      	ldr	r3, [pc, #248]	; (800910c <ETH_MACDMAConfig+0x390>)
 8009014:	4013      	ands	r3, r2
 8009016:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800901a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800901c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800901e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8009020:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8009022:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8009024:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8009026:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8009028:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800902a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800902c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800902e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8009030:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8009032:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8009036:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800903a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800903c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009040:	4313      	orrs	r3, r2
 8009042:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800904e:	3318      	adds	r3, #24
 8009050:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009054:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800905e:	3318      	adds	r3, #24
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009066:	2001      	movs	r0, #1
 8009068:	f7fd fe62 	bl	8006d30 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009074:	3318      	adds	r3, #24
 8009076:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800907a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800907c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009080:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8009082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8009084:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8009088:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800908a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800908c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800908e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009090:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8009092:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8009094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8009096:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80090a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80090b4:	2001      	movs	r0, #1
 80090b6:	f7fd fe3b 	bl	8006d30 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80090c6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d10f      	bne.n	80090f0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d8:	331c      	adds	r3, #28
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80090e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ec:	331c      	adds	r3, #28
 80090ee:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	461a      	mov	r2, r3
 80090f6:	2100      	movs	r1, #0
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f809 	bl	8009110 <ETH_MACAddressConfig>
}
 80090fe:	bf00      	nop
 8009100:	37c0      	adds	r7, #192	; 0xc0
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	ff20810f 	.word	0xff20810f
 800910c:	f8de3f23 	.word	0xf8de3f23

08009110 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	3305      	adds	r3, #5
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	021b      	lsls	r3, r3, #8
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	3204      	adds	r2, #4
 8009128:	7812      	ldrb	r2, [r2, #0]
 800912a:	4313      	orrs	r3, r2
 800912c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	4b11      	ldr	r3, [pc, #68]	; (8009178 <ETH_MACAddressConfig+0x68>)
 8009132:	4413      	add	r3, r2
 8009134:	461a      	mov	r2, r3
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	3303      	adds	r3, #3
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	061a      	lsls	r2, r3, #24
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3302      	adds	r3, #2
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	041b      	lsls	r3, r3, #16
 800914a:	431a      	orrs	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	3301      	adds	r3, #1
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	021b      	lsls	r3, r3, #8
 8009154:	4313      	orrs	r3, r2
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	7812      	ldrb	r2, [r2, #0]
 800915a:	4313      	orrs	r3, r2
 800915c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	4b06      	ldr	r3, [pc, #24]	; (800917c <ETH_MACAddressConfig+0x6c>)
 8009162:	4413      	add	r3, r2
 8009164:	461a      	mov	r2, r3
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	6013      	str	r3, [r2, #0]
}
 800916a:	bf00      	nop
 800916c:	371c      	adds	r7, #28
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	40028040 	.word	0x40028040
 800917c:	40028044 	.word	0x40028044

08009180 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0208 	orr.w	r2, r2, #8
 800919a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80091a4:	2001      	movs	r0, #1
 80091a6:	f000 f8e9 	bl	800937c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	601a      	str	r2, [r3, #0]
}
 80091b2:	bf00      	nop
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f022 0208 	bic.w	r2, r2, #8
 80091d4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80091de:	2001      	movs	r0, #1
 80091e0:	f000 f8cc 	bl	800937c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	601a      	str	r2, [r3, #0]
}
 80091ec:	bf00      	nop
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0204 	orr.w	r2, r2, #4
 800920e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8009218:	2001      	movs	r0, #1
 800921a:	f000 f8af 	bl	800937c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	601a      	str	r2, [r3, #0]
}
 8009226:	bf00      	nop
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f022 0204 	bic.w	r2, r2, #4
 8009248:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8009252:	2001      	movs	r0, #1
 8009254:	f000 f892 	bl	800937c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	601a      	str	r2, [r3, #0]
}
 8009260:	bf00      	nop
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009278:	3318      	adds	r3, #24
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009288:	3318      	adds	r3, #24
 800928a:	601a      	str	r2, [r3, #0]
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a8:	3318      	adds	r3, #24
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b8:	3318      	adds	r3, #24
 80092ba:	601a      	str	r2, [r3, #0]
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d8:	3318      	adds	r3, #24
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f042 0202 	orr.w	r2, r2, #2
 80092e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e8:	3318      	adds	r3, #24
 80092ea:	601a      	str	r2, [r3, #0]
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009308:	3318      	adds	r3, #24
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f022 0202 	bic.w	r2, r2, #2
 8009314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009318:	3318      	adds	r3, #24
 800931a:	601a      	str	r2, [r3, #0]
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800933c:	3318      	adds	r3, #24
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800934c:	3318      	adds	r3, #24
 800934e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009358:	3318      	adds	r3, #24
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800935e:	2001      	movs	r0, #1
 8009360:	f000 f80c 	bl	800937c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800936e:	3318      	adds	r3, #24
 8009370:	601a      	str	r2, [r3, #0]
}
 8009372:	bf00      	nop
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
	...

0800937c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009384:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <ETH_Delay+0x38>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a0b      	ldr	r2, [pc, #44]	; (80093b8 <ETH_Delay+0x3c>)
 800938a:	fba2 2303 	umull	r2, r3, r2, r3
 800938e:	0a5b      	lsrs	r3, r3, #9
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	fb02 f303 	mul.w	r3, r2, r3
 8009396:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8009398:	bf00      	nop
  } 
  while (Delay --);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	1e5a      	subs	r2, r3, #1
 800939e:	60fa      	str	r2, [r7, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1f9      	bne.n	8009398 <ETH_Delay+0x1c>
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	20000344 	.word	0x20000344
 80093b8:	10624dd3 	.word	0x10624dd3

080093bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80093bc:	b480      	push	{r7}
 80093be:	b089      	sub	sp, #36	; 0x24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80093d2:	2300      	movs	r3, #0
 80093d4:	61fb      	str	r3, [r7, #28]
 80093d6:	e16b      	b.n	80096b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80093d8:	2201      	movs	r2, #1
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	fa02 f303 	lsl.w	r3, r2, r3
 80093e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	4013      	ands	r3, r2
 80093ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	f040 815a 	bne.w	80096aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f003 0303 	and.w	r3, r3, #3
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d005      	beq.n	800940e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800940a:	2b02      	cmp	r3, #2
 800940c:	d130      	bne.n	8009470 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	005b      	lsls	r3, r3, #1
 8009418:	2203      	movs	r2, #3
 800941a:	fa02 f303 	lsl.w	r3, r2, r3
 800941e:	43db      	mvns	r3, r3
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	4013      	ands	r3, r2
 8009424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	68da      	ldr	r2, [r3, #12]
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	005b      	lsls	r3, r3, #1
 800942e:	fa02 f303 	lsl.w	r3, r2, r3
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	4313      	orrs	r3, r2
 8009436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	69ba      	ldr	r2, [r7, #24]
 800943c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009444:	2201      	movs	r2, #1
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	fa02 f303 	lsl.w	r3, r2, r3
 800944c:	43db      	mvns	r3, r3
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	4013      	ands	r3, r2
 8009452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	091b      	lsrs	r3, r3, #4
 800945a:	f003 0201 	and.w	r2, r3, #1
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	fa02 f303 	lsl.w	r3, r2, r3
 8009464:	69ba      	ldr	r2, [r7, #24]
 8009466:	4313      	orrs	r3, r2
 8009468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	f003 0303 	and.w	r3, r3, #3
 8009478:	2b03      	cmp	r3, #3
 800947a:	d017      	beq.n	80094ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	005b      	lsls	r3, r3, #1
 8009486:	2203      	movs	r2, #3
 8009488:	fa02 f303 	lsl.w	r3, r2, r3
 800948c:	43db      	mvns	r3, r3
 800948e:	69ba      	ldr	r2, [r7, #24]
 8009490:	4013      	ands	r3, r2
 8009492:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	689a      	ldr	r2, [r3, #8]
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	fa02 f303 	lsl.w	r3, r2, r3
 80094a0:	69ba      	ldr	r2, [r7, #24]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	69ba      	ldr	r2, [r7, #24]
 80094aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f003 0303 	and.w	r3, r3, #3
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d123      	bne.n	8009500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	08da      	lsrs	r2, r3, #3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3208      	adds	r2, #8
 80094c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	f003 0307 	and.w	r3, r3, #7
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	220f      	movs	r2, #15
 80094d0:	fa02 f303 	lsl.w	r3, r2, r3
 80094d4:	43db      	mvns	r3, r3
 80094d6:	69ba      	ldr	r2, [r7, #24]
 80094d8:	4013      	ands	r3, r2
 80094da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	691a      	ldr	r2, [r3, #16]
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	fa02 f303 	lsl.w	r3, r2, r3
 80094ec:	69ba      	ldr	r2, [r7, #24]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	08da      	lsrs	r2, r3, #3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	3208      	adds	r2, #8
 80094fa:	69b9      	ldr	r1, [r7, #24]
 80094fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	2203      	movs	r2, #3
 800950c:	fa02 f303 	lsl.w	r3, r2, r3
 8009510:	43db      	mvns	r3, r3
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	4013      	ands	r3, r2
 8009516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	f003 0203 	and.w	r2, r3, #3
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	005b      	lsls	r3, r3, #1
 8009524:	fa02 f303 	lsl.w	r3, r2, r3
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	4313      	orrs	r3, r2
 800952c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	69ba      	ldr	r2, [r7, #24]
 8009532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 80b4 	beq.w	80096aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009542:	2300      	movs	r3, #0
 8009544:	60fb      	str	r3, [r7, #12]
 8009546:	4b60      	ldr	r3, [pc, #384]	; (80096c8 <HAL_GPIO_Init+0x30c>)
 8009548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954a:	4a5f      	ldr	r2, [pc, #380]	; (80096c8 <HAL_GPIO_Init+0x30c>)
 800954c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009550:	6453      	str	r3, [r2, #68]	; 0x44
 8009552:	4b5d      	ldr	r3, [pc, #372]	; (80096c8 <HAL_GPIO_Init+0x30c>)
 8009554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800955e:	4a5b      	ldr	r2, [pc, #364]	; (80096cc <HAL_GPIO_Init+0x310>)
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	089b      	lsrs	r3, r3, #2
 8009564:	3302      	adds	r3, #2
 8009566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800956a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	f003 0303 	and.w	r3, r3, #3
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	220f      	movs	r2, #15
 8009576:	fa02 f303 	lsl.w	r3, r2, r3
 800957a:	43db      	mvns	r3, r3
 800957c:	69ba      	ldr	r2, [r7, #24]
 800957e:	4013      	ands	r3, r2
 8009580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a52      	ldr	r2, [pc, #328]	; (80096d0 <HAL_GPIO_Init+0x314>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d02b      	beq.n	80095e2 <HAL_GPIO_Init+0x226>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a51      	ldr	r2, [pc, #324]	; (80096d4 <HAL_GPIO_Init+0x318>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d025      	beq.n	80095de <HAL_GPIO_Init+0x222>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a50      	ldr	r2, [pc, #320]	; (80096d8 <HAL_GPIO_Init+0x31c>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d01f      	beq.n	80095da <HAL_GPIO_Init+0x21e>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a4f      	ldr	r2, [pc, #316]	; (80096dc <HAL_GPIO_Init+0x320>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d019      	beq.n	80095d6 <HAL_GPIO_Init+0x21a>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a4e      	ldr	r2, [pc, #312]	; (80096e0 <HAL_GPIO_Init+0x324>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d013      	beq.n	80095d2 <HAL_GPIO_Init+0x216>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a4d      	ldr	r2, [pc, #308]	; (80096e4 <HAL_GPIO_Init+0x328>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00d      	beq.n	80095ce <HAL_GPIO_Init+0x212>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a4c      	ldr	r2, [pc, #304]	; (80096e8 <HAL_GPIO_Init+0x32c>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d007      	beq.n	80095ca <HAL_GPIO_Init+0x20e>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a4b      	ldr	r2, [pc, #300]	; (80096ec <HAL_GPIO_Init+0x330>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d101      	bne.n	80095c6 <HAL_GPIO_Init+0x20a>
 80095c2:	2307      	movs	r3, #7
 80095c4:	e00e      	b.n	80095e4 <HAL_GPIO_Init+0x228>
 80095c6:	2308      	movs	r3, #8
 80095c8:	e00c      	b.n	80095e4 <HAL_GPIO_Init+0x228>
 80095ca:	2306      	movs	r3, #6
 80095cc:	e00a      	b.n	80095e4 <HAL_GPIO_Init+0x228>
 80095ce:	2305      	movs	r3, #5
 80095d0:	e008      	b.n	80095e4 <HAL_GPIO_Init+0x228>
 80095d2:	2304      	movs	r3, #4
 80095d4:	e006      	b.n	80095e4 <HAL_GPIO_Init+0x228>
 80095d6:	2303      	movs	r3, #3
 80095d8:	e004      	b.n	80095e4 <HAL_GPIO_Init+0x228>
 80095da:	2302      	movs	r3, #2
 80095dc:	e002      	b.n	80095e4 <HAL_GPIO_Init+0x228>
 80095de:	2301      	movs	r3, #1
 80095e0:	e000      	b.n	80095e4 <HAL_GPIO_Init+0x228>
 80095e2:	2300      	movs	r3, #0
 80095e4:	69fa      	ldr	r2, [r7, #28]
 80095e6:	f002 0203 	and.w	r2, r2, #3
 80095ea:	0092      	lsls	r2, r2, #2
 80095ec:	4093      	lsls	r3, r2
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80095f4:	4935      	ldr	r1, [pc, #212]	; (80096cc <HAL_GPIO_Init+0x310>)
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	089b      	lsrs	r3, r3, #2
 80095fa:	3302      	adds	r3, #2
 80095fc:	69ba      	ldr	r2, [r7, #24]
 80095fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009602:	4b3b      	ldr	r3, [pc, #236]	; (80096f0 <HAL_GPIO_Init+0x334>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	43db      	mvns	r3, r3
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	4013      	ands	r3, r2
 8009610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800961e:	69ba      	ldr	r2, [r7, #24]
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	4313      	orrs	r3, r2
 8009624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009626:	4a32      	ldr	r2, [pc, #200]	; (80096f0 <HAL_GPIO_Init+0x334>)
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800962c:	4b30      	ldr	r3, [pc, #192]	; (80096f0 <HAL_GPIO_Init+0x334>)
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	43db      	mvns	r3, r3
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	4013      	ands	r3, r2
 800963a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d003      	beq.n	8009650 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	4313      	orrs	r3, r2
 800964e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009650:	4a27      	ldr	r2, [pc, #156]	; (80096f0 <HAL_GPIO_Init+0x334>)
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009656:	4b26      	ldr	r3, [pc, #152]	; (80096f0 <HAL_GPIO_Init+0x334>)
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	43db      	mvns	r3, r3
 8009660:	69ba      	ldr	r2, [r7, #24]
 8009662:	4013      	ands	r3, r2
 8009664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	4313      	orrs	r3, r2
 8009678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800967a:	4a1d      	ldr	r2, [pc, #116]	; (80096f0 <HAL_GPIO_Init+0x334>)
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009680:	4b1b      	ldr	r3, [pc, #108]	; (80096f0 <HAL_GPIO_Init+0x334>)
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	43db      	mvns	r3, r3
 800968a:	69ba      	ldr	r2, [r7, #24]
 800968c:	4013      	ands	r3, r2
 800968e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d003      	beq.n	80096a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800969c:	69ba      	ldr	r2, [r7, #24]
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80096a4:	4a12      	ldr	r2, [pc, #72]	; (80096f0 <HAL_GPIO_Init+0x334>)
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	3301      	adds	r3, #1
 80096ae:	61fb      	str	r3, [r7, #28]
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	2b0f      	cmp	r3, #15
 80096b4:	f67f ae90 	bls.w	80093d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80096b8:	bf00      	nop
 80096ba:	bf00      	nop
 80096bc:	3724      	adds	r7, #36	; 0x24
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	40023800 	.word	0x40023800
 80096cc:	40013800 	.word	0x40013800
 80096d0:	40020000 	.word	0x40020000
 80096d4:	40020400 	.word	0x40020400
 80096d8:	40020800 	.word	0x40020800
 80096dc:	40020c00 	.word	0x40020c00
 80096e0:	40021000 	.word	0x40021000
 80096e4:	40021400 	.word	0x40021400
 80096e8:	40021800 	.word	0x40021800
 80096ec:	40021c00 	.word	0x40021c00
 80096f0:	40013c00 	.word	0x40013c00

080096f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80096fe:	2300      	movs	r3, #0
 8009700:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8009702:	2300      	movs	r3, #0
 8009704:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8009706:	2300      	movs	r3, #0
 8009708:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800970a:	2300      	movs	r3, #0
 800970c:	617b      	str	r3, [r7, #20]
 800970e:	e0cd      	b.n	80098ac <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009710:	2201      	movs	r2, #1
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	fa02 f303 	lsl.w	r3, r2, r3
 8009718:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	4013      	ands	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	429a      	cmp	r2, r3
 8009728:	f040 80bd 	bne.w	80098a6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800972c:	4a65      	ldr	r2, [pc, #404]	; (80098c4 <HAL_GPIO_DeInit+0x1d0>)
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	089b      	lsrs	r3, r3, #2
 8009732:	3302      	adds	r3, #2
 8009734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009738:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f003 0303 	and.w	r3, r3, #3
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	220f      	movs	r2, #15
 8009744:	fa02 f303 	lsl.w	r3, r2, r3
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	4013      	ands	r3, r2
 800974c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a5d      	ldr	r2, [pc, #372]	; (80098c8 <HAL_GPIO_DeInit+0x1d4>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d02b      	beq.n	80097ae <HAL_GPIO_DeInit+0xba>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a5c      	ldr	r2, [pc, #368]	; (80098cc <HAL_GPIO_DeInit+0x1d8>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d025      	beq.n	80097aa <HAL_GPIO_DeInit+0xb6>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a5b      	ldr	r2, [pc, #364]	; (80098d0 <HAL_GPIO_DeInit+0x1dc>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d01f      	beq.n	80097a6 <HAL_GPIO_DeInit+0xb2>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a5a      	ldr	r2, [pc, #360]	; (80098d4 <HAL_GPIO_DeInit+0x1e0>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d019      	beq.n	80097a2 <HAL_GPIO_DeInit+0xae>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a59      	ldr	r2, [pc, #356]	; (80098d8 <HAL_GPIO_DeInit+0x1e4>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d013      	beq.n	800979e <HAL_GPIO_DeInit+0xaa>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a58      	ldr	r2, [pc, #352]	; (80098dc <HAL_GPIO_DeInit+0x1e8>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d00d      	beq.n	800979a <HAL_GPIO_DeInit+0xa6>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a57      	ldr	r2, [pc, #348]	; (80098e0 <HAL_GPIO_DeInit+0x1ec>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d007      	beq.n	8009796 <HAL_GPIO_DeInit+0xa2>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a56      	ldr	r2, [pc, #344]	; (80098e4 <HAL_GPIO_DeInit+0x1f0>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d101      	bne.n	8009792 <HAL_GPIO_DeInit+0x9e>
 800978e:	2307      	movs	r3, #7
 8009790:	e00e      	b.n	80097b0 <HAL_GPIO_DeInit+0xbc>
 8009792:	2308      	movs	r3, #8
 8009794:	e00c      	b.n	80097b0 <HAL_GPIO_DeInit+0xbc>
 8009796:	2306      	movs	r3, #6
 8009798:	e00a      	b.n	80097b0 <HAL_GPIO_DeInit+0xbc>
 800979a:	2305      	movs	r3, #5
 800979c:	e008      	b.n	80097b0 <HAL_GPIO_DeInit+0xbc>
 800979e:	2304      	movs	r3, #4
 80097a0:	e006      	b.n	80097b0 <HAL_GPIO_DeInit+0xbc>
 80097a2:	2303      	movs	r3, #3
 80097a4:	e004      	b.n	80097b0 <HAL_GPIO_DeInit+0xbc>
 80097a6:	2302      	movs	r3, #2
 80097a8:	e002      	b.n	80097b0 <HAL_GPIO_DeInit+0xbc>
 80097aa:	2301      	movs	r3, #1
 80097ac:	e000      	b.n	80097b0 <HAL_GPIO_DeInit+0xbc>
 80097ae:	2300      	movs	r3, #0
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	f002 0203 	and.w	r2, r2, #3
 80097b6:	0092      	lsls	r2, r2, #2
 80097b8:	4093      	lsls	r3, r2
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d132      	bne.n	8009826 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80097c0:	4b49      	ldr	r3, [pc, #292]	; (80098e8 <HAL_GPIO_DeInit+0x1f4>)
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	43db      	mvns	r3, r3
 80097c8:	4947      	ldr	r1, [pc, #284]	; (80098e8 <HAL_GPIO_DeInit+0x1f4>)
 80097ca:	4013      	ands	r3, r2
 80097cc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80097ce:	4b46      	ldr	r3, [pc, #280]	; (80098e8 <HAL_GPIO_DeInit+0x1f4>)
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	43db      	mvns	r3, r3
 80097d6:	4944      	ldr	r1, [pc, #272]	; (80098e8 <HAL_GPIO_DeInit+0x1f4>)
 80097d8:	4013      	ands	r3, r2
 80097da:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80097dc:	4b42      	ldr	r3, [pc, #264]	; (80098e8 <HAL_GPIO_DeInit+0x1f4>)
 80097de:	689a      	ldr	r2, [r3, #8]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	43db      	mvns	r3, r3
 80097e4:	4940      	ldr	r1, [pc, #256]	; (80098e8 <HAL_GPIO_DeInit+0x1f4>)
 80097e6:	4013      	ands	r3, r2
 80097e8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80097ea:	4b3f      	ldr	r3, [pc, #252]	; (80098e8 <HAL_GPIO_DeInit+0x1f4>)
 80097ec:	68da      	ldr	r2, [r3, #12]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	43db      	mvns	r3, r3
 80097f2:	493d      	ldr	r1, [pc, #244]	; (80098e8 <HAL_GPIO_DeInit+0x1f4>)
 80097f4:	4013      	ands	r3, r2
 80097f6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	f003 0303 	and.w	r3, r3, #3
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	220f      	movs	r2, #15
 8009802:	fa02 f303 	lsl.w	r3, r2, r3
 8009806:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009808:	4a2e      	ldr	r2, [pc, #184]	; (80098c4 <HAL_GPIO_DeInit+0x1d0>)
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	089b      	lsrs	r3, r3, #2
 800980e:	3302      	adds	r3, #2
 8009810:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	43da      	mvns	r2, r3
 8009818:	482a      	ldr	r0, [pc, #168]	; (80098c4 <HAL_GPIO_DeInit+0x1d0>)
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	089b      	lsrs	r3, r3, #2
 800981e:	400a      	ands	r2, r1
 8009820:	3302      	adds	r3, #2
 8009822:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	2103      	movs	r1, #3
 8009830:	fa01 f303 	lsl.w	r3, r1, r3
 8009834:	43db      	mvns	r3, r3
 8009836:	401a      	ands	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	08da      	lsrs	r2, r3, #3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	3208      	adds	r2, #8
 8009844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f003 0307 	and.w	r3, r3, #7
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	220f      	movs	r2, #15
 8009852:	fa02 f303 	lsl.w	r3, r2, r3
 8009856:	43db      	mvns	r3, r3
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	08d2      	lsrs	r2, r2, #3
 800985c:	4019      	ands	r1, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	3208      	adds	r2, #8
 8009862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	005b      	lsls	r3, r3, #1
 800986e:	2103      	movs	r1, #3
 8009870:	fa01 f303 	lsl.w	r3, r1, r3
 8009874:	43db      	mvns	r3, r3
 8009876:	401a      	ands	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	2101      	movs	r1, #1
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	fa01 f303 	lsl.w	r3, r1, r3
 8009888:	43db      	mvns	r3, r3
 800988a:	401a      	ands	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	689a      	ldr	r2, [r3, #8]
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	2103      	movs	r1, #3
 800989a:	fa01 f303 	lsl.w	r3, r1, r3
 800989e:	43db      	mvns	r3, r3
 80098a0:	401a      	ands	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	3301      	adds	r3, #1
 80098aa:	617b      	str	r3, [r7, #20]
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	2b0f      	cmp	r3, #15
 80098b0:	f67f af2e 	bls.w	8009710 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80098b4:	bf00      	nop
 80098b6:	bf00      	nop
 80098b8:	371c      	adds	r7, #28
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	40013800 	.word	0x40013800
 80098c8:	40020000 	.word	0x40020000
 80098cc:	40020400 	.word	0x40020400
 80098d0:	40020800 	.word	0x40020800
 80098d4:	40020c00 	.word	0x40020c00
 80098d8:	40021000 	.word	0x40021000
 80098dc:	40021400 	.word	0x40021400
 80098e0:	40021800 	.word	0x40021800
 80098e4:	40021c00 	.word	0x40021c00
 80098e8:	40013c00 	.word	0x40013c00

080098ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	691a      	ldr	r2, [r3, #16]
 80098fc:	887b      	ldrh	r3, [r7, #2]
 80098fe:	4013      	ands	r3, r2
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009904:	2301      	movs	r3, #1
 8009906:	73fb      	strb	r3, [r7, #15]
 8009908:	e001      	b.n	800990e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800990a:	2300      	movs	r3, #0
 800990c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800990e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	807b      	strh	r3, [r7, #2]
 8009928:	4613      	mov	r3, r2
 800992a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800992c:	787b      	ldrb	r3, [r7, #1]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009932:	887a      	ldrh	r2, [r7, #2]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009938:	e003      	b.n	8009942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800993a:	887b      	ldrh	r3, [r7, #2]
 800993c:	041a      	lsls	r2, r3, #16
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	619a      	str	r2, [r3, #24]
}
 8009942:	bf00      	nop
 8009944:	370c      	adds	r7, #12
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
	...

08009950 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d101      	bne.n	8009962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e264      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 0301 	and.w	r3, r3, #1
 800996a:	2b00      	cmp	r3, #0
 800996c:	d075      	beq.n	8009a5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800996e:	4ba3      	ldr	r3, [pc, #652]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f003 030c 	and.w	r3, r3, #12
 8009976:	2b04      	cmp	r3, #4
 8009978:	d00c      	beq.n	8009994 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800997a:	4ba0      	ldr	r3, [pc, #640]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009982:	2b08      	cmp	r3, #8
 8009984:	d112      	bne.n	80099ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009986:	4b9d      	ldr	r3, [pc, #628]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800998e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009992:	d10b      	bne.n	80099ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009994:	4b99      	ldr	r3, [pc, #612]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d05b      	beq.n	8009a58 <HAL_RCC_OscConfig+0x108>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d157      	bne.n	8009a58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e23f      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099b4:	d106      	bne.n	80099c4 <HAL_RCC_OscConfig+0x74>
 80099b6:	4b91      	ldr	r3, [pc, #580]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a90      	ldr	r2, [pc, #576]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 80099bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099c0:	6013      	str	r3, [r2, #0]
 80099c2:	e01d      	b.n	8009a00 <HAL_RCC_OscConfig+0xb0>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099cc:	d10c      	bne.n	80099e8 <HAL_RCC_OscConfig+0x98>
 80099ce:	4b8b      	ldr	r3, [pc, #556]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a8a      	ldr	r2, [pc, #552]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 80099d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099d8:	6013      	str	r3, [r2, #0]
 80099da:	4b88      	ldr	r3, [pc, #544]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a87      	ldr	r2, [pc, #540]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 80099e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099e4:	6013      	str	r3, [r2, #0]
 80099e6:	e00b      	b.n	8009a00 <HAL_RCC_OscConfig+0xb0>
 80099e8:	4b84      	ldr	r3, [pc, #528]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a83      	ldr	r2, [pc, #524]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 80099ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	4b81      	ldr	r3, [pc, #516]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a80      	ldr	r2, [pc, #512]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 80099fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d013      	beq.n	8009a30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a08:	f7fd f986 	bl	8006d18 <HAL_GetTick>
 8009a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a0e:	e008      	b.n	8009a22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a10:	f7fd f982 	bl	8006d18 <HAL_GetTick>
 8009a14:	4602      	mov	r2, r0
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	2b64      	cmp	r3, #100	; 0x64
 8009a1c:	d901      	bls.n	8009a22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e204      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a22:	4b76      	ldr	r3, [pc, #472]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d0f0      	beq.n	8009a10 <HAL_RCC_OscConfig+0xc0>
 8009a2e:	e014      	b.n	8009a5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a30:	f7fd f972 	bl	8006d18 <HAL_GetTick>
 8009a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a36:	e008      	b.n	8009a4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a38:	f7fd f96e 	bl	8006d18 <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	2b64      	cmp	r3, #100	; 0x64
 8009a44:	d901      	bls.n	8009a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e1f0      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a4a:	4b6c      	ldr	r3, [pc, #432]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1f0      	bne.n	8009a38 <HAL_RCC_OscConfig+0xe8>
 8009a56:	e000      	b.n	8009a5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 0302 	and.w	r3, r3, #2
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d063      	beq.n	8009b2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a66:	4b65      	ldr	r3, [pc, #404]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	f003 030c 	and.w	r3, r3, #12
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00b      	beq.n	8009a8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a72:	4b62      	ldr	r3, [pc, #392]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a7a:	2b08      	cmp	r3, #8
 8009a7c:	d11c      	bne.n	8009ab8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a7e:	4b5f      	ldr	r3, [pc, #380]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d116      	bne.n	8009ab8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a8a:	4b5c      	ldr	r3, [pc, #368]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0302 	and.w	r3, r3, #2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d005      	beq.n	8009aa2 <HAL_RCC_OscConfig+0x152>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d001      	beq.n	8009aa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e1c4      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aa2:	4b56      	ldr	r3, [pc, #344]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	00db      	lsls	r3, r3, #3
 8009ab0:	4952      	ldr	r1, [pc, #328]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ab6:	e03a      	b.n	8009b2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d020      	beq.n	8009b02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ac0:	4b4f      	ldr	r3, [pc, #316]	; (8009c00 <HAL_RCC_OscConfig+0x2b0>)
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac6:	f7fd f927 	bl	8006d18 <HAL_GetTick>
 8009aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009acc:	e008      	b.n	8009ae0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ace:	f7fd f923 	bl	8006d18 <HAL_GetTick>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d901      	bls.n	8009ae0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e1a5      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ae0:	4b46      	ldr	r3, [pc, #280]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0302 	and.w	r3, r3, #2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d0f0      	beq.n	8009ace <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aec:	4b43      	ldr	r3, [pc, #268]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	00db      	lsls	r3, r3, #3
 8009afa:	4940      	ldr	r1, [pc, #256]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	600b      	str	r3, [r1, #0]
 8009b00:	e015      	b.n	8009b2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b02:	4b3f      	ldr	r3, [pc, #252]	; (8009c00 <HAL_RCC_OscConfig+0x2b0>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b08:	f7fd f906 	bl	8006d18 <HAL_GetTick>
 8009b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b0e:	e008      	b.n	8009b22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b10:	f7fd f902 	bl	8006d18 <HAL_GetTick>
 8009b14:	4602      	mov	r2, r0
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	1ad3      	subs	r3, r2, r3
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d901      	bls.n	8009b22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e184      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b22:	4b36      	ldr	r3, [pc, #216]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0302 	and.w	r3, r3, #2
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1f0      	bne.n	8009b10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 0308 	and.w	r3, r3, #8
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d030      	beq.n	8009b9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d016      	beq.n	8009b70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b42:	4b30      	ldr	r3, [pc, #192]	; (8009c04 <HAL_RCC_OscConfig+0x2b4>)
 8009b44:	2201      	movs	r2, #1
 8009b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b48:	f7fd f8e6 	bl	8006d18 <HAL_GetTick>
 8009b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b4e:	e008      	b.n	8009b62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b50:	f7fd f8e2 	bl	8006d18 <HAL_GetTick>
 8009b54:	4602      	mov	r2, r0
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d901      	bls.n	8009b62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e164      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b62:	4b26      	ldr	r3, [pc, #152]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b66:	f003 0302 	and.w	r3, r3, #2
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d0f0      	beq.n	8009b50 <HAL_RCC_OscConfig+0x200>
 8009b6e:	e015      	b.n	8009b9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b70:	4b24      	ldr	r3, [pc, #144]	; (8009c04 <HAL_RCC_OscConfig+0x2b4>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b76:	f7fd f8cf 	bl	8006d18 <HAL_GetTick>
 8009b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b7c:	e008      	b.n	8009b90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b7e:	f7fd f8cb 	bl	8006d18 <HAL_GetTick>
 8009b82:	4602      	mov	r2, r0
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d901      	bls.n	8009b90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e14d      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b90:	4b1a      	ldr	r3, [pc, #104]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b94:	f003 0302 	and.w	r3, r3, #2
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1f0      	bne.n	8009b7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 0304 	and.w	r3, r3, #4
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f000 80a0 	beq.w	8009cea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009baa:	2300      	movs	r3, #0
 8009bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bae:	4b13      	ldr	r3, [pc, #76]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10f      	bne.n	8009bda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60bb      	str	r3, [r7, #8]
 8009bbe:	4b0f      	ldr	r3, [pc, #60]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc2:	4a0e      	ldr	r2, [pc, #56]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8009bca:	4b0c      	ldr	r3, [pc, #48]	; (8009bfc <HAL_RCC_OscConfig+0x2ac>)
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bd2:	60bb      	str	r3, [r7, #8]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bda:	4b0b      	ldr	r3, [pc, #44]	; (8009c08 <HAL_RCC_OscConfig+0x2b8>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d121      	bne.n	8009c2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009be6:	4b08      	ldr	r3, [pc, #32]	; (8009c08 <HAL_RCC_OscConfig+0x2b8>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a07      	ldr	r2, [pc, #28]	; (8009c08 <HAL_RCC_OscConfig+0x2b8>)
 8009bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bf2:	f7fd f891 	bl	8006d18 <HAL_GetTick>
 8009bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bf8:	e011      	b.n	8009c1e <HAL_RCC_OscConfig+0x2ce>
 8009bfa:	bf00      	nop
 8009bfc:	40023800 	.word	0x40023800
 8009c00:	42470000 	.word	0x42470000
 8009c04:	42470e80 	.word	0x42470e80
 8009c08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c0c:	f7fd f884 	bl	8006d18 <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d901      	bls.n	8009c1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e106      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c1e:	4b85      	ldr	r3, [pc, #532]	; (8009e34 <HAL_RCC_OscConfig+0x4e4>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0f0      	beq.n	8009c0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d106      	bne.n	8009c40 <HAL_RCC_OscConfig+0x2f0>
 8009c32:	4b81      	ldr	r3, [pc, #516]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c36:	4a80      	ldr	r2, [pc, #512]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009c38:	f043 0301 	orr.w	r3, r3, #1
 8009c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c3e:	e01c      	b.n	8009c7a <HAL_RCC_OscConfig+0x32a>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	2b05      	cmp	r3, #5
 8009c46:	d10c      	bne.n	8009c62 <HAL_RCC_OscConfig+0x312>
 8009c48:	4b7b      	ldr	r3, [pc, #492]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4c:	4a7a      	ldr	r2, [pc, #488]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009c4e:	f043 0304 	orr.w	r3, r3, #4
 8009c52:	6713      	str	r3, [r2, #112]	; 0x70
 8009c54:	4b78      	ldr	r3, [pc, #480]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c58:	4a77      	ldr	r2, [pc, #476]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009c5a:	f043 0301 	orr.w	r3, r3, #1
 8009c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c60:	e00b      	b.n	8009c7a <HAL_RCC_OscConfig+0x32a>
 8009c62:	4b75      	ldr	r3, [pc, #468]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c66:	4a74      	ldr	r2, [pc, #464]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009c68:	f023 0301 	bic.w	r3, r3, #1
 8009c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c6e:	4b72      	ldr	r3, [pc, #456]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c72:	4a71      	ldr	r2, [pc, #452]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009c74:	f023 0304 	bic.w	r3, r3, #4
 8009c78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d015      	beq.n	8009cae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c82:	f7fd f849 	bl	8006d18 <HAL_GetTick>
 8009c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c88:	e00a      	b.n	8009ca0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c8a:	f7fd f845 	bl	8006d18 <HAL_GetTick>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	1ad3      	subs	r3, r2, r3
 8009c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d901      	bls.n	8009ca0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e0c5      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ca0:	4b65      	ldr	r3, [pc, #404]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca4:	f003 0302 	and.w	r3, r3, #2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d0ee      	beq.n	8009c8a <HAL_RCC_OscConfig+0x33a>
 8009cac:	e014      	b.n	8009cd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009cae:	f7fd f833 	bl	8006d18 <HAL_GetTick>
 8009cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009cb4:	e00a      	b.n	8009ccc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009cb6:	f7fd f82f 	bl	8006d18 <HAL_GetTick>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d901      	bls.n	8009ccc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	e0af      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ccc:	4b5a      	ldr	r3, [pc, #360]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd0:	f003 0302 	and.w	r3, r3, #2
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1ee      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d105      	bne.n	8009cea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cde:	4b56      	ldr	r3, [pc, #344]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce2:	4a55      	ldr	r2, [pc, #340]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ce8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	699b      	ldr	r3, [r3, #24]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 809b 	beq.w	8009e2a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009cf4:	4b50      	ldr	r3, [pc, #320]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	f003 030c 	and.w	r3, r3, #12
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	d05c      	beq.n	8009dba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d141      	bne.n	8009d8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d08:	4b4c      	ldr	r3, [pc, #304]	; (8009e3c <HAL_RCC_OscConfig+0x4ec>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d0e:	f7fd f803 	bl	8006d18 <HAL_GetTick>
 8009d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d14:	e008      	b.n	8009d28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d16:	f7fc ffff 	bl	8006d18 <HAL_GetTick>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	d901      	bls.n	8009d28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009d24:	2303      	movs	r3, #3
 8009d26:	e081      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d28:	4b43      	ldr	r3, [pc, #268]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1f0      	bne.n	8009d16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	69da      	ldr	r2, [r3, #28]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a1b      	ldr	r3, [r3, #32]
 8009d3c:	431a      	orrs	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d42:	019b      	lsls	r3, r3, #6
 8009d44:	431a      	orrs	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4a:	085b      	lsrs	r3, r3, #1
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	041b      	lsls	r3, r3, #16
 8009d50:	431a      	orrs	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d56:	061b      	lsls	r3, r3, #24
 8009d58:	4937      	ldr	r1, [pc, #220]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d5e:	4b37      	ldr	r3, [pc, #220]	; (8009e3c <HAL_RCC_OscConfig+0x4ec>)
 8009d60:	2201      	movs	r2, #1
 8009d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d64:	f7fc ffd8 	bl	8006d18 <HAL_GetTick>
 8009d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d6a:	e008      	b.n	8009d7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d6c:	f7fc ffd4 	bl	8006d18 <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d901      	bls.n	8009d7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e056      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d7e:	4b2e      	ldr	r3, [pc, #184]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d0f0      	beq.n	8009d6c <HAL_RCC_OscConfig+0x41c>
 8009d8a:	e04e      	b.n	8009e2a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d8c:	4b2b      	ldr	r3, [pc, #172]	; (8009e3c <HAL_RCC_OscConfig+0x4ec>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d92:	f7fc ffc1 	bl	8006d18 <HAL_GetTick>
 8009d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d98:	e008      	b.n	8009dac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d9a:	f7fc ffbd 	bl	8006d18 <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d901      	bls.n	8009dac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e03f      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dac:	4b22      	ldr	r3, [pc, #136]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1f0      	bne.n	8009d9a <HAL_RCC_OscConfig+0x44a>
 8009db8:	e037      	b.n	8009e2a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d101      	bne.n	8009dc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e032      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009dc6:	4b1c      	ldr	r3, [pc, #112]	; (8009e38 <HAL_RCC_OscConfig+0x4e8>)
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d028      	beq.n	8009e26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d121      	bne.n	8009e26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d11a      	bne.n	8009e26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009df6:	4013      	ands	r3, r2
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009dfc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d111      	bne.n	8009e26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0c:	085b      	lsrs	r3, r3, #1
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d107      	bne.n	8009e26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e20:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d001      	beq.n	8009e2a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	e000      	b.n	8009e2c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3718      	adds	r7, #24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	40007000 	.word	0x40007000
 8009e38:	40023800 	.word	0x40023800
 8009e3c:	42470060 	.word	0x42470060

08009e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	e0cc      	b.n	8009fee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e54:	4b68      	ldr	r3, [pc, #416]	; (8009ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0307 	and.w	r3, r3, #7
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d90c      	bls.n	8009e7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e62:	4b65      	ldr	r3, [pc, #404]	; (8009ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	b2d2      	uxtb	r2, r2
 8009e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e6a:	4b63      	ldr	r3, [pc, #396]	; (8009ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 0307 	and.w	r3, r3, #7
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d001      	beq.n	8009e7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e0b8      	b.n	8009fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 0302 	and.w	r3, r3, #2
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d020      	beq.n	8009eca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d005      	beq.n	8009ea0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e94:	4b59      	ldr	r3, [pc, #356]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	4a58      	ldr	r2, [pc, #352]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009e9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009e9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0308 	and.w	r3, r3, #8
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d005      	beq.n	8009eb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009eac:	4b53      	ldr	r3, [pc, #332]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	4a52      	ldr	r2, [pc, #328]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009eb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009eb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009eb8:	4b50      	ldr	r3, [pc, #320]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	494d      	ldr	r1, [pc, #308]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d044      	beq.n	8009f60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d107      	bne.n	8009eee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ede:	4b47      	ldr	r3, [pc, #284]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d119      	bne.n	8009f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e07f      	b.n	8009fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d003      	beq.n	8009efe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009efa:	2b03      	cmp	r3, #3
 8009efc:	d107      	bne.n	8009f0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009efe:	4b3f      	ldr	r3, [pc, #252]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d109      	bne.n	8009f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e06f      	b.n	8009fee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f0e:	4b3b      	ldr	r3, [pc, #236]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f003 0302 	and.w	r3, r3, #2
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e067      	b.n	8009fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f1e:	4b37      	ldr	r3, [pc, #220]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f023 0203 	bic.w	r2, r3, #3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	4934      	ldr	r1, [pc, #208]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009f30:	f7fc fef2 	bl	8006d18 <HAL_GetTick>
 8009f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f36:	e00a      	b.n	8009f4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f38:	f7fc feee 	bl	8006d18 <HAL_GetTick>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d901      	bls.n	8009f4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	e04f      	b.n	8009fee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f4e:	4b2b      	ldr	r3, [pc, #172]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	f003 020c 	and.w	r2, r3, #12
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d1eb      	bne.n	8009f38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f60:	4b25      	ldr	r3, [pc, #148]	; (8009ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0307 	and.w	r3, r3, #7
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d20c      	bcs.n	8009f88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f6e:	4b22      	ldr	r3, [pc, #136]	; (8009ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	b2d2      	uxtb	r2, r2
 8009f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f76:	4b20      	ldr	r3, [pc, #128]	; (8009ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 0307 	and.w	r3, r3, #7
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d001      	beq.n	8009f88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e032      	b.n	8009fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 0304 	and.w	r3, r3, #4
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d008      	beq.n	8009fa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f94:	4b19      	ldr	r3, [pc, #100]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	4916      	ldr	r1, [pc, #88]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 0308 	and.w	r3, r3, #8
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d009      	beq.n	8009fc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009fb2:	4b12      	ldr	r3, [pc, #72]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	490e      	ldr	r1, [pc, #56]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009fc6:	f000 f889 	bl	800a0dc <HAL_RCC_GetSysClockFreq>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	4b0b      	ldr	r3, [pc, #44]	; (8009ffc <HAL_RCC_ClockConfig+0x1bc>)
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	091b      	lsrs	r3, r3, #4
 8009fd2:	f003 030f 	and.w	r3, r3, #15
 8009fd6:	490a      	ldr	r1, [pc, #40]	; (800a000 <HAL_RCC_ClockConfig+0x1c0>)
 8009fd8:	5ccb      	ldrb	r3, [r1, r3]
 8009fda:	fa22 f303 	lsr.w	r3, r2, r3
 8009fde:	4a09      	ldr	r2, [pc, #36]	; (800a004 <HAL_RCC_ClockConfig+0x1c4>)
 8009fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009fe2:	4b09      	ldr	r3, [pc, #36]	; (800a008 <HAL_RCC_ClockConfig+0x1c8>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fc f990 	bl	800630c <HAL_InitTick>

  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	40023c00 	.word	0x40023c00
 8009ffc:	40023800 	.word	0x40023800
 800a000:	08026af0 	.word	0x08026af0
 800a004:	20000344 	.word	0x20000344
 800a008:	20000348 	.word	0x20000348

0800a00c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08c      	sub	sp, #48	; 0x30
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d129      	bne.n	800a072 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800a01e:	2300      	movs	r3, #0
 800a020:	61bb      	str	r3, [r7, #24]
 800a022:	4b2b      	ldr	r3, [pc, #172]	; (800a0d0 <HAL_RCC_MCOConfig+0xc4>)
 800a024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a026:	4a2a      	ldr	r2, [pc, #168]	; (800a0d0 <HAL_RCC_MCOConfig+0xc4>)
 800a028:	f043 0301 	orr.w	r3, r3, #1
 800a02c:	6313      	str	r3, [r2, #48]	; 0x30
 800a02e:	4b28      	ldr	r3, [pc, #160]	; (800a0d0 <HAL_RCC_MCOConfig+0xc4>)
 800a030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	61bb      	str	r3, [r7, #24]
 800a038:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a03a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a03e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a040:	2302      	movs	r3, #2
 800a042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a044:	2303      	movs	r3, #3
 800a046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a048:	2300      	movs	r3, #0
 800a04a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a04c:	2300      	movs	r3, #0
 800a04e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a050:	f107 031c 	add.w	r3, r7, #28
 800a054:	4619      	mov	r1, r3
 800a056:	481f      	ldr	r0, [pc, #124]	; (800a0d4 <HAL_RCC_MCOConfig+0xc8>)
 800a058:	f7ff f9b0 	bl	80093bc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a05c:	4b1c      	ldr	r3, [pc, #112]	; (800a0d0 <HAL_RCC_MCOConfig+0xc4>)
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800a064:	68b9      	ldr	r1, [r7, #8]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	430b      	orrs	r3, r1
 800a06a:	4919      	ldr	r1, [pc, #100]	; (800a0d0 <HAL_RCC_MCOConfig+0xc4>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800a070:	e029      	b.n	800a0c6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800a072:	2300      	movs	r3, #0
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	4b16      	ldr	r3, [pc, #88]	; (800a0d0 <HAL_RCC_MCOConfig+0xc4>)
 800a078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07a:	4a15      	ldr	r2, [pc, #84]	; (800a0d0 <HAL_RCC_MCOConfig+0xc4>)
 800a07c:	f043 0304 	orr.w	r3, r3, #4
 800a080:	6313      	str	r3, [r2, #48]	; 0x30
 800a082:	4b13      	ldr	r3, [pc, #76]	; (800a0d0 <HAL_RCC_MCOConfig+0xc4>)
 800a084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a086:	f003 0304 	and.w	r3, r3, #4
 800a08a:	617b      	str	r3, [r7, #20]
 800a08c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a08e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a094:	2302      	movs	r3, #2
 800a096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a098:	2303      	movs	r3, #3
 800a09a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a09c:	2300      	movs	r3, #0
 800a09e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a0a4:	f107 031c 	add.w	r3, r7, #28
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	480b      	ldr	r0, [pc, #44]	; (800a0d8 <HAL_RCC_MCOConfig+0xcc>)
 800a0ac:	f7ff f986 	bl	80093bc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800a0b0:	4b07      	ldr	r3, [pc, #28]	; (800a0d0 <HAL_RCC_MCOConfig+0xc4>)
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	00d9      	lsls	r1, r3, #3
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	430b      	orrs	r3, r1
 800a0c0:	4903      	ldr	r1, [pc, #12]	; (800a0d0 <HAL_RCC_MCOConfig+0xc4>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	608b      	str	r3, [r1, #8]
}
 800a0c6:	bf00      	nop
 800a0c8:	3730      	adds	r7, #48	; 0x30
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	40023800 	.word	0x40023800
 800a0d4:	40020000 	.word	0x40020000
 800a0d8:	40020800 	.word	0x40020800

0800a0dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0dc:	b5b0      	push	{r4, r5, r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	6079      	str	r1, [r7, #4]
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	60f9      	str	r1, [r7, #12]
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0f2:	4952      	ldr	r1, [pc, #328]	; (800a23c <HAL_RCC_GetSysClockFreq+0x160>)
 800a0f4:	6889      	ldr	r1, [r1, #8]
 800a0f6:	f001 010c 	and.w	r1, r1, #12
 800a0fa:	2908      	cmp	r1, #8
 800a0fc:	d00d      	beq.n	800a11a <HAL_RCC_GetSysClockFreq+0x3e>
 800a0fe:	2908      	cmp	r1, #8
 800a100:	f200 8094 	bhi.w	800a22c <HAL_RCC_GetSysClockFreq+0x150>
 800a104:	2900      	cmp	r1, #0
 800a106:	d002      	beq.n	800a10e <HAL_RCC_GetSysClockFreq+0x32>
 800a108:	2904      	cmp	r1, #4
 800a10a:	d003      	beq.n	800a114 <HAL_RCC_GetSysClockFreq+0x38>
 800a10c:	e08e      	b.n	800a22c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a10e:	4b4c      	ldr	r3, [pc, #304]	; (800a240 <HAL_RCC_GetSysClockFreq+0x164>)
 800a110:	60bb      	str	r3, [r7, #8]
       break;
 800a112:	e08e      	b.n	800a232 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a114:	4b4b      	ldr	r3, [pc, #300]	; (800a244 <HAL_RCC_GetSysClockFreq+0x168>)
 800a116:	60bb      	str	r3, [r7, #8]
      break;
 800a118:	e08b      	b.n	800a232 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a11a:	4948      	ldr	r1, [pc, #288]	; (800a23c <HAL_RCC_GetSysClockFreq+0x160>)
 800a11c:	6849      	ldr	r1, [r1, #4]
 800a11e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800a122:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a124:	4945      	ldr	r1, [pc, #276]	; (800a23c <HAL_RCC_GetSysClockFreq+0x160>)
 800a126:	6849      	ldr	r1, [r1, #4]
 800a128:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800a12c:	2900      	cmp	r1, #0
 800a12e:	d024      	beq.n	800a17a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a130:	4942      	ldr	r1, [pc, #264]	; (800a23c <HAL_RCC_GetSysClockFreq+0x160>)
 800a132:	6849      	ldr	r1, [r1, #4]
 800a134:	0989      	lsrs	r1, r1, #6
 800a136:	4608      	mov	r0, r1
 800a138:	f04f 0100 	mov.w	r1, #0
 800a13c:	f240 14ff 	movw	r4, #511	; 0x1ff
 800a140:	f04f 0500 	mov.w	r5, #0
 800a144:	ea00 0204 	and.w	r2, r0, r4
 800a148:	ea01 0305 	and.w	r3, r1, r5
 800a14c:	493d      	ldr	r1, [pc, #244]	; (800a244 <HAL_RCC_GetSysClockFreq+0x168>)
 800a14e:	fb01 f003 	mul.w	r0, r1, r3
 800a152:	2100      	movs	r1, #0
 800a154:	fb01 f102 	mul.w	r1, r1, r2
 800a158:	1844      	adds	r4, r0, r1
 800a15a:	493a      	ldr	r1, [pc, #232]	; (800a244 <HAL_RCC_GetSysClockFreq+0x168>)
 800a15c:	fba2 0101 	umull	r0, r1, r2, r1
 800a160:	1863      	adds	r3, r4, r1
 800a162:	4619      	mov	r1, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	461a      	mov	r2, r3
 800a168:	f04f 0300 	mov.w	r3, #0
 800a16c:	f7f6 fd8c 	bl	8000c88 <__aeabi_uldivmod>
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	4613      	mov	r3, r2
 800a176:	60fb      	str	r3, [r7, #12]
 800a178:	e04a      	b.n	800a210 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a17a:	4b30      	ldr	r3, [pc, #192]	; (800a23c <HAL_RCC_GetSysClockFreq+0x160>)
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	099b      	lsrs	r3, r3, #6
 800a180:	461a      	mov	r2, r3
 800a182:	f04f 0300 	mov.w	r3, #0
 800a186:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a18a:	f04f 0100 	mov.w	r1, #0
 800a18e:	ea02 0400 	and.w	r4, r2, r0
 800a192:	ea03 0501 	and.w	r5, r3, r1
 800a196:	4620      	mov	r0, r4
 800a198:	4629      	mov	r1, r5
 800a19a:	f04f 0200 	mov.w	r2, #0
 800a19e:	f04f 0300 	mov.w	r3, #0
 800a1a2:	014b      	lsls	r3, r1, #5
 800a1a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a1a8:	0142      	lsls	r2, r0, #5
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	1b00      	subs	r0, r0, r4
 800a1b0:	eb61 0105 	sbc.w	r1, r1, r5
 800a1b4:	f04f 0200 	mov.w	r2, #0
 800a1b8:	f04f 0300 	mov.w	r3, #0
 800a1bc:	018b      	lsls	r3, r1, #6
 800a1be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a1c2:	0182      	lsls	r2, r0, #6
 800a1c4:	1a12      	subs	r2, r2, r0
 800a1c6:	eb63 0301 	sbc.w	r3, r3, r1
 800a1ca:	f04f 0000 	mov.w	r0, #0
 800a1ce:	f04f 0100 	mov.w	r1, #0
 800a1d2:	00d9      	lsls	r1, r3, #3
 800a1d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a1d8:	00d0      	lsls	r0, r2, #3
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	1912      	adds	r2, r2, r4
 800a1e0:	eb45 0303 	adc.w	r3, r5, r3
 800a1e4:	f04f 0000 	mov.w	r0, #0
 800a1e8:	f04f 0100 	mov.w	r1, #0
 800a1ec:	0299      	lsls	r1, r3, #10
 800a1ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a1f2:	0290      	lsls	r0, r2, #10
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	461a      	mov	r2, r3
 800a200:	f04f 0300 	mov.w	r3, #0
 800a204:	f7f6 fd40 	bl	8000c88 <__aeabi_uldivmod>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4613      	mov	r3, r2
 800a20e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a210:	4b0a      	ldr	r3, [pc, #40]	; (800a23c <HAL_RCC_GetSysClockFreq+0x160>)
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	0c1b      	lsrs	r3, r3, #16
 800a216:	f003 0303 	and.w	r3, r3, #3
 800a21a:	3301      	adds	r3, #1
 800a21c:	005b      	lsls	r3, r3, #1
 800a21e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	fbb2 f3f3 	udiv	r3, r2, r3
 800a228:	60bb      	str	r3, [r7, #8]
      break;
 800a22a:	e002      	b.n	800a232 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a22c:	4b04      	ldr	r3, [pc, #16]	; (800a240 <HAL_RCC_GetSysClockFreq+0x164>)
 800a22e:	60bb      	str	r3, [r7, #8]
      break;
 800a230:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a232:	68bb      	ldr	r3, [r7, #8]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bdb0      	pop	{r4, r5, r7, pc}
 800a23c:	40023800 	.word	0x40023800
 800a240:	00f42400 	.word	0x00f42400
 800a244:	017d7840 	.word	0x017d7840

0800a248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a248:	b480      	push	{r7}
 800a24a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a24c:	4b03      	ldr	r3, [pc, #12]	; (800a25c <HAL_RCC_GetHCLKFreq+0x14>)
 800a24e:	681b      	ldr	r3, [r3, #0]
}
 800a250:	4618      	mov	r0, r3
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	20000344 	.word	0x20000344

0800a260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a264:	f7ff fff0 	bl	800a248 <HAL_RCC_GetHCLKFreq>
 800a268:	4602      	mov	r2, r0
 800a26a:	4b05      	ldr	r3, [pc, #20]	; (800a280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	0a9b      	lsrs	r3, r3, #10
 800a270:	f003 0307 	and.w	r3, r3, #7
 800a274:	4903      	ldr	r1, [pc, #12]	; (800a284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a276:	5ccb      	ldrb	r3, [r1, r3]
 800a278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	40023800 	.word	0x40023800
 800a284:	08026b00 	.word	0x08026b00

0800a288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a28c:	f7ff ffdc 	bl	800a248 <HAL_RCC_GetHCLKFreq>
 800a290:	4602      	mov	r2, r0
 800a292:	4b05      	ldr	r3, [pc, #20]	; (800a2a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	0b5b      	lsrs	r3, r3, #13
 800a298:	f003 0307 	and.w	r3, r3, #7
 800a29c:	4903      	ldr	r1, [pc, #12]	; (800a2ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800a29e:	5ccb      	ldrb	r3, [r1, r3]
 800a2a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	40023800 	.word	0x40023800
 800a2ac:	08026b00 	.word	0x08026b00

0800a2b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	220f      	movs	r2, #15
 800a2be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a2c0:	4b12      	ldr	r3, [pc, #72]	; (800a30c <HAL_RCC_GetClockConfig+0x5c>)
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	f003 0203 	and.w	r2, r3, #3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a2cc:	4b0f      	ldr	r3, [pc, #60]	; (800a30c <HAL_RCC_GetClockConfig+0x5c>)
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a2d8:	4b0c      	ldr	r3, [pc, #48]	; (800a30c <HAL_RCC_GetClockConfig+0x5c>)
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a2e4:	4b09      	ldr	r3, [pc, #36]	; (800a30c <HAL_RCC_GetClockConfig+0x5c>)
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	08db      	lsrs	r3, r3, #3
 800a2ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a2f2:	4b07      	ldr	r3, [pc, #28]	; (800a310 <HAL_RCC_GetClockConfig+0x60>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 0207 	and.w	r2, r3, #7
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	601a      	str	r2, [r3, #0]
}
 800a2fe:	bf00      	nop
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	40023800 	.word	0x40023800
 800a310:	40023c00 	.word	0x40023c00

0800a314 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d101      	bne.n	800a326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e07b      	b.n	800a41e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d108      	bne.n	800a340 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a336:	d009      	beq.n	800a34c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	61da      	str	r2, [r3, #28]
 800a33e:	e005      	b.n	800a34c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d106      	bne.n	800a36c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7fb fe16 	bl	8005f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a382:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a394:	431a      	orrs	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a39e:	431a      	orrs	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	f003 0302 	and.w	r3, r3, #2
 800a3a8:	431a      	orrs	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	69db      	ldr	r3, [r3, #28]
 800a3c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3c6:	431a      	orrs	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3d0:	ea42 0103 	orr.w	r1, r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	430a      	orrs	r2, r1
 800a3e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	0c1b      	lsrs	r3, r3, #16
 800a3ea:	f003 0104 	and.w	r1, r3, #4
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	f003 0210 	and.w	r2, r3, #16
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	430a      	orrs	r2, r1
 800a3fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	69da      	ldr	r2, [r3, #28]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a40c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b088      	sub	sp, #32
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	60b9      	str	r1, [r7, #8]
 800a430:	603b      	str	r3, [r7, #0]
 800a432:	4613      	mov	r3, r2
 800a434:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a440:	2b01      	cmp	r3, #1
 800a442:	d101      	bne.n	800a448 <HAL_SPI_Transmit+0x22>
 800a444:	2302      	movs	r3, #2
 800a446:	e126      	b.n	800a696 <HAL_SPI_Transmit+0x270>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a450:	f7fc fc62 	bl	8006d18 <HAL_GetTick>
 800a454:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a456:	88fb      	ldrh	r3, [r7, #6]
 800a458:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b01      	cmp	r3, #1
 800a464:	d002      	beq.n	800a46c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a466:	2302      	movs	r3, #2
 800a468:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a46a:	e10b      	b.n	800a684 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d002      	beq.n	800a478 <HAL_SPI_Transmit+0x52>
 800a472:	88fb      	ldrh	r3, [r7, #6]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a47c:	e102      	b.n	800a684 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2203      	movs	r2, #3
 800a482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	88fa      	ldrh	r2, [r7, #6]
 800a496:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	88fa      	ldrh	r2, [r7, #6]
 800a49c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4c4:	d10f      	bne.n	800a4e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f0:	2b40      	cmp	r3, #64	; 0x40
 800a4f2:	d007      	beq.n	800a504 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a502:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a50c:	d14b      	bne.n	800a5a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d002      	beq.n	800a51c <HAL_SPI_Transmit+0xf6>
 800a516:	8afb      	ldrh	r3, [r7, #22]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d13e      	bne.n	800a59a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a520:	881a      	ldrh	r2, [r3, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52c:	1c9a      	adds	r2, r3, #2
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a536:	b29b      	uxth	r3, r3
 800a538:	3b01      	subs	r3, #1
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a540:	e02b      	b.n	800a59a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f003 0302 	and.w	r3, r3, #2
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d112      	bne.n	800a576 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a554:	881a      	ldrh	r2, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a560:	1c9a      	adds	r2, r3, #2
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	3b01      	subs	r3, #1
 800a56e:	b29a      	uxth	r2, r3
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	86da      	strh	r2, [r3, #54]	; 0x36
 800a574:	e011      	b.n	800a59a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a576:	f7fc fbcf 	bl	8006d18 <HAL_GetTick>
 800a57a:	4602      	mov	r2, r0
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	429a      	cmp	r2, r3
 800a584:	d803      	bhi.n	800a58e <HAL_SPI_Transmit+0x168>
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58c:	d102      	bne.n	800a594 <HAL_SPI_Transmit+0x16e>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d102      	bne.n	800a59a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a598:	e074      	b.n	800a684 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1ce      	bne.n	800a542 <HAL_SPI_Transmit+0x11c>
 800a5a4:	e04c      	b.n	800a640 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d002      	beq.n	800a5b4 <HAL_SPI_Transmit+0x18e>
 800a5ae:	8afb      	ldrh	r3, [r7, #22]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d140      	bne.n	800a636 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	330c      	adds	r3, #12
 800a5be:	7812      	ldrb	r2, [r2, #0]
 800a5c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c6:	1c5a      	adds	r2, r3, #1
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a5da:	e02c      	b.n	800a636 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	f003 0302 	and.w	r3, r3, #2
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d113      	bne.n	800a612 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	330c      	adds	r3, #12
 800a5f4:	7812      	ldrb	r2, [r2, #0]
 800a5f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fc:	1c5a      	adds	r2, r3, #1
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a606:	b29b      	uxth	r3, r3
 800a608:	3b01      	subs	r3, #1
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	86da      	strh	r2, [r3, #54]	; 0x36
 800a610:	e011      	b.n	800a636 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a612:	f7fc fb81 	bl	8006d18 <HAL_GetTick>
 800a616:	4602      	mov	r2, r0
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d803      	bhi.n	800a62a <HAL_SPI_Transmit+0x204>
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a628:	d102      	bne.n	800a630 <HAL_SPI_Transmit+0x20a>
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d102      	bne.n	800a636 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a634:	e026      	b.n	800a684 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1cd      	bne.n	800a5dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a640:	69ba      	ldr	r2, [r7, #24]
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 fbcb 	bl	800ade0 <SPI_EndRxTxTransaction>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d002      	beq.n	800a656 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2220      	movs	r2, #32
 800a654:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10a      	bne.n	800a674 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a65e:	2300      	movs	r3, #0
 800a660:	613b      	str	r3, [r7, #16]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	613b      	str	r3, [r7, #16]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	613b      	str	r3, [r7, #16]
 800a672:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	77fb      	strb	r3, [r7, #31]
 800a680:	e000      	b.n	800a684 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a682:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a694:	7ffb      	ldrb	r3, [r7, #31]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3720      	adds	r7, #32
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b088      	sub	sp, #32
 800a6a2:	af02      	add	r7, sp, #8
 800a6a4:	60f8      	str	r0, [r7, #12]
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	603b      	str	r3, [r7, #0]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6ba:	d112      	bne.n	800a6e2 <HAL_SPI_Receive+0x44>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10e      	bne.n	800a6e2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2204      	movs	r2, #4
 800a6c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a6cc:	88fa      	ldrh	r2, [r7, #6]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	68b9      	ldr	r1, [r7, #8]
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 f8f1 	bl	800a8c0 <HAL_SPI_TransmitReceive>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	e0ea      	b.n	800a8b8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d101      	bne.n	800a6f0 <HAL_SPI_Receive+0x52>
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	e0e3      	b.n	800a8b8 <HAL_SPI_Receive+0x21a>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a6f8:	f7fc fb0e 	bl	8006d18 <HAL_GetTick>
 800a6fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b01      	cmp	r3, #1
 800a708:	d002      	beq.n	800a710 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a70a:	2302      	movs	r3, #2
 800a70c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a70e:	e0ca      	b.n	800a8a6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <HAL_SPI_Receive+0x7e>
 800a716:	88fb      	ldrh	r3, [r7, #6]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d102      	bne.n	800a722 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a720:	e0c1      	b.n	800a8a6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2204      	movs	r2, #4
 800a726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	88fa      	ldrh	r2, [r7, #6]
 800a73a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	88fa      	ldrh	r2, [r7, #6]
 800a740:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a768:	d10f      	bne.n	800a78a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a778:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a788:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a794:	2b40      	cmp	r3, #64	; 0x40
 800a796:	d007      	beq.n	800a7a8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d162      	bne.n	800a876 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a7b0:	e02e      	b.n	800a810 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d115      	bne.n	800a7ec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f103 020c 	add.w	r2, r3, #12
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7cc:	7812      	ldrb	r2, [r2, #0]
 800a7ce:	b2d2      	uxtb	r2, r2
 800a7d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a7ea:	e011      	b.n	800a810 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7ec:	f7fc fa94 	bl	8006d18 <HAL_GetTick>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	683a      	ldr	r2, [r7, #0]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d803      	bhi.n	800a804 <HAL_SPI_Receive+0x166>
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a802:	d102      	bne.n	800a80a <HAL_SPI_Receive+0x16c>
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d102      	bne.n	800a810 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a80e:	e04a      	b.n	800a8a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a814:	b29b      	uxth	r3, r3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1cb      	bne.n	800a7b2 <HAL_SPI_Receive+0x114>
 800a81a:	e031      	b.n	800a880 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	2b01      	cmp	r3, #1
 800a828:	d113      	bne.n	800a852 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68da      	ldr	r2, [r3, #12]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a834:	b292      	uxth	r2, r2
 800a836:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83c:	1c9a      	adds	r2, r3, #2
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a846:	b29b      	uxth	r3, r3
 800a848:	3b01      	subs	r3, #1
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a850:	e011      	b.n	800a876 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a852:	f7fc fa61 	bl	8006d18 <HAL_GetTick>
 800a856:	4602      	mov	r2, r0
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	1ad3      	subs	r3, r2, r3
 800a85c:	683a      	ldr	r2, [r7, #0]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d803      	bhi.n	800a86a <HAL_SPI_Receive+0x1cc>
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a868:	d102      	bne.n	800a870 <HAL_SPI_Receive+0x1d2>
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d102      	bne.n	800a876 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800a870:	2303      	movs	r3, #3
 800a872:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a874:	e017      	b.n	800a8a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1cd      	bne.n	800a81c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a880:	693a      	ldr	r2, [r7, #16]
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f000 fa45 	bl	800ad14 <SPI_EndRxTransaction>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d002      	beq.n	800a896 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2220      	movs	r2, #32
 800a894:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d002      	beq.n	800a8a4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	75fb      	strb	r3, [r7, #23]
 800a8a2:	e000      	b.n	800a8a6 <HAL_SPI_Receive+0x208>
  }

error :
 800a8a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a8b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3718      	adds	r7, #24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08c      	sub	sp, #48	; 0x30
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d101      	bne.n	800a8e6 <HAL_SPI_TransmitReceive+0x26>
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	e18a      	b.n	800abfc <HAL_SPI_TransmitReceive+0x33c>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8ee:	f7fc fa13 	bl	8006d18 <HAL_GetTick>
 800a8f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a8fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a904:	887b      	ldrh	r3, [r7, #2]
 800a906:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d00f      	beq.n	800a930 <HAL_SPI_TransmitReceive+0x70>
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a916:	d107      	bne.n	800a928 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d103      	bne.n	800a928 <HAL_SPI_TransmitReceive+0x68>
 800a920:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a924:	2b04      	cmp	r3, #4
 800a926:	d003      	beq.n	800a930 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a928:	2302      	movs	r3, #2
 800a92a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a92e:	e15b      	b.n	800abe8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d005      	beq.n	800a942 <HAL_SPI_TransmitReceive+0x82>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <HAL_SPI_TransmitReceive+0x82>
 800a93c:	887b      	ldrh	r3, [r7, #2]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d103      	bne.n	800a94a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a948:	e14e      	b.n	800abe8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b04      	cmp	r3, #4
 800a954:	d003      	beq.n	800a95e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2205      	movs	r2, #5
 800a95a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	887a      	ldrh	r2, [r7, #2]
 800a96e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	887a      	ldrh	r2, [r7, #2]
 800a974:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	887a      	ldrh	r2, [r7, #2]
 800a980:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	887a      	ldrh	r2, [r7, #2]
 800a986:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a99e:	2b40      	cmp	r3, #64	; 0x40
 800a9a0:	d007      	beq.n	800a9b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9ba:	d178      	bne.n	800aaae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d002      	beq.n	800a9ca <HAL_SPI_TransmitReceive+0x10a>
 800a9c4:	8b7b      	ldrh	r3, [r7, #26]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d166      	bne.n	800aa98 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ce:	881a      	ldrh	r2, [r3, #0]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9da:	1c9a      	adds	r2, r3, #2
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9ee:	e053      	b.n	800aa98 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	f003 0302 	and.w	r3, r3, #2
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d11b      	bne.n	800aa36 <HAL_SPI_TransmitReceive+0x176>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d016      	beq.n	800aa36 <HAL_SPI_TransmitReceive+0x176>
 800aa08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d113      	bne.n	800aa36 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa12:	881a      	ldrh	r2, [r3, #0]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1e:	1c9a      	adds	r2, r3, #2
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa32:	2300      	movs	r3, #0
 800aa34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	f003 0301 	and.w	r3, r3, #1
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d119      	bne.n	800aa78 <HAL_SPI_TransmitReceive+0x1b8>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d014      	beq.n	800aa78 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68da      	ldr	r2, [r3, #12]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa58:	b292      	uxth	r2, r2
 800aa5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa60:	1c9a      	adds	r2, r3, #2
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aa74:	2301      	movs	r3, #1
 800aa76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800aa78:	f7fc f94e 	bl	8006d18 <HAL_GetTick>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d807      	bhi.n	800aa98 <HAL_SPI_TransmitReceive+0x1d8>
 800aa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa8e:	d003      	beq.n	800aa98 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800aa90:	2303      	movs	r3, #3
 800aa92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800aa96:	e0a7      	b.n	800abe8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1a6      	bne.n	800a9f0 <HAL_SPI_TransmitReceive+0x130>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1a1      	bne.n	800a9f0 <HAL_SPI_TransmitReceive+0x130>
 800aaac:	e07c      	b.n	800aba8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d002      	beq.n	800aabc <HAL_SPI_TransmitReceive+0x1fc>
 800aab6:	8b7b      	ldrh	r3, [r7, #26]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d16b      	bne.n	800ab94 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	330c      	adds	r3, #12
 800aac6:	7812      	ldrb	r2, [r2, #0]
 800aac8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aace:	1c5a      	adds	r2, r3, #1
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aad8:	b29b      	uxth	r3, r3
 800aada:	3b01      	subs	r3, #1
 800aadc:	b29a      	uxth	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aae2:	e057      	b.n	800ab94 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d11c      	bne.n	800ab2c <HAL_SPI_TransmitReceive+0x26c>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d017      	beq.n	800ab2c <HAL_SPI_TransmitReceive+0x26c>
 800aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d114      	bne.n	800ab2c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	330c      	adds	r3, #12
 800ab0c:	7812      	ldrb	r2, [r2, #0]
 800ab0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab14:	1c5a      	adds	r2, r3, #1
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	3b01      	subs	r3, #1
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d119      	bne.n	800ab6e <HAL_SPI_TransmitReceive+0x2ae>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d014      	beq.n	800ab6e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68da      	ldr	r2, [r3, #12]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4e:	b2d2      	uxtb	r2, r2
 800ab50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab56:	1c5a      	adds	r2, r3, #1
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	3b01      	subs	r3, #1
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ab6e:	f7fc f8d3 	bl	8006d18 <HAL_GetTick>
 800ab72:	4602      	mov	r2, r0
 800ab74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d803      	bhi.n	800ab86 <HAL_SPI_TransmitReceive+0x2c6>
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab84:	d102      	bne.n	800ab8c <HAL_SPI_TransmitReceive+0x2cc>
 800ab86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d103      	bne.n	800ab94 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ab92:	e029      	b.n	800abe8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1a2      	bne.n	800aae4 <HAL_SPI_TransmitReceive+0x224>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d19d      	bne.n	800aae4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f000 f917 	bl	800ade0 <SPI_EndRxTxTransaction>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d006      	beq.n	800abc6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2220      	movs	r2, #32
 800abc2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800abc4:	e010      	b.n	800abe8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10b      	bne.n	800abe6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abce:	2300      	movs	r3, #0
 800abd0:	617b      	str	r3, [r7, #20]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	617b      	str	r3, [r7, #20]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	617b      	str	r3, [r7, #20]
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	e000      	b.n	800abe8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800abe6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800abf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3730      	adds	r7, #48	; 0x30
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	603b      	str	r3, [r7, #0]
 800ac10:	4613      	mov	r3, r2
 800ac12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ac14:	f7fc f880 	bl	8006d18 <HAL_GetTick>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1c:	1a9b      	subs	r3, r3, r2
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	4413      	add	r3, r2
 800ac22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ac24:	f7fc f878 	bl	8006d18 <HAL_GetTick>
 800ac28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ac2a:	4b39      	ldr	r3, [pc, #228]	; (800ad10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	015b      	lsls	r3, r3, #5
 800ac30:	0d1b      	lsrs	r3, r3, #20
 800ac32:	69fa      	ldr	r2, [r7, #28]
 800ac34:	fb02 f303 	mul.w	r3, r2, r3
 800ac38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac3a:	e054      	b.n	800ace6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac42:	d050      	beq.n	800ace6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ac44:	f7fc f868 	bl	8006d18 <HAL_GetTick>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	69fa      	ldr	r2, [r7, #28]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d902      	bls.n	800ac5a <SPI_WaitFlagStateUntilTimeout+0x56>
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d13d      	bne.n	800acd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	685a      	ldr	r2, [r3, #4]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ac68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac72:	d111      	bne.n	800ac98 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac7c:	d004      	beq.n	800ac88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac86:	d107      	bne.n	800ac98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aca0:	d10f      	bne.n	800acc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800acb0:	601a      	str	r2, [r3, #0]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800acc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800acd2:	2303      	movs	r3, #3
 800acd4:	e017      	b.n	800ad06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d101      	bne.n	800ace0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800acdc:	2300      	movs	r3, #0
 800acde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	3b01      	subs	r3, #1
 800ace4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689a      	ldr	r2, [r3, #8]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	4013      	ands	r3, r2
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	bf0c      	ite	eq
 800acf6:	2301      	moveq	r3, #1
 800acf8:	2300      	movne	r3, #0
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	461a      	mov	r2, r3
 800acfe:	79fb      	ldrb	r3, [r7, #7]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d19b      	bne.n	800ac3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3720      	adds	r7, #32
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	20000344 	.word	0x20000344

0800ad14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af02      	add	r7, sp, #8
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad28:	d111      	bne.n	800ad4e <SPI_EndRxTransaction+0x3a>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad32:	d004      	beq.n	800ad3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad3c:	d107      	bne.n	800ad4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad4c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad56:	d12a      	bne.n	800adae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad60:	d012      	beq.n	800ad88 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	2180      	movs	r1, #128	; 0x80
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f7ff ff49 	bl	800ac04 <SPI_WaitFlagStateUntilTimeout>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d02d      	beq.n	800add4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7c:	f043 0220 	orr.w	r2, r3, #32
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ad84:	2303      	movs	r3, #3
 800ad86:	e026      	b.n	800add6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2101      	movs	r1, #1
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f7ff ff36 	bl	800ac04 <SPI_WaitFlagStateUntilTimeout>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d01a      	beq.n	800add4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada2:	f043 0220 	orr.w	r2, r3, #32
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e013      	b.n	800add6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	2200      	movs	r2, #0
 800adb6:	2101      	movs	r1, #1
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f7ff ff23 	bl	800ac04 <SPI_WaitFlagStateUntilTimeout>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d007      	beq.n	800add4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc8:	f043 0220 	orr.w	r2, r3, #32
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800add0:	2303      	movs	r3, #3
 800add2:	e000      	b.n	800add6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
	...

0800ade0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b088      	sub	sp, #32
 800ade4:	af02      	add	r7, sp, #8
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800adec:	4b1b      	ldr	r3, [pc, #108]	; (800ae5c <SPI_EndRxTxTransaction+0x7c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a1b      	ldr	r2, [pc, #108]	; (800ae60 <SPI_EndRxTxTransaction+0x80>)
 800adf2:	fba2 2303 	umull	r2, r3, r2, r3
 800adf6:	0d5b      	lsrs	r3, r3, #21
 800adf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800adfc:	fb02 f303 	mul.w	r3, r2, r3
 800ae00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae0a:	d112      	bne.n	800ae32 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	2200      	movs	r2, #0
 800ae14:	2180      	movs	r1, #128	; 0x80
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f7ff fef4 	bl	800ac04 <SPI_WaitFlagStateUntilTimeout>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d016      	beq.n	800ae50 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae26:	f043 0220 	orr.w	r2, r3, #32
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ae2e:	2303      	movs	r3, #3
 800ae30:	e00f      	b.n	800ae52 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00a      	beq.n	800ae4e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae48:	2b80      	cmp	r3, #128	; 0x80
 800ae4a:	d0f2      	beq.n	800ae32 <SPI_EndRxTxTransaction+0x52>
 800ae4c:	e000      	b.n	800ae50 <SPI_EndRxTxTransaction+0x70>
        break;
 800ae4e:	bf00      	nop
  }

  return HAL_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3718      	adds	r7, #24
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	20000344 	.word	0x20000344
 800ae60:	165e9f81 	.word	0x165e9f81

0800ae64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e041      	b.n	800aefa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d106      	bne.n	800ae90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7fb f8cc 	bl	8006028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2202      	movs	r2, #2
 800ae94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4619      	mov	r1, r3
 800aea2:	4610      	mov	r0, r2
 800aea4:	f000 fafe 	bl	800b4a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
	...

0800af04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af12:	b2db      	uxtb	r3, r3
 800af14:	2b01      	cmp	r3, #1
 800af16:	d001      	beq.n	800af1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	e046      	b.n	800afaa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2202      	movs	r2, #2
 800af20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a23      	ldr	r2, [pc, #140]	; (800afb8 <HAL_TIM_Base_Start+0xb4>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d022      	beq.n	800af74 <HAL_TIM_Base_Start+0x70>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af36:	d01d      	beq.n	800af74 <HAL_TIM_Base_Start+0x70>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a1f      	ldr	r2, [pc, #124]	; (800afbc <HAL_TIM_Base_Start+0xb8>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d018      	beq.n	800af74 <HAL_TIM_Base_Start+0x70>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a1e      	ldr	r2, [pc, #120]	; (800afc0 <HAL_TIM_Base_Start+0xbc>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d013      	beq.n	800af74 <HAL_TIM_Base_Start+0x70>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a1c      	ldr	r2, [pc, #112]	; (800afc4 <HAL_TIM_Base_Start+0xc0>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d00e      	beq.n	800af74 <HAL_TIM_Base_Start+0x70>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a1b      	ldr	r2, [pc, #108]	; (800afc8 <HAL_TIM_Base_Start+0xc4>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d009      	beq.n	800af74 <HAL_TIM_Base_Start+0x70>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a19      	ldr	r2, [pc, #100]	; (800afcc <HAL_TIM_Base_Start+0xc8>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d004      	beq.n	800af74 <HAL_TIM_Base_Start+0x70>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a18      	ldr	r2, [pc, #96]	; (800afd0 <HAL_TIM_Base_Start+0xcc>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d111      	bne.n	800af98 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	f003 0307 	and.w	r3, r3, #7
 800af7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2b06      	cmp	r3, #6
 800af84:	d010      	beq.n	800afa8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f042 0201 	orr.w	r2, r2, #1
 800af94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af96:	e007      	b.n	800afa8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f042 0201 	orr.w	r2, r2, #1
 800afa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3714      	adds	r7, #20
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	40010000 	.word	0x40010000
 800afbc:	40000400 	.word	0x40000400
 800afc0:	40000800 	.word	0x40000800
 800afc4:	40000c00 	.word	0x40000c00
 800afc8:	40010400 	.word	0x40010400
 800afcc:	40014000 	.word	0x40014000
 800afd0:	40001800 	.word	0x40001800

0800afd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d001      	beq.n	800afec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	e04e      	b.n	800b08a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2202      	movs	r2, #2
 800aff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68da      	ldr	r2, [r3, #12]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f042 0201 	orr.w	r2, r2, #1
 800b002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a23      	ldr	r2, [pc, #140]	; (800b098 <HAL_TIM_Base_Start_IT+0xc4>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d022      	beq.n	800b054 <HAL_TIM_Base_Start_IT+0x80>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b016:	d01d      	beq.n	800b054 <HAL_TIM_Base_Start_IT+0x80>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a1f      	ldr	r2, [pc, #124]	; (800b09c <HAL_TIM_Base_Start_IT+0xc8>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d018      	beq.n	800b054 <HAL_TIM_Base_Start_IT+0x80>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a1e      	ldr	r2, [pc, #120]	; (800b0a0 <HAL_TIM_Base_Start_IT+0xcc>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d013      	beq.n	800b054 <HAL_TIM_Base_Start_IT+0x80>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a1c      	ldr	r2, [pc, #112]	; (800b0a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d00e      	beq.n	800b054 <HAL_TIM_Base_Start_IT+0x80>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a1b      	ldr	r2, [pc, #108]	; (800b0a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d009      	beq.n	800b054 <HAL_TIM_Base_Start_IT+0x80>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a19      	ldr	r2, [pc, #100]	; (800b0ac <HAL_TIM_Base_Start_IT+0xd8>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d004      	beq.n	800b054 <HAL_TIM_Base_Start_IT+0x80>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a18      	ldr	r2, [pc, #96]	; (800b0b0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d111      	bne.n	800b078 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	f003 0307 	and.w	r3, r3, #7
 800b05e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2b06      	cmp	r3, #6
 800b064:	d010      	beq.n	800b088 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f042 0201 	orr.w	r2, r2, #1
 800b074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b076:	e007      	b.n	800b088 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f042 0201 	orr.w	r2, r2, #1
 800b086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	40010000 	.word	0x40010000
 800b09c:	40000400 	.word	0x40000400
 800b0a0:	40000800 	.word	0x40000800
 800b0a4:	40000c00 	.word	0x40000c00
 800b0a8:	40010400 	.word	0x40010400
 800b0ac:	40014000 	.word	0x40014000
 800b0b0:	40001800 	.word	0x40001800

0800b0b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	f003 0302 	and.w	r3, r3, #2
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d122      	bne.n	800b110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	f003 0302 	and.w	r3, r3, #2
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d11b      	bne.n	800b110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f06f 0202 	mvn.w	r2, #2
 800b0e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	f003 0303 	and.w	r3, r3, #3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f9b5 	bl	800b466 <HAL_TIM_IC_CaptureCallback>
 800b0fc:	e005      	b.n	800b10a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f9a7 	bl	800b452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f9b8 	bl	800b47a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	f003 0304 	and.w	r3, r3, #4
 800b11a:	2b04      	cmp	r3, #4
 800b11c:	d122      	bne.n	800b164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	f003 0304 	and.w	r3, r3, #4
 800b128:	2b04      	cmp	r3, #4
 800b12a:	d11b      	bne.n	800b164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f06f 0204 	mvn.w	r2, #4
 800b134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2202      	movs	r2, #2
 800b13a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	699b      	ldr	r3, [r3, #24]
 800b142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f98b 	bl	800b466 <HAL_TIM_IC_CaptureCallback>
 800b150:	e005      	b.n	800b15e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f97d 	bl	800b452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 f98e 	bl	800b47a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	f003 0308 	and.w	r3, r3, #8
 800b16e:	2b08      	cmp	r3, #8
 800b170:	d122      	bne.n	800b1b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	f003 0308 	and.w	r3, r3, #8
 800b17c:	2b08      	cmp	r3, #8
 800b17e:	d11b      	bne.n	800b1b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f06f 0208 	mvn.w	r2, #8
 800b188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2204      	movs	r2, #4
 800b18e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	f003 0303 	and.w	r3, r3, #3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 f961 	bl	800b466 <HAL_TIM_IC_CaptureCallback>
 800b1a4:	e005      	b.n	800b1b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 f953 	bl	800b452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f964 	bl	800b47a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	f003 0310 	and.w	r3, r3, #16
 800b1c2:	2b10      	cmp	r3, #16
 800b1c4:	d122      	bne.n	800b20c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	f003 0310 	and.w	r3, r3, #16
 800b1d0:	2b10      	cmp	r3, #16
 800b1d2:	d11b      	bne.n	800b20c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f06f 0210 	mvn.w	r2, #16
 800b1dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2208      	movs	r2, #8
 800b1e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	69db      	ldr	r3, [r3, #28]
 800b1ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d003      	beq.n	800b1fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f937 	bl	800b466 <HAL_TIM_IC_CaptureCallback>
 800b1f8:	e005      	b.n	800b206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f929 	bl	800b452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 f93a 	bl	800b47a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	2b01      	cmp	r3, #1
 800b218:	d10e      	bne.n	800b238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	f003 0301 	and.w	r3, r3, #1
 800b224:	2b01      	cmp	r3, #1
 800b226:	d107      	bne.n	800b238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f06f 0201 	mvn.w	r2, #1
 800b230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7f9 fc7e 	bl	8004b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b242:	2b80      	cmp	r3, #128	; 0x80
 800b244:	d10e      	bne.n	800b264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b250:	2b80      	cmp	r3, #128	; 0x80
 800b252:	d107      	bne.n	800b264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b25c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fae0 	bl	800b824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b26e:	2b40      	cmp	r3, #64	; 0x40
 800b270:	d10e      	bne.n	800b290 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27c:	2b40      	cmp	r3, #64	; 0x40
 800b27e:	d107      	bne.n	800b290 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f8ff 	bl	800b48e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	f003 0320 	and.w	r3, r3, #32
 800b29a:	2b20      	cmp	r3, #32
 800b29c:	d10e      	bne.n	800b2bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	f003 0320 	and.w	r3, r3, #32
 800b2a8:	2b20      	cmp	r3, #32
 800b2aa:	d107      	bne.n	800b2bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f06f 0220 	mvn.w	r2, #32
 800b2b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 faaa 	bl	800b810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d101      	bne.n	800b2e0 <HAL_TIM_ConfigClockSource+0x1c>
 800b2dc:	2302      	movs	r3, #2
 800b2de:	e0b4      	b.n	800b44a <HAL_TIM_ConfigClockSource+0x186>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2202      	movs	r2, #2
 800b2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b2fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68ba      	ldr	r2, [r7, #8]
 800b30e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b318:	d03e      	beq.n	800b398 <HAL_TIM_ConfigClockSource+0xd4>
 800b31a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b31e:	f200 8087 	bhi.w	800b430 <HAL_TIM_ConfigClockSource+0x16c>
 800b322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b326:	f000 8086 	beq.w	800b436 <HAL_TIM_ConfigClockSource+0x172>
 800b32a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b32e:	d87f      	bhi.n	800b430 <HAL_TIM_ConfigClockSource+0x16c>
 800b330:	2b70      	cmp	r3, #112	; 0x70
 800b332:	d01a      	beq.n	800b36a <HAL_TIM_ConfigClockSource+0xa6>
 800b334:	2b70      	cmp	r3, #112	; 0x70
 800b336:	d87b      	bhi.n	800b430 <HAL_TIM_ConfigClockSource+0x16c>
 800b338:	2b60      	cmp	r3, #96	; 0x60
 800b33a:	d050      	beq.n	800b3de <HAL_TIM_ConfigClockSource+0x11a>
 800b33c:	2b60      	cmp	r3, #96	; 0x60
 800b33e:	d877      	bhi.n	800b430 <HAL_TIM_ConfigClockSource+0x16c>
 800b340:	2b50      	cmp	r3, #80	; 0x50
 800b342:	d03c      	beq.n	800b3be <HAL_TIM_ConfigClockSource+0xfa>
 800b344:	2b50      	cmp	r3, #80	; 0x50
 800b346:	d873      	bhi.n	800b430 <HAL_TIM_ConfigClockSource+0x16c>
 800b348:	2b40      	cmp	r3, #64	; 0x40
 800b34a:	d058      	beq.n	800b3fe <HAL_TIM_ConfigClockSource+0x13a>
 800b34c:	2b40      	cmp	r3, #64	; 0x40
 800b34e:	d86f      	bhi.n	800b430 <HAL_TIM_ConfigClockSource+0x16c>
 800b350:	2b30      	cmp	r3, #48	; 0x30
 800b352:	d064      	beq.n	800b41e <HAL_TIM_ConfigClockSource+0x15a>
 800b354:	2b30      	cmp	r3, #48	; 0x30
 800b356:	d86b      	bhi.n	800b430 <HAL_TIM_ConfigClockSource+0x16c>
 800b358:	2b20      	cmp	r3, #32
 800b35a:	d060      	beq.n	800b41e <HAL_TIM_ConfigClockSource+0x15a>
 800b35c:	2b20      	cmp	r3, #32
 800b35e:	d867      	bhi.n	800b430 <HAL_TIM_ConfigClockSource+0x16c>
 800b360:	2b00      	cmp	r3, #0
 800b362:	d05c      	beq.n	800b41e <HAL_TIM_ConfigClockSource+0x15a>
 800b364:	2b10      	cmp	r3, #16
 800b366:	d05a      	beq.n	800b41e <HAL_TIM_ConfigClockSource+0x15a>
 800b368:	e062      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6818      	ldr	r0, [r3, #0]
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	6899      	ldr	r1, [r3, #8]
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	f000 f9ad 	bl	800b6d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b38c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	609a      	str	r2, [r3, #8]
      break;
 800b396:	e04f      	b.n	800b438 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6818      	ldr	r0, [r3, #0]
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	6899      	ldr	r1, [r3, #8]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	f000 f996 	bl	800b6d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	689a      	ldr	r2, [r3, #8]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3ba:	609a      	str	r2, [r3, #8]
      break;
 800b3bc:	e03c      	b.n	800b438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6818      	ldr	r0, [r3, #0]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	6859      	ldr	r1, [r3, #4]
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	f000 f90a 	bl	800b5e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2150      	movs	r1, #80	; 0x50
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f000 f963 	bl	800b6a2 <TIM_ITRx_SetConfig>
      break;
 800b3dc:	e02c      	b.n	800b438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6818      	ldr	r0, [r3, #0]
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	6859      	ldr	r1, [r3, #4]
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	f000 f929 	bl	800b642 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2160      	movs	r1, #96	; 0x60
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 f953 	bl	800b6a2 <TIM_ITRx_SetConfig>
      break;
 800b3fc:	e01c      	b.n	800b438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6818      	ldr	r0, [r3, #0]
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	6859      	ldr	r1, [r3, #4]
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	461a      	mov	r2, r3
 800b40c:	f000 f8ea 	bl	800b5e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2140      	movs	r1, #64	; 0x40
 800b416:	4618      	mov	r0, r3
 800b418:	f000 f943 	bl	800b6a2 <TIM_ITRx_SetConfig>
      break;
 800b41c:	e00c      	b.n	800b438 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4619      	mov	r1, r3
 800b428:	4610      	mov	r0, r2
 800b42a:	f000 f93a 	bl	800b6a2 <TIM_ITRx_SetConfig>
      break;
 800b42e:	e003      	b.n	800b438 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	73fb      	strb	r3, [r7, #15]
      break;
 800b434:	e000      	b.n	800b438 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b448:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b452:	b480      	push	{r7}
 800b454:	b083      	sub	sp, #12
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b45a:	bf00      	nop
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b466:	b480      	push	{r7}
 800b468:	b083      	sub	sp, #12
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b46e:	bf00      	nop
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr

0800b47a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b47a:	b480      	push	{r7}
 800b47c:	b083      	sub	sp, #12
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b482:	bf00      	nop
 800b484:	370c      	adds	r7, #12
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr

0800b48e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b48e:	b480      	push	{r7}
 800b490:	b083      	sub	sp, #12
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b496:	bf00      	nop
 800b498:	370c      	adds	r7, #12
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
	...

0800b4a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a40      	ldr	r2, [pc, #256]	; (800b5b8 <TIM_Base_SetConfig+0x114>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d013      	beq.n	800b4e4 <TIM_Base_SetConfig+0x40>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4c2:	d00f      	beq.n	800b4e4 <TIM_Base_SetConfig+0x40>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a3d      	ldr	r2, [pc, #244]	; (800b5bc <TIM_Base_SetConfig+0x118>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d00b      	beq.n	800b4e4 <TIM_Base_SetConfig+0x40>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a3c      	ldr	r2, [pc, #240]	; (800b5c0 <TIM_Base_SetConfig+0x11c>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d007      	beq.n	800b4e4 <TIM_Base_SetConfig+0x40>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	4a3b      	ldr	r2, [pc, #236]	; (800b5c4 <TIM_Base_SetConfig+0x120>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d003      	beq.n	800b4e4 <TIM_Base_SetConfig+0x40>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a3a      	ldr	r2, [pc, #232]	; (800b5c8 <TIM_Base_SetConfig+0x124>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d108      	bne.n	800b4f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a2f      	ldr	r2, [pc, #188]	; (800b5b8 <TIM_Base_SetConfig+0x114>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d02b      	beq.n	800b556 <TIM_Base_SetConfig+0xb2>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b504:	d027      	beq.n	800b556 <TIM_Base_SetConfig+0xb2>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a2c      	ldr	r2, [pc, #176]	; (800b5bc <TIM_Base_SetConfig+0x118>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d023      	beq.n	800b556 <TIM_Base_SetConfig+0xb2>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a2b      	ldr	r2, [pc, #172]	; (800b5c0 <TIM_Base_SetConfig+0x11c>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d01f      	beq.n	800b556 <TIM_Base_SetConfig+0xb2>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	4a2a      	ldr	r2, [pc, #168]	; (800b5c4 <TIM_Base_SetConfig+0x120>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d01b      	beq.n	800b556 <TIM_Base_SetConfig+0xb2>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a29      	ldr	r2, [pc, #164]	; (800b5c8 <TIM_Base_SetConfig+0x124>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d017      	beq.n	800b556 <TIM_Base_SetConfig+0xb2>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a28      	ldr	r2, [pc, #160]	; (800b5cc <TIM_Base_SetConfig+0x128>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d013      	beq.n	800b556 <TIM_Base_SetConfig+0xb2>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a27      	ldr	r2, [pc, #156]	; (800b5d0 <TIM_Base_SetConfig+0x12c>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d00f      	beq.n	800b556 <TIM_Base_SetConfig+0xb2>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4a26      	ldr	r2, [pc, #152]	; (800b5d4 <TIM_Base_SetConfig+0x130>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d00b      	beq.n	800b556 <TIM_Base_SetConfig+0xb2>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	4a25      	ldr	r2, [pc, #148]	; (800b5d8 <TIM_Base_SetConfig+0x134>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d007      	beq.n	800b556 <TIM_Base_SetConfig+0xb2>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4a24      	ldr	r2, [pc, #144]	; (800b5dc <TIM_Base_SetConfig+0x138>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d003      	beq.n	800b556 <TIM_Base_SetConfig+0xb2>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4a23      	ldr	r2, [pc, #140]	; (800b5e0 <TIM_Base_SetConfig+0x13c>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d108      	bne.n	800b568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b55c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	4313      	orrs	r3, r2
 800b566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	695b      	ldr	r3, [r3, #20]
 800b572:	4313      	orrs	r3, r2
 800b574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	689a      	ldr	r2, [r3, #8]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a0a      	ldr	r2, [pc, #40]	; (800b5b8 <TIM_Base_SetConfig+0x114>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d003      	beq.n	800b59c <TIM_Base_SetConfig+0xf8>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a0c      	ldr	r2, [pc, #48]	; (800b5c8 <TIM_Base_SetConfig+0x124>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d103      	bne.n	800b5a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	691a      	ldr	r2, [r3, #16]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	615a      	str	r2, [r3, #20]
}
 800b5aa:	bf00      	nop
 800b5ac:	3714      	adds	r7, #20
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	40010000 	.word	0x40010000
 800b5bc:	40000400 	.word	0x40000400
 800b5c0:	40000800 	.word	0x40000800
 800b5c4:	40000c00 	.word	0x40000c00
 800b5c8:	40010400 	.word	0x40010400
 800b5cc:	40014000 	.word	0x40014000
 800b5d0:	40014400 	.word	0x40014400
 800b5d4:	40014800 	.word	0x40014800
 800b5d8:	40001800 	.word	0x40001800
 800b5dc:	40001c00 	.word	0x40001c00
 800b5e0:	40002000 	.word	0x40002000

0800b5e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6a1b      	ldr	r3, [r3, #32]
 800b5f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	f023 0201 	bic.w	r2, r3, #1
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	699b      	ldr	r3, [r3, #24]
 800b606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b60e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	011b      	lsls	r3, r3, #4
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	4313      	orrs	r3, r2
 800b618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f023 030a 	bic.w	r3, r3, #10
 800b620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	4313      	orrs	r3, r2
 800b628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	693a      	ldr	r2, [r7, #16]
 800b62e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	697a      	ldr	r2, [r7, #20]
 800b634:	621a      	str	r2, [r3, #32]
}
 800b636:	bf00      	nop
 800b638:	371c      	adds	r7, #28
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b642:	b480      	push	{r7}
 800b644:	b087      	sub	sp, #28
 800b646:	af00      	add	r7, sp, #0
 800b648:	60f8      	str	r0, [r7, #12]
 800b64a:	60b9      	str	r1, [r7, #8]
 800b64c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	f023 0210 	bic.w	r2, r3, #16
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	699b      	ldr	r3, [r3, #24]
 800b65e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6a1b      	ldr	r3, [r3, #32]
 800b664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b66c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	031b      	lsls	r3, r3, #12
 800b672:	697a      	ldr	r2, [r7, #20]
 800b674:	4313      	orrs	r3, r2
 800b676:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b67e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	011b      	lsls	r3, r3, #4
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	4313      	orrs	r3, r2
 800b688:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	697a      	ldr	r2, [r7, #20]
 800b68e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	693a      	ldr	r2, [r7, #16]
 800b694:	621a      	str	r2, [r3, #32]
}
 800b696:	bf00      	nop
 800b698:	371c      	adds	r7, #28
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b085      	sub	sp, #20
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	f043 0307 	orr.w	r3, r3, #7
 800b6c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	609a      	str	r2, [r3, #8]
}
 800b6cc:	bf00      	nop
 800b6ce:	3714      	adds	r7, #20
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b087      	sub	sp, #28
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
 800b6e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	021a      	lsls	r2, r3, #8
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	431a      	orrs	r2, r3
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	697a      	ldr	r2, [r7, #20]
 800b702:	4313      	orrs	r3, r2
 800b704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	609a      	str	r2, [r3, #8]
}
 800b70c:	bf00      	nop
 800b70e:	371c      	adds	r7, #28
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d101      	bne.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b72c:	2302      	movs	r3, #2
 800b72e:	e05a      	b.n	800b7e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2202      	movs	r2, #2
 800b73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	4313      	orrs	r3, r2
 800b760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a21      	ldr	r2, [pc, #132]	; (800b7f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d022      	beq.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b77c:	d01d      	beq.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a1d      	ldr	r2, [pc, #116]	; (800b7f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d018      	beq.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a1b      	ldr	r2, [pc, #108]	; (800b7fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d013      	beq.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a1a      	ldr	r2, [pc, #104]	; (800b800 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d00e      	beq.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a18      	ldr	r2, [pc, #96]	; (800b804 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d009      	beq.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a17      	ldr	r2, [pc, #92]	; (800b808 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d004      	beq.n	800b7ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a15      	ldr	r2, [pc, #84]	; (800b80c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d10c      	bne.n	800b7d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	68ba      	ldr	r2, [r7, #8]
 800b7d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	40010000 	.word	0x40010000
 800b7f8:	40000400 	.word	0x40000400
 800b7fc:	40000800 	.word	0x40000800
 800b800:	40000c00 	.word	0x40000c00
 800b804:	40010400 	.word	0x40010400
 800b808:	40014000 	.word	0x40014000
 800b80c:	40001800 	.word	0x40001800

0800b810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b818:	bf00      	nop
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b82c:	bf00      	nop
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d101      	bne.n	800b84a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	e03f      	b.n	800b8ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b00      	cmp	r3, #0
 800b854:	d106      	bne.n	800b864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f7fa fc20 	bl	80060a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2224      	movs	r2, #36	; 0x24
 800b868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68da      	ldr	r2, [r3, #12]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b87a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 ffc7 	bl	800c810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	691a      	ldr	r2, [r3, #16]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	695a      	ldr	r2, [r3, #20]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68da      	ldr	r2, [r3, #12]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b8b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2220      	movs	r2, #32
 800b8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2220      	movs	r2, #32
 800b8c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d101      	bne.n	800b8e4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e021      	b.n	800b928 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2224      	movs	r2, #36	; 0x24
 800b8e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68da      	ldr	r2, [r3, #12]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8fa:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7fa fcc3 	bl	8006288 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b08a      	sub	sp, #40	; 0x28
 800b934:	af02      	add	r7, sp, #8
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	603b      	str	r3, [r7, #0]
 800b93c:	4613      	mov	r3, r2
 800b93e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b940:	2300      	movs	r3, #0
 800b942:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	2b20      	cmp	r3, #32
 800b94e:	d17c      	bne.n	800ba4a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d002      	beq.n	800b95c <HAL_UART_Transmit+0x2c>
 800b956:	88fb      	ldrh	r3, [r7, #6]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d101      	bne.n	800b960 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	e075      	b.n	800ba4c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b966:	2b01      	cmp	r3, #1
 800b968:	d101      	bne.n	800b96e <HAL_UART_Transmit+0x3e>
 800b96a:	2302      	movs	r3, #2
 800b96c:	e06e      	b.n	800ba4c <HAL_UART_Transmit+0x11c>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2201      	movs	r2, #1
 800b972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2221      	movs	r2, #33	; 0x21
 800b980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b984:	f7fb f9c8 	bl	8006d18 <HAL_GetTick>
 800b988:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	88fa      	ldrh	r2, [r7, #6]
 800b98e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	88fa      	ldrh	r2, [r7, #6]
 800b994:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b99e:	d108      	bne.n	800b9b2 <HAL_UART_Transmit+0x82>
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	691b      	ldr	r3, [r3, #16]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d104      	bne.n	800b9b2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	61bb      	str	r3, [r7, #24]
 800b9b0:	e003      	b.n	800b9ba <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b9c2:	e02a      	b.n	800ba1a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	2180      	movs	r1, #128	; 0x80
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f000 fc54 	bl	800c27c <UART_WaitOnFlagUntilTimeout>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	e036      	b.n	800ba4c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d10b      	bne.n	800b9fc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9f2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	3302      	adds	r3, #2
 800b9f8:	61bb      	str	r3, [r7, #24]
 800b9fa:	e007      	b.n	800ba0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	781a      	ldrb	r2, [r3, #0]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	3b01      	subs	r3, #1
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1cf      	bne.n	800b9c4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	2140      	movs	r1, #64	; 0x40
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f000 fc24 	bl	800c27c <UART_WaitOnFlagUntilTimeout>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d001      	beq.n	800ba3e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	e006      	b.n	800ba4c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2220      	movs	r2, #32
 800ba42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	e000      	b.n	800ba4c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ba4a:	2302      	movs	r3, #2
  }
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3720      	adds	r7, #32
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b08c      	sub	sp, #48	; 0x30
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	4613      	mov	r3, r2
 800ba60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b20      	cmp	r3, #32
 800ba6c:	d152      	bne.n	800bb14 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d002      	beq.n	800ba7a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800ba74:	88fb      	ldrh	r3, [r7, #6]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d101      	bne.n	800ba7e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e04b      	b.n	800bb16 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d101      	bne.n	800ba8c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800ba88:	2302      	movs	r3, #2
 800ba8a:	e044      	b.n	800bb16 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2201      	movs	r2, #1
 800ba98:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ba9a:	88fb      	ldrh	r3, [r7, #6]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	68b9      	ldr	r1, [r7, #8]
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 fc59 	bl	800c358 <UART_Start_Receive_DMA>
 800baa6:	4603      	mov	r3, r0
 800baa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800baac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d12c      	bne.n	800bb0e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d125      	bne.n	800bb08 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800babc:	2300      	movs	r3, #0
 800babe:	613b      	str	r3, [r7, #16]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	613b      	str	r3, [r7, #16]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	613b      	str	r3, [r7, #16]
 800bad0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	330c      	adds	r3, #12
 800bad8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	e853 3f00 	ldrex	r3, [r3]
 800bae0:	617b      	str	r3, [r7, #20]
   return(result);
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	f043 0310 	orr.w	r3, r3, #16
 800bae8:	62bb      	str	r3, [r7, #40]	; 0x28
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	330c      	adds	r3, #12
 800baf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baf2:	627a      	str	r2, [r7, #36]	; 0x24
 800baf4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf6:	6a39      	ldr	r1, [r7, #32]
 800baf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bafa:	e841 2300 	strex	r3, r2, [r1]
 800bafe:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1e5      	bne.n	800bad2 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800bb06:	e002      	b.n	800bb0e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800bb0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb12:	e000      	b.n	800bb16 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800bb14:	2302      	movs	r3, #2
  }
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3730      	adds	r7, #48	; 0x30
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
	...

0800bb20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b0ba      	sub	sp, #232	; 0xe8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	695b      	ldr	r3, [r3, #20]
 800bb42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bb46:	2300      	movs	r3, #0
 800bb48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bb52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb56:	f003 030f 	and.w	r3, r3, #15
 800bb5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bb5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10f      	bne.n	800bb86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb6a:	f003 0320 	and.w	r3, r3, #32
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d009      	beq.n	800bb86 <HAL_UART_IRQHandler+0x66>
 800bb72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb76:	f003 0320 	and.w	r3, r3, #32
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d003      	beq.n	800bb86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 fd8b 	bl	800c69a <UART_Receive_IT>
      return;
 800bb84:	e256      	b.n	800c034 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bb86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f000 80de 	beq.w	800bd4c <HAL_UART_IRQHandler+0x22c>
 800bb90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb94:	f003 0301 	and.w	r3, r3, #1
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d106      	bne.n	800bbaa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bb9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bba0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 80d1 	beq.w	800bd4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bbaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbae:	f003 0301 	and.w	r3, r3, #1
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00b      	beq.n	800bbce <HAL_UART_IRQHandler+0xae>
 800bbb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d005      	beq.n	800bbce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc6:	f043 0201 	orr.w	r2, r3, #1
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bbce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbd2:	f003 0304 	and.w	r3, r3, #4
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00b      	beq.n	800bbf2 <HAL_UART_IRQHandler+0xd2>
 800bbda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbde:	f003 0301 	and.w	r3, r3, #1
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d005      	beq.n	800bbf2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbea:	f043 0202 	orr.w	r2, r3, #2
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bbf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbf6:	f003 0302 	and.w	r3, r3, #2
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00b      	beq.n	800bc16 <HAL_UART_IRQHandler+0xf6>
 800bbfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d005      	beq.n	800bc16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc0e:	f043 0204 	orr.w	r2, r3, #4
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bc16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc1a:	f003 0308 	and.w	r3, r3, #8
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d011      	beq.n	800bc46 <HAL_UART_IRQHandler+0x126>
 800bc22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc26:	f003 0320 	and.w	r3, r3, #32
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d105      	bne.n	800bc3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bc2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc32:	f003 0301 	and.w	r3, r3, #1
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d005      	beq.n	800bc46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3e:	f043 0208 	orr.w	r2, r3, #8
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f000 81ed 	beq.w	800c02a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc54:	f003 0320 	and.w	r3, r3, #32
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d008      	beq.n	800bc6e <HAL_UART_IRQHandler+0x14e>
 800bc5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc60:	f003 0320 	and.w	r3, r3, #32
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d002      	beq.n	800bc6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fd16 	bl	800c69a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	695b      	ldr	r3, [r3, #20]
 800bc74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc78:	2b40      	cmp	r3, #64	; 0x40
 800bc7a:	bf0c      	ite	eq
 800bc7c:	2301      	moveq	r3, #1
 800bc7e:	2300      	movne	r3, #0
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc8a:	f003 0308 	and.w	r3, r3, #8
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d103      	bne.n	800bc9a <HAL_UART_IRQHandler+0x17a>
 800bc92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d04f      	beq.n	800bd3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 fc1e 	bl	800c4dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	695b      	ldr	r3, [r3, #20]
 800bca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcaa:	2b40      	cmp	r3, #64	; 0x40
 800bcac:	d141      	bne.n	800bd32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	3314      	adds	r3, #20
 800bcb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcbc:	e853 3f00 	ldrex	r3, [r3]
 800bcc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bcc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bcc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	3314      	adds	r3, #20
 800bcd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bcda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bcde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bce6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bcea:	e841 2300 	strex	r3, r2, [r1]
 800bcee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bcf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1d9      	bne.n	800bcae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d013      	beq.n	800bd2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd06:	4a7d      	ldr	r2, [pc, #500]	; (800befc <HAL_UART_IRQHandler+0x3dc>)
 800bd08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fb ff22 	bl	8007b58 <HAL_DMA_Abort_IT>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d016      	beq.n	800bd48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bd24:	4610      	mov	r0, r2
 800bd26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd28:	e00e      	b.n	800bd48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f9a4 	bl	800c078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd30:	e00a      	b.n	800bd48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 f9a0 	bl	800c078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd38:	e006      	b.n	800bd48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 f99c 	bl	800c078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bd46:	e170      	b.n	800c02a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd48:	bf00      	nop
    return;
 800bd4a:	e16e      	b.n	800c02a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	f040 814a 	bne.w	800bfea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bd56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd5a:	f003 0310 	and.w	r3, r3, #16
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f000 8143 	beq.w	800bfea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bd64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd68:	f003 0310 	and.w	r3, r3, #16
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f000 813c 	beq.w	800bfea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bd72:	2300      	movs	r3, #0
 800bd74:	60bb      	str	r3, [r7, #8]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	60bb      	str	r3, [r7, #8]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	60bb      	str	r3, [r7, #8]
 800bd86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd92:	2b40      	cmp	r3, #64	; 0x40
 800bd94:	f040 80b4 	bne.w	800bf00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bda4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 8140 	beq.w	800c02e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bdb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	f080 8139 	bcs.w	800c02e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc8:	69db      	ldr	r3, [r3, #28]
 800bdca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdce:	f000 8088 	beq.w	800bee2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	330c      	adds	r3, #12
 800bdd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bddc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bde0:	e853 3f00 	ldrex	r3, [r3]
 800bde4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bde8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bdec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	330c      	adds	r3, #12
 800bdfa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bdfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800be02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800be0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800be0e:	e841 2300 	strex	r3, r2, [r1]
 800be12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800be16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1d9      	bne.n	800bdd2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3314      	adds	r3, #20
 800be24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be28:	e853 3f00 	ldrex	r3, [r3]
 800be2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800be2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be30:	f023 0301 	bic.w	r3, r3, #1
 800be34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	3314      	adds	r3, #20
 800be3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800be42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be4e:	e841 2300 	strex	r3, r2, [r1]
 800be52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be56:	2b00      	cmp	r3, #0
 800be58:	d1e1      	bne.n	800be1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	3314      	adds	r3, #20
 800be60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be64:	e853 3f00 	ldrex	r3, [r3]
 800be68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3314      	adds	r3, #20
 800be7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800be84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be86:	e841 2300 	strex	r3, r2, [r1]
 800be8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800be8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1e3      	bne.n	800be5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2220      	movs	r2, #32
 800be96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	330c      	adds	r3, #12
 800bea6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beaa:	e853 3f00 	ldrex	r3, [r3]
 800beae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800beb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beb2:	f023 0310 	bic.w	r3, r3, #16
 800beb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	330c      	adds	r3, #12
 800bec0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bec4:	65ba      	str	r2, [r7, #88]	; 0x58
 800bec6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800beca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800becc:	e841 2300 	strex	r3, r2, [r1]
 800bed0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1e3      	bne.n	800bea0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fb fdcb 	bl	8007a78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800beea:	b29b      	uxth	r3, r3
 800beec:	1ad3      	subs	r3, r2, r3
 800beee:	b29b      	uxth	r3, r3
 800bef0:	4619      	mov	r1, r3
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7fa fcc8 	bl	8006888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bef8:	e099      	b.n	800c02e <HAL_UART_IRQHandler+0x50e>
 800befa:	bf00      	nop
 800befc:	0800c5a3 	.word	0x0800c5a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 808b 	beq.w	800c032 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bf1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f000 8086 	beq.w	800c032 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	330c      	adds	r3, #12
 800bf2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf30:	e853 3f00 	ldrex	r3, [r3]
 800bf34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	330c      	adds	r3, #12
 800bf46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bf4a:	647a      	str	r2, [r7, #68]	; 0x44
 800bf4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf52:	e841 2300 	strex	r3, r2, [r1]
 800bf56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1e3      	bne.n	800bf26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	3314      	adds	r3, #20
 800bf64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf68:	e853 3f00 	ldrex	r3, [r3]
 800bf6c:	623b      	str	r3, [r7, #32]
   return(result);
 800bf6e:	6a3b      	ldr	r3, [r7, #32]
 800bf70:	f023 0301 	bic.w	r3, r3, #1
 800bf74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	3314      	adds	r3, #20
 800bf7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bf82:	633a      	str	r2, [r7, #48]	; 0x30
 800bf84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf8a:	e841 2300 	strex	r3, r2, [r1]
 800bf8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1e3      	bne.n	800bf5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2220      	movs	r2, #32
 800bf9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	330c      	adds	r3, #12
 800bfaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	e853 3f00 	ldrex	r3, [r3]
 800bfb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f023 0310 	bic.w	r3, r3, #16
 800bfba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	330c      	adds	r3, #12
 800bfc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bfc8:	61fa      	str	r2, [r7, #28]
 800bfca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfcc:	69b9      	ldr	r1, [r7, #24]
 800bfce:	69fa      	ldr	r2, [r7, #28]
 800bfd0:	e841 2300 	strex	r3, r2, [r1]
 800bfd4:	617b      	str	r3, [r7, #20]
   return(result);
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1e3      	bne.n	800bfa4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bfdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f7fa fc50 	bl	8006888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bfe8:	e023      	b.n	800c032 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bfea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d009      	beq.n	800c00a <HAL_UART_IRQHandler+0x4ea>
 800bff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d003      	beq.n	800c00a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 fae1 	bl	800c5ca <UART_Transmit_IT>
    return;
 800c008:	e014      	b.n	800c034 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c00a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c00e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00e      	beq.n	800c034 <HAL_UART_IRQHandler+0x514>
 800c016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d008      	beq.n	800c034 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fb21 	bl	800c66a <UART_EndTransmit_IT>
    return;
 800c028:	e004      	b.n	800c034 <HAL_UART_IRQHandler+0x514>
    return;
 800c02a:	bf00      	nop
 800c02c:	e002      	b.n	800c034 <HAL_UART_IRQHandler+0x514>
      return;
 800c02e:	bf00      	nop
 800c030:	e000      	b.n	800c034 <HAL_UART_IRQHandler+0x514>
      return;
 800c032:	bf00      	nop
  }
}
 800c034:	37e8      	adds	r7, #232	; 0xe8
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop

0800c03c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c044:	bf00      	nop
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c06c:	bf00      	nop
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b09c      	sub	sp, #112	; 0x70
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c098:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d172      	bne.n	800c18e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c0a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	330c      	adds	r3, #12
 800c0b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0b8:	e853 3f00 	ldrex	r3, [r3]
 800c0bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c0be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	330c      	adds	r3, #12
 800c0cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c0ce:	65ba      	str	r2, [r7, #88]	; 0x58
 800c0d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c0d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0d6:	e841 2300 	strex	r3, r2, [r1]
 800c0da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c0dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d1e5      	bne.n	800c0ae <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3314      	adds	r3, #20
 800c0e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ec:	e853 3f00 	ldrex	r3, [r3]
 800c0f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f4:	f023 0301 	bic.w	r3, r3, #1
 800c0f8:	667b      	str	r3, [r7, #100]	; 0x64
 800c0fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	3314      	adds	r3, #20
 800c100:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c102:	647a      	str	r2, [r7, #68]	; 0x44
 800c104:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c106:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c10a:	e841 2300 	strex	r3, r2, [r1]
 800c10e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1e5      	bne.n	800c0e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3314      	adds	r3, #20
 800c11c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c120:	e853 3f00 	ldrex	r3, [r3]
 800c124:	623b      	str	r3, [r7, #32]
   return(result);
 800c126:	6a3b      	ldr	r3, [r7, #32]
 800c128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c12c:	663b      	str	r3, [r7, #96]	; 0x60
 800c12e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	3314      	adds	r3, #20
 800c134:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c136:	633a      	str	r2, [r7, #48]	; 0x30
 800c138:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c13c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c13e:	e841 2300 	strex	r3, r2, [r1]
 800c142:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1e5      	bne.n	800c116 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c14a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c14c:	2220      	movs	r2, #32
 800c14e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c156:	2b01      	cmp	r3, #1
 800c158:	d119      	bne.n	800c18e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c15a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	330c      	adds	r3, #12
 800c160:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	e853 3f00 	ldrex	r3, [r3]
 800c168:	60fb      	str	r3, [r7, #12]
   return(result);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f023 0310 	bic.w	r3, r3, #16
 800c170:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	330c      	adds	r3, #12
 800c178:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c17a:	61fa      	str	r2, [r7, #28]
 800c17c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17e:	69b9      	ldr	r1, [r7, #24]
 800c180:	69fa      	ldr	r2, [r7, #28]
 800c182:	e841 2300 	strex	r3, r2, [r1]
 800c186:	617b      	str	r3, [r7, #20]
   return(result);
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d1e5      	bne.n	800c15a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c18e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c192:	2b01      	cmp	r3, #1
 800c194:	d106      	bne.n	800c1a4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c198:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c19a:	4619      	mov	r1, r3
 800c19c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c19e:	f7fa fb73 	bl	8006888 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c1a2:	e002      	b.n	800c1aa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c1a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c1a6:	f7ff ff53 	bl	800c050 <HAL_UART_RxCpltCallback>
}
 800c1aa:	bf00      	nop
 800c1ac:	3770      	adds	r7, #112	; 0x70
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b084      	sub	sp, #16
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1be:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d108      	bne.n	800c1da <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c1cc:	085b      	lsrs	r3, r3, #1
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	f7fa fb58 	bl	8006888 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c1d8:	e002      	b.n	800c1e0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	f7ff ff42 	bl	800c064 <HAL_UART_RxHalfCpltCallback>
}
 800c1e0:	bf00      	nop
 800c1e2:	3710      	adds	r7, #16
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	695b      	ldr	r3, [r3, #20]
 800c200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c204:	2b80      	cmp	r3, #128	; 0x80
 800c206:	bf0c      	ite	eq
 800c208:	2301      	moveq	r3, #1
 800c20a:	2300      	movne	r3, #0
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c216:	b2db      	uxtb	r3, r3
 800c218:	2b21      	cmp	r3, #33	; 0x21
 800c21a:	d108      	bne.n	800c22e <UART_DMAError+0x46>
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d005      	beq.n	800c22e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	2200      	movs	r2, #0
 800c226:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c228:	68b8      	ldr	r0, [r7, #8]
 800c22a:	f000 f92f 	bl	800c48c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	695b      	ldr	r3, [r3, #20]
 800c234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c238:	2b40      	cmp	r3, #64	; 0x40
 800c23a:	bf0c      	ite	eq
 800c23c:	2301      	moveq	r3, #1
 800c23e:	2300      	movne	r3, #0
 800c240:	b2db      	uxtb	r3, r3
 800c242:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	2b22      	cmp	r3, #34	; 0x22
 800c24e:	d108      	bne.n	800c262 <UART_DMAError+0x7a>
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d005      	beq.n	800c262 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2200      	movs	r2, #0
 800c25a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c25c:	68b8      	ldr	r0, [r7, #8]
 800c25e:	f000 f93d 	bl	800c4dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c266:	f043 0210 	orr.w	r2, r3, #16
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c26e:	68b8      	ldr	r0, [r7, #8]
 800c270:	f7ff ff02 	bl	800c078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c274:	bf00      	nop
 800c276:	3710      	adds	r7, #16
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b090      	sub	sp, #64	; 0x40
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	603b      	str	r3, [r7, #0]
 800c288:	4613      	mov	r3, r2
 800c28a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c28c:	e050      	b.n	800c330 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c28e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c294:	d04c      	beq.n	800c330 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d007      	beq.n	800c2ac <UART_WaitOnFlagUntilTimeout+0x30>
 800c29c:	f7fa fd3c 	bl	8006d18 <HAL_GetTick>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	1ad3      	subs	r3, r2, r3
 800c2a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d241      	bcs.n	800c330 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	330c      	adds	r3, #12
 800c2b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b6:	e853 3f00 	ldrex	r3, [r3]
 800c2ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	330c      	adds	r3, #12
 800c2ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2cc:	637a      	str	r2, [r7, #52]	; 0x34
 800c2ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2d4:	e841 2300 	strex	r3, r2, [r1]
 800c2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1e5      	bne.n	800c2ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3314      	adds	r3, #20
 800c2e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	e853 3f00 	ldrex	r3, [r3]
 800c2ee:	613b      	str	r3, [r7, #16]
   return(result);
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	f023 0301 	bic.w	r3, r3, #1
 800c2f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	3314      	adds	r3, #20
 800c2fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c300:	623a      	str	r2, [r7, #32]
 800c302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c304:	69f9      	ldr	r1, [r7, #28]
 800c306:	6a3a      	ldr	r2, [r7, #32]
 800c308:	e841 2300 	strex	r3, r2, [r1]
 800c30c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d1e5      	bne.n	800c2e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2220      	movs	r2, #32
 800c318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2220      	movs	r2, #32
 800c320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e00f      	b.n	800c350 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	4013      	ands	r3, r2
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	bf0c      	ite	eq
 800c340:	2301      	moveq	r3, #1
 800c342:	2300      	movne	r3, #0
 800c344:	b2db      	uxtb	r3, r3
 800c346:	461a      	mov	r2, r3
 800c348:	79fb      	ldrb	r3, [r7, #7]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d09f      	beq.n	800c28e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3740      	adds	r7, #64	; 0x40
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b098      	sub	sp, #96	; 0x60
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	4613      	mov	r3, r2
 800c364:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	88fa      	ldrh	r2, [r7, #6]
 800c370:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2200      	movs	r2, #0
 800c376:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2222      	movs	r2, #34	; 0x22
 800c37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c384:	4a3e      	ldr	r2, [pc, #248]	; (800c480 <UART_Start_Receive_DMA+0x128>)
 800c386:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c38c:	4a3d      	ldr	r2, [pc, #244]	; (800c484 <UART_Start_Receive_DMA+0x12c>)
 800c38e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c394:	4a3c      	ldr	r2, [pc, #240]	; (800c488 <UART_Start_Receive_DMA+0x130>)
 800c396:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39c:	2200      	movs	r2, #0
 800c39e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c3a0:	f107 0308 	add.w	r3, r7, #8
 800c3a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	88fb      	ldrh	r3, [r7, #6]
 800c3b8:	f7fb fb06 	bl	80079c8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c3bc:	2300      	movs	r3, #0
 800c3be:	613b      	str	r3, [r7, #16]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	613b      	str	r3, [r7, #16]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	613b      	str	r3, [r7, #16]
 800c3d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	330c      	adds	r3, #12
 800c3e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3e4:	e853 3f00 	ldrex	r3, [r3]
 800c3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	330c      	adds	r3, #12
 800c3f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c3fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c3fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c402:	e841 2300 	strex	r3, r2, [r1]
 800c406:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1e5      	bne.n	800c3da <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3314      	adds	r3, #20
 800c414:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c418:	e853 3f00 	ldrex	r3, [r3]
 800c41c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c420:	f043 0301 	orr.w	r3, r3, #1
 800c424:	657b      	str	r3, [r7, #84]	; 0x54
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3314      	adds	r3, #20
 800c42c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c42e:	63ba      	str	r2, [r7, #56]	; 0x38
 800c430:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c432:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c436:	e841 2300 	strex	r3, r2, [r1]
 800c43a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d1e5      	bne.n	800c40e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3314      	adds	r3, #20
 800c448:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	e853 3f00 	ldrex	r3, [r3]
 800c450:	617b      	str	r3, [r7, #20]
   return(result);
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c458:	653b      	str	r3, [r7, #80]	; 0x50
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	3314      	adds	r3, #20
 800c460:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c462:	627a      	str	r2, [r7, #36]	; 0x24
 800c464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c466:	6a39      	ldr	r1, [r7, #32]
 800c468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c46a:	e841 2300 	strex	r3, r2, [r1]
 800c46e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1e5      	bne.n	800c442 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800c476:	2300      	movs	r3, #0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3760      	adds	r7, #96	; 0x60
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	0800c08d 	.word	0x0800c08d
 800c484:	0800c1b3 	.word	0x0800c1b3
 800c488:	0800c1e9 	.word	0x0800c1e9

0800c48c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b089      	sub	sp, #36	; 0x24
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	330c      	adds	r3, #12
 800c49a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	e853 3f00 	ldrex	r3, [r3]
 800c4a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c4aa:	61fb      	str	r3, [r7, #28]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	330c      	adds	r3, #12
 800c4b2:	69fa      	ldr	r2, [r7, #28]
 800c4b4:	61ba      	str	r2, [r7, #24]
 800c4b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b8:	6979      	ldr	r1, [r7, #20]
 800c4ba:	69ba      	ldr	r2, [r7, #24]
 800c4bc:	e841 2300 	strex	r3, r2, [r1]
 800c4c0:	613b      	str	r3, [r7, #16]
   return(result);
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1e5      	bne.n	800c494 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2220      	movs	r2, #32
 800c4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c4d0:	bf00      	nop
 800c4d2:	3724      	adds	r7, #36	; 0x24
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b095      	sub	sp, #84	; 0x54
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	330c      	adds	r3, #12
 800c4ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ee:	e853 3f00 	ldrex	r3, [r3]
 800c4f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c4fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	330c      	adds	r3, #12
 800c502:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c504:	643a      	str	r2, [r7, #64]	; 0x40
 800c506:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c508:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c50a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c50c:	e841 2300 	strex	r3, r2, [r1]
 800c510:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1e5      	bne.n	800c4e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	3314      	adds	r3, #20
 800c51e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c520:	6a3b      	ldr	r3, [r7, #32]
 800c522:	e853 3f00 	ldrex	r3, [r3]
 800c526:	61fb      	str	r3, [r7, #28]
   return(result);
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	f023 0301 	bic.w	r3, r3, #1
 800c52e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	3314      	adds	r3, #20
 800c536:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c538:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c53a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c53e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c540:	e841 2300 	strex	r3, r2, [r1]
 800c544:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1e5      	bne.n	800c518 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c550:	2b01      	cmp	r3, #1
 800c552:	d119      	bne.n	800c588 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	330c      	adds	r3, #12
 800c55a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	e853 3f00 	ldrex	r3, [r3]
 800c562:	60bb      	str	r3, [r7, #8]
   return(result);
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	f023 0310 	bic.w	r3, r3, #16
 800c56a:	647b      	str	r3, [r7, #68]	; 0x44
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	330c      	adds	r3, #12
 800c572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c574:	61ba      	str	r2, [r7, #24]
 800c576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c578:	6979      	ldr	r1, [r7, #20]
 800c57a:	69ba      	ldr	r2, [r7, #24]
 800c57c:	e841 2300 	strex	r3, r2, [r1]
 800c580:	613b      	str	r3, [r7, #16]
   return(result);
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1e5      	bne.n	800c554 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2220      	movs	r2, #32
 800c58c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c596:	bf00      	nop
 800c598:	3754      	adds	r7, #84	; 0x54
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr

0800c5a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b084      	sub	sp, #16
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f7ff fd5b 	bl	800c078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5c2:	bf00      	nop
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c5ca:	b480      	push	{r7}
 800c5cc:	b085      	sub	sp, #20
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b21      	cmp	r3, #33	; 0x21
 800c5dc:	d13e      	bne.n	800c65c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5e6:	d114      	bne.n	800c612 <UART_Transmit_IT+0x48>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	691b      	ldr	r3, [r3, #16]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d110      	bne.n	800c612 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6a1b      	ldr	r3, [r3, #32]
 800c5f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	881b      	ldrh	r3, [r3, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c604:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a1b      	ldr	r3, [r3, #32]
 800c60a:	1c9a      	adds	r2, r3, #2
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	621a      	str	r2, [r3, #32]
 800c610:	e008      	b.n	800c624 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a1b      	ldr	r3, [r3, #32]
 800c616:	1c59      	adds	r1, r3, #1
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	6211      	str	r1, [r2, #32]
 800c61c:	781a      	ldrb	r2, [r3, #0]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c628:	b29b      	uxth	r3, r3
 800c62a:	3b01      	subs	r3, #1
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	4619      	mov	r1, r3
 800c632:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10f      	bne.n	800c658 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68da      	ldr	r2, [r3, #12]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c646:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68da      	ldr	r2, [r3, #12]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c656:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c658:	2300      	movs	r3, #0
 800c65a:	e000      	b.n	800c65e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c65c:	2302      	movs	r3, #2
  }
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3714      	adds	r7, #20
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr

0800c66a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b082      	sub	sp, #8
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	68da      	ldr	r2, [r3, #12]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c680:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2220      	movs	r2, #32
 800c686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f7ff fcd6 	bl	800c03c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b08c      	sub	sp, #48	; 0x30
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b22      	cmp	r3, #34	; 0x22
 800c6ac:	f040 80ab 	bne.w	800c806 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6b8:	d117      	bne.n	800c6ea <UART_Receive_IT+0x50>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d113      	bne.n	800c6ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e2:	1c9a      	adds	r2, r3, #2
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	629a      	str	r2, [r3, #40]	; 0x28
 800c6e8:	e026      	b.n	800c738 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6fc:	d007      	beq.n	800c70e <UART_Receive_IT+0x74>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10a      	bne.n	800c71c <UART_Receive_IT+0x82>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d106      	bne.n	800c71c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	b2da      	uxtb	r2, r3
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	701a      	strb	r2, [r3, #0]
 800c71a:	e008      	b.n	800c72e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	b2db      	uxtb	r3, r3
 800c724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c728:	b2da      	uxtb	r2, r3
 800c72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	3b01      	subs	r3, #1
 800c740:	b29b      	uxth	r3, r3
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	4619      	mov	r1, r3
 800c746:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d15a      	bne.n	800c802 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68da      	ldr	r2, [r3, #12]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f022 0220 	bic.w	r2, r2, #32
 800c75a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	68da      	ldr	r2, [r3, #12]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c76a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	695a      	ldr	r2, [r3, #20]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f022 0201 	bic.w	r2, r2, #1
 800c77a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2220      	movs	r2, #32
 800c780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d135      	bne.n	800c7f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	330c      	adds	r3, #12
 800c798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	e853 3f00 	ldrex	r3, [r3]
 800c7a0:	613b      	str	r3, [r7, #16]
   return(result);
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	f023 0310 	bic.w	r3, r3, #16
 800c7a8:	627b      	str	r3, [r7, #36]	; 0x24
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	330c      	adds	r3, #12
 800c7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7b2:	623a      	str	r2, [r7, #32]
 800c7b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b6:	69f9      	ldr	r1, [r7, #28]
 800c7b8:	6a3a      	ldr	r2, [r7, #32]
 800c7ba:	e841 2300 	strex	r3, r2, [r1]
 800c7be:	61bb      	str	r3, [r7, #24]
   return(result);
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d1e5      	bne.n	800c792 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f003 0310 	and.w	r3, r3, #16
 800c7d0:	2b10      	cmp	r3, #16
 800c7d2:	d10a      	bne.n	800c7ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	60fb      	str	r3, [r7, #12]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	60fb      	str	r3, [r7, #12]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	60fb      	str	r3, [r7, #12]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7fa f849 	bl	8006888 <HAL_UARTEx_RxEventCallback>
 800c7f6:	e002      	b.n	800c7fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f7ff fc29 	bl	800c050 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c7fe:	2300      	movs	r3, #0
 800c800:	e002      	b.n	800c808 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	e000      	b.n	800c808 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c806:	2302      	movs	r3, #2
  }
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3730      	adds	r7, #48	; 0x30
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c814:	b09f      	sub	sp, #124	; 0x7c
 800c816:	af00      	add	r7, sp, #0
 800c818:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c81a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c826:	68d9      	ldr	r1, [r3, #12]
 800c828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	ea40 0301 	orr.w	r3, r0, r1
 800c830:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c834:	689a      	ldr	r2, [r3, #8]
 800c836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c838:	691b      	ldr	r3, [r3, #16]
 800c83a:	431a      	orrs	r2, r3
 800c83c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c83e:	695b      	ldr	r3, [r3, #20]
 800c840:	431a      	orrs	r2, r3
 800c842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c844:	69db      	ldr	r3, [r3, #28]
 800c846:	4313      	orrs	r3, r2
 800c848:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800c84a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c854:	f021 010c 	bic.w	r1, r1, #12
 800c858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c85e:	430b      	orrs	r3, r1
 800c860:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	695b      	ldr	r3, [r3, #20]
 800c868:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c86c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c86e:	6999      	ldr	r1, [r3, #24]
 800c870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	ea40 0301 	orr.w	r3, r0, r1
 800c878:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c87a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	4bc5      	ldr	r3, [pc, #788]	; (800cb94 <UART_SetConfig+0x384>)
 800c880:	429a      	cmp	r2, r3
 800c882:	d004      	beq.n	800c88e <UART_SetConfig+0x7e>
 800c884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	4bc3      	ldr	r3, [pc, #780]	; (800cb98 <UART_SetConfig+0x388>)
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d103      	bne.n	800c896 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c88e:	f7fd fcfb 	bl	800a288 <HAL_RCC_GetPCLK2Freq>
 800c892:	6778      	str	r0, [r7, #116]	; 0x74
 800c894:	e002      	b.n	800c89c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c896:	f7fd fce3 	bl	800a260 <HAL_RCC_GetPCLK1Freq>
 800c89a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c89c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c89e:	69db      	ldr	r3, [r3, #28]
 800c8a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8a4:	f040 80b6 	bne.w	800ca14 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c8a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8aa:	461c      	mov	r4, r3
 800c8ac:	f04f 0500 	mov.w	r5, #0
 800c8b0:	4622      	mov	r2, r4
 800c8b2:	462b      	mov	r3, r5
 800c8b4:	1891      	adds	r1, r2, r2
 800c8b6:	6439      	str	r1, [r7, #64]	; 0x40
 800c8b8:	415b      	adcs	r3, r3
 800c8ba:	647b      	str	r3, [r7, #68]	; 0x44
 800c8bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c8c0:	1912      	adds	r2, r2, r4
 800c8c2:	eb45 0303 	adc.w	r3, r5, r3
 800c8c6:	f04f 0000 	mov.w	r0, #0
 800c8ca:	f04f 0100 	mov.w	r1, #0
 800c8ce:	00d9      	lsls	r1, r3, #3
 800c8d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c8d4:	00d0      	lsls	r0, r2, #3
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	460b      	mov	r3, r1
 800c8da:	1911      	adds	r1, r2, r4
 800c8dc:	6639      	str	r1, [r7, #96]	; 0x60
 800c8de:	416b      	adcs	r3, r5
 800c8e0:	667b      	str	r3, [r7, #100]	; 0x64
 800c8e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	f04f 0300 	mov.w	r3, #0
 800c8ec:	1891      	adds	r1, r2, r2
 800c8ee:	63b9      	str	r1, [r7, #56]	; 0x38
 800c8f0:	415b      	adcs	r3, r3
 800c8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c8f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c8fc:	f7f4 f9c4 	bl	8000c88 <__aeabi_uldivmod>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	4ba5      	ldr	r3, [pc, #660]	; (800cb9c <UART_SetConfig+0x38c>)
 800c906:	fba3 2302 	umull	r2, r3, r3, r2
 800c90a:	095b      	lsrs	r3, r3, #5
 800c90c:	011e      	lsls	r6, r3, #4
 800c90e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c910:	461c      	mov	r4, r3
 800c912:	f04f 0500 	mov.w	r5, #0
 800c916:	4622      	mov	r2, r4
 800c918:	462b      	mov	r3, r5
 800c91a:	1891      	adds	r1, r2, r2
 800c91c:	6339      	str	r1, [r7, #48]	; 0x30
 800c91e:	415b      	adcs	r3, r3
 800c920:	637b      	str	r3, [r7, #52]	; 0x34
 800c922:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c926:	1912      	adds	r2, r2, r4
 800c928:	eb45 0303 	adc.w	r3, r5, r3
 800c92c:	f04f 0000 	mov.w	r0, #0
 800c930:	f04f 0100 	mov.w	r1, #0
 800c934:	00d9      	lsls	r1, r3, #3
 800c936:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c93a:	00d0      	lsls	r0, r2, #3
 800c93c:	4602      	mov	r2, r0
 800c93e:	460b      	mov	r3, r1
 800c940:	1911      	adds	r1, r2, r4
 800c942:	65b9      	str	r1, [r7, #88]	; 0x58
 800c944:	416b      	adcs	r3, r5
 800c946:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	461a      	mov	r2, r3
 800c94e:	f04f 0300 	mov.w	r3, #0
 800c952:	1891      	adds	r1, r2, r2
 800c954:	62b9      	str	r1, [r7, #40]	; 0x28
 800c956:	415b      	adcs	r3, r3
 800c958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c95a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c95e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c962:	f7f4 f991 	bl	8000c88 <__aeabi_uldivmod>
 800c966:	4602      	mov	r2, r0
 800c968:	460b      	mov	r3, r1
 800c96a:	4b8c      	ldr	r3, [pc, #560]	; (800cb9c <UART_SetConfig+0x38c>)
 800c96c:	fba3 1302 	umull	r1, r3, r3, r2
 800c970:	095b      	lsrs	r3, r3, #5
 800c972:	2164      	movs	r1, #100	; 0x64
 800c974:	fb01 f303 	mul.w	r3, r1, r3
 800c978:	1ad3      	subs	r3, r2, r3
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	3332      	adds	r3, #50	; 0x32
 800c97e:	4a87      	ldr	r2, [pc, #540]	; (800cb9c <UART_SetConfig+0x38c>)
 800c980:	fba2 2303 	umull	r2, r3, r2, r3
 800c984:	095b      	lsrs	r3, r3, #5
 800c986:	005b      	lsls	r3, r3, #1
 800c988:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c98c:	441e      	add	r6, r3
 800c98e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c990:	4618      	mov	r0, r3
 800c992:	f04f 0100 	mov.w	r1, #0
 800c996:	4602      	mov	r2, r0
 800c998:	460b      	mov	r3, r1
 800c99a:	1894      	adds	r4, r2, r2
 800c99c:	623c      	str	r4, [r7, #32]
 800c99e:	415b      	adcs	r3, r3
 800c9a0:	627b      	str	r3, [r7, #36]	; 0x24
 800c9a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c9a6:	1812      	adds	r2, r2, r0
 800c9a8:	eb41 0303 	adc.w	r3, r1, r3
 800c9ac:	f04f 0400 	mov.w	r4, #0
 800c9b0:	f04f 0500 	mov.w	r5, #0
 800c9b4:	00dd      	lsls	r5, r3, #3
 800c9b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c9ba:	00d4      	lsls	r4, r2, #3
 800c9bc:	4622      	mov	r2, r4
 800c9be:	462b      	mov	r3, r5
 800c9c0:	1814      	adds	r4, r2, r0
 800c9c2:	653c      	str	r4, [r7, #80]	; 0x50
 800c9c4:	414b      	adcs	r3, r1
 800c9c6:	657b      	str	r3, [r7, #84]	; 0x54
 800c9c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	f04f 0300 	mov.w	r3, #0
 800c9d2:	1891      	adds	r1, r2, r2
 800c9d4:	61b9      	str	r1, [r7, #24]
 800c9d6:	415b      	adcs	r3, r3
 800c9d8:	61fb      	str	r3, [r7, #28]
 800c9da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c9de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c9e2:	f7f4 f951 	bl	8000c88 <__aeabi_uldivmod>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	4b6c      	ldr	r3, [pc, #432]	; (800cb9c <UART_SetConfig+0x38c>)
 800c9ec:	fba3 1302 	umull	r1, r3, r3, r2
 800c9f0:	095b      	lsrs	r3, r3, #5
 800c9f2:	2164      	movs	r1, #100	; 0x64
 800c9f4:	fb01 f303 	mul.w	r3, r1, r3
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	00db      	lsls	r3, r3, #3
 800c9fc:	3332      	adds	r3, #50	; 0x32
 800c9fe:	4a67      	ldr	r2, [pc, #412]	; (800cb9c <UART_SetConfig+0x38c>)
 800ca00:	fba2 2303 	umull	r2, r3, r2, r3
 800ca04:	095b      	lsrs	r3, r3, #5
 800ca06:	f003 0207 	and.w	r2, r3, #7
 800ca0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4432      	add	r2, r6
 800ca10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ca12:	e0b9      	b.n	800cb88 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ca14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca16:	461c      	mov	r4, r3
 800ca18:	f04f 0500 	mov.w	r5, #0
 800ca1c:	4622      	mov	r2, r4
 800ca1e:	462b      	mov	r3, r5
 800ca20:	1891      	adds	r1, r2, r2
 800ca22:	6139      	str	r1, [r7, #16]
 800ca24:	415b      	adcs	r3, r3
 800ca26:	617b      	str	r3, [r7, #20]
 800ca28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ca2c:	1912      	adds	r2, r2, r4
 800ca2e:	eb45 0303 	adc.w	r3, r5, r3
 800ca32:	f04f 0000 	mov.w	r0, #0
 800ca36:	f04f 0100 	mov.w	r1, #0
 800ca3a:	00d9      	lsls	r1, r3, #3
 800ca3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ca40:	00d0      	lsls	r0, r2, #3
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	eb12 0804 	adds.w	r8, r2, r4
 800ca4a:	eb43 0905 	adc.w	r9, r3, r5
 800ca4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f04f 0100 	mov.w	r1, #0
 800ca58:	f04f 0200 	mov.w	r2, #0
 800ca5c:	f04f 0300 	mov.w	r3, #0
 800ca60:	008b      	lsls	r3, r1, #2
 800ca62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ca66:	0082      	lsls	r2, r0, #2
 800ca68:	4640      	mov	r0, r8
 800ca6a:	4649      	mov	r1, r9
 800ca6c:	f7f4 f90c 	bl	8000c88 <__aeabi_uldivmod>
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	4b49      	ldr	r3, [pc, #292]	; (800cb9c <UART_SetConfig+0x38c>)
 800ca76:	fba3 2302 	umull	r2, r3, r3, r2
 800ca7a:	095b      	lsrs	r3, r3, #5
 800ca7c:	011e      	lsls	r6, r3, #4
 800ca7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca80:	4618      	mov	r0, r3
 800ca82:	f04f 0100 	mov.w	r1, #0
 800ca86:	4602      	mov	r2, r0
 800ca88:	460b      	mov	r3, r1
 800ca8a:	1894      	adds	r4, r2, r2
 800ca8c:	60bc      	str	r4, [r7, #8]
 800ca8e:	415b      	adcs	r3, r3
 800ca90:	60fb      	str	r3, [r7, #12]
 800ca92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ca96:	1812      	adds	r2, r2, r0
 800ca98:	eb41 0303 	adc.w	r3, r1, r3
 800ca9c:	f04f 0400 	mov.w	r4, #0
 800caa0:	f04f 0500 	mov.w	r5, #0
 800caa4:	00dd      	lsls	r5, r3, #3
 800caa6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800caaa:	00d4      	lsls	r4, r2, #3
 800caac:	4622      	mov	r2, r4
 800caae:	462b      	mov	r3, r5
 800cab0:	1814      	adds	r4, r2, r0
 800cab2:	64bc      	str	r4, [r7, #72]	; 0x48
 800cab4:	414b      	adcs	r3, r1
 800cab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	4618      	mov	r0, r3
 800cabe:	f04f 0100 	mov.w	r1, #0
 800cac2:	f04f 0200 	mov.w	r2, #0
 800cac6:	f04f 0300 	mov.w	r3, #0
 800caca:	008b      	lsls	r3, r1, #2
 800cacc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cad0:	0082      	lsls	r2, r0, #2
 800cad2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cad6:	f7f4 f8d7 	bl	8000c88 <__aeabi_uldivmod>
 800cada:	4602      	mov	r2, r0
 800cadc:	460b      	mov	r3, r1
 800cade:	4b2f      	ldr	r3, [pc, #188]	; (800cb9c <UART_SetConfig+0x38c>)
 800cae0:	fba3 1302 	umull	r1, r3, r3, r2
 800cae4:	095b      	lsrs	r3, r3, #5
 800cae6:	2164      	movs	r1, #100	; 0x64
 800cae8:	fb01 f303 	mul.w	r3, r1, r3
 800caec:	1ad3      	subs	r3, r2, r3
 800caee:	011b      	lsls	r3, r3, #4
 800caf0:	3332      	adds	r3, #50	; 0x32
 800caf2:	4a2a      	ldr	r2, [pc, #168]	; (800cb9c <UART_SetConfig+0x38c>)
 800caf4:	fba2 2303 	umull	r2, r3, r2, r3
 800caf8:	095b      	lsrs	r3, r3, #5
 800cafa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cafe:	441e      	add	r6, r3
 800cb00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb02:	4618      	mov	r0, r3
 800cb04:	f04f 0100 	mov.w	r1, #0
 800cb08:	4602      	mov	r2, r0
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	1894      	adds	r4, r2, r2
 800cb0e:	603c      	str	r4, [r7, #0]
 800cb10:	415b      	adcs	r3, r3
 800cb12:	607b      	str	r3, [r7, #4]
 800cb14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb18:	1812      	adds	r2, r2, r0
 800cb1a:	eb41 0303 	adc.w	r3, r1, r3
 800cb1e:	f04f 0400 	mov.w	r4, #0
 800cb22:	f04f 0500 	mov.w	r5, #0
 800cb26:	00dd      	lsls	r5, r3, #3
 800cb28:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cb2c:	00d4      	lsls	r4, r2, #3
 800cb2e:	4622      	mov	r2, r4
 800cb30:	462b      	mov	r3, r5
 800cb32:	eb12 0a00 	adds.w	sl, r2, r0
 800cb36:	eb43 0b01 	adc.w	fp, r3, r1
 800cb3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f04f 0100 	mov.w	r1, #0
 800cb44:	f04f 0200 	mov.w	r2, #0
 800cb48:	f04f 0300 	mov.w	r3, #0
 800cb4c:	008b      	lsls	r3, r1, #2
 800cb4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cb52:	0082      	lsls	r2, r0, #2
 800cb54:	4650      	mov	r0, sl
 800cb56:	4659      	mov	r1, fp
 800cb58:	f7f4 f896 	bl	8000c88 <__aeabi_uldivmod>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4b0e      	ldr	r3, [pc, #56]	; (800cb9c <UART_SetConfig+0x38c>)
 800cb62:	fba3 1302 	umull	r1, r3, r3, r2
 800cb66:	095b      	lsrs	r3, r3, #5
 800cb68:	2164      	movs	r1, #100	; 0x64
 800cb6a:	fb01 f303 	mul.w	r3, r1, r3
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	011b      	lsls	r3, r3, #4
 800cb72:	3332      	adds	r3, #50	; 0x32
 800cb74:	4a09      	ldr	r2, [pc, #36]	; (800cb9c <UART_SetConfig+0x38c>)
 800cb76:	fba2 2303 	umull	r2, r3, r2, r3
 800cb7a:	095b      	lsrs	r3, r3, #5
 800cb7c:	f003 020f 	and.w	r2, r3, #15
 800cb80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4432      	add	r2, r6
 800cb86:	609a      	str	r2, [r3, #8]
}
 800cb88:	bf00      	nop
 800cb8a:	377c      	adds	r7, #124	; 0x7c
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb92:	bf00      	nop
 800cb94:	40011000 	.word	0x40011000
 800cb98:	40011400 	.word	0x40011400
 800cb9c:	51eb851f 	.word	0x51eb851f

0800cba0 <LWIP_ReInit>:
uint8_t NETMASK_ADDRESS[4];
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */
static void LWIP_ReInit()
{
 800cba0:	b480      	push	{r7}
 800cba2:	af00      	add	r7, sp, #0
	if(((uint8_t)settings.retain.eth_sett.addr0 ||
 800cba4:	4b5c      	ldr	r3, [pc, #368]	; (800cd18 <LWIP_ReInit+0x178>)
 800cba6:	8a9b      	ldrh	r3, [r3, #20]
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d10e      	bne.n	800cbcc <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr1 ||
 800cbae:	4b5a      	ldr	r3, [pc, #360]	; (800cd18 <LWIP_ReInit+0x178>)
 800cbb0:	8adb      	ldrh	r3, [r3, #22]
 800cbb2:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.addr0 ||
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d109      	bne.n	800cbcc <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr2 ||
 800cbb8:	4b57      	ldr	r3, [pc, #348]	; (800cd18 <LWIP_ReInit+0x178>)
 800cbba:	8b1b      	ldrh	r3, [r3, #24]
 800cbbc:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.addr1 ||
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d104      	bne.n	800cbcc <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr3))
 800cbc2:	4b55      	ldr	r3, [pc, #340]	; (800cd18 <LWIP_ReInit+0x178>)
 800cbc4:	8b5b      	ldrh	r3, [r3, #26]
 800cbc6:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.addr2 ||
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d013      	beq.n	800cbf4 <LWIP_ReInit+0x54>
	{
		  IP_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.addr0;
 800cbcc:	4b52      	ldr	r3, [pc, #328]	; (800cd18 <LWIP_ReInit+0x178>)
 800cbce:	8a9b      	ldrh	r3, [r3, #20]
 800cbd0:	b2da      	uxtb	r2, r3
 800cbd2:	4b52      	ldr	r3, [pc, #328]	; (800cd1c <LWIP_ReInit+0x17c>)
 800cbd4:	701a      	strb	r2, [r3, #0]
		  IP_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.addr1;
 800cbd6:	4b50      	ldr	r3, [pc, #320]	; (800cd18 <LWIP_ReInit+0x178>)
 800cbd8:	8adb      	ldrh	r3, [r3, #22]
 800cbda:	b2da      	uxtb	r2, r3
 800cbdc:	4b4f      	ldr	r3, [pc, #316]	; (800cd1c <LWIP_ReInit+0x17c>)
 800cbde:	705a      	strb	r2, [r3, #1]
		  IP_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.addr2;
 800cbe0:	4b4d      	ldr	r3, [pc, #308]	; (800cd18 <LWIP_ReInit+0x178>)
 800cbe2:	8b1b      	ldrh	r3, [r3, #24]
 800cbe4:	b2da      	uxtb	r2, r3
 800cbe6:	4b4d      	ldr	r3, [pc, #308]	; (800cd1c <LWIP_ReInit+0x17c>)
 800cbe8:	709a      	strb	r2, [r3, #2]
		  IP_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.addr3;
 800cbea:	4b4b      	ldr	r3, [pc, #300]	; (800cd18 <LWIP_ReInit+0x178>)
 800cbec:	8b5b      	ldrh	r3, [r3, #26]
 800cbee:	b2da      	uxtb	r2, r3
 800cbf0:	4b4a      	ldr	r3, [pc, #296]	; (800cd1c <LWIP_ReInit+0x17c>)
 800cbf2:	70da      	strb	r2, [r3, #3]
	}

	if(((uint8_t)settings.retain.eth_sett.mask0 ||
 800cbf4:	4b48      	ldr	r3, [pc, #288]	; (800cd18 <LWIP_ReInit+0x178>)
 800cbf6:	8b9b      	ldrh	r3, [r3, #28]
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d10e      	bne.n	800cc1c <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask1 ||
 800cbfe:	4b46      	ldr	r3, [pc, #280]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc00:	8bdb      	ldrh	r3, [r3, #30]
 800cc02:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.mask0 ||
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d109      	bne.n	800cc1c <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask2 ||
 800cc08:	4b43      	ldr	r3, [pc, #268]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc0a:	8c1b      	ldrh	r3, [r3, #32]
 800cc0c:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.mask1 ||
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d104      	bne.n	800cc1c <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask3))
 800cc12:	4b41      	ldr	r3, [pc, #260]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc14:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cc16:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.mask2 ||
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d013      	beq.n	800cc44 <LWIP_ReInit+0xa4>
	{
		  NETMASK_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.mask0;
 800cc1c:	4b3e      	ldr	r3, [pc, #248]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc1e:	8b9b      	ldrh	r3, [r3, #28]
 800cc20:	b2da      	uxtb	r2, r3
 800cc22:	4b3f      	ldr	r3, [pc, #252]	; (800cd20 <LWIP_ReInit+0x180>)
 800cc24:	701a      	strb	r2, [r3, #0]
		  NETMASK_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.mask1;
 800cc26:	4b3c      	ldr	r3, [pc, #240]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc28:	8bdb      	ldrh	r3, [r3, #30]
 800cc2a:	b2da      	uxtb	r2, r3
 800cc2c:	4b3c      	ldr	r3, [pc, #240]	; (800cd20 <LWIP_ReInit+0x180>)
 800cc2e:	705a      	strb	r2, [r3, #1]
		  NETMASK_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.mask2;
 800cc30:	4b39      	ldr	r3, [pc, #228]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc32:	8c1b      	ldrh	r3, [r3, #32]
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	4b3a      	ldr	r3, [pc, #232]	; (800cd20 <LWIP_ReInit+0x180>)
 800cc38:	709a      	strb	r2, [r3, #2]
		  NETMASK_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.mask3;
 800cc3a:	4b37      	ldr	r3, [pc, #220]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc3c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	4b37      	ldr	r3, [pc, #220]	; (800cd20 <LWIP_ReInit+0x180>)
 800cc42:	70da      	strb	r2, [r3, #3]
	}
	if(((uint8_t)settings.retain.eth_sett.gateway0 ||
 800cc44:	4b34      	ldr	r3, [pc, #208]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d10e      	bne.n	800cc6c <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway1 ||
 800cc4e:	4b32      	ldr	r3, [pc, #200]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc52:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.gateway0 ||
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d109      	bne.n	800cc6c <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway2 ||
 800cc58:	4b2f      	ldr	r3, [pc, #188]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc5c:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.gateway1 ||
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d104      	bne.n	800cc6c <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway3))
 800cc62:	4b2d      	ldr	r3, [pc, #180]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc66:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.gateway2 ||
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d013      	beq.n	800cc94 <LWIP_ReInit+0xf4>
	{
		  GATEWAY_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.gateway0;
 800cc6c:	4b2a      	ldr	r3, [pc, #168]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cc70:	b2da      	uxtb	r2, r3
 800cc72:	4b2c      	ldr	r3, [pc, #176]	; (800cd24 <LWIP_ReInit+0x184>)
 800cc74:	701a      	strb	r2, [r3, #0]
		  GATEWAY_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.gateway1;
 800cc76:	4b28      	ldr	r3, [pc, #160]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	4b29      	ldr	r3, [pc, #164]	; (800cd24 <LWIP_ReInit+0x184>)
 800cc7e:	705a      	strb	r2, [r3, #1]
		  GATEWAY_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.gateway2;
 800cc80:	4b25      	ldr	r3, [pc, #148]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc84:	b2da      	uxtb	r2, r3
 800cc86:	4b27      	ldr	r3, [pc, #156]	; (800cd24 <LWIP_ReInit+0x184>)
 800cc88:	709a      	strb	r2, [r3, #2]
		  GATEWAY_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.gateway3;
 800cc8a:	4b23      	ldr	r3, [pc, #140]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	4b24      	ldr	r3, [pc, #144]	; (800cd24 <LWIP_ReInit+0x184>)
 800cc92:	70da      	strb	r2, [r3, #3]
	}
	settings.retain.eth_sett.addr0 = IP_ADDRESS[0];
 800cc94:	4b21      	ldr	r3, [pc, #132]	; (800cd1c <LWIP_ReInit+0x17c>)
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	b29a      	uxth	r2, r3
 800cc9a:	4b1f      	ldr	r3, [pc, #124]	; (800cd18 <LWIP_ReInit+0x178>)
 800cc9c:	829a      	strh	r2, [r3, #20]
	settings.retain.eth_sett.addr1 = IP_ADDRESS[1];
 800cc9e:	4b1f      	ldr	r3, [pc, #124]	; (800cd1c <LWIP_ReInit+0x17c>)
 800cca0:	785b      	ldrb	r3, [r3, #1]
 800cca2:	b29a      	uxth	r2, r3
 800cca4:	4b1c      	ldr	r3, [pc, #112]	; (800cd18 <LWIP_ReInit+0x178>)
 800cca6:	82da      	strh	r2, [r3, #22]
	settings.retain.eth_sett.addr2 = IP_ADDRESS[2];
 800cca8:	4b1c      	ldr	r3, [pc, #112]	; (800cd1c <LWIP_ReInit+0x17c>)
 800ccaa:	789b      	ldrb	r3, [r3, #2]
 800ccac:	b29a      	uxth	r2, r3
 800ccae:	4b1a      	ldr	r3, [pc, #104]	; (800cd18 <LWIP_ReInit+0x178>)
 800ccb0:	831a      	strh	r2, [r3, #24]
	settings.retain.eth_sett.addr3 = IP_ADDRESS[3];
 800ccb2:	4b1a      	ldr	r3, [pc, #104]	; (800cd1c <LWIP_ReInit+0x17c>)
 800ccb4:	78db      	ldrb	r3, [r3, #3]
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	4b17      	ldr	r3, [pc, #92]	; (800cd18 <LWIP_ReInit+0x178>)
 800ccba:	835a      	strh	r2, [r3, #26]

	settings.retain.eth_sett.mask0 = NETMASK_ADDRESS[0];
 800ccbc:	4b18      	ldr	r3, [pc, #96]	; (800cd20 <LWIP_ReInit+0x180>)
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	4b15      	ldr	r3, [pc, #84]	; (800cd18 <LWIP_ReInit+0x178>)
 800ccc4:	839a      	strh	r2, [r3, #28]
	settings.retain.eth_sett.mask1 = NETMASK_ADDRESS[1];
 800ccc6:	4b16      	ldr	r3, [pc, #88]	; (800cd20 <LWIP_ReInit+0x180>)
 800ccc8:	785b      	ldrb	r3, [r3, #1]
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	4b12      	ldr	r3, [pc, #72]	; (800cd18 <LWIP_ReInit+0x178>)
 800ccce:	83da      	strh	r2, [r3, #30]
	settings.retain.eth_sett.mask2 = NETMASK_ADDRESS[2];
 800ccd0:	4b13      	ldr	r3, [pc, #76]	; (800cd20 <LWIP_ReInit+0x180>)
 800ccd2:	789b      	ldrb	r3, [r3, #2]
 800ccd4:	b29a      	uxth	r2, r3
 800ccd6:	4b10      	ldr	r3, [pc, #64]	; (800cd18 <LWIP_ReInit+0x178>)
 800ccd8:	841a      	strh	r2, [r3, #32]
	settings.retain.eth_sett.mask3 = NETMASK_ADDRESS[3];
 800ccda:	4b11      	ldr	r3, [pc, #68]	; (800cd20 <LWIP_ReInit+0x180>)
 800ccdc:	78db      	ldrb	r3, [r3, #3]
 800ccde:	b29a      	uxth	r2, r3
 800cce0:	4b0d      	ldr	r3, [pc, #52]	; (800cd18 <LWIP_ReInit+0x178>)
 800cce2:	845a      	strh	r2, [r3, #34]	; 0x22

	settings.retain.eth_sett.gateway0 =  GATEWAY_ADDRESS[0];
 800cce4:	4b0f      	ldr	r3, [pc, #60]	; (800cd24 <LWIP_ReInit+0x184>)
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	4b0b      	ldr	r3, [pc, #44]	; (800cd18 <LWIP_ReInit+0x178>)
 800ccec:	849a      	strh	r2, [r3, #36]	; 0x24
	settings.retain.eth_sett.gateway1 =  GATEWAY_ADDRESS[1];
 800ccee:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <LWIP_ReInit+0x184>)
 800ccf0:	785b      	ldrb	r3, [r3, #1]
 800ccf2:	b29a      	uxth	r2, r3
 800ccf4:	4b08      	ldr	r3, [pc, #32]	; (800cd18 <LWIP_ReInit+0x178>)
 800ccf6:	84da      	strh	r2, [r3, #38]	; 0x26
	settings.retain.eth_sett.gateway2 =  GATEWAY_ADDRESS[2];
 800ccf8:	4b0a      	ldr	r3, [pc, #40]	; (800cd24 <LWIP_ReInit+0x184>)
 800ccfa:	789b      	ldrb	r3, [r3, #2]
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	4b06      	ldr	r3, [pc, #24]	; (800cd18 <LWIP_ReInit+0x178>)
 800cd00:	851a      	strh	r2, [r3, #40]	; 0x28
	settings.retain.eth_sett.gateway3 =  GATEWAY_ADDRESS[3];
 800cd02:	4b08      	ldr	r3, [pc, #32]	; (800cd24 <LWIP_ReInit+0x184>)
 800cd04:	78db      	ldrb	r3, [r3, #3]
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	4b03      	ldr	r3, [pc, #12]	; (800cd18 <LWIP_ReInit+0x178>)
 800cd0a:	855a      	strh	r2, [r3, #42]	; 0x2a


}
 800cd0c:	bf00      	nop
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	20007408 	.word	0x20007408
 800cd1c:	200078b0 	.word	0x200078b0
 800cd20:	200078ac 	.word	0x200078ac
 800cd24:	20007870 	.word	0x20007870

0800cd28 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800cd2e:	4b99      	ldr	r3, [pc, #612]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cd30:	22c0      	movs	r2, #192	; 0xc0
 800cd32:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800cd34:	4b97      	ldr	r3, [pc, #604]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cd36:	22a8      	movs	r2, #168	; 0xa8
 800cd38:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 800cd3a:	4b96      	ldr	r3, [pc, #600]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cd3c:	2264      	movs	r2, #100	; 0x64
 800cd3e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 177;
 800cd40:	4b94      	ldr	r3, [pc, #592]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cd42:	22b1      	movs	r2, #177	; 0xb1
 800cd44:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800cd46:	4b94      	ldr	r3, [pc, #592]	; (800cf98 <MX_LWIP_Init+0x270>)
 800cd48:	22ff      	movs	r2, #255	; 0xff
 800cd4a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800cd4c:	4b92      	ldr	r3, [pc, #584]	; (800cf98 <MX_LWIP_Init+0x270>)
 800cd4e:	22ff      	movs	r2, #255	; 0xff
 800cd50:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800cd52:	4b91      	ldr	r3, [pc, #580]	; (800cf98 <MX_LWIP_Init+0x270>)
 800cd54:	22ff      	movs	r2, #255	; 0xff
 800cd56:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800cd58:	4b8f      	ldr	r3, [pc, #572]	; (800cf98 <MX_LWIP_Init+0x270>)
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800cd5e:	4b8f      	ldr	r3, [pc, #572]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cd60:	22c0      	movs	r2, #192	; 0xc0
 800cd62:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800cd64:	4b8d      	ldr	r3, [pc, #564]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cd66:	22a8      	movs	r2, #168	; 0xa8
 800cd68:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 800cd6a:	4b8c      	ldr	r3, [pc, #560]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cd6c:	2264      	movs	r2, #100	; 0x64
 800cd6e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800cd70:	4b8a      	ldr	r3, [pc, #552]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cd72:	2201      	movs	r2, #1
 800cd74:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  LWIP_ReInit();
 800cd76:	f7ff ff13 	bl	800cba0 <LWIP_ReInit>
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	f005 ff3f 	bl	8012c00 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800cd82:	4b84      	ldr	r3, [pc, #528]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	061a      	lsls	r2, r3, #24
 800cd88:	4b82      	ldr	r3, [pc, #520]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cd8a:	785b      	ldrb	r3, [r3, #1]
 800cd8c:	041b      	lsls	r3, r3, #16
 800cd8e:	431a      	orrs	r2, r3
 800cd90:	4b80      	ldr	r3, [pc, #512]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cd92:	789b      	ldrb	r3, [r3, #2]
 800cd94:	021b      	lsls	r3, r3, #8
 800cd96:	4313      	orrs	r3, r2
 800cd98:	4a7e      	ldr	r2, [pc, #504]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cd9a:	78d2      	ldrb	r2, [r2, #3]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	061a      	lsls	r2, r3, #24
 800cda0:	4b7c      	ldr	r3, [pc, #496]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	0619      	lsls	r1, r3, #24
 800cda6:	4b7b      	ldr	r3, [pc, #492]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cda8:	785b      	ldrb	r3, [r3, #1]
 800cdaa:	041b      	lsls	r3, r3, #16
 800cdac:	4319      	orrs	r1, r3
 800cdae:	4b79      	ldr	r3, [pc, #484]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cdb0:	789b      	ldrb	r3, [r3, #2]
 800cdb2:	021b      	lsls	r3, r3, #8
 800cdb4:	430b      	orrs	r3, r1
 800cdb6:	4977      	ldr	r1, [pc, #476]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cdb8:	78c9      	ldrb	r1, [r1, #3]
 800cdba:	430b      	orrs	r3, r1
 800cdbc:	021b      	lsls	r3, r3, #8
 800cdbe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cdc2:	431a      	orrs	r2, r3
 800cdc4:	4b73      	ldr	r3, [pc, #460]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	0619      	lsls	r1, r3, #24
 800cdca:	4b72      	ldr	r3, [pc, #456]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cdcc:	785b      	ldrb	r3, [r3, #1]
 800cdce:	041b      	lsls	r3, r3, #16
 800cdd0:	4319      	orrs	r1, r3
 800cdd2:	4b70      	ldr	r3, [pc, #448]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cdd4:	789b      	ldrb	r3, [r3, #2]
 800cdd6:	021b      	lsls	r3, r3, #8
 800cdd8:	430b      	orrs	r3, r1
 800cdda:	496e      	ldr	r1, [pc, #440]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cddc:	78c9      	ldrb	r1, [r1, #3]
 800cdde:	430b      	orrs	r3, r1
 800cde0:	0a1b      	lsrs	r3, r3, #8
 800cde2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cde6:	431a      	orrs	r2, r3
 800cde8:	4b6a      	ldr	r3, [pc, #424]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	0619      	lsls	r1, r3, #24
 800cdee:	4b69      	ldr	r3, [pc, #420]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cdf0:	785b      	ldrb	r3, [r3, #1]
 800cdf2:	041b      	lsls	r3, r3, #16
 800cdf4:	4319      	orrs	r1, r3
 800cdf6:	4b67      	ldr	r3, [pc, #412]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800cdf8:	789b      	ldrb	r3, [r3, #2]
 800cdfa:	021b      	lsls	r3, r3, #8
 800cdfc:	430b      	orrs	r3, r1
 800cdfe:	4965      	ldr	r1, [pc, #404]	; (800cf94 <MX_LWIP_Init+0x26c>)
 800ce00:	78c9      	ldrb	r1, [r1, #3]
 800ce02:	430b      	orrs	r3, r1
 800ce04:	0e1b      	lsrs	r3, r3, #24
 800ce06:	4313      	orrs	r3, r2
 800ce08:	4a65      	ldr	r2, [pc, #404]	; (800cfa0 <MX_LWIP_Init+0x278>)
 800ce0a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ce0c:	4b62      	ldr	r3, [pc, #392]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	061a      	lsls	r2, r3, #24
 800ce12:	4b61      	ldr	r3, [pc, #388]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce14:	785b      	ldrb	r3, [r3, #1]
 800ce16:	041b      	lsls	r3, r3, #16
 800ce18:	431a      	orrs	r2, r3
 800ce1a:	4b5f      	ldr	r3, [pc, #380]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce1c:	789b      	ldrb	r3, [r3, #2]
 800ce1e:	021b      	lsls	r3, r3, #8
 800ce20:	4313      	orrs	r3, r2
 800ce22:	4a5d      	ldr	r2, [pc, #372]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce24:	78d2      	ldrb	r2, [r2, #3]
 800ce26:	4313      	orrs	r3, r2
 800ce28:	061a      	lsls	r2, r3, #24
 800ce2a:	4b5b      	ldr	r3, [pc, #364]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	0619      	lsls	r1, r3, #24
 800ce30:	4b59      	ldr	r3, [pc, #356]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce32:	785b      	ldrb	r3, [r3, #1]
 800ce34:	041b      	lsls	r3, r3, #16
 800ce36:	4319      	orrs	r1, r3
 800ce38:	4b57      	ldr	r3, [pc, #348]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce3a:	789b      	ldrb	r3, [r3, #2]
 800ce3c:	021b      	lsls	r3, r3, #8
 800ce3e:	430b      	orrs	r3, r1
 800ce40:	4955      	ldr	r1, [pc, #340]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce42:	78c9      	ldrb	r1, [r1, #3]
 800ce44:	430b      	orrs	r3, r1
 800ce46:	021b      	lsls	r3, r3, #8
 800ce48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce4c:	431a      	orrs	r2, r3
 800ce4e:	4b52      	ldr	r3, [pc, #328]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	0619      	lsls	r1, r3, #24
 800ce54:	4b50      	ldr	r3, [pc, #320]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce56:	785b      	ldrb	r3, [r3, #1]
 800ce58:	041b      	lsls	r3, r3, #16
 800ce5a:	4319      	orrs	r1, r3
 800ce5c:	4b4e      	ldr	r3, [pc, #312]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce5e:	789b      	ldrb	r3, [r3, #2]
 800ce60:	021b      	lsls	r3, r3, #8
 800ce62:	430b      	orrs	r3, r1
 800ce64:	494c      	ldr	r1, [pc, #304]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce66:	78c9      	ldrb	r1, [r1, #3]
 800ce68:	430b      	orrs	r3, r1
 800ce6a:	0a1b      	lsrs	r3, r3, #8
 800ce6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ce70:	431a      	orrs	r2, r3
 800ce72:	4b49      	ldr	r3, [pc, #292]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	0619      	lsls	r1, r3, #24
 800ce78:	4b47      	ldr	r3, [pc, #284]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce7a:	785b      	ldrb	r3, [r3, #1]
 800ce7c:	041b      	lsls	r3, r3, #16
 800ce7e:	4319      	orrs	r1, r3
 800ce80:	4b45      	ldr	r3, [pc, #276]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce82:	789b      	ldrb	r3, [r3, #2]
 800ce84:	021b      	lsls	r3, r3, #8
 800ce86:	430b      	orrs	r3, r1
 800ce88:	4943      	ldr	r1, [pc, #268]	; (800cf98 <MX_LWIP_Init+0x270>)
 800ce8a:	78c9      	ldrb	r1, [r1, #3]
 800ce8c:	430b      	orrs	r3, r1
 800ce8e:	0e1b      	lsrs	r3, r3, #24
 800ce90:	4313      	orrs	r3, r2
 800ce92:	4a44      	ldr	r2, [pc, #272]	; (800cfa4 <MX_LWIP_Init+0x27c>)
 800ce94:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ce96:	4b41      	ldr	r3, [pc, #260]	; (800cf9c <MX_LWIP_Init+0x274>)
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	061a      	lsls	r2, r3, #24
 800ce9c:	4b3f      	ldr	r3, [pc, #252]	; (800cf9c <MX_LWIP_Init+0x274>)
 800ce9e:	785b      	ldrb	r3, [r3, #1]
 800cea0:	041b      	lsls	r3, r3, #16
 800cea2:	431a      	orrs	r2, r3
 800cea4:	4b3d      	ldr	r3, [pc, #244]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cea6:	789b      	ldrb	r3, [r3, #2]
 800cea8:	021b      	lsls	r3, r3, #8
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	4a3b      	ldr	r2, [pc, #236]	; (800cf9c <MX_LWIP_Init+0x274>)
 800ceae:	78d2      	ldrb	r2, [r2, #3]
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	061a      	lsls	r2, r3, #24
 800ceb4:	4b39      	ldr	r3, [pc, #228]	; (800cf9c <MX_LWIP_Init+0x274>)
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	0619      	lsls	r1, r3, #24
 800ceba:	4b38      	ldr	r3, [pc, #224]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cebc:	785b      	ldrb	r3, [r3, #1]
 800cebe:	041b      	lsls	r3, r3, #16
 800cec0:	4319      	orrs	r1, r3
 800cec2:	4b36      	ldr	r3, [pc, #216]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cec4:	789b      	ldrb	r3, [r3, #2]
 800cec6:	021b      	lsls	r3, r3, #8
 800cec8:	430b      	orrs	r3, r1
 800ceca:	4934      	ldr	r1, [pc, #208]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cecc:	78c9      	ldrb	r1, [r1, #3]
 800cece:	430b      	orrs	r3, r1
 800ced0:	021b      	lsls	r3, r3, #8
 800ced2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ced6:	431a      	orrs	r2, r3
 800ced8:	4b30      	ldr	r3, [pc, #192]	; (800cf9c <MX_LWIP_Init+0x274>)
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	0619      	lsls	r1, r3, #24
 800cede:	4b2f      	ldr	r3, [pc, #188]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cee0:	785b      	ldrb	r3, [r3, #1]
 800cee2:	041b      	lsls	r3, r3, #16
 800cee4:	4319      	orrs	r1, r3
 800cee6:	4b2d      	ldr	r3, [pc, #180]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cee8:	789b      	ldrb	r3, [r3, #2]
 800ceea:	021b      	lsls	r3, r3, #8
 800ceec:	430b      	orrs	r3, r1
 800ceee:	492b      	ldr	r1, [pc, #172]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cef0:	78c9      	ldrb	r1, [r1, #3]
 800cef2:	430b      	orrs	r3, r1
 800cef4:	0a1b      	lsrs	r3, r3, #8
 800cef6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cefa:	431a      	orrs	r2, r3
 800cefc:	4b27      	ldr	r3, [pc, #156]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	0619      	lsls	r1, r3, #24
 800cf02:	4b26      	ldr	r3, [pc, #152]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cf04:	785b      	ldrb	r3, [r3, #1]
 800cf06:	041b      	lsls	r3, r3, #16
 800cf08:	4319      	orrs	r1, r3
 800cf0a:	4b24      	ldr	r3, [pc, #144]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cf0c:	789b      	ldrb	r3, [r3, #2]
 800cf0e:	021b      	lsls	r3, r3, #8
 800cf10:	430b      	orrs	r3, r1
 800cf12:	4922      	ldr	r1, [pc, #136]	; (800cf9c <MX_LWIP_Init+0x274>)
 800cf14:	78c9      	ldrb	r1, [r1, #3]
 800cf16:	430b      	orrs	r3, r1
 800cf18:	0e1b      	lsrs	r3, r3, #24
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	4a22      	ldr	r2, [pc, #136]	; (800cfa8 <MX_LWIP_Init+0x280>)
 800cf1e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800cf20:	4b22      	ldr	r3, [pc, #136]	; (800cfac <MX_LWIP_Init+0x284>)
 800cf22:	9302      	str	r3, [sp, #8]
 800cf24:	4b22      	ldr	r3, [pc, #136]	; (800cfb0 <MX_LWIP_Init+0x288>)
 800cf26:	9301      	str	r3, [sp, #4]
 800cf28:	2300      	movs	r3, #0
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	4b1e      	ldr	r3, [pc, #120]	; (800cfa8 <MX_LWIP_Init+0x280>)
 800cf2e:	4a1d      	ldr	r2, [pc, #116]	; (800cfa4 <MX_LWIP_Init+0x27c>)
 800cf30:	491b      	ldr	r1, [pc, #108]	; (800cfa0 <MX_LWIP_Init+0x278>)
 800cf32:	4820      	ldr	r0, [pc, #128]	; (800cfb4 <MX_LWIP_Init+0x28c>)
 800cf34:	f006 fbe8 	bl	8013708 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800cf38:	481e      	ldr	r0, [pc, #120]	; (800cfb4 <MX_LWIP_Init+0x28c>)
 800cf3a:	f006 fd97 	bl	8013a6c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800cf3e:	4b1d      	ldr	r3, [pc, #116]	; (800cfb4 <MX_LWIP_Init+0x28c>)
 800cf40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf44:	089b      	lsrs	r3, r3, #2
 800cf46:	f003 0301 	and.w	r3, r3, #1
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d003      	beq.n	800cf58 <MX_LWIP_Init+0x230>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800cf50:	4818      	ldr	r0, [pc, #96]	; (800cfb4 <MX_LWIP_Init+0x28c>)
 800cf52:	f006 fd9b 	bl	8013a8c <netif_set_up>
 800cf56:	e002      	b.n	800cf5e <MX_LWIP_Init+0x236>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800cf58:	4816      	ldr	r0, [pc, #88]	; (800cfb4 <MX_LWIP_Init+0x28c>)
 800cf5a:	f006 fe03 	bl	8013b64 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800cf5e:	4916      	ldr	r1, [pc, #88]	; (800cfb8 <MX_LWIP_Init+0x290>)
 800cf60:	4814      	ldr	r0, [pc, #80]	; (800cfb4 <MX_LWIP_Init+0x28c>)
 800cf62:	f006 fe31 	bl	8013bc8 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800cf66:	2300      	movs	r3, #0
 800cf68:	603b      	str	r3, [r7, #0]
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	607b      	str	r3, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800cf6e:	463b      	mov	r3, r7
 800cf70:	2101      	movs	r1, #1
 800cf72:	4618      	mov	r0, r3
 800cf74:	f000 fd36 	bl	800d9e4 <osSemaphoreCreate>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	4a10      	ldr	r2, [pc, #64]	; (800cfbc <MX_LWIP_Init+0x294>)
 800cf7c:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800cf7e:	4b10      	ldr	r3, [pc, #64]	; (800cfc0 <MX_LWIP_Init+0x298>)
 800cf80:	4a0c      	ldr	r2, [pc, #48]	; (800cfb4 <MX_LWIP_Init+0x28c>)
 800cf82:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800cf84:	4b0d      	ldr	r3, [pc, #52]	; (800cfbc <MX_LWIP_Init+0x294>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a0d      	ldr	r2, [pc, #52]	; (800cfc0 <MX_LWIP_Init+0x298>)
 800cf8a:	6053      	str	r3, [r2, #4]
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800cf8c:	bf00      	nop
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	200078b0 	.word	0x200078b0
 800cf98:	200078ac 	.word	0x200078ac
 800cf9c:	20007870 	.word	0x20007870
 800cfa0:	200078a8 	.word	0x200078a8
 800cfa4:	200078b4 	.word	0x200078b4
 800cfa8:	200078b8 	.word	0x200078b8
 800cfac:	08012b11 	.word	0x08012b11
 800cfb0:	0800d5f1 	.word	0x0800d5f1
 800cfb4:	20007874 	.word	0x20007874
 800cfb8:	0800d65d 	.word	0x0800d65d
 800cfbc:	200008fc 	.word	0x200008fc
 800cfc0:	20007868 	.word	0x20007868

0800cfc4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b08e      	sub	sp, #56	; 0x38
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	601a      	str	r2, [r3, #0]
 800cfd4:	605a      	str	r2, [r3, #4]
 800cfd6:	609a      	str	r2, [r3, #8]
 800cfd8:	60da      	str	r2, [r3, #12]
 800cfda:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a4a      	ldr	r2, [pc, #296]	; (800d10c <HAL_ETH_MspInit+0x148>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	f040 808d 	bne.w	800d102 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800cfe8:	2300      	movs	r3, #0
 800cfea:	623b      	str	r3, [r7, #32]
 800cfec:	4b48      	ldr	r3, [pc, #288]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800cfee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff0:	4a47      	ldr	r2, [pc, #284]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800cff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cff6:	6313      	str	r3, [r2, #48]	; 0x30
 800cff8:	4b45      	ldr	r3, [pc, #276]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800cffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d000:	623b      	str	r3, [r7, #32]
 800d002:	6a3b      	ldr	r3, [r7, #32]
 800d004:	2300      	movs	r3, #0
 800d006:	61fb      	str	r3, [r7, #28]
 800d008:	4b41      	ldr	r3, [pc, #260]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d00c:	4a40      	ldr	r2, [pc, #256]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d00e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d012:	6313      	str	r3, [r2, #48]	; 0x30
 800d014:	4b3e      	ldr	r3, [pc, #248]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d018:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d01c:	61fb      	str	r3, [r7, #28]
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	2300      	movs	r3, #0
 800d022:	61bb      	str	r3, [r7, #24]
 800d024:	4b3a      	ldr	r3, [pc, #232]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d028:	4a39      	ldr	r2, [pc, #228]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d02a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d02e:	6313      	str	r3, [r2, #48]	; 0x30
 800d030:	4b37      	ldr	r3, [pc, #220]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d038:	61bb      	str	r3, [r7, #24]
 800d03a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d03c:	2300      	movs	r3, #0
 800d03e:	617b      	str	r3, [r7, #20]
 800d040:	4b33      	ldr	r3, [pc, #204]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d044:	4a32      	ldr	r2, [pc, #200]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d046:	f043 0304 	orr.w	r3, r3, #4
 800d04a:	6313      	str	r3, [r2, #48]	; 0x30
 800d04c:	4b30      	ldr	r3, [pc, #192]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d050:	f003 0304 	and.w	r3, r3, #4
 800d054:	617b      	str	r3, [r7, #20]
 800d056:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d058:	2300      	movs	r3, #0
 800d05a:	613b      	str	r3, [r7, #16]
 800d05c:	4b2c      	ldr	r3, [pc, #176]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d05e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d060:	4a2b      	ldr	r2, [pc, #172]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d062:	f043 0301 	orr.w	r3, r3, #1
 800d066:	6313      	str	r3, [r2, #48]	; 0x30
 800d068:	4b29      	ldr	r3, [pc, #164]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d06c:	f003 0301 	and.w	r3, r3, #1
 800d070:	613b      	str	r3, [r7, #16]
 800d072:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d074:	2300      	movs	r3, #0
 800d076:	60fb      	str	r3, [r7, #12]
 800d078:	4b25      	ldr	r3, [pc, #148]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d07c:	4a24      	ldr	r2, [pc, #144]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d07e:	f043 0302 	orr.w	r3, r3, #2
 800d082:	6313      	str	r3, [r2, #48]	; 0x30
 800d084:	4b22      	ldr	r3, [pc, #136]	; (800d110 <HAL_ETH_MspInit+0x14c>)
 800d086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d088:	f003 0302 	and.w	r3, r3, #2
 800d08c:	60fb      	str	r3, [r7, #12]
 800d08e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800d090:	2332      	movs	r3, #50	; 0x32
 800d092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d094:	2302      	movs	r3, #2
 800d096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d098:	2300      	movs	r3, #0
 800d09a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d09c:	2303      	movs	r3, #3
 800d09e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d0a0:	230b      	movs	r3, #11
 800d0a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d0a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	481a      	ldr	r0, [pc, #104]	; (800d114 <HAL_ETH_MspInit+0x150>)
 800d0ac:	f7fc f986 	bl	80093bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800d0b0:	2386      	movs	r3, #134	; 0x86
 800d0b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0b4:	2302      	movs	r3, #2
 800d0b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0bc:	2303      	movs	r3, #3
 800d0be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d0c0:	230b      	movs	r3, #11
 800d0c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	4813      	ldr	r0, [pc, #76]	; (800d118 <HAL_ETH_MspInit+0x154>)
 800d0cc:	f7fc f976 	bl	80093bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800d0d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800d0d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0d6:	2302      	movs	r3, #2
 800d0d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0de:	2303      	movs	r3, #3
 800d0e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d0e2:	230b      	movs	r3, #11
 800d0e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d0e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	480b      	ldr	r0, [pc, #44]	; (800d11c <HAL_ETH_MspInit+0x158>)
 800d0ee:	f7fc f965 	bl	80093bc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	2105      	movs	r1, #5
 800d0f6:	203d      	movs	r0, #61	; 0x3d
 800d0f8:	f7fa fb22 	bl	8007740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800d0fc:	203d      	movs	r0, #61	; 0x3d
 800d0fe:	f7fa fb3b 	bl	8007778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800d102:	bf00      	nop
 800d104:	3738      	adds	r7, #56	; 0x38
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	40028000 	.word	0x40028000
 800d110:	40023800 	.word	0x40023800
 800d114:	40020800 	.word	0x40020800
 800d118:	40020000 	.word	0x40020000
 800d11c:	40020400 	.word	0x40020400

0800d120 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800d128:	4b04      	ldr	r3, [pc, #16]	; (800d13c <HAL_ETH_RxCpltCallback+0x1c>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f000 fcd9 	bl	800dae4 <osSemaphoreRelease>
}
 800d132:	bf00      	nop
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	20000900 	.word	0x20000900

0800d140 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800d140:	b5b0      	push	{r4, r5, r7, lr}
 800d142:	b090      	sub	sp, #64	; 0x40
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800d148:	2300      	movs	r3, #0
 800d14a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800d14c:	4b5f      	ldr	r3, [pc, #380]	; (800d2cc <low_level_init+0x18c>)
 800d14e:	4a60      	ldr	r2, [pc, #384]	; (800d2d0 <low_level_init+0x190>)
 800d150:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 800d152:	4b5e      	ldr	r3, [pc, #376]	; (800d2cc <low_level_init+0x18c>)
 800d154:	2200      	movs	r2, #0
 800d156:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800d158:	4b5c      	ldr	r3, [pc, #368]	; (800d2cc <low_level_init+0x18c>)
 800d15a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d15e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800d160:	4b5a      	ldr	r3, [pc, #360]	; (800d2cc <low_level_init+0x18c>)
 800d162:	2200      	movs	r2, #0
 800d164:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800d166:	4b59      	ldr	r3, [pc, #356]	; (800d2cc <low_level_init+0x18c>)
 800d168:	2200      	movs	r2, #0
 800d16a:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800d16c:	2300      	movs	r3, #0
 800d16e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800d172:	2380      	movs	r3, #128	; 0x80
 800d174:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800d178:	23e1      	movs	r3, #225	; 0xe1
 800d17a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800d17e:	2300      	movs	r3, #0
 800d180:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  MACAddr[4] = 0x13;
 800d184:	2313      	movs	r3, #19
 800d186:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x01;
 800d18a:	2301      	movs	r3, #1
 800d18c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800d190:	4a4e      	ldr	r2, [pc, #312]	; (800d2cc <low_level_init+0x18c>)
 800d192:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d196:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800d198:	4b4c      	ldr	r3, [pc, #304]	; (800d2cc <low_level_init+0x18c>)
 800d19a:	2201      	movs	r2, #1
 800d19c:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800d19e:	4b4b      	ldr	r3, [pc, #300]	; (800d2cc <low_level_init+0x18c>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800d1a4:	4b49      	ldr	r3, [pc, #292]	; (800d2cc <low_level_init+0x18c>)
 800d1a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800d1aa:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800d1ac:	4847      	ldr	r0, [pc, #284]	; (800d2cc <low_level_init+0x18c>)
 800d1ae:	f7fa ff5f 	bl	8008070 <HAL_ETH_Init>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800d1b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d108      	bne.n	800d1d2 <low_level_init+0x92>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1c6:	f043 0304 	orr.w	r3, r3, #4
 800d1ca:	b2da      	uxtb	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800d1d2:	2304      	movs	r3, #4
 800d1d4:	4a3f      	ldr	r2, [pc, #252]	; (800d2d4 <low_level_init+0x194>)
 800d1d6:	4940      	ldr	r1, [pc, #256]	; (800d2d8 <low_level_init+0x198>)
 800d1d8:	483c      	ldr	r0, [pc, #240]	; (800d2cc <low_level_init+0x18c>)
 800d1da:	f7fb f8e5 	bl	80083a8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800d1de:	2304      	movs	r3, #4
 800d1e0:	4a3e      	ldr	r2, [pc, #248]	; (800d2dc <low_level_init+0x19c>)
 800d1e2:	493f      	ldr	r1, [pc, #252]	; (800d2e0 <low_level_init+0x1a0>)
 800d1e4:	4839      	ldr	r0, [pc, #228]	; (800d2cc <low_level_init+0x18c>)
 800d1e6:	f7fb f948 	bl	800847a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2206      	movs	r2, #6
 800d1ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800d1f2:	4b36      	ldr	r3, [pc, #216]	; (800d2cc <low_level_init+0x18c>)
 800d1f4:	695b      	ldr	r3, [r3, #20]
 800d1f6:	781a      	ldrb	r2, [r3, #0]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800d1fe:	4b33      	ldr	r3, [pc, #204]	; (800d2cc <low_level_init+0x18c>)
 800d200:	695b      	ldr	r3, [r3, #20]
 800d202:	785a      	ldrb	r2, [r3, #1]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800d20a:	4b30      	ldr	r3, [pc, #192]	; (800d2cc <low_level_init+0x18c>)
 800d20c:	695b      	ldr	r3, [r3, #20]
 800d20e:	789a      	ldrb	r2, [r3, #2]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800d216:	4b2d      	ldr	r3, [pc, #180]	; (800d2cc <low_level_init+0x18c>)
 800d218:	695b      	ldr	r3, [r3, #20]
 800d21a:	78da      	ldrb	r2, [r3, #3]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800d222:	4b2a      	ldr	r3, [pc, #168]	; (800d2cc <low_level_init+0x18c>)
 800d224:	695b      	ldr	r3, [r3, #20]
 800d226:	791a      	ldrb	r2, [r3, #4]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800d22e:	4b27      	ldr	r3, [pc, #156]	; (800d2cc <low_level_init+0x18c>)
 800d230:	695b      	ldr	r3, [r3, #20]
 800d232:	795a      	ldrb	r2, [r3, #5]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d240:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d248:	f043 030a 	orr.w	r3, r3, #10
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800d254:	2300      	movs	r3, #0
 800d256:	62bb      	str	r3, [r7, #40]	; 0x28
 800d258:	2300      	movs	r3, #0
 800d25a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800d25c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d260:	2101      	movs	r1, #1
 800d262:	4618      	mov	r0, r3
 800d264:	f000 fbbe 	bl	800d9e4 <osSemaphoreCreate>
 800d268:	4603      	mov	r3, r0
 800d26a:	4a1e      	ldr	r2, [pc, #120]	; (800d2e4 <low_level_init+0x1a4>)
 800d26c:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800d26e:	4b1e      	ldr	r3, [pc, #120]	; (800d2e8 <low_level_init+0x1a8>)
 800d270:	f107 040c 	add.w	r4, r7, #12
 800d274:	461d      	mov	r5, r3
 800d276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d27a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d27e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800d282:	f107 030c 	add.w	r3, r7, #12
 800d286:	6879      	ldr	r1, [r7, #4]
 800d288:	4618      	mov	r0, r3
 800d28a:	f000 faae 	bl	800d7ea <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800d28e:	480f      	ldr	r0, [pc, #60]	; (800d2cc <low_level_init+0x18c>)
 800d290:	f7fb fc1b 	bl	8008aca <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800d294:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d298:	461a      	mov	r2, r3
 800d29a:	211d      	movs	r1, #29
 800d29c:	480b      	ldr	r0, [pc, #44]	; (800d2cc <low_level_init+0x18c>)
 800d29e:	f7fb fb46 	bl	800892e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800d2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a4:	f043 030b 	orr.w	r3, r3, #11
 800d2a8:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800d2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	211d      	movs	r1, #29
 800d2b0:	4806      	ldr	r0, [pc, #24]	; (800d2cc <low_level_init+0x18c>)
 800d2b2:	f7fb fba4 	bl	80089fe <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800d2b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	211d      	movs	r1, #29
 800d2be:	4803      	ldr	r0, [pc, #12]	; (800d2cc <low_level_init+0x18c>)
 800d2c0:	f7fb fb35 	bl	800892e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800d2c4:	bf00      	nop
 800d2c6:	3740      	adds	r7, #64	; 0x40
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bdb0      	pop	{r4, r5, r7, pc}
 800d2cc:	2000918c 	.word	0x2000918c
 800d2d0:	40028000 	.word	0x40028000
 800d2d4:	200091d4 	.word	0x200091d4
 800d2d8:	200078bc 	.word	0x200078bc
 800d2dc:	2000793c 	.word	0x2000793c
 800d2e0:	2000910c 	.word	0x2000910c
 800d2e4:	20000900 	.word	0x20000900
 800d2e8:	08023430 	.word	0x08023430

0800d2ec <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b08a      	sub	sp, #40	; 0x28
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800d2f6:	4b4b      	ldr	r3, [pc, #300]	; (800d424 <low_level_output+0x138>)
 800d2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fa:	689b      	ldr	r3, [r3, #8]
 800d2fc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800d2fe:	2300      	movs	r3, #0
 800d300:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800d302:	2300      	movs	r3, #0
 800d304:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800d306:	2300      	movs	r3, #0
 800d308:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800d30a:	2300      	movs	r3, #0
 800d30c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800d30e:	4b45      	ldr	r3, [pc, #276]	; (800d424 <low_level_output+0x138>)
 800d310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d312:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800d314:	2300      	movs	r3, #0
 800d316:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	623b      	str	r3, [r7, #32]
 800d31c:	e05a      	b.n	800d3d4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d31e:	69bb      	ldr	r3, [r7, #24]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	da03      	bge.n	800d32e <low_level_output+0x42>
      {
        errval = ERR_USE;
 800d326:	23f8      	movs	r3, #248	; 0xf8
 800d328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800d32c:	e05c      	b.n	800d3e8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800d32e:	6a3b      	ldr	r3, [r7, #32]
 800d330:	895b      	ldrh	r3, [r3, #10]
 800d332:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800d334:	2300      	movs	r3, #0
 800d336:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d338:	e02f      	b.n	800d39a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800d33a:	69fa      	ldr	r2, [r7, #28]
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	18d0      	adds	r0, r2, r3
 800d340:	6a3b      	ldr	r3, [r7, #32]
 800d342:	685a      	ldr	r2, [r3, #4]
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	18d1      	adds	r1, r2, r3
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800d34e:	3304      	adds	r3, #4
 800d350:	461a      	mov	r2, r3
 800d352:	f010 fe7f 	bl	801e054 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	da03      	bge.n	800d36c <low_level_output+0x80>
        {
          errval = ERR_USE;
 800d364:	23f8      	movs	r3, #248	; 0xf8
 800d366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800d36a:	e03d      	b.n	800d3e8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800d372:	693a      	ldr	r2, [r7, #16]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	4413      	add	r3, r2
 800d378:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800d37c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800d37e:	68ba      	ldr	r2, [r7, #8]
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	1ad3      	subs	r3, r2, r3
 800d384:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d388:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800d38a:	697a      	ldr	r2, [r7, #20]
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	1ad3      	subs	r3, r2, r3
 800d390:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d394:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800d396:	2300      	movs	r3, #0
 800d398:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d39a:	68fa      	ldr	r2, [r7, #12]
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	4413      	add	r3, r2
 800d3a0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d8c8      	bhi.n	800d33a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800d3a8:	69fa      	ldr	r2, [r7, #28]
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	18d0      	adds	r0, r2, r3
 800d3ae:	6a3b      	ldr	r3, [r7, #32]
 800d3b0:	685a      	ldr	r2, [r3, #4]
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	f010 fe4b 	bl	801e054 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800d3be:	693a      	ldr	r2, [r7, #16]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800d3ce:	6a3b      	ldr	r3, [r7, #32]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	623b      	str	r3, [r7, #32]
 800d3d4:	6a3b      	ldr	r3, [r7, #32]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1a1      	bne.n	800d31e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800d3da:	6979      	ldr	r1, [r7, #20]
 800d3dc:	4811      	ldr	r0, [pc, #68]	; (800d424 <low_level_output+0x138>)
 800d3de:	f7fb f8b9 	bl	8008554 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800d3e8:	4b0e      	ldr	r3, [pc, #56]	; (800d424 <low_level_output+0x138>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3f0:	3314      	adds	r3, #20
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f003 0320 	and.w	r3, r3, #32
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00d      	beq.n	800d418 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800d3fc:	4b09      	ldr	r3, [pc, #36]	; (800d424 <low_level_output+0x138>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d404:	3314      	adds	r3, #20
 800d406:	2220      	movs	r2, #32
 800d408:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800d40a:	4b06      	ldr	r3, [pc, #24]	; (800d424 <low_level_output+0x138>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d412:	3304      	adds	r3, #4
 800d414:	2200      	movs	r2, #0
 800d416:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800d418:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3728      	adds	r7, #40	; 0x28
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}
 800d424:	2000918c 	.word	0x2000918c

0800d428 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b08c      	sub	sp, #48	; 0x30
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800d430:	2300      	movs	r3, #0
 800d432:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800d434:	2300      	movs	r3, #0
 800d436:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800d438:	2300      	movs	r3, #0
 800d43a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800d43c:	2300      	movs	r3, #0
 800d43e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800d440:	2300      	movs	r3, #0
 800d442:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800d444:	2300      	movs	r3, #0
 800d446:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800d448:	2300      	movs	r3, #0
 800d44a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800d44c:	484f      	ldr	r0, [pc, #316]	; (800d58c <low_level_input+0x164>)
 800d44e:	f7fb f96b 	bl	8008728 <HAL_ETH_GetReceivedFrame_IT>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d001      	beq.n	800d45c <low_level_input+0x34>

    return NULL;
 800d458:	2300      	movs	r3, #0
 800d45a:	e092      	b.n	800d582 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800d45c:	4b4b      	ldr	r3, [pc, #300]	; (800d58c <low_level_input+0x164>)
 800d45e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d460:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800d462:	4b4a      	ldr	r3, [pc, #296]	; (800d58c <low_level_input+0x164>)
 800d464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d466:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800d468:	89fb      	ldrh	r3, [r7, #14]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d007      	beq.n	800d47e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800d46e:	89fb      	ldrh	r3, [r7, #14]
 800d470:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800d474:	4619      	mov	r1, r3
 800d476:	2000      	movs	r0, #0
 800d478:	f006 fc70 	bl	8013d5c <pbuf_alloc>
 800d47c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800d47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d480:	2b00      	cmp	r3, #0
 800d482:	d04b      	beq.n	800d51c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d484:	4b41      	ldr	r3, [pc, #260]	; (800d58c <low_level_input+0x164>)
 800d486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d488:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800d48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d490:	62bb      	str	r3, [r7, #40]	; 0x28
 800d492:	e040      	b.n	800d516 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800d494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d496:	895b      	ldrh	r3, [r3, #10]
 800d498:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800d49a:	2300      	movs	r3, #0
 800d49c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d49e:	e021      	b.n	800d4e4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800d4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a2:	685a      	ldr	r2, [r3, #4]
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	18d0      	adds	r0, r2, r3
 800d4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	18d1      	adds	r1, r2, r3
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800d4b4:	3304      	adds	r3, #4
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	f010 fdcc 	bl	801e054 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d4bc:	6a3b      	ldr	r3, [r7, #32]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800d4c2:	6a3b      	ldr	r3, [r7, #32]
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800d4c8:	69fa      	ldr	r2, [r7, #28]
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800d4d2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800d4d4:	69ba      	ldr	r2, [r7, #24]
 800d4d6:	69fb      	ldr	r3, [r7, #28]
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d4de:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d4e4:	697a      	ldr	r2, [r7, #20]
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d8d6      	bhi.n	800d4a0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800d4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f4:	685a      	ldr	r2, [r3, #4]
 800d4f6:	69bb      	ldr	r3, [r7, #24]
 800d4f8:	18d0      	adds	r0, r2, r3
 800d4fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	4413      	add	r3, r2
 800d500:	697a      	ldr	r2, [r7, #20]
 800d502:	4619      	mov	r1, r3
 800d504:	f010 fda6 	bl	801e054 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800d508:	69fa      	ldr	r2, [r7, #28]
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	4413      	add	r3, r2
 800d50e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800d510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	62bb      	str	r3, [r7, #40]	; 0x28
 800d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1bb      	bne.n	800d494 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d51c:	4b1b      	ldr	r3, [pc, #108]	; (800d58c <low_level_input+0x164>)
 800d51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d520:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d522:	2300      	movs	r3, #0
 800d524:	613b      	str	r3, [r7, #16]
 800d526:	e00b      	b.n	800d540 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800d528:	6a3b      	ldr	r3, [r7, #32]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d530:	6a3b      	ldr	r3, [r7, #32]
 800d532:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d534:	6a3b      	ldr	r3, [r7, #32]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	3301      	adds	r3, #1
 800d53e:	613b      	str	r3, [r7, #16]
 800d540:	4b12      	ldr	r3, [pc, #72]	; (800d58c <low_level_input+0x164>)
 800d542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d544:	693a      	ldr	r2, [r7, #16]
 800d546:	429a      	cmp	r2, r3
 800d548:	d3ee      	bcc.n	800d528 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800d54a:	4b10      	ldr	r3, [pc, #64]	; (800d58c <low_level_input+0x164>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800d550:	4b0e      	ldr	r3, [pc, #56]	; (800d58c <low_level_input+0x164>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d558:	3314      	adds	r3, #20
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d560:	2b00      	cmp	r3, #0
 800d562:	d00d      	beq.n	800d580 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800d564:	4b09      	ldr	r3, [pc, #36]	; (800d58c <low_level_input+0x164>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d56c:	3314      	adds	r3, #20
 800d56e:	2280      	movs	r2, #128	; 0x80
 800d570:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800d572:	4b06      	ldr	r3, [pc, #24]	; (800d58c <low_level_input+0x164>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d57a:	3308      	adds	r3, #8
 800d57c:	2200      	movs	r2, #0
 800d57e:	601a      	str	r2, [r3, #0]
  }
  return p;
 800d580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d582:	4618      	mov	r0, r3
 800d584:	3730      	adds	r7, #48	; 0x30
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	2000918c 	.word	0x2000918c

0800d590 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d59c:	4b12      	ldr	r3, [pc, #72]	; (800d5e8 <ethernetif_input+0x58>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f04f 31ff 	mov.w	r1, #4294967295
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f000 fa4f 	bl	800da48 <osSemaphoreWait>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1f5      	bne.n	800d59c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800d5b0:	480e      	ldr	r0, [pc, #56]	; (800d5ec <ethernetif_input+0x5c>)
 800d5b2:	f010 fbbf 	bl	801dd34 <sys_mutex_lock>
        p = low_level_input( netif );
 800d5b6:	68f8      	ldr	r0, [r7, #12]
 800d5b8:	f7ff ff36 	bl	800d428 <low_level_input>
 800d5bc:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d00a      	beq.n	800d5da <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	691b      	ldr	r3, [r3, #16]
 800d5c8:	68f9      	ldr	r1, [r7, #12]
 800d5ca:	68b8      	ldr	r0, [r7, #8]
 800d5cc:	4798      	blx	r3
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d002      	beq.n	800d5da <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800d5d4:	68b8      	ldr	r0, [r7, #8]
 800d5d6:	f006 fea5 	bl	8014324 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800d5da:	4804      	ldr	r0, [pc, #16]	; (800d5ec <ethernetif_input+0x5c>)
 800d5dc:	f010 fbb9 	bl	801dd52 <sys_mutex_unlock>
      } while(p!=NULL);
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d1e4      	bne.n	800d5b0 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d5e6:	e7d9      	b.n	800d59c <ethernetif_input+0xc>
 800d5e8:	20000900 	.word	0x20000900
 800d5ec:	2000a9e4 	.word	0x2000a9e4

0800d5f0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d106      	bne.n	800d60c <ethernetif_init+0x1c>
 800d5fe:	4b0e      	ldr	r3, [pc, #56]	; (800d638 <ethernetif_init+0x48>)
 800d600:	f240 222d 	movw	r2, #557	; 0x22d
 800d604:	490d      	ldr	r1, [pc, #52]	; (800d63c <ethernetif_init+0x4c>)
 800d606:	480e      	ldr	r0, [pc, #56]	; (800d640 <ethernetif_init+0x50>)
 800d608:	f011 fc78 	bl	801eefc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2273      	movs	r2, #115	; 0x73
 800d610:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2274      	movs	r2, #116	; 0x74
 800d618:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a09      	ldr	r2, [pc, #36]	; (800d644 <ethernetif_init+0x54>)
 800d620:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4a08      	ldr	r2, [pc, #32]	; (800d648 <ethernetif_init+0x58>)
 800d626:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f7ff fd89 	bl	800d140 <low_level_init>

  return ERR_OK;
 800d62e:	2300      	movs	r3, #0
}
 800d630:	4618      	mov	r0, r3
 800d632:	3708      	adds	r7, #8
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	0802344c 	.word	0x0802344c
 800d63c:	08023468 	.word	0x08023468
 800d640:	08023478 	.word	0x08023478
 800d644:	0801bd49 	.word	0x0801bd49
 800d648:	0800d2ed 	.word	0x0800d2ed

0800d64c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d650:	f7f9 fb62 	bl	8006d18 <HAL_GetTick>
 800d654:	4603      	mov	r3, r0
}
 800d656:	4618      	mov	r0, r3
 800d658:	bd80      	pop	{r7, pc}
	...

0800d65c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b084      	sub	sp, #16
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800d664:	2300      	movs	r3, #0
 800d666:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800d668:	2300      	movs	r3, #0
 800d66a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d672:	089b      	lsrs	r3, r3, #2
 800d674:	f003 0301 	and.w	r3, r3, #1
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d05d      	beq.n	800d73a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800d67e:	4b34      	ldr	r3, [pc, #208]	; (800d750 <ethernetif_update_config+0xf4>)
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d03f      	beq.n	800d706 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800d686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d68a:	2100      	movs	r1, #0
 800d68c:	4830      	ldr	r0, [pc, #192]	; (800d750 <ethernetif_update_config+0xf4>)
 800d68e:	f7fb f9b6 	bl	80089fe <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800d692:	f7f9 fb41 	bl	8006d18 <HAL_GetTick>
 800d696:	4603      	mov	r3, r0
 800d698:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800d69a:	f107 0308 	add.w	r3, r7, #8
 800d69e:	461a      	mov	r2, r3
 800d6a0:	2101      	movs	r1, #1
 800d6a2:	482b      	ldr	r0, [pc, #172]	; (800d750 <ethernetif_update_config+0xf4>)
 800d6a4:	f7fb f943 	bl	800892e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800d6a8:	f7f9 fb36 	bl	8006d18 <HAL_GetTick>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	1ad3      	subs	r3, r2, r3
 800d6b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6b6:	d828      	bhi.n	800d70a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	f003 0320 	and.w	r3, r3, #32
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d0eb      	beq.n	800d69a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800d6c2:	f107 0308 	add.w	r3, r7, #8
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	2110      	movs	r1, #16
 800d6ca:	4821      	ldr	r0, [pc, #132]	; (800d750 <ethernetif_update_config+0xf4>)
 800d6cc:	f7fb f92f 	bl	800892e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	f003 0304 	and.w	r3, r3, #4
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d004      	beq.n	800d6e4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800d6da:	4b1d      	ldr	r3, [pc, #116]	; (800d750 <ethernetif_update_config+0xf4>)
 800d6dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d6e0:	60da      	str	r2, [r3, #12]
 800d6e2:	e002      	b.n	800d6ea <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800d6e4:	4b1a      	ldr	r3, [pc, #104]	; (800d750 <ethernetif_update_config+0xf4>)
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	f003 0302 	and.w	r3, r3, #2
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d003      	beq.n	800d6fc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800d6f4:	4b16      	ldr	r3, [pc, #88]	; (800d750 <ethernetif_update_config+0xf4>)
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	609a      	str	r2, [r3, #8]
 800d6fa:	e016      	b.n	800d72a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800d6fc:	4b14      	ldr	r3, [pc, #80]	; (800d750 <ethernetif_update_config+0xf4>)
 800d6fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d702:	609a      	str	r2, [r3, #8]
 800d704:	e011      	b.n	800d72a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800d706:	bf00      	nop
 800d708:	e000      	b.n	800d70c <ethernetif_update_config+0xb0>
          goto error;
 800d70a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800d70c:	4b10      	ldr	r3, [pc, #64]	; (800d750 <ethernetif_update_config+0xf4>)
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	08db      	lsrs	r3, r3, #3
 800d712:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800d714:	4b0e      	ldr	r3, [pc, #56]	; (800d750 <ethernetif_update_config+0xf4>)
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	085b      	lsrs	r3, r3, #1
 800d71a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800d71c:	4313      	orrs	r3, r2
 800d71e:	b29b      	uxth	r3, r3
 800d720:	461a      	mov	r2, r3
 800d722:	2100      	movs	r1, #0
 800d724:	480a      	ldr	r0, [pc, #40]	; (800d750 <ethernetif_update_config+0xf4>)
 800d726:	f7fb f96a 	bl	80089fe <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800d72a:	2100      	movs	r1, #0
 800d72c:	4808      	ldr	r0, [pc, #32]	; (800d750 <ethernetif_update_config+0xf4>)
 800d72e:	f7fb fa2b 	bl	8008b88 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800d732:	4807      	ldr	r0, [pc, #28]	; (800d750 <ethernetif_update_config+0xf4>)
 800d734:	f7fb f9c9 	bl	8008aca <HAL_ETH_Start>
 800d738:	e002      	b.n	800d740 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800d73a:	4805      	ldr	r0, [pc, #20]	; (800d750 <ethernetif_update_config+0xf4>)
 800d73c:	f7fb f9f4 	bl	8008b28 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 f807 	bl	800d754 <ethernetif_notify_conn_changed>
}
 800d746:	bf00      	nop
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	2000918c 	.word	0x2000918c

0800d754 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800d75c:	bf00      	nop
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d768:	b480      	push	{r7}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	4603      	mov	r3, r0
 800d770:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d772:	2300      	movs	r3, #0
 800d774:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d77a:	2b84      	cmp	r3, #132	; 0x84
 800d77c:	d005      	beq.n	800d78a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d77e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	4413      	add	r3, r2
 800d786:	3303      	adds	r3, #3
 800d788:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d78a:	68fb      	ldr	r3, [r7, #12]
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3714      	adds	r7, #20
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d79e:	f3ef 8305 	mrs	r3, IPSR
 800d7a2:	607b      	str	r3, [r7, #4]
  return(result);
 800d7a4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	bf14      	ite	ne
 800d7aa:	2301      	movne	r3, #1
 800d7ac:	2300      	moveq	r3, #0
 800d7ae:	b2db      	uxtb	r3, r3
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr

0800d7bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d7c0:	f001 ff70 	bl	800f6a4 <vTaskStartScheduler>
  
  return osOK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d7ce:	f7ff ffe3 	bl	800d798 <inHandlerMode>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d003      	beq.n	800d7e0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d7d8:	f002 f888 	bl	800f8ec <xTaskGetTickCountFromISR>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	e002      	b.n	800d7e6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d7e0:	f002 f874 	bl	800f8cc <xTaskGetTickCount>
 800d7e4:	4603      	mov	r3, r0
  }
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d7ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ec:	b089      	sub	sp, #36	; 0x24
 800d7ee:	af04      	add	r7, sp, #16
 800d7f0:	6078      	str	r0, [r7, #4]
 800d7f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	695b      	ldr	r3, [r3, #20]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d020      	beq.n	800d83e <osThreadCreate+0x54>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	699b      	ldr	r3, [r3, #24]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d01c      	beq.n	800d83e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	685c      	ldr	r4, [r3, #4]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681d      	ldr	r5, [r3, #0]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	691e      	ldr	r6, [r3, #16]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d816:	4618      	mov	r0, r3
 800d818:	f7ff ffa6 	bl	800d768 <makeFreeRtosPriority>
 800d81c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	695b      	ldr	r3, [r3, #20]
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d826:	9202      	str	r2, [sp, #8]
 800d828:	9301      	str	r3, [sp, #4]
 800d82a:	9100      	str	r1, [sp, #0]
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	4632      	mov	r2, r6
 800d830:	4629      	mov	r1, r5
 800d832:	4620      	mov	r0, r4
 800d834:	f001 fd58 	bl	800f2e8 <xTaskCreateStatic>
 800d838:	4603      	mov	r3, r0
 800d83a:	60fb      	str	r3, [r7, #12]
 800d83c:	e01c      	b.n	800d878 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	685c      	ldr	r4, [r3, #4]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d84a:	b29e      	uxth	r6, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d852:	4618      	mov	r0, r3
 800d854:	f7ff ff88 	bl	800d768 <makeFreeRtosPriority>
 800d858:	4602      	mov	r2, r0
 800d85a:	f107 030c 	add.w	r3, r7, #12
 800d85e:	9301      	str	r3, [sp, #4]
 800d860:	9200      	str	r2, [sp, #0]
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	4632      	mov	r2, r6
 800d866:	4629      	mov	r1, r5
 800d868:	4620      	mov	r0, r4
 800d86a:	f001 fd9a 	bl	800f3a2 <xTaskCreate>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b01      	cmp	r3, #1
 800d872:	d001      	beq.n	800d878 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d874:	2300      	movs	r3, #0
 800d876:	e000      	b.n	800d87a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d878:	68fb      	ldr	r3, [r7, #12]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3714      	adds	r7, #20
 800d87e:	46bd      	mov	sp, r7
 800d880:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d882 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b084      	sub	sp, #16
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d001      	beq.n	800d898 <osDelay+0x16>
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	e000      	b.n	800d89a <osDelay+0x18>
 800d898:	2301      	movs	r3, #1
 800d89a:	4618      	mov	r0, r3
 800d89c:	f001 fece 	bl	800f63c <vTaskDelay>
  
  return osOK;
 800d8a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b082      	sub	sp, #8
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d007      	beq.n	800d8ca <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	4619      	mov	r1, r3
 800d8c0:	2001      	movs	r0, #1
 800d8c2:	f000 feb2 	bl	800e62a <xQueueCreateMutexStatic>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	e003      	b.n	800d8d2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800d8ca:	2001      	movs	r0, #1
 800d8cc:	f000 fe95 	bl	800e5fa <xQueueCreateMutex>
 800d8d0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
	...

0800d8dc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b084      	sub	sp, #16
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d101      	bne.n	800d8f4 <osMutexWait+0x18>
    return osErrorParameter;
 800d8f0:	2380      	movs	r3, #128	; 0x80
 800d8f2:	e03a      	b.n	800d96a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8fe:	d103      	bne.n	800d908 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800d900:	f04f 33ff 	mov.w	r3, #4294967295
 800d904:	60fb      	str	r3, [r7, #12]
 800d906:	e009      	b.n	800d91c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d006      	beq.n	800d91c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d101      	bne.n	800d91c <osMutexWait+0x40>
      ticks = 1;
 800d918:	2301      	movs	r3, #1
 800d91a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d91c:	f7ff ff3c 	bl	800d798 <inHandlerMode>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d017      	beq.n	800d956 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d926:	f107 0308 	add.w	r3, r7, #8
 800d92a:	461a      	mov	r2, r3
 800d92c:	2100      	movs	r1, #0
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f001 faa8 	bl	800ee84 <xQueueReceiveFromISR>
 800d934:	4603      	mov	r3, r0
 800d936:	2b01      	cmp	r3, #1
 800d938:	d001      	beq.n	800d93e <osMutexWait+0x62>
      return osErrorOS;
 800d93a:	23ff      	movs	r3, #255	; 0xff
 800d93c:	e015      	b.n	800d96a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d011      	beq.n	800d968 <osMutexWait+0x8c>
 800d944:	4b0b      	ldr	r3, [pc, #44]	; (800d974 <osMutexWait+0x98>)
 800d946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d94a:	601a      	str	r2, [r3, #0]
 800d94c:	f3bf 8f4f 	dsb	sy
 800d950:	f3bf 8f6f 	isb	sy
 800d954:	e008      	b.n	800d968 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800d956:	68f9      	ldr	r1, [r7, #12]
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f001 f987 	bl	800ec6c <xQueueSemaphoreTake>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b01      	cmp	r3, #1
 800d962:	d001      	beq.n	800d968 <osMutexWait+0x8c>
    return osErrorOS;
 800d964:	23ff      	movs	r3, #255	; 0xff
 800d966:	e000      	b.n	800d96a <osMutexWait+0x8e>
  }
  
  return osOK;
 800d968:	2300      	movs	r3, #0
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	e000ed04 	.word	0xe000ed04

0800d978 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d980:	2300      	movs	r3, #0
 800d982:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d984:	2300      	movs	r3, #0
 800d986:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800d988:	f7ff ff06 	bl	800d798 <inHandlerMode>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d016      	beq.n	800d9c0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d992:	f107 0308 	add.w	r3, r7, #8
 800d996:	4619      	mov	r1, r3
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 fffa 	bl	800e992 <xQueueGiveFromISR>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d001      	beq.n	800d9a8 <osMutexRelease+0x30>
      return osErrorOS;
 800d9a4:	23ff      	movs	r3, #255	; 0xff
 800d9a6:	e017      	b.n	800d9d8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d013      	beq.n	800d9d6 <osMutexRelease+0x5e>
 800d9ae:	4b0c      	ldr	r3, [pc, #48]	; (800d9e0 <osMutexRelease+0x68>)
 800d9b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9b4:	601a      	str	r2, [r3, #0]
 800d9b6:	f3bf 8f4f 	dsb	sy
 800d9ba:	f3bf 8f6f 	isb	sy
 800d9be:	e00a      	b.n	800d9d6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	2100      	movs	r1, #0
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fe4a 	bl	800e660 <xQueueGenericSend>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d001      	beq.n	800d9d6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800d9d2:	23ff      	movs	r3, #255	; 0xff
 800d9d4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3710      	adds	r7, #16
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	e000ed04 	.word	0xe000ed04

0800d9e4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b086      	sub	sp, #24
 800d9e8:	af02      	add	r7, sp, #8
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00f      	beq.n	800da16 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d10a      	bne.n	800da12 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	2203      	movs	r2, #3
 800da02:	9200      	str	r2, [sp, #0]
 800da04:	2200      	movs	r2, #0
 800da06:	2100      	movs	r1, #0
 800da08:	2001      	movs	r0, #1
 800da0a:	f000 fd0b 	bl	800e424 <xQueueGenericCreateStatic>
 800da0e:	4603      	mov	r3, r0
 800da10:	e016      	b.n	800da40 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800da12:	2300      	movs	r3, #0
 800da14:	e014      	b.n	800da40 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d110      	bne.n	800da3e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800da1c:	2203      	movs	r2, #3
 800da1e:	2100      	movs	r1, #0
 800da20:	2001      	movs	r0, #1
 800da22:	f000 fd77 	bl	800e514 <xQueueGenericCreate>
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d005      	beq.n	800da3a <osSemaphoreCreate+0x56>
 800da2e:	2300      	movs	r3, #0
 800da30:	2200      	movs	r2, #0
 800da32:	2100      	movs	r1, #0
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f000 fe13 	bl	800e660 <xQueueGenericSend>
      return sema;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	e000      	b.n	800da40 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800da3e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800da40:	4618      	mov	r0, r3
 800da42:	3710      	adds	r7, #16
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800da52:	2300      	movs	r3, #0
 800da54:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d101      	bne.n	800da60 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800da5c:	2380      	movs	r3, #128	; 0x80
 800da5e:	e03a      	b.n	800dad6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800da60:	2300      	movs	r3, #0
 800da62:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da6a:	d103      	bne.n	800da74 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800da6c:	f04f 33ff 	mov.w	r3, #4294967295
 800da70:	60fb      	str	r3, [r7, #12]
 800da72:	e009      	b.n	800da88 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d006      	beq.n	800da88 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d101      	bne.n	800da88 <osSemaphoreWait+0x40>
      ticks = 1;
 800da84:	2301      	movs	r3, #1
 800da86:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800da88:	f7ff fe86 	bl	800d798 <inHandlerMode>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d017      	beq.n	800dac2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800da92:	f107 0308 	add.w	r3, r7, #8
 800da96:	461a      	mov	r2, r3
 800da98:	2100      	movs	r1, #0
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f001 f9f2 	bl	800ee84 <xQueueReceiveFromISR>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d001      	beq.n	800daaa <osSemaphoreWait+0x62>
      return osErrorOS;
 800daa6:	23ff      	movs	r3, #255	; 0xff
 800daa8:	e015      	b.n	800dad6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d011      	beq.n	800dad4 <osSemaphoreWait+0x8c>
 800dab0:	4b0b      	ldr	r3, [pc, #44]	; (800dae0 <osSemaphoreWait+0x98>)
 800dab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dab6:	601a      	str	r2, [r3, #0]
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	e008      	b.n	800dad4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800dac2:	68f9      	ldr	r1, [r7, #12]
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f001 f8d1 	bl	800ec6c <xQueueSemaphoreTake>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d001      	beq.n	800dad4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800dad0:	23ff      	movs	r3, #255	; 0xff
 800dad2:	e000      	b.n	800dad6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800dad4:	2300      	movs	r3, #0
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3710      	adds	r7, #16
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	e000ed04 	.word	0xe000ed04

0800dae4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b084      	sub	sp, #16
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800daec:	2300      	movs	r3, #0
 800daee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800daf0:	2300      	movs	r3, #0
 800daf2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800daf4:	f7ff fe50 	bl	800d798 <inHandlerMode>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d016      	beq.n	800db2c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dafe:	f107 0308 	add.w	r3, r7, #8
 800db02:	4619      	mov	r1, r3
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 ff44 	bl	800e992 <xQueueGiveFromISR>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d001      	beq.n	800db14 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800db10:	23ff      	movs	r3, #255	; 0xff
 800db12:	e017      	b.n	800db44 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d013      	beq.n	800db42 <osSemaphoreRelease+0x5e>
 800db1a:	4b0c      	ldr	r3, [pc, #48]	; (800db4c <osSemaphoreRelease+0x68>)
 800db1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	f3bf 8f4f 	dsb	sy
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	e00a      	b.n	800db42 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800db2c:	2300      	movs	r3, #0
 800db2e:	2200      	movs	r2, #0
 800db30:	2100      	movs	r1, #0
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 fd94 	bl	800e660 <xQueueGenericSend>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d001      	beq.n	800db42 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800db3e:	23ff      	movs	r3, #255	; 0xff
 800db40:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800db42:	68fb      	ldr	r3, [r7, #12]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3710      	adds	r7, #16
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	e000ed04 	.word	0xe000ed04

0800db50 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800db58:	f7ff fe1e 	bl	800d798 <inHandlerMode>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d001      	beq.n	800db66 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800db62:	2382      	movs	r3, #130	; 0x82
 800db64:	e003      	b.n	800db6e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f001 fa48 	bl	800effc <vQueueDelete>

  return osOK; 
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3708      	adds	r7, #8
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b086      	sub	sp, #24
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	3303      	adds	r3, #3
 800db84:	f023 0303 	bic.w	r3, r3, #3
 800db88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800db8a:	2014      	movs	r0, #20
 800db8c:	f002 fe2c 	bl	80107e8 <pvPortMalloc>
 800db90:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d046      	beq.n	800dc26 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f002 fe19 	bl	80107e8 <pvPortMalloc>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d02b      	beq.n	800dc1c <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	68fa      	ldr	r2, [r7, #12]
 800dbca:	fb02 f303 	mul.w	r3, r2, r3
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f002 fe0a 	bl	80107e8 <pvPortMalloc>
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d011      	beq.n	800dc06 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	613b      	str	r3, [r7, #16]
 800dbe6:	e008      	b.n	800dbfa <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	685a      	ldr	r2, [r3, #4]
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	4413      	add	r3, r2
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	613b      	str	r3, [r7, #16]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	693a      	ldr	r2, [r7, #16]
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d3f1      	bcc.n	800dbe8 <osPoolCreate+0x72>
 800dc04:	e00f      	b.n	800dc26 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f002 feb8 	bl	8010980 <vPortFree>
        vPortFree(thePool);
 800dc10:	6978      	ldr	r0, [r7, #20]
 800dc12:	f002 feb5 	bl	8010980 <vPortFree>
        thePool = NULL;
 800dc16:	2300      	movs	r3, #0
 800dc18:	617b      	str	r3, [r7, #20]
 800dc1a:	e004      	b.n	800dc26 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800dc1c:	6978      	ldr	r0, [r7, #20]
 800dc1e:	f002 feaf 	bl	8010980 <vPortFree>
      thePool = NULL;
 800dc22:	2300      	movs	r3, #0
 800dc24:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800dc26:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b08a      	sub	sp, #40	; 0x28
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800dc40:	f7ff fdaa 	bl	800d798 <inHandlerMode>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d00e      	beq.n	800dc68 <osPoolAlloc+0x38>
	__asm volatile
 800dc4a:	f3ef 8211 	mrs	r2, BASEPRI
 800dc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc52:	f383 8811 	msr	BASEPRI, r3
 800dc56:	f3bf 8f6f 	isb	sy
 800dc5a:	f3bf 8f4f 	dsb	sy
 800dc5e:	617a      	str	r2, [r7, #20]
 800dc60:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800dc62:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800dc64:	627b      	str	r3, [r7, #36]	; 0x24
 800dc66:	e001      	b.n	800dc6c <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800dc68:	f002 fc9c 	bl	80105a4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	61fb      	str	r3, [r7, #28]
 800dc70:	e029      	b.n	800dcc6 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	691a      	ldr	r2, [r3, #16]
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	4413      	add	r3, r2
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	6892      	ldr	r2, [r2, #8]
 800dc7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc82:	fb02 f201 	mul.w	r2, r2, r1
 800dc86:	1a9b      	subs	r3, r3, r2
 800dc88:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	685a      	ldr	r2, [r3, #4]
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	4413      	add	r3, r2
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d113      	bne.n	800dcc0 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	685a      	ldr	r2, [r3, #4]
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	4413      	add	r3, r2
 800dca0:	2201      	movs	r2, #1
 800dca2:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4619      	mov	r1, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	69ba      	ldr	r2, [r7, #24]
 800dcb0:	fb02 f303 	mul.w	r3, r2, r3
 800dcb4:	440b      	add	r3, r1
 800dcb6:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	69ba      	ldr	r2, [r7, #24]
 800dcbc:	611a      	str	r2, [r3, #16]
      break;
 800dcbe:	e007      	b.n	800dcd0 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	61fb      	str	r3, [r7, #28]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	69fa      	ldr	r2, [r7, #28]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d3d0      	bcc.n	800dc72 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800dcd0:	f7ff fd62 	bl	800d798 <inHandlerMode>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d005      	beq.n	800dce6 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800dcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcdc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f383 8811 	msr	BASEPRI, r3
}
 800dce4:	e001      	b.n	800dcea <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800dce6:	f002 fc8d 	bl	8010604 <vPortExitCritical>
  }
  
  return p;
 800dcea:	6a3b      	ldr	r3, [r7, #32]
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3728      	adds	r7, #40	; 0x28
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b085      	sub	sp, #20
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d101      	bne.n	800dd08 <osPoolFree+0x14>
    return osErrorParameter;
 800dd04:	2380      	movs	r3, #128	; 0x80
 800dd06:	e030      	b.n	800dd6a <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d101      	bne.n	800dd12 <osPoolFree+0x1e>
    return osErrorParameter;
 800dd0e:	2380      	movs	r3, #128	; 0x80
 800dd10:	e02b      	b.n	800dd6a <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	683a      	ldr	r2, [r7, #0]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d201      	bcs.n	800dd20 <osPoolFree+0x2c>
    return osErrorParameter;
 800dd1c:	2380      	movs	r3, #128	; 0x80
 800dd1e:	e024      	b.n	800dd6a <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	6812      	ldr	r2, [r2, #0]
 800dd26:	1a9b      	subs	r3, r3, r2
 800dd28:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	68da      	ldr	r2, [r3, #12]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd34:	fb02 f201 	mul.w	r2, r2, r1
 800dd38:	1a9b      	subs	r3, r3, r2
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d001      	beq.n	800dd42 <osPoolFree+0x4e>
    return osErrorParameter;
 800dd3e:	2380      	movs	r3, #128	; 0x80
 800dd40:	e013      	b.n	800dd6a <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	68fa      	ldr	r2, [r7, #12]
 800dd48:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd4c:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	68fa      	ldr	r2, [r7, #12]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d301      	bcc.n	800dd5c <osPoolFree+0x68>
    return osErrorParameter;
 800dd58:	2380      	movs	r3, #128	; 0x80
 800dd5a:	e006      	b.n	800dd6a <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	685a      	ldr	r2, [r3, #4]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	4413      	add	r3, r2
 800dd64:	2200      	movs	r2, #0
 800dd66:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800dd68:	2300      	movs	r3, #0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3714      	adds	r7, #20
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr

0800dd76 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800dd76:	b590      	push	{r4, r7, lr}
 800dd78:	b085      	sub	sp, #20
 800dd7a:	af02      	add	r7, sp, #8
 800dd7c:	6078      	str	r0, [r7, #4]
 800dd7e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d011      	beq.n	800ddac <osMessageCreate+0x36>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d00d      	beq.n	800ddac <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6818      	ldr	r0, [r3, #0]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6859      	ldr	r1, [r3, #4]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	689a      	ldr	r2, [r3, #8]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	68db      	ldr	r3, [r3, #12]
 800dda0:	2400      	movs	r4, #0
 800dda2:	9400      	str	r4, [sp, #0]
 800dda4:	f000 fb3e 	bl	800e424 <xQueueGenericCreateStatic>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	e008      	b.n	800ddbe <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6818      	ldr	r0, [r3, #0]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	f000 fbac 	bl	800e514 <xQueueGenericCreate>
 800ddbc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	370c      	adds	r7, #12
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd90      	pop	{r4, r7, pc}
	...

0800ddc8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b086      	sub	sp, #24
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d101      	bne.n	800dde6 <osMessagePut+0x1e>
    ticks = 1;
 800dde2:	2301      	movs	r3, #1
 800dde4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800dde6:	f7ff fcd7 	bl	800d798 <inHandlerMode>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d018      	beq.n	800de22 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ddf0:	f107 0210 	add.w	r2, r7, #16
 800ddf4:	f107 0108 	add.w	r1, r7, #8
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	68f8      	ldr	r0, [r7, #12]
 800ddfc:	f000 fd2e 	bl	800e85c <xQueueGenericSendFromISR>
 800de00:	4603      	mov	r3, r0
 800de02:	2b01      	cmp	r3, #1
 800de04:	d001      	beq.n	800de0a <osMessagePut+0x42>
      return osErrorOS;
 800de06:	23ff      	movs	r3, #255	; 0xff
 800de08:	e018      	b.n	800de3c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d014      	beq.n	800de3a <osMessagePut+0x72>
 800de10:	4b0c      	ldr	r3, [pc, #48]	; (800de44 <osMessagePut+0x7c>)
 800de12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de16:	601a      	str	r2, [r3, #0]
 800de18:	f3bf 8f4f 	dsb	sy
 800de1c:	f3bf 8f6f 	isb	sy
 800de20:	e00b      	b.n	800de3a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800de22:	f107 0108 	add.w	r1, r7, #8
 800de26:	2300      	movs	r3, #0
 800de28:	697a      	ldr	r2, [r7, #20]
 800de2a:	68f8      	ldr	r0, [r7, #12]
 800de2c:	f000 fc18 	bl	800e660 <xQueueGenericSend>
 800de30:	4603      	mov	r3, r0
 800de32:	2b01      	cmp	r3, #1
 800de34:	d001      	beq.n	800de3a <osMessagePut+0x72>
      return osErrorOS;
 800de36:	23ff      	movs	r3, #255	; 0xff
 800de38:	e000      	b.n	800de3c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3718      	adds	r7, #24
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	e000ed04 	.word	0xe000ed04

0800de48 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800de48:	b590      	push	{r4, r7, lr}
 800de4a:	b08b      	sub	sp, #44	; 0x2c
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800de58:	2300      	movs	r3, #0
 800de5a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d10a      	bne.n	800de78 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800de62:	2380      	movs	r3, #128	; 0x80
 800de64:	617b      	str	r3, [r7, #20]
    return event;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	461c      	mov	r4, r3
 800de6a:	f107 0314 	add.w	r3, r7, #20
 800de6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800de72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800de76:	e054      	b.n	800df22 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800de78:	2300      	movs	r3, #0
 800de7a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800de7c:	2300      	movs	r3, #0
 800de7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de86:	d103      	bne.n	800de90 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800de88:	f04f 33ff 	mov.w	r3, #4294967295
 800de8c:	627b      	str	r3, [r7, #36]	; 0x24
 800de8e:	e009      	b.n	800dea4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d006      	beq.n	800dea4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800de9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d101      	bne.n	800dea4 <osMessageGet+0x5c>
      ticks = 1;
 800dea0:	2301      	movs	r3, #1
 800dea2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800dea4:	f7ff fc78 	bl	800d798 <inHandlerMode>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d01c      	beq.n	800dee8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800deae:	f107 0220 	add.w	r2, r7, #32
 800deb2:	f107 0314 	add.w	r3, r7, #20
 800deb6:	3304      	adds	r3, #4
 800deb8:	4619      	mov	r1, r3
 800deba:	68b8      	ldr	r0, [r7, #8]
 800debc:	f000 ffe2 	bl	800ee84 <xQueueReceiveFromISR>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d102      	bne.n	800decc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800dec6:	2310      	movs	r3, #16
 800dec8:	617b      	str	r3, [r7, #20]
 800deca:	e001      	b.n	800ded0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800decc:	2300      	movs	r3, #0
 800dece:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ded0:	6a3b      	ldr	r3, [r7, #32]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d01d      	beq.n	800df12 <osMessageGet+0xca>
 800ded6:	4b15      	ldr	r3, [pc, #84]	; (800df2c <osMessageGet+0xe4>)
 800ded8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dedc:	601a      	str	r2, [r3, #0]
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	e014      	b.n	800df12 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800dee8:	f107 0314 	add.w	r3, r7, #20
 800deec:	3304      	adds	r3, #4
 800deee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800def0:	4619      	mov	r1, r3
 800def2:	68b8      	ldr	r0, [r7, #8]
 800def4:	f000 fdda 	bl	800eaac <xQueueReceive>
 800def8:	4603      	mov	r3, r0
 800defa:	2b01      	cmp	r3, #1
 800defc:	d102      	bne.n	800df04 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800defe:	2310      	movs	r3, #16
 800df00:	617b      	str	r3, [r7, #20]
 800df02:	e006      	b.n	800df12 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800df04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df06:	2b00      	cmp	r3, #0
 800df08:	d101      	bne.n	800df0e <osMessageGet+0xc6>
 800df0a:	2300      	movs	r3, #0
 800df0c:	e000      	b.n	800df10 <osMessageGet+0xc8>
 800df0e:	2340      	movs	r3, #64	; 0x40
 800df10:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	461c      	mov	r4, r3
 800df16:	f107 0314 	add.w	r3, r7, #20
 800df1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800df22:	68f8      	ldr	r0, [r7, #12]
 800df24:	372c      	adds	r7, #44	; 0x2c
 800df26:	46bd      	mov	sp, r7
 800df28:	bd90      	pop	{r4, r7, pc}
 800df2a:	bf00      	nop
 800df2c:	e000ed04 	.word	0xe000ed04

0800df30 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800df30:	b590      	push	{r4, r7, lr}
 800df32:	b087      	sub	sp, #28
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	60fb      	str	r3, [r7, #12]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	613b      	str	r3, [r7, #16]
 800df46:	2300      	movs	r3, #0
 800df48:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	689c      	ldr	r4, [r3, #8]
 800df4e:	200c      	movs	r0, #12
 800df50:	f002 fc4a 	bl	80107e8 <pvPortMalloc>
 800df54:	4603      	mov	r3, r0
 800df56:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d101      	bne.n	800df66 <osMailCreate+0x36>
    return NULL;
 800df62:	2300      	movs	r3, #0
 800df64:	e038      	b.n	800dfd8 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6818      	ldr	r0, [r3, #0]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	681c      	ldr	r4, [r3, #0]
 800df7a:	2200      	movs	r2, #0
 800df7c:	2104      	movs	r1, #4
 800df7e:	f000 fac9 	bl	800e514 <xQueueGenericCreate>
 800df82:	4603      	mov	r3, r0
 800df84:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d107      	bne.n	800dfa2 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4618      	mov	r0, r3
 800df9a:	f002 fcf1 	bl	8010980 <vPortFree>
    return NULL;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	e01a      	b.n	800dfd8 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	689b      	ldr	r3, [r3, #8]
 800dfa6:	681c      	ldr	r4, [r3, #0]
 800dfa8:	f107 030c 	add.w	r3, r7, #12
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7ff fde2 	bl	800db76 <osPoolCreate>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	689b      	ldr	r3, [r3, #8]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d107      	bne.n	800dfd2 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	689b      	ldr	r3, [r3, #8]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f002 fcd9 	bl	8010980 <vPortFree>
    return NULL;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	e002      	b.n	800dfd8 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	371c      	adds	r7, #28
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd90      	pop	{r4, r7, pc}

0800dfe0 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d101      	bne.n	800dff4 <osMailAlloc+0x14>
    return NULL;
 800dff0:	2300      	movs	r3, #0
 800dff2:	e006      	b.n	800e002 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	689b      	ldr	r3, [r3, #8]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7ff fe19 	bl	800dc30 <osPoolAlloc>
 800dffe:	60f8      	str	r0, [r7, #12]
  
  return p;
 800e000:	68fb      	ldr	r3, [r7, #12]
}
 800e002:	4618      	mov	r0, r3
 800e004:	3710      	adds	r7, #16
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
	...

0800e00c <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d101      	bne.n	800e020 <osMailPut+0x14>
    return osErrorParameter;
 800e01c:	2380      	movs	r3, #128	; 0x80
 800e01e:	e02c      	b.n	800e07a <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800e020:	2300      	movs	r3, #0
 800e022:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800e024:	f7ff fbb8 	bl	800d798 <inHandlerMode>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d018      	beq.n	800e060 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6858      	ldr	r0, [r3, #4]
 800e032:	f107 020c 	add.w	r2, r7, #12
 800e036:	4639      	mov	r1, r7
 800e038:	2300      	movs	r3, #0
 800e03a:	f000 fc0f 	bl	800e85c <xQueueGenericSendFromISR>
 800e03e:	4603      	mov	r3, r0
 800e040:	2b01      	cmp	r3, #1
 800e042:	d001      	beq.n	800e048 <osMailPut+0x3c>
      return osErrorOS;
 800e044:	23ff      	movs	r3, #255	; 0xff
 800e046:	e018      	b.n	800e07a <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d014      	beq.n	800e078 <osMailPut+0x6c>
 800e04e:	4b0d      	ldr	r3, [pc, #52]	; (800e084 <osMailPut+0x78>)
 800e050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e054:	601a      	str	r2, [r3, #0]
 800e056:	f3bf 8f4f 	dsb	sy
 800e05a:	f3bf 8f6f 	isb	sy
 800e05e:	e00b      	b.n	800e078 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6858      	ldr	r0, [r3, #4]
 800e064:	4639      	mov	r1, r7
 800e066:	2300      	movs	r3, #0
 800e068:	2200      	movs	r2, #0
 800e06a:	f000 faf9 	bl	800e660 <xQueueGenericSend>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b01      	cmp	r3, #1
 800e072:	d001      	beq.n	800e078 <osMailPut+0x6c>
      return osErrorOS;
 800e074:	23ff      	movs	r3, #255	; 0xff
 800e076:	e000      	b.n	800e07a <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800e078:	2300      	movs	r3, #0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	e000ed04 	.word	0xe000ed04

0800e088 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800e088:	b590      	push	{r4, r7, lr}
 800e08a:	b08b      	sub	sp, #44	; 0x2c
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d10a      	bne.n	800e0b4 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800e09e:	2380      	movs	r3, #128	; 0x80
 800e0a0:	617b      	str	r3, [r7, #20]
    return event;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	461c      	mov	r4, r3
 800e0a6:	f107 0314 	add.w	r3, r7, #20
 800e0aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e0ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e0b2:	e056      	b.n	800e162 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0c2:	d103      	bne.n	800e0cc <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800e0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e0c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e0ca:	e009      	b.n	800e0e0 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d006      	beq.n	800e0e0 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d101      	bne.n	800e0e0 <osMailGet+0x58>
      ticks = 1;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e0e0:	f7ff fb5a 	bl	800d798 <inHandlerMode>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d01d      	beq.n	800e126 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	6858      	ldr	r0, [r3, #4]
 800e0ee:	f107 0220 	add.w	r2, r7, #32
 800e0f2:	f107 0314 	add.w	r3, r7, #20
 800e0f6:	3304      	adds	r3, #4
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	f000 fec3 	bl	800ee84 <xQueueReceiveFromISR>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b01      	cmp	r3, #1
 800e102:	d102      	bne.n	800e10a <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800e104:	2320      	movs	r3, #32
 800e106:	617b      	str	r3, [r7, #20]
 800e108:	e001      	b.n	800e10e <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800e10a:	2300      	movs	r3, #0
 800e10c:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e10e:	6a3b      	ldr	r3, [r7, #32]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d01e      	beq.n	800e152 <osMailGet+0xca>
 800e114:	4b15      	ldr	r3, [pc, #84]	; (800e16c <osMailGet+0xe4>)
 800e116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e11a:	601a      	str	r2, [r3, #0]
 800e11c:	f3bf 8f4f 	dsb	sy
 800e120:	f3bf 8f6f 	isb	sy
 800e124:	e015      	b.n	800e152 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	6858      	ldr	r0, [r3, #4]
 800e12a:	f107 0314 	add.w	r3, r7, #20
 800e12e:	3304      	adds	r3, #4
 800e130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e132:	4619      	mov	r1, r3
 800e134:	f000 fcba 	bl	800eaac <xQueueReceive>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d102      	bne.n	800e144 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800e13e:	2320      	movs	r3, #32
 800e140:	617b      	str	r3, [r7, #20]
 800e142:	e006      	b.n	800e152 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e146:	2b00      	cmp	r3, #0
 800e148:	d101      	bne.n	800e14e <osMailGet+0xc6>
 800e14a:	2300      	movs	r3, #0
 800e14c:	e000      	b.n	800e150 <osMailGet+0xc8>
 800e14e:	2340      	movs	r3, #64	; 0x40
 800e150:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	461c      	mov	r4, r3
 800e156:	f107 0314 	add.w	r3, r7, #20
 800e15a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e15e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e162:	68f8      	ldr	r0, [r7, #12]
 800e164:	372c      	adds	r7, #44	; 0x2c
 800e166:	46bd      	mov	sp, r7
 800e168:	bd90      	pop	{r4, r7, pc}
 800e16a:	bf00      	nop
 800e16c:	e000ed04 	.word	0xe000ed04

0800e170 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d101      	bne.n	800e184 <osMailFree+0x14>
    return osErrorParameter;
 800e180:	2380      	movs	r3, #128	; 0x80
 800e182:	e006      	b.n	800e192 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	6839      	ldr	r1, [r7, #0]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7ff fdb2 	bl	800dcf4 <osPoolFree>
 800e190:	4603      	mov	r3, r0
}
 800e192:	4618      	mov	r0, r3
 800e194:	3708      	adds	r7, #8
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b082      	sub	sp, #8
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800e1a2:	f7ff faf9 	bl	800d798 <inHandlerMode>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d004      	beq.n	800e1b6 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 ff07 	bl	800efc0 <uxQueueMessagesWaitingFromISR>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	e003      	b.n	800e1be <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 fee4 	bl	800ef84 <uxQueueMessagesWaiting>
 800e1bc:	4603      	mov	r3, r0
  }
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3708      	adds	r7, #8
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800e1c6:	b580      	push	{r7, lr}
 800e1c8:	b082      	sub	sp, #8
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800e1ce:	f7ff fae3 	bl	800d798 <inHandlerMode>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <osMessageDelete+0x16>
    return osErrorISR;
 800e1d8:	2382      	movs	r3, #130	; 0x82
 800e1da:	e003      	b.n	800e1e4 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 ff0d 	bl	800effc <vQueueDelete>

  return osOK; 
 800e1e2:	2300      	movs	r3, #0
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f103 0208 	add.w	r2, r3, #8
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f04f 32ff 	mov.w	r2, #4294967295
 800e204:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f103 0208 	add.w	r2, r3, #8
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f103 0208 	add.w	r2, r3, #8
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2200      	movs	r2, #0
 800e21e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e220:	bf00      	nop
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e22c:	b480      	push	{r7}
 800e22e:	b083      	sub	sp, #12
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2200      	movs	r2, #0
 800e238:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e23a:	bf00      	nop
 800e23c:	370c      	adds	r7, #12
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr

0800e246 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e246:	b480      	push	{r7}
 800e248:	b085      	sub	sp, #20
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
 800e24e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	689a      	ldr	r2, [r3, #8]
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	683a      	ldr	r2, [r7, #0]
 800e26a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	683a      	ldr	r2, [r7, #0]
 800e270:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	1c5a      	adds	r2, r3, #1
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	601a      	str	r2, [r3, #0]
}
 800e282:	bf00      	nop
 800e284:	3714      	adds	r7, #20
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr

0800e28e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e28e:	b480      	push	{r7}
 800e290:	b085      	sub	sp, #20
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
 800e296:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2a4:	d103      	bne.n	800e2ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	691b      	ldr	r3, [r3, #16]
 800e2aa:	60fb      	str	r3, [r7, #12]
 800e2ac:	e00c      	b.n	800e2c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	3308      	adds	r3, #8
 800e2b2:	60fb      	str	r3, [r7, #12]
 800e2b4:	e002      	b.n	800e2bc <vListInsert+0x2e>
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	60fb      	str	r3, [r7, #12]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	68ba      	ldr	r2, [r7, #8]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d2f6      	bcs.n	800e2b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	685a      	ldr	r2, [r3, #4]
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	683a      	ldr	r2, [r7, #0]
 800e2d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	683a      	ldr	r2, [r7, #0]
 800e2e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	1c5a      	adds	r2, r3, #1
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	601a      	str	r2, [r3, #0]
}
 800e2f4:	bf00      	nop
 800e2f6:	3714      	adds	r7, #20
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e300:	b480      	push	{r7}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	691b      	ldr	r3, [r3, #16]
 800e30c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	6892      	ldr	r2, [r2, #8]
 800e316:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	689b      	ldr	r3, [r3, #8]
 800e31c:	687a      	ldr	r2, [r7, #4]
 800e31e:	6852      	ldr	r2, [r2, #4]
 800e320:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d103      	bne.n	800e334 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	689a      	ldr	r2, [r3, #8]
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	1e5a      	subs	r2, r3, #1
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3714      	adds	r7, #20
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr

0800e354 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d10a      	bne.n	800e37e <xQueueGenericReset+0x2a>
	__asm volatile
 800e368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36c:	f383 8811 	msr	BASEPRI, r3
 800e370:	f3bf 8f6f 	isb	sy
 800e374:	f3bf 8f4f 	dsb	sy
 800e378:	60bb      	str	r3, [r7, #8]
}
 800e37a:	bf00      	nop
 800e37c:	e7fe      	b.n	800e37c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e37e:	f002 f911 	bl	80105a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e38a:	68f9      	ldr	r1, [r7, #12]
 800e38c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e38e:	fb01 f303 	mul.w	r3, r1, r3
 800e392:	441a      	add	r2, r3
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2200      	movs	r2, #0
 800e39c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3ae:	3b01      	subs	r3, #1
 800e3b0:	68f9      	ldr	r1, [r7, #12]
 800e3b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e3b4:	fb01 f303 	mul.w	r3, r1, r3
 800e3b8:	441a      	add	r2, r3
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	22ff      	movs	r2, #255	; 0xff
 800e3c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	22ff      	movs	r2, #255	; 0xff
 800e3ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d114      	bne.n	800e3fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	691b      	ldr	r3, [r3, #16]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d01a      	beq.n	800e412 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	3310      	adds	r3, #16
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f001 fbd3 	bl	800fb8c <xTaskRemoveFromEventList>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d012      	beq.n	800e412 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e3ec:	4b0c      	ldr	r3, [pc, #48]	; (800e420 <xQueueGenericReset+0xcc>)
 800e3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3f2:	601a      	str	r2, [r3, #0]
 800e3f4:	f3bf 8f4f 	dsb	sy
 800e3f8:	f3bf 8f6f 	isb	sy
 800e3fc:	e009      	b.n	800e412 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	3310      	adds	r3, #16
 800e402:	4618      	mov	r0, r3
 800e404:	f7ff fef2 	bl	800e1ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	3324      	adds	r3, #36	; 0x24
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7ff feed 	bl	800e1ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e412:	f002 f8f7 	bl	8010604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e416:	2301      	movs	r3, #1
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3710      	adds	r7, #16
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	e000ed04 	.word	0xe000ed04

0800e424 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e424:	b580      	push	{r7, lr}
 800e426:	b08e      	sub	sp, #56	; 0x38
 800e428:	af02      	add	r7, sp, #8
 800e42a:	60f8      	str	r0, [r7, #12]
 800e42c:	60b9      	str	r1, [r7, #8]
 800e42e:	607a      	str	r2, [r7, #4]
 800e430:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10a      	bne.n	800e44e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43c:	f383 8811 	msr	BASEPRI, r3
 800e440:	f3bf 8f6f 	isb	sy
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e44a:	bf00      	nop
 800e44c:	e7fe      	b.n	800e44c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d10a      	bne.n	800e46a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e458:	f383 8811 	msr	BASEPRI, r3
 800e45c:	f3bf 8f6f 	isb	sy
 800e460:	f3bf 8f4f 	dsb	sy
 800e464:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e466:	bf00      	nop
 800e468:	e7fe      	b.n	800e468 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d002      	beq.n	800e476 <xQueueGenericCreateStatic+0x52>
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d001      	beq.n	800e47a <xQueueGenericCreateStatic+0x56>
 800e476:	2301      	movs	r3, #1
 800e478:	e000      	b.n	800e47c <xQueueGenericCreateStatic+0x58>
 800e47a:	2300      	movs	r3, #0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d10a      	bne.n	800e496 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e484:	f383 8811 	msr	BASEPRI, r3
 800e488:	f3bf 8f6f 	isb	sy
 800e48c:	f3bf 8f4f 	dsb	sy
 800e490:	623b      	str	r3, [r7, #32]
}
 800e492:	bf00      	nop
 800e494:	e7fe      	b.n	800e494 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d102      	bne.n	800e4a2 <xQueueGenericCreateStatic+0x7e>
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d101      	bne.n	800e4a6 <xQueueGenericCreateStatic+0x82>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e000      	b.n	800e4a8 <xQueueGenericCreateStatic+0x84>
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d10a      	bne.n	800e4c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b0:	f383 8811 	msr	BASEPRI, r3
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	61fb      	str	r3, [r7, #28]
}
 800e4be:	bf00      	nop
 800e4c0:	e7fe      	b.n	800e4c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e4c2:	2348      	movs	r3, #72	; 0x48
 800e4c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	2b48      	cmp	r3, #72	; 0x48
 800e4ca:	d00a      	beq.n	800e4e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d0:	f383 8811 	msr	BASEPRI, r3
 800e4d4:	f3bf 8f6f 	isb	sy
 800e4d8:	f3bf 8f4f 	dsb	sy
 800e4dc:	61bb      	str	r3, [r7, #24]
}
 800e4de:	bf00      	nop
 800e4e0:	e7fe      	b.n	800e4e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e4e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d00d      	beq.n	800e50a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e4f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fc:	9300      	str	r3, [sp, #0]
 800e4fe:	4613      	mov	r3, r2
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	68b9      	ldr	r1, [r7, #8]
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	f000 f83f 	bl	800e588 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3730      	adds	r7, #48	; 0x30
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e514:	b580      	push	{r7, lr}
 800e516:	b08a      	sub	sp, #40	; 0x28
 800e518:	af02      	add	r7, sp, #8
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	4613      	mov	r3, r2
 800e520:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d10a      	bne.n	800e53e <xQueueGenericCreate+0x2a>
	__asm volatile
 800e528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52c:	f383 8811 	msr	BASEPRI, r3
 800e530:	f3bf 8f6f 	isb	sy
 800e534:	f3bf 8f4f 	dsb	sy
 800e538:	613b      	str	r3, [r7, #16]
}
 800e53a:	bf00      	nop
 800e53c:	e7fe      	b.n	800e53c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	68ba      	ldr	r2, [r7, #8]
 800e542:	fb02 f303 	mul.w	r3, r2, r3
 800e546:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	3348      	adds	r3, #72	; 0x48
 800e54c:	4618      	mov	r0, r3
 800e54e:	f002 f94b 	bl	80107e8 <pvPortMalloc>
 800e552:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d011      	beq.n	800e57e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	3348      	adds	r3, #72	; 0x48
 800e562:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	2200      	movs	r2, #0
 800e568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e56c:	79fa      	ldrb	r2, [r7, #7]
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	9300      	str	r3, [sp, #0]
 800e572:	4613      	mov	r3, r2
 800e574:	697a      	ldr	r2, [r7, #20]
 800e576:	68b9      	ldr	r1, [r7, #8]
 800e578:	68f8      	ldr	r0, [r7, #12]
 800e57a:	f000 f805 	bl	800e588 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e57e:	69bb      	ldr	r3, [r7, #24]
	}
 800e580:	4618      	mov	r0, r3
 800e582:	3720      	adds	r7, #32
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]
 800e594:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d103      	bne.n	800e5a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	69ba      	ldr	r2, [r7, #24]
 800e5a0:	601a      	str	r2, [r3, #0]
 800e5a2:	e002      	b.n	800e5aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e5a4:	69bb      	ldr	r3, [r7, #24]
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	68ba      	ldr	r2, [r7, #8]
 800e5b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e5b6:	2101      	movs	r1, #1
 800e5b8:	69b8      	ldr	r0, [r7, #24]
 800e5ba:	f7ff fecb 	bl	800e354 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e5be:	bf00      	nop
 800e5c0:	3710      	adds	r7, #16
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b082      	sub	sp, #8
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d00e      	beq.n	800e5f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 f837 	bl	800e660 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e5f2:	bf00      	nop
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b086      	sub	sp, #24
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	4603      	mov	r3, r0
 800e602:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e604:	2301      	movs	r3, #1
 800e606:	617b      	str	r3, [r7, #20]
 800e608:	2300      	movs	r3, #0
 800e60a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e60c:	79fb      	ldrb	r3, [r7, #7]
 800e60e:	461a      	mov	r2, r3
 800e610:	6939      	ldr	r1, [r7, #16]
 800e612:	6978      	ldr	r0, [r7, #20]
 800e614:	f7ff ff7e 	bl	800e514 <xQueueGenericCreate>
 800e618:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e61a:	68f8      	ldr	r0, [r7, #12]
 800e61c:	f7ff ffd3 	bl	800e5c6 <prvInitialiseMutex>

		return xNewQueue;
 800e620:	68fb      	ldr	r3, [r7, #12]
	}
 800e622:	4618      	mov	r0, r3
 800e624:	3718      	adds	r7, #24
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}

0800e62a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e62a:	b580      	push	{r7, lr}
 800e62c:	b088      	sub	sp, #32
 800e62e:	af02      	add	r7, sp, #8
 800e630:	4603      	mov	r3, r0
 800e632:	6039      	str	r1, [r7, #0]
 800e634:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e636:	2301      	movs	r3, #1
 800e638:	617b      	str	r3, [r7, #20]
 800e63a:	2300      	movs	r3, #0
 800e63c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e63e:	79fb      	ldrb	r3, [r7, #7]
 800e640:	9300      	str	r3, [sp, #0]
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	2200      	movs	r2, #0
 800e646:	6939      	ldr	r1, [r7, #16]
 800e648:	6978      	ldr	r0, [r7, #20]
 800e64a:	f7ff feeb 	bl	800e424 <xQueueGenericCreateStatic>
 800e64e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f7ff ffb8 	bl	800e5c6 <prvInitialiseMutex>

		return xNewQueue;
 800e656:	68fb      	ldr	r3, [r7, #12]
	}
 800e658:	4618      	mov	r0, r3
 800e65a:	3718      	adds	r7, #24
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b08e      	sub	sp, #56	; 0x38
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	607a      	str	r2, [r7, #4]
 800e66c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e66e:	2300      	movs	r3, #0
 800e670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d10a      	bne.n	800e692 <xQueueGenericSend+0x32>
	__asm volatile
 800e67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e680:	f383 8811 	msr	BASEPRI, r3
 800e684:	f3bf 8f6f 	isb	sy
 800e688:	f3bf 8f4f 	dsb	sy
 800e68c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e68e:	bf00      	nop
 800e690:	e7fe      	b.n	800e690 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d103      	bne.n	800e6a0 <xQueueGenericSend+0x40>
 800e698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d101      	bne.n	800e6a4 <xQueueGenericSend+0x44>
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	e000      	b.n	800e6a6 <xQueueGenericSend+0x46>
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d10a      	bne.n	800e6c0 <xQueueGenericSend+0x60>
	__asm volatile
 800e6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ae:	f383 8811 	msr	BASEPRI, r3
 800e6b2:	f3bf 8f6f 	isb	sy
 800e6b6:	f3bf 8f4f 	dsb	sy
 800e6ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e6bc:	bf00      	nop
 800e6be:	e7fe      	b.n	800e6be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	2b02      	cmp	r3, #2
 800e6c4:	d103      	bne.n	800e6ce <xQueueGenericSend+0x6e>
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ca:	2b01      	cmp	r3, #1
 800e6cc:	d101      	bne.n	800e6d2 <xQueueGenericSend+0x72>
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	e000      	b.n	800e6d4 <xQueueGenericSend+0x74>
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d10a      	bne.n	800e6ee <xQueueGenericSend+0x8e>
	__asm volatile
 800e6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6dc:	f383 8811 	msr	BASEPRI, r3
 800e6e0:	f3bf 8f6f 	isb	sy
 800e6e4:	f3bf 8f4f 	dsb	sy
 800e6e8:	623b      	str	r3, [r7, #32]
}
 800e6ea:	bf00      	nop
 800e6ec:	e7fe      	b.n	800e6ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e6ee:	f001 fc0d 	bl	800ff0c <xTaskGetSchedulerState>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d102      	bne.n	800e6fe <xQueueGenericSend+0x9e>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d101      	bne.n	800e702 <xQueueGenericSend+0xa2>
 800e6fe:	2301      	movs	r3, #1
 800e700:	e000      	b.n	800e704 <xQueueGenericSend+0xa4>
 800e702:	2300      	movs	r3, #0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d10a      	bne.n	800e71e <xQueueGenericSend+0xbe>
	__asm volatile
 800e708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e70c:	f383 8811 	msr	BASEPRI, r3
 800e710:	f3bf 8f6f 	isb	sy
 800e714:	f3bf 8f4f 	dsb	sy
 800e718:	61fb      	str	r3, [r7, #28]
}
 800e71a:	bf00      	nop
 800e71c:	e7fe      	b.n	800e71c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e71e:	f001 ff41 	bl	80105a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d302      	bcc.n	800e734 <xQueueGenericSend+0xd4>
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	2b02      	cmp	r3, #2
 800e732:	d129      	bne.n	800e788 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e734:	683a      	ldr	r2, [r7, #0]
 800e736:	68b9      	ldr	r1, [r7, #8]
 800e738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e73a:	f000 fc9a 	bl	800f072 <prvCopyDataToQueue>
 800e73e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e744:	2b00      	cmp	r3, #0
 800e746:	d010      	beq.n	800e76a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74a:	3324      	adds	r3, #36	; 0x24
 800e74c:	4618      	mov	r0, r3
 800e74e:	f001 fa1d 	bl	800fb8c <xTaskRemoveFromEventList>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d013      	beq.n	800e780 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e758:	4b3f      	ldr	r3, [pc, #252]	; (800e858 <xQueueGenericSend+0x1f8>)
 800e75a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e75e:	601a      	str	r2, [r3, #0]
 800e760:	f3bf 8f4f 	dsb	sy
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	e00a      	b.n	800e780 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d007      	beq.n	800e780 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e770:	4b39      	ldr	r3, [pc, #228]	; (800e858 <xQueueGenericSend+0x1f8>)
 800e772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e776:	601a      	str	r2, [r3, #0]
 800e778:	f3bf 8f4f 	dsb	sy
 800e77c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e780:	f001 ff40 	bl	8010604 <vPortExitCritical>
				return pdPASS;
 800e784:	2301      	movs	r3, #1
 800e786:	e063      	b.n	800e850 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d103      	bne.n	800e796 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e78e:	f001 ff39 	bl	8010604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e792:	2300      	movs	r3, #0
 800e794:	e05c      	b.n	800e850 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d106      	bne.n	800e7aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e79c:	f107 0314 	add.w	r3, r7, #20
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f001 fa55 	bl	800fc50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e7aa:	f001 ff2b 	bl	8010604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e7ae:	f000 ffe3 	bl	800f778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e7b2:	f001 fef7 	bl	80105a4 <vPortEnterCritical>
 800e7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e7bc:	b25b      	sxtb	r3, r3
 800e7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7c2:	d103      	bne.n	800e7cc <xQueueGenericSend+0x16c>
 800e7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e7d2:	b25b      	sxtb	r3, r3
 800e7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7d8:	d103      	bne.n	800e7e2 <xQueueGenericSend+0x182>
 800e7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7e2:	f001 ff0f 	bl	8010604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e7e6:	1d3a      	adds	r2, r7, #4
 800e7e8:	f107 0314 	add.w	r3, r7, #20
 800e7ec:	4611      	mov	r1, r2
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f001 fa44 	bl	800fc7c <xTaskCheckForTimeOut>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d124      	bne.n	800e844 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e7fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7fc:	f000 fd31 	bl	800f262 <prvIsQueueFull>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d018      	beq.n	800e838 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e808:	3310      	adds	r3, #16
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	4611      	mov	r1, r2
 800e80e:	4618      	mov	r0, r3
 800e810:	f001 f998 	bl	800fb44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e816:	f000 fcbc 	bl	800f192 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e81a:	f000 ffbb 	bl	800f794 <xTaskResumeAll>
 800e81e:	4603      	mov	r3, r0
 800e820:	2b00      	cmp	r3, #0
 800e822:	f47f af7c 	bne.w	800e71e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e826:	4b0c      	ldr	r3, [pc, #48]	; (800e858 <xQueueGenericSend+0x1f8>)
 800e828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e82c:	601a      	str	r2, [r3, #0]
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	f3bf 8f6f 	isb	sy
 800e836:	e772      	b.n	800e71e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e83a:	f000 fcaa 	bl	800f192 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e83e:	f000 ffa9 	bl	800f794 <xTaskResumeAll>
 800e842:	e76c      	b.n	800e71e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e846:	f000 fca4 	bl	800f192 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e84a:	f000 ffa3 	bl	800f794 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e84e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e850:	4618      	mov	r0, r3
 800e852:	3738      	adds	r7, #56	; 0x38
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	e000ed04 	.word	0xe000ed04

0800e85c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b090      	sub	sp, #64	; 0x40
 800e860:	af00      	add	r7, sp, #0
 800e862:	60f8      	str	r0, [r7, #12]
 800e864:	60b9      	str	r1, [r7, #8]
 800e866:	607a      	str	r2, [r7, #4]
 800e868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e870:	2b00      	cmp	r3, #0
 800e872:	d10a      	bne.n	800e88a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e878:	f383 8811 	msr	BASEPRI, r3
 800e87c:	f3bf 8f6f 	isb	sy
 800e880:	f3bf 8f4f 	dsb	sy
 800e884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e886:	bf00      	nop
 800e888:	e7fe      	b.n	800e888 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d103      	bne.n	800e898 <xQueueGenericSendFromISR+0x3c>
 800e890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e894:	2b00      	cmp	r3, #0
 800e896:	d101      	bne.n	800e89c <xQueueGenericSendFromISR+0x40>
 800e898:	2301      	movs	r3, #1
 800e89a:	e000      	b.n	800e89e <xQueueGenericSendFromISR+0x42>
 800e89c:	2300      	movs	r3, #0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d10a      	bne.n	800e8b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a6:	f383 8811 	msr	BASEPRI, r3
 800e8aa:	f3bf 8f6f 	isb	sy
 800e8ae:	f3bf 8f4f 	dsb	sy
 800e8b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e8b4:	bf00      	nop
 800e8b6:	e7fe      	b.n	800e8b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	2b02      	cmp	r3, #2
 800e8bc:	d103      	bne.n	800e8c6 <xQueueGenericSendFromISR+0x6a>
 800e8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d101      	bne.n	800e8ca <xQueueGenericSendFromISR+0x6e>
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	e000      	b.n	800e8cc <xQueueGenericSendFromISR+0x70>
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d10a      	bne.n	800e8e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d4:	f383 8811 	msr	BASEPRI, r3
 800e8d8:	f3bf 8f6f 	isb	sy
 800e8dc:	f3bf 8f4f 	dsb	sy
 800e8e0:	623b      	str	r3, [r7, #32]
}
 800e8e2:	bf00      	nop
 800e8e4:	e7fe      	b.n	800e8e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8e6:	f001 ff3f 	bl	8010768 <vPortValidateInterruptPriority>
	__asm volatile
 800e8ea:	f3ef 8211 	mrs	r2, BASEPRI
 800e8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f2:	f383 8811 	msr	BASEPRI, r3
 800e8f6:	f3bf 8f6f 	isb	sy
 800e8fa:	f3bf 8f4f 	dsb	sy
 800e8fe:	61fa      	str	r2, [r7, #28]
 800e900:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e902:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e904:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e90e:	429a      	cmp	r2, r3
 800e910:	d302      	bcc.n	800e918 <xQueueGenericSendFromISR+0xbc>
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	2b02      	cmp	r3, #2
 800e916:	d12f      	bne.n	800e978 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e91a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e926:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e928:	683a      	ldr	r2, [r7, #0]
 800e92a:	68b9      	ldr	r1, [r7, #8]
 800e92c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e92e:	f000 fba0 	bl	800f072 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e932:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e93a:	d112      	bne.n	800e962 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e940:	2b00      	cmp	r3, #0
 800e942:	d016      	beq.n	800e972 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e946:	3324      	adds	r3, #36	; 0x24
 800e948:	4618      	mov	r0, r3
 800e94a:	f001 f91f 	bl	800fb8c <xTaskRemoveFromEventList>
 800e94e:	4603      	mov	r3, r0
 800e950:	2b00      	cmp	r3, #0
 800e952:	d00e      	beq.n	800e972 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00b      	beq.n	800e972 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2201      	movs	r2, #1
 800e95e:	601a      	str	r2, [r3, #0]
 800e960:	e007      	b.n	800e972 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e962:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e966:	3301      	adds	r3, #1
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	b25a      	sxtb	r2, r3
 800e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e972:	2301      	movs	r3, #1
 800e974:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e976:	e001      	b.n	800e97c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e978:	2300      	movs	r3, #0
 800e97a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e97e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	f383 8811 	msr	BASEPRI, r3
}
 800e986:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3740      	adds	r7, #64	; 0x40
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}

0800e992 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e992:	b580      	push	{r7, lr}
 800e994:	b08e      	sub	sp, #56	; 0x38
 800e996:	af00      	add	r7, sp, #0
 800e998:	6078      	str	r0, [r7, #4]
 800e99a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d10a      	bne.n	800e9bc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800e9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9aa:	f383 8811 	msr	BASEPRI, r3
 800e9ae:	f3bf 8f6f 	isb	sy
 800e9b2:	f3bf 8f4f 	dsb	sy
 800e9b6:	623b      	str	r3, [r7, #32]
}
 800e9b8:	bf00      	nop
 800e9ba:	e7fe      	b.n	800e9ba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d00a      	beq.n	800e9da <xQueueGiveFromISR+0x48>
	__asm volatile
 800e9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c8:	f383 8811 	msr	BASEPRI, r3
 800e9cc:	f3bf 8f6f 	isb	sy
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	61fb      	str	r3, [r7, #28]
}
 800e9d6:	bf00      	nop
 800e9d8:	e7fe      	b.n	800e9d8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d103      	bne.n	800e9ea <xQueueGiveFromISR+0x58>
 800e9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d101      	bne.n	800e9ee <xQueueGiveFromISR+0x5c>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e000      	b.n	800e9f0 <xQueueGiveFromISR+0x5e>
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d10a      	bne.n	800ea0a <xQueueGiveFromISR+0x78>
	__asm volatile
 800e9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f8:	f383 8811 	msr	BASEPRI, r3
 800e9fc:	f3bf 8f6f 	isb	sy
 800ea00:	f3bf 8f4f 	dsb	sy
 800ea04:	61bb      	str	r3, [r7, #24]
}
 800ea06:	bf00      	nop
 800ea08:	e7fe      	b.n	800ea08 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea0a:	f001 fead 	bl	8010768 <vPortValidateInterruptPriority>
	__asm volatile
 800ea0e:	f3ef 8211 	mrs	r2, BASEPRI
 800ea12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea16:	f383 8811 	msr	BASEPRI, r3
 800ea1a:	f3bf 8f6f 	isb	sy
 800ea1e:	f3bf 8f4f 	dsb	sy
 800ea22:	617a      	str	r2, [r7, #20]
 800ea24:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ea26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ea30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d22b      	bcs.n	800ea92 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ea3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ea44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea46:	1c5a      	adds	r2, r3, #1
 800ea48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ea4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ea50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea54:	d112      	bne.n	800ea7c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d016      	beq.n	800ea8c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea60:	3324      	adds	r3, #36	; 0x24
 800ea62:	4618      	mov	r0, r3
 800ea64:	f001 f892 	bl	800fb8c <xTaskRemoveFromEventList>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00e      	beq.n	800ea8c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00b      	beq.n	800ea8c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	2201      	movs	r2, #1
 800ea78:	601a      	str	r2, [r3, #0]
 800ea7a:	e007      	b.n	800ea8c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ea7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea80:	3301      	adds	r3, #1
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	b25a      	sxtb	r2, r3
 800ea86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ea90:	e001      	b.n	800ea96 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ea92:	2300      	movs	r3, #0
 800ea94:	637b      	str	r3, [r7, #52]	; 0x34
 800ea96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea98:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f383 8811 	msr	BASEPRI, r3
}
 800eaa0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eaa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3738      	adds	r7, #56	; 0x38
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b08c      	sub	sp, #48	; 0x30
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eab8:	2300      	movs	r3, #0
 800eaba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d10a      	bne.n	800eadc <xQueueReceive+0x30>
	__asm volatile
 800eac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaca:	f383 8811 	msr	BASEPRI, r3
 800eace:	f3bf 8f6f 	isb	sy
 800ead2:	f3bf 8f4f 	dsb	sy
 800ead6:	623b      	str	r3, [r7, #32]
}
 800ead8:	bf00      	nop
 800eada:	e7fe      	b.n	800eada <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d103      	bne.n	800eaea <xQueueReceive+0x3e>
 800eae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d101      	bne.n	800eaee <xQueueReceive+0x42>
 800eaea:	2301      	movs	r3, #1
 800eaec:	e000      	b.n	800eaf0 <xQueueReceive+0x44>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d10a      	bne.n	800eb0a <xQueueReceive+0x5e>
	__asm volatile
 800eaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf8:	f383 8811 	msr	BASEPRI, r3
 800eafc:	f3bf 8f6f 	isb	sy
 800eb00:	f3bf 8f4f 	dsb	sy
 800eb04:	61fb      	str	r3, [r7, #28]
}
 800eb06:	bf00      	nop
 800eb08:	e7fe      	b.n	800eb08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb0a:	f001 f9ff 	bl	800ff0c <xTaskGetSchedulerState>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d102      	bne.n	800eb1a <xQueueReceive+0x6e>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d101      	bne.n	800eb1e <xQueueReceive+0x72>
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	e000      	b.n	800eb20 <xQueueReceive+0x74>
 800eb1e:	2300      	movs	r3, #0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d10a      	bne.n	800eb3a <xQueueReceive+0x8e>
	__asm volatile
 800eb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb28:	f383 8811 	msr	BASEPRI, r3
 800eb2c:	f3bf 8f6f 	isb	sy
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	61bb      	str	r3, [r7, #24]
}
 800eb36:	bf00      	nop
 800eb38:	e7fe      	b.n	800eb38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb3a:	f001 fd33 	bl	80105a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d01f      	beq.n	800eb8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb4a:	68b9      	ldr	r1, [r7, #8]
 800eb4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb4e:	f000 fafa 	bl	800f146 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb54:	1e5a      	subs	r2, r3, #1
 800eb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5c:	691b      	ldr	r3, [r3, #16]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d00f      	beq.n	800eb82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb64:	3310      	adds	r3, #16
 800eb66:	4618      	mov	r0, r3
 800eb68:	f001 f810 	bl	800fb8c <xTaskRemoveFromEventList>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d007      	beq.n	800eb82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb72:	4b3d      	ldr	r3, [pc, #244]	; (800ec68 <xQueueReceive+0x1bc>)
 800eb74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb78:	601a      	str	r2, [r3, #0]
 800eb7a:	f3bf 8f4f 	dsb	sy
 800eb7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb82:	f001 fd3f 	bl	8010604 <vPortExitCritical>
				return pdPASS;
 800eb86:	2301      	movs	r3, #1
 800eb88:	e069      	b.n	800ec5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d103      	bne.n	800eb98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eb90:	f001 fd38 	bl	8010604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb94:	2300      	movs	r3, #0
 800eb96:	e062      	b.n	800ec5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d106      	bne.n	800ebac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb9e:	f107 0310 	add.w	r3, r7, #16
 800eba2:	4618      	mov	r0, r3
 800eba4:	f001 f854 	bl	800fc50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ebac:	f001 fd2a 	bl	8010604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ebb0:	f000 fde2 	bl	800f778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebb4:	f001 fcf6 	bl	80105a4 <vPortEnterCritical>
 800ebb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebbe:	b25b      	sxtb	r3, r3
 800ebc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebc4:	d103      	bne.n	800ebce <xQueueReceive+0x122>
 800ebc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebd4:	b25b      	sxtb	r3, r3
 800ebd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebda:	d103      	bne.n	800ebe4 <xQueueReceive+0x138>
 800ebdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebe4:	f001 fd0e 	bl	8010604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebe8:	1d3a      	adds	r2, r7, #4
 800ebea:	f107 0310 	add.w	r3, r7, #16
 800ebee:	4611      	mov	r1, r2
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f001 f843 	bl	800fc7c <xTaskCheckForTimeOut>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d123      	bne.n	800ec44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebfe:	f000 fb1a 	bl	800f236 <prvIsQueueEmpty>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d017      	beq.n	800ec38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ec08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0a:	3324      	adds	r3, #36	; 0x24
 800ec0c:	687a      	ldr	r2, [r7, #4]
 800ec0e:	4611      	mov	r1, r2
 800ec10:	4618      	mov	r0, r3
 800ec12:	f000 ff97 	bl	800fb44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ec16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec18:	f000 fabb 	bl	800f192 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec1c:	f000 fdba 	bl	800f794 <xTaskResumeAll>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d189      	bne.n	800eb3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ec26:	4b10      	ldr	r3, [pc, #64]	; (800ec68 <xQueueReceive+0x1bc>)
 800ec28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec2c:	601a      	str	r2, [r3, #0]
 800ec2e:	f3bf 8f4f 	dsb	sy
 800ec32:	f3bf 8f6f 	isb	sy
 800ec36:	e780      	b.n	800eb3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ec38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec3a:	f000 faaa 	bl	800f192 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec3e:	f000 fda9 	bl	800f794 <xTaskResumeAll>
 800ec42:	e77a      	b.n	800eb3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ec44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec46:	f000 faa4 	bl	800f192 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec4a:	f000 fda3 	bl	800f794 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec50:	f000 faf1 	bl	800f236 <prvIsQueueEmpty>
 800ec54:	4603      	mov	r3, r0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f43f af6f 	beq.w	800eb3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3730      	adds	r7, #48	; 0x30
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	e000ed04 	.word	0xe000ed04

0800ec6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b08e      	sub	sp, #56	; 0x38
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ec76:	2300      	movs	r3, #0
 800ec78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ec82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d10a      	bne.n	800ec9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ec88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8c:	f383 8811 	msr	BASEPRI, r3
 800ec90:	f3bf 8f6f 	isb	sy
 800ec94:	f3bf 8f4f 	dsb	sy
 800ec98:	623b      	str	r3, [r7, #32]
}
 800ec9a:	bf00      	nop
 800ec9c:	e7fe      	b.n	800ec9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ec9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d00a      	beq.n	800ecbc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800eca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecaa:	f383 8811 	msr	BASEPRI, r3
 800ecae:	f3bf 8f6f 	isb	sy
 800ecb2:	f3bf 8f4f 	dsb	sy
 800ecb6:	61fb      	str	r3, [r7, #28]
}
 800ecb8:	bf00      	nop
 800ecba:	e7fe      	b.n	800ecba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ecbc:	f001 f926 	bl	800ff0c <xTaskGetSchedulerState>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d102      	bne.n	800eccc <xQueueSemaphoreTake+0x60>
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d101      	bne.n	800ecd0 <xQueueSemaphoreTake+0x64>
 800eccc:	2301      	movs	r3, #1
 800ecce:	e000      	b.n	800ecd2 <xQueueSemaphoreTake+0x66>
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d10a      	bne.n	800ecec <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ecd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecda:	f383 8811 	msr	BASEPRI, r3
 800ecde:	f3bf 8f6f 	isb	sy
 800ece2:	f3bf 8f4f 	dsb	sy
 800ece6:	61bb      	str	r3, [r7, #24]
}
 800ece8:	bf00      	nop
 800ecea:	e7fe      	b.n	800ecea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ecec:	f001 fc5a 	bl	80105a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ecf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ecf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d024      	beq.n	800ed46 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ecfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecfe:	1e5a      	subs	r2, r3, #1
 800ed00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed02:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d104      	bne.n	800ed16 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ed0c:	f001 faa6 	bl	801025c <pvTaskIncrementMutexHeldCount>
 800ed10:	4602      	mov	r2, r0
 800ed12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed14:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed18:	691b      	ldr	r3, [r3, #16]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d00f      	beq.n	800ed3e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed20:	3310      	adds	r3, #16
 800ed22:	4618      	mov	r0, r3
 800ed24:	f000 ff32 	bl	800fb8c <xTaskRemoveFromEventList>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d007      	beq.n	800ed3e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ed2e:	4b54      	ldr	r3, [pc, #336]	; (800ee80 <xQueueSemaphoreTake+0x214>)
 800ed30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed34:	601a      	str	r2, [r3, #0]
 800ed36:	f3bf 8f4f 	dsb	sy
 800ed3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ed3e:	f001 fc61 	bl	8010604 <vPortExitCritical>
				return pdPASS;
 800ed42:	2301      	movs	r3, #1
 800ed44:	e097      	b.n	800ee76 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d111      	bne.n	800ed70 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d00a      	beq.n	800ed68 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ed52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed56:	f383 8811 	msr	BASEPRI, r3
 800ed5a:	f3bf 8f6f 	isb	sy
 800ed5e:	f3bf 8f4f 	dsb	sy
 800ed62:	617b      	str	r3, [r7, #20]
}
 800ed64:	bf00      	nop
 800ed66:	e7fe      	b.n	800ed66 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ed68:	f001 fc4c 	bl	8010604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	e082      	b.n	800ee76 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d106      	bne.n	800ed84 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed76:	f107 030c 	add.w	r3, r7, #12
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f000 ff68 	bl	800fc50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed80:	2301      	movs	r3, #1
 800ed82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed84:	f001 fc3e 	bl	8010604 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed88:	f000 fcf6 	bl	800f778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed8c:	f001 fc0a 	bl	80105a4 <vPortEnterCritical>
 800ed90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed96:	b25b      	sxtb	r3, r3
 800ed98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed9c:	d103      	bne.n	800eda6 <xQueueSemaphoreTake+0x13a>
 800ed9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda0:	2200      	movs	r2, #0
 800eda2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800edac:	b25b      	sxtb	r3, r3
 800edae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb2:	d103      	bne.n	800edbc <xQueueSemaphoreTake+0x150>
 800edb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb6:	2200      	movs	r2, #0
 800edb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edbc:	f001 fc22 	bl	8010604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800edc0:	463a      	mov	r2, r7
 800edc2:	f107 030c 	add.w	r3, r7, #12
 800edc6:	4611      	mov	r1, r2
 800edc8:	4618      	mov	r0, r3
 800edca:	f000 ff57 	bl	800fc7c <xTaskCheckForTimeOut>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d132      	bne.n	800ee3a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800edd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edd6:	f000 fa2e 	bl	800f236 <prvIsQueueEmpty>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d026      	beq.n	800ee2e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ede0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d109      	bne.n	800edfc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ede8:	f001 fbdc 	bl	80105a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800edec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f001 f8a9 	bl	800ff48 <xTaskPriorityInherit>
 800edf6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800edf8:	f001 fc04 	bl	8010604 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800edfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfe:	3324      	adds	r3, #36	; 0x24
 800ee00:	683a      	ldr	r2, [r7, #0]
 800ee02:	4611      	mov	r1, r2
 800ee04:	4618      	mov	r0, r3
 800ee06:	f000 fe9d 	bl	800fb44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ee0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee0c:	f000 f9c1 	bl	800f192 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ee10:	f000 fcc0 	bl	800f794 <xTaskResumeAll>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	f47f af68 	bne.w	800ecec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ee1c:	4b18      	ldr	r3, [pc, #96]	; (800ee80 <xQueueSemaphoreTake+0x214>)
 800ee1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee22:	601a      	str	r2, [r3, #0]
 800ee24:	f3bf 8f4f 	dsb	sy
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	e75e      	b.n	800ecec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ee2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee30:	f000 f9af 	bl	800f192 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee34:	f000 fcae 	bl	800f794 <xTaskResumeAll>
 800ee38:	e758      	b.n	800ecec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ee3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee3c:	f000 f9a9 	bl	800f192 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee40:	f000 fca8 	bl	800f794 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee46:	f000 f9f6 	bl	800f236 <prvIsQueueEmpty>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	f43f af4d 	beq.w	800ecec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ee52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00d      	beq.n	800ee74 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ee58:	f001 fba4 	bl	80105a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ee5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee5e:	f000 f8f0 	bl	800f042 <prvGetDisinheritPriorityAfterTimeout>
 800ee62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ee64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee66:	689b      	ldr	r3, [r3, #8]
 800ee68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f001 f968 	bl	8010140 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ee70:	f001 fbc8 	bl	8010604 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ee74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3738      	adds	r7, #56	; 0x38
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	e000ed04 	.word	0xe000ed04

0800ee84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b08e      	sub	sp, #56	; 0x38
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ee94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d10a      	bne.n	800eeb0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ee9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee9e:	f383 8811 	msr	BASEPRI, r3
 800eea2:	f3bf 8f6f 	isb	sy
 800eea6:	f3bf 8f4f 	dsb	sy
 800eeaa:	623b      	str	r3, [r7, #32]
}
 800eeac:	bf00      	nop
 800eeae:	e7fe      	b.n	800eeae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d103      	bne.n	800eebe <xQueueReceiveFromISR+0x3a>
 800eeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d101      	bne.n	800eec2 <xQueueReceiveFromISR+0x3e>
 800eebe:	2301      	movs	r3, #1
 800eec0:	e000      	b.n	800eec4 <xQueueReceiveFromISR+0x40>
 800eec2:	2300      	movs	r3, #0
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d10a      	bne.n	800eede <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800eec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eecc:	f383 8811 	msr	BASEPRI, r3
 800eed0:	f3bf 8f6f 	isb	sy
 800eed4:	f3bf 8f4f 	dsb	sy
 800eed8:	61fb      	str	r3, [r7, #28]
}
 800eeda:	bf00      	nop
 800eedc:	e7fe      	b.n	800eedc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eede:	f001 fc43 	bl	8010768 <vPortValidateInterruptPriority>
	__asm volatile
 800eee2:	f3ef 8211 	mrs	r2, BASEPRI
 800eee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeea:	f383 8811 	msr	BASEPRI, r3
 800eeee:	f3bf 8f6f 	isb	sy
 800eef2:	f3bf 8f4f 	dsb	sy
 800eef6:	61ba      	str	r2, [r7, #24]
 800eef8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eefa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eefc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d02f      	beq.n	800ef6a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ef0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef14:	68b9      	ldr	r1, [r7, #8]
 800ef16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef18:	f000 f915 	bl	800f146 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1e:	1e5a      	subs	r2, r3, #1
 800ef20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ef24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef2c:	d112      	bne.n	800ef54 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef30:	691b      	ldr	r3, [r3, #16]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d016      	beq.n	800ef64 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef38:	3310      	adds	r3, #16
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f000 fe26 	bl	800fb8c <xTaskRemoveFromEventList>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d00e      	beq.n	800ef64 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d00b      	beq.n	800ef64 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	601a      	str	r2, [r3, #0]
 800ef52:	e007      	b.n	800ef64 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ef54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef58:	3301      	adds	r3, #1
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	b25a      	sxtb	r2, r3
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ef64:	2301      	movs	r3, #1
 800ef66:	637b      	str	r3, [r7, #52]	; 0x34
 800ef68:	e001      	b.n	800ef6e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	637b      	str	r3, [r7, #52]	; 0x34
 800ef6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef70:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	f383 8811 	msr	BASEPRI, r3
}
 800ef78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3738      	adds	r7, #56	; 0x38
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d10a      	bne.n	800efa8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800ef92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef96:	f383 8811 	msr	BASEPRI, r3
 800ef9a:	f3bf 8f6f 	isb	sy
 800ef9e:	f3bf 8f4f 	dsb	sy
 800efa2:	60bb      	str	r3, [r7, #8]
}
 800efa4:	bf00      	nop
 800efa6:	e7fe      	b.n	800efa6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800efa8:	f001 fafc 	bl	80105a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efb0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800efb2:	f001 fb27 	bl	8010604 <vPortExitCritical>

	return uxReturn;
 800efb6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800efb8:	4618      	mov	r0, r3
 800efba:	3710      	adds	r7, #16
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800efc0:	b480      	push	{r7}
 800efc2:	b087      	sub	sp, #28
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d10a      	bne.n	800efe8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800efd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd6:	f383 8811 	msr	BASEPRI, r3
 800efda:	f3bf 8f6f 	isb	sy
 800efde:	f3bf 8f4f 	dsb	sy
 800efe2:	60fb      	str	r3, [r7, #12]
}
 800efe4:	bf00      	nop
 800efe6:	e7fe      	b.n	800efe6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efec:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800efee:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800eff0:	4618      	mov	r0, r3
 800eff2:	371c      	adds	r7, #28
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr

0800effc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d10a      	bne.n	800f024 <vQueueDelete+0x28>
	__asm volatile
 800f00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f012:	f383 8811 	msr	BASEPRI, r3
 800f016:	f3bf 8f6f 	isb	sy
 800f01a:	f3bf 8f4f 	dsb	sy
 800f01e:	60bb      	str	r3, [r7, #8]
}
 800f020:	bf00      	nop
 800f022:	e7fe      	b.n	800f022 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f000 f935 	bl	800f294 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f030:	2b00      	cmp	r3, #0
 800f032:	d102      	bne.n	800f03a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f034:	68f8      	ldr	r0, [r7, #12]
 800f036:	f001 fca3 	bl	8010980 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f03a:	bf00      	nop
 800f03c:	3710      	adds	r7, #16
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}

0800f042 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f042:	b480      	push	{r7}
 800f044:	b085      	sub	sp, #20
 800f046:	af00      	add	r7, sp, #0
 800f048:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d006      	beq.n	800f060 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f1c3 0307 	rsb	r3, r3, #7
 800f05c:	60fb      	str	r3, [r7, #12]
 800f05e:	e001      	b.n	800f064 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f060:	2300      	movs	r3, #0
 800f062:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f064:	68fb      	ldr	r3, [r7, #12]
	}
 800f066:	4618      	mov	r0, r3
 800f068:	3714      	adds	r7, #20
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr

0800f072 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f072:	b580      	push	{r7, lr}
 800f074:	b086      	sub	sp, #24
 800f076:	af00      	add	r7, sp, #0
 800f078:	60f8      	str	r0, [r7, #12]
 800f07a:	60b9      	str	r1, [r7, #8]
 800f07c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f07e:	2300      	movs	r3, #0
 800f080:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f086:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d10d      	bne.n	800f0ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d14d      	bne.n	800f134 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	689b      	ldr	r3, [r3, #8]
 800f09c:	4618      	mov	r0, r3
 800f09e:	f000 ffc9 	bl	8010034 <xTaskPriorityDisinherit>
 800f0a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	609a      	str	r2, [r3, #8]
 800f0aa:	e043      	b.n	800f134 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d119      	bne.n	800f0e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	6858      	ldr	r0, [r3, #4]
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	68b9      	ldr	r1, [r7, #8]
 800f0be:	f00e ffc9 	bl	801e054 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	685a      	ldr	r2, [r3, #4]
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0ca:	441a      	add	r2, r3
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	685a      	ldr	r2, [r3, #4]
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	689b      	ldr	r3, [r3, #8]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d32b      	bcc.n	800f134 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681a      	ldr	r2, [r3, #0]
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	605a      	str	r2, [r3, #4]
 800f0e4:	e026      	b.n	800f134 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	68d8      	ldr	r0, [r3, #12]
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	68b9      	ldr	r1, [r7, #8]
 800f0f2:	f00e ffaf 	bl	801e054 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	68da      	ldr	r2, [r3, #12]
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0fe:	425b      	negs	r3, r3
 800f100:	441a      	add	r2, r3
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	68da      	ldr	r2, [r3, #12]
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	429a      	cmp	r2, r3
 800f110:	d207      	bcs.n	800f122 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	689a      	ldr	r2, [r3, #8]
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f11a:	425b      	negs	r3, r3
 800f11c:	441a      	add	r2, r3
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2b02      	cmp	r3, #2
 800f126:	d105      	bne.n	800f134 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d002      	beq.n	800f134 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	3b01      	subs	r3, #1
 800f132:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	1c5a      	adds	r2, r3, #1
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f13c:	697b      	ldr	r3, [r7, #20]
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3718      	adds	r7, #24
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}

0800f146 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f146:	b580      	push	{r7, lr}
 800f148:	b082      	sub	sp, #8
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
 800f14e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f154:	2b00      	cmp	r3, #0
 800f156:	d018      	beq.n	800f18a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	68da      	ldr	r2, [r3, #12]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f160:	441a      	add	r2, r3
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	68da      	ldr	r2, [r3, #12]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	689b      	ldr	r3, [r3, #8]
 800f16e:	429a      	cmp	r2, r3
 800f170:	d303      	bcc.n	800f17a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	68d9      	ldr	r1, [r3, #12]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f182:	461a      	mov	r2, r3
 800f184:	6838      	ldr	r0, [r7, #0]
 800f186:	f00e ff65 	bl	801e054 <memcpy>
	}
}
 800f18a:	bf00      	nop
 800f18c:	3708      	adds	r7, #8
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}

0800f192 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f192:	b580      	push	{r7, lr}
 800f194:	b084      	sub	sp, #16
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f19a:	f001 fa03 	bl	80105a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f1a6:	e011      	b.n	800f1cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d012      	beq.n	800f1d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	3324      	adds	r3, #36	; 0x24
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f000 fce9 	bl	800fb8c <xTaskRemoveFromEventList>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d001      	beq.n	800f1c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f1c0:	f000 fdbe 	bl	800fd40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f1c4:	7bfb      	ldrb	r3, [r7, #15]
 800f1c6:	3b01      	subs	r3, #1
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f1cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	dce9      	bgt.n	800f1a8 <prvUnlockQueue+0x16>
 800f1d4:	e000      	b.n	800f1d8 <prvUnlockQueue+0x46>
					break;
 800f1d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	22ff      	movs	r2, #255	; 0xff
 800f1dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f1e0:	f001 fa10 	bl	8010604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f1e4:	f001 f9de 	bl	80105a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f1f0:	e011      	b.n	800f216 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	691b      	ldr	r3, [r3, #16]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d012      	beq.n	800f220 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	3310      	adds	r3, #16
 800f1fe:	4618      	mov	r0, r3
 800f200:	f000 fcc4 	bl	800fb8c <xTaskRemoveFromEventList>
 800f204:	4603      	mov	r3, r0
 800f206:	2b00      	cmp	r3, #0
 800f208:	d001      	beq.n	800f20e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f20a:	f000 fd99 	bl	800fd40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f20e:	7bbb      	ldrb	r3, [r7, #14]
 800f210:	3b01      	subs	r3, #1
 800f212:	b2db      	uxtb	r3, r3
 800f214:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f216:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	dce9      	bgt.n	800f1f2 <prvUnlockQueue+0x60>
 800f21e:	e000      	b.n	800f222 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f220:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	22ff      	movs	r2, #255	; 0xff
 800f226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f22a:	f001 f9eb 	bl	8010604 <vPortExitCritical>
}
 800f22e:	bf00      	nop
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}

0800f236 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f236:	b580      	push	{r7, lr}
 800f238:	b084      	sub	sp, #16
 800f23a:	af00      	add	r7, sp, #0
 800f23c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f23e:	f001 f9b1 	bl	80105a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f246:	2b00      	cmp	r3, #0
 800f248:	d102      	bne.n	800f250 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f24a:	2301      	movs	r3, #1
 800f24c:	60fb      	str	r3, [r7, #12]
 800f24e:	e001      	b.n	800f254 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f250:	2300      	movs	r3, #0
 800f252:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f254:	f001 f9d6 	bl	8010604 <vPortExitCritical>

	return xReturn;
 800f258:	68fb      	ldr	r3, [r7, #12]
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3710      	adds	r7, #16
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}

0800f262 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f262:	b580      	push	{r7, lr}
 800f264:	b084      	sub	sp, #16
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f26a:	f001 f99b 	bl	80105a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f276:	429a      	cmp	r2, r3
 800f278:	d102      	bne.n	800f280 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f27a:	2301      	movs	r3, #1
 800f27c:	60fb      	str	r3, [r7, #12]
 800f27e:	e001      	b.n	800f284 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f280:	2300      	movs	r3, #0
 800f282:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f284:	f001 f9be 	bl	8010604 <vPortExitCritical>

	return xReturn;
 800f288:	68fb      	ldr	r3, [r7, #12]
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3710      	adds	r7, #16
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}
	...

0800f294 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f294:	b480      	push	{r7}
 800f296:	b085      	sub	sp, #20
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f29c:	2300      	movs	r3, #0
 800f29e:	60fb      	str	r3, [r7, #12]
 800f2a0:	e016      	b.n	800f2d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f2a2:	4a10      	ldr	r2, [pc, #64]	; (800f2e4 <vQueueUnregisterQueue+0x50>)
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	00db      	lsls	r3, r3, #3
 800f2a8:	4413      	add	r3, r2
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	687a      	ldr	r2, [r7, #4]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d10b      	bne.n	800f2ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f2b2:	4a0c      	ldr	r2, [pc, #48]	; (800f2e4 <vQueueUnregisterQueue+0x50>)
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2100      	movs	r1, #0
 800f2b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f2bc:	4a09      	ldr	r2, [pc, #36]	; (800f2e4 <vQueueUnregisterQueue+0x50>)
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	00db      	lsls	r3, r3, #3
 800f2c2:	4413      	add	r3, r2
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	605a      	str	r2, [r3, #4]
				break;
 800f2c8:	e006      	b.n	800f2d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	60fb      	str	r3, [r7, #12]
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2b07      	cmp	r3, #7
 800f2d4:	d9e5      	bls.n	800f2a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f2d6:	bf00      	nop
 800f2d8:	bf00      	nop
 800f2da:	3714      	adds	r7, #20
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr
 800f2e4:	2000a9a4 	.word	0x2000a9a4

0800f2e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b08e      	sub	sp, #56	; 0x38
 800f2ec:	af04      	add	r7, sp, #16
 800f2ee:	60f8      	str	r0, [r7, #12]
 800f2f0:	60b9      	str	r1, [r7, #8]
 800f2f2:	607a      	str	r2, [r7, #4]
 800f2f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d10a      	bne.n	800f312 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f300:	f383 8811 	msr	BASEPRI, r3
 800f304:	f3bf 8f6f 	isb	sy
 800f308:	f3bf 8f4f 	dsb	sy
 800f30c:	623b      	str	r3, [r7, #32]
}
 800f30e:	bf00      	nop
 800f310:	e7fe      	b.n	800f310 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f314:	2b00      	cmp	r3, #0
 800f316:	d10a      	bne.n	800f32e <xTaskCreateStatic+0x46>
	__asm volatile
 800f318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f31c:	f383 8811 	msr	BASEPRI, r3
 800f320:	f3bf 8f6f 	isb	sy
 800f324:	f3bf 8f4f 	dsb	sy
 800f328:	61fb      	str	r3, [r7, #28]
}
 800f32a:	bf00      	nop
 800f32c:	e7fe      	b.n	800f32c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f32e:	23b4      	movs	r3, #180	; 0xb4
 800f330:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	2bb4      	cmp	r3, #180	; 0xb4
 800f336:	d00a      	beq.n	800f34e <xTaskCreateStatic+0x66>
	__asm volatile
 800f338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33c:	f383 8811 	msr	BASEPRI, r3
 800f340:	f3bf 8f6f 	isb	sy
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	61bb      	str	r3, [r7, #24]
}
 800f34a:	bf00      	nop
 800f34c:	e7fe      	b.n	800f34c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f34e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f352:	2b00      	cmp	r3, #0
 800f354:	d01e      	beq.n	800f394 <xTaskCreateStatic+0xac>
 800f356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d01b      	beq.n	800f394 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f364:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f368:	2202      	movs	r2, #2
 800f36a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f36e:	2300      	movs	r3, #0
 800f370:	9303      	str	r3, [sp, #12]
 800f372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f374:	9302      	str	r3, [sp, #8]
 800f376:	f107 0314 	add.w	r3, r7, #20
 800f37a:	9301      	str	r3, [sp, #4]
 800f37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37e:	9300      	str	r3, [sp, #0]
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	68b9      	ldr	r1, [r7, #8]
 800f386:	68f8      	ldr	r0, [r7, #12]
 800f388:	f000 f850 	bl	800f42c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f38c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f38e:	f000 f8eb 	bl	800f568 <prvAddNewTaskToReadyList>
 800f392:	e001      	b.n	800f398 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f394:	2300      	movs	r3, #0
 800f396:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f398:	697b      	ldr	r3, [r7, #20]
	}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3728      	adds	r7, #40	; 0x28
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}

0800f3a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f3a2:	b580      	push	{r7, lr}
 800f3a4:	b08c      	sub	sp, #48	; 0x30
 800f3a6:	af04      	add	r7, sp, #16
 800f3a8:	60f8      	str	r0, [r7, #12]
 800f3aa:	60b9      	str	r1, [r7, #8]
 800f3ac:	603b      	str	r3, [r7, #0]
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f3b2:	88fb      	ldrh	r3, [r7, #6]
 800f3b4:	009b      	lsls	r3, r3, #2
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f001 fa16 	bl	80107e8 <pvPortMalloc>
 800f3bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00e      	beq.n	800f3e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f3c4:	20b4      	movs	r0, #180	; 0xb4
 800f3c6:	f001 fa0f 	bl	80107e8 <pvPortMalloc>
 800f3ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d003      	beq.n	800f3da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f3d2:	69fb      	ldr	r3, [r7, #28]
 800f3d4:	697a      	ldr	r2, [r7, #20]
 800f3d6:	631a      	str	r2, [r3, #48]	; 0x30
 800f3d8:	e005      	b.n	800f3e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f3da:	6978      	ldr	r0, [r7, #20]
 800f3dc:	f001 fad0 	bl	8010980 <vPortFree>
 800f3e0:	e001      	b.n	800f3e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d017      	beq.n	800f41c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f3f4:	88fa      	ldrh	r2, [r7, #6]
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	9303      	str	r3, [sp, #12]
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	9302      	str	r3, [sp, #8]
 800f3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f400:	9301      	str	r3, [sp, #4]
 800f402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	68b9      	ldr	r1, [r7, #8]
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	f000 f80e 	bl	800f42c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f410:	69f8      	ldr	r0, [r7, #28]
 800f412:	f000 f8a9 	bl	800f568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f416:	2301      	movs	r3, #1
 800f418:	61bb      	str	r3, [r7, #24]
 800f41a:	e002      	b.n	800f422 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f41c:	f04f 33ff 	mov.w	r3, #4294967295
 800f420:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f422:	69bb      	ldr	r3, [r7, #24]
	}
 800f424:	4618      	mov	r0, r3
 800f426:	3720      	adds	r7, #32
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b088      	sub	sp, #32
 800f430:	af00      	add	r7, sp, #0
 800f432:	60f8      	str	r0, [r7, #12]
 800f434:	60b9      	str	r1, [r7, #8]
 800f436:	607a      	str	r2, [r7, #4]
 800f438:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f444:	3b01      	subs	r3, #1
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	4413      	add	r3, r2
 800f44a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f44c:	69bb      	ldr	r3, [r7, #24]
 800f44e:	f023 0307 	bic.w	r3, r3, #7
 800f452:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	f003 0307 	and.w	r3, r3, #7
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d00a      	beq.n	800f474 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f462:	f383 8811 	msr	BASEPRI, r3
 800f466:	f3bf 8f6f 	isb	sy
 800f46a:	f3bf 8f4f 	dsb	sy
 800f46e:	617b      	str	r3, [r7, #20]
}
 800f470:	bf00      	nop
 800f472:	e7fe      	b.n	800f472 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d01f      	beq.n	800f4ba <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f47a:	2300      	movs	r3, #0
 800f47c:	61fb      	str	r3, [r7, #28]
 800f47e:	e012      	b.n	800f4a6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f480:	68ba      	ldr	r2, [r7, #8]
 800f482:	69fb      	ldr	r3, [r7, #28]
 800f484:	4413      	add	r3, r2
 800f486:	7819      	ldrb	r1, [r3, #0]
 800f488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	4413      	add	r3, r2
 800f48e:	3334      	adds	r3, #52	; 0x34
 800f490:	460a      	mov	r2, r1
 800f492:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f494:	68ba      	ldr	r2, [r7, #8]
 800f496:	69fb      	ldr	r3, [r7, #28]
 800f498:	4413      	add	r3, r2
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d006      	beq.n	800f4ae <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f4a0:	69fb      	ldr	r3, [r7, #28]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	61fb      	str	r3, [r7, #28]
 800f4a6:	69fb      	ldr	r3, [r7, #28]
 800f4a8:	2b0f      	cmp	r3, #15
 800f4aa:	d9e9      	bls.n	800f480 <prvInitialiseNewTask+0x54>
 800f4ac:	e000      	b.n	800f4b0 <prvInitialiseNewTask+0x84>
			{
				break;
 800f4ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f4b8:	e003      	b.n	800f4c2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c4:	2b06      	cmp	r3, #6
 800f4c6:	d901      	bls.n	800f4cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f4c8:	2306      	movs	r3, #6
 800f4ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4da:	2200      	movs	r2, #0
 800f4dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e0:	3304      	adds	r3, #4
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7fe fea2 	bl	800e22c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ea:	3318      	adds	r3, #24
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7fe fe9d 	bl	800e22c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4fa:	f1c3 0207 	rsb	r2, r3, #7
 800f4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f500:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f506:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f50a:	2200      	movs	r2, #0
 800f50c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f512:	2200      	movs	r2, #0
 800f514:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51a:	334c      	adds	r3, #76	; 0x4c
 800f51c:	2260      	movs	r2, #96	; 0x60
 800f51e:	2100      	movs	r1, #0
 800f520:	4618      	mov	r0, r3
 800f522:	f00e fdbf 	bl	801e0a4 <memset>
 800f526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f528:	4a0c      	ldr	r2, [pc, #48]	; (800f55c <prvInitialiseNewTask+0x130>)
 800f52a:	651a      	str	r2, [r3, #80]	; 0x50
 800f52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f52e:	4a0c      	ldr	r2, [pc, #48]	; (800f560 <prvInitialiseNewTask+0x134>)
 800f530:	655a      	str	r2, [r3, #84]	; 0x54
 800f532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f534:	4a0b      	ldr	r2, [pc, #44]	; (800f564 <prvInitialiseNewTask+0x138>)
 800f536:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f538:	683a      	ldr	r2, [r7, #0]
 800f53a:	68f9      	ldr	r1, [r7, #12]
 800f53c:	69b8      	ldr	r0, [r7, #24]
 800f53e:	f000 ff07 	bl	8010350 <pxPortInitialiseStack>
 800f542:	4602      	mov	r2, r0
 800f544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f546:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d002      	beq.n	800f554 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f552:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f554:	bf00      	nop
 800f556:	3720      	adds	r7, #32
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	08026d64 	.word	0x08026d64
 800f560:	08026d84 	.word	0x08026d84
 800f564:	08026d44 	.word	0x08026d44

0800f568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f570:	f001 f818 	bl	80105a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f574:	4b2a      	ldr	r3, [pc, #168]	; (800f620 <prvAddNewTaskToReadyList+0xb8>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	3301      	adds	r3, #1
 800f57a:	4a29      	ldr	r2, [pc, #164]	; (800f620 <prvAddNewTaskToReadyList+0xb8>)
 800f57c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f57e:	4b29      	ldr	r3, [pc, #164]	; (800f624 <prvAddNewTaskToReadyList+0xbc>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d109      	bne.n	800f59a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f586:	4a27      	ldr	r2, [pc, #156]	; (800f624 <prvAddNewTaskToReadyList+0xbc>)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f58c:	4b24      	ldr	r3, [pc, #144]	; (800f620 <prvAddNewTaskToReadyList+0xb8>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	2b01      	cmp	r3, #1
 800f592:	d110      	bne.n	800f5b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f594:	f000 fbf8 	bl	800fd88 <prvInitialiseTaskLists>
 800f598:	e00d      	b.n	800f5b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f59a:	4b23      	ldr	r3, [pc, #140]	; (800f628 <prvAddNewTaskToReadyList+0xc0>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d109      	bne.n	800f5b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f5a2:	4b20      	ldr	r3, [pc, #128]	; (800f624 <prvAddNewTaskToReadyList+0xbc>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d802      	bhi.n	800f5b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f5b0:	4a1c      	ldr	r2, [pc, #112]	; (800f624 <prvAddNewTaskToReadyList+0xbc>)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f5b6:	4b1d      	ldr	r3, [pc, #116]	; (800f62c <prvAddNewTaskToReadyList+0xc4>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	4a1b      	ldr	r2, [pc, #108]	; (800f62c <prvAddNewTaskToReadyList+0xc4>)
 800f5be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	409a      	lsls	r2, r3
 800f5c8:	4b19      	ldr	r3, [pc, #100]	; (800f630 <prvAddNewTaskToReadyList+0xc8>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	4a18      	ldr	r2, [pc, #96]	; (800f630 <prvAddNewTaskToReadyList+0xc8>)
 800f5d0:	6013      	str	r3, [r2, #0]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	4413      	add	r3, r2
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	4a15      	ldr	r2, [pc, #84]	; (800f634 <prvAddNewTaskToReadyList+0xcc>)
 800f5e0:	441a      	add	r2, r3
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	3304      	adds	r3, #4
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	4610      	mov	r0, r2
 800f5ea:	f7fe fe2c 	bl	800e246 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f5ee:	f001 f809 	bl	8010604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f5f2:	4b0d      	ldr	r3, [pc, #52]	; (800f628 <prvAddNewTaskToReadyList+0xc0>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d00e      	beq.n	800f618 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f5fa:	4b0a      	ldr	r3, [pc, #40]	; (800f624 <prvAddNewTaskToReadyList+0xbc>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f604:	429a      	cmp	r2, r3
 800f606:	d207      	bcs.n	800f618 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f608:	4b0b      	ldr	r3, [pc, #44]	; (800f638 <prvAddNewTaskToReadyList+0xd0>)
 800f60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f60e:	601a      	str	r2, [r3, #0]
 800f610:	f3bf 8f4f 	dsb	sy
 800f614:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f618:	bf00      	nop
 800f61a:	3708      	adds	r7, #8
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}
 800f620:	20000a04 	.word	0x20000a04
 800f624:	20000904 	.word	0x20000904
 800f628:	20000a10 	.word	0x20000a10
 800f62c:	20000a20 	.word	0x20000a20
 800f630:	20000a0c 	.word	0x20000a0c
 800f634:	20000908 	.word	0x20000908
 800f638:	e000ed04 	.word	0xe000ed04

0800f63c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f644:	2300      	movs	r3, #0
 800f646:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d017      	beq.n	800f67e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f64e:	4b13      	ldr	r3, [pc, #76]	; (800f69c <vTaskDelay+0x60>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d00a      	beq.n	800f66c <vTaskDelay+0x30>
	__asm volatile
 800f656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f65a:	f383 8811 	msr	BASEPRI, r3
 800f65e:	f3bf 8f6f 	isb	sy
 800f662:	f3bf 8f4f 	dsb	sy
 800f666:	60bb      	str	r3, [r7, #8]
}
 800f668:	bf00      	nop
 800f66a:	e7fe      	b.n	800f66a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f66c:	f000 f884 	bl	800f778 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f670:	2100      	movs	r1, #0
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f000 fe06 	bl	8010284 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f678:	f000 f88c 	bl	800f794 <xTaskResumeAll>
 800f67c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d107      	bne.n	800f694 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f684:	4b06      	ldr	r3, [pc, #24]	; (800f6a0 <vTaskDelay+0x64>)
 800f686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f68a:	601a      	str	r2, [r3, #0]
 800f68c:	f3bf 8f4f 	dsb	sy
 800f690:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f694:	bf00      	nop
 800f696:	3710      	adds	r7, #16
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	20000a2c 	.word	0x20000a2c
 800f6a0:	e000ed04 	.word	0xe000ed04

0800f6a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b08a      	sub	sp, #40	; 0x28
 800f6a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f6b2:	463a      	mov	r2, r7
 800f6b4:	1d39      	adds	r1, r7, #4
 800f6b6:	f107 0308 	add.w	r3, r7, #8
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7f2 fb54 	bl	8001d68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f6c0:	6839      	ldr	r1, [r7, #0]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	68ba      	ldr	r2, [r7, #8]
 800f6c6:	9202      	str	r2, [sp, #8]
 800f6c8:	9301      	str	r3, [sp, #4]
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	9300      	str	r3, [sp, #0]
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	460a      	mov	r2, r1
 800f6d2:	4921      	ldr	r1, [pc, #132]	; (800f758 <vTaskStartScheduler+0xb4>)
 800f6d4:	4821      	ldr	r0, [pc, #132]	; (800f75c <vTaskStartScheduler+0xb8>)
 800f6d6:	f7ff fe07 	bl	800f2e8 <xTaskCreateStatic>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	4a20      	ldr	r2, [pc, #128]	; (800f760 <vTaskStartScheduler+0xbc>)
 800f6de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f6e0:	4b1f      	ldr	r3, [pc, #124]	; (800f760 <vTaskStartScheduler+0xbc>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d002      	beq.n	800f6ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	617b      	str	r3, [r7, #20]
 800f6ec:	e001      	b.n	800f6f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	d11b      	bne.n	800f730 <vTaskStartScheduler+0x8c>
	__asm volatile
 800f6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6fc:	f383 8811 	msr	BASEPRI, r3
 800f700:	f3bf 8f6f 	isb	sy
 800f704:	f3bf 8f4f 	dsb	sy
 800f708:	613b      	str	r3, [r7, #16]
}
 800f70a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f70c:	4b15      	ldr	r3, [pc, #84]	; (800f764 <vTaskStartScheduler+0xc0>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	334c      	adds	r3, #76	; 0x4c
 800f712:	4a15      	ldr	r2, [pc, #84]	; (800f768 <vTaskStartScheduler+0xc4>)
 800f714:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f716:	4b15      	ldr	r3, [pc, #84]	; (800f76c <vTaskStartScheduler+0xc8>)
 800f718:	f04f 32ff 	mov.w	r2, #4294967295
 800f71c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f71e:	4b14      	ldr	r3, [pc, #80]	; (800f770 <vTaskStartScheduler+0xcc>)
 800f720:	2201      	movs	r2, #1
 800f722:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f724:	4b13      	ldr	r3, [pc, #76]	; (800f774 <vTaskStartScheduler+0xd0>)
 800f726:	2200      	movs	r2, #0
 800f728:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f72a:	f000 fe99 	bl	8010460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f72e:	e00e      	b.n	800f74e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f736:	d10a      	bne.n	800f74e <vTaskStartScheduler+0xaa>
	__asm volatile
 800f738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f73c:	f383 8811 	msr	BASEPRI, r3
 800f740:	f3bf 8f6f 	isb	sy
 800f744:	f3bf 8f4f 	dsb	sy
 800f748:	60fb      	str	r3, [r7, #12]
}
 800f74a:	bf00      	nop
 800f74c:	e7fe      	b.n	800f74c <vTaskStartScheduler+0xa8>
}
 800f74e:	bf00      	nop
 800f750:	3718      	adds	r7, #24
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	080234a0 	.word	0x080234a0
 800f75c:	0800fd59 	.word	0x0800fd59
 800f760:	20000a28 	.word	0x20000a28
 800f764:	20000904 	.word	0x20000904
 800f768:	20000360 	.word	0x20000360
 800f76c:	20000a24 	.word	0x20000a24
 800f770:	20000a10 	.word	0x20000a10
 800f774:	20000a08 	.word	0x20000a08

0800f778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f778:	b480      	push	{r7}
 800f77a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f77c:	4b04      	ldr	r3, [pc, #16]	; (800f790 <vTaskSuspendAll+0x18>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	3301      	adds	r3, #1
 800f782:	4a03      	ldr	r2, [pc, #12]	; (800f790 <vTaskSuspendAll+0x18>)
 800f784:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f786:	bf00      	nop
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr
 800f790:	20000a2c 	.word	0x20000a2c

0800f794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f79a:	2300      	movs	r3, #0
 800f79c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f7a2:	4b41      	ldr	r3, [pc, #260]	; (800f8a8 <xTaskResumeAll+0x114>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d10a      	bne.n	800f7c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800f7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ae:	f383 8811 	msr	BASEPRI, r3
 800f7b2:	f3bf 8f6f 	isb	sy
 800f7b6:	f3bf 8f4f 	dsb	sy
 800f7ba:	603b      	str	r3, [r7, #0]
}
 800f7bc:	bf00      	nop
 800f7be:	e7fe      	b.n	800f7be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f7c0:	f000 fef0 	bl	80105a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f7c4:	4b38      	ldr	r3, [pc, #224]	; (800f8a8 <xTaskResumeAll+0x114>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	3b01      	subs	r3, #1
 800f7ca:	4a37      	ldr	r2, [pc, #220]	; (800f8a8 <xTaskResumeAll+0x114>)
 800f7cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7ce:	4b36      	ldr	r3, [pc, #216]	; (800f8a8 <xTaskResumeAll+0x114>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d161      	bne.n	800f89a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f7d6:	4b35      	ldr	r3, [pc, #212]	; (800f8ac <xTaskResumeAll+0x118>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d05d      	beq.n	800f89a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f7de:	e02e      	b.n	800f83e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7e0:	4b33      	ldr	r3, [pc, #204]	; (800f8b0 <xTaskResumeAll+0x11c>)
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	3318      	adds	r3, #24
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7fe fd87 	bl	800e300 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	3304      	adds	r3, #4
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fe fd82 	bl	800e300 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f800:	2201      	movs	r2, #1
 800f802:	409a      	lsls	r2, r3
 800f804:	4b2b      	ldr	r3, [pc, #172]	; (800f8b4 <xTaskResumeAll+0x120>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	4313      	orrs	r3, r2
 800f80a:	4a2a      	ldr	r2, [pc, #168]	; (800f8b4 <xTaskResumeAll+0x120>)
 800f80c:	6013      	str	r3, [r2, #0]
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f812:	4613      	mov	r3, r2
 800f814:	009b      	lsls	r3, r3, #2
 800f816:	4413      	add	r3, r2
 800f818:	009b      	lsls	r3, r3, #2
 800f81a:	4a27      	ldr	r2, [pc, #156]	; (800f8b8 <xTaskResumeAll+0x124>)
 800f81c:	441a      	add	r2, r3
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	3304      	adds	r3, #4
 800f822:	4619      	mov	r1, r3
 800f824:	4610      	mov	r0, r2
 800f826:	f7fe fd0e 	bl	800e246 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f82e:	4b23      	ldr	r3, [pc, #140]	; (800f8bc <xTaskResumeAll+0x128>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f834:	429a      	cmp	r2, r3
 800f836:	d302      	bcc.n	800f83e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f838:	4b21      	ldr	r3, [pc, #132]	; (800f8c0 <xTaskResumeAll+0x12c>)
 800f83a:	2201      	movs	r2, #1
 800f83c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f83e:	4b1c      	ldr	r3, [pc, #112]	; (800f8b0 <xTaskResumeAll+0x11c>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d1cc      	bne.n	800f7e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d001      	beq.n	800f850 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f84c:	f000 fb3e 	bl	800fecc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f850:	4b1c      	ldr	r3, [pc, #112]	; (800f8c4 <xTaskResumeAll+0x130>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d010      	beq.n	800f87e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f85c:	f000 f858 	bl	800f910 <xTaskIncrementTick>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d002      	beq.n	800f86c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f866:	4b16      	ldr	r3, [pc, #88]	; (800f8c0 <xTaskResumeAll+0x12c>)
 800f868:	2201      	movs	r2, #1
 800f86a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	3b01      	subs	r3, #1
 800f870:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d1f1      	bne.n	800f85c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f878:	4b12      	ldr	r3, [pc, #72]	; (800f8c4 <xTaskResumeAll+0x130>)
 800f87a:	2200      	movs	r2, #0
 800f87c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f87e:	4b10      	ldr	r3, [pc, #64]	; (800f8c0 <xTaskResumeAll+0x12c>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d009      	beq.n	800f89a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f886:	2301      	movs	r3, #1
 800f888:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f88a:	4b0f      	ldr	r3, [pc, #60]	; (800f8c8 <xTaskResumeAll+0x134>)
 800f88c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f890:	601a      	str	r2, [r3, #0]
 800f892:	f3bf 8f4f 	dsb	sy
 800f896:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f89a:	f000 feb3 	bl	8010604 <vPortExitCritical>

	return xAlreadyYielded;
 800f89e:	68bb      	ldr	r3, [r7, #8]
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3710      	adds	r7, #16
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	20000a2c 	.word	0x20000a2c
 800f8ac:	20000a04 	.word	0x20000a04
 800f8b0:	200009c4 	.word	0x200009c4
 800f8b4:	20000a0c 	.word	0x20000a0c
 800f8b8:	20000908 	.word	0x20000908
 800f8bc:	20000904 	.word	0x20000904
 800f8c0:	20000a18 	.word	0x20000a18
 800f8c4:	20000a14 	.word	0x20000a14
 800f8c8:	e000ed04 	.word	0xe000ed04

0800f8cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b083      	sub	sp, #12
 800f8d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f8d2:	4b05      	ldr	r3, [pc, #20]	; (800f8e8 <xTaskGetTickCount+0x1c>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f8d8:	687b      	ldr	r3, [r7, #4]
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	370c      	adds	r7, #12
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr
 800f8e6:	bf00      	nop
 800f8e8:	20000a08 	.word	0x20000a08

0800f8ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f8f2:	f000 ff39 	bl	8010768 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f8fa:	4b04      	ldr	r3, [pc, #16]	; (800f90c <xTaskGetTickCountFromISR+0x20>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f900:	683b      	ldr	r3, [r7, #0]
}
 800f902:	4618      	mov	r0, r3
 800f904:	3708      	adds	r7, #8
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	20000a08 	.word	0x20000a08

0800f910 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b086      	sub	sp, #24
 800f914:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f916:	2300      	movs	r3, #0
 800f918:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f91a:	4b4e      	ldr	r3, [pc, #312]	; (800fa54 <xTaskIncrementTick+0x144>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	f040 808e 	bne.w	800fa40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f924:	4b4c      	ldr	r3, [pc, #304]	; (800fa58 <xTaskIncrementTick+0x148>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	3301      	adds	r3, #1
 800f92a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f92c:	4a4a      	ldr	r2, [pc, #296]	; (800fa58 <xTaskIncrementTick+0x148>)
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d120      	bne.n	800f97a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f938:	4b48      	ldr	r3, [pc, #288]	; (800fa5c <xTaskIncrementTick+0x14c>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00a      	beq.n	800f958 <xTaskIncrementTick+0x48>
	__asm volatile
 800f942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f946:	f383 8811 	msr	BASEPRI, r3
 800f94a:	f3bf 8f6f 	isb	sy
 800f94e:	f3bf 8f4f 	dsb	sy
 800f952:	603b      	str	r3, [r7, #0]
}
 800f954:	bf00      	nop
 800f956:	e7fe      	b.n	800f956 <xTaskIncrementTick+0x46>
 800f958:	4b40      	ldr	r3, [pc, #256]	; (800fa5c <xTaskIncrementTick+0x14c>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	60fb      	str	r3, [r7, #12]
 800f95e:	4b40      	ldr	r3, [pc, #256]	; (800fa60 <xTaskIncrementTick+0x150>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4a3e      	ldr	r2, [pc, #248]	; (800fa5c <xTaskIncrementTick+0x14c>)
 800f964:	6013      	str	r3, [r2, #0]
 800f966:	4a3e      	ldr	r2, [pc, #248]	; (800fa60 <xTaskIncrementTick+0x150>)
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	6013      	str	r3, [r2, #0]
 800f96c:	4b3d      	ldr	r3, [pc, #244]	; (800fa64 <xTaskIncrementTick+0x154>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	3301      	adds	r3, #1
 800f972:	4a3c      	ldr	r2, [pc, #240]	; (800fa64 <xTaskIncrementTick+0x154>)
 800f974:	6013      	str	r3, [r2, #0]
 800f976:	f000 faa9 	bl	800fecc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f97a:	4b3b      	ldr	r3, [pc, #236]	; (800fa68 <xTaskIncrementTick+0x158>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	693a      	ldr	r2, [r7, #16]
 800f980:	429a      	cmp	r2, r3
 800f982:	d348      	bcc.n	800fa16 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f984:	4b35      	ldr	r3, [pc, #212]	; (800fa5c <xTaskIncrementTick+0x14c>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d104      	bne.n	800f998 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f98e:	4b36      	ldr	r3, [pc, #216]	; (800fa68 <xTaskIncrementTick+0x158>)
 800f990:	f04f 32ff 	mov.w	r2, #4294967295
 800f994:	601a      	str	r2, [r3, #0]
					break;
 800f996:	e03e      	b.n	800fa16 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f998:	4b30      	ldr	r3, [pc, #192]	; (800fa5c <xTaskIncrementTick+0x14c>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	68db      	ldr	r3, [r3, #12]
 800f9a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f9a8:	693a      	ldr	r2, [r7, #16]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d203      	bcs.n	800f9b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f9b0:	4a2d      	ldr	r2, [pc, #180]	; (800fa68 <xTaskIncrementTick+0x158>)
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f9b6:	e02e      	b.n	800fa16 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	3304      	adds	r3, #4
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7fe fc9f 	bl	800e300 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d004      	beq.n	800f9d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	3318      	adds	r3, #24
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fe fc96 	bl	800e300 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d8:	2201      	movs	r2, #1
 800f9da:	409a      	lsls	r2, r3
 800f9dc:	4b23      	ldr	r3, [pc, #140]	; (800fa6c <xTaskIncrementTick+0x15c>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	4a22      	ldr	r2, [pc, #136]	; (800fa6c <xTaskIncrementTick+0x15c>)
 800f9e4:	6013      	str	r3, [r2, #0]
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	4413      	add	r3, r2
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	4a1f      	ldr	r2, [pc, #124]	; (800fa70 <xTaskIncrementTick+0x160>)
 800f9f4:	441a      	add	r2, r3
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	3304      	adds	r3, #4
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	f7fe fc22 	bl	800e246 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa06:	4b1b      	ldr	r3, [pc, #108]	; (800fa74 <xTaskIncrementTick+0x164>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d3b9      	bcc.n	800f984 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fa10:	2301      	movs	r3, #1
 800fa12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa14:	e7b6      	b.n	800f984 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fa16:	4b17      	ldr	r3, [pc, #92]	; (800fa74 <xTaskIncrementTick+0x164>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa1c:	4914      	ldr	r1, [pc, #80]	; (800fa70 <xTaskIncrementTick+0x160>)
 800fa1e:	4613      	mov	r3, r2
 800fa20:	009b      	lsls	r3, r3, #2
 800fa22:	4413      	add	r3, r2
 800fa24:	009b      	lsls	r3, r3, #2
 800fa26:	440b      	add	r3, r1
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2b01      	cmp	r3, #1
 800fa2c:	d901      	bls.n	800fa32 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fa2e:	2301      	movs	r3, #1
 800fa30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fa32:	4b11      	ldr	r3, [pc, #68]	; (800fa78 <xTaskIncrementTick+0x168>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d007      	beq.n	800fa4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	617b      	str	r3, [r7, #20]
 800fa3e:	e004      	b.n	800fa4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fa40:	4b0e      	ldr	r3, [pc, #56]	; (800fa7c <xTaskIncrementTick+0x16c>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	3301      	adds	r3, #1
 800fa46:	4a0d      	ldr	r2, [pc, #52]	; (800fa7c <xTaskIncrementTick+0x16c>)
 800fa48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fa4a:	697b      	ldr	r3, [r7, #20]
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3718      	adds	r7, #24
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	20000a2c 	.word	0x20000a2c
 800fa58:	20000a08 	.word	0x20000a08
 800fa5c:	200009bc 	.word	0x200009bc
 800fa60:	200009c0 	.word	0x200009c0
 800fa64:	20000a1c 	.word	0x20000a1c
 800fa68:	20000a24 	.word	0x20000a24
 800fa6c:	20000a0c 	.word	0x20000a0c
 800fa70:	20000908 	.word	0x20000908
 800fa74:	20000904 	.word	0x20000904
 800fa78:	20000a18 	.word	0x20000a18
 800fa7c:	20000a14 	.word	0x20000a14

0800fa80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fa80:	b480      	push	{r7}
 800fa82:	b087      	sub	sp, #28
 800fa84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fa86:	4b29      	ldr	r3, [pc, #164]	; (800fb2c <vTaskSwitchContext+0xac>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d003      	beq.n	800fa96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fa8e:	4b28      	ldr	r3, [pc, #160]	; (800fb30 <vTaskSwitchContext+0xb0>)
 800fa90:	2201      	movs	r2, #1
 800fa92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fa94:	e044      	b.n	800fb20 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800fa96:	4b26      	ldr	r3, [pc, #152]	; (800fb30 <vTaskSwitchContext+0xb0>)
 800fa98:	2200      	movs	r2, #0
 800fa9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa9c:	4b25      	ldr	r3, [pc, #148]	; (800fb34 <vTaskSwitchContext+0xb4>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	fab3 f383 	clz	r3, r3
 800faa8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800faaa:	7afb      	ldrb	r3, [r7, #11]
 800faac:	f1c3 031f 	rsb	r3, r3, #31
 800fab0:	617b      	str	r3, [r7, #20]
 800fab2:	4921      	ldr	r1, [pc, #132]	; (800fb38 <vTaskSwitchContext+0xb8>)
 800fab4:	697a      	ldr	r2, [r7, #20]
 800fab6:	4613      	mov	r3, r2
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	4413      	add	r3, r2
 800fabc:	009b      	lsls	r3, r3, #2
 800fabe:	440b      	add	r3, r1
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d10a      	bne.n	800fadc <vTaskSwitchContext+0x5c>
	__asm volatile
 800fac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faca:	f383 8811 	msr	BASEPRI, r3
 800face:	f3bf 8f6f 	isb	sy
 800fad2:	f3bf 8f4f 	dsb	sy
 800fad6:	607b      	str	r3, [r7, #4]
}
 800fad8:	bf00      	nop
 800fada:	e7fe      	b.n	800fada <vTaskSwitchContext+0x5a>
 800fadc:	697a      	ldr	r2, [r7, #20]
 800fade:	4613      	mov	r3, r2
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	4413      	add	r3, r2
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	4a14      	ldr	r2, [pc, #80]	; (800fb38 <vTaskSwitchContext+0xb8>)
 800fae8:	4413      	add	r3, r2
 800faea:	613b      	str	r3, [r7, #16]
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	685a      	ldr	r2, [r3, #4]
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	605a      	str	r2, [r3, #4]
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	685a      	ldr	r2, [r3, #4]
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	3308      	adds	r3, #8
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d104      	bne.n	800fb0c <vTaskSwitchContext+0x8c>
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	685a      	ldr	r2, [r3, #4]
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	605a      	str	r2, [r3, #4]
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	68db      	ldr	r3, [r3, #12]
 800fb12:	4a0a      	ldr	r2, [pc, #40]	; (800fb3c <vTaskSwitchContext+0xbc>)
 800fb14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fb16:	4b09      	ldr	r3, [pc, #36]	; (800fb3c <vTaskSwitchContext+0xbc>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	334c      	adds	r3, #76	; 0x4c
 800fb1c:	4a08      	ldr	r2, [pc, #32]	; (800fb40 <vTaskSwitchContext+0xc0>)
 800fb1e:	6013      	str	r3, [r2, #0]
}
 800fb20:	bf00      	nop
 800fb22:	371c      	adds	r7, #28
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr
 800fb2c:	20000a2c 	.word	0x20000a2c
 800fb30:	20000a18 	.word	0x20000a18
 800fb34:	20000a0c 	.word	0x20000a0c
 800fb38:	20000908 	.word	0x20000908
 800fb3c:	20000904 	.word	0x20000904
 800fb40:	20000360 	.word	0x20000360

0800fb44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b084      	sub	sp, #16
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d10a      	bne.n	800fb6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb58:	f383 8811 	msr	BASEPRI, r3
 800fb5c:	f3bf 8f6f 	isb	sy
 800fb60:	f3bf 8f4f 	dsb	sy
 800fb64:	60fb      	str	r3, [r7, #12]
}
 800fb66:	bf00      	nop
 800fb68:	e7fe      	b.n	800fb68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb6a:	4b07      	ldr	r3, [pc, #28]	; (800fb88 <vTaskPlaceOnEventList+0x44>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	3318      	adds	r3, #24
 800fb70:	4619      	mov	r1, r3
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f7fe fb8b 	bl	800e28e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fb78:	2101      	movs	r1, #1
 800fb7a:	6838      	ldr	r0, [r7, #0]
 800fb7c:	f000 fb82 	bl	8010284 <prvAddCurrentTaskToDelayedList>
}
 800fb80:	bf00      	nop
 800fb82:	3710      	adds	r7, #16
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	20000904 	.word	0x20000904

0800fb8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b086      	sub	sp, #24
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	68db      	ldr	r3, [r3, #12]
 800fb98:	68db      	ldr	r3, [r3, #12]
 800fb9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d10a      	bne.n	800fbb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba6:	f383 8811 	msr	BASEPRI, r3
 800fbaa:	f3bf 8f6f 	isb	sy
 800fbae:	f3bf 8f4f 	dsb	sy
 800fbb2:	60fb      	str	r3, [r7, #12]
}
 800fbb4:	bf00      	nop
 800fbb6:	e7fe      	b.n	800fbb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	3318      	adds	r3, #24
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7fe fb9f 	bl	800e300 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbc2:	4b1d      	ldr	r3, [pc, #116]	; (800fc38 <xTaskRemoveFromEventList+0xac>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d11c      	bne.n	800fc04 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	3304      	adds	r3, #4
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fe fb96 	bl	800e300 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbd8:	2201      	movs	r2, #1
 800fbda:	409a      	lsls	r2, r3
 800fbdc:	4b17      	ldr	r3, [pc, #92]	; (800fc3c <xTaskRemoveFromEventList+0xb0>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4313      	orrs	r3, r2
 800fbe2:	4a16      	ldr	r2, [pc, #88]	; (800fc3c <xTaskRemoveFromEventList+0xb0>)
 800fbe4:	6013      	str	r3, [r2, #0]
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbea:	4613      	mov	r3, r2
 800fbec:	009b      	lsls	r3, r3, #2
 800fbee:	4413      	add	r3, r2
 800fbf0:	009b      	lsls	r3, r3, #2
 800fbf2:	4a13      	ldr	r2, [pc, #76]	; (800fc40 <xTaskRemoveFromEventList+0xb4>)
 800fbf4:	441a      	add	r2, r3
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	3304      	adds	r3, #4
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	4610      	mov	r0, r2
 800fbfe:	f7fe fb22 	bl	800e246 <vListInsertEnd>
 800fc02:	e005      	b.n	800fc10 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	3318      	adds	r3, #24
 800fc08:	4619      	mov	r1, r3
 800fc0a:	480e      	ldr	r0, [pc, #56]	; (800fc44 <xTaskRemoveFromEventList+0xb8>)
 800fc0c:	f7fe fb1b 	bl	800e246 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc14:	4b0c      	ldr	r3, [pc, #48]	; (800fc48 <xTaskRemoveFromEventList+0xbc>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d905      	bls.n	800fc2a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fc1e:	2301      	movs	r3, #1
 800fc20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fc22:	4b0a      	ldr	r3, [pc, #40]	; (800fc4c <xTaskRemoveFromEventList+0xc0>)
 800fc24:	2201      	movs	r2, #1
 800fc26:	601a      	str	r2, [r3, #0]
 800fc28:	e001      	b.n	800fc2e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fc2e:	697b      	ldr	r3, [r7, #20]
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3718      	adds	r7, #24
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}
 800fc38:	20000a2c 	.word	0x20000a2c
 800fc3c:	20000a0c 	.word	0x20000a0c
 800fc40:	20000908 	.word	0x20000908
 800fc44:	200009c4 	.word	0x200009c4
 800fc48:	20000904 	.word	0x20000904
 800fc4c:	20000a18 	.word	0x20000a18

0800fc50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc50:	b480      	push	{r7}
 800fc52:	b083      	sub	sp, #12
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc58:	4b06      	ldr	r3, [pc, #24]	; (800fc74 <vTaskInternalSetTimeOutState+0x24>)
 800fc5a:	681a      	ldr	r2, [r3, #0]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fc60:	4b05      	ldr	r3, [pc, #20]	; (800fc78 <vTaskInternalSetTimeOutState+0x28>)
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	605a      	str	r2, [r3, #4]
}
 800fc68:	bf00      	nop
 800fc6a:	370c      	adds	r7, #12
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc72:	4770      	bx	lr
 800fc74:	20000a1c 	.word	0x20000a1c
 800fc78:	20000a08 	.word	0x20000a08

0800fc7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b088      	sub	sp, #32
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d10a      	bne.n	800fca2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc90:	f383 8811 	msr	BASEPRI, r3
 800fc94:	f3bf 8f6f 	isb	sy
 800fc98:	f3bf 8f4f 	dsb	sy
 800fc9c:	613b      	str	r3, [r7, #16]
}
 800fc9e:	bf00      	nop
 800fca0:	e7fe      	b.n	800fca0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d10a      	bne.n	800fcbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcac:	f383 8811 	msr	BASEPRI, r3
 800fcb0:	f3bf 8f6f 	isb	sy
 800fcb4:	f3bf 8f4f 	dsb	sy
 800fcb8:	60fb      	str	r3, [r7, #12]
}
 800fcba:	bf00      	nop
 800fcbc:	e7fe      	b.n	800fcbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fcbe:	f000 fc71 	bl	80105a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fcc2:	4b1d      	ldr	r3, [pc, #116]	; (800fd38 <xTaskCheckForTimeOut+0xbc>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	69ba      	ldr	r2, [r7, #24]
 800fcce:	1ad3      	subs	r3, r2, r3
 800fcd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcda:	d102      	bne.n	800fce2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	61fb      	str	r3, [r7, #28]
 800fce0:	e023      	b.n	800fd2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681a      	ldr	r2, [r3, #0]
 800fce6:	4b15      	ldr	r3, [pc, #84]	; (800fd3c <xTaskCheckForTimeOut+0xc0>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d007      	beq.n	800fcfe <xTaskCheckForTimeOut+0x82>
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	69ba      	ldr	r2, [r7, #24]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d302      	bcc.n	800fcfe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	61fb      	str	r3, [r7, #28]
 800fcfc:	e015      	b.n	800fd2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	697a      	ldr	r2, [r7, #20]
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d20b      	bcs.n	800fd20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	681a      	ldr	r2, [r3, #0]
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	1ad2      	subs	r2, r2, r3
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f7ff ff9b 	bl	800fc50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	61fb      	str	r3, [r7, #28]
 800fd1e:	e004      	b.n	800fd2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	2200      	movs	r2, #0
 800fd24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fd26:	2301      	movs	r3, #1
 800fd28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fd2a:	f000 fc6b 	bl	8010604 <vPortExitCritical>

	return xReturn;
 800fd2e:	69fb      	ldr	r3, [r7, #28]
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3720      	adds	r7, #32
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	20000a08 	.word	0x20000a08
 800fd3c:	20000a1c 	.word	0x20000a1c

0800fd40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd40:	b480      	push	{r7}
 800fd42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd44:	4b03      	ldr	r3, [pc, #12]	; (800fd54 <vTaskMissedYield+0x14>)
 800fd46:	2201      	movs	r2, #1
 800fd48:	601a      	str	r2, [r3, #0]
}
 800fd4a:	bf00      	nop
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd52:	4770      	bx	lr
 800fd54:	20000a18 	.word	0x20000a18

0800fd58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b082      	sub	sp, #8
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fd60:	f000 f852 	bl	800fe08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fd64:	4b06      	ldr	r3, [pc, #24]	; (800fd80 <prvIdleTask+0x28>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d9f9      	bls.n	800fd60 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fd6c:	4b05      	ldr	r3, [pc, #20]	; (800fd84 <prvIdleTask+0x2c>)
 800fd6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd72:	601a      	str	r2, [r3, #0]
 800fd74:	f3bf 8f4f 	dsb	sy
 800fd78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fd7c:	e7f0      	b.n	800fd60 <prvIdleTask+0x8>
 800fd7e:	bf00      	nop
 800fd80:	20000908 	.word	0x20000908
 800fd84:	e000ed04 	.word	0xe000ed04

0800fd88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd8e:	2300      	movs	r3, #0
 800fd90:	607b      	str	r3, [r7, #4]
 800fd92:	e00c      	b.n	800fdae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	4613      	mov	r3, r2
 800fd98:	009b      	lsls	r3, r3, #2
 800fd9a:	4413      	add	r3, r2
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	4a12      	ldr	r2, [pc, #72]	; (800fde8 <prvInitialiseTaskLists+0x60>)
 800fda0:	4413      	add	r3, r2
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7fe fa22 	bl	800e1ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	3301      	adds	r3, #1
 800fdac:	607b      	str	r3, [r7, #4]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2b06      	cmp	r3, #6
 800fdb2:	d9ef      	bls.n	800fd94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fdb4:	480d      	ldr	r0, [pc, #52]	; (800fdec <prvInitialiseTaskLists+0x64>)
 800fdb6:	f7fe fa19 	bl	800e1ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fdba:	480d      	ldr	r0, [pc, #52]	; (800fdf0 <prvInitialiseTaskLists+0x68>)
 800fdbc:	f7fe fa16 	bl	800e1ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fdc0:	480c      	ldr	r0, [pc, #48]	; (800fdf4 <prvInitialiseTaskLists+0x6c>)
 800fdc2:	f7fe fa13 	bl	800e1ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fdc6:	480c      	ldr	r0, [pc, #48]	; (800fdf8 <prvInitialiseTaskLists+0x70>)
 800fdc8:	f7fe fa10 	bl	800e1ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fdcc:	480b      	ldr	r0, [pc, #44]	; (800fdfc <prvInitialiseTaskLists+0x74>)
 800fdce:	f7fe fa0d 	bl	800e1ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fdd2:	4b0b      	ldr	r3, [pc, #44]	; (800fe00 <prvInitialiseTaskLists+0x78>)
 800fdd4:	4a05      	ldr	r2, [pc, #20]	; (800fdec <prvInitialiseTaskLists+0x64>)
 800fdd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fdd8:	4b0a      	ldr	r3, [pc, #40]	; (800fe04 <prvInitialiseTaskLists+0x7c>)
 800fdda:	4a05      	ldr	r2, [pc, #20]	; (800fdf0 <prvInitialiseTaskLists+0x68>)
 800fddc:	601a      	str	r2, [r3, #0]
}
 800fdde:	bf00      	nop
 800fde0:	3708      	adds	r7, #8
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	20000908 	.word	0x20000908
 800fdec:	20000994 	.word	0x20000994
 800fdf0:	200009a8 	.word	0x200009a8
 800fdf4:	200009c4 	.word	0x200009c4
 800fdf8:	200009d8 	.word	0x200009d8
 800fdfc:	200009f0 	.word	0x200009f0
 800fe00:	200009bc 	.word	0x200009bc
 800fe04:	200009c0 	.word	0x200009c0

0800fe08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe0e:	e019      	b.n	800fe44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fe10:	f000 fbc8 	bl	80105a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe14:	4b10      	ldr	r3, [pc, #64]	; (800fe58 <prvCheckTasksWaitingTermination+0x50>)
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	3304      	adds	r3, #4
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7fe fa6d 	bl	800e300 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fe26:	4b0d      	ldr	r3, [pc, #52]	; (800fe5c <prvCheckTasksWaitingTermination+0x54>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	3b01      	subs	r3, #1
 800fe2c:	4a0b      	ldr	r2, [pc, #44]	; (800fe5c <prvCheckTasksWaitingTermination+0x54>)
 800fe2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fe30:	4b0b      	ldr	r3, [pc, #44]	; (800fe60 <prvCheckTasksWaitingTermination+0x58>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	3b01      	subs	r3, #1
 800fe36:	4a0a      	ldr	r2, [pc, #40]	; (800fe60 <prvCheckTasksWaitingTermination+0x58>)
 800fe38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fe3a:	f000 fbe3 	bl	8010604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f000 f810 	bl	800fe64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe44:	4b06      	ldr	r3, [pc, #24]	; (800fe60 <prvCheckTasksWaitingTermination+0x58>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d1e1      	bne.n	800fe10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe4c:	bf00      	nop
 800fe4e:	bf00      	nop
 800fe50:	3708      	adds	r7, #8
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	200009d8 	.word	0x200009d8
 800fe5c:	20000a04 	.word	0x20000a04
 800fe60:	200009ec 	.word	0x200009ec

0800fe64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b084      	sub	sp, #16
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	334c      	adds	r3, #76	; 0x4c
 800fe70:	4618      	mov	r0, r3
 800fe72:	f00f f8a9 	bl	801efc8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d108      	bne.n	800fe92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe84:	4618      	mov	r0, r3
 800fe86:	f000 fd7b 	bl	8010980 <vPortFree>
				vPortFree( pxTCB );
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f000 fd78 	bl	8010980 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe90:	e018      	b.n	800fec4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d103      	bne.n	800fea4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f000 fd6f 	bl	8010980 <vPortFree>
	}
 800fea2:	e00f      	b.n	800fec4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800feaa:	2b02      	cmp	r3, #2
 800feac:	d00a      	beq.n	800fec4 <prvDeleteTCB+0x60>
	__asm volatile
 800feae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb2:	f383 8811 	msr	BASEPRI, r3
 800feb6:	f3bf 8f6f 	isb	sy
 800feba:	f3bf 8f4f 	dsb	sy
 800febe:	60fb      	str	r3, [r7, #12]
}
 800fec0:	bf00      	nop
 800fec2:	e7fe      	b.n	800fec2 <prvDeleteTCB+0x5e>
	}
 800fec4:	bf00      	nop
 800fec6:	3710      	adds	r7, #16
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}

0800fecc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fed2:	4b0c      	ldr	r3, [pc, #48]	; (800ff04 <prvResetNextTaskUnblockTime+0x38>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d104      	bne.n	800fee6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fedc:	4b0a      	ldr	r3, [pc, #40]	; (800ff08 <prvResetNextTaskUnblockTime+0x3c>)
 800fede:	f04f 32ff 	mov.w	r2, #4294967295
 800fee2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fee4:	e008      	b.n	800fef8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fee6:	4b07      	ldr	r3, [pc, #28]	; (800ff04 <prvResetNextTaskUnblockTime+0x38>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	68db      	ldr	r3, [r3, #12]
 800feec:	68db      	ldr	r3, [r3, #12]
 800feee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	4a04      	ldr	r2, [pc, #16]	; (800ff08 <prvResetNextTaskUnblockTime+0x3c>)
 800fef6:	6013      	str	r3, [r2, #0]
}
 800fef8:	bf00      	nop
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr
 800ff04:	200009bc 	.word	0x200009bc
 800ff08:	20000a24 	.word	0x20000a24

0800ff0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ff12:	4b0b      	ldr	r3, [pc, #44]	; (800ff40 <xTaskGetSchedulerState+0x34>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d102      	bne.n	800ff20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	607b      	str	r3, [r7, #4]
 800ff1e:	e008      	b.n	800ff32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff20:	4b08      	ldr	r3, [pc, #32]	; (800ff44 <xTaskGetSchedulerState+0x38>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d102      	bne.n	800ff2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ff28:	2302      	movs	r3, #2
 800ff2a:	607b      	str	r3, [r7, #4]
 800ff2c:	e001      	b.n	800ff32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ff32:	687b      	ldr	r3, [r7, #4]
	}
 800ff34:	4618      	mov	r0, r3
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr
 800ff40:	20000a10 	.word	0x20000a10
 800ff44:	20000a2c 	.word	0x20000a2c

0800ff48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ff54:	2300      	movs	r3, #0
 800ff56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d05e      	beq.n	801001c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff62:	4b31      	ldr	r3, [pc, #196]	; (8010028 <xTaskPriorityInherit+0xe0>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d24e      	bcs.n	801000a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	699b      	ldr	r3, [r3, #24]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	db06      	blt.n	800ff82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff74:	4b2c      	ldr	r3, [pc, #176]	; (8010028 <xTaskPriorityInherit+0xe0>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff7a:	f1c3 0207 	rsb	r2, r3, #7
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	6959      	ldr	r1, [r3, #20]
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	4413      	add	r3, r2
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	4a26      	ldr	r2, [pc, #152]	; (801002c <xTaskPriorityInherit+0xe4>)
 800ff94:	4413      	add	r3, r2
 800ff96:	4299      	cmp	r1, r3
 800ff98:	d12f      	bne.n	800fffa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	3304      	adds	r3, #4
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7fe f9ae 	bl	800e300 <uxListRemove>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d10a      	bne.n	800ffc0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffae:	2201      	movs	r2, #1
 800ffb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ffb4:	43da      	mvns	r2, r3
 800ffb6:	4b1e      	ldr	r3, [pc, #120]	; (8010030 <xTaskPriorityInherit+0xe8>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4013      	ands	r3, r2
 800ffbc:	4a1c      	ldr	r2, [pc, #112]	; (8010030 <xTaskPriorityInherit+0xe8>)
 800ffbe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffc0:	4b19      	ldr	r3, [pc, #100]	; (8010028 <xTaskPriorityInherit+0xe0>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffce:	2201      	movs	r2, #1
 800ffd0:	409a      	lsls	r2, r3
 800ffd2:	4b17      	ldr	r3, [pc, #92]	; (8010030 <xTaskPriorityInherit+0xe8>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	4313      	orrs	r3, r2
 800ffd8:	4a15      	ldr	r2, [pc, #84]	; (8010030 <xTaskPriorityInherit+0xe8>)
 800ffda:	6013      	str	r3, [r2, #0]
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	009b      	lsls	r3, r3, #2
 800ffe4:	4413      	add	r3, r2
 800ffe6:	009b      	lsls	r3, r3, #2
 800ffe8:	4a10      	ldr	r2, [pc, #64]	; (801002c <xTaskPriorityInherit+0xe4>)
 800ffea:	441a      	add	r2, r3
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	3304      	adds	r3, #4
 800fff0:	4619      	mov	r1, r3
 800fff2:	4610      	mov	r0, r2
 800fff4:	f7fe f927 	bl	800e246 <vListInsertEnd>
 800fff8:	e004      	b.n	8010004 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fffa:	4b0b      	ldr	r3, [pc, #44]	; (8010028 <xTaskPriorityInherit+0xe0>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010004:	2301      	movs	r3, #1
 8010006:	60fb      	str	r3, [r7, #12]
 8010008:	e008      	b.n	801001c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801000e:	4b06      	ldr	r3, [pc, #24]	; (8010028 <xTaskPriorityInherit+0xe0>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010014:	429a      	cmp	r2, r3
 8010016:	d201      	bcs.n	801001c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010018:	2301      	movs	r3, #1
 801001a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801001c:	68fb      	ldr	r3, [r7, #12]
	}
 801001e:	4618      	mov	r0, r3
 8010020:	3710      	adds	r7, #16
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	20000904 	.word	0x20000904
 801002c:	20000908 	.word	0x20000908
 8010030:	20000a0c 	.word	0x20000a0c

08010034 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010034:	b580      	push	{r7, lr}
 8010036:	b086      	sub	sp, #24
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010040:	2300      	movs	r3, #0
 8010042:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d06e      	beq.n	8010128 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801004a:	4b3a      	ldr	r3, [pc, #232]	; (8010134 <xTaskPriorityDisinherit+0x100>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	693a      	ldr	r2, [r7, #16]
 8010050:	429a      	cmp	r2, r3
 8010052:	d00a      	beq.n	801006a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010058:	f383 8811 	msr	BASEPRI, r3
 801005c:	f3bf 8f6f 	isb	sy
 8010060:	f3bf 8f4f 	dsb	sy
 8010064:	60fb      	str	r3, [r7, #12]
}
 8010066:	bf00      	nop
 8010068:	e7fe      	b.n	8010068 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801006e:	2b00      	cmp	r3, #0
 8010070:	d10a      	bne.n	8010088 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010076:	f383 8811 	msr	BASEPRI, r3
 801007a:	f3bf 8f6f 	isb	sy
 801007e:	f3bf 8f4f 	dsb	sy
 8010082:	60bb      	str	r3, [r7, #8]
}
 8010084:	bf00      	nop
 8010086:	e7fe      	b.n	8010086 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801008c:	1e5a      	subs	r2, r3, #1
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801009a:	429a      	cmp	r2, r3
 801009c:	d044      	beq.n	8010128 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d140      	bne.n	8010128 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	3304      	adds	r3, #4
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7fe f928 	bl	800e300 <uxListRemove>
 80100b0:	4603      	mov	r3, r0
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d115      	bne.n	80100e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ba:	491f      	ldr	r1, [pc, #124]	; (8010138 <xTaskPriorityDisinherit+0x104>)
 80100bc:	4613      	mov	r3, r2
 80100be:	009b      	lsls	r3, r3, #2
 80100c0:	4413      	add	r3, r2
 80100c2:	009b      	lsls	r3, r3, #2
 80100c4:	440b      	add	r3, r1
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d10a      	bne.n	80100e2 <xTaskPriorityDisinherit+0xae>
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100d0:	2201      	movs	r2, #1
 80100d2:	fa02 f303 	lsl.w	r3, r2, r3
 80100d6:	43da      	mvns	r2, r3
 80100d8:	4b18      	ldr	r3, [pc, #96]	; (801013c <xTaskPriorityDisinherit+0x108>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4013      	ands	r3, r2
 80100de:	4a17      	ldr	r2, [pc, #92]	; (801013c <xTaskPriorityDisinherit+0x108>)
 80100e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100ee:	f1c3 0207 	rsb	r2, r3, #7
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100fa:	2201      	movs	r2, #1
 80100fc:	409a      	lsls	r2, r3
 80100fe:	4b0f      	ldr	r3, [pc, #60]	; (801013c <xTaskPriorityDisinherit+0x108>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	4313      	orrs	r3, r2
 8010104:	4a0d      	ldr	r2, [pc, #52]	; (801013c <xTaskPriorityDisinherit+0x108>)
 8010106:	6013      	str	r3, [r2, #0]
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801010c:	4613      	mov	r3, r2
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	4413      	add	r3, r2
 8010112:	009b      	lsls	r3, r3, #2
 8010114:	4a08      	ldr	r2, [pc, #32]	; (8010138 <xTaskPriorityDisinherit+0x104>)
 8010116:	441a      	add	r2, r3
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	3304      	adds	r3, #4
 801011c:	4619      	mov	r1, r3
 801011e:	4610      	mov	r0, r2
 8010120:	f7fe f891 	bl	800e246 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010124:	2301      	movs	r3, #1
 8010126:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010128:	697b      	ldr	r3, [r7, #20]
	}
 801012a:	4618      	mov	r0, r3
 801012c:	3718      	adds	r7, #24
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	20000904 	.word	0x20000904
 8010138:	20000908 	.word	0x20000908
 801013c:	20000a0c 	.word	0x20000a0c

08010140 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010140:	b580      	push	{r7, lr}
 8010142:	b088      	sub	sp, #32
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801014e:	2301      	movs	r3, #1
 8010150:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d077      	beq.n	8010248 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010158:	69bb      	ldr	r3, [r7, #24]
 801015a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801015c:	2b00      	cmp	r3, #0
 801015e:	d10a      	bne.n	8010176 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010164:	f383 8811 	msr	BASEPRI, r3
 8010168:	f3bf 8f6f 	isb	sy
 801016c:	f3bf 8f4f 	dsb	sy
 8010170:	60fb      	str	r3, [r7, #12]
}
 8010172:	bf00      	nop
 8010174:	e7fe      	b.n	8010174 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801017a:	683a      	ldr	r2, [r7, #0]
 801017c:	429a      	cmp	r2, r3
 801017e:	d902      	bls.n	8010186 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	61fb      	str	r3, [r7, #28]
 8010184:	e002      	b.n	801018c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801018a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010190:	69fa      	ldr	r2, [r7, #28]
 8010192:	429a      	cmp	r2, r3
 8010194:	d058      	beq.n	8010248 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010196:	69bb      	ldr	r3, [r7, #24]
 8010198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801019a:	697a      	ldr	r2, [r7, #20]
 801019c:	429a      	cmp	r2, r3
 801019e:	d153      	bne.n	8010248 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80101a0:	4b2b      	ldr	r3, [pc, #172]	; (8010250 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	69ba      	ldr	r2, [r7, #24]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d10a      	bne.n	80101c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80101aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ae:	f383 8811 	msr	BASEPRI, r3
 80101b2:	f3bf 8f6f 	isb	sy
 80101b6:	f3bf 8f4f 	dsb	sy
 80101ba:	60bb      	str	r3, [r7, #8]
}
 80101bc:	bf00      	nop
 80101be:	e7fe      	b.n	80101be <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80101c0:	69bb      	ldr	r3, [r7, #24]
 80101c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	69fa      	ldr	r2, [r7, #28]
 80101ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	699b      	ldr	r3, [r3, #24]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	db04      	blt.n	80101de <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	f1c3 0207 	rsb	r2, r3, #7
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	6959      	ldr	r1, [r3, #20]
 80101e2:	693a      	ldr	r2, [r7, #16]
 80101e4:	4613      	mov	r3, r2
 80101e6:	009b      	lsls	r3, r3, #2
 80101e8:	4413      	add	r3, r2
 80101ea:	009b      	lsls	r3, r3, #2
 80101ec:	4a19      	ldr	r2, [pc, #100]	; (8010254 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80101ee:	4413      	add	r3, r2
 80101f0:	4299      	cmp	r1, r3
 80101f2:	d129      	bne.n	8010248 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101f4:	69bb      	ldr	r3, [r7, #24]
 80101f6:	3304      	adds	r3, #4
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fe f881 	bl	800e300 <uxListRemove>
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d10a      	bne.n	801021a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010204:	69bb      	ldr	r3, [r7, #24]
 8010206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010208:	2201      	movs	r2, #1
 801020a:	fa02 f303 	lsl.w	r3, r2, r3
 801020e:	43da      	mvns	r2, r3
 8010210:	4b11      	ldr	r3, [pc, #68]	; (8010258 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	4013      	ands	r3, r2
 8010216:	4a10      	ldr	r2, [pc, #64]	; (8010258 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010218:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801021a:	69bb      	ldr	r3, [r7, #24]
 801021c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801021e:	2201      	movs	r2, #1
 8010220:	409a      	lsls	r2, r3
 8010222:	4b0d      	ldr	r3, [pc, #52]	; (8010258 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	4313      	orrs	r3, r2
 8010228:	4a0b      	ldr	r2, [pc, #44]	; (8010258 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801022a:	6013      	str	r3, [r2, #0]
 801022c:	69bb      	ldr	r3, [r7, #24]
 801022e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010230:	4613      	mov	r3, r2
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	4413      	add	r3, r2
 8010236:	009b      	lsls	r3, r3, #2
 8010238:	4a06      	ldr	r2, [pc, #24]	; (8010254 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801023a:	441a      	add	r2, r3
 801023c:	69bb      	ldr	r3, [r7, #24]
 801023e:	3304      	adds	r3, #4
 8010240:	4619      	mov	r1, r3
 8010242:	4610      	mov	r0, r2
 8010244:	f7fd ffff 	bl	800e246 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010248:	bf00      	nop
 801024a:	3720      	adds	r7, #32
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	20000904 	.word	0x20000904
 8010254:	20000908 	.word	0x20000908
 8010258:	20000a0c 	.word	0x20000a0c

0801025c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801025c:	b480      	push	{r7}
 801025e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010260:	4b07      	ldr	r3, [pc, #28]	; (8010280 <pvTaskIncrementMutexHeldCount+0x24>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d004      	beq.n	8010272 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010268:	4b05      	ldr	r3, [pc, #20]	; (8010280 <pvTaskIncrementMutexHeldCount+0x24>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801026e:	3201      	adds	r2, #1
 8010270:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8010272:	4b03      	ldr	r3, [pc, #12]	; (8010280 <pvTaskIncrementMutexHeldCount+0x24>)
 8010274:	681b      	ldr	r3, [r3, #0]
	}
 8010276:	4618      	mov	r0, r3
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr
 8010280:	20000904 	.word	0x20000904

08010284 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801028e:	4b29      	ldr	r3, [pc, #164]	; (8010334 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010294:	4b28      	ldr	r3, [pc, #160]	; (8010338 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	3304      	adds	r3, #4
 801029a:	4618      	mov	r0, r3
 801029c:	f7fe f830 	bl	800e300 <uxListRemove>
 80102a0:	4603      	mov	r3, r0
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d10b      	bne.n	80102be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80102a6:	4b24      	ldr	r3, [pc, #144]	; (8010338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ac:	2201      	movs	r2, #1
 80102ae:	fa02 f303 	lsl.w	r3, r2, r3
 80102b2:	43da      	mvns	r2, r3
 80102b4:	4b21      	ldr	r3, [pc, #132]	; (801033c <prvAddCurrentTaskToDelayedList+0xb8>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4013      	ands	r3, r2
 80102ba:	4a20      	ldr	r2, [pc, #128]	; (801033c <prvAddCurrentTaskToDelayedList+0xb8>)
 80102bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c4:	d10a      	bne.n	80102dc <prvAddCurrentTaskToDelayedList+0x58>
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d007      	beq.n	80102dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102cc:	4b1a      	ldr	r3, [pc, #104]	; (8010338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	3304      	adds	r3, #4
 80102d2:	4619      	mov	r1, r3
 80102d4:	481a      	ldr	r0, [pc, #104]	; (8010340 <prvAddCurrentTaskToDelayedList+0xbc>)
 80102d6:	f7fd ffb6 	bl	800e246 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80102da:	e026      	b.n	801032a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80102dc:	68fa      	ldr	r2, [r7, #12]
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4413      	add	r3, r2
 80102e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80102e4:	4b14      	ldr	r3, [pc, #80]	; (8010338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	68ba      	ldr	r2, [r7, #8]
 80102ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80102ec:	68ba      	ldr	r2, [r7, #8]
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d209      	bcs.n	8010308 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102f4:	4b13      	ldr	r3, [pc, #76]	; (8010344 <prvAddCurrentTaskToDelayedList+0xc0>)
 80102f6:	681a      	ldr	r2, [r3, #0]
 80102f8:	4b0f      	ldr	r3, [pc, #60]	; (8010338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	3304      	adds	r3, #4
 80102fe:	4619      	mov	r1, r3
 8010300:	4610      	mov	r0, r2
 8010302:	f7fd ffc4 	bl	800e28e <vListInsert>
}
 8010306:	e010      	b.n	801032a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010308:	4b0f      	ldr	r3, [pc, #60]	; (8010348 <prvAddCurrentTaskToDelayedList+0xc4>)
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	4b0a      	ldr	r3, [pc, #40]	; (8010338 <prvAddCurrentTaskToDelayedList+0xb4>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	3304      	adds	r3, #4
 8010312:	4619      	mov	r1, r3
 8010314:	4610      	mov	r0, r2
 8010316:	f7fd ffba 	bl	800e28e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801031a:	4b0c      	ldr	r3, [pc, #48]	; (801034c <prvAddCurrentTaskToDelayedList+0xc8>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	429a      	cmp	r2, r3
 8010322:	d202      	bcs.n	801032a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010324:	4a09      	ldr	r2, [pc, #36]	; (801034c <prvAddCurrentTaskToDelayedList+0xc8>)
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	6013      	str	r3, [r2, #0]
}
 801032a:	bf00      	nop
 801032c:	3710      	adds	r7, #16
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	20000a08 	.word	0x20000a08
 8010338:	20000904 	.word	0x20000904
 801033c:	20000a0c 	.word	0x20000a0c
 8010340:	200009f0 	.word	0x200009f0
 8010344:	200009c0 	.word	0x200009c0
 8010348:	200009bc 	.word	0x200009bc
 801034c:	20000a24 	.word	0x20000a24

08010350 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010350:	b480      	push	{r7}
 8010352:	b085      	sub	sp, #20
 8010354:	af00      	add	r7, sp, #0
 8010356:	60f8      	str	r0, [r7, #12]
 8010358:	60b9      	str	r1, [r7, #8]
 801035a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	3b04      	subs	r3, #4
 8010360:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	3b04      	subs	r3, #4
 801036e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	f023 0201 	bic.w	r2, r3, #1
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	3b04      	subs	r3, #4
 801037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010380:	4a0c      	ldr	r2, [pc, #48]	; (80103b4 <pxPortInitialiseStack+0x64>)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	3b14      	subs	r3, #20
 801038a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801038c:	687a      	ldr	r2, [r7, #4]
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	3b04      	subs	r3, #4
 8010396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f06f 0202 	mvn.w	r2, #2
 801039e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	3b20      	subs	r3, #32
 80103a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80103a6:	68fb      	ldr	r3, [r7, #12]
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3714      	adds	r7, #20
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr
 80103b4:	080103b9 	.word	0x080103b9

080103b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80103b8:	b480      	push	{r7}
 80103ba:	b085      	sub	sp, #20
 80103bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80103be:	2300      	movs	r3, #0
 80103c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80103c2:	4b12      	ldr	r3, [pc, #72]	; (801040c <prvTaskExitError+0x54>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ca:	d00a      	beq.n	80103e2 <prvTaskExitError+0x2a>
	__asm volatile
 80103cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d0:	f383 8811 	msr	BASEPRI, r3
 80103d4:	f3bf 8f6f 	isb	sy
 80103d8:	f3bf 8f4f 	dsb	sy
 80103dc:	60fb      	str	r3, [r7, #12]
}
 80103de:	bf00      	nop
 80103e0:	e7fe      	b.n	80103e0 <prvTaskExitError+0x28>
	__asm volatile
 80103e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e6:	f383 8811 	msr	BASEPRI, r3
 80103ea:	f3bf 8f6f 	isb	sy
 80103ee:	f3bf 8f4f 	dsb	sy
 80103f2:	60bb      	str	r3, [r7, #8]
}
 80103f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80103f6:	bf00      	nop
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d0fc      	beq.n	80103f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80103fe:	bf00      	nop
 8010400:	bf00      	nop
 8010402:	3714      	adds	r7, #20
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr
 801040c:	20000350 	.word	0x20000350

08010410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010410:	4b07      	ldr	r3, [pc, #28]	; (8010430 <pxCurrentTCBConst2>)
 8010412:	6819      	ldr	r1, [r3, #0]
 8010414:	6808      	ldr	r0, [r1, #0]
 8010416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801041a:	f380 8809 	msr	PSP, r0
 801041e:	f3bf 8f6f 	isb	sy
 8010422:	f04f 0000 	mov.w	r0, #0
 8010426:	f380 8811 	msr	BASEPRI, r0
 801042a:	4770      	bx	lr
 801042c:	f3af 8000 	nop.w

08010430 <pxCurrentTCBConst2>:
 8010430:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010434:	bf00      	nop
 8010436:	bf00      	nop

08010438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010438:	4808      	ldr	r0, [pc, #32]	; (801045c <prvPortStartFirstTask+0x24>)
 801043a:	6800      	ldr	r0, [r0, #0]
 801043c:	6800      	ldr	r0, [r0, #0]
 801043e:	f380 8808 	msr	MSP, r0
 8010442:	f04f 0000 	mov.w	r0, #0
 8010446:	f380 8814 	msr	CONTROL, r0
 801044a:	b662      	cpsie	i
 801044c:	b661      	cpsie	f
 801044e:	f3bf 8f4f 	dsb	sy
 8010452:	f3bf 8f6f 	isb	sy
 8010456:	df00      	svc	0
 8010458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801045a:	bf00      	nop
 801045c:	e000ed08 	.word	0xe000ed08

08010460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b086      	sub	sp, #24
 8010464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010466:	4b46      	ldr	r3, [pc, #280]	; (8010580 <xPortStartScheduler+0x120>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	4a46      	ldr	r2, [pc, #280]	; (8010584 <xPortStartScheduler+0x124>)
 801046c:	4293      	cmp	r3, r2
 801046e:	d10a      	bne.n	8010486 <xPortStartScheduler+0x26>
	__asm volatile
 8010470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010474:	f383 8811 	msr	BASEPRI, r3
 8010478:	f3bf 8f6f 	isb	sy
 801047c:	f3bf 8f4f 	dsb	sy
 8010480:	613b      	str	r3, [r7, #16]
}
 8010482:	bf00      	nop
 8010484:	e7fe      	b.n	8010484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010486:	4b3e      	ldr	r3, [pc, #248]	; (8010580 <xPortStartScheduler+0x120>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	4a3f      	ldr	r2, [pc, #252]	; (8010588 <xPortStartScheduler+0x128>)
 801048c:	4293      	cmp	r3, r2
 801048e:	d10a      	bne.n	80104a6 <xPortStartScheduler+0x46>
	__asm volatile
 8010490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010494:	f383 8811 	msr	BASEPRI, r3
 8010498:	f3bf 8f6f 	isb	sy
 801049c:	f3bf 8f4f 	dsb	sy
 80104a0:	60fb      	str	r3, [r7, #12]
}
 80104a2:	bf00      	nop
 80104a4:	e7fe      	b.n	80104a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80104a6:	4b39      	ldr	r3, [pc, #228]	; (801058c <xPortStartScheduler+0x12c>)
 80104a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	22ff      	movs	r2, #255	; 0xff
 80104b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80104b8:	697b      	ldr	r3, [r7, #20]
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	b2db      	uxtb	r3, r3
 80104be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80104c0:	78fb      	ldrb	r3, [r7, #3]
 80104c2:	b2db      	uxtb	r3, r3
 80104c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80104c8:	b2da      	uxtb	r2, r3
 80104ca:	4b31      	ldr	r3, [pc, #196]	; (8010590 <xPortStartScheduler+0x130>)
 80104cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80104ce:	4b31      	ldr	r3, [pc, #196]	; (8010594 <xPortStartScheduler+0x134>)
 80104d0:	2207      	movs	r2, #7
 80104d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80104d4:	e009      	b.n	80104ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80104d6:	4b2f      	ldr	r3, [pc, #188]	; (8010594 <xPortStartScheduler+0x134>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	3b01      	subs	r3, #1
 80104dc:	4a2d      	ldr	r2, [pc, #180]	; (8010594 <xPortStartScheduler+0x134>)
 80104de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80104e0:	78fb      	ldrb	r3, [r7, #3]
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	005b      	lsls	r3, r3, #1
 80104e6:	b2db      	uxtb	r3, r3
 80104e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80104ea:	78fb      	ldrb	r3, [r7, #3]
 80104ec:	b2db      	uxtb	r3, r3
 80104ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104f2:	2b80      	cmp	r3, #128	; 0x80
 80104f4:	d0ef      	beq.n	80104d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80104f6:	4b27      	ldr	r3, [pc, #156]	; (8010594 <xPortStartScheduler+0x134>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	f1c3 0307 	rsb	r3, r3, #7
 80104fe:	2b04      	cmp	r3, #4
 8010500:	d00a      	beq.n	8010518 <xPortStartScheduler+0xb8>
	__asm volatile
 8010502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010506:	f383 8811 	msr	BASEPRI, r3
 801050a:	f3bf 8f6f 	isb	sy
 801050e:	f3bf 8f4f 	dsb	sy
 8010512:	60bb      	str	r3, [r7, #8]
}
 8010514:	bf00      	nop
 8010516:	e7fe      	b.n	8010516 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010518:	4b1e      	ldr	r3, [pc, #120]	; (8010594 <xPortStartScheduler+0x134>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	021b      	lsls	r3, r3, #8
 801051e:	4a1d      	ldr	r2, [pc, #116]	; (8010594 <xPortStartScheduler+0x134>)
 8010520:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010522:	4b1c      	ldr	r3, [pc, #112]	; (8010594 <xPortStartScheduler+0x134>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801052a:	4a1a      	ldr	r2, [pc, #104]	; (8010594 <xPortStartScheduler+0x134>)
 801052c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	b2da      	uxtb	r2, r3
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010536:	4b18      	ldr	r3, [pc, #96]	; (8010598 <xPortStartScheduler+0x138>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	4a17      	ldr	r2, [pc, #92]	; (8010598 <xPortStartScheduler+0x138>)
 801053c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010542:	4b15      	ldr	r3, [pc, #84]	; (8010598 <xPortStartScheduler+0x138>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4a14      	ldr	r2, [pc, #80]	; (8010598 <xPortStartScheduler+0x138>)
 8010548:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801054c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801054e:	f000 f8dd 	bl	801070c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010552:	4b12      	ldr	r3, [pc, #72]	; (801059c <xPortStartScheduler+0x13c>)
 8010554:	2200      	movs	r2, #0
 8010556:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010558:	f000 f8fc 	bl	8010754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801055c:	4b10      	ldr	r3, [pc, #64]	; (80105a0 <xPortStartScheduler+0x140>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	4a0f      	ldr	r2, [pc, #60]	; (80105a0 <xPortStartScheduler+0x140>)
 8010562:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010566:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010568:	f7ff ff66 	bl	8010438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801056c:	f7ff fa88 	bl	800fa80 <vTaskSwitchContext>
	prvTaskExitError();
 8010570:	f7ff ff22 	bl	80103b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010574:	2300      	movs	r3, #0
}
 8010576:	4618      	mov	r0, r3
 8010578:	3718      	adds	r7, #24
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}
 801057e:	bf00      	nop
 8010580:	e000ed00 	.word	0xe000ed00
 8010584:	410fc271 	.word	0x410fc271
 8010588:	410fc270 	.word	0x410fc270
 801058c:	e000e400 	.word	0xe000e400
 8010590:	20000a30 	.word	0x20000a30
 8010594:	20000a34 	.word	0x20000a34
 8010598:	e000ed20 	.word	0xe000ed20
 801059c:	20000350 	.word	0x20000350
 80105a0:	e000ef34 	.word	0xe000ef34

080105a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80105a4:	b480      	push	{r7}
 80105a6:	b083      	sub	sp, #12
 80105a8:	af00      	add	r7, sp, #0
	__asm volatile
 80105aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ae:	f383 8811 	msr	BASEPRI, r3
 80105b2:	f3bf 8f6f 	isb	sy
 80105b6:	f3bf 8f4f 	dsb	sy
 80105ba:	607b      	str	r3, [r7, #4]
}
 80105bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80105be:	4b0f      	ldr	r3, [pc, #60]	; (80105fc <vPortEnterCritical+0x58>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	3301      	adds	r3, #1
 80105c4:	4a0d      	ldr	r2, [pc, #52]	; (80105fc <vPortEnterCritical+0x58>)
 80105c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80105c8:	4b0c      	ldr	r3, [pc, #48]	; (80105fc <vPortEnterCritical+0x58>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d10f      	bne.n	80105f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80105d0:	4b0b      	ldr	r3, [pc, #44]	; (8010600 <vPortEnterCritical+0x5c>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	b2db      	uxtb	r3, r3
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d00a      	beq.n	80105f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80105da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105de:	f383 8811 	msr	BASEPRI, r3
 80105e2:	f3bf 8f6f 	isb	sy
 80105e6:	f3bf 8f4f 	dsb	sy
 80105ea:	603b      	str	r3, [r7, #0]
}
 80105ec:	bf00      	nop
 80105ee:	e7fe      	b.n	80105ee <vPortEnterCritical+0x4a>
	}
}
 80105f0:	bf00      	nop
 80105f2:	370c      	adds	r7, #12
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr
 80105fc:	20000350 	.word	0x20000350
 8010600:	e000ed04 	.word	0xe000ed04

08010604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010604:	b480      	push	{r7}
 8010606:	b083      	sub	sp, #12
 8010608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801060a:	4b12      	ldr	r3, [pc, #72]	; (8010654 <vPortExitCritical+0x50>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d10a      	bne.n	8010628 <vPortExitCritical+0x24>
	__asm volatile
 8010612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010616:	f383 8811 	msr	BASEPRI, r3
 801061a:	f3bf 8f6f 	isb	sy
 801061e:	f3bf 8f4f 	dsb	sy
 8010622:	607b      	str	r3, [r7, #4]
}
 8010624:	bf00      	nop
 8010626:	e7fe      	b.n	8010626 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010628:	4b0a      	ldr	r3, [pc, #40]	; (8010654 <vPortExitCritical+0x50>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	3b01      	subs	r3, #1
 801062e:	4a09      	ldr	r2, [pc, #36]	; (8010654 <vPortExitCritical+0x50>)
 8010630:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010632:	4b08      	ldr	r3, [pc, #32]	; (8010654 <vPortExitCritical+0x50>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d105      	bne.n	8010646 <vPortExitCritical+0x42>
 801063a:	2300      	movs	r3, #0
 801063c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	f383 8811 	msr	BASEPRI, r3
}
 8010644:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010646:	bf00      	nop
 8010648:	370c      	adds	r7, #12
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr
 8010652:	bf00      	nop
 8010654:	20000350 	.word	0x20000350
	...

08010660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010660:	f3ef 8009 	mrs	r0, PSP
 8010664:	f3bf 8f6f 	isb	sy
 8010668:	4b15      	ldr	r3, [pc, #84]	; (80106c0 <pxCurrentTCBConst>)
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	f01e 0f10 	tst.w	lr, #16
 8010670:	bf08      	it	eq
 8010672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801067a:	6010      	str	r0, [r2, #0]
 801067c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010684:	f380 8811 	msr	BASEPRI, r0
 8010688:	f3bf 8f4f 	dsb	sy
 801068c:	f3bf 8f6f 	isb	sy
 8010690:	f7ff f9f6 	bl	800fa80 <vTaskSwitchContext>
 8010694:	f04f 0000 	mov.w	r0, #0
 8010698:	f380 8811 	msr	BASEPRI, r0
 801069c:	bc09      	pop	{r0, r3}
 801069e:	6819      	ldr	r1, [r3, #0]
 80106a0:	6808      	ldr	r0, [r1, #0]
 80106a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106a6:	f01e 0f10 	tst.w	lr, #16
 80106aa:	bf08      	it	eq
 80106ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80106b0:	f380 8809 	msr	PSP, r0
 80106b4:	f3bf 8f6f 	isb	sy
 80106b8:	4770      	bx	lr
 80106ba:	bf00      	nop
 80106bc:	f3af 8000 	nop.w

080106c0 <pxCurrentTCBConst>:
 80106c0:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80106c4:	bf00      	nop
 80106c6:	bf00      	nop

080106c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b082      	sub	sp, #8
 80106cc:	af00      	add	r7, sp, #0
	__asm volatile
 80106ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d2:	f383 8811 	msr	BASEPRI, r3
 80106d6:	f3bf 8f6f 	isb	sy
 80106da:	f3bf 8f4f 	dsb	sy
 80106de:	607b      	str	r3, [r7, #4]
}
 80106e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80106e2:	f7ff f915 	bl	800f910 <xTaskIncrementTick>
 80106e6:	4603      	mov	r3, r0
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d003      	beq.n	80106f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80106ec:	4b06      	ldr	r3, [pc, #24]	; (8010708 <SysTick_Handler+0x40>)
 80106ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106f2:	601a      	str	r2, [r3, #0]
 80106f4:	2300      	movs	r3, #0
 80106f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	f383 8811 	msr	BASEPRI, r3
}
 80106fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010700:	bf00      	nop
 8010702:	3708      	adds	r7, #8
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	e000ed04 	.word	0xe000ed04

0801070c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801070c:	b480      	push	{r7}
 801070e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010710:	4b0b      	ldr	r3, [pc, #44]	; (8010740 <vPortSetupTimerInterrupt+0x34>)
 8010712:	2200      	movs	r2, #0
 8010714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010716:	4b0b      	ldr	r3, [pc, #44]	; (8010744 <vPortSetupTimerInterrupt+0x38>)
 8010718:	2200      	movs	r2, #0
 801071a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801071c:	4b0a      	ldr	r3, [pc, #40]	; (8010748 <vPortSetupTimerInterrupt+0x3c>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	4a0a      	ldr	r2, [pc, #40]	; (801074c <vPortSetupTimerInterrupt+0x40>)
 8010722:	fba2 2303 	umull	r2, r3, r2, r3
 8010726:	099b      	lsrs	r3, r3, #6
 8010728:	4a09      	ldr	r2, [pc, #36]	; (8010750 <vPortSetupTimerInterrupt+0x44>)
 801072a:	3b01      	subs	r3, #1
 801072c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801072e:	4b04      	ldr	r3, [pc, #16]	; (8010740 <vPortSetupTimerInterrupt+0x34>)
 8010730:	2207      	movs	r2, #7
 8010732:	601a      	str	r2, [r3, #0]
}
 8010734:	bf00      	nop
 8010736:	46bd      	mov	sp, r7
 8010738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073c:	4770      	bx	lr
 801073e:	bf00      	nop
 8010740:	e000e010 	.word	0xe000e010
 8010744:	e000e018 	.word	0xe000e018
 8010748:	20000344 	.word	0x20000344
 801074c:	10624dd3 	.word	0x10624dd3
 8010750:	e000e014 	.word	0xe000e014

08010754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010764 <vPortEnableVFP+0x10>
 8010758:	6801      	ldr	r1, [r0, #0]
 801075a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801075e:	6001      	str	r1, [r0, #0]
 8010760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010762:	bf00      	nop
 8010764:	e000ed88 	.word	0xe000ed88

08010768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010768:	b480      	push	{r7}
 801076a:	b085      	sub	sp, #20
 801076c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801076e:	f3ef 8305 	mrs	r3, IPSR
 8010772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	2b0f      	cmp	r3, #15
 8010778:	d914      	bls.n	80107a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801077a:	4a17      	ldr	r2, [pc, #92]	; (80107d8 <vPortValidateInterruptPriority+0x70>)
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	4413      	add	r3, r2
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010784:	4b15      	ldr	r3, [pc, #84]	; (80107dc <vPortValidateInterruptPriority+0x74>)
 8010786:	781b      	ldrb	r3, [r3, #0]
 8010788:	7afa      	ldrb	r2, [r7, #11]
 801078a:	429a      	cmp	r2, r3
 801078c:	d20a      	bcs.n	80107a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801078e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010792:	f383 8811 	msr	BASEPRI, r3
 8010796:	f3bf 8f6f 	isb	sy
 801079a:	f3bf 8f4f 	dsb	sy
 801079e:	607b      	str	r3, [r7, #4]
}
 80107a0:	bf00      	nop
 80107a2:	e7fe      	b.n	80107a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80107a4:	4b0e      	ldr	r3, [pc, #56]	; (80107e0 <vPortValidateInterruptPriority+0x78>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80107ac:	4b0d      	ldr	r3, [pc, #52]	; (80107e4 <vPortValidateInterruptPriority+0x7c>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d90a      	bls.n	80107ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80107b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b8:	f383 8811 	msr	BASEPRI, r3
 80107bc:	f3bf 8f6f 	isb	sy
 80107c0:	f3bf 8f4f 	dsb	sy
 80107c4:	603b      	str	r3, [r7, #0]
}
 80107c6:	bf00      	nop
 80107c8:	e7fe      	b.n	80107c8 <vPortValidateInterruptPriority+0x60>
	}
 80107ca:	bf00      	nop
 80107cc:	3714      	adds	r7, #20
 80107ce:	46bd      	mov	sp, r7
 80107d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d4:	4770      	bx	lr
 80107d6:	bf00      	nop
 80107d8:	e000e3f0 	.word	0xe000e3f0
 80107dc:	20000a30 	.word	0x20000a30
 80107e0:	e000ed0c 	.word	0xe000ed0c
 80107e4:	20000a34 	.word	0x20000a34

080107e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b08a      	sub	sp, #40	; 0x28
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80107f0:	2300      	movs	r3, #0
 80107f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80107f4:	f7fe ffc0 	bl	800f778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80107f8:	4b5b      	ldr	r3, [pc, #364]	; (8010968 <pvPortMalloc+0x180>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d101      	bne.n	8010804 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010800:	f000 f92c 	bl	8010a5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010804:	4b59      	ldr	r3, [pc, #356]	; (801096c <pvPortMalloc+0x184>)
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	4013      	ands	r3, r2
 801080c:	2b00      	cmp	r3, #0
 801080e:	f040 8093 	bne.w	8010938 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d01d      	beq.n	8010854 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010818:	2208      	movs	r2, #8
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	4413      	add	r3, r2
 801081e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f003 0307 	and.w	r3, r3, #7
 8010826:	2b00      	cmp	r3, #0
 8010828:	d014      	beq.n	8010854 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f023 0307 	bic.w	r3, r3, #7
 8010830:	3308      	adds	r3, #8
 8010832:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f003 0307 	and.w	r3, r3, #7
 801083a:	2b00      	cmp	r3, #0
 801083c:	d00a      	beq.n	8010854 <pvPortMalloc+0x6c>
	__asm volatile
 801083e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010842:	f383 8811 	msr	BASEPRI, r3
 8010846:	f3bf 8f6f 	isb	sy
 801084a:	f3bf 8f4f 	dsb	sy
 801084e:	617b      	str	r3, [r7, #20]
}
 8010850:	bf00      	nop
 8010852:	e7fe      	b.n	8010852 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d06e      	beq.n	8010938 <pvPortMalloc+0x150>
 801085a:	4b45      	ldr	r3, [pc, #276]	; (8010970 <pvPortMalloc+0x188>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	429a      	cmp	r2, r3
 8010862:	d869      	bhi.n	8010938 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010864:	4b43      	ldr	r3, [pc, #268]	; (8010974 <pvPortMalloc+0x18c>)
 8010866:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010868:	4b42      	ldr	r3, [pc, #264]	; (8010974 <pvPortMalloc+0x18c>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801086e:	e004      	b.n	801087a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010872:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	429a      	cmp	r2, r3
 8010882:	d903      	bls.n	801088c <pvPortMalloc+0xa4>
 8010884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d1f1      	bne.n	8010870 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801088c:	4b36      	ldr	r3, [pc, #216]	; (8010968 <pvPortMalloc+0x180>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010892:	429a      	cmp	r2, r3
 8010894:	d050      	beq.n	8010938 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010896:	6a3b      	ldr	r3, [r7, #32]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	2208      	movs	r2, #8
 801089c:	4413      	add	r3, r2
 801089e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80108a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a2:	681a      	ldr	r2, [r3, #0]
 80108a4:	6a3b      	ldr	r3, [r7, #32]
 80108a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80108a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108aa:	685a      	ldr	r2, [r3, #4]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	1ad2      	subs	r2, r2, r3
 80108b0:	2308      	movs	r3, #8
 80108b2:	005b      	lsls	r3, r3, #1
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d91f      	bls.n	80108f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80108b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	4413      	add	r3, r2
 80108be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80108c0:	69bb      	ldr	r3, [r7, #24]
 80108c2:	f003 0307 	and.w	r3, r3, #7
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d00a      	beq.n	80108e0 <pvPortMalloc+0xf8>
	__asm volatile
 80108ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ce:	f383 8811 	msr	BASEPRI, r3
 80108d2:	f3bf 8f6f 	isb	sy
 80108d6:	f3bf 8f4f 	dsb	sy
 80108da:	613b      	str	r3, [r7, #16]
}
 80108dc:	bf00      	nop
 80108de:	e7fe      	b.n	80108de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80108e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e2:	685a      	ldr	r2, [r3, #4]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	1ad2      	subs	r2, r2, r3
 80108e8:	69bb      	ldr	r3, [r7, #24]
 80108ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80108ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ee:	687a      	ldr	r2, [r7, #4]
 80108f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80108f2:	69b8      	ldr	r0, [r7, #24]
 80108f4:	f000 f914 	bl	8010b20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80108f8:	4b1d      	ldr	r3, [pc, #116]	; (8010970 <pvPortMalloc+0x188>)
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fe:	685b      	ldr	r3, [r3, #4]
 8010900:	1ad3      	subs	r3, r2, r3
 8010902:	4a1b      	ldr	r2, [pc, #108]	; (8010970 <pvPortMalloc+0x188>)
 8010904:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010906:	4b1a      	ldr	r3, [pc, #104]	; (8010970 <pvPortMalloc+0x188>)
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	4b1b      	ldr	r3, [pc, #108]	; (8010978 <pvPortMalloc+0x190>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	429a      	cmp	r2, r3
 8010910:	d203      	bcs.n	801091a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010912:	4b17      	ldr	r3, [pc, #92]	; (8010970 <pvPortMalloc+0x188>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4a18      	ldr	r2, [pc, #96]	; (8010978 <pvPortMalloc+0x190>)
 8010918:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091c:	685a      	ldr	r2, [r3, #4]
 801091e:	4b13      	ldr	r3, [pc, #76]	; (801096c <pvPortMalloc+0x184>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	431a      	orrs	r2, r3
 8010924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010926:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092a:	2200      	movs	r2, #0
 801092c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801092e:	4b13      	ldr	r3, [pc, #76]	; (801097c <pvPortMalloc+0x194>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	3301      	adds	r3, #1
 8010934:	4a11      	ldr	r2, [pc, #68]	; (801097c <pvPortMalloc+0x194>)
 8010936:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010938:	f7fe ff2c 	bl	800f794 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	f003 0307 	and.w	r3, r3, #7
 8010942:	2b00      	cmp	r3, #0
 8010944:	d00a      	beq.n	801095c <pvPortMalloc+0x174>
	__asm volatile
 8010946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801094a:	f383 8811 	msr	BASEPRI, r3
 801094e:	f3bf 8f6f 	isb	sy
 8010952:	f3bf 8f4f 	dsb	sy
 8010956:	60fb      	str	r3, [r7, #12]
}
 8010958:	bf00      	nop
 801095a:	e7fe      	b.n	801095a <pvPortMalloc+0x172>
	return pvReturn;
 801095c:	69fb      	ldr	r3, [r7, #28]
}
 801095e:	4618      	mov	r0, r3
 8010960:	3728      	adds	r7, #40	; 0x28
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
 8010966:	bf00      	nop
 8010968:	20006d50 	.word	0x20006d50
 801096c:	20006d64 	.word	0x20006d64
 8010970:	20006d54 	.word	0x20006d54
 8010974:	20006d48 	.word	0x20006d48
 8010978:	20006d58 	.word	0x20006d58
 801097c:	20006d5c 	.word	0x20006d5c

08010980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b086      	sub	sp, #24
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d04d      	beq.n	8010a2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010992:	2308      	movs	r3, #8
 8010994:	425b      	negs	r3, r3
 8010996:	697a      	ldr	r2, [r7, #20]
 8010998:	4413      	add	r3, r2
 801099a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	685a      	ldr	r2, [r3, #4]
 80109a4:	4b24      	ldr	r3, [pc, #144]	; (8010a38 <vPortFree+0xb8>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4013      	ands	r3, r2
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d10a      	bne.n	80109c4 <vPortFree+0x44>
	__asm volatile
 80109ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b2:	f383 8811 	msr	BASEPRI, r3
 80109b6:	f3bf 8f6f 	isb	sy
 80109ba:	f3bf 8f4f 	dsb	sy
 80109be:	60fb      	str	r3, [r7, #12]
}
 80109c0:	bf00      	nop
 80109c2:	e7fe      	b.n	80109c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d00a      	beq.n	80109e2 <vPortFree+0x62>
	__asm volatile
 80109cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d0:	f383 8811 	msr	BASEPRI, r3
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	f3bf 8f4f 	dsb	sy
 80109dc:	60bb      	str	r3, [r7, #8]
}
 80109de:	bf00      	nop
 80109e0:	e7fe      	b.n	80109e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80109e2:	693b      	ldr	r3, [r7, #16]
 80109e4:	685a      	ldr	r2, [r3, #4]
 80109e6:	4b14      	ldr	r3, [pc, #80]	; (8010a38 <vPortFree+0xb8>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	4013      	ands	r3, r2
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d01e      	beq.n	8010a2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d11a      	bne.n	8010a2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	685a      	ldr	r2, [r3, #4]
 80109fc:	4b0e      	ldr	r3, [pc, #56]	; (8010a38 <vPortFree+0xb8>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	43db      	mvns	r3, r3
 8010a02:	401a      	ands	r2, r3
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010a08:	f7fe feb6 	bl	800f778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010a0c:	693b      	ldr	r3, [r7, #16]
 8010a0e:	685a      	ldr	r2, [r3, #4]
 8010a10:	4b0a      	ldr	r3, [pc, #40]	; (8010a3c <vPortFree+0xbc>)
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	4413      	add	r3, r2
 8010a16:	4a09      	ldr	r2, [pc, #36]	; (8010a3c <vPortFree+0xbc>)
 8010a18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010a1a:	6938      	ldr	r0, [r7, #16]
 8010a1c:	f000 f880 	bl	8010b20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010a20:	4b07      	ldr	r3, [pc, #28]	; (8010a40 <vPortFree+0xc0>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	3301      	adds	r3, #1
 8010a26:	4a06      	ldr	r2, [pc, #24]	; (8010a40 <vPortFree+0xc0>)
 8010a28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010a2a:	f7fe feb3 	bl	800f794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010a2e:	bf00      	nop
 8010a30:	3718      	adds	r7, #24
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	20006d64 	.word	0x20006d64
 8010a3c:	20006d54 	.word	0x20006d54
 8010a40:	20006d60 	.word	0x20006d60

08010a44 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8010a44:	b480      	push	{r7}
 8010a46:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8010a48:	4b03      	ldr	r3, [pc, #12]	; (8010a58 <xPortGetFreeHeapSize+0x14>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop
 8010a58:	20006d54 	.word	0x20006d54

08010a5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b085      	sub	sp, #20
 8010a60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010a62:	f246 3310 	movw	r3, #25360	; 0x6310
 8010a66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010a68:	4b27      	ldr	r3, [pc, #156]	; (8010b08 <prvHeapInit+0xac>)
 8010a6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	f003 0307 	and.w	r3, r3, #7
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d00c      	beq.n	8010a90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	3307      	adds	r3, #7
 8010a7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	f023 0307 	bic.w	r3, r3, #7
 8010a82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010a84:	68ba      	ldr	r2, [r7, #8]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	1ad3      	subs	r3, r2, r3
 8010a8a:	4a1f      	ldr	r2, [pc, #124]	; (8010b08 <prvHeapInit+0xac>)
 8010a8c:	4413      	add	r3, r2
 8010a8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010a94:	4a1d      	ldr	r2, [pc, #116]	; (8010b0c <prvHeapInit+0xb0>)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010a9a:	4b1c      	ldr	r3, [pc, #112]	; (8010b0c <prvHeapInit+0xb0>)
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	68ba      	ldr	r2, [r7, #8]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010aa8:	2208      	movs	r2, #8
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	1a9b      	subs	r3, r3, r2
 8010aae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	f023 0307 	bic.w	r3, r3, #7
 8010ab6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	4a15      	ldr	r2, [pc, #84]	; (8010b10 <prvHeapInit+0xb4>)
 8010abc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010abe:	4b14      	ldr	r3, [pc, #80]	; (8010b10 <prvHeapInit+0xb4>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010ac6:	4b12      	ldr	r3, [pc, #72]	; (8010b10 <prvHeapInit+0xb4>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	2200      	movs	r2, #0
 8010acc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	68fa      	ldr	r2, [r7, #12]
 8010ad6:	1ad2      	subs	r2, r2, r3
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010adc:	4b0c      	ldr	r3, [pc, #48]	; (8010b10 <prvHeapInit+0xb4>)
 8010ade:	681a      	ldr	r2, [r3, #0]
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	685b      	ldr	r3, [r3, #4]
 8010ae8:	4a0a      	ldr	r2, [pc, #40]	; (8010b14 <prvHeapInit+0xb8>)
 8010aea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	685b      	ldr	r3, [r3, #4]
 8010af0:	4a09      	ldr	r2, [pc, #36]	; (8010b18 <prvHeapInit+0xbc>)
 8010af2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010af4:	4b09      	ldr	r3, [pc, #36]	; (8010b1c <prvHeapInit+0xc0>)
 8010af6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010afa:	601a      	str	r2, [r3, #0]
}
 8010afc:	bf00      	nop
 8010afe:	3714      	adds	r7, #20
 8010b00:	46bd      	mov	sp, r7
 8010b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b06:	4770      	bx	lr
 8010b08:	20000a38 	.word	0x20000a38
 8010b0c:	20006d48 	.word	0x20006d48
 8010b10:	20006d50 	.word	0x20006d50
 8010b14:	20006d58 	.word	0x20006d58
 8010b18:	20006d54 	.word	0x20006d54
 8010b1c:	20006d64 	.word	0x20006d64

08010b20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010b20:	b480      	push	{r7}
 8010b22:	b085      	sub	sp, #20
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010b28:	4b28      	ldr	r3, [pc, #160]	; (8010bcc <prvInsertBlockIntoFreeList+0xac>)
 8010b2a:	60fb      	str	r3, [r7, #12]
 8010b2c:	e002      	b.n	8010b34 <prvInsertBlockIntoFreeList+0x14>
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	60fb      	str	r3, [r7, #12]
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	687a      	ldr	r2, [r7, #4]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d8f7      	bhi.n	8010b2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	685b      	ldr	r3, [r3, #4]
 8010b46:	68ba      	ldr	r2, [r7, #8]
 8010b48:	4413      	add	r3, r2
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d108      	bne.n	8010b62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	685a      	ldr	r2, [r3, #4]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	441a      	add	r2, r3
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	68ba      	ldr	r2, [r7, #8]
 8010b6c:	441a      	add	r2, r3
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d118      	bne.n	8010ba8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	4b15      	ldr	r3, [pc, #84]	; (8010bd0 <prvInsertBlockIntoFreeList+0xb0>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d00d      	beq.n	8010b9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	685a      	ldr	r2, [r3, #4]
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	441a      	add	r2, r3
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	681a      	ldr	r2, [r3, #0]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	601a      	str	r2, [r3, #0]
 8010b9c:	e008      	b.n	8010bb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010b9e:	4b0c      	ldr	r3, [pc, #48]	; (8010bd0 <prvInsertBlockIntoFreeList+0xb0>)
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	601a      	str	r2, [r3, #0]
 8010ba6:	e003      	b.n	8010bb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010bb0:	68fa      	ldr	r2, [r7, #12]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d002      	beq.n	8010bbe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	687a      	ldr	r2, [r7, #4]
 8010bbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010bbe:	bf00      	nop
 8010bc0:	3714      	adds	r7, #20
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop
 8010bcc:	20006d48 	.word	0x20006d48
 8010bd0:	20006d50 	.word	0x20006d50

08010bd4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	330c      	adds	r3, #12
 8010be4:	461a      	mov	r2, r3
 8010be6:	6839      	ldr	r1, [r7, #0]
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f001 fff3 	bl	8012bd4 <tcpip_send_msg_wait_sem>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d103      	bne.n	8010c02 <netconn_apimsg+0x2e>
    return apimsg->err;
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010c00:	e001      	b.n	8010c06 <netconn_apimsg+0x32>
  }
  return err;
 8010c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3710      	adds	r7, #16
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
	...

08010c10 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b08c      	sub	sp, #48	; 0x30
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	4603      	mov	r3, r0
 8010c18:	603a      	str	r2, [r7, #0]
 8010c1a:	71fb      	strb	r3, [r7, #7]
 8010c1c:	460b      	mov	r3, r1
 8010c1e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8010c20:	79fb      	ldrb	r3, [r7, #7]
 8010c22:	6839      	ldr	r1, [r7, #0]
 8010c24:	4618      	mov	r0, r3
 8010c26:	f000 ff21 	bl	8011a6c <netconn_alloc>
 8010c2a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8010c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d054      	beq.n	8010cdc <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8010c32:	79bb      	ldrb	r3, [r7, #6]
 8010c34:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8010c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c38:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8010c3a:	f107 0308 	add.w	r3, r7, #8
 8010c3e:	4619      	mov	r1, r3
 8010c40:	4829      	ldr	r0, [pc, #164]	; (8010ce8 <netconn_new_with_proto_and_callback+0xd8>)
 8010c42:	f7ff ffc7 	bl	8010bd4 <netconn_apimsg>
 8010c46:	4603      	mov	r3, r0
 8010c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8010c4c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d043      	beq.n	8010cdc <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8010c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d005      	beq.n	8010c68 <netconn_new_with_proto_and_callback+0x58>
 8010c5c:	4b23      	ldr	r3, [pc, #140]	; (8010cec <netconn_new_with_proto_and_callback+0xdc>)
 8010c5e:	22a3      	movs	r2, #163	; 0xa3
 8010c60:	4923      	ldr	r1, [pc, #140]	; (8010cf0 <netconn_new_with_proto_and_callback+0xe0>)
 8010c62:	4824      	ldr	r0, [pc, #144]	; (8010cf4 <netconn_new_with_proto_and_callback+0xe4>)
 8010c64:	f00e f94a 	bl	801eefc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8010c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6a:	3310      	adds	r3, #16
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f00c ff88 	bl	801db82 <sys_mbox_valid>
 8010c72:	4603      	mov	r3, r0
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d105      	bne.n	8010c84 <netconn_new_with_proto_and_callback+0x74>
 8010c78:	4b1c      	ldr	r3, [pc, #112]	; (8010cec <netconn_new_with_proto_and_callback+0xdc>)
 8010c7a:	22a4      	movs	r2, #164	; 0xa4
 8010c7c:	491e      	ldr	r1, [pc, #120]	; (8010cf8 <netconn_new_with_proto_and_callback+0xe8>)
 8010c7e:	481d      	ldr	r0, [pc, #116]	; (8010cf4 <netconn_new_with_proto_and_callback+0xe4>)
 8010c80:	f00e f93c 	bl	801eefc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8010c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c86:	3314      	adds	r3, #20
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f00c ff7a 	bl	801db82 <sys_mbox_valid>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d005      	beq.n	8010ca0 <netconn_new_with_proto_and_callback+0x90>
 8010c94:	4b15      	ldr	r3, [pc, #84]	; (8010cec <netconn_new_with_proto_and_callback+0xdc>)
 8010c96:	22a6      	movs	r2, #166	; 0xa6
 8010c98:	4918      	ldr	r1, [pc, #96]	; (8010cfc <netconn_new_with_proto_and_callback+0xec>)
 8010c9a:	4816      	ldr	r0, [pc, #88]	; (8010cf4 <netconn_new_with_proto_and_callback+0xe4>)
 8010c9c:	f00e f92e 	bl	801eefc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8010ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca2:	330c      	adds	r3, #12
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f00c fffd 	bl	801dca4 <sys_sem_valid>
 8010caa:	4603      	mov	r3, r0
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d105      	bne.n	8010cbc <netconn_new_with_proto_and_callback+0xac>
 8010cb0:	4b0e      	ldr	r3, [pc, #56]	; (8010cec <netconn_new_with_proto_and_callback+0xdc>)
 8010cb2:	22a9      	movs	r2, #169	; 0xa9
 8010cb4:	4912      	ldr	r1, [pc, #72]	; (8010d00 <netconn_new_with_proto_and_callback+0xf0>)
 8010cb6:	480f      	ldr	r0, [pc, #60]	; (8010cf4 <netconn_new_with_proto_and_callback+0xe4>)
 8010cb8:	f00e f920 	bl	801eefc <iprintf>
      sys_sem_free(&conn->op_completed);
 8010cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cbe:	330c      	adds	r3, #12
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f00c ffe2 	bl	801dc8a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8010cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc8:	3310      	adds	r3, #16
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f00c fed2 	bl	801da74 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8010cd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010cd2:	2007      	movs	r0, #7
 8010cd4:	f002 fce6 	bl	80136a4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	e000      	b.n	8010cde <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8010cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3730      	adds	r7, #48	; 0x30
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	08011a41 	.word	0x08011a41
 8010cec:	080234a8 	.word	0x080234a8
 8010cf0:	080234dc 	.word	0x080234dc
 8010cf4:	08023500 	.word	0x08023500
 8010cf8:	08023528 	.word	0x08023528
 8010cfc:	08023540 	.word	0x08023540
 8010d00:	08023564 	.word	0x08023564

08010d04 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b08c      	sub	sp, #48	; 0x30
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d101      	bne.n	8010d16 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8010d12:	2300      	movs	r3, #0
 8010d14:	e014      	b.n	8010d40 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010d1a:	2329      	movs	r3, #41	; 0x29
 8010d1c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8010d1e:	f107 030c 	add.w	r3, r7, #12
 8010d22:	4619      	mov	r1, r3
 8010d24:	4808      	ldr	r0, [pc, #32]	; (8010d48 <netconn_prepare_delete+0x44>)
 8010d26:	f7ff ff55 	bl	8010bd4 <netconn_apimsg>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8010d30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d002      	beq.n	8010d3e <netconn_prepare_delete+0x3a>
    return err;
 8010d38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010d3c:	e000      	b.n	8010d40 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8010d3e:	2300      	movs	r3, #0
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3730      	adds	r7, #48	; 0x30
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	08011fa5 	.word	0x08011fa5

08010d4c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b084      	sub	sp, #16
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d101      	bne.n	8010d5e <netconn_delete+0x12>
    return ERR_OK;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	e00d      	b.n	8010d7a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f7ff ffd0 	bl	8010d04 <netconn_prepare_delete>
 8010d64:	4603      	mov	r3, r0
 8010d66:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8010d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d102      	bne.n	8010d76 <netconn_delete+0x2a>
    netconn_free(conn);
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f000 fee9 	bl	8011b48 <netconn_free>
  }
  return err;
 8010d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}
	...

08010d84 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b08e      	sub	sp, #56	; 0x38
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	4613      	mov	r3, r2
 8010d90:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d109      	bne.n	8010dac <netconn_bind+0x28>
 8010d98:	4b11      	ldr	r3, [pc, #68]	; (8010de0 <netconn_bind+0x5c>)
 8010d9a:	f44f 729c 	mov.w	r2, #312	; 0x138
 8010d9e:	4911      	ldr	r1, [pc, #68]	; (8010de4 <netconn_bind+0x60>)
 8010da0:	4811      	ldr	r0, [pc, #68]	; (8010de8 <netconn_bind+0x64>)
 8010da2:	f00e f8ab 	bl	801eefc <iprintf>
 8010da6:	f06f 030f 	mvn.w	r3, #15
 8010daa:	e015      	b.n	8010dd8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d101      	bne.n	8010db6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8010db2:	4b0e      	ldr	r3, [pc, #56]	; (8010dec <netconn_bind+0x68>)
 8010db4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8010dbe:	88fb      	ldrh	r3, [r7, #6]
 8010dc0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8010dc2:	f107 0314 	add.w	r3, r7, #20
 8010dc6:	4619      	mov	r1, r3
 8010dc8:	4809      	ldr	r0, [pc, #36]	; (8010df0 <netconn_bind+0x6c>)
 8010dca:	f7ff ff03 	bl	8010bd4 <netconn_apimsg>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8010dd4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3738      	adds	r7, #56	; 0x38
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}
 8010de0:	080234a8 	.word	0x080234a8
 8010de4:	080235e0 	.word	0x080235e0
 8010de8:	08023500 	.word	0x08023500
 8010dec:	08026c24 	.word	0x08026c24
 8010df0:	0801216d 	.word	0x0801216d

08010df4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b088      	sub	sp, #32
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	60f8      	str	r0, [r7, #12]
 8010dfc:	60b9      	str	r1, [r7, #8]
 8010dfe:	4613      	mov	r3, r2
 8010e00:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8010e02:	2300      	movs	r3, #0
 8010e04:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d109      	bne.n	8010e20 <netconn_recv_data+0x2c>
 8010e0c:	4b58      	ldr	r3, [pc, #352]	; (8010f70 <netconn_recv_data+0x17c>)
 8010e0e:	f44f 7212 	mov.w	r2, #584	; 0x248
 8010e12:	4958      	ldr	r1, [pc, #352]	; (8010f74 <netconn_recv_data+0x180>)
 8010e14:	4858      	ldr	r0, [pc, #352]	; (8010f78 <netconn_recv_data+0x184>)
 8010e16:	f00e f871 	bl	801eefc <iprintf>
 8010e1a:	f06f 030f 	mvn.w	r3, #15
 8010e1e:	e0a2      	b.n	8010f66 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	2200      	movs	r2, #0
 8010e24:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d109      	bne.n	8010e40 <netconn_recv_data+0x4c>
 8010e2c:	4b50      	ldr	r3, [pc, #320]	; (8010f70 <netconn_recv_data+0x17c>)
 8010e2e:	f240 224a 	movw	r2, #586	; 0x24a
 8010e32:	4952      	ldr	r1, [pc, #328]	; (8010f7c <netconn_recv_data+0x188>)
 8010e34:	4850      	ldr	r0, [pc, #320]	; (8010f78 <netconn_recv_data+0x184>)
 8010e36:	f00e f861 	bl	801eefc <iprintf>
 8010e3a:	f06f 030f 	mvn.w	r3, #15
 8010e3e:	e092      	b.n	8010f66 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	3310      	adds	r3, #16
 8010e44:	4618      	mov	r0, r3
 8010e46:	f00c fe9c 	bl	801db82 <sys_mbox_valid>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d10e      	bne.n	8010e6e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8010e50:	68f8      	ldr	r0, [r7, #12]
 8010e52:	f000 fa45 	bl	80112e0 <netconn_err>
 8010e56:	4603      	mov	r3, r0
 8010e58:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8010e5a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d002      	beq.n	8010e68 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8010e62:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010e66:	e07e      	b.n	8010f66 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8010e68:	f06f 030a 	mvn.w	r3, #10
 8010e6c:	e07b      	b.n	8010f66 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	7f1b      	ldrb	r3, [r3, #28]
 8010e72:	f003 0302 	and.w	r3, r3, #2
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d10f      	bne.n	8010e9a <netconn_recv_data+0xa6>
 8010e7a:	79fb      	ldrb	r3, [r7, #7]
 8010e7c:	f003 0304 	and.w	r3, r3, #4
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d10a      	bne.n	8010e9a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	7f1b      	ldrb	r3, [r3, #28]
 8010e88:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d104      	bne.n	8010e9a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d023      	beq.n	8010ee2 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	3310      	adds	r3, #16
 8010e9e:	f107 0218 	add.w	r2, r7, #24
 8010ea2:	4611      	mov	r1, r2
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f00c fe50 	bl	801db4a <sys_arch_mbox_tryfetch>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eb0:	d11f      	bne.n	8010ef2 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8010eb2:	68f8      	ldr	r0, [r7, #12]
 8010eb4:	f000 fa14 	bl	80112e0 <netconn_err>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8010ebc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d002      	beq.n	8010eca <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8010ec4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010ec8:	e04d      	b.n	8010f66 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	7f1b      	ldrb	r3, [r3, #28]
 8010ece:	f003 0301 	and.w	r3, r3, #1
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d002      	beq.n	8010edc <netconn_recv_data+0xe8>
        return ERR_CONN;
 8010ed6:	f06f 030a 	mvn.w	r3, #10
 8010eda:	e044      	b.n	8010f66 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8010edc:	f06f 0306 	mvn.w	r3, #6
 8010ee0:	e041      	b.n	8010f66 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	3310      	adds	r3, #16
 8010ee6:	f107 0118 	add.w	r1, r7, #24
 8010eea:	2200      	movs	r2, #0
 8010eec:	4618      	mov	r0, r3
 8010eee:	f00c fded 	bl	801dacc <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	781b      	ldrb	r3, [r3, #0]
 8010ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010efa:	2b10      	cmp	r3, #16
 8010efc:	d117      	bne.n	8010f2e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8010efe:	69bb      	ldr	r3, [r7, #24]
 8010f00:	f107 0217 	add.w	r2, r7, #23
 8010f04:	4611      	mov	r1, r2
 8010f06:	4618      	mov	r0, r3
 8010f08:	f000 fa3c 	bl	8011384 <lwip_netconn_is_err_msg>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d009      	beq.n	8010f26 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8010f12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010f16:	f113 0f0f 	cmn.w	r3, #15
 8010f1a:	d101      	bne.n	8010f20 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	e022      	b.n	8010f66 <netconn_recv_data+0x172>
      }
      return err;
 8010f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010f24:	e01f      	b.n	8010f66 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8010f26:	69bb      	ldr	r3, [r7, #24]
 8010f28:	891b      	ldrh	r3, [r3, #8]
 8010f2a:	83fb      	strh	r3, [r7, #30]
 8010f2c:	e00d      	b.n	8010f4a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8010f2e:	69bb      	ldr	r3, [r7, #24]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d106      	bne.n	8010f42 <netconn_recv_data+0x14e>
 8010f34:	4b0e      	ldr	r3, [pc, #56]	; (8010f70 <netconn_recv_data+0x17c>)
 8010f36:	f240 2291 	movw	r2, #657	; 0x291
 8010f3a:	4911      	ldr	r1, [pc, #68]	; (8010f80 <netconn_recv_data+0x18c>)
 8010f3c:	480e      	ldr	r0, [pc, #56]	; (8010f78 <netconn_recv_data+0x184>)
 8010f3e:	f00d ffdd 	bl	801eefc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8010f42:	69bb      	ldr	r3, [r7, #24]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	891b      	ldrh	r3, [r3, #8]
 8010f48:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d005      	beq.n	8010f5e <netconn_recv_data+0x16a>
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f56:	8bfa      	ldrh	r2, [r7, #30]
 8010f58:	2101      	movs	r1, #1
 8010f5a:	68f8      	ldr	r0, [r7, #12]
 8010f5c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8010f5e:	69ba      	ldr	r2, [r7, #24]
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8010f64:	2300      	movs	r3, #0
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3720      	adds	r7, #32
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}
 8010f6e:	bf00      	nop
 8010f70:	080234a8 	.word	0x080234a8
 8010f74:	080236c0 	.word	0x080236c0
 8010f78:	08023500 	.word	0x08023500
 8010f7c:	080236e0 	.word	0x080236e0
 8010f80:	080236fc 	.word	0x080236fc

08010f84 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b084      	sub	sp, #16
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	60b9      	str	r1, [r7, #8]
 8010f8e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d005      	beq.n	8010fa2 <netconn_tcp_recvd_msg+0x1e>
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f9e:	2b10      	cmp	r3, #16
 8010fa0:	d009      	beq.n	8010fb6 <netconn_tcp_recvd_msg+0x32>
 8010fa2:	4b0c      	ldr	r3, [pc, #48]	; (8010fd4 <netconn_tcp_recvd_msg+0x50>)
 8010fa4:	f240 22a7 	movw	r2, #679	; 0x2a7
 8010fa8:	490b      	ldr	r1, [pc, #44]	; (8010fd8 <netconn_tcp_recvd_msg+0x54>)
 8010faa:	480c      	ldr	r0, [pc, #48]	; (8010fdc <netconn_tcp_recvd_msg+0x58>)
 8010fac:	f00d ffa6 	bl	801eefc <iprintf>
 8010fb0:	f06f 030f 	mvn.w	r3, #15
 8010fb4:	e00a      	b.n	8010fcc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	68fa      	ldr	r2, [r7, #12]
 8010fba:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	68ba      	ldr	r2, [r7, #8]
 8010fc0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8010fc2:	6879      	ldr	r1, [r7, #4]
 8010fc4:	4806      	ldr	r0, [pc, #24]	; (8010fe0 <netconn_tcp_recvd_msg+0x5c>)
 8010fc6:	f7ff fe05 	bl	8010bd4 <netconn_apimsg>
 8010fca:	4603      	mov	r3, r0
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3710      	adds	r7, #16
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}
 8010fd4:	080234a8 	.word	0x080234a8
 8010fd8:	08023708 	.word	0x08023708
 8010fdc:	08023500 	.word	0x08023500
 8010fe0:	0801227b 	.word	0x0801227b

08010fe4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b090      	sub	sp, #64	; 0x40
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	60f8      	str	r0, [r7, #12]
 8010fec:	60b9      	str	r1, [r7, #8]
 8010fee:	4613      	mov	r3, r2
 8010ff0:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	3310      	adds	r3, #16
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f00c fdc3 	bl	801db82 <sys_mbox_valid>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d102      	bne.n	8011008 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8011002:	f06f 030a 	mvn.w	r3, #10
 8011006:	e06d      	b.n	80110e4 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	7f1b      	ldrb	r3, [r3, #28]
 801100c:	b25b      	sxtb	r3, r3
 801100e:	2b00      	cmp	r3, #0
 8011010:	da07      	bge.n	8011022 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	7f1b      	ldrb	r3, [r3, #28]
 8011016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801101a:	b2da      	uxtb	r2, r3
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8011020:	e039      	b.n	8011096 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8011022:	79fb      	ldrb	r3, [r7, #7]
 8011024:	461a      	mov	r2, r3
 8011026:	68b9      	ldr	r1, [r7, #8]
 8011028:	68f8      	ldr	r0, [r7, #12]
 801102a:	f7ff fee3 	bl	8010df4 <netconn_recv_data>
 801102e:	4603      	mov	r3, r0
 8011030:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8011034:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011038:	2b00      	cmp	r3, #0
 801103a:	d002      	beq.n	8011042 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 801103c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011040:	e050      	b.n	80110e4 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8011048:	79fb      	ldrb	r3, [r7, #7]
 801104a:	f003 0308 	and.w	r3, r3, #8
 801104e:	2b00      	cmp	r3, #0
 8011050:	d10e      	bne.n	8011070 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8011052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011054:	2b00      	cmp	r3, #0
 8011056:	d002      	beq.n	801105e <netconn_recv_data_tcp+0x7a>
 8011058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105a:	891b      	ldrh	r3, [r3, #8]
 801105c:	e000      	b.n	8011060 <netconn_recv_data_tcp+0x7c>
 801105e:	2301      	movs	r3, #1
 8011060:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8011062:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011064:	f107 0214 	add.w	r2, r7, #20
 8011068:	4619      	mov	r1, r3
 801106a:	68f8      	ldr	r0, [r7, #12]
 801106c:	f7ff ff8a 	bl	8010f84 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8011070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011072:	2b00      	cmp	r3, #0
 8011074:	d134      	bne.n	80110e0 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8011076:	79fb      	ldrb	r3, [r7, #7]
 8011078:	f003 0310 	and.w	r3, r3, #16
 801107c:	2b00      	cmp	r3, #0
 801107e:	d009      	beq.n	8011094 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	7f1b      	ldrb	r3, [r3, #28]
 8011084:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011088:	b2da      	uxtb	r2, r3
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 801108e:	f06f 0306 	mvn.w	r3, #6
 8011092:	e027      	b.n	80110e4 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8011094:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801109a:	2b00      	cmp	r3, #0
 801109c:	d005      	beq.n	80110aa <netconn_recv_data_tcp+0xc6>
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110a2:	2200      	movs	r2, #0
 80110a4:	2101      	movs	r1, #1
 80110a6:	68f8      	ldr	r0, [r7, #12]
 80110a8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d10f      	bne.n	80110d2 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80110b2:	68f8      	ldr	r0, [r7, #12]
 80110b4:	f000 f914 	bl	80112e0 <netconn_err>
 80110b8:	4603      	mov	r3, r0
 80110ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80110be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d002      	beq.n	80110cc <netconn_recv_data_tcp+0xe8>
          return err;
 80110c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80110ca:	e00b      	b.n	80110e4 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80110cc:	f06f 030d 	mvn.w	r3, #13
 80110d0:	e008      	b.n	80110e4 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80110d2:	2101      	movs	r1, #1
 80110d4:	68f8      	ldr	r0, [r7, #12]
 80110d6:	f000 f8d3 	bl	8011280 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80110da:	f06f 030e 	mvn.w	r3, #14
 80110de:	e001      	b.n	80110e4 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80110e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3740      	adds	r7, #64	; 0x40
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b086      	sub	sp, #24
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80110f6:	2300      	movs	r3, #0
 80110f8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d109      	bne.n	8011114 <netconn_recv+0x28>
 8011100:	4b32      	ldr	r3, [pc, #200]	; (80111cc <netconn_recv+0xe0>)
 8011102:	f240 3263 	movw	r2, #867	; 0x363
 8011106:	4932      	ldr	r1, [pc, #200]	; (80111d0 <netconn_recv+0xe4>)
 8011108:	4832      	ldr	r0, [pc, #200]	; (80111d4 <netconn_recv+0xe8>)
 801110a:	f00d fef7 	bl	801eefc <iprintf>
 801110e:	f06f 030f 	mvn.w	r3, #15
 8011112:	e056      	b.n	80111c2 <netconn_recv+0xd6>
  *new_buf = NULL;
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	2200      	movs	r2, #0
 8011118:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d109      	bne.n	8011134 <netconn_recv+0x48>
 8011120:	4b2a      	ldr	r3, [pc, #168]	; (80111cc <netconn_recv+0xe0>)
 8011122:	f240 3265 	movw	r2, #869	; 0x365
 8011126:	492c      	ldr	r1, [pc, #176]	; (80111d8 <netconn_recv+0xec>)
 8011128:	482a      	ldr	r0, [pc, #168]	; (80111d4 <netconn_recv+0xe8>)
 801112a:	f00d fee7 	bl	801eefc <iprintf>
 801112e:	f06f 030f 	mvn.w	r3, #15
 8011132:	e046      	b.n	80111c2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801113c:	2b10      	cmp	r3, #16
 801113e:	d13a      	bne.n	80111b6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8011140:	2300      	movs	r3, #0
 8011142:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011144:	2006      	movs	r0, #6
 8011146:	f002 fa5b 	bl	8013600 <memp_malloc>
 801114a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d102      	bne.n	8011158 <netconn_recv+0x6c>
      return ERR_MEM;
 8011152:	f04f 33ff 	mov.w	r3, #4294967295
 8011156:	e034      	b.n	80111c2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8011158:	f107 030c 	add.w	r3, r7, #12
 801115c:	2200      	movs	r2, #0
 801115e:	4619      	mov	r1, r3
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f7ff ff3f 	bl	8010fe4 <netconn_recv_data_tcp>
 8011166:	4603      	mov	r3, r0
 8011168:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801116a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d006      	beq.n	8011180 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8011172:	6979      	ldr	r1, [r7, #20]
 8011174:	2006      	movs	r0, #6
 8011176:	f002 fa95 	bl	80136a4 <memp_free>
      return err;
 801117a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801117e:	e020      	b.n	80111c2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d106      	bne.n	8011194 <netconn_recv+0xa8>
 8011186:	4b11      	ldr	r3, [pc, #68]	; (80111cc <netconn_recv+0xe0>)
 8011188:	f240 3279 	movw	r2, #889	; 0x379
 801118c:	4913      	ldr	r1, [pc, #76]	; (80111dc <netconn_recv+0xf0>)
 801118e:	4811      	ldr	r0, [pc, #68]	; (80111d4 <netconn_recv+0xe8>)
 8011190:	f00d feb4 	bl	801eefc <iprintf>

    buf->p = p;
 8011194:	68fa      	ldr	r2, [r7, #12]
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801119a:	68fa      	ldr	r2, [r7, #12]
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80111a0:	697b      	ldr	r3, [r7, #20]
 80111a2:	2200      	movs	r2, #0
 80111a4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	2200      	movs	r2, #0
 80111aa:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	697a      	ldr	r2, [r7, #20]
 80111b0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80111b2:	2300      	movs	r3, #0
 80111b4:	e005      	b.n	80111c2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80111b6:	2200      	movs	r2, #0
 80111b8:	6839      	ldr	r1, [r7, #0]
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f7ff fe1a 	bl	8010df4 <netconn_recv_data>
 80111c0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3718      	adds	r7, #24
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	080234a8 	.word	0x080234a8
 80111d0:	080236c0 	.word	0x080236c0
 80111d4:	08023500 	.word	0x08023500
 80111d8:	080236e0 	.word	0x080236e0
 80111dc:	08023758 	.word	0x08023758

080111e0 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b084      	sub	sp, #16
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	60f8      	str	r0, [r7, #12]
 80111e8:	60b9      	str	r1, [r7, #8]
 80111ea:	607a      	str	r2, [r7, #4]
 80111ec:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d011      	beq.n	8011218 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d002      	beq.n	8011200 <netconn_sendto+0x20>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	e000      	b.n	8011202 <netconn_sendto+0x22>
 8011200:	2300      	movs	r3, #0
 8011202:	68ba      	ldr	r2, [r7, #8]
 8011204:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	887a      	ldrh	r2, [r7, #2]
 801120a:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 801120c:	68b9      	ldr	r1, [r7, #8]
 801120e:	68f8      	ldr	r0, [r7, #12]
 8011210:	f000 f808 	bl	8011224 <netconn_send>
 8011214:	4603      	mov	r3, r0
 8011216:	e001      	b.n	801121c <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 8011218:	f06f 0305 	mvn.w	r3, #5
}
 801121c:	4618      	mov	r0, r3
 801121e:	3710      	adds	r7, #16
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b08c      	sub	sp, #48	; 0x30
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d109      	bne.n	8011248 <netconn_send+0x24>
 8011234:	4b0e      	ldr	r3, [pc, #56]	; (8011270 <netconn_send+0x4c>)
 8011236:	f240 32b2 	movw	r2, #946	; 0x3b2
 801123a:	490e      	ldr	r1, [pc, #56]	; (8011274 <netconn_send+0x50>)
 801123c:	480e      	ldr	r0, [pc, #56]	; (8011278 <netconn_send+0x54>)
 801123e:	f00d fe5d 	bl	801eefc <iprintf>
 8011242:	f06f 030f 	mvn.w	r3, #15
 8011246:	e00e      	b.n	8011266 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8011250:	f107 030c 	add.w	r3, r7, #12
 8011254:	4619      	mov	r1, r3
 8011256:	4809      	ldr	r0, [pc, #36]	; (801127c <netconn_send+0x58>)
 8011258:	f7ff fcbc 	bl	8010bd4 <netconn_apimsg>
 801125c:	4603      	mov	r3, r0
 801125e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011262:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8011266:	4618      	mov	r0, r3
 8011268:	3730      	adds	r7, #48	; 0x30
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	080234a8 	.word	0x080234a8
 8011274:	08023764 	.word	0x08023764
 8011278:	08023500 	.word	0x08023500
 801127c:	080121e1 	.word	0x080121e1

08011280 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b08c      	sub	sp, #48	; 0x30
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	460b      	mov	r3, r1
 801128a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d109      	bne.n	80112a6 <netconn_close_shutdown+0x26>
 8011292:	4b0f      	ldr	r3, [pc, #60]	; (80112d0 <netconn_close_shutdown+0x50>)
 8011294:	f240 4247 	movw	r2, #1095	; 0x447
 8011298:	490e      	ldr	r1, [pc, #56]	; (80112d4 <netconn_close_shutdown+0x54>)
 801129a:	480f      	ldr	r0, [pc, #60]	; (80112d8 <netconn_close_shutdown+0x58>)
 801129c:	f00d fe2e 	bl	801eefc <iprintf>
 80112a0:	f06f 030f 	mvn.w	r3, #15
 80112a4:	e010      	b.n	80112c8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80112aa:	78fb      	ldrb	r3, [r7, #3]
 80112ac:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80112ae:	2329      	movs	r3, #41	; 0x29
 80112b0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80112b2:	f107 030c 	add.w	r3, r7, #12
 80112b6:	4619      	mov	r1, r3
 80112b8:	4808      	ldr	r0, [pc, #32]	; (80112dc <netconn_close_shutdown+0x5c>)
 80112ba:	f7ff fc8b 	bl	8010bd4 <netconn_apimsg>
 80112be:	4603      	mov	r3, r0
 80112c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80112c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3730      	adds	r7, #48	; 0x30
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}
 80112d0:	080234a8 	.word	0x080234a8
 80112d4:	080237e4 	.word	0x080237e4
 80112d8:	08023500 	.word	0x08023500
 80112dc:	0801267d 	.word	0x0801267d

080112e0 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d101      	bne.n	80112f2 <netconn_err+0x12>
    return ERR_OK;
 80112ee:	2300      	movs	r3, #0
 80112f0:	e00d      	b.n	801130e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80112f2:	f00c fd61 	bl	801ddb8 <sys_arch_protect>
 80112f6:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	7a1b      	ldrb	r3, [r3, #8]
 80112fc:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2200      	movs	r2, #0
 8011302:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8011304:	68f8      	ldr	r0, [r7, #12]
 8011306:	f00c fd65 	bl	801ddd4 <sys_arch_unprotect>
  return err;
 801130a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801130e:	4618      	mov	r0, r3
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
	...

08011318 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b082      	sub	sp, #8
 801131c:	af00      	add	r7, sp, #0
 801131e:	4603      	mov	r3, r0
 8011320:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8011322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011326:	f113 0f0d 	cmn.w	r3, #13
 801132a:	d009      	beq.n	8011340 <lwip_netconn_err_to_msg+0x28>
 801132c:	f113 0f0d 	cmn.w	r3, #13
 8011330:	dc0c      	bgt.n	801134c <lwip_netconn_err_to_msg+0x34>
 8011332:	f113 0f0f 	cmn.w	r3, #15
 8011336:	d007      	beq.n	8011348 <lwip_netconn_err_to_msg+0x30>
 8011338:	f113 0f0e 	cmn.w	r3, #14
 801133c:	d002      	beq.n	8011344 <lwip_netconn_err_to_msg+0x2c>
 801133e:	e005      	b.n	801134c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8011340:	4b0a      	ldr	r3, [pc, #40]	; (801136c <lwip_netconn_err_to_msg+0x54>)
 8011342:	e00e      	b.n	8011362 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8011344:	4b0a      	ldr	r3, [pc, #40]	; (8011370 <lwip_netconn_err_to_msg+0x58>)
 8011346:	e00c      	b.n	8011362 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8011348:	4b0a      	ldr	r3, [pc, #40]	; (8011374 <lwip_netconn_err_to_msg+0x5c>)
 801134a:	e00a      	b.n	8011362 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 801134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d005      	beq.n	8011360 <lwip_netconn_err_to_msg+0x48>
 8011354:	4b08      	ldr	r3, [pc, #32]	; (8011378 <lwip_netconn_err_to_msg+0x60>)
 8011356:	227d      	movs	r2, #125	; 0x7d
 8011358:	4908      	ldr	r1, [pc, #32]	; (801137c <lwip_netconn_err_to_msg+0x64>)
 801135a:	4809      	ldr	r0, [pc, #36]	; (8011380 <lwip_netconn_err_to_msg+0x68>)
 801135c:	f00d fdce 	bl	801eefc <iprintf>
      return NULL;
 8011360:	2300      	movs	r3, #0
  }
}
 8011362:	4618      	mov	r0, r3
 8011364:	3708      	adds	r7, #8
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	08026b10 	.word	0x08026b10
 8011370:	08026b11 	.word	0x08026b11
 8011374:	08026b12 	.word	0x08026b12
 8011378:	08023800 	.word	0x08023800
 801137c:	08023834 	.word	0x08023834
 8011380:	08023844 	.word	0x08023844

08011384 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b082      	sub	sp, #8
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d105      	bne.n	80113a0 <lwip_netconn_is_err_msg+0x1c>
 8011394:	4b12      	ldr	r3, [pc, #72]	; (80113e0 <lwip_netconn_is_err_msg+0x5c>)
 8011396:	2285      	movs	r2, #133	; 0x85
 8011398:	4912      	ldr	r1, [pc, #72]	; (80113e4 <lwip_netconn_is_err_msg+0x60>)
 801139a:	4813      	ldr	r0, [pc, #76]	; (80113e8 <lwip_netconn_is_err_msg+0x64>)
 801139c:	f00d fdae 	bl	801eefc <iprintf>

  if (msg == &netconn_aborted) {
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	4a12      	ldr	r2, [pc, #72]	; (80113ec <lwip_netconn_is_err_msg+0x68>)
 80113a4:	4293      	cmp	r3, r2
 80113a6:	d104      	bne.n	80113b2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	22f3      	movs	r2, #243	; 0xf3
 80113ac:	701a      	strb	r2, [r3, #0]
    return 1;
 80113ae:	2301      	movs	r3, #1
 80113b0:	e012      	b.n	80113d8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	4a0e      	ldr	r2, [pc, #56]	; (80113f0 <lwip_netconn_is_err_msg+0x6c>)
 80113b6:	4293      	cmp	r3, r2
 80113b8:	d104      	bne.n	80113c4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	22f2      	movs	r2, #242	; 0xf2
 80113be:	701a      	strb	r2, [r3, #0]
    return 1;
 80113c0:	2301      	movs	r3, #1
 80113c2:	e009      	b.n	80113d8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	4a0b      	ldr	r2, [pc, #44]	; (80113f4 <lwip_netconn_is_err_msg+0x70>)
 80113c8:	4293      	cmp	r3, r2
 80113ca:	d104      	bne.n	80113d6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	22f1      	movs	r2, #241	; 0xf1
 80113d0:	701a      	strb	r2, [r3, #0]
    return 1;
 80113d2:	2301      	movs	r3, #1
 80113d4:	e000      	b.n	80113d8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80113d6:	2300      	movs	r3, #0
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3708      	adds	r7, #8
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	08023800 	.word	0x08023800
 80113e4:	0802386c 	.word	0x0802386c
 80113e8:	08023844 	.word	0x08023844
 80113ec:	08026b10 	.word	0x08026b10
 80113f0:	08026b11 	.word	0x08026b11
 80113f4:	08026b12 	.word	0x08026b12

080113f8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b088      	sub	sp, #32
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	60f8      	str	r0, [r7, #12]
 8011400:	60b9      	str	r1, [r7, #8]
 8011402:	607a      	str	r2, [r7, #4]
 8011404:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d105      	bne.n	8011418 <recv_udp+0x20>
 801140c:	4b34      	ldr	r3, [pc, #208]	; (80114e0 <recv_udp+0xe8>)
 801140e:	22e5      	movs	r2, #229	; 0xe5
 8011410:	4934      	ldr	r1, [pc, #208]	; (80114e4 <recv_udp+0xec>)
 8011412:	4835      	ldr	r0, [pc, #212]	; (80114e8 <recv_udp+0xf0>)
 8011414:	f00d fd72 	bl	801eefc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d105      	bne.n	801142a <recv_udp+0x32>
 801141e:	4b30      	ldr	r3, [pc, #192]	; (80114e0 <recv_udp+0xe8>)
 8011420:	22e6      	movs	r2, #230	; 0xe6
 8011422:	4932      	ldr	r1, [pc, #200]	; (80114ec <recv_udp+0xf4>)
 8011424:	4830      	ldr	r0, [pc, #192]	; (80114e8 <recv_udp+0xf0>)
 8011426:	f00d fd69 	bl	801eefc <iprintf>
  conn = (struct netconn *)arg;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801142e:	69fb      	ldr	r3, [r7, #28]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d103      	bne.n	801143c <recv_udp+0x44>
    pbuf_free(p);
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f002 ff75 	bl	8014324 <pbuf_free>
    return;
 801143a:	e04d      	b.n	80114d8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 801143c:	69fb      	ldr	r3, [r7, #28]
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	68ba      	ldr	r2, [r7, #8]
 8011442:	429a      	cmp	r2, r3
 8011444:	d005      	beq.n	8011452 <recv_udp+0x5a>
 8011446:	4b26      	ldr	r3, [pc, #152]	; (80114e0 <recv_udp+0xe8>)
 8011448:	22ee      	movs	r2, #238	; 0xee
 801144a:	4929      	ldr	r1, [pc, #164]	; (80114f0 <recv_udp+0xf8>)
 801144c:	4826      	ldr	r0, [pc, #152]	; (80114e8 <recv_udp+0xf0>)
 801144e:	f00d fd55 	bl	801eefc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	3310      	adds	r3, #16
 8011456:	4618      	mov	r0, r3
 8011458:	f00c fb93 	bl	801db82 <sys_mbox_valid>
 801145c:	4603      	mov	r3, r0
 801145e:	2b00      	cmp	r3, #0
 8011460:	d103      	bne.n	801146a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f002 ff5e 	bl	8014324 <pbuf_free>
    return;
 8011468:	e036      	b.n	80114d8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801146a:	2006      	movs	r0, #6
 801146c:	f002 f8c8 	bl	8013600 <memp_malloc>
 8011470:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8011472:	69bb      	ldr	r3, [r7, #24]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d103      	bne.n	8011480 <recv_udp+0x88>
    pbuf_free(p);
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f002 ff53 	bl	8014324 <pbuf_free>
    return;
 801147e:	e02b      	b.n	80114d8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8011480:	69bb      	ldr	r3, [r7, #24]
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011486:	69bb      	ldr	r3, [r7, #24]
 8011488:	687a      	ldr	r2, [r7, #4]
 801148a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d002      	beq.n	8011498 <recv_udp+0xa0>
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	e000      	b.n	801149a <recv_udp+0xa2>
 8011498:	2300      	movs	r3, #0
 801149a:	69ba      	ldr	r2, [r7, #24]
 801149c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 801149e:	69bb      	ldr	r3, [r7, #24]
 80114a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80114a2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	891b      	ldrh	r3, [r3, #8]
 80114a8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	3310      	adds	r3, #16
 80114ae:	69b9      	ldr	r1, [r7, #24]
 80114b0:	4618      	mov	r0, r3
 80114b2:	f00c faf1 	bl	801da98 <sys_mbox_trypost>
 80114b6:	4603      	mov	r3, r0
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d003      	beq.n	80114c4 <recv_udp+0xcc>
    netbuf_delete(buf);
 80114bc:	69b8      	ldr	r0, [r7, #24]
 80114be:	f001 f97d 	bl	80127bc <netbuf_delete>
    return;
 80114c2:	e009      	b.n	80114d8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80114c4:	69fb      	ldr	r3, [r7, #28]
 80114c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d005      	beq.n	80114d8 <recv_udp+0xe0>
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114d0:	8afa      	ldrh	r2, [r7, #22]
 80114d2:	2100      	movs	r1, #0
 80114d4:	69f8      	ldr	r0, [r7, #28]
 80114d6:	4798      	blx	r3
  }
}
 80114d8:	3720      	adds	r7, #32
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}
 80114de:	bf00      	nop
 80114e0:	08023800 	.word	0x08023800
 80114e4:	08023878 	.word	0x08023878
 80114e8:	08023844 	.word	0x08023844
 80114ec:	0802389c 	.word	0x0802389c
 80114f0:	080238bc 	.word	0x080238bc

080114f4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b088      	sub	sp, #32
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	60b9      	str	r1, [r7, #8]
 80114fe:	607a      	str	r2, [r7, #4]
 8011500:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d106      	bne.n	8011516 <recv_tcp+0x22>
 8011508:	4b36      	ldr	r3, [pc, #216]	; (80115e4 <recv_tcp+0xf0>)
 801150a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801150e:	4936      	ldr	r1, [pc, #216]	; (80115e8 <recv_tcp+0xf4>)
 8011510:	4836      	ldr	r0, [pc, #216]	; (80115ec <recv_tcp+0xf8>)
 8011512:	f00d fcf3 	bl	801eefc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d106      	bne.n	801152a <recv_tcp+0x36>
 801151c:	4b31      	ldr	r3, [pc, #196]	; (80115e4 <recv_tcp+0xf0>)
 801151e:	f240 122d 	movw	r2, #301	; 0x12d
 8011522:	4933      	ldr	r1, [pc, #204]	; (80115f0 <recv_tcp+0xfc>)
 8011524:	4831      	ldr	r0, [pc, #196]	; (80115ec <recv_tcp+0xf8>)
 8011526:	f00d fce9 	bl	801eefc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 801152a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d006      	beq.n	8011540 <recv_tcp+0x4c>
 8011532:	4b2c      	ldr	r3, [pc, #176]	; (80115e4 <recv_tcp+0xf0>)
 8011534:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8011538:	492e      	ldr	r1, [pc, #184]	; (80115f4 <recv_tcp+0x100>)
 801153a:	482c      	ldr	r0, [pc, #176]	; (80115ec <recv_tcp+0xf8>)
 801153c:	f00d fcde 	bl	801eefc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d102      	bne.n	8011550 <recv_tcp+0x5c>
    return ERR_VAL;
 801154a:	f06f 0305 	mvn.w	r3, #5
 801154e:	e045      	b.n	80115dc <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	68ba      	ldr	r2, [r7, #8]
 8011556:	429a      	cmp	r2, r3
 8011558:	d006      	beq.n	8011568 <recv_tcp+0x74>
 801155a:	4b22      	ldr	r3, [pc, #136]	; (80115e4 <recv_tcp+0xf0>)
 801155c:	f240 1235 	movw	r2, #309	; 0x135
 8011560:	4925      	ldr	r1, [pc, #148]	; (80115f8 <recv_tcp+0x104>)
 8011562:	4822      	ldr	r0, [pc, #136]	; (80115ec <recv_tcp+0xf8>)
 8011564:	f00d fcca 	bl	801eefc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	3310      	adds	r3, #16
 801156c:	4618      	mov	r0, r3
 801156e:	f00c fb08 	bl	801db82 <sys_mbox_valid>
 8011572:	4603      	mov	r3, r0
 8011574:	2b00      	cmp	r3, #0
 8011576:	d10d      	bne.n	8011594 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d008      	beq.n	8011590 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	891b      	ldrh	r3, [r3, #8]
 8011582:	4619      	mov	r1, r3
 8011584:	68b8      	ldr	r0, [r7, #8]
 8011586:	f003 fdcb 	bl	8015120 <tcp_recved>
      pbuf_free(p);
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f002 feca 	bl	8014324 <pbuf_free>
    }
    return ERR_OK;
 8011590:	2300      	movs	r3, #0
 8011592:	e023      	b.n	80115dc <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d005      	beq.n	80115a6 <recv_tcp+0xb2>
    msg = p;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	891b      	ldrh	r3, [r3, #8]
 80115a2:	83fb      	strh	r3, [r7, #30]
 80115a4:	e003      	b.n	80115ae <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80115a6:	4b15      	ldr	r3, [pc, #84]	; (80115fc <recv_tcp+0x108>)
 80115a8:	61bb      	str	r3, [r7, #24]
    len = 0;
 80115aa:	2300      	movs	r3, #0
 80115ac:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	3310      	adds	r3, #16
 80115b2:	69b9      	ldr	r1, [r7, #24]
 80115b4:	4618      	mov	r0, r3
 80115b6:	f00c fa6f 	bl	801da98 <sys_mbox_trypost>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d002      	beq.n	80115c6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80115c0:	f04f 33ff 	mov.w	r3, #4294967295
 80115c4:	e00a      	b.n	80115dc <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d005      	beq.n	80115da <recv_tcp+0xe6>
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d2:	8bfa      	ldrh	r2, [r7, #30]
 80115d4:	2100      	movs	r1, #0
 80115d6:	6978      	ldr	r0, [r7, #20]
 80115d8:	4798      	blx	r3
  }

  return ERR_OK;
 80115da:	2300      	movs	r3, #0
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3720      	adds	r7, #32
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}
 80115e4:	08023800 	.word	0x08023800
 80115e8:	080238dc 	.word	0x080238dc
 80115ec:	08023844 	.word	0x08023844
 80115f0:	08023900 	.word	0x08023900
 80115f4:	08023920 	.word	0x08023920
 80115f8:	08023938 	.word	0x08023938
 80115fc:	08026b12 	.word	0x08026b12

08011600 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b084      	sub	sp, #16
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
 8011608:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d106      	bne.n	8011622 <poll_tcp+0x22>
 8011614:	4b29      	ldr	r3, [pc, #164]	; (80116bc <poll_tcp+0xbc>)
 8011616:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 801161a:	4929      	ldr	r1, [pc, #164]	; (80116c0 <poll_tcp+0xc0>)
 801161c:	4829      	ldr	r0, [pc, #164]	; (80116c4 <poll_tcp+0xc4>)
 801161e:	f00d fc6d 	bl	801eefc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	785b      	ldrb	r3, [r3, #1]
 8011626:	2b01      	cmp	r3, #1
 8011628:	d104      	bne.n	8011634 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801162a:	2101      	movs	r1, #1
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	f000 fe59 	bl	80122e4 <lwip_netconn_do_writemore>
 8011632:	e016      	b.n	8011662 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	785b      	ldrb	r3, [r3, #1]
 8011638:	2b04      	cmp	r3, #4
 801163a:	d112      	bne.n	8011662 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	6a1b      	ldr	r3, [r3, #32]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d00a      	beq.n	801165a <poll_tcp+0x5a>
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	6a1b      	ldr	r3, [r3, #32]
 8011648:	7a5b      	ldrb	r3, [r3, #9]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d005      	beq.n	801165a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	6a1b      	ldr	r3, [r3, #32]
 8011652:	7a5a      	ldrb	r2, [r3, #9]
 8011654:	3a01      	subs	r2, #1
 8011656:	b2d2      	uxtb	r2, r2
 8011658:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801165a:	2101      	movs	r1, #1
 801165c:	68f8      	ldr	r0, [r7, #12]
 801165e:	f000 fb3b 	bl	8011cd8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	7f1b      	ldrb	r3, [r3, #28]
 8011666:	f003 0310 	and.w	r3, r3, #16
 801166a:	2b00      	cmp	r3, #0
 801166c:	d021      	beq.n	80116b2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d01d      	beq.n	80116b2 <poll_tcp+0xb2>
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	685b      	ldr	r3, [r3, #4]
 801167a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801167e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8011682:	d316      	bcc.n	80116b2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801168c:	2b04      	cmp	r3, #4
 801168e:	d810      	bhi.n	80116b2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	7f1b      	ldrb	r3, [r3, #28]
 8011694:	f023 0310 	bic.w	r3, r3, #16
 8011698:	b2da      	uxtb	r2, r3
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d005      	beq.n	80116b2 <poll_tcp+0xb2>
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116aa:	2200      	movs	r2, #0
 80116ac:	2102      	movs	r1, #2
 80116ae:	68f8      	ldr	r0, [r7, #12]
 80116b0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80116b2:	2300      	movs	r3, #0
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	3710      	adds	r7, #16
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}
 80116bc:	08023800 	.word	0x08023800
 80116c0:	08023958 	.word	0x08023958
 80116c4:	08023844 	.word	0x08023844

080116c8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b086      	sub	sp, #24
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60f8      	str	r0, [r7, #12]
 80116d0:	60b9      	str	r1, [r7, #8]
 80116d2:	4613      	mov	r3, r2
 80116d4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d106      	bne.n	80116ee <sent_tcp+0x26>
 80116e0:	4b20      	ldr	r3, [pc, #128]	; (8011764 <sent_tcp+0x9c>)
 80116e2:	f240 1293 	movw	r2, #403	; 0x193
 80116e6:	4920      	ldr	r1, [pc, #128]	; (8011768 <sent_tcp+0xa0>)
 80116e8:	4820      	ldr	r0, [pc, #128]	; (801176c <sent_tcp+0xa4>)
 80116ea:	f00d fc07 	bl	801eefc <iprintf>

  if (conn) {
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d032      	beq.n	801175a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	785b      	ldrb	r3, [r3, #1]
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d104      	bne.n	8011706 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80116fc:	2101      	movs	r1, #1
 80116fe:	6978      	ldr	r0, [r7, #20]
 8011700:	f000 fdf0 	bl	80122e4 <lwip_netconn_do_writemore>
 8011704:	e007      	b.n	8011716 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	785b      	ldrb	r3, [r3, #1]
 801170a:	2b04      	cmp	r3, #4
 801170c:	d103      	bne.n	8011716 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801170e:	2101      	movs	r1, #1
 8011710:	6978      	ldr	r0, [r7, #20]
 8011712:	f000 fae1 	bl	8011cd8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	685b      	ldr	r3, [r3, #4]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d01d      	beq.n	801175a <sent_tcp+0x92>
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011726:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801172a:	d316      	bcc.n	801175a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011734:	2b04      	cmp	r3, #4
 8011736:	d810      	bhi.n	801175a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	7f1b      	ldrb	r3, [r3, #28]
 801173c:	f023 0310 	bic.w	r3, r3, #16
 8011740:	b2da      	uxtb	r2, r3
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801174a:	2b00      	cmp	r3, #0
 801174c:	d005      	beq.n	801175a <sent_tcp+0x92>
 801174e:	697b      	ldr	r3, [r7, #20]
 8011750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011752:	88fa      	ldrh	r2, [r7, #6]
 8011754:	2102      	movs	r1, #2
 8011756:	6978      	ldr	r0, [r7, #20]
 8011758:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801175a:	2300      	movs	r3, #0
}
 801175c:	4618      	mov	r0, r3
 801175e:	3718      	adds	r7, #24
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}
 8011764:	08023800 	.word	0x08023800
 8011768:	08023958 	.word	0x08023958
 801176c:	08023844 	.word	0x08023844

08011770 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b088      	sub	sp, #32
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	460b      	mov	r3, r1
 801177a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011780:	69fb      	ldr	r3, [r7, #28]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d106      	bne.n	8011794 <err_tcp+0x24>
 8011786:	4b5f      	ldr	r3, [pc, #380]	; (8011904 <err_tcp+0x194>)
 8011788:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801178c:	495e      	ldr	r1, [pc, #376]	; (8011908 <err_tcp+0x198>)
 801178e:	485f      	ldr	r0, [pc, #380]	; (801190c <err_tcp+0x19c>)
 8011790:	f00d fbb4 	bl	801eefc <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011794:	f00c fb10 	bl	801ddb8 <sys_arch_protect>
 8011798:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 801179a:	69fb      	ldr	r3, [r7, #28]
 801179c:	2200      	movs	r2, #0
 801179e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	78fa      	ldrb	r2, [r7, #3]
 80117a4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80117a6:	69fb      	ldr	r3, [r7, #28]
 80117a8:	7f1b      	ldrb	r3, [r3, #28]
 80117aa:	f043 0301 	orr.w	r3, r3, #1
 80117ae:	b2da      	uxtb	r2, r3
 80117b0:	69fb      	ldr	r3, [r7, #28]
 80117b2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80117b4:	69fb      	ldr	r3, [r7, #28]
 80117b6:	785b      	ldrb	r3, [r3, #1]
 80117b8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80117ba:	69fb      	ldr	r3, [r7, #28]
 80117bc:	2200      	movs	r2, #0
 80117be:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80117c0:	69b8      	ldr	r0, [r7, #24]
 80117c2:	f00c fb07 	bl	801ddd4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80117c6:	69fb      	ldr	r3, [r7, #28]
 80117c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d005      	beq.n	80117da <err_tcp+0x6a>
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117d2:	2200      	movs	r2, #0
 80117d4:	2104      	movs	r1, #4
 80117d6:	69f8      	ldr	r0, [r7, #28]
 80117d8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d005      	beq.n	80117ee <err_tcp+0x7e>
 80117e2:	69fb      	ldr	r3, [r7, #28]
 80117e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117e6:	2200      	movs	r2, #0
 80117e8:	2100      	movs	r1, #0
 80117ea:	69f8      	ldr	r0, [r7, #28]
 80117ec:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d005      	beq.n	8011802 <err_tcp+0x92>
 80117f6:	69fb      	ldr	r3, [r7, #28]
 80117f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117fa:	2200      	movs	r2, #0
 80117fc:	2102      	movs	r1, #2
 80117fe:	69f8      	ldr	r0, [r7, #28]
 8011800:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011806:	4618      	mov	r0, r3
 8011808:	f7ff fd86 	bl	8011318 <lwip_netconn_err_to_msg>
 801180c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801180e:	69fb      	ldr	r3, [r7, #28]
 8011810:	3310      	adds	r3, #16
 8011812:	4618      	mov	r0, r3
 8011814:	f00c f9b5 	bl	801db82 <sys_mbox_valid>
 8011818:	4603      	mov	r3, r0
 801181a:	2b00      	cmp	r3, #0
 801181c:	d005      	beq.n	801182a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 801181e:	69fb      	ldr	r3, [r7, #28]
 8011820:	3310      	adds	r3, #16
 8011822:	6939      	ldr	r1, [r7, #16]
 8011824:	4618      	mov	r0, r3
 8011826:	f00c f937 	bl	801da98 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801182a:	69fb      	ldr	r3, [r7, #28]
 801182c:	3314      	adds	r3, #20
 801182e:	4618      	mov	r0, r3
 8011830:	f00c f9a7 	bl	801db82 <sys_mbox_valid>
 8011834:	4603      	mov	r3, r0
 8011836:	2b00      	cmp	r3, #0
 8011838:	d005      	beq.n	8011846 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801183a:	69fb      	ldr	r3, [r7, #28]
 801183c:	3314      	adds	r3, #20
 801183e:	6939      	ldr	r1, [r7, #16]
 8011840:	4618      	mov	r0, r3
 8011842:	f00c f929 	bl	801da98 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8011846:	7dfb      	ldrb	r3, [r7, #23]
 8011848:	2b01      	cmp	r3, #1
 801184a:	d005      	beq.n	8011858 <err_tcp+0xe8>
 801184c:	7dfb      	ldrb	r3, [r7, #23]
 801184e:	2b04      	cmp	r3, #4
 8011850:	d002      	beq.n	8011858 <err_tcp+0xe8>
 8011852:	7dfb      	ldrb	r3, [r7, #23]
 8011854:	2b03      	cmp	r3, #3
 8011856:	d143      	bne.n	80118e0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8011858:	69fb      	ldr	r3, [r7, #28]
 801185a:	7f1b      	ldrb	r3, [r3, #28]
 801185c:	f003 0304 	and.w	r3, r3, #4
 8011860:	2b00      	cmp	r3, #0
 8011862:	bf14      	ite	ne
 8011864:	2301      	movne	r3, #1
 8011866:	2300      	moveq	r3, #0
 8011868:	b2db      	uxtb	r3, r3
 801186a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 801186c:	69fb      	ldr	r3, [r7, #28]
 801186e:	7f1b      	ldrb	r3, [r3, #28]
 8011870:	f023 0304 	bic.w	r3, r3, #4
 8011874:	b2da      	uxtb	r2, r3
 8011876:	69fb      	ldr	r3, [r7, #28]
 8011878:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d13b      	bne.n	80118f8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011880:	69fb      	ldr	r3, [r7, #28]
 8011882:	6a1b      	ldr	r3, [r3, #32]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d106      	bne.n	8011896 <err_tcp+0x126>
 8011888:	4b1e      	ldr	r3, [pc, #120]	; (8011904 <err_tcp+0x194>)
 801188a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801188e:	4920      	ldr	r1, [pc, #128]	; (8011910 <err_tcp+0x1a0>)
 8011890:	481e      	ldr	r0, [pc, #120]	; (801190c <err_tcp+0x19c>)
 8011892:	f00d fb33 	bl	801eefc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8011896:	7dfb      	ldrb	r3, [r7, #23]
 8011898:	2b04      	cmp	r3, #4
 801189a:	d104      	bne.n	80118a6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 801189c:	69fb      	ldr	r3, [r7, #28]
 801189e:	6a1b      	ldr	r3, [r3, #32]
 80118a0:	2200      	movs	r2, #0
 80118a2:	711a      	strb	r2, [r3, #4]
 80118a4:	e003      	b.n	80118ae <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80118a6:	69fb      	ldr	r3, [r7, #28]
 80118a8:	6a1b      	ldr	r3, [r3, #32]
 80118aa:	78fa      	ldrb	r2, [r7, #3]
 80118ac:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80118ae:	69fb      	ldr	r3, [r7, #28]
 80118b0:	6a1b      	ldr	r3, [r3, #32]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	330c      	adds	r3, #12
 80118b6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80118b8:	68b8      	ldr	r0, [r7, #8]
 80118ba:	f00c f9f3 	bl	801dca4 <sys_sem_valid>
 80118be:	4603      	mov	r3, r0
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d106      	bne.n	80118d2 <err_tcp+0x162>
 80118c4:	4b0f      	ldr	r3, [pc, #60]	; (8011904 <err_tcp+0x194>)
 80118c6:	f240 12ef 	movw	r2, #495	; 0x1ef
 80118ca:	4912      	ldr	r1, [pc, #72]	; (8011914 <err_tcp+0x1a4>)
 80118cc:	480f      	ldr	r0, [pc, #60]	; (801190c <err_tcp+0x19c>)
 80118ce:	f00d fb15 	bl	801eefc <iprintf>
      conn->current_msg = NULL;
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	2200      	movs	r2, #0
 80118d6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80118d8:	68b8      	ldr	r0, [r7, #8]
 80118da:	f00c f9c9 	bl	801dc70 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80118de:	e00b      	b.n	80118f8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80118e0:	69fb      	ldr	r3, [r7, #28]
 80118e2:	6a1b      	ldr	r3, [r3, #32]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d008      	beq.n	80118fa <err_tcp+0x18a>
 80118e8:	4b06      	ldr	r3, [pc, #24]	; (8011904 <err_tcp+0x194>)
 80118ea:	f240 12f7 	movw	r2, #503	; 0x1f7
 80118ee:	490a      	ldr	r1, [pc, #40]	; (8011918 <err_tcp+0x1a8>)
 80118f0:	4806      	ldr	r0, [pc, #24]	; (801190c <err_tcp+0x19c>)
 80118f2:	f00d fb03 	bl	801eefc <iprintf>
  }
}
 80118f6:	e000      	b.n	80118fa <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80118f8:	bf00      	nop
}
 80118fa:	bf00      	nop
 80118fc:	3720      	adds	r7, #32
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
 8011902:	bf00      	nop
 8011904:	08023800 	.word	0x08023800
 8011908:	08023958 	.word	0x08023958
 801190c:	08023844 	.word	0x08023844
 8011910:	08023968 	.word	0x08023968
 8011914:	08023984 	.word	0x08023984
 8011918:	080239a0 	.word	0x080239a0

0801191c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801192a:	6879      	ldr	r1, [r7, #4]
 801192c:	68f8      	ldr	r0, [r7, #12]
 801192e:	f004 fabd 	bl	8015eac <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8011932:	490a      	ldr	r1, [pc, #40]	; (801195c <setup_tcp+0x40>)
 8011934:	68f8      	ldr	r0, [r7, #12]
 8011936:	f004 facb 	bl	8015ed0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801193a:	4909      	ldr	r1, [pc, #36]	; (8011960 <setup_tcp+0x44>)
 801193c:	68f8      	ldr	r0, [r7, #12]
 801193e:	f004 fae9 	bl	8015f14 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8011942:	2202      	movs	r2, #2
 8011944:	4907      	ldr	r1, [pc, #28]	; (8011964 <setup_tcp+0x48>)
 8011946:	68f8      	ldr	r0, [r7, #12]
 8011948:	f004 fb40 	bl	8015fcc <tcp_poll>
  tcp_err(pcb, err_tcp);
 801194c:	4906      	ldr	r1, [pc, #24]	; (8011968 <setup_tcp+0x4c>)
 801194e:	68f8      	ldr	r0, [r7, #12]
 8011950:	f004 fb02 	bl	8015f58 <tcp_err>
}
 8011954:	bf00      	nop
 8011956:	3710      	adds	r7, #16
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}
 801195c:	080114f5 	.word	0x080114f5
 8011960:	080116c9 	.word	0x080116c9
 8011964:	08011601 	.word	0x08011601
 8011968:	08011771 	.word	0x08011771

0801196c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 801196c:	b590      	push	{r4, r7, lr}
 801196e:	b085      	sub	sp, #20
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8011974:	2300      	movs	r3, #0
 8011976:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	685b      	ldr	r3, [r3, #4]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d006      	beq.n	8011990 <pcb_new+0x24>
 8011982:	4b2b      	ldr	r3, [pc, #172]	; (8011a30 <pcb_new+0xc4>)
 8011984:	f240 2265 	movw	r2, #613	; 0x265
 8011988:	492a      	ldr	r1, [pc, #168]	; (8011a34 <pcb_new+0xc8>)
 801198a:	482b      	ldr	r0, [pc, #172]	; (8011a38 <pcb_new+0xcc>)
 801198c:	f00d fab6 	bl	801eefc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	781b      	ldrb	r3, [r3, #0]
 8011996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801199a:	2b10      	cmp	r3, #16
 801199c:	d022      	beq.n	80119e4 <pcb_new+0x78>
 801199e:	2b20      	cmp	r3, #32
 80119a0:	d133      	bne.n	8011a0a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681c      	ldr	r4, [r3, #0]
 80119a6:	7bfb      	ldrb	r3, [r7, #15]
 80119a8:	4618      	mov	r0, r3
 80119aa:	f009 fd44 	bl	801b436 <udp_new_ip_type>
 80119ae:	4603      	mov	r3, r0
 80119b0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d02a      	beq.n	8011a12 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	2b22      	cmp	r3, #34	; 0x22
 80119c4:	d104      	bne.n	80119d0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	2201      	movs	r2, #1
 80119ce:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	6858      	ldr	r0, [r3, #4]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	461a      	mov	r2, r3
 80119dc:	4917      	ldr	r1, [pc, #92]	; (8011a3c <pcb_new+0xd0>)
 80119de:	f009 fcb1 	bl	801b344 <udp_recv>
      }
      break;
 80119e2:	e016      	b.n	8011a12 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681c      	ldr	r4, [r3, #0]
 80119e8:	7bfb      	ldrb	r3, [r7, #15]
 80119ea:	4618      	mov	r0, r3
 80119ec:	f004 fa50 	bl	8015e90 <tcp_new_ip_type>
 80119f0:	4603      	mov	r3, r0
 80119f2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	685b      	ldr	r3, [r3, #4]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d00b      	beq.n	8011a16 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7ff ff8a 	bl	801191c <setup_tcp>
      }
      break;
 8011a08:	e005      	b.n	8011a16 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	22fa      	movs	r2, #250	; 0xfa
 8011a0e:	711a      	strb	r2, [r3, #4]
      return;
 8011a10:	e00a      	b.n	8011a28 <pcb_new+0xbc>
      break;
 8011a12:	bf00      	nop
 8011a14:	e000      	b.n	8011a18 <pcb_new+0xac>
      break;
 8011a16:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	685b      	ldr	r3, [r3, #4]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d102      	bne.n	8011a28 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	22ff      	movs	r2, #255	; 0xff
 8011a26:	711a      	strb	r2, [r3, #4]
  }
}
 8011a28:	3714      	adds	r7, #20
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd90      	pop	{r4, r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	08023800 	.word	0x08023800
 8011a34:	080239e4 	.word	0x080239e4
 8011a38:	08023844 	.word	0x08023844
 8011a3c:	080113f9 	.word	0x080113f9

08011a40 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b084      	sub	sp, #16
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d102      	bne.n	8011a62 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8011a5c:	68f8      	ldr	r0, [r7, #12]
 8011a5e:	f7ff ff85 	bl	801196c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8011a62:	bf00      	nop
 8011a64:	3710      	adds	r7, #16
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
	...

08011a6c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b086      	sub	sp, #24
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	4603      	mov	r3, r0
 8011a74:	6039      	str	r1, [r7, #0]
 8011a76:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8011a7c:	2007      	movs	r0, #7
 8011a7e:	f001 fdbf 	bl	8013600 <memp_malloc>
 8011a82:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d101      	bne.n	8011a8e <netconn_alloc+0x22>
    return NULL;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	e052      	b.n	8011b34 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	2200      	movs	r2, #0
 8011a92:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	79fa      	ldrb	r2, [r7, #7]
 8011a98:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8011aa0:	79fb      	ldrb	r3, [r7, #7]
 8011aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011aa6:	2b10      	cmp	r3, #16
 8011aa8:	d004      	beq.n	8011ab4 <netconn_alloc+0x48>
 8011aaa:	2b20      	cmp	r3, #32
 8011aac:	d105      	bne.n	8011aba <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8011aae:	2306      	movs	r3, #6
 8011ab0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8011ab2:	e00a      	b.n	8011aca <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8011ab4:	2306      	movs	r3, #6
 8011ab6:	617b      	str	r3, [r7, #20]
      break;
 8011ab8:	e007      	b.n	8011aca <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8011aba:	4b20      	ldr	r3, [pc, #128]	; (8011b3c <netconn_alloc+0xd0>)
 8011abc:	f240 22e5 	movw	r2, #741	; 0x2e5
 8011ac0:	491f      	ldr	r1, [pc, #124]	; (8011b40 <netconn_alloc+0xd4>)
 8011ac2:	4820      	ldr	r0, [pc, #128]	; (8011b44 <netconn_alloc+0xd8>)
 8011ac4:	f00d fa1a 	bl	801eefc <iprintf>
      goto free_and_return;
 8011ac8:	e02f      	b.n	8011b2a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	3310      	adds	r3, #16
 8011ace:	6979      	ldr	r1, [r7, #20]
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f00b ffad 	bl	801da30 <sys_mbox_new>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d125      	bne.n	8011b28 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	330c      	adds	r3, #12
 8011ae0:	2100      	movs	r1, #0
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f00c f86b 	bl	801dbbe <sys_sem_new>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d005      	beq.n	8011afa <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	3310      	adds	r3, #16
 8011af2:	4618      	mov	r0, r3
 8011af4:	f00b ffbe 	bl	801da74 <sys_mbox_free>
    goto free_and_return;
 8011af8:	e017      	b.n	8011b2a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	3314      	adds	r3, #20
 8011afe:	4618      	mov	r0, r3
 8011b00:	f00c f850 	bl	801dba4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	2200      	movs	r2, #0
 8011b08:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b10:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	683a      	ldr	r2, [r7, #0]
 8011b16:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	7cfa      	ldrb	r2, [r7, #19]
 8011b22:	771a      	strb	r2, [r3, #28]
  return conn;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	e005      	b.n	8011b34 <netconn_alloc+0xc8>
    goto free_and_return;
 8011b28:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8011b2a:	68f9      	ldr	r1, [r7, #12]
 8011b2c:	2007      	movs	r0, #7
 8011b2e:	f001 fdb9 	bl	80136a4 <memp_free>
  return NULL;
 8011b32:	2300      	movs	r3, #0
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3718      	adds	r7, #24
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}
 8011b3c:	08023800 	.word	0x08023800
 8011b40:	08023a04 	.word	0x08023a04
 8011b44:	08023844 	.word	0x08023844

08011b48 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b082      	sub	sp, #8
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	685b      	ldr	r3, [r3, #4]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d006      	beq.n	8011b66 <netconn_free+0x1e>
 8011b58:	4b1b      	ldr	r3, [pc, #108]	; (8011bc8 <netconn_free+0x80>)
 8011b5a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011b5e:	491b      	ldr	r1, [pc, #108]	; (8011bcc <netconn_free+0x84>)
 8011b60:	481b      	ldr	r0, [pc, #108]	; (8011bd0 <netconn_free+0x88>)
 8011b62:	f00d f9cb 	bl	801eefc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	3310      	adds	r3, #16
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f00c f809 	bl	801db82 <sys_mbox_valid>
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d006      	beq.n	8011b84 <netconn_free+0x3c>
 8011b76:	4b14      	ldr	r3, [pc, #80]	; (8011bc8 <netconn_free+0x80>)
 8011b78:	f240 3223 	movw	r2, #803	; 0x323
 8011b7c:	4915      	ldr	r1, [pc, #84]	; (8011bd4 <netconn_free+0x8c>)
 8011b7e:	4814      	ldr	r0, [pc, #80]	; (8011bd0 <netconn_free+0x88>)
 8011b80:	f00d f9bc 	bl	801eefc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	3314      	adds	r3, #20
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f00b fffa 	bl	801db82 <sys_mbox_valid>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d006      	beq.n	8011ba2 <netconn_free+0x5a>
 8011b94:	4b0c      	ldr	r3, [pc, #48]	; (8011bc8 <netconn_free+0x80>)
 8011b96:	f240 3226 	movw	r2, #806	; 0x326
 8011b9a:	490f      	ldr	r1, [pc, #60]	; (8011bd8 <netconn_free+0x90>)
 8011b9c:	480c      	ldr	r0, [pc, #48]	; (8011bd0 <netconn_free+0x88>)
 8011b9e:	f00d f9ad 	bl	801eefc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	330c      	adds	r3, #12
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f00c f86f 	bl	801dc8a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	330c      	adds	r3, #12
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f00c f888 	bl	801dcc6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8011bb6:	6879      	ldr	r1, [r7, #4]
 8011bb8:	2007      	movs	r0, #7
 8011bba:	f001 fd73 	bl	80136a4 <memp_free>
}
 8011bbe:	bf00      	nop
 8011bc0:	3708      	adds	r7, #8
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	08023800 	.word	0x08023800
 8011bcc:	08023a2c 	.word	0x08023a2c
 8011bd0:	08023844 	.word	0x08023844
 8011bd4:	08023a5c 	.word	0x08023a5c
 8011bd8:	08023a98 	.word	0x08023a98

08011bdc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b086      	sub	sp, #24
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	3310      	adds	r3, #16
 8011be8:	4618      	mov	r0, r3
 8011bea:	f00b ffca 	bl	801db82 <sys_mbox_valid>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d02f      	beq.n	8011c54 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011bf4:	e018      	b.n	8011c28 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	781b      	ldrb	r3, [r3, #0]
 8011bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011bfe:	2b10      	cmp	r3, #16
 8011c00:	d10e      	bne.n	8011c20 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011c02:	693b      	ldr	r3, [r7, #16]
 8011c04:	f107 020f 	add.w	r2, r7, #15
 8011c08:	4611      	mov	r1, r2
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7ff fbba 	bl	8011384 <lwip_netconn_is_err_msg>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d108      	bne.n	8011c28 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f002 fb83 	bl	8014324 <pbuf_free>
 8011c1e:	e003      	b.n	8011c28 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	4618      	mov	r0, r3
 8011c24:	f000 fdca 	bl	80127bc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	3310      	adds	r3, #16
 8011c2c:	f107 0210 	add.w	r2, r7, #16
 8011c30:	4611      	mov	r1, r2
 8011c32:	4618      	mov	r0, r3
 8011c34:	f00b ff89 	bl	801db4a <sys_arch_mbox_tryfetch>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c3e:	d1da      	bne.n	8011bf6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	3310      	adds	r3, #16
 8011c44:	4618      	mov	r0, r3
 8011c46:	f00b ff15 	bl	801da74 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	3310      	adds	r3, #16
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f00b ffa8 	bl	801dba4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	3314      	adds	r3, #20
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f00b ff92 	bl	801db82 <sys_mbox_valid>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d034      	beq.n	8011cce <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011c64:	e01d      	b.n	8011ca2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	f107 020e 	add.w	r2, r7, #14
 8011c6c:	4611      	mov	r1, r2
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7ff fb88 	bl	8011384 <lwip_netconn_is_err_msg>
 8011c74:	4603      	mov	r3, r0
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d113      	bne.n	8011ca2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8011c7a:	693b      	ldr	r3, [r7, #16]
 8011c7c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8011c7e:	6978      	ldr	r0, [r7, #20]
 8011c80:	f7ff ffac 	bl	8011bdc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8011c84:	697b      	ldr	r3, [r7, #20]
 8011c86:	685b      	ldr	r3, [r3, #4]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d007      	beq.n	8011c9c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	4618      	mov	r0, r3
 8011c92:	f003 f947 	bl	8014f24 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	2200      	movs	r2, #0
 8011c9a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8011c9c:	6978      	ldr	r0, [r7, #20]
 8011c9e:	f7ff ff53 	bl	8011b48 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	3314      	adds	r3, #20
 8011ca6:	f107 0210 	add.w	r2, r7, #16
 8011caa:	4611      	mov	r1, r2
 8011cac:	4618      	mov	r0, r3
 8011cae:	f00b ff4c 	bl	801db4a <sys_arch_mbox_tryfetch>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cb8:	d1d5      	bne.n	8011c66 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	3314      	adds	r3, #20
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f00b fed8 	bl	801da74 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	3314      	adds	r3, #20
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f00b ff6b 	bl	801dba4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8011cce:	bf00      	nop
 8011cd0:	3718      	adds	r7, #24
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
	...

08011cd8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b086      	sub	sp, #24
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d106      	bne.n	8011cfc <lwip_netconn_do_close_internal+0x24>
 8011cee:	4ba1      	ldr	r3, [pc, #644]	; (8011f74 <lwip_netconn_do_close_internal+0x29c>)
 8011cf0:	f240 32a2 	movw	r2, #930	; 0x3a2
 8011cf4:	49a0      	ldr	r1, [pc, #640]	; (8011f78 <lwip_netconn_do_close_internal+0x2a0>)
 8011cf6:	48a1      	ldr	r0, [pc, #644]	; (8011f7c <lwip_netconn_do_close_internal+0x2a4>)
 8011cf8:	f00d f900 	bl	801eefc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	781b      	ldrb	r3, [r3, #0]
 8011d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d04:	2b10      	cmp	r3, #16
 8011d06:	d006      	beq.n	8011d16 <lwip_netconn_do_close_internal+0x3e>
 8011d08:	4b9a      	ldr	r3, [pc, #616]	; (8011f74 <lwip_netconn_do_close_internal+0x29c>)
 8011d0a:	f240 32a3 	movw	r2, #931	; 0x3a3
 8011d0e:	499c      	ldr	r1, [pc, #624]	; (8011f80 <lwip_netconn_do_close_internal+0x2a8>)
 8011d10:	489a      	ldr	r0, [pc, #616]	; (8011f7c <lwip_netconn_do_close_internal+0x2a4>)
 8011d12:	f00d f8f3 	bl	801eefc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	785b      	ldrb	r3, [r3, #1]
 8011d1a:	2b04      	cmp	r3, #4
 8011d1c:	d006      	beq.n	8011d2c <lwip_netconn_do_close_internal+0x54>
 8011d1e:	4b95      	ldr	r3, [pc, #596]	; (8011f74 <lwip_netconn_do_close_internal+0x29c>)
 8011d20:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8011d24:	4997      	ldr	r1, [pc, #604]	; (8011f84 <lwip_netconn_do_close_internal+0x2ac>)
 8011d26:	4895      	ldr	r0, [pc, #596]	; (8011f7c <lwip_netconn_do_close_internal+0x2a4>)
 8011d28:	f00d f8e8 	bl	801eefc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d106      	bne.n	8011d42 <lwip_netconn_do_close_internal+0x6a>
 8011d34:	4b8f      	ldr	r3, [pc, #572]	; (8011f74 <lwip_netconn_do_close_internal+0x29c>)
 8011d36:	f240 32a5 	movw	r2, #933	; 0x3a5
 8011d3a:	4993      	ldr	r1, [pc, #588]	; (8011f88 <lwip_netconn_do_close_internal+0x2b0>)
 8011d3c:	488f      	ldr	r0, [pc, #572]	; (8011f7c <lwip_netconn_do_close_internal+0x2a4>)
 8011d3e:	f00d f8dd 	bl	801eefc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6a1b      	ldr	r3, [r3, #32]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d106      	bne.n	8011d58 <lwip_netconn_do_close_internal+0x80>
 8011d4a:	4b8a      	ldr	r3, [pc, #552]	; (8011f74 <lwip_netconn_do_close_internal+0x29c>)
 8011d4c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011d50:	498e      	ldr	r1, [pc, #568]	; (8011f8c <lwip_netconn_do_close_internal+0x2b4>)
 8011d52:	488a      	ldr	r0, [pc, #552]	; (8011f7c <lwip_netconn_do_close_internal+0x2a4>)
 8011d54:	f00d f8d2 	bl	801eefc <iprintf>

  tpcb = conn->pcb.tcp;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	685b      	ldr	r3, [r3, #4]
 8011d5c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6a1b      	ldr	r3, [r3, #32]
 8011d62:	7a1b      	ldrb	r3, [r3, #8]
 8011d64:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8011d66:	7bfb      	ldrb	r3, [r7, #15]
 8011d68:	f003 0301 	and.w	r3, r3, #1
 8011d6c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8011d6e:	7bfb      	ldrb	r3, [r7, #15]
 8011d70:	f003 0302 	and.w	r3, r3, #2
 8011d74:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8011d76:	7bfb      	ldrb	r3, [r7, #15]
 8011d78:	2b03      	cmp	r3, #3
 8011d7a:	d102      	bne.n	8011d82 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	75bb      	strb	r3, [r7, #22]
 8011d80:	e01f      	b.n	8011dc2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8011d82:	7bbb      	ldrb	r3, [r7, #14]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d00e      	beq.n	8011da6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8011d8c:	2b05      	cmp	r3, #5
 8011d8e:	d007      	beq.n	8011da0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8011d94:	2b06      	cmp	r3, #6
 8011d96:	d003      	beq.n	8011da0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8011d9c:	2b08      	cmp	r3, #8
 8011d9e:	d102      	bne.n	8011da6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8011da0:	2301      	movs	r3, #1
 8011da2:	75bb      	strb	r3, [r7, #22]
 8011da4:	e00d      	b.n	8011dc2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8011da6:	7b7b      	ldrb	r3, [r7, #13]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d008      	beq.n	8011dbe <lwip_netconn_do_close_internal+0xe6>
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	8b5b      	ldrh	r3, [r3, #26]
 8011db0:	f003 0310 	and.w	r3, r3, #16
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d002      	beq.n	8011dbe <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8011db8:	2301      	movs	r3, #1
 8011dba:	75bb      	strb	r3, [r7, #22]
 8011dbc:	e001      	b.n	8011dc2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8011dc2:	7dbb      	ldrb	r3, [r7, #22]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d003      	beq.n	8011dd0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8011dc8:	2100      	movs	r1, #0
 8011dca:	6938      	ldr	r0, [r7, #16]
 8011dcc:	f004 f86e 	bl	8015eac <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	7d1b      	ldrb	r3, [r3, #20]
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d104      	bne.n	8011de2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8011dd8:	2100      	movs	r1, #0
 8011dda:	6938      	ldr	r0, [r7, #16]
 8011ddc:	f004 f8de 	bl	8015f9c <tcp_accept>
 8011de0:	e01d      	b.n	8011e1e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8011de2:	7bbb      	ldrb	r3, [r7, #14]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d007      	beq.n	8011df8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8011de8:	2100      	movs	r1, #0
 8011dea:	6938      	ldr	r0, [r7, #16]
 8011dec:	f004 f870 	bl	8015ed0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8011df0:	2100      	movs	r1, #0
 8011df2:	6938      	ldr	r0, [r7, #16]
 8011df4:	f004 f8d2 	bl	8015f9c <tcp_accept>
    }
    if (shut_tx) {
 8011df8:	7b7b      	ldrb	r3, [r7, #13]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d003      	beq.n	8011e06 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8011dfe:	2100      	movs	r1, #0
 8011e00:	6938      	ldr	r0, [r7, #16]
 8011e02:	f004 f887 	bl	8015f14 <tcp_sent>
    }
    if (shut_close) {
 8011e06:	7dbb      	ldrb	r3, [r7, #22]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d008      	beq.n	8011e1e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	2100      	movs	r1, #0
 8011e10:	6938      	ldr	r0, [r7, #16]
 8011e12:	f004 f8db 	bl	8015fcc <tcp_poll>
      tcp_err(tpcb, NULL);
 8011e16:	2100      	movs	r1, #0
 8011e18:	6938      	ldr	r0, [r7, #16]
 8011e1a:	f004 f89d 	bl	8015f58 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8011e1e:	7dbb      	ldrb	r3, [r7, #22]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d005      	beq.n	8011e30 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8011e24:	6938      	ldr	r0, [r7, #16]
 8011e26:	f002 ff37 	bl	8014c98 <tcp_close>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	75fb      	strb	r3, [r7, #23]
 8011e2e:	e007      	b.n	8011e40 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8011e30:	7bbb      	ldrb	r3, [r7, #14]
 8011e32:	7b7a      	ldrb	r2, [r7, #13]
 8011e34:	4619      	mov	r1, r3
 8011e36:	6938      	ldr	r0, [r7, #16]
 8011e38:	f002 ff5a 	bl	8014cf0 <tcp_shutdown>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8011e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d102      	bne.n	8011e4e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8011e48:	2301      	movs	r3, #1
 8011e4a:	757b      	strb	r3, [r7, #21]
 8011e4c:	e016      	b.n	8011e7c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8011e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e56:	d10f      	bne.n	8011e78 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6a1b      	ldr	r3, [r3, #32]
 8011e5c:	7a5b      	ldrb	r3, [r3, #9]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d10c      	bne.n	8011e7c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8011e62:	2301      	movs	r3, #1
 8011e64:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8011e66:	7dbb      	ldrb	r3, [r7, #22]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d007      	beq.n	8011e7c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8011e6c:	6938      	ldr	r0, [r7, #16]
 8011e6e:	f003 f859 	bl	8014f24 <tcp_abort>
          err = ERR_OK;
 8011e72:	2300      	movs	r3, #0
 8011e74:	75fb      	strb	r3, [r7, #23]
 8011e76:	e001      	b.n	8011e7c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8011e78:	2301      	movs	r3, #1
 8011e7a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8011e7c:	7d7b      	ldrb	r3, [r7, #21]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d044      	beq.n	8011f0c <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6a1b      	ldr	r3, [r3, #32]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	330c      	adds	r3, #12
 8011e8a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6a1b      	ldr	r3, [r3, #32]
 8011e90:	7dfa      	ldrb	r2, [r7, #23]
 8011e92:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2200      	movs	r2, #0
 8011e98:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8011ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d129      	bne.n	8011efc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8011ea8:	7dbb      	ldrb	r3, [r7, #22]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d00c      	beq.n	8011ec8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d005      	beq.n	8011ec8 <lwip_netconn_do_close_internal+0x1f0>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	2104      	movs	r1, #4
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	4798      	blx	r3
      }
      if (shut_rx) {
 8011ec8:	7bbb      	ldrb	r3, [r7, #14]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d009      	beq.n	8011ee2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d005      	beq.n	8011ee2 <lwip_netconn_do_close_internal+0x20a>
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eda:	2200      	movs	r2, #0
 8011edc:	2100      	movs	r1, #0
 8011ede:	6878      	ldr	r0, [r7, #4]
 8011ee0:	4798      	blx	r3
      }
      if (shut_tx) {
 8011ee2:	7b7b      	ldrb	r3, [r7, #13]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d009      	beq.n	8011efc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d005      	beq.n	8011efc <lwip_netconn_do_close_internal+0x224>
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	2102      	movs	r1, #2
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011efc:	78fb      	ldrb	r3, [r7, #3]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d002      	beq.n	8011f08 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8011f02:	68b8      	ldr	r0, [r7, #8]
 8011f04:	f00b feb4 	bl	801dc70 <sys_sem_signal>
    }
    return ERR_OK;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	e02e      	b.n	8011f6a <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8011f0c:	7d7b      	ldrb	r3, [r7, #21]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d11e      	bne.n	8011f50 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	7d1b      	ldrb	r3, [r3, #20]
 8011f16:	2b01      	cmp	r3, #1
 8011f18:	d106      	bne.n	8011f28 <lwip_netconn_do_close_internal+0x250>
 8011f1a:	4b16      	ldr	r3, [pc, #88]	; (8011f74 <lwip_netconn_do_close_internal+0x29c>)
 8011f1c:	f240 4241 	movw	r2, #1089	; 0x441
 8011f20:	491b      	ldr	r1, [pc, #108]	; (8011f90 <lwip_netconn_do_close_internal+0x2b8>)
 8011f22:	4816      	ldr	r0, [pc, #88]	; (8011f7c <lwip_netconn_do_close_internal+0x2a4>)
 8011f24:	f00c ffea 	bl	801eefc <iprintf>
    if (shut_tx) {
 8011f28:	7b7b      	ldrb	r3, [r7, #13]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d003      	beq.n	8011f36 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8011f2e:	4919      	ldr	r1, [pc, #100]	; (8011f94 <lwip_netconn_do_close_internal+0x2bc>)
 8011f30:	6938      	ldr	r0, [r7, #16]
 8011f32:	f003 ffef 	bl	8015f14 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8011f36:	2201      	movs	r2, #1
 8011f38:	4917      	ldr	r1, [pc, #92]	; (8011f98 <lwip_netconn_do_close_internal+0x2c0>)
 8011f3a:	6938      	ldr	r0, [r7, #16]
 8011f3c:	f004 f846 	bl	8015fcc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8011f40:	4916      	ldr	r1, [pc, #88]	; (8011f9c <lwip_netconn_do_close_internal+0x2c4>)
 8011f42:	6938      	ldr	r0, [r7, #16]
 8011f44:	f004 f808 	bl	8015f58 <tcp_err>
    tcp_arg(tpcb, conn);
 8011f48:	6879      	ldr	r1, [r7, #4]
 8011f4a:	6938      	ldr	r0, [r7, #16]
 8011f4c:	f003 ffae 	bl	8015eac <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8011f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d106      	bne.n	8011f66 <lwip_netconn_do_close_internal+0x28e>
 8011f58:	4b06      	ldr	r3, [pc, #24]	; (8011f74 <lwip_netconn_do_close_internal+0x29c>)
 8011f5a:	f240 424d 	movw	r2, #1101	; 0x44d
 8011f5e:	4910      	ldr	r1, [pc, #64]	; (8011fa0 <lwip_netconn_do_close_internal+0x2c8>)
 8011f60:	4806      	ldr	r0, [pc, #24]	; (8011f7c <lwip_netconn_do_close_internal+0x2a4>)
 8011f62:	f00c ffcb 	bl	801eefc <iprintf>
  return err;
 8011f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3718      	adds	r7, #24
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	08023800 	.word	0x08023800
 8011f78:	08023ad4 	.word	0x08023ad4
 8011f7c:	08023844 	.word	0x08023844
 8011f80:	08023ae4 	.word	0x08023ae4
 8011f84:	08023b04 	.word	0x08023b04
 8011f88:	08023b28 	.word	0x08023b28
 8011f8c:	08023968 	.word	0x08023968
 8011f90:	08023b3c 	.word	0x08023b3c
 8011f94:	080116c9 	.word	0x080116c9
 8011f98:	08011601 	.word	0x08011601
 8011f9c:	08011771 	.word	0x08011771
 8011fa0:	08023b60 	.word	0x08023b60

08011fa4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b084      	sub	sp, #16
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	785b      	ldrb	r3, [r3, #1]
 8011fb6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8011fb8:	7afb      	ldrb	r3, [r7, #11]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d00d      	beq.n	8011fda <lwip_netconn_do_delconn+0x36>
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	781b      	ldrb	r3, [r3, #0]
 8011fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011fc8:	2b10      	cmp	r3, #16
 8011fca:	d006      	beq.n	8011fda <lwip_netconn_do_delconn+0x36>
 8011fcc:	4b60      	ldr	r3, [pc, #384]	; (8012150 <lwip_netconn_do_delconn+0x1ac>)
 8011fce:	f240 425e 	movw	r2, #1118	; 0x45e
 8011fd2:	4960      	ldr	r1, [pc, #384]	; (8012154 <lwip_netconn_do_delconn+0x1b0>)
 8011fd4:	4860      	ldr	r0, [pc, #384]	; (8012158 <lwip_netconn_do_delconn+0x1b4>)
 8011fd6:	f00c ff91 	bl	801eefc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8011fda:	7afb      	ldrb	r3, [r7, #11]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d005      	beq.n	8011fec <lwip_netconn_do_delconn+0x48>
 8011fe0:	7afb      	ldrb	r3, [r7, #11]
 8011fe2:	2b02      	cmp	r3, #2
 8011fe4:	d002      	beq.n	8011fec <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8011fe6:	7afb      	ldrb	r3, [r7, #11]
 8011fe8:	2b03      	cmp	r3, #3
 8011fea:	d109      	bne.n	8012000 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8011fec:	7afb      	ldrb	r3, [r7, #11]
 8011fee:	2b03      	cmp	r3, #3
 8011ff0:	d10a      	bne.n	8012008 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	7f1b      	ldrb	r3, [r3, #28]
 8011ff8:	f003 0304 	and.w	r3, r3, #4
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d103      	bne.n	8012008 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	22fb      	movs	r2, #251	; 0xfb
 8012004:	711a      	strb	r2, [r3, #4]
 8012006:	e097      	b.n	8012138 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8012008:	7afb      	ldrb	r3, [r7, #11]
 801200a:	2b03      	cmp	r3, #3
 801200c:	d10d      	bne.n	801202a <lwip_netconn_do_delconn+0x86>
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	7f1b      	ldrb	r3, [r3, #28]
 8012014:	f003 0304 	and.w	r3, r3, #4
 8012018:	2b00      	cmp	r3, #0
 801201a:	d106      	bne.n	801202a <lwip_netconn_do_delconn+0x86>
 801201c:	4b4c      	ldr	r3, [pc, #304]	; (8012150 <lwip_netconn_do_delconn+0x1ac>)
 801201e:	f240 427a 	movw	r2, #1146	; 0x47a
 8012022:	494e      	ldr	r1, [pc, #312]	; (801215c <lwip_netconn_do_delconn+0x1b8>)
 8012024:	484c      	ldr	r0, [pc, #304]	; (8012158 <lwip_netconn_do_delconn+0x1b4>)
 8012026:	f00c ff69 	bl	801eefc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	2200      	movs	r2, #0
 801202e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	4618      	mov	r0, r3
 8012036:	f7ff fdd1 	bl	8011bdc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	685b      	ldr	r3, [r3, #4]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d05f      	beq.n	8012104 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801204e:	2b10      	cmp	r3, #16
 8012050:	d00d      	beq.n	801206e <lwip_netconn_do_delconn+0xca>
 8012052:	2b20      	cmp	r3, #32
 8012054:	d151      	bne.n	80120fa <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	685b      	ldr	r3, [r3, #4]
 801205c:	2200      	movs	r2, #0
 801205e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	4618      	mov	r0, r3
 8012068:	f009 f98c 	bl	801b384 <udp_remove>
          break;
 801206c:	e046      	b.n	80120fc <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	6a1b      	ldr	r3, [r3, #32]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d006      	beq.n	8012086 <lwip_netconn_do_delconn+0xe2>
 8012078:	4b35      	ldr	r3, [pc, #212]	; (8012150 <lwip_netconn_do_delconn+0x1ac>)
 801207a:	f240 4294 	movw	r2, #1172	; 0x494
 801207e:	4938      	ldr	r1, [pc, #224]	; (8012160 <lwip_netconn_do_delconn+0x1bc>)
 8012080:	4835      	ldr	r0, [pc, #212]	; (8012158 <lwip_netconn_do_delconn+0x1b4>)
 8012082:	f00c ff3b 	bl	801eefc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	2204      	movs	r2, #4
 801208c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	2203      	movs	r2, #3
 8012092:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	68fa      	ldr	r2, [r7, #12]
 801209a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	2100      	movs	r1, #0
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7ff fe18 	bl	8011cd8 <lwip_netconn_do_close_internal>
 80120a8:	4603      	mov	r3, r0
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d04b      	beq.n	8012146 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	785b      	ldrb	r3, [r3, #1]
 80120b4:	2b04      	cmp	r3, #4
 80120b6:	d006      	beq.n	80120c6 <lwip_netconn_do_delconn+0x122>
 80120b8:	4b25      	ldr	r3, [pc, #148]	; (8012150 <lwip_netconn_do_delconn+0x1ac>)
 80120ba:	f240 429a 	movw	r2, #1178	; 0x49a
 80120be:	4929      	ldr	r1, [pc, #164]	; (8012164 <lwip_netconn_do_delconn+0x1c0>)
 80120c0:	4825      	ldr	r0, [pc, #148]	; (8012158 <lwip_netconn_do_delconn+0x1b4>)
 80120c2:	f00c ff1b 	bl	801eefc <iprintf>
            UNLOCK_TCPIP_CORE();
 80120c6:	4828      	ldr	r0, [pc, #160]	; (8012168 <lwip_netconn_do_delconn+0x1c4>)
 80120c8:	f00b fe43 	bl	801dd52 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	330c      	adds	r3, #12
 80120d2:	2100      	movs	r1, #0
 80120d4:	4618      	mov	r0, r3
 80120d6:	f00b fd9a 	bl	801dc0e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80120da:	4823      	ldr	r0, [pc, #140]	; (8012168 <lwip_netconn_do_delconn+0x1c4>)
 80120dc:	f00b fe2a 	bl	801dd34 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	785b      	ldrb	r3, [r3, #1]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d02d      	beq.n	8012146 <lwip_netconn_do_delconn+0x1a2>
 80120ea:	4b19      	ldr	r3, [pc, #100]	; (8012150 <lwip_netconn_do_delconn+0x1ac>)
 80120ec:	f240 429e 	movw	r2, #1182	; 0x49e
 80120f0:	491c      	ldr	r1, [pc, #112]	; (8012164 <lwip_netconn_do_delconn+0x1c0>)
 80120f2:	4819      	ldr	r0, [pc, #100]	; (8012158 <lwip_netconn_do_delconn+0x1b4>)
 80120f4:	f00c ff02 	bl	801eefc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80120f8:	e025      	b.n	8012146 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80120fa:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	2200      	movs	r2, #0
 8012102:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801210a:	2b00      	cmp	r3, #0
 801210c:	d007      	beq.n	801211e <lwip_netconn_do_delconn+0x17a>
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012114:	68fa      	ldr	r2, [r7, #12]
 8012116:	6810      	ldr	r0, [r2, #0]
 8012118:	2200      	movs	r2, #0
 801211a:	2100      	movs	r1, #0
 801211c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012124:	2b00      	cmp	r3, #0
 8012126:	d007      	beq.n	8012138 <lwip_netconn_do_delconn+0x194>
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801212e:	68fa      	ldr	r2, [r7, #12]
 8012130:	6810      	ldr	r0, [r2, #0]
 8012132:	2200      	movs	r2, #0
 8012134:	2102      	movs	r1, #2
 8012136:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	330c      	adds	r3, #12
 801213e:	4618      	mov	r0, r3
 8012140:	f00b fdb0 	bl	801dca4 <sys_sem_valid>
 8012144:	e000      	b.n	8012148 <lwip_netconn_do_delconn+0x1a4>
          return;
 8012146:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8012148:	3710      	adds	r7, #16
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}
 801214e:	bf00      	nop
 8012150:	08023800 	.word	0x08023800
 8012154:	08023b70 	.word	0x08023b70
 8012158:	08023844 	.word	0x08023844
 801215c:	08023b84 	.word	0x08023b84
 8012160:	08023ba4 	.word	0x08023ba4
 8012164:	08023bc0 	.word	0x08023bc0
 8012168:	2000a9e4 	.word	0x2000a9e4

0801216c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b084      	sub	sp, #16
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	685b      	ldr	r3, [r3, #4]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d025      	beq.n	80121ce <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801218c:	2b10      	cmp	r3, #16
 801218e:	d00e      	beq.n	80121ae <lwip_netconn_do_bind+0x42>
 8012190:	2b20      	cmp	r3, #32
 8012192:	d119      	bne.n	80121c8 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	6858      	ldr	r0, [r3, #4]
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	6899      	ldr	r1, [r3, #8]
 801219e:	68bb      	ldr	r3, [r7, #8]
 80121a0:	899b      	ldrh	r3, [r3, #12]
 80121a2:	461a      	mov	r2, r3
 80121a4:	f009 f846 	bl	801b234 <udp_bind>
 80121a8:	4603      	mov	r3, r0
 80121aa:	73fb      	strb	r3, [r7, #15]
        break;
 80121ac:	e011      	b.n	80121d2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80121ae:	68bb      	ldr	r3, [r7, #8]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	6858      	ldr	r0, [r3, #4]
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	6899      	ldr	r1, [r3, #8]
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	899b      	ldrh	r3, [r3, #12]
 80121bc:	461a      	mov	r2, r3
 80121be:	f002 febd 	bl	8014f3c <tcp_bind>
 80121c2:	4603      	mov	r3, r0
 80121c4:	73fb      	strb	r3, [r7, #15]
        break;
 80121c6:	e004      	b.n	80121d2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80121c8:	23fa      	movs	r3, #250	; 0xfa
 80121ca:	73fb      	strb	r3, [r7, #15]
        break;
 80121cc:	e001      	b.n	80121d2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80121ce:	23fa      	movs	r3, #250	; 0xfa
 80121d0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	7bfa      	ldrb	r2, [r7, #15]
 80121d6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80121d8:	bf00      	nop
 80121da:	3710      	adds	r7, #16
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b084      	sub	sp, #16
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7ff f875 	bl	80112e0 <netconn_err>
 80121f6:	4603      	mov	r3, r0
 80121f8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80121fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d134      	bne.n	801226c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	685b      	ldr	r3, [r3, #4]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d02d      	beq.n	8012268 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012216:	2b20      	cmp	r3, #32
 8012218:	d123      	bne.n	8012262 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	689b      	ldr	r3, [r3, #8]
 801221e:	689b      	ldr	r3, [r3, #8]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d10c      	bne.n	801223e <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	685a      	ldr	r2, [r3, #4]
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	689b      	ldr	r3, [r3, #8]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	4619      	mov	r1, r3
 8012232:	4610      	mov	r0, r2
 8012234:	f008 fe14 	bl	801ae60 <udp_send>
 8012238:	4603      	mov	r3, r0
 801223a:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 801223c:	e016      	b.n	801226c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	6858      	ldr	r0, [r3, #4]
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	689b      	ldr	r3, [r3, #8]
 8012248:	6819      	ldr	r1, [r3, #0]
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	689b      	ldr	r3, [r3, #8]
 801224e:	f103 0208 	add.w	r2, r3, #8
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	689b      	ldr	r3, [r3, #8]
 8012256:	899b      	ldrh	r3, [r3, #12]
 8012258:	f008 fe36 	bl	801aec8 <udp_sendto>
 801225c:	4603      	mov	r3, r0
 801225e:	73fb      	strb	r3, [r7, #15]
          break;
 8012260:	e004      	b.n	801226c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8012262:	23f5      	movs	r3, #245	; 0xf5
 8012264:	73fb      	strb	r3, [r7, #15]
          break;
 8012266:	e001      	b.n	801226c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8012268:	23f5      	movs	r3, #245	; 0xf5
 801226a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	7bfa      	ldrb	r2, [r7, #15]
 8012270:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012272:	bf00      	nop
 8012274:	3710      	adds	r7, #16
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}

0801227a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 801227a:	b580      	push	{r7, lr}
 801227c:	b086      	sub	sp, #24
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8012286:	693b      	ldr	r3, [r7, #16]
 8012288:	2200      	movs	r2, #0
 801228a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	685b      	ldr	r3, [r3, #4]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d022      	beq.n	80122dc <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	781b      	ldrb	r3, [r3, #0]
 801229c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80122a0:	2b10      	cmp	r3, #16
 80122a2:	d11b      	bne.n	80122dc <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80122a4:	693b      	ldr	r3, [r7, #16]
 80122a6:	689b      	ldr	r3, [r3, #8]
 80122a8:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122b0:	d202      	bcs.n	80122b8 <lwip_netconn_do_recv+0x3e>
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	e001      	b.n	80122bc <lwip_netconn_do_recv+0x42>
 80122b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80122bc:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80122be:	693b      	ldr	r3, [r7, #16]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	685b      	ldr	r3, [r3, #4]
 80122c4:	89fa      	ldrh	r2, [r7, #14]
 80122c6:	4611      	mov	r1, r2
 80122c8:	4618      	mov	r0, r3
 80122ca:	f002 ff29 	bl	8015120 <tcp_recved>
        remaining -= recved;
 80122ce:	89fb      	ldrh	r3, [r7, #14]
 80122d0:	697a      	ldr	r2, [r7, #20]
 80122d2:	1ad3      	subs	r3, r2, r3
 80122d4:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d1e6      	bne.n	80122aa <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80122dc:	bf00      	nop
 80122de:	3718      	adds	r7, #24
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b088      	sub	sp, #32
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	460b      	mov	r3, r1
 80122ee:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80122f0:	2300      	movs	r3, #0
 80122f2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d106      	bne.n	8012308 <lwip_netconn_do_writemore+0x24>
 80122fa:	4b96      	ldr	r3, [pc, #600]	; (8012554 <lwip_netconn_do_writemore+0x270>)
 80122fc:	f240 6273 	movw	r2, #1651	; 0x673
 8012300:	4995      	ldr	r1, [pc, #596]	; (8012558 <lwip_netconn_do_writemore+0x274>)
 8012302:	4896      	ldr	r0, [pc, #600]	; (801255c <lwip_netconn_do_writemore+0x278>)
 8012304:	f00c fdfa 	bl	801eefc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	785b      	ldrb	r3, [r3, #1]
 801230c:	2b01      	cmp	r3, #1
 801230e:	d006      	beq.n	801231e <lwip_netconn_do_writemore+0x3a>
 8012310:	4b90      	ldr	r3, [pc, #576]	; (8012554 <lwip_netconn_do_writemore+0x270>)
 8012312:	f240 6274 	movw	r2, #1652	; 0x674
 8012316:	4992      	ldr	r1, [pc, #584]	; (8012560 <lwip_netconn_do_writemore+0x27c>)
 8012318:	4890      	ldr	r0, [pc, #576]	; (801255c <lwip_netconn_do_writemore+0x278>)
 801231a:	f00c fdef 	bl	801eefc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6a1b      	ldr	r3, [r3, #32]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d106      	bne.n	8012334 <lwip_netconn_do_writemore+0x50>
 8012326:	4b8b      	ldr	r3, [pc, #556]	; (8012554 <lwip_netconn_do_writemore+0x270>)
 8012328:	f240 6275 	movw	r2, #1653	; 0x675
 801232c:	498d      	ldr	r1, [pc, #564]	; (8012564 <lwip_netconn_do_writemore+0x280>)
 801232e:	488b      	ldr	r0, [pc, #556]	; (801255c <lwip_netconn_do_writemore+0x278>)
 8012330:	f00c fde4 	bl	801eefc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d106      	bne.n	801234a <lwip_netconn_do_writemore+0x66>
 801233c:	4b85      	ldr	r3, [pc, #532]	; (8012554 <lwip_netconn_do_writemore+0x270>)
 801233e:	f240 6276 	movw	r2, #1654	; 0x676
 8012342:	4989      	ldr	r1, [pc, #548]	; (8012568 <lwip_netconn_do_writemore+0x284>)
 8012344:	4885      	ldr	r0, [pc, #532]	; (801255c <lwip_netconn_do_writemore+0x278>)
 8012346:	f00c fdd9 	bl	801eefc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6a1b      	ldr	r3, [r3, #32]
 801234e:	699a      	ldr	r2, [r3, #24]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6a1b      	ldr	r3, [r3, #32]
 8012354:	695b      	ldr	r3, [r3, #20]
 8012356:	429a      	cmp	r2, r3
 8012358:	d306      	bcc.n	8012368 <lwip_netconn_do_writemore+0x84>
 801235a:	4b7e      	ldr	r3, [pc, #504]	; (8012554 <lwip_netconn_do_writemore+0x270>)
 801235c:	f240 6277 	movw	r2, #1655	; 0x677
 8012360:	4982      	ldr	r1, [pc, #520]	; (801256c <lwip_netconn_do_writemore+0x288>)
 8012362:	487e      	ldr	r0, [pc, #504]	; (801255c <lwip_netconn_do_writemore+0x278>)
 8012364:	f00c fdca 	bl	801eefc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	6a1b      	ldr	r3, [r3, #32]
 801236c:	899b      	ldrh	r3, [r3, #12]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d106      	bne.n	8012380 <lwip_netconn_do_writemore+0x9c>
 8012372:	4b78      	ldr	r3, [pc, #480]	; (8012554 <lwip_netconn_do_writemore+0x270>)
 8012374:	f240 6279 	movw	r2, #1657	; 0x679
 8012378:	497d      	ldr	r1, [pc, #500]	; (8012570 <lwip_netconn_do_writemore+0x28c>)
 801237a:	4878      	ldr	r0, [pc, #480]	; (801255c <lwip_netconn_do_writemore+0x278>)
 801237c:	f00c fdbe 	bl	801eefc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6a1b      	ldr	r3, [r3, #32]
 8012384:	7f1b      	ldrb	r3, [r3, #28]
 8012386:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	7f1b      	ldrb	r3, [r3, #28]
 801238c:	f003 0302 	and.w	r3, r3, #2
 8012390:	2b00      	cmp	r3, #0
 8012392:	d104      	bne.n	801239e <lwip_netconn_do_writemore+0xba>
 8012394:	7ebb      	ldrb	r3, [r7, #26]
 8012396:	f003 0304 	and.w	r3, r3, #4
 801239a:	2b00      	cmp	r3, #0
 801239c:	d001      	beq.n	80123a2 <lwip_netconn_do_writemore+0xbe>
 801239e:	2301      	movs	r3, #1
 80123a0:	e000      	b.n	80123a4 <lwip_netconn_do_writemore+0xc0>
 80123a2:	2300      	movs	r3, #0
 80123a4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	6a1b      	ldr	r3, [r3, #32]
 80123aa:	689b      	ldr	r3, [r3, #8]
 80123ac:	681a      	ldr	r2, [r3, #0]
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	6a1b      	ldr	r3, [r3, #32]
 80123b2:	691b      	ldr	r3, [r3, #16]
 80123b4:	4413      	add	r3, r2
 80123b6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6a1b      	ldr	r3, [r3, #32]
 80123bc:	689b      	ldr	r3, [r3, #8]
 80123be:	685a      	ldr	r2, [r3, #4]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6a1b      	ldr	r3, [r3, #32]
 80123c4:	691b      	ldr	r3, [r3, #16]
 80123c6:	1ad3      	subs	r3, r2, r3
 80123c8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80123ca:	693b      	ldr	r3, [r7, #16]
 80123cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123d0:	d307      	bcc.n	80123e2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80123d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80123d6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80123d8:	7ebb      	ldrb	r3, [r7, #26]
 80123da:	f043 0302 	orr.w	r3, r3, #2
 80123de:	76bb      	strb	r3, [r7, #26]
 80123e0:	e001      	b.n	80123e6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80123e2:	693b      	ldr	r3, [r7, #16]
 80123e4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	685b      	ldr	r3, [r3, #4]
 80123ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80123ee:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80123f0:	89fa      	ldrh	r2, [r7, #14]
 80123f2:	8bbb      	ldrh	r3, [r7, #28]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d216      	bcs.n	8012426 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80123f8:	89fb      	ldrh	r3, [r7, #14]
 80123fa:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80123fc:	7e3b      	ldrb	r3, [r7, #24]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d00d      	beq.n	801241e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8012402:	8bbb      	ldrh	r3, [r7, #28]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d10e      	bne.n	8012426 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6a1b      	ldr	r3, [r3, #32]
 801240c:	699b      	ldr	r3, [r3, #24]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d102      	bne.n	8012418 <lwip_netconn_do_writemore+0x134>
 8012412:	f06f 0306 	mvn.w	r3, #6
 8012416:	e000      	b.n	801241a <lwip_netconn_do_writemore+0x136>
 8012418:	2300      	movs	r3, #0
 801241a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 801241c:	e07d      	b.n	801251a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801241e:	7ebb      	ldrb	r3, [r7, #26]
 8012420:	f043 0302 	orr.w	r3, r3, #2
 8012424:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6a1b      	ldr	r3, [r3, #32]
 801242a:	691a      	ldr	r2, [r3, #16]
 801242c:	8bbb      	ldrh	r3, [r7, #28]
 801242e:	441a      	add	r2, r3
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6a1b      	ldr	r3, [r3, #32]
 8012434:	689b      	ldr	r3, [r3, #8]
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	429a      	cmp	r2, r3
 801243a:	d906      	bls.n	801244a <lwip_netconn_do_writemore+0x166>
 801243c:	4b45      	ldr	r3, [pc, #276]	; (8012554 <lwip_netconn_do_writemore+0x270>)
 801243e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8012442:	494c      	ldr	r1, [pc, #304]	; (8012574 <lwip_netconn_do_writemore+0x290>)
 8012444:	4845      	ldr	r0, [pc, #276]	; (801255c <lwip_netconn_do_writemore+0x278>)
 8012446:	f00c fd59 	bl	801eefc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 801244a:	8bbb      	ldrh	r3, [r7, #28]
 801244c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012450:	4293      	cmp	r3, r2
 8012452:	d103      	bne.n	801245c <lwip_netconn_do_writemore+0x178>
 8012454:	693b      	ldr	r3, [r7, #16]
 8012456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801245a:	d209      	bcs.n	8012470 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012460:	8bba      	ldrh	r2, [r7, #28]
 8012462:	429a      	cmp	r2, r3
 8012464:	d10b      	bne.n	801247e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6a1b      	ldr	r3, [r3, #32]
 801246a:	899b      	ldrh	r3, [r3, #12]
 801246c:	2b01      	cmp	r3, #1
 801246e:	d906      	bls.n	801247e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8012470:	2301      	movs	r3, #1
 8012472:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012474:	7ebb      	ldrb	r3, [r7, #26]
 8012476:	f043 0302 	orr.w	r3, r3, #2
 801247a:	76bb      	strb	r3, [r7, #26]
 801247c:	e001      	b.n	8012482 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 801247e:	2300      	movs	r3, #0
 8012480:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6858      	ldr	r0, [r3, #4]
 8012486:	7ebb      	ldrb	r3, [r7, #26]
 8012488:	8bba      	ldrh	r2, [r7, #28]
 801248a:	6979      	ldr	r1, [r7, #20]
 801248c:	f006 fc4c 	bl	8018d28 <tcp_write>
 8012490:	4603      	mov	r3, r0
 8012492:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8012494:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d12c      	bne.n	80124f6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6a1b      	ldr	r3, [r3, #32]
 80124a0:	6999      	ldr	r1, [r3, #24]
 80124a2:	8bba      	ldrh	r2, [r7, #28]
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	6a1b      	ldr	r3, [r3, #32]
 80124a8:	440a      	add	r2, r1
 80124aa:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6a1b      	ldr	r3, [r3, #32]
 80124b0:	6919      	ldr	r1, [r3, #16]
 80124b2:	8bba      	ldrh	r2, [r7, #28]
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6a1b      	ldr	r3, [r3, #32]
 80124b8:	440a      	add	r2, r1
 80124ba:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6a1b      	ldr	r3, [r3, #32]
 80124c0:	691a      	ldr	r2, [r3, #16]
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6a1b      	ldr	r3, [r3, #32]
 80124c6:	689b      	ldr	r3, [r3, #8]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d113      	bne.n	80124f6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6a1b      	ldr	r3, [r3, #32]
 80124d2:	899a      	ldrh	r2, [r3, #12]
 80124d4:	3a01      	subs	r2, #1
 80124d6:	b292      	uxth	r2, r2
 80124d8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	6a1b      	ldr	r3, [r3, #32]
 80124de:	899b      	ldrh	r3, [r3, #12]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d008      	beq.n	80124f6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6a1b      	ldr	r3, [r3, #32]
 80124e8:	689a      	ldr	r2, [r3, #8]
 80124ea:	3208      	adds	r2, #8
 80124ec:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6a1b      	ldr	r3, [r3, #32]
 80124f2:	2200      	movs	r2, #0
 80124f4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80124f6:	7e7b      	ldrb	r3, [r7, #25]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d004      	beq.n	8012506 <lwip_netconn_do_writemore+0x222>
 80124fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012500:	2b00      	cmp	r3, #0
 8012502:	f43f af50 	beq.w	80123a6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8012506:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d004      	beq.n	8012518 <lwip_netconn_do_writemore+0x234>
 801250e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012516:	d146      	bne.n	80125a6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8012518:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801251a:	7e3b      	ldrb	r3, [r7, #24]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d02b      	beq.n	8012578 <lwip_netconn_do_writemore+0x294>
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	6a1b      	ldr	r3, [r3, #32]
 8012524:	699a      	ldr	r2, [r3, #24]
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	6a1b      	ldr	r3, [r3, #32]
 801252a:	695b      	ldr	r3, [r3, #20]
 801252c:	429a      	cmp	r2, r3
 801252e:	d223      	bcs.n	8012578 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012534:	2b00      	cmp	r3, #0
 8012536:	d005      	beq.n	8012544 <lwip_netconn_do_writemore+0x260>
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801253c:	2200      	movs	r2, #0
 801253e:	2103      	movs	r1, #3
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	7f1b      	ldrb	r3, [r3, #28]
 8012548:	f043 0310 	orr.w	r3, r3, #16
 801254c:	b2da      	uxtb	r2, r3
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	771a      	strb	r2, [r3, #28]
 8012552:	e028      	b.n	80125a6 <lwip_netconn_do_writemore+0x2c2>
 8012554:	08023800 	.word	0x08023800
 8012558:	08023958 	.word	0x08023958
 801255c:	08023844 	.word	0x08023844
 8012560:	08023c60 	.word	0x08023c60
 8012564:	08023968 	.word	0x08023968
 8012568:	08023c80 	.word	0x08023c80
 801256c:	08023c98 	.word	0x08023c98
 8012570:	08023cd8 	.word	0x08023cd8
 8012574:	08023d00 	.word	0x08023d00
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	685b      	ldr	r3, [r3, #4]
 801257c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012580:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8012584:	d305      	bcc.n	8012592 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	685b      	ldr	r3, [r3, #4]
 801258a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801258e:	2b04      	cmp	r3, #4
 8012590:	d909      	bls.n	80125a6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012596:	2b00      	cmp	r3, #0
 8012598:	d005      	beq.n	80125a6 <lwip_netconn_do_writemore+0x2c2>
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801259e:	2200      	movs	r2, #0
 80125a0:	2103      	movs	r1, #3
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80125a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d11d      	bne.n	80125ea <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	6a1b      	ldr	r3, [r3, #32]
 80125b2:	699a      	ldr	r2, [r3, #24]
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6a1b      	ldr	r3, [r3, #32]
 80125b8:	695b      	ldr	r3, [r3, #20]
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d002      	beq.n	80125c4 <lwip_netconn_do_writemore+0x2e0>
 80125be:	7e3b      	ldrb	r3, [r7, #24]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d001      	beq.n	80125c8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80125c4:	2301      	movs	r3, #1
 80125c6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	685b      	ldr	r3, [r3, #4]
 80125cc:	4618      	mov	r0, r3
 80125ce:	f007 f995 	bl	80198fc <tcp_output>
 80125d2:	4603      	mov	r3, r0
 80125d4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80125d6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80125da:	f113 0f04 	cmn.w	r3, #4
 80125de:	d12c      	bne.n	801263a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80125e0:	7b3b      	ldrb	r3, [r7, #12]
 80125e2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80125e4:	2301      	movs	r3, #1
 80125e6:	76fb      	strb	r3, [r7, #27]
 80125e8:	e027      	b.n	801263a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 80125ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80125ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125f2:	d120      	bne.n	8012636 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	4618      	mov	r0, r3
 80125fa:	f007 f97f 	bl	80198fc <tcp_output>
 80125fe:	4603      	mov	r3, r0
 8012600:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8012602:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012606:	f113 0f04 	cmn.w	r3, #4
 801260a:	d104      	bne.n	8012616 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801260c:	7b7b      	ldrb	r3, [r7, #13]
 801260e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012610:	2301      	movs	r3, #1
 8012612:	76fb      	strb	r3, [r7, #27]
 8012614:	e011      	b.n	801263a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8012616:	7e3b      	ldrb	r3, [r7, #24]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d00e      	beq.n	801263a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6a1b      	ldr	r3, [r3, #32]
 8012620:	699b      	ldr	r3, [r3, #24]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d102      	bne.n	801262c <lwip_netconn_do_writemore+0x348>
 8012626:	f06f 0306 	mvn.w	r3, #6
 801262a:	e000      	b.n	801262e <lwip_netconn_do_writemore+0x34a>
 801262c:	2300      	movs	r3, #0
 801262e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012630:	2301      	movs	r3, #1
 8012632:	76fb      	strb	r3, [r7, #27]
 8012634:	e001      	b.n	801263a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8012636:	2301      	movs	r3, #1
 8012638:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801263a:	7efb      	ldrb	r3, [r7, #27]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d015      	beq.n	801266c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6a1b      	ldr	r3, [r3, #32]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	330c      	adds	r3, #12
 8012648:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	6a1b      	ldr	r3, [r3, #32]
 801264e:	7ffa      	ldrb	r2, [r7, #31]
 8012650:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2200      	movs	r2, #0
 8012656:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2200      	movs	r2, #0
 801265c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801265e:	78fb      	ldrb	r3, [r7, #3]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d006      	beq.n	8012672 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8012664:	68b8      	ldr	r0, [r7, #8]
 8012666:	f00b fb03 	bl	801dc70 <sys_sem_signal>
 801266a:	e002      	b.n	8012672 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 801266c:	f04f 33ff 	mov.w	r3, #4294967295
 8012670:	e000      	b.n	8012674 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8012672:	2300      	movs	r3, #0
}
 8012674:	4618      	mov	r0, r3
 8012676:	3720      	adds	r7, #32
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}

0801267c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b084      	sub	sp, #16
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	785b      	ldrb	r3, [r3, #1]
 801268e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	685b      	ldr	r3, [r3, #4]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d069      	beq.n	801276e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80126a4:	2b10      	cmp	r3, #16
 80126a6:	d162      	bne.n	801276e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80126ac:	2b03      	cmp	r3, #3
 80126ae:	d002      	beq.n	80126b6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80126b0:	7afb      	ldrb	r3, [r7, #11]
 80126b2:	2b02      	cmp	r3, #2
 80126b4:	d05b      	beq.n	801276e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80126b6:	7afb      	ldrb	r3, [r7, #11]
 80126b8:	2b03      	cmp	r3, #3
 80126ba:	d103      	bne.n	80126c4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	22f5      	movs	r2, #245	; 0xf5
 80126c0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80126c2:	e059      	b.n	8012778 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80126c4:	7afb      	ldrb	r3, [r7, #11]
 80126c6:	2b01      	cmp	r3, #1
 80126c8:	d103      	bne.n	80126d2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	22fb      	movs	r2, #251	; 0xfb
 80126ce:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80126d0:	e052      	b.n	8012778 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	7a1b      	ldrb	r3, [r3, #8]
 80126d6:	f003 0301 	and.w	r3, r3, #1
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d004      	beq.n	80126e8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7ff fa7a 	bl	8011bdc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	6a1b      	ldr	r3, [r3, #32]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d006      	beq.n	8012700 <lwip_netconn_do_close+0x84>
 80126f2:	4b23      	ldr	r3, [pc, #140]	; (8012780 <lwip_netconn_do_close+0x104>)
 80126f4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80126f8:	4922      	ldr	r1, [pc, #136]	; (8012784 <lwip_netconn_do_close+0x108>)
 80126fa:	4823      	ldr	r0, [pc, #140]	; (8012788 <lwip_netconn_do_close+0x10c>)
 80126fc:	f00c fbfe 	bl	801eefc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	2204      	movs	r2, #4
 8012706:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	68fa      	ldr	r2, [r7, #12]
 801270e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	2100      	movs	r1, #0
 8012716:	4618      	mov	r0, r3
 8012718:	f7ff fade 	bl	8011cd8 <lwip_netconn_do_close_internal>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	d029      	beq.n	8012776 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	785b      	ldrb	r3, [r3, #1]
 8012728:	2b04      	cmp	r3, #4
 801272a:	d006      	beq.n	801273a <lwip_netconn_do_close+0xbe>
 801272c:	4b14      	ldr	r3, [pc, #80]	; (8012780 <lwip_netconn_do_close+0x104>)
 801272e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8012732:	4916      	ldr	r1, [pc, #88]	; (801278c <lwip_netconn_do_close+0x110>)
 8012734:	4814      	ldr	r0, [pc, #80]	; (8012788 <lwip_netconn_do_close+0x10c>)
 8012736:	f00c fbe1 	bl	801eefc <iprintf>
        UNLOCK_TCPIP_CORE();
 801273a:	4815      	ldr	r0, [pc, #84]	; (8012790 <lwip_netconn_do_close+0x114>)
 801273c:	f00b fb09 	bl	801dd52 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	330c      	adds	r3, #12
 8012746:	2100      	movs	r1, #0
 8012748:	4618      	mov	r0, r3
 801274a:	f00b fa60 	bl	801dc0e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801274e:	4810      	ldr	r0, [pc, #64]	; (8012790 <lwip_netconn_do_close+0x114>)
 8012750:	f00b faf0 	bl	801dd34 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	785b      	ldrb	r3, [r3, #1]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d00b      	beq.n	8012776 <lwip_netconn_do_close+0xfa>
 801275e:	4b08      	ldr	r3, [pc, #32]	; (8012780 <lwip_netconn_do_close+0x104>)
 8012760:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8012764:	4909      	ldr	r1, [pc, #36]	; (801278c <lwip_netconn_do_close+0x110>)
 8012766:	4808      	ldr	r0, [pc, #32]	; (8012788 <lwip_netconn_do_close+0x10c>)
 8012768:	f00c fbc8 	bl	801eefc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 801276c:	e003      	b.n	8012776 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	22f5      	movs	r2, #245	; 0xf5
 8012772:	711a      	strb	r2, [r3, #4]
 8012774:	e000      	b.n	8012778 <lwip_netconn_do_close+0xfc>
      return;
 8012776:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012778:	3710      	adds	r7, #16
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
 801277e:	bf00      	nop
 8012780:	08023800 	.word	0x08023800
 8012784:	08023ba4 	.word	0x08023ba4
 8012788:	08023844 	.word	0x08023844
 801278c:	08023bc0 	.word	0x08023bc0
 8012790:	2000a9e4 	.word	0x2000a9e4

08012794 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801279a:	2006      	movs	r0, #6
 801279c:	f000 ff30 	bl	8013600 <memp_malloc>
 80127a0:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d004      	beq.n	80127b2 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 80127a8:	2210      	movs	r2, #16
 80127aa:	2100      	movs	r1, #0
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f00b fc79 	bl	801e0a4 <memset>
  }
  return buf;
 80127b2:	687b      	ldr	r3, [r7, #4]
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	3708      	adds	r7, #8
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}

080127bc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b082      	sub	sp, #8
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d013      	beq.n	80127f2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d00b      	beq.n	80127ea <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	4618      	mov	r0, r3
 80127d8:	f001 fda4 	bl	8014324 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2200      	movs	r2, #0
 80127e0:	605a      	str	r2, [r3, #4]
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	685a      	ldr	r2, [r3, #4]
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80127ea:	6879      	ldr	r1, [r7, #4]
 80127ec:	2006      	movs	r0, #6
 80127ee:	f000 ff59 	bl	80136a4 <memp_free>
  }
}
 80127f2:	bf00      	nop
 80127f4:	3708      	adds	r7, #8
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}
	...

080127fc <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b084      	sub	sp, #16
 8012800:	af00      	add	r7, sp, #0
 8012802:	60f8      	str	r0, [r7, #12]
 8012804:	60b9      	str	r1, [r7, #8]
 8012806:	4613      	mov	r3, r2
 8012808:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d108      	bne.n	8012822 <netbuf_ref+0x26>
 8012810:	4b1c      	ldr	r3, [pc, #112]	; (8012884 <netbuf_ref+0x88>)
 8012812:	2299      	movs	r2, #153	; 0x99
 8012814:	491c      	ldr	r1, [pc, #112]	; (8012888 <netbuf_ref+0x8c>)
 8012816:	481d      	ldr	r0, [pc, #116]	; (801288c <netbuf_ref+0x90>)
 8012818:	f00c fb70 	bl	801eefc <iprintf>
 801281c:	f06f 030f 	mvn.w	r3, #15
 8012820:	e02b      	b.n	801287a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d004      	beq.n	8012834 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	4618      	mov	r0, r3
 8012830:	f001 fd78 	bl	8014324 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8012834:	2241      	movs	r2, #65	; 0x41
 8012836:	2100      	movs	r1, #0
 8012838:	2036      	movs	r0, #54	; 0x36
 801283a:	f001 fa8f 	bl	8013d5c <pbuf_alloc>
 801283e:	4602      	mov	r2, r0
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d105      	bne.n	8012858 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	2200      	movs	r2, #0
 8012850:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8012852:	f04f 33ff 	mov.w	r3, #4294967295
 8012856:	e010      	b.n	801287a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	68ba      	ldr	r2, [r7, #8]
 801285e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	88fa      	ldrh	r2, [r7, #6]
 8012866:	811a      	strh	r2, [r3, #8]
 8012868:	68fa      	ldr	r2, [r7, #12]
 801286a:	6812      	ldr	r2, [r2, #0]
 801286c:	891b      	ldrh	r3, [r3, #8]
 801286e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	681a      	ldr	r2, [r3, #0]
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8012878:	2300      	movs	r3, #0
}
 801287a:	4618      	mov	r0, r3
 801287c:	3710      	adds	r7, #16
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
 8012882:	bf00      	nop
 8012884:	08023d58 	.word	0x08023d58
 8012888:	08023e10 	.word	0x08023e10
 801288c:	08023da8 	.word	0x08023da8

08012890 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b084      	sub	sp, #16
 8012894:	af00      	add	r7, sp, #0
 8012896:	60f8      	str	r0, [r7, #12]
 8012898:	60b9      	str	r1, [r7, #8]
 801289a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d108      	bne.n	80128b4 <netbuf_data+0x24>
 80128a2:	4b1b      	ldr	r3, [pc, #108]	; (8012910 <netbuf_data+0x80>)
 80128a4:	22c6      	movs	r2, #198	; 0xc6
 80128a6:	491b      	ldr	r1, [pc, #108]	; (8012914 <netbuf_data+0x84>)
 80128a8:	481b      	ldr	r0, [pc, #108]	; (8012918 <netbuf_data+0x88>)
 80128aa:	f00c fb27 	bl	801eefc <iprintf>
 80128ae:	f06f 030f 	mvn.w	r3, #15
 80128b2:	e029      	b.n	8012908 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d108      	bne.n	80128cc <netbuf_data+0x3c>
 80128ba:	4b15      	ldr	r3, [pc, #84]	; (8012910 <netbuf_data+0x80>)
 80128bc:	22c7      	movs	r2, #199	; 0xc7
 80128be:	4917      	ldr	r1, [pc, #92]	; (801291c <netbuf_data+0x8c>)
 80128c0:	4815      	ldr	r0, [pc, #84]	; (8012918 <netbuf_data+0x88>)
 80128c2:	f00c fb1b 	bl	801eefc <iprintf>
 80128c6:	f06f 030f 	mvn.w	r3, #15
 80128ca:	e01d      	b.n	8012908 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d108      	bne.n	80128e4 <netbuf_data+0x54>
 80128d2:	4b0f      	ldr	r3, [pc, #60]	; (8012910 <netbuf_data+0x80>)
 80128d4:	22c8      	movs	r2, #200	; 0xc8
 80128d6:	4912      	ldr	r1, [pc, #72]	; (8012920 <netbuf_data+0x90>)
 80128d8:	480f      	ldr	r0, [pc, #60]	; (8012918 <netbuf_data+0x88>)
 80128da:	f00c fb0f 	bl	801eefc <iprintf>
 80128de:	f06f 030f 	mvn.w	r3, #15
 80128e2:	e011      	b.n	8012908 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d102      	bne.n	80128f2 <netbuf_data+0x62>
    return ERR_BUF;
 80128ec:	f06f 0301 	mvn.w	r3, #1
 80128f0:	e00a      	b.n	8012908 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	685b      	ldr	r3, [r3, #4]
 80128f6:	685a      	ldr	r2, [r3, #4]
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	895a      	ldrh	r2, [r3, #10]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8012906:	2300      	movs	r3, #0
}
 8012908:	4618      	mov	r0, r3
 801290a:	3710      	adds	r7, #16
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}
 8012910:	08023d58 	.word	0x08023d58
 8012914:	08023e60 	.word	0x08023e60
 8012918:	08023da8 	.word	0x08023da8
 801291c:	08023e7c 	.word	0x08023e7c
 8012920:	08023e9c 	.word	0x08023e9c

08012924 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b084      	sub	sp, #16
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801292e:	f008 f89d 	bl	801aa6c <sys_timeouts_sleeptime>
 8012932:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	f1b3 3fff 	cmp.w	r3, #4294967295
 801293a:	d10b      	bne.n	8012954 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801293c:	4813      	ldr	r0, [pc, #76]	; (801298c <tcpip_timeouts_mbox_fetch+0x68>)
 801293e:	f00b fa08 	bl	801dd52 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012942:	2200      	movs	r2, #0
 8012944:	6839      	ldr	r1, [r7, #0]
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f00b f8c0 	bl	801dacc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801294c:	480f      	ldr	r0, [pc, #60]	; (801298c <tcpip_timeouts_mbox_fetch+0x68>)
 801294e:	f00b f9f1 	bl	801dd34 <sys_mutex_lock>
    return;
 8012952:	e018      	b.n	8012986 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d102      	bne.n	8012960 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801295a:	f008 f84d 	bl	801a9f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801295e:	e7e6      	b.n	801292e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012960:	480a      	ldr	r0, [pc, #40]	; (801298c <tcpip_timeouts_mbox_fetch+0x68>)
 8012962:	f00b f9f6 	bl	801dd52 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012966:	68fa      	ldr	r2, [r7, #12]
 8012968:	6839      	ldr	r1, [r7, #0]
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f00b f8ae 	bl	801dacc <sys_arch_mbox_fetch>
 8012970:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012972:	4806      	ldr	r0, [pc, #24]	; (801298c <tcpip_timeouts_mbox_fetch+0x68>)
 8012974:	f00b f9de 	bl	801dd34 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801297e:	d102      	bne.n	8012986 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012980:	f008 f83a 	bl	801a9f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012984:	e7d3      	b.n	801292e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012986:	3710      	adds	r7, #16
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}
 801298c:	2000a9e4 	.word	0x2000a9e4

08012990 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b084      	sub	sp, #16
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012998:	4810      	ldr	r0, [pc, #64]	; (80129dc <tcpip_thread+0x4c>)
 801299a:	f00b f9cb 	bl	801dd34 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801299e:	4b10      	ldr	r3, [pc, #64]	; (80129e0 <tcpip_thread+0x50>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d005      	beq.n	80129b2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80129a6:	4b0e      	ldr	r3, [pc, #56]	; (80129e0 <tcpip_thread+0x50>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	4a0e      	ldr	r2, [pc, #56]	; (80129e4 <tcpip_thread+0x54>)
 80129ac:	6812      	ldr	r2, [r2, #0]
 80129ae:	4610      	mov	r0, r2
 80129b0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80129b2:	f107 030c 	add.w	r3, r7, #12
 80129b6:	4619      	mov	r1, r3
 80129b8:	480b      	ldr	r0, [pc, #44]	; (80129e8 <tcpip_thread+0x58>)
 80129ba:	f7ff ffb3 	bl	8012924 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d106      	bne.n	80129d2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80129c4:	4b09      	ldr	r3, [pc, #36]	; (80129ec <tcpip_thread+0x5c>)
 80129c6:	2291      	movs	r2, #145	; 0x91
 80129c8:	4909      	ldr	r1, [pc, #36]	; (80129f0 <tcpip_thread+0x60>)
 80129ca:	480a      	ldr	r0, [pc, #40]	; (80129f4 <tcpip_thread+0x64>)
 80129cc:	f00c fa96 	bl	801eefc <iprintf>
      continue;
 80129d0:	e003      	b.n	80129da <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	4618      	mov	r0, r3
 80129d6:	f000 f80f 	bl	80129f8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80129da:	e7ea      	b.n	80129b2 <tcpip_thread+0x22>
 80129dc:	2000a9e4 	.word	0x2000a9e4
 80129e0:	20006d68 	.word	0x20006d68
 80129e4:	20006d6c 	.word	0x20006d6c
 80129e8:	20006d70 	.word	0x20006d70
 80129ec:	08023ef0 	.word	0x08023ef0
 80129f0:	08023f20 	.word	0x08023f20
 80129f4:	08023f40 	.word	0x08023f40

080129f8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	2b02      	cmp	r3, #2
 8012a06:	d026      	beq.n	8012a56 <tcpip_thread_handle_msg+0x5e>
 8012a08:	2b02      	cmp	r3, #2
 8012a0a:	dc2b      	bgt.n	8012a64 <tcpip_thread_handle_msg+0x6c>
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d002      	beq.n	8012a16 <tcpip_thread_handle_msg+0x1e>
 8012a10:	2b01      	cmp	r3, #1
 8012a12:	d015      	beq.n	8012a40 <tcpip_thread_handle_msg+0x48>
 8012a14:	e026      	b.n	8012a64 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	68db      	ldr	r3, [r3, #12]
 8012a1a:	687a      	ldr	r2, [r7, #4]
 8012a1c:	6850      	ldr	r0, [r2, #4]
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	6892      	ldr	r2, [r2, #8]
 8012a22:	4611      	mov	r1, r2
 8012a24:	4798      	blx	r3
 8012a26:	4603      	mov	r3, r0
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d004      	beq.n	8012a36 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	4618      	mov	r0, r3
 8012a32:	f001 fc77 	bl	8014324 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012a36:	6879      	ldr	r1, [r7, #4]
 8012a38:	2009      	movs	r0, #9
 8012a3a:	f000 fe33 	bl	80136a4 <memp_free>
      break;
 8012a3e:	e018      	b.n	8012a72 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	687a      	ldr	r2, [r7, #4]
 8012a46:	6892      	ldr	r2, [r2, #8]
 8012a48:	4610      	mov	r0, r2
 8012a4a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012a4c:	6879      	ldr	r1, [r7, #4]
 8012a4e:	2008      	movs	r0, #8
 8012a50:	f000 fe28 	bl	80136a4 <memp_free>
      break;
 8012a54:	e00d      	b.n	8012a72 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	687a      	ldr	r2, [r7, #4]
 8012a5c:	6892      	ldr	r2, [r2, #8]
 8012a5e:	4610      	mov	r0, r2
 8012a60:	4798      	blx	r3
      break;
 8012a62:	e006      	b.n	8012a72 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012a64:	4b05      	ldr	r3, [pc, #20]	; (8012a7c <tcpip_thread_handle_msg+0x84>)
 8012a66:	22cf      	movs	r2, #207	; 0xcf
 8012a68:	4905      	ldr	r1, [pc, #20]	; (8012a80 <tcpip_thread_handle_msg+0x88>)
 8012a6a:	4806      	ldr	r0, [pc, #24]	; (8012a84 <tcpip_thread_handle_msg+0x8c>)
 8012a6c:	f00c fa46 	bl	801eefc <iprintf>
      break;
 8012a70:	bf00      	nop
  }
}
 8012a72:	bf00      	nop
 8012a74:	3708      	adds	r7, #8
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}
 8012a7a:	bf00      	nop
 8012a7c:	08023ef0 	.word	0x08023ef0
 8012a80:	08023f20 	.word	0x08023f20
 8012a84:	08023f40 	.word	0x08023f40

08012a88 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b086      	sub	sp, #24
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012a94:	481a      	ldr	r0, [pc, #104]	; (8012b00 <tcpip_inpkt+0x78>)
 8012a96:	f00b f874 	bl	801db82 <sys_mbox_valid>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d105      	bne.n	8012aac <tcpip_inpkt+0x24>
 8012aa0:	4b18      	ldr	r3, [pc, #96]	; (8012b04 <tcpip_inpkt+0x7c>)
 8012aa2:	22fc      	movs	r2, #252	; 0xfc
 8012aa4:	4918      	ldr	r1, [pc, #96]	; (8012b08 <tcpip_inpkt+0x80>)
 8012aa6:	4819      	ldr	r0, [pc, #100]	; (8012b0c <tcpip_inpkt+0x84>)
 8012aa8:	f00c fa28 	bl	801eefc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012aac:	2009      	movs	r0, #9
 8012aae:	f000 fda7 	bl	8013600 <memp_malloc>
 8012ab2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012ab4:	697b      	ldr	r3, [r7, #20]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d102      	bne.n	8012ac0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012aba:	f04f 33ff 	mov.w	r3, #4294967295
 8012abe:	e01a      	b.n	8012af6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	68fa      	ldr	r2, [r7, #12]
 8012aca:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012acc:	697b      	ldr	r3, [r7, #20]
 8012ace:	68ba      	ldr	r2, [r7, #8]
 8012ad0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	687a      	ldr	r2, [r7, #4]
 8012ad6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012ad8:	6979      	ldr	r1, [r7, #20]
 8012ada:	4809      	ldr	r0, [pc, #36]	; (8012b00 <tcpip_inpkt+0x78>)
 8012adc:	f00a ffdc 	bl	801da98 <sys_mbox_trypost>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d006      	beq.n	8012af4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012ae6:	6979      	ldr	r1, [r7, #20]
 8012ae8:	2009      	movs	r0, #9
 8012aea:	f000 fddb 	bl	80136a4 <memp_free>
    return ERR_MEM;
 8012aee:	f04f 33ff 	mov.w	r3, #4294967295
 8012af2:	e000      	b.n	8012af6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012af4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3718      	adds	r7, #24
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	20006d70 	.word	0x20006d70
 8012b04:	08023ef0 	.word	0x08023ef0
 8012b08:	08023f68 	.word	0x08023f68
 8012b0c:	08023f40 	.word	0x08023f40

08012b10 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
 8012b18:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b20:	f003 0318 	and.w	r3, r3, #24
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d006      	beq.n	8012b36 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012b28:	4a08      	ldr	r2, [pc, #32]	; (8012b4c <tcpip_input+0x3c>)
 8012b2a:	6839      	ldr	r1, [r7, #0]
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f7ff ffab 	bl	8012a88 <tcpip_inpkt>
 8012b32:	4603      	mov	r3, r0
 8012b34:	e005      	b.n	8012b42 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012b36:	4a06      	ldr	r2, [pc, #24]	; (8012b50 <tcpip_input+0x40>)
 8012b38:	6839      	ldr	r1, [r7, #0]
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f7ff ffa4 	bl	8012a88 <tcpip_inpkt>
 8012b40:	4603      	mov	r3, r0
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3708      	adds	r7, #8
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}
 8012b4a:	bf00      	nop
 8012b4c:	0801d885 	.word	0x0801d885
 8012b50:	0801c799 	.word	0x0801c799

08012b54 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b084      	sub	sp, #16
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
 8012b5c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012b5e:	4819      	ldr	r0, [pc, #100]	; (8012bc4 <tcpip_try_callback+0x70>)
 8012b60:	f00b f80f 	bl	801db82 <sys_mbox_valid>
 8012b64:	4603      	mov	r3, r0
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d106      	bne.n	8012b78 <tcpip_try_callback+0x24>
 8012b6a:	4b17      	ldr	r3, [pc, #92]	; (8012bc8 <tcpip_try_callback+0x74>)
 8012b6c:	f240 125d 	movw	r2, #349	; 0x15d
 8012b70:	4916      	ldr	r1, [pc, #88]	; (8012bcc <tcpip_try_callback+0x78>)
 8012b72:	4817      	ldr	r0, [pc, #92]	; (8012bd0 <tcpip_try_callback+0x7c>)
 8012b74:	f00c f9c2 	bl	801eefc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012b78:	2008      	movs	r0, #8
 8012b7a:	f000 fd41 	bl	8013600 <memp_malloc>
 8012b7e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d102      	bne.n	8012b8c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012b86:	f04f 33ff 	mov.w	r3, #4294967295
 8012b8a:	e017      	b.n	8012bbc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	2201      	movs	r2, #1
 8012b90:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	687a      	ldr	r2, [r7, #4]
 8012b96:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	683a      	ldr	r2, [r7, #0]
 8012b9c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012b9e:	68f9      	ldr	r1, [r7, #12]
 8012ba0:	4808      	ldr	r0, [pc, #32]	; (8012bc4 <tcpip_try_callback+0x70>)
 8012ba2:	f00a ff79 	bl	801da98 <sys_mbox_trypost>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d006      	beq.n	8012bba <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012bac:	68f9      	ldr	r1, [r7, #12]
 8012bae:	2008      	movs	r0, #8
 8012bb0:	f000 fd78 	bl	80136a4 <memp_free>
    return ERR_MEM;
 8012bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8012bb8:	e000      	b.n	8012bbc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012bba:	2300      	movs	r3, #0
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3710      	adds	r7, #16
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}
 8012bc4:	20006d70 	.word	0x20006d70
 8012bc8:	08023ef0 	.word	0x08023ef0
 8012bcc:	08023f68 	.word	0x08023f68
 8012bd0:	08023f40 	.word	0x08023f40

08012bd4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b084      	sub	sp, #16
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	60f8      	str	r0, [r7, #12]
 8012bdc:	60b9      	str	r1, [r7, #8]
 8012bde:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012be0:	4806      	ldr	r0, [pc, #24]	; (8012bfc <tcpip_send_msg_wait_sem+0x28>)
 8012be2:	f00b f8a7 	bl	801dd34 <sys_mutex_lock>
  fn(apimsg);
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	68b8      	ldr	r0, [r7, #8]
 8012bea:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8012bec:	4803      	ldr	r0, [pc, #12]	; (8012bfc <tcpip_send_msg_wait_sem+0x28>)
 8012bee:	f00b f8b0 	bl	801dd52 <sys_mutex_unlock>
  return ERR_OK;
 8012bf2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3710      	adds	r7, #16
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}
 8012bfc:	2000a9e4 	.word	0x2000a9e4

08012c00 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af02      	add	r7, sp, #8
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012c0a:	f000 f871 	bl	8012cf0 <lwip_init>

  tcpip_init_done = initfunc;
 8012c0e:	4a17      	ldr	r2, [pc, #92]	; (8012c6c <tcpip_init+0x6c>)
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012c14:	4a16      	ldr	r2, [pc, #88]	; (8012c70 <tcpip_init+0x70>)
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012c1a:	2106      	movs	r1, #6
 8012c1c:	4815      	ldr	r0, [pc, #84]	; (8012c74 <tcpip_init+0x74>)
 8012c1e:	f00a ff07 	bl	801da30 <sys_mbox_new>
 8012c22:	4603      	mov	r3, r0
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d006      	beq.n	8012c36 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012c28:	4b13      	ldr	r3, [pc, #76]	; (8012c78 <tcpip_init+0x78>)
 8012c2a:	f240 2261 	movw	r2, #609	; 0x261
 8012c2e:	4913      	ldr	r1, [pc, #76]	; (8012c7c <tcpip_init+0x7c>)
 8012c30:	4813      	ldr	r0, [pc, #76]	; (8012c80 <tcpip_init+0x80>)
 8012c32:	f00c f963 	bl	801eefc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012c36:	4813      	ldr	r0, [pc, #76]	; (8012c84 <tcpip_init+0x84>)
 8012c38:	f00b f860 	bl	801dcfc <sys_mutex_new>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d006      	beq.n	8012c50 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012c42:	4b0d      	ldr	r3, [pc, #52]	; (8012c78 <tcpip_init+0x78>)
 8012c44:	f240 2265 	movw	r2, #613	; 0x265
 8012c48:	490f      	ldr	r1, [pc, #60]	; (8012c88 <tcpip_init+0x88>)
 8012c4a:	480d      	ldr	r0, [pc, #52]	; (8012c80 <tcpip_init+0x80>)
 8012c4c:	f00c f956 	bl	801eefc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012c50:	2300      	movs	r3, #0
 8012c52:	9300      	str	r3, [sp, #0]
 8012c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c58:	2200      	movs	r2, #0
 8012c5a:	490c      	ldr	r1, [pc, #48]	; (8012c8c <tcpip_init+0x8c>)
 8012c5c:	480c      	ldr	r0, [pc, #48]	; (8012c90 <tcpip_init+0x90>)
 8012c5e:	f00b f885 	bl	801dd6c <sys_thread_new>
}
 8012c62:	bf00      	nop
 8012c64:	3708      	adds	r7, #8
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}
 8012c6a:	bf00      	nop
 8012c6c:	20006d68 	.word	0x20006d68
 8012c70:	20006d6c 	.word	0x20006d6c
 8012c74:	20006d70 	.word	0x20006d70
 8012c78:	08023ef0 	.word	0x08023ef0
 8012c7c:	08023f78 	.word	0x08023f78
 8012c80:	08023f40 	.word	0x08023f40
 8012c84:	2000a9e4 	.word	0x2000a9e4
 8012c88:	08023f9c 	.word	0x08023f9c
 8012c8c:	08012991 	.word	0x08012991
 8012c90:	08023fc0 	.word	0x08023fc0

08012c94 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012c94:	b480      	push	{r7}
 8012c96:	b083      	sub	sp, #12
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012c9e:	88fb      	ldrh	r3, [r7, #6]
 8012ca0:	021b      	lsls	r3, r3, #8
 8012ca2:	b21a      	sxth	r2, r3
 8012ca4:	88fb      	ldrh	r3, [r7, #6]
 8012ca6:	0a1b      	lsrs	r3, r3, #8
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	b21b      	sxth	r3, r3
 8012cac:	4313      	orrs	r3, r2
 8012cae:	b21b      	sxth	r3, r3
 8012cb0:	b29b      	uxth	r3, r3
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	370c      	adds	r7, #12
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr

08012cbe <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012cbe:	b480      	push	{r7}
 8012cc0:	b083      	sub	sp, #12
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	061a      	lsls	r2, r3, #24
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	021b      	lsls	r3, r3, #8
 8012cce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012cd2:	431a      	orrs	r2, r3
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	0a1b      	lsrs	r3, r3, #8
 8012cd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012cdc:	431a      	orrs	r2, r3
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	0e1b      	lsrs	r3, r3, #24
 8012ce2:	4313      	orrs	r3, r2
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	370c      	adds	r7, #12
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cee:	4770      	bx	lr

08012cf0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b082      	sub	sp, #8
 8012cf4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012cfa:	f00a fff1 	bl	801dce0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012cfe:	f000 f8d5 	bl	8012eac <mem_init>
  memp_init();
 8012d02:	f000 fc31 	bl	8013568 <memp_init>
  pbuf_init();
  netif_init();
 8012d06:	f000 fcf7 	bl	80136f8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012d0a:	f007 fee7 	bl	801aadc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012d0e:	f001 fdb3 	bl	8014878 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012d12:	f007 fe29 	bl	801a968 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012d16:	bf00      	nop
 8012d18:	3708      	adds	r7, #8
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
	...

08012d20 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b083      	sub	sp, #12
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	4603      	mov	r3, r0
 8012d28:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012d2a:	4b05      	ldr	r3, [pc, #20]	; (8012d40 <ptr_to_mem+0x20>)
 8012d2c:	681a      	ldr	r2, [r3, #0]
 8012d2e:	88fb      	ldrh	r3, [r7, #6]
 8012d30:	4413      	add	r3, r2
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	370c      	adds	r7, #12
 8012d36:	46bd      	mov	sp, r7
 8012d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3c:	4770      	bx	lr
 8012d3e:	bf00      	nop
 8012d40:	20006d74 	.word	0x20006d74

08012d44 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012d44:	b480      	push	{r7}
 8012d46:	b083      	sub	sp, #12
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012d4c:	4b05      	ldr	r3, [pc, #20]	; (8012d64 <mem_to_ptr+0x20>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	687a      	ldr	r2, [r7, #4]
 8012d52:	1ad3      	subs	r3, r2, r3
 8012d54:	b29b      	uxth	r3, r3
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	370c      	adds	r7, #12
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d60:	4770      	bx	lr
 8012d62:	bf00      	nop
 8012d64:	20006d74 	.word	0x20006d74

08012d68 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012d68:	b590      	push	{r4, r7, lr}
 8012d6a:	b085      	sub	sp, #20
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012d70:	4b45      	ldr	r3, [pc, #276]	; (8012e88 <plug_holes+0x120>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	687a      	ldr	r2, [r7, #4]
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d206      	bcs.n	8012d88 <plug_holes+0x20>
 8012d7a:	4b44      	ldr	r3, [pc, #272]	; (8012e8c <plug_holes+0x124>)
 8012d7c:	f240 12df 	movw	r2, #479	; 0x1df
 8012d80:	4943      	ldr	r1, [pc, #268]	; (8012e90 <plug_holes+0x128>)
 8012d82:	4844      	ldr	r0, [pc, #272]	; (8012e94 <plug_holes+0x12c>)
 8012d84:	f00c f8ba 	bl	801eefc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012d88:	4b43      	ldr	r3, [pc, #268]	; (8012e98 <plug_holes+0x130>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	687a      	ldr	r2, [r7, #4]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d306      	bcc.n	8012da0 <plug_holes+0x38>
 8012d92:	4b3e      	ldr	r3, [pc, #248]	; (8012e8c <plug_holes+0x124>)
 8012d94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012d98:	4940      	ldr	r1, [pc, #256]	; (8012e9c <plug_holes+0x134>)
 8012d9a:	483e      	ldr	r0, [pc, #248]	; (8012e94 <plug_holes+0x12c>)
 8012d9c:	f00c f8ae 	bl	801eefc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	791b      	ldrb	r3, [r3, #4]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d006      	beq.n	8012db6 <plug_holes+0x4e>
 8012da8:	4b38      	ldr	r3, [pc, #224]	; (8012e8c <plug_holes+0x124>)
 8012daa:	f240 12e1 	movw	r2, #481	; 0x1e1
 8012dae:	493c      	ldr	r1, [pc, #240]	; (8012ea0 <plug_holes+0x138>)
 8012db0:	4838      	ldr	r0, [pc, #224]	; (8012e94 <plug_holes+0x12c>)
 8012db2:	f00c f8a3 	bl	801eefc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	881b      	ldrh	r3, [r3, #0]
 8012dba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012dbe:	d906      	bls.n	8012dce <plug_holes+0x66>
 8012dc0:	4b32      	ldr	r3, [pc, #200]	; (8012e8c <plug_holes+0x124>)
 8012dc2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8012dc6:	4937      	ldr	r1, [pc, #220]	; (8012ea4 <plug_holes+0x13c>)
 8012dc8:	4832      	ldr	r0, [pc, #200]	; (8012e94 <plug_holes+0x12c>)
 8012dca:	f00c f897 	bl	801eefc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	881b      	ldrh	r3, [r3, #0]
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7ff ffa4 	bl	8012d20 <ptr_to_mem>
 8012dd8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012dda:	687a      	ldr	r2, [r7, #4]
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d024      	beq.n	8012e2c <plug_holes+0xc4>
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	791b      	ldrb	r3, [r3, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d120      	bne.n	8012e2c <plug_holes+0xc4>
 8012dea:	4b2b      	ldr	r3, [pc, #172]	; (8012e98 <plug_holes+0x130>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	68fa      	ldr	r2, [r7, #12]
 8012df0:	429a      	cmp	r2, r3
 8012df2:	d01b      	beq.n	8012e2c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012df4:	4b2c      	ldr	r3, [pc, #176]	; (8012ea8 <plug_holes+0x140>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	68fa      	ldr	r2, [r7, #12]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d102      	bne.n	8012e04 <plug_holes+0x9c>
      lfree = mem;
 8012dfe:	4a2a      	ldr	r2, [pc, #168]	; (8012ea8 <plug_holes+0x140>)
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	881a      	ldrh	r2, [r3, #0]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	881b      	ldrh	r3, [r3, #0]
 8012e10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012e14:	d00a      	beq.n	8012e2c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	881b      	ldrh	r3, [r3, #0]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7ff ff80 	bl	8012d20 <ptr_to_mem>
 8012e20:	4604      	mov	r4, r0
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	f7ff ff8e 	bl	8012d44 <mem_to_ptr>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	885b      	ldrh	r3, [r3, #2]
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7ff ff75 	bl	8012d20 <ptr_to_mem>
 8012e36:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012e38:	68ba      	ldr	r2, [r7, #8]
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d01f      	beq.n	8012e80 <plug_holes+0x118>
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	791b      	ldrb	r3, [r3, #4]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d11b      	bne.n	8012e80 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012e48:	4b17      	ldr	r3, [pc, #92]	; (8012ea8 <plug_holes+0x140>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	687a      	ldr	r2, [r7, #4]
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d102      	bne.n	8012e58 <plug_holes+0xf0>
      lfree = pmem;
 8012e52:	4a15      	ldr	r2, [pc, #84]	; (8012ea8 <plug_holes+0x140>)
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	881a      	ldrh	r2, [r3, #0]
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	881b      	ldrh	r3, [r3, #0]
 8012e64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012e68:	d00a      	beq.n	8012e80 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	881b      	ldrh	r3, [r3, #0]
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7ff ff56 	bl	8012d20 <ptr_to_mem>
 8012e74:	4604      	mov	r4, r0
 8012e76:	68b8      	ldr	r0, [r7, #8]
 8012e78:	f7ff ff64 	bl	8012d44 <mem_to_ptr>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012e80:	bf00      	nop
 8012e82:	3714      	adds	r7, #20
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd90      	pop	{r4, r7, pc}
 8012e88:	20006d74 	.word	0x20006d74
 8012e8c:	08023fd0 	.word	0x08023fd0
 8012e90:	08024000 	.word	0x08024000
 8012e94:	08024018 	.word	0x08024018
 8012e98:	20006d78 	.word	0x20006d78
 8012e9c:	08024040 	.word	0x08024040
 8012ea0:	0802405c 	.word	0x0802405c
 8012ea4:	08024078 	.word	0x08024078
 8012ea8:	20006d80 	.word	0x20006d80

08012eac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012eb2:	4b1f      	ldr	r3, [pc, #124]	; (8012f30 <mem_init+0x84>)
 8012eb4:	3303      	adds	r3, #3
 8012eb6:	f023 0303 	bic.w	r3, r3, #3
 8012eba:	461a      	mov	r2, r3
 8012ebc:	4b1d      	ldr	r3, [pc, #116]	; (8012f34 <mem_init+0x88>)
 8012ebe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012ec0:	4b1c      	ldr	r3, [pc, #112]	; (8012f34 <mem_init+0x88>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8012ecc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012eda:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8012ede:	f7ff ff1f 	bl	8012d20 <ptr_to_mem>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	4a14      	ldr	r2, [pc, #80]	; (8012f38 <mem_init+0x8c>)
 8012ee6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012ee8:	4b13      	ldr	r3, [pc, #76]	; (8012f38 <mem_init+0x8c>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2201      	movs	r2, #1
 8012eee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012ef0:	4b11      	ldr	r3, [pc, #68]	; (8012f38 <mem_init+0x8c>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8012ef8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012efa:	4b0f      	ldr	r3, [pc, #60]	; (8012f38 <mem_init+0x8c>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8012f02:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012f04:	4b0b      	ldr	r3, [pc, #44]	; (8012f34 <mem_init+0x88>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	4a0c      	ldr	r2, [pc, #48]	; (8012f3c <mem_init+0x90>)
 8012f0a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012f0c:	480c      	ldr	r0, [pc, #48]	; (8012f40 <mem_init+0x94>)
 8012f0e:	f00a fef5 	bl	801dcfc <sys_mutex_new>
 8012f12:	4603      	mov	r3, r0
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d006      	beq.n	8012f26 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012f18:	4b0a      	ldr	r3, [pc, #40]	; (8012f44 <mem_init+0x98>)
 8012f1a:	f240 221f 	movw	r2, #543	; 0x21f
 8012f1e:	490a      	ldr	r1, [pc, #40]	; (8012f48 <mem_init+0x9c>)
 8012f20:	480a      	ldr	r0, [pc, #40]	; (8012f4c <mem_init+0xa0>)
 8012f22:	f00b ffeb 	bl	801eefc <iprintf>
  }
}
 8012f26:	bf00      	nop
 8012f28:	3708      	adds	r7, #8
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}
 8012f2e:	bf00      	nop
 8012f30:	2000aa00 	.word	0x2000aa00
 8012f34:	20006d74 	.word	0x20006d74
 8012f38:	20006d78 	.word	0x20006d78
 8012f3c:	20006d80 	.word	0x20006d80
 8012f40:	20006d7c 	.word	0x20006d7c
 8012f44:	08023fd0 	.word	0x08023fd0
 8012f48:	080240a4 	.word	0x080240a4
 8012f4c:	08024018 	.word	0x08024018

08012f50 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b086      	sub	sp, #24
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f7ff fef3 	bl	8012d44 <mem_to_ptr>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	881b      	ldrh	r3, [r3, #0]
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7ff feda 	bl	8012d20 <ptr_to_mem>
 8012f6c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	885b      	ldrh	r3, [r3, #2]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7ff fed4 	bl	8012d20 <ptr_to_mem>
 8012f78:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	881b      	ldrh	r3, [r3, #0]
 8012f7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012f82:	d818      	bhi.n	8012fb6 <mem_link_valid+0x66>
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	885b      	ldrh	r3, [r3, #2]
 8012f88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012f8c:	d813      	bhi.n	8012fb6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012f92:	8afa      	ldrh	r2, [r7, #22]
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d004      	beq.n	8012fa2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	881b      	ldrh	r3, [r3, #0]
 8012f9c:	8afa      	ldrh	r2, [r7, #22]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d109      	bne.n	8012fb6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012fa2:	4b08      	ldr	r3, [pc, #32]	; (8012fc4 <mem_link_valid+0x74>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012fa6:	693a      	ldr	r2, [r7, #16]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d006      	beq.n	8012fba <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	885b      	ldrh	r3, [r3, #2]
 8012fb0:	8afa      	ldrh	r2, [r7, #22]
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	d001      	beq.n	8012fba <mem_link_valid+0x6a>
    return 0;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	e000      	b.n	8012fbc <mem_link_valid+0x6c>
  }
  return 1;
 8012fba:	2301      	movs	r3, #1
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3718      	adds	r7, #24
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}
 8012fc4:	20006d78 	.word	0x20006d78

08012fc8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b088      	sub	sp, #32
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d070      	beq.n	80130b8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	f003 0303 	and.w	r3, r3, #3
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d00d      	beq.n	8012ffc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012fe0:	4b37      	ldr	r3, [pc, #220]	; (80130c0 <mem_free+0xf8>)
 8012fe2:	f240 2273 	movw	r2, #627	; 0x273
 8012fe6:	4937      	ldr	r1, [pc, #220]	; (80130c4 <mem_free+0xfc>)
 8012fe8:	4837      	ldr	r0, [pc, #220]	; (80130c8 <mem_free+0x100>)
 8012fea:	f00b ff87 	bl	801eefc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012fee:	f00a fee3 	bl	801ddb8 <sys_arch_protect>
 8012ff2:	60f8      	str	r0, [r7, #12]
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	f00a feed 	bl	801ddd4 <sys_arch_unprotect>
    return;
 8012ffa:	e05e      	b.n	80130ba <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	3b08      	subs	r3, #8
 8013000:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013002:	4b32      	ldr	r3, [pc, #200]	; (80130cc <mem_free+0x104>)
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	69fa      	ldr	r2, [r7, #28]
 8013008:	429a      	cmp	r2, r3
 801300a:	d306      	bcc.n	801301a <mem_free+0x52>
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f103 020c 	add.w	r2, r3, #12
 8013012:	4b2f      	ldr	r3, [pc, #188]	; (80130d0 <mem_free+0x108>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	429a      	cmp	r2, r3
 8013018:	d90d      	bls.n	8013036 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801301a:	4b29      	ldr	r3, [pc, #164]	; (80130c0 <mem_free+0xf8>)
 801301c:	f240 227f 	movw	r2, #639	; 0x27f
 8013020:	492c      	ldr	r1, [pc, #176]	; (80130d4 <mem_free+0x10c>)
 8013022:	4829      	ldr	r0, [pc, #164]	; (80130c8 <mem_free+0x100>)
 8013024:	f00b ff6a 	bl	801eefc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013028:	f00a fec6 	bl	801ddb8 <sys_arch_protect>
 801302c:	6138      	str	r0, [r7, #16]
 801302e:	6938      	ldr	r0, [r7, #16]
 8013030:	f00a fed0 	bl	801ddd4 <sys_arch_unprotect>
    return;
 8013034:	e041      	b.n	80130ba <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013036:	4828      	ldr	r0, [pc, #160]	; (80130d8 <mem_free+0x110>)
 8013038:	f00a fe7c 	bl	801dd34 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801303c:	69fb      	ldr	r3, [r7, #28]
 801303e:	791b      	ldrb	r3, [r3, #4]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d110      	bne.n	8013066 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013044:	4b1e      	ldr	r3, [pc, #120]	; (80130c0 <mem_free+0xf8>)
 8013046:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801304a:	4924      	ldr	r1, [pc, #144]	; (80130dc <mem_free+0x114>)
 801304c:	481e      	ldr	r0, [pc, #120]	; (80130c8 <mem_free+0x100>)
 801304e:	f00b ff55 	bl	801eefc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013052:	4821      	ldr	r0, [pc, #132]	; (80130d8 <mem_free+0x110>)
 8013054:	f00a fe7d 	bl	801dd52 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013058:	f00a feae 	bl	801ddb8 <sys_arch_protect>
 801305c:	6178      	str	r0, [r7, #20]
 801305e:	6978      	ldr	r0, [r7, #20]
 8013060:	f00a feb8 	bl	801ddd4 <sys_arch_unprotect>
    return;
 8013064:	e029      	b.n	80130ba <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8013066:	69f8      	ldr	r0, [r7, #28]
 8013068:	f7ff ff72 	bl	8012f50 <mem_link_valid>
 801306c:	4603      	mov	r3, r0
 801306e:	2b00      	cmp	r3, #0
 8013070:	d110      	bne.n	8013094 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013072:	4b13      	ldr	r3, [pc, #76]	; (80130c0 <mem_free+0xf8>)
 8013074:	f240 2295 	movw	r2, #661	; 0x295
 8013078:	4919      	ldr	r1, [pc, #100]	; (80130e0 <mem_free+0x118>)
 801307a:	4813      	ldr	r0, [pc, #76]	; (80130c8 <mem_free+0x100>)
 801307c:	f00b ff3e 	bl	801eefc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013080:	4815      	ldr	r0, [pc, #84]	; (80130d8 <mem_free+0x110>)
 8013082:	f00a fe66 	bl	801dd52 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013086:	f00a fe97 	bl	801ddb8 <sys_arch_protect>
 801308a:	61b8      	str	r0, [r7, #24]
 801308c:	69b8      	ldr	r0, [r7, #24]
 801308e:	f00a fea1 	bl	801ddd4 <sys_arch_unprotect>
    return;
 8013092:	e012      	b.n	80130ba <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013094:	69fb      	ldr	r3, [r7, #28]
 8013096:	2200      	movs	r2, #0
 8013098:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801309a:	4b12      	ldr	r3, [pc, #72]	; (80130e4 <mem_free+0x11c>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	69fa      	ldr	r2, [r7, #28]
 80130a0:	429a      	cmp	r2, r3
 80130a2:	d202      	bcs.n	80130aa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80130a4:	4a0f      	ldr	r2, [pc, #60]	; (80130e4 <mem_free+0x11c>)
 80130a6:	69fb      	ldr	r3, [r7, #28]
 80130a8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80130aa:	69f8      	ldr	r0, [r7, #28]
 80130ac:	f7ff fe5c 	bl	8012d68 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80130b0:	4809      	ldr	r0, [pc, #36]	; (80130d8 <mem_free+0x110>)
 80130b2:	f00a fe4e 	bl	801dd52 <sys_mutex_unlock>
 80130b6:	e000      	b.n	80130ba <mem_free+0xf2>
    return;
 80130b8:	bf00      	nop
}
 80130ba:	3720      	adds	r7, #32
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	08023fd0 	.word	0x08023fd0
 80130c4:	080240c0 	.word	0x080240c0
 80130c8:	08024018 	.word	0x08024018
 80130cc:	20006d74 	.word	0x20006d74
 80130d0:	20006d78 	.word	0x20006d78
 80130d4:	080240e4 	.word	0x080240e4
 80130d8:	20006d7c 	.word	0x20006d7c
 80130dc:	08024100 	.word	0x08024100
 80130e0:	08024128 	.word	0x08024128
 80130e4:	20006d80 	.word	0x20006d80

080130e8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b088      	sub	sp, #32
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
 80130f0:	460b      	mov	r3, r1
 80130f2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80130f4:	887b      	ldrh	r3, [r7, #2]
 80130f6:	3303      	adds	r3, #3
 80130f8:	b29b      	uxth	r3, r3
 80130fa:	f023 0303 	bic.w	r3, r3, #3
 80130fe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013100:	8bfb      	ldrh	r3, [r7, #30]
 8013102:	2b0b      	cmp	r3, #11
 8013104:	d801      	bhi.n	801310a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8013106:	230c      	movs	r3, #12
 8013108:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801310a:	8bfb      	ldrh	r3, [r7, #30]
 801310c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013110:	d803      	bhi.n	801311a <mem_trim+0x32>
 8013112:	8bfa      	ldrh	r2, [r7, #30]
 8013114:	887b      	ldrh	r3, [r7, #2]
 8013116:	429a      	cmp	r2, r3
 8013118:	d201      	bcs.n	801311e <mem_trim+0x36>
    return NULL;
 801311a:	2300      	movs	r3, #0
 801311c:	e0d8      	b.n	80132d0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801311e:	4b6e      	ldr	r3, [pc, #440]	; (80132d8 <mem_trim+0x1f0>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	429a      	cmp	r2, r3
 8013126:	d304      	bcc.n	8013132 <mem_trim+0x4a>
 8013128:	4b6c      	ldr	r3, [pc, #432]	; (80132dc <mem_trim+0x1f4>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	687a      	ldr	r2, [r7, #4]
 801312e:	429a      	cmp	r2, r3
 8013130:	d306      	bcc.n	8013140 <mem_trim+0x58>
 8013132:	4b6b      	ldr	r3, [pc, #428]	; (80132e0 <mem_trim+0x1f8>)
 8013134:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013138:	496a      	ldr	r1, [pc, #424]	; (80132e4 <mem_trim+0x1fc>)
 801313a:	486b      	ldr	r0, [pc, #428]	; (80132e8 <mem_trim+0x200>)
 801313c:	f00b fede 	bl	801eefc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013140:	4b65      	ldr	r3, [pc, #404]	; (80132d8 <mem_trim+0x1f0>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	429a      	cmp	r2, r3
 8013148:	d304      	bcc.n	8013154 <mem_trim+0x6c>
 801314a:	4b64      	ldr	r3, [pc, #400]	; (80132dc <mem_trim+0x1f4>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	687a      	ldr	r2, [r7, #4]
 8013150:	429a      	cmp	r2, r3
 8013152:	d307      	bcc.n	8013164 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013154:	f00a fe30 	bl	801ddb8 <sys_arch_protect>
 8013158:	60b8      	str	r0, [r7, #8]
 801315a:	68b8      	ldr	r0, [r7, #8]
 801315c:	f00a fe3a 	bl	801ddd4 <sys_arch_unprotect>
    return rmem;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	e0b5      	b.n	80132d0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	3b08      	subs	r3, #8
 8013168:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801316a:	69b8      	ldr	r0, [r7, #24]
 801316c:	f7ff fdea 	bl	8012d44 <mem_to_ptr>
 8013170:	4603      	mov	r3, r0
 8013172:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013174:	69bb      	ldr	r3, [r7, #24]
 8013176:	881a      	ldrh	r2, [r3, #0]
 8013178:	8afb      	ldrh	r3, [r7, #22]
 801317a:	1ad3      	subs	r3, r2, r3
 801317c:	b29b      	uxth	r3, r3
 801317e:	3b08      	subs	r3, #8
 8013180:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013182:	8bfa      	ldrh	r2, [r7, #30]
 8013184:	8abb      	ldrh	r3, [r7, #20]
 8013186:	429a      	cmp	r2, r3
 8013188:	d906      	bls.n	8013198 <mem_trim+0xb0>
 801318a:	4b55      	ldr	r3, [pc, #340]	; (80132e0 <mem_trim+0x1f8>)
 801318c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8013190:	4956      	ldr	r1, [pc, #344]	; (80132ec <mem_trim+0x204>)
 8013192:	4855      	ldr	r0, [pc, #340]	; (80132e8 <mem_trim+0x200>)
 8013194:	f00b feb2 	bl	801eefc <iprintf>
  if (newsize > size) {
 8013198:	8bfa      	ldrh	r2, [r7, #30]
 801319a:	8abb      	ldrh	r3, [r7, #20]
 801319c:	429a      	cmp	r2, r3
 801319e:	d901      	bls.n	80131a4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80131a0:	2300      	movs	r3, #0
 80131a2:	e095      	b.n	80132d0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80131a4:	8bfa      	ldrh	r2, [r7, #30]
 80131a6:	8abb      	ldrh	r3, [r7, #20]
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d101      	bne.n	80131b0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	e08f      	b.n	80132d0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80131b0:	484f      	ldr	r0, [pc, #316]	; (80132f0 <mem_trim+0x208>)
 80131b2:	f00a fdbf 	bl	801dd34 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80131b6:	69bb      	ldr	r3, [r7, #24]
 80131b8:	881b      	ldrh	r3, [r3, #0]
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7ff fdb0 	bl	8012d20 <ptr_to_mem>
 80131c0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80131c2:	693b      	ldr	r3, [r7, #16]
 80131c4:	791b      	ldrb	r3, [r3, #4]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d13f      	bne.n	801324a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80131ca:	69bb      	ldr	r3, [r7, #24]
 80131cc:	881b      	ldrh	r3, [r3, #0]
 80131ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80131d2:	d106      	bne.n	80131e2 <mem_trim+0xfa>
 80131d4:	4b42      	ldr	r3, [pc, #264]	; (80132e0 <mem_trim+0x1f8>)
 80131d6:	f240 22f5 	movw	r2, #757	; 0x2f5
 80131da:	4946      	ldr	r1, [pc, #280]	; (80132f4 <mem_trim+0x20c>)
 80131dc:	4842      	ldr	r0, [pc, #264]	; (80132e8 <mem_trim+0x200>)
 80131de:	f00b fe8d 	bl	801eefc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	881b      	ldrh	r3, [r3, #0]
 80131e6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80131e8:	8afa      	ldrh	r2, [r7, #22]
 80131ea:	8bfb      	ldrh	r3, [r7, #30]
 80131ec:	4413      	add	r3, r2
 80131ee:	b29b      	uxth	r3, r3
 80131f0:	3308      	adds	r3, #8
 80131f2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80131f4:	4b40      	ldr	r3, [pc, #256]	; (80132f8 <mem_trim+0x210>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	693a      	ldr	r2, [r7, #16]
 80131fa:	429a      	cmp	r2, r3
 80131fc:	d106      	bne.n	801320c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80131fe:	89fb      	ldrh	r3, [r7, #14]
 8013200:	4618      	mov	r0, r3
 8013202:	f7ff fd8d 	bl	8012d20 <ptr_to_mem>
 8013206:	4603      	mov	r3, r0
 8013208:	4a3b      	ldr	r2, [pc, #236]	; (80132f8 <mem_trim+0x210>)
 801320a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801320c:	89fb      	ldrh	r3, [r7, #14]
 801320e:	4618      	mov	r0, r3
 8013210:	f7ff fd86 	bl	8012d20 <ptr_to_mem>
 8013214:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	2200      	movs	r2, #0
 801321a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	89ba      	ldrh	r2, [r7, #12]
 8013220:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	8afa      	ldrh	r2, [r7, #22]
 8013226:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013228:	69bb      	ldr	r3, [r7, #24]
 801322a:	89fa      	ldrh	r2, [r7, #14]
 801322c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801322e:	693b      	ldr	r3, [r7, #16]
 8013230:	881b      	ldrh	r3, [r3, #0]
 8013232:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013236:	d047      	beq.n	80132c8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	881b      	ldrh	r3, [r3, #0]
 801323c:	4618      	mov	r0, r3
 801323e:	f7ff fd6f 	bl	8012d20 <ptr_to_mem>
 8013242:	4602      	mov	r2, r0
 8013244:	89fb      	ldrh	r3, [r7, #14]
 8013246:	8053      	strh	r3, [r2, #2]
 8013248:	e03e      	b.n	80132c8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801324a:	8bfb      	ldrh	r3, [r7, #30]
 801324c:	f103 0214 	add.w	r2, r3, #20
 8013250:	8abb      	ldrh	r3, [r7, #20]
 8013252:	429a      	cmp	r2, r3
 8013254:	d838      	bhi.n	80132c8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013256:	8afa      	ldrh	r2, [r7, #22]
 8013258:	8bfb      	ldrh	r3, [r7, #30]
 801325a:	4413      	add	r3, r2
 801325c:	b29b      	uxth	r3, r3
 801325e:	3308      	adds	r3, #8
 8013260:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013262:	69bb      	ldr	r3, [r7, #24]
 8013264:	881b      	ldrh	r3, [r3, #0]
 8013266:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801326a:	d106      	bne.n	801327a <mem_trim+0x192>
 801326c:	4b1c      	ldr	r3, [pc, #112]	; (80132e0 <mem_trim+0x1f8>)
 801326e:	f240 3216 	movw	r2, #790	; 0x316
 8013272:	4920      	ldr	r1, [pc, #128]	; (80132f4 <mem_trim+0x20c>)
 8013274:	481c      	ldr	r0, [pc, #112]	; (80132e8 <mem_trim+0x200>)
 8013276:	f00b fe41 	bl	801eefc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801327a:	89fb      	ldrh	r3, [r7, #14]
 801327c:	4618      	mov	r0, r3
 801327e:	f7ff fd4f 	bl	8012d20 <ptr_to_mem>
 8013282:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013284:	4b1c      	ldr	r3, [pc, #112]	; (80132f8 <mem_trim+0x210>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	693a      	ldr	r2, [r7, #16]
 801328a:	429a      	cmp	r2, r3
 801328c:	d202      	bcs.n	8013294 <mem_trim+0x1ac>
      lfree = mem2;
 801328e:	4a1a      	ldr	r2, [pc, #104]	; (80132f8 <mem_trim+0x210>)
 8013290:	693b      	ldr	r3, [r7, #16]
 8013292:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013294:	693b      	ldr	r3, [r7, #16]
 8013296:	2200      	movs	r2, #0
 8013298:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801329a:	69bb      	ldr	r3, [r7, #24]
 801329c:	881a      	ldrh	r2, [r3, #0]
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80132a2:	693b      	ldr	r3, [r7, #16]
 80132a4:	8afa      	ldrh	r2, [r7, #22]
 80132a6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80132a8:	69bb      	ldr	r3, [r7, #24]
 80132aa:	89fa      	ldrh	r2, [r7, #14]
 80132ac:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	881b      	ldrh	r3, [r3, #0]
 80132b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80132b6:	d007      	beq.n	80132c8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80132b8:	693b      	ldr	r3, [r7, #16]
 80132ba:	881b      	ldrh	r3, [r3, #0]
 80132bc:	4618      	mov	r0, r3
 80132be:	f7ff fd2f 	bl	8012d20 <ptr_to_mem>
 80132c2:	4602      	mov	r2, r0
 80132c4:	89fb      	ldrh	r3, [r7, #14]
 80132c6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80132c8:	4809      	ldr	r0, [pc, #36]	; (80132f0 <mem_trim+0x208>)
 80132ca:	f00a fd42 	bl	801dd52 <sys_mutex_unlock>
  return rmem;
 80132ce:	687b      	ldr	r3, [r7, #4]
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3720      	adds	r7, #32
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}
 80132d8:	20006d74 	.word	0x20006d74
 80132dc:	20006d78 	.word	0x20006d78
 80132e0:	08023fd0 	.word	0x08023fd0
 80132e4:	0802415c 	.word	0x0802415c
 80132e8:	08024018 	.word	0x08024018
 80132ec:	08024174 	.word	0x08024174
 80132f0:	20006d7c 	.word	0x20006d7c
 80132f4:	08024194 	.word	0x08024194
 80132f8:	20006d80 	.word	0x20006d80

080132fc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b088      	sub	sp, #32
 8013300:	af00      	add	r7, sp, #0
 8013302:	4603      	mov	r3, r0
 8013304:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013306:	88fb      	ldrh	r3, [r7, #6]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d101      	bne.n	8013310 <mem_malloc+0x14>
    return NULL;
 801330c:	2300      	movs	r3, #0
 801330e:	e0e2      	b.n	80134d6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013310:	88fb      	ldrh	r3, [r7, #6]
 8013312:	3303      	adds	r3, #3
 8013314:	b29b      	uxth	r3, r3
 8013316:	f023 0303 	bic.w	r3, r3, #3
 801331a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801331c:	8bbb      	ldrh	r3, [r7, #28]
 801331e:	2b0b      	cmp	r3, #11
 8013320:	d801      	bhi.n	8013326 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013322:	230c      	movs	r3, #12
 8013324:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013326:	8bbb      	ldrh	r3, [r7, #28]
 8013328:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801332c:	d803      	bhi.n	8013336 <mem_malloc+0x3a>
 801332e:	8bba      	ldrh	r2, [r7, #28]
 8013330:	88fb      	ldrh	r3, [r7, #6]
 8013332:	429a      	cmp	r2, r3
 8013334:	d201      	bcs.n	801333a <mem_malloc+0x3e>
    return NULL;
 8013336:	2300      	movs	r3, #0
 8013338:	e0cd      	b.n	80134d6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801333a:	4869      	ldr	r0, [pc, #420]	; (80134e0 <mem_malloc+0x1e4>)
 801333c:	f00a fcfa 	bl	801dd34 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013340:	4b68      	ldr	r3, [pc, #416]	; (80134e4 <mem_malloc+0x1e8>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	4618      	mov	r0, r3
 8013346:	f7ff fcfd 	bl	8012d44 <mem_to_ptr>
 801334a:	4603      	mov	r3, r0
 801334c:	83fb      	strh	r3, [r7, #30]
 801334e:	e0b7      	b.n	80134c0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013350:	8bfb      	ldrh	r3, [r7, #30]
 8013352:	4618      	mov	r0, r3
 8013354:	f7ff fce4 	bl	8012d20 <ptr_to_mem>
 8013358:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801335a:	697b      	ldr	r3, [r7, #20]
 801335c:	791b      	ldrb	r3, [r3, #4]
 801335e:	2b00      	cmp	r3, #0
 8013360:	f040 80a7 	bne.w	80134b2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	881b      	ldrh	r3, [r3, #0]
 8013368:	461a      	mov	r2, r3
 801336a:	8bfb      	ldrh	r3, [r7, #30]
 801336c:	1ad3      	subs	r3, r2, r3
 801336e:	f1a3 0208 	sub.w	r2, r3, #8
 8013372:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013374:	429a      	cmp	r2, r3
 8013376:	f0c0 809c 	bcc.w	80134b2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	881b      	ldrh	r3, [r3, #0]
 801337e:	461a      	mov	r2, r3
 8013380:	8bfb      	ldrh	r3, [r7, #30]
 8013382:	1ad3      	subs	r3, r2, r3
 8013384:	f1a3 0208 	sub.w	r2, r3, #8
 8013388:	8bbb      	ldrh	r3, [r7, #28]
 801338a:	3314      	adds	r3, #20
 801338c:	429a      	cmp	r2, r3
 801338e:	d333      	bcc.n	80133f8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013390:	8bfa      	ldrh	r2, [r7, #30]
 8013392:	8bbb      	ldrh	r3, [r7, #28]
 8013394:	4413      	add	r3, r2
 8013396:	b29b      	uxth	r3, r3
 8013398:	3308      	adds	r3, #8
 801339a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801339c:	8a7b      	ldrh	r3, [r7, #18]
 801339e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80133a2:	d106      	bne.n	80133b2 <mem_malloc+0xb6>
 80133a4:	4b50      	ldr	r3, [pc, #320]	; (80134e8 <mem_malloc+0x1ec>)
 80133a6:	f240 3287 	movw	r2, #903	; 0x387
 80133aa:	4950      	ldr	r1, [pc, #320]	; (80134ec <mem_malloc+0x1f0>)
 80133ac:	4850      	ldr	r0, [pc, #320]	; (80134f0 <mem_malloc+0x1f4>)
 80133ae:	f00b fda5 	bl	801eefc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80133b2:	8a7b      	ldrh	r3, [r7, #18]
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7ff fcb3 	bl	8012d20 <ptr_to_mem>
 80133ba:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	2200      	movs	r2, #0
 80133c0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80133c2:	697b      	ldr	r3, [r7, #20]
 80133c4:	881a      	ldrh	r2, [r3, #0]
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	8bfa      	ldrh	r2, [r7, #30]
 80133ce:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	8a7a      	ldrh	r2, [r7, #18]
 80133d4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80133d6:	697b      	ldr	r3, [r7, #20]
 80133d8:	2201      	movs	r2, #1
 80133da:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	881b      	ldrh	r3, [r3, #0]
 80133e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80133e4:	d00b      	beq.n	80133fe <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	881b      	ldrh	r3, [r3, #0]
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7ff fc98 	bl	8012d20 <ptr_to_mem>
 80133f0:	4602      	mov	r2, r0
 80133f2:	8a7b      	ldrh	r3, [r7, #18]
 80133f4:	8053      	strh	r3, [r2, #2]
 80133f6:	e002      	b.n	80133fe <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80133f8:	697b      	ldr	r3, [r7, #20]
 80133fa:	2201      	movs	r2, #1
 80133fc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80133fe:	4b39      	ldr	r3, [pc, #228]	; (80134e4 <mem_malloc+0x1e8>)
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	697a      	ldr	r2, [r7, #20]
 8013404:	429a      	cmp	r2, r3
 8013406:	d127      	bne.n	8013458 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8013408:	4b36      	ldr	r3, [pc, #216]	; (80134e4 <mem_malloc+0x1e8>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801340e:	e005      	b.n	801341c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013410:	69bb      	ldr	r3, [r7, #24]
 8013412:	881b      	ldrh	r3, [r3, #0]
 8013414:	4618      	mov	r0, r3
 8013416:	f7ff fc83 	bl	8012d20 <ptr_to_mem>
 801341a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801341c:	69bb      	ldr	r3, [r7, #24]
 801341e:	791b      	ldrb	r3, [r3, #4]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d004      	beq.n	801342e <mem_malloc+0x132>
 8013424:	4b33      	ldr	r3, [pc, #204]	; (80134f4 <mem_malloc+0x1f8>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	69ba      	ldr	r2, [r7, #24]
 801342a:	429a      	cmp	r2, r3
 801342c:	d1f0      	bne.n	8013410 <mem_malloc+0x114>
          }
          lfree = cur;
 801342e:	4a2d      	ldr	r2, [pc, #180]	; (80134e4 <mem_malloc+0x1e8>)
 8013430:	69bb      	ldr	r3, [r7, #24]
 8013432:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013434:	4b2b      	ldr	r3, [pc, #172]	; (80134e4 <mem_malloc+0x1e8>)
 8013436:	681a      	ldr	r2, [r3, #0]
 8013438:	4b2e      	ldr	r3, [pc, #184]	; (80134f4 <mem_malloc+0x1f8>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	429a      	cmp	r2, r3
 801343e:	d00b      	beq.n	8013458 <mem_malloc+0x15c>
 8013440:	4b28      	ldr	r3, [pc, #160]	; (80134e4 <mem_malloc+0x1e8>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	791b      	ldrb	r3, [r3, #4]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d006      	beq.n	8013458 <mem_malloc+0x15c>
 801344a:	4b27      	ldr	r3, [pc, #156]	; (80134e8 <mem_malloc+0x1ec>)
 801344c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013450:	4929      	ldr	r1, [pc, #164]	; (80134f8 <mem_malloc+0x1fc>)
 8013452:	4827      	ldr	r0, [pc, #156]	; (80134f0 <mem_malloc+0x1f4>)
 8013454:	f00b fd52 	bl	801eefc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013458:	4821      	ldr	r0, [pc, #132]	; (80134e0 <mem_malloc+0x1e4>)
 801345a:	f00a fc7a 	bl	801dd52 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801345e:	8bba      	ldrh	r2, [r7, #28]
 8013460:	697b      	ldr	r3, [r7, #20]
 8013462:	4413      	add	r3, r2
 8013464:	3308      	adds	r3, #8
 8013466:	4a23      	ldr	r2, [pc, #140]	; (80134f4 <mem_malloc+0x1f8>)
 8013468:	6812      	ldr	r2, [r2, #0]
 801346a:	4293      	cmp	r3, r2
 801346c:	d906      	bls.n	801347c <mem_malloc+0x180>
 801346e:	4b1e      	ldr	r3, [pc, #120]	; (80134e8 <mem_malloc+0x1ec>)
 8013470:	f240 32b9 	movw	r2, #953	; 0x3b9
 8013474:	4921      	ldr	r1, [pc, #132]	; (80134fc <mem_malloc+0x200>)
 8013476:	481e      	ldr	r0, [pc, #120]	; (80134f0 <mem_malloc+0x1f4>)
 8013478:	f00b fd40 	bl	801eefc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	f003 0303 	and.w	r3, r3, #3
 8013482:	2b00      	cmp	r3, #0
 8013484:	d006      	beq.n	8013494 <mem_malloc+0x198>
 8013486:	4b18      	ldr	r3, [pc, #96]	; (80134e8 <mem_malloc+0x1ec>)
 8013488:	f240 32bb 	movw	r2, #955	; 0x3bb
 801348c:	491c      	ldr	r1, [pc, #112]	; (8013500 <mem_malloc+0x204>)
 801348e:	4818      	ldr	r0, [pc, #96]	; (80134f0 <mem_malloc+0x1f4>)
 8013490:	f00b fd34 	bl	801eefc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	f003 0303 	and.w	r3, r3, #3
 801349a:	2b00      	cmp	r3, #0
 801349c:	d006      	beq.n	80134ac <mem_malloc+0x1b0>
 801349e:	4b12      	ldr	r3, [pc, #72]	; (80134e8 <mem_malloc+0x1ec>)
 80134a0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80134a4:	4917      	ldr	r1, [pc, #92]	; (8013504 <mem_malloc+0x208>)
 80134a6:	4812      	ldr	r0, [pc, #72]	; (80134f0 <mem_malloc+0x1f4>)
 80134a8:	f00b fd28 	bl	801eefc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	3308      	adds	r3, #8
 80134b0:	e011      	b.n	80134d6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80134b2:	8bfb      	ldrh	r3, [r7, #30]
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7ff fc33 	bl	8012d20 <ptr_to_mem>
 80134ba:	4603      	mov	r3, r0
 80134bc:	881b      	ldrh	r3, [r3, #0]
 80134be:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80134c0:	8bfa      	ldrh	r2, [r7, #30]
 80134c2:	8bbb      	ldrh	r3, [r7, #28]
 80134c4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80134c8:	429a      	cmp	r2, r3
 80134ca:	f4ff af41 	bcc.w	8013350 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80134ce:	4804      	ldr	r0, [pc, #16]	; (80134e0 <mem_malloc+0x1e4>)
 80134d0:	f00a fc3f 	bl	801dd52 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80134d4:	2300      	movs	r3, #0
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3720      	adds	r7, #32
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	20006d7c 	.word	0x20006d7c
 80134e4:	20006d80 	.word	0x20006d80
 80134e8:	08023fd0 	.word	0x08023fd0
 80134ec:	08024194 	.word	0x08024194
 80134f0:	08024018 	.word	0x08024018
 80134f4:	20006d78 	.word	0x20006d78
 80134f8:	080241a8 	.word	0x080241a8
 80134fc:	080241c4 	.word	0x080241c4
 8013500:	080241f4 	.word	0x080241f4
 8013504:	08024224 	.word	0x08024224

08013508 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013508:	b480      	push	{r7}
 801350a:	b085      	sub	sp, #20
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	689b      	ldr	r3, [r3, #8]
 8013514:	2200      	movs	r2, #0
 8013516:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	685b      	ldr	r3, [r3, #4]
 801351c:	3303      	adds	r3, #3
 801351e:	f023 0303 	bic.w	r3, r3, #3
 8013522:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013524:	2300      	movs	r3, #0
 8013526:	60fb      	str	r3, [r7, #12]
 8013528:	e011      	b.n	801354e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	689b      	ldr	r3, [r3, #8]
 801352e:	681a      	ldr	r2, [r3, #0]
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	689b      	ldr	r3, [r3, #8]
 8013538:	68ba      	ldr	r2, [r7, #8]
 801353a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	881b      	ldrh	r3, [r3, #0]
 8013540:	461a      	mov	r2, r3
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	4413      	add	r3, r2
 8013546:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	3301      	adds	r3, #1
 801354c:	60fb      	str	r3, [r7, #12]
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	885b      	ldrh	r3, [r3, #2]
 8013552:	461a      	mov	r2, r3
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	4293      	cmp	r3, r2
 8013558:	dbe7      	blt.n	801352a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801355a:	bf00      	nop
 801355c:	bf00      	nop
 801355e:	3714      	adds	r7, #20
 8013560:	46bd      	mov	sp, r7
 8013562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013566:	4770      	bx	lr

08013568 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801356e:	2300      	movs	r3, #0
 8013570:	80fb      	strh	r3, [r7, #6]
 8013572:	e009      	b.n	8013588 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013574:	88fb      	ldrh	r3, [r7, #6]
 8013576:	4a08      	ldr	r2, [pc, #32]	; (8013598 <memp_init+0x30>)
 8013578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801357c:	4618      	mov	r0, r3
 801357e:	f7ff ffc3 	bl	8013508 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013582:	88fb      	ldrh	r3, [r7, #6]
 8013584:	3301      	adds	r3, #1
 8013586:	80fb      	strh	r3, [r7, #6]
 8013588:	88fb      	ldrh	r3, [r7, #6]
 801358a:	2b0c      	cmp	r3, #12
 801358c:	d9f2      	bls.n	8013574 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801358e:	bf00      	nop
 8013590:	bf00      	nop
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}
 8013598:	08026bb0 	.word	0x08026bb0

0801359c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b084      	sub	sp, #16
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80135a4:	f00a fc08 	bl	801ddb8 <sys_arch_protect>
 80135a8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	689b      	ldr	r3, [r3, #8]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d015      	beq.n	80135e4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	689b      	ldr	r3, [r3, #8]
 80135bc:	68ba      	ldr	r2, [r7, #8]
 80135be:	6812      	ldr	r2, [r2, #0]
 80135c0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80135c2:	68bb      	ldr	r3, [r7, #8]
 80135c4:	f003 0303 	and.w	r3, r3, #3
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d006      	beq.n	80135da <do_memp_malloc_pool+0x3e>
 80135cc:	4b09      	ldr	r3, [pc, #36]	; (80135f4 <do_memp_malloc_pool+0x58>)
 80135ce:	f44f 728c 	mov.w	r2, #280	; 0x118
 80135d2:	4909      	ldr	r1, [pc, #36]	; (80135f8 <do_memp_malloc_pool+0x5c>)
 80135d4:	4809      	ldr	r0, [pc, #36]	; (80135fc <do_memp_malloc_pool+0x60>)
 80135d6:	f00b fc91 	bl	801eefc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80135da:	68f8      	ldr	r0, [r7, #12]
 80135dc:	f00a fbfa 	bl	801ddd4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	e003      	b.n	80135ec <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80135e4:	68f8      	ldr	r0, [r7, #12]
 80135e6:	f00a fbf5 	bl	801ddd4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80135ea:	2300      	movs	r3, #0
}
 80135ec:	4618      	mov	r0, r3
 80135ee:	3710      	adds	r7, #16
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}
 80135f4:	08024248 	.word	0x08024248
 80135f8:	08024278 	.word	0x08024278
 80135fc:	0802429c 	.word	0x0802429c

08013600 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b084      	sub	sp, #16
 8013604:	af00      	add	r7, sp, #0
 8013606:	4603      	mov	r3, r0
 8013608:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801360a:	79fb      	ldrb	r3, [r7, #7]
 801360c:	2b0c      	cmp	r3, #12
 801360e:	d908      	bls.n	8013622 <memp_malloc+0x22>
 8013610:	4b0a      	ldr	r3, [pc, #40]	; (801363c <memp_malloc+0x3c>)
 8013612:	f240 1257 	movw	r2, #343	; 0x157
 8013616:	490a      	ldr	r1, [pc, #40]	; (8013640 <memp_malloc+0x40>)
 8013618:	480a      	ldr	r0, [pc, #40]	; (8013644 <memp_malloc+0x44>)
 801361a:	f00b fc6f 	bl	801eefc <iprintf>
 801361e:	2300      	movs	r3, #0
 8013620:	e008      	b.n	8013634 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013622:	79fb      	ldrb	r3, [r7, #7]
 8013624:	4a08      	ldr	r2, [pc, #32]	; (8013648 <memp_malloc+0x48>)
 8013626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801362a:	4618      	mov	r0, r3
 801362c:	f7ff ffb6 	bl	801359c <do_memp_malloc_pool>
 8013630:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013632:	68fb      	ldr	r3, [r7, #12]
}
 8013634:	4618      	mov	r0, r3
 8013636:	3710      	adds	r7, #16
 8013638:	46bd      	mov	sp, r7
 801363a:	bd80      	pop	{r7, pc}
 801363c:	08024248 	.word	0x08024248
 8013640:	080242d8 	.word	0x080242d8
 8013644:	0802429c 	.word	0x0802429c
 8013648:	08026bb0 	.word	0x08026bb0

0801364c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b084      	sub	sp, #16
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	f003 0303 	and.w	r3, r3, #3
 801365c:	2b00      	cmp	r3, #0
 801365e:	d006      	beq.n	801366e <do_memp_free_pool+0x22>
 8013660:	4b0d      	ldr	r3, [pc, #52]	; (8013698 <do_memp_free_pool+0x4c>)
 8013662:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8013666:	490d      	ldr	r1, [pc, #52]	; (801369c <do_memp_free_pool+0x50>)
 8013668:	480d      	ldr	r0, [pc, #52]	; (80136a0 <do_memp_free_pool+0x54>)
 801366a:	f00b fc47 	bl	801eefc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013672:	f00a fba1 	bl	801ddb8 <sys_arch_protect>
 8013676:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	689b      	ldr	r3, [r3, #8]
 801367c:	681a      	ldr	r2, [r3, #0]
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	689b      	ldr	r3, [r3, #8]
 8013686:	68fa      	ldr	r2, [r7, #12]
 8013688:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801368a:	68b8      	ldr	r0, [r7, #8]
 801368c:	f00a fba2 	bl	801ddd4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013690:	bf00      	nop
 8013692:	3710      	adds	r7, #16
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}
 8013698:	08024248 	.word	0x08024248
 801369c:	080242f8 	.word	0x080242f8
 80136a0:	0802429c 	.word	0x0802429c

080136a4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b082      	sub	sp, #8
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	4603      	mov	r3, r0
 80136ac:	6039      	str	r1, [r7, #0]
 80136ae:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80136b0:	79fb      	ldrb	r3, [r7, #7]
 80136b2:	2b0c      	cmp	r3, #12
 80136b4:	d907      	bls.n	80136c6 <memp_free+0x22>
 80136b6:	4b0c      	ldr	r3, [pc, #48]	; (80136e8 <memp_free+0x44>)
 80136b8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80136bc:	490b      	ldr	r1, [pc, #44]	; (80136ec <memp_free+0x48>)
 80136be:	480c      	ldr	r0, [pc, #48]	; (80136f0 <memp_free+0x4c>)
 80136c0:	f00b fc1c 	bl	801eefc <iprintf>
 80136c4:	e00c      	b.n	80136e0 <memp_free+0x3c>

  if (mem == NULL) {
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d008      	beq.n	80136de <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80136cc:	79fb      	ldrb	r3, [r7, #7]
 80136ce:	4a09      	ldr	r2, [pc, #36]	; (80136f4 <memp_free+0x50>)
 80136d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136d4:	6839      	ldr	r1, [r7, #0]
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7ff ffb8 	bl	801364c <do_memp_free_pool>
 80136dc:	e000      	b.n	80136e0 <memp_free+0x3c>
    return;
 80136de:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80136e0:	3708      	adds	r7, #8
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	bf00      	nop
 80136e8:	08024248 	.word	0x08024248
 80136ec:	08024318 	.word	0x08024318
 80136f0:	0802429c 	.word	0x0802429c
 80136f4:	08026bb0 	.word	0x08026bb0

080136f8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80136f8:	b480      	push	{r7}
 80136fa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80136fc:	bf00      	nop
 80136fe:	46bd      	mov	sp, r7
 8013700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013704:	4770      	bx	lr
	...

08013708 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b086      	sub	sp, #24
 801370c:	af00      	add	r7, sp, #0
 801370e:	60f8      	str	r0, [r7, #12]
 8013710:	60b9      	str	r1, [r7, #8]
 8013712:	607a      	str	r2, [r7, #4]
 8013714:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d108      	bne.n	801372e <netif_add+0x26>
 801371c:	4b57      	ldr	r3, [pc, #348]	; (801387c <netif_add+0x174>)
 801371e:	f240 1227 	movw	r2, #295	; 0x127
 8013722:	4957      	ldr	r1, [pc, #348]	; (8013880 <netif_add+0x178>)
 8013724:	4857      	ldr	r0, [pc, #348]	; (8013884 <netif_add+0x17c>)
 8013726:	f00b fbe9 	bl	801eefc <iprintf>
 801372a:	2300      	movs	r3, #0
 801372c:	e0a2      	b.n	8013874 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013730:	2b00      	cmp	r3, #0
 8013732:	d108      	bne.n	8013746 <netif_add+0x3e>
 8013734:	4b51      	ldr	r3, [pc, #324]	; (801387c <netif_add+0x174>)
 8013736:	f44f 7294 	mov.w	r2, #296	; 0x128
 801373a:	4953      	ldr	r1, [pc, #332]	; (8013888 <netif_add+0x180>)
 801373c:	4851      	ldr	r0, [pc, #324]	; (8013884 <netif_add+0x17c>)
 801373e:	f00b fbdd 	bl	801eefc <iprintf>
 8013742:	2300      	movs	r3, #0
 8013744:	e096      	b.n	8013874 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d101      	bne.n	8013750 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801374c:	4b4f      	ldr	r3, [pc, #316]	; (801388c <netif_add+0x184>)
 801374e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d101      	bne.n	801375a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013756:	4b4d      	ldr	r3, [pc, #308]	; (801388c <netif_add+0x184>)
 8013758:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d101      	bne.n	8013764 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013760:	4b4a      	ldr	r3, [pc, #296]	; (801388c <netif_add+0x184>)
 8013762:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	2200      	movs	r2, #0
 8013768:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	2200      	movs	r2, #0
 801376e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2200      	movs	r2, #0
 8013774:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	4a45      	ldr	r2, [pc, #276]	; (8013890 <netif_add+0x188>)
 801377a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	2200      	movs	r2, #0
 8013780:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	2200      	movs	r2, #0
 8013786:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	2200      	movs	r2, #0
 801378e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	6a3a      	ldr	r2, [r7, #32]
 8013794:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013796:	4b3f      	ldr	r3, [pc, #252]	; (8013894 <netif_add+0x18c>)
 8013798:	781a      	ldrb	r2, [r3, #0]
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137a4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	68b9      	ldr	r1, [r7, #8]
 80137ac:	68f8      	ldr	r0, [r7, #12]
 80137ae:	f000 f913 	bl	80139d8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80137b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b4:	68f8      	ldr	r0, [r7, #12]
 80137b6:	4798      	blx	r3
 80137b8:	4603      	mov	r3, r0
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d001      	beq.n	80137c2 <netif_add+0xba>
    return NULL;
 80137be:	2300      	movs	r3, #0
 80137c0:	e058      	b.n	8013874 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80137c8:	2bff      	cmp	r3, #255	; 0xff
 80137ca:	d103      	bne.n	80137d4 <netif_add+0xcc>
        netif->num = 0;
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	2200      	movs	r2, #0
 80137d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80137d4:	2300      	movs	r3, #0
 80137d6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80137d8:	4b2f      	ldr	r3, [pc, #188]	; (8013898 <netif_add+0x190>)
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	617b      	str	r3, [r7, #20]
 80137de:	e02b      	b.n	8013838 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80137e0:	697a      	ldr	r2, [r7, #20]
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d106      	bne.n	80137f6 <netif_add+0xee>
 80137e8:	4b24      	ldr	r3, [pc, #144]	; (801387c <netif_add+0x174>)
 80137ea:	f240 128b 	movw	r2, #395	; 0x18b
 80137ee:	492b      	ldr	r1, [pc, #172]	; (801389c <netif_add+0x194>)
 80137f0:	4824      	ldr	r0, [pc, #144]	; (8013884 <netif_add+0x17c>)
 80137f2:	f00b fb83 	bl	801eefc <iprintf>
        num_netifs++;
 80137f6:	693b      	ldr	r3, [r7, #16]
 80137f8:	3301      	adds	r3, #1
 80137fa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	2bff      	cmp	r3, #255	; 0xff
 8013800:	dd06      	ble.n	8013810 <netif_add+0x108>
 8013802:	4b1e      	ldr	r3, [pc, #120]	; (801387c <netif_add+0x174>)
 8013804:	f240 128d 	movw	r2, #397	; 0x18d
 8013808:	4925      	ldr	r1, [pc, #148]	; (80138a0 <netif_add+0x198>)
 801380a:	481e      	ldr	r0, [pc, #120]	; (8013884 <netif_add+0x17c>)
 801380c:	f00b fb76 	bl	801eefc <iprintf>
        if (netif2->num == netif->num) {
 8013810:	697b      	ldr	r3, [r7, #20]
 8013812:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801381c:	429a      	cmp	r2, r3
 801381e:	d108      	bne.n	8013832 <netif_add+0x12a>
          netif->num++;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013826:	3301      	adds	r3, #1
 8013828:	b2da      	uxtb	r2, r3
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8013830:	e005      	b.n	801383e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	617b      	str	r3, [r7, #20]
 8013838:	697b      	ldr	r3, [r7, #20]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d1d0      	bne.n	80137e0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d1be      	bne.n	80137c2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801384a:	2bfe      	cmp	r3, #254	; 0xfe
 801384c:	d103      	bne.n	8013856 <netif_add+0x14e>
    netif_num = 0;
 801384e:	4b11      	ldr	r3, [pc, #68]	; (8013894 <netif_add+0x18c>)
 8013850:	2200      	movs	r2, #0
 8013852:	701a      	strb	r2, [r3, #0]
 8013854:	e006      	b.n	8013864 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801385c:	3301      	adds	r3, #1
 801385e:	b2da      	uxtb	r2, r3
 8013860:	4b0c      	ldr	r3, [pc, #48]	; (8013894 <netif_add+0x18c>)
 8013862:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013864:	4b0c      	ldr	r3, [pc, #48]	; (8013898 <netif_add+0x190>)
 8013866:	681a      	ldr	r2, [r3, #0]
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801386c:	4a0a      	ldr	r2, [pc, #40]	; (8013898 <netif_add+0x190>)
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013872:	68fb      	ldr	r3, [r7, #12]
}
 8013874:	4618      	mov	r0, r3
 8013876:	3718      	adds	r7, #24
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}
 801387c:	08024334 	.word	0x08024334
 8013880:	080243c8 	.word	0x080243c8
 8013884:	08024384 	.word	0x08024384
 8013888:	080243e4 	.word	0x080243e4
 801388c:	08026c24 	.word	0x08026c24
 8013890:	08013beb 	.word	0x08013beb
 8013894:	20006db8 	.word	0x20006db8
 8013898:	2000e0ec 	.word	0x2000e0ec
 801389c:	08024408 	.word	0x08024408
 80138a0:	0802441c 	.word	0x0802441c

080138a4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b082      	sub	sp, #8
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80138ae:	6839      	ldr	r1, [r7, #0]
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	f002 fd31 	bl	8016318 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80138b6:	6839      	ldr	r1, [r7, #0]
 80138b8:	6878      	ldr	r0, [r7, #4]
 80138ba:	f007 fdc9 	bl	801b450 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80138be:	bf00      	nop
 80138c0:	3708      	adds	r7, #8
 80138c2:	46bd      	mov	sp, r7
 80138c4:	bd80      	pop	{r7, pc}
	...

080138c8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b086      	sub	sp, #24
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	60f8      	str	r0, [r7, #12]
 80138d0:	60b9      	str	r1, [r7, #8]
 80138d2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80138d4:	68bb      	ldr	r3, [r7, #8]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d106      	bne.n	80138e8 <netif_do_set_ipaddr+0x20>
 80138da:	4b1d      	ldr	r3, [pc, #116]	; (8013950 <netif_do_set_ipaddr+0x88>)
 80138dc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80138e0:	491c      	ldr	r1, [pc, #112]	; (8013954 <netif_do_set_ipaddr+0x8c>)
 80138e2:	481d      	ldr	r0, [pc, #116]	; (8013958 <netif_do_set_ipaddr+0x90>)
 80138e4:	f00b fb0a 	bl	801eefc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d106      	bne.n	80138fc <netif_do_set_ipaddr+0x34>
 80138ee:	4b18      	ldr	r3, [pc, #96]	; (8013950 <netif_do_set_ipaddr+0x88>)
 80138f0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80138f4:	4917      	ldr	r1, [pc, #92]	; (8013954 <netif_do_set_ipaddr+0x8c>)
 80138f6:	4818      	ldr	r0, [pc, #96]	; (8013958 <netif_do_set_ipaddr+0x90>)
 80138f8:	f00b fb00 	bl	801eefc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	681a      	ldr	r2, [r3, #0]
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	3304      	adds	r3, #4
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	429a      	cmp	r2, r3
 8013908:	d01c      	beq.n	8013944 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	3304      	adds	r3, #4
 8013914:	681a      	ldr	r2, [r3, #0]
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801391a:	f107 0314 	add.w	r3, r7, #20
 801391e:	4619      	mov	r1, r3
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f7ff ffbf 	bl	80138a4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013926:	68bb      	ldr	r3, [r7, #8]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d002      	beq.n	8013932 <netif_do_set_ipaddr+0x6a>
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	e000      	b.n	8013934 <netif_do_set_ipaddr+0x6c>
 8013932:	2300      	movs	r3, #0
 8013934:	68fa      	ldr	r2, [r7, #12]
 8013936:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013938:	2101      	movs	r1, #1
 801393a:	68f8      	ldr	r0, [r7, #12]
 801393c:	f000 f8d2 	bl	8013ae4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013940:	2301      	movs	r3, #1
 8013942:	e000      	b.n	8013946 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013944:	2300      	movs	r3, #0
}
 8013946:	4618      	mov	r0, r3
 8013948:	3718      	adds	r7, #24
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}
 801394e:	bf00      	nop
 8013950:	08024334 	.word	0x08024334
 8013954:	0802444c 	.word	0x0802444c
 8013958:	08024384 	.word	0x08024384

0801395c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801395c:	b480      	push	{r7}
 801395e:	b085      	sub	sp, #20
 8013960:	af00      	add	r7, sp, #0
 8013962:	60f8      	str	r0, [r7, #12]
 8013964:	60b9      	str	r1, [r7, #8]
 8013966:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	681a      	ldr	r2, [r3, #0]
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	3308      	adds	r3, #8
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	429a      	cmp	r2, r3
 8013974:	d00a      	beq.n	801398c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d002      	beq.n	8013982 <netif_do_set_netmask+0x26>
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	e000      	b.n	8013984 <netif_do_set_netmask+0x28>
 8013982:	2300      	movs	r3, #0
 8013984:	68fa      	ldr	r2, [r7, #12]
 8013986:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013988:	2301      	movs	r3, #1
 801398a:	e000      	b.n	801398e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801398c:	2300      	movs	r3, #0
}
 801398e:	4618      	mov	r0, r3
 8013990:	3714      	adds	r7, #20
 8013992:	46bd      	mov	sp, r7
 8013994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013998:	4770      	bx	lr

0801399a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801399a:	b480      	push	{r7}
 801399c:	b085      	sub	sp, #20
 801399e:	af00      	add	r7, sp, #0
 80139a0:	60f8      	str	r0, [r7, #12]
 80139a2:	60b9      	str	r1, [r7, #8]
 80139a4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	681a      	ldr	r2, [r3, #0]
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	330c      	adds	r3, #12
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d00a      	beq.n	80139ca <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d002      	beq.n	80139c0 <netif_do_set_gw+0x26>
 80139ba:	68bb      	ldr	r3, [r7, #8]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	e000      	b.n	80139c2 <netif_do_set_gw+0x28>
 80139c0:	2300      	movs	r3, #0
 80139c2:	68fa      	ldr	r2, [r7, #12]
 80139c4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80139c6:	2301      	movs	r3, #1
 80139c8:	e000      	b.n	80139cc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80139ca:	2300      	movs	r3, #0
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	3714      	adds	r7, #20
 80139d0:	46bd      	mov	sp, r7
 80139d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d6:	4770      	bx	lr

080139d8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b088      	sub	sp, #32
 80139dc:	af00      	add	r7, sp, #0
 80139de:	60f8      	str	r0, [r7, #12]
 80139e0:	60b9      	str	r1, [r7, #8]
 80139e2:	607a      	str	r2, [r7, #4]
 80139e4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80139e6:	2300      	movs	r3, #0
 80139e8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80139ea:	2300      	movs	r3, #0
 80139ec:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d101      	bne.n	80139f8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80139f4:	4b1c      	ldr	r3, [pc, #112]	; (8013a68 <netif_set_addr+0x90>)
 80139f6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d101      	bne.n	8013a02 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80139fe:	4b1a      	ldr	r3, [pc, #104]	; (8013a68 <netif_set_addr+0x90>)
 8013a00:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d101      	bne.n	8013a0c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013a08:	4b17      	ldr	r3, [pc, #92]	; (8013a68 <netif_set_addr+0x90>)
 8013a0a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d003      	beq.n	8013a1a <netif_set_addr+0x42>
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d101      	bne.n	8013a1e <netif_set_addr+0x46>
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	e000      	b.n	8013a20 <netif_set_addr+0x48>
 8013a1e:	2300      	movs	r3, #0
 8013a20:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013a22:	697b      	ldr	r3, [r7, #20]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d006      	beq.n	8013a36 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013a28:	f107 0310 	add.w	r3, r7, #16
 8013a2c:	461a      	mov	r2, r3
 8013a2e:	68b9      	ldr	r1, [r7, #8]
 8013a30:	68f8      	ldr	r0, [r7, #12]
 8013a32:	f7ff ff49 	bl	80138c8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013a36:	69fa      	ldr	r2, [r7, #28]
 8013a38:	6879      	ldr	r1, [r7, #4]
 8013a3a:	68f8      	ldr	r0, [r7, #12]
 8013a3c:	f7ff ff8e 	bl	801395c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013a40:	69ba      	ldr	r2, [r7, #24]
 8013a42:	6839      	ldr	r1, [r7, #0]
 8013a44:	68f8      	ldr	r0, [r7, #12]
 8013a46:	f7ff ffa8 	bl	801399a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d106      	bne.n	8013a5e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013a50:	f107 0310 	add.w	r3, r7, #16
 8013a54:	461a      	mov	r2, r3
 8013a56:	68b9      	ldr	r1, [r7, #8]
 8013a58:	68f8      	ldr	r0, [r7, #12]
 8013a5a:	f7ff ff35 	bl	80138c8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013a5e:	bf00      	nop
 8013a60:	3720      	adds	r7, #32
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}
 8013a66:	bf00      	nop
 8013a68:	08026c24 	.word	0x08026c24

08013a6c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013a6c:	b480      	push	{r7}
 8013a6e:	b083      	sub	sp, #12
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013a74:	4a04      	ldr	r2, [pc, #16]	; (8013a88 <netif_set_default+0x1c>)
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013a7a:	bf00      	nop
 8013a7c:	370c      	adds	r7, #12
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a84:	4770      	bx	lr
 8013a86:	bf00      	nop
 8013a88:	2000e0f0 	.word	0x2000e0f0

08013a8c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d107      	bne.n	8013aaa <netif_set_up+0x1e>
 8013a9a:	4b0f      	ldr	r3, [pc, #60]	; (8013ad8 <netif_set_up+0x4c>)
 8013a9c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8013aa0:	490e      	ldr	r1, [pc, #56]	; (8013adc <netif_set_up+0x50>)
 8013aa2:	480f      	ldr	r0, [pc, #60]	; (8013ae0 <netif_set_up+0x54>)
 8013aa4:	f00b fa2a 	bl	801eefc <iprintf>
 8013aa8:	e013      	b.n	8013ad2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ab0:	f003 0301 	and.w	r3, r3, #1
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d10c      	bne.n	8013ad2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013abe:	f043 0301 	orr.w	r3, r3, #1
 8013ac2:	b2da      	uxtb	r2, r3
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013aca:	2103      	movs	r1, #3
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f000 f809 	bl	8013ae4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013ad2:	3708      	adds	r7, #8
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}
 8013ad8:	08024334 	.word	0x08024334
 8013adc:	080244bc 	.word	0x080244bc
 8013ae0:	08024384 	.word	0x08024384

08013ae4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b082      	sub	sp, #8
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	460b      	mov	r3, r1
 8013aee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d106      	bne.n	8013b04 <netif_issue_reports+0x20>
 8013af6:	4b18      	ldr	r3, [pc, #96]	; (8013b58 <netif_issue_reports+0x74>)
 8013af8:	f240 326d 	movw	r2, #877	; 0x36d
 8013afc:	4917      	ldr	r1, [pc, #92]	; (8013b5c <netif_issue_reports+0x78>)
 8013afe:	4818      	ldr	r0, [pc, #96]	; (8013b60 <netif_issue_reports+0x7c>)
 8013b00:	f00b f9fc 	bl	801eefc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013b0a:	f003 0304 	and.w	r3, r3, #4
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d01e      	beq.n	8013b50 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013b18:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d017      	beq.n	8013b50 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013b20:	78fb      	ldrb	r3, [r7, #3]
 8013b22:	f003 0301 	and.w	r3, r3, #1
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d013      	beq.n	8013b52 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	3304      	adds	r3, #4
 8013b2e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d00e      	beq.n	8013b52 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013b3a:	f003 0308 	and.w	r3, r3, #8
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d007      	beq.n	8013b52 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	3304      	adds	r3, #4
 8013b46:	4619      	mov	r1, r3
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	f008 fbeb 	bl	801c324 <etharp_request>
 8013b4e:	e000      	b.n	8013b52 <netif_issue_reports+0x6e>
    return;
 8013b50:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013b52:	3708      	adds	r7, #8
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}
 8013b58:	08024334 	.word	0x08024334
 8013b5c:	080244d8 	.word	0x080244d8
 8013b60:	08024384 	.word	0x08024384

08013b64 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b082      	sub	sp, #8
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d107      	bne.n	8013b82 <netif_set_down+0x1e>
 8013b72:	4b12      	ldr	r3, [pc, #72]	; (8013bbc <netif_set_down+0x58>)
 8013b74:	f240 329b 	movw	r2, #923	; 0x39b
 8013b78:	4911      	ldr	r1, [pc, #68]	; (8013bc0 <netif_set_down+0x5c>)
 8013b7a:	4812      	ldr	r0, [pc, #72]	; (8013bc4 <netif_set_down+0x60>)
 8013b7c:	f00b f9be 	bl	801eefc <iprintf>
 8013b80:	e019      	b.n	8013bb6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013b88:	f003 0301 	and.w	r3, r3, #1
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d012      	beq.n	8013bb6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013b96:	f023 0301 	bic.w	r3, r3, #1
 8013b9a:	b2da      	uxtb	r2, r3
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ba8:	f003 0308 	and.w	r3, r3, #8
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d002      	beq.n	8013bb6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013bb0:	6878      	ldr	r0, [r7, #4]
 8013bb2:	f007 ff75 	bl	801baa0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013bb6:	3708      	adds	r7, #8
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	08024334 	.word	0x08024334
 8013bc0:	080244fc 	.word	0x080244fc
 8013bc4:	08024384 	.word	0x08024384

08013bc8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013bc8:	b480      	push	{r7}
 8013bca:	b083      	sub	sp, #12
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
 8013bd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d002      	beq.n	8013bde <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	683a      	ldr	r2, [r7, #0]
 8013bdc:	61da      	str	r2, [r3, #28]
  }
}
 8013bde:	bf00      	nop
 8013be0:	370c      	adds	r7, #12
 8013be2:	46bd      	mov	sp, r7
 8013be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be8:	4770      	bx	lr

08013bea <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013bea:	b480      	push	{r7}
 8013bec:	b085      	sub	sp, #20
 8013bee:	af00      	add	r7, sp, #0
 8013bf0:	60f8      	str	r0, [r7, #12]
 8013bf2:	60b9      	str	r1, [r7, #8]
 8013bf4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013bf6:	f06f 030b 	mvn.w	r3, #11
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3714      	adds	r7, #20
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c04:	4770      	bx	lr
	...

08013c08 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013c08:	b480      	push	{r7}
 8013c0a:	b085      	sub	sp, #20
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	4603      	mov	r3, r0
 8013c10:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013c12:	79fb      	ldrb	r3, [r7, #7]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d013      	beq.n	8013c40 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013c18:	4b0d      	ldr	r3, [pc, #52]	; (8013c50 <netif_get_by_index+0x48>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	60fb      	str	r3, [r7, #12]
 8013c1e:	e00c      	b.n	8013c3a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013c26:	3301      	adds	r3, #1
 8013c28:	b2db      	uxtb	r3, r3
 8013c2a:	79fa      	ldrb	r2, [r7, #7]
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d101      	bne.n	8013c34 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	e006      	b.n	8013c42 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	60fb      	str	r3, [r7, #12]
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d1ef      	bne.n	8013c20 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013c40:	2300      	movs	r3, #0
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	3714      	adds	r7, #20
 8013c46:	46bd      	mov	sp, r7
 8013c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4c:	4770      	bx	lr
 8013c4e:	bf00      	nop
 8013c50:	2000e0ec 	.word	0x2000e0ec

08013c54 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b082      	sub	sp, #8
 8013c58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013c5a:	f00a f8ad 	bl	801ddb8 <sys_arch_protect>
 8013c5e:	6038      	str	r0, [r7, #0]
 8013c60:	4b0d      	ldr	r3, [pc, #52]	; (8013c98 <pbuf_free_ooseq+0x44>)
 8013c62:	2200      	movs	r2, #0
 8013c64:	701a      	strb	r2, [r3, #0]
 8013c66:	6838      	ldr	r0, [r7, #0]
 8013c68:	f00a f8b4 	bl	801ddd4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013c6c:	4b0b      	ldr	r3, [pc, #44]	; (8013c9c <pbuf_free_ooseq+0x48>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	607b      	str	r3, [r7, #4]
 8013c72:	e00a      	b.n	8013c8a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d003      	beq.n	8013c84 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f002 fb89 	bl	8016394 <tcp_free_ooseq>
      return;
 8013c82:	e005      	b.n	8013c90 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	68db      	ldr	r3, [r3, #12]
 8013c88:	607b      	str	r3, [r7, #4]
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d1f1      	bne.n	8013c74 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013c90:	3708      	adds	r7, #8
 8013c92:	46bd      	mov	sp, r7
 8013c94:	bd80      	pop	{r7, pc}
 8013c96:	bf00      	nop
 8013c98:	2000e0f4 	.word	0x2000e0f4
 8013c9c:	2000e0fc 	.word	0x2000e0fc

08013ca0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013ca8:	f7ff ffd4 	bl	8013c54 <pbuf_free_ooseq>
}
 8013cac:	bf00      	nop
 8013cae:	3708      	adds	r7, #8
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}

08013cb4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b082      	sub	sp, #8
 8013cb8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013cba:	f00a f87d 	bl	801ddb8 <sys_arch_protect>
 8013cbe:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013cc0:	4b0f      	ldr	r3, [pc, #60]	; (8013d00 <pbuf_pool_is_empty+0x4c>)
 8013cc2:	781b      	ldrb	r3, [r3, #0]
 8013cc4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013cc6:	4b0e      	ldr	r3, [pc, #56]	; (8013d00 <pbuf_pool_is_empty+0x4c>)
 8013cc8:	2201      	movs	r2, #1
 8013cca:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f00a f881 	bl	801ddd4 <sys_arch_unprotect>

  if (!queued) {
 8013cd2:	78fb      	ldrb	r3, [r7, #3]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d10f      	bne.n	8013cf8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013cd8:	2100      	movs	r1, #0
 8013cda:	480a      	ldr	r0, [pc, #40]	; (8013d04 <pbuf_pool_is_empty+0x50>)
 8013cdc:	f7fe ff3a 	bl	8012b54 <tcpip_try_callback>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d008      	beq.n	8013cf8 <pbuf_pool_is_empty+0x44>
 8013ce6:	f00a f867 	bl	801ddb8 <sys_arch_protect>
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	4b04      	ldr	r3, [pc, #16]	; (8013d00 <pbuf_pool_is_empty+0x4c>)
 8013cee:	2200      	movs	r2, #0
 8013cf0:	701a      	strb	r2, [r3, #0]
 8013cf2:	6878      	ldr	r0, [r7, #4]
 8013cf4:	f00a f86e 	bl	801ddd4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013cf8:	bf00      	nop
 8013cfa:	3708      	adds	r7, #8
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd80      	pop	{r7, pc}
 8013d00:	2000e0f4 	.word	0x2000e0f4
 8013d04:	08013ca1 	.word	0x08013ca1

08013d08 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013d08:	b480      	push	{r7}
 8013d0a:	b085      	sub	sp, #20
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	60f8      	str	r0, [r7, #12]
 8013d10:	60b9      	str	r1, [r7, #8]
 8013d12:	4611      	mov	r1, r2
 8013d14:	461a      	mov	r2, r3
 8013d16:	460b      	mov	r3, r1
 8013d18:	80fb      	strh	r3, [r7, #6]
 8013d1a:	4613      	mov	r3, r2
 8013d1c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	2200      	movs	r2, #0
 8013d22:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	68ba      	ldr	r2, [r7, #8]
 8013d28:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	88fa      	ldrh	r2, [r7, #6]
 8013d2e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	88ba      	ldrh	r2, [r7, #4]
 8013d34:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013d36:	8b3b      	ldrh	r3, [r7, #24]
 8013d38:	b2da      	uxtb	r2, r3
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	7f3a      	ldrb	r2, [r7, #28]
 8013d42:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	2201      	movs	r2, #1
 8013d48:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	73da      	strb	r2, [r3, #15]
}
 8013d50:	bf00      	nop
 8013d52:	3714      	adds	r7, #20
 8013d54:	46bd      	mov	sp, r7
 8013d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5a:	4770      	bx	lr

08013d5c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b08c      	sub	sp, #48	; 0x30
 8013d60:	af02      	add	r7, sp, #8
 8013d62:	4603      	mov	r3, r0
 8013d64:	71fb      	strb	r3, [r7, #7]
 8013d66:	460b      	mov	r3, r1
 8013d68:	80bb      	strh	r3, [r7, #4]
 8013d6a:	4613      	mov	r3, r2
 8013d6c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013d6e:	79fb      	ldrb	r3, [r7, #7]
 8013d70:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013d72:	887b      	ldrh	r3, [r7, #2]
 8013d74:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013d78:	d07f      	beq.n	8013e7a <pbuf_alloc+0x11e>
 8013d7a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013d7e:	f300 80c8 	bgt.w	8013f12 <pbuf_alloc+0x1b6>
 8013d82:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013d86:	d010      	beq.n	8013daa <pbuf_alloc+0x4e>
 8013d88:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013d8c:	f300 80c1 	bgt.w	8013f12 <pbuf_alloc+0x1b6>
 8013d90:	2b01      	cmp	r3, #1
 8013d92:	d002      	beq.n	8013d9a <pbuf_alloc+0x3e>
 8013d94:	2b41      	cmp	r3, #65	; 0x41
 8013d96:	f040 80bc 	bne.w	8013f12 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013d9a:	887a      	ldrh	r2, [r7, #2]
 8013d9c:	88bb      	ldrh	r3, [r7, #4]
 8013d9e:	4619      	mov	r1, r3
 8013da0:	2000      	movs	r0, #0
 8013da2:	f000 f8d1 	bl	8013f48 <pbuf_alloc_reference>
 8013da6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8013da8:	e0bd      	b.n	8013f26 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013daa:	2300      	movs	r3, #0
 8013dac:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8013dae:	2300      	movs	r3, #0
 8013db0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013db2:	88bb      	ldrh	r3, [r7, #4]
 8013db4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013db6:	200c      	movs	r0, #12
 8013db8:	f7ff fc22 	bl	8013600 <memp_malloc>
 8013dbc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013dbe:	693b      	ldr	r3, [r7, #16]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d109      	bne.n	8013dd8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013dc4:	f7ff ff76 	bl	8013cb4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d002      	beq.n	8013dd4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8013dce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013dd0:	f000 faa8 	bl	8014324 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	e0a7      	b.n	8013f28 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013dd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013dda:	3303      	adds	r3, #3
 8013ddc:	b29b      	uxth	r3, r3
 8013dde:	f023 0303 	bic.w	r3, r3, #3
 8013de2:	b29b      	uxth	r3, r3
 8013de4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8013de8:	b29b      	uxth	r3, r3
 8013dea:	8b7a      	ldrh	r2, [r7, #26]
 8013dec:	4293      	cmp	r3, r2
 8013dee:	bf28      	it	cs
 8013df0:	4613      	movcs	r3, r2
 8013df2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013df4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013df6:	3310      	adds	r3, #16
 8013df8:	693a      	ldr	r2, [r7, #16]
 8013dfa:	4413      	add	r3, r2
 8013dfc:	3303      	adds	r3, #3
 8013dfe:	f023 0303 	bic.w	r3, r3, #3
 8013e02:	4618      	mov	r0, r3
 8013e04:	89f9      	ldrh	r1, [r7, #14]
 8013e06:	8b7a      	ldrh	r2, [r7, #26]
 8013e08:	2300      	movs	r3, #0
 8013e0a:	9301      	str	r3, [sp, #4]
 8013e0c:	887b      	ldrh	r3, [r7, #2]
 8013e0e:	9300      	str	r3, [sp, #0]
 8013e10:	460b      	mov	r3, r1
 8013e12:	4601      	mov	r1, r0
 8013e14:	6938      	ldr	r0, [r7, #16]
 8013e16:	f7ff ff77 	bl	8013d08 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	685b      	ldr	r3, [r3, #4]
 8013e1e:	f003 0303 	and.w	r3, r3, #3
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d006      	beq.n	8013e34 <pbuf_alloc+0xd8>
 8013e26:	4b42      	ldr	r3, [pc, #264]	; (8013f30 <pbuf_alloc+0x1d4>)
 8013e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013e2c:	4941      	ldr	r1, [pc, #260]	; (8013f34 <pbuf_alloc+0x1d8>)
 8013e2e:	4842      	ldr	r0, [pc, #264]	; (8013f38 <pbuf_alloc+0x1dc>)
 8013e30:	f00b f864 	bl	801eefc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013e34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e36:	3303      	adds	r3, #3
 8013e38:	f023 0303 	bic.w	r3, r3, #3
 8013e3c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013e40:	d106      	bne.n	8013e50 <pbuf_alloc+0xf4>
 8013e42:	4b3b      	ldr	r3, [pc, #236]	; (8013f30 <pbuf_alloc+0x1d4>)
 8013e44:	f44f 7281 	mov.w	r2, #258	; 0x102
 8013e48:	493c      	ldr	r1, [pc, #240]	; (8013f3c <pbuf_alloc+0x1e0>)
 8013e4a:	483b      	ldr	r0, [pc, #236]	; (8013f38 <pbuf_alloc+0x1dc>)
 8013e4c:	f00b f856 	bl	801eefc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d102      	bne.n	8013e5c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8013e56:	693b      	ldr	r3, [r7, #16]
 8013e58:	627b      	str	r3, [r7, #36]	; 0x24
 8013e5a:	e002      	b.n	8013e62 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	693a      	ldr	r2, [r7, #16]
 8013e60:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013e62:	693b      	ldr	r3, [r7, #16]
 8013e64:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013e66:	8b7a      	ldrh	r2, [r7, #26]
 8013e68:	89fb      	ldrh	r3, [r7, #14]
 8013e6a:	1ad3      	subs	r3, r2, r3
 8013e6c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8013e72:	8b7b      	ldrh	r3, [r7, #26]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d19e      	bne.n	8013db6 <pbuf_alloc+0x5a>
      break;
 8013e78:	e055      	b.n	8013f26 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013e7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e7c:	3303      	adds	r3, #3
 8013e7e:	b29b      	uxth	r3, r3
 8013e80:	f023 0303 	bic.w	r3, r3, #3
 8013e84:	b29a      	uxth	r2, r3
 8013e86:	88bb      	ldrh	r3, [r7, #4]
 8013e88:	3303      	adds	r3, #3
 8013e8a:	b29b      	uxth	r3, r3
 8013e8c:	f023 0303 	bic.w	r3, r3, #3
 8013e90:	b29b      	uxth	r3, r3
 8013e92:	4413      	add	r3, r2
 8013e94:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013e96:	8b3b      	ldrh	r3, [r7, #24]
 8013e98:	3310      	adds	r3, #16
 8013e9a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013e9c:	8b3a      	ldrh	r2, [r7, #24]
 8013e9e:	88bb      	ldrh	r3, [r7, #4]
 8013ea0:	3303      	adds	r3, #3
 8013ea2:	f023 0303 	bic.w	r3, r3, #3
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d306      	bcc.n	8013eb8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013eaa:	8afa      	ldrh	r2, [r7, #22]
 8013eac:	88bb      	ldrh	r3, [r7, #4]
 8013eae:	3303      	adds	r3, #3
 8013eb0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d201      	bcs.n	8013ebc <pbuf_alloc+0x160>
        return NULL;
 8013eb8:	2300      	movs	r3, #0
 8013eba:	e035      	b.n	8013f28 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013ebc:	8afb      	ldrh	r3, [r7, #22]
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7ff fa1c 	bl	80132fc <mem_malloc>
 8013ec4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8013ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d101      	bne.n	8013ed0 <pbuf_alloc+0x174>
        return NULL;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	e02b      	b.n	8013f28 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013ed0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ed2:	3310      	adds	r3, #16
 8013ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ed6:	4413      	add	r3, r2
 8013ed8:	3303      	adds	r3, #3
 8013eda:	f023 0303 	bic.w	r3, r3, #3
 8013ede:	4618      	mov	r0, r3
 8013ee0:	88b9      	ldrh	r1, [r7, #4]
 8013ee2:	88ba      	ldrh	r2, [r7, #4]
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	9301      	str	r3, [sp, #4]
 8013ee8:	887b      	ldrh	r3, [r7, #2]
 8013eea:	9300      	str	r3, [sp, #0]
 8013eec:	460b      	mov	r3, r1
 8013eee:	4601      	mov	r1, r0
 8013ef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ef2:	f7ff ff09 	bl	8013d08 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef8:	685b      	ldr	r3, [r3, #4]
 8013efa:	f003 0303 	and.w	r3, r3, #3
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d010      	beq.n	8013f24 <pbuf_alloc+0x1c8>
 8013f02:	4b0b      	ldr	r3, [pc, #44]	; (8013f30 <pbuf_alloc+0x1d4>)
 8013f04:	f44f 7291 	mov.w	r2, #290	; 0x122
 8013f08:	490d      	ldr	r1, [pc, #52]	; (8013f40 <pbuf_alloc+0x1e4>)
 8013f0a:	480b      	ldr	r0, [pc, #44]	; (8013f38 <pbuf_alloc+0x1dc>)
 8013f0c:	f00a fff6 	bl	801eefc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013f10:	e008      	b.n	8013f24 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013f12:	4b07      	ldr	r3, [pc, #28]	; (8013f30 <pbuf_alloc+0x1d4>)
 8013f14:	f240 1227 	movw	r2, #295	; 0x127
 8013f18:	490a      	ldr	r1, [pc, #40]	; (8013f44 <pbuf_alloc+0x1e8>)
 8013f1a:	4807      	ldr	r0, [pc, #28]	; (8013f38 <pbuf_alloc+0x1dc>)
 8013f1c:	f00a ffee 	bl	801eefc <iprintf>
      return NULL;
 8013f20:	2300      	movs	r3, #0
 8013f22:	e001      	b.n	8013f28 <pbuf_alloc+0x1cc>
      break;
 8013f24:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8013f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3728      	adds	r7, #40	; 0x28
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}
 8013f30:	08024564 	.word	0x08024564
 8013f34:	08024594 	.word	0x08024594
 8013f38:	080245c4 	.word	0x080245c4
 8013f3c:	080245ec 	.word	0x080245ec
 8013f40:	08024620 	.word	0x08024620
 8013f44:	0802464c 	.word	0x0802464c

08013f48 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b086      	sub	sp, #24
 8013f4c:	af02      	add	r7, sp, #8
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	460b      	mov	r3, r1
 8013f52:	807b      	strh	r3, [r7, #2]
 8013f54:	4613      	mov	r3, r2
 8013f56:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013f58:	883b      	ldrh	r3, [r7, #0]
 8013f5a:	2b41      	cmp	r3, #65	; 0x41
 8013f5c:	d009      	beq.n	8013f72 <pbuf_alloc_reference+0x2a>
 8013f5e:	883b      	ldrh	r3, [r7, #0]
 8013f60:	2b01      	cmp	r3, #1
 8013f62:	d006      	beq.n	8013f72 <pbuf_alloc_reference+0x2a>
 8013f64:	4b0f      	ldr	r3, [pc, #60]	; (8013fa4 <pbuf_alloc_reference+0x5c>)
 8013f66:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8013f6a:	490f      	ldr	r1, [pc, #60]	; (8013fa8 <pbuf_alloc_reference+0x60>)
 8013f6c:	480f      	ldr	r0, [pc, #60]	; (8013fac <pbuf_alloc_reference+0x64>)
 8013f6e:	f00a ffc5 	bl	801eefc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013f72:	200b      	movs	r0, #11
 8013f74:	f7ff fb44 	bl	8013600 <memp_malloc>
 8013f78:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d101      	bne.n	8013f84 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013f80:	2300      	movs	r3, #0
 8013f82:	e00b      	b.n	8013f9c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013f84:	8879      	ldrh	r1, [r7, #2]
 8013f86:	887a      	ldrh	r2, [r7, #2]
 8013f88:	2300      	movs	r3, #0
 8013f8a:	9301      	str	r3, [sp, #4]
 8013f8c:	883b      	ldrh	r3, [r7, #0]
 8013f8e:	9300      	str	r3, [sp, #0]
 8013f90:	460b      	mov	r3, r1
 8013f92:	6879      	ldr	r1, [r7, #4]
 8013f94:	68f8      	ldr	r0, [r7, #12]
 8013f96:	f7ff feb7 	bl	8013d08 <pbuf_init_alloced_pbuf>
  return p;
 8013f9a:	68fb      	ldr	r3, [r7, #12]
}
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	3710      	adds	r7, #16
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd80      	pop	{r7, pc}
 8013fa4:	08024564 	.word	0x08024564
 8013fa8:	08024668 	.word	0x08024668
 8013fac:	080245c4 	.word	0x080245c4

08013fb0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b088      	sub	sp, #32
 8013fb4:	af02      	add	r7, sp, #8
 8013fb6:	607b      	str	r3, [r7, #4]
 8013fb8:	4603      	mov	r3, r0
 8013fba:	73fb      	strb	r3, [r7, #15]
 8013fbc:	460b      	mov	r3, r1
 8013fbe:	81bb      	strh	r3, [r7, #12]
 8013fc0:	4613      	mov	r3, r2
 8013fc2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013fc4:	7bfb      	ldrb	r3, [r7, #15]
 8013fc6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013fc8:	8a7b      	ldrh	r3, [r7, #18]
 8013fca:	3303      	adds	r3, #3
 8013fcc:	f023 0203 	bic.w	r2, r3, #3
 8013fd0:	89bb      	ldrh	r3, [r7, #12]
 8013fd2:	441a      	add	r2, r3
 8013fd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013fd6:	429a      	cmp	r2, r3
 8013fd8:	d901      	bls.n	8013fde <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	e018      	b.n	8014010 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013fde:	6a3b      	ldr	r3, [r7, #32]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d007      	beq.n	8013ff4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013fe4:	8a7b      	ldrh	r3, [r7, #18]
 8013fe6:	3303      	adds	r3, #3
 8013fe8:	f023 0303 	bic.w	r3, r3, #3
 8013fec:	6a3a      	ldr	r2, [r7, #32]
 8013fee:	4413      	add	r3, r2
 8013ff0:	617b      	str	r3, [r7, #20]
 8013ff2:	e001      	b.n	8013ff8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	89b9      	ldrh	r1, [r7, #12]
 8013ffc:	89ba      	ldrh	r2, [r7, #12]
 8013ffe:	2302      	movs	r3, #2
 8014000:	9301      	str	r3, [sp, #4]
 8014002:	897b      	ldrh	r3, [r7, #10]
 8014004:	9300      	str	r3, [sp, #0]
 8014006:	460b      	mov	r3, r1
 8014008:	6979      	ldr	r1, [r7, #20]
 801400a:	f7ff fe7d 	bl	8013d08 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801400e:	687b      	ldr	r3, [r7, #4]
}
 8014010:	4618      	mov	r0, r3
 8014012:	3718      	adds	r7, #24
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}

08014018 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b084      	sub	sp, #16
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
 8014020:	460b      	mov	r3, r1
 8014022:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d106      	bne.n	8014038 <pbuf_realloc+0x20>
 801402a:	4b3a      	ldr	r3, [pc, #232]	; (8014114 <pbuf_realloc+0xfc>)
 801402c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8014030:	4939      	ldr	r1, [pc, #228]	; (8014118 <pbuf_realloc+0x100>)
 8014032:	483a      	ldr	r0, [pc, #232]	; (801411c <pbuf_realloc+0x104>)
 8014034:	f00a ff62 	bl	801eefc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	891b      	ldrh	r3, [r3, #8]
 801403c:	887a      	ldrh	r2, [r7, #2]
 801403e:	429a      	cmp	r2, r3
 8014040:	d263      	bcs.n	801410a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	891a      	ldrh	r2, [r3, #8]
 8014046:	887b      	ldrh	r3, [r7, #2]
 8014048:	1ad3      	subs	r3, r2, r3
 801404a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801404c:	887b      	ldrh	r3, [r7, #2]
 801404e:	817b      	strh	r3, [r7, #10]
  q = p;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014054:	e018      	b.n	8014088 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	895b      	ldrh	r3, [r3, #10]
 801405a:	897a      	ldrh	r2, [r7, #10]
 801405c:	1ad3      	subs	r3, r2, r3
 801405e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	891a      	ldrh	r2, [r3, #8]
 8014064:	893b      	ldrh	r3, [r7, #8]
 8014066:	1ad3      	subs	r3, r2, r3
 8014068:	b29a      	uxth	r2, r3
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d106      	bne.n	8014088 <pbuf_realloc+0x70>
 801407a:	4b26      	ldr	r3, [pc, #152]	; (8014114 <pbuf_realloc+0xfc>)
 801407c:	f240 12af 	movw	r2, #431	; 0x1af
 8014080:	4927      	ldr	r1, [pc, #156]	; (8014120 <pbuf_realloc+0x108>)
 8014082:	4826      	ldr	r0, [pc, #152]	; (801411c <pbuf_realloc+0x104>)
 8014084:	f00a ff3a 	bl	801eefc <iprintf>
  while (rem_len > q->len) {
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	895b      	ldrh	r3, [r3, #10]
 801408c:	897a      	ldrh	r2, [r7, #10]
 801408e:	429a      	cmp	r2, r3
 8014090:	d8e1      	bhi.n	8014056 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	7b1b      	ldrb	r3, [r3, #12]
 8014096:	f003 030f 	and.w	r3, r3, #15
 801409a:	2b00      	cmp	r3, #0
 801409c:	d121      	bne.n	80140e2 <pbuf_realloc+0xca>
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	895b      	ldrh	r3, [r3, #10]
 80140a2:	897a      	ldrh	r2, [r7, #10]
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d01c      	beq.n	80140e2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	7b5b      	ldrb	r3, [r3, #13]
 80140ac:	f003 0302 	and.w	r3, r3, #2
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d116      	bne.n	80140e2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	685a      	ldr	r2, [r3, #4]
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	1ad3      	subs	r3, r2, r3
 80140bc:	b29a      	uxth	r2, r3
 80140be:	897b      	ldrh	r3, [r7, #10]
 80140c0:	4413      	add	r3, r2
 80140c2:	b29b      	uxth	r3, r3
 80140c4:	4619      	mov	r1, r3
 80140c6:	68f8      	ldr	r0, [r7, #12]
 80140c8:	f7ff f80e 	bl	80130e8 <mem_trim>
 80140cc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d106      	bne.n	80140e2 <pbuf_realloc+0xca>
 80140d4:	4b0f      	ldr	r3, [pc, #60]	; (8014114 <pbuf_realloc+0xfc>)
 80140d6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80140da:	4912      	ldr	r1, [pc, #72]	; (8014124 <pbuf_realloc+0x10c>)
 80140dc:	480f      	ldr	r0, [pc, #60]	; (801411c <pbuf_realloc+0x104>)
 80140de:	f00a ff0d 	bl	801eefc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	897a      	ldrh	r2, [r7, #10]
 80140e6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	895a      	ldrh	r2, [r3, #10]
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d004      	beq.n	8014102 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	4618      	mov	r0, r3
 80140fe:	f000 f911 	bl	8014324 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	2200      	movs	r2, #0
 8014106:	601a      	str	r2, [r3, #0]
 8014108:	e000      	b.n	801410c <pbuf_realloc+0xf4>
    return;
 801410a:	bf00      	nop

}
 801410c:	3710      	adds	r7, #16
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}
 8014112:	bf00      	nop
 8014114:	08024564 	.word	0x08024564
 8014118:	0802467c 	.word	0x0802467c
 801411c:	080245c4 	.word	0x080245c4
 8014120:	08024694 	.word	0x08024694
 8014124:	080246ac 	.word	0x080246ac

08014128 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b086      	sub	sp, #24
 801412c:	af00      	add	r7, sp, #0
 801412e:	60f8      	str	r0, [r7, #12]
 8014130:	60b9      	str	r1, [r7, #8]
 8014132:	4613      	mov	r3, r2
 8014134:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d106      	bne.n	801414a <pbuf_add_header_impl+0x22>
 801413c:	4b2b      	ldr	r3, [pc, #172]	; (80141ec <pbuf_add_header_impl+0xc4>)
 801413e:	f240 12df 	movw	r2, #479	; 0x1df
 8014142:	492b      	ldr	r1, [pc, #172]	; (80141f0 <pbuf_add_header_impl+0xc8>)
 8014144:	482b      	ldr	r0, [pc, #172]	; (80141f4 <pbuf_add_header_impl+0xcc>)
 8014146:	f00a fed9 	bl	801eefc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d003      	beq.n	8014158 <pbuf_add_header_impl+0x30>
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014156:	d301      	bcc.n	801415c <pbuf_add_header_impl+0x34>
    return 1;
 8014158:	2301      	movs	r3, #1
 801415a:	e043      	b.n	80141e4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801415c:	68bb      	ldr	r3, [r7, #8]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d101      	bne.n	8014166 <pbuf_add_header_impl+0x3e>
    return 0;
 8014162:	2300      	movs	r3, #0
 8014164:	e03e      	b.n	80141e4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	891a      	ldrh	r2, [r3, #8]
 801416e:	8a7b      	ldrh	r3, [r7, #18]
 8014170:	4413      	add	r3, r2
 8014172:	b29b      	uxth	r3, r3
 8014174:	8a7a      	ldrh	r2, [r7, #18]
 8014176:	429a      	cmp	r2, r3
 8014178:	d901      	bls.n	801417e <pbuf_add_header_impl+0x56>
    return 1;
 801417a:	2301      	movs	r3, #1
 801417c:	e032      	b.n	80141e4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	7b1b      	ldrb	r3, [r3, #12]
 8014182:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014184:	8a3b      	ldrh	r3, [r7, #16]
 8014186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801418a:	2b00      	cmp	r3, #0
 801418c:	d00c      	beq.n	80141a8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	685a      	ldr	r2, [r3, #4]
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	425b      	negs	r3, r3
 8014196:	4413      	add	r3, r2
 8014198:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	3310      	adds	r3, #16
 801419e:	697a      	ldr	r2, [r7, #20]
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d20d      	bcs.n	80141c0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80141a4:	2301      	movs	r3, #1
 80141a6:	e01d      	b.n	80141e4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80141a8:	79fb      	ldrb	r3, [r7, #7]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d006      	beq.n	80141bc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	685a      	ldr	r2, [r3, #4]
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	425b      	negs	r3, r3
 80141b6:	4413      	add	r3, r2
 80141b8:	617b      	str	r3, [r7, #20]
 80141ba:	e001      	b.n	80141c0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80141bc:	2301      	movs	r3, #1
 80141be:	e011      	b.n	80141e4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	697a      	ldr	r2, [r7, #20]
 80141c4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	895a      	ldrh	r2, [r3, #10]
 80141ca:	8a7b      	ldrh	r3, [r7, #18]
 80141cc:	4413      	add	r3, r2
 80141ce:	b29a      	uxth	r2, r3
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	891a      	ldrh	r2, [r3, #8]
 80141d8:	8a7b      	ldrh	r3, [r7, #18]
 80141da:	4413      	add	r3, r2
 80141dc:	b29a      	uxth	r2, r3
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	811a      	strh	r2, [r3, #8]


  return 0;
 80141e2:	2300      	movs	r3, #0
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	3718      	adds	r7, #24
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	08024564 	.word	0x08024564
 80141f0:	080246c8 	.word	0x080246c8
 80141f4:	080245c4 	.word	0x080245c4

080141f8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014202:	2200      	movs	r2, #0
 8014204:	6839      	ldr	r1, [r7, #0]
 8014206:	6878      	ldr	r0, [r7, #4]
 8014208:	f7ff ff8e 	bl	8014128 <pbuf_add_header_impl>
 801420c:	4603      	mov	r3, r0
}
 801420e:	4618      	mov	r0, r3
 8014210:	3708      	adds	r7, #8
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}
	...

08014218 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b084      	sub	sp, #16
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d106      	bne.n	8014236 <pbuf_remove_header+0x1e>
 8014228:	4b20      	ldr	r3, [pc, #128]	; (80142ac <pbuf_remove_header+0x94>)
 801422a:	f240 224b 	movw	r2, #587	; 0x24b
 801422e:	4920      	ldr	r1, [pc, #128]	; (80142b0 <pbuf_remove_header+0x98>)
 8014230:	4820      	ldr	r0, [pc, #128]	; (80142b4 <pbuf_remove_header+0x9c>)
 8014232:	f00a fe63 	bl	801eefc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d003      	beq.n	8014244 <pbuf_remove_header+0x2c>
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014242:	d301      	bcc.n	8014248 <pbuf_remove_header+0x30>
    return 1;
 8014244:	2301      	movs	r3, #1
 8014246:	e02c      	b.n	80142a2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d101      	bne.n	8014252 <pbuf_remove_header+0x3a>
    return 0;
 801424e:	2300      	movs	r3, #0
 8014250:	e027      	b.n	80142a2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	895b      	ldrh	r3, [r3, #10]
 801425a:	89fa      	ldrh	r2, [r7, #14]
 801425c:	429a      	cmp	r2, r3
 801425e:	d908      	bls.n	8014272 <pbuf_remove_header+0x5a>
 8014260:	4b12      	ldr	r3, [pc, #72]	; (80142ac <pbuf_remove_header+0x94>)
 8014262:	f240 2255 	movw	r2, #597	; 0x255
 8014266:	4914      	ldr	r1, [pc, #80]	; (80142b8 <pbuf_remove_header+0xa0>)
 8014268:	4812      	ldr	r0, [pc, #72]	; (80142b4 <pbuf_remove_header+0x9c>)
 801426a:	f00a fe47 	bl	801eefc <iprintf>
 801426e:	2301      	movs	r3, #1
 8014270:	e017      	b.n	80142a2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	685b      	ldr	r3, [r3, #4]
 8014276:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	685a      	ldr	r2, [r3, #4]
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	441a      	add	r2, r3
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	895a      	ldrh	r2, [r3, #10]
 8014288:	89fb      	ldrh	r3, [r7, #14]
 801428a:	1ad3      	subs	r3, r2, r3
 801428c:	b29a      	uxth	r2, r3
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	891a      	ldrh	r2, [r3, #8]
 8014296:	89fb      	ldrh	r3, [r7, #14]
 8014298:	1ad3      	subs	r3, r2, r3
 801429a:	b29a      	uxth	r2, r3
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80142a0:	2300      	movs	r3, #0
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3710      	adds	r7, #16
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	08024564 	.word	0x08024564
 80142b0:	080246c8 	.word	0x080246c8
 80142b4:	080245c4 	.word	0x080245c4
 80142b8:	080246d4 	.word	0x080246d4

080142bc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b082      	sub	sp, #8
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
 80142c4:	460b      	mov	r3, r1
 80142c6:	807b      	strh	r3, [r7, #2]
 80142c8:	4613      	mov	r3, r2
 80142ca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80142cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	da08      	bge.n	80142e6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80142d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80142d8:	425b      	negs	r3, r3
 80142da:	4619      	mov	r1, r3
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f7ff ff9b 	bl	8014218 <pbuf_remove_header>
 80142e2:	4603      	mov	r3, r0
 80142e4:	e007      	b.n	80142f6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80142e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80142ea:	787a      	ldrb	r2, [r7, #1]
 80142ec:	4619      	mov	r1, r3
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f7ff ff1a 	bl	8014128 <pbuf_add_header_impl>
 80142f4:	4603      	mov	r3, r0
  }
}
 80142f6:	4618      	mov	r0, r3
 80142f8:	3708      	adds	r7, #8
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}

080142fe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80142fe:	b580      	push	{r7, lr}
 8014300:	b082      	sub	sp, #8
 8014302:	af00      	add	r7, sp, #0
 8014304:	6078      	str	r0, [r7, #4]
 8014306:	460b      	mov	r3, r1
 8014308:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801430a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801430e:	2201      	movs	r2, #1
 8014310:	4619      	mov	r1, r3
 8014312:	6878      	ldr	r0, [r7, #4]
 8014314:	f7ff ffd2 	bl	80142bc <pbuf_header_impl>
 8014318:	4603      	mov	r3, r0
}
 801431a:	4618      	mov	r0, r3
 801431c:	3708      	adds	r7, #8
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}
	...

08014324 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b088      	sub	sp, #32
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d10b      	bne.n	801434a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d106      	bne.n	8014346 <pbuf_free+0x22>
 8014338:	4b3b      	ldr	r3, [pc, #236]	; (8014428 <pbuf_free+0x104>)
 801433a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801433e:	493b      	ldr	r1, [pc, #236]	; (801442c <pbuf_free+0x108>)
 8014340:	483b      	ldr	r0, [pc, #236]	; (8014430 <pbuf_free+0x10c>)
 8014342:	f00a fddb 	bl	801eefc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014346:	2300      	movs	r3, #0
 8014348:	e069      	b.n	801441e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801434a:	2300      	movs	r3, #0
 801434c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801434e:	e062      	b.n	8014416 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014350:	f009 fd32 	bl	801ddb8 <sys_arch_protect>
 8014354:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	7b9b      	ldrb	r3, [r3, #14]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d106      	bne.n	801436c <pbuf_free+0x48>
 801435e:	4b32      	ldr	r3, [pc, #200]	; (8014428 <pbuf_free+0x104>)
 8014360:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014364:	4933      	ldr	r1, [pc, #204]	; (8014434 <pbuf_free+0x110>)
 8014366:	4832      	ldr	r0, [pc, #200]	; (8014430 <pbuf_free+0x10c>)
 8014368:	f00a fdc8 	bl	801eefc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	7b9b      	ldrb	r3, [r3, #14]
 8014370:	3b01      	subs	r3, #1
 8014372:	b2da      	uxtb	r2, r3
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	739a      	strb	r2, [r3, #14]
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	7b9b      	ldrb	r3, [r3, #14]
 801437c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801437e:	69b8      	ldr	r0, [r7, #24]
 8014380:	f009 fd28 	bl	801ddd4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014384:	7dfb      	ldrb	r3, [r7, #23]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d143      	bne.n	8014412 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	7b1b      	ldrb	r3, [r3, #12]
 8014394:	f003 030f 	and.w	r3, r3, #15
 8014398:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	7b5b      	ldrb	r3, [r3, #13]
 801439e:	f003 0302 	and.w	r3, r3, #2
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d011      	beq.n	80143ca <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	691b      	ldr	r3, [r3, #16]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d106      	bne.n	80143c0 <pbuf_free+0x9c>
 80143b2:	4b1d      	ldr	r3, [pc, #116]	; (8014428 <pbuf_free+0x104>)
 80143b4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80143b8:	491f      	ldr	r1, [pc, #124]	; (8014438 <pbuf_free+0x114>)
 80143ba:	481d      	ldr	r0, [pc, #116]	; (8014430 <pbuf_free+0x10c>)
 80143bc:	f00a fd9e 	bl	801eefc <iprintf>
        pc->custom_free_function(p);
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	691b      	ldr	r3, [r3, #16]
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	4798      	blx	r3
 80143c8:	e01d      	b.n	8014406 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80143ca:	7bfb      	ldrb	r3, [r7, #15]
 80143cc:	2b02      	cmp	r3, #2
 80143ce:	d104      	bne.n	80143da <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80143d0:	6879      	ldr	r1, [r7, #4]
 80143d2:	200c      	movs	r0, #12
 80143d4:	f7ff f966 	bl	80136a4 <memp_free>
 80143d8:	e015      	b.n	8014406 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80143da:	7bfb      	ldrb	r3, [r7, #15]
 80143dc:	2b01      	cmp	r3, #1
 80143de:	d104      	bne.n	80143ea <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80143e0:	6879      	ldr	r1, [r7, #4]
 80143e2:	200b      	movs	r0, #11
 80143e4:	f7ff f95e 	bl	80136a4 <memp_free>
 80143e8:	e00d      	b.n	8014406 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80143ea:	7bfb      	ldrb	r3, [r7, #15]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d103      	bne.n	80143f8 <pbuf_free+0xd4>
          mem_free(p);
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f7fe fde9 	bl	8012fc8 <mem_free>
 80143f6:	e006      	b.n	8014406 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80143f8:	4b0b      	ldr	r3, [pc, #44]	; (8014428 <pbuf_free+0x104>)
 80143fa:	f240 320f 	movw	r2, #783	; 0x30f
 80143fe:	490f      	ldr	r1, [pc, #60]	; (801443c <pbuf_free+0x118>)
 8014400:	480b      	ldr	r0, [pc, #44]	; (8014430 <pbuf_free+0x10c>)
 8014402:	f00a fd7b 	bl	801eefc <iprintf>
        }
      }
      count++;
 8014406:	7ffb      	ldrb	r3, [r7, #31]
 8014408:	3301      	adds	r3, #1
 801440a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	607b      	str	r3, [r7, #4]
 8014410:	e001      	b.n	8014416 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014412:	2300      	movs	r3, #0
 8014414:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d199      	bne.n	8014350 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801441c:	7ffb      	ldrb	r3, [r7, #31]
}
 801441e:	4618      	mov	r0, r3
 8014420:	3720      	adds	r7, #32
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}
 8014426:	bf00      	nop
 8014428:	08024564 	.word	0x08024564
 801442c:	080246c8 	.word	0x080246c8
 8014430:	080245c4 	.word	0x080245c4
 8014434:	080246f4 	.word	0x080246f4
 8014438:	0802470c 	.word	0x0802470c
 801443c:	08024730 	.word	0x08024730

08014440 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014440:	b480      	push	{r7}
 8014442:	b085      	sub	sp, #20
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014448:	2300      	movs	r3, #0
 801444a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801444c:	e005      	b.n	801445a <pbuf_clen+0x1a>
    ++len;
 801444e:	89fb      	ldrh	r3, [r7, #14]
 8014450:	3301      	adds	r3, #1
 8014452:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d1f6      	bne.n	801444e <pbuf_clen+0xe>
  }
  return len;
 8014460:	89fb      	ldrh	r3, [r7, #14]
}
 8014462:	4618      	mov	r0, r3
 8014464:	3714      	adds	r7, #20
 8014466:	46bd      	mov	sp, r7
 8014468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446c:	4770      	bx	lr
	...

08014470 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b084      	sub	sp, #16
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d016      	beq.n	80144ac <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801447e:	f009 fc9b 	bl	801ddb8 <sys_arch_protect>
 8014482:	60f8      	str	r0, [r7, #12]
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	7b9b      	ldrb	r3, [r3, #14]
 8014488:	3301      	adds	r3, #1
 801448a:	b2da      	uxtb	r2, r3
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	739a      	strb	r2, [r3, #14]
 8014490:	68f8      	ldr	r0, [r7, #12]
 8014492:	f009 fc9f 	bl	801ddd4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	7b9b      	ldrb	r3, [r3, #14]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d106      	bne.n	80144ac <pbuf_ref+0x3c>
 801449e:	4b05      	ldr	r3, [pc, #20]	; (80144b4 <pbuf_ref+0x44>)
 80144a0:	f240 3242 	movw	r2, #834	; 0x342
 80144a4:	4904      	ldr	r1, [pc, #16]	; (80144b8 <pbuf_ref+0x48>)
 80144a6:	4805      	ldr	r0, [pc, #20]	; (80144bc <pbuf_ref+0x4c>)
 80144a8:	f00a fd28 	bl	801eefc <iprintf>
  }
}
 80144ac:	bf00      	nop
 80144ae:	3710      	adds	r7, #16
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}
 80144b4:	08024564 	.word	0x08024564
 80144b8:	08024744 	.word	0x08024744
 80144bc:	080245c4 	.word	0x080245c4

080144c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b084      	sub	sp, #16
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
 80144c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d002      	beq.n	80144d6 <pbuf_cat+0x16>
 80144d0:	683b      	ldr	r3, [r7, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d107      	bne.n	80144e6 <pbuf_cat+0x26>
 80144d6:	4b20      	ldr	r3, [pc, #128]	; (8014558 <pbuf_cat+0x98>)
 80144d8:	f240 3259 	movw	r2, #857	; 0x359
 80144dc:	491f      	ldr	r1, [pc, #124]	; (801455c <pbuf_cat+0x9c>)
 80144de:	4820      	ldr	r0, [pc, #128]	; (8014560 <pbuf_cat+0xa0>)
 80144e0:	f00a fd0c 	bl	801eefc <iprintf>
 80144e4:	e034      	b.n	8014550 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	60fb      	str	r3, [r7, #12]
 80144ea:	e00a      	b.n	8014502 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	891a      	ldrh	r2, [r3, #8]
 80144f0:	683b      	ldr	r3, [r7, #0]
 80144f2:	891b      	ldrh	r3, [r3, #8]
 80144f4:	4413      	add	r3, r2
 80144f6:	b29a      	uxth	r2, r3
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	60fb      	str	r3, [r7, #12]
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d1f0      	bne.n	80144ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	891a      	ldrh	r2, [r3, #8]
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	895b      	ldrh	r3, [r3, #10]
 8014512:	429a      	cmp	r2, r3
 8014514:	d006      	beq.n	8014524 <pbuf_cat+0x64>
 8014516:	4b10      	ldr	r3, [pc, #64]	; (8014558 <pbuf_cat+0x98>)
 8014518:	f240 3262 	movw	r2, #866	; 0x362
 801451c:	4911      	ldr	r1, [pc, #68]	; (8014564 <pbuf_cat+0xa4>)
 801451e:	4810      	ldr	r0, [pc, #64]	; (8014560 <pbuf_cat+0xa0>)
 8014520:	f00a fcec 	bl	801eefc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d006      	beq.n	801453a <pbuf_cat+0x7a>
 801452c:	4b0a      	ldr	r3, [pc, #40]	; (8014558 <pbuf_cat+0x98>)
 801452e:	f240 3263 	movw	r2, #867	; 0x363
 8014532:	490d      	ldr	r1, [pc, #52]	; (8014568 <pbuf_cat+0xa8>)
 8014534:	480a      	ldr	r0, [pc, #40]	; (8014560 <pbuf_cat+0xa0>)
 8014536:	f00a fce1 	bl	801eefc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	891a      	ldrh	r2, [r3, #8]
 801453e:	683b      	ldr	r3, [r7, #0]
 8014540:	891b      	ldrh	r3, [r3, #8]
 8014542:	4413      	add	r3, r2
 8014544:	b29a      	uxth	r2, r3
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	683a      	ldr	r2, [r7, #0]
 801454e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014550:	3710      	adds	r7, #16
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}
 8014556:	bf00      	nop
 8014558:	08024564 	.word	0x08024564
 801455c:	08024758 	.word	0x08024758
 8014560:	080245c4 	.word	0x080245c4
 8014564:	08024790 	.word	0x08024790
 8014568:	080247c0 	.word	0x080247c0

0801456c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b082      	sub	sp, #8
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
 8014574:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014576:	6839      	ldr	r1, [r7, #0]
 8014578:	6878      	ldr	r0, [r7, #4]
 801457a:	f7ff ffa1 	bl	80144c0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801457e:	6838      	ldr	r0, [r7, #0]
 8014580:	f7ff ff76 	bl	8014470 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014584:	bf00      	nop
 8014586:	3708      	adds	r7, #8
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}

0801458c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b086      	sub	sp, #24
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
 8014594:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014596:	2300      	movs	r3, #0
 8014598:	617b      	str	r3, [r7, #20]
 801459a:	2300      	movs	r3, #0
 801459c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d008      	beq.n	80145b6 <pbuf_copy+0x2a>
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d005      	beq.n	80145b6 <pbuf_copy+0x2a>
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	891a      	ldrh	r2, [r3, #8]
 80145ae:	683b      	ldr	r3, [r7, #0]
 80145b0:	891b      	ldrh	r3, [r3, #8]
 80145b2:	429a      	cmp	r2, r3
 80145b4:	d209      	bcs.n	80145ca <pbuf_copy+0x3e>
 80145b6:	4b57      	ldr	r3, [pc, #348]	; (8014714 <pbuf_copy+0x188>)
 80145b8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80145bc:	4956      	ldr	r1, [pc, #344]	; (8014718 <pbuf_copy+0x18c>)
 80145be:	4857      	ldr	r0, [pc, #348]	; (801471c <pbuf_copy+0x190>)
 80145c0:	f00a fc9c 	bl	801eefc <iprintf>
 80145c4:	f06f 030f 	mvn.w	r3, #15
 80145c8:	e09f      	b.n	801470a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	895b      	ldrh	r3, [r3, #10]
 80145ce:	461a      	mov	r2, r3
 80145d0:	697b      	ldr	r3, [r7, #20]
 80145d2:	1ad2      	subs	r2, r2, r3
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	895b      	ldrh	r3, [r3, #10]
 80145d8:	4619      	mov	r1, r3
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	1acb      	subs	r3, r1, r3
 80145de:	429a      	cmp	r2, r3
 80145e0:	d306      	bcc.n	80145f0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	895b      	ldrh	r3, [r3, #10]
 80145e6:	461a      	mov	r2, r3
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	1ad3      	subs	r3, r2, r3
 80145ec:	60fb      	str	r3, [r7, #12]
 80145ee:	e005      	b.n	80145fc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	895b      	ldrh	r3, [r3, #10]
 80145f4:	461a      	mov	r2, r3
 80145f6:	697b      	ldr	r3, [r7, #20]
 80145f8:	1ad3      	subs	r3, r2, r3
 80145fa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	685a      	ldr	r2, [r3, #4]
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	18d0      	adds	r0, r2, r3
 8014604:	683b      	ldr	r3, [r7, #0]
 8014606:	685a      	ldr	r2, [r3, #4]
 8014608:	693b      	ldr	r3, [r7, #16]
 801460a:	4413      	add	r3, r2
 801460c:	68fa      	ldr	r2, [r7, #12]
 801460e:	4619      	mov	r1, r3
 8014610:	f009 fd20 	bl	801e054 <memcpy>
    offset_to += len;
 8014614:	697a      	ldr	r2, [r7, #20]
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	4413      	add	r3, r2
 801461a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801461c:	693a      	ldr	r2, [r7, #16]
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	4413      	add	r3, r2
 8014622:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	895b      	ldrh	r3, [r3, #10]
 8014628:	461a      	mov	r2, r3
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	4293      	cmp	r3, r2
 801462e:	d906      	bls.n	801463e <pbuf_copy+0xb2>
 8014630:	4b38      	ldr	r3, [pc, #224]	; (8014714 <pbuf_copy+0x188>)
 8014632:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014636:	493a      	ldr	r1, [pc, #232]	; (8014720 <pbuf_copy+0x194>)
 8014638:	4838      	ldr	r0, [pc, #224]	; (801471c <pbuf_copy+0x190>)
 801463a:	f00a fc5f 	bl	801eefc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	895b      	ldrh	r3, [r3, #10]
 8014642:	461a      	mov	r2, r3
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	4293      	cmp	r3, r2
 8014648:	d906      	bls.n	8014658 <pbuf_copy+0xcc>
 801464a:	4b32      	ldr	r3, [pc, #200]	; (8014714 <pbuf_copy+0x188>)
 801464c:	f240 32da 	movw	r2, #986	; 0x3da
 8014650:	4934      	ldr	r1, [pc, #208]	; (8014724 <pbuf_copy+0x198>)
 8014652:	4832      	ldr	r0, [pc, #200]	; (801471c <pbuf_copy+0x190>)
 8014654:	f00a fc52 	bl	801eefc <iprintf>
    if (offset_from >= p_from->len) {
 8014658:	683b      	ldr	r3, [r7, #0]
 801465a:	895b      	ldrh	r3, [r3, #10]
 801465c:	461a      	mov	r2, r3
 801465e:	693b      	ldr	r3, [r7, #16]
 8014660:	4293      	cmp	r3, r2
 8014662:	d304      	bcc.n	801466e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014664:	2300      	movs	r3, #0
 8014666:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	895b      	ldrh	r3, [r3, #10]
 8014672:	461a      	mov	r2, r3
 8014674:	697b      	ldr	r3, [r7, #20]
 8014676:	4293      	cmp	r3, r2
 8014678:	d114      	bne.n	80146a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801467a:	2300      	movs	r3, #0
 801467c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d10c      	bne.n	80146a4 <pbuf_copy+0x118>
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d009      	beq.n	80146a4 <pbuf_copy+0x118>
 8014690:	4b20      	ldr	r3, [pc, #128]	; (8014714 <pbuf_copy+0x188>)
 8014692:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8014696:	4924      	ldr	r1, [pc, #144]	; (8014728 <pbuf_copy+0x19c>)
 8014698:	4820      	ldr	r0, [pc, #128]	; (801471c <pbuf_copy+0x190>)
 801469a:	f00a fc2f 	bl	801eefc <iprintf>
 801469e:	f06f 030f 	mvn.w	r3, #15
 80146a2:	e032      	b.n	801470a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d013      	beq.n	80146d2 <pbuf_copy+0x146>
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	895a      	ldrh	r2, [r3, #10]
 80146ae:	683b      	ldr	r3, [r7, #0]
 80146b0:	891b      	ldrh	r3, [r3, #8]
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d10d      	bne.n	80146d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d009      	beq.n	80146d2 <pbuf_copy+0x146>
 80146be:	4b15      	ldr	r3, [pc, #84]	; (8014714 <pbuf_copy+0x188>)
 80146c0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80146c4:	4919      	ldr	r1, [pc, #100]	; (801472c <pbuf_copy+0x1a0>)
 80146c6:	4815      	ldr	r0, [pc, #84]	; (801471c <pbuf_copy+0x190>)
 80146c8:	f00a fc18 	bl	801eefc <iprintf>
 80146cc:	f06f 0305 	mvn.w	r3, #5
 80146d0:	e01b      	b.n	801470a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d013      	beq.n	8014700 <pbuf_copy+0x174>
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	895a      	ldrh	r2, [r3, #10]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	891b      	ldrh	r3, [r3, #8]
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d10d      	bne.n	8014700 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d009      	beq.n	8014700 <pbuf_copy+0x174>
 80146ec:	4b09      	ldr	r3, [pc, #36]	; (8014714 <pbuf_copy+0x188>)
 80146ee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80146f2:	490e      	ldr	r1, [pc, #56]	; (801472c <pbuf_copy+0x1a0>)
 80146f4:	4809      	ldr	r0, [pc, #36]	; (801471c <pbuf_copy+0x190>)
 80146f6:	f00a fc01 	bl	801eefc <iprintf>
 80146fa:	f06f 0305 	mvn.w	r3, #5
 80146fe:	e004      	b.n	801470a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	2b00      	cmp	r3, #0
 8014704:	f47f af61 	bne.w	80145ca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014708:	2300      	movs	r3, #0
}
 801470a:	4618      	mov	r0, r3
 801470c:	3718      	adds	r7, #24
 801470e:	46bd      	mov	sp, r7
 8014710:	bd80      	pop	{r7, pc}
 8014712:	bf00      	nop
 8014714:	08024564 	.word	0x08024564
 8014718:	0802480c 	.word	0x0802480c
 801471c:	080245c4 	.word	0x080245c4
 8014720:	0802483c 	.word	0x0802483c
 8014724:	08024854 	.word	0x08024854
 8014728:	08024870 	.word	0x08024870
 801472c:	08024880 	.word	0x08024880

08014730 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b088      	sub	sp, #32
 8014734:	af00      	add	r7, sp, #0
 8014736:	60f8      	str	r0, [r7, #12]
 8014738:	60b9      	str	r1, [r7, #8]
 801473a:	4611      	mov	r1, r2
 801473c:	461a      	mov	r2, r3
 801473e:	460b      	mov	r3, r1
 8014740:	80fb      	strh	r3, [r7, #6]
 8014742:	4613      	mov	r3, r2
 8014744:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014746:	2300      	movs	r3, #0
 8014748:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801474a:	2300      	movs	r3, #0
 801474c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d108      	bne.n	8014766 <pbuf_copy_partial+0x36>
 8014754:	4b2b      	ldr	r3, [pc, #172]	; (8014804 <pbuf_copy_partial+0xd4>)
 8014756:	f240 420a 	movw	r2, #1034	; 0x40a
 801475a:	492b      	ldr	r1, [pc, #172]	; (8014808 <pbuf_copy_partial+0xd8>)
 801475c:	482b      	ldr	r0, [pc, #172]	; (801480c <pbuf_copy_partial+0xdc>)
 801475e:	f00a fbcd 	bl	801eefc <iprintf>
 8014762:	2300      	movs	r3, #0
 8014764:	e04a      	b.n	80147fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d108      	bne.n	801477e <pbuf_copy_partial+0x4e>
 801476c:	4b25      	ldr	r3, [pc, #148]	; (8014804 <pbuf_copy_partial+0xd4>)
 801476e:	f240 420b 	movw	r2, #1035	; 0x40b
 8014772:	4927      	ldr	r1, [pc, #156]	; (8014810 <pbuf_copy_partial+0xe0>)
 8014774:	4825      	ldr	r0, [pc, #148]	; (801480c <pbuf_copy_partial+0xdc>)
 8014776:	f00a fbc1 	bl	801eefc <iprintf>
 801477a:	2300      	movs	r3, #0
 801477c:	e03e      	b.n	80147fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	61fb      	str	r3, [r7, #28]
 8014782:	e034      	b.n	80147ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014784:	88bb      	ldrh	r3, [r7, #4]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d00a      	beq.n	80147a0 <pbuf_copy_partial+0x70>
 801478a:	69fb      	ldr	r3, [r7, #28]
 801478c:	895b      	ldrh	r3, [r3, #10]
 801478e:	88ba      	ldrh	r2, [r7, #4]
 8014790:	429a      	cmp	r2, r3
 8014792:	d305      	bcc.n	80147a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014794:	69fb      	ldr	r3, [r7, #28]
 8014796:	895b      	ldrh	r3, [r3, #10]
 8014798:	88ba      	ldrh	r2, [r7, #4]
 801479a:	1ad3      	subs	r3, r2, r3
 801479c:	80bb      	strh	r3, [r7, #4]
 801479e:	e023      	b.n	80147e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80147a0:	69fb      	ldr	r3, [r7, #28]
 80147a2:	895a      	ldrh	r2, [r3, #10]
 80147a4:	88bb      	ldrh	r3, [r7, #4]
 80147a6:	1ad3      	subs	r3, r2, r3
 80147a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80147aa:	8b3a      	ldrh	r2, [r7, #24]
 80147ac:	88fb      	ldrh	r3, [r7, #6]
 80147ae:	429a      	cmp	r2, r3
 80147b0:	d901      	bls.n	80147b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80147b2:	88fb      	ldrh	r3, [r7, #6]
 80147b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80147b6:	8b7b      	ldrh	r3, [r7, #26]
 80147b8:	68ba      	ldr	r2, [r7, #8]
 80147ba:	18d0      	adds	r0, r2, r3
 80147bc:	69fb      	ldr	r3, [r7, #28]
 80147be:	685a      	ldr	r2, [r3, #4]
 80147c0:	88bb      	ldrh	r3, [r7, #4]
 80147c2:	4413      	add	r3, r2
 80147c4:	8b3a      	ldrh	r2, [r7, #24]
 80147c6:	4619      	mov	r1, r3
 80147c8:	f009 fc44 	bl	801e054 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80147cc:	8afa      	ldrh	r2, [r7, #22]
 80147ce:	8b3b      	ldrh	r3, [r7, #24]
 80147d0:	4413      	add	r3, r2
 80147d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80147d4:	8b7a      	ldrh	r2, [r7, #26]
 80147d6:	8b3b      	ldrh	r3, [r7, #24]
 80147d8:	4413      	add	r3, r2
 80147da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80147dc:	88fa      	ldrh	r2, [r7, #6]
 80147de:	8b3b      	ldrh	r3, [r7, #24]
 80147e0:	1ad3      	subs	r3, r2, r3
 80147e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80147e4:	2300      	movs	r3, #0
 80147e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80147e8:	69fb      	ldr	r3, [r7, #28]
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	61fb      	str	r3, [r7, #28]
 80147ee:	88fb      	ldrh	r3, [r7, #6]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d002      	beq.n	80147fa <pbuf_copy_partial+0xca>
 80147f4:	69fb      	ldr	r3, [r7, #28]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d1c4      	bne.n	8014784 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80147fa:	8afb      	ldrh	r3, [r7, #22]
}
 80147fc:	4618      	mov	r0, r3
 80147fe:	3720      	adds	r7, #32
 8014800:	46bd      	mov	sp, r7
 8014802:	bd80      	pop	{r7, pc}
 8014804:	08024564 	.word	0x08024564
 8014808:	080248ac 	.word	0x080248ac
 801480c:	080245c4 	.word	0x080245c4
 8014810:	080248cc 	.word	0x080248cc

08014814 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b084      	sub	sp, #16
 8014818:	af00      	add	r7, sp, #0
 801481a:	4603      	mov	r3, r0
 801481c:	603a      	str	r2, [r7, #0]
 801481e:	71fb      	strb	r3, [r7, #7]
 8014820:	460b      	mov	r3, r1
 8014822:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	8919      	ldrh	r1, [r3, #8]
 8014828:	88ba      	ldrh	r2, [r7, #4]
 801482a:	79fb      	ldrb	r3, [r7, #7]
 801482c:	4618      	mov	r0, r3
 801482e:	f7ff fa95 	bl	8013d5c <pbuf_alloc>
 8014832:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d101      	bne.n	801483e <pbuf_clone+0x2a>
    return NULL;
 801483a:	2300      	movs	r3, #0
 801483c:	e011      	b.n	8014862 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801483e:	6839      	ldr	r1, [r7, #0]
 8014840:	68f8      	ldr	r0, [r7, #12]
 8014842:	f7ff fea3 	bl	801458c <pbuf_copy>
 8014846:	4603      	mov	r3, r0
 8014848:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801484a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d006      	beq.n	8014860 <pbuf_clone+0x4c>
 8014852:	4b06      	ldr	r3, [pc, #24]	; (801486c <pbuf_clone+0x58>)
 8014854:	f240 5224 	movw	r2, #1316	; 0x524
 8014858:	4905      	ldr	r1, [pc, #20]	; (8014870 <pbuf_clone+0x5c>)
 801485a:	4806      	ldr	r0, [pc, #24]	; (8014874 <pbuf_clone+0x60>)
 801485c:	f00a fb4e 	bl	801eefc <iprintf>
  return q;
 8014860:	68fb      	ldr	r3, [r7, #12]
}
 8014862:	4618      	mov	r0, r3
 8014864:	3710      	adds	r7, #16
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}
 801486a:	bf00      	nop
 801486c:	08024564 	.word	0x08024564
 8014870:	080249d8 	.word	0x080249d8
 8014874:	080245c4 	.word	0x080245c4

08014878 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801487c:	f00a fb56 	bl	801ef2c <rand>
 8014880:	4603      	mov	r3, r0
 8014882:	b29b      	uxth	r3, r3
 8014884:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014888:	b29b      	uxth	r3, r3
 801488a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801488e:	b29a      	uxth	r2, r3
 8014890:	4b01      	ldr	r3, [pc, #4]	; (8014898 <tcp_init+0x20>)
 8014892:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014894:	bf00      	nop
 8014896:	bd80      	pop	{r7, pc}
 8014898:	20000354 	.word	0x20000354

0801489c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	7d1b      	ldrb	r3, [r3, #20]
 80148a8:	2b01      	cmp	r3, #1
 80148aa:	d105      	bne.n	80148b8 <tcp_free+0x1c>
 80148ac:	4b06      	ldr	r3, [pc, #24]	; (80148c8 <tcp_free+0x2c>)
 80148ae:	22d4      	movs	r2, #212	; 0xd4
 80148b0:	4906      	ldr	r1, [pc, #24]	; (80148cc <tcp_free+0x30>)
 80148b2:	4807      	ldr	r0, [pc, #28]	; (80148d0 <tcp_free+0x34>)
 80148b4:	f00a fb22 	bl	801eefc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80148b8:	6879      	ldr	r1, [r7, #4]
 80148ba:	2001      	movs	r0, #1
 80148bc:	f7fe fef2 	bl	80136a4 <memp_free>
}
 80148c0:	bf00      	nop
 80148c2:	3708      	adds	r7, #8
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}
 80148c8:	08024a64 	.word	0x08024a64
 80148cc:	08024a94 	.word	0x08024a94
 80148d0:	08024aa8 	.word	0x08024aa8

080148d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	7d1b      	ldrb	r3, [r3, #20]
 80148e0:	2b01      	cmp	r3, #1
 80148e2:	d105      	bne.n	80148f0 <tcp_free_listen+0x1c>
 80148e4:	4b06      	ldr	r3, [pc, #24]	; (8014900 <tcp_free_listen+0x2c>)
 80148e6:	22df      	movs	r2, #223	; 0xdf
 80148e8:	4906      	ldr	r1, [pc, #24]	; (8014904 <tcp_free_listen+0x30>)
 80148ea:	4807      	ldr	r0, [pc, #28]	; (8014908 <tcp_free_listen+0x34>)
 80148ec:	f00a fb06 	bl	801eefc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80148f0:	6879      	ldr	r1, [r7, #4]
 80148f2:	2002      	movs	r0, #2
 80148f4:	f7fe fed6 	bl	80136a4 <memp_free>
}
 80148f8:	bf00      	nop
 80148fa:	3708      	adds	r7, #8
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}
 8014900:	08024a64 	.word	0x08024a64
 8014904:	08024ad0 	.word	0x08024ad0
 8014908:	08024aa8 	.word	0x08024aa8

0801490c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014910:	f000 ffdc 	bl	80158cc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014914:	4b07      	ldr	r3, [pc, #28]	; (8014934 <tcp_tmr+0x28>)
 8014916:	781b      	ldrb	r3, [r3, #0]
 8014918:	3301      	adds	r3, #1
 801491a:	b2da      	uxtb	r2, r3
 801491c:	4b05      	ldr	r3, [pc, #20]	; (8014934 <tcp_tmr+0x28>)
 801491e:	701a      	strb	r2, [r3, #0]
 8014920:	4b04      	ldr	r3, [pc, #16]	; (8014934 <tcp_tmr+0x28>)
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	f003 0301 	and.w	r3, r3, #1
 8014928:	2b00      	cmp	r3, #0
 801492a:	d001      	beq.n	8014930 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801492c:	f000 fc8e 	bl	801524c <tcp_slowtmr>
  }
}
 8014930:	bf00      	nop
 8014932:	bd80      	pop	{r7, pc}
 8014934:	20006db9 	.word	0x20006db9

08014938 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b084      	sub	sp, #16
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
 8014940:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d105      	bne.n	8014954 <tcp_remove_listener+0x1c>
 8014948:	4b0d      	ldr	r3, [pc, #52]	; (8014980 <tcp_remove_listener+0x48>)
 801494a:	22ff      	movs	r2, #255	; 0xff
 801494c:	490d      	ldr	r1, [pc, #52]	; (8014984 <tcp_remove_listener+0x4c>)
 801494e:	480e      	ldr	r0, [pc, #56]	; (8014988 <tcp_remove_listener+0x50>)
 8014950:	f00a fad4 	bl	801eefc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	60fb      	str	r3, [r7, #12]
 8014958:	e00a      	b.n	8014970 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801495e:	683a      	ldr	r2, [r7, #0]
 8014960:	429a      	cmp	r2, r3
 8014962:	d102      	bne.n	801496a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	2200      	movs	r2, #0
 8014968:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	68db      	ldr	r3, [r3, #12]
 801496e:	60fb      	str	r3, [r7, #12]
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d1f1      	bne.n	801495a <tcp_remove_listener+0x22>
    }
  }
}
 8014976:	bf00      	nop
 8014978:	bf00      	nop
 801497a:	3710      	adds	r7, #16
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}
 8014980:	08024a64 	.word	0x08024a64
 8014984:	08024aec 	.word	0x08024aec
 8014988:	08024aa8 	.word	0x08024aa8

0801498c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d106      	bne.n	80149a8 <tcp_listen_closed+0x1c>
 801499a:	4b14      	ldr	r3, [pc, #80]	; (80149ec <tcp_listen_closed+0x60>)
 801499c:	f240 1211 	movw	r2, #273	; 0x111
 80149a0:	4913      	ldr	r1, [pc, #76]	; (80149f0 <tcp_listen_closed+0x64>)
 80149a2:	4814      	ldr	r0, [pc, #80]	; (80149f4 <tcp_listen_closed+0x68>)
 80149a4:	f00a faaa 	bl	801eefc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	7d1b      	ldrb	r3, [r3, #20]
 80149ac:	2b01      	cmp	r3, #1
 80149ae:	d006      	beq.n	80149be <tcp_listen_closed+0x32>
 80149b0:	4b0e      	ldr	r3, [pc, #56]	; (80149ec <tcp_listen_closed+0x60>)
 80149b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80149b6:	4910      	ldr	r1, [pc, #64]	; (80149f8 <tcp_listen_closed+0x6c>)
 80149b8:	480e      	ldr	r0, [pc, #56]	; (80149f4 <tcp_listen_closed+0x68>)
 80149ba:	f00a fa9f 	bl	801eefc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80149be:	2301      	movs	r3, #1
 80149c0:	60fb      	str	r3, [r7, #12]
 80149c2:	e00b      	b.n	80149dc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80149c4:	4a0d      	ldr	r2, [pc, #52]	; (80149fc <tcp_listen_closed+0x70>)
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	6879      	ldr	r1, [r7, #4]
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7ff ffb1 	bl	8014938 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	3301      	adds	r3, #1
 80149da:	60fb      	str	r3, [r7, #12]
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	2b03      	cmp	r3, #3
 80149e0:	d9f0      	bls.n	80149c4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80149e2:	bf00      	nop
 80149e4:	bf00      	nop
 80149e6:	3710      	adds	r7, #16
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}
 80149ec:	08024a64 	.word	0x08024a64
 80149f0:	08024b14 	.word	0x08024b14
 80149f4:	08024aa8 	.word	0x08024aa8
 80149f8:	08024b20 	.word	0x08024b20
 80149fc:	08026bfc 	.word	0x08026bfc

08014a00 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014a00:	b5b0      	push	{r4, r5, r7, lr}
 8014a02:	b088      	sub	sp, #32
 8014a04:	af04      	add	r7, sp, #16
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	460b      	mov	r3, r1
 8014a0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d106      	bne.n	8014a20 <tcp_close_shutdown+0x20>
 8014a12:	4b63      	ldr	r3, [pc, #396]	; (8014ba0 <tcp_close_shutdown+0x1a0>)
 8014a14:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8014a18:	4962      	ldr	r1, [pc, #392]	; (8014ba4 <tcp_close_shutdown+0x1a4>)
 8014a1a:	4863      	ldr	r0, [pc, #396]	; (8014ba8 <tcp_close_shutdown+0x1a8>)
 8014a1c:	f00a fa6e 	bl	801eefc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014a20:	78fb      	ldrb	r3, [r7, #3]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d066      	beq.n	8014af4 <tcp_close_shutdown+0xf4>
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	7d1b      	ldrb	r3, [r3, #20]
 8014a2a:	2b04      	cmp	r3, #4
 8014a2c:	d003      	beq.n	8014a36 <tcp_close_shutdown+0x36>
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	7d1b      	ldrb	r3, [r3, #20]
 8014a32:	2b07      	cmp	r3, #7
 8014a34:	d15e      	bne.n	8014af4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d104      	bne.n	8014a48 <tcp_close_shutdown+0x48>
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014a42:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014a46:	d055      	beq.n	8014af4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	8b5b      	ldrh	r3, [r3, #26]
 8014a4c:	f003 0310 	and.w	r3, r3, #16
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d106      	bne.n	8014a62 <tcp_close_shutdown+0x62>
 8014a54:	4b52      	ldr	r3, [pc, #328]	; (8014ba0 <tcp_close_shutdown+0x1a0>)
 8014a56:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8014a5a:	4954      	ldr	r1, [pc, #336]	; (8014bac <tcp_close_shutdown+0x1ac>)
 8014a5c:	4852      	ldr	r0, [pc, #328]	; (8014ba8 <tcp_close_shutdown+0x1a8>)
 8014a5e:	f00a fa4d 	bl	801eefc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014a6a:	687d      	ldr	r5, [r7, #4]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	3304      	adds	r3, #4
 8014a70:	687a      	ldr	r2, [r7, #4]
 8014a72:	8ad2      	ldrh	r2, [r2, #22]
 8014a74:	6879      	ldr	r1, [r7, #4]
 8014a76:	8b09      	ldrh	r1, [r1, #24]
 8014a78:	9102      	str	r1, [sp, #8]
 8014a7a:	9201      	str	r2, [sp, #4]
 8014a7c:	9300      	str	r3, [sp, #0]
 8014a7e:	462b      	mov	r3, r5
 8014a80:	4622      	mov	r2, r4
 8014a82:	4601      	mov	r1, r0
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f005 fced 	bl	801a464 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014a8a:	6878      	ldr	r0, [r7, #4]
 8014a8c:	f001 face 	bl	801602c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014a90:	4b47      	ldr	r3, [pc, #284]	; (8014bb0 <tcp_close_shutdown+0x1b0>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	687a      	ldr	r2, [r7, #4]
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d105      	bne.n	8014aa6 <tcp_close_shutdown+0xa6>
 8014a9a:	4b45      	ldr	r3, [pc, #276]	; (8014bb0 <tcp_close_shutdown+0x1b0>)
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	68db      	ldr	r3, [r3, #12]
 8014aa0:	4a43      	ldr	r2, [pc, #268]	; (8014bb0 <tcp_close_shutdown+0x1b0>)
 8014aa2:	6013      	str	r3, [r2, #0]
 8014aa4:	e013      	b.n	8014ace <tcp_close_shutdown+0xce>
 8014aa6:	4b42      	ldr	r3, [pc, #264]	; (8014bb0 <tcp_close_shutdown+0x1b0>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	60fb      	str	r3, [r7, #12]
 8014aac:	e00c      	b.n	8014ac8 <tcp_close_shutdown+0xc8>
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	68db      	ldr	r3, [r3, #12]
 8014ab2:	687a      	ldr	r2, [r7, #4]
 8014ab4:	429a      	cmp	r2, r3
 8014ab6:	d104      	bne.n	8014ac2 <tcp_close_shutdown+0xc2>
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	68da      	ldr	r2, [r3, #12]
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	60da      	str	r2, [r3, #12]
 8014ac0:	e005      	b.n	8014ace <tcp_close_shutdown+0xce>
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	68db      	ldr	r3, [r3, #12]
 8014ac6:	60fb      	str	r3, [r7, #12]
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d1ef      	bne.n	8014aae <tcp_close_shutdown+0xae>
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	60da      	str	r2, [r3, #12]
 8014ad4:	4b37      	ldr	r3, [pc, #220]	; (8014bb4 <tcp_close_shutdown+0x1b4>)
 8014ad6:	2201      	movs	r2, #1
 8014ad8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014ada:	4b37      	ldr	r3, [pc, #220]	; (8014bb8 <tcp_close_shutdown+0x1b8>)
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	687a      	ldr	r2, [r7, #4]
 8014ae0:	429a      	cmp	r2, r3
 8014ae2:	d102      	bne.n	8014aea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014ae4:	f003 ff62 	bl	80189ac <tcp_trigger_input_pcb_close>
 8014ae8:	e002      	b.n	8014af0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014aea:	6878      	ldr	r0, [r7, #4]
 8014aec:	f7ff fed6 	bl	801489c <tcp_free>
      }
      return ERR_OK;
 8014af0:	2300      	movs	r3, #0
 8014af2:	e050      	b.n	8014b96 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	7d1b      	ldrb	r3, [r3, #20]
 8014af8:	2b02      	cmp	r3, #2
 8014afa:	d03b      	beq.n	8014b74 <tcp_close_shutdown+0x174>
 8014afc:	2b02      	cmp	r3, #2
 8014afe:	dc44      	bgt.n	8014b8a <tcp_close_shutdown+0x18a>
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d002      	beq.n	8014b0a <tcp_close_shutdown+0x10a>
 8014b04:	2b01      	cmp	r3, #1
 8014b06:	d02a      	beq.n	8014b5e <tcp_close_shutdown+0x15e>
 8014b08:	e03f      	b.n	8014b8a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	8adb      	ldrh	r3, [r3, #22]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d021      	beq.n	8014b56 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014b12:	4b2a      	ldr	r3, [pc, #168]	; (8014bbc <tcp_close_shutdown+0x1bc>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	687a      	ldr	r2, [r7, #4]
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d105      	bne.n	8014b28 <tcp_close_shutdown+0x128>
 8014b1c:	4b27      	ldr	r3, [pc, #156]	; (8014bbc <tcp_close_shutdown+0x1bc>)
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	68db      	ldr	r3, [r3, #12]
 8014b22:	4a26      	ldr	r2, [pc, #152]	; (8014bbc <tcp_close_shutdown+0x1bc>)
 8014b24:	6013      	str	r3, [r2, #0]
 8014b26:	e013      	b.n	8014b50 <tcp_close_shutdown+0x150>
 8014b28:	4b24      	ldr	r3, [pc, #144]	; (8014bbc <tcp_close_shutdown+0x1bc>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	60bb      	str	r3, [r7, #8]
 8014b2e:	e00c      	b.n	8014b4a <tcp_close_shutdown+0x14a>
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	68db      	ldr	r3, [r3, #12]
 8014b34:	687a      	ldr	r2, [r7, #4]
 8014b36:	429a      	cmp	r2, r3
 8014b38:	d104      	bne.n	8014b44 <tcp_close_shutdown+0x144>
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	68da      	ldr	r2, [r3, #12]
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	60da      	str	r2, [r3, #12]
 8014b42:	e005      	b.n	8014b50 <tcp_close_shutdown+0x150>
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	68db      	ldr	r3, [r3, #12]
 8014b48:	60bb      	str	r3, [r7, #8]
 8014b4a:	68bb      	ldr	r3, [r7, #8]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d1ef      	bne.n	8014b30 <tcp_close_shutdown+0x130>
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	2200      	movs	r2, #0
 8014b54:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f7ff fea0 	bl	801489c <tcp_free>
      break;
 8014b5c:	e01a      	b.n	8014b94 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014b5e:	6878      	ldr	r0, [r7, #4]
 8014b60:	f7ff ff14 	bl	801498c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014b64:	6879      	ldr	r1, [r7, #4]
 8014b66:	4816      	ldr	r0, [pc, #88]	; (8014bc0 <tcp_close_shutdown+0x1c0>)
 8014b68:	f001 fab0 	bl	80160cc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014b6c:	6878      	ldr	r0, [r7, #4]
 8014b6e:	f7ff feb1 	bl	80148d4 <tcp_free_listen>
      break;
 8014b72:	e00f      	b.n	8014b94 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014b74:	6879      	ldr	r1, [r7, #4]
 8014b76:	480e      	ldr	r0, [pc, #56]	; (8014bb0 <tcp_close_shutdown+0x1b0>)
 8014b78:	f001 faa8 	bl	80160cc <tcp_pcb_remove>
 8014b7c:	4b0d      	ldr	r3, [pc, #52]	; (8014bb4 <tcp_close_shutdown+0x1b4>)
 8014b7e:	2201      	movs	r2, #1
 8014b80:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014b82:	6878      	ldr	r0, [r7, #4]
 8014b84:	f7ff fe8a 	bl	801489c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014b88:	e004      	b.n	8014b94 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f000 f81a 	bl	8014bc4 <tcp_close_shutdown_fin>
 8014b90:	4603      	mov	r3, r0
 8014b92:	e000      	b.n	8014b96 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014b94:	2300      	movs	r3, #0
}
 8014b96:	4618      	mov	r0, r3
 8014b98:	3710      	adds	r7, #16
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8014b9e:	bf00      	nop
 8014ba0:	08024a64 	.word	0x08024a64
 8014ba4:	08024b38 	.word	0x08024b38
 8014ba8:	08024aa8 	.word	0x08024aa8
 8014bac:	08024b58 	.word	0x08024b58
 8014bb0:	2000e0fc 	.word	0x2000e0fc
 8014bb4:	2000e0f8 	.word	0x2000e0f8
 8014bb8:	2000e110 	.word	0x2000e110
 8014bbc:	2000e108 	.word	0x2000e108
 8014bc0:	2000e104 	.word	0x2000e104

08014bc4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b084      	sub	sp, #16
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d106      	bne.n	8014be0 <tcp_close_shutdown_fin+0x1c>
 8014bd2:	4b2e      	ldr	r3, [pc, #184]	; (8014c8c <tcp_close_shutdown_fin+0xc8>)
 8014bd4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8014bd8:	492d      	ldr	r1, [pc, #180]	; (8014c90 <tcp_close_shutdown_fin+0xcc>)
 8014bda:	482e      	ldr	r0, [pc, #184]	; (8014c94 <tcp_close_shutdown_fin+0xd0>)
 8014bdc:	f00a f98e 	bl	801eefc <iprintf>

  switch (pcb->state) {
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	7d1b      	ldrb	r3, [r3, #20]
 8014be4:	2b07      	cmp	r3, #7
 8014be6:	d020      	beq.n	8014c2a <tcp_close_shutdown_fin+0x66>
 8014be8:	2b07      	cmp	r3, #7
 8014bea:	dc2b      	bgt.n	8014c44 <tcp_close_shutdown_fin+0x80>
 8014bec:	2b03      	cmp	r3, #3
 8014bee:	d002      	beq.n	8014bf6 <tcp_close_shutdown_fin+0x32>
 8014bf0:	2b04      	cmp	r3, #4
 8014bf2:	d00d      	beq.n	8014c10 <tcp_close_shutdown_fin+0x4c>
 8014bf4:	e026      	b.n	8014c44 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f004 fd42 	bl	8019680 <tcp_send_fin>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d11f      	bne.n	8014c48 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	2205      	movs	r2, #5
 8014c0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014c0e:	e01b      	b.n	8014c48 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f004 fd35 	bl	8019680 <tcp_send_fin>
 8014c16:	4603      	mov	r3, r0
 8014c18:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d114      	bne.n	8014c4c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	2205      	movs	r2, #5
 8014c26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014c28:	e010      	b.n	8014c4c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f004 fd28 	bl	8019680 <tcp_send_fin>
 8014c30:	4603      	mov	r3, r0
 8014c32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d109      	bne.n	8014c50 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	2209      	movs	r2, #9
 8014c40:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014c42:	e005      	b.n	8014c50 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014c44:	2300      	movs	r3, #0
 8014c46:	e01c      	b.n	8014c82 <tcp_close_shutdown_fin+0xbe>
      break;
 8014c48:	bf00      	nop
 8014c4a:	e002      	b.n	8014c52 <tcp_close_shutdown_fin+0x8e>
      break;
 8014c4c:	bf00      	nop
 8014c4e:	e000      	b.n	8014c52 <tcp_close_shutdown_fin+0x8e>
      break;
 8014c50:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d103      	bne.n	8014c62 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014c5a:	6878      	ldr	r0, [r7, #4]
 8014c5c:	f004 fe4e 	bl	80198fc <tcp_output>
 8014c60:	e00d      	b.n	8014c7e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c6a:	d108      	bne.n	8014c7e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	8b5b      	ldrh	r3, [r3, #26]
 8014c70:	f043 0308 	orr.w	r3, r3, #8
 8014c74:	b29a      	uxth	r2, r3
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	e001      	b.n	8014c82 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014c82:	4618      	mov	r0, r3
 8014c84:	3710      	adds	r7, #16
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd80      	pop	{r7, pc}
 8014c8a:	bf00      	nop
 8014c8c:	08024a64 	.word	0x08024a64
 8014c90:	08024b14 	.word	0x08024b14
 8014c94:	08024aa8 	.word	0x08024aa8

08014c98 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b082      	sub	sp, #8
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d109      	bne.n	8014cba <tcp_close+0x22>
 8014ca6:	4b0f      	ldr	r3, [pc, #60]	; (8014ce4 <tcp_close+0x4c>)
 8014ca8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014cac:	490e      	ldr	r1, [pc, #56]	; (8014ce8 <tcp_close+0x50>)
 8014cae:	480f      	ldr	r0, [pc, #60]	; (8014cec <tcp_close+0x54>)
 8014cb0:	f00a f924 	bl	801eefc <iprintf>
 8014cb4:	f06f 030f 	mvn.w	r3, #15
 8014cb8:	e00f      	b.n	8014cda <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	7d1b      	ldrb	r3, [r3, #20]
 8014cbe:	2b01      	cmp	r3, #1
 8014cc0:	d006      	beq.n	8014cd0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	8b5b      	ldrh	r3, [r3, #26]
 8014cc6:	f043 0310 	orr.w	r3, r3, #16
 8014cca:	b29a      	uxth	r2, r3
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014cd0:	2101      	movs	r1, #1
 8014cd2:	6878      	ldr	r0, [r7, #4]
 8014cd4:	f7ff fe94 	bl	8014a00 <tcp_close_shutdown>
 8014cd8:	4603      	mov	r3, r0
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3708      	adds	r7, #8
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}
 8014ce2:	bf00      	nop
 8014ce4:	08024a64 	.word	0x08024a64
 8014ce8:	08024b74 	.word	0x08024b74
 8014cec:	08024aa8 	.word	0x08024aa8

08014cf0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b084      	sub	sp, #16
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	60f8      	str	r0, [r7, #12]
 8014cf8:	60b9      	str	r1, [r7, #8]
 8014cfa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d109      	bne.n	8014d16 <tcp_shutdown+0x26>
 8014d02:	4b26      	ldr	r3, [pc, #152]	; (8014d9c <tcp_shutdown+0xac>)
 8014d04:	f240 2207 	movw	r2, #519	; 0x207
 8014d08:	4925      	ldr	r1, [pc, #148]	; (8014da0 <tcp_shutdown+0xb0>)
 8014d0a:	4826      	ldr	r0, [pc, #152]	; (8014da4 <tcp_shutdown+0xb4>)
 8014d0c:	f00a f8f6 	bl	801eefc <iprintf>
 8014d10:	f06f 030f 	mvn.w	r3, #15
 8014d14:	e03d      	b.n	8014d92 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	7d1b      	ldrb	r3, [r3, #20]
 8014d1a:	2b01      	cmp	r3, #1
 8014d1c:	d102      	bne.n	8014d24 <tcp_shutdown+0x34>
    return ERR_CONN;
 8014d1e:	f06f 030a 	mvn.w	r3, #10
 8014d22:	e036      	b.n	8014d92 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014d24:	68bb      	ldr	r3, [r7, #8]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d01b      	beq.n	8014d62 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	8b5b      	ldrh	r3, [r3, #26]
 8014d2e:	f043 0310 	orr.w	r3, r3, #16
 8014d32:	b29a      	uxth	r2, r3
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d005      	beq.n	8014d4a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8014d3e:	2101      	movs	r1, #1
 8014d40:	68f8      	ldr	r0, [r7, #12]
 8014d42:	f7ff fe5d 	bl	8014a00 <tcp_close_shutdown>
 8014d46:	4603      	mov	r3, r0
 8014d48:	e023      	b.n	8014d92 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d007      	beq.n	8014d62 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7ff fae4 	bl	8014324 <pbuf_free>
      pcb->refused_data = NULL;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d013      	beq.n	8014d90 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	7d1b      	ldrb	r3, [r3, #20]
 8014d6c:	2b04      	cmp	r3, #4
 8014d6e:	dc02      	bgt.n	8014d76 <tcp_shutdown+0x86>
 8014d70:	2b03      	cmp	r3, #3
 8014d72:	da02      	bge.n	8014d7a <tcp_shutdown+0x8a>
 8014d74:	e009      	b.n	8014d8a <tcp_shutdown+0x9a>
 8014d76:	2b07      	cmp	r3, #7
 8014d78:	d107      	bne.n	8014d8a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8014d7a:	68bb      	ldr	r3, [r7, #8]
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	4619      	mov	r1, r3
 8014d80:	68f8      	ldr	r0, [r7, #12]
 8014d82:	f7ff fe3d 	bl	8014a00 <tcp_close_shutdown>
 8014d86:	4603      	mov	r3, r0
 8014d88:	e003      	b.n	8014d92 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8014d8a:	f06f 030a 	mvn.w	r3, #10
 8014d8e:	e000      	b.n	8014d92 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8014d90:	2300      	movs	r3, #0
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3710      	adds	r7, #16
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}
 8014d9a:	bf00      	nop
 8014d9c:	08024a64 	.word	0x08024a64
 8014da0:	08024b8c 	.word	0x08024b8c
 8014da4:	08024aa8 	.word	0x08024aa8

08014da8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b08e      	sub	sp, #56	; 0x38
 8014dac:	af04      	add	r7, sp, #16
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d107      	bne.n	8014dc8 <tcp_abandon+0x20>
 8014db8:	4b52      	ldr	r3, [pc, #328]	; (8014f04 <tcp_abandon+0x15c>)
 8014dba:	f240 223d 	movw	r2, #573	; 0x23d
 8014dbe:	4952      	ldr	r1, [pc, #328]	; (8014f08 <tcp_abandon+0x160>)
 8014dc0:	4852      	ldr	r0, [pc, #328]	; (8014f0c <tcp_abandon+0x164>)
 8014dc2:	f00a f89b 	bl	801eefc <iprintf>
 8014dc6:	e099      	b.n	8014efc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	7d1b      	ldrb	r3, [r3, #20]
 8014dcc:	2b01      	cmp	r3, #1
 8014dce:	d106      	bne.n	8014dde <tcp_abandon+0x36>
 8014dd0:	4b4c      	ldr	r3, [pc, #304]	; (8014f04 <tcp_abandon+0x15c>)
 8014dd2:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014dd6:	494e      	ldr	r1, [pc, #312]	; (8014f10 <tcp_abandon+0x168>)
 8014dd8:	484c      	ldr	r0, [pc, #304]	; (8014f0c <tcp_abandon+0x164>)
 8014dda:	f00a f88f 	bl	801eefc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	7d1b      	ldrb	r3, [r3, #20]
 8014de2:	2b0a      	cmp	r3, #10
 8014de4:	d107      	bne.n	8014df6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014de6:	6879      	ldr	r1, [r7, #4]
 8014de8:	484a      	ldr	r0, [pc, #296]	; (8014f14 <tcp_abandon+0x16c>)
 8014dea:	f001 f96f 	bl	80160cc <tcp_pcb_remove>
    tcp_free(pcb);
 8014dee:	6878      	ldr	r0, [r7, #4]
 8014df0:	f7ff fd54 	bl	801489c <tcp_free>
 8014df4:	e082      	b.n	8014efc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014df6:	2300      	movs	r3, #0
 8014df8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e02:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e08:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014e10:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	691b      	ldr	r3, [r3, #16]
 8014e16:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	7d1b      	ldrb	r3, [r3, #20]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d126      	bne.n	8014e6e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	8adb      	ldrh	r3, [r3, #22]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d02e      	beq.n	8014e86 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014e28:	4b3b      	ldr	r3, [pc, #236]	; (8014f18 <tcp_abandon+0x170>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	687a      	ldr	r2, [r7, #4]
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	d105      	bne.n	8014e3e <tcp_abandon+0x96>
 8014e32:	4b39      	ldr	r3, [pc, #228]	; (8014f18 <tcp_abandon+0x170>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	68db      	ldr	r3, [r3, #12]
 8014e38:	4a37      	ldr	r2, [pc, #220]	; (8014f18 <tcp_abandon+0x170>)
 8014e3a:	6013      	str	r3, [r2, #0]
 8014e3c:	e013      	b.n	8014e66 <tcp_abandon+0xbe>
 8014e3e:	4b36      	ldr	r3, [pc, #216]	; (8014f18 <tcp_abandon+0x170>)
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	61fb      	str	r3, [r7, #28]
 8014e44:	e00c      	b.n	8014e60 <tcp_abandon+0xb8>
 8014e46:	69fb      	ldr	r3, [r7, #28]
 8014e48:	68db      	ldr	r3, [r3, #12]
 8014e4a:	687a      	ldr	r2, [r7, #4]
 8014e4c:	429a      	cmp	r2, r3
 8014e4e:	d104      	bne.n	8014e5a <tcp_abandon+0xb2>
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	68da      	ldr	r2, [r3, #12]
 8014e54:	69fb      	ldr	r3, [r7, #28]
 8014e56:	60da      	str	r2, [r3, #12]
 8014e58:	e005      	b.n	8014e66 <tcp_abandon+0xbe>
 8014e5a:	69fb      	ldr	r3, [r7, #28]
 8014e5c:	68db      	ldr	r3, [r3, #12]
 8014e5e:	61fb      	str	r3, [r7, #28]
 8014e60:	69fb      	ldr	r3, [r7, #28]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d1ef      	bne.n	8014e46 <tcp_abandon+0x9e>
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	2200      	movs	r2, #0
 8014e6a:	60da      	str	r2, [r3, #12]
 8014e6c:	e00b      	b.n	8014e86 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014e6e:	683b      	ldr	r3, [r7, #0]
 8014e70:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	8adb      	ldrh	r3, [r3, #22]
 8014e76:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014e78:	6879      	ldr	r1, [r7, #4]
 8014e7a:	4828      	ldr	r0, [pc, #160]	; (8014f1c <tcp_abandon+0x174>)
 8014e7c:	f001 f926 	bl	80160cc <tcp_pcb_remove>
 8014e80:	4b27      	ldr	r3, [pc, #156]	; (8014f20 <tcp_abandon+0x178>)
 8014e82:	2201      	movs	r2, #1
 8014e84:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d004      	beq.n	8014e98 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e92:	4618      	mov	r0, r3
 8014e94:	f000 fdfa 	bl	8015a8c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d004      	beq.n	8014eaa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f000 fdf1 	bl	8015a8c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d004      	beq.n	8014ebc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f000 fde8 	bl	8015a8c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d00e      	beq.n	8014ee0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8014ec2:	6879      	ldr	r1, [r7, #4]
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	3304      	adds	r3, #4
 8014ec8:	687a      	ldr	r2, [r7, #4]
 8014eca:	8b12      	ldrh	r2, [r2, #24]
 8014ecc:	9202      	str	r2, [sp, #8]
 8014ece:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014ed0:	9201      	str	r2, [sp, #4]
 8014ed2:	9300      	str	r3, [sp, #0]
 8014ed4:	460b      	mov	r3, r1
 8014ed6:	697a      	ldr	r2, [r7, #20]
 8014ed8:	69b9      	ldr	r1, [r7, #24]
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	f005 fac2 	bl	801a464 <tcp_rst>
    }
    last_state = pcb->state;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	7d1b      	ldrb	r3, [r3, #20]
 8014ee4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8014ee6:	6878      	ldr	r0, [r7, #4]
 8014ee8:	f7ff fcd8 	bl	801489c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8014eec:	693b      	ldr	r3, [r7, #16]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d004      	beq.n	8014efc <tcp_abandon+0x154>
 8014ef2:	693b      	ldr	r3, [r7, #16]
 8014ef4:	f06f 010c 	mvn.w	r1, #12
 8014ef8:	68f8      	ldr	r0, [r7, #12]
 8014efa:	4798      	blx	r3
  }
}
 8014efc:	3728      	adds	r7, #40	; 0x28
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	08024a64 	.word	0x08024a64
 8014f08:	08024ba8 	.word	0x08024ba8
 8014f0c:	08024aa8 	.word	0x08024aa8
 8014f10:	08024bc4 	.word	0x08024bc4
 8014f14:	2000e10c 	.word	0x2000e10c
 8014f18:	2000e108 	.word	0x2000e108
 8014f1c:	2000e0fc 	.word	0x2000e0fc
 8014f20:	2000e0f8 	.word	0x2000e0f8

08014f24 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b082      	sub	sp, #8
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014f2c:	2101      	movs	r1, #1
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f7ff ff3a 	bl	8014da8 <tcp_abandon>
}
 8014f34:	bf00      	nop
 8014f36:	3708      	adds	r7, #8
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}

08014f3c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b088      	sub	sp, #32
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	60f8      	str	r0, [r7, #12]
 8014f44:	60b9      	str	r1, [r7, #8]
 8014f46:	4613      	mov	r3, r2
 8014f48:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8014f4a:	2304      	movs	r3, #4
 8014f4c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014f4e:	68bb      	ldr	r3, [r7, #8]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d101      	bne.n	8014f58 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8014f54:	4b3e      	ldr	r3, [pc, #248]	; (8015050 <tcp_bind+0x114>)
 8014f56:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d109      	bne.n	8014f72 <tcp_bind+0x36>
 8014f5e:	4b3d      	ldr	r3, [pc, #244]	; (8015054 <tcp_bind+0x118>)
 8014f60:	f240 22a9 	movw	r2, #681	; 0x2a9
 8014f64:	493c      	ldr	r1, [pc, #240]	; (8015058 <tcp_bind+0x11c>)
 8014f66:	483d      	ldr	r0, [pc, #244]	; (801505c <tcp_bind+0x120>)
 8014f68:	f009 ffc8 	bl	801eefc <iprintf>
 8014f6c:	f06f 030f 	mvn.w	r3, #15
 8014f70:	e06a      	b.n	8015048 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	7d1b      	ldrb	r3, [r3, #20]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d009      	beq.n	8014f8e <tcp_bind+0x52>
 8014f7a:	4b36      	ldr	r3, [pc, #216]	; (8015054 <tcp_bind+0x118>)
 8014f7c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014f80:	4937      	ldr	r1, [pc, #220]	; (8015060 <tcp_bind+0x124>)
 8014f82:	4836      	ldr	r0, [pc, #216]	; (801505c <tcp_bind+0x120>)
 8014f84:	f009 ffba 	bl	801eefc <iprintf>
 8014f88:	f06f 0305 	mvn.w	r3, #5
 8014f8c:	e05c      	b.n	8015048 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8014f8e:	88fb      	ldrh	r3, [r7, #6]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d109      	bne.n	8014fa8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8014f94:	f000 f914 	bl	80151c0 <tcp_new_port>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014f9c:	88fb      	ldrh	r3, [r7, #6]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d135      	bne.n	801500e <tcp_bind+0xd2>
      return ERR_BUF;
 8014fa2:	f06f 0301 	mvn.w	r3, #1
 8014fa6:	e04f      	b.n	8015048 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8014fa8:	2300      	movs	r3, #0
 8014faa:	61fb      	str	r3, [r7, #28]
 8014fac:	e02b      	b.n	8015006 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8014fae:	4a2d      	ldr	r2, [pc, #180]	; (8015064 <tcp_bind+0x128>)
 8014fb0:	69fb      	ldr	r3, [r7, #28]
 8014fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	61bb      	str	r3, [r7, #24]
 8014fba:	e01e      	b.n	8014ffa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8014fbc:	69bb      	ldr	r3, [r7, #24]
 8014fbe:	8adb      	ldrh	r3, [r3, #22]
 8014fc0:	88fa      	ldrh	r2, [r7, #6]
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	d116      	bne.n	8014ff4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8014fc6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d010      	beq.n	8014fee <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8014fcc:	69bb      	ldr	r3, [r7, #24]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d00c      	beq.n	8014fee <tcp_bind+0xb2>
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d009      	beq.n	8014fee <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d005      	beq.n	8014fee <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8014fe2:	69bb      	ldr	r3, [r7, #24]
 8014fe4:	681a      	ldr	r2, [r3, #0]
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8014fea:	429a      	cmp	r2, r3
 8014fec:	d102      	bne.n	8014ff4 <tcp_bind+0xb8>
              return ERR_USE;
 8014fee:	f06f 0307 	mvn.w	r3, #7
 8014ff2:	e029      	b.n	8015048 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8014ff4:	69bb      	ldr	r3, [r7, #24]
 8014ff6:	68db      	ldr	r3, [r3, #12]
 8014ff8:	61bb      	str	r3, [r7, #24]
 8014ffa:	69bb      	ldr	r3, [r7, #24]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d1dd      	bne.n	8014fbc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015000:	69fb      	ldr	r3, [r7, #28]
 8015002:	3301      	adds	r3, #1
 8015004:	61fb      	str	r3, [r7, #28]
 8015006:	69fa      	ldr	r2, [r7, #28]
 8015008:	697b      	ldr	r3, [r7, #20]
 801500a:	429a      	cmp	r2, r3
 801500c:	dbcf      	blt.n	8014fae <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d00c      	beq.n	801502e <tcp_bind+0xf2>
 8015014:	68bb      	ldr	r3, [r7, #8]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d008      	beq.n	801502e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801501c:	68bb      	ldr	r3, [r7, #8]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d002      	beq.n	8015028 <tcp_bind+0xec>
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	e000      	b.n	801502a <tcp_bind+0xee>
 8015028:	2300      	movs	r3, #0
 801502a:	68fa      	ldr	r2, [r7, #12]
 801502c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	88fa      	ldrh	r2, [r7, #6]
 8015032:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015034:	4b0c      	ldr	r3, [pc, #48]	; (8015068 <tcp_bind+0x12c>)
 8015036:	681a      	ldr	r2, [r3, #0]
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	60da      	str	r2, [r3, #12]
 801503c:	4a0a      	ldr	r2, [pc, #40]	; (8015068 <tcp_bind+0x12c>)
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	6013      	str	r3, [r2, #0]
 8015042:	f005 fbd1 	bl	801a7e8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015046:	2300      	movs	r3, #0
}
 8015048:	4618      	mov	r0, r3
 801504a:	3720      	adds	r7, #32
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	08026c24 	.word	0x08026c24
 8015054:	08024a64 	.word	0x08024a64
 8015058:	08024bf8 	.word	0x08024bf8
 801505c:	08024aa8 	.word	0x08024aa8
 8015060:	08024c10 	.word	0x08024c10
 8015064:	08026bfc 	.word	0x08026bfc
 8015068:	2000e108 	.word	0x2000e108

0801506c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b084      	sub	sp, #16
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d106      	bne.n	8015088 <tcp_update_rcv_ann_wnd+0x1c>
 801507a:	4b25      	ldr	r3, [pc, #148]	; (8015110 <tcp_update_rcv_ann_wnd+0xa4>)
 801507c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015080:	4924      	ldr	r1, [pc, #144]	; (8015114 <tcp_update_rcv_ann_wnd+0xa8>)
 8015082:	4825      	ldr	r0, [pc, #148]	; (8015118 <tcp_update_rcv_ann_wnd+0xac>)
 8015084:	f009 ff3a 	bl	801eefc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801508c:	687a      	ldr	r2, [r7, #4]
 801508e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8015090:	4413      	add	r3, r2
 8015092:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015098:	687a      	ldr	r2, [r7, #4]
 801509a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801509c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80150a0:	bf28      	it	cs
 80150a2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80150a6:	b292      	uxth	r2, r2
 80150a8:	4413      	add	r3, r2
 80150aa:	68fa      	ldr	r2, [r7, #12]
 80150ac:	1ad3      	subs	r3, r2, r3
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	db08      	blt.n	80150c4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150be:	68fa      	ldr	r2, [r7, #12]
 80150c0:	1ad3      	subs	r3, r2, r3
 80150c2:	e020      	b.n	8015106 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150cc:	1ad3      	subs	r3, r2, r3
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	dd03      	ble.n	80150da <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	2200      	movs	r2, #0
 80150d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80150d8:	e014      	b.n	8015104 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150e2:	1ad3      	subs	r3, r2, r3
 80150e4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80150ec:	d306      	bcc.n	80150fc <tcp_update_rcv_ann_wnd+0x90>
 80150ee:	4b08      	ldr	r3, [pc, #32]	; (8015110 <tcp_update_rcv_ann_wnd+0xa4>)
 80150f0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80150f4:	4909      	ldr	r1, [pc, #36]	; (801511c <tcp_update_rcv_ann_wnd+0xb0>)
 80150f6:	4808      	ldr	r0, [pc, #32]	; (8015118 <tcp_update_rcv_ann_wnd+0xac>)
 80150f8:	f009 ff00 	bl	801eefc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80150fc:	68bb      	ldr	r3, [r7, #8]
 80150fe:	b29a      	uxth	r2, r3
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8015104:	2300      	movs	r3, #0
  }
}
 8015106:	4618      	mov	r0, r3
 8015108:	3710      	adds	r7, #16
 801510a:	46bd      	mov	sp, r7
 801510c:	bd80      	pop	{r7, pc}
 801510e:	bf00      	nop
 8015110:	08024a64 	.word	0x08024a64
 8015114:	08024cc0 	.word	0x08024cc0
 8015118:	08024aa8 	.word	0x08024aa8
 801511c:	08024ce4 	.word	0x08024ce4

08015120 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b084      	sub	sp, #16
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
 8015128:	460b      	mov	r3, r1
 801512a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d107      	bne.n	8015142 <tcp_recved+0x22>
 8015132:	4b1f      	ldr	r3, [pc, #124]	; (80151b0 <tcp_recved+0x90>)
 8015134:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015138:	491e      	ldr	r1, [pc, #120]	; (80151b4 <tcp_recved+0x94>)
 801513a:	481f      	ldr	r0, [pc, #124]	; (80151b8 <tcp_recved+0x98>)
 801513c:	f009 fede 	bl	801eefc <iprintf>
 8015140:	e032      	b.n	80151a8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	7d1b      	ldrb	r3, [r3, #20]
 8015146:	2b01      	cmp	r3, #1
 8015148:	d106      	bne.n	8015158 <tcp_recved+0x38>
 801514a:	4b19      	ldr	r3, [pc, #100]	; (80151b0 <tcp_recved+0x90>)
 801514c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8015150:	491a      	ldr	r1, [pc, #104]	; (80151bc <tcp_recved+0x9c>)
 8015152:	4819      	ldr	r0, [pc, #100]	; (80151b8 <tcp_recved+0x98>)
 8015154:	f009 fed2 	bl	801eefc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801515c:	887b      	ldrh	r3, [r7, #2]
 801515e:	4413      	add	r3, r2
 8015160:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015162:	89fb      	ldrh	r3, [r7, #14]
 8015164:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015168:	d804      	bhi.n	8015174 <tcp_recved+0x54>
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801516e:	89fa      	ldrh	r2, [r7, #14]
 8015170:	429a      	cmp	r2, r3
 8015172:	d204      	bcs.n	801517e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801517a:	851a      	strh	r2, [r3, #40]	; 0x28
 801517c:	e002      	b.n	8015184 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	89fa      	ldrh	r2, [r7, #14]
 8015182:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f7ff ff71 	bl	801506c <tcp_update_rcv_ann_wnd>
 801518a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015192:	d309      	bcc.n	80151a8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	8b5b      	ldrh	r3, [r3, #26]
 8015198:	f043 0302 	orr.w	r3, r3, #2
 801519c:	b29a      	uxth	r2, r3
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80151a2:	6878      	ldr	r0, [r7, #4]
 80151a4:	f004 fbaa 	bl	80198fc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80151a8:	3710      	adds	r7, #16
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	08024a64 	.word	0x08024a64
 80151b4:	08024d00 	.word	0x08024d00
 80151b8:	08024aa8 	.word	0x08024aa8
 80151bc:	08024d18 	.word	0x08024d18

080151c0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80151c0:	b480      	push	{r7}
 80151c2:	b083      	sub	sp, #12
 80151c4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80151c6:	2300      	movs	r3, #0
 80151c8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80151ca:	4b1e      	ldr	r3, [pc, #120]	; (8015244 <tcp_new_port+0x84>)
 80151cc:	881b      	ldrh	r3, [r3, #0]
 80151ce:	3301      	adds	r3, #1
 80151d0:	b29a      	uxth	r2, r3
 80151d2:	4b1c      	ldr	r3, [pc, #112]	; (8015244 <tcp_new_port+0x84>)
 80151d4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80151d6:	4b1b      	ldr	r3, [pc, #108]	; (8015244 <tcp_new_port+0x84>)
 80151d8:	881b      	ldrh	r3, [r3, #0]
 80151da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80151de:	4293      	cmp	r3, r2
 80151e0:	d103      	bne.n	80151ea <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80151e2:	4b18      	ldr	r3, [pc, #96]	; (8015244 <tcp_new_port+0x84>)
 80151e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80151e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80151ea:	2300      	movs	r3, #0
 80151ec:	71fb      	strb	r3, [r7, #7]
 80151ee:	e01e      	b.n	801522e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80151f0:	79fb      	ldrb	r3, [r7, #7]
 80151f2:	4a15      	ldr	r2, [pc, #84]	; (8015248 <tcp_new_port+0x88>)
 80151f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	603b      	str	r3, [r7, #0]
 80151fc:	e011      	b.n	8015222 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80151fe:	683b      	ldr	r3, [r7, #0]
 8015200:	8ada      	ldrh	r2, [r3, #22]
 8015202:	4b10      	ldr	r3, [pc, #64]	; (8015244 <tcp_new_port+0x84>)
 8015204:	881b      	ldrh	r3, [r3, #0]
 8015206:	429a      	cmp	r2, r3
 8015208:	d108      	bne.n	801521c <tcp_new_port+0x5c>
        n++;
 801520a:	88bb      	ldrh	r3, [r7, #4]
 801520c:	3301      	adds	r3, #1
 801520e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015210:	88bb      	ldrh	r3, [r7, #4]
 8015212:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015216:	d3d8      	bcc.n	80151ca <tcp_new_port+0xa>
          return 0;
 8015218:	2300      	movs	r3, #0
 801521a:	e00d      	b.n	8015238 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	68db      	ldr	r3, [r3, #12]
 8015220:	603b      	str	r3, [r7, #0]
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d1ea      	bne.n	80151fe <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015228:	79fb      	ldrb	r3, [r7, #7]
 801522a:	3301      	adds	r3, #1
 801522c:	71fb      	strb	r3, [r7, #7]
 801522e:	79fb      	ldrb	r3, [r7, #7]
 8015230:	2b03      	cmp	r3, #3
 8015232:	d9dd      	bls.n	80151f0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015234:	4b03      	ldr	r3, [pc, #12]	; (8015244 <tcp_new_port+0x84>)
 8015236:	881b      	ldrh	r3, [r3, #0]
}
 8015238:	4618      	mov	r0, r3
 801523a:	370c      	adds	r7, #12
 801523c:	46bd      	mov	sp, r7
 801523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015242:	4770      	bx	lr
 8015244:	20000354 	.word	0x20000354
 8015248:	08026bfc 	.word	0x08026bfc

0801524c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801524c:	b5b0      	push	{r4, r5, r7, lr}
 801524e:	b090      	sub	sp, #64	; 0x40
 8015250:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015252:	2300      	movs	r3, #0
 8015254:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8015258:	4b94      	ldr	r3, [pc, #592]	; (80154ac <tcp_slowtmr+0x260>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	3301      	adds	r3, #1
 801525e:	4a93      	ldr	r2, [pc, #588]	; (80154ac <tcp_slowtmr+0x260>)
 8015260:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015262:	4b93      	ldr	r3, [pc, #588]	; (80154b0 <tcp_slowtmr+0x264>)
 8015264:	781b      	ldrb	r3, [r3, #0]
 8015266:	3301      	adds	r3, #1
 8015268:	b2da      	uxtb	r2, r3
 801526a:	4b91      	ldr	r3, [pc, #580]	; (80154b0 <tcp_slowtmr+0x264>)
 801526c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801526e:	2300      	movs	r3, #0
 8015270:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8015272:	4b90      	ldr	r3, [pc, #576]	; (80154b4 <tcp_slowtmr+0x268>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8015278:	e29f      	b.n	80157ba <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801527c:	7d1b      	ldrb	r3, [r3, #20]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d106      	bne.n	8015290 <tcp_slowtmr+0x44>
 8015282:	4b8d      	ldr	r3, [pc, #564]	; (80154b8 <tcp_slowtmr+0x26c>)
 8015284:	f240 42be 	movw	r2, #1214	; 0x4be
 8015288:	498c      	ldr	r1, [pc, #560]	; (80154bc <tcp_slowtmr+0x270>)
 801528a:	488d      	ldr	r0, [pc, #564]	; (80154c0 <tcp_slowtmr+0x274>)
 801528c:	f009 fe36 	bl	801eefc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015292:	7d1b      	ldrb	r3, [r3, #20]
 8015294:	2b01      	cmp	r3, #1
 8015296:	d106      	bne.n	80152a6 <tcp_slowtmr+0x5a>
 8015298:	4b87      	ldr	r3, [pc, #540]	; (80154b8 <tcp_slowtmr+0x26c>)
 801529a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801529e:	4989      	ldr	r1, [pc, #548]	; (80154c4 <tcp_slowtmr+0x278>)
 80152a0:	4887      	ldr	r0, [pc, #540]	; (80154c0 <tcp_slowtmr+0x274>)
 80152a2:	f009 fe2b 	bl	801eefc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80152a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152a8:	7d1b      	ldrb	r3, [r3, #20]
 80152aa:	2b0a      	cmp	r3, #10
 80152ac:	d106      	bne.n	80152bc <tcp_slowtmr+0x70>
 80152ae:	4b82      	ldr	r3, [pc, #520]	; (80154b8 <tcp_slowtmr+0x26c>)
 80152b0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80152b4:	4984      	ldr	r1, [pc, #528]	; (80154c8 <tcp_slowtmr+0x27c>)
 80152b6:	4882      	ldr	r0, [pc, #520]	; (80154c0 <tcp_slowtmr+0x274>)
 80152b8:	f009 fe20 	bl	801eefc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80152bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152be:	7f9a      	ldrb	r2, [r3, #30]
 80152c0:	4b7b      	ldr	r3, [pc, #492]	; (80154b0 <tcp_slowtmr+0x264>)
 80152c2:	781b      	ldrb	r3, [r3, #0]
 80152c4:	429a      	cmp	r2, r3
 80152c6:	d105      	bne.n	80152d4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80152c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80152cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152ce:	68db      	ldr	r3, [r3, #12]
 80152d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80152d2:	e272      	b.n	80157ba <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80152d4:	4b76      	ldr	r3, [pc, #472]	; (80154b0 <tcp_slowtmr+0x264>)
 80152d6:	781a      	ldrb	r2, [r3, #0]
 80152d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152da:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80152dc:	2300      	movs	r3, #0
 80152de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80152e2:	2300      	movs	r3, #0
 80152e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80152e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152ea:	7d1b      	ldrb	r3, [r3, #20]
 80152ec:	2b02      	cmp	r3, #2
 80152ee:	d10a      	bne.n	8015306 <tcp_slowtmr+0xba>
 80152f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80152f6:	2b05      	cmp	r3, #5
 80152f8:	d905      	bls.n	8015306 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80152fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80152fe:	3301      	adds	r3, #1
 8015300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015304:	e11e      	b.n	8015544 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015308:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801530c:	2b0b      	cmp	r3, #11
 801530e:	d905      	bls.n	801531c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8015310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015314:	3301      	adds	r3, #1
 8015316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801531a:	e113      	b.n	8015544 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801531e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015322:	2b00      	cmp	r3, #0
 8015324:	d075      	beq.n	8015412 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801532a:	2b00      	cmp	r3, #0
 801532c:	d006      	beq.n	801533c <tcp_slowtmr+0xf0>
 801532e:	4b62      	ldr	r3, [pc, #392]	; (80154b8 <tcp_slowtmr+0x26c>)
 8015330:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8015334:	4965      	ldr	r1, [pc, #404]	; (80154cc <tcp_slowtmr+0x280>)
 8015336:	4862      	ldr	r0, [pc, #392]	; (80154c0 <tcp_slowtmr+0x274>)
 8015338:	f009 fde0 	bl	801eefc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801533e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015340:	2b00      	cmp	r3, #0
 8015342:	d106      	bne.n	8015352 <tcp_slowtmr+0x106>
 8015344:	4b5c      	ldr	r3, [pc, #368]	; (80154b8 <tcp_slowtmr+0x26c>)
 8015346:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801534a:	4961      	ldr	r1, [pc, #388]	; (80154d0 <tcp_slowtmr+0x284>)
 801534c:	485c      	ldr	r0, [pc, #368]	; (80154c0 <tcp_slowtmr+0x274>)
 801534e:	f009 fdd5 	bl	801eefc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015354:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015358:	2b0b      	cmp	r3, #11
 801535a:	d905      	bls.n	8015368 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801535c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015360:	3301      	adds	r3, #1
 8015362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015366:	e0ed      	b.n	8015544 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801536a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801536e:	3b01      	subs	r3, #1
 8015370:	4a58      	ldr	r2, [pc, #352]	; (80154d4 <tcp_slowtmr+0x288>)
 8015372:	5cd3      	ldrb	r3, [r2, r3]
 8015374:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015378:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801537c:	7c7a      	ldrb	r2, [r7, #17]
 801537e:	429a      	cmp	r2, r3
 8015380:	d907      	bls.n	8015392 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8015382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015384:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015388:	3301      	adds	r3, #1
 801538a:	b2da      	uxtb	r2, r3
 801538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801538e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8015392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015394:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015398:	7c7a      	ldrb	r2, [r7, #17]
 801539a:	429a      	cmp	r2, r3
 801539c:	f200 80d2 	bhi.w	8015544 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80153a0:	2301      	movs	r3, #1
 80153a2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80153a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d108      	bne.n	80153c0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80153ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80153b0:	f005 f94c 	bl	801a64c <tcp_zero_window_probe>
 80153b4:	4603      	mov	r3, r0
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d014      	beq.n	80153e4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80153ba:	2300      	movs	r3, #0
 80153bc:	623b      	str	r3, [r7, #32]
 80153be:	e011      	b.n	80153e4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80153c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80153c6:	4619      	mov	r1, r3
 80153c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80153ca:	f004 f811 	bl	80193f0 <tcp_split_unsent_seg>
 80153ce:	4603      	mov	r3, r0
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d107      	bne.n	80153e4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80153d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80153d6:	f004 fa91 	bl	80198fc <tcp_output>
 80153da:	4603      	mov	r3, r0
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d101      	bne.n	80153e4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80153e0:	2300      	movs	r3, #0
 80153e2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80153e4:	6a3b      	ldr	r3, [r7, #32]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	f000 80ac 	beq.w	8015544 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80153ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ee:	2200      	movs	r2, #0
 80153f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80153f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80153fa:	2b06      	cmp	r3, #6
 80153fc:	f200 80a2 	bhi.w	8015544 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8015400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015402:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015406:	3301      	adds	r3, #1
 8015408:	b2da      	uxtb	r2, r3
 801540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801540c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8015410:	e098      	b.n	8015544 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015414:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015418:	2b00      	cmp	r3, #0
 801541a:	db0f      	blt.n	801543c <tcp_slowtmr+0x1f0>
 801541c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801541e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015422:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015426:	4293      	cmp	r3, r2
 8015428:	d008      	beq.n	801543c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801542c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015430:	b29b      	uxth	r3, r3
 8015432:	3301      	adds	r3, #1
 8015434:	b29b      	uxth	r3, r3
 8015436:	b21a      	sxth	r2, r3
 8015438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801543a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801543e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8015442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015444:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015448:	429a      	cmp	r2, r3
 801544a:	db7b      	blt.n	8015544 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801544c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801544e:	f004 fd47 	bl	8019ee0 <tcp_rexmit_rto_prepare>
 8015452:	4603      	mov	r3, r0
 8015454:	2b00      	cmp	r3, #0
 8015456:	d007      	beq.n	8015468 <tcp_slowtmr+0x21c>
 8015458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801545a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801545c:	2b00      	cmp	r3, #0
 801545e:	d171      	bne.n	8015544 <tcp_slowtmr+0x2f8>
 8015460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015464:	2b00      	cmp	r3, #0
 8015466:	d06d      	beq.n	8015544 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8015468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801546a:	7d1b      	ldrb	r3, [r3, #20]
 801546c:	2b02      	cmp	r3, #2
 801546e:	d03a      	beq.n	80154e6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015472:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015476:	2b0c      	cmp	r3, #12
 8015478:	bf28      	it	cs
 801547a:	230c      	movcs	r3, #12
 801547c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801547e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015480:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015484:	10db      	asrs	r3, r3, #3
 8015486:	b21b      	sxth	r3, r3
 8015488:	461a      	mov	r2, r3
 801548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801548c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015490:	4413      	add	r3, r2
 8015492:	7efa      	ldrb	r2, [r7, #27]
 8015494:	4910      	ldr	r1, [pc, #64]	; (80154d8 <tcp_slowtmr+0x28c>)
 8015496:	5c8a      	ldrb	r2, [r1, r2]
 8015498:	4093      	lsls	r3, r2
 801549a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801549c:	697b      	ldr	r3, [r7, #20]
 801549e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80154a2:	4293      	cmp	r3, r2
 80154a4:	dc1a      	bgt.n	80154dc <tcp_slowtmr+0x290>
 80154a6:	697b      	ldr	r3, [r7, #20]
 80154a8:	b21a      	sxth	r2, r3
 80154aa:	e019      	b.n	80154e0 <tcp_slowtmr+0x294>
 80154ac:	2000e100 	.word	0x2000e100
 80154b0:	20006dba 	.word	0x20006dba
 80154b4:	2000e0fc 	.word	0x2000e0fc
 80154b8:	08024a64 	.word	0x08024a64
 80154bc:	08024da8 	.word	0x08024da8
 80154c0:	08024aa8 	.word	0x08024aa8
 80154c4:	08024dd4 	.word	0x08024dd4
 80154c8:	08024e00 	.word	0x08024e00
 80154cc:	08024e30 	.word	0x08024e30
 80154d0:	08024e64 	.word	0x08024e64
 80154d4:	08026bf4 	.word	0x08026bf4
 80154d8:	08026be4 	.word	0x08026be4
 80154dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80154e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80154e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154e8:	2200      	movs	r2, #0
 80154ea:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80154ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80154f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80154f8:	4293      	cmp	r3, r2
 80154fa:	bf28      	it	cs
 80154fc:	4613      	movcs	r3, r2
 80154fe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015500:	8a7b      	ldrh	r3, [r7, #18]
 8015502:	085b      	lsrs	r3, r3, #1
 8015504:	b29a      	uxth	r2, r3
 8015506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015508:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801550e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015514:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015516:	005b      	lsls	r3, r3, #1
 8015518:	b29b      	uxth	r3, r3
 801551a:	429a      	cmp	r2, r3
 801551c:	d206      	bcs.n	801552c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015520:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015522:	005b      	lsls	r3, r3, #1
 8015524:	b29a      	uxth	r2, r3
 8015526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015528:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801552e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8015530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015532:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8015536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015538:	2200      	movs	r2, #0
 801553a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801553e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015540:	f004 fd3e 	bl	8019fc0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8015544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015546:	7d1b      	ldrb	r3, [r3, #20]
 8015548:	2b06      	cmp	r3, #6
 801554a:	d111      	bne.n	8015570 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801554c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801554e:	8b5b      	ldrh	r3, [r3, #26]
 8015550:	f003 0310 	and.w	r3, r3, #16
 8015554:	2b00      	cmp	r3, #0
 8015556:	d00b      	beq.n	8015570 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015558:	4b9d      	ldr	r3, [pc, #628]	; (80157d0 <tcp_slowtmr+0x584>)
 801555a:	681a      	ldr	r2, [r3, #0]
 801555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801555e:	6a1b      	ldr	r3, [r3, #32]
 8015560:	1ad3      	subs	r3, r2, r3
 8015562:	2b28      	cmp	r3, #40	; 0x28
 8015564:	d904      	bls.n	8015570 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8015566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801556a:	3301      	adds	r3, #1
 801556c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015572:	7a5b      	ldrb	r3, [r3, #9]
 8015574:	f003 0308 	and.w	r3, r3, #8
 8015578:	2b00      	cmp	r3, #0
 801557a:	d04c      	beq.n	8015616 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801557e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015580:	2b04      	cmp	r3, #4
 8015582:	d003      	beq.n	801558c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8015584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015586:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015588:	2b07      	cmp	r3, #7
 801558a:	d144      	bne.n	8015616 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801558c:	4b90      	ldr	r3, [pc, #576]	; (80157d0 <tcp_slowtmr+0x584>)
 801558e:	681a      	ldr	r2, [r3, #0]
 8015590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015592:	6a1b      	ldr	r3, [r3, #32]
 8015594:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801559c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80155a0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80155a4:	498b      	ldr	r1, [pc, #556]	; (80157d4 <tcp_slowtmr+0x588>)
 80155a6:	fba1 1303 	umull	r1, r3, r1, r3
 80155aa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80155ac:	429a      	cmp	r2, r3
 80155ae:	d90a      	bls.n	80155c6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80155b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155b4:	3301      	adds	r3, #1
 80155b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80155ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80155be:	3301      	adds	r3, #1
 80155c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80155c4:	e027      	b.n	8015616 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80155c6:	4b82      	ldr	r3, [pc, #520]	; (80157d0 <tcp_slowtmr+0x584>)
 80155c8:	681a      	ldr	r2, [r3, #0]
 80155ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155cc:	6a1b      	ldr	r3, [r3, #32]
 80155ce:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80155d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155d2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80155d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80155dc:	4618      	mov	r0, r3
 80155de:	4b7e      	ldr	r3, [pc, #504]	; (80157d8 <tcp_slowtmr+0x58c>)
 80155e0:	fb03 f300 	mul.w	r3, r3, r0
 80155e4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80155e6:	497b      	ldr	r1, [pc, #492]	; (80157d4 <tcp_slowtmr+0x588>)
 80155e8:	fba1 1303 	umull	r1, r3, r1, r3
 80155ec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d911      	bls.n	8015616 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80155f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80155f4:	f004 ffea 	bl	801a5cc <tcp_keepalive>
 80155f8:	4603      	mov	r3, r0
 80155fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80155fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015602:	2b00      	cmp	r3, #0
 8015604:	d107      	bne.n	8015616 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8015606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015608:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801560c:	3301      	adds	r3, #1
 801560e:	b2da      	uxtb	r2, r3
 8015610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015612:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8015616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801561a:	2b00      	cmp	r3, #0
 801561c:	d011      	beq.n	8015642 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801561e:	4b6c      	ldr	r3, [pc, #432]	; (80157d0 <tcp_slowtmr+0x584>)
 8015620:	681a      	ldr	r2, [r3, #0]
 8015622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015624:	6a1b      	ldr	r3, [r3, #32]
 8015626:	1ad2      	subs	r2, r2, r3
 8015628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801562a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801562e:	4619      	mov	r1, r3
 8015630:	460b      	mov	r3, r1
 8015632:	005b      	lsls	r3, r3, #1
 8015634:	440b      	add	r3, r1
 8015636:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8015638:	429a      	cmp	r2, r3
 801563a:	d302      	bcc.n	8015642 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801563c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801563e:	f000 fea9 	bl	8016394 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8015642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015644:	7d1b      	ldrb	r3, [r3, #20]
 8015646:	2b03      	cmp	r3, #3
 8015648:	d10b      	bne.n	8015662 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801564a:	4b61      	ldr	r3, [pc, #388]	; (80157d0 <tcp_slowtmr+0x584>)
 801564c:	681a      	ldr	r2, [r3, #0]
 801564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015650:	6a1b      	ldr	r3, [r3, #32]
 8015652:	1ad3      	subs	r3, r2, r3
 8015654:	2b28      	cmp	r3, #40	; 0x28
 8015656:	d904      	bls.n	8015662 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8015658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801565c:	3301      	adds	r3, #1
 801565e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8015662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015664:	7d1b      	ldrb	r3, [r3, #20]
 8015666:	2b09      	cmp	r3, #9
 8015668:	d10b      	bne.n	8015682 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801566a:	4b59      	ldr	r3, [pc, #356]	; (80157d0 <tcp_slowtmr+0x584>)
 801566c:	681a      	ldr	r2, [r3, #0]
 801566e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015670:	6a1b      	ldr	r3, [r3, #32]
 8015672:	1ad3      	subs	r3, r2, r3
 8015674:	2bf0      	cmp	r3, #240	; 0xf0
 8015676:	d904      	bls.n	8015682 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8015678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801567c:	3301      	adds	r3, #1
 801567e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015686:	2b00      	cmp	r3, #0
 8015688:	d060      	beq.n	801574c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801568c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015690:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8015692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015694:	f000 fcca 	bl	801602c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8015698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801569a:	2b00      	cmp	r3, #0
 801569c:	d010      	beq.n	80156c0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801569e:	4b4f      	ldr	r3, [pc, #316]	; (80157dc <tcp_slowtmr+0x590>)
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156a4:	429a      	cmp	r2, r3
 80156a6:	d106      	bne.n	80156b6 <tcp_slowtmr+0x46a>
 80156a8:	4b4d      	ldr	r3, [pc, #308]	; (80157e0 <tcp_slowtmr+0x594>)
 80156aa:	f240 526d 	movw	r2, #1389	; 0x56d
 80156ae:	494d      	ldr	r1, [pc, #308]	; (80157e4 <tcp_slowtmr+0x598>)
 80156b0:	484d      	ldr	r0, [pc, #308]	; (80157e8 <tcp_slowtmr+0x59c>)
 80156b2:	f009 fc23 	bl	801eefc <iprintf>
        prev->next = pcb->next;
 80156b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b8:	68da      	ldr	r2, [r3, #12]
 80156ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156bc:	60da      	str	r2, [r3, #12]
 80156be:	e00f      	b.n	80156e0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80156c0:	4b46      	ldr	r3, [pc, #280]	; (80157dc <tcp_slowtmr+0x590>)
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156c6:	429a      	cmp	r2, r3
 80156c8:	d006      	beq.n	80156d8 <tcp_slowtmr+0x48c>
 80156ca:	4b45      	ldr	r3, [pc, #276]	; (80157e0 <tcp_slowtmr+0x594>)
 80156cc:	f240 5271 	movw	r2, #1393	; 0x571
 80156d0:	4946      	ldr	r1, [pc, #280]	; (80157ec <tcp_slowtmr+0x5a0>)
 80156d2:	4845      	ldr	r0, [pc, #276]	; (80157e8 <tcp_slowtmr+0x59c>)
 80156d4:	f009 fc12 	bl	801eefc <iprintf>
        tcp_active_pcbs = pcb->next;
 80156d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156da:	68db      	ldr	r3, [r3, #12]
 80156dc:	4a3f      	ldr	r2, [pc, #252]	; (80157dc <tcp_slowtmr+0x590>)
 80156de:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80156e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d013      	beq.n	8015710 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80156e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80156ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80156f0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80156f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f4:	3304      	adds	r3, #4
 80156f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156f8:	8ad2      	ldrh	r2, [r2, #22]
 80156fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80156fc:	8b09      	ldrh	r1, [r1, #24]
 80156fe:	9102      	str	r1, [sp, #8]
 8015700:	9201      	str	r2, [sp, #4]
 8015702:	9300      	str	r3, [sp, #0]
 8015704:	462b      	mov	r3, r5
 8015706:	4622      	mov	r2, r4
 8015708:	4601      	mov	r1, r0
 801570a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801570c:	f004 feaa 	bl	801a464 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8015710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015712:	691b      	ldr	r3, [r3, #16]
 8015714:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8015716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015718:	7d1b      	ldrb	r3, [r3, #20]
 801571a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801571c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801571e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015722:	68db      	ldr	r3, [r3, #12]
 8015724:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015726:	6838      	ldr	r0, [r7, #0]
 8015728:	f7ff f8b8 	bl	801489c <tcp_free>

      tcp_active_pcbs_changed = 0;
 801572c:	4b30      	ldr	r3, [pc, #192]	; (80157f0 <tcp_slowtmr+0x5a4>)
 801572e:	2200      	movs	r2, #0
 8015730:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d004      	beq.n	8015742 <tcp_slowtmr+0x4f6>
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	f06f 010c 	mvn.w	r1, #12
 801573e:	68b8      	ldr	r0, [r7, #8]
 8015740:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015742:	4b2b      	ldr	r3, [pc, #172]	; (80157f0 <tcp_slowtmr+0x5a4>)
 8015744:	781b      	ldrb	r3, [r3, #0]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d037      	beq.n	80157ba <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801574a:	e590      	b.n	801526e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801574e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015752:	68db      	ldr	r3, [r3, #12]
 8015754:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8015756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015758:	7f1b      	ldrb	r3, [r3, #28]
 801575a:	3301      	adds	r3, #1
 801575c:	b2da      	uxtb	r2, r3
 801575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015760:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015764:	7f1a      	ldrb	r2, [r3, #28]
 8015766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015768:	7f5b      	ldrb	r3, [r3, #29]
 801576a:	429a      	cmp	r2, r3
 801576c:	d325      	bcc.n	80157ba <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015770:	2200      	movs	r2, #0
 8015772:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8015774:	4b1e      	ldr	r3, [pc, #120]	; (80157f0 <tcp_slowtmr+0x5a4>)
 8015776:	2200      	movs	r2, #0
 8015778:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015780:	2b00      	cmp	r3, #0
 8015782:	d00b      	beq.n	801579c <tcp_slowtmr+0x550>
 8015784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801578a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801578c:	6912      	ldr	r2, [r2, #16]
 801578e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015790:	4610      	mov	r0, r2
 8015792:	4798      	blx	r3
 8015794:	4603      	mov	r3, r0
 8015796:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801579a:	e002      	b.n	80157a2 <tcp_slowtmr+0x556>
 801579c:	2300      	movs	r3, #0
 801579e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80157a2:	4b13      	ldr	r3, [pc, #76]	; (80157f0 <tcp_slowtmr+0x5a4>)
 80157a4:	781b      	ldrb	r3, [r3, #0]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d000      	beq.n	80157ac <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80157aa:	e560      	b.n	801526e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80157ac:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d102      	bne.n	80157ba <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80157b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157b6:	f004 f8a1 	bl	80198fc <tcp_output>
  while (pcb != NULL) {
 80157ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157bc:	2b00      	cmp	r3, #0
 80157be:	f47f ad5c 	bne.w	801527a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80157c2:	2300      	movs	r3, #0
 80157c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80157c6:	4b0b      	ldr	r3, [pc, #44]	; (80157f4 <tcp_slowtmr+0x5a8>)
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80157cc:	e067      	b.n	801589e <tcp_slowtmr+0x652>
 80157ce:	bf00      	nop
 80157d0:	2000e100 	.word	0x2000e100
 80157d4:	10624dd3 	.word	0x10624dd3
 80157d8:	000124f8 	.word	0x000124f8
 80157dc:	2000e0fc 	.word	0x2000e0fc
 80157e0:	08024a64 	.word	0x08024a64
 80157e4:	08024e9c 	.word	0x08024e9c
 80157e8:	08024aa8 	.word	0x08024aa8
 80157ec:	08024ec8 	.word	0x08024ec8
 80157f0:	2000e0f8 	.word	0x2000e0f8
 80157f4:	2000e10c 	.word	0x2000e10c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80157f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157fa:	7d1b      	ldrb	r3, [r3, #20]
 80157fc:	2b0a      	cmp	r3, #10
 80157fe:	d006      	beq.n	801580e <tcp_slowtmr+0x5c2>
 8015800:	4b2b      	ldr	r3, [pc, #172]	; (80158b0 <tcp_slowtmr+0x664>)
 8015802:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8015806:	492b      	ldr	r1, [pc, #172]	; (80158b4 <tcp_slowtmr+0x668>)
 8015808:	482b      	ldr	r0, [pc, #172]	; (80158b8 <tcp_slowtmr+0x66c>)
 801580a:	f009 fb77 	bl	801eefc <iprintf>
    pcb_remove = 0;
 801580e:	2300      	movs	r3, #0
 8015810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015814:	4b29      	ldr	r3, [pc, #164]	; (80158bc <tcp_slowtmr+0x670>)
 8015816:	681a      	ldr	r2, [r3, #0]
 8015818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801581a:	6a1b      	ldr	r3, [r3, #32]
 801581c:	1ad3      	subs	r3, r2, r3
 801581e:	2bf0      	cmp	r3, #240	; 0xf0
 8015820:	d904      	bls.n	801582c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8015822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015826:	3301      	adds	r3, #1
 8015828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801582c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015830:	2b00      	cmp	r3, #0
 8015832:	d02f      	beq.n	8015894 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015836:	f000 fbf9 	bl	801602c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801583c:	2b00      	cmp	r3, #0
 801583e:	d010      	beq.n	8015862 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015840:	4b1f      	ldr	r3, [pc, #124]	; (80158c0 <tcp_slowtmr+0x674>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015846:	429a      	cmp	r2, r3
 8015848:	d106      	bne.n	8015858 <tcp_slowtmr+0x60c>
 801584a:	4b19      	ldr	r3, [pc, #100]	; (80158b0 <tcp_slowtmr+0x664>)
 801584c:	f240 52af 	movw	r2, #1455	; 0x5af
 8015850:	491c      	ldr	r1, [pc, #112]	; (80158c4 <tcp_slowtmr+0x678>)
 8015852:	4819      	ldr	r0, [pc, #100]	; (80158b8 <tcp_slowtmr+0x66c>)
 8015854:	f009 fb52 	bl	801eefc <iprintf>
        prev->next = pcb->next;
 8015858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801585a:	68da      	ldr	r2, [r3, #12]
 801585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801585e:	60da      	str	r2, [r3, #12]
 8015860:	e00f      	b.n	8015882 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015862:	4b17      	ldr	r3, [pc, #92]	; (80158c0 <tcp_slowtmr+0x674>)
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015868:	429a      	cmp	r2, r3
 801586a:	d006      	beq.n	801587a <tcp_slowtmr+0x62e>
 801586c:	4b10      	ldr	r3, [pc, #64]	; (80158b0 <tcp_slowtmr+0x664>)
 801586e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8015872:	4915      	ldr	r1, [pc, #84]	; (80158c8 <tcp_slowtmr+0x67c>)
 8015874:	4810      	ldr	r0, [pc, #64]	; (80158b8 <tcp_slowtmr+0x66c>)
 8015876:	f009 fb41 	bl	801eefc <iprintf>
        tcp_tw_pcbs = pcb->next;
 801587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801587c:	68db      	ldr	r3, [r3, #12]
 801587e:	4a10      	ldr	r2, [pc, #64]	; (80158c0 <tcp_slowtmr+0x674>)
 8015880:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015884:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015888:	68db      	ldr	r3, [r3, #12]
 801588a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801588c:	69f8      	ldr	r0, [r7, #28]
 801588e:	f7ff f805 	bl	801489c <tcp_free>
 8015892:	e004      	b.n	801589e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8015894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015896:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801589a:	68db      	ldr	r3, [r3, #12]
 801589c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d1a9      	bne.n	80157f8 <tcp_slowtmr+0x5ac>
    }
  }
}
 80158a4:	bf00      	nop
 80158a6:	bf00      	nop
 80158a8:	3730      	adds	r7, #48	; 0x30
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bdb0      	pop	{r4, r5, r7, pc}
 80158ae:	bf00      	nop
 80158b0:	08024a64 	.word	0x08024a64
 80158b4:	08024ef4 	.word	0x08024ef4
 80158b8:	08024aa8 	.word	0x08024aa8
 80158bc:	2000e100 	.word	0x2000e100
 80158c0:	2000e10c 	.word	0x2000e10c
 80158c4:	08024f24 	.word	0x08024f24
 80158c8:	08024f4c 	.word	0x08024f4c

080158cc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b082      	sub	sp, #8
 80158d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80158d2:	4b2d      	ldr	r3, [pc, #180]	; (8015988 <tcp_fasttmr+0xbc>)
 80158d4:	781b      	ldrb	r3, [r3, #0]
 80158d6:	3301      	adds	r3, #1
 80158d8:	b2da      	uxtb	r2, r3
 80158da:	4b2b      	ldr	r3, [pc, #172]	; (8015988 <tcp_fasttmr+0xbc>)
 80158dc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80158de:	4b2b      	ldr	r3, [pc, #172]	; (801598c <tcp_fasttmr+0xc0>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80158e4:	e048      	b.n	8015978 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	7f9a      	ldrb	r2, [r3, #30]
 80158ea:	4b27      	ldr	r3, [pc, #156]	; (8015988 <tcp_fasttmr+0xbc>)
 80158ec:	781b      	ldrb	r3, [r3, #0]
 80158ee:	429a      	cmp	r2, r3
 80158f0:	d03f      	beq.n	8015972 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80158f2:	4b25      	ldr	r3, [pc, #148]	; (8015988 <tcp_fasttmr+0xbc>)
 80158f4:	781a      	ldrb	r2, [r3, #0]
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	8b5b      	ldrh	r3, [r3, #26]
 80158fe:	f003 0301 	and.w	r3, r3, #1
 8015902:	2b00      	cmp	r3, #0
 8015904:	d010      	beq.n	8015928 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	8b5b      	ldrh	r3, [r3, #26]
 801590a:	f043 0302 	orr.w	r3, r3, #2
 801590e:	b29a      	uxth	r2, r3
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	f003 fff1 	bl	80198fc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	8b5b      	ldrh	r3, [r3, #26]
 801591e:	f023 0303 	bic.w	r3, r3, #3
 8015922:	b29a      	uxth	r2, r3
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	8b5b      	ldrh	r3, [r3, #26]
 801592c:	f003 0308 	and.w	r3, r3, #8
 8015930:	2b00      	cmp	r3, #0
 8015932:	d009      	beq.n	8015948 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	8b5b      	ldrh	r3, [r3, #26]
 8015938:	f023 0308 	bic.w	r3, r3, #8
 801593c:	b29a      	uxth	r2, r3
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f7ff f93e 	bl	8014bc4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	68db      	ldr	r3, [r3, #12]
 801594c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015952:	2b00      	cmp	r3, #0
 8015954:	d00a      	beq.n	801596c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015956:	4b0e      	ldr	r3, [pc, #56]	; (8015990 <tcp_fasttmr+0xc4>)
 8015958:	2200      	movs	r2, #0
 801595a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801595c:	6878      	ldr	r0, [r7, #4]
 801595e:	f000 f819 	bl	8015994 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015962:	4b0b      	ldr	r3, [pc, #44]	; (8015990 <tcp_fasttmr+0xc4>)
 8015964:	781b      	ldrb	r3, [r3, #0]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d000      	beq.n	801596c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801596a:	e7b8      	b.n	80158de <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801596c:	683b      	ldr	r3, [r7, #0]
 801596e:	607b      	str	r3, [r7, #4]
 8015970:	e002      	b.n	8015978 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	68db      	ldr	r3, [r3, #12]
 8015976:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d1b3      	bne.n	80158e6 <tcp_fasttmr+0x1a>
    }
  }
}
 801597e:	bf00      	nop
 8015980:	bf00      	nop
 8015982:	3708      	adds	r7, #8
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}
 8015988:	20006dba 	.word	0x20006dba
 801598c:	2000e0fc 	.word	0x2000e0fc
 8015990:	2000e0f8 	.word	0x2000e0f8

08015994 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015994:	b590      	push	{r4, r7, lr}
 8015996:	b085      	sub	sp, #20
 8015998:	af00      	add	r7, sp, #0
 801599a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d109      	bne.n	80159b6 <tcp_process_refused_data+0x22>
 80159a2:	4b37      	ldr	r3, [pc, #220]	; (8015a80 <tcp_process_refused_data+0xec>)
 80159a4:	f240 6209 	movw	r2, #1545	; 0x609
 80159a8:	4936      	ldr	r1, [pc, #216]	; (8015a84 <tcp_process_refused_data+0xf0>)
 80159aa:	4837      	ldr	r0, [pc, #220]	; (8015a88 <tcp_process_refused_data+0xf4>)
 80159ac:	f009 faa6 	bl	801eefc <iprintf>
 80159b0:	f06f 030f 	mvn.w	r3, #15
 80159b4:	e060      	b.n	8015a78 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80159ba:	7b5b      	ldrb	r3, [r3, #13]
 80159bc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80159c2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	2200      	movs	r2, #0
 80159c8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d00b      	beq.n	80159ec <tcp_process_refused_data+0x58>
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	6918      	ldr	r0, [r3, #16]
 80159de:	2300      	movs	r3, #0
 80159e0:	68ba      	ldr	r2, [r7, #8]
 80159e2:	6879      	ldr	r1, [r7, #4]
 80159e4:	47a0      	blx	r4
 80159e6:	4603      	mov	r3, r0
 80159e8:	73fb      	strb	r3, [r7, #15]
 80159ea:	e007      	b.n	80159fc <tcp_process_refused_data+0x68>
 80159ec:	2300      	movs	r3, #0
 80159ee:	68ba      	ldr	r2, [r7, #8]
 80159f0:	6879      	ldr	r1, [r7, #4]
 80159f2:	2000      	movs	r0, #0
 80159f4:	f000 f8a4 	bl	8015b40 <tcp_recv_null>
 80159f8:	4603      	mov	r3, r0
 80159fa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80159fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d12a      	bne.n	8015a5a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015a04:	7bbb      	ldrb	r3, [r7, #14]
 8015a06:	f003 0320 	and.w	r3, r3, #32
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d033      	beq.n	8015a76 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a12:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015a16:	d005      	beq.n	8015a24 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a1c:	3301      	adds	r3, #1
 8015a1e:	b29a      	uxth	r2, r3
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d00b      	beq.n	8015a46 <tcp_process_refused_data+0xb2>
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	6918      	ldr	r0, [r3, #16]
 8015a38:	2300      	movs	r3, #0
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	6879      	ldr	r1, [r7, #4]
 8015a3e:	47a0      	blx	r4
 8015a40:	4603      	mov	r3, r0
 8015a42:	73fb      	strb	r3, [r7, #15]
 8015a44:	e001      	b.n	8015a4a <tcp_process_refused_data+0xb6>
 8015a46:	2300      	movs	r3, #0
 8015a48:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a4e:	f113 0f0d 	cmn.w	r3, #13
 8015a52:	d110      	bne.n	8015a76 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015a54:	f06f 030c 	mvn.w	r3, #12
 8015a58:	e00e      	b.n	8015a78 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a5e:	f113 0f0d 	cmn.w	r3, #13
 8015a62:	d102      	bne.n	8015a6a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015a64:	f06f 030c 	mvn.w	r3, #12
 8015a68:	e006      	b.n	8015a78 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	68ba      	ldr	r2, [r7, #8]
 8015a6e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8015a70:	f06f 0304 	mvn.w	r3, #4
 8015a74:	e000      	b.n	8015a78 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015a76:	2300      	movs	r3, #0
}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	3714      	adds	r7, #20
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd90      	pop	{r4, r7, pc}
 8015a80:	08024a64 	.word	0x08024a64
 8015a84:	08024f74 	.word	0x08024f74
 8015a88:	08024aa8 	.word	0x08024aa8

08015a8c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b084      	sub	sp, #16
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015a94:	e007      	b.n	8015aa6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f000 f80a 	bl	8015ab6 <tcp_seg_free>
    seg = next;
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d1f4      	bne.n	8015a96 <tcp_segs_free+0xa>
  }
}
 8015aac:	bf00      	nop
 8015aae:	bf00      	nop
 8015ab0:	3710      	adds	r7, #16
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}

08015ab6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015ab6:	b580      	push	{r7, lr}
 8015ab8:	b082      	sub	sp, #8
 8015aba:	af00      	add	r7, sp, #0
 8015abc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d00c      	beq.n	8015ade <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	685b      	ldr	r3, [r3, #4]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d004      	beq.n	8015ad6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	685b      	ldr	r3, [r3, #4]
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	f7fe fc27 	bl	8014324 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015ad6:	6879      	ldr	r1, [r7, #4]
 8015ad8:	2003      	movs	r0, #3
 8015ada:	f7fd fde3 	bl	80136a4 <memp_free>
  }
}
 8015ade:	bf00      	nop
 8015ae0:	3708      	adds	r7, #8
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}
	...

08015ae8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b084      	sub	sp, #16
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d106      	bne.n	8015b04 <tcp_seg_copy+0x1c>
 8015af6:	4b0f      	ldr	r3, [pc, #60]	; (8015b34 <tcp_seg_copy+0x4c>)
 8015af8:	f240 6282 	movw	r2, #1666	; 0x682
 8015afc:	490e      	ldr	r1, [pc, #56]	; (8015b38 <tcp_seg_copy+0x50>)
 8015afe:	480f      	ldr	r0, [pc, #60]	; (8015b3c <tcp_seg_copy+0x54>)
 8015b00:	f009 f9fc 	bl	801eefc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015b04:	2003      	movs	r0, #3
 8015b06:	f7fd fd7b 	bl	8013600 <memp_malloc>
 8015b0a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d101      	bne.n	8015b16 <tcp_seg_copy+0x2e>
    return NULL;
 8015b12:	2300      	movs	r3, #0
 8015b14:	e00a      	b.n	8015b2c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015b16:	2210      	movs	r2, #16
 8015b18:	6879      	ldr	r1, [r7, #4]
 8015b1a:	68f8      	ldr	r0, [r7, #12]
 8015b1c:	f008 fa9a 	bl	801e054 <memcpy>
  pbuf_ref(cseg->p);
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	685b      	ldr	r3, [r3, #4]
 8015b24:	4618      	mov	r0, r3
 8015b26:	f7fe fca3 	bl	8014470 <pbuf_ref>
  return cseg;
 8015b2a:	68fb      	ldr	r3, [r7, #12]
}
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	3710      	adds	r7, #16
 8015b30:	46bd      	mov	sp, r7
 8015b32:	bd80      	pop	{r7, pc}
 8015b34:	08024a64 	.word	0x08024a64
 8015b38:	08024fb8 	.word	0x08024fb8
 8015b3c:	08024aa8 	.word	0x08024aa8

08015b40 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b084      	sub	sp, #16
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	60f8      	str	r0, [r7, #12]
 8015b48:	60b9      	str	r1, [r7, #8]
 8015b4a:	607a      	str	r2, [r7, #4]
 8015b4c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015b4e:	68bb      	ldr	r3, [r7, #8]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d109      	bne.n	8015b68 <tcp_recv_null+0x28>
 8015b54:	4b12      	ldr	r3, [pc, #72]	; (8015ba0 <tcp_recv_null+0x60>)
 8015b56:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015b5a:	4912      	ldr	r1, [pc, #72]	; (8015ba4 <tcp_recv_null+0x64>)
 8015b5c:	4812      	ldr	r0, [pc, #72]	; (8015ba8 <tcp_recv_null+0x68>)
 8015b5e:	f009 f9cd 	bl	801eefc <iprintf>
 8015b62:	f06f 030f 	mvn.w	r3, #15
 8015b66:	e016      	b.n	8015b96 <tcp_recv_null+0x56>

  if (p != NULL) {
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d009      	beq.n	8015b82 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	891b      	ldrh	r3, [r3, #8]
 8015b72:	4619      	mov	r1, r3
 8015b74:	68b8      	ldr	r0, [r7, #8]
 8015b76:	f7ff fad3 	bl	8015120 <tcp_recved>
    pbuf_free(p);
 8015b7a:	6878      	ldr	r0, [r7, #4]
 8015b7c:	f7fe fbd2 	bl	8014324 <pbuf_free>
 8015b80:	e008      	b.n	8015b94 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d104      	bne.n	8015b94 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015b8a:	68b8      	ldr	r0, [r7, #8]
 8015b8c:	f7ff f884 	bl	8014c98 <tcp_close>
 8015b90:	4603      	mov	r3, r0
 8015b92:	e000      	b.n	8015b96 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015b94:	2300      	movs	r3, #0
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	3710      	adds	r7, #16
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}
 8015b9e:	bf00      	nop
 8015ba0:	08024a64 	.word	0x08024a64
 8015ba4:	08024fd4 	.word	0x08024fd4
 8015ba8:	08024aa8 	.word	0x08024aa8

08015bac <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b086      	sub	sp, #24
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	db01      	blt.n	8015bc2 <tcp_kill_prio+0x16>
 8015bbe:	79fb      	ldrb	r3, [r7, #7]
 8015bc0:	e000      	b.n	8015bc4 <tcp_kill_prio+0x18>
 8015bc2:	237f      	movs	r3, #127	; 0x7f
 8015bc4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015bc6:	7afb      	ldrb	r3, [r7, #11]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d034      	beq.n	8015c36 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015bcc:	7afb      	ldrb	r3, [r7, #11]
 8015bce:	3b01      	subs	r3, #1
 8015bd0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015bda:	4b19      	ldr	r3, [pc, #100]	; (8015c40 <tcp_kill_prio+0x94>)
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	617b      	str	r3, [r7, #20]
 8015be0:	e01f      	b.n	8015c22 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	7d5b      	ldrb	r3, [r3, #21]
 8015be6:	7afa      	ldrb	r2, [r7, #11]
 8015be8:	429a      	cmp	r2, r3
 8015bea:	d80c      	bhi.n	8015c06 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015bec:	697b      	ldr	r3, [r7, #20]
 8015bee:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015bf0:	7afa      	ldrb	r2, [r7, #11]
 8015bf2:	429a      	cmp	r2, r3
 8015bf4:	d112      	bne.n	8015c1c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015bf6:	4b13      	ldr	r3, [pc, #76]	; (8015c44 <tcp_kill_prio+0x98>)
 8015bf8:	681a      	ldr	r2, [r3, #0]
 8015bfa:	697b      	ldr	r3, [r7, #20]
 8015bfc:	6a1b      	ldr	r3, [r3, #32]
 8015bfe:	1ad3      	subs	r3, r2, r3
 8015c00:	68fa      	ldr	r2, [r7, #12]
 8015c02:	429a      	cmp	r2, r3
 8015c04:	d80a      	bhi.n	8015c1c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015c06:	4b0f      	ldr	r3, [pc, #60]	; (8015c44 <tcp_kill_prio+0x98>)
 8015c08:	681a      	ldr	r2, [r3, #0]
 8015c0a:	697b      	ldr	r3, [r7, #20]
 8015c0c:	6a1b      	ldr	r3, [r3, #32]
 8015c0e:	1ad3      	subs	r3, r2, r3
 8015c10:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015c12:	697b      	ldr	r3, [r7, #20]
 8015c14:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015c16:	697b      	ldr	r3, [r7, #20]
 8015c18:	7d5b      	ldrb	r3, [r3, #21]
 8015c1a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c1c:	697b      	ldr	r3, [r7, #20]
 8015c1e:	68db      	ldr	r3, [r3, #12]
 8015c20:	617b      	str	r3, [r7, #20]
 8015c22:	697b      	ldr	r3, [r7, #20]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d1dc      	bne.n	8015be2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015c28:	693b      	ldr	r3, [r7, #16]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d004      	beq.n	8015c38 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015c2e:	6938      	ldr	r0, [r7, #16]
 8015c30:	f7ff f978 	bl	8014f24 <tcp_abort>
 8015c34:	e000      	b.n	8015c38 <tcp_kill_prio+0x8c>
    return;
 8015c36:	bf00      	nop
  }
}
 8015c38:	3718      	adds	r7, #24
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	2000e0fc 	.word	0x2000e0fc
 8015c44:	2000e100 	.word	0x2000e100

08015c48 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b086      	sub	sp, #24
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	4603      	mov	r3, r0
 8015c50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015c52:	79fb      	ldrb	r3, [r7, #7]
 8015c54:	2b08      	cmp	r3, #8
 8015c56:	d009      	beq.n	8015c6c <tcp_kill_state+0x24>
 8015c58:	79fb      	ldrb	r3, [r7, #7]
 8015c5a:	2b09      	cmp	r3, #9
 8015c5c:	d006      	beq.n	8015c6c <tcp_kill_state+0x24>
 8015c5e:	4b1a      	ldr	r3, [pc, #104]	; (8015cc8 <tcp_kill_state+0x80>)
 8015c60:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8015c64:	4919      	ldr	r1, [pc, #100]	; (8015ccc <tcp_kill_state+0x84>)
 8015c66:	481a      	ldr	r0, [pc, #104]	; (8015cd0 <tcp_kill_state+0x88>)
 8015c68:	f009 f948 	bl	801eefc <iprintf>

  inactivity = 0;
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015c70:	2300      	movs	r3, #0
 8015c72:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c74:	4b17      	ldr	r3, [pc, #92]	; (8015cd4 <tcp_kill_state+0x8c>)
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	617b      	str	r3, [r7, #20]
 8015c7a:	e017      	b.n	8015cac <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015c7c:	697b      	ldr	r3, [r7, #20]
 8015c7e:	7d1b      	ldrb	r3, [r3, #20]
 8015c80:	79fa      	ldrb	r2, [r7, #7]
 8015c82:	429a      	cmp	r2, r3
 8015c84:	d10f      	bne.n	8015ca6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015c86:	4b14      	ldr	r3, [pc, #80]	; (8015cd8 <tcp_kill_state+0x90>)
 8015c88:	681a      	ldr	r2, [r3, #0]
 8015c8a:	697b      	ldr	r3, [r7, #20]
 8015c8c:	6a1b      	ldr	r3, [r3, #32]
 8015c8e:	1ad3      	subs	r3, r2, r3
 8015c90:	68fa      	ldr	r2, [r7, #12]
 8015c92:	429a      	cmp	r2, r3
 8015c94:	d807      	bhi.n	8015ca6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015c96:	4b10      	ldr	r3, [pc, #64]	; (8015cd8 <tcp_kill_state+0x90>)
 8015c98:	681a      	ldr	r2, [r3, #0]
 8015c9a:	697b      	ldr	r3, [r7, #20]
 8015c9c:	6a1b      	ldr	r3, [r3, #32]
 8015c9e:	1ad3      	subs	r3, r2, r3
 8015ca0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015ca2:	697b      	ldr	r3, [r7, #20]
 8015ca4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	68db      	ldr	r3, [r3, #12]
 8015caa:	617b      	str	r3, [r7, #20]
 8015cac:	697b      	ldr	r3, [r7, #20]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d1e4      	bne.n	8015c7c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015cb2:	693b      	ldr	r3, [r7, #16]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d003      	beq.n	8015cc0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015cb8:	2100      	movs	r1, #0
 8015cba:	6938      	ldr	r0, [r7, #16]
 8015cbc:	f7ff f874 	bl	8014da8 <tcp_abandon>
  }
}
 8015cc0:	bf00      	nop
 8015cc2:	3718      	adds	r7, #24
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	08024a64 	.word	0x08024a64
 8015ccc:	08024ff0 	.word	0x08024ff0
 8015cd0:	08024aa8 	.word	0x08024aa8
 8015cd4:	2000e0fc 	.word	0x2000e0fc
 8015cd8:	2000e100 	.word	0x2000e100

08015cdc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b084      	sub	sp, #16
 8015ce0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015cea:	4b12      	ldr	r3, [pc, #72]	; (8015d34 <tcp_kill_timewait+0x58>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	60fb      	str	r3, [r7, #12]
 8015cf0:	e012      	b.n	8015d18 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015cf2:	4b11      	ldr	r3, [pc, #68]	; (8015d38 <tcp_kill_timewait+0x5c>)
 8015cf4:	681a      	ldr	r2, [r3, #0]
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	6a1b      	ldr	r3, [r3, #32]
 8015cfa:	1ad3      	subs	r3, r2, r3
 8015cfc:	687a      	ldr	r2, [r7, #4]
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d807      	bhi.n	8015d12 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015d02:	4b0d      	ldr	r3, [pc, #52]	; (8015d38 <tcp_kill_timewait+0x5c>)
 8015d04:	681a      	ldr	r2, [r3, #0]
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	6a1b      	ldr	r3, [r3, #32]
 8015d0a:	1ad3      	subs	r3, r2, r3
 8015d0c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	68db      	ldr	r3, [r3, #12]
 8015d16:	60fb      	str	r3, [r7, #12]
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d1e9      	bne.n	8015cf2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d002      	beq.n	8015d2a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015d24:	68b8      	ldr	r0, [r7, #8]
 8015d26:	f7ff f8fd 	bl	8014f24 <tcp_abort>
  }
}
 8015d2a:	bf00      	nop
 8015d2c:	3710      	adds	r7, #16
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}
 8015d32:	bf00      	nop
 8015d34:	2000e10c 	.word	0x2000e10c
 8015d38:	2000e100 	.word	0x2000e100

08015d3c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b082      	sub	sp, #8
 8015d40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8015d42:	4b10      	ldr	r3, [pc, #64]	; (8015d84 <tcp_handle_closepend+0x48>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015d48:	e014      	b.n	8015d74 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	68db      	ldr	r3, [r3, #12]
 8015d4e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	8b5b      	ldrh	r3, [r3, #26]
 8015d54:	f003 0308 	and.w	r3, r3, #8
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d009      	beq.n	8015d70 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	8b5b      	ldrh	r3, [r3, #26]
 8015d60:	f023 0308 	bic.w	r3, r3, #8
 8015d64:	b29a      	uxth	r2, r3
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	f7fe ff2a 	bl	8014bc4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015d70:	683b      	ldr	r3, [r7, #0]
 8015d72:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d1e7      	bne.n	8015d4a <tcp_handle_closepend+0xe>
  }
}
 8015d7a:	bf00      	nop
 8015d7c:	bf00      	nop
 8015d7e:	3708      	adds	r7, #8
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}
 8015d84:	2000e0fc 	.word	0x2000e0fc

08015d88 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b084      	sub	sp, #16
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	4603      	mov	r3, r0
 8015d90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015d92:	2001      	movs	r0, #1
 8015d94:	f7fd fc34 	bl	8013600 <memp_malloc>
 8015d98:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d126      	bne.n	8015dee <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8015da0:	f7ff ffcc 	bl	8015d3c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015da4:	f7ff ff9a 	bl	8015cdc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015da8:	2001      	movs	r0, #1
 8015daa:	f7fd fc29 	bl	8013600 <memp_malloc>
 8015dae:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d11b      	bne.n	8015dee <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015db6:	2009      	movs	r0, #9
 8015db8:	f7ff ff46 	bl	8015c48 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015dbc:	2001      	movs	r0, #1
 8015dbe:	f7fd fc1f 	bl	8013600 <memp_malloc>
 8015dc2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d111      	bne.n	8015dee <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015dca:	2008      	movs	r0, #8
 8015dcc:	f7ff ff3c 	bl	8015c48 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015dd0:	2001      	movs	r0, #1
 8015dd2:	f7fd fc15 	bl	8013600 <memp_malloc>
 8015dd6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d107      	bne.n	8015dee <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8015dde:	79fb      	ldrb	r3, [r7, #7]
 8015de0:	4618      	mov	r0, r3
 8015de2:	f7ff fee3 	bl	8015bac <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015de6:	2001      	movs	r0, #1
 8015de8:	f7fd fc0a 	bl	8013600 <memp_malloc>
 8015dec:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d03f      	beq.n	8015e74 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015df4:	229c      	movs	r2, #156	; 0x9c
 8015df6:	2100      	movs	r1, #0
 8015df8:	68f8      	ldr	r0, [r7, #12]
 8015dfa:	f008 f953 	bl	801e0a4 <memset>
    pcb->prio = prio;
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	79fa      	ldrb	r2, [r7, #7]
 8015e02:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8015e0a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015e14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	22ff      	movs	r2, #255	; 0xff
 8015e22:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015e2a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	2206      	movs	r2, #6
 8015e30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	2206      	movs	r2, #6
 8015e38:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e40:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	2201      	movs	r2, #1
 8015e46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8015e4a:	4b0d      	ldr	r3, [pc, #52]	; (8015e80 <tcp_alloc+0xf8>)
 8015e4c:	681a      	ldr	r2, [r3, #0]
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8015e52:	4b0c      	ldr	r3, [pc, #48]	; (8015e84 <tcp_alloc+0xfc>)
 8015e54:	781a      	ldrb	r2, [r3, #0]
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8015e60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	4a08      	ldr	r2, [pc, #32]	; (8015e88 <tcp_alloc+0x100>)
 8015e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	4a07      	ldr	r2, [pc, #28]	; (8015e8c <tcp_alloc+0x104>)
 8015e70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8015e74:	68fb      	ldr	r3, [r7, #12]
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	3710      	adds	r7, #16
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd80      	pop	{r7, pc}
 8015e7e:	bf00      	nop
 8015e80:	2000e100 	.word	0x2000e100
 8015e84:	20006dba 	.word	0x20006dba
 8015e88:	08015b41 	.word	0x08015b41
 8015e8c:	006ddd00 	.word	0x006ddd00

08015e90 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b084      	sub	sp, #16
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	4603      	mov	r3, r0
 8015e98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8015e9a:	2040      	movs	r0, #64	; 0x40
 8015e9c:	f7ff ff74 	bl	8015d88 <tcp_alloc>
 8015ea0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015ea2:	68fb      	ldr	r3, [r7, #12]
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3710      	adds	r7, #16
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}

08015eac <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8015eac:	b480      	push	{r7}
 8015eae:	b083      	sub	sp, #12
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
 8015eb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d002      	beq.n	8015ec2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	683a      	ldr	r2, [r7, #0]
 8015ec0:	611a      	str	r2, [r3, #16]
  }
}
 8015ec2:	bf00      	nop
 8015ec4:	370c      	adds	r7, #12
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ecc:	4770      	bx	lr
	...

08015ed0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b082      	sub	sp, #8
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
 8015ed8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d00e      	beq.n	8015efe <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	7d1b      	ldrb	r3, [r3, #20]
 8015ee4:	2b01      	cmp	r3, #1
 8015ee6:	d106      	bne.n	8015ef6 <tcp_recv+0x26>
 8015ee8:	4b07      	ldr	r3, [pc, #28]	; (8015f08 <tcp_recv+0x38>)
 8015eea:	f240 72df 	movw	r2, #2015	; 0x7df
 8015eee:	4907      	ldr	r1, [pc, #28]	; (8015f0c <tcp_recv+0x3c>)
 8015ef0:	4807      	ldr	r0, [pc, #28]	; (8015f10 <tcp_recv+0x40>)
 8015ef2:	f009 f803 	bl	801eefc <iprintf>
    pcb->recv = recv;
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	683a      	ldr	r2, [r7, #0]
 8015efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8015efe:	bf00      	nop
 8015f00:	3708      	adds	r7, #8
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bd80      	pop	{r7, pc}
 8015f06:	bf00      	nop
 8015f08:	08024a64 	.word	0x08024a64
 8015f0c:	08025000 	.word	0x08025000
 8015f10:	08024aa8 	.word	0x08024aa8

08015f14 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b082      	sub	sp, #8
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
 8015f1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d00e      	beq.n	8015f42 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	7d1b      	ldrb	r3, [r3, #20]
 8015f28:	2b01      	cmp	r3, #1
 8015f2a:	d106      	bne.n	8015f3a <tcp_sent+0x26>
 8015f2c:	4b07      	ldr	r3, [pc, #28]	; (8015f4c <tcp_sent+0x38>)
 8015f2e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8015f32:	4907      	ldr	r1, [pc, #28]	; (8015f50 <tcp_sent+0x3c>)
 8015f34:	4807      	ldr	r0, [pc, #28]	; (8015f54 <tcp_sent+0x40>)
 8015f36:	f008 ffe1 	bl	801eefc <iprintf>
    pcb->sent = sent;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	683a      	ldr	r2, [r7, #0]
 8015f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8015f42:	bf00      	nop
 8015f44:	3708      	adds	r7, #8
 8015f46:	46bd      	mov	sp, r7
 8015f48:	bd80      	pop	{r7, pc}
 8015f4a:	bf00      	nop
 8015f4c:	08024a64 	.word	0x08024a64
 8015f50:	08025028 	.word	0x08025028
 8015f54:	08024aa8 	.word	0x08024aa8

08015f58 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b082      	sub	sp, #8
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
 8015f60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d00e      	beq.n	8015f86 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	7d1b      	ldrb	r3, [r3, #20]
 8015f6c:	2b01      	cmp	r3, #1
 8015f6e:	d106      	bne.n	8015f7e <tcp_err+0x26>
 8015f70:	4b07      	ldr	r3, [pc, #28]	; (8015f90 <tcp_err+0x38>)
 8015f72:	f640 020d 	movw	r2, #2061	; 0x80d
 8015f76:	4907      	ldr	r1, [pc, #28]	; (8015f94 <tcp_err+0x3c>)
 8015f78:	4807      	ldr	r0, [pc, #28]	; (8015f98 <tcp_err+0x40>)
 8015f7a:	f008 ffbf 	bl	801eefc <iprintf>
    pcb->errf = err;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	683a      	ldr	r2, [r7, #0]
 8015f82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8015f86:	bf00      	nop
 8015f88:	3708      	adds	r7, #8
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	bd80      	pop	{r7, pc}
 8015f8e:	bf00      	nop
 8015f90:	08024a64 	.word	0x08024a64
 8015f94:	08025050 	.word	0x08025050
 8015f98:	08024aa8 	.word	0x08024aa8

08015f9c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8015f9c:	b480      	push	{r7}
 8015f9e:	b085      	sub	sp, #20
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
 8015fa4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d008      	beq.n	8015fbe <tcp_accept+0x22>
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	7d1b      	ldrb	r3, [r3, #20]
 8015fb0:	2b01      	cmp	r3, #1
 8015fb2:	d104      	bne.n	8015fbe <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	683a      	ldr	r2, [r7, #0]
 8015fbc:	619a      	str	r2, [r3, #24]
  }
}
 8015fbe:	bf00      	nop
 8015fc0:	3714      	adds	r7, #20
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc8:	4770      	bx	lr
	...

08015fcc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b084      	sub	sp, #16
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	60f8      	str	r0, [r7, #12]
 8015fd4:	60b9      	str	r1, [r7, #8]
 8015fd6:	4613      	mov	r3, r2
 8015fd8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d107      	bne.n	8015ff0 <tcp_poll+0x24>
 8015fe0:	4b0e      	ldr	r3, [pc, #56]	; (801601c <tcp_poll+0x50>)
 8015fe2:	f640 023d 	movw	r2, #2109	; 0x83d
 8015fe6:	490e      	ldr	r1, [pc, #56]	; (8016020 <tcp_poll+0x54>)
 8015fe8:	480e      	ldr	r0, [pc, #56]	; (8016024 <tcp_poll+0x58>)
 8015fea:	f008 ff87 	bl	801eefc <iprintf>
 8015fee:	e011      	b.n	8016014 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	7d1b      	ldrb	r3, [r3, #20]
 8015ff4:	2b01      	cmp	r3, #1
 8015ff6:	d106      	bne.n	8016006 <tcp_poll+0x3a>
 8015ff8:	4b08      	ldr	r3, [pc, #32]	; (801601c <tcp_poll+0x50>)
 8015ffa:	f640 023e 	movw	r2, #2110	; 0x83e
 8015ffe:	490a      	ldr	r1, [pc, #40]	; (8016028 <tcp_poll+0x5c>)
 8016000:	4808      	ldr	r0, [pc, #32]	; (8016024 <tcp_poll+0x58>)
 8016002:	f008 ff7b 	bl	801eefc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	68ba      	ldr	r2, [r7, #8]
 801600a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	79fa      	ldrb	r2, [r7, #7]
 8016012:	775a      	strb	r2, [r3, #29]
}
 8016014:	3710      	adds	r7, #16
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}
 801601a:	bf00      	nop
 801601c:	08024a64 	.word	0x08024a64
 8016020:	08025078 	.word	0x08025078
 8016024:	08024aa8 	.word	0x08024aa8
 8016028:	08025090 	.word	0x08025090

0801602c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b082      	sub	sp, #8
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d107      	bne.n	801604a <tcp_pcb_purge+0x1e>
 801603a:	4b21      	ldr	r3, [pc, #132]	; (80160c0 <tcp_pcb_purge+0x94>)
 801603c:	f640 0251 	movw	r2, #2129	; 0x851
 8016040:	4920      	ldr	r1, [pc, #128]	; (80160c4 <tcp_pcb_purge+0x98>)
 8016042:	4821      	ldr	r0, [pc, #132]	; (80160c8 <tcp_pcb_purge+0x9c>)
 8016044:	f008 ff5a 	bl	801eefc <iprintf>
 8016048:	e037      	b.n	80160ba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	7d1b      	ldrb	r3, [r3, #20]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d033      	beq.n	80160ba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016056:	2b0a      	cmp	r3, #10
 8016058:	d02f      	beq.n	80160ba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801605e:	2b01      	cmp	r3, #1
 8016060:	d02b      	beq.n	80160ba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016066:	2b00      	cmp	r3, #0
 8016068:	d007      	beq.n	801607a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801606e:	4618      	mov	r0, r3
 8016070:	f7fe f958 	bl	8014324 <pbuf_free>
      pcb->refused_data = NULL;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2200      	movs	r2, #0
 8016078:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801607e:	2b00      	cmp	r3, #0
 8016080:	d002      	beq.n	8016088 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016082:	6878      	ldr	r0, [r7, #4]
 8016084:	f000 f986 	bl	8016394 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801608e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016094:	4618      	mov	r0, r3
 8016096:	f7ff fcf9 	bl	8015a8c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801609e:	4618      	mov	r0, r3
 80160a0:	f7ff fcf4 	bl	8015a8c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	2200      	movs	r2, #0
 80160a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2200      	movs	r2, #0
 80160b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80160ba:	3708      	adds	r7, #8
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}
 80160c0:	08024a64 	.word	0x08024a64
 80160c4:	080250b0 	.word	0x080250b0
 80160c8:	08024aa8 	.word	0x08024aa8

080160cc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b084      	sub	sp, #16
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
 80160d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d106      	bne.n	80160ea <tcp_pcb_remove+0x1e>
 80160dc:	4b3e      	ldr	r3, [pc, #248]	; (80161d8 <tcp_pcb_remove+0x10c>)
 80160de:	f640 0283 	movw	r2, #2179	; 0x883
 80160e2:	493e      	ldr	r1, [pc, #248]	; (80161dc <tcp_pcb_remove+0x110>)
 80160e4:	483e      	ldr	r0, [pc, #248]	; (80161e0 <tcp_pcb_remove+0x114>)
 80160e6:	f008 ff09 	bl	801eefc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d106      	bne.n	80160fe <tcp_pcb_remove+0x32>
 80160f0:	4b39      	ldr	r3, [pc, #228]	; (80161d8 <tcp_pcb_remove+0x10c>)
 80160f2:	f640 0284 	movw	r2, #2180	; 0x884
 80160f6:	493b      	ldr	r1, [pc, #236]	; (80161e4 <tcp_pcb_remove+0x118>)
 80160f8:	4839      	ldr	r0, [pc, #228]	; (80161e0 <tcp_pcb_remove+0x114>)
 80160fa:	f008 feff 	bl	801eefc <iprintf>

  TCP_RMV(pcblist, pcb);
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	683a      	ldr	r2, [r7, #0]
 8016104:	429a      	cmp	r2, r3
 8016106:	d105      	bne.n	8016114 <tcp_pcb_remove+0x48>
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	68da      	ldr	r2, [r3, #12]
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	601a      	str	r2, [r3, #0]
 8016112:	e013      	b.n	801613c <tcp_pcb_remove+0x70>
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	60fb      	str	r3, [r7, #12]
 801611a:	e00c      	b.n	8016136 <tcp_pcb_remove+0x6a>
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	68db      	ldr	r3, [r3, #12]
 8016120:	683a      	ldr	r2, [r7, #0]
 8016122:	429a      	cmp	r2, r3
 8016124:	d104      	bne.n	8016130 <tcp_pcb_remove+0x64>
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	68da      	ldr	r2, [r3, #12]
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	60da      	str	r2, [r3, #12]
 801612e:	e005      	b.n	801613c <tcp_pcb_remove+0x70>
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	68db      	ldr	r3, [r3, #12]
 8016134:	60fb      	str	r3, [r7, #12]
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d1ef      	bne.n	801611c <tcp_pcb_remove+0x50>
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	2200      	movs	r2, #0
 8016140:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016142:	6838      	ldr	r0, [r7, #0]
 8016144:	f7ff ff72 	bl	801602c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016148:	683b      	ldr	r3, [r7, #0]
 801614a:	7d1b      	ldrb	r3, [r3, #20]
 801614c:	2b0a      	cmp	r3, #10
 801614e:	d013      	beq.n	8016178 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016150:	683b      	ldr	r3, [r7, #0]
 8016152:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016154:	2b01      	cmp	r3, #1
 8016156:	d00f      	beq.n	8016178 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016158:	683b      	ldr	r3, [r7, #0]
 801615a:	8b5b      	ldrh	r3, [r3, #26]
 801615c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016160:	2b00      	cmp	r3, #0
 8016162:	d009      	beq.n	8016178 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016164:	683b      	ldr	r3, [r7, #0]
 8016166:	8b5b      	ldrh	r3, [r3, #26]
 8016168:	f043 0302 	orr.w	r3, r3, #2
 801616c:	b29a      	uxth	r2, r3
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016172:	6838      	ldr	r0, [r7, #0]
 8016174:	f003 fbc2 	bl	80198fc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016178:	683b      	ldr	r3, [r7, #0]
 801617a:	7d1b      	ldrb	r3, [r3, #20]
 801617c:	2b01      	cmp	r3, #1
 801617e:	d020      	beq.n	80161c2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016184:	2b00      	cmp	r3, #0
 8016186:	d006      	beq.n	8016196 <tcp_pcb_remove+0xca>
 8016188:	4b13      	ldr	r3, [pc, #76]	; (80161d8 <tcp_pcb_remove+0x10c>)
 801618a:	f640 0293 	movw	r2, #2195	; 0x893
 801618e:	4916      	ldr	r1, [pc, #88]	; (80161e8 <tcp_pcb_remove+0x11c>)
 8016190:	4813      	ldr	r0, [pc, #76]	; (80161e0 <tcp_pcb_remove+0x114>)
 8016192:	f008 feb3 	bl	801eefc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801619a:	2b00      	cmp	r3, #0
 801619c:	d006      	beq.n	80161ac <tcp_pcb_remove+0xe0>
 801619e:	4b0e      	ldr	r3, [pc, #56]	; (80161d8 <tcp_pcb_remove+0x10c>)
 80161a0:	f640 0294 	movw	r2, #2196	; 0x894
 80161a4:	4911      	ldr	r1, [pc, #68]	; (80161ec <tcp_pcb_remove+0x120>)
 80161a6:	480e      	ldr	r0, [pc, #56]	; (80161e0 <tcp_pcb_remove+0x114>)
 80161a8:	f008 fea8 	bl	801eefc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80161ac:	683b      	ldr	r3, [r7, #0]
 80161ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d006      	beq.n	80161c2 <tcp_pcb_remove+0xf6>
 80161b4:	4b08      	ldr	r3, [pc, #32]	; (80161d8 <tcp_pcb_remove+0x10c>)
 80161b6:	f640 0296 	movw	r2, #2198	; 0x896
 80161ba:	490d      	ldr	r1, [pc, #52]	; (80161f0 <tcp_pcb_remove+0x124>)
 80161bc:	4808      	ldr	r0, [pc, #32]	; (80161e0 <tcp_pcb_remove+0x114>)
 80161be:	f008 fe9d 	bl	801eefc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80161c2:	683b      	ldr	r3, [r7, #0]
 80161c4:	2200      	movs	r2, #0
 80161c6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80161c8:	683b      	ldr	r3, [r7, #0]
 80161ca:	2200      	movs	r2, #0
 80161cc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80161ce:	bf00      	nop
 80161d0:	3710      	adds	r7, #16
 80161d2:	46bd      	mov	sp, r7
 80161d4:	bd80      	pop	{r7, pc}
 80161d6:	bf00      	nop
 80161d8:	08024a64 	.word	0x08024a64
 80161dc:	080250cc 	.word	0x080250cc
 80161e0:	08024aa8 	.word	0x08024aa8
 80161e4:	080250e8 	.word	0x080250e8
 80161e8:	08025108 	.word	0x08025108
 80161ec:	08025120 	.word	0x08025120
 80161f0:	0802513c 	.word	0x0802513c

080161f4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b082      	sub	sp, #8
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d106      	bne.n	8016210 <tcp_next_iss+0x1c>
 8016202:	4b0a      	ldr	r3, [pc, #40]	; (801622c <tcp_next_iss+0x38>)
 8016204:	f640 02af 	movw	r2, #2223	; 0x8af
 8016208:	4909      	ldr	r1, [pc, #36]	; (8016230 <tcp_next_iss+0x3c>)
 801620a:	480a      	ldr	r0, [pc, #40]	; (8016234 <tcp_next_iss+0x40>)
 801620c:	f008 fe76 	bl	801eefc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016210:	4b09      	ldr	r3, [pc, #36]	; (8016238 <tcp_next_iss+0x44>)
 8016212:	681a      	ldr	r2, [r3, #0]
 8016214:	4b09      	ldr	r3, [pc, #36]	; (801623c <tcp_next_iss+0x48>)
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	4413      	add	r3, r2
 801621a:	4a07      	ldr	r2, [pc, #28]	; (8016238 <tcp_next_iss+0x44>)
 801621c:	6013      	str	r3, [r2, #0]
  return iss;
 801621e:	4b06      	ldr	r3, [pc, #24]	; (8016238 <tcp_next_iss+0x44>)
 8016220:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016222:	4618      	mov	r0, r3
 8016224:	3708      	adds	r7, #8
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}
 801622a:	bf00      	nop
 801622c:	08024a64 	.word	0x08024a64
 8016230:	08025154 	.word	0x08025154
 8016234:	08024aa8 	.word	0x08024aa8
 8016238:	20000358 	.word	0x20000358
 801623c:	2000e100 	.word	0x2000e100

08016240 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b086      	sub	sp, #24
 8016244:	af00      	add	r7, sp, #0
 8016246:	4603      	mov	r3, r0
 8016248:	60b9      	str	r1, [r7, #8]
 801624a:	607a      	str	r2, [r7, #4]
 801624c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d106      	bne.n	8016262 <tcp_eff_send_mss_netif+0x22>
 8016254:	4b14      	ldr	r3, [pc, #80]	; (80162a8 <tcp_eff_send_mss_netif+0x68>)
 8016256:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801625a:	4914      	ldr	r1, [pc, #80]	; (80162ac <tcp_eff_send_mss_netif+0x6c>)
 801625c:	4814      	ldr	r0, [pc, #80]	; (80162b0 <tcp_eff_send_mss_netif+0x70>)
 801625e:	f008 fe4d 	bl	801eefc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016262:	68bb      	ldr	r3, [r7, #8]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d101      	bne.n	801626c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016268:	89fb      	ldrh	r3, [r7, #14]
 801626a:	e019      	b.n	80162a0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801626c:	68bb      	ldr	r3, [r7, #8]
 801626e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016270:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016272:	8afb      	ldrh	r3, [r7, #22]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d012      	beq.n	801629e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016278:	2328      	movs	r3, #40	; 0x28
 801627a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801627c:	8afa      	ldrh	r2, [r7, #22]
 801627e:	8abb      	ldrh	r3, [r7, #20]
 8016280:	429a      	cmp	r2, r3
 8016282:	d904      	bls.n	801628e <tcp_eff_send_mss_netif+0x4e>
 8016284:	8afa      	ldrh	r2, [r7, #22]
 8016286:	8abb      	ldrh	r3, [r7, #20]
 8016288:	1ad3      	subs	r3, r2, r3
 801628a:	b29b      	uxth	r3, r3
 801628c:	e000      	b.n	8016290 <tcp_eff_send_mss_netif+0x50>
 801628e:	2300      	movs	r3, #0
 8016290:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016292:	8a7a      	ldrh	r2, [r7, #18]
 8016294:	89fb      	ldrh	r3, [r7, #14]
 8016296:	4293      	cmp	r3, r2
 8016298:	bf28      	it	cs
 801629a:	4613      	movcs	r3, r2
 801629c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801629e:	89fb      	ldrh	r3, [r7, #14]
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	3718      	adds	r7, #24
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}
 80162a8:	08024a64 	.word	0x08024a64
 80162ac:	08025170 	.word	0x08025170
 80162b0:	08024aa8 	.word	0x08024aa8

080162b4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b084      	sub	sp, #16
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
 80162bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80162be:	683b      	ldr	r3, [r7, #0]
 80162c0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d119      	bne.n	80162fc <tcp_netif_ip_addr_changed_pcblist+0x48>
 80162c8:	4b10      	ldr	r3, [pc, #64]	; (801630c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80162ca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80162ce:	4910      	ldr	r1, [pc, #64]	; (8016310 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80162d0:	4810      	ldr	r0, [pc, #64]	; (8016314 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80162d2:	f008 fe13 	bl	801eefc <iprintf>

  while (pcb != NULL) {
 80162d6:	e011      	b.n	80162fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	681a      	ldr	r2, [r3, #0]
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	429a      	cmp	r2, r3
 80162e2:	d108      	bne.n	80162f6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	68db      	ldr	r3, [r3, #12]
 80162e8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80162ea:	68f8      	ldr	r0, [r7, #12]
 80162ec:	f7fe fe1a 	bl	8014f24 <tcp_abort>
      pcb = next;
 80162f0:	68bb      	ldr	r3, [r7, #8]
 80162f2:	60fb      	str	r3, [r7, #12]
 80162f4:	e002      	b.n	80162fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	68db      	ldr	r3, [r3, #12]
 80162fa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d1ea      	bne.n	80162d8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016302:	bf00      	nop
 8016304:	bf00      	nop
 8016306:	3710      	adds	r7, #16
 8016308:	46bd      	mov	sp, r7
 801630a:	bd80      	pop	{r7, pc}
 801630c:	08024a64 	.word	0x08024a64
 8016310:	08025198 	.word	0x08025198
 8016314:	08024aa8 	.word	0x08024aa8

08016318 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b084      	sub	sp, #16
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
 8016320:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d02a      	beq.n	801637e <tcp_netif_ip_addr_changed+0x66>
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d026      	beq.n	801637e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016330:	4b15      	ldr	r3, [pc, #84]	; (8016388 <tcp_netif_ip_addr_changed+0x70>)
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	4619      	mov	r1, r3
 8016336:	6878      	ldr	r0, [r7, #4]
 8016338:	f7ff ffbc 	bl	80162b4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801633c:	4b13      	ldr	r3, [pc, #76]	; (801638c <tcp_netif_ip_addr_changed+0x74>)
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	4619      	mov	r1, r3
 8016342:	6878      	ldr	r0, [r7, #4]
 8016344:	f7ff ffb6 	bl	80162b4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016348:	683b      	ldr	r3, [r7, #0]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d017      	beq.n	801637e <tcp_netif_ip_addr_changed+0x66>
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d013      	beq.n	801637e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016356:	4b0e      	ldr	r3, [pc, #56]	; (8016390 <tcp_netif_ip_addr_changed+0x78>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	60fb      	str	r3, [r7, #12]
 801635c:	e00c      	b.n	8016378 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	681a      	ldr	r2, [r3, #0]
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	429a      	cmp	r2, r3
 8016368:	d103      	bne.n	8016372 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801636a:	683b      	ldr	r3, [r7, #0]
 801636c:	681a      	ldr	r2, [r3, #0]
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	68db      	ldr	r3, [r3, #12]
 8016376:	60fb      	str	r3, [r7, #12]
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d1ef      	bne.n	801635e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801637e:	bf00      	nop
 8016380:	3710      	adds	r7, #16
 8016382:	46bd      	mov	sp, r7
 8016384:	bd80      	pop	{r7, pc}
 8016386:	bf00      	nop
 8016388:	2000e0fc 	.word	0x2000e0fc
 801638c:	2000e108 	.word	0x2000e108
 8016390:	2000e104 	.word	0x2000e104

08016394 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b082      	sub	sp, #8
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d007      	beq.n	80163b4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80163a8:	4618      	mov	r0, r3
 80163aa:	f7ff fb6f 	bl	8015a8c <tcp_segs_free>
    pcb->ooseq = NULL;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	2200      	movs	r2, #0
 80163b2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80163b4:	bf00      	nop
 80163b6:	3708      	adds	r7, #8
 80163b8:	46bd      	mov	sp, r7
 80163ba:	bd80      	pop	{r7, pc}

080163bc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80163bc:	b590      	push	{r4, r7, lr}
 80163be:	b08d      	sub	sp, #52	; 0x34
 80163c0:	af04      	add	r7, sp, #16
 80163c2:	6078      	str	r0, [r7, #4]
 80163c4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d105      	bne.n	80163d8 <tcp_input+0x1c>
 80163cc:	4b9b      	ldr	r3, [pc, #620]	; (801663c <tcp_input+0x280>)
 80163ce:	2283      	movs	r2, #131	; 0x83
 80163d0:	499b      	ldr	r1, [pc, #620]	; (8016640 <tcp_input+0x284>)
 80163d2:	489c      	ldr	r0, [pc, #624]	; (8016644 <tcp_input+0x288>)
 80163d4:	f008 fd92 	bl	801eefc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	685b      	ldr	r3, [r3, #4]
 80163dc:	4a9a      	ldr	r2, [pc, #616]	; (8016648 <tcp_input+0x28c>)
 80163de:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	895b      	ldrh	r3, [r3, #10]
 80163e4:	2b13      	cmp	r3, #19
 80163e6:	f240 83c4 	bls.w	8016b72 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80163ea:	4b98      	ldr	r3, [pc, #608]	; (801664c <tcp_input+0x290>)
 80163ec:	695b      	ldr	r3, [r3, #20]
 80163ee:	4a97      	ldr	r2, [pc, #604]	; (801664c <tcp_input+0x290>)
 80163f0:	6812      	ldr	r2, [r2, #0]
 80163f2:	4611      	mov	r1, r2
 80163f4:	4618      	mov	r0, r3
 80163f6:	f006 fbcb 	bl	801cb90 <ip4_addr_isbroadcast_u32>
 80163fa:	4603      	mov	r3, r0
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	f040 83ba 	bne.w	8016b76 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016402:	4b92      	ldr	r3, [pc, #584]	; (801664c <tcp_input+0x290>)
 8016404:	695b      	ldr	r3, [r3, #20]
 8016406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801640a:	2be0      	cmp	r3, #224	; 0xe0
 801640c:	f000 83b3 	beq.w	8016b76 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016410:	4b8d      	ldr	r3, [pc, #564]	; (8016648 <tcp_input+0x28c>)
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	899b      	ldrh	r3, [r3, #12]
 8016416:	b29b      	uxth	r3, r3
 8016418:	4618      	mov	r0, r3
 801641a:	f7fc fc3b 	bl	8012c94 <lwip_htons>
 801641e:	4603      	mov	r3, r0
 8016420:	0b1b      	lsrs	r3, r3, #12
 8016422:	b29b      	uxth	r3, r3
 8016424:	b2db      	uxtb	r3, r3
 8016426:	009b      	lsls	r3, r3, #2
 8016428:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801642a:	7cbb      	ldrb	r3, [r7, #18]
 801642c:	2b13      	cmp	r3, #19
 801642e:	f240 83a4 	bls.w	8016b7a <tcp_input+0x7be>
 8016432:	7cbb      	ldrb	r3, [r7, #18]
 8016434:	b29a      	uxth	r2, r3
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	891b      	ldrh	r3, [r3, #8]
 801643a:	429a      	cmp	r2, r3
 801643c:	f200 839d 	bhi.w	8016b7a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016440:	7cbb      	ldrb	r3, [r7, #18]
 8016442:	b29b      	uxth	r3, r3
 8016444:	3b14      	subs	r3, #20
 8016446:	b29a      	uxth	r2, r3
 8016448:	4b81      	ldr	r3, [pc, #516]	; (8016650 <tcp_input+0x294>)
 801644a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801644c:	4b81      	ldr	r3, [pc, #516]	; (8016654 <tcp_input+0x298>)
 801644e:	2200      	movs	r2, #0
 8016450:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	895a      	ldrh	r2, [r3, #10]
 8016456:	7cbb      	ldrb	r3, [r7, #18]
 8016458:	b29b      	uxth	r3, r3
 801645a:	429a      	cmp	r2, r3
 801645c:	d309      	bcc.n	8016472 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801645e:	4b7c      	ldr	r3, [pc, #496]	; (8016650 <tcp_input+0x294>)
 8016460:	881a      	ldrh	r2, [r3, #0]
 8016462:	4b7d      	ldr	r3, [pc, #500]	; (8016658 <tcp_input+0x29c>)
 8016464:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016466:	7cbb      	ldrb	r3, [r7, #18]
 8016468:	4619      	mov	r1, r3
 801646a:	6878      	ldr	r0, [r7, #4]
 801646c:	f7fd fed4 	bl	8014218 <pbuf_remove_header>
 8016470:	e04e      	b.n	8016510 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d105      	bne.n	8016486 <tcp_input+0xca>
 801647a:	4b70      	ldr	r3, [pc, #448]	; (801663c <tcp_input+0x280>)
 801647c:	22c2      	movs	r2, #194	; 0xc2
 801647e:	4977      	ldr	r1, [pc, #476]	; (801665c <tcp_input+0x2a0>)
 8016480:	4870      	ldr	r0, [pc, #448]	; (8016644 <tcp_input+0x288>)
 8016482:	f008 fd3b 	bl	801eefc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016486:	2114      	movs	r1, #20
 8016488:	6878      	ldr	r0, [r7, #4]
 801648a:	f7fd fec5 	bl	8014218 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	895a      	ldrh	r2, [r3, #10]
 8016492:	4b71      	ldr	r3, [pc, #452]	; (8016658 <tcp_input+0x29c>)
 8016494:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016496:	4b6e      	ldr	r3, [pc, #440]	; (8016650 <tcp_input+0x294>)
 8016498:	881a      	ldrh	r2, [r3, #0]
 801649a:	4b6f      	ldr	r3, [pc, #444]	; (8016658 <tcp_input+0x29c>)
 801649c:	881b      	ldrh	r3, [r3, #0]
 801649e:	1ad3      	subs	r3, r2, r3
 80164a0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80164a2:	4b6d      	ldr	r3, [pc, #436]	; (8016658 <tcp_input+0x29c>)
 80164a4:	881b      	ldrh	r3, [r3, #0]
 80164a6:	4619      	mov	r1, r3
 80164a8:	6878      	ldr	r0, [r7, #4]
 80164aa:	f7fd feb5 	bl	8014218 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	895b      	ldrh	r3, [r3, #10]
 80164b4:	8a3a      	ldrh	r2, [r7, #16]
 80164b6:	429a      	cmp	r2, r3
 80164b8:	f200 8361 	bhi.w	8016b7e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	685b      	ldr	r3, [r3, #4]
 80164c2:	4a64      	ldr	r2, [pc, #400]	; (8016654 <tcp_input+0x298>)
 80164c4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	8a3a      	ldrh	r2, [r7, #16]
 80164cc:	4611      	mov	r1, r2
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7fd fea2 	bl	8014218 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	891a      	ldrh	r2, [r3, #8]
 80164d8:	8a3b      	ldrh	r3, [r7, #16]
 80164da:	1ad3      	subs	r3, r2, r3
 80164dc:	b29a      	uxth	r2, r3
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	895b      	ldrh	r3, [r3, #10]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d005      	beq.n	80164f6 <tcp_input+0x13a>
 80164ea:	4b54      	ldr	r3, [pc, #336]	; (801663c <tcp_input+0x280>)
 80164ec:	22df      	movs	r2, #223	; 0xdf
 80164ee:	495c      	ldr	r1, [pc, #368]	; (8016660 <tcp_input+0x2a4>)
 80164f0:	4854      	ldr	r0, [pc, #336]	; (8016644 <tcp_input+0x288>)
 80164f2:	f008 fd03 	bl	801eefc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	891a      	ldrh	r2, [r3, #8]
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	891b      	ldrh	r3, [r3, #8]
 8016500:	429a      	cmp	r2, r3
 8016502:	d005      	beq.n	8016510 <tcp_input+0x154>
 8016504:	4b4d      	ldr	r3, [pc, #308]	; (801663c <tcp_input+0x280>)
 8016506:	22e0      	movs	r2, #224	; 0xe0
 8016508:	4956      	ldr	r1, [pc, #344]	; (8016664 <tcp_input+0x2a8>)
 801650a:	484e      	ldr	r0, [pc, #312]	; (8016644 <tcp_input+0x288>)
 801650c:	f008 fcf6 	bl	801eefc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016510:	4b4d      	ldr	r3, [pc, #308]	; (8016648 <tcp_input+0x28c>)
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	881b      	ldrh	r3, [r3, #0]
 8016516:	b29b      	uxth	r3, r3
 8016518:	4a4b      	ldr	r2, [pc, #300]	; (8016648 <tcp_input+0x28c>)
 801651a:	6814      	ldr	r4, [r2, #0]
 801651c:	4618      	mov	r0, r3
 801651e:	f7fc fbb9 	bl	8012c94 <lwip_htons>
 8016522:	4603      	mov	r3, r0
 8016524:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016526:	4b48      	ldr	r3, [pc, #288]	; (8016648 <tcp_input+0x28c>)
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	885b      	ldrh	r3, [r3, #2]
 801652c:	b29b      	uxth	r3, r3
 801652e:	4a46      	ldr	r2, [pc, #280]	; (8016648 <tcp_input+0x28c>)
 8016530:	6814      	ldr	r4, [r2, #0]
 8016532:	4618      	mov	r0, r3
 8016534:	f7fc fbae 	bl	8012c94 <lwip_htons>
 8016538:	4603      	mov	r3, r0
 801653a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801653c:	4b42      	ldr	r3, [pc, #264]	; (8016648 <tcp_input+0x28c>)
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	685b      	ldr	r3, [r3, #4]
 8016542:	4a41      	ldr	r2, [pc, #260]	; (8016648 <tcp_input+0x28c>)
 8016544:	6814      	ldr	r4, [r2, #0]
 8016546:	4618      	mov	r0, r3
 8016548:	f7fc fbb9 	bl	8012cbe <lwip_htonl>
 801654c:	4603      	mov	r3, r0
 801654e:	6063      	str	r3, [r4, #4]
 8016550:	6863      	ldr	r3, [r4, #4]
 8016552:	4a45      	ldr	r2, [pc, #276]	; (8016668 <tcp_input+0x2ac>)
 8016554:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016556:	4b3c      	ldr	r3, [pc, #240]	; (8016648 <tcp_input+0x28c>)
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	689b      	ldr	r3, [r3, #8]
 801655c:	4a3a      	ldr	r2, [pc, #232]	; (8016648 <tcp_input+0x28c>)
 801655e:	6814      	ldr	r4, [r2, #0]
 8016560:	4618      	mov	r0, r3
 8016562:	f7fc fbac 	bl	8012cbe <lwip_htonl>
 8016566:	4603      	mov	r3, r0
 8016568:	60a3      	str	r3, [r4, #8]
 801656a:	68a3      	ldr	r3, [r4, #8]
 801656c:	4a3f      	ldr	r2, [pc, #252]	; (801666c <tcp_input+0x2b0>)
 801656e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016570:	4b35      	ldr	r3, [pc, #212]	; (8016648 <tcp_input+0x28c>)
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	89db      	ldrh	r3, [r3, #14]
 8016576:	b29b      	uxth	r3, r3
 8016578:	4a33      	ldr	r2, [pc, #204]	; (8016648 <tcp_input+0x28c>)
 801657a:	6814      	ldr	r4, [r2, #0]
 801657c:	4618      	mov	r0, r3
 801657e:	f7fc fb89 	bl	8012c94 <lwip_htons>
 8016582:	4603      	mov	r3, r0
 8016584:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016586:	4b30      	ldr	r3, [pc, #192]	; (8016648 <tcp_input+0x28c>)
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	899b      	ldrh	r3, [r3, #12]
 801658c:	b29b      	uxth	r3, r3
 801658e:	4618      	mov	r0, r3
 8016590:	f7fc fb80 	bl	8012c94 <lwip_htons>
 8016594:	4603      	mov	r3, r0
 8016596:	b2db      	uxtb	r3, r3
 8016598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801659c:	b2da      	uxtb	r2, r3
 801659e:	4b34      	ldr	r3, [pc, #208]	; (8016670 <tcp_input+0x2b4>)
 80165a0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	891a      	ldrh	r2, [r3, #8]
 80165a6:	4b33      	ldr	r3, [pc, #204]	; (8016674 <tcp_input+0x2b8>)
 80165a8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80165aa:	4b31      	ldr	r3, [pc, #196]	; (8016670 <tcp_input+0x2b4>)
 80165ac:	781b      	ldrb	r3, [r3, #0]
 80165ae:	f003 0303 	and.w	r3, r3, #3
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d00c      	beq.n	80165d0 <tcp_input+0x214>
    tcplen++;
 80165b6:	4b2f      	ldr	r3, [pc, #188]	; (8016674 <tcp_input+0x2b8>)
 80165b8:	881b      	ldrh	r3, [r3, #0]
 80165ba:	3301      	adds	r3, #1
 80165bc:	b29a      	uxth	r2, r3
 80165be:	4b2d      	ldr	r3, [pc, #180]	; (8016674 <tcp_input+0x2b8>)
 80165c0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	891a      	ldrh	r2, [r3, #8]
 80165c6:	4b2b      	ldr	r3, [pc, #172]	; (8016674 <tcp_input+0x2b8>)
 80165c8:	881b      	ldrh	r3, [r3, #0]
 80165ca:	429a      	cmp	r2, r3
 80165cc:	f200 82d9 	bhi.w	8016b82 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80165d0:	2300      	movs	r3, #0
 80165d2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80165d4:	4b28      	ldr	r3, [pc, #160]	; (8016678 <tcp_input+0x2bc>)
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	61fb      	str	r3, [r7, #28]
 80165da:	e09d      	b.n	8016718 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80165dc:	69fb      	ldr	r3, [r7, #28]
 80165de:	7d1b      	ldrb	r3, [r3, #20]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d105      	bne.n	80165f0 <tcp_input+0x234>
 80165e4:	4b15      	ldr	r3, [pc, #84]	; (801663c <tcp_input+0x280>)
 80165e6:	22fb      	movs	r2, #251	; 0xfb
 80165e8:	4924      	ldr	r1, [pc, #144]	; (801667c <tcp_input+0x2c0>)
 80165ea:	4816      	ldr	r0, [pc, #88]	; (8016644 <tcp_input+0x288>)
 80165ec:	f008 fc86 	bl	801eefc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80165f0:	69fb      	ldr	r3, [r7, #28]
 80165f2:	7d1b      	ldrb	r3, [r3, #20]
 80165f4:	2b0a      	cmp	r3, #10
 80165f6:	d105      	bne.n	8016604 <tcp_input+0x248>
 80165f8:	4b10      	ldr	r3, [pc, #64]	; (801663c <tcp_input+0x280>)
 80165fa:	22fc      	movs	r2, #252	; 0xfc
 80165fc:	4920      	ldr	r1, [pc, #128]	; (8016680 <tcp_input+0x2c4>)
 80165fe:	4811      	ldr	r0, [pc, #68]	; (8016644 <tcp_input+0x288>)
 8016600:	f008 fc7c 	bl	801eefc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016604:	69fb      	ldr	r3, [r7, #28]
 8016606:	7d1b      	ldrb	r3, [r3, #20]
 8016608:	2b01      	cmp	r3, #1
 801660a:	d105      	bne.n	8016618 <tcp_input+0x25c>
 801660c:	4b0b      	ldr	r3, [pc, #44]	; (801663c <tcp_input+0x280>)
 801660e:	22fd      	movs	r2, #253	; 0xfd
 8016610:	491c      	ldr	r1, [pc, #112]	; (8016684 <tcp_input+0x2c8>)
 8016612:	480c      	ldr	r0, [pc, #48]	; (8016644 <tcp_input+0x288>)
 8016614:	f008 fc72 	bl	801eefc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016618:	69fb      	ldr	r3, [r7, #28]
 801661a:	7a1b      	ldrb	r3, [r3, #8]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d033      	beq.n	8016688 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016620:	69fb      	ldr	r3, [r7, #28]
 8016622:	7a1a      	ldrb	r2, [r3, #8]
 8016624:	4b09      	ldr	r3, [pc, #36]	; (801664c <tcp_input+0x290>)
 8016626:	685b      	ldr	r3, [r3, #4]
 8016628:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801662c:	3301      	adds	r3, #1
 801662e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016630:	429a      	cmp	r2, r3
 8016632:	d029      	beq.n	8016688 <tcp_input+0x2cc>
      prev = pcb;
 8016634:	69fb      	ldr	r3, [r7, #28]
 8016636:	61bb      	str	r3, [r7, #24]
      continue;
 8016638:	e06b      	b.n	8016712 <tcp_input+0x356>
 801663a:	bf00      	nop
 801663c:	080251cc 	.word	0x080251cc
 8016640:	08025200 	.word	0x08025200
 8016644:	08025218 	.word	0x08025218
 8016648:	20006dcc 	.word	0x20006dcc
 801664c:	2000a9e8 	.word	0x2000a9e8
 8016650:	20006dd0 	.word	0x20006dd0
 8016654:	20006dd4 	.word	0x20006dd4
 8016658:	20006dd2 	.word	0x20006dd2
 801665c:	08025240 	.word	0x08025240
 8016660:	08025250 	.word	0x08025250
 8016664:	0802525c 	.word	0x0802525c
 8016668:	20006ddc 	.word	0x20006ddc
 801666c:	20006de0 	.word	0x20006de0
 8016670:	20006de8 	.word	0x20006de8
 8016674:	20006de6 	.word	0x20006de6
 8016678:	2000e0fc 	.word	0x2000e0fc
 801667c:	0802527c 	.word	0x0802527c
 8016680:	080252a4 	.word	0x080252a4
 8016684:	080252d0 	.word	0x080252d0
    }

    if (pcb->remote_port == tcphdr->src &&
 8016688:	69fb      	ldr	r3, [r7, #28]
 801668a:	8b1a      	ldrh	r2, [r3, #24]
 801668c:	4b94      	ldr	r3, [pc, #592]	; (80168e0 <tcp_input+0x524>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	881b      	ldrh	r3, [r3, #0]
 8016692:	b29b      	uxth	r3, r3
 8016694:	429a      	cmp	r2, r3
 8016696:	d13a      	bne.n	801670e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016698:	69fb      	ldr	r3, [r7, #28]
 801669a:	8ada      	ldrh	r2, [r3, #22]
 801669c:	4b90      	ldr	r3, [pc, #576]	; (80168e0 <tcp_input+0x524>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	885b      	ldrh	r3, [r3, #2]
 80166a2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80166a4:	429a      	cmp	r2, r3
 80166a6:	d132      	bne.n	801670e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80166a8:	69fb      	ldr	r3, [r7, #28]
 80166aa:	685a      	ldr	r2, [r3, #4]
 80166ac:	4b8d      	ldr	r3, [pc, #564]	; (80168e4 <tcp_input+0x528>)
 80166ae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d12c      	bne.n	801670e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80166b4:	69fb      	ldr	r3, [r7, #28]
 80166b6:	681a      	ldr	r2, [r3, #0]
 80166b8:	4b8a      	ldr	r3, [pc, #552]	; (80168e4 <tcp_input+0x528>)
 80166ba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80166bc:	429a      	cmp	r2, r3
 80166be:	d126      	bne.n	801670e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80166c0:	69fb      	ldr	r3, [r7, #28]
 80166c2:	68db      	ldr	r3, [r3, #12]
 80166c4:	69fa      	ldr	r2, [r7, #28]
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d106      	bne.n	80166d8 <tcp_input+0x31c>
 80166ca:	4b87      	ldr	r3, [pc, #540]	; (80168e8 <tcp_input+0x52c>)
 80166cc:	f240 120d 	movw	r2, #269	; 0x10d
 80166d0:	4986      	ldr	r1, [pc, #536]	; (80168ec <tcp_input+0x530>)
 80166d2:	4887      	ldr	r0, [pc, #540]	; (80168f0 <tcp_input+0x534>)
 80166d4:	f008 fc12 	bl	801eefc <iprintf>
      if (prev != NULL) {
 80166d8:	69bb      	ldr	r3, [r7, #24]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d00a      	beq.n	80166f4 <tcp_input+0x338>
        prev->next = pcb->next;
 80166de:	69fb      	ldr	r3, [r7, #28]
 80166e0:	68da      	ldr	r2, [r3, #12]
 80166e2:	69bb      	ldr	r3, [r7, #24]
 80166e4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80166e6:	4b83      	ldr	r3, [pc, #524]	; (80168f4 <tcp_input+0x538>)
 80166e8:	681a      	ldr	r2, [r3, #0]
 80166ea:	69fb      	ldr	r3, [r7, #28]
 80166ec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80166ee:	4a81      	ldr	r2, [pc, #516]	; (80168f4 <tcp_input+0x538>)
 80166f0:	69fb      	ldr	r3, [r7, #28]
 80166f2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80166f4:	69fb      	ldr	r3, [r7, #28]
 80166f6:	68db      	ldr	r3, [r3, #12]
 80166f8:	69fa      	ldr	r2, [r7, #28]
 80166fa:	429a      	cmp	r2, r3
 80166fc:	d111      	bne.n	8016722 <tcp_input+0x366>
 80166fe:	4b7a      	ldr	r3, [pc, #488]	; (80168e8 <tcp_input+0x52c>)
 8016700:	f240 1215 	movw	r2, #277	; 0x115
 8016704:	497c      	ldr	r1, [pc, #496]	; (80168f8 <tcp_input+0x53c>)
 8016706:	487a      	ldr	r0, [pc, #488]	; (80168f0 <tcp_input+0x534>)
 8016708:	f008 fbf8 	bl	801eefc <iprintf>
      break;
 801670c:	e009      	b.n	8016722 <tcp_input+0x366>
    }
    prev = pcb;
 801670e:	69fb      	ldr	r3, [r7, #28]
 8016710:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016712:	69fb      	ldr	r3, [r7, #28]
 8016714:	68db      	ldr	r3, [r3, #12]
 8016716:	61fb      	str	r3, [r7, #28]
 8016718:	69fb      	ldr	r3, [r7, #28]
 801671a:	2b00      	cmp	r3, #0
 801671c:	f47f af5e 	bne.w	80165dc <tcp_input+0x220>
 8016720:	e000      	b.n	8016724 <tcp_input+0x368>
      break;
 8016722:	bf00      	nop
  }

  if (pcb == NULL) {
 8016724:	69fb      	ldr	r3, [r7, #28]
 8016726:	2b00      	cmp	r3, #0
 8016728:	f040 8095 	bne.w	8016856 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801672c:	4b73      	ldr	r3, [pc, #460]	; (80168fc <tcp_input+0x540>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	61fb      	str	r3, [r7, #28]
 8016732:	e03f      	b.n	80167b4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016734:	69fb      	ldr	r3, [r7, #28]
 8016736:	7d1b      	ldrb	r3, [r3, #20]
 8016738:	2b0a      	cmp	r3, #10
 801673a:	d006      	beq.n	801674a <tcp_input+0x38e>
 801673c:	4b6a      	ldr	r3, [pc, #424]	; (80168e8 <tcp_input+0x52c>)
 801673e:	f240 121f 	movw	r2, #287	; 0x11f
 8016742:	496f      	ldr	r1, [pc, #444]	; (8016900 <tcp_input+0x544>)
 8016744:	486a      	ldr	r0, [pc, #424]	; (80168f0 <tcp_input+0x534>)
 8016746:	f008 fbd9 	bl	801eefc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801674a:	69fb      	ldr	r3, [r7, #28]
 801674c:	7a1b      	ldrb	r3, [r3, #8]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d009      	beq.n	8016766 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016752:	69fb      	ldr	r3, [r7, #28]
 8016754:	7a1a      	ldrb	r2, [r3, #8]
 8016756:	4b63      	ldr	r3, [pc, #396]	; (80168e4 <tcp_input+0x528>)
 8016758:	685b      	ldr	r3, [r3, #4]
 801675a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801675e:	3301      	adds	r3, #1
 8016760:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016762:	429a      	cmp	r2, r3
 8016764:	d122      	bne.n	80167ac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016766:	69fb      	ldr	r3, [r7, #28]
 8016768:	8b1a      	ldrh	r2, [r3, #24]
 801676a:	4b5d      	ldr	r3, [pc, #372]	; (80168e0 <tcp_input+0x524>)
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	881b      	ldrh	r3, [r3, #0]
 8016770:	b29b      	uxth	r3, r3
 8016772:	429a      	cmp	r2, r3
 8016774:	d11b      	bne.n	80167ae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8016776:	69fb      	ldr	r3, [r7, #28]
 8016778:	8ada      	ldrh	r2, [r3, #22]
 801677a:	4b59      	ldr	r3, [pc, #356]	; (80168e0 <tcp_input+0x524>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	885b      	ldrh	r3, [r3, #2]
 8016780:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8016782:	429a      	cmp	r2, r3
 8016784:	d113      	bne.n	80167ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016786:	69fb      	ldr	r3, [r7, #28]
 8016788:	685a      	ldr	r2, [r3, #4]
 801678a:	4b56      	ldr	r3, [pc, #344]	; (80168e4 <tcp_input+0x528>)
 801678c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801678e:	429a      	cmp	r2, r3
 8016790:	d10d      	bne.n	80167ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016792:	69fb      	ldr	r3, [r7, #28]
 8016794:	681a      	ldr	r2, [r3, #0]
 8016796:	4b53      	ldr	r3, [pc, #332]	; (80168e4 <tcp_input+0x528>)
 8016798:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801679a:	429a      	cmp	r2, r3
 801679c:	d107      	bne.n	80167ae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801679e:	69f8      	ldr	r0, [r7, #28]
 80167a0:	f000 fb54 	bl	8016e4c <tcp_timewait_input>
        }
        pbuf_free(p);
 80167a4:	6878      	ldr	r0, [r7, #4]
 80167a6:	f7fd fdbd 	bl	8014324 <pbuf_free>
        return;
 80167aa:	e1f0      	b.n	8016b8e <tcp_input+0x7d2>
        continue;
 80167ac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80167ae:	69fb      	ldr	r3, [r7, #28]
 80167b0:	68db      	ldr	r3, [r3, #12]
 80167b2:	61fb      	str	r3, [r7, #28]
 80167b4:	69fb      	ldr	r3, [r7, #28]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d1bc      	bne.n	8016734 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80167ba:	2300      	movs	r3, #0
 80167bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80167be:	4b51      	ldr	r3, [pc, #324]	; (8016904 <tcp_input+0x548>)
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	617b      	str	r3, [r7, #20]
 80167c4:	e02a      	b.n	801681c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80167c6:	697b      	ldr	r3, [r7, #20]
 80167c8:	7a1b      	ldrb	r3, [r3, #8]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d00c      	beq.n	80167e8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80167ce:	697b      	ldr	r3, [r7, #20]
 80167d0:	7a1a      	ldrb	r2, [r3, #8]
 80167d2:	4b44      	ldr	r3, [pc, #272]	; (80168e4 <tcp_input+0x528>)
 80167d4:	685b      	ldr	r3, [r3, #4]
 80167d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80167da:	3301      	adds	r3, #1
 80167dc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80167de:	429a      	cmp	r2, r3
 80167e0:	d002      	beq.n	80167e8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80167e2:	697b      	ldr	r3, [r7, #20]
 80167e4:	61bb      	str	r3, [r7, #24]
        continue;
 80167e6:	e016      	b.n	8016816 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80167e8:	697b      	ldr	r3, [r7, #20]
 80167ea:	8ada      	ldrh	r2, [r3, #22]
 80167ec:	4b3c      	ldr	r3, [pc, #240]	; (80168e0 <tcp_input+0x524>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	885b      	ldrh	r3, [r3, #2]
 80167f2:	b29b      	uxth	r3, r3
 80167f4:	429a      	cmp	r2, r3
 80167f6:	d10c      	bne.n	8016812 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80167f8:	697b      	ldr	r3, [r7, #20]
 80167fa:	681a      	ldr	r2, [r3, #0]
 80167fc:	4b39      	ldr	r3, [pc, #228]	; (80168e4 <tcp_input+0x528>)
 80167fe:	695b      	ldr	r3, [r3, #20]
 8016800:	429a      	cmp	r2, r3
 8016802:	d00f      	beq.n	8016824 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016804:	697b      	ldr	r3, [r7, #20]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d00d      	beq.n	8016826 <tcp_input+0x46a>
 801680a:	697b      	ldr	r3, [r7, #20]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d009      	beq.n	8016826 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016812:	697b      	ldr	r3, [r7, #20]
 8016814:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016816:	697b      	ldr	r3, [r7, #20]
 8016818:	68db      	ldr	r3, [r3, #12]
 801681a:	617b      	str	r3, [r7, #20]
 801681c:	697b      	ldr	r3, [r7, #20]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d1d1      	bne.n	80167c6 <tcp_input+0x40a>
 8016822:	e000      	b.n	8016826 <tcp_input+0x46a>
            break;
 8016824:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016826:	697b      	ldr	r3, [r7, #20]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d014      	beq.n	8016856 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801682c:	69bb      	ldr	r3, [r7, #24]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d00a      	beq.n	8016848 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016832:	697b      	ldr	r3, [r7, #20]
 8016834:	68da      	ldr	r2, [r3, #12]
 8016836:	69bb      	ldr	r3, [r7, #24]
 8016838:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801683a:	4b32      	ldr	r3, [pc, #200]	; (8016904 <tcp_input+0x548>)
 801683c:	681a      	ldr	r2, [r3, #0]
 801683e:	697b      	ldr	r3, [r7, #20]
 8016840:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016842:	4a30      	ldr	r2, [pc, #192]	; (8016904 <tcp_input+0x548>)
 8016844:	697b      	ldr	r3, [r7, #20]
 8016846:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016848:	6978      	ldr	r0, [r7, #20]
 801684a:	f000 fa01 	bl	8016c50 <tcp_listen_input>
      }
      pbuf_free(p);
 801684e:	6878      	ldr	r0, [r7, #4]
 8016850:	f7fd fd68 	bl	8014324 <pbuf_free>
      return;
 8016854:	e19b      	b.n	8016b8e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016856:	69fb      	ldr	r3, [r7, #28]
 8016858:	2b00      	cmp	r3, #0
 801685a:	f000 8160 	beq.w	8016b1e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801685e:	4b2a      	ldr	r3, [pc, #168]	; (8016908 <tcp_input+0x54c>)
 8016860:	2200      	movs	r2, #0
 8016862:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	891a      	ldrh	r2, [r3, #8]
 8016868:	4b27      	ldr	r3, [pc, #156]	; (8016908 <tcp_input+0x54c>)
 801686a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801686c:	4a26      	ldr	r2, [pc, #152]	; (8016908 <tcp_input+0x54c>)
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016872:	4b1b      	ldr	r3, [pc, #108]	; (80168e0 <tcp_input+0x524>)
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	4a24      	ldr	r2, [pc, #144]	; (8016908 <tcp_input+0x54c>)
 8016878:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801687a:	4b24      	ldr	r3, [pc, #144]	; (801690c <tcp_input+0x550>)
 801687c:	2200      	movs	r2, #0
 801687e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016880:	4b23      	ldr	r3, [pc, #140]	; (8016910 <tcp_input+0x554>)
 8016882:	2200      	movs	r2, #0
 8016884:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016886:	4b23      	ldr	r3, [pc, #140]	; (8016914 <tcp_input+0x558>)
 8016888:	2200      	movs	r2, #0
 801688a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801688c:	4b22      	ldr	r3, [pc, #136]	; (8016918 <tcp_input+0x55c>)
 801688e:	781b      	ldrb	r3, [r3, #0]
 8016890:	f003 0308 	and.w	r3, r3, #8
 8016894:	2b00      	cmp	r3, #0
 8016896:	d006      	beq.n	80168a6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	7b5b      	ldrb	r3, [r3, #13]
 801689c:	f043 0301 	orr.w	r3, r3, #1
 80168a0:	b2da      	uxtb	r2, r3
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80168a6:	69fb      	ldr	r3, [r7, #28]
 80168a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d038      	beq.n	8016920 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80168ae:	69f8      	ldr	r0, [r7, #28]
 80168b0:	f7ff f870 	bl	8015994 <tcp_process_refused_data>
 80168b4:	4603      	mov	r3, r0
 80168b6:	f113 0f0d 	cmn.w	r3, #13
 80168ba:	d007      	beq.n	80168cc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80168bc:	69fb      	ldr	r3, [r7, #28]
 80168be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d02d      	beq.n	8016920 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80168c4:	4b15      	ldr	r3, [pc, #84]	; (801691c <tcp_input+0x560>)
 80168c6:	881b      	ldrh	r3, [r3, #0]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d029      	beq.n	8016920 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80168cc:	69fb      	ldr	r3, [r7, #28]
 80168ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	f040 8104 	bne.w	8016ade <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80168d6:	69f8      	ldr	r0, [r7, #28]
 80168d8:	f003 fe16 	bl	801a508 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80168dc:	e0ff      	b.n	8016ade <tcp_input+0x722>
 80168de:	bf00      	nop
 80168e0:	20006dcc 	.word	0x20006dcc
 80168e4:	2000a9e8 	.word	0x2000a9e8
 80168e8:	080251cc 	.word	0x080251cc
 80168ec:	080252f8 	.word	0x080252f8
 80168f0:	08025218 	.word	0x08025218
 80168f4:	2000e0fc 	.word	0x2000e0fc
 80168f8:	08025324 	.word	0x08025324
 80168fc:	2000e10c 	.word	0x2000e10c
 8016900:	08025350 	.word	0x08025350
 8016904:	2000e104 	.word	0x2000e104
 8016908:	20006dbc 	.word	0x20006dbc
 801690c:	20006dec 	.word	0x20006dec
 8016910:	20006de9 	.word	0x20006de9
 8016914:	20006de4 	.word	0x20006de4
 8016918:	20006de8 	.word	0x20006de8
 801691c:	20006de6 	.word	0x20006de6
      }
    }
    tcp_input_pcb = pcb;
 8016920:	4a9c      	ldr	r2, [pc, #624]	; (8016b94 <tcp_input+0x7d8>)
 8016922:	69fb      	ldr	r3, [r7, #28]
 8016924:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016926:	69f8      	ldr	r0, [r7, #28]
 8016928:	f000 fb0a 	bl	8016f40 <tcp_process>
 801692c:	4603      	mov	r3, r0
 801692e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016930:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016934:	f113 0f0d 	cmn.w	r3, #13
 8016938:	f000 80d3 	beq.w	8016ae2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801693c:	4b96      	ldr	r3, [pc, #600]	; (8016b98 <tcp_input+0x7dc>)
 801693e:	781b      	ldrb	r3, [r3, #0]
 8016940:	f003 0308 	and.w	r3, r3, #8
 8016944:	2b00      	cmp	r3, #0
 8016946:	d015      	beq.n	8016974 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016948:	69fb      	ldr	r3, [r7, #28]
 801694a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801694e:	2b00      	cmp	r3, #0
 8016950:	d008      	beq.n	8016964 <tcp_input+0x5a8>
 8016952:	69fb      	ldr	r3, [r7, #28]
 8016954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016958:	69fa      	ldr	r2, [r7, #28]
 801695a:	6912      	ldr	r2, [r2, #16]
 801695c:	f06f 010d 	mvn.w	r1, #13
 8016960:	4610      	mov	r0, r2
 8016962:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016964:	69f9      	ldr	r1, [r7, #28]
 8016966:	488d      	ldr	r0, [pc, #564]	; (8016b9c <tcp_input+0x7e0>)
 8016968:	f7ff fbb0 	bl	80160cc <tcp_pcb_remove>
        tcp_free(pcb);
 801696c:	69f8      	ldr	r0, [r7, #28]
 801696e:	f7fd ff95 	bl	801489c <tcp_free>
 8016972:	e0c1      	b.n	8016af8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8016974:	2300      	movs	r3, #0
 8016976:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8016978:	4b89      	ldr	r3, [pc, #548]	; (8016ba0 <tcp_input+0x7e4>)
 801697a:	881b      	ldrh	r3, [r3, #0]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d01d      	beq.n	80169bc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016980:	4b87      	ldr	r3, [pc, #540]	; (8016ba0 <tcp_input+0x7e4>)
 8016982:	881b      	ldrh	r3, [r3, #0]
 8016984:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016986:	69fb      	ldr	r3, [r7, #28]
 8016988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801698c:	2b00      	cmp	r3, #0
 801698e:	d00a      	beq.n	80169a6 <tcp_input+0x5ea>
 8016990:	69fb      	ldr	r3, [r7, #28]
 8016992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016996:	69fa      	ldr	r2, [r7, #28]
 8016998:	6910      	ldr	r0, [r2, #16]
 801699a:	89fa      	ldrh	r2, [r7, #14]
 801699c:	69f9      	ldr	r1, [r7, #28]
 801699e:	4798      	blx	r3
 80169a0:	4603      	mov	r3, r0
 80169a2:	74fb      	strb	r3, [r7, #19]
 80169a4:	e001      	b.n	80169aa <tcp_input+0x5ee>
 80169a6:	2300      	movs	r3, #0
 80169a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80169aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80169ae:	f113 0f0d 	cmn.w	r3, #13
 80169b2:	f000 8098 	beq.w	8016ae6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80169b6:	4b7a      	ldr	r3, [pc, #488]	; (8016ba0 <tcp_input+0x7e4>)
 80169b8:	2200      	movs	r2, #0
 80169ba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80169bc:	69f8      	ldr	r0, [r7, #28]
 80169be:	f000 f907 	bl	8016bd0 <tcp_input_delayed_close>
 80169c2:	4603      	mov	r3, r0
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	f040 8090 	bne.w	8016aea <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80169ca:	4b76      	ldr	r3, [pc, #472]	; (8016ba4 <tcp_input+0x7e8>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d041      	beq.n	8016a56 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80169d2:	69fb      	ldr	r3, [r7, #28]
 80169d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d006      	beq.n	80169e8 <tcp_input+0x62c>
 80169da:	4b73      	ldr	r3, [pc, #460]	; (8016ba8 <tcp_input+0x7ec>)
 80169dc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80169e0:	4972      	ldr	r1, [pc, #456]	; (8016bac <tcp_input+0x7f0>)
 80169e2:	4873      	ldr	r0, [pc, #460]	; (8016bb0 <tcp_input+0x7f4>)
 80169e4:	f008 fa8a 	bl	801eefc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80169e8:	69fb      	ldr	r3, [r7, #28]
 80169ea:	8b5b      	ldrh	r3, [r3, #26]
 80169ec:	f003 0310 	and.w	r3, r3, #16
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d008      	beq.n	8016a06 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80169f4:	4b6b      	ldr	r3, [pc, #428]	; (8016ba4 <tcp_input+0x7e8>)
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7fd fc93 	bl	8014324 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80169fe:	69f8      	ldr	r0, [r7, #28]
 8016a00:	f7fe fa90 	bl	8014f24 <tcp_abort>
            goto aborted;
 8016a04:	e078      	b.n	8016af8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016a06:	69fb      	ldr	r3, [r7, #28]
 8016a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d00c      	beq.n	8016a2a <tcp_input+0x66e>
 8016a10:	69fb      	ldr	r3, [r7, #28]
 8016a12:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016a16:	69fb      	ldr	r3, [r7, #28]
 8016a18:	6918      	ldr	r0, [r3, #16]
 8016a1a:	4b62      	ldr	r3, [pc, #392]	; (8016ba4 <tcp_input+0x7e8>)
 8016a1c:	681a      	ldr	r2, [r3, #0]
 8016a1e:	2300      	movs	r3, #0
 8016a20:	69f9      	ldr	r1, [r7, #28]
 8016a22:	47a0      	blx	r4
 8016a24:	4603      	mov	r3, r0
 8016a26:	74fb      	strb	r3, [r7, #19]
 8016a28:	e008      	b.n	8016a3c <tcp_input+0x680>
 8016a2a:	4b5e      	ldr	r3, [pc, #376]	; (8016ba4 <tcp_input+0x7e8>)
 8016a2c:	681a      	ldr	r2, [r3, #0]
 8016a2e:	2300      	movs	r3, #0
 8016a30:	69f9      	ldr	r1, [r7, #28]
 8016a32:	2000      	movs	r0, #0
 8016a34:	f7ff f884 	bl	8015b40 <tcp_recv_null>
 8016a38:	4603      	mov	r3, r0
 8016a3a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016a3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a40:	f113 0f0d 	cmn.w	r3, #13
 8016a44:	d053      	beq.n	8016aee <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016a46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d003      	beq.n	8016a56 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016a4e:	4b55      	ldr	r3, [pc, #340]	; (8016ba4 <tcp_input+0x7e8>)
 8016a50:	681a      	ldr	r2, [r3, #0]
 8016a52:	69fb      	ldr	r3, [r7, #28]
 8016a54:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016a56:	4b50      	ldr	r3, [pc, #320]	; (8016b98 <tcp_input+0x7dc>)
 8016a58:	781b      	ldrb	r3, [r3, #0]
 8016a5a:	f003 0320 	and.w	r3, r3, #32
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d030      	beq.n	8016ac4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8016a62:	69fb      	ldr	r3, [r7, #28]
 8016a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d009      	beq.n	8016a7e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016a6a:	69fb      	ldr	r3, [r7, #28]
 8016a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016a6e:	7b5a      	ldrb	r2, [r3, #13]
 8016a70:	69fb      	ldr	r3, [r7, #28]
 8016a72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016a74:	f042 0220 	orr.w	r2, r2, #32
 8016a78:	b2d2      	uxtb	r2, r2
 8016a7a:	735a      	strb	r2, [r3, #13]
 8016a7c:	e022      	b.n	8016ac4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016a7e:	69fb      	ldr	r3, [r7, #28]
 8016a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a82:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016a86:	d005      	beq.n	8016a94 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8016a88:	69fb      	ldr	r3, [r7, #28]
 8016a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a8c:	3301      	adds	r3, #1
 8016a8e:	b29a      	uxth	r2, r3
 8016a90:	69fb      	ldr	r3, [r7, #28]
 8016a92:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016a94:	69fb      	ldr	r3, [r7, #28]
 8016a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d00b      	beq.n	8016ab6 <tcp_input+0x6fa>
 8016a9e:	69fb      	ldr	r3, [r7, #28]
 8016aa0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016aa4:	69fb      	ldr	r3, [r7, #28]
 8016aa6:	6918      	ldr	r0, [r3, #16]
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	2200      	movs	r2, #0
 8016aac:	69f9      	ldr	r1, [r7, #28]
 8016aae:	47a0      	blx	r4
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	74fb      	strb	r3, [r7, #19]
 8016ab4:	e001      	b.n	8016aba <tcp_input+0x6fe>
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016aba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016abe:	f113 0f0d 	cmn.w	r3, #13
 8016ac2:	d016      	beq.n	8016af2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016ac4:	4b33      	ldr	r3, [pc, #204]	; (8016b94 <tcp_input+0x7d8>)
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016aca:	69f8      	ldr	r0, [r7, #28]
 8016acc:	f000 f880 	bl	8016bd0 <tcp_input_delayed_close>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d10f      	bne.n	8016af6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016ad6:	69f8      	ldr	r0, [r7, #28]
 8016ad8:	f002 ff10 	bl	80198fc <tcp_output>
 8016adc:	e00c      	b.n	8016af8 <tcp_input+0x73c>
        goto aborted;
 8016ade:	bf00      	nop
 8016ae0:	e00a      	b.n	8016af8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016ae2:	bf00      	nop
 8016ae4:	e008      	b.n	8016af8 <tcp_input+0x73c>
              goto aborted;
 8016ae6:	bf00      	nop
 8016ae8:	e006      	b.n	8016af8 <tcp_input+0x73c>
          goto aborted;
 8016aea:	bf00      	nop
 8016aec:	e004      	b.n	8016af8 <tcp_input+0x73c>
            goto aborted;
 8016aee:	bf00      	nop
 8016af0:	e002      	b.n	8016af8 <tcp_input+0x73c>
              goto aborted;
 8016af2:	bf00      	nop
 8016af4:	e000      	b.n	8016af8 <tcp_input+0x73c>
          goto aborted;
 8016af6:	bf00      	nop
    tcp_input_pcb = NULL;
 8016af8:	4b26      	ldr	r3, [pc, #152]	; (8016b94 <tcp_input+0x7d8>)
 8016afa:	2200      	movs	r2, #0
 8016afc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016afe:	4b29      	ldr	r3, [pc, #164]	; (8016ba4 <tcp_input+0x7e8>)
 8016b00:	2200      	movs	r2, #0
 8016b02:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016b04:	4b2b      	ldr	r3, [pc, #172]	; (8016bb4 <tcp_input+0x7f8>)
 8016b06:	685b      	ldr	r3, [r3, #4]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d03f      	beq.n	8016b8c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8016b0c:	4b29      	ldr	r3, [pc, #164]	; (8016bb4 <tcp_input+0x7f8>)
 8016b0e:	685b      	ldr	r3, [r3, #4]
 8016b10:	4618      	mov	r0, r3
 8016b12:	f7fd fc07 	bl	8014324 <pbuf_free>
      inseg.p = NULL;
 8016b16:	4b27      	ldr	r3, [pc, #156]	; (8016bb4 <tcp_input+0x7f8>)
 8016b18:	2200      	movs	r2, #0
 8016b1a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016b1c:	e036      	b.n	8016b8c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016b1e:	4b26      	ldr	r3, [pc, #152]	; (8016bb8 <tcp_input+0x7fc>)
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	899b      	ldrh	r3, [r3, #12]
 8016b24:	b29b      	uxth	r3, r3
 8016b26:	4618      	mov	r0, r3
 8016b28:	f7fc f8b4 	bl	8012c94 <lwip_htons>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	b2db      	uxtb	r3, r3
 8016b30:	f003 0304 	and.w	r3, r3, #4
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d118      	bne.n	8016b6a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b38:	4b20      	ldr	r3, [pc, #128]	; (8016bbc <tcp_input+0x800>)
 8016b3a:	6819      	ldr	r1, [r3, #0]
 8016b3c:	4b20      	ldr	r3, [pc, #128]	; (8016bc0 <tcp_input+0x804>)
 8016b3e:	881b      	ldrh	r3, [r3, #0]
 8016b40:	461a      	mov	r2, r3
 8016b42:	4b20      	ldr	r3, [pc, #128]	; (8016bc4 <tcp_input+0x808>)
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016b48:	4b1b      	ldr	r3, [pc, #108]	; (8016bb8 <tcp_input+0x7fc>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b4c:	885b      	ldrh	r3, [r3, #2]
 8016b4e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016b50:	4a19      	ldr	r2, [pc, #100]	; (8016bb8 <tcp_input+0x7fc>)
 8016b52:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b54:	8812      	ldrh	r2, [r2, #0]
 8016b56:	b292      	uxth	r2, r2
 8016b58:	9202      	str	r2, [sp, #8]
 8016b5a:	9301      	str	r3, [sp, #4]
 8016b5c:	4b1a      	ldr	r3, [pc, #104]	; (8016bc8 <tcp_input+0x80c>)
 8016b5e:	9300      	str	r3, [sp, #0]
 8016b60:	4b1a      	ldr	r3, [pc, #104]	; (8016bcc <tcp_input+0x810>)
 8016b62:	4602      	mov	r2, r0
 8016b64:	2000      	movs	r0, #0
 8016b66:	f003 fc7d 	bl	801a464 <tcp_rst>
    pbuf_free(p);
 8016b6a:	6878      	ldr	r0, [r7, #4]
 8016b6c:	f7fd fbda 	bl	8014324 <pbuf_free>
  return;
 8016b70:	e00c      	b.n	8016b8c <tcp_input+0x7d0>
    goto dropped;
 8016b72:	bf00      	nop
 8016b74:	e006      	b.n	8016b84 <tcp_input+0x7c8>
    goto dropped;
 8016b76:	bf00      	nop
 8016b78:	e004      	b.n	8016b84 <tcp_input+0x7c8>
    goto dropped;
 8016b7a:	bf00      	nop
 8016b7c:	e002      	b.n	8016b84 <tcp_input+0x7c8>
      goto dropped;
 8016b7e:	bf00      	nop
 8016b80:	e000      	b.n	8016b84 <tcp_input+0x7c8>
      goto dropped;
 8016b82:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	f7fd fbcd 	bl	8014324 <pbuf_free>
 8016b8a:	e000      	b.n	8016b8e <tcp_input+0x7d2>
  return;
 8016b8c:	bf00      	nop
}
 8016b8e:	3724      	adds	r7, #36	; 0x24
 8016b90:	46bd      	mov	sp, r7
 8016b92:	bd90      	pop	{r4, r7, pc}
 8016b94:	2000e110 	.word	0x2000e110
 8016b98:	20006de9 	.word	0x20006de9
 8016b9c:	2000e0fc 	.word	0x2000e0fc
 8016ba0:	20006de4 	.word	0x20006de4
 8016ba4:	20006dec 	.word	0x20006dec
 8016ba8:	080251cc 	.word	0x080251cc
 8016bac:	08025380 	.word	0x08025380
 8016bb0:	08025218 	.word	0x08025218
 8016bb4:	20006dbc 	.word	0x20006dbc
 8016bb8:	20006dcc 	.word	0x20006dcc
 8016bbc:	20006de0 	.word	0x20006de0
 8016bc0:	20006de6 	.word	0x20006de6
 8016bc4:	20006ddc 	.word	0x20006ddc
 8016bc8:	2000a9f8 	.word	0x2000a9f8
 8016bcc:	2000a9fc 	.word	0x2000a9fc

08016bd0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016bd0:	b580      	push	{r7, lr}
 8016bd2:	b082      	sub	sp, #8
 8016bd4:	af00      	add	r7, sp, #0
 8016bd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d106      	bne.n	8016bec <tcp_input_delayed_close+0x1c>
 8016bde:	4b17      	ldr	r3, [pc, #92]	; (8016c3c <tcp_input_delayed_close+0x6c>)
 8016be0:	f240 225a 	movw	r2, #602	; 0x25a
 8016be4:	4916      	ldr	r1, [pc, #88]	; (8016c40 <tcp_input_delayed_close+0x70>)
 8016be6:	4817      	ldr	r0, [pc, #92]	; (8016c44 <tcp_input_delayed_close+0x74>)
 8016be8:	f008 f988 	bl	801eefc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016bec:	4b16      	ldr	r3, [pc, #88]	; (8016c48 <tcp_input_delayed_close+0x78>)
 8016bee:	781b      	ldrb	r3, [r3, #0]
 8016bf0:	f003 0310 	and.w	r3, r3, #16
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d01c      	beq.n	8016c32 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	8b5b      	ldrh	r3, [r3, #26]
 8016bfc:	f003 0310 	and.w	r3, r3, #16
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d10d      	bne.n	8016c20 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d008      	beq.n	8016c20 <tcp_input_delayed_close+0x50>
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016c14:	687a      	ldr	r2, [r7, #4]
 8016c16:	6912      	ldr	r2, [r2, #16]
 8016c18:	f06f 010e 	mvn.w	r1, #14
 8016c1c:	4610      	mov	r0, r2
 8016c1e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016c20:	6879      	ldr	r1, [r7, #4]
 8016c22:	480a      	ldr	r0, [pc, #40]	; (8016c4c <tcp_input_delayed_close+0x7c>)
 8016c24:	f7ff fa52 	bl	80160cc <tcp_pcb_remove>
    tcp_free(pcb);
 8016c28:	6878      	ldr	r0, [r7, #4]
 8016c2a:	f7fd fe37 	bl	801489c <tcp_free>
    return 1;
 8016c2e:	2301      	movs	r3, #1
 8016c30:	e000      	b.n	8016c34 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8016c32:	2300      	movs	r3, #0
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	3708      	adds	r7, #8
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}
 8016c3c:	080251cc 	.word	0x080251cc
 8016c40:	0802539c 	.word	0x0802539c
 8016c44:	08025218 	.word	0x08025218
 8016c48:	20006de9 	.word	0x20006de9
 8016c4c:	2000e0fc 	.word	0x2000e0fc

08016c50 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016c50:	b590      	push	{r4, r7, lr}
 8016c52:	b08b      	sub	sp, #44	; 0x2c
 8016c54:	af04      	add	r7, sp, #16
 8016c56:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016c58:	4b6f      	ldr	r3, [pc, #444]	; (8016e18 <tcp_listen_input+0x1c8>)
 8016c5a:	781b      	ldrb	r3, [r3, #0]
 8016c5c:	f003 0304 	and.w	r3, r3, #4
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	f040 80d2 	bne.w	8016e0a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d106      	bne.n	8016c7a <tcp_listen_input+0x2a>
 8016c6c:	4b6b      	ldr	r3, [pc, #428]	; (8016e1c <tcp_listen_input+0x1cc>)
 8016c6e:	f240 2281 	movw	r2, #641	; 0x281
 8016c72:	496b      	ldr	r1, [pc, #428]	; (8016e20 <tcp_listen_input+0x1d0>)
 8016c74:	486b      	ldr	r0, [pc, #428]	; (8016e24 <tcp_listen_input+0x1d4>)
 8016c76:	f008 f941 	bl	801eefc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016c7a:	4b67      	ldr	r3, [pc, #412]	; (8016e18 <tcp_listen_input+0x1c8>)
 8016c7c:	781b      	ldrb	r3, [r3, #0]
 8016c7e:	f003 0310 	and.w	r3, r3, #16
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d019      	beq.n	8016cba <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c86:	4b68      	ldr	r3, [pc, #416]	; (8016e28 <tcp_listen_input+0x1d8>)
 8016c88:	6819      	ldr	r1, [r3, #0]
 8016c8a:	4b68      	ldr	r3, [pc, #416]	; (8016e2c <tcp_listen_input+0x1dc>)
 8016c8c:	881b      	ldrh	r3, [r3, #0]
 8016c8e:	461a      	mov	r2, r3
 8016c90:	4b67      	ldr	r3, [pc, #412]	; (8016e30 <tcp_listen_input+0x1e0>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016c96:	4b67      	ldr	r3, [pc, #412]	; (8016e34 <tcp_listen_input+0x1e4>)
 8016c98:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c9a:	885b      	ldrh	r3, [r3, #2]
 8016c9c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016c9e:	4a65      	ldr	r2, [pc, #404]	; (8016e34 <tcp_listen_input+0x1e4>)
 8016ca0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ca2:	8812      	ldrh	r2, [r2, #0]
 8016ca4:	b292      	uxth	r2, r2
 8016ca6:	9202      	str	r2, [sp, #8]
 8016ca8:	9301      	str	r3, [sp, #4]
 8016caa:	4b63      	ldr	r3, [pc, #396]	; (8016e38 <tcp_listen_input+0x1e8>)
 8016cac:	9300      	str	r3, [sp, #0]
 8016cae:	4b63      	ldr	r3, [pc, #396]	; (8016e3c <tcp_listen_input+0x1ec>)
 8016cb0:	4602      	mov	r2, r0
 8016cb2:	6878      	ldr	r0, [r7, #4]
 8016cb4:	f003 fbd6 	bl	801a464 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016cb8:	e0a9      	b.n	8016e0e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016cba:	4b57      	ldr	r3, [pc, #348]	; (8016e18 <tcp_listen_input+0x1c8>)
 8016cbc:	781b      	ldrb	r3, [r3, #0]
 8016cbe:	f003 0302 	and.w	r3, r3, #2
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	f000 80a3 	beq.w	8016e0e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	7d5b      	ldrb	r3, [r3, #21]
 8016ccc:	4618      	mov	r0, r3
 8016cce:	f7ff f85b 	bl	8015d88 <tcp_alloc>
 8016cd2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016cd4:	697b      	ldr	r3, [r7, #20]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d111      	bne.n	8016cfe <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	699b      	ldr	r3, [r3, #24]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d00a      	beq.n	8016cf8 <tcp_listen_input+0xa8>
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	699b      	ldr	r3, [r3, #24]
 8016ce6:	687a      	ldr	r2, [r7, #4]
 8016ce8:	6910      	ldr	r0, [r2, #16]
 8016cea:	f04f 32ff 	mov.w	r2, #4294967295
 8016cee:	2100      	movs	r1, #0
 8016cf0:	4798      	blx	r3
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	73bb      	strb	r3, [r7, #14]
      return;
 8016cf6:	e08b      	b.n	8016e10 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016cf8:	23f0      	movs	r3, #240	; 0xf0
 8016cfa:	73bb      	strb	r3, [r7, #14]
      return;
 8016cfc:	e088      	b.n	8016e10 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8016cfe:	4b50      	ldr	r3, [pc, #320]	; (8016e40 <tcp_listen_input+0x1f0>)
 8016d00:	695a      	ldr	r2, [r3, #20]
 8016d02:	697b      	ldr	r3, [r7, #20]
 8016d04:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016d06:	4b4e      	ldr	r3, [pc, #312]	; (8016e40 <tcp_listen_input+0x1f0>)
 8016d08:	691a      	ldr	r2, [r3, #16]
 8016d0a:	697b      	ldr	r3, [r7, #20]
 8016d0c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	8ada      	ldrh	r2, [r3, #22]
 8016d12:	697b      	ldr	r3, [r7, #20]
 8016d14:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016d16:	4b47      	ldr	r3, [pc, #284]	; (8016e34 <tcp_listen_input+0x1e4>)
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	881b      	ldrh	r3, [r3, #0]
 8016d1c:	b29a      	uxth	r2, r3
 8016d1e:	697b      	ldr	r3, [r7, #20]
 8016d20:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8016d22:	697b      	ldr	r3, [r7, #20]
 8016d24:	2203      	movs	r2, #3
 8016d26:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016d28:	4b41      	ldr	r3, [pc, #260]	; (8016e30 <tcp_listen_input+0x1e0>)
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	1c5a      	adds	r2, r3, #1
 8016d2e:	697b      	ldr	r3, [r7, #20]
 8016d30:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8016d32:	697b      	ldr	r3, [r7, #20]
 8016d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016d36:	697b      	ldr	r3, [r7, #20]
 8016d38:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8016d3a:	6978      	ldr	r0, [r7, #20]
 8016d3c:	f7ff fa5a 	bl	80161f4 <tcp_next_iss>
 8016d40:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8016d42:	697b      	ldr	r3, [r7, #20]
 8016d44:	693a      	ldr	r2, [r7, #16]
 8016d46:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8016d48:	697b      	ldr	r3, [r7, #20]
 8016d4a:	693a      	ldr	r2, [r7, #16]
 8016d4c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8016d4e:	697b      	ldr	r3, [r7, #20]
 8016d50:	693a      	ldr	r2, [r7, #16]
 8016d52:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8016d54:	697b      	ldr	r3, [r7, #20]
 8016d56:	693a      	ldr	r2, [r7, #16]
 8016d58:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8016d5a:	4b35      	ldr	r3, [pc, #212]	; (8016e30 <tcp_listen_input+0x1e0>)
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	1e5a      	subs	r2, r3, #1
 8016d60:	697b      	ldr	r3, [r7, #20]
 8016d62:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	691a      	ldr	r2, [r3, #16]
 8016d68:	697b      	ldr	r3, [r7, #20]
 8016d6a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8016d6c:	697b      	ldr	r3, [r7, #20]
 8016d6e:	687a      	ldr	r2, [r7, #4]
 8016d70:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	7a5b      	ldrb	r3, [r3, #9]
 8016d76:	f003 030c 	and.w	r3, r3, #12
 8016d7a:	b2da      	uxtb	r2, r3
 8016d7c:	697b      	ldr	r3, [r7, #20]
 8016d7e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	7a1a      	ldrb	r2, [r3, #8]
 8016d84:	697b      	ldr	r3, [r7, #20]
 8016d86:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016d88:	4b2e      	ldr	r3, [pc, #184]	; (8016e44 <tcp_listen_input+0x1f4>)
 8016d8a:	681a      	ldr	r2, [r3, #0]
 8016d8c:	697b      	ldr	r3, [r7, #20]
 8016d8e:	60da      	str	r2, [r3, #12]
 8016d90:	4a2c      	ldr	r2, [pc, #176]	; (8016e44 <tcp_listen_input+0x1f4>)
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	6013      	str	r3, [r2, #0]
 8016d96:	f003 fd27 	bl	801a7e8 <tcp_timer_needed>
 8016d9a:	4b2b      	ldr	r3, [pc, #172]	; (8016e48 <tcp_listen_input+0x1f8>)
 8016d9c:	2201      	movs	r2, #1
 8016d9e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016da0:	6978      	ldr	r0, [r7, #20]
 8016da2:	f001 fd8d 	bl	80188c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016da6:	4b23      	ldr	r3, [pc, #140]	; (8016e34 <tcp_listen_input+0x1e4>)
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	89db      	ldrh	r3, [r3, #14]
 8016dac:	b29a      	uxth	r2, r3
 8016dae:	697b      	ldr	r3, [r7, #20]
 8016db0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016db4:	697b      	ldr	r3, [r7, #20]
 8016db6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016dba:	697b      	ldr	r3, [r7, #20]
 8016dbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016dc0:	697b      	ldr	r3, [r7, #20]
 8016dc2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8016dc4:	697b      	ldr	r3, [r7, #20]
 8016dc6:	3304      	adds	r3, #4
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f005 fc4b 	bl	801c664 <ip4_route>
 8016dce:	4601      	mov	r1, r0
 8016dd0:	697b      	ldr	r3, [r7, #20]
 8016dd2:	3304      	adds	r3, #4
 8016dd4:	461a      	mov	r2, r3
 8016dd6:	4620      	mov	r0, r4
 8016dd8:	f7ff fa32 	bl	8016240 <tcp_eff_send_mss_netif>
 8016ddc:	4603      	mov	r3, r0
 8016dde:	461a      	mov	r2, r3
 8016de0:	697b      	ldr	r3, [r7, #20]
 8016de2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016de4:	2112      	movs	r1, #18
 8016de6:	6978      	ldr	r0, [r7, #20]
 8016de8:	f002 fc9a 	bl	8019720 <tcp_enqueue_flags>
 8016dec:	4603      	mov	r3, r0
 8016dee:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d004      	beq.n	8016e02 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016df8:	2100      	movs	r1, #0
 8016dfa:	6978      	ldr	r0, [r7, #20]
 8016dfc:	f7fd ffd4 	bl	8014da8 <tcp_abandon>
      return;
 8016e00:	e006      	b.n	8016e10 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8016e02:	6978      	ldr	r0, [r7, #20]
 8016e04:	f002 fd7a 	bl	80198fc <tcp_output>
  return;
 8016e08:	e001      	b.n	8016e0e <tcp_listen_input+0x1be>
    return;
 8016e0a:	bf00      	nop
 8016e0c:	e000      	b.n	8016e10 <tcp_listen_input+0x1c0>
  return;
 8016e0e:	bf00      	nop
}
 8016e10:	371c      	adds	r7, #28
 8016e12:	46bd      	mov	sp, r7
 8016e14:	bd90      	pop	{r4, r7, pc}
 8016e16:	bf00      	nop
 8016e18:	20006de8 	.word	0x20006de8
 8016e1c:	080251cc 	.word	0x080251cc
 8016e20:	080253c4 	.word	0x080253c4
 8016e24:	08025218 	.word	0x08025218
 8016e28:	20006de0 	.word	0x20006de0
 8016e2c:	20006de6 	.word	0x20006de6
 8016e30:	20006ddc 	.word	0x20006ddc
 8016e34:	20006dcc 	.word	0x20006dcc
 8016e38:	2000a9f8 	.word	0x2000a9f8
 8016e3c:	2000a9fc 	.word	0x2000a9fc
 8016e40:	2000a9e8 	.word	0x2000a9e8
 8016e44:	2000e0fc 	.word	0x2000e0fc
 8016e48:	2000e0f8 	.word	0x2000e0f8

08016e4c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b086      	sub	sp, #24
 8016e50:	af04      	add	r7, sp, #16
 8016e52:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8016e54:	4b2f      	ldr	r3, [pc, #188]	; (8016f14 <tcp_timewait_input+0xc8>)
 8016e56:	781b      	ldrb	r3, [r3, #0]
 8016e58:	f003 0304 	and.w	r3, r3, #4
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d153      	bne.n	8016f08 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d106      	bne.n	8016e74 <tcp_timewait_input+0x28>
 8016e66:	4b2c      	ldr	r3, [pc, #176]	; (8016f18 <tcp_timewait_input+0xcc>)
 8016e68:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016e6c:	492b      	ldr	r1, [pc, #172]	; (8016f1c <tcp_timewait_input+0xd0>)
 8016e6e:	482c      	ldr	r0, [pc, #176]	; (8016f20 <tcp_timewait_input+0xd4>)
 8016e70:	f008 f844 	bl	801eefc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8016e74:	4b27      	ldr	r3, [pc, #156]	; (8016f14 <tcp_timewait_input+0xc8>)
 8016e76:	781b      	ldrb	r3, [r3, #0]
 8016e78:	f003 0302 	and.w	r3, r3, #2
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d02a      	beq.n	8016ed6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016e80:	4b28      	ldr	r3, [pc, #160]	; (8016f24 <tcp_timewait_input+0xd8>)
 8016e82:	681a      	ldr	r2, [r3, #0]
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e88:	1ad3      	subs	r3, r2, r3
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	db2d      	blt.n	8016eea <tcp_timewait_input+0x9e>
 8016e8e:	4b25      	ldr	r3, [pc, #148]	; (8016f24 <tcp_timewait_input+0xd8>)
 8016e90:	681a      	ldr	r2, [r3, #0]
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e96:	6879      	ldr	r1, [r7, #4]
 8016e98:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016e9a:	440b      	add	r3, r1
 8016e9c:	1ad3      	subs	r3, r2, r3
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	dc23      	bgt.n	8016eea <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ea2:	4b21      	ldr	r3, [pc, #132]	; (8016f28 <tcp_timewait_input+0xdc>)
 8016ea4:	6819      	ldr	r1, [r3, #0]
 8016ea6:	4b21      	ldr	r3, [pc, #132]	; (8016f2c <tcp_timewait_input+0xe0>)
 8016ea8:	881b      	ldrh	r3, [r3, #0]
 8016eaa:	461a      	mov	r2, r3
 8016eac:	4b1d      	ldr	r3, [pc, #116]	; (8016f24 <tcp_timewait_input+0xd8>)
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016eb2:	4b1f      	ldr	r3, [pc, #124]	; (8016f30 <tcp_timewait_input+0xe4>)
 8016eb4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016eb6:	885b      	ldrh	r3, [r3, #2]
 8016eb8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016eba:	4a1d      	ldr	r2, [pc, #116]	; (8016f30 <tcp_timewait_input+0xe4>)
 8016ebc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ebe:	8812      	ldrh	r2, [r2, #0]
 8016ec0:	b292      	uxth	r2, r2
 8016ec2:	9202      	str	r2, [sp, #8]
 8016ec4:	9301      	str	r3, [sp, #4]
 8016ec6:	4b1b      	ldr	r3, [pc, #108]	; (8016f34 <tcp_timewait_input+0xe8>)
 8016ec8:	9300      	str	r3, [sp, #0]
 8016eca:	4b1b      	ldr	r3, [pc, #108]	; (8016f38 <tcp_timewait_input+0xec>)
 8016ecc:	4602      	mov	r2, r0
 8016ece:	6878      	ldr	r0, [r7, #4]
 8016ed0:	f003 fac8 	bl	801a464 <tcp_rst>
      return;
 8016ed4:	e01b      	b.n	8016f0e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016ed6:	4b0f      	ldr	r3, [pc, #60]	; (8016f14 <tcp_timewait_input+0xc8>)
 8016ed8:	781b      	ldrb	r3, [r3, #0]
 8016eda:	f003 0301 	and.w	r3, r3, #1
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d003      	beq.n	8016eea <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016ee2:	4b16      	ldr	r3, [pc, #88]	; (8016f3c <tcp_timewait_input+0xf0>)
 8016ee4:	681a      	ldr	r2, [r3, #0]
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016eea:	4b10      	ldr	r3, [pc, #64]	; (8016f2c <tcp_timewait_input+0xe0>)
 8016eec:	881b      	ldrh	r3, [r3, #0]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d00c      	beq.n	8016f0c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	8b5b      	ldrh	r3, [r3, #26]
 8016ef6:	f043 0302 	orr.w	r3, r3, #2
 8016efa:	b29a      	uxth	r2, r3
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016f00:	6878      	ldr	r0, [r7, #4]
 8016f02:	f002 fcfb 	bl	80198fc <tcp_output>
  }
  return;
 8016f06:	e001      	b.n	8016f0c <tcp_timewait_input+0xc0>
    return;
 8016f08:	bf00      	nop
 8016f0a:	e000      	b.n	8016f0e <tcp_timewait_input+0xc2>
  return;
 8016f0c:	bf00      	nop
}
 8016f0e:	3708      	adds	r7, #8
 8016f10:	46bd      	mov	sp, r7
 8016f12:	bd80      	pop	{r7, pc}
 8016f14:	20006de8 	.word	0x20006de8
 8016f18:	080251cc 	.word	0x080251cc
 8016f1c:	080253e4 	.word	0x080253e4
 8016f20:	08025218 	.word	0x08025218
 8016f24:	20006ddc 	.word	0x20006ddc
 8016f28:	20006de0 	.word	0x20006de0
 8016f2c:	20006de6 	.word	0x20006de6
 8016f30:	20006dcc 	.word	0x20006dcc
 8016f34:	2000a9f8 	.word	0x2000a9f8
 8016f38:	2000a9fc 	.word	0x2000a9fc
 8016f3c:	2000e100 	.word	0x2000e100

08016f40 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8016f40:	b590      	push	{r4, r7, lr}
 8016f42:	b08d      	sub	sp, #52	; 0x34
 8016f44:	af04      	add	r7, sp, #16
 8016f46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8016f48:	2300      	movs	r3, #0
 8016f4a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d106      	bne.n	8016f64 <tcp_process+0x24>
 8016f56:	4ba5      	ldr	r3, [pc, #660]	; (80171ec <tcp_process+0x2ac>)
 8016f58:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8016f5c:	49a4      	ldr	r1, [pc, #656]	; (80171f0 <tcp_process+0x2b0>)
 8016f5e:	48a5      	ldr	r0, [pc, #660]	; (80171f4 <tcp_process+0x2b4>)
 8016f60:	f007 ffcc 	bl	801eefc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8016f64:	4ba4      	ldr	r3, [pc, #656]	; (80171f8 <tcp_process+0x2b8>)
 8016f66:	781b      	ldrb	r3, [r3, #0]
 8016f68:	f003 0304 	and.w	r3, r3, #4
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d04e      	beq.n	801700e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	7d1b      	ldrb	r3, [r3, #20]
 8016f74:	2b02      	cmp	r3, #2
 8016f76:	d108      	bne.n	8016f8a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016f7c:	4b9f      	ldr	r3, [pc, #636]	; (80171fc <tcp_process+0x2bc>)
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	429a      	cmp	r2, r3
 8016f82:	d123      	bne.n	8016fcc <tcp_process+0x8c>
        acceptable = 1;
 8016f84:	2301      	movs	r3, #1
 8016f86:	76fb      	strb	r3, [r7, #27]
 8016f88:	e020      	b.n	8016fcc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016f8e:	4b9c      	ldr	r3, [pc, #624]	; (8017200 <tcp_process+0x2c0>)
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	429a      	cmp	r2, r3
 8016f94:	d102      	bne.n	8016f9c <tcp_process+0x5c>
        acceptable = 1;
 8016f96:	2301      	movs	r3, #1
 8016f98:	76fb      	strb	r3, [r7, #27]
 8016f9a:	e017      	b.n	8016fcc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016f9c:	4b98      	ldr	r3, [pc, #608]	; (8017200 <tcp_process+0x2c0>)
 8016f9e:	681a      	ldr	r2, [r3, #0]
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fa4:	1ad3      	subs	r3, r2, r3
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	db10      	blt.n	8016fcc <tcp_process+0x8c>
 8016faa:	4b95      	ldr	r3, [pc, #596]	; (8017200 <tcp_process+0x2c0>)
 8016fac:	681a      	ldr	r2, [r3, #0]
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fb2:	6879      	ldr	r1, [r7, #4]
 8016fb4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016fb6:	440b      	add	r3, r1
 8016fb8:	1ad3      	subs	r3, r2, r3
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	dc06      	bgt.n	8016fcc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	8b5b      	ldrh	r3, [r3, #26]
 8016fc2:	f043 0302 	orr.w	r3, r3, #2
 8016fc6:	b29a      	uxth	r2, r3
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8016fcc:	7efb      	ldrb	r3, [r7, #27]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d01b      	beq.n	801700a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	7d1b      	ldrb	r3, [r3, #20]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d106      	bne.n	8016fe8 <tcp_process+0xa8>
 8016fda:	4b84      	ldr	r3, [pc, #528]	; (80171ec <tcp_process+0x2ac>)
 8016fdc:	f44f 724e 	mov.w	r2, #824	; 0x338
 8016fe0:	4988      	ldr	r1, [pc, #544]	; (8017204 <tcp_process+0x2c4>)
 8016fe2:	4884      	ldr	r0, [pc, #528]	; (80171f4 <tcp_process+0x2b4>)
 8016fe4:	f007 ff8a 	bl	801eefc <iprintf>
      recv_flags |= TF_RESET;
 8016fe8:	4b87      	ldr	r3, [pc, #540]	; (8017208 <tcp_process+0x2c8>)
 8016fea:	781b      	ldrb	r3, [r3, #0]
 8016fec:	f043 0308 	orr.w	r3, r3, #8
 8016ff0:	b2da      	uxtb	r2, r3
 8016ff2:	4b85      	ldr	r3, [pc, #532]	; (8017208 <tcp_process+0x2c8>)
 8016ff4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	8b5b      	ldrh	r3, [r3, #26]
 8016ffa:	f023 0301 	bic.w	r3, r3, #1
 8016ffe:	b29a      	uxth	r2, r3
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017004:	f06f 030d 	mvn.w	r3, #13
 8017008:	e37a      	b.n	8017700 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801700a:	2300      	movs	r3, #0
 801700c:	e378      	b.n	8017700 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801700e:	4b7a      	ldr	r3, [pc, #488]	; (80171f8 <tcp_process+0x2b8>)
 8017010:	781b      	ldrb	r3, [r3, #0]
 8017012:	f003 0302 	and.w	r3, r3, #2
 8017016:	2b00      	cmp	r3, #0
 8017018:	d010      	beq.n	801703c <tcp_process+0xfc>
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	7d1b      	ldrb	r3, [r3, #20]
 801701e:	2b02      	cmp	r3, #2
 8017020:	d00c      	beq.n	801703c <tcp_process+0xfc>
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	7d1b      	ldrb	r3, [r3, #20]
 8017026:	2b03      	cmp	r3, #3
 8017028:	d008      	beq.n	801703c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	8b5b      	ldrh	r3, [r3, #26]
 801702e:	f043 0302 	orr.w	r3, r3, #2
 8017032:	b29a      	uxth	r2, r3
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017038:	2300      	movs	r3, #0
 801703a:	e361      	b.n	8017700 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	8b5b      	ldrh	r3, [r3, #26]
 8017040:	f003 0310 	and.w	r3, r3, #16
 8017044:	2b00      	cmp	r3, #0
 8017046:	d103      	bne.n	8017050 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017048:	4b70      	ldr	r3, [pc, #448]	; (801720c <tcp_process+0x2cc>)
 801704a:	681a      	ldr	r2, [r3, #0]
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	2200      	movs	r2, #0
 8017054:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	2200      	movs	r2, #0
 801705c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8017060:	6878      	ldr	r0, [r7, #4]
 8017062:	f001 fc2d 	bl	80188c0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	7d1b      	ldrb	r3, [r3, #20]
 801706a:	3b02      	subs	r3, #2
 801706c:	2b07      	cmp	r3, #7
 801706e:	f200 8337 	bhi.w	80176e0 <tcp_process+0x7a0>
 8017072:	a201      	add	r2, pc, #4	; (adr r2, 8017078 <tcp_process+0x138>)
 8017074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017078:	08017099 	.word	0x08017099
 801707c:	080172c9 	.word	0x080172c9
 8017080:	08017441 	.word	0x08017441
 8017084:	0801746b 	.word	0x0801746b
 8017088:	0801758f 	.word	0x0801758f
 801708c:	08017441 	.word	0x08017441
 8017090:	0801761b 	.word	0x0801761b
 8017094:	080176ab 	.word	0x080176ab
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017098:	4b57      	ldr	r3, [pc, #348]	; (80171f8 <tcp_process+0x2b8>)
 801709a:	781b      	ldrb	r3, [r3, #0]
 801709c:	f003 0310 	and.w	r3, r3, #16
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	f000 80e4 	beq.w	801726e <tcp_process+0x32e>
 80170a6:	4b54      	ldr	r3, [pc, #336]	; (80171f8 <tcp_process+0x2b8>)
 80170a8:	781b      	ldrb	r3, [r3, #0]
 80170aa:	f003 0302 	and.w	r3, r3, #2
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	f000 80dd 	beq.w	801726e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170b8:	1c5a      	adds	r2, r3, #1
 80170ba:	4b50      	ldr	r3, [pc, #320]	; (80171fc <tcp_process+0x2bc>)
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	429a      	cmp	r2, r3
 80170c0:	f040 80d5 	bne.w	801726e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80170c4:	4b4e      	ldr	r3, [pc, #312]	; (8017200 <tcp_process+0x2c0>)
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	1c5a      	adds	r2, r3, #1
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80170d6:	4b49      	ldr	r3, [pc, #292]	; (80171fc <tcp_process+0x2bc>)
 80170d8:	681a      	ldr	r2, [r3, #0]
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80170de:	4b4c      	ldr	r3, [pc, #304]	; (8017210 <tcp_process+0x2d0>)
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	89db      	ldrh	r3, [r3, #14]
 80170e4:	b29a      	uxth	r2, r3
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80170f8:	4b41      	ldr	r3, [pc, #260]	; (8017200 <tcp_process+0x2c0>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	1e5a      	subs	r2, r3, #1
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	2204      	movs	r2, #4
 8017106:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	3304      	adds	r3, #4
 8017110:	4618      	mov	r0, r3
 8017112:	f005 faa7 	bl	801c664 <ip4_route>
 8017116:	4601      	mov	r1, r0
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	3304      	adds	r3, #4
 801711c:	461a      	mov	r2, r3
 801711e:	4620      	mov	r0, r4
 8017120:	f7ff f88e 	bl	8016240 <tcp_eff_send_mss_netif>
 8017124:	4603      	mov	r3, r0
 8017126:	461a      	mov	r2, r3
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017130:	009a      	lsls	r2, r3, #2
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017136:	005b      	lsls	r3, r3, #1
 8017138:	f241 111c 	movw	r1, #4380	; 0x111c
 801713c:	428b      	cmp	r3, r1
 801713e:	bf38      	it	cc
 8017140:	460b      	movcc	r3, r1
 8017142:	429a      	cmp	r2, r3
 8017144:	d204      	bcs.n	8017150 <tcp_process+0x210>
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801714a:	009b      	lsls	r3, r3, #2
 801714c:	b29b      	uxth	r3, r3
 801714e:	e00d      	b.n	801716c <tcp_process+0x22c>
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017154:	005b      	lsls	r3, r3, #1
 8017156:	f241 121c 	movw	r2, #4380	; 0x111c
 801715a:	4293      	cmp	r3, r2
 801715c:	d904      	bls.n	8017168 <tcp_process+0x228>
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017162:	005b      	lsls	r3, r3, #1
 8017164:	b29b      	uxth	r3, r3
 8017166:	e001      	b.n	801716c <tcp_process+0x22c>
 8017168:	f241 131c 	movw	r3, #4380	; 0x111c
 801716c:	687a      	ldr	r2, [r7, #4]
 801716e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017178:	2b00      	cmp	r3, #0
 801717a:	d106      	bne.n	801718a <tcp_process+0x24a>
 801717c:	4b1b      	ldr	r3, [pc, #108]	; (80171ec <tcp_process+0x2ac>)
 801717e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8017182:	4924      	ldr	r1, [pc, #144]	; (8017214 <tcp_process+0x2d4>)
 8017184:	481b      	ldr	r0, [pc, #108]	; (80171f4 <tcp_process+0x2b4>)
 8017186:	f007 feb9 	bl	801eefc <iprintf>
        --pcb->snd_queuelen;
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017190:	3b01      	subs	r3, #1
 8017192:	b29a      	uxth	r2, r3
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801719e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80171a0:	69fb      	ldr	r3, [r7, #28]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d111      	bne.n	80171ca <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171aa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80171ac:	69fb      	ldr	r3, [r7, #28]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d106      	bne.n	80171c0 <tcp_process+0x280>
 80171b2:	4b0e      	ldr	r3, [pc, #56]	; (80171ec <tcp_process+0x2ac>)
 80171b4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80171b8:	4917      	ldr	r1, [pc, #92]	; (8017218 <tcp_process+0x2d8>)
 80171ba:	480e      	ldr	r0, [pc, #56]	; (80171f4 <tcp_process+0x2b4>)
 80171bc:	f007 fe9e 	bl	801eefc <iprintf>
          pcb->unsent = rseg->next;
 80171c0:	69fb      	ldr	r3, [r7, #28]
 80171c2:	681a      	ldr	r2, [r3, #0]
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	66da      	str	r2, [r3, #108]	; 0x6c
 80171c8:	e003      	b.n	80171d2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80171ca:	69fb      	ldr	r3, [r7, #28]
 80171cc:	681a      	ldr	r2, [r3, #0]
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80171d2:	69f8      	ldr	r0, [r7, #28]
 80171d4:	f7fe fc6f 	bl	8015ab6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d11d      	bne.n	801721c <tcp_process+0x2dc>
          pcb->rtime = -1;
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80171e6:	861a      	strh	r2, [r3, #48]	; 0x30
 80171e8:	e01f      	b.n	801722a <tcp_process+0x2ea>
 80171ea:	bf00      	nop
 80171ec:	080251cc 	.word	0x080251cc
 80171f0:	08025404 	.word	0x08025404
 80171f4:	08025218 	.word	0x08025218
 80171f8:	20006de8 	.word	0x20006de8
 80171fc:	20006de0 	.word	0x20006de0
 8017200:	20006ddc 	.word	0x20006ddc
 8017204:	08025420 	.word	0x08025420
 8017208:	20006de9 	.word	0x20006de9
 801720c:	2000e100 	.word	0x2000e100
 8017210:	20006dcc 	.word	0x20006dcc
 8017214:	08025440 	.word	0x08025440
 8017218:	08025458 	.word	0x08025458
        } else {
          pcb->rtime = 0;
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	2200      	movs	r2, #0
 8017220:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	2200      	movs	r2, #0
 8017226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017230:	2b00      	cmp	r3, #0
 8017232:	d00a      	beq.n	801724a <tcp_process+0x30a>
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801723a:	687a      	ldr	r2, [r7, #4]
 801723c:	6910      	ldr	r0, [r2, #16]
 801723e:	2200      	movs	r2, #0
 8017240:	6879      	ldr	r1, [r7, #4]
 8017242:	4798      	blx	r3
 8017244:	4603      	mov	r3, r0
 8017246:	76bb      	strb	r3, [r7, #26]
 8017248:	e001      	b.n	801724e <tcp_process+0x30e>
 801724a:	2300      	movs	r3, #0
 801724c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801724e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017252:	f113 0f0d 	cmn.w	r3, #13
 8017256:	d102      	bne.n	801725e <tcp_process+0x31e>
          return ERR_ABRT;
 8017258:	f06f 030c 	mvn.w	r3, #12
 801725c:	e250      	b.n	8017700 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	8b5b      	ldrh	r3, [r3, #26]
 8017262:	f043 0302 	orr.w	r3, r3, #2
 8017266:	b29a      	uxth	r2, r3
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801726c:	e23a      	b.n	80176e4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801726e:	4b9d      	ldr	r3, [pc, #628]	; (80174e4 <tcp_process+0x5a4>)
 8017270:	781b      	ldrb	r3, [r3, #0]
 8017272:	f003 0310 	and.w	r3, r3, #16
 8017276:	2b00      	cmp	r3, #0
 8017278:	f000 8234 	beq.w	80176e4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801727c:	4b9a      	ldr	r3, [pc, #616]	; (80174e8 <tcp_process+0x5a8>)
 801727e:	6819      	ldr	r1, [r3, #0]
 8017280:	4b9a      	ldr	r3, [pc, #616]	; (80174ec <tcp_process+0x5ac>)
 8017282:	881b      	ldrh	r3, [r3, #0]
 8017284:	461a      	mov	r2, r3
 8017286:	4b9a      	ldr	r3, [pc, #616]	; (80174f0 <tcp_process+0x5b0>)
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801728c:	4b99      	ldr	r3, [pc, #612]	; (80174f4 <tcp_process+0x5b4>)
 801728e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017290:	885b      	ldrh	r3, [r3, #2]
 8017292:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017294:	4a97      	ldr	r2, [pc, #604]	; (80174f4 <tcp_process+0x5b4>)
 8017296:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017298:	8812      	ldrh	r2, [r2, #0]
 801729a:	b292      	uxth	r2, r2
 801729c:	9202      	str	r2, [sp, #8]
 801729e:	9301      	str	r3, [sp, #4]
 80172a0:	4b95      	ldr	r3, [pc, #596]	; (80174f8 <tcp_process+0x5b8>)
 80172a2:	9300      	str	r3, [sp, #0]
 80172a4:	4b95      	ldr	r3, [pc, #596]	; (80174fc <tcp_process+0x5bc>)
 80172a6:	4602      	mov	r2, r0
 80172a8:	6878      	ldr	r0, [r7, #4]
 80172aa:	f003 f8db 	bl	801a464 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172b4:	2b05      	cmp	r3, #5
 80172b6:	f200 8215 	bhi.w	80176e4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	2200      	movs	r2, #0
 80172be:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80172c0:	6878      	ldr	r0, [r7, #4]
 80172c2:	f002 fea5 	bl	801a010 <tcp_rexmit_rto>
      break;
 80172c6:	e20d      	b.n	80176e4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80172c8:	4b86      	ldr	r3, [pc, #536]	; (80174e4 <tcp_process+0x5a4>)
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	f003 0310 	and.w	r3, r3, #16
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	f000 80a1 	beq.w	8017418 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80172d6:	4b84      	ldr	r3, [pc, #528]	; (80174e8 <tcp_process+0x5a8>)
 80172d8:	681a      	ldr	r2, [r3, #0]
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80172de:	1ad3      	subs	r3, r2, r3
 80172e0:	3b01      	subs	r3, #1
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	db7e      	blt.n	80173e4 <tcp_process+0x4a4>
 80172e6:	4b80      	ldr	r3, [pc, #512]	; (80174e8 <tcp_process+0x5a8>)
 80172e8:	681a      	ldr	r2, [r3, #0]
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172ee:	1ad3      	subs	r3, r2, r3
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	dc77      	bgt.n	80173e4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	2204      	movs	r2, #4
 80172f8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d102      	bne.n	8017308 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017302:	23fa      	movs	r3, #250	; 0xfa
 8017304:	76bb      	strb	r3, [r7, #26]
 8017306:	e01d      	b.n	8017344 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801730c:	699b      	ldr	r3, [r3, #24]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d106      	bne.n	8017320 <tcp_process+0x3e0>
 8017312:	4b7b      	ldr	r3, [pc, #492]	; (8017500 <tcp_process+0x5c0>)
 8017314:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8017318:	497a      	ldr	r1, [pc, #488]	; (8017504 <tcp_process+0x5c4>)
 801731a:	487b      	ldr	r0, [pc, #492]	; (8017508 <tcp_process+0x5c8>)
 801731c:	f007 fdee 	bl	801eefc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017324:	699b      	ldr	r3, [r3, #24]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d00a      	beq.n	8017340 <tcp_process+0x400>
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801732e:	699b      	ldr	r3, [r3, #24]
 8017330:	687a      	ldr	r2, [r7, #4]
 8017332:	6910      	ldr	r0, [r2, #16]
 8017334:	2200      	movs	r2, #0
 8017336:	6879      	ldr	r1, [r7, #4]
 8017338:	4798      	blx	r3
 801733a:	4603      	mov	r3, r0
 801733c:	76bb      	strb	r3, [r7, #26]
 801733e:	e001      	b.n	8017344 <tcp_process+0x404>
 8017340:	23f0      	movs	r3, #240	; 0xf0
 8017342:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017344:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d00a      	beq.n	8017362 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801734c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017350:	f113 0f0d 	cmn.w	r3, #13
 8017354:	d002      	beq.n	801735c <tcp_process+0x41c>
              tcp_abort(pcb);
 8017356:	6878      	ldr	r0, [r7, #4]
 8017358:	f7fd fde4 	bl	8014f24 <tcp_abort>
            }
            return ERR_ABRT;
 801735c:	f06f 030c 	mvn.w	r3, #12
 8017360:	e1ce      	b.n	8017700 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017362:	6878      	ldr	r0, [r7, #4]
 8017364:	f000 fae0 	bl	8017928 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017368:	4b68      	ldr	r3, [pc, #416]	; (801750c <tcp_process+0x5cc>)
 801736a:	881b      	ldrh	r3, [r3, #0]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d005      	beq.n	801737c <tcp_process+0x43c>
            recv_acked--;
 8017370:	4b66      	ldr	r3, [pc, #408]	; (801750c <tcp_process+0x5cc>)
 8017372:	881b      	ldrh	r3, [r3, #0]
 8017374:	3b01      	subs	r3, #1
 8017376:	b29a      	uxth	r2, r3
 8017378:	4b64      	ldr	r3, [pc, #400]	; (801750c <tcp_process+0x5cc>)
 801737a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017380:	009a      	lsls	r2, r3, #2
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017386:	005b      	lsls	r3, r3, #1
 8017388:	f241 111c 	movw	r1, #4380	; 0x111c
 801738c:	428b      	cmp	r3, r1
 801738e:	bf38      	it	cc
 8017390:	460b      	movcc	r3, r1
 8017392:	429a      	cmp	r2, r3
 8017394:	d204      	bcs.n	80173a0 <tcp_process+0x460>
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801739a:	009b      	lsls	r3, r3, #2
 801739c:	b29b      	uxth	r3, r3
 801739e:	e00d      	b.n	80173bc <tcp_process+0x47c>
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173a4:	005b      	lsls	r3, r3, #1
 80173a6:	f241 121c 	movw	r2, #4380	; 0x111c
 80173aa:	4293      	cmp	r3, r2
 80173ac:	d904      	bls.n	80173b8 <tcp_process+0x478>
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173b2:	005b      	lsls	r3, r3, #1
 80173b4:	b29b      	uxth	r3, r3
 80173b6:	e001      	b.n	80173bc <tcp_process+0x47c>
 80173b8:	f241 131c 	movw	r3, #4380	; 0x111c
 80173bc:	687a      	ldr	r2, [r7, #4]
 80173be:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80173c2:	4b53      	ldr	r3, [pc, #332]	; (8017510 <tcp_process+0x5d0>)
 80173c4:	781b      	ldrb	r3, [r3, #0]
 80173c6:	f003 0320 	and.w	r3, r3, #32
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d037      	beq.n	801743e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	8b5b      	ldrh	r3, [r3, #26]
 80173d2:	f043 0302 	orr.w	r3, r3, #2
 80173d6:	b29a      	uxth	r2, r3
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2207      	movs	r2, #7
 80173e0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80173e2:	e02c      	b.n	801743e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80173e4:	4b40      	ldr	r3, [pc, #256]	; (80174e8 <tcp_process+0x5a8>)
 80173e6:	6819      	ldr	r1, [r3, #0]
 80173e8:	4b40      	ldr	r3, [pc, #256]	; (80174ec <tcp_process+0x5ac>)
 80173ea:	881b      	ldrh	r3, [r3, #0]
 80173ec:	461a      	mov	r2, r3
 80173ee:	4b40      	ldr	r3, [pc, #256]	; (80174f0 <tcp_process+0x5b0>)
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80173f4:	4b3f      	ldr	r3, [pc, #252]	; (80174f4 <tcp_process+0x5b4>)
 80173f6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80173f8:	885b      	ldrh	r3, [r3, #2]
 80173fa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80173fc:	4a3d      	ldr	r2, [pc, #244]	; (80174f4 <tcp_process+0x5b4>)
 80173fe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017400:	8812      	ldrh	r2, [r2, #0]
 8017402:	b292      	uxth	r2, r2
 8017404:	9202      	str	r2, [sp, #8]
 8017406:	9301      	str	r3, [sp, #4]
 8017408:	4b3b      	ldr	r3, [pc, #236]	; (80174f8 <tcp_process+0x5b8>)
 801740a:	9300      	str	r3, [sp, #0]
 801740c:	4b3b      	ldr	r3, [pc, #236]	; (80174fc <tcp_process+0x5bc>)
 801740e:	4602      	mov	r2, r0
 8017410:	6878      	ldr	r0, [r7, #4]
 8017412:	f003 f827 	bl	801a464 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017416:	e167      	b.n	80176e8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017418:	4b32      	ldr	r3, [pc, #200]	; (80174e4 <tcp_process+0x5a4>)
 801741a:	781b      	ldrb	r3, [r3, #0]
 801741c:	f003 0302 	and.w	r3, r3, #2
 8017420:	2b00      	cmp	r3, #0
 8017422:	f000 8161 	beq.w	80176e8 <tcp_process+0x7a8>
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801742a:	1e5a      	subs	r2, r3, #1
 801742c:	4b30      	ldr	r3, [pc, #192]	; (80174f0 <tcp_process+0x5b0>)
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	429a      	cmp	r2, r3
 8017432:	f040 8159 	bne.w	80176e8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017436:	6878      	ldr	r0, [r7, #4]
 8017438:	f002 fe0c 	bl	801a054 <tcp_rexmit>
      break;
 801743c:	e154      	b.n	80176e8 <tcp_process+0x7a8>
 801743e:	e153      	b.n	80176e8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017440:	6878      	ldr	r0, [r7, #4]
 8017442:	f000 fa71 	bl	8017928 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017446:	4b32      	ldr	r3, [pc, #200]	; (8017510 <tcp_process+0x5d0>)
 8017448:	781b      	ldrb	r3, [r3, #0]
 801744a:	f003 0320 	and.w	r3, r3, #32
 801744e:	2b00      	cmp	r3, #0
 8017450:	f000 814c 	beq.w	80176ec <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	8b5b      	ldrh	r3, [r3, #26]
 8017458:	f043 0302 	orr.w	r3, r3, #2
 801745c:	b29a      	uxth	r2, r3
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	2207      	movs	r2, #7
 8017466:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017468:	e140      	b.n	80176ec <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801746a:	6878      	ldr	r0, [r7, #4]
 801746c:	f000 fa5c 	bl	8017928 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017470:	4b27      	ldr	r3, [pc, #156]	; (8017510 <tcp_process+0x5d0>)
 8017472:	781b      	ldrb	r3, [r3, #0]
 8017474:	f003 0320 	and.w	r3, r3, #32
 8017478:	2b00      	cmp	r3, #0
 801747a:	d071      	beq.n	8017560 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801747c:	4b19      	ldr	r3, [pc, #100]	; (80174e4 <tcp_process+0x5a4>)
 801747e:	781b      	ldrb	r3, [r3, #0]
 8017480:	f003 0310 	and.w	r3, r3, #16
 8017484:	2b00      	cmp	r3, #0
 8017486:	d060      	beq.n	801754a <tcp_process+0x60a>
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801748c:	4b16      	ldr	r3, [pc, #88]	; (80174e8 <tcp_process+0x5a8>)
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	429a      	cmp	r2, r3
 8017492:	d15a      	bne.n	801754a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017498:	2b00      	cmp	r3, #0
 801749a:	d156      	bne.n	801754a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	8b5b      	ldrh	r3, [r3, #26]
 80174a0:	f043 0302 	orr.w	r3, r3, #2
 80174a4:	b29a      	uxth	r2, r3
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f7fe fdbe 	bl	801602c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80174b0:	4b18      	ldr	r3, [pc, #96]	; (8017514 <tcp_process+0x5d4>)
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	687a      	ldr	r2, [r7, #4]
 80174b6:	429a      	cmp	r2, r3
 80174b8:	d105      	bne.n	80174c6 <tcp_process+0x586>
 80174ba:	4b16      	ldr	r3, [pc, #88]	; (8017514 <tcp_process+0x5d4>)
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	68db      	ldr	r3, [r3, #12]
 80174c0:	4a14      	ldr	r2, [pc, #80]	; (8017514 <tcp_process+0x5d4>)
 80174c2:	6013      	str	r3, [r2, #0]
 80174c4:	e02e      	b.n	8017524 <tcp_process+0x5e4>
 80174c6:	4b13      	ldr	r3, [pc, #76]	; (8017514 <tcp_process+0x5d4>)
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	617b      	str	r3, [r7, #20]
 80174cc:	e027      	b.n	801751e <tcp_process+0x5de>
 80174ce:	697b      	ldr	r3, [r7, #20]
 80174d0:	68db      	ldr	r3, [r3, #12]
 80174d2:	687a      	ldr	r2, [r7, #4]
 80174d4:	429a      	cmp	r2, r3
 80174d6:	d11f      	bne.n	8017518 <tcp_process+0x5d8>
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	68da      	ldr	r2, [r3, #12]
 80174dc:	697b      	ldr	r3, [r7, #20]
 80174de:	60da      	str	r2, [r3, #12]
 80174e0:	e020      	b.n	8017524 <tcp_process+0x5e4>
 80174e2:	bf00      	nop
 80174e4:	20006de8 	.word	0x20006de8
 80174e8:	20006de0 	.word	0x20006de0
 80174ec:	20006de6 	.word	0x20006de6
 80174f0:	20006ddc 	.word	0x20006ddc
 80174f4:	20006dcc 	.word	0x20006dcc
 80174f8:	2000a9f8 	.word	0x2000a9f8
 80174fc:	2000a9fc 	.word	0x2000a9fc
 8017500:	080251cc 	.word	0x080251cc
 8017504:	0802546c 	.word	0x0802546c
 8017508:	08025218 	.word	0x08025218
 801750c:	20006de4 	.word	0x20006de4
 8017510:	20006de9 	.word	0x20006de9
 8017514:	2000e0fc 	.word	0x2000e0fc
 8017518:	697b      	ldr	r3, [r7, #20]
 801751a:	68db      	ldr	r3, [r3, #12]
 801751c:	617b      	str	r3, [r7, #20]
 801751e:	697b      	ldr	r3, [r7, #20]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d1d4      	bne.n	80174ce <tcp_process+0x58e>
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	2200      	movs	r2, #0
 8017528:	60da      	str	r2, [r3, #12]
 801752a:	4b77      	ldr	r3, [pc, #476]	; (8017708 <tcp_process+0x7c8>)
 801752c:	2201      	movs	r2, #1
 801752e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	220a      	movs	r2, #10
 8017534:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017536:	4b75      	ldr	r3, [pc, #468]	; (801770c <tcp_process+0x7cc>)
 8017538:	681a      	ldr	r2, [r3, #0]
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	60da      	str	r2, [r3, #12]
 801753e:	4a73      	ldr	r2, [pc, #460]	; (801770c <tcp_process+0x7cc>)
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	6013      	str	r3, [r2, #0]
 8017544:	f003 f950 	bl	801a7e8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017548:	e0d2      	b.n	80176f0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	8b5b      	ldrh	r3, [r3, #26]
 801754e:	f043 0302 	orr.w	r3, r3, #2
 8017552:	b29a      	uxth	r2, r3
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	2208      	movs	r2, #8
 801755c:	751a      	strb	r2, [r3, #20]
      break;
 801755e:	e0c7      	b.n	80176f0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017560:	4b6b      	ldr	r3, [pc, #428]	; (8017710 <tcp_process+0x7d0>)
 8017562:	781b      	ldrb	r3, [r3, #0]
 8017564:	f003 0310 	and.w	r3, r3, #16
 8017568:	2b00      	cmp	r3, #0
 801756a:	f000 80c1 	beq.w	80176f0 <tcp_process+0x7b0>
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017572:	4b68      	ldr	r3, [pc, #416]	; (8017714 <tcp_process+0x7d4>)
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	429a      	cmp	r2, r3
 8017578:	f040 80ba 	bne.w	80176f0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017580:	2b00      	cmp	r3, #0
 8017582:	f040 80b5 	bne.w	80176f0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	2206      	movs	r2, #6
 801758a:	751a      	strb	r2, [r3, #20]
      break;
 801758c:	e0b0      	b.n	80176f0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801758e:	6878      	ldr	r0, [r7, #4]
 8017590:	f000 f9ca 	bl	8017928 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017594:	4b60      	ldr	r3, [pc, #384]	; (8017718 <tcp_process+0x7d8>)
 8017596:	781b      	ldrb	r3, [r3, #0]
 8017598:	f003 0320 	and.w	r3, r3, #32
 801759c:	2b00      	cmp	r3, #0
 801759e:	f000 80a9 	beq.w	80176f4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	8b5b      	ldrh	r3, [r3, #26]
 80175a6:	f043 0302 	orr.w	r3, r3, #2
 80175aa:	b29a      	uxth	r2, r3
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80175b0:	6878      	ldr	r0, [r7, #4]
 80175b2:	f7fe fd3b 	bl	801602c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80175b6:	4b59      	ldr	r3, [pc, #356]	; (801771c <tcp_process+0x7dc>)
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	687a      	ldr	r2, [r7, #4]
 80175bc:	429a      	cmp	r2, r3
 80175be:	d105      	bne.n	80175cc <tcp_process+0x68c>
 80175c0:	4b56      	ldr	r3, [pc, #344]	; (801771c <tcp_process+0x7dc>)
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	68db      	ldr	r3, [r3, #12]
 80175c6:	4a55      	ldr	r2, [pc, #340]	; (801771c <tcp_process+0x7dc>)
 80175c8:	6013      	str	r3, [r2, #0]
 80175ca:	e013      	b.n	80175f4 <tcp_process+0x6b4>
 80175cc:	4b53      	ldr	r3, [pc, #332]	; (801771c <tcp_process+0x7dc>)
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	613b      	str	r3, [r7, #16]
 80175d2:	e00c      	b.n	80175ee <tcp_process+0x6ae>
 80175d4:	693b      	ldr	r3, [r7, #16]
 80175d6:	68db      	ldr	r3, [r3, #12]
 80175d8:	687a      	ldr	r2, [r7, #4]
 80175da:	429a      	cmp	r2, r3
 80175dc:	d104      	bne.n	80175e8 <tcp_process+0x6a8>
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	68da      	ldr	r2, [r3, #12]
 80175e2:	693b      	ldr	r3, [r7, #16]
 80175e4:	60da      	str	r2, [r3, #12]
 80175e6:	e005      	b.n	80175f4 <tcp_process+0x6b4>
 80175e8:	693b      	ldr	r3, [r7, #16]
 80175ea:	68db      	ldr	r3, [r3, #12]
 80175ec:	613b      	str	r3, [r7, #16]
 80175ee:	693b      	ldr	r3, [r7, #16]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d1ef      	bne.n	80175d4 <tcp_process+0x694>
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	2200      	movs	r2, #0
 80175f8:	60da      	str	r2, [r3, #12]
 80175fa:	4b43      	ldr	r3, [pc, #268]	; (8017708 <tcp_process+0x7c8>)
 80175fc:	2201      	movs	r2, #1
 80175fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	220a      	movs	r2, #10
 8017604:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017606:	4b41      	ldr	r3, [pc, #260]	; (801770c <tcp_process+0x7cc>)
 8017608:	681a      	ldr	r2, [r3, #0]
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	60da      	str	r2, [r3, #12]
 801760e:	4a3f      	ldr	r2, [pc, #252]	; (801770c <tcp_process+0x7cc>)
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	6013      	str	r3, [r2, #0]
 8017614:	f003 f8e8 	bl	801a7e8 <tcp_timer_needed>
      }
      break;
 8017618:	e06c      	b.n	80176f4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801761a:	6878      	ldr	r0, [r7, #4]
 801761c:	f000 f984 	bl	8017928 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017620:	4b3b      	ldr	r3, [pc, #236]	; (8017710 <tcp_process+0x7d0>)
 8017622:	781b      	ldrb	r3, [r3, #0]
 8017624:	f003 0310 	and.w	r3, r3, #16
 8017628:	2b00      	cmp	r3, #0
 801762a:	d065      	beq.n	80176f8 <tcp_process+0x7b8>
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017630:	4b38      	ldr	r3, [pc, #224]	; (8017714 <tcp_process+0x7d4>)
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	429a      	cmp	r2, r3
 8017636:	d15f      	bne.n	80176f8 <tcp_process+0x7b8>
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801763c:	2b00      	cmp	r3, #0
 801763e:	d15b      	bne.n	80176f8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017640:	6878      	ldr	r0, [r7, #4]
 8017642:	f7fe fcf3 	bl	801602c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017646:	4b35      	ldr	r3, [pc, #212]	; (801771c <tcp_process+0x7dc>)
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	687a      	ldr	r2, [r7, #4]
 801764c:	429a      	cmp	r2, r3
 801764e:	d105      	bne.n	801765c <tcp_process+0x71c>
 8017650:	4b32      	ldr	r3, [pc, #200]	; (801771c <tcp_process+0x7dc>)
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	68db      	ldr	r3, [r3, #12]
 8017656:	4a31      	ldr	r2, [pc, #196]	; (801771c <tcp_process+0x7dc>)
 8017658:	6013      	str	r3, [r2, #0]
 801765a:	e013      	b.n	8017684 <tcp_process+0x744>
 801765c:	4b2f      	ldr	r3, [pc, #188]	; (801771c <tcp_process+0x7dc>)
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	60fb      	str	r3, [r7, #12]
 8017662:	e00c      	b.n	801767e <tcp_process+0x73e>
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	68db      	ldr	r3, [r3, #12]
 8017668:	687a      	ldr	r2, [r7, #4]
 801766a:	429a      	cmp	r2, r3
 801766c:	d104      	bne.n	8017678 <tcp_process+0x738>
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	68da      	ldr	r2, [r3, #12]
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	60da      	str	r2, [r3, #12]
 8017676:	e005      	b.n	8017684 <tcp_process+0x744>
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	68db      	ldr	r3, [r3, #12]
 801767c:	60fb      	str	r3, [r7, #12]
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d1ef      	bne.n	8017664 <tcp_process+0x724>
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	2200      	movs	r2, #0
 8017688:	60da      	str	r2, [r3, #12]
 801768a:	4b1f      	ldr	r3, [pc, #124]	; (8017708 <tcp_process+0x7c8>)
 801768c:	2201      	movs	r2, #1
 801768e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	220a      	movs	r2, #10
 8017694:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017696:	4b1d      	ldr	r3, [pc, #116]	; (801770c <tcp_process+0x7cc>)
 8017698:	681a      	ldr	r2, [r3, #0]
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	60da      	str	r2, [r3, #12]
 801769e:	4a1b      	ldr	r2, [pc, #108]	; (801770c <tcp_process+0x7cc>)
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	6013      	str	r3, [r2, #0]
 80176a4:	f003 f8a0 	bl	801a7e8 <tcp_timer_needed>
      }
      break;
 80176a8:	e026      	b.n	80176f8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80176aa:	6878      	ldr	r0, [r7, #4]
 80176ac:	f000 f93c 	bl	8017928 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80176b0:	4b17      	ldr	r3, [pc, #92]	; (8017710 <tcp_process+0x7d0>)
 80176b2:	781b      	ldrb	r3, [r3, #0]
 80176b4:	f003 0310 	and.w	r3, r3, #16
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d01f      	beq.n	80176fc <tcp_process+0x7bc>
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80176c0:	4b14      	ldr	r3, [pc, #80]	; (8017714 <tcp_process+0x7d4>)
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	429a      	cmp	r2, r3
 80176c6:	d119      	bne.n	80176fc <tcp_process+0x7bc>
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d115      	bne.n	80176fc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80176d0:	4b11      	ldr	r3, [pc, #68]	; (8017718 <tcp_process+0x7d8>)
 80176d2:	781b      	ldrb	r3, [r3, #0]
 80176d4:	f043 0310 	orr.w	r3, r3, #16
 80176d8:	b2da      	uxtb	r2, r3
 80176da:	4b0f      	ldr	r3, [pc, #60]	; (8017718 <tcp_process+0x7d8>)
 80176dc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80176de:	e00d      	b.n	80176fc <tcp_process+0x7bc>
    default:
      break;
 80176e0:	bf00      	nop
 80176e2:	e00c      	b.n	80176fe <tcp_process+0x7be>
      break;
 80176e4:	bf00      	nop
 80176e6:	e00a      	b.n	80176fe <tcp_process+0x7be>
      break;
 80176e8:	bf00      	nop
 80176ea:	e008      	b.n	80176fe <tcp_process+0x7be>
      break;
 80176ec:	bf00      	nop
 80176ee:	e006      	b.n	80176fe <tcp_process+0x7be>
      break;
 80176f0:	bf00      	nop
 80176f2:	e004      	b.n	80176fe <tcp_process+0x7be>
      break;
 80176f4:	bf00      	nop
 80176f6:	e002      	b.n	80176fe <tcp_process+0x7be>
      break;
 80176f8:	bf00      	nop
 80176fa:	e000      	b.n	80176fe <tcp_process+0x7be>
      break;
 80176fc:	bf00      	nop
  }
  return ERR_OK;
 80176fe:	2300      	movs	r3, #0
}
 8017700:	4618      	mov	r0, r3
 8017702:	3724      	adds	r7, #36	; 0x24
 8017704:	46bd      	mov	sp, r7
 8017706:	bd90      	pop	{r4, r7, pc}
 8017708:	2000e0f8 	.word	0x2000e0f8
 801770c:	2000e10c 	.word	0x2000e10c
 8017710:	20006de8 	.word	0x20006de8
 8017714:	20006de0 	.word	0x20006de0
 8017718:	20006de9 	.word	0x20006de9
 801771c:	2000e0fc 	.word	0x2000e0fc

08017720 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017720:	b590      	push	{r4, r7, lr}
 8017722:	b085      	sub	sp, #20
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
 8017728:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d106      	bne.n	801773e <tcp_oos_insert_segment+0x1e>
 8017730:	4b3b      	ldr	r3, [pc, #236]	; (8017820 <tcp_oos_insert_segment+0x100>)
 8017732:	f240 421f 	movw	r2, #1055	; 0x41f
 8017736:	493b      	ldr	r1, [pc, #236]	; (8017824 <tcp_oos_insert_segment+0x104>)
 8017738:	483b      	ldr	r0, [pc, #236]	; (8017828 <tcp_oos_insert_segment+0x108>)
 801773a:	f007 fbdf 	bl	801eefc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	68db      	ldr	r3, [r3, #12]
 8017742:	899b      	ldrh	r3, [r3, #12]
 8017744:	b29b      	uxth	r3, r3
 8017746:	4618      	mov	r0, r3
 8017748:	f7fb faa4 	bl	8012c94 <lwip_htons>
 801774c:	4603      	mov	r3, r0
 801774e:	b2db      	uxtb	r3, r3
 8017750:	f003 0301 	and.w	r3, r3, #1
 8017754:	2b00      	cmp	r3, #0
 8017756:	d028      	beq.n	80177aa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017758:	6838      	ldr	r0, [r7, #0]
 801775a:	f7fe f997 	bl	8015a8c <tcp_segs_free>
    next = NULL;
 801775e:	2300      	movs	r3, #0
 8017760:	603b      	str	r3, [r7, #0]
 8017762:	e056      	b.n	8017812 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017764:	683b      	ldr	r3, [r7, #0]
 8017766:	68db      	ldr	r3, [r3, #12]
 8017768:	899b      	ldrh	r3, [r3, #12]
 801776a:	b29b      	uxth	r3, r3
 801776c:	4618      	mov	r0, r3
 801776e:	f7fb fa91 	bl	8012c94 <lwip_htons>
 8017772:	4603      	mov	r3, r0
 8017774:	b2db      	uxtb	r3, r3
 8017776:	f003 0301 	and.w	r3, r3, #1
 801777a:	2b00      	cmp	r3, #0
 801777c:	d00d      	beq.n	801779a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	68db      	ldr	r3, [r3, #12]
 8017782:	899b      	ldrh	r3, [r3, #12]
 8017784:	b29c      	uxth	r4, r3
 8017786:	2001      	movs	r0, #1
 8017788:	f7fb fa84 	bl	8012c94 <lwip_htons>
 801778c:	4603      	mov	r3, r0
 801778e:	461a      	mov	r2, r3
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	68db      	ldr	r3, [r3, #12]
 8017794:	4322      	orrs	r2, r4
 8017796:	b292      	uxth	r2, r2
 8017798:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801779a:	683b      	ldr	r3, [r7, #0]
 801779c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801779e:	683b      	ldr	r3, [r7, #0]
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80177a4:	68f8      	ldr	r0, [r7, #12]
 80177a6:	f7fe f986 	bl	8015ab6 <tcp_seg_free>
    while (next &&
 80177aa:	683b      	ldr	r3, [r7, #0]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d00e      	beq.n	80177ce <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	891b      	ldrh	r3, [r3, #8]
 80177b4:	461a      	mov	r2, r3
 80177b6:	4b1d      	ldr	r3, [pc, #116]	; (801782c <tcp_oos_insert_segment+0x10c>)
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	441a      	add	r2, r3
 80177bc:	683b      	ldr	r3, [r7, #0]
 80177be:	68db      	ldr	r3, [r3, #12]
 80177c0:	685b      	ldr	r3, [r3, #4]
 80177c2:	6839      	ldr	r1, [r7, #0]
 80177c4:	8909      	ldrh	r1, [r1, #8]
 80177c6:	440b      	add	r3, r1
 80177c8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	daca      	bge.n	8017764 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d01e      	beq.n	8017812 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	891b      	ldrh	r3, [r3, #8]
 80177d8:	461a      	mov	r2, r3
 80177da:	4b14      	ldr	r3, [pc, #80]	; (801782c <tcp_oos_insert_segment+0x10c>)
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	441a      	add	r2, r3
 80177e0:	683b      	ldr	r3, [r7, #0]
 80177e2:	68db      	ldr	r3, [r3, #12]
 80177e4:	685b      	ldr	r3, [r3, #4]
 80177e6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	dd12      	ble.n	8017812 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80177ec:	683b      	ldr	r3, [r7, #0]
 80177ee:	68db      	ldr	r3, [r3, #12]
 80177f0:	685b      	ldr	r3, [r3, #4]
 80177f2:	b29a      	uxth	r2, r3
 80177f4:	4b0d      	ldr	r3, [pc, #52]	; (801782c <tcp_oos_insert_segment+0x10c>)
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	b29b      	uxth	r3, r3
 80177fa:	1ad3      	subs	r3, r2, r3
 80177fc:	b29a      	uxth	r2, r3
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	685a      	ldr	r2, [r3, #4]
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	891b      	ldrh	r3, [r3, #8]
 801780a:	4619      	mov	r1, r3
 801780c:	4610      	mov	r0, r2
 801780e:	f7fc fc03 	bl	8014018 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	683a      	ldr	r2, [r7, #0]
 8017816:	601a      	str	r2, [r3, #0]
}
 8017818:	bf00      	nop
 801781a:	3714      	adds	r7, #20
 801781c:	46bd      	mov	sp, r7
 801781e:	bd90      	pop	{r4, r7, pc}
 8017820:	080251cc 	.word	0x080251cc
 8017824:	0802548c 	.word	0x0802548c
 8017828:	08025218 	.word	0x08025218
 801782c:	20006ddc 	.word	0x20006ddc

08017830 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017830:	b5b0      	push	{r4, r5, r7, lr}
 8017832:	b086      	sub	sp, #24
 8017834:	af00      	add	r7, sp, #0
 8017836:	60f8      	str	r0, [r7, #12]
 8017838:	60b9      	str	r1, [r7, #8]
 801783a:	607a      	str	r2, [r7, #4]
 801783c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801783e:	e03e      	b.n	80178be <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017840:	68bb      	ldr	r3, [r7, #8]
 8017842:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017844:	68bb      	ldr	r3, [r7, #8]
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801784a:	697b      	ldr	r3, [r7, #20]
 801784c:	685b      	ldr	r3, [r3, #4]
 801784e:	4618      	mov	r0, r3
 8017850:	f7fc fdf6 	bl	8014440 <pbuf_clen>
 8017854:	4603      	mov	r3, r0
 8017856:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801785e:	8a7a      	ldrh	r2, [r7, #18]
 8017860:	429a      	cmp	r2, r3
 8017862:	d906      	bls.n	8017872 <tcp_free_acked_segments+0x42>
 8017864:	4b2a      	ldr	r3, [pc, #168]	; (8017910 <tcp_free_acked_segments+0xe0>)
 8017866:	f240 4257 	movw	r2, #1111	; 0x457
 801786a:	492a      	ldr	r1, [pc, #168]	; (8017914 <tcp_free_acked_segments+0xe4>)
 801786c:	482a      	ldr	r0, [pc, #168]	; (8017918 <tcp_free_acked_segments+0xe8>)
 801786e:	f007 fb45 	bl	801eefc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8017878:	8a7b      	ldrh	r3, [r7, #18]
 801787a:	1ad3      	subs	r3, r2, r3
 801787c:	b29a      	uxth	r2, r3
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017884:	697b      	ldr	r3, [r7, #20]
 8017886:	891a      	ldrh	r2, [r3, #8]
 8017888:	4b24      	ldr	r3, [pc, #144]	; (801791c <tcp_free_acked_segments+0xec>)
 801788a:	881b      	ldrh	r3, [r3, #0]
 801788c:	4413      	add	r3, r2
 801788e:	b29a      	uxth	r2, r3
 8017890:	4b22      	ldr	r3, [pc, #136]	; (801791c <tcp_free_acked_segments+0xec>)
 8017892:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017894:	6978      	ldr	r0, [r7, #20]
 8017896:	f7fe f90e 	bl	8015ab6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d00c      	beq.n	80178be <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80178a4:	68bb      	ldr	r3, [r7, #8]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d109      	bne.n	80178be <tcp_free_acked_segments+0x8e>
 80178aa:	683b      	ldr	r3, [r7, #0]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d106      	bne.n	80178be <tcp_free_acked_segments+0x8e>
 80178b0:	4b17      	ldr	r3, [pc, #92]	; (8017910 <tcp_free_acked_segments+0xe0>)
 80178b2:	f240 4261 	movw	r2, #1121	; 0x461
 80178b6:	491a      	ldr	r1, [pc, #104]	; (8017920 <tcp_free_acked_segments+0xf0>)
 80178b8:	4817      	ldr	r0, [pc, #92]	; (8017918 <tcp_free_acked_segments+0xe8>)
 80178ba:	f007 fb1f 	bl	801eefc <iprintf>
  while (seg_list != NULL &&
 80178be:	68bb      	ldr	r3, [r7, #8]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d020      	beq.n	8017906 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80178c4:	68bb      	ldr	r3, [r7, #8]
 80178c6:	68db      	ldr	r3, [r3, #12]
 80178c8:	685b      	ldr	r3, [r3, #4]
 80178ca:	4618      	mov	r0, r3
 80178cc:	f7fb f9f7 	bl	8012cbe <lwip_htonl>
 80178d0:	4604      	mov	r4, r0
 80178d2:	68bb      	ldr	r3, [r7, #8]
 80178d4:	891b      	ldrh	r3, [r3, #8]
 80178d6:	461d      	mov	r5, r3
 80178d8:	68bb      	ldr	r3, [r7, #8]
 80178da:	68db      	ldr	r3, [r3, #12]
 80178dc:	899b      	ldrh	r3, [r3, #12]
 80178de:	b29b      	uxth	r3, r3
 80178e0:	4618      	mov	r0, r3
 80178e2:	f7fb f9d7 	bl	8012c94 <lwip_htons>
 80178e6:	4603      	mov	r3, r0
 80178e8:	b2db      	uxtb	r3, r3
 80178ea:	f003 0303 	and.w	r3, r3, #3
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d001      	beq.n	80178f6 <tcp_free_acked_segments+0xc6>
 80178f2:	2301      	movs	r3, #1
 80178f4:	e000      	b.n	80178f8 <tcp_free_acked_segments+0xc8>
 80178f6:	2300      	movs	r3, #0
 80178f8:	442b      	add	r3, r5
 80178fa:	18e2      	adds	r2, r4, r3
 80178fc:	4b09      	ldr	r3, [pc, #36]	; (8017924 <tcp_free_acked_segments+0xf4>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017902:	2b00      	cmp	r3, #0
 8017904:	dd9c      	ble.n	8017840 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017906:	68bb      	ldr	r3, [r7, #8]
}
 8017908:	4618      	mov	r0, r3
 801790a:	3718      	adds	r7, #24
 801790c:	46bd      	mov	sp, r7
 801790e:	bdb0      	pop	{r4, r5, r7, pc}
 8017910:	080251cc 	.word	0x080251cc
 8017914:	080254b4 	.word	0x080254b4
 8017918:	08025218 	.word	0x08025218
 801791c:	20006de4 	.word	0x20006de4
 8017920:	080254dc 	.word	0x080254dc
 8017924:	20006de0 	.word	0x20006de0

08017928 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017928:	b5b0      	push	{r4, r5, r7, lr}
 801792a:	b094      	sub	sp, #80	; 0x50
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017930:	2300      	movs	r3, #0
 8017932:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d106      	bne.n	8017948 <tcp_receive+0x20>
 801793a:	4ba6      	ldr	r3, [pc, #664]	; (8017bd4 <tcp_receive+0x2ac>)
 801793c:	f240 427b 	movw	r2, #1147	; 0x47b
 8017940:	49a5      	ldr	r1, [pc, #660]	; (8017bd8 <tcp_receive+0x2b0>)
 8017942:	48a6      	ldr	r0, [pc, #664]	; (8017bdc <tcp_receive+0x2b4>)
 8017944:	f007 fada 	bl	801eefc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	7d1b      	ldrb	r3, [r3, #20]
 801794c:	2b03      	cmp	r3, #3
 801794e:	d806      	bhi.n	801795e <tcp_receive+0x36>
 8017950:	4ba0      	ldr	r3, [pc, #640]	; (8017bd4 <tcp_receive+0x2ac>)
 8017952:	f240 427c 	movw	r2, #1148	; 0x47c
 8017956:	49a2      	ldr	r1, [pc, #648]	; (8017be0 <tcp_receive+0x2b8>)
 8017958:	48a0      	ldr	r0, [pc, #640]	; (8017bdc <tcp_receive+0x2b4>)
 801795a:	f007 facf 	bl	801eefc <iprintf>

  if (flags & TCP_ACK) {
 801795e:	4ba1      	ldr	r3, [pc, #644]	; (8017be4 <tcp_receive+0x2bc>)
 8017960:	781b      	ldrb	r3, [r3, #0]
 8017962:	f003 0310 	and.w	r3, r3, #16
 8017966:	2b00      	cmp	r3, #0
 8017968:	f000 8263 	beq.w	8017e32 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017972:	461a      	mov	r2, r3
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017978:	4413      	add	r3, r2
 801797a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017980:	4b99      	ldr	r3, [pc, #612]	; (8017be8 <tcp_receive+0x2c0>)
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	1ad3      	subs	r3, r2, r3
 8017986:	2b00      	cmp	r3, #0
 8017988:	db1b      	blt.n	80179c2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801798e:	4b96      	ldr	r3, [pc, #600]	; (8017be8 <tcp_receive+0x2c0>)
 8017990:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017992:	429a      	cmp	r2, r3
 8017994:	d106      	bne.n	80179a4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801799a:	4b94      	ldr	r3, [pc, #592]	; (8017bec <tcp_receive+0x2c4>)
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	1ad3      	subs	r3, r2, r3
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	db0e      	blt.n	80179c2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80179a8:	4b90      	ldr	r3, [pc, #576]	; (8017bec <tcp_receive+0x2c4>)
 80179aa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80179ac:	429a      	cmp	r2, r3
 80179ae:	d125      	bne.n	80179fc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80179b0:	4b8f      	ldr	r3, [pc, #572]	; (8017bf0 <tcp_receive+0x2c8>)
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	89db      	ldrh	r3, [r3, #14]
 80179b6:	b29a      	uxth	r2, r3
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80179be:	429a      	cmp	r2, r3
 80179c0:	d91c      	bls.n	80179fc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80179c2:	4b8b      	ldr	r3, [pc, #556]	; (8017bf0 <tcp_receive+0x2c8>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	89db      	ldrh	r3, [r3, #14]
 80179c8:	b29a      	uxth	r2, r3
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80179dc:	429a      	cmp	r2, r3
 80179de:	d205      	bcs.n	80179ec <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80179ec:	4b7e      	ldr	r3, [pc, #504]	; (8017be8 <tcp_receive+0x2c0>)
 80179ee:	681a      	ldr	r2, [r3, #0]
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80179f4:	4b7d      	ldr	r3, [pc, #500]	; (8017bec <tcp_receive+0x2c4>)
 80179f6:	681a      	ldr	r2, [r3, #0]
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80179fc:	4b7b      	ldr	r3, [pc, #492]	; (8017bec <tcp_receive+0x2c4>)
 80179fe:	681a      	ldr	r2, [r3, #0]
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a04:	1ad3      	subs	r3, r2, r3
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	dc58      	bgt.n	8017abc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017a0a:	4b7a      	ldr	r3, [pc, #488]	; (8017bf4 <tcp_receive+0x2cc>)
 8017a0c:	881b      	ldrh	r3, [r3, #0]
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d14b      	bne.n	8017aaa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a16:	687a      	ldr	r2, [r7, #4]
 8017a18:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8017a1c:	4413      	add	r3, r2
 8017a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017a20:	429a      	cmp	r2, r3
 8017a22:	d142      	bne.n	8017aaa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	db3d      	blt.n	8017aaa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017a32:	4b6e      	ldr	r3, [pc, #440]	; (8017bec <tcp_receive+0x2c4>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	429a      	cmp	r2, r3
 8017a38:	d137      	bne.n	8017aaa <tcp_receive+0x182>
              found_dupack = 1;
 8017a3a:	2301      	movs	r3, #1
 8017a3c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017a44:	2bff      	cmp	r3, #255	; 0xff
 8017a46:	d007      	beq.n	8017a58 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017a4e:	3301      	adds	r3, #1
 8017a50:	b2da      	uxtb	r2, r3
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017a5e:	2b03      	cmp	r3, #3
 8017a60:	d91b      	bls.n	8017a9a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017a6c:	4413      	add	r3, r2
 8017a6e:	b29a      	uxth	r2, r3
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017a76:	429a      	cmp	r2, r3
 8017a78:	d30a      	bcc.n	8017a90 <tcp_receive+0x168>
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017a84:	4413      	add	r3, r2
 8017a86:	b29a      	uxth	r2, r3
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017a8e:	e004      	b.n	8017a9a <tcp_receive+0x172>
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017a96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017aa0:	2b02      	cmp	r3, #2
 8017aa2:	d902      	bls.n	8017aaa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f002 fb41 	bl	801a12c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	f040 8160 	bne.w	8017d72 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017aba:	e15a      	b.n	8017d72 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017abc:	4b4b      	ldr	r3, [pc, #300]	; (8017bec <tcp_receive+0x2c4>)
 8017abe:	681a      	ldr	r2, [r3, #0]
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ac4:	1ad3      	subs	r3, r2, r3
 8017ac6:	3b01      	subs	r3, #1
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	f2c0 814d 	blt.w	8017d68 <tcp_receive+0x440>
 8017ace:	4b47      	ldr	r3, [pc, #284]	; (8017bec <tcp_receive+0x2c4>)
 8017ad0:	681a      	ldr	r2, [r3, #0]
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017ad6:	1ad3      	subs	r3, r2, r3
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	f300 8145 	bgt.w	8017d68 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	8b5b      	ldrh	r3, [r3, #26]
 8017ae2:	f003 0304 	and.w	r3, r3, #4
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d010      	beq.n	8017b0c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	8b5b      	ldrh	r3, [r3, #26]
 8017aee:	f023 0304 	bic.w	r3, r3, #4
 8017af2:	b29a      	uxth	r2, r3
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	2200      	movs	r2, #0
 8017b08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	2200      	movs	r2, #0
 8017b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017b1a:	10db      	asrs	r3, r3, #3
 8017b1c:	b21b      	sxth	r3, r3
 8017b1e:	b29a      	uxth	r2, r3
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017b26:	b29b      	uxth	r3, r3
 8017b28:	4413      	add	r3, r2
 8017b2a:	b29b      	uxth	r3, r3
 8017b2c:	b21a      	sxth	r2, r3
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017b34:	4b2d      	ldr	r3, [pc, #180]	; (8017bec <tcp_receive+0x2c4>)
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	b29a      	uxth	r2, r3
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b3e:	b29b      	uxth	r3, r3
 8017b40:	1ad3      	subs	r3, r2, r3
 8017b42:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	2200      	movs	r2, #0
 8017b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8017b4c:	4b27      	ldr	r3, [pc, #156]	; (8017bec <tcp_receive+0x2c4>)
 8017b4e:	681a      	ldr	r2, [r3, #0]
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	7d1b      	ldrb	r3, [r3, #20]
 8017b58:	2b03      	cmp	r3, #3
 8017b5a:	f240 8096 	bls.w	8017c8a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017b6a:	429a      	cmp	r2, r3
 8017b6c:	d244      	bcs.n	8017bf8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	8b5b      	ldrh	r3, [r3, #26]
 8017b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d001      	beq.n	8017b7e <tcp_receive+0x256>
 8017b7a:	2301      	movs	r3, #1
 8017b7c:	e000      	b.n	8017b80 <tcp_receive+0x258>
 8017b7e:	2302      	movs	r3, #2
 8017b80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017b84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8017b88:	b29a      	uxth	r2, r3
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017b8e:	fb12 f303 	smulbb	r3, r2, r3
 8017b92:	b29b      	uxth	r3, r3
 8017b94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017b96:	4293      	cmp	r3, r2
 8017b98:	bf28      	it	cs
 8017b9a:	4613      	movcs	r3, r2
 8017b9c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017ba4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017ba6:	4413      	add	r3, r2
 8017ba8:	b29a      	uxth	r2, r3
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	d309      	bcc.n	8017bc8 <tcp_receive+0x2a0>
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017bba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017bbc:	4413      	add	r3, r2
 8017bbe:	b29a      	uxth	r2, r3
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017bc6:	e060      	b.n	8017c8a <tcp_receive+0x362>
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017bce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017bd2:	e05a      	b.n	8017c8a <tcp_receive+0x362>
 8017bd4:	080251cc 	.word	0x080251cc
 8017bd8:	080254fc 	.word	0x080254fc
 8017bdc:	08025218 	.word	0x08025218
 8017be0:	08025518 	.word	0x08025518
 8017be4:	20006de8 	.word	0x20006de8
 8017be8:	20006ddc 	.word	0x20006ddc
 8017bec:	20006de0 	.word	0x20006de0
 8017bf0:	20006dcc 	.word	0x20006dcc
 8017bf4:	20006de6 	.word	0x20006de6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017bfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017c00:	4413      	add	r3, r2
 8017c02:	b29a      	uxth	r2, r3
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8017c0a:	429a      	cmp	r2, r3
 8017c0c:	d309      	bcc.n	8017c22 <tcp_receive+0x2fa>
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017c14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017c16:	4413      	add	r3, r2
 8017c18:	b29a      	uxth	r2, r3
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8017c20:	e004      	b.n	8017c2c <tcp_receive+0x304>
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017c38:	429a      	cmp	r2, r3
 8017c3a:	d326      	bcc.n	8017c8a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017c48:	1ad3      	subs	r3, r2, r3
 8017c4a:	b29a      	uxth	r2, r3
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017c5c:	4413      	add	r3, r2
 8017c5e:	b29a      	uxth	r2, r3
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017c66:	429a      	cmp	r2, r3
 8017c68:	d30a      	bcc.n	8017c80 <tcp_receive+0x358>
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017c74:	4413      	add	r3, r2
 8017c76:	b29a      	uxth	r2, r3
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017c7e:	e004      	b.n	8017c8a <tcp_receive+0x362>
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c92:	4a98      	ldr	r2, [pc, #608]	; (8017ef4 <tcp_receive+0x5cc>)
 8017c94:	6878      	ldr	r0, [r7, #4]
 8017c96:	f7ff fdcb 	bl	8017830 <tcp_free_acked_segments>
 8017c9a:	4602      	mov	r2, r0
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ca8:	4a93      	ldr	r2, [pc, #588]	; (8017ef8 <tcp_receive+0x5d0>)
 8017caa:	6878      	ldr	r0, [r7, #4]
 8017cac:	f7ff fdc0 	bl	8017830 <tcp_free_acked_segments>
 8017cb0:	4602      	mov	r2, r0
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d104      	bne.n	8017cc8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017cc4:	861a      	strh	r2, [r3, #48]	; 0x30
 8017cc6:	e002      	b.n	8017cce <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	2200      	movs	r2, #0
 8017ccc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	2200      	movs	r2, #0
 8017cd2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d103      	bne.n	8017ce4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	2200      	movs	r2, #0
 8017ce0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017cea:	4b84      	ldr	r3, [pc, #528]	; (8017efc <tcp_receive+0x5d4>)
 8017cec:	881b      	ldrh	r3, [r3, #0]
 8017cee:	4413      	add	r3, r2
 8017cf0:	b29a      	uxth	r2, r3
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	8b5b      	ldrh	r3, [r3, #26]
 8017cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d035      	beq.n	8017d70 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d118      	bne.n	8017d3e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d00c      	beq.n	8017d2e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d1c:	68db      	ldr	r3, [r3, #12]
 8017d1e:	685b      	ldr	r3, [r3, #4]
 8017d20:	4618      	mov	r0, r3
 8017d22:	f7fa ffcc 	bl	8012cbe <lwip_htonl>
 8017d26:	4603      	mov	r3, r0
 8017d28:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	dc20      	bgt.n	8017d70 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	8b5b      	ldrh	r3, [r3, #26]
 8017d32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017d36:	b29a      	uxth	r2, r3
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017d3c:	e018      	b.n	8017d70 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d46:	68db      	ldr	r3, [r3, #12]
 8017d48:	685b      	ldr	r3, [r3, #4]
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	f7fa ffb7 	bl	8012cbe <lwip_htonl>
 8017d50:	4603      	mov	r3, r0
 8017d52:	1ae3      	subs	r3, r4, r3
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	dc0b      	bgt.n	8017d70 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	8b5b      	ldrh	r3, [r3, #26]
 8017d5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017d60:	b29a      	uxth	r2, r3
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017d66:	e003      	b.n	8017d70 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8017d68:	6878      	ldr	r0, [r7, #4]
 8017d6a:	f002 fbcd 	bl	801a508 <tcp_send_empty_ack>
 8017d6e:	e000      	b.n	8017d72 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017d70:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d05b      	beq.n	8017e32 <tcp_receive+0x50a>
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017d7e:	4b60      	ldr	r3, [pc, #384]	; (8017f00 <tcp_receive+0x5d8>)
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	1ad3      	subs	r3, r2, r3
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	da54      	bge.n	8017e32 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8017d88:	4b5e      	ldr	r3, [pc, #376]	; (8017f04 <tcp_receive+0x5dc>)
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	b29a      	uxth	r2, r3
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d92:	b29b      	uxth	r3, r3
 8017d94:	1ad3      	subs	r3, r2, r3
 8017d96:	b29b      	uxth	r3, r3
 8017d98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8017d9c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017da6:	10db      	asrs	r3, r3, #3
 8017da8:	b21b      	sxth	r3, r3
 8017daa:	b29b      	uxth	r3, r3
 8017dac:	1ad3      	subs	r3, r2, r3
 8017dae:	b29b      	uxth	r3, r3
 8017db0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017dba:	b29a      	uxth	r2, r3
 8017dbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017dc0:	4413      	add	r3, r2
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	b21a      	sxth	r2, r3
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8017dca:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	da05      	bge.n	8017dde <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8017dd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017dd6:	425b      	negs	r3, r3
 8017dd8:	b29b      	uxth	r3, r3
 8017dda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8017dde:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017de8:	109b      	asrs	r3, r3, #2
 8017dea:	b21b      	sxth	r3, r3
 8017dec:	b29b      	uxth	r3, r3
 8017dee:	1ad3      	subs	r3, r2, r3
 8017df0:	b29b      	uxth	r3, r3
 8017df2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017dfc:	b29a      	uxth	r2, r3
 8017dfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017e02:	4413      	add	r3, r2
 8017e04:	b29b      	uxth	r3, r3
 8017e06:	b21a      	sxth	r2, r3
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017e12:	10db      	asrs	r3, r3, #3
 8017e14:	b21b      	sxth	r3, r3
 8017e16:	b29a      	uxth	r2, r3
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017e1e:	b29b      	uxth	r3, r3
 8017e20:	4413      	add	r3, r2
 8017e22:	b29b      	uxth	r3, r3
 8017e24:	b21a      	sxth	r2, r3
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8017e32:	4b35      	ldr	r3, [pc, #212]	; (8017f08 <tcp_receive+0x5e0>)
 8017e34:	881b      	ldrh	r3, [r3, #0]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	f000 84e1 	beq.w	80187fe <tcp_receive+0xed6>
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	7d1b      	ldrb	r3, [r3, #20]
 8017e40:	2b06      	cmp	r3, #6
 8017e42:	f200 84dc 	bhi.w	80187fe <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e4a:	4b30      	ldr	r3, [pc, #192]	; (8017f0c <tcp_receive+0x5e4>)
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	1ad3      	subs	r3, r2, r3
 8017e50:	3b01      	subs	r3, #1
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	f2c0 808e 	blt.w	8017f74 <tcp_receive+0x64c>
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e5c:	4b2a      	ldr	r3, [pc, #168]	; (8017f08 <tcp_receive+0x5e0>)
 8017e5e:	881b      	ldrh	r3, [r3, #0]
 8017e60:	4619      	mov	r1, r3
 8017e62:	4b2a      	ldr	r3, [pc, #168]	; (8017f0c <tcp_receive+0x5e4>)
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	440b      	add	r3, r1
 8017e68:	1ad3      	subs	r3, r2, r3
 8017e6a:	3301      	adds	r3, #1
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	f300 8081 	bgt.w	8017f74 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8017e72:	4b27      	ldr	r3, [pc, #156]	; (8017f10 <tcp_receive+0x5e8>)
 8017e74:	685b      	ldr	r3, [r3, #4]
 8017e76:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e7c:	4b23      	ldr	r3, [pc, #140]	; (8017f0c <tcp_receive+0x5e4>)
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	1ad3      	subs	r3, r2, r3
 8017e82:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017e84:	4b22      	ldr	r3, [pc, #136]	; (8017f10 <tcp_receive+0x5e8>)
 8017e86:	685b      	ldr	r3, [r3, #4]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d106      	bne.n	8017e9a <tcp_receive+0x572>
 8017e8c:	4b21      	ldr	r3, [pc, #132]	; (8017f14 <tcp_receive+0x5ec>)
 8017e8e:	f240 5294 	movw	r2, #1428	; 0x594
 8017e92:	4921      	ldr	r1, [pc, #132]	; (8017f18 <tcp_receive+0x5f0>)
 8017e94:	4821      	ldr	r0, [pc, #132]	; (8017f1c <tcp_receive+0x5f4>)
 8017e96:	f007 f831 	bl	801eefc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8017e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017ea0:	4293      	cmp	r3, r2
 8017ea2:	d906      	bls.n	8017eb2 <tcp_receive+0x58a>
 8017ea4:	4b1b      	ldr	r3, [pc, #108]	; (8017f14 <tcp_receive+0x5ec>)
 8017ea6:	f240 5295 	movw	r2, #1429	; 0x595
 8017eaa:	491d      	ldr	r1, [pc, #116]	; (8017f20 <tcp_receive+0x5f8>)
 8017eac:	481b      	ldr	r0, [pc, #108]	; (8017f1c <tcp_receive+0x5f4>)
 8017eae:	f007 f825 	bl	801eefc <iprintf>
      off = (u16_t)off32;
 8017eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eb4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017eb8:	4b15      	ldr	r3, [pc, #84]	; (8017f10 <tcp_receive+0x5e8>)
 8017eba:	685b      	ldr	r3, [r3, #4]
 8017ebc:	891b      	ldrh	r3, [r3, #8]
 8017ebe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017ec2:	429a      	cmp	r2, r3
 8017ec4:	d906      	bls.n	8017ed4 <tcp_receive+0x5ac>
 8017ec6:	4b13      	ldr	r3, [pc, #76]	; (8017f14 <tcp_receive+0x5ec>)
 8017ec8:	f240 5297 	movw	r2, #1431	; 0x597
 8017ecc:	4915      	ldr	r1, [pc, #84]	; (8017f24 <tcp_receive+0x5fc>)
 8017ece:	4813      	ldr	r0, [pc, #76]	; (8017f1c <tcp_receive+0x5f4>)
 8017ed0:	f007 f814 	bl	801eefc <iprintf>
      inseg.len -= off;
 8017ed4:	4b0e      	ldr	r3, [pc, #56]	; (8017f10 <tcp_receive+0x5e8>)
 8017ed6:	891a      	ldrh	r2, [r3, #8]
 8017ed8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017edc:	1ad3      	subs	r3, r2, r3
 8017ede:	b29a      	uxth	r2, r3
 8017ee0:	4b0b      	ldr	r3, [pc, #44]	; (8017f10 <tcp_receive+0x5e8>)
 8017ee2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017ee4:	4b0a      	ldr	r3, [pc, #40]	; (8017f10 <tcp_receive+0x5e8>)
 8017ee6:	685b      	ldr	r3, [r3, #4]
 8017ee8:	891a      	ldrh	r2, [r3, #8]
 8017eea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017eee:	1ad3      	subs	r3, r2, r3
 8017ef0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8017ef2:	e029      	b.n	8017f48 <tcp_receive+0x620>
 8017ef4:	08025534 	.word	0x08025534
 8017ef8:	0802553c 	.word	0x0802553c
 8017efc:	20006de4 	.word	0x20006de4
 8017f00:	20006de0 	.word	0x20006de0
 8017f04:	2000e100 	.word	0x2000e100
 8017f08:	20006de6 	.word	0x20006de6
 8017f0c:	20006ddc 	.word	0x20006ddc
 8017f10:	20006dbc 	.word	0x20006dbc
 8017f14:	080251cc 	.word	0x080251cc
 8017f18:	08025544 	.word	0x08025544
 8017f1c:	08025218 	.word	0x08025218
 8017f20:	08025554 	.word	0x08025554
 8017f24:	08025564 	.word	0x08025564
        off -= p->len;
 8017f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f2a:	895b      	ldrh	r3, [r3, #10]
 8017f2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017f30:	1ad3      	subs	r3, r2, r3
 8017f32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8017f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f38:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017f3a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8017f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f3e:	2200      	movs	r2, #0
 8017f40:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8017f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8017f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f4a:	895b      	ldrh	r3, [r3, #10]
 8017f4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017f50:	429a      	cmp	r2, r3
 8017f52:	d8e9      	bhi.n	8017f28 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017f54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f58:	4619      	mov	r1, r3
 8017f5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017f5c:	f7fc f95c 	bl	8014218 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f64:	4a91      	ldr	r2, [pc, #580]	; (80181ac <tcp_receive+0x884>)
 8017f66:	6013      	str	r3, [r2, #0]
 8017f68:	4b91      	ldr	r3, [pc, #580]	; (80181b0 <tcp_receive+0x888>)
 8017f6a:	68db      	ldr	r3, [r3, #12]
 8017f6c:	4a8f      	ldr	r2, [pc, #572]	; (80181ac <tcp_receive+0x884>)
 8017f6e:	6812      	ldr	r2, [r2, #0]
 8017f70:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017f72:	e00d      	b.n	8017f90 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017f74:	4b8d      	ldr	r3, [pc, #564]	; (80181ac <tcp_receive+0x884>)
 8017f76:	681a      	ldr	r2, [r3, #0]
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f7c:	1ad3      	subs	r3, r2, r3
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	da06      	bge.n	8017f90 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	8b5b      	ldrh	r3, [r3, #26]
 8017f86:	f043 0302 	orr.w	r3, r3, #2
 8017f8a:	b29a      	uxth	r2, r3
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017f90:	4b86      	ldr	r3, [pc, #536]	; (80181ac <tcp_receive+0x884>)
 8017f92:	681a      	ldr	r2, [r3, #0]
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f98:	1ad3      	subs	r3, r2, r3
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	f2c0 842a 	blt.w	80187f4 <tcp_receive+0xecc>
 8017fa0:	4b82      	ldr	r3, [pc, #520]	; (80181ac <tcp_receive+0x884>)
 8017fa2:	681a      	ldr	r2, [r3, #0]
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fa8:	6879      	ldr	r1, [r7, #4]
 8017faa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017fac:	440b      	add	r3, r1
 8017fae:	1ad3      	subs	r3, r2, r3
 8017fb0:	3301      	adds	r3, #1
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	f300 841e 	bgt.w	80187f4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017fbc:	4b7b      	ldr	r3, [pc, #492]	; (80181ac <tcp_receive+0x884>)
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	429a      	cmp	r2, r3
 8017fc2:	f040 829a 	bne.w	80184fa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8017fc6:	4b7a      	ldr	r3, [pc, #488]	; (80181b0 <tcp_receive+0x888>)
 8017fc8:	891c      	ldrh	r4, [r3, #8]
 8017fca:	4b79      	ldr	r3, [pc, #484]	; (80181b0 <tcp_receive+0x888>)
 8017fcc:	68db      	ldr	r3, [r3, #12]
 8017fce:	899b      	ldrh	r3, [r3, #12]
 8017fd0:	b29b      	uxth	r3, r3
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f7fa fe5e 	bl	8012c94 <lwip_htons>
 8017fd8:	4603      	mov	r3, r0
 8017fda:	b2db      	uxtb	r3, r3
 8017fdc:	f003 0303 	and.w	r3, r3, #3
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d001      	beq.n	8017fe8 <tcp_receive+0x6c0>
 8017fe4:	2301      	movs	r3, #1
 8017fe6:	e000      	b.n	8017fea <tcp_receive+0x6c2>
 8017fe8:	2300      	movs	r3, #0
 8017fea:	4423      	add	r3, r4
 8017fec:	b29a      	uxth	r2, r3
 8017fee:	4b71      	ldr	r3, [pc, #452]	; (80181b4 <tcp_receive+0x88c>)
 8017ff0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017ff6:	4b6f      	ldr	r3, [pc, #444]	; (80181b4 <tcp_receive+0x88c>)
 8017ff8:	881b      	ldrh	r3, [r3, #0]
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d275      	bcs.n	80180ea <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017ffe:	4b6c      	ldr	r3, [pc, #432]	; (80181b0 <tcp_receive+0x888>)
 8018000:	68db      	ldr	r3, [r3, #12]
 8018002:	899b      	ldrh	r3, [r3, #12]
 8018004:	b29b      	uxth	r3, r3
 8018006:	4618      	mov	r0, r3
 8018008:	f7fa fe44 	bl	8012c94 <lwip_htons>
 801800c:	4603      	mov	r3, r0
 801800e:	b2db      	uxtb	r3, r3
 8018010:	f003 0301 	and.w	r3, r3, #1
 8018014:	2b00      	cmp	r3, #0
 8018016:	d01f      	beq.n	8018058 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018018:	4b65      	ldr	r3, [pc, #404]	; (80181b0 <tcp_receive+0x888>)
 801801a:	68db      	ldr	r3, [r3, #12]
 801801c:	899b      	ldrh	r3, [r3, #12]
 801801e:	b29b      	uxth	r3, r3
 8018020:	b21b      	sxth	r3, r3
 8018022:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018026:	b21c      	sxth	r4, r3
 8018028:	4b61      	ldr	r3, [pc, #388]	; (80181b0 <tcp_receive+0x888>)
 801802a:	68db      	ldr	r3, [r3, #12]
 801802c:	899b      	ldrh	r3, [r3, #12]
 801802e:	b29b      	uxth	r3, r3
 8018030:	4618      	mov	r0, r3
 8018032:	f7fa fe2f 	bl	8012c94 <lwip_htons>
 8018036:	4603      	mov	r3, r0
 8018038:	b2db      	uxtb	r3, r3
 801803a:	b29b      	uxth	r3, r3
 801803c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018040:	b29b      	uxth	r3, r3
 8018042:	4618      	mov	r0, r3
 8018044:	f7fa fe26 	bl	8012c94 <lwip_htons>
 8018048:	4603      	mov	r3, r0
 801804a:	b21b      	sxth	r3, r3
 801804c:	4323      	orrs	r3, r4
 801804e:	b21a      	sxth	r2, r3
 8018050:	4b57      	ldr	r3, [pc, #348]	; (80181b0 <tcp_receive+0x888>)
 8018052:	68db      	ldr	r3, [r3, #12]
 8018054:	b292      	uxth	r2, r2
 8018056:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801805c:	4b54      	ldr	r3, [pc, #336]	; (80181b0 <tcp_receive+0x888>)
 801805e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018060:	4b53      	ldr	r3, [pc, #332]	; (80181b0 <tcp_receive+0x888>)
 8018062:	68db      	ldr	r3, [r3, #12]
 8018064:	899b      	ldrh	r3, [r3, #12]
 8018066:	b29b      	uxth	r3, r3
 8018068:	4618      	mov	r0, r3
 801806a:	f7fa fe13 	bl	8012c94 <lwip_htons>
 801806e:	4603      	mov	r3, r0
 8018070:	b2db      	uxtb	r3, r3
 8018072:	f003 0302 	and.w	r3, r3, #2
 8018076:	2b00      	cmp	r3, #0
 8018078:	d005      	beq.n	8018086 <tcp_receive+0x75e>
            inseg.len -= 1;
 801807a:	4b4d      	ldr	r3, [pc, #308]	; (80181b0 <tcp_receive+0x888>)
 801807c:	891b      	ldrh	r3, [r3, #8]
 801807e:	3b01      	subs	r3, #1
 8018080:	b29a      	uxth	r2, r3
 8018082:	4b4b      	ldr	r3, [pc, #300]	; (80181b0 <tcp_receive+0x888>)
 8018084:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018086:	4b4a      	ldr	r3, [pc, #296]	; (80181b0 <tcp_receive+0x888>)
 8018088:	685b      	ldr	r3, [r3, #4]
 801808a:	4a49      	ldr	r2, [pc, #292]	; (80181b0 <tcp_receive+0x888>)
 801808c:	8912      	ldrh	r2, [r2, #8]
 801808e:	4611      	mov	r1, r2
 8018090:	4618      	mov	r0, r3
 8018092:	f7fb ffc1 	bl	8014018 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018096:	4b46      	ldr	r3, [pc, #280]	; (80181b0 <tcp_receive+0x888>)
 8018098:	891c      	ldrh	r4, [r3, #8]
 801809a:	4b45      	ldr	r3, [pc, #276]	; (80181b0 <tcp_receive+0x888>)
 801809c:	68db      	ldr	r3, [r3, #12]
 801809e:	899b      	ldrh	r3, [r3, #12]
 80180a0:	b29b      	uxth	r3, r3
 80180a2:	4618      	mov	r0, r3
 80180a4:	f7fa fdf6 	bl	8012c94 <lwip_htons>
 80180a8:	4603      	mov	r3, r0
 80180aa:	b2db      	uxtb	r3, r3
 80180ac:	f003 0303 	and.w	r3, r3, #3
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d001      	beq.n	80180b8 <tcp_receive+0x790>
 80180b4:	2301      	movs	r3, #1
 80180b6:	e000      	b.n	80180ba <tcp_receive+0x792>
 80180b8:	2300      	movs	r3, #0
 80180ba:	4423      	add	r3, r4
 80180bc:	b29a      	uxth	r2, r3
 80180be:	4b3d      	ldr	r3, [pc, #244]	; (80181b4 <tcp_receive+0x88c>)
 80180c0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80180c2:	4b3c      	ldr	r3, [pc, #240]	; (80181b4 <tcp_receive+0x88c>)
 80180c4:	881b      	ldrh	r3, [r3, #0]
 80180c6:	461a      	mov	r2, r3
 80180c8:	4b38      	ldr	r3, [pc, #224]	; (80181ac <tcp_receive+0x884>)
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	441a      	add	r2, r3
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180d2:	6879      	ldr	r1, [r7, #4]
 80180d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80180d6:	440b      	add	r3, r1
 80180d8:	429a      	cmp	r2, r3
 80180da:	d006      	beq.n	80180ea <tcp_receive+0x7c2>
 80180dc:	4b36      	ldr	r3, [pc, #216]	; (80181b8 <tcp_receive+0x890>)
 80180de:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80180e2:	4936      	ldr	r1, [pc, #216]	; (80181bc <tcp_receive+0x894>)
 80180e4:	4836      	ldr	r0, [pc, #216]	; (80181c0 <tcp_receive+0x898>)
 80180e6:	f006 ff09 	bl	801eefc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	f000 80e7 	beq.w	80182c2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80180f4:	4b2e      	ldr	r3, [pc, #184]	; (80181b0 <tcp_receive+0x888>)
 80180f6:	68db      	ldr	r3, [r3, #12]
 80180f8:	899b      	ldrh	r3, [r3, #12]
 80180fa:	b29b      	uxth	r3, r3
 80180fc:	4618      	mov	r0, r3
 80180fe:	f7fa fdc9 	bl	8012c94 <lwip_htons>
 8018102:	4603      	mov	r3, r0
 8018104:	b2db      	uxtb	r3, r3
 8018106:	f003 0301 	and.w	r3, r3, #1
 801810a:	2b00      	cmp	r3, #0
 801810c:	d010      	beq.n	8018130 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801810e:	e00a      	b.n	8018126 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018114:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801811a:	681a      	ldr	r2, [r3, #0]
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8018120:	68f8      	ldr	r0, [r7, #12]
 8018122:	f7fd fcc8 	bl	8015ab6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801812a:	2b00      	cmp	r3, #0
 801812c:	d1f0      	bne.n	8018110 <tcp_receive+0x7e8>
 801812e:	e0c8      	b.n	80182c2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018134:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018136:	e052      	b.n	80181de <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801813a:	68db      	ldr	r3, [r3, #12]
 801813c:	899b      	ldrh	r3, [r3, #12]
 801813e:	b29b      	uxth	r3, r3
 8018140:	4618      	mov	r0, r3
 8018142:	f7fa fda7 	bl	8012c94 <lwip_htons>
 8018146:	4603      	mov	r3, r0
 8018148:	b2db      	uxtb	r3, r3
 801814a:	f003 0301 	and.w	r3, r3, #1
 801814e:	2b00      	cmp	r3, #0
 8018150:	d03d      	beq.n	80181ce <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018152:	4b17      	ldr	r3, [pc, #92]	; (80181b0 <tcp_receive+0x888>)
 8018154:	68db      	ldr	r3, [r3, #12]
 8018156:	899b      	ldrh	r3, [r3, #12]
 8018158:	b29b      	uxth	r3, r3
 801815a:	4618      	mov	r0, r3
 801815c:	f7fa fd9a 	bl	8012c94 <lwip_htons>
 8018160:	4603      	mov	r3, r0
 8018162:	b2db      	uxtb	r3, r3
 8018164:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018168:	2b00      	cmp	r3, #0
 801816a:	d130      	bne.n	80181ce <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801816c:	4b10      	ldr	r3, [pc, #64]	; (80181b0 <tcp_receive+0x888>)
 801816e:	68db      	ldr	r3, [r3, #12]
 8018170:	899b      	ldrh	r3, [r3, #12]
 8018172:	b29c      	uxth	r4, r3
 8018174:	2001      	movs	r0, #1
 8018176:	f7fa fd8d 	bl	8012c94 <lwip_htons>
 801817a:	4603      	mov	r3, r0
 801817c:	461a      	mov	r2, r3
 801817e:	4b0c      	ldr	r3, [pc, #48]	; (80181b0 <tcp_receive+0x888>)
 8018180:	68db      	ldr	r3, [r3, #12]
 8018182:	4322      	orrs	r2, r4
 8018184:	b292      	uxth	r2, r2
 8018186:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018188:	4b09      	ldr	r3, [pc, #36]	; (80181b0 <tcp_receive+0x888>)
 801818a:	891c      	ldrh	r4, [r3, #8]
 801818c:	4b08      	ldr	r3, [pc, #32]	; (80181b0 <tcp_receive+0x888>)
 801818e:	68db      	ldr	r3, [r3, #12]
 8018190:	899b      	ldrh	r3, [r3, #12]
 8018192:	b29b      	uxth	r3, r3
 8018194:	4618      	mov	r0, r3
 8018196:	f7fa fd7d 	bl	8012c94 <lwip_htons>
 801819a:	4603      	mov	r3, r0
 801819c:	b2db      	uxtb	r3, r3
 801819e:	f003 0303 	and.w	r3, r3, #3
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d00e      	beq.n	80181c4 <tcp_receive+0x89c>
 80181a6:	2301      	movs	r3, #1
 80181a8:	e00d      	b.n	80181c6 <tcp_receive+0x89e>
 80181aa:	bf00      	nop
 80181ac:	20006ddc 	.word	0x20006ddc
 80181b0:	20006dbc 	.word	0x20006dbc
 80181b4:	20006de6 	.word	0x20006de6
 80181b8:	080251cc 	.word	0x080251cc
 80181bc:	08025574 	.word	0x08025574
 80181c0:	08025218 	.word	0x08025218
 80181c4:	2300      	movs	r3, #0
 80181c6:	4423      	add	r3, r4
 80181c8:	b29a      	uxth	r2, r3
 80181ca:	4b98      	ldr	r3, [pc, #608]	; (801842c <tcp_receive+0xb04>)
 80181cc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80181ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181d0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80181d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80181d8:	6938      	ldr	r0, [r7, #16]
 80181da:	f7fd fc6c 	bl	8015ab6 <tcp_seg_free>
            while (next &&
 80181de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d00e      	beq.n	8018202 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80181e4:	4b91      	ldr	r3, [pc, #580]	; (801842c <tcp_receive+0xb04>)
 80181e6:	881b      	ldrh	r3, [r3, #0]
 80181e8:	461a      	mov	r2, r3
 80181ea:	4b91      	ldr	r3, [pc, #580]	; (8018430 <tcp_receive+0xb08>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	441a      	add	r2, r3
 80181f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181f2:	68db      	ldr	r3, [r3, #12]
 80181f4:	685b      	ldr	r3, [r3, #4]
 80181f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80181f8:	8909      	ldrh	r1, [r1, #8]
 80181fa:	440b      	add	r3, r1
 80181fc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80181fe:	2b00      	cmp	r3, #0
 8018200:	da9a      	bge.n	8018138 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018204:	2b00      	cmp	r3, #0
 8018206:	d059      	beq.n	80182bc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018208:	4b88      	ldr	r3, [pc, #544]	; (801842c <tcp_receive+0xb04>)
 801820a:	881b      	ldrh	r3, [r3, #0]
 801820c:	461a      	mov	r2, r3
 801820e:	4b88      	ldr	r3, [pc, #544]	; (8018430 <tcp_receive+0xb08>)
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	441a      	add	r2, r3
 8018214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018216:	68db      	ldr	r3, [r3, #12]
 8018218:	685b      	ldr	r3, [r3, #4]
 801821a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801821c:	2b00      	cmp	r3, #0
 801821e:	dd4d      	ble.n	80182bc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018222:	68db      	ldr	r3, [r3, #12]
 8018224:	685b      	ldr	r3, [r3, #4]
 8018226:	b29a      	uxth	r2, r3
 8018228:	4b81      	ldr	r3, [pc, #516]	; (8018430 <tcp_receive+0xb08>)
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	b29b      	uxth	r3, r3
 801822e:	1ad3      	subs	r3, r2, r3
 8018230:	b29a      	uxth	r2, r3
 8018232:	4b80      	ldr	r3, [pc, #512]	; (8018434 <tcp_receive+0xb0c>)
 8018234:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018236:	4b7f      	ldr	r3, [pc, #508]	; (8018434 <tcp_receive+0xb0c>)
 8018238:	68db      	ldr	r3, [r3, #12]
 801823a:	899b      	ldrh	r3, [r3, #12]
 801823c:	b29b      	uxth	r3, r3
 801823e:	4618      	mov	r0, r3
 8018240:	f7fa fd28 	bl	8012c94 <lwip_htons>
 8018244:	4603      	mov	r3, r0
 8018246:	b2db      	uxtb	r3, r3
 8018248:	f003 0302 	and.w	r3, r3, #2
 801824c:	2b00      	cmp	r3, #0
 801824e:	d005      	beq.n	801825c <tcp_receive+0x934>
                inseg.len -= 1;
 8018250:	4b78      	ldr	r3, [pc, #480]	; (8018434 <tcp_receive+0xb0c>)
 8018252:	891b      	ldrh	r3, [r3, #8]
 8018254:	3b01      	subs	r3, #1
 8018256:	b29a      	uxth	r2, r3
 8018258:	4b76      	ldr	r3, [pc, #472]	; (8018434 <tcp_receive+0xb0c>)
 801825a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801825c:	4b75      	ldr	r3, [pc, #468]	; (8018434 <tcp_receive+0xb0c>)
 801825e:	685b      	ldr	r3, [r3, #4]
 8018260:	4a74      	ldr	r2, [pc, #464]	; (8018434 <tcp_receive+0xb0c>)
 8018262:	8912      	ldrh	r2, [r2, #8]
 8018264:	4611      	mov	r1, r2
 8018266:	4618      	mov	r0, r3
 8018268:	f7fb fed6 	bl	8014018 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801826c:	4b71      	ldr	r3, [pc, #452]	; (8018434 <tcp_receive+0xb0c>)
 801826e:	891c      	ldrh	r4, [r3, #8]
 8018270:	4b70      	ldr	r3, [pc, #448]	; (8018434 <tcp_receive+0xb0c>)
 8018272:	68db      	ldr	r3, [r3, #12]
 8018274:	899b      	ldrh	r3, [r3, #12]
 8018276:	b29b      	uxth	r3, r3
 8018278:	4618      	mov	r0, r3
 801827a:	f7fa fd0b 	bl	8012c94 <lwip_htons>
 801827e:	4603      	mov	r3, r0
 8018280:	b2db      	uxtb	r3, r3
 8018282:	f003 0303 	and.w	r3, r3, #3
 8018286:	2b00      	cmp	r3, #0
 8018288:	d001      	beq.n	801828e <tcp_receive+0x966>
 801828a:	2301      	movs	r3, #1
 801828c:	e000      	b.n	8018290 <tcp_receive+0x968>
 801828e:	2300      	movs	r3, #0
 8018290:	4423      	add	r3, r4
 8018292:	b29a      	uxth	r2, r3
 8018294:	4b65      	ldr	r3, [pc, #404]	; (801842c <tcp_receive+0xb04>)
 8018296:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018298:	4b64      	ldr	r3, [pc, #400]	; (801842c <tcp_receive+0xb04>)
 801829a:	881b      	ldrh	r3, [r3, #0]
 801829c:	461a      	mov	r2, r3
 801829e:	4b64      	ldr	r3, [pc, #400]	; (8018430 <tcp_receive+0xb08>)
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	441a      	add	r2, r3
 80182a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182a6:	68db      	ldr	r3, [r3, #12]
 80182a8:	685b      	ldr	r3, [r3, #4]
 80182aa:	429a      	cmp	r2, r3
 80182ac:	d006      	beq.n	80182bc <tcp_receive+0x994>
 80182ae:	4b62      	ldr	r3, [pc, #392]	; (8018438 <tcp_receive+0xb10>)
 80182b0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80182b4:	4961      	ldr	r1, [pc, #388]	; (801843c <tcp_receive+0xb14>)
 80182b6:	4862      	ldr	r0, [pc, #392]	; (8018440 <tcp_receive+0xb18>)
 80182b8:	f006 fe20 	bl	801eefc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80182c0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80182c2:	4b5a      	ldr	r3, [pc, #360]	; (801842c <tcp_receive+0xb04>)
 80182c4:	881b      	ldrh	r3, [r3, #0]
 80182c6:	461a      	mov	r2, r3
 80182c8:	4b59      	ldr	r3, [pc, #356]	; (8018430 <tcp_receive+0xb08>)
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	441a      	add	r2, r3
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80182d6:	4b55      	ldr	r3, [pc, #340]	; (801842c <tcp_receive+0xb04>)
 80182d8:	881b      	ldrh	r3, [r3, #0]
 80182da:	429a      	cmp	r2, r3
 80182dc:	d206      	bcs.n	80182ec <tcp_receive+0x9c4>
 80182de:	4b56      	ldr	r3, [pc, #344]	; (8018438 <tcp_receive+0xb10>)
 80182e0:	f240 6207 	movw	r2, #1543	; 0x607
 80182e4:	4957      	ldr	r1, [pc, #348]	; (8018444 <tcp_receive+0xb1c>)
 80182e6:	4856      	ldr	r0, [pc, #344]	; (8018440 <tcp_receive+0xb18>)
 80182e8:	f006 fe08 	bl	801eefc <iprintf>
        pcb->rcv_wnd -= tcplen;
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80182f0:	4b4e      	ldr	r3, [pc, #312]	; (801842c <tcp_receive+0xb04>)
 80182f2:	881b      	ldrh	r3, [r3, #0]
 80182f4:	1ad3      	subs	r3, r2, r3
 80182f6:	b29a      	uxth	r2, r3
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80182fc:	6878      	ldr	r0, [r7, #4]
 80182fe:	f7fc feb5 	bl	801506c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018302:	4b4c      	ldr	r3, [pc, #304]	; (8018434 <tcp_receive+0xb0c>)
 8018304:	685b      	ldr	r3, [r3, #4]
 8018306:	891b      	ldrh	r3, [r3, #8]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d006      	beq.n	801831a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801830c:	4b49      	ldr	r3, [pc, #292]	; (8018434 <tcp_receive+0xb0c>)
 801830e:	685b      	ldr	r3, [r3, #4]
 8018310:	4a4d      	ldr	r2, [pc, #308]	; (8018448 <tcp_receive+0xb20>)
 8018312:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018314:	4b47      	ldr	r3, [pc, #284]	; (8018434 <tcp_receive+0xb0c>)
 8018316:	2200      	movs	r2, #0
 8018318:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801831a:	4b46      	ldr	r3, [pc, #280]	; (8018434 <tcp_receive+0xb0c>)
 801831c:	68db      	ldr	r3, [r3, #12]
 801831e:	899b      	ldrh	r3, [r3, #12]
 8018320:	b29b      	uxth	r3, r3
 8018322:	4618      	mov	r0, r3
 8018324:	f7fa fcb6 	bl	8012c94 <lwip_htons>
 8018328:	4603      	mov	r3, r0
 801832a:	b2db      	uxtb	r3, r3
 801832c:	f003 0301 	and.w	r3, r3, #1
 8018330:	2b00      	cmp	r3, #0
 8018332:	f000 80b8 	beq.w	80184a6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018336:	4b45      	ldr	r3, [pc, #276]	; (801844c <tcp_receive+0xb24>)
 8018338:	781b      	ldrb	r3, [r3, #0]
 801833a:	f043 0320 	orr.w	r3, r3, #32
 801833e:	b2da      	uxtb	r2, r3
 8018340:	4b42      	ldr	r3, [pc, #264]	; (801844c <tcp_receive+0xb24>)
 8018342:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018344:	e0af      	b.n	80184a6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801834a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018350:	68db      	ldr	r3, [r3, #12]
 8018352:	685b      	ldr	r3, [r3, #4]
 8018354:	4a36      	ldr	r2, [pc, #216]	; (8018430 <tcp_receive+0xb08>)
 8018356:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018358:	68bb      	ldr	r3, [r7, #8]
 801835a:	891b      	ldrh	r3, [r3, #8]
 801835c:	461c      	mov	r4, r3
 801835e:	68bb      	ldr	r3, [r7, #8]
 8018360:	68db      	ldr	r3, [r3, #12]
 8018362:	899b      	ldrh	r3, [r3, #12]
 8018364:	b29b      	uxth	r3, r3
 8018366:	4618      	mov	r0, r3
 8018368:	f7fa fc94 	bl	8012c94 <lwip_htons>
 801836c:	4603      	mov	r3, r0
 801836e:	b2db      	uxtb	r3, r3
 8018370:	f003 0303 	and.w	r3, r3, #3
 8018374:	2b00      	cmp	r3, #0
 8018376:	d001      	beq.n	801837c <tcp_receive+0xa54>
 8018378:	2301      	movs	r3, #1
 801837a:	e000      	b.n	801837e <tcp_receive+0xa56>
 801837c:	2300      	movs	r3, #0
 801837e:	191a      	adds	r2, r3, r4
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018384:	441a      	add	r2, r3
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801838e:	461c      	mov	r4, r3
 8018390:	68bb      	ldr	r3, [r7, #8]
 8018392:	891b      	ldrh	r3, [r3, #8]
 8018394:	461d      	mov	r5, r3
 8018396:	68bb      	ldr	r3, [r7, #8]
 8018398:	68db      	ldr	r3, [r3, #12]
 801839a:	899b      	ldrh	r3, [r3, #12]
 801839c:	b29b      	uxth	r3, r3
 801839e:	4618      	mov	r0, r3
 80183a0:	f7fa fc78 	bl	8012c94 <lwip_htons>
 80183a4:	4603      	mov	r3, r0
 80183a6:	b2db      	uxtb	r3, r3
 80183a8:	f003 0303 	and.w	r3, r3, #3
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d001      	beq.n	80183b4 <tcp_receive+0xa8c>
 80183b0:	2301      	movs	r3, #1
 80183b2:	e000      	b.n	80183b6 <tcp_receive+0xa8e>
 80183b4:	2300      	movs	r3, #0
 80183b6:	442b      	add	r3, r5
 80183b8:	429c      	cmp	r4, r3
 80183ba:	d206      	bcs.n	80183ca <tcp_receive+0xaa2>
 80183bc:	4b1e      	ldr	r3, [pc, #120]	; (8018438 <tcp_receive+0xb10>)
 80183be:	f240 622b 	movw	r2, #1579	; 0x62b
 80183c2:	4923      	ldr	r1, [pc, #140]	; (8018450 <tcp_receive+0xb28>)
 80183c4:	481e      	ldr	r0, [pc, #120]	; (8018440 <tcp_receive+0xb18>)
 80183c6:	f006 fd99 	bl	801eefc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80183ca:	68bb      	ldr	r3, [r7, #8]
 80183cc:	891b      	ldrh	r3, [r3, #8]
 80183ce:	461c      	mov	r4, r3
 80183d0:	68bb      	ldr	r3, [r7, #8]
 80183d2:	68db      	ldr	r3, [r3, #12]
 80183d4:	899b      	ldrh	r3, [r3, #12]
 80183d6:	b29b      	uxth	r3, r3
 80183d8:	4618      	mov	r0, r3
 80183da:	f7fa fc5b 	bl	8012c94 <lwip_htons>
 80183de:	4603      	mov	r3, r0
 80183e0:	b2db      	uxtb	r3, r3
 80183e2:	f003 0303 	and.w	r3, r3, #3
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d001      	beq.n	80183ee <tcp_receive+0xac6>
 80183ea:	2301      	movs	r3, #1
 80183ec:	e000      	b.n	80183f0 <tcp_receive+0xac8>
 80183ee:	2300      	movs	r3, #0
 80183f0:	1919      	adds	r1, r3, r4
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80183f6:	b28b      	uxth	r3, r1
 80183f8:	1ad3      	subs	r3, r2, r3
 80183fa:	b29a      	uxth	r2, r3
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018400:	6878      	ldr	r0, [r7, #4]
 8018402:	f7fc fe33 	bl	801506c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018406:	68bb      	ldr	r3, [r7, #8]
 8018408:	685b      	ldr	r3, [r3, #4]
 801840a:	891b      	ldrh	r3, [r3, #8]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d028      	beq.n	8018462 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018410:	4b0d      	ldr	r3, [pc, #52]	; (8018448 <tcp_receive+0xb20>)
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d01d      	beq.n	8018454 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8018418:	4b0b      	ldr	r3, [pc, #44]	; (8018448 <tcp_receive+0xb20>)
 801841a:	681a      	ldr	r2, [r3, #0]
 801841c:	68bb      	ldr	r3, [r7, #8]
 801841e:	685b      	ldr	r3, [r3, #4]
 8018420:	4619      	mov	r1, r3
 8018422:	4610      	mov	r0, r2
 8018424:	f7fc f84c 	bl	80144c0 <pbuf_cat>
 8018428:	e018      	b.n	801845c <tcp_receive+0xb34>
 801842a:	bf00      	nop
 801842c:	20006de6 	.word	0x20006de6
 8018430:	20006ddc 	.word	0x20006ddc
 8018434:	20006dbc 	.word	0x20006dbc
 8018438:	080251cc 	.word	0x080251cc
 801843c:	080255ac 	.word	0x080255ac
 8018440:	08025218 	.word	0x08025218
 8018444:	080255e8 	.word	0x080255e8
 8018448:	20006dec 	.word	0x20006dec
 801844c:	20006de9 	.word	0x20006de9
 8018450:	08025608 	.word	0x08025608
            } else {
              recv_data = cseg->p;
 8018454:	68bb      	ldr	r3, [r7, #8]
 8018456:	685b      	ldr	r3, [r3, #4]
 8018458:	4a70      	ldr	r2, [pc, #448]	; (801861c <tcp_receive+0xcf4>)
 801845a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801845c:	68bb      	ldr	r3, [r7, #8]
 801845e:	2200      	movs	r2, #0
 8018460:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018462:	68bb      	ldr	r3, [r7, #8]
 8018464:	68db      	ldr	r3, [r3, #12]
 8018466:	899b      	ldrh	r3, [r3, #12]
 8018468:	b29b      	uxth	r3, r3
 801846a:	4618      	mov	r0, r3
 801846c:	f7fa fc12 	bl	8012c94 <lwip_htons>
 8018470:	4603      	mov	r3, r0
 8018472:	b2db      	uxtb	r3, r3
 8018474:	f003 0301 	and.w	r3, r3, #1
 8018478:	2b00      	cmp	r3, #0
 801847a:	d00d      	beq.n	8018498 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801847c:	4b68      	ldr	r3, [pc, #416]	; (8018620 <tcp_receive+0xcf8>)
 801847e:	781b      	ldrb	r3, [r3, #0]
 8018480:	f043 0320 	orr.w	r3, r3, #32
 8018484:	b2da      	uxtb	r2, r3
 8018486:	4b66      	ldr	r3, [pc, #408]	; (8018620 <tcp_receive+0xcf8>)
 8018488:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	7d1b      	ldrb	r3, [r3, #20]
 801848e:	2b04      	cmp	r3, #4
 8018490:	d102      	bne.n	8018498 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	2207      	movs	r2, #7
 8018496:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018498:	68bb      	ldr	r3, [r7, #8]
 801849a:	681a      	ldr	r2, [r3, #0]
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80184a0:	68b8      	ldr	r0, [r7, #8]
 80184a2:	f7fd fb08 	bl	8015ab6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d008      	beq.n	80184c0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184b2:	68db      	ldr	r3, [r3, #12]
 80184b4:	685a      	ldr	r2, [r3, #4]
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80184ba:	429a      	cmp	r2, r3
 80184bc:	f43f af43 	beq.w	8018346 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	8b5b      	ldrh	r3, [r3, #26]
 80184c4:	f003 0301 	and.w	r3, r3, #1
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d00e      	beq.n	80184ea <tcp_receive+0xbc2>
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	8b5b      	ldrh	r3, [r3, #26]
 80184d0:	f023 0301 	bic.w	r3, r3, #1
 80184d4:	b29a      	uxth	r2, r3
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	835a      	strh	r2, [r3, #26]
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	8b5b      	ldrh	r3, [r3, #26]
 80184de:	f043 0302 	orr.w	r3, r3, #2
 80184e2:	b29a      	uxth	r2, r3
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80184e8:	e188      	b.n	80187fc <tcp_receive+0xed4>
        tcp_ack(pcb);
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	8b5b      	ldrh	r3, [r3, #26]
 80184ee:	f043 0301 	orr.w	r3, r3, #1
 80184f2:	b29a      	uxth	r2, r3
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80184f8:	e180      	b.n	80187fc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d106      	bne.n	8018510 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018502:	4848      	ldr	r0, [pc, #288]	; (8018624 <tcp_receive+0xcfc>)
 8018504:	f7fd faf0 	bl	8015ae8 <tcp_seg_copy>
 8018508:	4602      	mov	r2, r0
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	675a      	str	r2, [r3, #116]	; 0x74
 801850e:	e16d      	b.n	80187ec <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018510:	2300      	movs	r3, #0
 8018512:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018518:	63bb      	str	r3, [r7, #56]	; 0x38
 801851a:	e157      	b.n	80187cc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801851e:	68db      	ldr	r3, [r3, #12]
 8018520:	685a      	ldr	r2, [r3, #4]
 8018522:	4b41      	ldr	r3, [pc, #260]	; (8018628 <tcp_receive+0xd00>)
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	429a      	cmp	r2, r3
 8018528:	d11d      	bne.n	8018566 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801852a:	4b3e      	ldr	r3, [pc, #248]	; (8018624 <tcp_receive+0xcfc>)
 801852c:	891a      	ldrh	r2, [r3, #8]
 801852e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018530:	891b      	ldrh	r3, [r3, #8]
 8018532:	429a      	cmp	r2, r3
 8018534:	f240 814f 	bls.w	80187d6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018538:	483a      	ldr	r0, [pc, #232]	; (8018624 <tcp_receive+0xcfc>)
 801853a:	f7fd fad5 	bl	8015ae8 <tcp_seg_copy>
 801853e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018540:	697b      	ldr	r3, [r7, #20]
 8018542:	2b00      	cmp	r3, #0
 8018544:	f000 8149 	beq.w	80187da <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8018548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801854a:	2b00      	cmp	r3, #0
 801854c:	d003      	beq.n	8018556 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801854e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018550:	697a      	ldr	r2, [r7, #20]
 8018552:	601a      	str	r2, [r3, #0]
 8018554:	e002      	b.n	801855c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	697a      	ldr	r2, [r7, #20]
 801855a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801855c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801855e:	6978      	ldr	r0, [r7, #20]
 8018560:	f7ff f8de 	bl	8017720 <tcp_oos_insert_segment>
                }
                break;
 8018564:	e139      	b.n	80187da <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018568:	2b00      	cmp	r3, #0
 801856a:	d117      	bne.n	801859c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801856c:	4b2e      	ldr	r3, [pc, #184]	; (8018628 <tcp_receive+0xd00>)
 801856e:	681a      	ldr	r2, [r3, #0]
 8018570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018572:	68db      	ldr	r3, [r3, #12]
 8018574:	685b      	ldr	r3, [r3, #4]
 8018576:	1ad3      	subs	r3, r2, r3
 8018578:	2b00      	cmp	r3, #0
 801857a:	da57      	bge.n	801862c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801857c:	4829      	ldr	r0, [pc, #164]	; (8018624 <tcp_receive+0xcfc>)
 801857e:	f7fd fab3 	bl	8015ae8 <tcp_seg_copy>
 8018582:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018584:	69bb      	ldr	r3, [r7, #24]
 8018586:	2b00      	cmp	r3, #0
 8018588:	f000 8129 	beq.w	80187de <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	69ba      	ldr	r2, [r7, #24]
 8018590:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018592:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018594:	69b8      	ldr	r0, [r7, #24]
 8018596:	f7ff f8c3 	bl	8017720 <tcp_oos_insert_segment>
                  }
                  break;
 801859a:	e120      	b.n	80187de <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801859c:	4b22      	ldr	r3, [pc, #136]	; (8018628 <tcp_receive+0xd00>)
 801859e:	681a      	ldr	r2, [r3, #0]
 80185a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185a2:	68db      	ldr	r3, [r3, #12]
 80185a4:	685b      	ldr	r3, [r3, #4]
 80185a6:	1ad3      	subs	r3, r2, r3
 80185a8:	3b01      	subs	r3, #1
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	db3e      	blt.n	801862c <tcp_receive+0xd04>
 80185ae:	4b1e      	ldr	r3, [pc, #120]	; (8018628 <tcp_receive+0xd00>)
 80185b0:	681a      	ldr	r2, [r3, #0]
 80185b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185b4:	68db      	ldr	r3, [r3, #12]
 80185b6:	685b      	ldr	r3, [r3, #4]
 80185b8:	1ad3      	subs	r3, r2, r3
 80185ba:	3301      	adds	r3, #1
 80185bc:	2b00      	cmp	r3, #0
 80185be:	dc35      	bgt.n	801862c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80185c0:	4818      	ldr	r0, [pc, #96]	; (8018624 <tcp_receive+0xcfc>)
 80185c2:	f7fd fa91 	bl	8015ae8 <tcp_seg_copy>
 80185c6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80185c8:	69fb      	ldr	r3, [r7, #28]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	f000 8109 	beq.w	80187e2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80185d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185d2:	68db      	ldr	r3, [r3, #12]
 80185d4:	685b      	ldr	r3, [r3, #4]
 80185d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80185d8:	8912      	ldrh	r2, [r2, #8]
 80185da:	441a      	add	r2, r3
 80185dc:	4b12      	ldr	r3, [pc, #72]	; (8018628 <tcp_receive+0xd00>)
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	1ad3      	subs	r3, r2, r3
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	dd12      	ble.n	801860c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80185e6:	4b10      	ldr	r3, [pc, #64]	; (8018628 <tcp_receive+0xd00>)
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	b29a      	uxth	r2, r3
 80185ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185ee:	68db      	ldr	r3, [r3, #12]
 80185f0:	685b      	ldr	r3, [r3, #4]
 80185f2:	b29b      	uxth	r3, r3
 80185f4:	1ad3      	subs	r3, r2, r3
 80185f6:	b29a      	uxth	r2, r3
 80185f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185fa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80185fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185fe:	685a      	ldr	r2, [r3, #4]
 8018600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018602:	891b      	ldrh	r3, [r3, #8]
 8018604:	4619      	mov	r1, r3
 8018606:	4610      	mov	r0, r2
 8018608:	f7fb fd06 	bl	8014018 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801860c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801860e:	69fa      	ldr	r2, [r7, #28]
 8018610:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018612:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018614:	69f8      	ldr	r0, [r7, #28]
 8018616:	f7ff f883 	bl	8017720 <tcp_oos_insert_segment>
                  }
                  break;
 801861a:	e0e2      	b.n	80187e2 <tcp_receive+0xeba>
 801861c:	20006dec 	.word	0x20006dec
 8018620:	20006de9 	.word	0x20006de9
 8018624:	20006dbc 	.word	0x20006dbc
 8018628:	20006ddc 	.word	0x20006ddc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801862e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	2b00      	cmp	r3, #0
 8018636:	f040 80c6 	bne.w	80187c6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801863a:	4b80      	ldr	r3, [pc, #512]	; (801883c <tcp_receive+0xf14>)
 801863c:	681a      	ldr	r2, [r3, #0]
 801863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018640:	68db      	ldr	r3, [r3, #12]
 8018642:	685b      	ldr	r3, [r3, #4]
 8018644:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018646:	2b00      	cmp	r3, #0
 8018648:	f340 80bd 	ble.w	80187c6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801864c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801864e:	68db      	ldr	r3, [r3, #12]
 8018650:	899b      	ldrh	r3, [r3, #12]
 8018652:	b29b      	uxth	r3, r3
 8018654:	4618      	mov	r0, r3
 8018656:	f7fa fb1d 	bl	8012c94 <lwip_htons>
 801865a:	4603      	mov	r3, r0
 801865c:	b2db      	uxtb	r3, r3
 801865e:	f003 0301 	and.w	r3, r3, #1
 8018662:	2b00      	cmp	r3, #0
 8018664:	f040 80bf 	bne.w	80187e6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018668:	4875      	ldr	r0, [pc, #468]	; (8018840 <tcp_receive+0xf18>)
 801866a:	f7fd fa3d 	bl	8015ae8 <tcp_seg_copy>
 801866e:	4602      	mov	r2, r0
 8018670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018672:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	2b00      	cmp	r3, #0
 801867a:	f000 80b6 	beq.w	80187ea <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801867e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018680:	68db      	ldr	r3, [r3, #12]
 8018682:	685b      	ldr	r3, [r3, #4]
 8018684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018686:	8912      	ldrh	r2, [r2, #8]
 8018688:	441a      	add	r2, r3
 801868a:	4b6c      	ldr	r3, [pc, #432]	; (801883c <tcp_receive+0xf14>)
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	1ad3      	subs	r3, r2, r3
 8018690:	2b00      	cmp	r3, #0
 8018692:	dd12      	ble.n	80186ba <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018694:	4b69      	ldr	r3, [pc, #420]	; (801883c <tcp_receive+0xf14>)
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	b29a      	uxth	r2, r3
 801869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801869c:	68db      	ldr	r3, [r3, #12]
 801869e:	685b      	ldr	r3, [r3, #4]
 80186a0:	b29b      	uxth	r3, r3
 80186a2:	1ad3      	subs	r3, r2, r3
 80186a4:	b29a      	uxth	r2, r3
 80186a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80186aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186ac:	685a      	ldr	r2, [r3, #4]
 80186ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186b0:	891b      	ldrh	r3, [r3, #8]
 80186b2:	4619      	mov	r1, r3
 80186b4:	4610      	mov	r0, r2
 80186b6:	f7fb fcaf 	bl	8014018 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80186ba:	4b62      	ldr	r3, [pc, #392]	; (8018844 <tcp_receive+0xf1c>)
 80186bc:	881b      	ldrh	r3, [r3, #0]
 80186be:	461a      	mov	r2, r3
 80186c0:	4b5e      	ldr	r3, [pc, #376]	; (801883c <tcp_receive+0xf14>)
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	441a      	add	r2, r3
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186ca:	6879      	ldr	r1, [r7, #4]
 80186cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80186ce:	440b      	add	r3, r1
 80186d0:	1ad3      	subs	r3, r2, r3
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	f340 8089 	ble.w	80187ea <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80186d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	68db      	ldr	r3, [r3, #12]
 80186de:	899b      	ldrh	r3, [r3, #12]
 80186e0:	b29b      	uxth	r3, r3
 80186e2:	4618      	mov	r0, r3
 80186e4:	f7fa fad6 	bl	8012c94 <lwip_htons>
 80186e8:	4603      	mov	r3, r0
 80186ea:	b2db      	uxtb	r3, r3
 80186ec:	f003 0301 	and.w	r3, r3, #1
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d022      	beq.n	801873a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80186f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	68db      	ldr	r3, [r3, #12]
 80186fa:	899b      	ldrh	r3, [r3, #12]
 80186fc:	b29b      	uxth	r3, r3
 80186fe:	b21b      	sxth	r3, r3
 8018700:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018704:	b21c      	sxth	r4, r3
 8018706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	68db      	ldr	r3, [r3, #12]
 801870c:	899b      	ldrh	r3, [r3, #12]
 801870e:	b29b      	uxth	r3, r3
 8018710:	4618      	mov	r0, r3
 8018712:	f7fa fabf 	bl	8012c94 <lwip_htons>
 8018716:	4603      	mov	r3, r0
 8018718:	b2db      	uxtb	r3, r3
 801871a:	b29b      	uxth	r3, r3
 801871c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018720:	b29b      	uxth	r3, r3
 8018722:	4618      	mov	r0, r3
 8018724:	f7fa fab6 	bl	8012c94 <lwip_htons>
 8018728:	4603      	mov	r3, r0
 801872a:	b21b      	sxth	r3, r3
 801872c:	4323      	orrs	r3, r4
 801872e:	b21a      	sxth	r2, r3
 8018730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	68db      	ldr	r3, [r3, #12]
 8018736:	b292      	uxth	r2, r2
 8018738:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801873e:	b29a      	uxth	r2, r3
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018744:	4413      	add	r3, r2
 8018746:	b299      	uxth	r1, r3
 8018748:	4b3c      	ldr	r3, [pc, #240]	; (801883c <tcp_receive+0xf14>)
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	b29a      	uxth	r2, r3
 801874e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	1a8a      	subs	r2, r1, r2
 8018754:	b292      	uxth	r2, r2
 8018756:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	685a      	ldr	r2, [r3, #4]
 801875e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	891b      	ldrh	r3, [r3, #8]
 8018764:	4619      	mov	r1, r3
 8018766:	4610      	mov	r0, r2
 8018768:	f7fb fc56 	bl	8014018 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801876c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	891c      	ldrh	r4, [r3, #8]
 8018772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	68db      	ldr	r3, [r3, #12]
 8018778:	899b      	ldrh	r3, [r3, #12]
 801877a:	b29b      	uxth	r3, r3
 801877c:	4618      	mov	r0, r3
 801877e:	f7fa fa89 	bl	8012c94 <lwip_htons>
 8018782:	4603      	mov	r3, r0
 8018784:	b2db      	uxtb	r3, r3
 8018786:	f003 0303 	and.w	r3, r3, #3
 801878a:	2b00      	cmp	r3, #0
 801878c:	d001      	beq.n	8018792 <tcp_receive+0xe6a>
 801878e:	2301      	movs	r3, #1
 8018790:	e000      	b.n	8018794 <tcp_receive+0xe6c>
 8018792:	2300      	movs	r3, #0
 8018794:	4423      	add	r3, r4
 8018796:	b29a      	uxth	r2, r3
 8018798:	4b2a      	ldr	r3, [pc, #168]	; (8018844 <tcp_receive+0xf1c>)
 801879a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801879c:	4b29      	ldr	r3, [pc, #164]	; (8018844 <tcp_receive+0xf1c>)
 801879e:	881b      	ldrh	r3, [r3, #0]
 80187a0:	461a      	mov	r2, r3
 80187a2:	4b26      	ldr	r3, [pc, #152]	; (801883c <tcp_receive+0xf14>)
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	441a      	add	r2, r3
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187ac:	6879      	ldr	r1, [r7, #4]
 80187ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80187b0:	440b      	add	r3, r1
 80187b2:	429a      	cmp	r2, r3
 80187b4:	d019      	beq.n	80187ea <tcp_receive+0xec2>
 80187b6:	4b24      	ldr	r3, [pc, #144]	; (8018848 <tcp_receive+0xf20>)
 80187b8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80187bc:	4923      	ldr	r1, [pc, #140]	; (801884c <tcp_receive+0xf24>)
 80187be:	4824      	ldr	r0, [pc, #144]	; (8018850 <tcp_receive+0xf28>)
 80187c0:	f006 fb9c 	bl	801eefc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80187c4:	e011      	b.n	80187ea <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80187c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80187cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	f47f aea4 	bne.w	801851c <tcp_receive+0xbf4>
 80187d4:	e00a      	b.n	80187ec <tcp_receive+0xec4>
                break;
 80187d6:	bf00      	nop
 80187d8:	e008      	b.n	80187ec <tcp_receive+0xec4>
                break;
 80187da:	bf00      	nop
 80187dc:	e006      	b.n	80187ec <tcp_receive+0xec4>
                  break;
 80187de:	bf00      	nop
 80187e0:	e004      	b.n	80187ec <tcp_receive+0xec4>
                  break;
 80187e2:	bf00      	nop
 80187e4:	e002      	b.n	80187ec <tcp_receive+0xec4>
                  break;
 80187e6:	bf00      	nop
 80187e8:	e000      	b.n	80187ec <tcp_receive+0xec4>
                break;
 80187ea:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80187ec:	6878      	ldr	r0, [r7, #4]
 80187ee:	f001 fe8b 	bl	801a508 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80187f2:	e003      	b.n	80187fc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80187f4:	6878      	ldr	r0, [r7, #4]
 80187f6:	f001 fe87 	bl	801a508 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80187fa:	e01a      	b.n	8018832 <tcp_receive+0xf0a>
 80187fc:	e019      	b.n	8018832 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80187fe:	4b0f      	ldr	r3, [pc, #60]	; (801883c <tcp_receive+0xf14>)
 8018800:	681a      	ldr	r2, [r3, #0]
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018806:	1ad3      	subs	r3, r2, r3
 8018808:	2b00      	cmp	r3, #0
 801880a:	db0a      	blt.n	8018822 <tcp_receive+0xefa>
 801880c:	4b0b      	ldr	r3, [pc, #44]	; (801883c <tcp_receive+0xf14>)
 801880e:	681a      	ldr	r2, [r3, #0]
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018814:	6879      	ldr	r1, [r7, #4]
 8018816:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018818:	440b      	add	r3, r1
 801881a:	1ad3      	subs	r3, r2, r3
 801881c:	3301      	adds	r3, #1
 801881e:	2b00      	cmp	r3, #0
 8018820:	dd07      	ble.n	8018832 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	8b5b      	ldrh	r3, [r3, #26]
 8018826:	f043 0302 	orr.w	r3, r3, #2
 801882a:	b29a      	uxth	r2, r3
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018830:	e7ff      	b.n	8018832 <tcp_receive+0xf0a>
 8018832:	bf00      	nop
 8018834:	3750      	adds	r7, #80	; 0x50
 8018836:	46bd      	mov	sp, r7
 8018838:	bdb0      	pop	{r4, r5, r7, pc}
 801883a:	bf00      	nop
 801883c:	20006ddc 	.word	0x20006ddc
 8018840:	20006dbc 	.word	0x20006dbc
 8018844:	20006de6 	.word	0x20006de6
 8018848:	080251cc 	.word	0x080251cc
 801884c:	08025574 	.word	0x08025574
 8018850:	08025218 	.word	0x08025218

08018854 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018854:	b480      	push	{r7}
 8018856:	b083      	sub	sp, #12
 8018858:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801885a:	4b15      	ldr	r3, [pc, #84]	; (80188b0 <tcp_get_next_optbyte+0x5c>)
 801885c:	881b      	ldrh	r3, [r3, #0]
 801885e:	1c5a      	adds	r2, r3, #1
 8018860:	b291      	uxth	r1, r2
 8018862:	4a13      	ldr	r2, [pc, #76]	; (80188b0 <tcp_get_next_optbyte+0x5c>)
 8018864:	8011      	strh	r1, [r2, #0]
 8018866:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018868:	4b12      	ldr	r3, [pc, #72]	; (80188b4 <tcp_get_next_optbyte+0x60>)
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d004      	beq.n	801887a <tcp_get_next_optbyte+0x26>
 8018870:	4b11      	ldr	r3, [pc, #68]	; (80188b8 <tcp_get_next_optbyte+0x64>)
 8018872:	881b      	ldrh	r3, [r3, #0]
 8018874:	88fa      	ldrh	r2, [r7, #6]
 8018876:	429a      	cmp	r2, r3
 8018878:	d208      	bcs.n	801888c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801887a:	4b10      	ldr	r3, [pc, #64]	; (80188bc <tcp_get_next_optbyte+0x68>)
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	3314      	adds	r3, #20
 8018880:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8018882:	88fb      	ldrh	r3, [r7, #6]
 8018884:	683a      	ldr	r2, [r7, #0]
 8018886:	4413      	add	r3, r2
 8018888:	781b      	ldrb	r3, [r3, #0]
 801888a:	e00b      	b.n	80188a4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801888c:	88fb      	ldrh	r3, [r7, #6]
 801888e:	b2da      	uxtb	r2, r3
 8018890:	4b09      	ldr	r3, [pc, #36]	; (80188b8 <tcp_get_next_optbyte+0x64>)
 8018892:	881b      	ldrh	r3, [r3, #0]
 8018894:	b2db      	uxtb	r3, r3
 8018896:	1ad3      	subs	r3, r2, r3
 8018898:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801889a:	4b06      	ldr	r3, [pc, #24]	; (80188b4 <tcp_get_next_optbyte+0x60>)
 801889c:	681a      	ldr	r2, [r3, #0]
 801889e:	797b      	ldrb	r3, [r7, #5]
 80188a0:	4413      	add	r3, r2
 80188a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80188a4:	4618      	mov	r0, r3
 80188a6:	370c      	adds	r7, #12
 80188a8:	46bd      	mov	sp, r7
 80188aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ae:	4770      	bx	lr
 80188b0:	20006dd8 	.word	0x20006dd8
 80188b4:	20006dd4 	.word	0x20006dd4
 80188b8:	20006dd2 	.word	0x20006dd2
 80188bc:	20006dcc 	.word	0x20006dcc

080188c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b084      	sub	sp, #16
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d106      	bne.n	80188dc <tcp_parseopt+0x1c>
 80188ce:	4b32      	ldr	r3, [pc, #200]	; (8018998 <tcp_parseopt+0xd8>)
 80188d0:	f240 727d 	movw	r2, #1917	; 0x77d
 80188d4:	4931      	ldr	r1, [pc, #196]	; (801899c <tcp_parseopt+0xdc>)
 80188d6:	4832      	ldr	r0, [pc, #200]	; (80189a0 <tcp_parseopt+0xe0>)
 80188d8:	f006 fb10 	bl	801eefc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80188dc:	4b31      	ldr	r3, [pc, #196]	; (80189a4 <tcp_parseopt+0xe4>)
 80188de:	881b      	ldrh	r3, [r3, #0]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d055      	beq.n	8018990 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80188e4:	4b30      	ldr	r3, [pc, #192]	; (80189a8 <tcp_parseopt+0xe8>)
 80188e6:	2200      	movs	r2, #0
 80188e8:	801a      	strh	r2, [r3, #0]
 80188ea:	e045      	b.n	8018978 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80188ec:	f7ff ffb2 	bl	8018854 <tcp_get_next_optbyte>
 80188f0:	4603      	mov	r3, r0
 80188f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80188f4:	7bfb      	ldrb	r3, [r7, #15]
 80188f6:	2b02      	cmp	r3, #2
 80188f8:	d006      	beq.n	8018908 <tcp_parseopt+0x48>
 80188fa:	2b02      	cmp	r3, #2
 80188fc:	dc2b      	bgt.n	8018956 <tcp_parseopt+0x96>
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d041      	beq.n	8018986 <tcp_parseopt+0xc6>
 8018902:	2b01      	cmp	r3, #1
 8018904:	d127      	bne.n	8018956 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8018906:	e037      	b.n	8018978 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018908:	f7ff ffa4 	bl	8018854 <tcp_get_next_optbyte>
 801890c:	4603      	mov	r3, r0
 801890e:	2b04      	cmp	r3, #4
 8018910:	d13b      	bne.n	801898a <tcp_parseopt+0xca>
 8018912:	4b25      	ldr	r3, [pc, #148]	; (80189a8 <tcp_parseopt+0xe8>)
 8018914:	881b      	ldrh	r3, [r3, #0]
 8018916:	3301      	adds	r3, #1
 8018918:	4a22      	ldr	r2, [pc, #136]	; (80189a4 <tcp_parseopt+0xe4>)
 801891a:	8812      	ldrh	r2, [r2, #0]
 801891c:	4293      	cmp	r3, r2
 801891e:	da34      	bge.n	801898a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018920:	f7ff ff98 	bl	8018854 <tcp_get_next_optbyte>
 8018924:	4603      	mov	r3, r0
 8018926:	b29b      	uxth	r3, r3
 8018928:	021b      	lsls	r3, r3, #8
 801892a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801892c:	f7ff ff92 	bl	8018854 <tcp_get_next_optbyte>
 8018930:	4603      	mov	r3, r0
 8018932:	b29a      	uxth	r2, r3
 8018934:	89bb      	ldrh	r3, [r7, #12]
 8018936:	4313      	orrs	r3, r2
 8018938:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801893a:	89bb      	ldrh	r3, [r7, #12]
 801893c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8018940:	d804      	bhi.n	801894c <tcp_parseopt+0x8c>
 8018942:	89bb      	ldrh	r3, [r7, #12]
 8018944:	2b00      	cmp	r3, #0
 8018946:	d001      	beq.n	801894c <tcp_parseopt+0x8c>
 8018948:	89ba      	ldrh	r2, [r7, #12]
 801894a:	e001      	b.n	8018950 <tcp_parseopt+0x90>
 801894c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8018954:	e010      	b.n	8018978 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018956:	f7ff ff7d 	bl	8018854 <tcp_get_next_optbyte>
 801895a:	4603      	mov	r3, r0
 801895c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801895e:	7afb      	ldrb	r3, [r7, #11]
 8018960:	2b01      	cmp	r3, #1
 8018962:	d914      	bls.n	801898e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8018964:	7afb      	ldrb	r3, [r7, #11]
 8018966:	b29a      	uxth	r2, r3
 8018968:	4b0f      	ldr	r3, [pc, #60]	; (80189a8 <tcp_parseopt+0xe8>)
 801896a:	881b      	ldrh	r3, [r3, #0]
 801896c:	4413      	add	r3, r2
 801896e:	b29b      	uxth	r3, r3
 8018970:	3b02      	subs	r3, #2
 8018972:	b29a      	uxth	r2, r3
 8018974:	4b0c      	ldr	r3, [pc, #48]	; (80189a8 <tcp_parseopt+0xe8>)
 8018976:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018978:	4b0b      	ldr	r3, [pc, #44]	; (80189a8 <tcp_parseopt+0xe8>)
 801897a:	881a      	ldrh	r2, [r3, #0]
 801897c:	4b09      	ldr	r3, [pc, #36]	; (80189a4 <tcp_parseopt+0xe4>)
 801897e:	881b      	ldrh	r3, [r3, #0]
 8018980:	429a      	cmp	r2, r3
 8018982:	d3b3      	bcc.n	80188ec <tcp_parseopt+0x2c>
 8018984:	e004      	b.n	8018990 <tcp_parseopt+0xd0>
          return;
 8018986:	bf00      	nop
 8018988:	e002      	b.n	8018990 <tcp_parseopt+0xd0>
            return;
 801898a:	bf00      	nop
 801898c:	e000      	b.n	8018990 <tcp_parseopt+0xd0>
            return;
 801898e:	bf00      	nop
      }
    }
  }
}
 8018990:	3710      	adds	r7, #16
 8018992:	46bd      	mov	sp, r7
 8018994:	bd80      	pop	{r7, pc}
 8018996:	bf00      	nop
 8018998:	080251cc 	.word	0x080251cc
 801899c:	08025630 	.word	0x08025630
 80189a0:	08025218 	.word	0x08025218
 80189a4:	20006dd0 	.word	0x20006dd0
 80189a8:	20006dd8 	.word	0x20006dd8

080189ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80189ac:	b480      	push	{r7}
 80189ae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80189b0:	4b05      	ldr	r3, [pc, #20]	; (80189c8 <tcp_trigger_input_pcb_close+0x1c>)
 80189b2:	781b      	ldrb	r3, [r3, #0]
 80189b4:	f043 0310 	orr.w	r3, r3, #16
 80189b8:	b2da      	uxtb	r2, r3
 80189ba:	4b03      	ldr	r3, [pc, #12]	; (80189c8 <tcp_trigger_input_pcb_close+0x1c>)
 80189bc:	701a      	strb	r2, [r3, #0]
}
 80189be:	bf00      	nop
 80189c0:	46bd      	mov	sp, r7
 80189c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c6:	4770      	bx	lr
 80189c8:	20006de9 	.word	0x20006de9

080189cc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b084      	sub	sp, #16
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	60f8      	str	r0, [r7, #12]
 80189d4:	60b9      	str	r1, [r7, #8]
 80189d6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d00a      	beq.n	80189f4 <tcp_route+0x28>
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	7a1b      	ldrb	r3, [r3, #8]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d006      	beq.n	80189f4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	7a1b      	ldrb	r3, [r3, #8]
 80189ea:	4618      	mov	r0, r3
 80189ec:	f7fb f90c 	bl	8013c08 <netif_get_by_index>
 80189f0:	4603      	mov	r3, r0
 80189f2:	e003      	b.n	80189fc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80189f4:	6878      	ldr	r0, [r7, #4]
 80189f6:	f003 fe35 	bl	801c664 <ip4_route>
 80189fa:	4603      	mov	r3, r0
  }
}
 80189fc:	4618      	mov	r0, r3
 80189fe:	3710      	adds	r7, #16
 8018a00:	46bd      	mov	sp, r7
 8018a02:	bd80      	pop	{r7, pc}

08018a04 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018a04:	b590      	push	{r4, r7, lr}
 8018a06:	b087      	sub	sp, #28
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	60f8      	str	r0, [r7, #12]
 8018a0c:	60b9      	str	r1, [r7, #8]
 8018a0e:	603b      	str	r3, [r7, #0]
 8018a10:	4613      	mov	r3, r2
 8018a12:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d105      	bne.n	8018a26 <tcp_create_segment+0x22>
 8018a1a:	4b44      	ldr	r3, [pc, #272]	; (8018b2c <tcp_create_segment+0x128>)
 8018a1c:	22a3      	movs	r2, #163	; 0xa3
 8018a1e:	4944      	ldr	r1, [pc, #272]	; (8018b30 <tcp_create_segment+0x12c>)
 8018a20:	4844      	ldr	r0, [pc, #272]	; (8018b34 <tcp_create_segment+0x130>)
 8018a22:	f006 fa6b 	bl	801eefc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018a26:	68bb      	ldr	r3, [r7, #8]
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d105      	bne.n	8018a38 <tcp_create_segment+0x34>
 8018a2c:	4b3f      	ldr	r3, [pc, #252]	; (8018b2c <tcp_create_segment+0x128>)
 8018a2e:	22a4      	movs	r2, #164	; 0xa4
 8018a30:	4941      	ldr	r1, [pc, #260]	; (8018b38 <tcp_create_segment+0x134>)
 8018a32:	4840      	ldr	r0, [pc, #256]	; (8018b34 <tcp_create_segment+0x130>)
 8018a34:	f006 fa62 	bl	801eefc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018a38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018a3c:	009b      	lsls	r3, r3, #2
 8018a3e:	b2db      	uxtb	r3, r3
 8018a40:	f003 0304 	and.w	r3, r3, #4
 8018a44:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018a46:	2003      	movs	r0, #3
 8018a48:	f7fa fdda 	bl	8013600 <memp_malloc>
 8018a4c:	6138      	str	r0, [r7, #16]
 8018a4e:	693b      	ldr	r3, [r7, #16]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d104      	bne.n	8018a5e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018a54:	68b8      	ldr	r0, [r7, #8]
 8018a56:	f7fb fc65 	bl	8014324 <pbuf_free>
    return NULL;
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	e061      	b.n	8018b22 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8018a5e:	693b      	ldr	r3, [r7, #16]
 8018a60:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018a64:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018a66:	693b      	ldr	r3, [r7, #16]
 8018a68:	2200      	movs	r2, #0
 8018a6a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018a6c:	693b      	ldr	r3, [r7, #16]
 8018a6e:	68ba      	ldr	r2, [r7, #8]
 8018a70:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018a72:	68bb      	ldr	r3, [r7, #8]
 8018a74:	891a      	ldrh	r2, [r3, #8]
 8018a76:	7dfb      	ldrb	r3, [r7, #23]
 8018a78:	b29b      	uxth	r3, r3
 8018a7a:	429a      	cmp	r2, r3
 8018a7c:	d205      	bcs.n	8018a8a <tcp_create_segment+0x86>
 8018a7e:	4b2b      	ldr	r3, [pc, #172]	; (8018b2c <tcp_create_segment+0x128>)
 8018a80:	22b0      	movs	r2, #176	; 0xb0
 8018a82:	492e      	ldr	r1, [pc, #184]	; (8018b3c <tcp_create_segment+0x138>)
 8018a84:	482b      	ldr	r0, [pc, #172]	; (8018b34 <tcp_create_segment+0x130>)
 8018a86:	f006 fa39 	bl	801eefc <iprintf>
  seg->len = p->tot_len - optlen;
 8018a8a:	68bb      	ldr	r3, [r7, #8]
 8018a8c:	891a      	ldrh	r2, [r3, #8]
 8018a8e:	7dfb      	ldrb	r3, [r7, #23]
 8018a90:	b29b      	uxth	r3, r3
 8018a92:	1ad3      	subs	r3, r2, r3
 8018a94:	b29a      	uxth	r2, r3
 8018a96:	693b      	ldr	r3, [r7, #16]
 8018a98:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018a9a:	2114      	movs	r1, #20
 8018a9c:	68b8      	ldr	r0, [r7, #8]
 8018a9e:	f7fb fbab 	bl	80141f8 <pbuf_add_header>
 8018aa2:	4603      	mov	r3, r0
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d004      	beq.n	8018ab2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018aa8:	6938      	ldr	r0, [r7, #16]
 8018aaa:	f7fd f804 	bl	8015ab6 <tcp_seg_free>
    return NULL;
 8018aae:	2300      	movs	r3, #0
 8018ab0:	e037      	b.n	8018b22 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018ab2:	693b      	ldr	r3, [r7, #16]
 8018ab4:	685b      	ldr	r3, [r3, #4]
 8018ab6:	685a      	ldr	r2, [r3, #4]
 8018ab8:	693b      	ldr	r3, [r7, #16]
 8018aba:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	8ada      	ldrh	r2, [r3, #22]
 8018ac0:	693b      	ldr	r3, [r7, #16]
 8018ac2:	68dc      	ldr	r4, [r3, #12]
 8018ac4:	4610      	mov	r0, r2
 8018ac6:	f7fa f8e5 	bl	8012c94 <lwip_htons>
 8018aca:	4603      	mov	r3, r0
 8018acc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	8b1a      	ldrh	r2, [r3, #24]
 8018ad2:	693b      	ldr	r3, [r7, #16]
 8018ad4:	68dc      	ldr	r4, [r3, #12]
 8018ad6:	4610      	mov	r0, r2
 8018ad8:	f7fa f8dc 	bl	8012c94 <lwip_htons>
 8018adc:	4603      	mov	r3, r0
 8018ade:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018ae0:	693b      	ldr	r3, [r7, #16]
 8018ae2:	68dc      	ldr	r4, [r3, #12]
 8018ae4:	6838      	ldr	r0, [r7, #0]
 8018ae6:	f7fa f8ea 	bl	8012cbe <lwip_htonl>
 8018aea:	4603      	mov	r3, r0
 8018aec:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018aee:	7dfb      	ldrb	r3, [r7, #23]
 8018af0:	089b      	lsrs	r3, r3, #2
 8018af2:	b2db      	uxtb	r3, r3
 8018af4:	b29b      	uxth	r3, r3
 8018af6:	3305      	adds	r3, #5
 8018af8:	b29b      	uxth	r3, r3
 8018afa:	031b      	lsls	r3, r3, #12
 8018afc:	b29a      	uxth	r2, r3
 8018afe:	79fb      	ldrb	r3, [r7, #7]
 8018b00:	b29b      	uxth	r3, r3
 8018b02:	4313      	orrs	r3, r2
 8018b04:	b29a      	uxth	r2, r3
 8018b06:	693b      	ldr	r3, [r7, #16]
 8018b08:	68dc      	ldr	r4, [r3, #12]
 8018b0a:	4610      	mov	r0, r2
 8018b0c:	f7fa f8c2 	bl	8012c94 <lwip_htons>
 8018b10:	4603      	mov	r3, r0
 8018b12:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018b14:	693b      	ldr	r3, [r7, #16]
 8018b16:	68db      	ldr	r3, [r3, #12]
 8018b18:	2200      	movs	r2, #0
 8018b1a:	749a      	strb	r2, [r3, #18]
 8018b1c:	2200      	movs	r2, #0
 8018b1e:	74da      	strb	r2, [r3, #19]
  return seg;
 8018b20:	693b      	ldr	r3, [r7, #16]
}
 8018b22:	4618      	mov	r0, r3
 8018b24:	371c      	adds	r7, #28
 8018b26:	46bd      	mov	sp, r7
 8018b28:	bd90      	pop	{r4, r7, pc}
 8018b2a:	bf00      	nop
 8018b2c:	0802564c 	.word	0x0802564c
 8018b30:	08025680 	.word	0x08025680
 8018b34:	080256a0 	.word	0x080256a0
 8018b38:	080256c8 	.word	0x080256c8
 8018b3c:	080256ec 	.word	0x080256ec

08018b40 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b086      	sub	sp, #24
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	607b      	str	r3, [r7, #4]
 8018b48:	4603      	mov	r3, r0
 8018b4a:	73fb      	strb	r3, [r7, #15]
 8018b4c:	460b      	mov	r3, r1
 8018b4e:	81bb      	strh	r3, [r7, #12]
 8018b50:	4613      	mov	r3, r2
 8018b52:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8018b54:	89bb      	ldrh	r3, [r7, #12]
 8018b56:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d105      	bne.n	8018b6a <tcp_pbuf_prealloc+0x2a>
 8018b5e:	4b30      	ldr	r3, [pc, #192]	; (8018c20 <tcp_pbuf_prealloc+0xe0>)
 8018b60:	22e8      	movs	r2, #232	; 0xe8
 8018b62:	4930      	ldr	r1, [pc, #192]	; (8018c24 <tcp_pbuf_prealloc+0xe4>)
 8018b64:	4830      	ldr	r0, [pc, #192]	; (8018c28 <tcp_pbuf_prealloc+0xe8>)
 8018b66:	f006 f9c9 	bl	801eefc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8018b6a:	6a3b      	ldr	r3, [r7, #32]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d105      	bne.n	8018b7c <tcp_pbuf_prealloc+0x3c>
 8018b70:	4b2b      	ldr	r3, [pc, #172]	; (8018c20 <tcp_pbuf_prealloc+0xe0>)
 8018b72:	22e9      	movs	r2, #233	; 0xe9
 8018b74:	492d      	ldr	r1, [pc, #180]	; (8018c2c <tcp_pbuf_prealloc+0xec>)
 8018b76:	482c      	ldr	r0, [pc, #176]	; (8018c28 <tcp_pbuf_prealloc+0xe8>)
 8018b78:	f006 f9c0 	bl	801eefc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018b7c:	89ba      	ldrh	r2, [r7, #12]
 8018b7e:	897b      	ldrh	r3, [r7, #10]
 8018b80:	429a      	cmp	r2, r3
 8018b82:	d221      	bcs.n	8018bc8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018b84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018b88:	f003 0302 	and.w	r3, r3, #2
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d111      	bne.n	8018bb4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018b90:	6a3b      	ldr	r3, [r7, #32]
 8018b92:	8b5b      	ldrh	r3, [r3, #26]
 8018b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d115      	bne.n	8018bc8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018b9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d007      	beq.n	8018bb4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018ba4:	6a3b      	ldr	r3, [r7, #32]
 8018ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d103      	bne.n	8018bb4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018bac:	6a3b      	ldr	r3, [r7, #32]
 8018bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d009      	beq.n	8018bc8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018bb4:	89bb      	ldrh	r3, [r7, #12]
 8018bb6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8018bba:	f023 0203 	bic.w	r2, r3, #3
 8018bbe:	897b      	ldrh	r3, [r7, #10]
 8018bc0:	4293      	cmp	r3, r2
 8018bc2:	bf28      	it	cs
 8018bc4:	4613      	movcs	r3, r2
 8018bc6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018bc8:	8af9      	ldrh	r1, [r7, #22]
 8018bca:	7bfb      	ldrb	r3, [r7, #15]
 8018bcc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	f7fb f8c3 	bl	8013d5c <pbuf_alloc>
 8018bd6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018bd8:	693b      	ldr	r3, [r7, #16]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d101      	bne.n	8018be2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8018bde:	2300      	movs	r3, #0
 8018be0:	e019      	b.n	8018c16 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018be2:	693b      	ldr	r3, [r7, #16]
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d006      	beq.n	8018bf8 <tcp_pbuf_prealloc+0xb8>
 8018bea:	4b0d      	ldr	r3, [pc, #52]	; (8018c20 <tcp_pbuf_prealloc+0xe0>)
 8018bec:	f240 120b 	movw	r2, #267	; 0x10b
 8018bf0:	490f      	ldr	r1, [pc, #60]	; (8018c30 <tcp_pbuf_prealloc+0xf0>)
 8018bf2:	480d      	ldr	r0, [pc, #52]	; (8018c28 <tcp_pbuf_prealloc+0xe8>)
 8018bf4:	f006 f982 	bl	801eefc <iprintf>
  *oversize = p->len - length;
 8018bf8:	693b      	ldr	r3, [r7, #16]
 8018bfa:	895a      	ldrh	r2, [r3, #10]
 8018bfc:	89bb      	ldrh	r3, [r7, #12]
 8018bfe:	1ad3      	subs	r3, r2, r3
 8018c00:	b29a      	uxth	r2, r3
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018c06:	693b      	ldr	r3, [r7, #16]
 8018c08:	89ba      	ldrh	r2, [r7, #12]
 8018c0a:	811a      	strh	r2, [r3, #8]
 8018c0c:	693b      	ldr	r3, [r7, #16]
 8018c0e:	891a      	ldrh	r2, [r3, #8]
 8018c10:	693b      	ldr	r3, [r7, #16]
 8018c12:	815a      	strh	r2, [r3, #10]
  return p;
 8018c14:	693b      	ldr	r3, [r7, #16]
}
 8018c16:	4618      	mov	r0, r3
 8018c18:	3718      	adds	r7, #24
 8018c1a:	46bd      	mov	sp, r7
 8018c1c:	bd80      	pop	{r7, pc}
 8018c1e:	bf00      	nop
 8018c20:	0802564c 	.word	0x0802564c
 8018c24:	08025704 	.word	0x08025704
 8018c28:	080256a0 	.word	0x080256a0
 8018c2c:	08025728 	.word	0x08025728
 8018c30:	08025748 	.word	0x08025748

08018c34 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b082      	sub	sp, #8
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
 8018c3c:	460b      	mov	r3, r1
 8018c3e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d106      	bne.n	8018c54 <tcp_write_checks+0x20>
 8018c46:	4b33      	ldr	r3, [pc, #204]	; (8018d14 <tcp_write_checks+0xe0>)
 8018c48:	f240 1233 	movw	r2, #307	; 0x133
 8018c4c:	4932      	ldr	r1, [pc, #200]	; (8018d18 <tcp_write_checks+0xe4>)
 8018c4e:	4833      	ldr	r0, [pc, #204]	; (8018d1c <tcp_write_checks+0xe8>)
 8018c50:	f006 f954 	bl	801eefc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	7d1b      	ldrb	r3, [r3, #20]
 8018c58:	2b04      	cmp	r3, #4
 8018c5a:	d00e      	beq.n	8018c7a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8018c60:	2b07      	cmp	r3, #7
 8018c62:	d00a      	beq.n	8018c7a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8018c68:	2b02      	cmp	r3, #2
 8018c6a:	d006      	beq.n	8018c7a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8018c70:	2b03      	cmp	r3, #3
 8018c72:	d002      	beq.n	8018c7a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8018c74:	f06f 030a 	mvn.w	r3, #10
 8018c78:	e048      	b.n	8018d0c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8018c7a:	887b      	ldrh	r3, [r7, #2]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d101      	bne.n	8018c84 <tcp_write_checks+0x50>
    return ERR_OK;
 8018c80:	2300      	movs	r3, #0
 8018c82:	e043      	b.n	8018d0c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8018c8a:	887a      	ldrh	r2, [r7, #2]
 8018c8c:	429a      	cmp	r2, r3
 8018c8e:	d909      	bls.n	8018ca4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	8b5b      	ldrh	r3, [r3, #26]
 8018c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018c98:	b29a      	uxth	r2, r3
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8018ca2:	e033      	b.n	8018d0c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018caa:	2b08      	cmp	r3, #8
 8018cac:	d909      	bls.n	8018cc2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	8b5b      	ldrh	r3, [r3, #26]
 8018cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018cb6:	b29a      	uxth	r2, r3
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8018cc0:	e024      	b.n	8018d0c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d00f      	beq.n	8018cec <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d11a      	bne.n	8018d0a <tcp_write_checks+0xd6>
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d116      	bne.n	8018d0a <tcp_write_checks+0xd6>
 8018cdc:	4b0d      	ldr	r3, [pc, #52]	; (8018d14 <tcp_write_checks+0xe0>)
 8018cde:	f240 1255 	movw	r2, #341	; 0x155
 8018ce2:	490f      	ldr	r1, [pc, #60]	; (8018d20 <tcp_write_checks+0xec>)
 8018ce4:	480d      	ldr	r0, [pc, #52]	; (8018d1c <tcp_write_checks+0xe8>)
 8018ce6:	f006 f909 	bl	801eefc <iprintf>
 8018cea:	e00e      	b.n	8018d0a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d103      	bne.n	8018cfc <tcp_write_checks+0xc8>
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d006      	beq.n	8018d0a <tcp_write_checks+0xd6>
 8018cfc:	4b05      	ldr	r3, [pc, #20]	; (8018d14 <tcp_write_checks+0xe0>)
 8018cfe:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8018d02:	4908      	ldr	r1, [pc, #32]	; (8018d24 <tcp_write_checks+0xf0>)
 8018d04:	4805      	ldr	r0, [pc, #20]	; (8018d1c <tcp_write_checks+0xe8>)
 8018d06:	f006 f8f9 	bl	801eefc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8018d0a:	2300      	movs	r3, #0
}
 8018d0c:	4618      	mov	r0, r3
 8018d0e:	3708      	adds	r7, #8
 8018d10:	46bd      	mov	sp, r7
 8018d12:	bd80      	pop	{r7, pc}
 8018d14:	0802564c 	.word	0x0802564c
 8018d18:	0802575c 	.word	0x0802575c
 8018d1c:	080256a0 	.word	0x080256a0
 8018d20:	0802577c 	.word	0x0802577c
 8018d24:	080257b8 	.word	0x080257b8

08018d28 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8018d28:	b590      	push	{r4, r7, lr}
 8018d2a:	b09b      	sub	sp, #108	; 0x6c
 8018d2c:	af04      	add	r7, sp, #16
 8018d2e:	60f8      	str	r0, [r7, #12]
 8018d30:	60b9      	str	r1, [r7, #8]
 8018d32:	4611      	mov	r1, r2
 8018d34:	461a      	mov	r2, r3
 8018d36:	460b      	mov	r3, r1
 8018d38:	80fb      	strh	r3, [r7, #6]
 8018d3a:	4613      	mov	r3, r2
 8018d3c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8018d3e:	2300      	movs	r3, #0
 8018d40:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8018d42:	2300      	movs	r3, #0
 8018d44:	653b      	str	r3, [r7, #80]	; 0x50
 8018d46:	2300      	movs	r3, #0
 8018d48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8018d4e:	2300      	movs	r3, #0
 8018d50:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8018d52:	2300      	movs	r3, #0
 8018d54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8018d58:	2300      	movs	r3, #0
 8018d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8018d5e:	2300      	movs	r3, #0
 8018d60:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8018d62:	2300      	movs	r3, #0
 8018d64:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8018d66:	2300      	movs	r3, #0
 8018d68:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d109      	bne.n	8018d84 <tcp_write+0x5c>
 8018d70:	4ba4      	ldr	r3, [pc, #656]	; (8019004 <tcp_write+0x2dc>)
 8018d72:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8018d76:	49a4      	ldr	r1, [pc, #656]	; (8019008 <tcp_write+0x2e0>)
 8018d78:	48a4      	ldr	r0, [pc, #656]	; (801900c <tcp_write+0x2e4>)
 8018d7a:	f006 f8bf 	bl	801eefc <iprintf>
 8018d7e:	f06f 030f 	mvn.w	r3, #15
 8018d82:	e32a      	b.n	80193da <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8018d8a:	085b      	lsrs	r3, r3, #1
 8018d8c:	b29a      	uxth	r2, r3
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018d92:	4293      	cmp	r3, r2
 8018d94:	bf28      	it	cs
 8018d96:	4613      	movcs	r3, r2
 8018d98:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8018d9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d102      	bne.n	8018da6 <tcp_write+0x7e>
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018da4:	e000      	b.n	8018da8 <tcp_write+0x80>
 8018da6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018da8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8018daa:	68bb      	ldr	r3, [r7, #8]
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d109      	bne.n	8018dc4 <tcp_write+0x9c>
 8018db0:	4b94      	ldr	r3, [pc, #592]	; (8019004 <tcp_write+0x2dc>)
 8018db2:	f240 12ad 	movw	r2, #429	; 0x1ad
 8018db6:	4996      	ldr	r1, [pc, #600]	; (8019010 <tcp_write+0x2e8>)
 8018db8:	4894      	ldr	r0, [pc, #592]	; (801900c <tcp_write+0x2e4>)
 8018dba:	f006 f89f 	bl	801eefc <iprintf>
 8018dbe:	f06f 030f 	mvn.w	r3, #15
 8018dc2:	e30a      	b.n	80193da <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8018dc4:	88fb      	ldrh	r3, [r7, #6]
 8018dc6:	4619      	mov	r1, r3
 8018dc8:	68f8      	ldr	r0, [r7, #12]
 8018dca:	f7ff ff33 	bl	8018c34 <tcp_write_checks>
 8018dce:	4603      	mov	r3, r0
 8018dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8018dd4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d002      	beq.n	8018de2 <tcp_write+0xba>
    return err;
 8018ddc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8018de0:	e2fb      	b.n	80193da <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018de8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018dec:	2300      	movs	r3, #0
 8018dee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	f000 80f6 	beq.w	8018fe8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018e00:	653b      	str	r3, [r7, #80]	; 0x50
 8018e02:	e002      	b.n	8018e0a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8018e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d1f8      	bne.n	8018e04 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8018e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e14:	7a9b      	ldrb	r3, [r3, #10]
 8018e16:	009b      	lsls	r3, r3, #2
 8018e18:	b29b      	uxth	r3, r3
 8018e1a:	f003 0304 	and.w	r3, r3, #4
 8018e1e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8018e20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e24:	891b      	ldrh	r3, [r3, #8]
 8018e26:	4619      	mov	r1, r3
 8018e28:	8c3b      	ldrh	r3, [r7, #32]
 8018e2a:	440b      	add	r3, r1
 8018e2c:	429a      	cmp	r2, r3
 8018e2e:	da06      	bge.n	8018e3e <tcp_write+0x116>
 8018e30:	4b74      	ldr	r3, [pc, #464]	; (8019004 <tcp_write+0x2dc>)
 8018e32:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8018e36:	4977      	ldr	r1, [pc, #476]	; (8019014 <tcp_write+0x2ec>)
 8018e38:	4874      	ldr	r0, [pc, #464]	; (801900c <tcp_write+0x2e4>)
 8018e3a:	f006 f85f 	bl	801eefc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8018e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e40:	891a      	ldrh	r2, [r3, #8]
 8018e42:	8c3b      	ldrh	r3, [r7, #32]
 8018e44:	4413      	add	r3, r2
 8018e46:	b29b      	uxth	r3, r3
 8018e48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018e4a:	1ad3      	subs	r3, r2, r3
 8018e4c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018e54:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8018e56:	8a7b      	ldrh	r3, [r7, #18]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d026      	beq.n	8018eaa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8018e5c:	8a7b      	ldrh	r3, [r7, #18]
 8018e5e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018e60:	429a      	cmp	r2, r3
 8018e62:	d206      	bcs.n	8018e72 <tcp_write+0x14a>
 8018e64:	4b67      	ldr	r3, [pc, #412]	; (8019004 <tcp_write+0x2dc>)
 8018e66:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8018e6a:	496b      	ldr	r1, [pc, #428]	; (8019018 <tcp_write+0x2f0>)
 8018e6c:	4867      	ldr	r0, [pc, #412]	; (801900c <tcp_write+0x2e4>)
 8018e6e:	f006 f845 	bl	801eefc <iprintf>
      seg = last_unsent;
 8018e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e74:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8018e76:	8a7b      	ldrh	r3, [r7, #18]
 8018e78:	88fa      	ldrh	r2, [r7, #6]
 8018e7a:	4293      	cmp	r3, r2
 8018e7c:	bf28      	it	cs
 8018e7e:	4613      	movcs	r3, r2
 8018e80:	b29b      	uxth	r3, r3
 8018e82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018e84:	4293      	cmp	r3, r2
 8018e86:	bf28      	it	cs
 8018e88:	4613      	movcs	r3, r2
 8018e8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8018e8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018e90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018e92:	4413      	add	r3, r2
 8018e94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8018e98:	8a7a      	ldrh	r2, [r7, #18]
 8018e9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018e9c:	1ad3      	subs	r3, r2, r3
 8018e9e:	b29b      	uxth	r3, r3
 8018ea0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8018ea2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018ea4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018ea6:	1ad3      	subs	r3, r2, r3
 8018ea8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8018eaa:	8a7b      	ldrh	r3, [r7, #18]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d00b      	beq.n	8018ec8 <tcp_write+0x1a0>
 8018eb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018eb4:	88fb      	ldrh	r3, [r7, #6]
 8018eb6:	429a      	cmp	r2, r3
 8018eb8:	d006      	beq.n	8018ec8 <tcp_write+0x1a0>
 8018eba:	4b52      	ldr	r3, [pc, #328]	; (8019004 <tcp_write+0x2dc>)
 8018ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018ec0:	4956      	ldr	r1, [pc, #344]	; (801901c <tcp_write+0x2f4>)
 8018ec2:	4852      	ldr	r0, [pc, #328]	; (801900c <tcp_write+0x2e4>)
 8018ec4:	f006 f81a 	bl	801eefc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8018ec8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018ecc:	88fb      	ldrh	r3, [r7, #6]
 8018ece:	429a      	cmp	r2, r3
 8018ed0:	f080 8167 	bcs.w	80191a2 <tcp_write+0x47a>
 8018ed4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	f000 8163 	beq.w	80191a2 <tcp_write+0x47a>
 8018edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018ede:	891b      	ldrh	r3, [r3, #8]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	f000 815e 	beq.w	80191a2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8018ee6:	88fa      	ldrh	r2, [r7, #6]
 8018ee8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018eec:	1ad2      	subs	r2, r2, r3
 8018eee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018ef0:	4293      	cmp	r3, r2
 8018ef2:	bfa8      	it	ge
 8018ef4:	4613      	movge	r3, r2
 8018ef6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8018ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018efa:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018efc:	797b      	ldrb	r3, [r7, #5]
 8018efe:	f003 0301 	and.w	r3, r3, #1
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d027      	beq.n	8018f56 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8018f06:	f107 0012 	add.w	r0, r7, #18
 8018f0a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018f0c:	8bf9      	ldrh	r1, [r7, #30]
 8018f0e:	2301      	movs	r3, #1
 8018f10:	9302      	str	r3, [sp, #8]
 8018f12:	797b      	ldrb	r3, [r7, #5]
 8018f14:	9301      	str	r3, [sp, #4]
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	9300      	str	r3, [sp, #0]
 8018f1a:	4603      	mov	r3, r0
 8018f1c:	2000      	movs	r0, #0
 8018f1e:	f7ff fe0f 	bl	8018b40 <tcp_pbuf_prealloc>
 8018f22:	6578      	str	r0, [r7, #84]	; 0x54
 8018f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	f000 8225 	beq.w	8019376 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8018f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018f2e:	6858      	ldr	r0, [r3, #4]
 8018f30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018f34:	68ba      	ldr	r2, [r7, #8]
 8018f36:	4413      	add	r3, r2
 8018f38:	8bfa      	ldrh	r2, [r7, #30]
 8018f3a:	4619      	mov	r1, r3
 8018f3c:	f005 f88a 	bl	801e054 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8018f40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018f42:	f7fb fa7d 	bl	8014440 <pbuf_clen>
 8018f46:	4603      	mov	r3, r0
 8018f48:	461a      	mov	r2, r3
 8018f4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018f4e:	4413      	add	r3, r2
 8018f50:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8018f54:	e041      	b.n	8018fda <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8018f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f58:	685b      	ldr	r3, [r3, #4]
 8018f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8018f5c:	e002      	b.n	8018f64 <tcp_write+0x23c>
 8018f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	637b      	str	r3, [r7, #52]	; 0x34
 8018f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f66:	681b      	ldr	r3, [r3, #0]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d1f8      	bne.n	8018f5e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f6e:	7b1b      	ldrb	r3, [r3, #12]
 8018f70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d115      	bne.n	8018fa4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8018f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f7a:	685b      	ldr	r3, [r3, #4]
 8018f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018f7e:	8952      	ldrh	r2, [r2, #10]
 8018f80:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018f82:	68ba      	ldr	r2, [r7, #8]
 8018f84:	429a      	cmp	r2, r3
 8018f86:	d10d      	bne.n	8018fa4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8018f88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d006      	beq.n	8018f9e <tcp_write+0x276>
 8018f90:	4b1c      	ldr	r3, [pc, #112]	; (8019004 <tcp_write+0x2dc>)
 8018f92:	f240 2231 	movw	r2, #561	; 0x231
 8018f96:	4922      	ldr	r1, [pc, #136]	; (8019020 <tcp_write+0x2f8>)
 8018f98:	481c      	ldr	r0, [pc, #112]	; (801900c <tcp_write+0x2e4>)
 8018f9a:	f005 ffaf 	bl	801eefc <iprintf>
          extendlen = seglen;
 8018f9e:	8bfb      	ldrh	r3, [r7, #30]
 8018fa0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8018fa2:	e01a      	b.n	8018fda <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8018fa4:	8bfb      	ldrh	r3, [r7, #30]
 8018fa6:	2201      	movs	r2, #1
 8018fa8:	4619      	mov	r1, r3
 8018faa:	2000      	movs	r0, #0
 8018fac:	f7fa fed6 	bl	8013d5c <pbuf_alloc>
 8018fb0:	6578      	str	r0, [r7, #84]	; 0x54
 8018fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	f000 81e0 	beq.w	801937a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8018fba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018fbe:	68ba      	ldr	r2, [r7, #8]
 8018fc0:	441a      	add	r2, r3
 8018fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018fc4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8018fc6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018fc8:	f7fb fa3a 	bl	8014440 <pbuf_clen>
 8018fcc:	4603      	mov	r3, r0
 8018fce:	461a      	mov	r2, r3
 8018fd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018fd4:	4413      	add	r3, r2
 8018fd6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8018fda:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018fde:	8bfb      	ldrh	r3, [r7, #30]
 8018fe0:	4413      	add	r3, r2
 8018fe2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8018fe6:	e0dc      	b.n	80191a2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	f000 80d7 	beq.w	80191a2 <tcp_write+0x47a>
 8018ff4:	4b03      	ldr	r3, [pc, #12]	; (8019004 <tcp_write+0x2dc>)
 8018ff6:	f240 224a 	movw	r2, #586	; 0x24a
 8018ffa:	490a      	ldr	r1, [pc, #40]	; (8019024 <tcp_write+0x2fc>)
 8018ffc:	4803      	ldr	r0, [pc, #12]	; (801900c <tcp_write+0x2e4>)
 8018ffe:	f005 ff7d 	bl	801eefc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8019002:	e0ce      	b.n	80191a2 <tcp_write+0x47a>
 8019004:	0802564c 	.word	0x0802564c
 8019008:	080257ec 	.word	0x080257ec
 801900c:	080256a0 	.word	0x080256a0
 8019010:	08025804 	.word	0x08025804
 8019014:	08025838 	.word	0x08025838
 8019018:	08025850 	.word	0x08025850
 801901c:	08025870 	.word	0x08025870
 8019020:	08025890 	.word	0x08025890
 8019024:	080258bc 	.word	0x080258bc
    struct pbuf *p;
    u16_t left = len - pos;
 8019028:	88fa      	ldrh	r2, [r7, #6]
 801902a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801902e:	1ad3      	subs	r3, r2, r3
 8019030:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8019032:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019036:	b29b      	uxth	r3, r3
 8019038:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801903a:	1ad3      	subs	r3, r2, r3
 801903c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801903e:	8b7a      	ldrh	r2, [r7, #26]
 8019040:	8bbb      	ldrh	r3, [r7, #28]
 8019042:	4293      	cmp	r3, r2
 8019044:	bf28      	it	cs
 8019046:	4613      	movcs	r3, r2
 8019048:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801904a:	797b      	ldrb	r3, [r7, #5]
 801904c:	f003 0301 	and.w	r3, r3, #1
 8019050:	2b00      	cmp	r3, #0
 8019052:	d036      	beq.n	80190c2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019054:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019058:	b29a      	uxth	r2, r3
 801905a:	8b3b      	ldrh	r3, [r7, #24]
 801905c:	4413      	add	r3, r2
 801905e:	b299      	uxth	r1, r3
 8019060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019062:	2b00      	cmp	r3, #0
 8019064:	bf0c      	ite	eq
 8019066:	2301      	moveq	r3, #1
 8019068:	2300      	movne	r3, #0
 801906a:	b2db      	uxtb	r3, r3
 801906c:	f107 0012 	add.w	r0, r7, #18
 8019070:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019072:	9302      	str	r3, [sp, #8]
 8019074:	797b      	ldrb	r3, [r7, #5]
 8019076:	9301      	str	r3, [sp, #4]
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	9300      	str	r3, [sp, #0]
 801907c:	4603      	mov	r3, r0
 801907e:	2036      	movs	r0, #54	; 0x36
 8019080:	f7ff fd5e 	bl	8018b40 <tcp_pbuf_prealloc>
 8019084:	6338      	str	r0, [r7, #48]	; 0x30
 8019086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019088:	2b00      	cmp	r3, #0
 801908a:	f000 8178 	beq.w	801937e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019090:	895b      	ldrh	r3, [r3, #10]
 8019092:	8b3a      	ldrh	r2, [r7, #24]
 8019094:	429a      	cmp	r2, r3
 8019096:	d906      	bls.n	80190a6 <tcp_write+0x37e>
 8019098:	4b8c      	ldr	r3, [pc, #560]	; (80192cc <tcp_write+0x5a4>)
 801909a:	f240 2266 	movw	r2, #614	; 0x266
 801909e:	498c      	ldr	r1, [pc, #560]	; (80192d0 <tcp_write+0x5a8>)
 80190a0:	488c      	ldr	r0, [pc, #560]	; (80192d4 <tcp_write+0x5ac>)
 80190a2:	f005 ff2b 	bl	801eefc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80190a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190a8:	685a      	ldr	r2, [r3, #4]
 80190aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80190ae:	18d0      	adds	r0, r2, r3
 80190b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80190b4:	68ba      	ldr	r2, [r7, #8]
 80190b6:	4413      	add	r3, r2
 80190b8:	8b3a      	ldrh	r2, [r7, #24]
 80190ba:	4619      	mov	r1, r3
 80190bc:	f004 ffca 	bl	801e054 <memcpy>
 80190c0:	e02f      	b.n	8019122 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80190c2:	8a7b      	ldrh	r3, [r7, #18]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d006      	beq.n	80190d6 <tcp_write+0x3ae>
 80190c8:	4b80      	ldr	r3, [pc, #512]	; (80192cc <tcp_write+0x5a4>)
 80190ca:	f240 2271 	movw	r2, #625	; 0x271
 80190ce:	4982      	ldr	r1, [pc, #520]	; (80192d8 <tcp_write+0x5b0>)
 80190d0:	4880      	ldr	r0, [pc, #512]	; (80192d4 <tcp_write+0x5ac>)
 80190d2:	f005 ff13 	bl	801eefc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80190d6:	8b3b      	ldrh	r3, [r7, #24]
 80190d8:	2201      	movs	r2, #1
 80190da:	4619      	mov	r1, r3
 80190dc:	2036      	movs	r0, #54	; 0x36
 80190de:	f7fa fe3d 	bl	8013d5c <pbuf_alloc>
 80190e2:	6178      	str	r0, [r7, #20]
 80190e4:	697b      	ldr	r3, [r7, #20]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	f000 814b 	beq.w	8019382 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80190ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80190f0:	68ba      	ldr	r2, [r7, #8]
 80190f2:	441a      	add	r2, r3
 80190f4:	697b      	ldr	r3, [r7, #20]
 80190f6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80190f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80190fc:	b29b      	uxth	r3, r3
 80190fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019102:	4619      	mov	r1, r3
 8019104:	2036      	movs	r0, #54	; 0x36
 8019106:	f7fa fe29 	bl	8013d5c <pbuf_alloc>
 801910a:	6338      	str	r0, [r7, #48]	; 0x30
 801910c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801910e:	2b00      	cmp	r3, #0
 8019110:	d103      	bne.n	801911a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8019112:	6978      	ldr	r0, [r7, #20]
 8019114:	f7fb f906 	bl	8014324 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019118:	e136      	b.n	8019388 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801911a:	6979      	ldr	r1, [r7, #20]
 801911c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801911e:	f7fb f9cf 	bl	80144c0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8019122:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019124:	f7fb f98c 	bl	8014440 <pbuf_clen>
 8019128:	4603      	mov	r3, r0
 801912a:	461a      	mov	r2, r3
 801912c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019130:	4413      	add	r3, r2
 8019132:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019136:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801913a:	2b09      	cmp	r3, #9
 801913c:	d903      	bls.n	8019146 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801913e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019140:	f7fb f8f0 	bl	8014324 <pbuf_free>
      goto memerr;
 8019144:	e120      	b.n	8019388 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801914a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801914e:	441a      	add	r2, r3
 8019150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019154:	9300      	str	r3, [sp, #0]
 8019156:	4613      	mov	r3, r2
 8019158:	2200      	movs	r2, #0
 801915a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801915c:	68f8      	ldr	r0, [r7, #12]
 801915e:	f7ff fc51 	bl	8018a04 <tcp_create_segment>
 8019162:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019166:	2b00      	cmp	r3, #0
 8019168:	f000 810d 	beq.w	8019386 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801916c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801916e:	2b00      	cmp	r3, #0
 8019170:	d102      	bne.n	8019178 <tcp_write+0x450>
      queue = seg;
 8019172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019174:	647b      	str	r3, [r7, #68]	; 0x44
 8019176:	e00c      	b.n	8019192 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801917a:	2b00      	cmp	r3, #0
 801917c:	d106      	bne.n	801918c <tcp_write+0x464>
 801917e:	4b53      	ldr	r3, [pc, #332]	; (80192cc <tcp_write+0x5a4>)
 8019180:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019184:	4955      	ldr	r1, [pc, #340]	; (80192dc <tcp_write+0x5b4>)
 8019186:	4853      	ldr	r0, [pc, #332]	; (80192d4 <tcp_write+0x5ac>)
 8019188:	f005 feb8 	bl	801eefc <iprintf>
      prev_seg->next = seg;
 801918c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801918e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019190:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019194:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019196:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801919a:	8b3b      	ldrh	r3, [r7, #24]
 801919c:	4413      	add	r3, r2
 801919e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80191a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80191a6:	88fb      	ldrh	r3, [r7, #6]
 80191a8:	429a      	cmp	r2, r3
 80191aa:	f4ff af3d 	bcc.w	8019028 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80191ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d02c      	beq.n	801920e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80191b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191b6:	685b      	ldr	r3, [r3, #4]
 80191b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80191ba:	e01e      	b.n	80191fa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80191bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191be:	891a      	ldrh	r2, [r3, #8]
 80191c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80191c2:	4413      	add	r3, r2
 80191c4:	b29a      	uxth	r2, r3
 80191c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191c8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80191ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d110      	bne.n	80191f4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80191d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191d4:	685b      	ldr	r3, [r3, #4]
 80191d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80191d8:	8952      	ldrh	r2, [r2, #10]
 80191da:	4413      	add	r3, r2
 80191dc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80191de:	68b9      	ldr	r1, [r7, #8]
 80191e0:	4618      	mov	r0, r3
 80191e2:	f004 ff37 	bl	801e054 <memcpy>
        p->len += oversize_used;
 80191e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191e8:	895a      	ldrh	r2, [r3, #10]
 80191ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80191ec:	4413      	add	r3, r2
 80191ee:	b29a      	uxth	r2, r3
 80191f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191f2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80191f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80191fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d1dd      	bne.n	80191bc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8019200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019202:	891a      	ldrh	r2, [r3, #8]
 8019204:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019206:	4413      	add	r3, r2
 8019208:	b29a      	uxth	r2, r3
 801920a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801920c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801920e:	8a7a      	ldrh	r2, [r7, #18]
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019218:	2b00      	cmp	r3, #0
 801921a:	d018      	beq.n	801924e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801921c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801921e:	2b00      	cmp	r3, #0
 8019220:	d106      	bne.n	8019230 <tcp_write+0x508>
 8019222:	4b2a      	ldr	r3, [pc, #168]	; (80192cc <tcp_write+0x5a4>)
 8019224:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8019228:	492d      	ldr	r1, [pc, #180]	; (80192e0 <tcp_write+0x5b8>)
 801922a:	482a      	ldr	r0, [pc, #168]	; (80192d4 <tcp_write+0x5ac>)
 801922c:	f005 fe66 	bl	801eefc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8019230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019232:	685b      	ldr	r3, [r3, #4]
 8019234:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019236:	4618      	mov	r0, r3
 8019238:	f7fb f942 	bl	80144c0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801923c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801923e:	891a      	ldrh	r2, [r3, #8]
 8019240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019242:	891b      	ldrh	r3, [r3, #8]
 8019244:	4413      	add	r3, r2
 8019246:	b29a      	uxth	r2, r3
 8019248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801924a:	811a      	strh	r2, [r3, #8]
 801924c:	e037      	b.n	80192be <tcp_write+0x596>
  } else if (extendlen > 0) {
 801924e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019250:	2b00      	cmp	r3, #0
 8019252:	d034      	beq.n	80192be <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019256:	2b00      	cmp	r3, #0
 8019258:	d003      	beq.n	8019262 <tcp_write+0x53a>
 801925a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801925c:	685b      	ldr	r3, [r3, #4]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d106      	bne.n	8019270 <tcp_write+0x548>
 8019262:	4b1a      	ldr	r3, [pc, #104]	; (80192cc <tcp_write+0x5a4>)
 8019264:	f240 22e6 	movw	r2, #742	; 0x2e6
 8019268:	491e      	ldr	r1, [pc, #120]	; (80192e4 <tcp_write+0x5bc>)
 801926a:	481a      	ldr	r0, [pc, #104]	; (80192d4 <tcp_write+0x5ac>)
 801926c:	f005 fe46 	bl	801eefc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019272:	685b      	ldr	r3, [r3, #4]
 8019274:	62bb      	str	r3, [r7, #40]	; 0x28
 8019276:	e009      	b.n	801928c <tcp_write+0x564>
      p->tot_len += extendlen;
 8019278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801927a:	891a      	ldrh	r2, [r3, #8]
 801927c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801927e:	4413      	add	r3, r2
 8019280:	b29a      	uxth	r2, r3
 8019282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019284:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	62bb      	str	r3, [r7, #40]	; 0x28
 801928c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d1f1      	bne.n	8019278 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019296:	891a      	ldrh	r2, [r3, #8]
 8019298:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801929a:	4413      	add	r3, r2
 801929c:	b29a      	uxth	r2, r3
 801929e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192a0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80192a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192a4:	895a      	ldrh	r2, [r3, #10]
 80192a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80192a8:	4413      	add	r3, r2
 80192aa:	b29a      	uxth	r2, r3
 80192ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ae:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80192b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192b2:	891a      	ldrh	r2, [r3, #8]
 80192b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80192b6:	4413      	add	r3, r2
 80192b8:	b29a      	uxth	r2, r3
 80192ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192bc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80192be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d111      	bne.n	80192e8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80192c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80192ca:	e010      	b.n	80192ee <tcp_write+0x5c6>
 80192cc:	0802564c 	.word	0x0802564c
 80192d0:	080258ec 	.word	0x080258ec
 80192d4:	080256a0 	.word	0x080256a0
 80192d8:	0802592c 	.word	0x0802592c
 80192dc:	0802593c 	.word	0x0802593c
 80192e0:	08025950 	.word	0x08025950
 80192e4:	08025988 	.word	0x08025988
  } else {
    last_unsent->next = queue;
 80192e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80192ec:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80192f2:	88fb      	ldrh	r3, [r7, #6]
 80192f4:	441a      	add	r2, r3
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8019300:	88fb      	ldrh	r3, [r7, #6]
 8019302:	1ad3      	subs	r3, r2, r3
 8019304:	b29a      	uxth	r2, r3
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019312:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801931c:	2b00      	cmp	r3, #0
 801931e:	d00e      	beq.n	801933e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019324:	2b00      	cmp	r3, #0
 8019326:	d10a      	bne.n	801933e <tcp_write+0x616>
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801932c:	2b00      	cmp	r3, #0
 801932e:	d106      	bne.n	801933e <tcp_write+0x616>
 8019330:	4b2c      	ldr	r3, [pc, #176]	; (80193e4 <tcp_write+0x6bc>)
 8019332:	f240 3212 	movw	r2, #786	; 0x312
 8019336:	492c      	ldr	r1, [pc, #176]	; (80193e8 <tcp_write+0x6c0>)
 8019338:	482c      	ldr	r0, [pc, #176]	; (80193ec <tcp_write+0x6c4>)
 801933a:	f005 fddf 	bl	801eefc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801933e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019340:	2b00      	cmp	r3, #0
 8019342:	d016      	beq.n	8019372 <tcp_write+0x64a>
 8019344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019346:	68db      	ldr	r3, [r3, #12]
 8019348:	2b00      	cmp	r3, #0
 801934a:	d012      	beq.n	8019372 <tcp_write+0x64a>
 801934c:	797b      	ldrb	r3, [r7, #5]
 801934e:	f003 0302 	and.w	r3, r3, #2
 8019352:	2b00      	cmp	r3, #0
 8019354:	d10d      	bne.n	8019372 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019358:	68db      	ldr	r3, [r3, #12]
 801935a:	899b      	ldrh	r3, [r3, #12]
 801935c:	b29c      	uxth	r4, r3
 801935e:	2008      	movs	r0, #8
 8019360:	f7f9 fc98 	bl	8012c94 <lwip_htons>
 8019364:	4603      	mov	r3, r0
 8019366:	461a      	mov	r2, r3
 8019368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801936a:	68db      	ldr	r3, [r3, #12]
 801936c:	4322      	orrs	r2, r4
 801936e:	b292      	uxth	r2, r2
 8019370:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8019372:	2300      	movs	r3, #0
 8019374:	e031      	b.n	80193da <tcp_write+0x6b2>
          goto memerr;
 8019376:	bf00      	nop
 8019378:	e006      	b.n	8019388 <tcp_write+0x660>
            goto memerr;
 801937a:	bf00      	nop
 801937c:	e004      	b.n	8019388 <tcp_write+0x660>
        goto memerr;
 801937e:	bf00      	nop
 8019380:	e002      	b.n	8019388 <tcp_write+0x660>
        goto memerr;
 8019382:	bf00      	nop
 8019384:	e000      	b.n	8019388 <tcp_write+0x660>
      goto memerr;
 8019386:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	8b5b      	ldrh	r3, [r3, #26]
 801938c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019390:	b29a      	uxth	r2, r3
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8019396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019398:	2b00      	cmp	r3, #0
 801939a:	d002      	beq.n	80193a2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801939c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801939e:	f7fa ffc1 	bl	8014324 <pbuf_free>
  }
  if (queue != NULL) {
 80193a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d002      	beq.n	80193ae <tcp_write+0x686>
    tcp_segs_free(queue);
 80193a8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80193aa:	f7fc fb6f 	bl	8015a8c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d00e      	beq.n	80193d6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d10a      	bne.n	80193d6 <tcp_write+0x6ae>
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d106      	bne.n	80193d6 <tcp_write+0x6ae>
 80193c8:	4b06      	ldr	r3, [pc, #24]	; (80193e4 <tcp_write+0x6bc>)
 80193ca:	f240 3227 	movw	r2, #807	; 0x327
 80193ce:	4906      	ldr	r1, [pc, #24]	; (80193e8 <tcp_write+0x6c0>)
 80193d0:	4806      	ldr	r0, [pc, #24]	; (80193ec <tcp_write+0x6c4>)
 80193d2:	f005 fd93 	bl	801eefc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80193d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80193da:	4618      	mov	r0, r3
 80193dc:	375c      	adds	r7, #92	; 0x5c
 80193de:	46bd      	mov	sp, r7
 80193e0:	bd90      	pop	{r4, r7, pc}
 80193e2:	bf00      	nop
 80193e4:	0802564c 	.word	0x0802564c
 80193e8:	080259c0 	.word	0x080259c0
 80193ec:	080256a0 	.word	0x080256a0

080193f0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80193f0:	b590      	push	{r4, r7, lr}
 80193f2:	b08b      	sub	sp, #44	; 0x2c
 80193f4:	af02      	add	r7, sp, #8
 80193f6:	6078      	str	r0, [r7, #4]
 80193f8:	460b      	mov	r3, r1
 80193fa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80193fc:	2300      	movs	r3, #0
 80193fe:	61fb      	str	r3, [r7, #28]
 8019400:	2300      	movs	r3, #0
 8019402:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019404:	2300      	movs	r3, #0
 8019406:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d106      	bne.n	801941c <tcp_split_unsent_seg+0x2c>
 801940e:	4b95      	ldr	r3, [pc, #596]	; (8019664 <tcp_split_unsent_seg+0x274>)
 8019410:	f240 324b 	movw	r2, #843	; 0x34b
 8019414:	4994      	ldr	r1, [pc, #592]	; (8019668 <tcp_split_unsent_seg+0x278>)
 8019416:	4895      	ldr	r0, [pc, #596]	; (801966c <tcp_split_unsent_seg+0x27c>)
 8019418:	f005 fd70 	bl	801eefc <iprintf>

  useg = pcb->unsent;
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019420:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8019422:	697b      	ldr	r3, [r7, #20]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d102      	bne.n	801942e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019428:	f04f 33ff 	mov.w	r3, #4294967295
 801942c:	e116      	b.n	801965c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801942e:	887b      	ldrh	r3, [r7, #2]
 8019430:	2b00      	cmp	r3, #0
 8019432:	d109      	bne.n	8019448 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019434:	4b8b      	ldr	r3, [pc, #556]	; (8019664 <tcp_split_unsent_seg+0x274>)
 8019436:	f240 3253 	movw	r2, #851	; 0x353
 801943a:	498d      	ldr	r1, [pc, #564]	; (8019670 <tcp_split_unsent_seg+0x280>)
 801943c:	488b      	ldr	r0, [pc, #556]	; (801966c <tcp_split_unsent_seg+0x27c>)
 801943e:	f005 fd5d 	bl	801eefc <iprintf>
    return ERR_VAL;
 8019442:	f06f 0305 	mvn.w	r3, #5
 8019446:	e109      	b.n	801965c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8019448:	697b      	ldr	r3, [r7, #20]
 801944a:	891b      	ldrh	r3, [r3, #8]
 801944c:	887a      	ldrh	r2, [r7, #2]
 801944e:	429a      	cmp	r2, r3
 8019450:	d301      	bcc.n	8019456 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019452:	2300      	movs	r3, #0
 8019454:	e102      	b.n	801965c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801945a:	887a      	ldrh	r2, [r7, #2]
 801945c:	429a      	cmp	r2, r3
 801945e:	d906      	bls.n	801946e <tcp_split_unsent_seg+0x7e>
 8019460:	4b80      	ldr	r3, [pc, #512]	; (8019664 <tcp_split_unsent_seg+0x274>)
 8019462:	f240 325b 	movw	r2, #859	; 0x35b
 8019466:	4983      	ldr	r1, [pc, #524]	; (8019674 <tcp_split_unsent_seg+0x284>)
 8019468:	4880      	ldr	r0, [pc, #512]	; (801966c <tcp_split_unsent_seg+0x27c>)
 801946a:	f005 fd47 	bl	801eefc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801946e:	697b      	ldr	r3, [r7, #20]
 8019470:	891b      	ldrh	r3, [r3, #8]
 8019472:	2b00      	cmp	r3, #0
 8019474:	d106      	bne.n	8019484 <tcp_split_unsent_seg+0x94>
 8019476:	4b7b      	ldr	r3, [pc, #492]	; (8019664 <tcp_split_unsent_seg+0x274>)
 8019478:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801947c:	497e      	ldr	r1, [pc, #504]	; (8019678 <tcp_split_unsent_seg+0x288>)
 801947e:	487b      	ldr	r0, [pc, #492]	; (801966c <tcp_split_unsent_seg+0x27c>)
 8019480:	f005 fd3c 	bl	801eefc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019484:	697b      	ldr	r3, [r7, #20]
 8019486:	7a9b      	ldrb	r3, [r3, #10]
 8019488:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801948a:	7bfb      	ldrb	r3, [r7, #15]
 801948c:	009b      	lsls	r3, r3, #2
 801948e:	b2db      	uxtb	r3, r3
 8019490:	f003 0304 	and.w	r3, r3, #4
 8019494:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019496:	697b      	ldr	r3, [r7, #20]
 8019498:	891a      	ldrh	r2, [r3, #8]
 801949a:	887b      	ldrh	r3, [r7, #2]
 801949c:	1ad3      	subs	r3, r2, r3
 801949e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80194a0:	7bbb      	ldrb	r3, [r7, #14]
 80194a2:	b29a      	uxth	r2, r3
 80194a4:	89bb      	ldrh	r3, [r7, #12]
 80194a6:	4413      	add	r3, r2
 80194a8:	b29b      	uxth	r3, r3
 80194aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80194ae:	4619      	mov	r1, r3
 80194b0:	2036      	movs	r0, #54	; 0x36
 80194b2:	f7fa fc53 	bl	8013d5c <pbuf_alloc>
 80194b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80194b8:	693b      	ldr	r3, [r7, #16]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	f000 80b7 	beq.w	801962e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80194c0:	697b      	ldr	r3, [r7, #20]
 80194c2:	685b      	ldr	r3, [r3, #4]
 80194c4:	891a      	ldrh	r2, [r3, #8]
 80194c6:	697b      	ldr	r3, [r7, #20]
 80194c8:	891b      	ldrh	r3, [r3, #8]
 80194ca:	1ad3      	subs	r3, r2, r3
 80194cc:	b29a      	uxth	r2, r3
 80194ce:	887b      	ldrh	r3, [r7, #2]
 80194d0:	4413      	add	r3, r2
 80194d2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80194d4:	697b      	ldr	r3, [r7, #20]
 80194d6:	6858      	ldr	r0, [r3, #4]
 80194d8:	693b      	ldr	r3, [r7, #16]
 80194da:	685a      	ldr	r2, [r3, #4]
 80194dc:	7bbb      	ldrb	r3, [r7, #14]
 80194de:	18d1      	adds	r1, r2, r3
 80194e0:	897b      	ldrh	r3, [r7, #10]
 80194e2:	89ba      	ldrh	r2, [r7, #12]
 80194e4:	f7fb f924 	bl	8014730 <pbuf_copy_partial>
 80194e8:	4603      	mov	r3, r0
 80194ea:	461a      	mov	r2, r3
 80194ec:	89bb      	ldrh	r3, [r7, #12]
 80194ee:	4293      	cmp	r3, r2
 80194f0:	f040 809f 	bne.w	8019632 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80194f4:	697b      	ldr	r3, [r7, #20]
 80194f6:	68db      	ldr	r3, [r3, #12]
 80194f8:	899b      	ldrh	r3, [r3, #12]
 80194fa:	b29b      	uxth	r3, r3
 80194fc:	4618      	mov	r0, r3
 80194fe:	f7f9 fbc9 	bl	8012c94 <lwip_htons>
 8019502:	4603      	mov	r3, r0
 8019504:	b2db      	uxtb	r3, r3
 8019506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801950a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801950c:	2300      	movs	r3, #0
 801950e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019510:	7efb      	ldrb	r3, [r7, #27]
 8019512:	f003 0308 	and.w	r3, r3, #8
 8019516:	2b00      	cmp	r3, #0
 8019518:	d007      	beq.n	801952a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801951a:	7efb      	ldrb	r3, [r7, #27]
 801951c:	f023 0308 	bic.w	r3, r3, #8
 8019520:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8019522:	7ebb      	ldrb	r3, [r7, #26]
 8019524:	f043 0308 	orr.w	r3, r3, #8
 8019528:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801952a:	7efb      	ldrb	r3, [r7, #27]
 801952c:	f003 0301 	and.w	r3, r3, #1
 8019530:	2b00      	cmp	r3, #0
 8019532:	d007      	beq.n	8019544 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019534:	7efb      	ldrb	r3, [r7, #27]
 8019536:	f023 0301 	bic.w	r3, r3, #1
 801953a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801953c:	7ebb      	ldrb	r3, [r7, #26]
 801953e:	f043 0301 	orr.w	r3, r3, #1
 8019542:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019544:	697b      	ldr	r3, [r7, #20]
 8019546:	68db      	ldr	r3, [r3, #12]
 8019548:	685b      	ldr	r3, [r3, #4]
 801954a:	4618      	mov	r0, r3
 801954c:	f7f9 fbb7 	bl	8012cbe <lwip_htonl>
 8019550:	4602      	mov	r2, r0
 8019552:	887b      	ldrh	r3, [r7, #2]
 8019554:	18d1      	adds	r1, r2, r3
 8019556:	7eba      	ldrb	r2, [r7, #26]
 8019558:	7bfb      	ldrb	r3, [r7, #15]
 801955a:	9300      	str	r3, [sp, #0]
 801955c:	460b      	mov	r3, r1
 801955e:	6939      	ldr	r1, [r7, #16]
 8019560:	6878      	ldr	r0, [r7, #4]
 8019562:	f7ff fa4f 	bl	8018a04 <tcp_create_segment>
 8019566:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019568:	69fb      	ldr	r3, [r7, #28]
 801956a:	2b00      	cmp	r3, #0
 801956c:	d063      	beq.n	8019636 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801956e:	697b      	ldr	r3, [r7, #20]
 8019570:	685b      	ldr	r3, [r3, #4]
 8019572:	4618      	mov	r0, r3
 8019574:	f7fa ff64 	bl	8014440 <pbuf_clen>
 8019578:	4603      	mov	r3, r0
 801957a:	461a      	mov	r2, r3
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019582:	1a9b      	subs	r3, r3, r2
 8019584:	b29a      	uxth	r2, r3
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801958c:	697b      	ldr	r3, [r7, #20]
 801958e:	6858      	ldr	r0, [r3, #4]
 8019590:	697b      	ldr	r3, [r7, #20]
 8019592:	685b      	ldr	r3, [r3, #4]
 8019594:	891a      	ldrh	r2, [r3, #8]
 8019596:	89bb      	ldrh	r3, [r7, #12]
 8019598:	1ad3      	subs	r3, r2, r3
 801959a:	b29b      	uxth	r3, r3
 801959c:	4619      	mov	r1, r3
 801959e:	f7fa fd3b 	bl	8014018 <pbuf_realloc>
  useg->len -= remainder;
 80195a2:	697b      	ldr	r3, [r7, #20]
 80195a4:	891a      	ldrh	r2, [r3, #8]
 80195a6:	89bb      	ldrh	r3, [r7, #12]
 80195a8:	1ad3      	subs	r3, r2, r3
 80195aa:	b29a      	uxth	r2, r3
 80195ac:	697b      	ldr	r3, [r7, #20]
 80195ae:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80195b0:	697b      	ldr	r3, [r7, #20]
 80195b2:	68db      	ldr	r3, [r3, #12]
 80195b4:	899b      	ldrh	r3, [r3, #12]
 80195b6:	b29c      	uxth	r4, r3
 80195b8:	7efb      	ldrb	r3, [r7, #27]
 80195ba:	b29b      	uxth	r3, r3
 80195bc:	4618      	mov	r0, r3
 80195be:	f7f9 fb69 	bl	8012c94 <lwip_htons>
 80195c2:	4603      	mov	r3, r0
 80195c4:	461a      	mov	r2, r3
 80195c6:	697b      	ldr	r3, [r7, #20]
 80195c8:	68db      	ldr	r3, [r3, #12]
 80195ca:	4322      	orrs	r2, r4
 80195cc:	b292      	uxth	r2, r2
 80195ce:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80195d0:	697b      	ldr	r3, [r7, #20]
 80195d2:	685b      	ldr	r3, [r3, #4]
 80195d4:	4618      	mov	r0, r3
 80195d6:	f7fa ff33 	bl	8014440 <pbuf_clen>
 80195da:	4603      	mov	r3, r0
 80195dc:	461a      	mov	r2, r3
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80195e4:	4413      	add	r3, r2
 80195e6:	b29a      	uxth	r2, r3
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80195ee:	69fb      	ldr	r3, [r7, #28]
 80195f0:	685b      	ldr	r3, [r3, #4]
 80195f2:	4618      	mov	r0, r3
 80195f4:	f7fa ff24 	bl	8014440 <pbuf_clen>
 80195f8:	4603      	mov	r3, r0
 80195fa:	461a      	mov	r2, r3
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019602:	4413      	add	r3, r2
 8019604:	b29a      	uxth	r2, r3
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801960c:	697b      	ldr	r3, [r7, #20]
 801960e:	681a      	ldr	r2, [r3, #0]
 8019610:	69fb      	ldr	r3, [r7, #28]
 8019612:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019614:	697b      	ldr	r3, [r7, #20]
 8019616:	69fa      	ldr	r2, [r7, #28]
 8019618:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801961a:	69fb      	ldr	r3, [r7, #28]
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	2b00      	cmp	r3, #0
 8019620:	d103      	bne.n	801962a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	2200      	movs	r2, #0
 8019626:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801962a:	2300      	movs	r3, #0
 801962c:	e016      	b.n	801965c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801962e:	bf00      	nop
 8019630:	e002      	b.n	8019638 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019632:	bf00      	nop
 8019634:	e000      	b.n	8019638 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019636:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8019638:	69fb      	ldr	r3, [r7, #28]
 801963a:	2b00      	cmp	r3, #0
 801963c:	d006      	beq.n	801964c <tcp_split_unsent_seg+0x25c>
 801963e:	4b09      	ldr	r3, [pc, #36]	; (8019664 <tcp_split_unsent_seg+0x274>)
 8019640:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8019644:	490d      	ldr	r1, [pc, #52]	; (801967c <tcp_split_unsent_seg+0x28c>)
 8019646:	4809      	ldr	r0, [pc, #36]	; (801966c <tcp_split_unsent_seg+0x27c>)
 8019648:	f005 fc58 	bl	801eefc <iprintf>
  if (p != NULL) {
 801964c:	693b      	ldr	r3, [r7, #16]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d002      	beq.n	8019658 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8019652:	6938      	ldr	r0, [r7, #16]
 8019654:	f7fa fe66 	bl	8014324 <pbuf_free>
  }

  return ERR_MEM;
 8019658:	f04f 33ff 	mov.w	r3, #4294967295
}
 801965c:	4618      	mov	r0, r3
 801965e:	3724      	adds	r7, #36	; 0x24
 8019660:	46bd      	mov	sp, r7
 8019662:	bd90      	pop	{r4, r7, pc}
 8019664:	0802564c 	.word	0x0802564c
 8019668:	080259e0 	.word	0x080259e0
 801966c:	080256a0 	.word	0x080256a0
 8019670:	08025a04 	.word	0x08025a04
 8019674:	08025a28 	.word	0x08025a28
 8019678:	08025a38 	.word	0x08025a38
 801967c:	08025a48 	.word	0x08025a48

08019680 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019680:	b590      	push	{r4, r7, lr}
 8019682:	b085      	sub	sp, #20
 8019684:	af00      	add	r7, sp, #0
 8019686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	2b00      	cmp	r3, #0
 801968c:	d106      	bne.n	801969c <tcp_send_fin+0x1c>
 801968e:	4b21      	ldr	r3, [pc, #132]	; (8019714 <tcp_send_fin+0x94>)
 8019690:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8019694:	4920      	ldr	r1, [pc, #128]	; (8019718 <tcp_send_fin+0x98>)
 8019696:	4821      	ldr	r0, [pc, #132]	; (801971c <tcp_send_fin+0x9c>)
 8019698:	f005 fc30 	bl	801eefc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d02e      	beq.n	8019702 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80196a8:	60fb      	str	r3, [r7, #12]
 80196aa:	e002      	b.n	80196b2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d1f8      	bne.n	80196ac <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	68db      	ldr	r3, [r3, #12]
 80196be:	899b      	ldrh	r3, [r3, #12]
 80196c0:	b29b      	uxth	r3, r3
 80196c2:	4618      	mov	r0, r3
 80196c4:	f7f9 fae6 	bl	8012c94 <lwip_htons>
 80196c8:	4603      	mov	r3, r0
 80196ca:	b2db      	uxtb	r3, r3
 80196cc:	f003 0307 	and.w	r3, r3, #7
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d116      	bne.n	8019702 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	68db      	ldr	r3, [r3, #12]
 80196d8:	899b      	ldrh	r3, [r3, #12]
 80196da:	b29c      	uxth	r4, r3
 80196dc:	2001      	movs	r0, #1
 80196de:	f7f9 fad9 	bl	8012c94 <lwip_htons>
 80196e2:	4603      	mov	r3, r0
 80196e4:	461a      	mov	r2, r3
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	68db      	ldr	r3, [r3, #12]
 80196ea:	4322      	orrs	r2, r4
 80196ec:	b292      	uxth	r2, r2
 80196ee:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	8b5b      	ldrh	r3, [r3, #26]
 80196f4:	f043 0320 	orr.w	r3, r3, #32
 80196f8:	b29a      	uxth	r2, r3
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80196fe:	2300      	movs	r3, #0
 8019700:	e004      	b.n	801970c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019702:	2101      	movs	r1, #1
 8019704:	6878      	ldr	r0, [r7, #4]
 8019706:	f000 f80b 	bl	8019720 <tcp_enqueue_flags>
 801970a:	4603      	mov	r3, r0
}
 801970c:	4618      	mov	r0, r3
 801970e:	3714      	adds	r7, #20
 8019710:	46bd      	mov	sp, r7
 8019712:	bd90      	pop	{r4, r7, pc}
 8019714:	0802564c 	.word	0x0802564c
 8019718:	08025a54 	.word	0x08025a54
 801971c:	080256a0 	.word	0x080256a0

08019720 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019720:	b580      	push	{r7, lr}
 8019722:	b08a      	sub	sp, #40	; 0x28
 8019724:	af02      	add	r7, sp, #8
 8019726:	6078      	str	r0, [r7, #4]
 8019728:	460b      	mov	r3, r1
 801972a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801972c:	2300      	movs	r3, #0
 801972e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019730:	2300      	movs	r3, #0
 8019732:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019734:	78fb      	ldrb	r3, [r7, #3]
 8019736:	f003 0303 	and.w	r3, r3, #3
 801973a:	2b00      	cmp	r3, #0
 801973c:	d106      	bne.n	801974c <tcp_enqueue_flags+0x2c>
 801973e:	4b67      	ldr	r3, [pc, #412]	; (80198dc <tcp_enqueue_flags+0x1bc>)
 8019740:	f240 4211 	movw	r2, #1041	; 0x411
 8019744:	4966      	ldr	r1, [pc, #408]	; (80198e0 <tcp_enqueue_flags+0x1c0>)
 8019746:	4867      	ldr	r0, [pc, #412]	; (80198e4 <tcp_enqueue_flags+0x1c4>)
 8019748:	f005 fbd8 	bl	801eefc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	2b00      	cmp	r3, #0
 8019750:	d106      	bne.n	8019760 <tcp_enqueue_flags+0x40>
 8019752:	4b62      	ldr	r3, [pc, #392]	; (80198dc <tcp_enqueue_flags+0x1bc>)
 8019754:	f240 4213 	movw	r2, #1043	; 0x413
 8019758:	4963      	ldr	r1, [pc, #396]	; (80198e8 <tcp_enqueue_flags+0x1c8>)
 801975a:	4862      	ldr	r0, [pc, #392]	; (80198e4 <tcp_enqueue_flags+0x1c4>)
 801975c:	f005 fbce 	bl	801eefc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8019760:	78fb      	ldrb	r3, [r7, #3]
 8019762:	f003 0302 	and.w	r3, r3, #2
 8019766:	2b00      	cmp	r3, #0
 8019768:	d001      	beq.n	801976e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801976a:	2301      	movs	r3, #1
 801976c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801976e:	7ffb      	ldrb	r3, [r7, #31]
 8019770:	009b      	lsls	r3, r3, #2
 8019772:	b2db      	uxtb	r3, r3
 8019774:	f003 0304 	and.w	r3, r3, #4
 8019778:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801977a:	7dfb      	ldrb	r3, [r7, #23]
 801977c:	b29b      	uxth	r3, r3
 801977e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019782:	4619      	mov	r1, r3
 8019784:	2036      	movs	r0, #54	; 0x36
 8019786:	f7fa fae9 	bl	8013d5c <pbuf_alloc>
 801978a:	6138      	str	r0, [r7, #16]
 801978c:	693b      	ldr	r3, [r7, #16]
 801978e:	2b00      	cmp	r3, #0
 8019790:	d109      	bne.n	80197a6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	8b5b      	ldrh	r3, [r3, #26]
 8019796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801979a:	b29a      	uxth	r2, r3
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80197a0:	f04f 33ff 	mov.w	r3, #4294967295
 80197a4:	e095      	b.n	80198d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80197a6:	693b      	ldr	r3, [r7, #16]
 80197a8:	895a      	ldrh	r2, [r3, #10]
 80197aa:	7dfb      	ldrb	r3, [r7, #23]
 80197ac:	b29b      	uxth	r3, r3
 80197ae:	429a      	cmp	r2, r3
 80197b0:	d206      	bcs.n	80197c0 <tcp_enqueue_flags+0xa0>
 80197b2:	4b4a      	ldr	r3, [pc, #296]	; (80198dc <tcp_enqueue_flags+0x1bc>)
 80197b4:	f240 4239 	movw	r2, #1081	; 0x439
 80197b8:	494c      	ldr	r1, [pc, #304]	; (80198ec <tcp_enqueue_flags+0x1cc>)
 80197ba:	484a      	ldr	r0, [pc, #296]	; (80198e4 <tcp_enqueue_flags+0x1c4>)
 80197bc:	f005 fb9e 	bl	801eefc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80197c4:	78fa      	ldrb	r2, [r7, #3]
 80197c6:	7ffb      	ldrb	r3, [r7, #31]
 80197c8:	9300      	str	r3, [sp, #0]
 80197ca:	460b      	mov	r3, r1
 80197cc:	6939      	ldr	r1, [r7, #16]
 80197ce:	6878      	ldr	r0, [r7, #4]
 80197d0:	f7ff f918 	bl	8018a04 <tcp_create_segment>
 80197d4:	60f8      	str	r0, [r7, #12]
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d109      	bne.n	80197f0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	8b5b      	ldrh	r3, [r3, #26]
 80197e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197e4:	b29a      	uxth	r2, r3
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80197ea:	f04f 33ff 	mov.w	r3, #4294967295
 80197ee:	e070      	b.n	80198d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	68db      	ldr	r3, [r3, #12]
 80197f4:	f003 0303 	and.w	r3, r3, #3
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d006      	beq.n	801980a <tcp_enqueue_flags+0xea>
 80197fc:	4b37      	ldr	r3, [pc, #220]	; (80198dc <tcp_enqueue_flags+0x1bc>)
 80197fe:	f240 4242 	movw	r2, #1090	; 0x442
 8019802:	493b      	ldr	r1, [pc, #236]	; (80198f0 <tcp_enqueue_flags+0x1d0>)
 8019804:	4837      	ldr	r0, [pc, #220]	; (80198e4 <tcp_enqueue_flags+0x1c4>)
 8019806:	f005 fb79 	bl	801eefc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	891b      	ldrh	r3, [r3, #8]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d006      	beq.n	8019820 <tcp_enqueue_flags+0x100>
 8019812:	4b32      	ldr	r3, [pc, #200]	; (80198dc <tcp_enqueue_flags+0x1bc>)
 8019814:	f240 4243 	movw	r2, #1091	; 0x443
 8019818:	4936      	ldr	r1, [pc, #216]	; (80198f4 <tcp_enqueue_flags+0x1d4>)
 801981a:	4832      	ldr	r0, [pc, #200]	; (80198e4 <tcp_enqueue_flags+0x1c4>)
 801981c:	f005 fb6e 	bl	801eefc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019824:	2b00      	cmp	r3, #0
 8019826:	d103      	bne.n	8019830 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	68fa      	ldr	r2, [r7, #12]
 801982c:	66da      	str	r2, [r3, #108]	; 0x6c
 801982e:	e00d      	b.n	801984c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019834:	61bb      	str	r3, [r7, #24]
 8019836:	e002      	b.n	801983e <tcp_enqueue_flags+0x11e>
 8019838:	69bb      	ldr	r3, [r7, #24]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	61bb      	str	r3, [r7, #24]
 801983e:	69bb      	ldr	r3, [r7, #24]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d1f8      	bne.n	8019838 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8019846:	69bb      	ldr	r3, [r7, #24]
 8019848:	68fa      	ldr	r2, [r7, #12]
 801984a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	2200      	movs	r2, #0
 8019850:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019854:	78fb      	ldrb	r3, [r7, #3]
 8019856:	f003 0302 	and.w	r3, r3, #2
 801985a:	2b00      	cmp	r3, #0
 801985c:	d104      	bne.n	8019868 <tcp_enqueue_flags+0x148>
 801985e:	78fb      	ldrb	r3, [r7, #3]
 8019860:	f003 0301 	and.w	r3, r3, #1
 8019864:	2b00      	cmp	r3, #0
 8019866:	d004      	beq.n	8019872 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801986c:	1c5a      	adds	r2, r3, #1
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8019872:	78fb      	ldrb	r3, [r7, #3]
 8019874:	f003 0301 	and.w	r3, r3, #1
 8019878:	2b00      	cmp	r3, #0
 801987a:	d006      	beq.n	801988a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	8b5b      	ldrh	r3, [r3, #26]
 8019880:	f043 0320 	orr.w	r3, r3, #32
 8019884:	b29a      	uxth	r2, r3
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	685b      	ldr	r3, [r3, #4]
 801988e:	4618      	mov	r0, r3
 8019890:	f7fa fdd6 	bl	8014440 <pbuf_clen>
 8019894:	4603      	mov	r3, r0
 8019896:	461a      	mov	r2, r3
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801989e:	4413      	add	r3, r2
 80198a0:	b29a      	uxth	r2, r3
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d00e      	beq.n	80198d0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d10a      	bne.n	80198d0 <tcp_enqueue_flags+0x1b0>
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d106      	bne.n	80198d0 <tcp_enqueue_flags+0x1b0>
 80198c2:	4b06      	ldr	r3, [pc, #24]	; (80198dc <tcp_enqueue_flags+0x1bc>)
 80198c4:	f240 4265 	movw	r2, #1125	; 0x465
 80198c8:	490b      	ldr	r1, [pc, #44]	; (80198f8 <tcp_enqueue_flags+0x1d8>)
 80198ca:	4806      	ldr	r0, [pc, #24]	; (80198e4 <tcp_enqueue_flags+0x1c4>)
 80198cc:	f005 fb16 	bl	801eefc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80198d0:	2300      	movs	r3, #0
}
 80198d2:	4618      	mov	r0, r3
 80198d4:	3720      	adds	r7, #32
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bd80      	pop	{r7, pc}
 80198da:	bf00      	nop
 80198dc:	0802564c 	.word	0x0802564c
 80198e0:	08025a70 	.word	0x08025a70
 80198e4:	080256a0 	.word	0x080256a0
 80198e8:	08025ac8 	.word	0x08025ac8
 80198ec:	08025ae8 	.word	0x08025ae8
 80198f0:	08025b24 	.word	0x08025b24
 80198f4:	08025b3c 	.word	0x08025b3c
 80198f8:	08025b68 	.word	0x08025b68

080198fc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80198fc:	b5b0      	push	{r4, r5, r7, lr}
 80198fe:	b08a      	sub	sp, #40	; 0x28
 8019900:	af00      	add	r7, sp, #0
 8019902:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d106      	bne.n	8019918 <tcp_output+0x1c>
 801990a:	4b9e      	ldr	r3, [pc, #632]	; (8019b84 <tcp_output+0x288>)
 801990c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8019910:	499d      	ldr	r1, [pc, #628]	; (8019b88 <tcp_output+0x28c>)
 8019912:	489e      	ldr	r0, [pc, #632]	; (8019b8c <tcp_output+0x290>)
 8019914:	f005 faf2 	bl	801eefc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	7d1b      	ldrb	r3, [r3, #20]
 801991c:	2b01      	cmp	r3, #1
 801991e:	d106      	bne.n	801992e <tcp_output+0x32>
 8019920:	4b98      	ldr	r3, [pc, #608]	; (8019b84 <tcp_output+0x288>)
 8019922:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8019926:	499a      	ldr	r1, [pc, #616]	; (8019b90 <tcp_output+0x294>)
 8019928:	4898      	ldr	r0, [pc, #608]	; (8019b8c <tcp_output+0x290>)
 801992a:	f005 fae7 	bl	801eefc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801992e:	4b99      	ldr	r3, [pc, #612]	; (8019b94 <tcp_output+0x298>)
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	687a      	ldr	r2, [r7, #4]
 8019934:	429a      	cmp	r2, r3
 8019936:	d101      	bne.n	801993c <tcp_output+0x40>
    return ERR_OK;
 8019938:	2300      	movs	r3, #0
 801993a:	e1ce      	b.n	8019cda <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019948:	4293      	cmp	r3, r2
 801994a:	bf28      	it	cs
 801994c:	4613      	movcs	r3, r2
 801994e:	b29b      	uxth	r3, r3
 8019950:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019956:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8019958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801995a:	2b00      	cmp	r3, #0
 801995c:	d10b      	bne.n	8019976 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	8b5b      	ldrh	r3, [r3, #26]
 8019962:	f003 0302 	and.w	r3, r3, #2
 8019966:	2b00      	cmp	r3, #0
 8019968:	f000 81aa 	beq.w	8019cc0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801996c:	6878      	ldr	r0, [r7, #4]
 801996e:	f000 fdcb 	bl	801a508 <tcp_send_empty_ack>
 8019972:	4603      	mov	r3, r0
 8019974:	e1b1      	b.n	8019cda <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8019976:	6879      	ldr	r1, [r7, #4]
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	3304      	adds	r3, #4
 801997c:	461a      	mov	r2, r3
 801997e:	6878      	ldr	r0, [r7, #4]
 8019980:	f7ff f824 	bl	80189cc <tcp_route>
 8019984:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8019986:	697b      	ldr	r3, [r7, #20]
 8019988:	2b00      	cmp	r3, #0
 801998a:	d102      	bne.n	8019992 <tcp_output+0x96>
    return ERR_RTE;
 801998c:	f06f 0303 	mvn.w	r3, #3
 8019990:	e1a3      	b.n	8019cda <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	2b00      	cmp	r3, #0
 8019996:	d003      	beq.n	80199a0 <tcp_output+0xa4>
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d111      	bne.n	80199c4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80199a0:	697b      	ldr	r3, [r7, #20]
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d002      	beq.n	80199ac <tcp_output+0xb0>
 80199a6:	697b      	ldr	r3, [r7, #20]
 80199a8:	3304      	adds	r3, #4
 80199aa:	e000      	b.n	80199ae <tcp_output+0xb2>
 80199ac:	2300      	movs	r3, #0
 80199ae:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80199b0:	693b      	ldr	r3, [r7, #16]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d102      	bne.n	80199bc <tcp_output+0xc0>
      return ERR_RTE;
 80199b6:	f06f 0303 	mvn.w	r3, #3
 80199ba:	e18e      	b.n	8019cda <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80199bc:	693b      	ldr	r3, [r7, #16]
 80199be:	681a      	ldr	r2, [r3, #0]
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80199c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199c6:	68db      	ldr	r3, [r3, #12]
 80199c8:	685b      	ldr	r3, [r3, #4]
 80199ca:	4618      	mov	r0, r3
 80199cc:	f7f9 f977 	bl	8012cbe <lwip_htonl>
 80199d0:	4602      	mov	r2, r0
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80199d6:	1ad3      	subs	r3, r2, r3
 80199d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80199da:	8912      	ldrh	r2, [r2, #8]
 80199dc:	4413      	add	r3, r2
 80199de:	69ba      	ldr	r2, [r7, #24]
 80199e0:	429a      	cmp	r2, r3
 80199e2:	d227      	bcs.n	8019a34 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80199ea:	461a      	mov	r2, r3
 80199ec:	69bb      	ldr	r3, [r7, #24]
 80199ee:	4293      	cmp	r3, r2
 80199f0:	d114      	bne.n	8019a1c <tcp_output+0x120>
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d110      	bne.n	8019a1c <tcp_output+0x120>
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d10b      	bne.n	8019a1c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	2200      	movs	r2, #0
 8019a08:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	2201      	movs	r2, #1
 8019a10:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	2200      	movs	r2, #0
 8019a18:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	8b5b      	ldrh	r3, [r3, #26]
 8019a20:	f003 0302 	and.w	r3, r3, #2
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	f000 814d 	beq.w	8019cc4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019a2a:	6878      	ldr	r0, [r7, #4]
 8019a2c:	f000 fd6c 	bl	801a508 <tcp_send_empty_ack>
 8019a30:	4603      	mov	r3, r0
 8019a32:	e152      	b.n	8019cda <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	2200      	movs	r2, #0
 8019a38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019a40:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8019a42:	6a3b      	ldr	r3, [r7, #32]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	f000 811c 	beq.w	8019c82 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8019a4a:	e002      	b.n	8019a52 <tcp_output+0x156>
 8019a4c:	6a3b      	ldr	r3, [r7, #32]
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	623b      	str	r3, [r7, #32]
 8019a52:	6a3b      	ldr	r3, [r7, #32]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d1f8      	bne.n	8019a4c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019a5a:	e112      	b.n	8019c82 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a5e:	68db      	ldr	r3, [r3, #12]
 8019a60:	899b      	ldrh	r3, [r3, #12]
 8019a62:	b29b      	uxth	r3, r3
 8019a64:	4618      	mov	r0, r3
 8019a66:	f7f9 f915 	bl	8012c94 <lwip_htons>
 8019a6a:	4603      	mov	r3, r0
 8019a6c:	b2db      	uxtb	r3, r3
 8019a6e:	f003 0304 	and.w	r3, r3, #4
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d006      	beq.n	8019a84 <tcp_output+0x188>
 8019a76:	4b43      	ldr	r3, [pc, #268]	; (8019b84 <tcp_output+0x288>)
 8019a78:	f240 5236 	movw	r2, #1334	; 0x536
 8019a7c:	4946      	ldr	r1, [pc, #280]	; (8019b98 <tcp_output+0x29c>)
 8019a7e:	4843      	ldr	r0, [pc, #268]	; (8019b8c <tcp_output+0x290>)
 8019a80:	f005 fa3c 	bl	801eefc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d01f      	beq.n	8019acc <tcp_output+0x1d0>
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	8b5b      	ldrh	r3, [r3, #26]
 8019a90:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d119      	bne.n	8019acc <tcp_output+0x1d0>
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d00b      	beq.n	8019ab8 <tcp_output+0x1bc>
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d110      	bne.n	8019acc <tcp_output+0x1d0>
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019aae:	891a      	ldrh	r2, [r3, #8]
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019ab4:	429a      	cmp	r2, r3
 8019ab6:	d209      	bcs.n	8019acc <tcp_output+0x1d0>
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d004      	beq.n	8019acc <tcp_output+0x1d0>
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019ac8:	2b08      	cmp	r3, #8
 8019aca:	d901      	bls.n	8019ad0 <tcp_output+0x1d4>
 8019acc:	2301      	movs	r3, #1
 8019ace:	e000      	b.n	8019ad2 <tcp_output+0x1d6>
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d106      	bne.n	8019ae4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	8b5b      	ldrh	r3, [r3, #26]
 8019ada:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	f000 80e4 	beq.w	8019cac <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	7d1b      	ldrb	r3, [r3, #20]
 8019ae8:	2b02      	cmp	r3, #2
 8019aea:	d00d      	beq.n	8019b08 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aee:	68db      	ldr	r3, [r3, #12]
 8019af0:	899b      	ldrh	r3, [r3, #12]
 8019af2:	b29c      	uxth	r4, r3
 8019af4:	2010      	movs	r0, #16
 8019af6:	f7f9 f8cd 	bl	8012c94 <lwip_htons>
 8019afa:	4603      	mov	r3, r0
 8019afc:	461a      	mov	r2, r3
 8019afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b00:	68db      	ldr	r3, [r3, #12]
 8019b02:	4322      	orrs	r2, r4
 8019b04:	b292      	uxth	r2, r2
 8019b06:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019b08:	697a      	ldr	r2, [r7, #20]
 8019b0a:	6879      	ldr	r1, [r7, #4]
 8019b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019b0e:	f000 f909 	bl	8019d24 <tcp_output_segment>
 8019b12:	4603      	mov	r3, r0
 8019b14:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d009      	beq.n	8019b32 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	8b5b      	ldrh	r3, [r3, #26]
 8019b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b26:	b29a      	uxth	r2, r3
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	835a      	strh	r2, [r3, #26]
      return err;
 8019b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b30:	e0d3      	b.n	8019cda <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b34:	681a      	ldr	r2, [r3, #0]
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	7d1b      	ldrb	r3, [r3, #20]
 8019b3e:	2b02      	cmp	r3, #2
 8019b40:	d006      	beq.n	8019b50 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	8b5b      	ldrh	r3, [r3, #26]
 8019b46:	f023 0303 	bic.w	r3, r3, #3
 8019b4a:	b29a      	uxth	r2, r3
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b52:	68db      	ldr	r3, [r3, #12]
 8019b54:	685b      	ldr	r3, [r3, #4]
 8019b56:	4618      	mov	r0, r3
 8019b58:	f7f9 f8b1 	bl	8012cbe <lwip_htonl>
 8019b5c:	4604      	mov	r4, r0
 8019b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b60:	891b      	ldrh	r3, [r3, #8]
 8019b62:	461d      	mov	r5, r3
 8019b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b66:	68db      	ldr	r3, [r3, #12]
 8019b68:	899b      	ldrh	r3, [r3, #12]
 8019b6a:	b29b      	uxth	r3, r3
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	f7f9 f891 	bl	8012c94 <lwip_htons>
 8019b72:	4603      	mov	r3, r0
 8019b74:	b2db      	uxtb	r3, r3
 8019b76:	f003 0303 	and.w	r3, r3, #3
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d00e      	beq.n	8019b9c <tcp_output+0x2a0>
 8019b7e:	2301      	movs	r3, #1
 8019b80:	e00d      	b.n	8019b9e <tcp_output+0x2a2>
 8019b82:	bf00      	nop
 8019b84:	0802564c 	.word	0x0802564c
 8019b88:	08025b90 	.word	0x08025b90
 8019b8c:	080256a0 	.word	0x080256a0
 8019b90:	08025ba8 	.word	0x08025ba8
 8019b94:	2000e110 	.word	0x2000e110
 8019b98:	08025bd0 	.word	0x08025bd0
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	442b      	add	r3, r5
 8019ba0:	4423      	add	r3, r4
 8019ba2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019ba8:	68bb      	ldr	r3, [r7, #8]
 8019baa:	1ad3      	subs	r3, r2, r3
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	da02      	bge.n	8019bb6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	68ba      	ldr	r2, [r7, #8]
 8019bb4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bb8:	891b      	ldrh	r3, [r3, #8]
 8019bba:	461c      	mov	r4, r3
 8019bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bbe:	68db      	ldr	r3, [r3, #12]
 8019bc0:	899b      	ldrh	r3, [r3, #12]
 8019bc2:	b29b      	uxth	r3, r3
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	f7f9 f865 	bl	8012c94 <lwip_htons>
 8019bca:	4603      	mov	r3, r0
 8019bcc:	b2db      	uxtb	r3, r3
 8019bce:	f003 0303 	and.w	r3, r3, #3
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d001      	beq.n	8019bda <tcp_output+0x2de>
 8019bd6:	2301      	movs	r3, #1
 8019bd8:	e000      	b.n	8019bdc <tcp_output+0x2e0>
 8019bda:	2300      	movs	r3, #0
 8019bdc:	4423      	add	r3, r4
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d049      	beq.n	8019c76 <tcp_output+0x37a>
      seg->next = NULL;
 8019be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019be4:	2200      	movs	r2, #0
 8019be6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d105      	bne.n	8019bfc <tcp_output+0x300>
        pcb->unacked = seg;
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019bf4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8019bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf8:	623b      	str	r3, [r7, #32]
 8019bfa:	e03f      	b.n	8019c7c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bfe:	68db      	ldr	r3, [r3, #12]
 8019c00:	685b      	ldr	r3, [r3, #4]
 8019c02:	4618      	mov	r0, r3
 8019c04:	f7f9 f85b 	bl	8012cbe <lwip_htonl>
 8019c08:	4604      	mov	r4, r0
 8019c0a:	6a3b      	ldr	r3, [r7, #32]
 8019c0c:	68db      	ldr	r3, [r3, #12]
 8019c0e:	685b      	ldr	r3, [r3, #4]
 8019c10:	4618      	mov	r0, r3
 8019c12:	f7f9 f854 	bl	8012cbe <lwip_htonl>
 8019c16:	4603      	mov	r3, r0
 8019c18:	1ae3      	subs	r3, r4, r3
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	da24      	bge.n	8019c68 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	3370      	adds	r3, #112	; 0x70
 8019c22:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019c24:	e002      	b.n	8019c2c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019c26:	69fb      	ldr	r3, [r7, #28]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019c2c:	69fb      	ldr	r3, [r7, #28]
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d011      	beq.n	8019c58 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019c34:	69fb      	ldr	r3, [r7, #28]
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	68db      	ldr	r3, [r3, #12]
 8019c3a:	685b      	ldr	r3, [r3, #4]
 8019c3c:	4618      	mov	r0, r3
 8019c3e:	f7f9 f83e 	bl	8012cbe <lwip_htonl>
 8019c42:	4604      	mov	r4, r0
 8019c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c46:	68db      	ldr	r3, [r3, #12]
 8019c48:	685b      	ldr	r3, [r3, #4]
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f7f9 f837 	bl	8012cbe <lwip_htonl>
 8019c50:	4603      	mov	r3, r0
 8019c52:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	dbe6      	blt.n	8019c26 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019c58:	69fb      	ldr	r3, [r7, #28]
 8019c5a:	681a      	ldr	r2, [r3, #0]
 8019c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c5e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019c60:	69fb      	ldr	r3, [r7, #28]
 8019c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c64:	601a      	str	r2, [r3, #0]
 8019c66:	e009      	b.n	8019c7c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019c68:	6a3b      	ldr	r3, [r7, #32]
 8019c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c6c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019c6e:	6a3b      	ldr	r3, [r7, #32]
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	623b      	str	r3, [r7, #32]
 8019c74:	e002      	b.n	8019c7c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019c76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019c78:	f7fb ff1d 	bl	8015ab6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c80:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8019c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d012      	beq.n	8019cae <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c8a:	68db      	ldr	r3, [r3, #12]
 8019c8c:	685b      	ldr	r3, [r3, #4]
 8019c8e:	4618      	mov	r0, r3
 8019c90:	f7f9 f815 	bl	8012cbe <lwip_htonl>
 8019c94:	4602      	mov	r2, r0
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c9a:	1ad3      	subs	r3, r2, r3
 8019c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c9e:	8912      	ldrh	r2, [r2, #8]
 8019ca0:	4413      	add	r3, r2
  while (seg != NULL &&
 8019ca2:	69ba      	ldr	r2, [r7, #24]
 8019ca4:	429a      	cmp	r2, r3
 8019ca6:	f4bf aed9 	bcs.w	8019a5c <tcp_output+0x160>
 8019caa:	e000      	b.n	8019cae <tcp_output+0x3b2>
      break;
 8019cac:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d108      	bne.n	8019cc8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	2200      	movs	r2, #0
 8019cba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8019cbe:	e004      	b.n	8019cca <tcp_output+0x3ce>
    goto output_done;
 8019cc0:	bf00      	nop
 8019cc2:	e002      	b.n	8019cca <tcp_output+0x3ce>
    goto output_done;
 8019cc4:	bf00      	nop
 8019cc6:	e000      	b.n	8019cca <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019cc8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	8b5b      	ldrh	r3, [r3, #26]
 8019cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019cd2:	b29a      	uxth	r2, r3
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019cd8:	2300      	movs	r3, #0
}
 8019cda:	4618      	mov	r0, r3
 8019cdc:	3728      	adds	r7, #40	; 0x28
 8019cde:	46bd      	mov	sp, r7
 8019ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8019ce2:	bf00      	nop

08019ce4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b082      	sub	sp, #8
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d106      	bne.n	8019d00 <tcp_output_segment_busy+0x1c>
 8019cf2:	4b09      	ldr	r3, [pc, #36]	; (8019d18 <tcp_output_segment_busy+0x34>)
 8019cf4:	f240 529a 	movw	r2, #1434	; 0x59a
 8019cf8:	4908      	ldr	r1, [pc, #32]	; (8019d1c <tcp_output_segment_busy+0x38>)
 8019cfa:	4809      	ldr	r0, [pc, #36]	; (8019d20 <tcp_output_segment_busy+0x3c>)
 8019cfc:	f005 f8fe 	bl	801eefc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	685b      	ldr	r3, [r3, #4]
 8019d04:	7b9b      	ldrb	r3, [r3, #14]
 8019d06:	2b01      	cmp	r3, #1
 8019d08:	d001      	beq.n	8019d0e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019d0a:	2301      	movs	r3, #1
 8019d0c:	e000      	b.n	8019d10 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019d0e:	2300      	movs	r3, #0
}
 8019d10:	4618      	mov	r0, r3
 8019d12:	3708      	adds	r7, #8
 8019d14:	46bd      	mov	sp, r7
 8019d16:	bd80      	pop	{r7, pc}
 8019d18:	0802564c 	.word	0x0802564c
 8019d1c:	08025be8 	.word	0x08025be8
 8019d20:	080256a0 	.word	0x080256a0

08019d24 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019d24:	b5b0      	push	{r4, r5, r7, lr}
 8019d26:	b08c      	sub	sp, #48	; 0x30
 8019d28:	af04      	add	r7, sp, #16
 8019d2a:	60f8      	str	r0, [r7, #12]
 8019d2c:	60b9      	str	r1, [r7, #8]
 8019d2e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d106      	bne.n	8019d44 <tcp_output_segment+0x20>
 8019d36:	4b63      	ldr	r3, [pc, #396]	; (8019ec4 <tcp_output_segment+0x1a0>)
 8019d38:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8019d3c:	4962      	ldr	r1, [pc, #392]	; (8019ec8 <tcp_output_segment+0x1a4>)
 8019d3e:	4863      	ldr	r0, [pc, #396]	; (8019ecc <tcp_output_segment+0x1a8>)
 8019d40:	f005 f8dc 	bl	801eefc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8019d44:	68bb      	ldr	r3, [r7, #8]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d106      	bne.n	8019d58 <tcp_output_segment+0x34>
 8019d4a:	4b5e      	ldr	r3, [pc, #376]	; (8019ec4 <tcp_output_segment+0x1a0>)
 8019d4c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8019d50:	495f      	ldr	r1, [pc, #380]	; (8019ed0 <tcp_output_segment+0x1ac>)
 8019d52:	485e      	ldr	r0, [pc, #376]	; (8019ecc <tcp_output_segment+0x1a8>)
 8019d54:	f005 f8d2 	bl	801eefc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d106      	bne.n	8019d6c <tcp_output_segment+0x48>
 8019d5e:	4b59      	ldr	r3, [pc, #356]	; (8019ec4 <tcp_output_segment+0x1a0>)
 8019d60:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8019d64:	495b      	ldr	r1, [pc, #364]	; (8019ed4 <tcp_output_segment+0x1b0>)
 8019d66:	4859      	ldr	r0, [pc, #356]	; (8019ecc <tcp_output_segment+0x1a8>)
 8019d68:	f005 f8c8 	bl	801eefc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8019d6c:	68f8      	ldr	r0, [r7, #12]
 8019d6e:	f7ff ffb9 	bl	8019ce4 <tcp_output_segment_busy>
 8019d72:	4603      	mov	r3, r0
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d001      	beq.n	8019d7c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8019d78:	2300      	movs	r3, #0
 8019d7a:	e09f      	b.n	8019ebc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019d7c:	68bb      	ldr	r3, [r7, #8]
 8019d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	68dc      	ldr	r4, [r3, #12]
 8019d84:	4610      	mov	r0, r2
 8019d86:	f7f8 ff9a 	bl	8012cbe <lwip_htonl>
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8019d8e:	68bb      	ldr	r3, [r7, #8]
 8019d90:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	68dc      	ldr	r4, [r3, #12]
 8019d96:	4610      	mov	r0, r2
 8019d98:	f7f8 ff7c 	bl	8012c94 <lwip_htons>
 8019d9c:	4603      	mov	r3, r0
 8019d9e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019da0:	68bb      	ldr	r3, [r7, #8]
 8019da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019da4:	68ba      	ldr	r2, [r7, #8]
 8019da6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8019da8:	441a      	add	r2, r3
 8019daa:	68bb      	ldr	r3, [r7, #8]
 8019dac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	68db      	ldr	r3, [r3, #12]
 8019db2:	3314      	adds	r3, #20
 8019db4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	7a9b      	ldrb	r3, [r3, #10]
 8019dba:	f003 0301 	and.w	r3, r3, #1
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d015      	beq.n	8019dee <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8019dc2:	68bb      	ldr	r3, [r7, #8]
 8019dc4:	3304      	adds	r3, #4
 8019dc6:	461a      	mov	r2, r3
 8019dc8:	6879      	ldr	r1, [r7, #4]
 8019dca:	f44f 7006 	mov.w	r0, #536	; 0x218
 8019dce:	f7fc fa37 	bl	8016240 <tcp_eff_send_mss_netif>
 8019dd2:	4603      	mov	r3, r0
 8019dd4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8019dd6:	8b7b      	ldrh	r3, [r7, #26]
 8019dd8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8019ddc:	4618      	mov	r0, r3
 8019dde:	f7f8 ff6e 	bl	8012cbe <lwip_htonl>
 8019de2:	4602      	mov	r2, r0
 8019de4:	69fb      	ldr	r3, [r7, #28]
 8019de6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019de8:	69fb      	ldr	r3, [r7, #28]
 8019dea:	3304      	adds	r3, #4
 8019dec:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8019dee:	68bb      	ldr	r3, [r7, #8]
 8019df0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	da02      	bge.n	8019dfe <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8019df8:	68bb      	ldr	r3, [r7, #8]
 8019dfa:	2200      	movs	r2, #0
 8019dfc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8019dfe:	68bb      	ldr	r3, [r7, #8]
 8019e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d10c      	bne.n	8019e20 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8019e06:	4b34      	ldr	r3, [pc, #208]	; (8019ed8 <tcp_output_segment+0x1b4>)
 8019e08:	681a      	ldr	r2, [r3, #0]
 8019e0a:	68bb      	ldr	r3, [r7, #8]
 8019e0c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	68db      	ldr	r3, [r3, #12]
 8019e12:	685b      	ldr	r3, [r3, #4]
 8019e14:	4618      	mov	r0, r3
 8019e16:	f7f8 ff52 	bl	8012cbe <lwip_htonl>
 8019e1a:	4602      	mov	r2, r0
 8019e1c:	68bb      	ldr	r3, [r7, #8]
 8019e1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	68da      	ldr	r2, [r3, #12]
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	685b      	ldr	r3, [r3, #4]
 8019e28:	685b      	ldr	r3, [r3, #4]
 8019e2a:	1ad3      	subs	r3, r2, r3
 8019e2c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	685b      	ldr	r3, [r3, #4]
 8019e32:	8959      	ldrh	r1, [r3, #10]
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	685b      	ldr	r3, [r3, #4]
 8019e38:	8b3a      	ldrh	r2, [r7, #24]
 8019e3a:	1a8a      	subs	r2, r1, r2
 8019e3c:	b292      	uxth	r2, r2
 8019e3e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019e40:	68fb      	ldr	r3, [r7, #12]
 8019e42:	685b      	ldr	r3, [r3, #4]
 8019e44:	8919      	ldrh	r1, [r3, #8]
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	685b      	ldr	r3, [r3, #4]
 8019e4a:	8b3a      	ldrh	r2, [r7, #24]
 8019e4c:	1a8a      	subs	r2, r1, r2
 8019e4e:	b292      	uxth	r2, r2
 8019e50:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	685b      	ldr	r3, [r3, #4]
 8019e56:	68fa      	ldr	r2, [r7, #12]
 8019e58:	68d2      	ldr	r2, [r2, #12]
 8019e5a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	68db      	ldr	r3, [r3, #12]
 8019e60:	2200      	movs	r2, #0
 8019e62:	741a      	strb	r2, [r3, #16]
 8019e64:	2200      	movs	r2, #0
 8019e66:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	68db      	ldr	r3, [r3, #12]
 8019e6c:	f103 0214 	add.w	r2, r3, #20
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	7a9b      	ldrb	r3, [r3, #10]
 8019e74:	009b      	lsls	r3, r3, #2
 8019e76:	f003 0304 	and.w	r3, r3, #4
 8019e7a:	4413      	add	r3, r2
 8019e7c:	69fa      	ldr	r2, [r7, #28]
 8019e7e:	429a      	cmp	r2, r3
 8019e80:	d006      	beq.n	8019e90 <tcp_output_segment+0x16c>
 8019e82:	4b10      	ldr	r3, [pc, #64]	; (8019ec4 <tcp_output_segment+0x1a0>)
 8019e84:	f240 621c 	movw	r2, #1564	; 0x61c
 8019e88:	4914      	ldr	r1, [pc, #80]	; (8019edc <tcp_output_segment+0x1b8>)
 8019e8a:	4810      	ldr	r0, [pc, #64]	; (8019ecc <tcp_output_segment+0x1a8>)
 8019e8c:	f005 f836 	bl	801eefc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	6858      	ldr	r0, [r3, #4]
 8019e94:	68b9      	ldr	r1, [r7, #8]
 8019e96:	68bb      	ldr	r3, [r7, #8]
 8019e98:	1d1c      	adds	r4, r3, #4
 8019e9a:	68bb      	ldr	r3, [r7, #8]
 8019e9c:	7add      	ldrb	r5, [r3, #11]
 8019e9e:	68bb      	ldr	r3, [r7, #8]
 8019ea0:	7a9b      	ldrb	r3, [r3, #10]
 8019ea2:	687a      	ldr	r2, [r7, #4]
 8019ea4:	9202      	str	r2, [sp, #8]
 8019ea6:	2206      	movs	r2, #6
 8019ea8:	9201      	str	r2, [sp, #4]
 8019eaa:	9300      	str	r3, [sp, #0]
 8019eac:	462b      	mov	r3, r5
 8019eae:	4622      	mov	r2, r4
 8019eb0:	f002 fd96 	bl	801c9e0 <ip4_output_if>
 8019eb4:	4603      	mov	r3, r0
 8019eb6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8019eb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	3720      	adds	r7, #32
 8019ec0:	46bd      	mov	sp, r7
 8019ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8019ec4:	0802564c 	.word	0x0802564c
 8019ec8:	08025c10 	.word	0x08025c10
 8019ecc:	080256a0 	.word	0x080256a0
 8019ed0:	08025c30 	.word	0x08025c30
 8019ed4:	08025c50 	.word	0x08025c50
 8019ed8:	2000e100 	.word	0x2000e100
 8019edc:	08025c74 	.word	0x08025c74

08019ee0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8019ee0:	b5b0      	push	{r4, r5, r7, lr}
 8019ee2:	b084      	sub	sp, #16
 8019ee4:	af00      	add	r7, sp, #0
 8019ee6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d106      	bne.n	8019efc <tcp_rexmit_rto_prepare+0x1c>
 8019eee:	4b31      	ldr	r3, [pc, #196]	; (8019fb4 <tcp_rexmit_rto_prepare+0xd4>)
 8019ef0:	f240 6263 	movw	r2, #1635	; 0x663
 8019ef4:	4930      	ldr	r1, [pc, #192]	; (8019fb8 <tcp_rexmit_rto_prepare+0xd8>)
 8019ef6:	4831      	ldr	r0, [pc, #196]	; (8019fbc <tcp_rexmit_rto_prepare+0xdc>)
 8019ef8:	f005 f800 	bl	801eefc <iprintf>

  if (pcb->unacked == NULL) {
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d102      	bne.n	8019f0a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019f04:	f06f 0305 	mvn.w	r3, #5
 8019f08:	e050      	b.n	8019fac <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f0e:	60fb      	str	r3, [r7, #12]
 8019f10:	e00b      	b.n	8019f2a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8019f12:	68f8      	ldr	r0, [r7, #12]
 8019f14:	f7ff fee6 	bl	8019ce4 <tcp_output_segment_busy>
 8019f18:	4603      	mov	r3, r0
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d002      	beq.n	8019f24 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8019f1e:	f06f 0305 	mvn.w	r3, #5
 8019f22:	e043      	b.n	8019fac <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	60fb      	str	r3, [r7, #12]
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d1ef      	bne.n	8019f12 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8019f32:	68f8      	ldr	r0, [r7, #12]
 8019f34:	f7ff fed6 	bl	8019ce4 <tcp_output_segment_busy>
 8019f38:	4603      	mov	r3, r0
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d002      	beq.n	8019f44 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8019f3e:	f06f 0305 	mvn.w	r3, #5
 8019f42:	e033      	b.n	8019fac <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	2200      	movs	r2, #0
 8019f58:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	8b5b      	ldrh	r3, [r3, #26]
 8019f5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019f62:	b29a      	uxth	r2, r3
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	68db      	ldr	r3, [r3, #12]
 8019f6c:	685b      	ldr	r3, [r3, #4]
 8019f6e:	4618      	mov	r0, r3
 8019f70:	f7f8 fea5 	bl	8012cbe <lwip_htonl>
 8019f74:	4604      	mov	r4, r0
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	891b      	ldrh	r3, [r3, #8]
 8019f7a:	461d      	mov	r5, r3
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	68db      	ldr	r3, [r3, #12]
 8019f80:	899b      	ldrh	r3, [r3, #12]
 8019f82:	b29b      	uxth	r3, r3
 8019f84:	4618      	mov	r0, r3
 8019f86:	f7f8 fe85 	bl	8012c94 <lwip_htons>
 8019f8a:	4603      	mov	r3, r0
 8019f8c:	b2db      	uxtb	r3, r3
 8019f8e:	f003 0303 	and.w	r3, r3, #3
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d001      	beq.n	8019f9a <tcp_rexmit_rto_prepare+0xba>
 8019f96:	2301      	movs	r3, #1
 8019f98:	e000      	b.n	8019f9c <tcp_rexmit_rto_prepare+0xbc>
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	442b      	add	r3, r5
 8019f9e:	18e2      	adds	r2, r4, r3
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	2200      	movs	r2, #0
 8019fa8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8019faa:	2300      	movs	r3, #0
}
 8019fac:	4618      	mov	r0, r3
 8019fae:	3710      	adds	r7, #16
 8019fb0:	46bd      	mov	sp, r7
 8019fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8019fb4:	0802564c 	.word	0x0802564c
 8019fb8:	08025c88 	.word	0x08025c88
 8019fbc:	080256a0 	.word	0x080256a0

08019fc0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8019fc0:	b580      	push	{r7, lr}
 8019fc2:	b082      	sub	sp, #8
 8019fc4:	af00      	add	r7, sp, #0
 8019fc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d106      	bne.n	8019fdc <tcp_rexmit_rto_commit+0x1c>
 8019fce:	4b0d      	ldr	r3, [pc, #52]	; (801a004 <tcp_rexmit_rto_commit+0x44>)
 8019fd0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8019fd4:	490c      	ldr	r1, [pc, #48]	; (801a008 <tcp_rexmit_rto_commit+0x48>)
 8019fd6:	480d      	ldr	r0, [pc, #52]	; (801a00c <tcp_rexmit_rto_commit+0x4c>)
 8019fd8:	f004 ff90 	bl	801eefc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019fe2:	2bff      	cmp	r3, #255	; 0xff
 8019fe4:	d007      	beq.n	8019ff6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019fec:	3301      	adds	r3, #1
 8019fee:	b2da      	uxtb	r2, r3
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8019ff6:	6878      	ldr	r0, [r7, #4]
 8019ff8:	f7ff fc80 	bl	80198fc <tcp_output>
}
 8019ffc:	bf00      	nop
 8019ffe:	3708      	adds	r7, #8
 801a000:	46bd      	mov	sp, r7
 801a002:	bd80      	pop	{r7, pc}
 801a004:	0802564c 	.word	0x0802564c
 801a008:	08025cac 	.word	0x08025cac
 801a00c:	080256a0 	.word	0x080256a0

0801a010 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a010:	b580      	push	{r7, lr}
 801a012:	b082      	sub	sp, #8
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d106      	bne.n	801a02c <tcp_rexmit_rto+0x1c>
 801a01e:	4b0a      	ldr	r3, [pc, #40]	; (801a048 <tcp_rexmit_rto+0x38>)
 801a020:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801a024:	4909      	ldr	r1, [pc, #36]	; (801a04c <tcp_rexmit_rto+0x3c>)
 801a026:	480a      	ldr	r0, [pc, #40]	; (801a050 <tcp_rexmit_rto+0x40>)
 801a028:	f004 ff68 	bl	801eefc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a02c:	6878      	ldr	r0, [r7, #4]
 801a02e:	f7ff ff57 	bl	8019ee0 <tcp_rexmit_rto_prepare>
 801a032:	4603      	mov	r3, r0
 801a034:	2b00      	cmp	r3, #0
 801a036:	d102      	bne.n	801a03e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a038:	6878      	ldr	r0, [r7, #4]
 801a03a:	f7ff ffc1 	bl	8019fc0 <tcp_rexmit_rto_commit>
  }
}
 801a03e:	bf00      	nop
 801a040:	3708      	adds	r7, #8
 801a042:	46bd      	mov	sp, r7
 801a044:	bd80      	pop	{r7, pc}
 801a046:	bf00      	nop
 801a048:	0802564c 	.word	0x0802564c
 801a04c:	08025cd0 	.word	0x08025cd0
 801a050:	080256a0 	.word	0x080256a0

0801a054 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a054:	b590      	push	{r4, r7, lr}
 801a056:	b085      	sub	sp, #20
 801a058:	af00      	add	r7, sp, #0
 801a05a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d106      	bne.n	801a070 <tcp_rexmit+0x1c>
 801a062:	4b2f      	ldr	r3, [pc, #188]	; (801a120 <tcp_rexmit+0xcc>)
 801a064:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801a068:	492e      	ldr	r1, [pc, #184]	; (801a124 <tcp_rexmit+0xd0>)
 801a06a:	482f      	ldr	r0, [pc, #188]	; (801a128 <tcp_rexmit+0xd4>)
 801a06c:	f004 ff46 	bl	801eefc <iprintf>

  if (pcb->unacked == NULL) {
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a074:	2b00      	cmp	r3, #0
 801a076:	d102      	bne.n	801a07e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801a078:	f06f 0305 	mvn.w	r3, #5
 801a07c:	e04c      	b.n	801a118 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a082:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801a084:	68b8      	ldr	r0, [r7, #8]
 801a086:	f7ff fe2d 	bl	8019ce4 <tcp_output_segment_busy>
 801a08a:	4603      	mov	r3, r0
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d002      	beq.n	801a096 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801a090:	f06f 0305 	mvn.w	r3, #5
 801a094:	e040      	b.n	801a118 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801a096:	68bb      	ldr	r3, [r7, #8]
 801a098:	681a      	ldr	r2, [r3, #0]
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	336c      	adds	r3, #108	; 0x6c
 801a0a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a0a4:	e002      	b.n	801a0ac <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d011      	beq.n	801a0d8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	68db      	ldr	r3, [r3, #12]
 801a0ba:	685b      	ldr	r3, [r3, #4]
 801a0bc:	4618      	mov	r0, r3
 801a0be:	f7f8 fdfe 	bl	8012cbe <lwip_htonl>
 801a0c2:	4604      	mov	r4, r0
 801a0c4:	68bb      	ldr	r3, [r7, #8]
 801a0c6:	68db      	ldr	r3, [r3, #12]
 801a0c8:	685b      	ldr	r3, [r3, #4]
 801a0ca:	4618      	mov	r0, r3
 801a0cc:	f7f8 fdf7 	bl	8012cbe <lwip_htonl>
 801a0d0:	4603      	mov	r3, r0
 801a0d2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	dbe6      	blt.n	801a0a6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	681a      	ldr	r2, [r3, #0]
 801a0dc:	68bb      	ldr	r3, [r7, #8]
 801a0de:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	68ba      	ldr	r2, [r7, #8]
 801a0e4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a0e6:	68bb      	ldr	r3, [r7, #8]
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d103      	bne.n	801a0f6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	2200      	movs	r2, #0
 801a0f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a0fc:	2bff      	cmp	r3, #255	; 0xff
 801a0fe:	d007      	beq.n	801a110 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a106:	3301      	adds	r3, #1
 801a108:	b2da      	uxtb	r2, r3
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	2200      	movs	r2, #0
 801a114:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a116:	2300      	movs	r3, #0
}
 801a118:	4618      	mov	r0, r3
 801a11a:	3714      	adds	r7, #20
 801a11c:	46bd      	mov	sp, r7
 801a11e:	bd90      	pop	{r4, r7, pc}
 801a120:	0802564c 	.word	0x0802564c
 801a124:	08025cec 	.word	0x08025cec
 801a128:	080256a0 	.word	0x080256a0

0801a12c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a12c:	b580      	push	{r7, lr}
 801a12e:	b082      	sub	sp, #8
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	2b00      	cmp	r3, #0
 801a138:	d106      	bne.n	801a148 <tcp_rexmit_fast+0x1c>
 801a13a:	4b2a      	ldr	r3, [pc, #168]	; (801a1e4 <tcp_rexmit_fast+0xb8>)
 801a13c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a140:	4929      	ldr	r1, [pc, #164]	; (801a1e8 <tcp_rexmit_fast+0xbc>)
 801a142:	482a      	ldr	r0, [pc, #168]	; (801a1ec <tcp_rexmit_fast+0xc0>)
 801a144:	f004 feda 	bl	801eefc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d044      	beq.n	801a1da <tcp_rexmit_fast+0xae>
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	8b5b      	ldrh	r3, [r3, #26]
 801a154:	f003 0304 	and.w	r3, r3, #4
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d13e      	bne.n	801a1da <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a15c:	6878      	ldr	r0, [r7, #4]
 801a15e:	f7ff ff79 	bl	801a054 <tcp_rexmit>
 801a162:	4603      	mov	r3, r0
 801a164:	2b00      	cmp	r3, #0
 801a166:	d138      	bne.n	801a1da <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a174:	4293      	cmp	r3, r2
 801a176:	bf28      	it	cs
 801a178:	4613      	movcs	r3, r2
 801a17a:	b29b      	uxth	r3, r3
 801a17c:	0fda      	lsrs	r2, r3, #31
 801a17e:	4413      	add	r3, r2
 801a180:	105b      	asrs	r3, r3, #1
 801a182:	b29a      	uxth	r2, r3
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a190:	461a      	mov	r2, r3
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a196:	005b      	lsls	r3, r3, #1
 801a198:	429a      	cmp	r2, r3
 801a19a:	d206      	bcs.n	801a1aa <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a1a0:	005b      	lsls	r3, r3, #1
 801a1a2:	b29a      	uxth	r2, r3
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a1b4:	4619      	mov	r1, r3
 801a1b6:	0049      	lsls	r1, r1, #1
 801a1b8:	440b      	add	r3, r1
 801a1ba:	b29b      	uxth	r3, r3
 801a1bc:	4413      	add	r3, r2
 801a1be:	b29a      	uxth	r2, r3
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	8b5b      	ldrh	r3, [r3, #26]
 801a1ca:	f043 0304 	orr.w	r3, r3, #4
 801a1ce:	b29a      	uxth	r2, r3
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	2200      	movs	r2, #0
 801a1d8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801a1da:	bf00      	nop
 801a1dc:	3708      	adds	r7, #8
 801a1de:	46bd      	mov	sp, r7
 801a1e0:	bd80      	pop	{r7, pc}
 801a1e2:	bf00      	nop
 801a1e4:	0802564c 	.word	0x0802564c
 801a1e8:	08025d04 	.word	0x08025d04
 801a1ec:	080256a0 	.word	0x080256a0

0801a1f0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a1f0:	b580      	push	{r7, lr}
 801a1f2:	b086      	sub	sp, #24
 801a1f4:	af00      	add	r7, sp, #0
 801a1f6:	60f8      	str	r0, [r7, #12]
 801a1f8:	607b      	str	r3, [r7, #4]
 801a1fa:	460b      	mov	r3, r1
 801a1fc:	817b      	strh	r3, [r7, #10]
 801a1fe:	4613      	mov	r3, r2
 801a200:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a202:	897a      	ldrh	r2, [r7, #10]
 801a204:	893b      	ldrh	r3, [r7, #8]
 801a206:	4413      	add	r3, r2
 801a208:	b29b      	uxth	r3, r3
 801a20a:	3314      	adds	r3, #20
 801a20c:	b29b      	uxth	r3, r3
 801a20e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a212:	4619      	mov	r1, r3
 801a214:	2022      	movs	r0, #34	; 0x22
 801a216:	f7f9 fda1 	bl	8013d5c <pbuf_alloc>
 801a21a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a21c:	697b      	ldr	r3, [r7, #20]
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d04d      	beq.n	801a2be <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a222:	897b      	ldrh	r3, [r7, #10]
 801a224:	3313      	adds	r3, #19
 801a226:	697a      	ldr	r2, [r7, #20]
 801a228:	8952      	ldrh	r2, [r2, #10]
 801a22a:	4293      	cmp	r3, r2
 801a22c:	db06      	blt.n	801a23c <tcp_output_alloc_header_common+0x4c>
 801a22e:	4b26      	ldr	r3, [pc, #152]	; (801a2c8 <tcp_output_alloc_header_common+0xd8>)
 801a230:	f240 7223 	movw	r2, #1827	; 0x723
 801a234:	4925      	ldr	r1, [pc, #148]	; (801a2cc <tcp_output_alloc_header_common+0xdc>)
 801a236:	4826      	ldr	r0, [pc, #152]	; (801a2d0 <tcp_output_alloc_header_common+0xe0>)
 801a238:	f004 fe60 	bl	801eefc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a23c:	697b      	ldr	r3, [r7, #20]
 801a23e:	685b      	ldr	r3, [r3, #4]
 801a240:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a242:	8c3b      	ldrh	r3, [r7, #32]
 801a244:	4618      	mov	r0, r3
 801a246:	f7f8 fd25 	bl	8012c94 <lwip_htons>
 801a24a:	4603      	mov	r3, r0
 801a24c:	461a      	mov	r2, r3
 801a24e:	693b      	ldr	r3, [r7, #16]
 801a250:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a254:	4618      	mov	r0, r3
 801a256:	f7f8 fd1d 	bl	8012c94 <lwip_htons>
 801a25a:	4603      	mov	r3, r0
 801a25c:	461a      	mov	r2, r3
 801a25e:	693b      	ldr	r3, [r7, #16]
 801a260:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a262:	693b      	ldr	r3, [r7, #16]
 801a264:	687a      	ldr	r2, [r7, #4]
 801a266:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a268:	68f8      	ldr	r0, [r7, #12]
 801a26a:	f7f8 fd28 	bl	8012cbe <lwip_htonl>
 801a26e:	4602      	mov	r2, r0
 801a270:	693b      	ldr	r3, [r7, #16]
 801a272:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a274:	897b      	ldrh	r3, [r7, #10]
 801a276:	089b      	lsrs	r3, r3, #2
 801a278:	b29b      	uxth	r3, r3
 801a27a:	3305      	adds	r3, #5
 801a27c:	b29b      	uxth	r3, r3
 801a27e:	031b      	lsls	r3, r3, #12
 801a280:	b29a      	uxth	r2, r3
 801a282:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a286:	b29b      	uxth	r3, r3
 801a288:	4313      	orrs	r3, r2
 801a28a:	b29b      	uxth	r3, r3
 801a28c:	4618      	mov	r0, r3
 801a28e:	f7f8 fd01 	bl	8012c94 <lwip_htons>
 801a292:	4603      	mov	r3, r0
 801a294:	461a      	mov	r2, r3
 801a296:	693b      	ldr	r3, [r7, #16]
 801a298:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a29a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a29c:	4618      	mov	r0, r3
 801a29e:	f7f8 fcf9 	bl	8012c94 <lwip_htons>
 801a2a2:	4603      	mov	r3, r0
 801a2a4:	461a      	mov	r2, r3
 801a2a6:	693b      	ldr	r3, [r7, #16]
 801a2a8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a2aa:	693b      	ldr	r3, [r7, #16]
 801a2ac:	2200      	movs	r2, #0
 801a2ae:	741a      	strb	r2, [r3, #16]
 801a2b0:	2200      	movs	r2, #0
 801a2b2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a2b4:	693b      	ldr	r3, [r7, #16]
 801a2b6:	2200      	movs	r2, #0
 801a2b8:	749a      	strb	r2, [r3, #18]
 801a2ba:	2200      	movs	r2, #0
 801a2bc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a2be:	697b      	ldr	r3, [r7, #20]
}
 801a2c0:	4618      	mov	r0, r3
 801a2c2:	3718      	adds	r7, #24
 801a2c4:	46bd      	mov	sp, r7
 801a2c6:	bd80      	pop	{r7, pc}
 801a2c8:	0802564c 	.word	0x0802564c
 801a2cc:	08025d24 	.word	0x08025d24
 801a2d0:	080256a0 	.word	0x080256a0

0801a2d4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a2d4:	b5b0      	push	{r4, r5, r7, lr}
 801a2d6:	b08a      	sub	sp, #40	; 0x28
 801a2d8:	af04      	add	r7, sp, #16
 801a2da:	60f8      	str	r0, [r7, #12]
 801a2dc:	607b      	str	r3, [r7, #4]
 801a2de:	460b      	mov	r3, r1
 801a2e0:	817b      	strh	r3, [r7, #10]
 801a2e2:	4613      	mov	r3, r2
 801a2e4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d106      	bne.n	801a2fa <tcp_output_alloc_header+0x26>
 801a2ec:	4b15      	ldr	r3, [pc, #84]	; (801a344 <tcp_output_alloc_header+0x70>)
 801a2ee:	f240 7242 	movw	r2, #1858	; 0x742
 801a2f2:	4915      	ldr	r1, [pc, #84]	; (801a348 <tcp_output_alloc_header+0x74>)
 801a2f4:	4815      	ldr	r0, [pc, #84]	; (801a34c <tcp_output_alloc_header+0x78>)
 801a2f6:	f004 fe01 	bl	801eefc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	8adb      	ldrh	r3, [r3, #22]
 801a302:	68fa      	ldr	r2, [r7, #12]
 801a304:	8b12      	ldrh	r2, [r2, #24]
 801a306:	68f9      	ldr	r1, [r7, #12]
 801a308:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801a30a:	893d      	ldrh	r5, [r7, #8]
 801a30c:	897c      	ldrh	r4, [r7, #10]
 801a30e:	9103      	str	r1, [sp, #12]
 801a310:	2110      	movs	r1, #16
 801a312:	9102      	str	r1, [sp, #8]
 801a314:	9201      	str	r2, [sp, #4]
 801a316:	9300      	str	r3, [sp, #0]
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	462a      	mov	r2, r5
 801a31c:	4621      	mov	r1, r4
 801a31e:	f7ff ff67 	bl	801a1f0 <tcp_output_alloc_header_common>
 801a322:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a324:	697b      	ldr	r3, [r7, #20]
 801a326:	2b00      	cmp	r3, #0
 801a328:	d006      	beq.n	801a338 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a32a:	68fb      	ldr	r3, [r7, #12]
 801a32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a32e:	68fa      	ldr	r2, [r7, #12]
 801a330:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a332:	441a      	add	r2, r3
 801a334:	68fb      	ldr	r3, [r7, #12]
 801a336:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801a338:	697b      	ldr	r3, [r7, #20]
}
 801a33a:	4618      	mov	r0, r3
 801a33c:	3718      	adds	r7, #24
 801a33e:	46bd      	mov	sp, r7
 801a340:	bdb0      	pop	{r4, r5, r7, pc}
 801a342:	bf00      	nop
 801a344:	0802564c 	.word	0x0802564c
 801a348:	08025d54 	.word	0x08025d54
 801a34c:	080256a0 	.word	0x080256a0

0801a350 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a350:	b580      	push	{r7, lr}
 801a352:	b088      	sub	sp, #32
 801a354:	af00      	add	r7, sp, #0
 801a356:	60f8      	str	r0, [r7, #12]
 801a358:	60b9      	str	r1, [r7, #8]
 801a35a:	4611      	mov	r1, r2
 801a35c:	461a      	mov	r2, r3
 801a35e:	460b      	mov	r3, r1
 801a360:	71fb      	strb	r3, [r7, #7]
 801a362:	4613      	mov	r3, r2
 801a364:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a366:	2300      	movs	r3, #0
 801a368:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a36a:	68bb      	ldr	r3, [r7, #8]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d106      	bne.n	801a37e <tcp_output_fill_options+0x2e>
 801a370:	4b13      	ldr	r3, [pc, #76]	; (801a3c0 <tcp_output_fill_options+0x70>)
 801a372:	f240 7256 	movw	r2, #1878	; 0x756
 801a376:	4913      	ldr	r1, [pc, #76]	; (801a3c4 <tcp_output_fill_options+0x74>)
 801a378:	4813      	ldr	r0, [pc, #76]	; (801a3c8 <tcp_output_fill_options+0x78>)
 801a37a:	f004 fdbf 	bl	801eefc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a37e:	68bb      	ldr	r3, [r7, #8]
 801a380:	685b      	ldr	r3, [r3, #4]
 801a382:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a384:	69bb      	ldr	r3, [r7, #24]
 801a386:	3314      	adds	r3, #20
 801a388:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a38a:	69bb      	ldr	r3, [r7, #24]
 801a38c:	f103 0214 	add.w	r2, r3, #20
 801a390:	8bfb      	ldrh	r3, [r7, #30]
 801a392:	009b      	lsls	r3, r3, #2
 801a394:	4619      	mov	r1, r3
 801a396:	79fb      	ldrb	r3, [r7, #7]
 801a398:	009b      	lsls	r3, r3, #2
 801a39a:	f003 0304 	and.w	r3, r3, #4
 801a39e:	440b      	add	r3, r1
 801a3a0:	4413      	add	r3, r2
 801a3a2:	697a      	ldr	r2, [r7, #20]
 801a3a4:	429a      	cmp	r2, r3
 801a3a6:	d006      	beq.n	801a3b6 <tcp_output_fill_options+0x66>
 801a3a8:	4b05      	ldr	r3, [pc, #20]	; (801a3c0 <tcp_output_fill_options+0x70>)
 801a3aa:	f240 7275 	movw	r2, #1909	; 0x775
 801a3ae:	4907      	ldr	r1, [pc, #28]	; (801a3cc <tcp_output_fill_options+0x7c>)
 801a3b0:	4805      	ldr	r0, [pc, #20]	; (801a3c8 <tcp_output_fill_options+0x78>)
 801a3b2:	f004 fda3 	bl	801eefc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a3b6:	bf00      	nop
 801a3b8:	3720      	adds	r7, #32
 801a3ba:	46bd      	mov	sp, r7
 801a3bc:	bd80      	pop	{r7, pc}
 801a3be:	bf00      	nop
 801a3c0:	0802564c 	.word	0x0802564c
 801a3c4:	08025d7c 	.word	0x08025d7c
 801a3c8:	080256a0 	.word	0x080256a0
 801a3cc:	08025c74 	.word	0x08025c74

0801a3d0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a3d0:	b580      	push	{r7, lr}
 801a3d2:	b08a      	sub	sp, #40	; 0x28
 801a3d4:	af04      	add	r7, sp, #16
 801a3d6:	60f8      	str	r0, [r7, #12]
 801a3d8:	60b9      	str	r1, [r7, #8]
 801a3da:	607a      	str	r2, [r7, #4]
 801a3dc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a3de:	68bb      	ldr	r3, [r7, #8]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d106      	bne.n	801a3f2 <tcp_output_control_segment+0x22>
 801a3e4:	4b1c      	ldr	r3, [pc, #112]	; (801a458 <tcp_output_control_segment+0x88>)
 801a3e6:	f240 7287 	movw	r2, #1927	; 0x787
 801a3ea:	491c      	ldr	r1, [pc, #112]	; (801a45c <tcp_output_control_segment+0x8c>)
 801a3ec:	481c      	ldr	r0, [pc, #112]	; (801a460 <tcp_output_control_segment+0x90>)
 801a3ee:	f004 fd85 	bl	801eefc <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a3f2:	683a      	ldr	r2, [r7, #0]
 801a3f4:	6879      	ldr	r1, [r7, #4]
 801a3f6:	68f8      	ldr	r0, [r7, #12]
 801a3f8:	f7fe fae8 	bl	80189cc <tcp_route>
 801a3fc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a3fe:	693b      	ldr	r3, [r7, #16]
 801a400:	2b00      	cmp	r3, #0
 801a402:	d102      	bne.n	801a40a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a404:	23fc      	movs	r3, #252	; 0xfc
 801a406:	75fb      	strb	r3, [r7, #23]
 801a408:	e01c      	b.n	801a444 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	d006      	beq.n	801a41e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	7adb      	ldrb	r3, [r3, #11]
 801a414:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	7a9b      	ldrb	r3, [r3, #10]
 801a41a:	757b      	strb	r3, [r7, #21]
 801a41c:	e003      	b.n	801a426 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a41e:	23ff      	movs	r3, #255	; 0xff
 801a420:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a422:	2300      	movs	r3, #0
 801a424:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a426:	7dba      	ldrb	r2, [r7, #22]
 801a428:	693b      	ldr	r3, [r7, #16]
 801a42a:	9302      	str	r3, [sp, #8]
 801a42c:	2306      	movs	r3, #6
 801a42e:	9301      	str	r3, [sp, #4]
 801a430:	7d7b      	ldrb	r3, [r7, #21]
 801a432:	9300      	str	r3, [sp, #0]
 801a434:	4613      	mov	r3, r2
 801a436:	683a      	ldr	r2, [r7, #0]
 801a438:	6879      	ldr	r1, [r7, #4]
 801a43a:	68b8      	ldr	r0, [r7, #8]
 801a43c:	f002 fad0 	bl	801c9e0 <ip4_output_if>
 801a440:	4603      	mov	r3, r0
 801a442:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a444:	68b8      	ldr	r0, [r7, #8]
 801a446:	f7f9 ff6d 	bl	8014324 <pbuf_free>
  return err;
 801a44a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a44e:	4618      	mov	r0, r3
 801a450:	3718      	adds	r7, #24
 801a452:	46bd      	mov	sp, r7
 801a454:	bd80      	pop	{r7, pc}
 801a456:	bf00      	nop
 801a458:	0802564c 	.word	0x0802564c
 801a45c:	08025da4 	.word	0x08025da4
 801a460:	080256a0 	.word	0x080256a0

0801a464 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a464:	b590      	push	{r4, r7, lr}
 801a466:	b08b      	sub	sp, #44	; 0x2c
 801a468:	af04      	add	r7, sp, #16
 801a46a:	60f8      	str	r0, [r7, #12]
 801a46c:	60b9      	str	r1, [r7, #8]
 801a46e:	607a      	str	r2, [r7, #4]
 801a470:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a472:	683b      	ldr	r3, [r7, #0]
 801a474:	2b00      	cmp	r3, #0
 801a476:	d106      	bne.n	801a486 <tcp_rst+0x22>
 801a478:	4b1f      	ldr	r3, [pc, #124]	; (801a4f8 <tcp_rst+0x94>)
 801a47a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801a47e:	491f      	ldr	r1, [pc, #124]	; (801a4fc <tcp_rst+0x98>)
 801a480:	481f      	ldr	r0, [pc, #124]	; (801a500 <tcp_rst+0x9c>)
 801a482:	f004 fd3b 	bl	801eefc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d106      	bne.n	801a49a <tcp_rst+0x36>
 801a48c:	4b1a      	ldr	r3, [pc, #104]	; (801a4f8 <tcp_rst+0x94>)
 801a48e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801a492:	491c      	ldr	r1, [pc, #112]	; (801a504 <tcp_rst+0xa0>)
 801a494:	481a      	ldr	r0, [pc, #104]	; (801a500 <tcp_rst+0x9c>)
 801a496:	f004 fd31 	bl	801eefc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a49a:	2300      	movs	r3, #0
 801a49c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a49e:	f246 0308 	movw	r3, #24584	; 0x6008
 801a4a2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a4a4:	7dfb      	ldrb	r3, [r7, #23]
 801a4a6:	b29c      	uxth	r4, r3
 801a4a8:	68b8      	ldr	r0, [r7, #8]
 801a4aa:	f7f8 fc08 	bl	8012cbe <lwip_htonl>
 801a4ae:	4602      	mov	r2, r0
 801a4b0:	8abb      	ldrh	r3, [r7, #20]
 801a4b2:	9303      	str	r3, [sp, #12]
 801a4b4:	2314      	movs	r3, #20
 801a4b6:	9302      	str	r3, [sp, #8]
 801a4b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a4ba:	9301      	str	r3, [sp, #4]
 801a4bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a4be:	9300      	str	r3, [sp, #0]
 801a4c0:	4613      	mov	r3, r2
 801a4c2:	2200      	movs	r2, #0
 801a4c4:	4621      	mov	r1, r4
 801a4c6:	6878      	ldr	r0, [r7, #4]
 801a4c8:	f7ff fe92 	bl	801a1f0 <tcp_output_alloc_header_common>
 801a4cc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a4ce:	693b      	ldr	r3, [r7, #16]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d00c      	beq.n	801a4ee <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a4d4:	7dfb      	ldrb	r3, [r7, #23]
 801a4d6:	2200      	movs	r2, #0
 801a4d8:	6939      	ldr	r1, [r7, #16]
 801a4da:	68f8      	ldr	r0, [r7, #12]
 801a4dc:	f7ff ff38 	bl	801a350 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4e2:	683a      	ldr	r2, [r7, #0]
 801a4e4:	6939      	ldr	r1, [r7, #16]
 801a4e6:	68f8      	ldr	r0, [r7, #12]
 801a4e8:	f7ff ff72 	bl	801a3d0 <tcp_output_control_segment>
 801a4ec:	e000      	b.n	801a4f0 <tcp_rst+0x8c>
    return;
 801a4ee:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a4f0:	371c      	adds	r7, #28
 801a4f2:	46bd      	mov	sp, r7
 801a4f4:	bd90      	pop	{r4, r7, pc}
 801a4f6:	bf00      	nop
 801a4f8:	0802564c 	.word	0x0802564c
 801a4fc:	08025dd0 	.word	0x08025dd0
 801a500:	080256a0 	.word	0x080256a0
 801a504:	08025dec 	.word	0x08025dec

0801a508 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a508:	b590      	push	{r4, r7, lr}
 801a50a:	b087      	sub	sp, #28
 801a50c:	af00      	add	r7, sp, #0
 801a50e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a510:	2300      	movs	r3, #0
 801a512:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a514:	2300      	movs	r3, #0
 801a516:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d106      	bne.n	801a52c <tcp_send_empty_ack+0x24>
 801a51e:	4b28      	ldr	r3, [pc, #160]	; (801a5c0 <tcp_send_empty_ack+0xb8>)
 801a520:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801a524:	4927      	ldr	r1, [pc, #156]	; (801a5c4 <tcp_send_empty_ack+0xbc>)
 801a526:	4828      	ldr	r0, [pc, #160]	; (801a5c8 <tcp_send_empty_ack+0xc0>)
 801a528:	f004 fce8 	bl	801eefc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a52c:	7dfb      	ldrb	r3, [r7, #23]
 801a52e:	009b      	lsls	r3, r3, #2
 801a530:	b2db      	uxtb	r3, r3
 801a532:	f003 0304 	and.w	r3, r3, #4
 801a536:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a538:	7d7b      	ldrb	r3, [r7, #21]
 801a53a:	b29c      	uxth	r4, r3
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a540:	4618      	mov	r0, r3
 801a542:	f7f8 fbbc 	bl	8012cbe <lwip_htonl>
 801a546:	4603      	mov	r3, r0
 801a548:	2200      	movs	r2, #0
 801a54a:	4621      	mov	r1, r4
 801a54c:	6878      	ldr	r0, [r7, #4]
 801a54e:	f7ff fec1 	bl	801a2d4 <tcp_output_alloc_header>
 801a552:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a554:	693b      	ldr	r3, [r7, #16]
 801a556:	2b00      	cmp	r3, #0
 801a558:	d109      	bne.n	801a56e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	8b5b      	ldrh	r3, [r3, #26]
 801a55e:	f043 0303 	orr.w	r3, r3, #3
 801a562:	b29a      	uxth	r2, r3
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a568:	f06f 0301 	mvn.w	r3, #1
 801a56c:	e023      	b.n	801a5b6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a56e:	7dbb      	ldrb	r3, [r7, #22]
 801a570:	7dfa      	ldrb	r2, [r7, #23]
 801a572:	6939      	ldr	r1, [r7, #16]
 801a574:	6878      	ldr	r0, [r7, #4]
 801a576:	f7ff feeb 	bl	801a350 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a57a:	687a      	ldr	r2, [r7, #4]
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	3304      	adds	r3, #4
 801a580:	6939      	ldr	r1, [r7, #16]
 801a582:	6878      	ldr	r0, [r7, #4]
 801a584:	f7ff ff24 	bl	801a3d0 <tcp_output_control_segment>
 801a588:	4603      	mov	r3, r0
 801a58a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a58c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a590:	2b00      	cmp	r3, #0
 801a592:	d007      	beq.n	801a5a4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	8b5b      	ldrh	r3, [r3, #26]
 801a598:	f043 0303 	orr.w	r3, r3, #3
 801a59c:	b29a      	uxth	r2, r3
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	835a      	strh	r2, [r3, #26]
 801a5a2:	e006      	b.n	801a5b2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	8b5b      	ldrh	r3, [r3, #26]
 801a5a8:	f023 0303 	bic.w	r3, r3, #3
 801a5ac:	b29a      	uxth	r2, r3
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a5b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	371c      	adds	r7, #28
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	bd90      	pop	{r4, r7, pc}
 801a5be:	bf00      	nop
 801a5c0:	0802564c 	.word	0x0802564c
 801a5c4:	08025e08 	.word	0x08025e08
 801a5c8:	080256a0 	.word	0x080256a0

0801a5cc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a5cc:	b590      	push	{r4, r7, lr}
 801a5ce:	b087      	sub	sp, #28
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d106      	bne.n	801a5ec <tcp_keepalive+0x20>
 801a5de:	4b18      	ldr	r3, [pc, #96]	; (801a640 <tcp_keepalive+0x74>)
 801a5e0:	f640 0224 	movw	r2, #2084	; 0x824
 801a5e4:	4917      	ldr	r1, [pc, #92]	; (801a644 <tcp_keepalive+0x78>)
 801a5e6:	4818      	ldr	r0, [pc, #96]	; (801a648 <tcp_keepalive+0x7c>)
 801a5e8:	f004 fc88 	bl	801eefc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a5ec:	7dfb      	ldrb	r3, [r7, #23]
 801a5ee:	b29c      	uxth	r4, r3
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a5f4:	3b01      	subs	r3, #1
 801a5f6:	4618      	mov	r0, r3
 801a5f8:	f7f8 fb61 	bl	8012cbe <lwip_htonl>
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	2200      	movs	r2, #0
 801a600:	4621      	mov	r1, r4
 801a602:	6878      	ldr	r0, [r7, #4]
 801a604:	f7ff fe66 	bl	801a2d4 <tcp_output_alloc_header>
 801a608:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a60a:	693b      	ldr	r3, [r7, #16]
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d102      	bne.n	801a616 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a610:	f04f 33ff 	mov.w	r3, #4294967295
 801a614:	e010      	b.n	801a638 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a616:	7dfb      	ldrb	r3, [r7, #23]
 801a618:	2200      	movs	r2, #0
 801a61a:	6939      	ldr	r1, [r7, #16]
 801a61c:	6878      	ldr	r0, [r7, #4]
 801a61e:	f7ff fe97 	bl	801a350 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a622:	687a      	ldr	r2, [r7, #4]
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	3304      	adds	r3, #4
 801a628:	6939      	ldr	r1, [r7, #16]
 801a62a:	6878      	ldr	r0, [r7, #4]
 801a62c:	f7ff fed0 	bl	801a3d0 <tcp_output_control_segment>
 801a630:	4603      	mov	r3, r0
 801a632:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a634:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a638:	4618      	mov	r0, r3
 801a63a:	371c      	adds	r7, #28
 801a63c:	46bd      	mov	sp, r7
 801a63e:	bd90      	pop	{r4, r7, pc}
 801a640:	0802564c 	.word	0x0802564c
 801a644:	08025e28 	.word	0x08025e28
 801a648:	080256a0 	.word	0x080256a0

0801a64c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a64c:	b590      	push	{r4, r7, lr}
 801a64e:	b08b      	sub	sp, #44	; 0x2c
 801a650:	af00      	add	r7, sp, #0
 801a652:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a654:	2300      	movs	r3, #0
 801a656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d106      	bne.n	801a66e <tcp_zero_window_probe+0x22>
 801a660:	4b4c      	ldr	r3, [pc, #304]	; (801a794 <tcp_zero_window_probe+0x148>)
 801a662:	f640 024f 	movw	r2, #2127	; 0x84f
 801a666:	494c      	ldr	r1, [pc, #304]	; (801a798 <tcp_zero_window_probe+0x14c>)
 801a668:	484c      	ldr	r0, [pc, #304]	; (801a79c <tcp_zero_window_probe+0x150>)
 801a66a:	f004 fc47 	bl	801eefc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a672:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a674:	6a3b      	ldr	r3, [r7, #32]
 801a676:	2b00      	cmp	r3, #0
 801a678:	d101      	bne.n	801a67e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a67a:	2300      	movs	r3, #0
 801a67c:	e086      	b.n	801a78c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a684:	2bff      	cmp	r3, #255	; 0xff
 801a686:	d007      	beq.n	801a698 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a68e:	3301      	adds	r3, #1
 801a690:	b2da      	uxtb	r2, r3
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a698:	6a3b      	ldr	r3, [r7, #32]
 801a69a:	68db      	ldr	r3, [r3, #12]
 801a69c:	899b      	ldrh	r3, [r3, #12]
 801a69e:	b29b      	uxth	r3, r3
 801a6a0:	4618      	mov	r0, r3
 801a6a2:	f7f8 faf7 	bl	8012c94 <lwip_htons>
 801a6a6:	4603      	mov	r3, r0
 801a6a8:	b2db      	uxtb	r3, r3
 801a6aa:	f003 0301 	and.w	r3, r3, #1
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d005      	beq.n	801a6be <tcp_zero_window_probe+0x72>
 801a6b2:	6a3b      	ldr	r3, [r7, #32]
 801a6b4:	891b      	ldrh	r3, [r3, #8]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d101      	bne.n	801a6be <tcp_zero_window_probe+0x72>
 801a6ba:	2301      	movs	r3, #1
 801a6bc:	e000      	b.n	801a6c0 <tcp_zero_window_probe+0x74>
 801a6be:	2300      	movs	r3, #0
 801a6c0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a6c2:	7ffb      	ldrb	r3, [r7, #31]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	bf0c      	ite	eq
 801a6c8:	2301      	moveq	r3, #1
 801a6ca:	2300      	movne	r3, #0
 801a6cc:	b2db      	uxtb	r3, r3
 801a6ce:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a6d4:	b299      	uxth	r1, r3
 801a6d6:	6a3b      	ldr	r3, [r7, #32]
 801a6d8:	68db      	ldr	r3, [r3, #12]
 801a6da:	685b      	ldr	r3, [r3, #4]
 801a6dc:	8bba      	ldrh	r2, [r7, #28]
 801a6de:	6878      	ldr	r0, [r7, #4]
 801a6e0:	f7ff fdf8 	bl	801a2d4 <tcp_output_alloc_header>
 801a6e4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801a6e6:	69bb      	ldr	r3, [r7, #24]
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d102      	bne.n	801a6f2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a6ec:	f04f 33ff 	mov.w	r3, #4294967295
 801a6f0:	e04c      	b.n	801a78c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a6f2:	69bb      	ldr	r3, [r7, #24]
 801a6f4:	685b      	ldr	r3, [r3, #4]
 801a6f6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801a6f8:	7ffb      	ldrb	r3, [r7, #31]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d011      	beq.n	801a722 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a6fe:	697b      	ldr	r3, [r7, #20]
 801a700:	899b      	ldrh	r3, [r3, #12]
 801a702:	b29b      	uxth	r3, r3
 801a704:	b21b      	sxth	r3, r3
 801a706:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a70a:	b21c      	sxth	r4, r3
 801a70c:	2011      	movs	r0, #17
 801a70e:	f7f8 fac1 	bl	8012c94 <lwip_htons>
 801a712:	4603      	mov	r3, r0
 801a714:	b21b      	sxth	r3, r3
 801a716:	4323      	orrs	r3, r4
 801a718:	b21b      	sxth	r3, r3
 801a71a:	b29a      	uxth	r2, r3
 801a71c:	697b      	ldr	r3, [r7, #20]
 801a71e:	819a      	strh	r2, [r3, #12]
 801a720:	e010      	b.n	801a744 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a722:	69bb      	ldr	r3, [r7, #24]
 801a724:	685b      	ldr	r3, [r3, #4]
 801a726:	3314      	adds	r3, #20
 801a728:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a72a:	6a3b      	ldr	r3, [r7, #32]
 801a72c:	6858      	ldr	r0, [r3, #4]
 801a72e:	6a3b      	ldr	r3, [r7, #32]
 801a730:	685b      	ldr	r3, [r3, #4]
 801a732:	891a      	ldrh	r2, [r3, #8]
 801a734:	6a3b      	ldr	r3, [r7, #32]
 801a736:	891b      	ldrh	r3, [r3, #8]
 801a738:	1ad3      	subs	r3, r2, r3
 801a73a:	b29b      	uxth	r3, r3
 801a73c:	2201      	movs	r2, #1
 801a73e:	6939      	ldr	r1, [r7, #16]
 801a740:	f7f9 fff6 	bl	8014730 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a744:	6a3b      	ldr	r3, [r7, #32]
 801a746:	68db      	ldr	r3, [r3, #12]
 801a748:	685b      	ldr	r3, [r3, #4]
 801a74a:	4618      	mov	r0, r3
 801a74c:	f7f8 fab7 	bl	8012cbe <lwip_htonl>
 801a750:	4603      	mov	r3, r0
 801a752:	3301      	adds	r3, #1
 801a754:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	1ad3      	subs	r3, r2, r3
 801a75e:	2b00      	cmp	r3, #0
 801a760:	da02      	bge.n	801a768 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	68fa      	ldr	r2, [r7, #12]
 801a766:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a76c:	2200      	movs	r2, #0
 801a76e:	69b9      	ldr	r1, [r7, #24]
 801a770:	6878      	ldr	r0, [r7, #4]
 801a772:	f7ff fded 	bl	801a350 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a776:	687a      	ldr	r2, [r7, #4]
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	3304      	adds	r3, #4
 801a77c:	69b9      	ldr	r1, [r7, #24]
 801a77e:	6878      	ldr	r0, [r7, #4]
 801a780:	f7ff fe26 	bl	801a3d0 <tcp_output_control_segment>
 801a784:	4603      	mov	r3, r0
 801a786:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a788:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a78c:	4618      	mov	r0, r3
 801a78e:	372c      	adds	r7, #44	; 0x2c
 801a790:	46bd      	mov	sp, r7
 801a792:	bd90      	pop	{r4, r7, pc}
 801a794:	0802564c 	.word	0x0802564c
 801a798:	08025e44 	.word	0x08025e44
 801a79c:	080256a0 	.word	0x080256a0

0801a7a0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801a7a0:	b580      	push	{r7, lr}
 801a7a2:	b082      	sub	sp, #8
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801a7a8:	f7fa f8b0 	bl	801490c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a7ac:	4b0a      	ldr	r3, [pc, #40]	; (801a7d8 <tcpip_tcp_timer+0x38>)
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d103      	bne.n	801a7bc <tcpip_tcp_timer+0x1c>
 801a7b4:	4b09      	ldr	r3, [pc, #36]	; (801a7dc <tcpip_tcp_timer+0x3c>)
 801a7b6:	681b      	ldr	r3, [r3, #0]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d005      	beq.n	801a7c8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a7bc:	2200      	movs	r2, #0
 801a7be:	4908      	ldr	r1, [pc, #32]	; (801a7e0 <tcpip_tcp_timer+0x40>)
 801a7c0:	20fa      	movs	r0, #250	; 0xfa
 801a7c2:	f000 f8f3 	bl	801a9ac <sys_timeout>
 801a7c6:	e003      	b.n	801a7d0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801a7c8:	4b06      	ldr	r3, [pc, #24]	; (801a7e4 <tcpip_tcp_timer+0x44>)
 801a7ca:	2200      	movs	r2, #0
 801a7cc:	601a      	str	r2, [r3, #0]
  }
}
 801a7ce:	bf00      	nop
 801a7d0:	bf00      	nop
 801a7d2:	3708      	adds	r7, #8
 801a7d4:	46bd      	mov	sp, r7
 801a7d6:	bd80      	pop	{r7, pc}
 801a7d8:	2000e0fc 	.word	0x2000e0fc
 801a7dc:	2000e10c 	.word	0x2000e10c
 801a7e0:	0801a7a1 	.word	0x0801a7a1
 801a7e4:	20006df8 	.word	0x20006df8

0801a7e8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801a7e8:	b580      	push	{r7, lr}
 801a7ea:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801a7ec:	4b0a      	ldr	r3, [pc, #40]	; (801a818 <tcp_timer_needed+0x30>)
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d10f      	bne.n	801a814 <tcp_timer_needed+0x2c>
 801a7f4:	4b09      	ldr	r3, [pc, #36]	; (801a81c <tcp_timer_needed+0x34>)
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d103      	bne.n	801a804 <tcp_timer_needed+0x1c>
 801a7fc:	4b08      	ldr	r3, [pc, #32]	; (801a820 <tcp_timer_needed+0x38>)
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	2b00      	cmp	r3, #0
 801a802:	d007      	beq.n	801a814 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801a804:	4b04      	ldr	r3, [pc, #16]	; (801a818 <tcp_timer_needed+0x30>)
 801a806:	2201      	movs	r2, #1
 801a808:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a80a:	2200      	movs	r2, #0
 801a80c:	4905      	ldr	r1, [pc, #20]	; (801a824 <tcp_timer_needed+0x3c>)
 801a80e:	20fa      	movs	r0, #250	; 0xfa
 801a810:	f000 f8cc 	bl	801a9ac <sys_timeout>
  }
}
 801a814:	bf00      	nop
 801a816:	bd80      	pop	{r7, pc}
 801a818:	20006df8 	.word	0x20006df8
 801a81c:	2000e0fc 	.word	0x2000e0fc
 801a820:	2000e10c 	.word	0x2000e10c
 801a824:	0801a7a1 	.word	0x0801a7a1

0801a828 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801a828:	b580      	push	{r7, lr}
 801a82a:	b086      	sub	sp, #24
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	60f8      	str	r0, [r7, #12]
 801a830:	60b9      	str	r1, [r7, #8]
 801a832:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a834:	200a      	movs	r0, #10
 801a836:	f7f8 fee3 	bl	8013600 <memp_malloc>
 801a83a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801a83c:	693b      	ldr	r3, [r7, #16]
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d109      	bne.n	801a856 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a842:	693b      	ldr	r3, [r7, #16]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d151      	bne.n	801a8ec <sys_timeout_abs+0xc4>
 801a848:	4b2a      	ldr	r3, [pc, #168]	; (801a8f4 <sys_timeout_abs+0xcc>)
 801a84a:	22be      	movs	r2, #190	; 0xbe
 801a84c:	492a      	ldr	r1, [pc, #168]	; (801a8f8 <sys_timeout_abs+0xd0>)
 801a84e:	482b      	ldr	r0, [pc, #172]	; (801a8fc <sys_timeout_abs+0xd4>)
 801a850:	f004 fb54 	bl	801eefc <iprintf>
    return;
 801a854:	e04a      	b.n	801a8ec <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801a856:	693b      	ldr	r3, [r7, #16]
 801a858:	2200      	movs	r2, #0
 801a85a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801a85c:	693b      	ldr	r3, [r7, #16]
 801a85e:	68ba      	ldr	r2, [r7, #8]
 801a860:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801a862:	693b      	ldr	r3, [r7, #16]
 801a864:	687a      	ldr	r2, [r7, #4]
 801a866:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801a868:	693b      	ldr	r3, [r7, #16]
 801a86a:	68fa      	ldr	r2, [r7, #12]
 801a86c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801a86e:	4b24      	ldr	r3, [pc, #144]	; (801a900 <sys_timeout_abs+0xd8>)
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d103      	bne.n	801a87e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801a876:	4a22      	ldr	r2, [pc, #136]	; (801a900 <sys_timeout_abs+0xd8>)
 801a878:	693b      	ldr	r3, [r7, #16]
 801a87a:	6013      	str	r3, [r2, #0]
    return;
 801a87c:	e037      	b.n	801a8ee <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801a87e:	693b      	ldr	r3, [r7, #16]
 801a880:	685a      	ldr	r2, [r3, #4]
 801a882:	4b1f      	ldr	r3, [pc, #124]	; (801a900 <sys_timeout_abs+0xd8>)
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	685b      	ldr	r3, [r3, #4]
 801a888:	1ad3      	subs	r3, r2, r3
 801a88a:	0fdb      	lsrs	r3, r3, #31
 801a88c:	f003 0301 	and.w	r3, r3, #1
 801a890:	b2db      	uxtb	r3, r3
 801a892:	2b00      	cmp	r3, #0
 801a894:	d007      	beq.n	801a8a6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801a896:	4b1a      	ldr	r3, [pc, #104]	; (801a900 <sys_timeout_abs+0xd8>)
 801a898:	681a      	ldr	r2, [r3, #0]
 801a89a:	693b      	ldr	r3, [r7, #16]
 801a89c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801a89e:	4a18      	ldr	r2, [pc, #96]	; (801a900 <sys_timeout_abs+0xd8>)
 801a8a0:	693b      	ldr	r3, [r7, #16]
 801a8a2:	6013      	str	r3, [r2, #0]
 801a8a4:	e023      	b.n	801a8ee <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801a8a6:	4b16      	ldr	r3, [pc, #88]	; (801a900 <sys_timeout_abs+0xd8>)
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	617b      	str	r3, [r7, #20]
 801a8ac:	e01a      	b.n	801a8e4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801a8ae:	697b      	ldr	r3, [r7, #20]
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d00b      	beq.n	801a8ce <sys_timeout_abs+0xa6>
 801a8b6:	693b      	ldr	r3, [r7, #16]
 801a8b8:	685a      	ldr	r2, [r3, #4]
 801a8ba:	697b      	ldr	r3, [r7, #20]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	685b      	ldr	r3, [r3, #4]
 801a8c0:	1ad3      	subs	r3, r2, r3
 801a8c2:	0fdb      	lsrs	r3, r3, #31
 801a8c4:	f003 0301 	and.w	r3, r3, #1
 801a8c8:	b2db      	uxtb	r3, r3
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d007      	beq.n	801a8de <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801a8ce:	697b      	ldr	r3, [r7, #20]
 801a8d0:	681a      	ldr	r2, [r3, #0]
 801a8d2:	693b      	ldr	r3, [r7, #16]
 801a8d4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801a8d6:	697b      	ldr	r3, [r7, #20]
 801a8d8:	693a      	ldr	r2, [r7, #16]
 801a8da:	601a      	str	r2, [r3, #0]
        break;
 801a8dc:	e007      	b.n	801a8ee <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801a8de:	697b      	ldr	r3, [r7, #20]
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	617b      	str	r3, [r7, #20]
 801a8e4:	697b      	ldr	r3, [r7, #20]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d1e1      	bne.n	801a8ae <sys_timeout_abs+0x86>
 801a8ea:	e000      	b.n	801a8ee <sys_timeout_abs+0xc6>
    return;
 801a8ec:	bf00      	nop
      }
    }
  }
}
 801a8ee:	3718      	adds	r7, #24
 801a8f0:	46bd      	mov	sp, r7
 801a8f2:	bd80      	pop	{r7, pc}
 801a8f4:	08025e68 	.word	0x08025e68
 801a8f8:	08025e9c 	.word	0x08025e9c
 801a8fc:	08025edc 	.word	0x08025edc
 801a900:	20006df0 	.word	0x20006df0

0801a904 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801a904:	b580      	push	{r7, lr}
 801a906:	b086      	sub	sp, #24
 801a908:	af00      	add	r7, sp, #0
 801a90a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801a910:	697b      	ldr	r3, [r7, #20]
 801a912:	685b      	ldr	r3, [r3, #4]
 801a914:	4798      	blx	r3

  now = sys_now();
 801a916:	f7f2 fe99 	bl	800d64c <sys_now>
 801a91a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801a91c:	697b      	ldr	r3, [r7, #20]
 801a91e:	681a      	ldr	r2, [r3, #0]
 801a920:	4b0f      	ldr	r3, [pc, #60]	; (801a960 <lwip_cyclic_timer+0x5c>)
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	4413      	add	r3, r2
 801a926:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801a928:	68fa      	ldr	r2, [r7, #12]
 801a92a:	693b      	ldr	r3, [r7, #16]
 801a92c:	1ad3      	subs	r3, r2, r3
 801a92e:	0fdb      	lsrs	r3, r3, #31
 801a930:	f003 0301 	and.w	r3, r3, #1
 801a934:	b2db      	uxtb	r3, r3
 801a936:	2b00      	cmp	r3, #0
 801a938:	d009      	beq.n	801a94e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801a93a:	697b      	ldr	r3, [r7, #20]
 801a93c:	681a      	ldr	r2, [r3, #0]
 801a93e:	693b      	ldr	r3, [r7, #16]
 801a940:	4413      	add	r3, r2
 801a942:	687a      	ldr	r2, [r7, #4]
 801a944:	4907      	ldr	r1, [pc, #28]	; (801a964 <lwip_cyclic_timer+0x60>)
 801a946:	4618      	mov	r0, r3
 801a948:	f7ff ff6e 	bl	801a828 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801a94c:	e004      	b.n	801a958 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801a94e:	687a      	ldr	r2, [r7, #4]
 801a950:	4904      	ldr	r1, [pc, #16]	; (801a964 <lwip_cyclic_timer+0x60>)
 801a952:	68f8      	ldr	r0, [r7, #12]
 801a954:	f7ff ff68 	bl	801a828 <sys_timeout_abs>
}
 801a958:	bf00      	nop
 801a95a:	3718      	adds	r7, #24
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}
 801a960:	20006df4 	.word	0x20006df4
 801a964:	0801a905 	.word	0x0801a905

0801a968 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801a968:	b580      	push	{r7, lr}
 801a96a:	b082      	sub	sp, #8
 801a96c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a96e:	2301      	movs	r3, #1
 801a970:	607b      	str	r3, [r7, #4]
 801a972:	e00e      	b.n	801a992 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801a974:	4a0b      	ldr	r2, [pc, #44]	; (801a9a4 <sys_timeouts_init+0x3c>)
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	00db      	lsls	r3, r3, #3
 801a980:	4a08      	ldr	r2, [pc, #32]	; (801a9a4 <sys_timeouts_init+0x3c>)
 801a982:	4413      	add	r3, r2
 801a984:	461a      	mov	r2, r3
 801a986:	4908      	ldr	r1, [pc, #32]	; (801a9a8 <sys_timeouts_init+0x40>)
 801a988:	f000 f810 	bl	801a9ac <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	3301      	adds	r3, #1
 801a990:	607b      	str	r3, [r7, #4]
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	2b02      	cmp	r3, #2
 801a996:	d9ed      	bls.n	801a974 <sys_timeouts_init+0xc>
  }
}
 801a998:	bf00      	nop
 801a99a:	bf00      	nop
 801a99c:	3708      	adds	r7, #8
 801a99e:	46bd      	mov	sp, r7
 801a9a0:	bd80      	pop	{r7, pc}
 801a9a2:	bf00      	nop
 801a9a4:	08026c0c 	.word	0x08026c0c
 801a9a8:	0801a905 	.word	0x0801a905

0801a9ac <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b086      	sub	sp, #24
 801a9b0:	af00      	add	r7, sp, #0
 801a9b2:	60f8      	str	r0, [r7, #12]
 801a9b4:	60b9      	str	r1, [r7, #8]
 801a9b6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801a9b8:	68fb      	ldr	r3, [r7, #12]
 801a9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a9be:	d306      	bcc.n	801a9ce <sys_timeout+0x22>
 801a9c0:	4b0a      	ldr	r3, [pc, #40]	; (801a9ec <sys_timeout+0x40>)
 801a9c2:	f240 1229 	movw	r2, #297	; 0x129
 801a9c6:	490a      	ldr	r1, [pc, #40]	; (801a9f0 <sys_timeout+0x44>)
 801a9c8:	480a      	ldr	r0, [pc, #40]	; (801a9f4 <sys_timeout+0x48>)
 801a9ca:	f004 fa97 	bl	801eefc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801a9ce:	f7f2 fe3d 	bl	800d64c <sys_now>
 801a9d2:	4602      	mov	r2, r0
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	4413      	add	r3, r2
 801a9d8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801a9da:	687a      	ldr	r2, [r7, #4]
 801a9dc:	68b9      	ldr	r1, [r7, #8]
 801a9de:	6978      	ldr	r0, [r7, #20]
 801a9e0:	f7ff ff22 	bl	801a828 <sys_timeout_abs>
#endif
}
 801a9e4:	bf00      	nop
 801a9e6:	3718      	adds	r7, #24
 801a9e8:	46bd      	mov	sp, r7
 801a9ea:	bd80      	pop	{r7, pc}
 801a9ec:	08025e68 	.word	0x08025e68
 801a9f0:	08025f04 	.word	0x08025f04
 801a9f4:	08025edc 	.word	0x08025edc

0801a9f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b084      	sub	sp, #16
 801a9fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801a9fe:	f7f2 fe25 	bl	800d64c <sys_now>
 801aa02:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801aa04:	4b17      	ldr	r3, [pc, #92]	; (801aa64 <sys_check_timeouts+0x6c>)
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801aa0a:	68bb      	ldr	r3, [r7, #8]
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d022      	beq.n	801aa56 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801aa10:	68bb      	ldr	r3, [r7, #8]
 801aa12:	685b      	ldr	r3, [r3, #4]
 801aa14:	68fa      	ldr	r2, [r7, #12]
 801aa16:	1ad3      	subs	r3, r2, r3
 801aa18:	0fdb      	lsrs	r3, r3, #31
 801aa1a:	f003 0301 	and.w	r3, r3, #1
 801aa1e:	b2db      	uxtb	r3, r3
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d11a      	bne.n	801aa5a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801aa24:	68bb      	ldr	r3, [r7, #8]
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	4a0e      	ldr	r2, [pc, #56]	; (801aa64 <sys_check_timeouts+0x6c>)
 801aa2a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801aa2c:	68bb      	ldr	r3, [r7, #8]
 801aa2e:	689b      	ldr	r3, [r3, #8]
 801aa30:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801aa32:	68bb      	ldr	r3, [r7, #8]
 801aa34:	68db      	ldr	r3, [r3, #12]
 801aa36:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801aa38:	68bb      	ldr	r3, [r7, #8]
 801aa3a:	685b      	ldr	r3, [r3, #4]
 801aa3c:	4a0a      	ldr	r2, [pc, #40]	; (801aa68 <sys_check_timeouts+0x70>)
 801aa3e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801aa40:	68b9      	ldr	r1, [r7, #8]
 801aa42:	200a      	movs	r0, #10
 801aa44:	f7f8 fe2e 	bl	80136a4 <memp_free>
    if (handler != NULL) {
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	d0da      	beq.n	801aa04 <sys_check_timeouts+0xc>
      handler(arg);
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	6838      	ldr	r0, [r7, #0]
 801aa52:	4798      	blx	r3
  do {
 801aa54:	e7d6      	b.n	801aa04 <sys_check_timeouts+0xc>
      return;
 801aa56:	bf00      	nop
 801aa58:	e000      	b.n	801aa5c <sys_check_timeouts+0x64>
      return;
 801aa5a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801aa5c:	3710      	adds	r7, #16
 801aa5e:	46bd      	mov	sp, r7
 801aa60:	bd80      	pop	{r7, pc}
 801aa62:	bf00      	nop
 801aa64:	20006df0 	.word	0x20006df0
 801aa68:	20006df4 	.word	0x20006df4

0801aa6c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801aa6c:	b580      	push	{r7, lr}
 801aa6e:	b082      	sub	sp, #8
 801aa70:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801aa72:	4b16      	ldr	r3, [pc, #88]	; (801aacc <sys_timeouts_sleeptime+0x60>)
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d102      	bne.n	801aa80 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801aa7a:	f04f 33ff 	mov.w	r3, #4294967295
 801aa7e:	e020      	b.n	801aac2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801aa80:	f7f2 fde4 	bl	800d64c <sys_now>
 801aa84:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801aa86:	4b11      	ldr	r3, [pc, #68]	; (801aacc <sys_timeouts_sleeptime+0x60>)
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	685a      	ldr	r2, [r3, #4]
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	1ad3      	subs	r3, r2, r3
 801aa90:	0fdb      	lsrs	r3, r3, #31
 801aa92:	f003 0301 	and.w	r3, r3, #1
 801aa96:	b2db      	uxtb	r3, r3
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d001      	beq.n	801aaa0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801aa9c:	2300      	movs	r3, #0
 801aa9e:	e010      	b.n	801aac2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801aaa0:	4b0a      	ldr	r3, [pc, #40]	; (801aacc <sys_timeouts_sleeptime+0x60>)
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	685a      	ldr	r2, [r3, #4]
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	1ad3      	subs	r3, r2, r3
 801aaaa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801aaac:	683b      	ldr	r3, [r7, #0]
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	da06      	bge.n	801aac0 <sys_timeouts_sleeptime+0x54>
 801aab2:	4b07      	ldr	r3, [pc, #28]	; (801aad0 <sys_timeouts_sleeptime+0x64>)
 801aab4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801aab8:	4906      	ldr	r1, [pc, #24]	; (801aad4 <sys_timeouts_sleeptime+0x68>)
 801aaba:	4807      	ldr	r0, [pc, #28]	; (801aad8 <sys_timeouts_sleeptime+0x6c>)
 801aabc:	f004 fa1e 	bl	801eefc <iprintf>
    return ret;
 801aac0:	683b      	ldr	r3, [r7, #0]
  }
}
 801aac2:	4618      	mov	r0, r3
 801aac4:	3708      	adds	r7, #8
 801aac6:	46bd      	mov	sp, r7
 801aac8:	bd80      	pop	{r7, pc}
 801aaca:	bf00      	nop
 801aacc:	20006df0 	.word	0x20006df0
 801aad0:	08025e68 	.word	0x08025e68
 801aad4:	08025f3c 	.word	0x08025f3c
 801aad8:	08025edc 	.word	0x08025edc

0801aadc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801aadc:	b580      	push	{r7, lr}
 801aade:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801aae0:	f004 fa24 	bl	801ef2c <rand>
 801aae4:	4603      	mov	r3, r0
 801aae6:	b29b      	uxth	r3, r3
 801aae8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801aaec:	b29b      	uxth	r3, r3
 801aaee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801aaf2:	b29a      	uxth	r2, r3
 801aaf4:	4b01      	ldr	r3, [pc, #4]	; (801aafc <udp_init+0x20>)
 801aaf6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801aaf8:	bf00      	nop
 801aafa:	bd80      	pop	{r7, pc}
 801aafc:	2000035c 	.word	0x2000035c

0801ab00 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ab00:	b480      	push	{r7}
 801ab02:	b083      	sub	sp, #12
 801ab04:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801ab06:	2300      	movs	r3, #0
 801ab08:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ab0a:	4b17      	ldr	r3, [pc, #92]	; (801ab68 <udp_new_port+0x68>)
 801ab0c:	881b      	ldrh	r3, [r3, #0]
 801ab0e:	1c5a      	adds	r2, r3, #1
 801ab10:	b291      	uxth	r1, r2
 801ab12:	4a15      	ldr	r2, [pc, #84]	; (801ab68 <udp_new_port+0x68>)
 801ab14:	8011      	strh	r1, [r2, #0]
 801ab16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ab1a:	4293      	cmp	r3, r2
 801ab1c:	d103      	bne.n	801ab26 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801ab1e:	4b12      	ldr	r3, [pc, #72]	; (801ab68 <udp_new_port+0x68>)
 801ab20:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801ab24:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ab26:	4b11      	ldr	r3, [pc, #68]	; (801ab6c <udp_new_port+0x6c>)
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	603b      	str	r3, [r7, #0]
 801ab2c:	e011      	b.n	801ab52 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801ab2e:	683b      	ldr	r3, [r7, #0]
 801ab30:	8a5a      	ldrh	r2, [r3, #18]
 801ab32:	4b0d      	ldr	r3, [pc, #52]	; (801ab68 <udp_new_port+0x68>)
 801ab34:	881b      	ldrh	r3, [r3, #0]
 801ab36:	429a      	cmp	r2, r3
 801ab38:	d108      	bne.n	801ab4c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801ab3a:	88fb      	ldrh	r3, [r7, #6]
 801ab3c:	3301      	adds	r3, #1
 801ab3e:	80fb      	strh	r3, [r7, #6]
 801ab40:	88fb      	ldrh	r3, [r7, #6]
 801ab42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801ab46:	d3e0      	bcc.n	801ab0a <udp_new_port+0xa>
        return 0;
 801ab48:	2300      	movs	r3, #0
 801ab4a:	e007      	b.n	801ab5c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ab4c:	683b      	ldr	r3, [r7, #0]
 801ab4e:	68db      	ldr	r3, [r3, #12]
 801ab50:	603b      	str	r3, [r7, #0]
 801ab52:	683b      	ldr	r3, [r7, #0]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d1ea      	bne.n	801ab2e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801ab58:	4b03      	ldr	r3, [pc, #12]	; (801ab68 <udp_new_port+0x68>)
 801ab5a:	881b      	ldrh	r3, [r3, #0]
}
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	370c      	adds	r7, #12
 801ab60:	46bd      	mov	sp, r7
 801ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab66:	4770      	bx	lr
 801ab68:	2000035c 	.word	0x2000035c
 801ab6c:	2000e114 	.word	0x2000e114

0801ab70 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801ab70:	b580      	push	{r7, lr}
 801ab72:	b084      	sub	sp, #16
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	60f8      	str	r0, [r7, #12]
 801ab78:	60b9      	str	r1, [r7, #8]
 801ab7a:	4613      	mov	r3, r2
 801ab7c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801ab7e:	68fb      	ldr	r3, [r7, #12]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d105      	bne.n	801ab90 <udp_input_local_match+0x20>
 801ab84:	4b27      	ldr	r3, [pc, #156]	; (801ac24 <udp_input_local_match+0xb4>)
 801ab86:	2287      	movs	r2, #135	; 0x87
 801ab88:	4927      	ldr	r1, [pc, #156]	; (801ac28 <udp_input_local_match+0xb8>)
 801ab8a:	4828      	ldr	r0, [pc, #160]	; (801ac2c <udp_input_local_match+0xbc>)
 801ab8c:	f004 f9b6 	bl	801eefc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ab90:	68bb      	ldr	r3, [r7, #8]
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d105      	bne.n	801aba2 <udp_input_local_match+0x32>
 801ab96:	4b23      	ldr	r3, [pc, #140]	; (801ac24 <udp_input_local_match+0xb4>)
 801ab98:	2288      	movs	r2, #136	; 0x88
 801ab9a:	4925      	ldr	r1, [pc, #148]	; (801ac30 <udp_input_local_match+0xc0>)
 801ab9c:	4823      	ldr	r0, [pc, #140]	; (801ac2c <udp_input_local_match+0xbc>)
 801ab9e:	f004 f9ad 	bl	801eefc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	7a1b      	ldrb	r3, [r3, #8]
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d00b      	beq.n	801abc2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801abaa:	68fb      	ldr	r3, [r7, #12]
 801abac:	7a1a      	ldrb	r2, [r3, #8]
 801abae:	4b21      	ldr	r3, [pc, #132]	; (801ac34 <udp_input_local_match+0xc4>)
 801abb0:	685b      	ldr	r3, [r3, #4]
 801abb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801abb6:	3301      	adds	r3, #1
 801abb8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801abba:	429a      	cmp	r2, r3
 801abbc:	d001      	beq.n	801abc2 <udp_input_local_match+0x52>
    return 0;
 801abbe:	2300      	movs	r3, #0
 801abc0:	e02b      	b.n	801ac1a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801abc2:	79fb      	ldrb	r3, [r7, #7]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d018      	beq.n	801abfa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d013      	beq.n	801abf6 <udp_input_local_match+0x86>
 801abce:	68fb      	ldr	r3, [r7, #12]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d00f      	beq.n	801abf6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801abd6:	4b17      	ldr	r3, [pc, #92]	; (801ac34 <udp_input_local_match+0xc4>)
 801abd8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801abda:	f1b3 3fff 	cmp.w	r3, #4294967295
 801abde:	d00a      	beq.n	801abf6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	681a      	ldr	r2, [r3, #0]
 801abe4:	4b13      	ldr	r3, [pc, #76]	; (801ac34 <udp_input_local_match+0xc4>)
 801abe6:	695b      	ldr	r3, [r3, #20]
 801abe8:	405a      	eors	r2, r3
 801abea:	68bb      	ldr	r3, [r7, #8]
 801abec:	3308      	adds	r3, #8
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d110      	bne.n	801ac18 <udp_input_local_match+0xa8>
          return 1;
 801abf6:	2301      	movs	r3, #1
 801abf8:	e00f      	b.n	801ac1a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d009      	beq.n	801ac14 <udp_input_local_match+0xa4>
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d005      	beq.n	801ac14 <udp_input_local_match+0xa4>
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	681a      	ldr	r2, [r3, #0]
 801ac0c:	4b09      	ldr	r3, [pc, #36]	; (801ac34 <udp_input_local_match+0xc4>)
 801ac0e:	695b      	ldr	r3, [r3, #20]
 801ac10:	429a      	cmp	r2, r3
 801ac12:	d101      	bne.n	801ac18 <udp_input_local_match+0xa8>
        return 1;
 801ac14:	2301      	movs	r3, #1
 801ac16:	e000      	b.n	801ac1a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801ac18:	2300      	movs	r3, #0
}
 801ac1a:	4618      	mov	r0, r3
 801ac1c:	3710      	adds	r7, #16
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	bd80      	pop	{r7, pc}
 801ac22:	bf00      	nop
 801ac24:	08025f50 	.word	0x08025f50
 801ac28:	08025f80 	.word	0x08025f80
 801ac2c:	08025fa4 	.word	0x08025fa4
 801ac30:	08025fcc 	.word	0x08025fcc
 801ac34:	2000a9e8 	.word	0x2000a9e8

0801ac38 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801ac38:	b590      	push	{r4, r7, lr}
 801ac3a:	b08d      	sub	sp, #52	; 0x34
 801ac3c:	af02      	add	r7, sp, #8
 801ac3e:	6078      	str	r0, [r7, #4]
 801ac40:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801ac42:	2300      	movs	r3, #0
 801ac44:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d105      	bne.n	801ac58 <udp_input+0x20>
 801ac4c:	4b7c      	ldr	r3, [pc, #496]	; (801ae40 <udp_input+0x208>)
 801ac4e:	22cf      	movs	r2, #207	; 0xcf
 801ac50:	497c      	ldr	r1, [pc, #496]	; (801ae44 <udp_input+0x20c>)
 801ac52:	487d      	ldr	r0, [pc, #500]	; (801ae48 <udp_input+0x210>)
 801ac54:	f004 f952 	bl	801eefc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801ac58:	683b      	ldr	r3, [r7, #0]
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	d105      	bne.n	801ac6a <udp_input+0x32>
 801ac5e:	4b78      	ldr	r3, [pc, #480]	; (801ae40 <udp_input+0x208>)
 801ac60:	22d0      	movs	r2, #208	; 0xd0
 801ac62:	497a      	ldr	r1, [pc, #488]	; (801ae4c <udp_input+0x214>)
 801ac64:	4878      	ldr	r0, [pc, #480]	; (801ae48 <udp_input+0x210>)
 801ac66:	f004 f949 	bl	801eefc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	895b      	ldrh	r3, [r3, #10]
 801ac6e:	2b07      	cmp	r3, #7
 801ac70:	d803      	bhi.n	801ac7a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801ac72:	6878      	ldr	r0, [r7, #4]
 801ac74:	f7f9 fb56 	bl	8014324 <pbuf_free>
    goto end;
 801ac78:	e0de      	b.n	801ae38 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	685b      	ldr	r3, [r3, #4]
 801ac7e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ac80:	4b73      	ldr	r3, [pc, #460]	; (801ae50 <udp_input+0x218>)
 801ac82:	695b      	ldr	r3, [r3, #20]
 801ac84:	4a72      	ldr	r2, [pc, #456]	; (801ae50 <udp_input+0x218>)
 801ac86:	6812      	ldr	r2, [r2, #0]
 801ac88:	4611      	mov	r1, r2
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	f001 ff80 	bl	801cb90 <ip4_addr_isbroadcast_u32>
 801ac90:	4603      	mov	r3, r0
 801ac92:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801ac94:	697b      	ldr	r3, [r7, #20]
 801ac96:	881b      	ldrh	r3, [r3, #0]
 801ac98:	b29b      	uxth	r3, r3
 801ac9a:	4618      	mov	r0, r3
 801ac9c:	f7f7 fffa 	bl	8012c94 <lwip_htons>
 801aca0:	4603      	mov	r3, r0
 801aca2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801aca4:	697b      	ldr	r3, [r7, #20]
 801aca6:	885b      	ldrh	r3, [r3, #2]
 801aca8:	b29b      	uxth	r3, r3
 801acaa:	4618      	mov	r0, r3
 801acac:	f7f7 fff2 	bl	8012c94 <lwip_htons>
 801acb0:	4603      	mov	r3, r0
 801acb2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801acb4:	2300      	movs	r3, #0
 801acb6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801acb8:	2300      	movs	r3, #0
 801acba:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801acbc:	2300      	movs	r3, #0
 801acbe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801acc0:	4b64      	ldr	r3, [pc, #400]	; (801ae54 <udp_input+0x21c>)
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	627b      	str	r3, [r7, #36]	; 0x24
 801acc6:	e054      	b.n	801ad72 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801acc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acca:	8a5b      	ldrh	r3, [r3, #18]
 801accc:	89fa      	ldrh	r2, [r7, #14]
 801acce:	429a      	cmp	r2, r3
 801acd0:	d14a      	bne.n	801ad68 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801acd2:	7cfb      	ldrb	r3, [r7, #19]
 801acd4:	461a      	mov	r2, r3
 801acd6:	6839      	ldr	r1, [r7, #0]
 801acd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801acda:	f7ff ff49 	bl	801ab70 <udp_input_local_match>
 801acde:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d041      	beq.n	801ad68 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ace6:	7c1b      	ldrb	r3, [r3, #16]
 801ace8:	f003 0304 	and.w	r3, r3, #4
 801acec:	2b00      	cmp	r3, #0
 801acee:	d11d      	bne.n	801ad2c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801acf0:	69fb      	ldr	r3, [r7, #28]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d102      	bne.n	801acfc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801acf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acf8:	61fb      	str	r3, [r7, #28]
 801acfa:	e017      	b.n	801ad2c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801acfc:	7cfb      	ldrb	r3, [r7, #19]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d014      	beq.n	801ad2c <udp_input+0xf4>
 801ad02:	4b53      	ldr	r3, [pc, #332]	; (801ae50 <udp_input+0x218>)
 801ad04:	695b      	ldr	r3, [r3, #20]
 801ad06:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad0a:	d10f      	bne.n	801ad2c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801ad0c:	69fb      	ldr	r3, [r7, #28]
 801ad0e:	681a      	ldr	r2, [r3, #0]
 801ad10:	683b      	ldr	r3, [r7, #0]
 801ad12:	3304      	adds	r3, #4
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	429a      	cmp	r2, r3
 801ad18:	d008      	beq.n	801ad2c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801ad1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad1c:	681a      	ldr	r2, [r3, #0]
 801ad1e:	683b      	ldr	r3, [r7, #0]
 801ad20:	3304      	adds	r3, #4
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	429a      	cmp	r2, r3
 801ad26:	d101      	bne.n	801ad2c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad2a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801ad2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad2e:	8a9b      	ldrh	r3, [r3, #20]
 801ad30:	8a3a      	ldrh	r2, [r7, #16]
 801ad32:	429a      	cmp	r2, r3
 801ad34:	d118      	bne.n	801ad68 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad38:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d005      	beq.n	801ad4a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801ad3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad40:	685a      	ldr	r2, [r3, #4]
 801ad42:	4b43      	ldr	r3, [pc, #268]	; (801ae50 <udp_input+0x218>)
 801ad44:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ad46:	429a      	cmp	r2, r3
 801ad48:	d10e      	bne.n	801ad68 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801ad4a:	6a3b      	ldr	r3, [r7, #32]
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d014      	beq.n	801ad7a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad52:	68da      	ldr	r2, [r3, #12]
 801ad54:	6a3b      	ldr	r3, [r7, #32]
 801ad56:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801ad58:	4b3e      	ldr	r3, [pc, #248]	; (801ae54 <udp_input+0x21c>)
 801ad5a:	681a      	ldr	r2, [r3, #0]
 801ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad5e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801ad60:	4a3c      	ldr	r2, [pc, #240]	; (801ae54 <udp_input+0x21c>)
 801ad62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad64:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801ad66:	e008      	b.n	801ad7a <udp_input+0x142>
      }
    }

    prev = pcb;
 801ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad6a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad6e:	68db      	ldr	r3, [r3, #12]
 801ad70:	627b      	str	r3, [r7, #36]	; 0x24
 801ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d1a7      	bne.n	801acc8 <udp_input+0x90>
 801ad78:	e000      	b.n	801ad7c <udp_input+0x144>
        break;
 801ad7a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801ad7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d101      	bne.n	801ad86 <udp_input+0x14e>
    pcb = uncon_pcb;
 801ad82:	69fb      	ldr	r3, [r7, #28]
 801ad84:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d002      	beq.n	801ad92 <udp_input+0x15a>
    for_us = 1;
 801ad8c:	2301      	movs	r3, #1
 801ad8e:	76fb      	strb	r3, [r7, #27]
 801ad90:	e00a      	b.n	801ada8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801ad92:	683b      	ldr	r3, [r7, #0]
 801ad94:	3304      	adds	r3, #4
 801ad96:	681a      	ldr	r2, [r3, #0]
 801ad98:	4b2d      	ldr	r3, [pc, #180]	; (801ae50 <udp_input+0x218>)
 801ad9a:	695b      	ldr	r3, [r3, #20]
 801ad9c:	429a      	cmp	r2, r3
 801ad9e:	bf0c      	ite	eq
 801ada0:	2301      	moveq	r3, #1
 801ada2:	2300      	movne	r3, #0
 801ada4:	b2db      	uxtb	r3, r3
 801ada6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801ada8:	7efb      	ldrb	r3, [r7, #27]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d041      	beq.n	801ae32 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801adae:	2108      	movs	r1, #8
 801adb0:	6878      	ldr	r0, [r7, #4]
 801adb2:	f7f9 fa31 	bl	8014218 <pbuf_remove_header>
 801adb6:	4603      	mov	r3, r0
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d00a      	beq.n	801add2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801adbc:	4b20      	ldr	r3, [pc, #128]	; (801ae40 <udp_input+0x208>)
 801adbe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801adc2:	4925      	ldr	r1, [pc, #148]	; (801ae58 <udp_input+0x220>)
 801adc4:	4820      	ldr	r0, [pc, #128]	; (801ae48 <udp_input+0x210>)
 801adc6:	f004 f899 	bl	801eefc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801adca:	6878      	ldr	r0, [r7, #4]
 801adcc:	f7f9 faaa 	bl	8014324 <pbuf_free>
      goto end;
 801add0:	e032      	b.n	801ae38 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801add4:	2b00      	cmp	r3, #0
 801add6:	d012      	beq.n	801adfe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adda:	699b      	ldr	r3, [r3, #24]
 801addc:	2b00      	cmp	r3, #0
 801adde:	d00a      	beq.n	801adf6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ade2:	699c      	ldr	r4, [r3, #24]
 801ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ade6:	69d8      	ldr	r0, [r3, #28]
 801ade8:	8a3b      	ldrh	r3, [r7, #16]
 801adea:	9300      	str	r3, [sp, #0]
 801adec:	4b1b      	ldr	r3, [pc, #108]	; (801ae5c <udp_input+0x224>)
 801adee:	687a      	ldr	r2, [r7, #4]
 801adf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801adf2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801adf4:	e021      	b.n	801ae3a <udp_input+0x202>
        pbuf_free(p);
 801adf6:	6878      	ldr	r0, [r7, #4]
 801adf8:	f7f9 fa94 	bl	8014324 <pbuf_free>
        goto end;
 801adfc:	e01c      	b.n	801ae38 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801adfe:	7cfb      	ldrb	r3, [r7, #19]
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d112      	bne.n	801ae2a <udp_input+0x1f2>
 801ae04:	4b12      	ldr	r3, [pc, #72]	; (801ae50 <udp_input+0x218>)
 801ae06:	695b      	ldr	r3, [r3, #20]
 801ae08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ae0c:	2be0      	cmp	r3, #224	; 0xe0
 801ae0e:	d00c      	beq.n	801ae2a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ae10:	4b0f      	ldr	r3, [pc, #60]	; (801ae50 <udp_input+0x218>)
 801ae12:	899b      	ldrh	r3, [r3, #12]
 801ae14:	3308      	adds	r3, #8
 801ae16:	b29b      	uxth	r3, r3
 801ae18:	b21b      	sxth	r3, r3
 801ae1a:	4619      	mov	r1, r3
 801ae1c:	6878      	ldr	r0, [r7, #4]
 801ae1e:	f7f9 fa6e 	bl	80142fe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ae22:	2103      	movs	r1, #3
 801ae24:	6878      	ldr	r0, [r7, #4]
 801ae26:	f001 fb93 	bl	801c550 <icmp_dest_unreach>
      pbuf_free(p);
 801ae2a:	6878      	ldr	r0, [r7, #4]
 801ae2c:	f7f9 fa7a 	bl	8014324 <pbuf_free>
  return;
 801ae30:	e003      	b.n	801ae3a <udp_input+0x202>
    pbuf_free(p);
 801ae32:	6878      	ldr	r0, [r7, #4]
 801ae34:	f7f9 fa76 	bl	8014324 <pbuf_free>
  return;
 801ae38:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ae3a:	372c      	adds	r7, #44	; 0x2c
 801ae3c:	46bd      	mov	sp, r7
 801ae3e:	bd90      	pop	{r4, r7, pc}
 801ae40:	08025f50 	.word	0x08025f50
 801ae44:	08025ff4 	.word	0x08025ff4
 801ae48:	08025fa4 	.word	0x08025fa4
 801ae4c:	0802600c 	.word	0x0802600c
 801ae50:	2000a9e8 	.word	0x2000a9e8
 801ae54:	2000e114 	.word	0x2000e114
 801ae58:	08026028 	.word	0x08026028
 801ae5c:	2000a9f8 	.word	0x2000a9f8

0801ae60 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801ae60:	b580      	push	{r7, lr}
 801ae62:	b082      	sub	sp, #8
 801ae64:	af00      	add	r7, sp, #0
 801ae66:	6078      	str	r0, [r7, #4]
 801ae68:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d109      	bne.n	801ae84 <udp_send+0x24>
 801ae70:	4b11      	ldr	r3, [pc, #68]	; (801aeb8 <udp_send+0x58>)
 801ae72:	f240 12d5 	movw	r2, #469	; 0x1d5
 801ae76:	4911      	ldr	r1, [pc, #68]	; (801aebc <udp_send+0x5c>)
 801ae78:	4811      	ldr	r0, [pc, #68]	; (801aec0 <udp_send+0x60>)
 801ae7a:	f004 f83f 	bl	801eefc <iprintf>
 801ae7e:	f06f 030f 	mvn.w	r3, #15
 801ae82:	e015      	b.n	801aeb0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801ae84:	683b      	ldr	r3, [r7, #0]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d109      	bne.n	801ae9e <udp_send+0x3e>
 801ae8a:	4b0b      	ldr	r3, [pc, #44]	; (801aeb8 <udp_send+0x58>)
 801ae8c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801ae90:	490c      	ldr	r1, [pc, #48]	; (801aec4 <udp_send+0x64>)
 801ae92:	480b      	ldr	r0, [pc, #44]	; (801aec0 <udp_send+0x60>)
 801ae94:	f004 f832 	bl	801eefc <iprintf>
 801ae98:	f06f 030f 	mvn.w	r3, #15
 801ae9c:	e008      	b.n	801aeb0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	1d1a      	adds	r2, r3, #4
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	8a9b      	ldrh	r3, [r3, #20]
 801aea6:	6839      	ldr	r1, [r7, #0]
 801aea8:	6878      	ldr	r0, [r7, #4]
 801aeaa:	f000 f80d 	bl	801aec8 <udp_sendto>
 801aeae:	4603      	mov	r3, r0
}
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	3708      	adds	r7, #8
 801aeb4:	46bd      	mov	sp, r7
 801aeb6:	bd80      	pop	{r7, pc}
 801aeb8:	08025f50 	.word	0x08025f50
 801aebc:	08026044 	.word	0x08026044
 801aec0:	08025fa4 	.word	0x08025fa4
 801aec4:	0802605c 	.word	0x0802605c

0801aec8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801aec8:	b580      	push	{r7, lr}
 801aeca:	b088      	sub	sp, #32
 801aecc:	af02      	add	r7, sp, #8
 801aece:	60f8      	str	r0, [r7, #12]
 801aed0:	60b9      	str	r1, [r7, #8]
 801aed2:	607a      	str	r2, [r7, #4]
 801aed4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d109      	bne.n	801aef0 <udp_sendto+0x28>
 801aedc:	4b23      	ldr	r3, [pc, #140]	; (801af6c <udp_sendto+0xa4>)
 801aede:	f44f 7206 	mov.w	r2, #536	; 0x218
 801aee2:	4923      	ldr	r1, [pc, #140]	; (801af70 <udp_sendto+0xa8>)
 801aee4:	4823      	ldr	r0, [pc, #140]	; (801af74 <udp_sendto+0xac>)
 801aee6:	f004 f809 	bl	801eefc <iprintf>
 801aeea:	f06f 030f 	mvn.w	r3, #15
 801aeee:	e038      	b.n	801af62 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801aef0:	68bb      	ldr	r3, [r7, #8]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d109      	bne.n	801af0a <udp_sendto+0x42>
 801aef6:	4b1d      	ldr	r3, [pc, #116]	; (801af6c <udp_sendto+0xa4>)
 801aef8:	f240 2219 	movw	r2, #537	; 0x219
 801aefc:	491e      	ldr	r1, [pc, #120]	; (801af78 <udp_sendto+0xb0>)
 801aefe:	481d      	ldr	r0, [pc, #116]	; (801af74 <udp_sendto+0xac>)
 801af00:	f003 fffc 	bl	801eefc <iprintf>
 801af04:	f06f 030f 	mvn.w	r3, #15
 801af08:	e02b      	b.n	801af62 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d109      	bne.n	801af24 <udp_sendto+0x5c>
 801af10:	4b16      	ldr	r3, [pc, #88]	; (801af6c <udp_sendto+0xa4>)
 801af12:	f240 221a 	movw	r2, #538	; 0x21a
 801af16:	4919      	ldr	r1, [pc, #100]	; (801af7c <udp_sendto+0xb4>)
 801af18:	4816      	ldr	r0, [pc, #88]	; (801af74 <udp_sendto+0xac>)
 801af1a:	f003 ffef 	bl	801eefc <iprintf>
 801af1e:	f06f 030f 	mvn.w	r3, #15
 801af22:	e01e      	b.n	801af62 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	7a1b      	ldrb	r3, [r3, #8]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d006      	beq.n	801af3a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801af2c:	68fb      	ldr	r3, [r7, #12]
 801af2e:	7a1b      	ldrb	r3, [r3, #8]
 801af30:	4618      	mov	r0, r3
 801af32:	f7f8 fe69 	bl	8013c08 <netif_get_by_index>
 801af36:	6178      	str	r0, [r7, #20]
 801af38:	e003      	b.n	801af42 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801af3a:	6878      	ldr	r0, [r7, #4]
 801af3c:	f001 fb92 	bl	801c664 <ip4_route>
 801af40:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801af42:	697b      	ldr	r3, [r7, #20]
 801af44:	2b00      	cmp	r3, #0
 801af46:	d102      	bne.n	801af4e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801af48:	f06f 0303 	mvn.w	r3, #3
 801af4c:	e009      	b.n	801af62 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801af4e:	887a      	ldrh	r2, [r7, #2]
 801af50:	697b      	ldr	r3, [r7, #20]
 801af52:	9300      	str	r3, [sp, #0]
 801af54:	4613      	mov	r3, r2
 801af56:	687a      	ldr	r2, [r7, #4]
 801af58:	68b9      	ldr	r1, [r7, #8]
 801af5a:	68f8      	ldr	r0, [r7, #12]
 801af5c:	f000 f810 	bl	801af80 <udp_sendto_if>
 801af60:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801af62:	4618      	mov	r0, r3
 801af64:	3718      	adds	r7, #24
 801af66:	46bd      	mov	sp, r7
 801af68:	bd80      	pop	{r7, pc}
 801af6a:	bf00      	nop
 801af6c:	08025f50 	.word	0x08025f50
 801af70:	08026074 	.word	0x08026074
 801af74:	08025fa4 	.word	0x08025fa4
 801af78:	0802608c 	.word	0x0802608c
 801af7c:	080260a8 	.word	0x080260a8

0801af80 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801af80:	b580      	push	{r7, lr}
 801af82:	b088      	sub	sp, #32
 801af84:	af02      	add	r7, sp, #8
 801af86:	60f8      	str	r0, [r7, #12]
 801af88:	60b9      	str	r1, [r7, #8]
 801af8a:	607a      	str	r2, [r7, #4]
 801af8c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	2b00      	cmp	r3, #0
 801af92:	d109      	bne.n	801afa8 <udp_sendto_if+0x28>
 801af94:	4b2e      	ldr	r3, [pc, #184]	; (801b050 <udp_sendto_if+0xd0>)
 801af96:	f44f 7220 	mov.w	r2, #640	; 0x280
 801af9a:	492e      	ldr	r1, [pc, #184]	; (801b054 <udp_sendto_if+0xd4>)
 801af9c:	482e      	ldr	r0, [pc, #184]	; (801b058 <udp_sendto_if+0xd8>)
 801af9e:	f003 ffad 	bl	801eefc <iprintf>
 801afa2:	f06f 030f 	mvn.w	r3, #15
 801afa6:	e04f      	b.n	801b048 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801afa8:	68bb      	ldr	r3, [r7, #8]
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d109      	bne.n	801afc2 <udp_sendto_if+0x42>
 801afae:	4b28      	ldr	r3, [pc, #160]	; (801b050 <udp_sendto_if+0xd0>)
 801afb0:	f240 2281 	movw	r2, #641	; 0x281
 801afb4:	4929      	ldr	r1, [pc, #164]	; (801b05c <udp_sendto_if+0xdc>)
 801afb6:	4828      	ldr	r0, [pc, #160]	; (801b058 <udp_sendto_if+0xd8>)
 801afb8:	f003 ffa0 	bl	801eefc <iprintf>
 801afbc:	f06f 030f 	mvn.w	r3, #15
 801afc0:	e042      	b.n	801b048 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d109      	bne.n	801afdc <udp_sendto_if+0x5c>
 801afc8:	4b21      	ldr	r3, [pc, #132]	; (801b050 <udp_sendto_if+0xd0>)
 801afca:	f240 2282 	movw	r2, #642	; 0x282
 801afce:	4924      	ldr	r1, [pc, #144]	; (801b060 <udp_sendto_if+0xe0>)
 801afd0:	4821      	ldr	r0, [pc, #132]	; (801b058 <udp_sendto_if+0xd8>)
 801afd2:	f003 ff93 	bl	801eefc <iprintf>
 801afd6:	f06f 030f 	mvn.w	r3, #15
 801afda:	e035      	b.n	801b048 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801afdc:	6a3b      	ldr	r3, [r7, #32]
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d109      	bne.n	801aff6 <udp_sendto_if+0x76>
 801afe2:	4b1b      	ldr	r3, [pc, #108]	; (801b050 <udp_sendto_if+0xd0>)
 801afe4:	f240 2283 	movw	r2, #643	; 0x283
 801afe8:	491e      	ldr	r1, [pc, #120]	; (801b064 <udp_sendto_if+0xe4>)
 801afea:	481b      	ldr	r0, [pc, #108]	; (801b058 <udp_sendto_if+0xd8>)
 801afec:	f003 ff86 	bl	801eefc <iprintf>
 801aff0:	f06f 030f 	mvn.w	r3, #15
 801aff4:	e028      	b.n	801b048 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801aff6:	68fb      	ldr	r3, [r7, #12]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d009      	beq.n	801b010 <udp_sendto_if+0x90>
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	2b00      	cmp	r3, #0
 801b002:	d005      	beq.n	801b010 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b00c:	2be0      	cmp	r3, #224	; 0xe0
 801b00e:	d103      	bne.n	801b018 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801b010:	6a3b      	ldr	r3, [r7, #32]
 801b012:	3304      	adds	r3, #4
 801b014:	617b      	str	r3, [r7, #20]
 801b016:	e00b      	b.n	801b030 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801b018:	68fb      	ldr	r3, [r7, #12]
 801b01a:	681a      	ldr	r2, [r3, #0]
 801b01c:	6a3b      	ldr	r3, [r7, #32]
 801b01e:	3304      	adds	r3, #4
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	429a      	cmp	r2, r3
 801b024:	d002      	beq.n	801b02c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801b026:	f06f 0303 	mvn.w	r3, #3
 801b02a:	e00d      	b.n	801b048 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801b030:	887a      	ldrh	r2, [r7, #2]
 801b032:	697b      	ldr	r3, [r7, #20]
 801b034:	9301      	str	r3, [sp, #4]
 801b036:	6a3b      	ldr	r3, [r7, #32]
 801b038:	9300      	str	r3, [sp, #0]
 801b03a:	4613      	mov	r3, r2
 801b03c:	687a      	ldr	r2, [r7, #4]
 801b03e:	68b9      	ldr	r1, [r7, #8]
 801b040:	68f8      	ldr	r0, [r7, #12]
 801b042:	f000 f811 	bl	801b068 <udp_sendto_if_src>
 801b046:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b048:	4618      	mov	r0, r3
 801b04a:	3718      	adds	r7, #24
 801b04c:	46bd      	mov	sp, r7
 801b04e:	bd80      	pop	{r7, pc}
 801b050:	08025f50 	.word	0x08025f50
 801b054:	080260c4 	.word	0x080260c4
 801b058:	08025fa4 	.word	0x08025fa4
 801b05c:	080260e0 	.word	0x080260e0
 801b060:	080260fc 	.word	0x080260fc
 801b064:	0802611c 	.word	0x0802611c

0801b068 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801b068:	b580      	push	{r7, lr}
 801b06a:	b08c      	sub	sp, #48	; 0x30
 801b06c:	af04      	add	r7, sp, #16
 801b06e:	60f8      	str	r0, [r7, #12]
 801b070:	60b9      	str	r1, [r7, #8]
 801b072:	607a      	str	r2, [r7, #4]
 801b074:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801b076:	68fb      	ldr	r3, [r7, #12]
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d109      	bne.n	801b090 <udp_sendto_if_src+0x28>
 801b07c:	4b65      	ldr	r3, [pc, #404]	; (801b214 <udp_sendto_if_src+0x1ac>)
 801b07e:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b082:	4965      	ldr	r1, [pc, #404]	; (801b218 <udp_sendto_if_src+0x1b0>)
 801b084:	4865      	ldr	r0, [pc, #404]	; (801b21c <udp_sendto_if_src+0x1b4>)
 801b086:	f003 ff39 	bl	801eefc <iprintf>
 801b08a:	f06f 030f 	mvn.w	r3, #15
 801b08e:	e0bc      	b.n	801b20a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b090:	68bb      	ldr	r3, [r7, #8]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d109      	bne.n	801b0aa <udp_sendto_if_src+0x42>
 801b096:	4b5f      	ldr	r3, [pc, #380]	; (801b214 <udp_sendto_if_src+0x1ac>)
 801b098:	f240 22d2 	movw	r2, #722	; 0x2d2
 801b09c:	4960      	ldr	r1, [pc, #384]	; (801b220 <udp_sendto_if_src+0x1b8>)
 801b09e:	485f      	ldr	r0, [pc, #380]	; (801b21c <udp_sendto_if_src+0x1b4>)
 801b0a0:	f003 ff2c 	bl	801eefc <iprintf>
 801b0a4:	f06f 030f 	mvn.w	r3, #15
 801b0a8:	e0af      	b.n	801b20a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d109      	bne.n	801b0c4 <udp_sendto_if_src+0x5c>
 801b0b0:	4b58      	ldr	r3, [pc, #352]	; (801b214 <udp_sendto_if_src+0x1ac>)
 801b0b2:	f240 22d3 	movw	r2, #723	; 0x2d3
 801b0b6:	495b      	ldr	r1, [pc, #364]	; (801b224 <udp_sendto_if_src+0x1bc>)
 801b0b8:	4858      	ldr	r0, [pc, #352]	; (801b21c <udp_sendto_if_src+0x1b4>)
 801b0ba:	f003 ff1f 	bl	801eefc <iprintf>
 801b0be:	f06f 030f 	mvn.w	r3, #15
 801b0c2:	e0a2      	b.n	801b20a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d109      	bne.n	801b0de <udp_sendto_if_src+0x76>
 801b0ca:	4b52      	ldr	r3, [pc, #328]	; (801b214 <udp_sendto_if_src+0x1ac>)
 801b0cc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801b0d0:	4955      	ldr	r1, [pc, #340]	; (801b228 <udp_sendto_if_src+0x1c0>)
 801b0d2:	4852      	ldr	r0, [pc, #328]	; (801b21c <udp_sendto_if_src+0x1b4>)
 801b0d4:	f003 ff12 	bl	801eefc <iprintf>
 801b0d8:	f06f 030f 	mvn.w	r3, #15
 801b0dc:	e095      	b.n	801b20a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d109      	bne.n	801b0f8 <udp_sendto_if_src+0x90>
 801b0e4:	4b4b      	ldr	r3, [pc, #300]	; (801b214 <udp_sendto_if_src+0x1ac>)
 801b0e6:	f240 22d5 	movw	r2, #725	; 0x2d5
 801b0ea:	4950      	ldr	r1, [pc, #320]	; (801b22c <udp_sendto_if_src+0x1c4>)
 801b0ec:	484b      	ldr	r0, [pc, #300]	; (801b21c <udp_sendto_if_src+0x1b4>)
 801b0ee:	f003 ff05 	bl	801eefc <iprintf>
 801b0f2:	f06f 030f 	mvn.w	r3, #15
 801b0f6:	e088      	b.n	801b20a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	8a5b      	ldrh	r3, [r3, #18]
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d10f      	bne.n	801b120 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b100:	68f9      	ldr	r1, [r7, #12]
 801b102:	68fb      	ldr	r3, [r7, #12]
 801b104:	8a5b      	ldrh	r3, [r3, #18]
 801b106:	461a      	mov	r2, r3
 801b108:	68f8      	ldr	r0, [r7, #12]
 801b10a:	f000 f893 	bl	801b234 <udp_bind>
 801b10e:	4603      	mov	r3, r0
 801b110:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801b112:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b116:	2b00      	cmp	r3, #0
 801b118:	d002      	beq.n	801b120 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801b11a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b11e:	e074      	b.n	801b20a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b120:	68bb      	ldr	r3, [r7, #8]
 801b122:	891b      	ldrh	r3, [r3, #8]
 801b124:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801b128:	4293      	cmp	r3, r2
 801b12a:	d902      	bls.n	801b132 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801b12c:	f04f 33ff 	mov.w	r3, #4294967295
 801b130:	e06b      	b.n	801b20a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b132:	2108      	movs	r1, #8
 801b134:	68b8      	ldr	r0, [r7, #8]
 801b136:	f7f9 f85f 	bl	80141f8 <pbuf_add_header>
 801b13a:	4603      	mov	r3, r0
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d015      	beq.n	801b16c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b140:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b144:	2108      	movs	r1, #8
 801b146:	2022      	movs	r0, #34	; 0x22
 801b148:	f7f8 fe08 	bl	8013d5c <pbuf_alloc>
 801b14c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801b14e:	69fb      	ldr	r3, [r7, #28]
 801b150:	2b00      	cmp	r3, #0
 801b152:	d102      	bne.n	801b15a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801b154:	f04f 33ff 	mov.w	r3, #4294967295
 801b158:	e057      	b.n	801b20a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801b15a:	68bb      	ldr	r3, [r7, #8]
 801b15c:	891b      	ldrh	r3, [r3, #8]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d006      	beq.n	801b170 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801b162:	68b9      	ldr	r1, [r7, #8]
 801b164:	69f8      	ldr	r0, [r7, #28]
 801b166:	f7f9 fa01 	bl	801456c <pbuf_chain>
 801b16a:	e001      	b.n	801b170 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801b16c:	68bb      	ldr	r3, [r7, #8]
 801b16e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b170:	69fb      	ldr	r3, [r7, #28]
 801b172:	895b      	ldrh	r3, [r3, #10]
 801b174:	2b07      	cmp	r3, #7
 801b176:	d806      	bhi.n	801b186 <udp_sendto_if_src+0x11e>
 801b178:	4b26      	ldr	r3, [pc, #152]	; (801b214 <udp_sendto_if_src+0x1ac>)
 801b17a:	f240 320d 	movw	r2, #781	; 0x30d
 801b17e:	492c      	ldr	r1, [pc, #176]	; (801b230 <udp_sendto_if_src+0x1c8>)
 801b180:	4826      	ldr	r0, [pc, #152]	; (801b21c <udp_sendto_if_src+0x1b4>)
 801b182:	f003 febb 	bl	801eefc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801b186:	69fb      	ldr	r3, [r7, #28]
 801b188:	685b      	ldr	r3, [r3, #4]
 801b18a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	8a5b      	ldrh	r3, [r3, #18]
 801b190:	4618      	mov	r0, r3
 801b192:	f7f7 fd7f 	bl	8012c94 <lwip_htons>
 801b196:	4603      	mov	r3, r0
 801b198:	461a      	mov	r2, r3
 801b19a:	697b      	ldr	r3, [r7, #20]
 801b19c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b19e:	887b      	ldrh	r3, [r7, #2]
 801b1a0:	4618      	mov	r0, r3
 801b1a2:	f7f7 fd77 	bl	8012c94 <lwip_htons>
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	461a      	mov	r2, r3
 801b1aa:	697b      	ldr	r3, [r7, #20]
 801b1ac:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801b1ae:	697b      	ldr	r3, [r7, #20]
 801b1b0:	2200      	movs	r2, #0
 801b1b2:	719a      	strb	r2, [r3, #6]
 801b1b4:	2200      	movs	r2, #0
 801b1b6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801b1b8:	69fb      	ldr	r3, [r7, #28]
 801b1ba:	891b      	ldrh	r3, [r3, #8]
 801b1bc:	4618      	mov	r0, r3
 801b1be:	f7f7 fd69 	bl	8012c94 <lwip_htons>
 801b1c2:	4603      	mov	r3, r0
 801b1c4:	461a      	mov	r2, r3
 801b1c6:	697b      	ldr	r3, [r7, #20]
 801b1c8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801b1ca:	2311      	movs	r3, #17
 801b1cc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	7adb      	ldrb	r3, [r3, #11]
 801b1d2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	7a9b      	ldrb	r3, [r3, #10]
 801b1d8:	7cb9      	ldrb	r1, [r7, #18]
 801b1da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b1dc:	9202      	str	r2, [sp, #8]
 801b1de:	7cfa      	ldrb	r2, [r7, #19]
 801b1e0:	9201      	str	r2, [sp, #4]
 801b1e2:	9300      	str	r3, [sp, #0]
 801b1e4:	460b      	mov	r3, r1
 801b1e6:	687a      	ldr	r2, [r7, #4]
 801b1e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b1ea:	69f8      	ldr	r0, [r7, #28]
 801b1ec:	f001 fc22 	bl	801ca34 <ip4_output_if_src>
 801b1f0:	4603      	mov	r3, r0
 801b1f2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801b1f4:	69fa      	ldr	r2, [r7, #28]
 801b1f6:	68bb      	ldr	r3, [r7, #8]
 801b1f8:	429a      	cmp	r2, r3
 801b1fa:	d004      	beq.n	801b206 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801b1fc:	69f8      	ldr	r0, [r7, #28]
 801b1fe:	f7f9 f891 	bl	8014324 <pbuf_free>
    q = NULL;
 801b202:	2300      	movs	r3, #0
 801b204:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801b206:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801b20a:	4618      	mov	r0, r3
 801b20c:	3720      	adds	r7, #32
 801b20e:	46bd      	mov	sp, r7
 801b210:	bd80      	pop	{r7, pc}
 801b212:	bf00      	nop
 801b214:	08025f50 	.word	0x08025f50
 801b218:	0802613c 	.word	0x0802613c
 801b21c:	08025fa4 	.word	0x08025fa4
 801b220:	0802615c 	.word	0x0802615c
 801b224:	0802617c 	.word	0x0802617c
 801b228:	080261a0 	.word	0x080261a0
 801b22c:	080261c4 	.word	0x080261c4
 801b230:	080261e8 	.word	0x080261e8

0801b234 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b234:	b580      	push	{r7, lr}
 801b236:	b086      	sub	sp, #24
 801b238:	af00      	add	r7, sp, #0
 801b23a:	60f8      	str	r0, [r7, #12]
 801b23c:	60b9      	str	r1, [r7, #8]
 801b23e:	4613      	mov	r3, r2
 801b240:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b242:	68bb      	ldr	r3, [r7, #8]
 801b244:	2b00      	cmp	r3, #0
 801b246:	d101      	bne.n	801b24c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b248:	4b39      	ldr	r3, [pc, #228]	; (801b330 <udp_bind+0xfc>)
 801b24a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d109      	bne.n	801b266 <udp_bind+0x32>
 801b252:	4b38      	ldr	r3, [pc, #224]	; (801b334 <udp_bind+0x100>)
 801b254:	f240 32b7 	movw	r2, #951	; 0x3b7
 801b258:	4937      	ldr	r1, [pc, #220]	; (801b338 <udp_bind+0x104>)
 801b25a:	4838      	ldr	r0, [pc, #224]	; (801b33c <udp_bind+0x108>)
 801b25c:	f003 fe4e 	bl	801eefc <iprintf>
 801b260:	f06f 030f 	mvn.w	r3, #15
 801b264:	e060      	b.n	801b328 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b266:	2300      	movs	r3, #0
 801b268:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b26a:	4b35      	ldr	r3, [pc, #212]	; (801b340 <udp_bind+0x10c>)
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	617b      	str	r3, [r7, #20]
 801b270:	e009      	b.n	801b286 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b272:	68fa      	ldr	r2, [r7, #12]
 801b274:	697b      	ldr	r3, [r7, #20]
 801b276:	429a      	cmp	r2, r3
 801b278:	d102      	bne.n	801b280 <udp_bind+0x4c>
      rebind = 1;
 801b27a:	2301      	movs	r3, #1
 801b27c:	74fb      	strb	r3, [r7, #19]
      break;
 801b27e:	e005      	b.n	801b28c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b280:	697b      	ldr	r3, [r7, #20]
 801b282:	68db      	ldr	r3, [r3, #12]
 801b284:	617b      	str	r3, [r7, #20]
 801b286:	697b      	ldr	r3, [r7, #20]
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d1f2      	bne.n	801b272 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b28c:	88fb      	ldrh	r3, [r7, #6]
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d109      	bne.n	801b2a6 <udp_bind+0x72>
    port = udp_new_port();
 801b292:	f7ff fc35 	bl	801ab00 <udp_new_port>
 801b296:	4603      	mov	r3, r0
 801b298:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b29a:	88fb      	ldrh	r3, [r7, #6]
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d12c      	bne.n	801b2fa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b2a0:	f06f 0307 	mvn.w	r3, #7
 801b2a4:	e040      	b.n	801b328 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b2a6:	4b26      	ldr	r3, [pc, #152]	; (801b340 <udp_bind+0x10c>)
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	617b      	str	r3, [r7, #20]
 801b2ac:	e022      	b.n	801b2f4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801b2ae:	68fa      	ldr	r2, [r7, #12]
 801b2b0:	697b      	ldr	r3, [r7, #20]
 801b2b2:	429a      	cmp	r2, r3
 801b2b4:	d01b      	beq.n	801b2ee <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b2b6:	697b      	ldr	r3, [r7, #20]
 801b2b8:	8a5b      	ldrh	r3, [r3, #18]
 801b2ba:	88fa      	ldrh	r2, [r7, #6]
 801b2bc:	429a      	cmp	r2, r3
 801b2be:	d116      	bne.n	801b2ee <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b2c0:	697b      	ldr	r3, [r7, #20]
 801b2c2:	681a      	ldr	r2, [r3, #0]
 801b2c4:	68bb      	ldr	r3, [r7, #8]
 801b2c6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b2c8:	429a      	cmp	r2, r3
 801b2ca:	d00d      	beq.n	801b2e8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b2cc:	68bb      	ldr	r3, [r7, #8]
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d00a      	beq.n	801b2e8 <udp_bind+0xb4>
 801b2d2:	68bb      	ldr	r3, [r7, #8]
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d006      	beq.n	801b2e8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b2da:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d003      	beq.n	801b2e8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b2e0:	697b      	ldr	r3, [r7, #20]
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d102      	bne.n	801b2ee <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b2e8:	f06f 0307 	mvn.w	r3, #7
 801b2ec:	e01c      	b.n	801b328 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b2ee:	697b      	ldr	r3, [r7, #20]
 801b2f0:	68db      	ldr	r3, [r3, #12]
 801b2f2:	617b      	str	r3, [r7, #20]
 801b2f4:	697b      	ldr	r3, [r7, #20]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d1d9      	bne.n	801b2ae <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b2fa:	68bb      	ldr	r3, [r7, #8]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d002      	beq.n	801b306 <udp_bind+0xd2>
 801b300:	68bb      	ldr	r3, [r7, #8]
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	e000      	b.n	801b308 <udp_bind+0xd4>
 801b306:	2300      	movs	r3, #0
 801b308:	68fa      	ldr	r2, [r7, #12]
 801b30a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	88fa      	ldrh	r2, [r7, #6]
 801b310:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b312:	7cfb      	ldrb	r3, [r7, #19]
 801b314:	2b00      	cmp	r3, #0
 801b316:	d106      	bne.n	801b326 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b318:	4b09      	ldr	r3, [pc, #36]	; (801b340 <udp_bind+0x10c>)
 801b31a:	681a      	ldr	r2, [r3, #0]
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b320:	4a07      	ldr	r2, [pc, #28]	; (801b340 <udp_bind+0x10c>)
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b326:	2300      	movs	r3, #0
}
 801b328:	4618      	mov	r0, r3
 801b32a:	3718      	adds	r7, #24
 801b32c:	46bd      	mov	sp, r7
 801b32e:	bd80      	pop	{r7, pc}
 801b330:	08026c24 	.word	0x08026c24
 801b334:	08025f50 	.word	0x08025f50
 801b338:	08026218 	.word	0x08026218
 801b33c:	08025fa4 	.word	0x08025fa4
 801b340:	2000e114 	.word	0x2000e114

0801b344 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b344:	b580      	push	{r7, lr}
 801b346:	b084      	sub	sp, #16
 801b348:	af00      	add	r7, sp, #0
 801b34a:	60f8      	str	r0, [r7, #12]
 801b34c:	60b9      	str	r1, [r7, #8]
 801b34e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b350:	68fb      	ldr	r3, [r7, #12]
 801b352:	2b00      	cmp	r3, #0
 801b354:	d107      	bne.n	801b366 <udp_recv+0x22>
 801b356:	4b08      	ldr	r3, [pc, #32]	; (801b378 <udp_recv+0x34>)
 801b358:	f240 428a 	movw	r2, #1162	; 0x48a
 801b35c:	4907      	ldr	r1, [pc, #28]	; (801b37c <udp_recv+0x38>)
 801b35e:	4808      	ldr	r0, [pc, #32]	; (801b380 <udp_recv+0x3c>)
 801b360:	f003 fdcc 	bl	801eefc <iprintf>
 801b364:	e005      	b.n	801b372 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b366:	68fb      	ldr	r3, [r7, #12]
 801b368:	68ba      	ldr	r2, [r7, #8]
 801b36a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801b36c:	68fb      	ldr	r3, [r7, #12]
 801b36e:	687a      	ldr	r2, [r7, #4]
 801b370:	61da      	str	r2, [r3, #28]
}
 801b372:	3710      	adds	r7, #16
 801b374:	46bd      	mov	sp, r7
 801b376:	bd80      	pop	{r7, pc}
 801b378:	08025f50 	.word	0x08025f50
 801b37c:	08026284 	.word	0x08026284
 801b380:	08025fa4 	.word	0x08025fa4

0801b384 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801b384:	b580      	push	{r7, lr}
 801b386:	b084      	sub	sp, #16
 801b388:	af00      	add	r7, sp, #0
 801b38a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	2b00      	cmp	r3, #0
 801b390:	d107      	bne.n	801b3a2 <udp_remove+0x1e>
 801b392:	4b19      	ldr	r3, [pc, #100]	; (801b3f8 <udp_remove+0x74>)
 801b394:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801b398:	4918      	ldr	r1, [pc, #96]	; (801b3fc <udp_remove+0x78>)
 801b39a:	4819      	ldr	r0, [pc, #100]	; (801b400 <udp_remove+0x7c>)
 801b39c:	f003 fdae 	bl	801eefc <iprintf>
 801b3a0:	e026      	b.n	801b3f0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b3a2:	4b18      	ldr	r3, [pc, #96]	; (801b404 <udp_remove+0x80>)
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	687a      	ldr	r2, [r7, #4]
 801b3a8:	429a      	cmp	r2, r3
 801b3aa:	d105      	bne.n	801b3b8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801b3ac:	4b15      	ldr	r3, [pc, #84]	; (801b404 <udp_remove+0x80>)
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	68db      	ldr	r3, [r3, #12]
 801b3b2:	4a14      	ldr	r2, [pc, #80]	; (801b404 <udp_remove+0x80>)
 801b3b4:	6013      	str	r3, [r2, #0]
 801b3b6:	e017      	b.n	801b3e8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b3b8:	4b12      	ldr	r3, [pc, #72]	; (801b404 <udp_remove+0x80>)
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	60fb      	str	r3, [r7, #12]
 801b3be:	e010      	b.n	801b3e2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	68db      	ldr	r3, [r3, #12]
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d009      	beq.n	801b3dc <udp_remove+0x58>
 801b3c8:	68fb      	ldr	r3, [r7, #12]
 801b3ca:	68db      	ldr	r3, [r3, #12]
 801b3cc:	687a      	ldr	r2, [r7, #4]
 801b3ce:	429a      	cmp	r2, r3
 801b3d0:	d104      	bne.n	801b3dc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	68da      	ldr	r2, [r3, #12]
 801b3d6:	68fb      	ldr	r3, [r7, #12]
 801b3d8:	60da      	str	r2, [r3, #12]
        break;
 801b3da:	e005      	b.n	801b3e8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b3dc:	68fb      	ldr	r3, [r7, #12]
 801b3de:	68db      	ldr	r3, [r3, #12]
 801b3e0:	60fb      	str	r3, [r7, #12]
 801b3e2:	68fb      	ldr	r3, [r7, #12]
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	d1eb      	bne.n	801b3c0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b3e8:	6879      	ldr	r1, [r7, #4]
 801b3ea:	2000      	movs	r0, #0
 801b3ec:	f7f8 f95a 	bl	80136a4 <memp_free>
}
 801b3f0:	3710      	adds	r7, #16
 801b3f2:	46bd      	mov	sp, r7
 801b3f4:	bd80      	pop	{r7, pc}
 801b3f6:	bf00      	nop
 801b3f8:	08025f50 	.word	0x08025f50
 801b3fc:	0802629c 	.word	0x0802629c
 801b400:	08025fa4 	.word	0x08025fa4
 801b404:	2000e114 	.word	0x2000e114

0801b408 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801b408:	b580      	push	{r7, lr}
 801b40a:	b082      	sub	sp, #8
 801b40c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801b40e:	2000      	movs	r0, #0
 801b410:	f7f8 f8f6 	bl	8013600 <memp_malloc>
 801b414:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d007      	beq.n	801b42c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801b41c:	2220      	movs	r2, #32
 801b41e:	2100      	movs	r1, #0
 801b420:	6878      	ldr	r0, [r7, #4]
 801b422:	f002 fe3f 	bl	801e0a4 <memset>
    pcb->ttl = UDP_TTL;
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	22ff      	movs	r2, #255	; 0xff
 801b42a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801b42c:	687b      	ldr	r3, [r7, #4]
}
 801b42e:	4618      	mov	r0, r3
 801b430:	3708      	adds	r7, #8
 801b432:	46bd      	mov	sp, r7
 801b434:	bd80      	pop	{r7, pc}

0801b436 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801b436:	b580      	push	{r7, lr}
 801b438:	b084      	sub	sp, #16
 801b43a:	af00      	add	r7, sp, #0
 801b43c:	4603      	mov	r3, r0
 801b43e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801b440:	f7ff ffe2 	bl	801b408 <udp_new>
 801b444:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801b446:	68fb      	ldr	r3, [r7, #12]
}
 801b448:	4618      	mov	r0, r3
 801b44a:	3710      	adds	r7, #16
 801b44c:	46bd      	mov	sp, r7
 801b44e:	bd80      	pop	{r7, pc}

0801b450 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b450:	b480      	push	{r7}
 801b452:	b085      	sub	sp, #20
 801b454:	af00      	add	r7, sp, #0
 801b456:	6078      	str	r0, [r7, #4]
 801b458:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	d01e      	beq.n	801b49e <udp_netif_ip_addr_changed+0x4e>
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	2b00      	cmp	r3, #0
 801b466:	d01a      	beq.n	801b49e <udp_netif_ip_addr_changed+0x4e>
 801b468:	683b      	ldr	r3, [r7, #0]
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d017      	beq.n	801b49e <udp_netif_ip_addr_changed+0x4e>
 801b46e:	683b      	ldr	r3, [r7, #0]
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	2b00      	cmp	r3, #0
 801b474:	d013      	beq.n	801b49e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b476:	4b0d      	ldr	r3, [pc, #52]	; (801b4ac <udp_netif_ip_addr_changed+0x5c>)
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	60fb      	str	r3, [r7, #12]
 801b47c:	e00c      	b.n	801b498 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b47e:	68fb      	ldr	r3, [r7, #12]
 801b480:	681a      	ldr	r2, [r3, #0]
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	429a      	cmp	r2, r3
 801b488:	d103      	bne.n	801b492 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b48a:	683b      	ldr	r3, [r7, #0]
 801b48c:	681a      	ldr	r2, [r3, #0]
 801b48e:	68fb      	ldr	r3, [r7, #12]
 801b490:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b492:	68fb      	ldr	r3, [r7, #12]
 801b494:	68db      	ldr	r3, [r3, #12]
 801b496:	60fb      	str	r3, [r7, #12]
 801b498:	68fb      	ldr	r3, [r7, #12]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d1ef      	bne.n	801b47e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b49e:	bf00      	nop
 801b4a0:	3714      	adds	r7, #20
 801b4a2:	46bd      	mov	sp, r7
 801b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4a8:	4770      	bx	lr
 801b4aa:	bf00      	nop
 801b4ac:	2000e114 	.word	0x2000e114

0801b4b0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b4b0:	b580      	push	{r7, lr}
 801b4b2:	b082      	sub	sp, #8
 801b4b4:	af00      	add	r7, sp, #0
 801b4b6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b4b8:	4915      	ldr	r1, [pc, #84]	; (801b510 <etharp_free_entry+0x60>)
 801b4ba:	687a      	ldr	r2, [r7, #4]
 801b4bc:	4613      	mov	r3, r2
 801b4be:	005b      	lsls	r3, r3, #1
 801b4c0:	4413      	add	r3, r2
 801b4c2:	00db      	lsls	r3, r3, #3
 801b4c4:	440b      	add	r3, r1
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d013      	beq.n	801b4f4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b4cc:	4910      	ldr	r1, [pc, #64]	; (801b510 <etharp_free_entry+0x60>)
 801b4ce:	687a      	ldr	r2, [r7, #4]
 801b4d0:	4613      	mov	r3, r2
 801b4d2:	005b      	lsls	r3, r3, #1
 801b4d4:	4413      	add	r3, r2
 801b4d6:	00db      	lsls	r3, r3, #3
 801b4d8:	440b      	add	r3, r1
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	4618      	mov	r0, r3
 801b4de:	f7f8 ff21 	bl	8014324 <pbuf_free>
    arp_table[i].q = NULL;
 801b4e2:	490b      	ldr	r1, [pc, #44]	; (801b510 <etharp_free_entry+0x60>)
 801b4e4:	687a      	ldr	r2, [r7, #4]
 801b4e6:	4613      	mov	r3, r2
 801b4e8:	005b      	lsls	r3, r3, #1
 801b4ea:	4413      	add	r3, r2
 801b4ec:	00db      	lsls	r3, r3, #3
 801b4ee:	440b      	add	r3, r1
 801b4f0:	2200      	movs	r2, #0
 801b4f2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b4f4:	4906      	ldr	r1, [pc, #24]	; (801b510 <etharp_free_entry+0x60>)
 801b4f6:	687a      	ldr	r2, [r7, #4]
 801b4f8:	4613      	mov	r3, r2
 801b4fa:	005b      	lsls	r3, r3, #1
 801b4fc:	4413      	add	r3, r2
 801b4fe:	00db      	lsls	r3, r3, #3
 801b500:	440b      	add	r3, r1
 801b502:	3314      	adds	r3, #20
 801b504:	2200      	movs	r2, #0
 801b506:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801b508:	bf00      	nop
 801b50a:	3708      	adds	r7, #8
 801b50c:	46bd      	mov	sp, r7
 801b50e:	bd80      	pop	{r7, pc}
 801b510:	20006dfc 	.word	0x20006dfc

0801b514 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b514:	b580      	push	{r7, lr}
 801b516:	b082      	sub	sp, #8
 801b518:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b51a:	2300      	movs	r3, #0
 801b51c:	607b      	str	r3, [r7, #4]
 801b51e:	e096      	b.n	801b64e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801b520:	494f      	ldr	r1, [pc, #316]	; (801b660 <etharp_tmr+0x14c>)
 801b522:	687a      	ldr	r2, [r7, #4]
 801b524:	4613      	mov	r3, r2
 801b526:	005b      	lsls	r3, r3, #1
 801b528:	4413      	add	r3, r2
 801b52a:	00db      	lsls	r3, r3, #3
 801b52c:	440b      	add	r3, r1
 801b52e:	3314      	adds	r3, #20
 801b530:	781b      	ldrb	r3, [r3, #0]
 801b532:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b534:	78fb      	ldrb	r3, [r7, #3]
 801b536:	2b00      	cmp	r3, #0
 801b538:	f000 8086 	beq.w	801b648 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b53c:	4948      	ldr	r1, [pc, #288]	; (801b660 <etharp_tmr+0x14c>)
 801b53e:	687a      	ldr	r2, [r7, #4]
 801b540:	4613      	mov	r3, r2
 801b542:	005b      	lsls	r3, r3, #1
 801b544:	4413      	add	r3, r2
 801b546:	00db      	lsls	r3, r3, #3
 801b548:	440b      	add	r3, r1
 801b54a:	3312      	adds	r3, #18
 801b54c:	881b      	ldrh	r3, [r3, #0]
 801b54e:	3301      	adds	r3, #1
 801b550:	b298      	uxth	r0, r3
 801b552:	4943      	ldr	r1, [pc, #268]	; (801b660 <etharp_tmr+0x14c>)
 801b554:	687a      	ldr	r2, [r7, #4]
 801b556:	4613      	mov	r3, r2
 801b558:	005b      	lsls	r3, r3, #1
 801b55a:	4413      	add	r3, r2
 801b55c:	00db      	lsls	r3, r3, #3
 801b55e:	440b      	add	r3, r1
 801b560:	3312      	adds	r3, #18
 801b562:	4602      	mov	r2, r0
 801b564:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b566:	493e      	ldr	r1, [pc, #248]	; (801b660 <etharp_tmr+0x14c>)
 801b568:	687a      	ldr	r2, [r7, #4]
 801b56a:	4613      	mov	r3, r2
 801b56c:	005b      	lsls	r3, r3, #1
 801b56e:	4413      	add	r3, r2
 801b570:	00db      	lsls	r3, r3, #3
 801b572:	440b      	add	r3, r1
 801b574:	3312      	adds	r3, #18
 801b576:	881b      	ldrh	r3, [r3, #0]
 801b578:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801b57c:	d215      	bcs.n	801b5aa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b57e:	4938      	ldr	r1, [pc, #224]	; (801b660 <etharp_tmr+0x14c>)
 801b580:	687a      	ldr	r2, [r7, #4]
 801b582:	4613      	mov	r3, r2
 801b584:	005b      	lsls	r3, r3, #1
 801b586:	4413      	add	r3, r2
 801b588:	00db      	lsls	r3, r3, #3
 801b58a:	440b      	add	r3, r1
 801b58c:	3314      	adds	r3, #20
 801b58e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b590:	2b01      	cmp	r3, #1
 801b592:	d10e      	bne.n	801b5b2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801b594:	4932      	ldr	r1, [pc, #200]	; (801b660 <etharp_tmr+0x14c>)
 801b596:	687a      	ldr	r2, [r7, #4]
 801b598:	4613      	mov	r3, r2
 801b59a:	005b      	lsls	r3, r3, #1
 801b59c:	4413      	add	r3, r2
 801b59e:	00db      	lsls	r3, r3, #3
 801b5a0:	440b      	add	r3, r1
 801b5a2:	3312      	adds	r3, #18
 801b5a4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b5a6:	2b04      	cmp	r3, #4
 801b5a8:	d903      	bls.n	801b5b2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801b5aa:	6878      	ldr	r0, [r7, #4]
 801b5ac:	f7ff ff80 	bl	801b4b0 <etharp_free_entry>
 801b5b0:	e04a      	b.n	801b648 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b5b2:	492b      	ldr	r1, [pc, #172]	; (801b660 <etharp_tmr+0x14c>)
 801b5b4:	687a      	ldr	r2, [r7, #4]
 801b5b6:	4613      	mov	r3, r2
 801b5b8:	005b      	lsls	r3, r3, #1
 801b5ba:	4413      	add	r3, r2
 801b5bc:	00db      	lsls	r3, r3, #3
 801b5be:	440b      	add	r3, r1
 801b5c0:	3314      	adds	r3, #20
 801b5c2:	781b      	ldrb	r3, [r3, #0]
 801b5c4:	2b03      	cmp	r3, #3
 801b5c6:	d10a      	bne.n	801b5de <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b5c8:	4925      	ldr	r1, [pc, #148]	; (801b660 <etharp_tmr+0x14c>)
 801b5ca:	687a      	ldr	r2, [r7, #4]
 801b5cc:	4613      	mov	r3, r2
 801b5ce:	005b      	lsls	r3, r3, #1
 801b5d0:	4413      	add	r3, r2
 801b5d2:	00db      	lsls	r3, r3, #3
 801b5d4:	440b      	add	r3, r1
 801b5d6:	3314      	adds	r3, #20
 801b5d8:	2204      	movs	r2, #4
 801b5da:	701a      	strb	r2, [r3, #0]
 801b5dc:	e034      	b.n	801b648 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b5de:	4920      	ldr	r1, [pc, #128]	; (801b660 <etharp_tmr+0x14c>)
 801b5e0:	687a      	ldr	r2, [r7, #4]
 801b5e2:	4613      	mov	r3, r2
 801b5e4:	005b      	lsls	r3, r3, #1
 801b5e6:	4413      	add	r3, r2
 801b5e8:	00db      	lsls	r3, r3, #3
 801b5ea:	440b      	add	r3, r1
 801b5ec:	3314      	adds	r3, #20
 801b5ee:	781b      	ldrb	r3, [r3, #0]
 801b5f0:	2b04      	cmp	r3, #4
 801b5f2:	d10a      	bne.n	801b60a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b5f4:	491a      	ldr	r1, [pc, #104]	; (801b660 <etharp_tmr+0x14c>)
 801b5f6:	687a      	ldr	r2, [r7, #4]
 801b5f8:	4613      	mov	r3, r2
 801b5fa:	005b      	lsls	r3, r3, #1
 801b5fc:	4413      	add	r3, r2
 801b5fe:	00db      	lsls	r3, r3, #3
 801b600:	440b      	add	r3, r1
 801b602:	3314      	adds	r3, #20
 801b604:	2202      	movs	r2, #2
 801b606:	701a      	strb	r2, [r3, #0]
 801b608:	e01e      	b.n	801b648 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b60a:	4915      	ldr	r1, [pc, #84]	; (801b660 <etharp_tmr+0x14c>)
 801b60c:	687a      	ldr	r2, [r7, #4]
 801b60e:	4613      	mov	r3, r2
 801b610:	005b      	lsls	r3, r3, #1
 801b612:	4413      	add	r3, r2
 801b614:	00db      	lsls	r3, r3, #3
 801b616:	440b      	add	r3, r1
 801b618:	3314      	adds	r3, #20
 801b61a:	781b      	ldrb	r3, [r3, #0]
 801b61c:	2b01      	cmp	r3, #1
 801b61e:	d113      	bne.n	801b648 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b620:	490f      	ldr	r1, [pc, #60]	; (801b660 <etharp_tmr+0x14c>)
 801b622:	687a      	ldr	r2, [r7, #4]
 801b624:	4613      	mov	r3, r2
 801b626:	005b      	lsls	r3, r3, #1
 801b628:	4413      	add	r3, r2
 801b62a:	00db      	lsls	r3, r3, #3
 801b62c:	440b      	add	r3, r1
 801b62e:	3308      	adds	r3, #8
 801b630:	6818      	ldr	r0, [r3, #0]
 801b632:	687a      	ldr	r2, [r7, #4]
 801b634:	4613      	mov	r3, r2
 801b636:	005b      	lsls	r3, r3, #1
 801b638:	4413      	add	r3, r2
 801b63a:	00db      	lsls	r3, r3, #3
 801b63c:	4a08      	ldr	r2, [pc, #32]	; (801b660 <etharp_tmr+0x14c>)
 801b63e:	4413      	add	r3, r2
 801b640:	3304      	adds	r3, #4
 801b642:	4619      	mov	r1, r3
 801b644:	f000 fe6e 	bl	801c324 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	3301      	adds	r3, #1
 801b64c:	607b      	str	r3, [r7, #4]
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	2b09      	cmp	r3, #9
 801b652:	f77f af65 	ble.w	801b520 <etharp_tmr+0xc>
      }
    }
  }
}
 801b656:	bf00      	nop
 801b658:	bf00      	nop
 801b65a:	3708      	adds	r7, #8
 801b65c:	46bd      	mov	sp, r7
 801b65e:	bd80      	pop	{r7, pc}
 801b660:	20006dfc 	.word	0x20006dfc

0801b664 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801b664:	b580      	push	{r7, lr}
 801b666:	b08a      	sub	sp, #40	; 0x28
 801b668:	af00      	add	r7, sp, #0
 801b66a:	60f8      	str	r0, [r7, #12]
 801b66c:	460b      	mov	r3, r1
 801b66e:	607a      	str	r2, [r7, #4]
 801b670:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801b672:	230a      	movs	r3, #10
 801b674:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b676:	230a      	movs	r3, #10
 801b678:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801b67a:	230a      	movs	r3, #10
 801b67c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801b67e:	2300      	movs	r3, #0
 801b680:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801b682:	230a      	movs	r3, #10
 801b684:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801b686:	2300      	movs	r3, #0
 801b688:	83bb      	strh	r3, [r7, #28]
 801b68a:	2300      	movs	r3, #0
 801b68c:	837b      	strh	r3, [r7, #26]
 801b68e:	2300      	movs	r3, #0
 801b690:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b692:	2300      	movs	r3, #0
 801b694:	843b      	strh	r3, [r7, #32]
 801b696:	e0ae      	b.n	801b7f6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801b698:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b69c:	49a6      	ldr	r1, [pc, #664]	; (801b938 <etharp_find_entry+0x2d4>)
 801b69e:	4613      	mov	r3, r2
 801b6a0:	005b      	lsls	r3, r3, #1
 801b6a2:	4413      	add	r3, r2
 801b6a4:	00db      	lsls	r3, r3, #3
 801b6a6:	440b      	add	r3, r1
 801b6a8:	3314      	adds	r3, #20
 801b6aa:	781b      	ldrb	r3, [r3, #0]
 801b6ac:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b6ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b6b2:	2b0a      	cmp	r3, #10
 801b6b4:	d105      	bne.n	801b6c2 <etharp_find_entry+0x5e>
 801b6b6:	7dfb      	ldrb	r3, [r7, #23]
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d102      	bne.n	801b6c2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801b6bc:	8c3b      	ldrh	r3, [r7, #32]
 801b6be:	847b      	strh	r3, [r7, #34]	; 0x22
 801b6c0:	e095      	b.n	801b7ee <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801b6c2:	7dfb      	ldrb	r3, [r7, #23]
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	f000 8092 	beq.w	801b7ee <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801b6ca:	7dfb      	ldrb	r3, [r7, #23]
 801b6cc:	2b01      	cmp	r3, #1
 801b6ce:	d009      	beq.n	801b6e4 <etharp_find_entry+0x80>
 801b6d0:	7dfb      	ldrb	r3, [r7, #23]
 801b6d2:	2b01      	cmp	r3, #1
 801b6d4:	d806      	bhi.n	801b6e4 <etharp_find_entry+0x80>
 801b6d6:	4b99      	ldr	r3, [pc, #612]	; (801b93c <etharp_find_entry+0x2d8>)
 801b6d8:	f240 1223 	movw	r2, #291	; 0x123
 801b6dc:	4998      	ldr	r1, [pc, #608]	; (801b940 <etharp_find_entry+0x2dc>)
 801b6de:	4899      	ldr	r0, [pc, #612]	; (801b944 <etharp_find_entry+0x2e0>)
 801b6e0:	f003 fc0c 	bl	801eefc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801b6e4:	68fb      	ldr	r3, [r7, #12]
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d020      	beq.n	801b72c <etharp_find_entry+0xc8>
 801b6ea:	68fb      	ldr	r3, [r7, #12]
 801b6ec:	6819      	ldr	r1, [r3, #0]
 801b6ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b6f2:	4891      	ldr	r0, [pc, #580]	; (801b938 <etharp_find_entry+0x2d4>)
 801b6f4:	4613      	mov	r3, r2
 801b6f6:	005b      	lsls	r3, r3, #1
 801b6f8:	4413      	add	r3, r2
 801b6fa:	00db      	lsls	r3, r3, #3
 801b6fc:	4403      	add	r3, r0
 801b6fe:	3304      	adds	r3, #4
 801b700:	681b      	ldr	r3, [r3, #0]
 801b702:	4299      	cmp	r1, r3
 801b704:	d112      	bne.n	801b72c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	2b00      	cmp	r3, #0
 801b70a:	d00c      	beq.n	801b726 <etharp_find_entry+0xc2>
 801b70c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b710:	4989      	ldr	r1, [pc, #548]	; (801b938 <etharp_find_entry+0x2d4>)
 801b712:	4613      	mov	r3, r2
 801b714:	005b      	lsls	r3, r3, #1
 801b716:	4413      	add	r3, r2
 801b718:	00db      	lsls	r3, r3, #3
 801b71a:	440b      	add	r3, r1
 801b71c:	3308      	adds	r3, #8
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	687a      	ldr	r2, [r7, #4]
 801b722:	429a      	cmp	r2, r3
 801b724:	d102      	bne.n	801b72c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801b726:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b72a:	e100      	b.n	801b92e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801b72c:	7dfb      	ldrb	r3, [r7, #23]
 801b72e:	2b01      	cmp	r3, #1
 801b730:	d140      	bne.n	801b7b4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801b732:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b736:	4980      	ldr	r1, [pc, #512]	; (801b938 <etharp_find_entry+0x2d4>)
 801b738:	4613      	mov	r3, r2
 801b73a:	005b      	lsls	r3, r3, #1
 801b73c:	4413      	add	r3, r2
 801b73e:	00db      	lsls	r3, r3, #3
 801b740:	440b      	add	r3, r1
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	2b00      	cmp	r3, #0
 801b746:	d01a      	beq.n	801b77e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801b748:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b74c:	497a      	ldr	r1, [pc, #488]	; (801b938 <etharp_find_entry+0x2d4>)
 801b74e:	4613      	mov	r3, r2
 801b750:	005b      	lsls	r3, r3, #1
 801b752:	4413      	add	r3, r2
 801b754:	00db      	lsls	r3, r3, #3
 801b756:	440b      	add	r3, r1
 801b758:	3312      	adds	r3, #18
 801b75a:	881b      	ldrh	r3, [r3, #0]
 801b75c:	8bba      	ldrh	r2, [r7, #28]
 801b75e:	429a      	cmp	r2, r3
 801b760:	d845      	bhi.n	801b7ee <etharp_find_entry+0x18a>
            old_queue = i;
 801b762:	8c3b      	ldrh	r3, [r7, #32]
 801b764:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801b766:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b76a:	4973      	ldr	r1, [pc, #460]	; (801b938 <etharp_find_entry+0x2d4>)
 801b76c:	4613      	mov	r3, r2
 801b76e:	005b      	lsls	r3, r3, #1
 801b770:	4413      	add	r3, r2
 801b772:	00db      	lsls	r3, r3, #3
 801b774:	440b      	add	r3, r1
 801b776:	3312      	adds	r3, #18
 801b778:	881b      	ldrh	r3, [r3, #0]
 801b77a:	83bb      	strh	r3, [r7, #28]
 801b77c:	e037      	b.n	801b7ee <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801b77e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b782:	496d      	ldr	r1, [pc, #436]	; (801b938 <etharp_find_entry+0x2d4>)
 801b784:	4613      	mov	r3, r2
 801b786:	005b      	lsls	r3, r3, #1
 801b788:	4413      	add	r3, r2
 801b78a:	00db      	lsls	r3, r3, #3
 801b78c:	440b      	add	r3, r1
 801b78e:	3312      	adds	r3, #18
 801b790:	881b      	ldrh	r3, [r3, #0]
 801b792:	8b7a      	ldrh	r2, [r7, #26]
 801b794:	429a      	cmp	r2, r3
 801b796:	d82a      	bhi.n	801b7ee <etharp_find_entry+0x18a>
            old_pending = i;
 801b798:	8c3b      	ldrh	r3, [r7, #32]
 801b79a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801b79c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b7a0:	4965      	ldr	r1, [pc, #404]	; (801b938 <etharp_find_entry+0x2d4>)
 801b7a2:	4613      	mov	r3, r2
 801b7a4:	005b      	lsls	r3, r3, #1
 801b7a6:	4413      	add	r3, r2
 801b7a8:	00db      	lsls	r3, r3, #3
 801b7aa:	440b      	add	r3, r1
 801b7ac:	3312      	adds	r3, #18
 801b7ae:	881b      	ldrh	r3, [r3, #0]
 801b7b0:	837b      	strh	r3, [r7, #26]
 801b7b2:	e01c      	b.n	801b7ee <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801b7b4:	7dfb      	ldrb	r3, [r7, #23]
 801b7b6:	2b01      	cmp	r3, #1
 801b7b8:	d919      	bls.n	801b7ee <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801b7ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b7be:	495e      	ldr	r1, [pc, #376]	; (801b938 <etharp_find_entry+0x2d4>)
 801b7c0:	4613      	mov	r3, r2
 801b7c2:	005b      	lsls	r3, r3, #1
 801b7c4:	4413      	add	r3, r2
 801b7c6:	00db      	lsls	r3, r3, #3
 801b7c8:	440b      	add	r3, r1
 801b7ca:	3312      	adds	r3, #18
 801b7cc:	881b      	ldrh	r3, [r3, #0]
 801b7ce:	8b3a      	ldrh	r2, [r7, #24]
 801b7d0:	429a      	cmp	r2, r3
 801b7d2:	d80c      	bhi.n	801b7ee <etharp_find_entry+0x18a>
            old_stable = i;
 801b7d4:	8c3b      	ldrh	r3, [r7, #32]
 801b7d6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801b7d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b7dc:	4956      	ldr	r1, [pc, #344]	; (801b938 <etharp_find_entry+0x2d4>)
 801b7de:	4613      	mov	r3, r2
 801b7e0:	005b      	lsls	r3, r3, #1
 801b7e2:	4413      	add	r3, r2
 801b7e4:	00db      	lsls	r3, r3, #3
 801b7e6:	440b      	add	r3, r1
 801b7e8:	3312      	adds	r3, #18
 801b7ea:	881b      	ldrh	r3, [r3, #0]
 801b7ec:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b7ee:	8c3b      	ldrh	r3, [r7, #32]
 801b7f0:	3301      	adds	r3, #1
 801b7f2:	b29b      	uxth	r3, r3
 801b7f4:	843b      	strh	r3, [r7, #32]
 801b7f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b7fa:	2b09      	cmp	r3, #9
 801b7fc:	f77f af4c 	ble.w	801b698 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801b800:	7afb      	ldrb	r3, [r7, #11]
 801b802:	f003 0302 	and.w	r3, r3, #2
 801b806:	2b00      	cmp	r3, #0
 801b808:	d108      	bne.n	801b81c <etharp_find_entry+0x1b8>
 801b80a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b80e:	2b0a      	cmp	r3, #10
 801b810:	d107      	bne.n	801b822 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801b812:	7afb      	ldrb	r3, [r7, #11]
 801b814:	f003 0301 	and.w	r3, r3, #1
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d102      	bne.n	801b822 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801b81c:	f04f 33ff 	mov.w	r3, #4294967295
 801b820:	e085      	b.n	801b92e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801b822:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b826:	2b09      	cmp	r3, #9
 801b828:	dc02      	bgt.n	801b830 <etharp_find_entry+0x1cc>
    i = empty;
 801b82a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b82c:	843b      	strh	r3, [r7, #32]
 801b82e:	e039      	b.n	801b8a4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801b830:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b834:	2b09      	cmp	r3, #9
 801b836:	dc14      	bgt.n	801b862 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801b838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b83a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801b83c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b840:	493d      	ldr	r1, [pc, #244]	; (801b938 <etharp_find_entry+0x2d4>)
 801b842:	4613      	mov	r3, r2
 801b844:	005b      	lsls	r3, r3, #1
 801b846:	4413      	add	r3, r2
 801b848:	00db      	lsls	r3, r3, #3
 801b84a:	440b      	add	r3, r1
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d018      	beq.n	801b884 <etharp_find_entry+0x220>
 801b852:	4b3a      	ldr	r3, [pc, #232]	; (801b93c <etharp_find_entry+0x2d8>)
 801b854:	f240 126d 	movw	r2, #365	; 0x16d
 801b858:	493b      	ldr	r1, [pc, #236]	; (801b948 <etharp_find_entry+0x2e4>)
 801b85a:	483a      	ldr	r0, [pc, #232]	; (801b944 <etharp_find_entry+0x2e0>)
 801b85c:	f003 fb4e 	bl	801eefc <iprintf>
 801b860:	e010      	b.n	801b884 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801b862:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b866:	2b09      	cmp	r3, #9
 801b868:	dc02      	bgt.n	801b870 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801b86a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b86c:	843b      	strh	r3, [r7, #32]
 801b86e:	e009      	b.n	801b884 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801b870:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b874:	2b09      	cmp	r3, #9
 801b876:	dc02      	bgt.n	801b87e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801b878:	8bfb      	ldrh	r3, [r7, #30]
 801b87a:	843b      	strh	r3, [r7, #32]
 801b87c:	e002      	b.n	801b884 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801b87e:	f04f 33ff 	mov.w	r3, #4294967295
 801b882:	e054      	b.n	801b92e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b884:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b888:	2b09      	cmp	r3, #9
 801b88a:	dd06      	ble.n	801b89a <etharp_find_entry+0x236>
 801b88c:	4b2b      	ldr	r3, [pc, #172]	; (801b93c <etharp_find_entry+0x2d8>)
 801b88e:	f240 127f 	movw	r2, #383	; 0x17f
 801b892:	492e      	ldr	r1, [pc, #184]	; (801b94c <etharp_find_entry+0x2e8>)
 801b894:	482b      	ldr	r0, [pc, #172]	; (801b944 <etharp_find_entry+0x2e0>)
 801b896:	f003 fb31 	bl	801eefc <iprintf>
    etharp_free_entry(i);
 801b89a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b89e:	4618      	mov	r0, r3
 801b8a0:	f7ff fe06 	bl	801b4b0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b8a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b8a8:	2b09      	cmp	r3, #9
 801b8aa:	dd06      	ble.n	801b8ba <etharp_find_entry+0x256>
 801b8ac:	4b23      	ldr	r3, [pc, #140]	; (801b93c <etharp_find_entry+0x2d8>)
 801b8ae:	f240 1283 	movw	r2, #387	; 0x183
 801b8b2:	4926      	ldr	r1, [pc, #152]	; (801b94c <etharp_find_entry+0x2e8>)
 801b8b4:	4823      	ldr	r0, [pc, #140]	; (801b944 <etharp_find_entry+0x2e0>)
 801b8b6:	f003 fb21 	bl	801eefc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801b8ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b8be:	491e      	ldr	r1, [pc, #120]	; (801b938 <etharp_find_entry+0x2d4>)
 801b8c0:	4613      	mov	r3, r2
 801b8c2:	005b      	lsls	r3, r3, #1
 801b8c4:	4413      	add	r3, r2
 801b8c6:	00db      	lsls	r3, r3, #3
 801b8c8:	440b      	add	r3, r1
 801b8ca:	3314      	adds	r3, #20
 801b8cc:	781b      	ldrb	r3, [r3, #0]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d006      	beq.n	801b8e0 <etharp_find_entry+0x27c>
 801b8d2:	4b1a      	ldr	r3, [pc, #104]	; (801b93c <etharp_find_entry+0x2d8>)
 801b8d4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801b8d8:	491d      	ldr	r1, [pc, #116]	; (801b950 <etharp_find_entry+0x2ec>)
 801b8da:	481a      	ldr	r0, [pc, #104]	; (801b944 <etharp_find_entry+0x2e0>)
 801b8dc:	f003 fb0e 	bl	801eefc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d00b      	beq.n	801b8fe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801b8e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b8ea:	68fb      	ldr	r3, [r7, #12]
 801b8ec:	6819      	ldr	r1, [r3, #0]
 801b8ee:	4812      	ldr	r0, [pc, #72]	; (801b938 <etharp_find_entry+0x2d4>)
 801b8f0:	4613      	mov	r3, r2
 801b8f2:	005b      	lsls	r3, r3, #1
 801b8f4:	4413      	add	r3, r2
 801b8f6:	00db      	lsls	r3, r3, #3
 801b8f8:	4403      	add	r3, r0
 801b8fa:	3304      	adds	r3, #4
 801b8fc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801b8fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b902:	490d      	ldr	r1, [pc, #52]	; (801b938 <etharp_find_entry+0x2d4>)
 801b904:	4613      	mov	r3, r2
 801b906:	005b      	lsls	r3, r3, #1
 801b908:	4413      	add	r3, r2
 801b90a:	00db      	lsls	r3, r3, #3
 801b90c:	440b      	add	r3, r1
 801b90e:	3312      	adds	r3, #18
 801b910:	2200      	movs	r2, #0
 801b912:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801b914:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b918:	4907      	ldr	r1, [pc, #28]	; (801b938 <etharp_find_entry+0x2d4>)
 801b91a:	4613      	mov	r3, r2
 801b91c:	005b      	lsls	r3, r3, #1
 801b91e:	4413      	add	r3, r2
 801b920:	00db      	lsls	r3, r3, #3
 801b922:	440b      	add	r3, r1
 801b924:	3308      	adds	r3, #8
 801b926:	687a      	ldr	r2, [r7, #4]
 801b928:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801b92a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801b92e:	4618      	mov	r0, r3
 801b930:	3728      	adds	r7, #40	; 0x28
 801b932:	46bd      	mov	sp, r7
 801b934:	bd80      	pop	{r7, pc}
 801b936:	bf00      	nop
 801b938:	20006dfc 	.word	0x20006dfc
 801b93c:	080262b4 	.word	0x080262b4
 801b940:	080262ec 	.word	0x080262ec
 801b944:	0802632c 	.word	0x0802632c
 801b948:	08026354 	.word	0x08026354
 801b94c:	0802636c 	.word	0x0802636c
 801b950:	08026380 	.word	0x08026380

0801b954 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801b954:	b580      	push	{r7, lr}
 801b956:	b088      	sub	sp, #32
 801b958:	af02      	add	r7, sp, #8
 801b95a:	60f8      	str	r0, [r7, #12]
 801b95c:	60b9      	str	r1, [r7, #8]
 801b95e:	607a      	str	r2, [r7, #4]
 801b960:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b962:	68fb      	ldr	r3, [r7, #12]
 801b964:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b968:	2b06      	cmp	r3, #6
 801b96a:	d006      	beq.n	801b97a <etharp_update_arp_entry+0x26>
 801b96c:	4b48      	ldr	r3, [pc, #288]	; (801ba90 <etharp_update_arp_entry+0x13c>)
 801b96e:	f240 12a9 	movw	r2, #425	; 0x1a9
 801b972:	4948      	ldr	r1, [pc, #288]	; (801ba94 <etharp_update_arp_entry+0x140>)
 801b974:	4848      	ldr	r0, [pc, #288]	; (801ba98 <etharp_update_arp_entry+0x144>)
 801b976:	f003 fac1 	bl	801eefc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801b97a:	68bb      	ldr	r3, [r7, #8]
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d012      	beq.n	801b9a6 <etharp_update_arp_entry+0x52>
 801b980:	68bb      	ldr	r3, [r7, #8]
 801b982:	681b      	ldr	r3, [r3, #0]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d00e      	beq.n	801b9a6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b988:	68bb      	ldr	r3, [r7, #8]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	68f9      	ldr	r1, [r7, #12]
 801b98e:	4618      	mov	r0, r3
 801b990:	f001 f8fe 	bl	801cb90 <ip4_addr_isbroadcast_u32>
 801b994:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801b996:	2b00      	cmp	r3, #0
 801b998:	d105      	bne.n	801b9a6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801b99a:	68bb      	ldr	r3, [r7, #8]
 801b99c:	681b      	ldr	r3, [r3, #0]
 801b99e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b9a2:	2be0      	cmp	r3, #224	; 0xe0
 801b9a4:	d102      	bne.n	801b9ac <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b9a6:	f06f 030f 	mvn.w	r3, #15
 801b9aa:	e06c      	b.n	801ba86 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801b9ac:	78fb      	ldrb	r3, [r7, #3]
 801b9ae:	68fa      	ldr	r2, [r7, #12]
 801b9b0:	4619      	mov	r1, r3
 801b9b2:	68b8      	ldr	r0, [r7, #8]
 801b9b4:	f7ff fe56 	bl	801b664 <etharp_find_entry>
 801b9b8:	4603      	mov	r3, r0
 801b9ba:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801b9bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	da02      	bge.n	801b9ca <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801b9c4:	8afb      	ldrh	r3, [r7, #22]
 801b9c6:	b25b      	sxtb	r3, r3
 801b9c8:	e05d      	b.n	801ba86 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b9ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b9ce:	4933      	ldr	r1, [pc, #204]	; (801ba9c <etharp_update_arp_entry+0x148>)
 801b9d0:	4613      	mov	r3, r2
 801b9d2:	005b      	lsls	r3, r3, #1
 801b9d4:	4413      	add	r3, r2
 801b9d6:	00db      	lsls	r3, r3, #3
 801b9d8:	440b      	add	r3, r1
 801b9da:	3314      	adds	r3, #20
 801b9dc:	2202      	movs	r2, #2
 801b9de:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801b9e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b9e4:	492d      	ldr	r1, [pc, #180]	; (801ba9c <etharp_update_arp_entry+0x148>)
 801b9e6:	4613      	mov	r3, r2
 801b9e8:	005b      	lsls	r3, r3, #1
 801b9ea:	4413      	add	r3, r2
 801b9ec:	00db      	lsls	r3, r3, #3
 801b9ee:	440b      	add	r3, r1
 801b9f0:	3308      	adds	r3, #8
 801b9f2:	68fa      	ldr	r2, [r7, #12]
 801b9f4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801b9f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b9fa:	4613      	mov	r3, r2
 801b9fc:	005b      	lsls	r3, r3, #1
 801b9fe:	4413      	add	r3, r2
 801ba00:	00db      	lsls	r3, r3, #3
 801ba02:	3308      	adds	r3, #8
 801ba04:	4a25      	ldr	r2, [pc, #148]	; (801ba9c <etharp_update_arp_entry+0x148>)
 801ba06:	4413      	add	r3, r2
 801ba08:	3304      	adds	r3, #4
 801ba0a:	2206      	movs	r2, #6
 801ba0c:	6879      	ldr	r1, [r7, #4]
 801ba0e:	4618      	mov	r0, r3
 801ba10:	f002 fb20 	bl	801e054 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ba14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ba18:	4920      	ldr	r1, [pc, #128]	; (801ba9c <etharp_update_arp_entry+0x148>)
 801ba1a:	4613      	mov	r3, r2
 801ba1c:	005b      	lsls	r3, r3, #1
 801ba1e:	4413      	add	r3, r2
 801ba20:	00db      	lsls	r3, r3, #3
 801ba22:	440b      	add	r3, r1
 801ba24:	3312      	adds	r3, #18
 801ba26:	2200      	movs	r2, #0
 801ba28:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ba2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ba2e:	491b      	ldr	r1, [pc, #108]	; (801ba9c <etharp_update_arp_entry+0x148>)
 801ba30:	4613      	mov	r3, r2
 801ba32:	005b      	lsls	r3, r3, #1
 801ba34:	4413      	add	r3, r2
 801ba36:	00db      	lsls	r3, r3, #3
 801ba38:	440b      	add	r3, r1
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	d021      	beq.n	801ba84 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801ba40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ba44:	4915      	ldr	r1, [pc, #84]	; (801ba9c <etharp_update_arp_entry+0x148>)
 801ba46:	4613      	mov	r3, r2
 801ba48:	005b      	lsls	r3, r3, #1
 801ba4a:	4413      	add	r3, r2
 801ba4c:	00db      	lsls	r3, r3, #3
 801ba4e:	440b      	add	r3, r1
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801ba54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ba58:	4910      	ldr	r1, [pc, #64]	; (801ba9c <etharp_update_arp_entry+0x148>)
 801ba5a:	4613      	mov	r3, r2
 801ba5c:	005b      	lsls	r3, r3, #1
 801ba5e:	4413      	add	r3, r2
 801ba60:	00db      	lsls	r3, r3, #3
 801ba62:	440b      	add	r3, r1
 801ba64:	2200      	movs	r2, #0
 801ba66:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801ba68:	68fb      	ldr	r3, [r7, #12]
 801ba6a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801ba6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ba72:	9300      	str	r3, [sp, #0]
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	6939      	ldr	r1, [r7, #16]
 801ba78:	68f8      	ldr	r0, [r7, #12]
 801ba7a:	f001 ff91 	bl	801d9a0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801ba7e:	6938      	ldr	r0, [r7, #16]
 801ba80:	f7f8 fc50 	bl	8014324 <pbuf_free>
  }
  return ERR_OK;
 801ba84:	2300      	movs	r3, #0
}
 801ba86:	4618      	mov	r0, r3
 801ba88:	3718      	adds	r7, #24
 801ba8a:	46bd      	mov	sp, r7
 801ba8c:	bd80      	pop	{r7, pc}
 801ba8e:	bf00      	nop
 801ba90:	080262b4 	.word	0x080262b4
 801ba94:	080263ac 	.word	0x080263ac
 801ba98:	0802632c 	.word	0x0802632c
 801ba9c:	20006dfc 	.word	0x20006dfc

0801baa0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801baa0:	b580      	push	{r7, lr}
 801baa2:	b084      	sub	sp, #16
 801baa4:	af00      	add	r7, sp, #0
 801baa6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801baa8:	2300      	movs	r3, #0
 801baaa:	60fb      	str	r3, [r7, #12]
 801baac:	e01e      	b.n	801baec <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801baae:	4913      	ldr	r1, [pc, #76]	; (801bafc <etharp_cleanup_netif+0x5c>)
 801bab0:	68fa      	ldr	r2, [r7, #12]
 801bab2:	4613      	mov	r3, r2
 801bab4:	005b      	lsls	r3, r3, #1
 801bab6:	4413      	add	r3, r2
 801bab8:	00db      	lsls	r3, r3, #3
 801baba:	440b      	add	r3, r1
 801babc:	3314      	adds	r3, #20
 801babe:	781b      	ldrb	r3, [r3, #0]
 801bac0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801bac2:	7afb      	ldrb	r3, [r7, #11]
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d00e      	beq.n	801bae6 <etharp_cleanup_netif+0x46>
 801bac8:	490c      	ldr	r1, [pc, #48]	; (801bafc <etharp_cleanup_netif+0x5c>)
 801baca:	68fa      	ldr	r2, [r7, #12]
 801bacc:	4613      	mov	r3, r2
 801bace:	005b      	lsls	r3, r3, #1
 801bad0:	4413      	add	r3, r2
 801bad2:	00db      	lsls	r3, r3, #3
 801bad4:	440b      	add	r3, r1
 801bad6:	3308      	adds	r3, #8
 801bad8:	681b      	ldr	r3, [r3, #0]
 801bada:	687a      	ldr	r2, [r7, #4]
 801badc:	429a      	cmp	r2, r3
 801bade:	d102      	bne.n	801bae6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801bae0:	68f8      	ldr	r0, [r7, #12]
 801bae2:	f7ff fce5 	bl	801b4b0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bae6:	68fb      	ldr	r3, [r7, #12]
 801bae8:	3301      	adds	r3, #1
 801baea:	60fb      	str	r3, [r7, #12]
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	2b09      	cmp	r3, #9
 801baf0:	dddd      	ble.n	801baae <etharp_cleanup_netif+0xe>
    }
  }
}
 801baf2:	bf00      	nop
 801baf4:	bf00      	nop
 801baf6:	3710      	adds	r7, #16
 801baf8:	46bd      	mov	sp, r7
 801bafa:	bd80      	pop	{r7, pc}
 801bafc:	20006dfc 	.word	0x20006dfc

0801bb00 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801bb00:	b5b0      	push	{r4, r5, r7, lr}
 801bb02:	b08a      	sub	sp, #40	; 0x28
 801bb04:	af04      	add	r7, sp, #16
 801bb06:	6078      	str	r0, [r7, #4]
 801bb08:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801bb0a:	683b      	ldr	r3, [r7, #0]
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d107      	bne.n	801bb20 <etharp_input+0x20>
 801bb10:	4b3d      	ldr	r3, [pc, #244]	; (801bc08 <etharp_input+0x108>)
 801bb12:	f240 228a 	movw	r2, #650	; 0x28a
 801bb16:	493d      	ldr	r1, [pc, #244]	; (801bc0c <etharp_input+0x10c>)
 801bb18:	483d      	ldr	r0, [pc, #244]	; (801bc10 <etharp_input+0x110>)
 801bb1a:	f003 f9ef 	bl	801eefc <iprintf>
 801bb1e:	e06f      	b.n	801bc00 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	685b      	ldr	r3, [r3, #4]
 801bb24:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801bb26:	693b      	ldr	r3, [r7, #16]
 801bb28:	881b      	ldrh	r3, [r3, #0]
 801bb2a:	b29b      	uxth	r3, r3
 801bb2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bb30:	d10c      	bne.n	801bb4c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801bb32:	693b      	ldr	r3, [r7, #16]
 801bb34:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801bb36:	2b06      	cmp	r3, #6
 801bb38:	d108      	bne.n	801bb4c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801bb3a:	693b      	ldr	r3, [r7, #16]
 801bb3c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801bb3e:	2b04      	cmp	r3, #4
 801bb40:	d104      	bne.n	801bb4c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801bb42:	693b      	ldr	r3, [r7, #16]
 801bb44:	885b      	ldrh	r3, [r3, #2]
 801bb46:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801bb48:	2b08      	cmp	r3, #8
 801bb4a:	d003      	beq.n	801bb54 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801bb4c:	6878      	ldr	r0, [r7, #4]
 801bb4e:	f7f8 fbe9 	bl	8014324 <pbuf_free>
    return;
 801bb52:	e055      	b.n	801bc00 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801bb54:	693b      	ldr	r3, [r7, #16]
 801bb56:	330e      	adds	r3, #14
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801bb5c:	693b      	ldr	r3, [r7, #16]
 801bb5e:	3318      	adds	r3, #24
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801bb64:	683b      	ldr	r3, [r7, #0]
 801bb66:	3304      	adds	r3, #4
 801bb68:	681b      	ldr	r3, [r3, #0]
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d102      	bne.n	801bb74 <etharp_input+0x74>
    for_us = 0;
 801bb6e:	2300      	movs	r3, #0
 801bb70:	75fb      	strb	r3, [r7, #23]
 801bb72:	e009      	b.n	801bb88 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801bb74:	68ba      	ldr	r2, [r7, #8]
 801bb76:	683b      	ldr	r3, [r7, #0]
 801bb78:	3304      	adds	r3, #4
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	429a      	cmp	r2, r3
 801bb7e:	bf0c      	ite	eq
 801bb80:	2301      	moveq	r3, #1
 801bb82:	2300      	movne	r3, #0
 801bb84:	b2db      	uxtb	r3, r3
 801bb86:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801bb88:	693b      	ldr	r3, [r7, #16]
 801bb8a:	f103 0208 	add.w	r2, r3, #8
 801bb8e:	7dfb      	ldrb	r3, [r7, #23]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d001      	beq.n	801bb98 <etharp_input+0x98>
 801bb94:	2301      	movs	r3, #1
 801bb96:	e000      	b.n	801bb9a <etharp_input+0x9a>
 801bb98:	2302      	movs	r3, #2
 801bb9a:	f107 010c 	add.w	r1, r7, #12
 801bb9e:	6838      	ldr	r0, [r7, #0]
 801bba0:	f7ff fed8 	bl	801b954 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801bba4:	693b      	ldr	r3, [r7, #16]
 801bba6:	88db      	ldrh	r3, [r3, #6]
 801bba8:	b29b      	uxth	r3, r3
 801bbaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bbae:	d003      	beq.n	801bbb8 <etharp_input+0xb8>
 801bbb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bbb4:	d01e      	beq.n	801bbf4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801bbb6:	e020      	b.n	801bbfa <etharp_input+0xfa>
      if (for_us) {
 801bbb8:	7dfb      	ldrb	r3, [r7, #23]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d01c      	beq.n	801bbf8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801bbbe:	683b      	ldr	r3, [r7, #0]
 801bbc0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801bbc4:	693b      	ldr	r3, [r7, #16]
 801bbc6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801bbca:	683b      	ldr	r3, [r7, #0]
 801bbcc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801bbd0:	683b      	ldr	r3, [r7, #0]
 801bbd2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801bbd4:	693a      	ldr	r2, [r7, #16]
 801bbd6:	3208      	adds	r2, #8
        etharp_raw(netif,
 801bbd8:	2102      	movs	r1, #2
 801bbda:	9103      	str	r1, [sp, #12]
 801bbdc:	f107 010c 	add.w	r1, r7, #12
 801bbe0:	9102      	str	r1, [sp, #8]
 801bbe2:	9201      	str	r2, [sp, #4]
 801bbe4:	9300      	str	r3, [sp, #0]
 801bbe6:	462b      	mov	r3, r5
 801bbe8:	4622      	mov	r2, r4
 801bbea:	4601      	mov	r1, r0
 801bbec:	6838      	ldr	r0, [r7, #0]
 801bbee:	f000 faeb 	bl	801c1c8 <etharp_raw>
      break;
 801bbf2:	e001      	b.n	801bbf8 <etharp_input+0xf8>
      break;
 801bbf4:	bf00      	nop
 801bbf6:	e000      	b.n	801bbfa <etharp_input+0xfa>
      break;
 801bbf8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801bbfa:	6878      	ldr	r0, [r7, #4]
 801bbfc:	f7f8 fb92 	bl	8014324 <pbuf_free>
}
 801bc00:	3718      	adds	r7, #24
 801bc02:	46bd      	mov	sp, r7
 801bc04:	bdb0      	pop	{r4, r5, r7, pc}
 801bc06:	bf00      	nop
 801bc08:	080262b4 	.word	0x080262b4
 801bc0c:	08026404 	.word	0x08026404
 801bc10:	0802632c 	.word	0x0802632c

0801bc14 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801bc14:	b580      	push	{r7, lr}
 801bc16:	b086      	sub	sp, #24
 801bc18:	af02      	add	r7, sp, #8
 801bc1a:	60f8      	str	r0, [r7, #12]
 801bc1c:	60b9      	str	r1, [r7, #8]
 801bc1e:	4613      	mov	r3, r2
 801bc20:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801bc22:	79fa      	ldrb	r2, [r7, #7]
 801bc24:	4944      	ldr	r1, [pc, #272]	; (801bd38 <etharp_output_to_arp_index+0x124>)
 801bc26:	4613      	mov	r3, r2
 801bc28:	005b      	lsls	r3, r3, #1
 801bc2a:	4413      	add	r3, r2
 801bc2c:	00db      	lsls	r3, r3, #3
 801bc2e:	440b      	add	r3, r1
 801bc30:	3314      	adds	r3, #20
 801bc32:	781b      	ldrb	r3, [r3, #0]
 801bc34:	2b01      	cmp	r3, #1
 801bc36:	d806      	bhi.n	801bc46 <etharp_output_to_arp_index+0x32>
 801bc38:	4b40      	ldr	r3, [pc, #256]	; (801bd3c <etharp_output_to_arp_index+0x128>)
 801bc3a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801bc3e:	4940      	ldr	r1, [pc, #256]	; (801bd40 <etharp_output_to_arp_index+0x12c>)
 801bc40:	4840      	ldr	r0, [pc, #256]	; (801bd44 <etharp_output_to_arp_index+0x130>)
 801bc42:	f003 f95b 	bl	801eefc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801bc46:	79fa      	ldrb	r2, [r7, #7]
 801bc48:	493b      	ldr	r1, [pc, #236]	; (801bd38 <etharp_output_to_arp_index+0x124>)
 801bc4a:	4613      	mov	r3, r2
 801bc4c:	005b      	lsls	r3, r3, #1
 801bc4e:	4413      	add	r3, r2
 801bc50:	00db      	lsls	r3, r3, #3
 801bc52:	440b      	add	r3, r1
 801bc54:	3314      	adds	r3, #20
 801bc56:	781b      	ldrb	r3, [r3, #0]
 801bc58:	2b02      	cmp	r3, #2
 801bc5a:	d153      	bne.n	801bd04 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801bc5c:	79fa      	ldrb	r2, [r7, #7]
 801bc5e:	4936      	ldr	r1, [pc, #216]	; (801bd38 <etharp_output_to_arp_index+0x124>)
 801bc60:	4613      	mov	r3, r2
 801bc62:	005b      	lsls	r3, r3, #1
 801bc64:	4413      	add	r3, r2
 801bc66:	00db      	lsls	r3, r3, #3
 801bc68:	440b      	add	r3, r1
 801bc6a:	3312      	adds	r3, #18
 801bc6c:	881b      	ldrh	r3, [r3, #0]
 801bc6e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801bc72:	d919      	bls.n	801bca8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801bc74:	79fa      	ldrb	r2, [r7, #7]
 801bc76:	4613      	mov	r3, r2
 801bc78:	005b      	lsls	r3, r3, #1
 801bc7a:	4413      	add	r3, r2
 801bc7c:	00db      	lsls	r3, r3, #3
 801bc7e:	4a2e      	ldr	r2, [pc, #184]	; (801bd38 <etharp_output_to_arp_index+0x124>)
 801bc80:	4413      	add	r3, r2
 801bc82:	3304      	adds	r3, #4
 801bc84:	4619      	mov	r1, r3
 801bc86:	68f8      	ldr	r0, [r7, #12]
 801bc88:	f000 fb4c 	bl	801c324 <etharp_request>
 801bc8c:	4603      	mov	r3, r0
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d138      	bne.n	801bd04 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801bc92:	79fa      	ldrb	r2, [r7, #7]
 801bc94:	4928      	ldr	r1, [pc, #160]	; (801bd38 <etharp_output_to_arp_index+0x124>)
 801bc96:	4613      	mov	r3, r2
 801bc98:	005b      	lsls	r3, r3, #1
 801bc9a:	4413      	add	r3, r2
 801bc9c:	00db      	lsls	r3, r3, #3
 801bc9e:	440b      	add	r3, r1
 801bca0:	3314      	adds	r3, #20
 801bca2:	2203      	movs	r2, #3
 801bca4:	701a      	strb	r2, [r3, #0]
 801bca6:	e02d      	b.n	801bd04 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801bca8:	79fa      	ldrb	r2, [r7, #7]
 801bcaa:	4923      	ldr	r1, [pc, #140]	; (801bd38 <etharp_output_to_arp_index+0x124>)
 801bcac:	4613      	mov	r3, r2
 801bcae:	005b      	lsls	r3, r3, #1
 801bcb0:	4413      	add	r3, r2
 801bcb2:	00db      	lsls	r3, r3, #3
 801bcb4:	440b      	add	r3, r1
 801bcb6:	3312      	adds	r3, #18
 801bcb8:	881b      	ldrh	r3, [r3, #0]
 801bcba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801bcbe:	d321      	bcc.n	801bd04 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801bcc0:	79fa      	ldrb	r2, [r7, #7]
 801bcc2:	4613      	mov	r3, r2
 801bcc4:	005b      	lsls	r3, r3, #1
 801bcc6:	4413      	add	r3, r2
 801bcc8:	00db      	lsls	r3, r3, #3
 801bcca:	4a1b      	ldr	r2, [pc, #108]	; (801bd38 <etharp_output_to_arp_index+0x124>)
 801bccc:	4413      	add	r3, r2
 801bcce:	1d19      	adds	r1, r3, #4
 801bcd0:	79fa      	ldrb	r2, [r7, #7]
 801bcd2:	4613      	mov	r3, r2
 801bcd4:	005b      	lsls	r3, r3, #1
 801bcd6:	4413      	add	r3, r2
 801bcd8:	00db      	lsls	r3, r3, #3
 801bcda:	3308      	adds	r3, #8
 801bcdc:	4a16      	ldr	r2, [pc, #88]	; (801bd38 <etharp_output_to_arp_index+0x124>)
 801bcde:	4413      	add	r3, r2
 801bce0:	3304      	adds	r3, #4
 801bce2:	461a      	mov	r2, r3
 801bce4:	68f8      	ldr	r0, [r7, #12]
 801bce6:	f000 fafb 	bl	801c2e0 <etharp_request_dst>
 801bcea:	4603      	mov	r3, r0
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d109      	bne.n	801bd04 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801bcf0:	79fa      	ldrb	r2, [r7, #7]
 801bcf2:	4911      	ldr	r1, [pc, #68]	; (801bd38 <etharp_output_to_arp_index+0x124>)
 801bcf4:	4613      	mov	r3, r2
 801bcf6:	005b      	lsls	r3, r3, #1
 801bcf8:	4413      	add	r3, r2
 801bcfa:	00db      	lsls	r3, r3, #3
 801bcfc:	440b      	add	r3, r1
 801bcfe:	3314      	adds	r3, #20
 801bd00:	2203      	movs	r2, #3
 801bd02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801bd04:	68fb      	ldr	r3, [r7, #12]
 801bd06:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801bd0a:	79fa      	ldrb	r2, [r7, #7]
 801bd0c:	4613      	mov	r3, r2
 801bd0e:	005b      	lsls	r3, r3, #1
 801bd10:	4413      	add	r3, r2
 801bd12:	00db      	lsls	r3, r3, #3
 801bd14:	3308      	adds	r3, #8
 801bd16:	4a08      	ldr	r2, [pc, #32]	; (801bd38 <etharp_output_to_arp_index+0x124>)
 801bd18:	4413      	add	r3, r2
 801bd1a:	3304      	adds	r3, #4
 801bd1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801bd20:	9200      	str	r2, [sp, #0]
 801bd22:	460a      	mov	r2, r1
 801bd24:	68b9      	ldr	r1, [r7, #8]
 801bd26:	68f8      	ldr	r0, [r7, #12]
 801bd28:	f001 fe3a 	bl	801d9a0 <ethernet_output>
 801bd2c:	4603      	mov	r3, r0
}
 801bd2e:	4618      	mov	r0, r3
 801bd30:	3710      	adds	r7, #16
 801bd32:	46bd      	mov	sp, r7
 801bd34:	bd80      	pop	{r7, pc}
 801bd36:	bf00      	nop
 801bd38:	20006dfc 	.word	0x20006dfc
 801bd3c:	080262b4 	.word	0x080262b4
 801bd40:	08026424 	.word	0x08026424
 801bd44:	0802632c 	.word	0x0802632c

0801bd48 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801bd48:	b580      	push	{r7, lr}
 801bd4a:	b08a      	sub	sp, #40	; 0x28
 801bd4c:	af02      	add	r7, sp, #8
 801bd4e:	60f8      	str	r0, [r7, #12]
 801bd50:	60b9      	str	r1, [r7, #8]
 801bd52:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801bd58:	68fb      	ldr	r3, [r7, #12]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d106      	bne.n	801bd6c <etharp_output+0x24>
 801bd5e:	4b73      	ldr	r3, [pc, #460]	; (801bf2c <etharp_output+0x1e4>)
 801bd60:	f240 321e 	movw	r2, #798	; 0x31e
 801bd64:	4972      	ldr	r1, [pc, #456]	; (801bf30 <etharp_output+0x1e8>)
 801bd66:	4873      	ldr	r0, [pc, #460]	; (801bf34 <etharp_output+0x1ec>)
 801bd68:	f003 f8c8 	bl	801eefc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801bd6c:	68bb      	ldr	r3, [r7, #8]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d106      	bne.n	801bd80 <etharp_output+0x38>
 801bd72:	4b6e      	ldr	r3, [pc, #440]	; (801bf2c <etharp_output+0x1e4>)
 801bd74:	f240 321f 	movw	r2, #799	; 0x31f
 801bd78:	496f      	ldr	r1, [pc, #444]	; (801bf38 <etharp_output+0x1f0>)
 801bd7a:	486e      	ldr	r0, [pc, #440]	; (801bf34 <etharp_output+0x1ec>)
 801bd7c:	f003 f8be 	bl	801eefc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d106      	bne.n	801bd94 <etharp_output+0x4c>
 801bd86:	4b69      	ldr	r3, [pc, #420]	; (801bf2c <etharp_output+0x1e4>)
 801bd88:	f44f 7248 	mov.w	r2, #800	; 0x320
 801bd8c:	496b      	ldr	r1, [pc, #428]	; (801bf3c <etharp_output+0x1f4>)
 801bd8e:	4869      	ldr	r0, [pc, #420]	; (801bf34 <etharp_output+0x1ec>)
 801bd90:	f003 f8b4 	bl	801eefc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	68f9      	ldr	r1, [r7, #12]
 801bd9a:	4618      	mov	r0, r3
 801bd9c:	f000 fef8 	bl	801cb90 <ip4_addr_isbroadcast_u32>
 801bda0:	4603      	mov	r3, r0
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d002      	beq.n	801bdac <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801bda6:	4b66      	ldr	r3, [pc, #408]	; (801bf40 <etharp_output+0x1f8>)
 801bda8:	61fb      	str	r3, [r7, #28]
 801bdaa:	e0af      	b.n	801bf0c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bdb4:	2be0      	cmp	r3, #224	; 0xe0
 801bdb6:	d118      	bne.n	801bdea <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801bdb8:	2301      	movs	r3, #1
 801bdba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801bdbc:	2300      	movs	r3, #0
 801bdbe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801bdc0:	235e      	movs	r3, #94	; 0x5e
 801bdc2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	3301      	adds	r3, #1
 801bdc8:	781b      	ldrb	r3, [r3, #0]
 801bdca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bdce:	b2db      	uxtb	r3, r3
 801bdd0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	3302      	adds	r3, #2
 801bdd6:	781b      	ldrb	r3, [r3, #0]
 801bdd8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	3303      	adds	r3, #3
 801bdde:	781b      	ldrb	r3, [r3, #0]
 801bde0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801bde2:	f107 0310 	add.w	r3, r7, #16
 801bde6:	61fb      	str	r3, [r7, #28]
 801bde8:	e090      	b.n	801bf0c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	681a      	ldr	r2, [r3, #0]
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	3304      	adds	r3, #4
 801bdf2:	681b      	ldr	r3, [r3, #0]
 801bdf4:	405a      	eors	r2, r3
 801bdf6:	68fb      	ldr	r3, [r7, #12]
 801bdf8:	3308      	adds	r3, #8
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	4013      	ands	r3, r2
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d012      	beq.n	801be28 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801be08:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801be0c:	4293      	cmp	r3, r2
 801be0e:	d00b      	beq.n	801be28 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801be10:	68fb      	ldr	r3, [r7, #12]
 801be12:	330c      	adds	r3, #12
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	2b00      	cmp	r3, #0
 801be18:	d003      	beq.n	801be22 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801be1a:	68fb      	ldr	r3, [r7, #12]
 801be1c:	330c      	adds	r3, #12
 801be1e:	61bb      	str	r3, [r7, #24]
 801be20:	e002      	b.n	801be28 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801be22:	f06f 0303 	mvn.w	r3, #3
 801be26:	e07d      	b.n	801bf24 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801be28:	4b46      	ldr	r3, [pc, #280]	; (801bf44 <etharp_output+0x1fc>)
 801be2a:	781b      	ldrb	r3, [r3, #0]
 801be2c:	4619      	mov	r1, r3
 801be2e:	4a46      	ldr	r2, [pc, #280]	; (801bf48 <etharp_output+0x200>)
 801be30:	460b      	mov	r3, r1
 801be32:	005b      	lsls	r3, r3, #1
 801be34:	440b      	add	r3, r1
 801be36:	00db      	lsls	r3, r3, #3
 801be38:	4413      	add	r3, r2
 801be3a:	3314      	adds	r3, #20
 801be3c:	781b      	ldrb	r3, [r3, #0]
 801be3e:	2b01      	cmp	r3, #1
 801be40:	d925      	bls.n	801be8e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801be42:	4b40      	ldr	r3, [pc, #256]	; (801bf44 <etharp_output+0x1fc>)
 801be44:	781b      	ldrb	r3, [r3, #0]
 801be46:	4619      	mov	r1, r3
 801be48:	4a3f      	ldr	r2, [pc, #252]	; (801bf48 <etharp_output+0x200>)
 801be4a:	460b      	mov	r3, r1
 801be4c:	005b      	lsls	r3, r3, #1
 801be4e:	440b      	add	r3, r1
 801be50:	00db      	lsls	r3, r3, #3
 801be52:	4413      	add	r3, r2
 801be54:	3308      	adds	r3, #8
 801be56:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801be58:	68fa      	ldr	r2, [r7, #12]
 801be5a:	429a      	cmp	r2, r3
 801be5c:	d117      	bne.n	801be8e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801be5e:	69bb      	ldr	r3, [r7, #24]
 801be60:	681a      	ldr	r2, [r3, #0]
 801be62:	4b38      	ldr	r3, [pc, #224]	; (801bf44 <etharp_output+0x1fc>)
 801be64:	781b      	ldrb	r3, [r3, #0]
 801be66:	4618      	mov	r0, r3
 801be68:	4937      	ldr	r1, [pc, #220]	; (801bf48 <etharp_output+0x200>)
 801be6a:	4603      	mov	r3, r0
 801be6c:	005b      	lsls	r3, r3, #1
 801be6e:	4403      	add	r3, r0
 801be70:	00db      	lsls	r3, r3, #3
 801be72:	440b      	add	r3, r1
 801be74:	3304      	adds	r3, #4
 801be76:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801be78:	429a      	cmp	r2, r3
 801be7a:	d108      	bne.n	801be8e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801be7c:	4b31      	ldr	r3, [pc, #196]	; (801bf44 <etharp_output+0x1fc>)
 801be7e:	781b      	ldrb	r3, [r3, #0]
 801be80:	461a      	mov	r2, r3
 801be82:	68b9      	ldr	r1, [r7, #8]
 801be84:	68f8      	ldr	r0, [r7, #12]
 801be86:	f7ff fec5 	bl	801bc14 <etharp_output_to_arp_index>
 801be8a:	4603      	mov	r3, r0
 801be8c:	e04a      	b.n	801bf24 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801be8e:	2300      	movs	r3, #0
 801be90:	75fb      	strb	r3, [r7, #23]
 801be92:	e031      	b.n	801bef8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801be94:	7dfa      	ldrb	r2, [r7, #23]
 801be96:	492c      	ldr	r1, [pc, #176]	; (801bf48 <etharp_output+0x200>)
 801be98:	4613      	mov	r3, r2
 801be9a:	005b      	lsls	r3, r3, #1
 801be9c:	4413      	add	r3, r2
 801be9e:	00db      	lsls	r3, r3, #3
 801bea0:	440b      	add	r3, r1
 801bea2:	3314      	adds	r3, #20
 801bea4:	781b      	ldrb	r3, [r3, #0]
 801bea6:	2b01      	cmp	r3, #1
 801bea8:	d923      	bls.n	801bef2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801beaa:	7dfa      	ldrb	r2, [r7, #23]
 801beac:	4926      	ldr	r1, [pc, #152]	; (801bf48 <etharp_output+0x200>)
 801beae:	4613      	mov	r3, r2
 801beb0:	005b      	lsls	r3, r3, #1
 801beb2:	4413      	add	r3, r2
 801beb4:	00db      	lsls	r3, r3, #3
 801beb6:	440b      	add	r3, r1
 801beb8:	3308      	adds	r3, #8
 801beba:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801bebc:	68fa      	ldr	r2, [r7, #12]
 801bebe:	429a      	cmp	r2, r3
 801bec0:	d117      	bne.n	801bef2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801bec2:	69bb      	ldr	r3, [r7, #24]
 801bec4:	6819      	ldr	r1, [r3, #0]
 801bec6:	7dfa      	ldrb	r2, [r7, #23]
 801bec8:	481f      	ldr	r0, [pc, #124]	; (801bf48 <etharp_output+0x200>)
 801beca:	4613      	mov	r3, r2
 801becc:	005b      	lsls	r3, r3, #1
 801bece:	4413      	add	r3, r2
 801bed0:	00db      	lsls	r3, r3, #3
 801bed2:	4403      	add	r3, r0
 801bed4:	3304      	adds	r3, #4
 801bed6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801bed8:	4299      	cmp	r1, r3
 801beda:	d10a      	bne.n	801bef2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801bedc:	4a19      	ldr	r2, [pc, #100]	; (801bf44 <etharp_output+0x1fc>)
 801bede:	7dfb      	ldrb	r3, [r7, #23]
 801bee0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801bee2:	7dfb      	ldrb	r3, [r7, #23]
 801bee4:	461a      	mov	r2, r3
 801bee6:	68b9      	ldr	r1, [r7, #8]
 801bee8:	68f8      	ldr	r0, [r7, #12]
 801beea:	f7ff fe93 	bl	801bc14 <etharp_output_to_arp_index>
 801beee:	4603      	mov	r3, r0
 801bef0:	e018      	b.n	801bf24 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801bef2:	7dfb      	ldrb	r3, [r7, #23]
 801bef4:	3301      	adds	r3, #1
 801bef6:	75fb      	strb	r3, [r7, #23]
 801bef8:	7dfb      	ldrb	r3, [r7, #23]
 801befa:	2b09      	cmp	r3, #9
 801befc:	d9ca      	bls.n	801be94 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801befe:	68ba      	ldr	r2, [r7, #8]
 801bf00:	69b9      	ldr	r1, [r7, #24]
 801bf02:	68f8      	ldr	r0, [r7, #12]
 801bf04:	f000 f822 	bl	801bf4c <etharp_query>
 801bf08:	4603      	mov	r3, r0
 801bf0a:	e00b      	b.n	801bf24 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801bf0c:	68fb      	ldr	r3, [r7, #12]
 801bf0e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801bf12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801bf16:	9300      	str	r3, [sp, #0]
 801bf18:	69fb      	ldr	r3, [r7, #28]
 801bf1a:	68b9      	ldr	r1, [r7, #8]
 801bf1c:	68f8      	ldr	r0, [r7, #12]
 801bf1e:	f001 fd3f 	bl	801d9a0 <ethernet_output>
 801bf22:	4603      	mov	r3, r0
}
 801bf24:	4618      	mov	r0, r3
 801bf26:	3720      	adds	r7, #32
 801bf28:	46bd      	mov	sp, r7
 801bf2a:	bd80      	pop	{r7, pc}
 801bf2c:	080262b4 	.word	0x080262b4
 801bf30:	08026404 	.word	0x08026404
 801bf34:	0802632c 	.word	0x0802632c
 801bf38:	08026454 	.word	0x08026454
 801bf3c:	080263f4 	.word	0x080263f4
 801bf40:	08026c28 	.word	0x08026c28
 801bf44:	20006eec 	.word	0x20006eec
 801bf48:	20006dfc 	.word	0x20006dfc

0801bf4c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801bf4c:	b580      	push	{r7, lr}
 801bf4e:	b08c      	sub	sp, #48	; 0x30
 801bf50:	af02      	add	r7, sp, #8
 801bf52:	60f8      	str	r0, [r7, #12]
 801bf54:	60b9      	str	r1, [r7, #8]
 801bf56:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801bf58:	68fb      	ldr	r3, [r7, #12]
 801bf5a:	3326      	adds	r3, #38	; 0x26
 801bf5c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801bf5e:	23ff      	movs	r3, #255	; 0xff
 801bf60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801bf64:	2300      	movs	r3, #0
 801bf66:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801bf68:	68bb      	ldr	r3, [r7, #8]
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	68f9      	ldr	r1, [r7, #12]
 801bf6e:	4618      	mov	r0, r3
 801bf70:	f000 fe0e 	bl	801cb90 <ip4_addr_isbroadcast_u32>
 801bf74:	4603      	mov	r3, r0
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d10c      	bne.n	801bf94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801bf7a:	68bb      	ldr	r3, [r7, #8]
 801bf7c:	681b      	ldr	r3, [r3, #0]
 801bf7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801bf82:	2be0      	cmp	r3, #224	; 0xe0
 801bf84:	d006      	beq.n	801bf94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801bf86:	68bb      	ldr	r3, [r7, #8]
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d003      	beq.n	801bf94 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801bf8c:	68bb      	ldr	r3, [r7, #8]
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d102      	bne.n	801bf9a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801bf94:	f06f 030f 	mvn.w	r3, #15
 801bf98:	e101      	b.n	801c19e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801bf9a:	68fa      	ldr	r2, [r7, #12]
 801bf9c:	2101      	movs	r1, #1
 801bf9e:	68b8      	ldr	r0, [r7, #8]
 801bfa0:	f7ff fb60 	bl	801b664 <etharp_find_entry>
 801bfa4:	4603      	mov	r3, r0
 801bfa6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801bfa8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	da02      	bge.n	801bfb6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801bfb0:	8a7b      	ldrh	r3, [r7, #18]
 801bfb2:	b25b      	sxtb	r3, r3
 801bfb4:	e0f3      	b.n	801c19e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801bfb6:	8a7b      	ldrh	r3, [r7, #18]
 801bfb8:	2b7e      	cmp	r3, #126	; 0x7e
 801bfba:	d906      	bls.n	801bfca <etharp_query+0x7e>
 801bfbc:	4b7a      	ldr	r3, [pc, #488]	; (801c1a8 <etharp_query+0x25c>)
 801bfbe:	f240 32c1 	movw	r2, #961	; 0x3c1
 801bfc2:	497a      	ldr	r1, [pc, #488]	; (801c1ac <etharp_query+0x260>)
 801bfc4:	487a      	ldr	r0, [pc, #488]	; (801c1b0 <etharp_query+0x264>)
 801bfc6:	f002 ff99 	bl	801eefc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801bfca:	8a7b      	ldrh	r3, [r7, #18]
 801bfcc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801bfce:	7c7a      	ldrb	r2, [r7, #17]
 801bfd0:	4978      	ldr	r1, [pc, #480]	; (801c1b4 <etharp_query+0x268>)
 801bfd2:	4613      	mov	r3, r2
 801bfd4:	005b      	lsls	r3, r3, #1
 801bfd6:	4413      	add	r3, r2
 801bfd8:	00db      	lsls	r3, r3, #3
 801bfda:	440b      	add	r3, r1
 801bfdc:	3314      	adds	r3, #20
 801bfde:	781b      	ldrb	r3, [r3, #0]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d115      	bne.n	801c010 <etharp_query+0xc4>
    is_new_entry = 1;
 801bfe4:	2301      	movs	r3, #1
 801bfe6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801bfe8:	7c7a      	ldrb	r2, [r7, #17]
 801bfea:	4972      	ldr	r1, [pc, #456]	; (801c1b4 <etharp_query+0x268>)
 801bfec:	4613      	mov	r3, r2
 801bfee:	005b      	lsls	r3, r3, #1
 801bff0:	4413      	add	r3, r2
 801bff2:	00db      	lsls	r3, r3, #3
 801bff4:	440b      	add	r3, r1
 801bff6:	3314      	adds	r3, #20
 801bff8:	2201      	movs	r2, #1
 801bffa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801bffc:	7c7a      	ldrb	r2, [r7, #17]
 801bffe:	496d      	ldr	r1, [pc, #436]	; (801c1b4 <etharp_query+0x268>)
 801c000:	4613      	mov	r3, r2
 801c002:	005b      	lsls	r3, r3, #1
 801c004:	4413      	add	r3, r2
 801c006:	00db      	lsls	r3, r3, #3
 801c008:	440b      	add	r3, r1
 801c00a:	3308      	adds	r3, #8
 801c00c:	68fa      	ldr	r2, [r7, #12]
 801c00e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801c010:	7c7a      	ldrb	r2, [r7, #17]
 801c012:	4968      	ldr	r1, [pc, #416]	; (801c1b4 <etharp_query+0x268>)
 801c014:	4613      	mov	r3, r2
 801c016:	005b      	lsls	r3, r3, #1
 801c018:	4413      	add	r3, r2
 801c01a:	00db      	lsls	r3, r3, #3
 801c01c:	440b      	add	r3, r1
 801c01e:	3314      	adds	r3, #20
 801c020:	781b      	ldrb	r3, [r3, #0]
 801c022:	2b01      	cmp	r3, #1
 801c024:	d011      	beq.n	801c04a <etharp_query+0xfe>
 801c026:	7c7a      	ldrb	r2, [r7, #17]
 801c028:	4962      	ldr	r1, [pc, #392]	; (801c1b4 <etharp_query+0x268>)
 801c02a:	4613      	mov	r3, r2
 801c02c:	005b      	lsls	r3, r3, #1
 801c02e:	4413      	add	r3, r2
 801c030:	00db      	lsls	r3, r3, #3
 801c032:	440b      	add	r3, r1
 801c034:	3314      	adds	r3, #20
 801c036:	781b      	ldrb	r3, [r3, #0]
 801c038:	2b01      	cmp	r3, #1
 801c03a:	d806      	bhi.n	801c04a <etharp_query+0xfe>
 801c03c:	4b5a      	ldr	r3, [pc, #360]	; (801c1a8 <etharp_query+0x25c>)
 801c03e:	f240 32cd 	movw	r2, #973	; 0x3cd
 801c042:	495d      	ldr	r1, [pc, #372]	; (801c1b8 <etharp_query+0x26c>)
 801c044:	485a      	ldr	r0, [pc, #360]	; (801c1b0 <etharp_query+0x264>)
 801c046:	f002 ff59 	bl	801eefc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801c04a:	6a3b      	ldr	r3, [r7, #32]
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d102      	bne.n	801c056 <etharp_query+0x10a>
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	2b00      	cmp	r3, #0
 801c054:	d10c      	bne.n	801c070 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801c056:	68b9      	ldr	r1, [r7, #8]
 801c058:	68f8      	ldr	r0, [r7, #12]
 801c05a:	f000 f963 	bl	801c324 <etharp_request>
 801c05e:	4603      	mov	r3, r0
 801c060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d102      	bne.n	801c070 <etharp_query+0x124>
      return result;
 801c06a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801c06e:	e096      	b.n	801c19e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	2b00      	cmp	r3, #0
 801c074:	d106      	bne.n	801c084 <etharp_query+0x138>
 801c076:	4b4c      	ldr	r3, [pc, #304]	; (801c1a8 <etharp_query+0x25c>)
 801c078:	f240 32e1 	movw	r2, #993	; 0x3e1
 801c07c:	494f      	ldr	r1, [pc, #316]	; (801c1bc <etharp_query+0x270>)
 801c07e:	484c      	ldr	r0, [pc, #304]	; (801c1b0 <etharp_query+0x264>)
 801c080:	f002 ff3c 	bl	801eefc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801c084:	7c7a      	ldrb	r2, [r7, #17]
 801c086:	494b      	ldr	r1, [pc, #300]	; (801c1b4 <etharp_query+0x268>)
 801c088:	4613      	mov	r3, r2
 801c08a:	005b      	lsls	r3, r3, #1
 801c08c:	4413      	add	r3, r2
 801c08e:	00db      	lsls	r3, r3, #3
 801c090:	440b      	add	r3, r1
 801c092:	3314      	adds	r3, #20
 801c094:	781b      	ldrb	r3, [r3, #0]
 801c096:	2b01      	cmp	r3, #1
 801c098:	d917      	bls.n	801c0ca <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801c09a:	4a49      	ldr	r2, [pc, #292]	; (801c1c0 <etharp_query+0x274>)
 801c09c:	7c7b      	ldrb	r3, [r7, #17]
 801c09e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801c0a0:	7c7a      	ldrb	r2, [r7, #17]
 801c0a2:	4613      	mov	r3, r2
 801c0a4:	005b      	lsls	r3, r3, #1
 801c0a6:	4413      	add	r3, r2
 801c0a8:	00db      	lsls	r3, r3, #3
 801c0aa:	3308      	adds	r3, #8
 801c0ac:	4a41      	ldr	r2, [pc, #260]	; (801c1b4 <etharp_query+0x268>)
 801c0ae:	4413      	add	r3, r2
 801c0b0:	3304      	adds	r3, #4
 801c0b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c0b6:	9200      	str	r2, [sp, #0]
 801c0b8:	697a      	ldr	r2, [r7, #20]
 801c0ba:	6879      	ldr	r1, [r7, #4]
 801c0bc:	68f8      	ldr	r0, [r7, #12]
 801c0be:	f001 fc6f 	bl	801d9a0 <ethernet_output>
 801c0c2:	4603      	mov	r3, r0
 801c0c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c0c8:	e067      	b.n	801c19a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c0ca:	7c7a      	ldrb	r2, [r7, #17]
 801c0cc:	4939      	ldr	r1, [pc, #228]	; (801c1b4 <etharp_query+0x268>)
 801c0ce:	4613      	mov	r3, r2
 801c0d0:	005b      	lsls	r3, r3, #1
 801c0d2:	4413      	add	r3, r2
 801c0d4:	00db      	lsls	r3, r3, #3
 801c0d6:	440b      	add	r3, r1
 801c0d8:	3314      	adds	r3, #20
 801c0da:	781b      	ldrb	r3, [r3, #0]
 801c0dc:	2b01      	cmp	r3, #1
 801c0de:	d15c      	bne.n	801c19a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801c0e0:	2300      	movs	r3, #0
 801c0e2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c0e8:	e01c      	b.n	801c124 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801c0ea:	69fb      	ldr	r3, [r7, #28]
 801c0ec:	895a      	ldrh	r2, [r3, #10]
 801c0ee:	69fb      	ldr	r3, [r7, #28]
 801c0f0:	891b      	ldrh	r3, [r3, #8]
 801c0f2:	429a      	cmp	r2, r3
 801c0f4:	d10a      	bne.n	801c10c <etharp_query+0x1c0>
 801c0f6:	69fb      	ldr	r3, [r7, #28]
 801c0f8:	681b      	ldr	r3, [r3, #0]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d006      	beq.n	801c10c <etharp_query+0x1c0>
 801c0fe:	4b2a      	ldr	r3, [pc, #168]	; (801c1a8 <etharp_query+0x25c>)
 801c100:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801c104:	492f      	ldr	r1, [pc, #188]	; (801c1c4 <etharp_query+0x278>)
 801c106:	482a      	ldr	r0, [pc, #168]	; (801c1b0 <etharp_query+0x264>)
 801c108:	f002 fef8 	bl	801eefc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801c10c:	69fb      	ldr	r3, [r7, #28]
 801c10e:	7b1b      	ldrb	r3, [r3, #12]
 801c110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c114:	2b00      	cmp	r3, #0
 801c116:	d002      	beq.n	801c11e <etharp_query+0x1d2>
        copy_needed = 1;
 801c118:	2301      	movs	r3, #1
 801c11a:	61bb      	str	r3, [r7, #24]
        break;
 801c11c:	e005      	b.n	801c12a <etharp_query+0x1de>
      }
      p = p->next;
 801c11e:	69fb      	ldr	r3, [r7, #28]
 801c120:	681b      	ldr	r3, [r3, #0]
 801c122:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c124:	69fb      	ldr	r3, [r7, #28]
 801c126:	2b00      	cmp	r3, #0
 801c128:	d1df      	bne.n	801c0ea <etharp_query+0x19e>
    }
    if (copy_needed) {
 801c12a:	69bb      	ldr	r3, [r7, #24]
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d007      	beq.n	801c140 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801c130:	687a      	ldr	r2, [r7, #4]
 801c132:	f44f 7120 	mov.w	r1, #640	; 0x280
 801c136:	200e      	movs	r0, #14
 801c138:	f7f8 fb6c 	bl	8014814 <pbuf_clone>
 801c13c:	61f8      	str	r0, [r7, #28]
 801c13e:	e004      	b.n	801c14a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c144:	69f8      	ldr	r0, [r7, #28]
 801c146:	f7f8 f993 	bl	8014470 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c14a:	69fb      	ldr	r3, [r7, #28]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d021      	beq.n	801c194 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c150:	7c7a      	ldrb	r2, [r7, #17]
 801c152:	4918      	ldr	r1, [pc, #96]	; (801c1b4 <etharp_query+0x268>)
 801c154:	4613      	mov	r3, r2
 801c156:	005b      	lsls	r3, r3, #1
 801c158:	4413      	add	r3, r2
 801c15a:	00db      	lsls	r3, r3, #3
 801c15c:	440b      	add	r3, r1
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	2b00      	cmp	r3, #0
 801c162:	d00a      	beq.n	801c17a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c164:	7c7a      	ldrb	r2, [r7, #17]
 801c166:	4913      	ldr	r1, [pc, #76]	; (801c1b4 <etharp_query+0x268>)
 801c168:	4613      	mov	r3, r2
 801c16a:	005b      	lsls	r3, r3, #1
 801c16c:	4413      	add	r3, r2
 801c16e:	00db      	lsls	r3, r3, #3
 801c170:	440b      	add	r3, r1
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	4618      	mov	r0, r3
 801c176:	f7f8 f8d5 	bl	8014324 <pbuf_free>
      }
      arp_table[i].q = p;
 801c17a:	7c7a      	ldrb	r2, [r7, #17]
 801c17c:	490d      	ldr	r1, [pc, #52]	; (801c1b4 <etharp_query+0x268>)
 801c17e:	4613      	mov	r3, r2
 801c180:	005b      	lsls	r3, r3, #1
 801c182:	4413      	add	r3, r2
 801c184:	00db      	lsls	r3, r3, #3
 801c186:	440b      	add	r3, r1
 801c188:	69fa      	ldr	r2, [r7, #28]
 801c18a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c18c:	2300      	movs	r3, #0
 801c18e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c192:	e002      	b.n	801c19a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c194:	23ff      	movs	r3, #255	; 0xff
 801c196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801c19a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801c19e:	4618      	mov	r0, r3
 801c1a0:	3728      	adds	r7, #40	; 0x28
 801c1a2:	46bd      	mov	sp, r7
 801c1a4:	bd80      	pop	{r7, pc}
 801c1a6:	bf00      	nop
 801c1a8:	080262b4 	.word	0x080262b4
 801c1ac:	08026460 	.word	0x08026460
 801c1b0:	0802632c 	.word	0x0802632c
 801c1b4:	20006dfc 	.word	0x20006dfc
 801c1b8:	08026470 	.word	0x08026470
 801c1bc:	08026454 	.word	0x08026454
 801c1c0:	20006eec 	.word	0x20006eec
 801c1c4:	08026498 	.word	0x08026498

0801c1c8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c1c8:	b580      	push	{r7, lr}
 801c1ca:	b08a      	sub	sp, #40	; 0x28
 801c1cc:	af02      	add	r7, sp, #8
 801c1ce:	60f8      	str	r0, [r7, #12]
 801c1d0:	60b9      	str	r1, [r7, #8]
 801c1d2:	607a      	str	r2, [r7, #4]
 801c1d4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c1d6:	2300      	movs	r3, #0
 801c1d8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c1da:	68fb      	ldr	r3, [r7, #12]
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	d106      	bne.n	801c1ee <etharp_raw+0x26>
 801c1e0:	4b3a      	ldr	r3, [pc, #232]	; (801c2cc <etharp_raw+0x104>)
 801c1e2:	f240 4257 	movw	r2, #1111	; 0x457
 801c1e6:	493a      	ldr	r1, [pc, #232]	; (801c2d0 <etharp_raw+0x108>)
 801c1e8:	483a      	ldr	r0, [pc, #232]	; (801c2d4 <etharp_raw+0x10c>)
 801c1ea:	f002 fe87 	bl	801eefc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c1ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c1f2:	211c      	movs	r1, #28
 801c1f4:	200e      	movs	r0, #14
 801c1f6:	f7f7 fdb1 	bl	8013d5c <pbuf_alloc>
 801c1fa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c1fc:	69bb      	ldr	r3, [r7, #24]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d102      	bne.n	801c208 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801c202:	f04f 33ff 	mov.w	r3, #4294967295
 801c206:	e05d      	b.n	801c2c4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c208:	69bb      	ldr	r3, [r7, #24]
 801c20a:	895b      	ldrh	r3, [r3, #10]
 801c20c:	2b1b      	cmp	r3, #27
 801c20e:	d806      	bhi.n	801c21e <etharp_raw+0x56>
 801c210:	4b2e      	ldr	r3, [pc, #184]	; (801c2cc <etharp_raw+0x104>)
 801c212:	f240 4262 	movw	r2, #1122	; 0x462
 801c216:	4930      	ldr	r1, [pc, #192]	; (801c2d8 <etharp_raw+0x110>)
 801c218:	482e      	ldr	r0, [pc, #184]	; (801c2d4 <etharp_raw+0x10c>)
 801c21a:	f002 fe6f 	bl	801eefc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c21e:	69bb      	ldr	r3, [r7, #24]
 801c220:	685b      	ldr	r3, [r3, #4]
 801c222:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c224:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c226:	4618      	mov	r0, r3
 801c228:	f7f6 fd34 	bl	8012c94 <lwip_htons>
 801c22c:	4603      	mov	r3, r0
 801c22e:	461a      	mov	r2, r3
 801c230:	697b      	ldr	r3, [r7, #20]
 801c232:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c23a:	2b06      	cmp	r3, #6
 801c23c:	d006      	beq.n	801c24c <etharp_raw+0x84>
 801c23e:	4b23      	ldr	r3, [pc, #140]	; (801c2cc <etharp_raw+0x104>)
 801c240:	f240 4269 	movw	r2, #1129	; 0x469
 801c244:	4925      	ldr	r1, [pc, #148]	; (801c2dc <etharp_raw+0x114>)
 801c246:	4823      	ldr	r0, [pc, #140]	; (801c2d4 <etharp_raw+0x10c>)
 801c248:	f002 fe58 	bl	801eefc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c24c:	697b      	ldr	r3, [r7, #20]
 801c24e:	3308      	adds	r3, #8
 801c250:	2206      	movs	r2, #6
 801c252:	6839      	ldr	r1, [r7, #0]
 801c254:	4618      	mov	r0, r3
 801c256:	f001 fefd 	bl	801e054 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c25a:	697b      	ldr	r3, [r7, #20]
 801c25c:	3312      	adds	r3, #18
 801c25e:	2206      	movs	r2, #6
 801c260:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c262:	4618      	mov	r0, r3
 801c264:	f001 fef6 	bl	801e054 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c268:	697b      	ldr	r3, [r7, #20]
 801c26a:	330e      	adds	r3, #14
 801c26c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c26e:	6812      	ldr	r2, [r2, #0]
 801c270:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c272:	697b      	ldr	r3, [r7, #20]
 801c274:	3318      	adds	r3, #24
 801c276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c278:	6812      	ldr	r2, [r2, #0]
 801c27a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c27c:	697b      	ldr	r3, [r7, #20]
 801c27e:	2200      	movs	r2, #0
 801c280:	701a      	strb	r2, [r3, #0]
 801c282:	2200      	movs	r2, #0
 801c284:	f042 0201 	orr.w	r2, r2, #1
 801c288:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c28a:	697b      	ldr	r3, [r7, #20]
 801c28c:	2200      	movs	r2, #0
 801c28e:	f042 0208 	orr.w	r2, r2, #8
 801c292:	709a      	strb	r2, [r3, #2]
 801c294:	2200      	movs	r2, #0
 801c296:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c298:	697b      	ldr	r3, [r7, #20]
 801c29a:	2206      	movs	r2, #6
 801c29c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c29e:	697b      	ldr	r3, [r7, #20]
 801c2a0:	2204      	movs	r2, #4
 801c2a2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c2a4:	f640 0306 	movw	r3, #2054	; 0x806
 801c2a8:	9300      	str	r3, [sp, #0]
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	68ba      	ldr	r2, [r7, #8]
 801c2ae:	69b9      	ldr	r1, [r7, #24]
 801c2b0:	68f8      	ldr	r0, [r7, #12]
 801c2b2:	f001 fb75 	bl	801d9a0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801c2b6:	69b8      	ldr	r0, [r7, #24]
 801c2b8:	f7f8 f834 	bl	8014324 <pbuf_free>
  p = NULL;
 801c2bc:	2300      	movs	r3, #0
 801c2be:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c2c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c2c4:	4618      	mov	r0, r3
 801c2c6:	3720      	adds	r7, #32
 801c2c8:	46bd      	mov	sp, r7
 801c2ca:	bd80      	pop	{r7, pc}
 801c2cc:	080262b4 	.word	0x080262b4
 801c2d0:	08026404 	.word	0x08026404
 801c2d4:	0802632c 	.word	0x0802632c
 801c2d8:	080264b4 	.word	0x080264b4
 801c2dc:	080264e8 	.word	0x080264e8

0801c2e0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c2e0:	b580      	push	{r7, lr}
 801c2e2:	b088      	sub	sp, #32
 801c2e4:	af04      	add	r7, sp, #16
 801c2e6:	60f8      	str	r0, [r7, #12]
 801c2e8:	60b9      	str	r1, [r7, #8]
 801c2ea:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c2f2:	68fb      	ldr	r3, [r7, #12]
 801c2f4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801c2f8:	68fb      	ldr	r3, [r7, #12]
 801c2fa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c2fc:	2201      	movs	r2, #1
 801c2fe:	9203      	str	r2, [sp, #12]
 801c300:	68ba      	ldr	r2, [r7, #8]
 801c302:	9202      	str	r2, [sp, #8]
 801c304:	4a06      	ldr	r2, [pc, #24]	; (801c320 <etharp_request_dst+0x40>)
 801c306:	9201      	str	r2, [sp, #4]
 801c308:	9300      	str	r3, [sp, #0]
 801c30a:	4603      	mov	r3, r0
 801c30c:	687a      	ldr	r2, [r7, #4]
 801c30e:	68f8      	ldr	r0, [r7, #12]
 801c310:	f7ff ff5a 	bl	801c1c8 <etharp_raw>
 801c314:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c316:	4618      	mov	r0, r3
 801c318:	3710      	adds	r7, #16
 801c31a:	46bd      	mov	sp, r7
 801c31c:	bd80      	pop	{r7, pc}
 801c31e:	bf00      	nop
 801c320:	08026c30 	.word	0x08026c30

0801c324 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c324:	b580      	push	{r7, lr}
 801c326:	b082      	sub	sp, #8
 801c328:	af00      	add	r7, sp, #0
 801c32a:	6078      	str	r0, [r7, #4]
 801c32c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801c32e:	4a05      	ldr	r2, [pc, #20]	; (801c344 <etharp_request+0x20>)
 801c330:	6839      	ldr	r1, [r7, #0]
 801c332:	6878      	ldr	r0, [r7, #4]
 801c334:	f7ff ffd4 	bl	801c2e0 <etharp_request_dst>
 801c338:	4603      	mov	r3, r0
}
 801c33a:	4618      	mov	r0, r3
 801c33c:	3708      	adds	r7, #8
 801c33e:	46bd      	mov	sp, r7
 801c340:	bd80      	pop	{r7, pc}
 801c342:	bf00      	nop
 801c344:	08026c28 	.word	0x08026c28

0801c348 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801c348:	b580      	push	{r7, lr}
 801c34a:	b08e      	sub	sp, #56	; 0x38
 801c34c:	af04      	add	r7, sp, #16
 801c34e:	6078      	str	r0, [r7, #4]
 801c350:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801c352:	4b79      	ldr	r3, [pc, #484]	; (801c538 <icmp_input+0x1f0>)
 801c354:	689b      	ldr	r3, [r3, #8]
 801c356:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c35a:	781b      	ldrb	r3, [r3, #0]
 801c35c:	f003 030f 	and.w	r3, r3, #15
 801c360:	b2db      	uxtb	r3, r3
 801c362:	009b      	lsls	r3, r3, #2
 801c364:	b2db      	uxtb	r3, r3
 801c366:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801c368:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c36a:	2b13      	cmp	r3, #19
 801c36c:	f240 80cd 	bls.w	801c50a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	895b      	ldrh	r3, [r3, #10]
 801c374:	2b03      	cmp	r3, #3
 801c376:	f240 80ca 	bls.w	801c50e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	685b      	ldr	r3, [r3, #4]
 801c37e:	781b      	ldrb	r3, [r3, #0]
 801c380:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801c384:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801c388:	2b00      	cmp	r3, #0
 801c38a:	f000 80b7 	beq.w	801c4fc <icmp_input+0x1b4>
 801c38e:	2b08      	cmp	r3, #8
 801c390:	f040 80b7 	bne.w	801c502 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801c394:	4b69      	ldr	r3, [pc, #420]	; (801c53c <icmp_input+0x1f4>)
 801c396:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c398:	4b67      	ldr	r3, [pc, #412]	; (801c538 <icmp_input+0x1f0>)
 801c39a:	695b      	ldr	r3, [r3, #20]
 801c39c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c3a0:	2be0      	cmp	r3, #224	; 0xe0
 801c3a2:	f000 80bb 	beq.w	801c51c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801c3a6:	4b64      	ldr	r3, [pc, #400]	; (801c538 <icmp_input+0x1f0>)
 801c3a8:	695b      	ldr	r3, [r3, #20]
 801c3aa:	4a63      	ldr	r2, [pc, #396]	; (801c538 <icmp_input+0x1f0>)
 801c3ac:	6812      	ldr	r2, [r2, #0]
 801c3ae:	4611      	mov	r1, r2
 801c3b0:	4618      	mov	r0, r3
 801c3b2:	f000 fbed 	bl	801cb90 <ip4_addr_isbroadcast_u32>
 801c3b6:	4603      	mov	r3, r0
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	f040 80b1 	bne.w	801c520 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	891b      	ldrh	r3, [r3, #8]
 801c3c2:	2b07      	cmp	r3, #7
 801c3c4:	f240 80a5 	bls.w	801c512 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c3c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c3ca:	330e      	adds	r3, #14
 801c3cc:	4619      	mov	r1, r3
 801c3ce:	6878      	ldr	r0, [r7, #4]
 801c3d0:	f7f7 ff12 	bl	80141f8 <pbuf_add_header>
 801c3d4:	4603      	mov	r3, r0
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	d04b      	beq.n	801c472 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	891a      	ldrh	r2, [r3, #8]
 801c3de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c3e0:	4413      	add	r3, r2
 801c3e2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	891b      	ldrh	r3, [r3, #8]
 801c3e8:	8b7a      	ldrh	r2, [r7, #26]
 801c3ea:	429a      	cmp	r2, r3
 801c3ec:	f0c0 809a 	bcc.w	801c524 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801c3f0:	8b7b      	ldrh	r3, [r7, #26]
 801c3f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c3f6:	4619      	mov	r1, r3
 801c3f8:	200e      	movs	r0, #14
 801c3fa:	f7f7 fcaf 	bl	8013d5c <pbuf_alloc>
 801c3fe:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801c400:	697b      	ldr	r3, [r7, #20]
 801c402:	2b00      	cmp	r3, #0
 801c404:	f000 8090 	beq.w	801c528 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801c408:	697b      	ldr	r3, [r7, #20]
 801c40a:	895b      	ldrh	r3, [r3, #10]
 801c40c:	461a      	mov	r2, r3
 801c40e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c410:	3308      	adds	r3, #8
 801c412:	429a      	cmp	r2, r3
 801c414:	d203      	bcs.n	801c41e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801c416:	6978      	ldr	r0, [r7, #20]
 801c418:	f7f7 ff84 	bl	8014324 <pbuf_free>
          goto icmperr;
 801c41c:	e085      	b.n	801c52a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801c41e:	697b      	ldr	r3, [r7, #20]
 801c420:	685b      	ldr	r3, [r3, #4]
 801c422:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c426:	4618      	mov	r0, r3
 801c428:	f001 fe14 	bl	801e054 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801c42c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c42e:	4619      	mov	r1, r3
 801c430:	6978      	ldr	r0, [r7, #20]
 801c432:	f7f7 fef1 	bl	8014218 <pbuf_remove_header>
 801c436:	4603      	mov	r3, r0
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d009      	beq.n	801c450 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801c43c:	4b40      	ldr	r3, [pc, #256]	; (801c540 <icmp_input+0x1f8>)
 801c43e:	22b6      	movs	r2, #182	; 0xb6
 801c440:	4940      	ldr	r1, [pc, #256]	; (801c544 <icmp_input+0x1fc>)
 801c442:	4841      	ldr	r0, [pc, #260]	; (801c548 <icmp_input+0x200>)
 801c444:	f002 fd5a 	bl	801eefc <iprintf>
          pbuf_free(r);
 801c448:	6978      	ldr	r0, [r7, #20]
 801c44a:	f7f7 ff6b 	bl	8014324 <pbuf_free>
          goto icmperr;
 801c44e:	e06c      	b.n	801c52a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801c450:	6879      	ldr	r1, [r7, #4]
 801c452:	6978      	ldr	r0, [r7, #20]
 801c454:	f7f8 f89a 	bl	801458c <pbuf_copy>
 801c458:	4603      	mov	r3, r0
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	d003      	beq.n	801c466 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801c45e:	6978      	ldr	r0, [r7, #20]
 801c460:	f7f7 ff60 	bl	8014324 <pbuf_free>
          goto icmperr;
 801c464:	e061      	b.n	801c52a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801c466:	6878      	ldr	r0, [r7, #4]
 801c468:	f7f7 ff5c 	bl	8014324 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801c46c:	697b      	ldr	r3, [r7, #20]
 801c46e:	607b      	str	r3, [r7, #4]
 801c470:	e00f      	b.n	801c492 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c472:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c474:	330e      	adds	r3, #14
 801c476:	4619      	mov	r1, r3
 801c478:	6878      	ldr	r0, [r7, #4]
 801c47a:	f7f7 fecd 	bl	8014218 <pbuf_remove_header>
 801c47e:	4603      	mov	r3, r0
 801c480:	2b00      	cmp	r3, #0
 801c482:	d006      	beq.n	801c492 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801c484:	4b2e      	ldr	r3, [pc, #184]	; (801c540 <icmp_input+0x1f8>)
 801c486:	22c7      	movs	r2, #199	; 0xc7
 801c488:	4930      	ldr	r1, [pc, #192]	; (801c54c <icmp_input+0x204>)
 801c48a:	482f      	ldr	r0, [pc, #188]	; (801c548 <icmp_input+0x200>)
 801c48c:	f002 fd36 	bl	801eefc <iprintf>
          goto icmperr;
 801c490:	e04b      	b.n	801c52a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	685b      	ldr	r3, [r3, #4]
 801c496:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801c498:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c49a:	4619      	mov	r1, r3
 801c49c:	6878      	ldr	r0, [r7, #4]
 801c49e:	f7f7 feab 	bl	80141f8 <pbuf_add_header>
 801c4a2:	4603      	mov	r3, r0
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	d12b      	bne.n	801c500 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	685b      	ldr	r3, [r3, #4]
 801c4ac:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c4ae:	69fb      	ldr	r3, [r7, #28]
 801c4b0:	681a      	ldr	r2, [r3, #0]
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c4b6:	4b20      	ldr	r3, [pc, #128]	; (801c538 <icmp_input+0x1f0>)
 801c4b8:	691a      	ldr	r2, [r3, #16]
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c4be:	693b      	ldr	r3, [r7, #16]
 801c4c0:	2200      	movs	r2, #0
 801c4c2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801c4c4:	693b      	ldr	r3, [r7, #16]
 801c4c6:	2200      	movs	r2, #0
 801c4c8:	709a      	strb	r2, [r3, #2]
 801c4ca:	2200      	movs	r2, #0
 801c4cc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	22ff      	movs	r2, #255	; 0xff
 801c4d2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c4d4:	68fb      	ldr	r3, [r7, #12]
 801c4d6:	2200      	movs	r2, #0
 801c4d8:	729a      	strb	r2, [r3, #10]
 801c4da:	2200      	movs	r2, #0
 801c4dc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c4de:	683b      	ldr	r3, [r7, #0]
 801c4e0:	9302      	str	r3, [sp, #8]
 801c4e2:	2301      	movs	r3, #1
 801c4e4:	9301      	str	r3, [sp, #4]
 801c4e6:	2300      	movs	r3, #0
 801c4e8:	9300      	str	r3, [sp, #0]
 801c4ea:	23ff      	movs	r3, #255	; 0xff
 801c4ec:	2200      	movs	r2, #0
 801c4ee:	69f9      	ldr	r1, [r7, #28]
 801c4f0:	6878      	ldr	r0, [r7, #4]
 801c4f2:	f000 fa75 	bl	801c9e0 <ip4_output_if>
 801c4f6:	4603      	mov	r3, r0
 801c4f8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c4fa:	e001      	b.n	801c500 <icmp_input+0x1b8>
      break;
 801c4fc:	bf00      	nop
 801c4fe:	e000      	b.n	801c502 <icmp_input+0x1ba>
      break;
 801c500:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c502:	6878      	ldr	r0, [r7, #4]
 801c504:	f7f7 ff0e 	bl	8014324 <pbuf_free>
  return;
 801c508:	e013      	b.n	801c532 <icmp_input+0x1ea>
    goto lenerr;
 801c50a:	bf00      	nop
 801c50c:	e002      	b.n	801c514 <icmp_input+0x1cc>
    goto lenerr;
 801c50e:	bf00      	nop
 801c510:	e000      	b.n	801c514 <icmp_input+0x1cc>
        goto lenerr;
 801c512:	bf00      	nop
lenerr:
  pbuf_free(p);
 801c514:	6878      	ldr	r0, [r7, #4]
 801c516:	f7f7 ff05 	bl	8014324 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c51a:	e00a      	b.n	801c532 <icmp_input+0x1ea>
        goto icmperr;
 801c51c:	bf00      	nop
 801c51e:	e004      	b.n	801c52a <icmp_input+0x1e2>
        goto icmperr;
 801c520:	bf00      	nop
 801c522:	e002      	b.n	801c52a <icmp_input+0x1e2>
          goto icmperr;
 801c524:	bf00      	nop
 801c526:	e000      	b.n	801c52a <icmp_input+0x1e2>
          goto icmperr;
 801c528:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c52a:	6878      	ldr	r0, [r7, #4]
 801c52c:	f7f7 fefa 	bl	8014324 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c530:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c532:	3728      	adds	r7, #40	; 0x28
 801c534:	46bd      	mov	sp, r7
 801c536:	bd80      	pop	{r7, pc}
 801c538:	2000a9e8 	.word	0x2000a9e8
 801c53c:	2000a9fc 	.word	0x2000a9fc
 801c540:	0802652c 	.word	0x0802652c
 801c544:	08026564 	.word	0x08026564
 801c548:	0802659c 	.word	0x0802659c
 801c54c:	080265c4 	.word	0x080265c4

0801c550 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801c550:	b580      	push	{r7, lr}
 801c552:	b082      	sub	sp, #8
 801c554:	af00      	add	r7, sp, #0
 801c556:	6078      	str	r0, [r7, #4]
 801c558:	460b      	mov	r3, r1
 801c55a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801c55c:	78fb      	ldrb	r3, [r7, #3]
 801c55e:	461a      	mov	r2, r3
 801c560:	2103      	movs	r1, #3
 801c562:	6878      	ldr	r0, [r7, #4]
 801c564:	f000 f814 	bl	801c590 <icmp_send_response>
}
 801c568:	bf00      	nop
 801c56a:	3708      	adds	r7, #8
 801c56c:	46bd      	mov	sp, r7
 801c56e:	bd80      	pop	{r7, pc}

0801c570 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801c570:	b580      	push	{r7, lr}
 801c572:	b082      	sub	sp, #8
 801c574:	af00      	add	r7, sp, #0
 801c576:	6078      	str	r0, [r7, #4]
 801c578:	460b      	mov	r3, r1
 801c57a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801c57c:	78fb      	ldrb	r3, [r7, #3]
 801c57e:	461a      	mov	r2, r3
 801c580:	210b      	movs	r1, #11
 801c582:	6878      	ldr	r0, [r7, #4]
 801c584:	f000 f804 	bl	801c590 <icmp_send_response>
}
 801c588:	bf00      	nop
 801c58a:	3708      	adds	r7, #8
 801c58c:	46bd      	mov	sp, r7
 801c58e:	bd80      	pop	{r7, pc}

0801c590 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801c590:	b580      	push	{r7, lr}
 801c592:	b08c      	sub	sp, #48	; 0x30
 801c594:	af04      	add	r7, sp, #16
 801c596:	6078      	str	r0, [r7, #4]
 801c598:	460b      	mov	r3, r1
 801c59a:	70fb      	strb	r3, [r7, #3]
 801c59c:	4613      	mov	r3, r2
 801c59e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801c5a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c5a4:	2124      	movs	r1, #36	; 0x24
 801c5a6:	2022      	movs	r0, #34	; 0x22
 801c5a8:	f7f7 fbd8 	bl	8013d5c <pbuf_alloc>
 801c5ac:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801c5ae:	69fb      	ldr	r3, [r7, #28]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d04c      	beq.n	801c64e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801c5b4:	69fb      	ldr	r3, [r7, #28]
 801c5b6:	895b      	ldrh	r3, [r3, #10]
 801c5b8:	2b23      	cmp	r3, #35	; 0x23
 801c5ba:	d806      	bhi.n	801c5ca <icmp_send_response+0x3a>
 801c5bc:	4b26      	ldr	r3, [pc, #152]	; (801c658 <icmp_send_response+0xc8>)
 801c5be:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801c5c2:	4926      	ldr	r1, [pc, #152]	; (801c65c <icmp_send_response+0xcc>)
 801c5c4:	4826      	ldr	r0, [pc, #152]	; (801c660 <icmp_send_response+0xd0>)
 801c5c6:	f002 fc99 	bl	801eefc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	685b      	ldr	r3, [r3, #4]
 801c5ce:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801c5d0:	69fb      	ldr	r3, [r7, #28]
 801c5d2:	685b      	ldr	r3, [r3, #4]
 801c5d4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801c5d6:	697b      	ldr	r3, [r7, #20]
 801c5d8:	78fa      	ldrb	r2, [r7, #3]
 801c5da:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801c5dc:	697b      	ldr	r3, [r7, #20]
 801c5de:	78ba      	ldrb	r2, [r7, #2]
 801c5e0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801c5e2:	697b      	ldr	r3, [r7, #20]
 801c5e4:	2200      	movs	r2, #0
 801c5e6:	711a      	strb	r2, [r3, #4]
 801c5e8:	2200      	movs	r2, #0
 801c5ea:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801c5ec:	697b      	ldr	r3, [r7, #20]
 801c5ee:	2200      	movs	r2, #0
 801c5f0:	719a      	strb	r2, [r3, #6]
 801c5f2:	2200      	movs	r2, #0
 801c5f4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801c5f6:	69fb      	ldr	r3, [r7, #28]
 801c5f8:	685b      	ldr	r3, [r3, #4]
 801c5fa:	f103 0008 	add.w	r0, r3, #8
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	685b      	ldr	r3, [r3, #4]
 801c602:	221c      	movs	r2, #28
 801c604:	4619      	mov	r1, r3
 801c606:	f001 fd25 	bl	801e054 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801c60a:	69bb      	ldr	r3, [r7, #24]
 801c60c:	68db      	ldr	r3, [r3, #12]
 801c60e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801c610:	f107 030c 	add.w	r3, r7, #12
 801c614:	4618      	mov	r0, r3
 801c616:	f000 f825 	bl	801c664 <ip4_route>
 801c61a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801c61c:	693b      	ldr	r3, [r7, #16]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d011      	beq.n	801c646 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801c622:	697b      	ldr	r3, [r7, #20]
 801c624:	2200      	movs	r2, #0
 801c626:	709a      	strb	r2, [r3, #2]
 801c628:	2200      	movs	r2, #0
 801c62a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801c62c:	f107 020c 	add.w	r2, r7, #12
 801c630:	693b      	ldr	r3, [r7, #16]
 801c632:	9302      	str	r3, [sp, #8]
 801c634:	2301      	movs	r3, #1
 801c636:	9301      	str	r3, [sp, #4]
 801c638:	2300      	movs	r3, #0
 801c63a:	9300      	str	r3, [sp, #0]
 801c63c:	23ff      	movs	r3, #255	; 0xff
 801c63e:	2100      	movs	r1, #0
 801c640:	69f8      	ldr	r0, [r7, #28]
 801c642:	f000 f9cd 	bl	801c9e0 <ip4_output_if>
  }
  pbuf_free(q);
 801c646:	69f8      	ldr	r0, [r7, #28]
 801c648:	f7f7 fe6c 	bl	8014324 <pbuf_free>
 801c64c:	e000      	b.n	801c650 <icmp_send_response+0xc0>
    return;
 801c64e:	bf00      	nop
}
 801c650:	3720      	adds	r7, #32
 801c652:	46bd      	mov	sp, r7
 801c654:	bd80      	pop	{r7, pc}
 801c656:	bf00      	nop
 801c658:	0802652c 	.word	0x0802652c
 801c65c:	080265f8 	.word	0x080265f8
 801c660:	0802659c 	.word	0x0802659c

0801c664 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801c664:	b480      	push	{r7}
 801c666:	b085      	sub	sp, #20
 801c668:	af00      	add	r7, sp, #0
 801c66a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801c66c:	4b33      	ldr	r3, [pc, #204]	; (801c73c <ip4_route+0xd8>)
 801c66e:	681b      	ldr	r3, [r3, #0]
 801c670:	60fb      	str	r3, [r7, #12]
 801c672:	e036      	b.n	801c6e2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c67a:	f003 0301 	and.w	r3, r3, #1
 801c67e:	b2db      	uxtb	r3, r3
 801c680:	2b00      	cmp	r3, #0
 801c682:	d02b      	beq.n	801c6dc <ip4_route+0x78>
 801c684:	68fb      	ldr	r3, [r7, #12]
 801c686:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c68a:	089b      	lsrs	r3, r3, #2
 801c68c:	f003 0301 	and.w	r3, r3, #1
 801c690:	b2db      	uxtb	r3, r3
 801c692:	2b00      	cmp	r3, #0
 801c694:	d022      	beq.n	801c6dc <ip4_route+0x78>
 801c696:	68fb      	ldr	r3, [r7, #12]
 801c698:	3304      	adds	r3, #4
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d01d      	beq.n	801c6dc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	681a      	ldr	r2, [r3, #0]
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	3304      	adds	r3, #4
 801c6a8:	681b      	ldr	r3, [r3, #0]
 801c6aa:	405a      	eors	r2, r3
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	3308      	adds	r3, #8
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	4013      	ands	r3, r2
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	d101      	bne.n	801c6bc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801c6b8:	68fb      	ldr	r3, [r7, #12]
 801c6ba:	e038      	b.n	801c72e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c6c2:	f003 0302 	and.w	r3, r3, #2
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	d108      	bne.n	801c6dc <ip4_route+0x78>
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	681a      	ldr	r2, [r3, #0]
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	330c      	adds	r3, #12
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	429a      	cmp	r2, r3
 801c6d6:	d101      	bne.n	801c6dc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	e028      	b.n	801c72e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	60fb      	str	r3, [r7, #12]
 801c6e2:	68fb      	ldr	r3, [r7, #12]
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d1c5      	bne.n	801c674 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c6e8:	4b15      	ldr	r3, [pc, #84]	; (801c740 <ip4_route+0xdc>)
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	2b00      	cmp	r3, #0
 801c6ee:	d01a      	beq.n	801c726 <ip4_route+0xc2>
 801c6f0:	4b13      	ldr	r3, [pc, #76]	; (801c740 <ip4_route+0xdc>)
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c6f8:	f003 0301 	and.w	r3, r3, #1
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d012      	beq.n	801c726 <ip4_route+0xc2>
 801c700:	4b0f      	ldr	r3, [pc, #60]	; (801c740 <ip4_route+0xdc>)
 801c702:	681b      	ldr	r3, [r3, #0]
 801c704:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c708:	f003 0304 	and.w	r3, r3, #4
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d00a      	beq.n	801c726 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c710:	4b0b      	ldr	r3, [pc, #44]	; (801c740 <ip4_route+0xdc>)
 801c712:	681b      	ldr	r3, [r3, #0]
 801c714:	3304      	adds	r3, #4
 801c716:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d004      	beq.n	801c726 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c71c:	687b      	ldr	r3, [r7, #4]
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	b2db      	uxtb	r3, r3
 801c722:	2b7f      	cmp	r3, #127	; 0x7f
 801c724:	d101      	bne.n	801c72a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801c726:	2300      	movs	r3, #0
 801c728:	e001      	b.n	801c72e <ip4_route+0xca>
  }

  return netif_default;
 801c72a:	4b05      	ldr	r3, [pc, #20]	; (801c740 <ip4_route+0xdc>)
 801c72c:	681b      	ldr	r3, [r3, #0]
}
 801c72e:	4618      	mov	r0, r3
 801c730:	3714      	adds	r7, #20
 801c732:	46bd      	mov	sp, r7
 801c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c738:	4770      	bx	lr
 801c73a:	bf00      	nop
 801c73c:	2000e0ec 	.word	0x2000e0ec
 801c740:	2000e0f0 	.word	0x2000e0f0

0801c744 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801c744:	b580      	push	{r7, lr}
 801c746:	b082      	sub	sp, #8
 801c748:	af00      	add	r7, sp, #0
 801c74a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c752:	f003 0301 	and.w	r3, r3, #1
 801c756:	b2db      	uxtb	r3, r3
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d016      	beq.n	801c78a <ip4_input_accept+0x46>
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	3304      	adds	r3, #4
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	2b00      	cmp	r3, #0
 801c764:	d011      	beq.n	801c78a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c766:	4b0b      	ldr	r3, [pc, #44]	; (801c794 <ip4_input_accept+0x50>)
 801c768:	695a      	ldr	r2, [r3, #20]
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	3304      	adds	r3, #4
 801c76e:	681b      	ldr	r3, [r3, #0]
 801c770:	429a      	cmp	r2, r3
 801c772:	d008      	beq.n	801c786 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801c774:	4b07      	ldr	r3, [pc, #28]	; (801c794 <ip4_input_accept+0x50>)
 801c776:	695b      	ldr	r3, [r3, #20]
 801c778:	6879      	ldr	r1, [r7, #4]
 801c77a:	4618      	mov	r0, r3
 801c77c:	f000 fa08 	bl	801cb90 <ip4_addr_isbroadcast_u32>
 801c780:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c782:	2b00      	cmp	r3, #0
 801c784:	d001      	beq.n	801c78a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801c786:	2301      	movs	r3, #1
 801c788:	e000      	b.n	801c78c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801c78a:	2300      	movs	r3, #0
}
 801c78c:	4618      	mov	r0, r3
 801c78e:	3708      	adds	r7, #8
 801c790:	46bd      	mov	sp, r7
 801c792:	bd80      	pop	{r7, pc}
 801c794:	2000a9e8 	.word	0x2000a9e8

0801c798 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801c798:	b580      	push	{r7, lr}
 801c79a:	b086      	sub	sp, #24
 801c79c:	af00      	add	r7, sp, #0
 801c79e:	6078      	str	r0, [r7, #4]
 801c7a0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	685b      	ldr	r3, [r3, #4]
 801c7a6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801c7a8:	697b      	ldr	r3, [r7, #20]
 801c7aa:	781b      	ldrb	r3, [r3, #0]
 801c7ac:	091b      	lsrs	r3, r3, #4
 801c7ae:	b2db      	uxtb	r3, r3
 801c7b0:	2b04      	cmp	r3, #4
 801c7b2:	d004      	beq.n	801c7be <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801c7b4:	6878      	ldr	r0, [r7, #4]
 801c7b6:	f7f7 fdb5 	bl	8014324 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801c7ba:	2300      	movs	r3, #0
 801c7bc:	e107      	b.n	801c9ce <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801c7be:	697b      	ldr	r3, [r7, #20]
 801c7c0:	781b      	ldrb	r3, [r3, #0]
 801c7c2:	f003 030f 	and.w	r3, r3, #15
 801c7c6:	b2db      	uxtb	r3, r3
 801c7c8:	009b      	lsls	r3, r3, #2
 801c7ca:	b2db      	uxtb	r3, r3
 801c7cc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	885b      	ldrh	r3, [r3, #2]
 801c7d2:	b29b      	uxth	r3, r3
 801c7d4:	4618      	mov	r0, r3
 801c7d6:	f7f6 fa5d 	bl	8012c94 <lwip_htons>
 801c7da:	4603      	mov	r3, r0
 801c7dc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801c7de:	687b      	ldr	r3, [r7, #4]
 801c7e0:	891b      	ldrh	r3, [r3, #8]
 801c7e2:	89ba      	ldrh	r2, [r7, #12]
 801c7e4:	429a      	cmp	r2, r3
 801c7e6:	d204      	bcs.n	801c7f2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801c7e8:	89bb      	ldrh	r3, [r7, #12]
 801c7ea:	4619      	mov	r1, r3
 801c7ec:	6878      	ldr	r0, [r7, #4]
 801c7ee:	f7f7 fc13 	bl	8014018 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801c7f2:	687b      	ldr	r3, [r7, #4]
 801c7f4:	895b      	ldrh	r3, [r3, #10]
 801c7f6:	89fa      	ldrh	r2, [r7, #14]
 801c7f8:	429a      	cmp	r2, r3
 801c7fa:	d807      	bhi.n	801c80c <ip4_input+0x74>
 801c7fc:	687b      	ldr	r3, [r7, #4]
 801c7fe:	891b      	ldrh	r3, [r3, #8]
 801c800:	89ba      	ldrh	r2, [r7, #12]
 801c802:	429a      	cmp	r2, r3
 801c804:	d802      	bhi.n	801c80c <ip4_input+0x74>
 801c806:	89fb      	ldrh	r3, [r7, #14]
 801c808:	2b13      	cmp	r3, #19
 801c80a:	d804      	bhi.n	801c816 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801c80c:	6878      	ldr	r0, [r7, #4]
 801c80e:	f7f7 fd89 	bl	8014324 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801c812:	2300      	movs	r3, #0
 801c814:	e0db      	b.n	801c9ce <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801c816:	697b      	ldr	r3, [r7, #20]
 801c818:	691b      	ldr	r3, [r3, #16]
 801c81a:	4a6f      	ldr	r2, [pc, #444]	; (801c9d8 <ip4_input+0x240>)
 801c81c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801c81e:	697b      	ldr	r3, [r7, #20]
 801c820:	68db      	ldr	r3, [r3, #12]
 801c822:	4a6d      	ldr	r2, [pc, #436]	; (801c9d8 <ip4_input+0x240>)
 801c824:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c826:	4b6c      	ldr	r3, [pc, #432]	; (801c9d8 <ip4_input+0x240>)
 801c828:	695b      	ldr	r3, [r3, #20]
 801c82a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c82e:	2be0      	cmp	r3, #224	; 0xe0
 801c830:	d112      	bne.n	801c858 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801c832:	683b      	ldr	r3, [r7, #0]
 801c834:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c838:	f003 0301 	and.w	r3, r3, #1
 801c83c:	b2db      	uxtb	r3, r3
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d007      	beq.n	801c852 <ip4_input+0xba>
 801c842:	683b      	ldr	r3, [r7, #0]
 801c844:	3304      	adds	r3, #4
 801c846:	681b      	ldr	r3, [r3, #0]
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d002      	beq.n	801c852 <ip4_input+0xba>
      netif = inp;
 801c84c:	683b      	ldr	r3, [r7, #0]
 801c84e:	613b      	str	r3, [r7, #16]
 801c850:	e02a      	b.n	801c8a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801c852:	2300      	movs	r3, #0
 801c854:	613b      	str	r3, [r7, #16]
 801c856:	e027      	b.n	801c8a8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801c858:	6838      	ldr	r0, [r7, #0]
 801c85a:	f7ff ff73 	bl	801c744 <ip4_input_accept>
 801c85e:	4603      	mov	r3, r0
 801c860:	2b00      	cmp	r3, #0
 801c862:	d002      	beq.n	801c86a <ip4_input+0xd2>
      netif = inp;
 801c864:	683b      	ldr	r3, [r7, #0]
 801c866:	613b      	str	r3, [r7, #16]
 801c868:	e01e      	b.n	801c8a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801c86a:	2300      	movs	r3, #0
 801c86c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801c86e:	4b5a      	ldr	r3, [pc, #360]	; (801c9d8 <ip4_input+0x240>)
 801c870:	695b      	ldr	r3, [r3, #20]
 801c872:	b2db      	uxtb	r3, r3
 801c874:	2b7f      	cmp	r3, #127	; 0x7f
 801c876:	d017      	beq.n	801c8a8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801c878:	4b58      	ldr	r3, [pc, #352]	; (801c9dc <ip4_input+0x244>)
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	613b      	str	r3, [r7, #16]
 801c87e:	e00e      	b.n	801c89e <ip4_input+0x106>
          if (netif == inp) {
 801c880:	693a      	ldr	r2, [r7, #16]
 801c882:	683b      	ldr	r3, [r7, #0]
 801c884:	429a      	cmp	r2, r3
 801c886:	d006      	beq.n	801c896 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801c888:	6938      	ldr	r0, [r7, #16]
 801c88a:	f7ff ff5b 	bl	801c744 <ip4_input_accept>
 801c88e:	4603      	mov	r3, r0
 801c890:	2b00      	cmp	r3, #0
 801c892:	d108      	bne.n	801c8a6 <ip4_input+0x10e>
 801c894:	e000      	b.n	801c898 <ip4_input+0x100>
            continue;
 801c896:	bf00      	nop
        NETIF_FOREACH(netif) {
 801c898:	693b      	ldr	r3, [r7, #16]
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	613b      	str	r3, [r7, #16]
 801c89e:	693b      	ldr	r3, [r7, #16]
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d1ed      	bne.n	801c880 <ip4_input+0xe8>
 801c8a4:	e000      	b.n	801c8a8 <ip4_input+0x110>
            break;
 801c8a6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c8a8:	4b4b      	ldr	r3, [pc, #300]	; (801c9d8 <ip4_input+0x240>)
 801c8aa:	691b      	ldr	r3, [r3, #16]
 801c8ac:	6839      	ldr	r1, [r7, #0]
 801c8ae:	4618      	mov	r0, r3
 801c8b0:	f000 f96e 	bl	801cb90 <ip4_addr_isbroadcast_u32>
 801c8b4:	4603      	mov	r3, r0
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d105      	bne.n	801c8c6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801c8ba:	4b47      	ldr	r3, [pc, #284]	; (801c9d8 <ip4_input+0x240>)
 801c8bc:	691b      	ldr	r3, [r3, #16]
 801c8be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c8c2:	2be0      	cmp	r3, #224	; 0xe0
 801c8c4:	d104      	bne.n	801c8d0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801c8c6:	6878      	ldr	r0, [r7, #4]
 801c8c8:	f7f7 fd2c 	bl	8014324 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801c8cc:	2300      	movs	r3, #0
 801c8ce:	e07e      	b.n	801c9ce <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801c8d0:	693b      	ldr	r3, [r7, #16]
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d104      	bne.n	801c8e0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801c8d6:	6878      	ldr	r0, [r7, #4]
 801c8d8:	f7f7 fd24 	bl	8014324 <pbuf_free>
    return ERR_OK;
 801c8dc:	2300      	movs	r3, #0
 801c8de:	e076      	b.n	801c9ce <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801c8e0:	697b      	ldr	r3, [r7, #20]
 801c8e2:	88db      	ldrh	r3, [r3, #6]
 801c8e4:	b29b      	uxth	r3, r3
 801c8e6:	461a      	mov	r2, r3
 801c8e8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801c8ec:	4013      	ands	r3, r2
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d00b      	beq.n	801c90a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801c8f2:	6878      	ldr	r0, [r7, #4]
 801c8f4:	f000 fc92 	bl	801d21c <ip4_reass>
 801c8f8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d101      	bne.n	801c904 <ip4_input+0x16c>
      return ERR_OK;
 801c900:	2300      	movs	r3, #0
 801c902:	e064      	b.n	801c9ce <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	685b      	ldr	r3, [r3, #4]
 801c908:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801c90a:	4a33      	ldr	r2, [pc, #204]	; (801c9d8 <ip4_input+0x240>)
 801c90c:	693b      	ldr	r3, [r7, #16]
 801c90e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801c910:	4a31      	ldr	r2, [pc, #196]	; (801c9d8 <ip4_input+0x240>)
 801c912:	683b      	ldr	r3, [r7, #0]
 801c914:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801c916:	4a30      	ldr	r2, [pc, #192]	; (801c9d8 <ip4_input+0x240>)
 801c918:	697b      	ldr	r3, [r7, #20]
 801c91a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801c91c:	697b      	ldr	r3, [r7, #20]
 801c91e:	781b      	ldrb	r3, [r3, #0]
 801c920:	f003 030f 	and.w	r3, r3, #15
 801c924:	b2db      	uxtb	r3, r3
 801c926:	009b      	lsls	r3, r3, #2
 801c928:	b2db      	uxtb	r3, r3
 801c92a:	b29a      	uxth	r2, r3
 801c92c:	4b2a      	ldr	r3, [pc, #168]	; (801c9d8 <ip4_input+0x240>)
 801c92e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801c930:	89fb      	ldrh	r3, [r7, #14]
 801c932:	4619      	mov	r1, r3
 801c934:	6878      	ldr	r0, [r7, #4]
 801c936:	f7f7 fc6f 	bl	8014218 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801c93a:	697b      	ldr	r3, [r7, #20]
 801c93c:	7a5b      	ldrb	r3, [r3, #9]
 801c93e:	2b11      	cmp	r3, #17
 801c940:	d006      	beq.n	801c950 <ip4_input+0x1b8>
 801c942:	2b11      	cmp	r3, #17
 801c944:	dc13      	bgt.n	801c96e <ip4_input+0x1d6>
 801c946:	2b01      	cmp	r3, #1
 801c948:	d00c      	beq.n	801c964 <ip4_input+0x1cc>
 801c94a:	2b06      	cmp	r3, #6
 801c94c:	d005      	beq.n	801c95a <ip4_input+0x1c2>
 801c94e:	e00e      	b.n	801c96e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801c950:	6839      	ldr	r1, [r7, #0]
 801c952:	6878      	ldr	r0, [r7, #4]
 801c954:	f7fe f970 	bl	801ac38 <udp_input>
        break;
 801c958:	e026      	b.n	801c9a8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801c95a:	6839      	ldr	r1, [r7, #0]
 801c95c:	6878      	ldr	r0, [r7, #4]
 801c95e:	f7f9 fd2d 	bl	80163bc <tcp_input>
        break;
 801c962:	e021      	b.n	801c9a8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801c964:	6839      	ldr	r1, [r7, #0]
 801c966:	6878      	ldr	r0, [r7, #4]
 801c968:	f7ff fcee 	bl	801c348 <icmp_input>
        break;
 801c96c:	e01c      	b.n	801c9a8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c96e:	4b1a      	ldr	r3, [pc, #104]	; (801c9d8 <ip4_input+0x240>)
 801c970:	695b      	ldr	r3, [r3, #20]
 801c972:	6939      	ldr	r1, [r7, #16]
 801c974:	4618      	mov	r0, r3
 801c976:	f000 f90b 	bl	801cb90 <ip4_addr_isbroadcast_u32>
 801c97a:	4603      	mov	r3, r0
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d10f      	bne.n	801c9a0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c980:	4b15      	ldr	r3, [pc, #84]	; (801c9d8 <ip4_input+0x240>)
 801c982:	695b      	ldr	r3, [r3, #20]
 801c984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c988:	2be0      	cmp	r3, #224	; 0xe0
 801c98a:	d009      	beq.n	801c9a0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801c98c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801c990:	4619      	mov	r1, r3
 801c992:	6878      	ldr	r0, [r7, #4]
 801c994:	f7f7 fcb3 	bl	80142fe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801c998:	2102      	movs	r1, #2
 801c99a:	6878      	ldr	r0, [r7, #4]
 801c99c:	f7ff fdd8 	bl	801c550 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801c9a0:	6878      	ldr	r0, [r7, #4]
 801c9a2:	f7f7 fcbf 	bl	8014324 <pbuf_free>
        break;
 801c9a6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801c9a8:	4b0b      	ldr	r3, [pc, #44]	; (801c9d8 <ip4_input+0x240>)
 801c9aa:	2200      	movs	r2, #0
 801c9ac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801c9ae:	4b0a      	ldr	r3, [pc, #40]	; (801c9d8 <ip4_input+0x240>)
 801c9b0:	2200      	movs	r2, #0
 801c9b2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801c9b4:	4b08      	ldr	r3, [pc, #32]	; (801c9d8 <ip4_input+0x240>)
 801c9b6:	2200      	movs	r2, #0
 801c9b8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801c9ba:	4b07      	ldr	r3, [pc, #28]	; (801c9d8 <ip4_input+0x240>)
 801c9bc:	2200      	movs	r2, #0
 801c9be:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801c9c0:	4b05      	ldr	r3, [pc, #20]	; (801c9d8 <ip4_input+0x240>)
 801c9c2:	2200      	movs	r2, #0
 801c9c4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801c9c6:	4b04      	ldr	r3, [pc, #16]	; (801c9d8 <ip4_input+0x240>)
 801c9c8:	2200      	movs	r2, #0
 801c9ca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801c9cc:	2300      	movs	r3, #0
}
 801c9ce:	4618      	mov	r0, r3
 801c9d0:	3718      	adds	r7, #24
 801c9d2:	46bd      	mov	sp, r7
 801c9d4:	bd80      	pop	{r7, pc}
 801c9d6:	bf00      	nop
 801c9d8:	2000a9e8 	.word	0x2000a9e8
 801c9dc:	2000e0ec 	.word	0x2000e0ec

0801c9e0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801c9e0:	b580      	push	{r7, lr}
 801c9e2:	b08a      	sub	sp, #40	; 0x28
 801c9e4:	af04      	add	r7, sp, #16
 801c9e6:	60f8      	str	r0, [r7, #12]
 801c9e8:	60b9      	str	r1, [r7, #8]
 801c9ea:	607a      	str	r2, [r7, #4]
 801c9ec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801c9ee:	68bb      	ldr	r3, [r7, #8]
 801c9f0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d009      	beq.n	801ca0c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801c9f8:	68bb      	ldr	r3, [r7, #8]
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	d003      	beq.n	801ca06 <ip4_output_if+0x26>
 801c9fe:	68bb      	ldr	r3, [r7, #8]
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	2b00      	cmp	r3, #0
 801ca04:	d102      	bne.n	801ca0c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801ca06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca08:	3304      	adds	r3, #4
 801ca0a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801ca0c:	78fa      	ldrb	r2, [r7, #3]
 801ca0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca10:	9302      	str	r3, [sp, #8]
 801ca12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ca16:	9301      	str	r3, [sp, #4]
 801ca18:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ca1c:	9300      	str	r3, [sp, #0]
 801ca1e:	4613      	mov	r3, r2
 801ca20:	687a      	ldr	r2, [r7, #4]
 801ca22:	6979      	ldr	r1, [r7, #20]
 801ca24:	68f8      	ldr	r0, [r7, #12]
 801ca26:	f000 f805 	bl	801ca34 <ip4_output_if_src>
 801ca2a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801ca2c:	4618      	mov	r0, r3
 801ca2e:	3718      	adds	r7, #24
 801ca30:	46bd      	mov	sp, r7
 801ca32:	bd80      	pop	{r7, pc}

0801ca34 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801ca34:	b580      	push	{r7, lr}
 801ca36:	b088      	sub	sp, #32
 801ca38:	af00      	add	r7, sp, #0
 801ca3a:	60f8      	str	r0, [r7, #12]
 801ca3c:	60b9      	str	r1, [r7, #8]
 801ca3e:	607a      	str	r2, [r7, #4]
 801ca40:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	7b9b      	ldrb	r3, [r3, #14]
 801ca46:	2b01      	cmp	r3, #1
 801ca48:	d006      	beq.n	801ca58 <ip4_output_if_src+0x24>
 801ca4a:	4b4b      	ldr	r3, [pc, #300]	; (801cb78 <ip4_output_if_src+0x144>)
 801ca4c:	f44f 7255 	mov.w	r2, #852	; 0x354
 801ca50:	494a      	ldr	r1, [pc, #296]	; (801cb7c <ip4_output_if_src+0x148>)
 801ca52:	484b      	ldr	r0, [pc, #300]	; (801cb80 <ip4_output_if_src+0x14c>)
 801ca54:	f002 fa52 	bl	801eefc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	d060      	beq.n	801cb20 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801ca5e:	2314      	movs	r3, #20
 801ca60:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801ca62:	2114      	movs	r1, #20
 801ca64:	68f8      	ldr	r0, [r7, #12]
 801ca66:	f7f7 fbc7 	bl	80141f8 <pbuf_add_header>
 801ca6a:	4603      	mov	r3, r0
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	d002      	beq.n	801ca76 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ca70:	f06f 0301 	mvn.w	r3, #1
 801ca74:	e07c      	b.n	801cb70 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801ca76:	68fb      	ldr	r3, [r7, #12]
 801ca78:	685b      	ldr	r3, [r3, #4]
 801ca7a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801ca7c:	68fb      	ldr	r3, [r7, #12]
 801ca7e:	895b      	ldrh	r3, [r3, #10]
 801ca80:	2b13      	cmp	r3, #19
 801ca82:	d806      	bhi.n	801ca92 <ip4_output_if_src+0x5e>
 801ca84:	4b3c      	ldr	r3, [pc, #240]	; (801cb78 <ip4_output_if_src+0x144>)
 801ca86:	f44f 7262 	mov.w	r2, #904	; 0x388
 801ca8a:	493e      	ldr	r1, [pc, #248]	; (801cb84 <ip4_output_if_src+0x150>)
 801ca8c:	483c      	ldr	r0, [pc, #240]	; (801cb80 <ip4_output_if_src+0x14c>)
 801ca8e:	f002 fa35 	bl	801eefc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801ca92:	69fb      	ldr	r3, [r7, #28]
 801ca94:	78fa      	ldrb	r2, [r7, #3]
 801ca96:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801ca98:	69fb      	ldr	r3, [r7, #28]
 801ca9a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801ca9e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	681a      	ldr	r2, [r3, #0]
 801caa4:	69fb      	ldr	r3, [r7, #28]
 801caa6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801caa8:	8b7b      	ldrh	r3, [r7, #26]
 801caaa:	089b      	lsrs	r3, r3, #2
 801caac:	b29b      	uxth	r3, r3
 801caae:	b2db      	uxtb	r3, r3
 801cab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cab4:	b2da      	uxtb	r2, r3
 801cab6:	69fb      	ldr	r3, [r7, #28]
 801cab8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801caba:	69fb      	ldr	r3, [r7, #28]
 801cabc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801cac0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801cac2:	68fb      	ldr	r3, [r7, #12]
 801cac4:	891b      	ldrh	r3, [r3, #8]
 801cac6:	4618      	mov	r0, r3
 801cac8:	f7f6 f8e4 	bl	8012c94 <lwip_htons>
 801cacc:	4603      	mov	r3, r0
 801cace:	461a      	mov	r2, r3
 801cad0:	69fb      	ldr	r3, [r7, #28]
 801cad2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801cad4:	69fb      	ldr	r3, [r7, #28]
 801cad6:	2200      	movs	r2, #0
 801cad8:	719a      	strb	r2, [r3, #6]
 801cada:	2200      	movs	r2, #0
 801cadc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801cade:	4b2a      	ldr	r3, [pc, #168]	; (801cb88 <ip4_output_if_src+0x154>)
 801cae0:	881b      	ldrh	r3, [r3, #0]
 801cae2:	4618      	mov	r0, r3
 801cae4:	f7f6 f8d6 	bl	8012c94 <lwip_htons>
 801cae8:	4603      	mov	r3, r0
 801caea:	461a      	mov	r2, r3
 801caec:	69fb      	ldr	r3, [r7, #28]
 801caee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801caf0:	4b25      	ldr	r3, [pc, #148]	; (801cb88 <ip4_output_if_src+0x154>)
 801caf2:	881b      	ldrh	r3, [r3, #0]
 801caf4:	3301      	adds	r3, #1
 801caf6:	b29a      	uxth	r2, r3
 801caf8:	4b23      	ldr	r3, [pc, #140]	; (801cb88 <ip4_output_if_src+0x154>)
 801cafa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801cafc:	68bb      	ldr	r3, [r7, #8]
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	d104      	bne.n	801cb0c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801cb02:	4b22      	ldr	r3, [pc, #136]	; (801cb8c <ip4_output_if_src+0x158>)
 801cb04:	681a      	ldr	r2, [r3, #0]
 801cb06:	69fb      	ldr	r3, [r7, #28]
 801cb08:	60da      	str	r2, [r3, #12]
 801cb0a:	e003      	b.n	801cb14 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801cb0c:	68bb      	ldr	r3, [r7, #8]
 801cb0e:	681a      	ldr	r2, [r3, #0]
 801cb10:	69fb      	ldr	r3, [r7, #28]
 801cb12:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801cb14:	69fb      	ldr	r3, [r7, #28]
 801cb16:	2200      	movs	r2, #0
 801cb18:	729a      	strb	r2, [r3, #10]
 801cb1a:	2200      	movs	r2, #0
 801cb1c:	72da      	strb	r2, [r3, #11]
 801cb1e:	e00f      	b.n	801cb40 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	895b      	ldrh	r3, [r3, #10]
 801cb24:	2b13      	cmp	r3, #19
 801cb26:	d802      	bhi.n	801cb2e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cb28:	f06f 0301 	mvn.w	r3, #1
 801cb2c:	e020      	b.n	801cb70 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	685b      	ldr	r3, [r3, #4]
 801cb32:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801cb34:	69fb      	ldr	r3, [r7, #28]
 801cb36:	691b      	ldr	r3, [r3, #16]
 801cb38:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801cb3a:	f107 0314 	add.w	r3, r7, #20
 801cb3e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801cb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	d00c      	beq.n	801cb62 <ip4_output_if_src+0x12e>
 801cb48:	68fb      	ldr	r3, [r7, #12]
 801cb4a:	891a      	ldrh	r2, [r3, #8]
 801cb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801cb50:	429a      	cmp	r2, r3
 801cb52:	d906      	bls.n	801cb62 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801cb54:	687a      	ldr	r2, [r7, #4]
 801cb56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cb58:	68f8      	ldr	r0, [r7, #12]
 801cb5a:	f000 fd4d 	bl	801d5f8 <ip4_frag>
 801cb5e:	4603      	mov	r3, r0
 801cb60:	e006      	b.n	801cb70 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801cb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb64:	695b      	ldr	r3, [r3, #20]
 801cb66:	687a      	ldr	r2, [r7, #4]
 801cb68:	68f9      	ldr	r1, [r7, #12]
 801cb6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cb6c:	4798      	blx	r3
 801cb6e:	4603      	mov	r3, r0
}
 801cb70:	4618      	mov	r0, r3
 801cb72:	3720      	adds	r7, #32
 801cb74:	46bd      	mov	sp, r7
 801cb76:	bd80      	pop	{r7, pc}
 801cb78:	08026624 	.word	0x08026624
 801cb7c:	08026658 	.word	0x08026658
 801cb80:	08026664 	.word	0x08026664
 801cb84:	0802668c 	.word	0x0802668c
 801cb88:	20006eee 	.word	0x20006eee
 801cb8c:	08026c24 	.word	0x08026c24

0801cb90 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801cb90:	b480      	push	{r7}
 801cb92:	b085      	sub	sp, #20
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	6078      	str	r0, [r7, #4]
 801cb98:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cba4:	d002      	beq.n	801cbac <ip4_addr_isbroadcast_u32+0x1c>
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	d101      	bne.n	801cbb0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801cbac:	2301      	movs	r3, #1
 801cbae:	e02a      	b.n	801cc06 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801cbb0:	683b      	ldr	r3, [r7, #0]
 801cbb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801cbb6:	f003 0302 	and.w	r3, r3, #2
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d101      	bne.n	801cbc2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801cbbe:	2300      	movs	r3, #0
 801cbc0:	e021      	b.n	801cc06 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801cbc2:	683b      	ldr	r3, [r7, #0]
 801cbc4:	3304      	adds	r3, #4
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	687a      	ldr	r2, [r7, #4]
 801cbca:	429a      	cmp	r2, r3
 801cbcc:	d101      	bne.n	801cbd2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801cbce:	2300      	movs	r3, #0
 801cbd0:	e019      	b.n	801cc06 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801cbd2:	68fa      	ldr	r2, [r7, #12]
 801cbd4:	683b      	ldr	r3, [r7, #0]
 801cbd6:	3304      	adds	r3, #4
 801cbd8:	681b      	ldr	r3, [r3, #0]
 801cbda:	405a      	eors	r2, r3
 801cbdc:	683b      	ldr	r3, [r7, #0]
 801cbde:	3308      	adds	r3, #8
 801cbe0:	681b      	ldr	r3, [r3, #0]
 801cbe2:	4013      	ands	r3, r2
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d10d      	bne.n	801cc04 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cbe8:	683b      	ldr	r3, [r7, #0]
 801cbea:	3308      	adds	r3, #8
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	43da      	mvns	r2, r3
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801cbf4:	683b      	ldr	r3, [r7, #0]
 801cbf6:	3308      	adds	r3, #8
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cbfc:	429a      	cmp	r2, r3
 801cbfe:	d101      	bne.n	801cc04 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801cc00:	2301      	movs	r3, #1
 801cc02:	e000      	b.n	801cc06 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801cc04:	2300      	movs	r3, #0
  }
}
 801cc06:	4618      	mov	r0, r3
 801cc08:	3714      	adds	r7, #20
 801cc0a:	46bd      	mov	sp, r7
 801cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc10:	4770      	bx	lr
	...

0801cc14 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801cc14:	b580      	push	{r7, lr}
 801cc16:	b084      	sub	sp, #16
 801cc18:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801cc1a:	2300      	movs	r3, #0
 801cc1c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801cc1e:	4b12      	ldr	r3, [pc, #72]	; (801cc68 <ip_reass_tmr+0x54>)
 801cc20:	681b      	ldr	r3, [r3, #0]
 801cc22:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801cc24:	e018      	b.n	801cc58 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801cc26:	68fb      	ldr	r3, [r7, #12]
 801cc28:	7fdb      	ldrb	r3, [r3, #31]
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	d00b      	beq.n	801cc46 <ip_reass_tmr+0x32>
      r->timer--;
 801cc2e:	68fb      	ldr	r3, [r7, #12]
 801cc30:	7fdb      	ldrb	r3, [r3, #31]
 801cc32:	3b01      	subs	r3, #1
 801cc34:	b2da      	uxtb	r2, r3
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801cc3a:	68fb      	ldr	r3, [r7, #12]
 801cc3c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801cc3e:	68fb      	ldr	r3, [r7, #12]
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	60fb      	str	r3, [r7, #12]
 801cc44:	e008      	b.n	801cc58 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801cc46:	68fb      	ldr	r3, [r7, #12]
 801cc48:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801cc4a:	68fb      	ldr	r3, [r7, #12]
 801cc4c:	681b      	ldr	r3, [r3, #0]
 801cc4e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801cc50:	68b9      	ldr	r1, [r7, #8]
 801cc52:	6878      	ldr	r0, [r7, #4]
 801cc54:	f000 f80a 	bl	801cc6c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d1e3      	bne.n	801cc26 <ip_reass_tmr+0x12>
    }
  }
}
 801cc5e:	bf00      	nop
 801cc60:	bf00      	nop
 801cc62:	3710      	adds	r7, #16
 801cc64:	46bd      	mov	sp, r7
 801cc66:	bd80      	pop	{r7, pc}
 801cc68:	20006ef0 	.word	0x20006ef0

0801cc6c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cc6c:	b580      	push	{r7, lr}
 801cc6e:	b088      	sub	sp, #32
 801cc70:	af00      	add	r7, sp, #0
 801cc72:	6078      	str	r0, [r7, #4]
 801cc74:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801cc76:	2300      	movs	r3, #0
 801cc78:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801cc7a:	683a      	ldr	r2, [r7, #0]
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	429a      	cmp	r2, r3
 801cc80:	d105      	bne.n	801cc8e <ip_reass_free_complete_datagram+0x22>
 801cc82:	4b45      	ldr	r3, [pc, #276]	; (801cd98 <ip_reass_free_complete_datagram+0x12c>)
 801cc84:	22ab      	movs	r2, #171	; 0xab
 801cc86:	4945      	ldr	r1, [pc, #276]	; (801cd9c <ip_reass_free_complete_datagram+0x130>)
 801cc88:	4845      	ldr	r0, [pc, #276]	; (801cda0 <ip_reass_free_complete_datagram+0x134>)
 801cc8a:	f002 f937 	bl	801eefc <iprintf>
  if (prev != NULL) {
 801cc8e:	683b      	ldr	r3, [r7, #0]
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d00a      	beq.n	801ccaa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801cc94:	683b      	ldr	r3, [r7, #0]
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	687a      	ldr	r2, [r7, #4]
 801cc9a:	429a      	cmp	r2, r3
 801cc9c:	d005      	beq.n	801ccaa <ip_reass_free_complete_datagram+0x3e>
 801cc9e:	4b3e      	ldr	r3, [pc, #248]	; (801cd98 <ip_reass_free_complete_datagram+0x12c>)
 801cca0:	22ad      	movs	r2, #173	; 0xad
 801cca2:	4940      	ldr	r1, [pc, #256]	; (801cda4 <ip_reass_free_complete_datagram+0x138>)
 801cca4:	483e      	ldr	r0, [pc, #248]	; (801cda0 <ip_reass_free_complete_datagram+0x134>)
 801cca6:	f002 f929 	bl	801eefc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	685b      	ldr	r3, [r3, #4]
 801ccae:	685b      	ldr	r3, [r3, #4]
 801ccb0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ccb2:	697b      	ldr	r3, [r7, #20]
 801ccb4:	889b      	ldrh	r3, [r3, #4]
 801ccb6:	b29b      	uxth	r3, r3
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d12a      	bne.n	801cd12 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	685b      	ldr	r3, [r3, #4]
 801ccc0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ccc2:	697b      	ldr	r3, [r7, #20]
 801ccc4:	681a      	ldr	r2, [r3, #0]
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801ccca:	69bb      	ldr	r3, [r7, #24]
 801cccc:	6858      	ldr	r0, [r3, #4]
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	3308      	adds	r3, #8
 801ccd2:	2214      	movs	r2, #20
 801ccd4:	4619      	mov	r1, r3
 801ccd6:	f001 f9bd 	bl	801e054 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801ccda:	2101      	movs	r1, #1
 801ccdc:	69b8      	ldr	r0, [r7, #24]
 801ccde:	f7ff fc47 	bl	801c570 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801cce2:	69b8      	ldr	r0, [r7, #24]
 801cce4:	f7f7 fbac 	bl	8014440 <pbuf_clen>
 801cce8:	4603      	mov	r3, r0
 801ccea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ccec:	8bfa      	ldrh	r2, [r7, #30]
 801ccee:	8a7b      	ldrh	r3, [r7, #18]
 801ccf0:	4413      	add	r3, r2
 801ccf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ccf6:	db05      	blt.n	801cd04 <ip_reass_free_complete_datagram+0x98>
 801ccf8:	4b27      	ldr	r3, [pc, #156]	; (801cd98 <ip_reass_free_complete_datagram+0x12c>)
 801ccfa:	22bc      	movs	r2, #188	; 0xbc
 801ccfc:	492a      	ldr	r1, [pc, #168]	; (801cda8 <ip_reass_free_complete_datagram+0x13c>)
 801ccfe:	4828      	ldr	r0, [pc, #160]	; (801cda0 <ip_reass_free_complete_datagram+0x134>)
 801cd00:	f002 f8fc 	bl	801eefc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cd04:	8bfa      	ldrh	r2, [r7, #30]
 801cd06:	8a7b      	ldrh	r3, [r7, #18]
 801cd08:	4413      	add	r3, r2
 801cd0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801cd0c:	69b8      	ldr	r0, [r7, #24]
 801cd0e:	f7f7 fb09 	bl	8014324 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	685b      	ldr	r3, [r3, #4]
 801cd16:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801cd18:	e01f      	b.n	801cd5a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801cd1a:	69bb      	ldr	r3, [r7, #24]
 801cd1c:	685b      	ldr	r3, [r3, #4]
 801cd1e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801cd20:	69bb      	ldr	r3, [r7, #24]
 801cd22:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801cd24:	697b      	ldr	r3, [r7, #20]
 801cd26:	681b      	ldr	r3, [r3, #0]
 801cd28:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801cd2a:	68f8      	ldr	r0, [r7, #12]
 801cd2c:	f7f7 fb88 	bl	8014440 <pbuf_clen>
 801cd30:	4603      	mov	r3, r0
 801cd32:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cd34:	8bfa      	ldrh	r2, [r7, #30]
 801cd36:	8a7b      	ldrh	r3, [r7, #18]
 801cd38:	4413      	add	r3, r2
 801cd3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cd3e:	db05      	blt.n	801cd4c <ip_reass_free_complete_datagram+0xe0>
 801cd40:	4b15      	ldr	r3, [pc, #84]	; (801cd98 <ip_reass_free_complete_datagram+0x12c>)
 801cd42:	22cc      	movs	r2, #204	; 0xcc
 801cd44:	4918      	ldr	r1, [pc, #96]	; (801cda8 <ip_reass_free_complete_datagram+0x13c>)
 801cd46:	4816      	ldr	r0, [pc, #88]	; (801cda0 <ip_reass_free_complete_datagram+0x134>)
 801cd48:	f002 f8d8 	bl	801eefc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cd4c:	8bfa      	ldrh	r2, [r7, #30]
 801cd4e:	8a7b      	ldrh	r3, [r7, #18]
 801cd50:	4413      	add	r3, r2
 801cd52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801cd54:	68f8      	ldr	r0, [r7, #12]
 801cd56:	f7f7 fae5 	bl	8014324 <pbuf_free>
  while (p != NULL) {
 801cd5a:	69bb      	ldr	r3, [r7, #24]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d1dc      	bne.n	801cd1a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801cd60:	6839      	ldr	r1, [r7, #0]
 801cd62:	6878      	ldr	r0, [r7, #4]
 801cd64:	f000 f8c2 	bl	801ceec <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801cd68:	4b10      	ldr	r3, [pc, #64]	; (801cdac <ip_reass_free_complete_datagram+0x140>)
 801cd6a:	881b      	ldrh	r3, [r3, #0]
 801cd6c:	8bfa      	ldrh	r2, [r7, #30]
 801cd6e:	429a      	cmp	r2, r3
 801cd70:	d905      	bls.n	801cd7e <ip_reass_free_complete_datagram+0x112>
 801cd72:	4b09      	ldr	r3, [pc, #36]	; (801cd98 <ip_reass_free_complete_datagram+0x12c>)
 801cd74:	22d2      	movs	r2, #210	; 0xd2
 801cd76:	490e      	ldr	r1, [pc, #56]	; (801cdb0 <ip_reass_free_complete_datagram+0x144>)
 801cd78:	4809      	ldr	r0, [pc, #36]	; (801cda0 <ip_reass_free_complete_datagram+0x134>)
 801cd7a:	f002 f8bf 	bl	801eefc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801cd7e:	4b0b      	ldr	r3, [pc, #44]	; (801cdac <ip_reass_free_complete_datagram+0x140>)
 801cd80:	881a      	ldrh	r2, [r3, #0]
 801cd82:	8bfb      	ldrh	r3, [r7, #30]
 801cd84:	1ad3      	subs	r3, r2, r3
 801cd86:	b29a      	uxth	r2, r3
 801cd88:	4b08      	ldr	r3, [pc, #32]	; (801cdac <ip_reass_free_complete_datagram+0x140>)
 801cd8a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801cd8c:	8bfb      	ldrh	r3, [r7, #30]
}
 801cd8e:	4618      	mov	r0, r3
 801cd90:	3720      	adds	r7, #32
 801cd92:	46bd      	mov	sp, r7
 801cd94:	bd80      	pop	{r7, pc}
 801cd96:	bf00      	nop
 801cd98:	080266bc 	.word	0x080266bc
 801cd9c:	080266f8 	.word	0x080266f8
 801cda0:	08026704 	.word	0x08026704
 801cda4:	0802672c 	.word	0x0802672c
 801cda8:	08026740 	.word	0x08026740
 801cdac:	20006ef4 	.word	0x20006ef4
 801cdb0:	08026760 	.word	0x08026760

0801cdb4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801cdb4:	b580      	push	{r7, lr}
 801cdb6:	b08a      	sub	sp, #40	; 0x28
 801cdb8:	af00      	add	r7, sp, #0
 801cdba:	6078      	str	r0, [r7, #4]
 801cdbc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801cdbe:	2300      	movs	r3, #0
 801cdc0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801cdc2:	2300      	movs	r3, #0
 801cdc4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801cdc6:	2300      	movs	r3, #0
 801cdc8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801cdca:	2300      	movs	r3, #0
 801cdcc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801cdce:	2300      	movs	r3, #0
 801cdd0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801cdd2:	4b28      	ldr	r3, [pc, #160]	; (801ce74 <ip_reass_remove_oldest_datagram+0xc0>)
 801cdd4:	681b      	ldr	r3, [r3, #0]
 801cdd6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801cdd8:	e030      	b.n	801ce3c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801cdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cddc:	695a      	ldr	r2, [r3, #20]
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	68db      	ldr	r3, [r3, #12]
 801cde2:	429a      	cmp	r2, r3
 801cde4:	d10c      	bne.n	801ce00 <ip_reass_remove_oldest_datagram+0x4c>
 801cde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cde8:	699a      	ldr	r2, [r3, #24]
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	691b      	ldr	r3, [r3, #16]
 801cdee:	429a      	cmp	r2, r3
 801cdf0:	d106      	bne.n	801ce00 <ip_reass_remove_oldest_datagram+0x4c>
 801cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdf4:	899a      	ldrh	r2, [r3, #12]
 801cdf6:	687b      	ldr	r3, [r7, #4]
 801cdf8:	889b      	ldrh	r3, [r3, #4]
 801cdfa:	b29b      	uxth	r3, r3
 801cdfc:	429a      	cmp	r2, r3
 801cdfe:	d014      	beq.n	801ce2a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ce00:	693b      	ldr	r3, [r7, #16]
 801ce02:	3301      	adds	r3, #1
 801ce04:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ce06:	6a3b      	ldr	r3, [r7, #32]
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	d104      	bne.n	801ce16 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ce0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce0e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ce10:	69fb      	ldr	r3, [r7, #28]
 801ce12:	61bb      	str	r3, [r7, #24]
 801ce14:	e009      	b.n	801ce2a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ce16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce18:	7fda      	ldrb	r2, [r3, #31]
 801ce1a:	6a3b      	ldr	r3, [r7, #32]
 801ce1c:	7fdb      	ldrb	r3, [r3, #31]
 801ce1e:	429a      	cmp	r2, r3
 801ce20:	d803      	bhi.n	801ce2a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ce22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce24:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ce26:	69fb      	ldr	r3, [r7, #28]
 801ce28:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ce2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d001      	beq.n	801ce36 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ce32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce34:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ce36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ce3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d1cb      	bne.n	801cdda <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801ce42:	6a3b      	ldr	r3, [r7, #32]
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d008      	beq.n	801ce5a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801ce48:	69b9      	ldr	r1, [r7, #24]
 801ce4a:	6a38      	ldr	r0, [r7, #32]
 801ce4c:	f7ff ff0e 	bl	801cc6c <ip_reass_free_complete_datagram>
 801ce50:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801ce52:	697a      	ldr	r2, [r7, #20]
 801ce54:	68fb      	ldr	r3, [r7, #12]
 801ce56:	4413      	add	r3, r2
 801ce58:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ce5a:	697a      	ldr	r2, [r7, #20]
 801ce5c:	683b      	ldr	r3, [r7, #0]
 801ce5e:	429a      	cmp	r2, r3
 801ce60:	da02      	bge.n	801ce68 <ip_reass_remove_oldest_datagram+0xb4>
 801ce62:	693b      	ldr	r3, [r7, #16]
 801ce64:	2b01      	cmp	r3, #1
 801ce66:	dcac      	bgt.n	801cdc2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801ce68:	697b      	ldr	r3, [r7, #20]
}
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	3728      	adds	r7, #40	; 0x28
 801ce6e:	46bd      	mov	sp, r7
 801ce70:	bd80      	pop	{r7, pc}
 801ce72:	bf00      	nop
 801ce74:	20006ef0 	.word	0x20006ef0

0801ce78 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ce78:	b580      	push	{r7, lr}
 801ce7a:	b084      	sub	sp, #16
 801ce7c:	af00      	add	r7, sp, #0
 801ce7e:	6078      	str	r0, [r7, #4]
 801ce80:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ce82:	2004      	movs	r0, #4
 801ce84:	f7f6 fbbc 	bl	8013600 <memp_malloc>
 801ce88:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801ce8a:	68fb      	ldr	r3, [r7, #12]
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d110      	bne.n	801ceb2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801ce90:	6839      	ldr	r1, [r7, #0]
 801ce92:	6878      	ldr	r0, [r7, #4]
 801ce94:	f7ff ff8e 	bl	801cdb4 <ip_reass_remove_oldest_datagram>
 801ce98:	4602      	mov	r2, r0
 801ce9a:	683b      	ldr	r3, [r7, #0]
 801ce9c:	4293      	cmp	r3, r2
 801ce9e:	dc03      	bgt.n	801cea8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801cea0:	2004      	movs	r0, #4
 801cea2:	f7f6 fbad 	bl	8013600 <memp_malloc>
 801cea6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801cea8:	68fb      	ldr	r3, [r7, #12]
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d101      	bne.n	801ceb2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801ceae:	2300      	movs	r3, #0
 801ceb0:	e016      	b.n	801cee0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ceb2:	2220      	movs	r2, #32
 801ceb4:	2100      	movs	r1, #0
 801ceb6:	68f8      	ldr	r0, [r7, #12]
 801ceb8:	f001 f8f4 	bl	801e0a4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801cebc:	68fb      	ldr	r3, [r7, #12]
 801cebe:	220f      	movs	r2, #15
 801cec0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801cec2:	4b09      	ldr	r3, [pc, #36]	; (801cee8 <ip_reass_enqueue_new_datagram+0x70>)
 801cec4:	681a      	ldr	r2, [r3, #0]
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ceca:	4a07      	ldr	r2, [pc, #28]	; (801cee8 <ip_reass_enqueue_new_datagram+0x70>)
 801cecc:	68fb      	ldr	r3, [r7, #12]
 801cece:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ced0:	68fb      	ldr	r3, [r7, #12]
 801ced2:	3308      	adds	r3, #8
 801ced4:	2214      	movs	r2, #20
 801ced6:	6879      	ldr	r1, [r7, #4]
 801ced8:	4618      	mov	r0, r3
 801ceda:	f001 f8bb 	bl	801e054 <memcpy>
  return ipr;
 801cede:	68fb      	ldr	r3, [r7, #12]
}
 801cee0:	4618      	mov	r0, r3
 801cee2:	3710      	adds	r7, #16
 801cee4:	46bd      	mov	sp, r7
 801cee6:	bd80      	pop	{r7, pc}
 801cee8:	20006ef0 	.word	0x20006ef0

0801ceec <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ceec:	b580      	push	{r7, lr}
 801ceee:	b082      	sub	sp, #8
 801cef0:	af00      	add	r7, sp, #0
 801cef2:	6078      	str	r0, [r7, #4]
 801cef4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801cef6:	4b10      	ldr	r3, [pc, #64]	; (801cf38 <ip_reass_dequeue_datagram+0x4c>)
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	687a      	ldr	r2, [r7, #4]
 801cefc:	429a      	cmp	r2, r3
 801cefe:	d104      	bne.n	801cf0a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	4a0c      	ldr	r2, [pc, #48]	; (801cf38 <ip_reass_dequeue_datagram+0x4c>)
 801cf06:	6013      	str	r3, [r2, #0]
 801cf08:	e00d      	b.n	801cf26 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801cf0a:	683b      	ldr	r3, [r7, #0]
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	d106      	bne.n	801cf1e <ip_reass_dequeue_datagram+0x32>
 801cf10:	4b0a      	ldr	r3, [pc, #40]	; (801cf3c <ip_reass_dequeue_datagram+0x50>)
 801cf12:	f240 1245 	movw	r2, #325	; 0x145
 801cf16:	490a      	ldr	r1, [pc, #40]	; (801cf40 <ip_reass_dequeue_datagram+0x54>)
 801cf18:	480a      	ldr	r0, [pc, #40]	; (801cf44 <ip_reass_dequeue_datagram+0x58>)
 801cf1a:	f001 ffef 	bl	801eefc <iprintf>
    prev->next = ipr->next;
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	681a      	ldr	r2, [r3, #0]
 801cf22:	683b      	ldr	r3, [r7, #0]
 801cf24:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801cf26:	6879      	ldr	r1, [r7, #4]
 801cf28:	2004      	movs	r0, #4
 801cf2a:	f7f6 fbbb 	bl	80136a4 <memp_free>
}
 801cf2e:	bf00      	nop
 801cf30:	3708      	adds	r7, #8
 801cf32:	46bd      	mov	sp, r7
 801cf34:	bd80      	pop	{r7, pc}
 801cf36:	bf00      	nop
 801cf38:	20006ef0 	.word	0x20006ef0
 801cf3c:	080266bc 	.word	0x080266bc
 801cf40:	08026784 	.word	0x08026784
 801cf44:	08026704 	.word	0x08026704

0801cf48 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801cf48:	b580      	push	{r7, lr}
 801cf4a:	b08c      	sub	sp, #48	; 0x30
 801cf4c:	af00      	add	r7, sp, #0
 801cf4e:	60f8      	str	r0, [r7, #12]
 801cf50:	60b9      	str	r1, [r7, #8]
 801cf52:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801cf54:	2300      	movs	r3, #0
 801cf56:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801cf58:	2301      	movs	r3, #1
 801cf5a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801cf5c:	68bb      	ldr	r3, [r7, #8]
 801cf5e:	685b      	ldr	r3, [r3, #4]
 801cf60:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801cf62:	69fb      	ldr	r3, [r7, #28]
 801cf64:	885b      	ldrh	r3, [r3, #2]
 801cf66:	b29b      	uxth	r3, r3
 801cf68:	4618      	mov	r0, r3
 801cf6a:	f7f5 fe93 	bl	8012c94 <lwip_htons>
 801cf6e:	4603      	mov	r3, r0
 801cf70:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801cf72:	69fb      	ldr	r3, [r7, #28]
 801cf74:	781b      	ldrb	r3, [r3, #0]
 801cf76:	f003 030f 	and.w	r3, r3, #15
 801cf7a:	b2db      	uxtb	r3, r3
 801cf7c:	009b      	lsls	r3, r3, #2
 801cf7e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801cf80:	7e7b      	ldrb	r3, [r7, #25]
 801cf82:	b29b      	uxth	r3, r3
 801cf84:	8b7a      	ldrh	r2, [r7, #26]
 801cf86:	429a      	cmp	r2, r3
 801cf88:	d202      	bcs.n	801cf90 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cf8a:	f04f 33ff 	mov.w	r3, #4294967295
 801cf8e:	e135      	b.n	801d1fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801cf90:	7e7b      	ldrb	r3, [r7, #25]
 801cf92:	b29b      	uxth	r3, r3
 801cf94:	8b7a      	ldrh	r2, [r7, #26]
 801cf96:	1ad3      	subs	r3, r2, r3
 801cf98:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801cf9a:	69fb      	ldr	r3, [r7, #28]
 801cf9c:	88db      	ldrh	r3, [r3, #6]
 801cf9e:	b29b      	uxth	r3, r3
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	f7f5 fe77 	bl	8012c94 <lwip_htons>
 801cfa6:	4603      	mov	r3, r0
 801cfa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cfac:	b29b      	uxth	r3, r3
 801cfae:	00db      	lsls	r3, r3, #3
 801cfb0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801cfb2:	68bb      	ldr	r3, [r7, #8]
 801cfb4:	685b      	ldr	r3, [r3, #4]
 801cfb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801cfb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cfba:	2200      	movs	r2, #0
 801cfbc:	701a      	strb	r2, [r3, #0]
 801cfbe:	2200      	movs	r2, #0
 801cfc0:	705a      	strb	r2, [r3, #1]
 801cfc2:	2200      	movs	r2, #0
 801cfc4:	709a      	strb	r2, [r3, #2]
 801cfc6:	2200      	movs	r2, #0
 801cfc8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801cfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cfcc:	8afa      	ldrh	r2, [r7, #22]
 801cfce:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801cfd0:	8afa      	ldrh	r2, [r7, #22]
 801cfd2:	8b7b      	ldrh	r3, [r7, #26]
 801cfd4:	4413      	add	r3, r2
 801cfd6:	b29a      	uxth	r2, r3
 801cfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cfda:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801cfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cfde:	88db      	ldrh	r3, [r3, #6]
 801cfe0:	b29b      	uxth	r3, r3
 801cfe2:	8afa      	ldrh	r2, [r7, #22]
 801cfe4:	429a      	cmp	r2, r3
 801cfe6:	d902      	bls.n	801cfee <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cfe8:	f04f 33ff 	mov.w	r3, #4294967295
 801cfec:	e106      	b.n	801d1fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	685b      	ldr	r3, [r3, #4]
 801cff2:	627b      	str	r3, [r7, #36]	; 0x24
 801cff4:	e068      	b.n	801d0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801cff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cff8:	685b      	ldr	r3, [r3, #4]
 801cffa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801cffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cffe:	889b      	ldrh	r3, [r3, #4]
 801d000:	b29a      	uxth	r2, r3
 801d002:	693b      	ldr	r3, [r7, #16]
 801d004:	889b      	ldrh	r3, [r3, #4]
 801d006:	b29b      	uxth	r3, r3
 801d008:	429a      	cmp	r2, r3
 801d00a:	d235      	bcs.n	801d078 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d010:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d014:	2b00      	cmp	r3, #0
 801d016:	d020      	beq.n	801d05a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d01a:	889b      	ldrh	r3, [r3, #4]
 801d01c:	b29a      	uxth	r2, r3
 801d01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d020:	88db      	ldrh	r3, [r3, #6]
 801d022:	b29b      	uxth	r3, r3
 801d024:	429a      	cmp	r2, r3
 801d026:	d307      	bcc.n	801d038 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d02a:	88db      	ldrh	r3, [r3, #6]
 801d02c:	b29a      	uxth	r2, r3
 801d02e:	693b      	ldr	r3, [r7, #16]
 801d030:	889b      	ldrh	r3, [r3, #4]
 801d032:	b29b      	uxth	r3, r3
 801d034:	429a      	cmp	r2, r3
 801d036:	d902      	bls.n	801d03e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d038:	f04f 33ff 	mov.w	r3, #4294967295
 801d03c:	e0de      	b.n	801d1fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d040:	68ba      	ldr	r2, [r7, #8]
 801d042:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d046:	88db      	ldrh	r3, [r3, #6]
 801d048:	b29a      	uxth	r2, r3
 801d04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d04c:	889b      	ldrh	r3, [r3, #4]
 801d04e:	b29b      	uxth	r3, r3
 801d050:	429a      	cmp	r2, r3
 801d052:	d03d      	beq.n	801d0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d054:	2300      	movs	r3, #0
 801d056:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d058:	e03a      	b.n	801d0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d05c:	88db      	ldrh	r3, [r3, #6]
 801d05e:	b29a      	uxth	r2, r3
 801d060:	693b      	ldr	r3, [r7, #16]
 801d062:	889b      	ldrh	r3, [r3, #4]
 801d064:	b29b      	uxth	r3, r3
 801d066:	429a      	cmp	r2, r3
 801d068:	d902      	bls.n	801d070 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d06a:	f04f 33ff 	mov.w	r3, #4294967295
 801d06e:	e0c5      	b.n	801d1fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	68ba      	ldr	r2, [r7, #8]
 801d074:	605a      	str	r2, [r3, #4]
      break;
 801d076:	e02b      	b.n	801d0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d07a:	889b      	ldrh	r3, [r3, #4]
 801d07c:	b29a      	uxth	r2, r3
 801d07e:	693b      	ldr	r3, [r7, #16]
 801d080:	889b      	ldrh	r3, [r3, #4]
 801d082:	b29b      	uxth	r3, r3
 801d084:	429a      	cmp	r2, r3
 801d086:	d102      	bne.n	801d08e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d088:	f04f 33ff 	mov.w	r3, #4294967295
 801d08c:	e0b6      	b.n	801d1fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d090:	889b      	ldrh	r3, [r3, #4]
 801d092:	b29a      	uxth	r2, r3
 801d094:	693b      	ldr	r3, [r7, #16]
 801d096:	88db      	ldrh	r3, [r3, #6]
 801d098:	b29b      	uxth	r3, r3
 801d09a:	429a      	cmp	r2, r3
 801d09c:	d202      	bcs.n	801d0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d09e:	f04f 33ff 	mov.w	r3, #4294967295
 801d0a2:	e0ab      	b.n	801d1fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d009      	beq.n	801d0be <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0ac:	88db      	ldrh	r3, [r3, #6]
 801d0ae:	b29a      	uxth	r2, r3
 801d0b0:	693b      	ldr	r3, [r7, #16]
 801d0b2:	889b      	ldrh	r3, [r3, #4]
 801d0b4:	b29b      	uxth	r3, r3
 801d0b6:	429a      	cmp	r2, r3
 801d0b8:	d001      	beq.n	801d0be <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d0ba:	2300      	movs	r3, #0
 801d0bc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d0be:	693b      	ldr	r3, [r7, #16]
 801d0c0:	681b      	ldr	r3, [r3, #0]
 801d0c2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801d0c4:	693b      	ldr	r3, [r7, #16]
 801d0c6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d193      	bne.n	801cff6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d0ce:	e000      	b.n	801d0d2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d0d0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d12d      	bne.n	801d134 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d01c      	beq.n	801d118 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0e0:	88db      	ldrh	r3, [r3, #6]
 801d0e2:	b29a      	uxth	r2, r3
 801d0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0e6:	889b      	ldrh	r3, [r3, #4]
 801d0e8:	b29b      	uxth	r3, r3
 801d0ea:	429a      	cmp	r2, r3
 801d0ec:	d906      	bls.n	801d0fc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d0ee:	4b45      	ldr	r3, [pc, #276]	; (801d204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d0f0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801d0f4:	4944      	ldr	r1, [pc, #272]	; (801d208 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d0f6:	4845      	ldr	r0, [pc, #276]	; (801d20c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d0f8:	f001 ff00 	bl	801eefc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0fe:	68ba      	ldr	r2, [r7, #8]
 801d100:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d104:	88db      	ldrh	r3, [r3, #6]
 801d106:	b29a      	uxth	r2, r3
 801d108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d10a:	889b      	ldrh	r3, [r3, #4]
 801d10c:	b29b      	uxth	r3, r3
 801d10e:	429a      	cmp	r2, r3
 801d110:	d010      	beq.n	801d134 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d112:	2300      	movs	r3, #0
 801d114:	623b      	str	r3, [r7, #32]
 801d116:	e00d      	b.n	801d134 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d118:	68fb      	ldr	r3, [r7, #12]
 801d11a:	685b      	ldr	r3, [r3, #4]
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	d006      	beq.n	801d12e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d120:	4b38      	ldr	r3, [pc, #224]	; (801d204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d122:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801d126:	493a      	ldr	r1, [pc, #232]	; (801d210 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d128:	4838      	ldr	r0, [pc, #224]	; (801d20c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d12a:	f001 fee7 	bl	801eefc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d12e:	68fb      	ldr	r3, [r7, #12]
 801d130:	68ba      	ldr	r2, [r7, #8]
 801d132:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	2b00      	cmp	r3, #0
 801d138:	d105      	bne.n	801d146 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d13a:	68fb      	ldr	r3, [r7, #12]
 801d13c:	7f9b      	ldrb	r3, [r3, #30]
 801d13e:	f003 0301 	and.w	r3, r3, #1
 801d142:	2b00      	cmp	r3, #0
 801d144:	d059      	beq.n	801d1fa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d146:	6a3b      	ldr	r3, [r7, #32]
 801d148:	2b00      	cmp	r3, #0
 801d14a:	d04f      	beq.n	801d1ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d14c:	68fb      	ldr	r3, [r7, #12]
 801d14e:	685b      	ldr	r3, [r3, #4]
 801d150:	2b00      	cmp	r3, #0
 801d152:	d006      	beq.n	801d162 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d154:	68fb      	ldr	r3, [r7, #12]
 801d156:	685b      	ldr	r3, [r3, #4]
 801d158:	685b      	ldr	r3, [r3, #4]
 801d15a:	889b      	ldrh	r3, [r3, #4]
 801d15c:	b29b      	uxth	r3, r3
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d002      	beq.n	801d168 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d162:	2300      	movs	r3, #0
 801d164:	623b      	str	r3, [r7, #32]
 801d166:	e041      	b.n	801d1ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d16a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801d16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d172:	e012      	b.n	801d19a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d176:	685b      	ldr	r3, [r3, #4]
 801d178:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801d17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d17c:	88db      	ldrh	r3, [r3, #6]
 801d17e:	b29a      	uxth	r2, r3
 801d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d182:	889b      	ldrh	r3, [r3, #4]
 801d184:	b29b      	uxth	r3, r3
 801d186:	429a      	cmp	r2, r3
 801d188:	d002      	beq.n	801d190 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d18a:	2300      	movs	r3, #0
 801d18c:	623b      	str	r3, [r7, #32]
            break;
 801d18e:	e007      	b.n	801d1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d192:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d196:	681b      	ldr	r3, [r3, #0]
 801d198:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d19c:	2b00      	cmp	r3, #0
 801d19e:	d1e9      	bne.n	801d174 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d1a0:	6a3b      	ldr	r3, [r7, #32]
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d022      	beq.n	801d1ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d1a6:	68fb      	ldr	r3, [r7, #12]
 801d1a8:	685b      	ldr	r3, [r3, #4]
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d106      	bne.n	801d1bc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d1ae:	4b15      	ldr	r3, [pc, #84]	; (801d204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d1b0:	f240 12df 	movw	r2, #479	; 0x1df
 801d1b4:	4917      	ldr	r1, [pc, #92]	; (801d214 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d1b6:	4815      	ldr	r0, [pc, #84]	; (801d20c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d1b8:	f001 fea0 	bl	801eefc <iprintf>
          LWIP_ASSERT("sanity check",
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	685b      	ldr	r3, [r3, #4]
 801d1c0:	685b      	ldr	r3, [r3, #4]
 801d1c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d1c4:	429a      	cmp	r2, r3
 801d1c6:	d106      	bne.n	801d1d6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d1c8:	4b0e      	ldr	r3, [pc, #56]	; (801d204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d1ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d1ce:	4911      	ldr	r1, [pc, #68]	; (801d214 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d1d0:	480e      	ldr	r0, [pc, #56]	; (801d20c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d1d2:	f001 fe93 	bl	801eefc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1d8:	681b      	ldr	r3, [r3, #0]
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d006      	beq.n	801d1ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d1de:	4b09      	ldr	r3, [pc, #36]	; (801d204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d1e0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801d1e4:	490c      	ldr	r1, [pc, #48]	; (801d218 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d1e6:	4809      	ldr	r0, [pc, #36]	; (801d20c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d1e8:	f001 fe88 	bl	801eefc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d1ec:	6a3b      	ldr	r3, [r7, #32]
 801d1ee:	2b00      	cmp	r3, #0
 801d1f0:	bf14      	ite	ne
 801d1f2:	2301      	movne	r3, #1
 801d1f4:	2300      	moveq	r3, #0
 801d1f6:	b2db      	uxtb	r3, r3
 801d1f8:	e000      	b.n	801d1fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d1fa:	2300      	movs	r3, #0
}
 801d1fc:	4618      	mov	r0, r3
 801d1fe:	3730      	adds	r7, #48	; 0x30
 801d200:	46bd      	mov	sp, r7
 801d202:	bd80      	pop	{r7, pc}
 801d204:	080266bc 	.word	0x080266bc
 801d208:	080267a0 	.word	0x080267a0
 801d20c:	08026704 	.word	0x08026704
 801d210:	080267c0 	.word	0x080267c0
 801d214:	080267f8 	.word	0x080267f8
 801d218:	08026808 	.word	0x08026808

0801d21c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d21c:	b580      	push	{r7, lr}
 801d21e:	b08e      	sub	sp, #56	; 0x38
 801d220:	af00      	add	r7, sp, #0
 801d222:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	685b      	ldr	r3, [r3, #4]
 801d228:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d22c:	781b      	ldrb	r3, [r3, #0]
 801d22e:	f003 030f 	and.w	r3, r3, #15
 801d232:	b2db      	uxtb	r3, r3
 801d234:	009b      	lsls	r3, r3, #2
 801d236:	b2db      	uxtb	r3, r3
 801d238:	2b14      	cmp	r3, #20
 801d23a:	f040 8167 	bne.w	801d50c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d240:	88db      	ldrh	r3, [r3, #6]
 801d242:	b29b      	uxth	r3, r3
 801d244:	4618      	mov	r0, r3
 801d246:	f7f5 fd25 	bl	8012c94 <lwip_htons>
 801d24a:	4603      	mov	r3, r0
 801d24c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d250:	b29b      	uxth	r3, r3
 801d252:	00db      	lsls	r3, r3, #3
 801d254:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d258:	885b      	ldrh	r3, [r3, #2]
 801d25a:	b29b      	uxth	r3, r3
 801d25c:	4618      	mov	r0, r3
 801d25e:	f7f5 fd19 	bl	8012c94 <lwip_htons>
 801d262:	4603      	mov	r3, r0
 801d264:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d268:	781b      	ldrb	r3, [r3, #0]
 801d26a:	f003 030f 	and.w	r3, r3, #15
 801d26e:	b2db      	uxtb	r3, r3
 801d270:	009b      	lsls	r3, r3, #2
 801d272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801d276:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d27a:	b29b      	uxth	r3, r3
 801d27c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d27e:	429a      	cmp	r2, r3
 801d280:	f0c0 8146 	bcc.w	801d510 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d288:	b29b      	uxth	r3, r3
 801d28a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d28c:	1ad3      	subs	r3, r2, r3
 801d28e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d290:	6878      	ldr	r0, [r7, #4]
 801d292:	f7f7 f8d5 	bl	8014440 <pbuf_clen>
 801d296:	4603      	mov	r3, r0
 801d298:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d29a:	4b9f      	ldr	r3, [pc, #636]	; (801d518 <ip4_reass+0x2fc>)
 801d29c:	881b      	ldrh	r3, [r3, #0]
 801d29e:	461a      	mov	r2, r3
 801d2a0:	8c3b      	ldrh	r3, [r7, #32]
 801d2a2:	4413      	add	r3, r2
 801d2a4:	2b0a      	cmp	r3, #10
 801d2a6:	dd10      	ble.n	801d2ca <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d2a8:	8c3b      	ldrh	r3, [r7, #32]
 801d2aa:	4619      	mov	r1, r3
 801d2ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d2ae:	f7ff fd81 	bl	801cdb4 <ip_reass_remove_oldest_datagram>
 801d2b2:	4603      	mov	r3, r0
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	f000 812d 	beq.w	801d514 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d2ba:	4b97      	ldr	r3, [pc, #604]	; (801d518 <ip4_reass+0x2fc>)
 801d2bc:	881b      	ldrh	r3, [r3, #0]
 801d2be:	461a      	mov	r2, r3
 801d2c0:	8c3b      	ldrh	r3, [r7, #32]
 801d2c2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d2c4:	2b0a      	cmp	r3, #10
 801d2c6:	f300 8125 	bgt.w	801d514 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d2ca:	4b94      	ldr	r3, [pc, #592]	; (801d51c <ip4_reass+0x300>)
 801d2cc:	681b      	ldr	r3, [r3, #0]
 801d2ce:	633b      	str	r3, [r7, #48]	; 0x30
 801d2d0:	e015      	b.n	801d2fe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2d4:	695a      	ldr	r2, [r3, #20]
 801d2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2d8:	68db      	ldr	r3, [r3, #12]
 801d2da:	429a      	cmp	r2, r3
 801d2dc:	d10c      	bne.n	801d2f8 <ip4_reass+0xdc>
 801d2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2e0:	699a      	ldr	r2, [r3, #24]
 801d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2e4:	691b      	ldr	r3, [r3, #16]
 801d2e6:	429a      	cmp	r2, r3
 801d2e8:	d106      	bne.n	801d2f8 <ip4_reass+0xdc>
 801d2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2ec:	899a      	ldrh	r2, [r3, #12]
 801d2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2f0:	889b      	ldrh	r3, [r3, #4]
 801d2f2:	b29b      	uxth	r3, r3
 801d2f4:	429a      	cmp	r2, r3
 801d2f6:	d006      	beq.n	801d306 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	633b      	str	r3, [r7, #48]	; 0x30
 801d2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d300:	2b00      	cmp	r3, #0
 801d302:	d1e6      	bne.n	801d2d2 <ip4_reass+0xb6>
 801d304:	e000      	b.n	801d308 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d306:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	d109      	bne.n	801d322 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d30e:	8c3b      	ldrh	r3, [r7, #32]
 801d310:	4619      	mov	r1, r3
 801d312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d314:	f7ff fdb0 	bl	801ce78 <ip_reass_enqueue_new_datagram>
 801d318:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d31c:	2b00      	cmp	r3, #0
 801d31e:	d11c      	bne.n	801d35a <ip4_reass+0x13e>
      goto nullreturn;
 801d320:	e109      	b.n	801d536 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d324:	88db      	ldrh	r3, [r3, #6]
 801d326:	b29b      	uxth	r3, r3
 801d328:	4618      	mov	r0, r3
 801d32a:	f7f5 fcb3 	bl	8012c94 <lwip_htons>
 801d32e:	4603      	mov	r3, r0
 801d330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d334:	2b00      	cmp	r3, #0
 801d336:	d110      	bne.n	801d35a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d33a:	89db      	ldrh	r3, [r3, #14]
 801d33c:	4618      	mov	r0, r3
 801d33e:	f7f5 fca9 	bl	8012c94 <lwip_htons>
 801d342:	4603      	mov	r3, r0
 801d344:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d348:	2b00      	cmp	r3, #0
 801d34a:	d006      	beq.n	801d35a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d34e:	3308      	adds	r3, #8
 801d350:	2214      	movs	r2, #20
 801d352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d354:	4618      	mov	r0, r3
 801d356:	f000 fe7d 	bl	801e054 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d35c:	88db      	ldrh	r3, [r3, #6]
 801d35e:	b29b      	uxth	r3, r3
 801d360:	f003 0320 	and.w	r3, r3, #32
 801d364:	2b00      	cmp	r3, #0
 801d366:	bf0c      	ite	eq
 801d368:	2301      	moveq	r3, #1
 801d36a:	2300      	movne	r3, #0
 801d36c:	b2db      	uxtb	r3, r3
 801d36e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d370:	69fb      	ldr	r3, [r7, #28]
 801d372:	2b00      	cmp	r3, #0
 801d374:	d00e      	beq.n	801d394 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d376:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d37a:	4413      	add	r3, r2
 801d37c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d37e:	8b7a      	ldrh	r2, [r7, #26]
 801d380:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d382:	429a      	cmp	r2, r3
 801d384:	f0c0 80a0 	bcc.w	801d4c8 <ip4_reass+0x2ac>
 801d388:	8b7b      	ldrh	r3, [r7, #26]
 801d38a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801d38e:	4293      	cmp	r3, r2
 801d390:	f200 809a 	bhi.w	801d4c8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d394:	69fa      	ldr	r2, [r7, #28]
 801d396:	6879      	ldr	r1, [r7, #4]
 801d398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d39a:	f7ff fdd5 	bl	801cf48 <ip_reass_chain_frag_into_datagram_and_validate>
 801d39e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d3a0:	697b      	ldr	r3, [r7, #20]
 801d3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d3a6:	f000 8091 	beq.w	801d4cc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d3aa:	4b5b      	ldr	r3, [pc, #364]	; (801d518 <ip4_reass+0x2fc>)
 801d3ac:	881a      	ldrh	r2, [r3, #0]
 801d3ae:	8c3b      	ldrh	r3, [r7, #32]
 801d3b0:	4413      	add	r3, r2
 801d3b2:	b29a      	uxth	r2, r3
 801d3b4:	4b58      	ldr	r3, [pc, #352]	; (801d518 <ip4_reass+0x2fc>)
 801d3b6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d3b8:	69fb      	ldr	r3, [r7, #28]
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	d00d      	beq.n	801d3da <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d3be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d3c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d3c2:	4413      	add	r3, r2
 801d3c4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3c8:	8a7a      	ldrh	r2, [r7, #18]
 801d3ca:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3ce:	7f9b      	ldrb	r3, [r3, #30]
 801d3d0:	f043 0301 	orr.w	r3, r3, #1
 801d3d4:	b2da      	uxtb	r2, r3
 801d3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3d8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d3da:	697b      	ldr	r3, [r7, #20]
 801d3dc:	2b01      	cmp	r3, #1
 801d3de:	d171      	bne.n	801d4c4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3e2:	8b9b      	ldrh	r3, [r3, #28]
 801d3e4:	3314      	adds	r3, #20
 801d3e6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3ea:	685b      	ldr	r3, [r3, #4]
 801d3ec:	685b      	ldr	r3, [r3, #4]
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3f4:	685b      	ldr	r3, [r3, #4]
 801d3f6:	685b      	ldr	r3, [r3, #4]
 801d3f8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3fc:	3308      	adds	r3, #8
 801d3fe:	2214      	movs	r2, #20
 801d400:	4619      	mov	r1, r3
 801d402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d404:	f000 fe26 	bl	801e054 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d408:	8a3b      	ldrh	r3, [r7, #16]
 801d40a:	4618      	mov	r0, r3
 801d40c:	f7f5 fc42 	bl	8012c94 <lwip_htons>
 801d410:	4603      	mov	r3, r0
 801d412:	461a      	mov	r2, r3
 801d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d416:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d41a:	2200      	movs	r2, #0
 801d41c:	719a      	strb	r2, [r3, #6]
 801d41e:	2200      	movs	r2, #0
 801d420:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d424:	2200      	movs	r2, #0
 801d426:	729a      	strb	r2, [r3, #10]
 801d428:	2200      	movs	r2, #0
 801d42a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d42e:	685b      	ldr	r3, [r3, #4]
 801d430:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d432:	e00d      	b.n	801d450 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801d434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d436:	685b      	ldr	r3, [r3, #4]
 801d438:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d43a:	2114      	movs	r1, #20
 801d43c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801d43e:	f7f6 feeb 	bl	8014218 <pbuf_remove_header>
      pbuf_cat(p, r);
 801d442:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d444:	6878      	ldr	r0, [r7, #4]
 801d446:	f7f7 f83b 	bl	80144c0 <pbuf_cat>
      r = iprh->next_pbuf;
 801d44a:	68fb      	ldr	r3, [r7, #12]
 801d44c:	681b      	ldr	r3, [r3, #0]
 801d44e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801d450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d452:	2b00      	cmp	r3, #0
 801d454:	d1ee      	bne.n	801d434 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d456:	4b31      	ldr	r3, [pc, #196]	; (801d51c <ip4_reass+0x300>)
 801d458:	681b      	ldr	r3, [r3, #0]
 801d45a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d45c:	429a      	cmp	r2, r3
 801d45e:	d102      	bne.n	801d466 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801d460:	2300      	movs	r3, #0
 801d462:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d464:	e010      	b.n	801d488 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d466:	4b2d      	ldr	r3, [pc, #180]	; (801d51c <ip4_reass+0x300>)
 801d468:	681b      	ldr	r3, [r3, #0]
 801d46a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d46c:	e007      	b.n	801d47e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801d46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d470:	681b      	ldr	r3, [r3, #0]
 801d472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d474:	429a      	cmp	r2, r3
 801d476:	d006      	beq.n	801d486 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d480:	2b00      	cmp	r3, #0
 801d482:	d1f4      	bne.n	801d46e <ip4_reass+0x252>
 801d484:	e000      	b.n	801d488 <ip4_reass+0x26c>
          break;
 801d486:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d488:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d48a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d48c:	f7ff fd2e 	bl	801ceec <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d490:	6878      	ldr	r0, [r7, #4]
 801d492:	f7f6 ffd5 	bl	8014440 <pbuf_clen>
 801d496:	4603      	mov	r3, r0
 801d498:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d49a:	4b1f      	ldr	r3, [pc, #124]	; (801d518 <ip4_reass+0x2fc>)
 801d49c:	881b      	ldrh	r3, [r3, #0]
 801d49e:	8c3a      	ldrh	r2, [r7, #32]
 801d4a0:	429a      	cmp	r2, r3
 801d4a2:	d906      	bls.n	801d4b2 <ip4_reass+0x296>
 801d4a4:	4b1e      	ldr	r3, [pc, #120]	; (801d520 <ip4_reass+0x304>)
 801d4a6:	f240 229b 	movw	r2, #667	; 0x29b
 801d4aa:	491e      	ldr	r1, [pc, #120]	; (801d524 <ip4_reass+0x308>)
 801d4ac:	481e      	ldr	r0, [pc, #120]	; (801d528 <ip4_reass+0x30c>)
 801d4ae:	f001 fd25 	bl	801eefc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d4b2:	4b19      	ldr	r3, [pc, #100]	; (801d518 <ip4_reass+0x2fc>)
 801d4b4:	881a      	ldrh	r2, [r3, #0]
 801d4b6:	8c3b      	ldrh	r3, [r7, #32]
 801d4b8:	1ad3      	subs	r3, r2, r3
 801d4ba:	b29a      	uxth	r2, r3
 801d4bc:	4b16      	ldr	r3, [pc, #88]	; (801d518 <ip4_reass+0x2fc>)
 801d4be:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	e03c      	b.n	801d53e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d4c4:	2300      	movs	r3, #0
 801d4c6:	e03a      	b.n	801d53e <ip4_reass+0x322>
      goto nullreturn_ipr;
 801d4c8:	bf00      	nop
 801d4ca:	e000      	b.n	801d4ce <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801d4cc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	d106      	bne.n	801d4e2 <ip4_reass+0x2c6>
 801d4d4:	4b12      	ldr	r3, [pc, #72]	; (801d520 <ip4_reass+0x304>)
 801d4d6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801d4da:	4914      	ldr	r1, [pc, #80]	; (801d52c <ip4_reass+0x310>)
 801d4dc:	4812      	ldr	r0, [pc, #72]	; (801d528 <ip4_reass+0x30c>)
 801d4de:	f001 fd0d 	bl	801eefc <iprintf>
  if (ipr->p == NULL) {
 801d4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4e4:	685b      	ldr	r3, [r3, #4]
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d124      	bne.n	801d534 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d4ea:	4b0c      	ldr	r3, [pc, #48]	; (801d51c <ip4_reass+0x300>)
 801d4ec:	681b      	ldr	r3, [r3, #0]
 801d4ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d4f0:	429a      	cmp	r2, r3
 801d4f2:	d006      	beq.n	801d502 <ip4_reass+0x2e6>
 801d4f4:	4b0a      	ldr	r3, [pc, #40]	; (801d520 <ip4_reass+0x304>)
 801d4f6:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d4fa:	490d      	ldr	r1, [pc, #52]	; (801d530 <ip4_reass+0x314>)
 801d4fc:	480a      	ldr	r0, [pc, #40]	; (801d528 <ip4_reass+0x30c>)
 801d4fe:	f001 fcfd 	bl	801eefc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d502:	2100      	movs	r1, #0
 801d504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d506:	f7ff fcf1 	bl	801ceec <ip_reass_dequeue_datagram>
 801d50a:	e014      	b.n	801d536 <ip4_reass+0x31a>
    goto nullreturn;
 801d50c:	bf00      	nop
 801d50e:	e012      	b.n	801d536 <ip4_reass+0x31a>
    goto nullreturn;
 801d510:	bf00      	nop
 801d512:	e010      	b.n	801d536 <ip4_reass+0x31a>
      goto nullreturn;
 801d514:	bf00      	nop
 801d516:	e00e      	b.n	801d536 <ip4_reass+0x31a>
 801d518:	20006ef4 	.word	0x20006ef4
 801d51c:	20006ef0 	.word	0x20006ef0
 801d520:	080266bc 	.word	0x080266bc
 801d524:	0802682c 	.word	0x0802682c
 801d528:	08026704 	.word	0x08026704
 801d52c:	08026848 	.word	0x08026848
 801d530:	08026854 	.word	0x08026854
  }

nullreturn:
 801d534:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d536:	6878      	ldr	r0, [r7, #4]
 801d538:	f7f6 fef4 	bl	8014324 <pbuf_free>
  return NULL;
 801d53c:	2300      	movs	r3, #0
}
 801d53e:	4618      	mov	r0, r3
 801d540:	3738      	adds	r7, #56	; 0x38
 801d542:	46bd      	mov	sp, r7
 801d544:	bd80      	pop	{r7, pc}
 801d546:	bf00      	nop

0801d548 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d548:	b580      	push	{r7, lr}
 801d54a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d54c:	2005      	movs	r0, #5
 801d54e:	f7f6 f857 	bl	8013600 <memp_malloc>
 801d552:	4603      	mov	r3, r0
}
 801d554:	4618      	mov	r0, r3
 801d556:	bd80      	pop	{r7, pc}

0801d558 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d558:	b580      	push	{r7, lr}
 801d55a:	b082      	sub	sp, #8
 801d55c:	af00      	add	r7, sp, #0
 801d55e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	2b00      	cmp	r3, #0
 801d564:	d106      	bne.n	801d574 <ip_frag_free_pbuf_custom_ref+0x1c>
 801d566:	4b07      	ldr	r3, [pc, #28]	; (801d584 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d568:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801d56c:	4906      	ldr	r1, [pc, #24]	; (801d588 <ip_frag_free_pbuf_custom_ref+0x30>)
 801d56e:	4807      	ldr	r0, [pc, #28]	; (801d58c <ip_frag_free_pbuf_custom_ref+0x34>)
 801d570:	f001 fcc4 	bl	801eefc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d574:	6879      	ldr	r1, [r7, #4]
 801d576:	2005      	movs	r0, #5
 801d578:	f7f6 f894 	bl	80136a4 <memp_free>
}
 801d57c:	bf00      	nop
 801d57e:	3708      	adds	r7, #8
 801d580:	46bd      	mov	sp, r7
 801d582:	bd80      	pop	{r7, pc}
 801d584:	080266bc 	.word	0x080266bc
 801d588:	08026874 	.word	0x08026874
 801d58c:	08026704 	.word	0x08026704

0801d590 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d590:	b580      	push	{r7, lr}
 801d592:	b084      	sub	sp, #16
 801d594:	af00      	add	r7, sp, #0
 801d596:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	d106      	bne.n	801d5b0 <ipfrag_free_pbuf_custom+0x20>
 801d5a2:	4b11      	ldr	r3, [pc, #68]	; (801d5e8 <ipfrag_free_pbuf_custom+0x58>)
 801d5a4:	f240 22ce 	movw	r2, #718	; 0x2ce
 801d5a8:	4910      	ldr	r1, [pc, #64]	; (801d5ec <ipfrag_free_pbuf_custom+0x5c>)
 801d5aa:	4811      	ldr	r0, [pc, #68]	; (801d5f0 <ipfrag_free_pbuf_custom+0x60>)
 801d5ac:	f001 fca6 	bl	801eefc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d5b0:	68fa      	ldr	r2, [r7, #12]
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	429a      	cmp	r2, r3
 801d5b6:	d006      	beq.n	801d5c6 <ipfrag_free_pbuf_custom+0x36>
 801d5b8:	4b0b      	ldr	r3, [pc, #44]	; (801d5e8 <ipfrag_free_pbuf_custom+0x58>)
 801d5ba:	f240 22cf 	movw	r2, #719	; 0x2cf
 801d5be:	490d      	ldr	r1, [pc, #52]	; (801d5f4 <ipfrag_free_pbuf_custom+0x64>)
 801d5c0:	480b      	ldr	r0, [pc, #44]	; (801d5f0 <ipfrag_free_pbuf_custom+0x60>)
 801d5c2:	f001 fc9b 	bl	801eefc <iprintf>
  if (pcr->original != NULL) {
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	695b      	ldr	r3, [r3, #20]
 801d5ca:	2b00      	cmp	r3, #0
 801d5cc:	d004      	beq.n	801d5d8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d5ce:	68fb      	ldr	r3, [r7, #12]
 801d5d0:	695b      	ldr	r3, [r3, #20]
 801d5d2:	4618      	mov	r0, r3
 801d5d4:	f7f6 fea6 	bl	8014324 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d5d8:	68f8      	ldr	r0, [r7, #12]
 801d5da:	f7ff ffbd 	bl	801d558 <ip_frag_free_pbuf_custom_ref>
}
 801d5de:	bf00      	nop
 801d5e0:	3710      	adds	r7, #16
 801d5e2:	46bd      	mov	sp, r7
 801d5e4:	bd80      	pop	{r7, pc}
 801d5e6:	bf00      	nop
 801d5e8:	080266bc 	.word	0x080266bc
 801d5ec:	08026880 	.word	0x08026880
 801d5f0:	08026704 	.word	0x08026704
 801d5f4:	0802688c 	.word	0x0802688c

0801d5f8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d5f8:	b580      	push	{r7, lr}
 801d5fa:	b094      	sub	sp, #80	; 0x50
 801d5fc:	af02      	add	r7, sp, #8
 801d5fe:	60f8      	str	r0, [r7, #12]
 801d600:	60b9      	str	r1, [r7, #8]
 801d602:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d604:	2300      	movs	r3, #0
 801d606:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d60a:	68bb      	ldr	r3, [r7, #8]
 801d60c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d60e:	3b14      	subs	r3, #20
 801d610:	2b00      	cmp	r3, #0
 801d612:	da00      	bge.n	801d616 <ip4_frag+0x1e>
 801d614:	3307      	adds	r3, #7
 801d616:	10db      	asrs	r3, r3, #3
 801d618:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d61a:	2314      	movs	r3, #20
 801d61c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d61e:	68fb      	ldr	r3, [r7, #12]
 801d620:	685b      	ldr	r3, [r3, #4]
 801d622:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801d624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d626:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d62a:	781b      	ldrb	r3, [r3, #0]
 801d62c:	f003 030f 	and.w	r3, r3, #15
 801d630:	b2db      	uxtb	r3, r3
 801d632:	009b      	lsls	r3, r3, #2
 801d634:	b2db      	uxtb	r3, r3
 801d636:	2b14      	cmp	r3, #20
 801d638:	d002      	beq.n	801d640 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d63a:	f06f 0305 	mvn.w	r3, #5
 801d63e:	e110      	b.n	801d862 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d640:	68fb      	ldr	r3, [r7, #12]
 801d642:	895b      	ldrh	r3, [r3, #10]
 801d644:	2b13      	cmp	r3, #19
 801d646:	d809      	bhi.n	801d65c <ip4_frag+0x64>
 801d648:	4b88      	ldr	r3, [pc, #544]	; (801d86c <ip4_frag+0x274>)
 801d64a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801d64e:	4988      	ldr	r1, [pc, #544]	; (801d870 <ip4_frag+0x278>)
 801d650:	4888      	ldr	r0, [pc, #544]	; (801d874 <ip4_frag+0x27c>)
 801d652:	f001 fc53 	bl	801eefc <iprintf>
 801d656:	f06f 0305 	mvn.w	r3, #5
 801d65a:	e102      	b.n	801d862 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d65e:	88db      	ldrh	r3, [r3, #6]
 801d660:	b29b      	uxth	r3, r3
 801d662:	4618      	mov	r0, r3
 801d664:	f7f5 fb16 	bl	8012c94 <lwip_htons>
 801d668:	4603      	mov	r3, r0
 801d66a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801d66c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d66e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d672:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d676:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d67c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d67e:	68fb      	ldr	r3, [r7, #12]
 801d680:	891b      	ldrh	r3, [r3, #8]
 801d682:	3b14      	subs	r3, #20
 801d684:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801d688:	e0e1      	b.n	801d84e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d68a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d68c:	00db      	lsls	r3, r3, #3
 801d68e:	b29b      	uxth	r3, r3
 801d690:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d694:	4293      	cmp	r3, r2
 801d696:	bf28      	it	cs
 801d698:	4613      	movcs	r3, r2
 801d69a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d69c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d6a0:	2114      	movs	r1, #20
 801d6a2:	200e      	movs	r0, #14
 801d6a4:	f7f6 fb5a 	bl	8013d5c <pbuf_alloc>
 801d6a8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801d6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6ac:	2b00      	cmp	r3, #0
 801d6ae:	f000 80d5 	beq.w	801d85c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6b4:	895b      	ldrh	r3, [r3, #10]
 801d6b6:	2b13      	cmp	r3, #19
 801d6b8:	d806      	bhi.n	801d6c8 <ip4_frag+0xd0>
 801d6ba:	4b6c      	ldr	r3, [pc, #432]	; (801d86c <ip4_frag+0x274>)
 801d6bc:	f44f 7249 	mov.w	r2, #804	; 0x324
 801d6c0:	496d      	ldr	r1, [pc, #436]	; (801d878 <ip4_frag+0x280>)
 801d6c2:	486c      	ldr	r0, [pc, #432]	; (801d874 <ip4_frag+0x27c>)
 801d6c4:	f001 fc1a 	bl	801eefc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6ca:	685b      	ldr	r3, [r3, #4]
 801d6cc:	2214      	movs	r2, #20
 801d6ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d6d0:	4618      	mov	r0, r3
 801d6d2:	f000 fcbf 	bl	801e054 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801d6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6d8:	685b      	ldr	r3, [r3, #4]
 801d6da:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801d6dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d6de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801d6e2:	e064      	b.n	801d7ae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	895a      	ldrh	r2, [r3, #10]
 801d6e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d6ea:	1ad3      	subs	r3, r2, r3
 801d6ec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	895b      	ldrh	r3, [r3, #10]
 801d6f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d6f4:	429a      	cmp	r2, r3
 801d6f6:	d906      	bls.n	801d706 <ip4_frag+0x10e>
 801d6f8:	4b5c      	ldr	r3, [pc, #368]	; (801d86c <ip4_frag+0x274>)
 801d6fa:	f240 322d 	movw	r2, #813	; 0x32d
 801d6fe:	495f      	ldr	r1, [pc, #380]	; (801d87c <ip4_frag+0x284>)
 801d700:	485c      	ldr	r0, [pc, #368]	; (801d874 <ip4_frag+0x27c>)
 801d702:	f001 fbfb 	bl	801eefc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801d706:	8bfa      	ldrh	r2, [r7, #30]
 801d708:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d70c:	4293      	cmp	r3, r2
 801d70e:	bf28      	it	cs
 801d710:	4613      	movcs	r3, r2
 801d712:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801d716:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d105      	bne.n	801d72a <ip4_frag+0x132>
        poff = 0;
 801d71e:	2300      	movs	r3, #0
 801d720:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	60fb      	str	r3, [r7, #12]
        continue;
 801d728:	e041      	b.n	801d7ae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801d72a:	f7ff ff0d 	bl	801d548 <ip_frag_alloc_pbuf_custom_ref>
 801d72e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801d730:	69bb      	ldr	r3, [r7, #24]
 801d732:	2b00      	cmp	r3, #0
 801d734:	d103      	bne.n	801d73e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801d736:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d738:	f7f6 fdf4 	bl	8014324 <pbuf_free>
        goto memerr;
 801d73c:	e08f      	b.n	801d85e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d73e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d744:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d746:	4413      	add	r3, r2
 801d748:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801d74c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801d750:	9201      	str	r2, [sp, #4]
 801d752:	9300      	str	r3, [sp, #0]
 801d754:	4603      	mov	r3, r0
 801d756:	2241      	movs	r2, #65	; 0x41
 801d758:	2000      	movs	r0, #0
 801d75a:	f7f6 fc29 	bl	8013fb0 <pbuf_alloced_custom>
 801d75e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801d760:	697b      	ldr	r3, [r7, #20]
 801d762:	2b00      	cmp	r3, #0
 801d764:	d106      	bne.n	801d774 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801d766:	69b8      	ldr	r0, [r7, #24]
 801d768:	f7ff fef6 	bl	801d558 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801d76c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d76e:	f7f6 fdd9 	bl	8014324 <pbuf_free>
        goto memerr;
 801d772:	e074      	b.n	801d85e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801d774:	68f8      	ldr	r0, [r7, #12]
 801d776:	f7f6 fe7b 	bl	8014470 <pbuf_ref>
      pcr->original = p;
 801d77a:	69bb      	ldr	r3, [r7, #24]
 801d77c:	68fa      	ldr	r2, [r7, #12]
 801d77e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801d780:	69bb      	ldr	r3, [r7, #24]
 801d782:	4a3f      	ldr	r2, [pc, #252]	; (801d880 <ip4_frag+0x288>)
 801d784:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801d786:	6979      	ldr	r1, [r7, #20]
 801d788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d78a:	f7f6 fe99 	bl	80144c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801d78e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801d792:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d796:	1ad3      	subs	r3, r2, r3
 801d798:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801d79c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d7a0:	2b00      	cmp	r3, #0
 801d7a2:	d004      	beq.n	801d7ae <ip4_frag+0x1b6>
        poff = 0;
 801d7a4:	2300      	movs	r3, #0
 801d7a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d7a8:	68fb      	ldr	r3, [r7, #12]
 801d7aa:	681b      	ldr	r3, [r3, #0]
 801d7ac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801d7ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d7b2:	2b00      	cmp	r3, #0
 801d7b4:	d196      	bne.n	801d6e4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801d7b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d7b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d7bc:	4413      	add	r3, r2
 801d7be:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801d7c0:	68bb      	ldr	r3, [r7, #8]
 801d7c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d7c4:	f1a3 0213 	sub.w	r2, r3, #19
 801d7c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d7cc:	429a      	cmp	r2, r3
 801d7ce:	bfcc      	ite	gt
 801d7d0:	2301      	movgt	r3, #1
 801d7d2:	2300      	movle	r3, #0
 801d7d4:	b2db      	uxtb	r3, r3
 801d7d6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801d7d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d7dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d7e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801d7e2:	6a3b      	ldr	r3, [r7, #32]
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d002      	beq.n	801d7ee <ip4_frag+0x1f6>
 801d7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7ea:	2b00      	cmp	r3, #0
 801d7ec:	d003      	beq.n	801d7f6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801d7ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d7f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d7f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801d7f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d7f8:	4618      	mov	r0, r3
 801d7fa:	f7f5 fa4b 	bl	8012c94 <lwip_htons>
 801d7fe:	4603      	mov	r3, r0
 801d800:	461a      	mov	r2, r3
 801d802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d804:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801d806:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d808:	3314      	adds	r3, #20
 801d80a:	b29b      	uxth	r3, r3
 801d80c:	4618      	mov	r0, r3
 801d80e:	f7f5 fa41 	bl	8012c94 <lwip_htons>
 801d812:	4603      	mov	r3, r0
 801d814:	461a      	mov	r2, r3
 801d816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d818:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801d81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d81c:	2200      	movs	r2, #0
 801d81e:	729a      	strb	r2, [r3, #10]
 801d820:	2200      	movs	r2, #0
 801d822:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801d824:	68bb      	ldr	r3, [r7, #8]
 801d826:	695b      	ldr	r3, [r3, #20]
 801d828:	687a      	ldr	r2, [r7, #4]
 801d82a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d82c:	68b8      	ldr	r0, [r7, #8]
 801d82e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801d830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d832:	f7f6 fd77 	bl	8014324 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801d836:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d83a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d83c:	1ad3      	subs	r3, r2, r3
 801d83e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801d842:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801d846:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d848:	4413      	add	r3, r2
 801d84a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801d84e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d852:	2b00      	cmp	r3, #0
 801d854:	f47f af19 	bne.w	801d68a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801d858:	2300      	movs	r3, #0
 801d85a:	e002      	b.n	801d862 <ip4_frag+0x26a>
      goto memerr;
 801d85c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801d85e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d862:	4618      	mov	r0, r3
 801d864:	3748      	adds	r7, #72	; 0x48
 801d866:	46bd      	mov	sp, r7
 801d868:	bd80      	pop	{r7, pc}
 801d86a:	bf00      	nop
 801d86c:	080266bc 	.word	0x080266bc
 801d870:	08026898 	.word	0x08026898
 801d874:	08026704 	.word	0x08026704
 801d878:	080268b4 	.word	0x080268b4
 801d87c:	080268d4 	.word	0x080268d4
 801d880:	0801d591 	.word	0x0801d591

0801d884 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801d884:	b580      	push	{r7, lr}
 801d886:	b086      	sub	sp, #24
 801d888:	af00      	add	r7, sp, #0
 801d88a:	6078      	str	r0, [r7, #4]
 801d88c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801d88e:	230e      	movs	r3, #14
 801d890:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801d892:	687b      	ldr	r3, [r7, #4]
 801d894:	895b      	ldrh	r3, [r3, #10]
 801d896:	2b0e      	cmp	r3, #14
 801d898:	d96e      	bls.n	801d978 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	7bdb      	ldrb	r3, [r3, #15]
 801d89e:	2b00      	cmp	r3, #0
 801d8a0:	d106      	bne.n	801d8b0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801d8a2:	683b      	ldr	r3, [r7, #0]
 801d8a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d8a8:	3301      	adds	r3, #1
 801d8aa:	b2da      	uxtb	r2, r3
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	685b      	ldr	r3, [r3, #4]
 801d8b4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801d8b6:	693b      	ldr	r3, [r7, #16]
 801d8b8:	7b1a      	ldrb	r2, [r3, #12]
 801d8ba:	7b5b      	ldrb	r3, [r3, #13]
 801d8bc:	021b      	lsls	r3, r3, #8
 801d8be:	4313      	orrs	r3, r2
 801d8c0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801d8c2:	693b      	ldr	r3, [r7, #16]
 801d8c4:	781b      	ldrb	r3, [r3, #0]
 801d8c6:	f003 0301 	and.w	r3, r3, #1
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d023      	beq.n	801d916 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801d8ce:	693b      	ldr	r3, [r7, #16]
 801d8d0:	781b      	ldrb	r3, [r3, #0]
 801d8d2:	2b01      	cmp	r3, #1
 801d8d4:	d10f      	bne.n	801d8f6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d8d6:	693b      	ldr	r3, [r7, #16]
 801d8d8:	785b      	ldrb	r3, [r3, #1]
 801d8da:	2b00      	cmp	r3, #0
 801d8dc:	d11b      	bne.n	801d916 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801d8de:	693b      	ldr	r3, [r7, #16]
 801d8e0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d8e2:	2b5e      	cmp	r3, #94	; 0x5e
 801d8e4:	d117      	bne.n	801d916 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	7b5b      	ldrb	r3, [r3, #13]
 801d8ea:	f043 0310 	orr.w	r3, r3, #16
 801d8ee:	b2da      	uxtb	r2, r3
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	735a      	strb	r2, [r3, #13]
 801d8f4:	e00f      	b.n	801d916 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801d8f6:	693b      	ldr	r3, [r7, #16]
 801d8f8:	2206      	movs	r2, #6
 801d8fa:	4928      	ldr	r1, [pc, #160]	; (801d99c <ethernet_input+0x118>)
 801d8fc:	4618      	mov	r0, r3
 801d8fe:	f000 fb9b 	bl	801e038 <memcmp>
 801d902:	4603      	mov	r3, r0
 801d904:	2b00      	cmp	r3, #0
 801d906:	d106      	bne.n	801d916 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	7b5b      	ldrb	r3, [r3, #13]
 801d90c:	f043 0308 	orr.w	r3, r3, #8
 801d910:	b2da      	uxtb	r2, r3
 801d912:	687b      	ldr	r3, [r7, #4]
 801d914:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801d916:	89fb      	ldrh	r3, [r7, #14]
 801d918:	2b08      	cmp	r3, #8
 801d91a:	d003      	beq.n	801d924 <ethernet_input+0xa0>
 801d91c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801d920:	d014      	beq.n	801d94c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801d922:	e032      	b.n	801d98a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d924:	683b      	ldr	r3, [r7, #0]
 801d926:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d92a:	f003 0308 	and.w	r3, r3, #8
 801d92e:	2b00      	cmp	r3, #0
 801d930:	d024      	beq.n	801d97c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d932:	8afb      	ldrh	r3, [r7, #22]
 801d934:	4619      	mov	r1, r3
 801d936:	6878      	ldr	r0, [r7, #4]
 801d938:	f7f6 fc6e 	bl	8014218 <pbuf_remove_header>
 801d93c:	4603      	mov	r3, r0
 801d93e:	2b00      	cmp	r3, #0
 801d940:	d11e      	bne.n	801d980 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801d942:	6839      	ldr	r1, [r7, #0]
 801d944:	6878      	ldr	r0, [r7, #4]
 801d946:	f7fe ff27 	bl	801c798 <ip4_input>
      break;
 801d94a:	e013      	b.n	801d974 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d94c:	683b      	ldr	r3, [r7, #0]
 801d94e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d952:	f003 0308 	and.w	r3, r3, #8
 801d956:	2b00      	cmp	r3, #0
 801d958:	d014      	beq.n	801d984 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d95a:	8afb      	ldrh	r3, [r7, #22]
 801d95c:	4619      	mov	r1, r3
 801d95e:	6878      	ldr	r0, [r7, #4]
 801d960:	f7f6 fc5a 	bl	8014218 <pbuf_remove_header>
 801d964:	4603      	mov	r3, r0
 801d966:	2b00      	cmp	r3, #0
 801d968:	d10e      	bne.n	801d988 <ethernet_input+0x104>
        etharp_input(p, netif);
 801d96a:	6839      	ldr	r1, [r7, #0]
 801d96c:	6878      	ldr	r0, [r7, #4]
 801d96e:	f7fe f8c7 	bl	801bb00 <etharp_input>
      break;
 801d972:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801d974:	2300      	movs	r3, #0
 801d976:	e00c      	b.n	801d992 <ethernet_input+0x10e>
    goto free_and_return;
 801d978:	bf00      	nop
 801d97a:	e006      	b.n	801d98a <ethernet_input+0x106>
        goto free_and_return;
 801d97c:	bf00      	nop
 801d97e:	e004      	b.n	801d98a <ethernet_input+0x106>
        goto free_and_return;
 801d980:	bf00      	nop
 801d982:	e002      	b.n	801d98a <ethernet_input+0x106>
        goto free_and_return;
 801d984:	bf00      	nop
 801d986:	e000      	b.n	801d98a <ethernet_input+0x106>
        goto free_and_return;
 801d988:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801d98a:	6878      	ldr	r0, [r7, #4]
 801d98c:	f7f6 fcca 	bl	8014324 <pbuf_free>
  return ERR_OK;
 801d990:	2300      	movs	r3, #0
}
 801d992:	4618      	mov	r0, r3
 801d994:	3718      	adds	r7, #24
 801d996:	46bd      	mov	sp, r7
 801d998:	bd80      	pop	{r7, pc}
 801d99a:	bf00      	nop
 801d99c:	08026c28 	.word	0x08026c28

0801d9a0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801d9a0:	b580      	push	{r7, lr}
 801d9a2:	b086      	sub	sp, #24
 801d9a4:	af00      	add	r7, sp, #0
 801d9a6:	60f8      	str	r0, [r7, #12]
 801d9a8:	60b9      	str	r1, [r7, #8]
 801d9aa:	607a      	str	r2, [r7, #4]
 801d9ac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801d9ae:	8c3b      	ldrh	r3, [r7, #32]
 801d9b0:	4618      	mov	r0, r3
 801d9b2:	f7f5 f96f 	bl	8012c94 <lwip_htons>
 801d9b6:	4603      	mov	r3, r0
 801d9b8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801d9ba:	210e      	movs	r1, #14
 801d9bc:	68b8      	ldr	r0, [r7, #8]
 801d9be:	f7f6 fc1b 	bl	80141f8 <pbuf_add_header>
 801d9c2:	4603      	mov	r3, r0
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	d125      	bne.n	801da14 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801d9c8:	68bb      	ldr	r3, [r7, #8]
 801d9ca:	685b      	ldr	r3, [r3, #4]
 801d9cc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801d9ce:	693b      	ldr	r3, [r7, #16]
 801d9d0:	8afa      	ldrh	r2, [r7, #22]
 801d9d2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801d9d4:	693b      	ldr	r3, [r7, #16]
 801d9d6:	2206      	movs	r2, #6
 801d9d8:	6839      	ldr	r1, [r7, #0]
 801d9da:	4618      	mov	r0, r3
 801d9dc:	f000 fb3a 	bl	801e054 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801d9e0:	693b      	ldr	r3, [r7, #16]
 801d9e2:	3306      	adds	r3, #6
 801d9e4:	2206      	movs	r2, #6
 801d9e6:	6879      	ldr	r1, [r7, #4]
 801d9e8:	4618      	mov	r0, r3
 801d9ea:	f000 fb33 	bl	801e054 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801d9ee:	68fb      	ldr	r3, [r7, #12]
 801d9f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d9f4:	2b06      	cmp	r3, #6
 801d9f6:	d006      	beq.n	801da06 <ethernet_output+0x66>
 801d9f8:	4b0a      	ldr	r3, [pc, #40]	; (801da24 <ethernet_output+0x84>)
 801d9fa:	f44f 7299 	mov.w	r2, #306	; 0x132
 801d9fe:	490a      	ldr	r1, [pc, #40]	; (801da28 <ethernet_output+0x88>)
 801da00:	480a      	ldr	r0, [pc, #40]	; (801da2c <ethernet_output+0x8c>)
 801da02:	f001 fa7b 	bl	801eefc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801da06:	68fb      	ldr	r3, [r7, #12]
 801da08:	699b      	ldr	r3, [r3, #24]
 801da0a:	68b9      	ldr	r1, [r7, #8]
 801da0c:	68f8      	ldr	r0, [r7, #12]
 801da0e:	4798      	blx	r3
 801da10:	4603      	mov	r3, r0
 801da12:	e002      	b.n	801da1a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801da14:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801da16:	f06f 0301 	mvn.w	r3, #1
}
 801da1a:	4618      	mov	r0, r3
 801da1c:	3718      	adds	r7, #24
 801da1e:	46bd      	mov	sp, r7
 801da20:	bd80      	pop	{r7, pc}
 801da22:	bf00      	nop
 801da24:	080268e4 	.word	0x080268e4
 801da28:	0802691c 	.word	0x0802691c
 801da2c:	08026950 	.word	0x08026950

0801da30 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801da30:	b580      	push	{r7, lr}
 801da32:	b086      	sub	sp, #24
 801da34:	af00      	add	r7, sp, #0
 801da36:	6078      	str	r0, [r7, #4]
 801da38:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801da3a:	683b      	ldr	r3, [r7, #0]
 801da3c:	60bb      	str	r3, [r7, #8]
 801da3e:	2304      	movs	r3, #4
 801da40:	60fb      	str	r3, [r7, #12]
 801da42:	2300      	movs	r3, #0
 801da44:	613b      	str	r3, [r7, #16]
 801da46:	2300      	movs	r3, #0
 801da48:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801da4a:	f107 0308 	add.w	r3, r7, #8
 801da4e:	2100      	movs	r1, #0
 801da50:	4618      	mov	r0, r3
 801da52:	f7f0 f990 	bl	800dd76 <osMessageCreate>
 801da56:	4602      	mov	r2, r0
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	681b      	ldr	r3, [r3, #0]
 801da60:	2b00      	cmp	r3, #0
 801da62:	d102      	bne.n	801da6a <sys_mbox_new+0x3a>
    return ERR_MEM;
 801da64:	f04f 33ff 	mov.w	r3, #4294967295
 801da68:	e000      	b.n	801da6c <sys_mbox_new+0x3c>

  return ERR_OK;
 801da6a:	2300      	movs	r3, #0
}
 801da6c:	4618      	mov	r0, r3
 801da6e:	3718      	adds	r7, #24
 801da70:	46bd      	mov	sp, r7
 801da72:	bd80      	pop	{r7, pc}

0801da74 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801da74:	b580      	push	{r7, lr}
 801da76:	b082      	sub	sp, #8
 801da78:	af00      	add	r7, sp, #0
 801da7a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	681b      	ldr	r3, [r3, #0]
 801da80:	4618      	mov	r0, r3
 801da82:	f7f0 fb8a 	bl	800e19a <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	681b      	ldr	r3, [r3, #0]
 801da8a:	4618      	mov	r0, r3
 801da8c:	f7f0 fb9b 	bl	800e1c6 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801da90:	bf00      	nop
 801da92:	3708      	adds	r7, #8
 801da94:	46bd      	mov	sp, r7
 801da96:	bd80      	pop	{r7, pc}

0801da98 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801da98:	b580      	push	{r7, lr}
 801da9a:	b084      	sub	sp, #16
 801da9c:	af00      	add	r7, sp, #0
 801da9e:	6078      	str	r0, [r7, #4]
 801daa0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	681b      	ldr	r3, [r3, #0]
 801daa6:	6839      	ldr	r1, [r7, #0]
 801daa8:	2200      	movs	r2, #0
 801daaa:	4618      	mov	r0, r3
 801daac:	f7f0 f98c 	bl	800ddc8 <osMessagePut>
 801dab0:	4603      	mov	r3, r0
 801dab2:	2b00      	cmp	r3, #0
 801dab4:	d102      	bne.n	801dabc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801dab6:	2300      	movs	r3, #0
 801dab8:	73fb      	strb	r3, [r7, #15]
 801daba:	e001      	b.n	801dac0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801dabc:	23ff      	movs	r3, #255	; 0xff
 801dabe:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801dac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801dac4:	4618      	mov	r0, r3
 801dac6:	3710      	adds	r7, #16
 801dac8:	46bd      	mov	sp, r7
 801daca:	bd80      	pop	{r7, pc}

0801dacc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801dacc:	b580      	push	{r7, lr}
 801dace:	b08c      	sub	sp, #48	; 0x30
 801dad0:	af00      	add	r7, sp, #0
 801dad2:	61f8      	str	r0, [r7, #28]
 801dad4:	61b9      	str	r1, [r7, #24]
 801dad6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801dad8:	f7ef fe77 	bl	800d7ca <osKernelSysTick>
 801dadc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801dade:	697b      	ldr	r3, [r7, #20]
 801dae0:	2b00      	cmp	r3, #0
 801dae2:	d017      	beq.n	801db14 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801dae4:	69fb      	ldr	r3, [r7, #28]
 801dae6:	6819      	ldr	r1, [r3, #0]
 801dae8:	f107 0320 	add.w	r3, r7, #32
 801daec:	697a      	ldr	r2, [r7, #20]
 801daee:	4618      	mov	r0, r3
 801daf0:	f7f0 f9aa 	bl	800de48 <osMessageGet>

    if(event.status == osEventMessage)
 801daf4:	6a3b      	ldr	r3, [r7, #32]
 801daf6:	2b10      	cmp	r3, #16
 801daf8:	d109      	bne.n	801db0e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801dafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dafc:	461a      	mov	r2, r3
 801dafe:	69bb      	ldr	r3, [r7, #24]
 801db00:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801db02:	f7ef fe62 	bl	800d7ca <osKernelSysTick>
 801db06:	4602      	mov	r2, r0
 801db08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db0a:	1ad3      	subs	r3, r2, r3
 801db0c:	e019      	b.n	801db42 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801db0e:	f04f 33ff 	mov.w	r3, #4294967295
 801db12:	e016      	b.n	801db42 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801db14:	69fb      	ldr	r3, [r7, #28]
 801db16:	6819      	ldr	r1, [r3, #0]
 801db18:	463b      	mov	r3, r7
 801db1a:	f04f 32ff 	mov.w	r2, #4294967295
 801db1e:	4618      	mov	r0, r3
 801db20:	f7f0 f992 	bl	800de48 <osMessageGet>
 801db24:	f107 0320 	add.w	r3, r7, #32
 801db28:	463a      	mov	r2, r7
 801db2a:	ca07      	ldmia	r2, {r0, r1, r2}
 801db2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801db30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db32:	461a      	mov	r2, r3
 801db34:	69bb      	ldr	r3, [r7, #24]
 801db36:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801db38:	f7ef fe47 	bl	800d7ca <osKernelSysTick>
 801db3c:	4602      	mov	r2, r0
 801db3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db40:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801db42:	4618      	mov	r0, r3
 801db44:	3730      	adds	r7, #48	; 0x30
 801db46:	46bd      	mov	sp, r7
 801db48:	bd80      	pop	{r7, pc}

0801db4a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801db4a:	b580      	push	{r7, lr}
 801db4c:	b086      	sub	sp, #24
 801db4e:	af00      	add	r7, sp, #0
 801db50:	6078      	str	r0, [r7, #4]
 801db52:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	6819      	ldr	r1, [r3, #0]
 801db58:	f107 030c 	add.w	r3, r7, #12
 801db5c:	2200      	movs	r2, #0
 801db5e:	4618      	mov	r0, r3
 801db60:	f7f0 f972 	bl	800de48 <osMessageGet>

  if(event.status == osEventMessage)
 801db64:	68fb      	ldr	r3, [r7, #12]
 801db66:	2b10      	cmp	r3, #16
 801db68:	d105      	bne.n	801db76 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801db6a:	693b      	ldr	r3, [r7, #16]
 801db6c:	461a      	mov	r2, r3
 801db6e:	683b      	ldr	r3, [r7, #0]
 801db70:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801db72:	2300      	movs	r3, #0
 801db74:	e001      	b.n	801db7a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801db76:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801db7a:	4618      	mov	r0, r3
 801db7c:	3718      	adds	r7, #24
 801db7e:	46bd      	mov	sp, r7
 801db80:	bd80      	pop	{r7, pc}

0801db82 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801db82:	b480      	push	{r7}
 801db84:	b083      	sub	sp, #12
 801db86:	af00      	add	r7, sp, #0
 801db88:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	681b      	ldr	r3, [r3, #0]
 801db8e:	2b00      	cmp	r3, #0
 801db90:	d101      	bne.n	801db96 <sys_mbox_valid+0x14>
    return 0;
 801db92:	2300      	movs	r3, #0
 801db94:	e000      	b.n	801db98 <sys_mbox_valid+0x16>
  else
    return 1;
 801db96:	2301      	movs	r3, #1
}
 801db98:	4618      	mov	r0, r3
 801db9a:	370c      	adds	r7, #12
 801db9c:	46bd      	mov	sp, r7
 801db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dba2:	4770      	bx	lr

0801dba4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801dba4:	b480      	push	{r7}
 801dba6:	b083      	sub	sp, #12
 801dba8:	af00      	add	r7, sp, #0
 801dbaa:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	2200      	movs	r2, #0
 801dbb0:	601a      	str	r2, [r3, #0]
}
 801dbb2:	bf00      	nop
 801dbb4:	370c      	adds	r7, #12
 801dbb6:	46bd      	mov	sp, r7
 801dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbbc:	4770      	bx	lr

0801dbbe <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801dbbe:	b580      	push	{r7, lr}
 801dbc0:	b084      	sub	sp, #16
 801dbc2:	af00      	add	r7, sp, #0
 801dbc4:	6078      	str	r0, [r7, #4]
 801dbc6:	460b      	mov	r3, r1
 801dbc8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801dbca:	2300      	movs	r3, #0
 801dbcc:	60bb      	str	r3, [r7, #8]
 801dbce:	2300      	movs	r3, #0
 801dbd0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801dbd2:	f107 0308 	add.w	r3, r7, #8
 801dbd6:	2101      	movs	r1, #1
 801dbd8:	4618      	mov	r0, r3
 801dbda:	f7ef ff03 	bl	800d9e4 <osSemaphoreCreate>
 801dbde:	4602      	mov	r2, r0
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801dbe4:	687b      	ldr	r3, [r7, #4]
 801dbe6:	681b      	ldr	r3, [r3, #0]
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d102      	bne.n	801dbf2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801dbec:	f04f 33ff 	mov.w	r3, #4294967295
 801dbf0:	e009      	b.n	801dc06 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801dbf2:	78fb      	ldrb	r3, [r7, #3]
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d105      	bne.n	801dc04 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	681b      	ldr	r3, [r3, #0]
 801dbfc:	2100      	movs	r1, #0
 801dbfe:	4618      	mov	r0, r3
 801dc00:	f7ef ff22 	bl	800da48 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801dc04:	2300      	movs	r3, #0
}
 801dc06:	4618      	mov	r0, r3
 801dc08:	3710      	adds	r7, #16
 801dc0a:	46bd      	mov	sp, r7
 801dc0c:	bd80      	pop	{r7, pc}

0801dc0e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801dc0e:	b580      	push	{r7, lr}
 801dc10:	b084      	sub	sp, #16
 801dc12:	af00      	add	r7, sp, #0
 801dc14:	6078      	str	r0, [r7, #4]
 801dc16:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801dc18:	f7ef fdd7 	bl	800d7ca <osKernelSysTick>
 801dc1c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801dc1e:	683b      	ldr	r3, [r7, #0]
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d011      	beq.n	801dc48 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	681b      	ldr	r3, [r3, #0]
 801dc28:	6839      	ldr	r1, [r7, #0]
 801dc2a:	4618      	mov	r0, r3
 801dc2c:	f7ef ff0c 	bl	800da48 <osSemaphoreWait>
 801dc30:	4603      	mov	r3, r0
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	d105      	bne.n	801dc42 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801dc36:	f7ef fdc8 	bl	800d7ca <osKernelSysTick>
 801dc3a:	4602      	mov	r2, r0
 801dc3c:	68fb      	ldr	r3, [r7, #12]
 801dc3e:	1ad3      	subs	r3, r2, r3
 801dc40:	e012      	b.n	801dc68 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801dc42:	f04f 33ff 	mov.w	r3, #4294967295
 801dc46:	e00f      	b.n	801dc68 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801dc48:	bf00      	nop
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	681b      	ldr	r3, [r3, #0]
 801dc4e:	f04f 31ff 	mov.w	r1, #4294967295
 801dc52:	4618      	mov	r0, r3
 801dc54:	f7ef fef8 	bl	800da48 <osSemaphoreWait>
 801dc58:	4603      	mov	r3, r0
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	d1f5      	bne.n	801dc4a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801dc5e:	f7ef fdb4 	bl	800d7ca <osKernelSysTick>
 801dc62:	4602      	mov	r2, r0
 801dc64:	68fb      	ldr	r3, [r7, #12]
 801dc66:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801dc68:	4618      	mov	r0, r3
 801dc6a:	3710      	adds	r7, #16
 801dc6c:	46bd      	mov	sp, r7
 801dc6e:	bd80      	pop	{r7, pc}

0801dc70 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801dc70:	b580      	push	{r7, lr}
 801dc72:	b082      	sub	sp, #8
 801dc74:	af00      	add	r7, sp, #0
 801dc76:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	681b      	ldr	r3, [r3, #0]
 801dc7c:	4618      	mov	r0, r3
 801dc7e:	f7ef ff31 	bl	800dae4 <osSemaphoreRelease>
}
 801dc82:	bf00      	nop
 801dc84:	3708      	adds	r7, #8
 801dc86:	46bd      	mov	sp, r7
 801dc88:	bd80      	pop	{r7, pc}

0801dc8a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801dc8a:	b580      	push	{r7, lr}
 801dc8c:	b082      	sub	sp, #8
 801dc8e:	af00      	add	r7, sp, #0
 801dc90:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	681b      	ldr	r3, [r3, #0]
 801dc96:	4618      	mov	r0, r3
 801dc98:	f7ef ff5a 	bl	800db50 <osSemaphoreDelete>
}
 801dc9c:	bf00      	nop
 801dc9e:	3708      	adds	r7, #8
 801dca0:	46bd      	mov	sp, r7
 801dca2:	bd80      	pop	{r7, pc}

0801dca4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801dca4:	b480      	push	{r7}
 801dca6:	b083      	sub	sp, #12
 801dca8:	af00      	add	r7, sp, #0
 801dcaa:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d101      	bne.n	801dcb8 <sys_sem_valid+0x14>
    return 0;
 801dcb4:	2300      	movs	r3, #0
 801dcb6:	e000      	b.n	801dcba <sys_sem_valid+0x16>
  else
    return 1;
 801dcb8:	2301      	movs	r3, #1
}
 801dcba:	4618      	mov	r0, r3
 801dcbc:	370c      	adds	r7, #12
 801dcbe:	46bd      	mov	sp, r7
 801dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcc4:	4770      	bx	lr

0801dcc6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801dcc6:	b480      	push	{r7}
 801dcc8:	b083      	sub	sp, #12
 801dcca:	af00      	add	r7, sp, #0
 801dccc:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	2200      	movs	r2, #0
 801dcd2:	601a      	str	r2, [r3, #0]
}
 801dcd4:	bf00      	nop
 801dcd6:	370c      	adds	r7, #12
 801dcd8:	46bd      	mov	sp, r7
 801dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcde:	4770      	bx	lr

0801dce0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801dce0:	b580      	push	{r7, lr}
 801dce2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801dce4:	4803      	ldr	r0, [pc, #12]	; (801dcf4 <sys_init+0x14>)
 801dce6:	f7ef fde0 	bl	800d8aa <osMutexCreate>
 801dcea:	4603      	mov	r3, r0
 801dcec:	4a02      	ldr	r2, [pc, #8]	; (801dcf8 <sys_init+0x18>)
 801dcee:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801dcf0:	bf00      	nop
 801dcf2:	bd80      	pop	{r7, pc}
 801dcf4:	08026c38 	.word	0x08026c38
 801dcf8:	2000e118 	.word	0x2000e118

0801dcfc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801dcfc:	b580      	push	{r7, lr}
 801dcfe:	b084      	sub	sp, #16
 801dd00:	af00      	add	r7, sp, #0
 801dd02:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801dd04:	2300      	movs	r3, #0
 801dd06:	60bb      	str	r3, [r7, #8]
 801dd08:	2300      	movs	r3, #0
 801dd0a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801dd0c:	f107 0308 	add.w	r3, r7, #8
 801dd10:	4618      	mov	r0, r3
 801dd12:	f7ef fdca 	bl	800d8aa <osMutexCreate>
 801dd16:	4602      	mov	r2, r0
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d102      	bne.n	801dd2a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801dd24:	f04f 33ff 	mov.w	r3, #4294967295
 801dd28:	e000      	b.n	801dd2c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801dd2a:	2300      	movs	r3, #0
}
 801dd2c:	4618      	mov	r0, r3
 801dd2e:	3710      	adds	r7, #16
 801dd30:	46bd      	mov	sp, r7
 801dd32:	bd80      	pop	{r7, pc}

0801dd34 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801dd34:	b580      	push	{r7, lr}
 801dd36:	b082      	sub	sp, #8
 801dd38:	af00      	add	r7, sp, #0
 801dd3a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	681b      	ldr	r3, [r3, #0]
 801dd40:	f04f 31ff 	mov.w	r1, #4294967295
 801dd44:	4618      	mov	r0, r3
 801dd46:	f7ef fdc9 	bl	800d8dc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801dd4a:	bf00      	nop
 801dd4c:	3708      	adds	r7, #8
 801dd4e:	46bd      	mov	sp, r7
 801dd50:	bd80      	pop	{r7, pc}

0801dd52 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801dd52:	b580      	push	{r7, lr}
 801dd54:	b082      	sub	sp, #8
 801dd56:	af00      	add	r7, sp, #0
 801dd58:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	681b      	ldr	r3, [r3, #0]
 801dd5e:	4618      	mov	r0, r3
 801dd60:	f7ef fe0a 	bl	800d978 <osMutexRelease>
}
 801dd64:	bf00      	nop
 801dd66:	3708      	adds	r7, #8
 801dd68:	46bd      	mov	sp, r7
 801dd6a:	bd80      	pop	{r7, pc}

0801dd6c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801dd6c:	b580      	push	{r7, lr}
 801dd6e:	b08c      	sub	sp, #48	; 0x30
 801dd70:	af00      	add	r7, sp, #0
 801dd72:	60f8      	str	r0, [r7, #12]
 801dd74:	60b9      	str	r1, [r7, #8]
 801dd76:	607a      	str	r2, [r7, #4]
 801dd78:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801dd7a:	f107 0314 	add.w	r3, r7, #20
 801dd7e:	2200      	movs	r2, #0
 801dd80:	601a      	str	r2, [r3, #0]
 801dd82:	605a      	str	r2, [r3, #4]
 801dd84:	609a      	str	r2, [r3, #8]
 801dd86:	60da      	str	r2, [r3, #12]
 801dd88:	611a      	str	r2, [r3, #16]
 801dd8a:	615a      	str	r2, [r3, #20]
 801dd8c:	619a      	str	r2, [r3, #24]
 801dd8e:	68fb      	ldr	r3, [r7, #12]
 801dd90:	617b      	str	r3, [r7, #20]
 801dd92:	68bb      	ldr	r3, [r7, #8]
 801dd94:	61bb      	str	r3, [r7, #24]
 801dd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd98:	b21b      	sxth	r3, r3
 801dd9a:	83bb      	strh	r3, [r7, #28]
 801dd9c:	683b      	ldr	r3, [r7, #0]
 801dd9e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801dda0:	f107 0314 	add.w	r3, r7, #20
 801dda4:	6879      	ldr	r1, [r7, #4]
 801dda6:	4618      	mov	r0, r3
 801dda8:	f7ef fd1f 	bl	800d7ea <osThreadCreate>
 801ddac:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801ddae:	4618      	mov	r0, r3
 801ddb0:	3730      	adds	r7, #48	; 0x30
 801ddb2:	46bd      	mov	sp, r7
 801ddb4:	bd80      	pop	{r7, pc}
	...

0801ddb8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801ddb8:	b580      	push	{r7, lr}
 801ddba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801ddbc:	4b04      	ldr	r3, [pc, #16]	; (801ddd0 <sys_arch_protect+0x18>)
 801ddbe:	681b      	ldr	r3, [r3, #0]
 801ddc0:	f04f 31ff 	mov.w	r1, #4294967295
 801ddc4:	4618      	mov	r0, r3
 801ddc6:	f7ef fd89 	bl	800d8dc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801ddca:	2301      	movs	r3, #1
}
 801ddcc:	4618      	mov	r0, r3
 801ddce:	bd80      	pop	{r7, pc}
 801ddd0:	2000e118 	.word	0x2000e118

0801ddd4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801ddd4:	b580      	push	{r7, lr}
 801ddd6:	b082      	sub	sp, #8
 801ddd8:	af00      	add	r7, sp, #0
 801ddda:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801dddc:	4b04      	ldr	r3, [pc, #16]	; (801ddf0 <sys_arch_unprotect+0x1c>)
 801ddde:	681b      	ldr	r3, [r3, #0]
 801dde0:	4618      	mov	r0, r3
 801dde2:	f7ef fdc9 	bl	800d978 <osMutexRelease>
}
 801dde6:	bf00      	nop
 801dde8:	3708      	adds	r7, #8
 801ddea:	46bd      	mov	sp, r7
 801ddec:	bd80      	pop	{r7, pc}
 801ddee:	bf00      	nop
 801ddf0:	2000e118 	.word	0x2000e118

0801ddf4 <std>:
 801ddf4:	2300      	movs	r3, #0
 801ddf6:	b510      	push	{r4, lr}
 801ddf8:	4604      	mov	r4, r0
 801ddfa:	e9c0 3300 	strd	r3, r3, [r0]
 801ddfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801de02:	6083      	str	r3, [r0, #8]
 801de04:	8181      	strh	r1, [r0, #12]
 801de06:	6643      	str	r3, [r0, #100]	; 0x64
 801de08:	81c2      	strh	r2, [r0, #14]
 801de0a:	6183      	str	r3, [r0, #24]
 801de0c:	4619      	mov	r1, r3
 801de0e:	2208      	movs	r2, #8
 801de10:	305c      	adds	r0, #92	; 0x5c
 801de12:	f000 f947 	bl	801e0a4 <memset>
 801de16:	4b05      	ldr	r3, [pc, #20]	; (801de2c <std+0x38>)
 801de18:	6263      	str	r3, [r4, #36]	; 0x24
 801de1a:	4b05      	ldr	r3, [pc, #20]	; (801de30 <std+0x3c>)
 801de1c:	62a3      	str	r3, [r4, #40]	; 0x28
 801de1e:	4b05      	ldr	r3, [pc, #20]	; (801de34 <std+0x40>)
 801de20:	62e3      	str	r3, [r4, #44]	; 0x2c
 801de22:	4b05      	ldr	r3, [pc, #20]	; (801de38 <std+0x44>)
 801de24:	6224      	str	r4, [r4, #32]
 801de26:	6323      	str	r3, [r4, #48]	; 0x30
 801de28:	bd10      	pop	{r4, pc}
 801de2a:	bf00      	nop
 801de2c:	0801f145 	.word	0x0801f145
 801de30:	0801f16b 	.word	0x0801f16b
 801de34:	0801f1a3 	.word	0x0801f1a3
 801de38:	0801f1c7 	.word	0x0801f1c7

0801de3c <_cleanup_r>:
 801de3c:	4901      	ldr	r1, [pc, #4]	; (801de44 <_cleanup_r+0x8>)
 801de3e:	f000 b8af 	b.w	801dfa0 <_fwalk_reent>
 801de42:	bf00      	nop
 801de44:	08020e29 	.word	0x08020e29

0801de48 <__sfmoreglue>:
 801de48:	b570      	push	{r4, r5, r6, lr}
 801de4a:	1e4a      	subs	r2, r1, #1
 801de4c:	2568      	movs	r5, #104	; 0x68
 801de4e:	4355      	muls	r5, r2
 801de50:	460e      	mov	r6, r1
 801de52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801de56:	f000 f97d 	bl	801e154 <_malloc_r>
 801de5a:	4604      	mov	r4, r0
 801de5c:	b140      	cbz	r0, 801de70 <__sfmoreglue+0x28>
 801de5e:	2100      	movs	r1, #0
 801de60:	e9c0 1600 	strd	r1, r6, [r0]
 801de64:	300c      	adds	r0, #12
 801de66:	60a0      	str	r0, [r4, #8]
 801de68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801de6c:	f000 f91a 	bl	801e0a4 <memset>
 801de70:	4620      	mov	r0, r4
 801de72:	bd70      	pop	{r4, r5, r6, pc}

0801de74 <__sfp_lock_acquire>:
 801de74:	4801      	ldr	r0, [pc, #4]	; (801de7c <__sfp_lock_acquire+0x8>)
 801de76:	f7e8 bef1 	b.w	8006c5c <__retarget_lock_acquire_recursive>
 801de7a:	bf00      	nop
 801de7c:	200008e4 	.word	0x200008e4

0801de80 <__sfp_lock_release>:
 801de80:	4801      	ldr	r0, [pc, #4]	; (801de88 <__sfp_lock_release+0x8>)
 801de82:	f7e8 beff 	b.w	8006c84 <__retarget_lock_release_recursive>
 801de86:	bf00      	nop
 801de88:	200008e4 	.word	0x200008e4

0801de8c <__sinit_lock_acquire>:
 801de8c:	4801      	ldr	r0, [pc, #4]	; (801de94 <__sinit_lock_acquire+0x8>)
 801de8e:	f7e8 bee5 	b.w	8006c5c <__retarget_lock_acquire_recursive>
 801de92:	bf00      	nop
 801de94:	200008d8 	.word	0x200008d8

0801de98 <__sinit_lock_release>:
 801de98:	4801      	ldr	r0, [pc, #4]	; (801dea0 <__sinit_lock_release+0x8>)
 801de9a:	f7e8 bef3 	b.w	8006c84 <__retarget_lock_release_recursive>
 801de9e:	bf00      	nop
 801dea0:	200008d8 	.word	0x200008d8

0801dea4 <__sinit>:
 801dea4:	b510      	push	{r4, lr}
 801dea6:	4604      	mov	r4, r0
 801dea8:	f7ff fff0 	bl	801de8c <__sinit_lock_acquire>
 801deac:	69a3      	ldr	r3, [r4, #24]
 801deae:	b11b      	cbz	r3, 801deb8 <__sinit+0x14>
 801deb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801deb4:	f7ff bff0 	b.w	801de98 <__sinit_lock_release>
 801deb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801debc:	6523      	str	r3, [r4, #80]	; 0x50
 801debe:	4b13      	ldr	r3, [pc, #76]	; (801df0c <__sinit+0x68>)
 801dec0:	4a13      	ldr	r2, [pc, #76]	; (801df10 <__sinit+0x6c>)
 801dec2:	681b      	ldr	r3, [r3, #0]
 801dec4:	62a2      	str	r2, [r4, #40]	; 0x28
 801dec6:	42a3      	cmp	r3, r4
 801dec8:	bf04      	itt	eq
 801deca:	2301      	moveq	r3, #1
 801decc:	61a3      	streq	r3, [r4, #24]
 801dece:	4620      	mov	r0, r4
 801ded0:	f000 f820 	bl	801df14 <__sfp>
 801ded4:	6060      	str	r0, [r4, #4]
 801ded6:	4620      	mov	r0, r4
 801ded8:	f000 f81c 	bl	801df14 <__sfp>
 801dedc:	60a0      	str	r0, [r4, #8]
 801dede:	4620      	mov	r0, r4
 801dee0:	f000 f818 	bl	801df14 <__sfp>
 801dee4:	2200      	movs	r2, #0
 801dee6:	60e0      	str	r0, [r4, #12]
 801dee8:	2104      	movs	r1, #4
 801deea:	6860      	ldr	r0, [r4, #4]
 801deec:	f7ff ff82 	bl	801ddf4 <std>
 801def0:	68a0      	ldr	r0, [r4, #8]
 801def2:	2201      	movs	r2, #1
 801def4:	2109      	movs	r1, #9
 801def6:	f7ff ff7d 	bl	801ddf4 <std>
 801defa:	68e0      	ldr	r0, [r4, #12]
 801defc:	2202      	movs	r2, #2
 801defe:	2112      	movs	r1, #18
 801df00:	f7ff ff78 	bl	801ddf4 <std>
 801df04:	2301      	movs	r3, #1
 801df06:	61a3      	str	r3, [r4, #24]
 801df08:	e7d2      	b.n	801deb0 <__sinit+0xc>
 801df0a:	bf00      	nop
 801df0c:	08026da4 	.word	0x08026da4
 801df10:	0801de3d 	.word	0x0801de3d

0801df14 <__sfp>:
 801df14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df16:	4607      	mov	r7, r0
 801df18:	f7ff ffac 	bl	801de74 <__sfp_lock_acquire>
 801df1c:	4b1e      	ldr	r3, [pc, #120]	; (801df98 <__sfp+0x84>)
 801df1e:	681e      	ldr	r6, [r3, #0]
 801df20:	69b3      	ldr	r3, [r6, #24]
 801df22:	b913      	cbnz	r3, 801df2a <__sfp+0x16>
 801df24:	4630      	mov	r0, r6
 801df26:	f7ff ffbd 	bl	801dea4 <__sinit>
 801df2a:	3648      	adds	r6, #72	; 0x48
 801df2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801df30:	3b01      	subs	r3, #1
 801df32:	d503      	bpl.n	801df3c <__sfp+0x28>
 801df34:	6833      	ldr	r3, [r6, #0]
 801df36:	b30b      	cbz	r3, 801df7c <__sfp+0x68>
 801df38:	6836      	ldr	r6, [r6, #0]
 801df3a:	e7f7      	b.n	801df2c <__sfp+0x18>
 801df3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801df40:	b9d5      	cbnz	r5, 801df78 <__sfp+0x64>
 801df42:	4b16      	ldr	r3, [pc, #88]	; (801df9c <__sfp+0x88>)
 801df44:	60e3      	str	r3, [r4, #12]
 801df46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801df4a:	6665      	str	r5, [r4, #100]	; 0x64
 801df4c:	f7e8 fe60 	bl	8006c10 <__retarget_lock_init_recursive>
 801df50:	f7ff ff96 	bl	801de80 <__sfp_lock_release>
 801df54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801df58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801df5c:	6025      	str	r5, [r4, #0]
 801df5e:	61a5      	str	r5, [r4, #24]
 801df60:	2208      	movs	r2, #8
 801df62:	4629      	mov	r1, r5
 801df64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801df68:	f000 f89c 	bl	801e0a4 <memset>
 801df6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801df70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801df74:	4620      	mov	r0, r4
 801df76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df78:	3468      	adds	r4, #104	; 0x68
 801df7a:	e7d9      	b.n	801df30 <__sfp+0x1c>
 801df7c:	2104      	movs	r1, #4
 801df7e:	4638      	mov	r0, r7
 801df80:	f7ff ff62 	bl	801de48 <__sfmoreglue>
 801df84:	4604      	mov	r4, r0
 801df86:	6030      	str	r0, [r6, #0]
 801df88:	2800      	cmp	r0, #0
 801df8a:	d1d5      	bne.n	801df38 <__sfp+0x24>
 801df8c:	f7ff ff78 	bl	801de80 <__sfp_lock_release>
 801df90:	230c      	movs	r3, #12
 801df92:	603b      	str	r3, [r7, #0]
 801df94:	e7ee      	b.n	801df74 <__sfp+0x60>
 801df96:	bf00      	nop
 801df98:	08026da4 	.word	0x08026da4
 801df9c:	ffff0001 	.word	0xffff0001

0801dfa0 <_fwalk_reent>:
 801dfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dfa4:	4606      	mov	r6, r0
 801dfa6:	4688      	mov	r8, r1
 801dfa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dfac:	2700      	movs	r7, #0
 801dfae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dfb2:	f1b9 0901 	subs.w	r9, r9, #1
 801dfb6:	d505      	bpl.n	801dfc4 <_fwalk_reent+0x24>
 801dfb8:	6824      	ldr	r4, [r4, #0]
 801dfba:	2c00      	cmp	r4, #0
 801dfbc:	d1f7      	bne.n	801dfae <_fwalk_reent+0xe>
 801dfbe:	4638      	mov	r0, r7
 801dfc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dfc4:	89ab      	ldrh	r3, [r5, #12]
 801dfc6:	2b01      	cmp	r3, #1
 801dfc8:	d907      	bls.n	801dfda <_fwalk_reent+0x3a>
 801dfca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dfce:	3301      	adds	r3, #1
 801dfd0:	d003      	beq.n	801dfda <_fwalk_reent+0x3a>
 801dfd2:	4629      	mov	r1, r5
 801dfd4:	4630      	mov	r0, r6
 801dfd6:	47c0      	blx	r8
 801dfd8:	4307      	orrs	r7, r0
 801dfda:	3568      	adds	r5, #104	; 0x68
 801dfdc:	e7e9      	b.n	801dfb2 <_fwalk_reent+0x12>
	...

0801dfe0 <__libc_init_array>:
 801dfe0:	b570      	push	{r4, r5, r6, lr}
 801dfe2:	4d0d      	ldr	r5, [pc, #52]	; (801e018 <__libc_init_array+0x38>)
 801dfe4:	4c0d      	ldr	r4, [pc, #52]	; (801e01c <__libc_init_array+0x3c>)
 801dfe6:	1b64      	subs	r4, r4, r5
 801dfe8:	10a4      	asrs	r4, r4, #2
 801dfea:	2600      	movs	r6, #0
 801dfec:	42a6      	cmp	r6, r4
 801dfee:	d109      	bne.n	801e004 <__libc_init_array+0x24>
 801dff0:	4d0b      	ldr	r5, [pc, #44]	; (801e020 <__libc_init_array+0x40>)
 801dff2:	4c0c      	ldr	r4, [pc, #48]	; (801e024 <__libc_init_array+0x44>)
 801dff4:	f005 f884 	bl	8023100 <_init>
 801dff8:	1b64      	subs	r4, r4, r5
 801dffa:	10a4      	asrs	r4, r4, #2
 801dffc:	2600      	movs	r6, #0
 801dffe:	42a6      	cmp	r6, r4
 801e000:	d105      	bne.n	801e00e <__libc_init_array+0x2e>
 801e002:	bd70      	pop	{r4, r5, r6, pc}
 801e004:	f855 3b04 	ldr.w	r3, [r5], #4
 801e008:	4798      	blx	r3
 801e00a:	3601      	adds	r6, #1
 801e00c:	e7ee      	b.n	801dfec <__libc_init_array+0xc>
 801e00e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e012:	4798      	blx	r3
 801e014:	3601      	adds	r6, #1
 801e016:	e7f2      	b.n	801dffe <__libc_init_array+0x1e>
 801e018:	08027170 	.word	0x08027170
 801e01c:	08027170 	.word	0x08027170
 801e020:	08027170 	.word	0x08027170
 801e024:	08027174 	.word	0x08027174

0801e028 <malloc>:
 801e028:	4b02      	ldr	r3, [pc, #8]	; (801e034 <malloc+0xc>)
 801e02a:	4601      	mov	r1, r0
 801e02c:	6818      	ldr	r0, [r3, #0]
 801e02e:	f000 b891 	b.w	801e154 <_malloc_r>
 801e032:	bf00      	nop
 801e034:	20000360 	.word	0x20000360

0801e038 <memcmp>:
 801e038:	b530      	push	{r4, r5, lr}
 801e03a:	3901      	subs	r1, #1
 801e03c:	2400      	movs	r4, #0
 801e03e:	42a2      	cmp	r2, r4
 801e040:	d101      	bne.n	801e046 <memcmp+0xe>
 801e042:	2000      	movs	r0, #0
 801e044:	e005      	b.n	801e052 <memcmp+0x1a>
 801e046:	5d03      	ldrb	r3, [r0, r4]
 801e048:	3401      	adds	r4, #1
 801e04a:	5d0d      	ldrb	r5, [r1, r4]
 801e04c:	42ab      	cmp	r3, r5
 801e04e:	d0f6      	beq.n	801e03e <memcmp+0x6>
 801e050:	1b58      	subs	r0, r3, r5
 801e052:	bd30      	pop	{r4, r5, pc}

0801e054 <memcpy>:
 801e054:	440a      	add	r2, r1
 801e056:	4291      	cmp	r1, r2
 801e058:	f100 33ff 	add.w	r3, r0, #4294967295
 801e05c:	d100      	bne.n	801e060 <memcpy+0xc>
 801e05e:	4770      	bx	lr
 801e060:	b510      	push	{r4, lr}
 801e062:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e066:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e06a:	4291      	cmp	r1, r2
 801e06c:	d1f9      	bne.n	801e062 <memcpy+0xe>
 801e06e:	bd10      	pop	{r4, pc}

0801e070 <memmove>:
 801e070:	4288      	cmp	r0, r1
 801e072:	b510      	push	{r4, lr}
 801e074:	eb01 0402 	add.w	r4, r1, r2
 801e078:	d902      	bls.n	801e080 <memmove+0x10>
 801e07a:	4284      	cmp	r4, r0
 801e07c:	4623      	mov	r3, r4
 801e07e:	d807      	bhi.n	801e090 <memmove+0x20>
 801e080:	1e43      	subs	r3, r0, #1
 801e082:	42a1      	cmp	r1, r4
 801e084:	d008      	beq.n	801e098 <memmove+0x28>
 801e086:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e08a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e08e:	e7f8      	b.n	801e082 <memmove+0x12>
 801e090:	4402      	add	r2, r0
 801e092:	4601      	mov	r1, r0
 801e094:	428a      	cmp	r2, r1
 801e096:	d100      	bne.n	801e09a <memmove+0x2a>
 801e098:	bd10      	pop	{r4, pc}
 801e09a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e09e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e0a2:	e7f7      	b.n	801e094 <memmove+0x24>

0801e0a4 <memset>:
 801e0a4:	4402      	add	r2, r0
 801e0a6:	4603      	mov	r3, r0
 801e0a8:	4293      	cmp	r3, r2
 801e0aa:	d100      	bne.n	801e0ae <memset+0xa>
 801e0ac:	4770      	bx	lr
 801e0ae:	f803 1b01 	strb.w	r1, [r3], #1
 801e0b2:	e7f9      	b.n	801e0a8 <memset+0x4>

0801e0b4 <_free_r>:
 801e0b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e0b6:	2900      	cmp	r1, #0
 801e0b8:	d048      	beq.n	801e14c <_free_r+0x98>
 801e0ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e0be:	9001      	str	r0, [sp, #4]
 801e0c0:	2b00      	cmp	r3, #0
 801e0c2:	f1a1 0404 	sub.w	r4, r1, #4
 801e0c6:	bfb8      	it	lt
 801e0c8:	18e4      	addlt	r4, r4, r3
 801e0ca:	f003 fa93 	bl	80215f4 <__malloc_lock>
 801e0ce:	4a20      	ldr	r2, [pc, #128]	; (801e150 <_free_r+0x9c>)
 801e0d0:	9801      	ldr	r0, [sp, #4]
 801e0d2:	6813      	ldr	r3, [r2, #0]
 801e0d4:	4615      	mov	r5, r2
 801e0d6:	b933      	cbnz	r3, 801e0e6 <_free_r+0x32>
 801e0d8:	6063      	str	r3, [r4, #4]
 801e0da:	6014      	str	r4, [r2, #0]
 801e0dc:	b003      	add	sp, #12
 801e0de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e0e2:	f003 ba8d 	b.w	8021600 <__malloc_unlock>
 801e0e6:	42a3      	cmp	r3, r4
 801e0e8:	d90b      	bls.n	801e102 <_free_r+0x4e>
 801e0ea:	6821      	ldr	r1, [r4, #0]
 801e0ec:	1862      	adds	r2, r4, r1
 801e0ee:	4293      	cmp	r3, r2
 801e0f0:	bf04      	itt	eq
 801e0f2:	681a      	ldreq	r2, [r3, #0]
 801e0f4:	685b      	ldreq	r3, [r3, #4]
 801e0f6:	6063      	str	r3, [r4, #4]
 801e0f8:	bf04      	itt	eq
 801e0fa:	1852      	addeq	r2, r2, r1
 801e0fc:	6022      	streq	r2, [r4, #0]
 801e0fe:	602c      	str	r4, [r5, #0]
 801e100:	e7ec      	b.n	801e0dc <_free_r+0x28>
 801e102:	461a      	mov	r2, r3
 801e104:	685b      	ldr	r3, [r3, #4]
 801e106:	b10b      	cbz	r3, 801e10c <_free_r+0x58>
 801e108:	42a3      	cmp	r3, r4
 801e10a:	d9fa      	bls.n	801e102 <_free_r+0x4e>
 801e10c:	6811      	ldr	r1, [r2, #0]
 801e10e:	1855      	adds	r5, r2, r1
 801e110:	42a5      	cmp	r5, r4
 801e112:	d10b      	bne.n	801e12c <_free_r+0x78>
 801e114:	6824      	ldr	r4, [r4, #0]
 801e116:	4421      	add	r1, r4
 801e118:	1854      	adds	r4, r2, r1
 801e11a:	42a3      	cmp	r3, r4
 801e11c:	6011      	str	r1, [r2, #0]
 801e11e:	d1dd      	bne.n	801e0dc <_free_r+0x28>
 801e120:	681c      	ldr	r4, [r3, #0]
 801e122:	685b      	ldr	r3, [r3, #4]
 801e124:	6053      	str	r3, [r2, #4]
 801e126:	4421      	add	r1, r4
 801e128:	6011      	str	r1, [r2, #0]
 801e12a:	e7d7      	b.n	801e0dc <_free_r+0x28>
 801e12c:	d902      	bls.n	801e134 <_free_r+0x80>
 801e12e:	230c      	movs	r3, #12
 801e130:	6003      	str	r3, [r0, #0]
 801e132:	e7d3      	b.n	801e0dc <_free_r+0x28>
 801e134:	6825      	ldr	r5, [r4, #0]
 801e136:	1961      	adds	r1, r4, r5
 801e138:	428b      	cmp	r3, r1
 801e13a:	bf04      	itt	eq
 801e13c:	6819      	ldreq	r1, [r3, #0]
 801e13e:	685b      	ldreq	r3, [r3, #4]
 801e140:	6063      	str	r3, [r4, #4]
 801e142:	bf04      	itt	eq
 801e144:	1949      	addeq	r1, r1, r5
 801e146:	6021      	streq	r1, [r4, #0]
 801e148:	6054      	str	r4, [r2, #4]
 801e14a:	e7c7      	b.n	801e0dc <_free_r+0x28>
 801e14c:	b003      	add	sp, #12
 801e14e:	bd30      	pop	{r4, r5, pc}
 801e150:	20006ef8 	.word	0x20006ef8

0801e154 <_malloc_r>:
 801e154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e156:	1ccd      	adds	r5, r1, #3
 801e158:	f025 0503 	bic.w	r5, r5, #3
 801e15c:	3508      	adds	r5, #8
 801e15e:	2d0c      	cmp	r5, #12
 801e160:	bf38      	it	cc
 801e162:	250c      	movcc	r5, #12
 801e164:	2d00      	cmp	r5, #0
 801e166:	4606      	mov	r6, r0
 801e168:	db01      	blt.n	801e16e <_malloc_r+0x1a>
 801e16a:	42a9      	cmp	r1, r5
 801e16c:	d903      	bls.n	801e176 <_malloc_r+0x22>
 801e16e:	230c      	movs	r3, #12
 801e170:	6033      	str	r3, [r6, #0]
 801e172:	2000      	movs	r0, #0
 801e174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e176:	f003 fa3d 	bl	80215f4 <__malloc_lock>
 801e17a:	4921      	ldr	r1, [pc, #132]	; (801e200 <_malloc_r+0xac>)
 801e17c:	680a      	ldr	r2, [r1, #0]
 801e17e:	4614      	mov	r4, r2
 801e180:	b99c      	cbnz	r4, 801e1aa <_malloc_r+0x56>
 801e182:	4f20      	ldr	r7, [pc, #128]	; (801e204 <_malloc_r+0xb0>)
 801e184:	683b      	ldr	r3, [r7, #0]
 801e186:	b923      	cbnz	r3, 801e192 <_malloc_r+0x3e>
 801e188:	4621      	mov	r1, r4
 801e18a:	4630      	mov	r0, r6
 801e18c:	f000 ff78 	bl	801f080 <_sbrk_r>
 801e190:	6038      	str	r0, [r7, #0]
 801e192:	4629      	mov	r1, r5
 801e194:	4630      	mov	r0, r6
 801e196:	f000 ff73 	bl	801f080 <_sbrk_r>
 801e19a:	1c43      	adds	r3, r0, #1
 801e19c:	d123      	bne.n	801e1e6 <_malloc_r+0x92>
 801e19e:	230c      	movs	r3, #12
 801e1a0:	6033      	str	r3, [r6, #0]
 801e1a2:	4630      	mov	r0, r6
 801e1a4:	f003 fa2c 	bl	8021600 <__malloc_unlock>
 801e1a8:	e7e3      	b.n	801e172 <_malloc_r+0x1e>
 801e1aa:	6823      	ldr	r3, [r4, #0]
 801e1ac:	1b5b      	subs	r3, r3, r5
 801e1ae:	d417      	bmi.n	801e1e0 <_malloc_r+0x8c>
 801e1b0:	2b0b      	cmp	r3, #11
 801e1b2:	d903      	bls.n	801e1bc <_malloc_r+0x68>
 801e1b4:	6023      	str	r3, [r4, #0]
 801e1b6:	441c      	add	r4, r3
 801e1b8:	6025      	str	r5, [r4, #0]
 801e1ba:	e004      	b.n	801e1c6 <_malloc_r+0x72>
 801e1bc:	6863      	ldr	r3, [r4, #4]
 801e1be:	42a2      	cmp	r2, r4
 801e1c0:	bf0c      	ite	eq
 801e1c2:	600b      	streq	r3, [r1, #0]
 801e1c4:	6053      	strne	r3, [r2, #4]
 801e1c6:	4630      	mov	r0, r6
 801e1c8:	f003 fa1a 	bl	8021600 <__malloc_unlock>
 801e1cc:	f104 000b 	add.w	r0, r4, #11
 801e1d0:	1d23      	adds	r3, r4, #4
 801e1d2:	f020 0007 	bic.w	r0, r0, #7
 801e1d6:	1ac2      	subs	r2, r0, r3
 801e1d8:	d0cc      	beq.n	801e174 <_malloc_r+0x20>
 801e1da:	1a1b      	subs	r3, r3, r0
 801e1dc:	50a3      	str	r3, [r4, r2]
 801e1de:	e7c9      	b.n	801e174 <_malloc_r+0x20>
 801e1e0:	4622      	mov	r2, r4
 801e1e2:	6864      	ldr	r4, [r4, #4]
 801e1e4:	e7cc      	b.n	801e180 <_malloc_r+0x2c>
 801e1e6:	1cc4      	adds	r4, r0, #3
 801e1e8:	f024 0403 	bic.w	r4, r4, #3
 801e1ec:	42a0      	cmp	r0, r4
 801e1ee:	d0e3      	beq.n	801e1b8 <_malloc_r+0x64>
 801e1f0:	1a21      	subs	r1, r4, r0
 801e1f2:	4630      	mov	r0, r6
 801e1f4:	f000 ff44 	bl	801f080 <_sbrk_r>
 801e1f8:	3001      	adds	r0, #1
 801e1fa:	d1dd      	bne.n	801e1b8 <_malloc_r+0x64>
 801e1fc:	e7cf      	b.n	801e19e <_malloc_r+0x4a>
 801e1fe:	bf00      	nop
 801e200:	20006ef8 	.word	0x20006ef8
 801e204:	20006efc 	.word	0x20006efc

0801e208 <__cvt>:
 801e208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e20c:	ec55 4b10 	vmov	r4, r5, d0
 801e210:	2d00      	cmp	r5, #0
 801e212:	460e      	mov	r6, r1
 801e214:	4619      	mov	r1, r3
 801e216:	462b      	mov	r3, r5
 801e218:	bfbb      	ittet	lt
 801e21a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801e21e:	461d      	movlt	r5, r3
 801e220:	2300      	movge	r3, #0
 801e222:	232d      	movlt	r3, #45	; 0x2d
 801e224:	700b      	strb	r3, [r1, #0]
 801e226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e228:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801e22c:	4691      	mov	r9, r2
 801e22e:	f023 0820 	bic.w	r8, r3, #32
 801e232:	bfbc      	itt	lt
 801e234:	4622      	movlt	r2, r4
 801e236:	4614      	movlt	r4, r2
 801e238:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e23c:	d005      	beq.n	801e24a <__cvt+0x42>
 801e23e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801e242:	d100      	bne.n	801e246 <__cvt+0x3e>
 801e244:	3601      	adds	r6, #1
 801e246:	2102      	movs	r1, #2
 801e248:	e000      	b.n	801e24c <__cvt+0x44>
 801e24a:	2103      	movs	r1, #3
 801e24c:	ab03      	add	r3, sp, #12
 801e24e:	9301      	str	r3, [sp, #4]
 801e250:	ab02      	add	r3, sp, #8
 801e252:	9300      	str	r3, [sp, #0]
 801e254:	ec45 4b10 	vmov	d0, r4, r5
 801e258:	4653      	mov	r3, sl
 801e25a:	4632      	mov	r2, r6
 801e25c:	f001 ff6c 	bl	8020138 <_dtoa_r>
 801e260:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801e264:	4607      	mov	r7, r0
 801e266:	d102      	bne.n	801e26e <__cvt+0x66>
 801e268:	f019 0f01 	tst.w	r9, #1
 801e26c:	d022      	beq.n	801e2b4 <__cvt+0xac>
 801e26e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e272:	eb07 0906 	add.w	r9, r7, r6
 801e276:	d110      	bne.n	801e29a <__cvt+0x92>
 801e278:	783b      	ldrb	r3, [r7, #0]
 801e27a:	2b30      	cmp	r3, #48	; 0x30
 801e27c:	d10a      	bne.n	801e294 <__cvt+0x8c>
 801e27e:	2200      	movs	r2, #0
 801e280:	2300      	movs	r3, #0
 801e282:	4620      	mov	r0, r4
 801e284:	4629      	mov	r1, r5
 801e286:	f7e2 fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 801e28a:	b918      	cbnz	r0, 801e294 <__cvt+0x8c>
 801e28c:	f1c6 0601 	rsb	r6, r6, #1
 801e290:	f8ca 6000 	str.w	r6, [sl]
 801e294:	f8da 3000 	ldr.w	r3, [sl]
 801e298:	4499      	add	r9, r3
 801e29a:	2200      	movs	r2, #0
 801e29c:	2300      	movs	r3, #0
 801e29e:	4620      	mov	r0, r4
 801e2a0:	4629      	mov	r1, r5
 801e2a2:	f7e2 fc11 	bl	8000ac8 <__aeabi_dcmpeq>
 801e2a6:	b108      	cbz	r0, 801e2ac <__cvt+0xa4>
 801e2a8:	f8cd 900c 	str.w	r9, [sp, #12]
 801e2ac:	2230      	movs	r2, #48	; 0x30
 801e2ae:	9b03      	ldr	r3, [sp, #12]
 801e2b0:	454b      	cmp	r3, r9
 801e2b2:	d307      	bcc.n	801e2c4 <__cvt+0xbc>
 801e2b4:	9b03      	ldr	r3, [sp, #12]
 801e2b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e2b8:	1bdb      	subs	r3, r3, r7
 801e2ba:	4638      	mov	r0, r7
 801e2bc:	6013      	str	r3, [r2, #0]
 801e2be:	b004      	add	sp, #16
 801e2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2c4:	1c59      	adds	r1, r3, #1
 801e2c6:	9103      	str	r1, [sp, #12]
 801e2c8:	701a      	strb	r2, [r3, #0]
 801e2ca:	e7f0      	b.n	801e2ae <__cvt+0xa6>

0801e2cc <__exponent>:
 801e2cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e2ce:	4603      	mov	r3, r0
 801e2d0:	2900      	cmp	r1, #0
 801e2d2:	bfb8      	it	lt
 801e2d4:	4249      	neglt	r1, r1
 801e2d6:	f803 2b02 	strb.w	r2, [r3], #2
 801e2da:	bfb4      	ite	lt
 801e2dc:	222d      	movlt	r2, #45	; 0x2d
 801e2de:	222b      	movge	r2, #43	; 0x2b
 801e2e0:	2909      	cmp	r1, #9
 801e2e2:	7042      	strb	r2, [r0, #1]
 801e2e4:	dd2a      	ble.n	801e33c <__exponent+0x70>
 801e2e6:	f10d 0407 	add.w	r4, sp, #7
 801e2ea:	46a4      	mov	ip, r4
 801e2ec:	270a      	movs	r7, #10
 801e2ee:	46a6      	mov	lr, r4
 801e2f0:	460a      	mov	r2, r1
 801e2f2:	fb91 f6f7 	sdiv	r6, r1, r7
 801e2f6:	fb07 1516 	mls	r5, r7, r6, r1
 801e2fa:	3530      	adds	r5, #48	; 0x30
 801e2fc:	2a63      	cmp	r2, #99	; 0x63
 801e2fe:	f104 34ff 	add.w	r4, r4, #4294967295
 801e302:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801e306:	4631      	mov	r1, r6
 801e308:	dcf1      	bgt.n	801e2ee <__exponent+0x22>
 801e30a:	3130      	adds	r1, #48	; 0x30
 801e30c:	f1ae 0502 	sub.w	r5, lr, #2
 801e310:	f804 1c01 	strb.w	r1, [r4, #-1]
 801e314:	1c44      	adds	r4, r0, #1
 801e316:	4629      	mov	r1, r5
 801e318:	4561      	cmp	r1, ip
 801e31a:	d30a      	bcc.n	801e332 <__exponent+0x66>
 801e31c:	f10d 0209 	add.w	r2, sp, #9
 801e320:	eba2 020e 	sub.w	r2, r2, lr
 801e324:	4565      	cmp	r5, ip
 801e326:	bf88      	it	hi
 801e328:	2200      	movhi	r2, #0
 801e32a:	4413      	add	r3, r2
 801e32c:	1a18      	subs	r0, r3, r0
 801e32e:	b003      	add	sp, #12
 801e330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e332:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e336:	f804 2f01 	strb.w	r2, [r4, #1]!
 801e33a:	e7ed      	b.n	801e318 <__exponent+0x4c>
 801e33c:	2330      	movs	r3, #48	; 0x30
 801e33e:	3130      	adds	r1, #48	; 0x30
 801e340:	7083      	strb	r3, [r0, #2]
 801e342:	70c1      	strb	r1, [r0, #3]
 801e344:	1d03      	adds	r3, r0, #4
 801e346:	e7f1      	b.n	801e32c <__exponent+0x60>

0801e348 <_printf_float>:
 801e348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e34c:	ed2d 8b02 	vpush	{d8}
 801e350:	b08d      	sub	sp, #52	; 0x34
 801e352:	460c      	mov	r4, r1
 801e354:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e358:	4616      	mov	r6, r2
 801e35a:	461f      	mov	r7, r3
 801e35c:	4605      	mov	r5, r0
 801e35e:	f003 f921 	bl	80215a4 <_localeconv_r>
 801e362:	f8d0 a000 	ldr.w	sl, [r0]
 801e366:	4650      	mov	r0, sl
 801e368:	f7e1 ff32 	bl	80001d0 <strlen>
 801e36c:	2300      	movs	r3, #0
 801e36e:	930a      	str	r3, [sp, #40]	; 0x28
 801e370:	6823      	ldr	r3, [r4, #0]
 801e372:	9305      	str	r3, [sp, #20]
 801e374:	f8d8 3000 	ldr.w	r3, [r8]
 801e378:	f894 b018 	ldrb.w	fp, [r4, #24]
 801e37c:	3307      	adds	r3, #7
 801e37e:	f023 0307 	bic.w	r3, r3, #7
 801e382:	f103 0208 	add.w	r2, r3, #8
 801e386:	f8c8 2000 	str.w	r2, [r8]
 801e38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e38e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801e392:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801e396:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e39a:	9307      	str	r3, [sp, #28]
 801e39c:	f8cd 8018 	str.w	r8, [sp, #24]
 801e3a0:	ee08 0a10 	vmov	s16, r0
 801e3a4:	4b9f      	ldr	r3, [pc, #636]	; (801e624 <_printf_float+0x2dc>)
 801e3a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e3aa:	f04f 32ff 	mov.w	r2, #4294967295
 801e3ae:	f7e2 fbbd 	bl	8000b2c <__aeabi_dcmpun>
 801e3b2:	bb88      	cbnz	r0, 801e418 <_printf_float+0xd0>
 801e3b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e3b8:	4b9a      	ldr	r3, [pc, #616]	; (801e624 <_printf_float+0x2dc>)
 801e3ba:	f04f 32ff 	mov.w	r2, #4294967295
 801e3be:	f7e2 fb97 	bl	8000af0 <__aeabi_dcmple>
 801e3c2:	bb48      	cbnz	r0, 801e418 <_printf_float+0xd0>
 801e3c4:	2200      	movs	r2, #0
 801e3c6:	2300      	movs	r3, #0
 801e3c8:	4640      	mov	r0, r8
 801e3ca:	4649      	mov	r1, r9
 801e3cc:	f7e2 fb86 	bl	8000adc <__aeabi_dcmplt>
 801e3d0:	b110      	cbz	r0, 801e3d8 <_printf_float+0x90>
 801e3d2:	232d      	movs	r3, #45	; 0x2d
 801e3d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e3d8:	4b93      	ldr	r3, [pc, #588]	; (801e628 <_printf_float+0x2e0>)
 801e3da:	4894      	ldr	r0, [pc, #592]	; (801e62c <_printf_float+0x2e4>)
 801e3dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801e3e0:	bf94      	ite	ls
 801e3e2:	4698      	movls	r8, r3
 801e3e4:	4680      	movhi	r8, r0
 801e3e6:	2303      	movs	r3, #3
 801e3e8:	6123      	str	r3, [r4, #16]
 801e3ea:	9b05      	ldr	r3, [sp, #20]
 801e3ec:	f023 0204 	bic.w	r2, r3, #4
 801e3f0:	6022      	str	r2, [r4, #0]
 801e3f2:	f04f 0900 	mov.w	r9, #0
 801e3f6:	9700      	str	r7, [sp, #0]
 801e3f8:	4633      	mov	r3, r6
 801e3fa:	aa0b      	add	r2, sp, #44	; 0x2c
 801e3fc:	4621      	mov	r1, r4
 801e3fe:	4628      	mov	r0, r5
 801e400:	f000 f9d8 	bl	801e7b4 <_printf_common>
 801e404:	3001      	adds	r0, #1
 801e406:	f040 8090 	bne.w	801e52a <_printf_float+0x1e2>
 801e40a:	f04f 30ff 	mov.w	r0, #4294967295
 801e40e:	b00d      	add	sp, #52	; 0x34
 801e410:	ecbd 8b02 	vpop	{d8}
 801e414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e418:	4642      	mov	r2, r8
 801e41a:	464b      	mov	r3, r9
 801e41c:	4640      	mov	r0, r8
 801e41e:	4649      	mov	r1, r9
 801e420:	f7e2 fb84 	bl	8000b2c <__aeabi_dcmpun>
 801e424:	b140      	cbz	r0, 801e438 <_printf_float+0xf0>
 801e426:	464b      	mov	r3, r9
 801e428:	2b00      	cmp	r3, #0
 801e42a:	bfbc      	itt	lt
 801e42c:	232d      	movlt	r3, #45	; 0x2d
 801e42e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e432:	487f      	ldr	r0, [pc, #508]	; (801e630 <_printf_float+0x2e8>)
 801e434:	4b7f      	ldr	r3, [pc, #508]	; (801e634 <_printf_float+0x2ec>)
 801e436:	e7d1      	b.n	801e3dc <_printf_float+0x94>
 801e438:	6863      	ldr	r3, [r4, #4]
 801e43a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801e43e:	9206      	str	r2, [sp, #24]
 801e440:	1c5a      	adds	r2, r3, #1
 801e442:	d13f      	bne.n	801e4c4 <_printf_float+0x17c>
 801e444:	2306      	movs	r3, #6
 801e446:	6063      	str	r3, [r4, #4]
 801e448:	9b05      	ldr	r3, [sp, #20]
 801e44a:	6861      	ldr	r1, [r4, #4]
 801e44c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801e450:	2300      	movs	r3, #0
 801e452:	9303      	str	r3, [sp, #12]
 801e454:	ab0a      	add	r3, sp, #40	; 0x28
 801e456:	e9cd b301 	strd	fp, r3, [sp, #4]
 801e45a:	ab09      	add	r3, sp, #36	; 0x24
 801e45c:	ec49 8b10 	vmov	d0, r8, r9
 801e460:	9300      	str	r3, [sp, #0]
 801e462:	6022      	str	r2, [r4, #0]
 801e464:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e468:	4628      	mov	r0, r5
 801e46a:	f7ff fecd 	bl	801e208 <__cvt>
 801e46e:	9b06      	ldr	r3, [sp, #24]
 801e470:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e472:	2b47      	cmp	r3, #71	; 0x47
 801e474:	4680      	mov	r8, r0
 801e476:	d108      	bne.n	801e48a <_printf_float+0x142>
 801e478:	1cc8      	adds	r0, r1, #3
 801e47a:	db02      	blt.n	801e482 <_printf_float+0x13a>
 801e47c:	6863      	ldr	r3, [r4, #4]
 801e47e:	4299      	cmp	r1, r3
 801e480:	dd41      	ble.n	801e506 <_printf_float+0x1be>
 801e482:	f1ab 0b02 	sub.w	fp, fp, #2
 801e486:	fa5f fb8b 	uxtb.w	fp, fp
 801e48a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e48e:	d820      	bhi.n	801e4d2 <_printf_float+0x18a>
 801e490:	3901      	subs	r1, #1
 801e492:	465a      	mov	r2, fp
 801e494:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e498:	9109      	str	r1, [sp, #36]	; 0x24
 801e49a:	f7ff ff17 	bl	801e2cc <__exponent>
 801e49e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e4a0:	1813      	adds	r3, r2, r0
 801e4a2:	2a01      	cmp	r2, #1
 801e4a4:	4681      	mov	r9, r0
 801e4a6:	6123      	str	r3, [r4, #16]
 801e4a8:	dc02      	bgt.n	801e4b0 <_printf_float+0x168>
 801e4aa:	6822      	ldr	r2, [r4, #0]
 801e4ac:	07d2      	lsls	r2, r2, #31
 801e4ae:	d501      	bpl.n	801e4b4 <_printf_float+0x16c>
 801e4b0:	3301      	adds	r3, #1
 801e4b2:	6123      	str	r3, [r4, #16]
 801e4b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	d09c      	beq.n	801e3f6 <_printf_float+0xae>
 801e4bc:	232d      	movs	r3, #45	; 0x2d
 801e4be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e4c2:	e798      	b.n	801e3f6 <_printf_float+0xae>
 801e4c4:	9a06      	ldr	r2, [sp, #24]
 801e4c6:	2a47      	cmp	r2, #71	; 0x47
 801e4c8:	d1be      	bne.n	801e448 <_printf_float+0x100>
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	d1bc      	bne.n	801e448 <_printf_float+0x100>
 801e4ce:	2301      	movs	r3, #1
 801e4d0:	e7b9      	b.n	801e446 <_printf_float+0xfe>
 801e4d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801e4d6:	d118      	bne.n	801e50a <_printf_float+0x1c2>
 801e4d8:	2900      	cmp	r1, #0
 801e4da:	6863      	ldr	r3, [r4, #4]
 801e4dc:	dd0b      	ble.n	801e4f6 <_printf_float+0x1ae>
 801e4de:	6121      	str	r1, [r4, #16]
 801e4e0:	b913      	cbnz	r3, 801e4e8 <_printf_float+0x1a0>
 801e4e2:	6822      	ldr	r2, [r4, #0]
 801e4e4:	07d0      	lsls	r0, r2, #31
 801e4e6:	d502      	bpl.n	801e4ee <_printf_float+0x1a6>
 801e4e8:	3301      	adds	r3, #1
 801e4ea:	440b      	add	r3, r1
 801e4ec:	6123      	str	r3, [r4, #16]
 801e4ee:	65a1      	str	r1, [r4, #88]	; 0x58
 801e4f0:	f04f 0900 	mov.w	r9, #0
 801e4f4:	e7de      	b.n	801e4b4 <_printf_float+0x16c>
 801e4f6:	b913      	cbnz	r3, 801e4fe <_printf_float+0x1b6>
 801e4f8:	6822      	ldr	r2, [r4, #0]
 801e4fa:	07d2      	lsls	r2, r2, #31
 801e4fc:	d501      	bpl.n	801e502 <_printf_float+0x1ba>
 801e4fe:	3302      	adds	r3, #2
 801e500:	e7f4      	b.n	801e4ec <_printf_float+0x1a4>
 801e502:	2301      	movs	r3, #1
 801e504:	e7f2      	b.n	801e4ec <_printf_float+0x1a4>
 801e506:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801e50a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e50c:	4299      	cmp	r1, r3
 801e50e:	db05      	blt.n	801e51c <_printf_float+0x1d4>
 801e510:	6823      	ldr	r3, [r4, #0]
 801e512:	6121      	str	r1, [r4, #16]
 801e514:	07d8      	lsls	r0, r3, #31
 801e516:	d5ea      	bpl.n	801e4ee <_printf_float+0x1a6>
 801e518:	1c4b      	adds	r3, r1, #1
 801e51a:	e7e7      	b.n	801e4ec <_printf_float+0x1a4>
 801e51c:	2900      	cmp	r1, #0
 801e51e:	bfd4      	ite	le
 801e520:	f1c1 0202 	rsble	r2, r1, #2
 801e524:	2201      	movgt	r2, #1
 801e526:	4413      	add	r3, r2
 801e528:	e7e0      	b.n	801e4ec <_printf_float+0x1a4>
 801e52a:	6823      	ldr	r3, [r4, #0]
 801e52c:	055a      	lsls	r2, r3, #21
 801e52e:	d407      	bmi.n	801e540 <_printf_float+0x1f8>
 801e530:	6923      	ldr	r3, [r4, #16]
 801e532:	4642      	mov	r2, r8
 801e534:	4631      	mov	r1, r6
 801e536:	4628      	mov	r0, r5
 801e538:	47b8      	blx	r7
 801e53a:	3001      	adds	r0, #1
 801e53c:	d12c      	bne.n	801e598 <_printf_float+0x250>
 801e53e:	e764      	b.n	801e40a <_printf_float+0xc2>
 801e540:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e544:	f240 80e0 	bls.w	801e708 <_printf_float+0x3c0>
 801e548:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e54c:	2200      	movs	r2, #0
 801e54e:	2300      	movs	r3, #0
 801e550:	f7e2 faba 	bl	8000ac8 <__aeabi_dcmpeq>
 801e554:	2800      	cmp	r0, #0
 801e556:	d034      	beq.n	801e5c2 <_printf_float+0x27a>
 801e558:	4a37      	ldr	r2, [pc, #220]	; (801e638 <_printf_float+0x2f0>)
 801e55a:	2301      	movs	r3, #1
 801e55c:	4631      	mov	r1, r6
 801e55e:	4628      	mov	r0, r5
 801e560:	47b8      	blx	r7
 801e562:	3001      	adds	r0, #1
 801e564:	f43f af51 	beq.w	801e40a <_printf_float+0xc2>
 801e568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e56c:	429a      	cmp	r2, r3
 801e56e:	db02      	blt.n	801e576 <_printf_float+0x22e>
 801e570:	6823      	ldr	r3, [r4, #0]
 801e572:	07d8      	lsls	r0, r3, #31
 801e574:	d510      	bpl.n	801e598 <_printf_float+0x250>
 801e576:	ee18 3a10 	vmov	r3, s16
 801e57a:	4652      	mov	r2, sl
 801e57c:	4631      	mov	r1, r6
 801e57e:	4628      	mov	r0, r5
 801e580:	47b8      	blx	r7
 801e582:	3001      	adds	r0, #1
 801e584:	f43f af41 	beq.w	801e40a <_printf_float+0xc2>
 801e588:	f04f 0800 	mov.w	r8, #0
 801e58c:	f104 091a 	add.w	r9, r4, #26
 801e590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e592:	3b01      	subs	r3, #1
 801e594:	4543      	cmp	r3, r8
 801e596:	dc09      	bgt.n	801e5ac <_printf_float+0x264>
 801e598:	6823      	ldr	r3, [r4, #0]
 801e59a:	079b      	lsls	r3, r3, #30
 801e59c:	f100 8105 	bmi.w	801e7aa <_printf_float+0x462>
 801e5a0:	68e0      	ldr	r0, [r4, #12]
 801e5a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e5a4:	4298      	cmp	r0, r3
 801e5a6:	bfb8      	it	lt
 801e5a8:	4618      	movlt	r0, r3
 801e5aa:	e730      	b.n	801e40e <_printf_float+0xc6>
 801e5ac:	2301      	movs	r3, #1
 801e5ae:	464a      	mov	r2, r9
 801e5b0:	4631      	mov	r1, r6
 801e5b2:	4628      	mov	r0, r5
 801e5b4:	47b8      	blx	r7
 801e5b6:	3001      	adds	r0, #1
 801e5b8:	f43f af27 	beq.w	801e40a <_printf_float+0xc2>
 801e5bc:	f108 0801 	add.w	r8, r8, #1
 801e5c0:	e7e6      	b.n	801e590 <_printf_float+0x248>
 801e5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	dc39      	bgt.n	801e63c <_printf_float+0x2f4>
 801e5c8:	4a1b      	ldr	r2, [pc, #108]	; (801e638 <_printf_float+0x2f0>)
 801e5ca:	2301      	movs	r3, #1
 801e5cc:	4631      	mov	r1, r6
 801e5ce:	4628      	mov	r0, r5
 801e5d0:	47b8      	blx	r7
 801e5d2:	3001      	adds	r0, #1
 801e5d4:	f43f af19 	beq.w	801e40a <_printf_float+0xc2>
 801e5d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e5dc:	4313      	orrs	r3, r2
 801e5de:	d102      	bne.n	801e5e6 <_printf_float+0x29e>
 801e5e0:	6823      	ldr	r3, [r4, #0]
 801e5e2:	07d9      	lsls	r1, r3, #31
 801e5e4:	d5d8      	bpl.n	801e598 <_printf_float+0x250>
 801e5e6:	ee18 3a10 	vmov	r3, s16
 801e5ea:	4652      	mov	r2, sl
 801e5ec:	4631      	mov	r1, r6
 801e5ee:	4628      	mov	r0, r5
 801e5f0:	47b8      	blx	r7
 801e5f2:	3001      	adds	r0, #1
 801e5f4:	f43f af09 	beq.w	801e40a <_printf_float+0xc2>
 801e5f8:	f04f 0900 	mov.w	r9, #0
 801e5fc:	f104 0a1a 	add.w	sl, r4, #26
 801e600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e602:	425b      	negs	r3, r3
 801e604:	454b      	cmp	r3, r9
 801e606:	dc01      	bgt.n	801e60c <_printf_float+0x2c4>
 801e608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e60a:	e792      	b.n	801e532 <_printf_float+0x1ea>
 801e60c:	2301      	movs	r3, #1
 801e60e:	4652      	mov	r2, sl
 801e610:	4631      	mov	r1, r6
 801e612:	4628      	mov	r0, r5
 801e614:	47b8      	blx	r7
 801e616:	3001      	adds	r0, #1
 801e618:	f43f aef7 	beq.w	801e40a <_printf_float+0xc2>
 801e61c:	f109 0901 	add.w	r9, r9, #1
 801e620:	e7ee      	b.n	801e600 <_printf_float+0x2b8>
 801e622:	bf00      	nop
 801e624:	7fefffff 	.word	0x7fefffff
 801e628:	08026da8 	.word	0x08026da8
 801e62c:	08026dac 	.word	0x08026dac
 801e630:	08026db4 	.word	0x08026db4
 801e634:	08026db0 	.word	0x08026db0
 801e638:	08027151 	.word	0x08027151
 801e63c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e63e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e640:	429a      	cmp	r2, r3
 801e642:	bfa8      	it	ge
 801e644:	461a      	movge	r2, r3
 801e646:	2a00      	cmp	r2, #0
 801e648:	4691      	mov	r9, r2
 801e64a:	dc37      	bgt.n	801e6bc <_printf_float+0x374>
 801e64c:	f04f 0b00 	mov.w	fp, #0
 801e650:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e654:	f104 021a 	add.w	r2, r4, #26
 801e658:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e65a:	9305      	str	r3, [sp, #20]
 801e65c:	eba3 0309 	sub.w	r3, r3, r9
 801e660:	455b      	cmp	r3, fp
 801e662:	dc33      	bgt.n	801e6cc <_printf_float+0x384>
 801e664:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e668:	429a      	cmp	r2, r3
 801e66a:	db3b      	blt.n	801e6e4 <_printf_float+0x39c>
 801e66c:	6823      	ldr	r3, [r4, #0]
 801e66e:	07da      	lsls	r2, r3, #31
 801e670:	d438      	bmi.n	801e6e4 <_printf_float+0x39c>
 801e672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e674:	9b05      	ldr	r3, [sp, #20]
 801e676:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e678:	1ad3      	subs	r3, r2, r3
 801e67a:	eba2 0901 	sub.w	r9, r2, r1
 801e67e:	4599      	cmp	r9, r3
 801e680:	bfa8      	it	ge
 801e682:	4699      	movge	r9, r3
 801e684:	f1b9 0f00 	cmp.w	r9, #0
 801e688:	dc35      	bgt.n	801e6f6 <_printf_float+0x3ae>
 801e68a:	f04f 0800 	mov.w	r8, #0
 801e68e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e692:	f104 0a1a 	add.w	sl, r4, #26
 801e696:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e69a:	1a9b      	subs	r3, r3, r2
 801e69c:	eba3 0309 	sub.w	r3, r3, r9
 801e6a0:	4543      	cmp	r3, r8
 801e6a2:	f77f af79 	ble.w	801e598 <_printf_float+0x250>
 801e6a6:	2301      	movs	r3, #1
 801e6a8:	4652      	mov	r2, sl
 801e6aa:	4631      	mov	r1, r6
 801e6ac:	4628      	mov	r0, r5
 801e6ae:	47b8      	blx	r7
 801e6b0:	3001      	adds	r0, #1
 801e6b2:	f43f aeaa 	beq.w	801e40a <_printf_float+0xc2>
 801e6b6:	f108 0801 	add.w	r8, r8, #1
 801e6ba:	e7ec      	b.n	801e696 <_printf_float+0x34e>
 801e6bc:	4613      	mov	r3, r2
 801e6be:	4631      	mov	r1, r6
 801e6c0:	4642      	mov	r2, r8
 801e6c2:	4628      	mov	r0, r5
 801e6c4:	47b8      	blx	r7
 801e6c6:	3001      	adds	r0, #1
 801e6c8:	d1c0      	bne.n	801e64c <_printf_float+0x304>
 801e6ca:	e69e      	b.n	801e40a <_printf_float+0xc2>
 801e6cc:	2301      	movs	r3, #1
 801e6ce:	4631      	mov	r1, r6
 801e6d0:	4628      	mov	r0, r5
 801e6d2:	9205      	str	r2, [sp, #20]
 801e6d4:	47b8      	blx	r7
 801e6d6:	3001      	adds	r0, #1
 801e6d8:	f43f ae97 	beq.w	801e40a <_printf_float+0xc2>
 801e6dc:	9a05      	ldr	r2, [sp, #20]
 801e6de:	f10b 0b01 	add.w	fp, fp, #1
 801e6e2:	e7b9      	b.n	801e658 <_printf_float+0x310>
 801e6e4:	ee18 3a10 	vmov	r3, s16
 801e6e8:	4652      	mov	r2, sl
 801e6ea:	4631      	mov	r1, r6
 801e6ec:	4628      	mov	r0, r5
 801e6ee:	47b8      	blx	r7
 801e6f0:	3001      	adds	r0, #1
 801e6f2:	d1be      	bne.n	801e672 <_printf_float+0x32a>
 801e6f4:	e689      	b.n	801e40a <_printf_float+0xc2>
 801e6f6:	9a05      	ldr	r2, [sp, #20]
 801e6f8:	464b      	mov	r3, r9
 801e6fa:	4442      	add	r2, r8
 801e6fc:	4631      	mov	r1, r6
 801e6fe:	4628      	mov	r0, r5
 801e700:	47b8      	blx	r7
 801e702:	3001      	adds	r0, #1
 801e704:	d1c1      	bne.n	801e68a <_printf_float+0x342>
 801e706:	e680      	b.n	801e40a <_printf_float+0xc2>
 801e708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e70a:	2a01      	cmp	r2, #1
 801e70c:	dc01      	bgt.n	801e712 <_printf_float+0x3ca>
 801e70e:	07db      	lsls	r3, r3, #31
 801e710:	d538      	bpl.n	801e784 <_printf_float+0x43c>
 801e712:	2301      	movs	r3, #1
 801e714:	4642      	mov	r2, r8
 801e716:	4631      	mov	r1, r6
 801e718:	4628      	mov	r0, r5
 801e71a:	47b8      	blx	r7
 801e71c:	3001      	adds	r0, #1
 801e71e:	f43f ae74 	beq.w	801e40a <_printf_float+0xc2>
 801e722:	ee18 3a10 	vmov	r3, s16
 801e726:	4652      	mov	r2, sl
 801e728:	4631      	mov	r1, r6
 801e72a:	4628      	mov	r0, r5
 801e72c:	47b8      	blx	r7
 801e72e:	3001      	adds	r0, #1
 801e730:	f43f ae6b 	beq.w	801e40a <_printf_float+0xc2>
 801e734:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e738:	2200      	movs	r2, #0
 801e73a:	2300      	movs	r3, #0
 801e73c:	f7e2 f9c4 	bl	8000ac8 <__aeabi_dcmpeq>
 801e740:	b9d8      	cbnz	r0, 801e77a <_printf_float+0x432>
 801e742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e744:	f108 0201 	add.w	r2, r8, #1
 801e748:	3b01      	subs	r3, #1
 801e74a:	4631      	mov	r1, r6
 801e74c:	4628      	mov	r0, r5
 801e74e:	47b8      	blx	r7
 801e750:	3001      	adds	r0, #1
 801e752:	d10e      	bne.n	801e772 <_printf_float+0x42a>
 801e754:	e659      	b.n	801e40a <_printf_float+0xc2>
 801e756:	2301      	movs	r3, #1
 801e758:	4652      	mov	r2, sl
 801e75a:	4631      	mov	r1, r6
 801e75c:	4628      	mov	r0, r5
 801e75e:	47b8      	blx	r7
 801e760:	3001      	adds	r0, #1
 801e762:	f43f ae52 	beq.w	801e40a <_printf_float+0xc2>
 801e766:	f108 0801 	add.w	r8, r8, #1
 801e76a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e76c:	3b01      	subs	r3, #1
 801e76e:	4543      	cmp	r3, r8
 801e770:	dcf1      	bgt.n	801e756 <_printf_float+0x40e>
 801e772:	464b      	mov	r3, r9
 801e774:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e778:	e6dc      	b.n	801e534 <_printf_float+0x1ec>
 801e77a:	f04f 0800 	mov.w	r8, #0
 801e77e:	f104 0a1a 	add.w	sl, r4, #26
 801e782:	e7f2      	b.n	801e76a <_printf_float+0x422>
 801e784:	2301      	movs	r3, #1
 801e786:	4642      	mov	r2, r8
 801e788:	e7df      	b.n	801e74a <_printf_float+0x402>
 801e78a:	2301      	movs	r3, #1
 801e78c:	464a      	mov	r2, r9
 801e78e:	4631      	mov	r1, r6
 801e790:	4628      	mov	r0, r5
 801e792:	47b8      	blx	r7
 801e794:	3001      	adds	r0, #1
 801e796:	f43f ae38 	beq.w	801e40a <_printf_float+0xc2>
 801e79a:	f108 0801 	add.w	r8, r8, #1
 801e79e:	68e3      	ldr	r3, [r4, #12]
 801e7a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e7a2:	1a5b      	subs	r3, r3, r1
 801e7a4:	4543      	cmp	r3, r8
 801e7a6:	dcf0      	bgt.n	801e78a <_printf_float+0x442>
 801e7a8:	e6fa      	b.n	801e5a0 <_printf_float+0x258>
 801e7aa:	f04f 0800 	mov.w	r8, #0
 801e7ae:	f104 0919 	add.w	r9, r4, #25
 801e7b2:	e7f4      	b.n	801e79e <_printf_float+0x456>

0801e7b4 <_printf_common>:
 801e7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7b8:	4616      	mov	r6, r2
 801e7ba:	4699      	mov	r9, r3
 801e7bc:	688a      	ldr	r2, [r1, #8]
 801e7be:	690b      	ldr	r3, [r1, #16]
 801e7c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e7c4:	4293      	cmp	r3, r2
 801e7c6:	bfb8      	it	lt
 801e7c8:	4613      	movlt	r3, r2
 801e7ca:	6033      	str	r3, [r6, #0]
 801e7cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e7d0:	4607      	mov	r7, r0
 801e7d2:	460c      	mov	r4, r1
 801e7d4:	b10a      	cbz	r2, 801e7da <_printf_common+0x26>
 801e7d6:	3301      	adds	r3, #1
 801e7d8:	6033      	str	r3, [r6, #0]
 801e7da:	6823      	ldr	r3, [r4, #0]
 801e7dc:	0699      	lsls	r1, r3, #26
 801e7de:	bf42      	ittt	mi
 801e7e0:	6833      	ldrmi	r3, [r6, #0]
 801e7e2:	3302      	addmi	r3, #2
 801e7e4:	6033      	strmi	r3, [r6, #0]
 801e7e6:	6825      	ldr	r5, [r4, #0]
 801e7e8:	f015 0506 	ands.w	r5, r5, #6
 801e7ec:	d106      	bne.n	801e7fc <_printf_common+0x48>
 801e7ee:	f104 0a19 	add.w	sl, r4, #25
 801e7f2:	68e3      	ldr	r3, [r4, #12]
 801e7f4:	6832      	ldr	r2, [r6, #0]
 801e7f6:	1a9b      	subs	r3, r3, r2
 801e7f8:	42ab      	cmp	r3, r5
 801e7fa:	dc26      	bgt.n	801e84a <_printf_common+0x96>
 801e7fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e800:	1e13      	subs	r3, r2, #0
 801e802:	6822      	ldr	r2, [r4, #0]
 801e804:	bf18      	it	ne
 801e806:	2301      	movne	r3, #1
 801e808:	0692      	lsls	r2, r2, #26
 801e80a:	d42b      	bmi.n	801e864 <_printf_common+0xb0>
 801e80c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e810:	4649      	mov	r1, r9
 801e812:	4638      	mov	r0, r7
 801e814:	47c0      	blx	r8
 801e816:	3001      	adds	r0, #1
 801e818:	d01e      	beq.n	801e858 <_printf_common+0xa4>
 801e81a:	6823      	ldr	r3, [r4, #0]
 801e81c:	68e5      	ldr	r5, [r4, #12]
 801e81e:	6832      	ldr	r2, [r6, #0]
 801e820:	f003 0306 	and.w	r3, r3, #6
 801e824:	2b04      	cmp	r3, #4
 801e826:	bf08      	it	eq
 801e828:	1aad      	subeq	r5, r5, r2
 801e82a:	68a3      	ldr	r3, [r4, #8]
 801e82c:	6922      	ldr	r2, [r4, #16]
 801e82e:	bf0c      	ite	eq
 801e830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e834:	2500      	movne	r5, #0
 801e836:	4293      	cmp	r3, r2
 801e838:	bfc4      	itt	gt
 801e83a:	1a9b      	subgt	r3, r3, r2
 801e83c:	18ed      	addgt	r5, r5, r3
 801e83e:	2600      	movs	r6, #0
 801e840:	341a      	adds	r4, #26
 801e842:	42b5      	cmp	r5, r6
 801e844:	d11a      	bne.n	801e87c <_printf_common+0xc8>
 801e846:	2000      	movs	r0, #0
 801e848:	e008      	b.n	801e85c <_printf_common+0xa8>
 801e84a:	2301      	movs	r3, #1
 801e84c:	4652      	mov	r2, sl
 801e84e:	4649      	mov	r1, r9
 801e850:	4638      	mov	r0, r7
 801e852:	47c0      	blx	r8
 801e854:	3001      	adds	r0, #1
 801e856:	d103      	bne.n	801e860 <_printf_common+0xac>
 801e858:	f04f 30ff 	mov.w	r0, #4294967295
 801e85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e860:	3501      	adds	r5, #1
 801e862:	e7c6      	b.n	801e7f2 <_printf_common+0x3e>
 801e864:	18e1      	adds	r1, r4, r3
 801e866:	1c5a      	adds	r2, r3, #1
 801e868:	2030      	movs	r0, #48	; 0x30
 801e86a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e86e:	4422      	add	r2, r4
 801e870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e878:	3302      	adds	r3, #2
 801e87a:	e7c7      	b.n	801e80c <_printf_common+0x58>
 801e87c:	2301      	movs	r3, #1
 801e87e:	4622      	mov	r2, r4
 801e880:	4649      	mov	r1, r9
 801e882:	4638      	mov	r0, r7
 801e884:	47c0      	blx	r8
 801e886:	3001      	adds	r0, #1
 801e888:	d0e6      	beq.n	801e858 <_printf_common+0xa4>
 801e88a:	3601      	adds	r6, #1
 801e88c:	e7d9      	b.n	801e842 <_printf_common+0x8e>
	...

0801e890 <_printf_i>:
 801e890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e894:	460c      	mov	r4, r1
 801e896:	4691      	mov	r9, r2
 801e898:	7e27      	ldrb	r7, [r4, #24]
 801e89a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e89c:	2f78      	cmp	r7, #120	; 0x78
 801e89e:	4680      	mov	r8, r0
 801e8a0:	469a      	mov	sl, r3
 801e8a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e8a6:	d807      	bhi.n	801e8b8 <_printf_i+0x28>
 801e8a8:	2f62      	cmp	r7, #98	; 0x62
 801e8aa:	d80a      	bhi.n	801e8c2 <_printf_i+0x32>
 801e8ac:	2f00      	cmp	r7, #0
 801e8ae:	f000 80d8 	beq.w	801ea62 <_printf_i+0x1d2>
 801e8b2:	2f58      	cmp	r7, #88	; 0x58
 801e8b4:	f000 80a3 	beq.w	801e9fe <_printf_i+0x16e>
 801e8b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e8bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e8c0:	e03a      	b.n	801e938 <_printf_i+0xa8>
 801e8c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e8c6:	2b15      	cmp	r3, #21
 801e8c8:	d8f6      	bhi.n	801e8b8 <_printf_i+0x28>
 801e8ca:	a001      	add	r0, pc, #4	; (adr r0, 801e8d0 <_printf_i+0x40>)
 801e8cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801e8d0:	0801e929 	.word	0x0801e929
 801e8d4:	0801e93d 	.word	0x0801e93d
 801e8d8:	0801e8b9 	.word	0x0801e8b9
 801e8dc:	0801e8b9 	.word	0x0801e8b9
 801e8e0:	0801e8b9 	.word	0x0801e8b9
 801e8e4:	0801e8b9 	.word	0x0801e8b9
 801e8e8:	0801e93d 	.word	0x0801e93d
 801e8ec:	0801e8b9 	.word	0x0801e8b9
 801e8f0:	0801e8b9 	.word	0x0801e8b9
 801e8f4:	0801e8b9 	.word	0x0801e8b9
 801e8f8:	0801e8b9 	.word	0x0801e8b9
 801e8fc:	0801ea49 	.word	0x0801ea49
 801e900:	0801e96d 	.word	0x0801e96d
 801e904:	0801ea2b 	.word	0x0801ea2b
 801e908:	0801e8b9 	.word	0x0801e8b9
 801e90c:	0801e8b9 	.word	0x0801e8b9
 801e910:	0801ea6b 	.word	0x0801ea6b
 801e914:	0801e8b9 	.word	0x0801e8b9
 801e918:	0801e96d 	.word	0x0801e96d
 801e91c:	0801e8b9 	.word	0x0801e8b9
 801e920:	0801e8b9 	.word	0x0801e8b9
 801e924:	0801ea33 	.word	0x0801ea33
 801e928:	680b      	ldr	r3, [r1, #0]
 801e92a:	1d1a      	adds	r2, r3, #4
 801e92c:	681b      	ldr	r3, [r3, #0]
 801e92e:	600a      	str	r2, [r1, #0]
 801e930:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e938:	2301      	movs	r3, #1
 801e93a:	e0a3      	b.n	801ea84 <_printf_i+0x1f4>
 801e93c:	6825      	ldr	r5, [r4, #0]
 801e93e:	6808      	ldr	r0, [r1, #0]
 801e940:	062e      	lsls	r6, r5, #24
 801e942:	f100 0304 	add.w	r3, r0, #4
 801e946:	d50a      	bpl.n	801e95e <_printf_i+0xce>
 801e948:	6805      	ldr	r5, [r0, #0]
 801e94a:	600b      	str	r3, [r1, #0]
 801e94c:	2d00      	cmp	r5, #0
 801e94e:	da03      	bge.n	801e958 <_printf_i+0xc8>
 801e950:	232d      	movs	r3, #45	; 0x2d
 801e952:	426d      	negs	r5, r5
 801e954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e958:	485e      	ldr	r0, [pc, #376]	; (801ead4 <_printf_i+0x244>)
 801e95a:	230a      	movs	r3, #10
 801e95c:	e019      	b.n	801e992 <_printf_i+0x102>
 801e95e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801e962:	6805      	ldr	r5, [r0, #0]
 801e964:	600b      	str	r3, [r1, #0]
 801e966:	bf18      	it	ne
 801e968:	b22d      	sxthne	r5, r5
 801e96a:	e7ef      	b.n	801e94c <_printf_i+0xbc>
 801e96c:	680b      	ldr	r3, [r1, #0]
 801e96e:	6825      	ldr	r5, [r4, #0]
 801e970:	1d18      	adds	r0, r3, #4
 801e972:	6008      	str	r0, [r1, #0]
 801e974:	0628      	lsls	r0, r5, #24
 801e976:	d501      	bpl.n	801e97c <_printf_i+0xec>
 801e978:	681d      	ldr	r5, [r3, #0]
 801e97a:	e002      	b.n	801e982 <_printf_i+0xf2>
 801e97c:	0669      	lsls	r1, r5, #25
 801e97e:	d5fb      	bpl.n	801e978 <_printf_i+0xe8>
 801e980:	881d      	ldrh	r5, [r3, #0]
 801e982:	4854      	ldr	r0, [pc, #336]	; (801ead4 <_printf_i+0x244>)
 801e984:	2f6f      	cmp	r7, #111	; 0x6f
 801e986:	bf0c      	ite	eq
 801e988:	2308      	moveq	r3, #8
 801e98a:	230a      	movne	r3, #10
 801e98c:	2100      	movs	r1, #0
 801e98e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e992:	6866      	ldr	r6, [r4, #4]
 801e994:	60a6      	str	r6, [r4, #8]
 801e996:	2e00      	cmp	r6, #0
 801e998:	bfa2      	ittt	ge
 801e99a:	6821      	ldrge	r1, [r4, #0]
 801e99c:	f021 0104 	bicge.w	r1, r1, #4
 801e9a0:	6021      	strge	r1, [r4, #0]
 801e9a2:	b90d      	cbnz	r5, 801e9a8 <_printf_i+0x118>
 801e9a4:	2e00      	cmp	r6, #0
 801e9a6:	d04d      	beq.n	801ea44 <_printf_i+0x1b4>
 801e9a8:	4616      	mov	r6, r2
 801e9aa:	fbb5 f1f3 	udiv	r1, r5, r3
 801e9ae:	fb03 5711 	mls	r7, r3, r1, r5
 801e9b2:	5dc7      	ldrb	r7, [r0, r7]
 801e9b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e9b8:	462f      	mov	r7, r5
 801e9ba:	42bb      	cmp	r3, r7
 801e9bc:	460d      	mov	r5, r1
 801e9be:	d9f4      	bls.n	801e9aa <_printf_i+0x11a>
 801e9c0:	2b08      	cmp	r3, #8
 801e9c2:	d10b      	bne.n	801e9dc <_printf_i+0x14c>
 801e9c4:	6823      	ldr	r3, [r4, #0]
 801e9c6:	07df      	lsls	r7, r3, #31
 801e9c8:	d508      	bpl.n	801e9dc <_printf_i+0x14c>
 801e9ca:	6923      	ldr	r3, [r4, #16]
 801e9cc:	6861      	ldr	r1, [r4, #4]
 801e9ce:	4299      	cmp	r1, r3
 801e9d0:	bfde      	ittt	le
 801e9d2:	2330      	movle	r3, #48	; 0x30
 801e9d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e9d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e9dc:	1b92      	subs	r2, r2, r6
 801e9de:	6122      	str	r2, [r4, #16]
 801e9e0:	f8cd a000 	str.w	sl, [sp]
 801e9e4:	464b      	mov	r3, r9
 801e9e6:	aa03      	add	r2, sp, #12
 801e9e8:	4621      	mov	r1, r4
 801e9ea:	4640      	mov	r0, r8
 801e9ec:	f7ff fee2 	bl	801e7b4 <_printf_common>
 801e9f0:	3001      	adds	r0, #1
 801e9f2:	d14c      	bne.n	801ea8e <_printf_i+0x1fe>
 801e9f4:	f04f 30ff 	mov.w	r0, #4294967295
 801e9f8:	b004      	add	sp, #16
 801e9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e9fe:	4835      	ldr	r0, [pc, #212]	; (801ead4 <_printf_i+0x244>)
 801ea00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ea04:	6823      	ldr	r3, [r4, #0]
 801ea06:	680e      	ldr	r6, [r1, #0]
 801ea08:	061f      	lsls	r7, r3, #24
 801ea0a:	f856 5b04 	ldr.w	r5, [r6], #4
 801ea0e:	600e      	str	r6, [r1, #0]
 801ea10:	d514      	bpl.n	801ea3c <_printf_i+0x1ac>
 801ea12:	07d9      	lsls	r1, r3, #31
 801ea14:	bf44      	itt	mi
 801ea16:	f043 0320 	orrmi.w	r3, r3, #32
 801ea1a:	6023      	strmi	r3, [r4, #0]
 801ea1c:	b91d      	cbnz	r5, 801ea26 <_printf_i+0x196>
 801ea1e:	6823      	ldr	r3, [r4, #0]
 801ea20:	f023 0320 	bic.w	r3, r3, #32
 801ea24:	6023      	str	r3, [r4, #0]
 801ea26:	2310      	movs	r3, #16
 801ea28:	e7b0      	b.n	801e98c <_printf_i+0xfc>
 801ea2a:	6823      	ldr	r3, [r4, #0]
 801ea2c:	f043 0320 	orr.w	r3, r3, #32
 801ea30:	6023      	str	r3, [r4, #0]
 801ea32:	2378      	movs	r3, #120	; 0x78
 801ea34:	4828      	ldr	r0, [pc, #160]	; (801ead8 <_printf_i+0x248>)
 801ea36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ea3a:	e7e3      	b.n	801ea04 <_printf_i+0x174>
 801ea3c:	065e      	lsls	r6, r3, #25
 801ea3e:	bf48      	it	mi
 801ea40:	b2ad      	uxthmi	r5, r5
 801ea42:	e7e6      	b.n	801ea12 <_printf_i+0x182>
 801ea44:	4616      	mov	r6, r2
 801ea46:	e7bb      	b.n	801e9c0 <_printf_i+0x130>
 801ea48:	680b      	ldr	r3, [r1, #0]
 801ea4a:	6826      	ldr	r6, [r4, #0]
 801ea4c:	6960      	ldr	r0, [r4, #20]
 801ea4e:	1d1d      	adds	r5, r3, #4
 801ea50:	600d      	str	r5, [r1, #0]
 801ea52:	0635      	lsls	r5, r6, #24
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	d501      	bpl.n	801ea5c <_printf_i+0x1cc>
 801ea58:	6018      	str	r0, [r3, #0]
 801ea5a:	e002      	b.n	801ea62 <_printf_i+0x1d2>
 801ea5c:	0671      	lsls	r1, r6, #25
 801ea5e:	d5fb      	bpl.n	801ea58 <_printf_i+0x1c8>
 801ea60:	8018      	strh	r0, [r3, #0]
 801ea62:	2300      	movs	r3, #0
 801ea64:	6123      	str	r3, [r4, #16]
 801ea66:	4616      	mov	r6, r2
 801ea68:	e7ba      	b.n	801e9e0 <_printf_i+0x150>
 801ea6a:	680b      	ldr	r3, [r1, #0]
 801ea6c:	1d1a      	adds	r2, r3, #4
 801ea6e:	600a      	str	r2, [r1, #0]
 801ea70:	681e      	ldr	r6, [r3, #0]
 801ea72:	6862      	ldr	r2, [r4, #4]
 801ea74:	2100      	movs	r1, #0
 801ea76:	4630      	mov	r0, r6
 801ea78:	f7e1 fbb2 	bl	80001e0 <memchr>
 801ea7c:	b108      	cbz	r0, 801ea82 <_printf_i+0x1f2>
 801ea7e:	1b80      	subs	r0, r0, r6
 801ea80:	6060      	str	r0, [r4, #4]
 801ea82:	6863      	ldr	r3, [r4, #4]
 801ea84:	6123      	str	r3, [r4, #16]
 801ea86:	2300      	movs	r3, #0
 801ea88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ea8c:	e7a8      	b.n	801e9e0 <_printf_i+0x150>
 801ea8e:	6923      	ldr	r3, [r4, #16]
 801ea90:	4632      	mov	r2, r6
 801ea92:	4649      	mov	r1, r9
 801ea94:	4640      	mov	r0, r8
 801ea96:	47d0      	blx	sl
 801ea98:	3001      	adds	r0, #1
 801ea9a:	d0ab      	beq.n	801e9f4 <_printf_i+0x164>
 801ea9c:	6823      	ldr	r3, [r4, #0]
 801ea9e:	079b      	lsls	r3, r3, #30
 801eaa0:	d413      	bmi.n	801eaca <_printf_i+0x23a>
 801eaa2:	68e0      	ldr	r0, [r4, #12]
 801eaa4:	9b03      	ldr	r3, [sp, #12]
 801eaa6:	4298      	cmp	r0, r3
 801eaa8:	bfb8      	it	lt
 801eaaa:	4618      	movlt	r0, r3
 801eaac:	e7a4      	b.n	801e9f8 <_printf_i+0x168>
 801eaae:	2301      	movs	r3, #1
 801eab0:	4632      	mov	r2, r6
 801eab2:	4649      	mov	r1, r9
 801eab4:	4640      	mov	r0, r8
 801eab6:	47d0      	blx	sl
 801eab8:	3001      	adds	r0, #1
 801eaba:	d09b      	beq.n	801e9f4 <_printf_i+0x164>
 801eabc:	3501      	adds	r5, #1
 801eabe:	68e3      	ldr	r3, [r4, #12]
 801eac0:	9903      	ldr	r1, [sp, #12]
 801eac2:	1a5b      	subs	r3, r3, r1
 801eac4:	42ab      	cmp	r3, r5
 801eac6:	dcf2      	bgt.n	801eaae <_printf_i+0x21e>
 801eac8:	e7eb      	b.n	801eaa2 <_printf_i+0x212>
 801eaca:	2500      	movs	r5, #0
 801eacc:	f104 0619 	add.w	r6, r4, #25
 801ead0:	e7f5      	b.n	801eabe <_printf_i+0x22e>
 801ead2:	bf00      	nop
 801ead4:	08026db8 	.word	0x08026db8
 801ead8:	08026dc9 	.word	0x08026dc9

0801eadc <_scanf_float>:
 801eadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eae0:	b087      	sub	sp, #28
 801eae2:	4617      	mov	r7, r2
 801eae4:	9303      	str	r3, [sp, #12]
 801eae6:	688b      	ldr	r3, [r1, #8]
 801eae8:	1e5a      	subs	r2, r3, #1
 801eaea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801eaee:	bf83      	ittte	hi
 801eaf0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801eaf4:	195b      	addhi	r3, r3, r5
 801eaf6:	9302      	strhi	r3, [sp, #8]
 801eaf8:	2300      	movls	r3, #0
 801eafa:	bf86      	itte	hi
 801eafc:	f240 135d 	movwhi	r3, #349	; 0x15d
 801eb00:	608b      	strhi	r3, [r1, #8]
 801eb02:	9302      	strls	r3, [sp, #8]
 801eb04:	680b      	ldr	r3, [r1, #0]
 801eb06:	468b      	mov	fp, r1
 801eb08:	2500      	movs	r5, #0
 801eb0a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801eb0e:	f84b 3b1c 	str.w	r3, [fp], #28
 801eb12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801eb16:	4680      	mov	r8, r0
 801eb18:	460c      	mov	r4, r1
 801eb1a:	465e      	mov	r6, fp
 801eb1c:	46aa      	mov	sl, r5
 801eb1e:	46a9      	mov	r9, r5
 801eb20:	9501      	str	r5, [sp, #4]
 801eb22:	68a2      	ldr	r2, [r4, #8]
 801eb24:	b152      	cbz	r2, 801eb3c <_scanf_float+0x60>
 801eb26:	683b      	ldr	r3, [r7, #0]
 801eb28:	781b      	ldrb	r3, [r3, #0]
 801eb2a:	2b4e      	cmp	r3, #78	; 0x4e
 801eb2c:	d864      	bhi.n	801ebf8 <_scanf_float+0x11c>
 801eb2e:	2b40      	cmp	r3, #64	; 0x40
 801eb30:	d83c      	bhi.n	801ebac <_scanf_float+0xd0>
 801eb32:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801eb36:	b2c8      	uxtb	r0, r1
 801eb38:	280e      	cmp	r0, #14
 801eb3a:	d93a      	bls.n	801ebb2 <_scanf_float+0xd6>
 801eb3c:	f1b9 0f00 	cmp.w	r9, #0
 801eb40:	d003      	beq.n	801eb4a <_scanf_float+0x6e>
 801eb42:	6823      	ldr	r3, [r4, #0]
 801eb44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801eb48:	6023      	str	r3, [r4, #0]
 801eb4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eb4e:	f1ba 0f01 	cmp.w	sl, #1
 801eb52:	f200 8113 	bhi.w	801ed7c <_scanf_float+0x2a0>
 801eb56:	455e      	cmp	r6, fp
 801eb58:	f200 8105 	bhi.w	801ed66 <_scanf_float+0x28a>
 801eb5c:	2501      	movs	r5, #1
 801eb5e:	4628      	mov	r0, r5
 801eb60:	b007      	add	sp, #28
 801eb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb66:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801eb6a:	2a0d      	cmp	r2, #13
 801eb6c:	d8e6      	bhi.n	801eb3c <_scanf_float+0x60>
 801eb6e:	a101      	add	r1, pc, #4	; (adr r1, 801eb74 <_scanf_float+0x98>)
 801eb70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801eb74:	0801ecb3 	.word	0x0801ecb3
 801eb78:	0801eb3d 	.word	0x0801eb3d
 801eb7c:	0801eb3d 	.word	0x0801eb3d
 801eb80:	0801eb3d 	.word	0x0801eb3d
 801eb84:	0801ed13 	.word	0x0801ed13
 801eb88:	0801eceb 	.word	0x0801eceb
 801eb8c:	0801eb3d 	.word	0x0801eb3d
 801eb90:	0801eb3d 	.word	0x0801eb3d
 801eb94:	0801ecc1 	.word	0x0801ecc1
 801eb98:	0801eb3d 	.word	0x0801eb3d
 801eb9c:	0801eb3d 	.word	0x0801eb3d
 801eba0:	0801eb3d 	.word	0x0801eb3d
 801eba4:	0801eb3d 	.word	0x0801eb3d
 801eba8:	0801ec79 	.word	0x0801ec79
 801ebac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801ebb0:	e7db      	b.n	801eb6a <_scanf_float+0x8e>
 801ebb2:	290e      	cmp	r1, #14
 801ebb4:	d8c2      	bhi.n	801eb3c <_scanf_float+0x60>
 801ebb6:	a001      	add	r0, pc, #4	; (adr r0, 801ebbc <_scanf_float+0xe0>)
 801ebb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ebbc:	0801ec6b 	.word	0x0801ec6b
 801ebc0:	0801eb3d 	.word	0x0801eb3d
 801ebc4:	0801ec6b 	.word	0x0801ec6b
 801ebc8:	0801ecff 	.word	0x0801ecff
 801ebcc:	0801eb3d 	.word	0x0801eb3d
 801ebd0:	0801ec19 	.word	0x0801ec19
 801ebd4:	0801ec55 	.word	0x0801ec55
 801ebd8:	0801ec55 	.word	0x0801ec55
 801ebdc:	0801ec55 	.word	0x0801ec55
 801ebe0:	0801ec55 	.word	0x0801ec55
 801ebe4:	0801ec55 	.word	0x0801ec55
 801ebe8:	0801ec55 	.word	0x0801ec55
 801ebec:	0801ec55 	.word	0x0801ec55
 801ebf0:	0801ec55 	.word	0x0801ec55
 801ebf4:	0801ec55 	.word	0x0801ec55
 801ebf8:	2b6e      	cmp	r3, #110	; 0x6e
 801ebfa:	d809      	bhi.n	801ec10 <_scanf_float+0x134>
 801ebfc:	2b60      	cmp	r3, #96	; 0x60
 801ebfe:	d8b2      	bhi.n	801eb66 <_scanf_float+0x8a>
 801ec00:	2b54      	cmp	r3, #84	; 0x54
 801ec02:	d077      	beq.n	801ecf4 <_scanf_float+0x218>
 801ec04:	2b59      	cmp	r3, #89	; 0x59
 801ec06:	d199      	bne.n	801eb3c <_scanf_float+0x60>
 801ec08:	2d07      	cmp	r5, #7
 801ec0a:	d197      	bne.n	801eb3c <_scanf_float+0x60>
 801ec0c:	2508      	movs	r5, #8
 801ec0e:	e029      	b.n	801ec64 <_scanf_float+0x188>
 801ec10:	2b74      	cmp	r3, #116	; 0x74
 801ec12:	d06f      	beq.n	801ecf4 <_scanf_float+0x218>
 801ec14:	2b79      	cmp	r3, #121	; 0x79
 801ec16:	e7f6      	b.n	801ec06 <_scanf_float+0x12a>
 801ec18:	6821      	ldr	r1, [r4, #0]
 801ec1a:	05c8      	lsls	r0, r1, #23
 801ec1c:	d51a      	bpl.n	801ec54 <_scanf_float+0x178>
 801ec1e:	9b02      	ldr	r3, [sp, #8]
 801ec20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801ec24:	6021      	str	r1, [r4, #0]
 801ec26:	f109 0901 	add.w	r9, r9, #1
 801ec2a:	b11b      	cbz	r3, 801ec34 <_scanf_float+0x158>
 801ec2c:	3b01      	subs	r3, #1
 801ec2e:	3201      	adds	r2, #1
 801ec30:	9302      	str	r3, [sp, #8]
 801ec32:	60a2      	str	r2, [r4, #8]
 801ec34:	68a3      	ldr	r3, [r4, #8]
 801ec36:	3b01      	subs	r3, #1
 801ec38:	60a3      	str	r3, [r4, #8]
 801ec3a:	6923      	ldr	r3, [r4, #16]
 801ec3c:	3301      	adds	r3, #1
 801ec3e:	6123      	str	r3, [r4, #16]
 801ec40:	687b      	ldr	r3, [r7, #4]
 801ec42:	3b01      	subs	r3, #1
 801ec44:	2b00      	cmp	r3, #0
 801ec46:	607b      	str	r3, [r7, #4]
 801ec48:	f340 8084 	ble.w	801ed54 <_scanf_float+0x278>
 801ec4c:	683b      	ldr	r3, [r7, #0]
 801ec4e:	3301      	adds	r3, #1
 801ec50:	603b      	str	r3, [r7, #0]
 801ec52:	e766      	b.n	801eb22 <_scanf_float+0x46>
 801ec54:	eb1a 0f05 	cmn.w	sl, r5
 801ec58:	f47f af70 	bne.w	801eb3c <_scanf_float+0x60>
 801ec5c:	6822      	ldr	r2, [r4, #0]
 801ec5e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801ec62:	6022      	str	r2, [r4, #0]
 801ec64:	f806 3b01 	strb.w	r3, [r6], #1
 801ec68:	e7e4      	b.n	801ec34 <_scanf_float+0x158>
 801ec6a:	6822      	ldr	r2, [r4, #0]
 801ec6c:	0610      	lsls	r0, r2, #24
 801ec6e:	f57f af65 	bpl.w	801eb3c <_scanf_float+0x60>
 801ec72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ec76:	e7f4      	b.n	801ec62 <_scanf_float+0x186>
 801ec78:	f1ba 0f00 	cmp.w	sl, #0
 801ec7c:	d10e      	bne.n	801ec9c <_scanf_float+0x1c0>
 801ec7e:	f1b9 0f00 	cmp.w	r9, #0
 801ec82:	d10e      	bne.n	801eca2 <_scanf_float+0x1c6>
 801ec84:	6822      	ldr	r2, [r4, #0]
 801ec86:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ec8a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ec8e:	d108      	bne.n	801eca2 <_scanf_float+0x1c6>
 801ec90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ec94:	6022      	str	r2, [r4, #0]
 801ec96:	f04f 0a01 	mov.w	sl, #1
 801ec9a:	e7e3      	b.n	801ec64 <_scanf_float+0x188>
 801ec9c:	f1ba 0f02 	cmp.w	sl, #2
 801eca0:	d055      	beq.n	801ed4e <_scanf_float+0x272>
 801eca2:	2d01      	cmp	r5, #1
 801eca4:	d002      	beq.n	801ecac <_scanf_float+0x1d0>
 801eca6:	2d04      	cmp	r5, #4
 801eca8:	f47f af48 	bne.w	801eb3c <_scanf_float+0x60>
 801ecac:	3501      	adds	r5, #1
 801ecae:	b2ed      	uxtb	r5, r5
 801ecb0:	e7d8      	b.n	801ec64 <_scanf_float+0x188>
 801ecb2:	f1ba 0f01 	cmp.w	sl, #1
 801ecb6:	f47f af41 	bne.w	801eb3c <_scanf_float+0x60>
 801ecba:	f04f 0a02 	mov.w	sl, #2
 801ecbe:	e7d1      	b.n	801ec64 <_scanf_float+0x188>
 801ecc0:	b97d      	cbnz	r5, 801ece2 <_scanf_float+0x206>
 801ecc2:	f1b9 0f00 	cmp.w	r9, #0
 801ecc6:	f47f af3c 	bne.w	801eb42 <_scanf_float+0x66>
 801ecca:	6822      	ldr	r2, [r4, #0]
 801eccc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ecd0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ecd4:	f47f af39 	bne.w	801eb4a <_scanf_float+0x6e>
 801ecd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ecdc:	6022      	str	r2, [r4, #0]
 801ecde:	2501      	movs	r5, #1
 801ece0:	e7c0      	b.n	801ec64 <_scanf_float+0x188>
 801ece2:	2d03      	cmp	r5, #3
 801ece4:	d0e2      	beq.n	801ecac <_scanf_float+0x1d0>
 801ece6:	2d05      	cmp	r5, #5
 801ece8:	e7de      	b.n	801eca8 <_scanf_float+0x1cc>
 801ecea:	2d02      	cmp	r5, #2
 801ecec:	f47f af26 	bne.w	801eb3c <_scanf_float+0x60>
 801ecf0:	2503      	movs	r5, #3
 801ecf2:	e7b7      	b.n	801ec64 <_scanf_float+0x188>
 801ecf4:	2d06      	cmp	r5, #6
 801ecf6:	f47f af21 	bne.w	801eb3c <_scanf_float+0x60>
 801ecfa:	2507      	movs	r5, #7
 801ecfc:	e7b2      	b.n	801ec64 <_scanf_float+0x188>
 801ecfe:	6822      	ldr	r2, [r4, #0]
 801ed00:	0591      	lsls	r1, r2, #22
 801ed02:	f57f af1b 	bpl.w	801eb3c <_scanf_float+0x60>
 801ed06:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801ed0a:	6022      	str	r2, [r4, #0]
 801ed0c:	f8cd 9004 	str.w	r9, [sp, #4]
 801ed10:	e7a8      	b.n	801ec64 <_scanf_float+0x188>
 801ed12:	6822      	ldr	r2, [r4, #0]
 801ed14:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801ed18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801ed1c:	d006      	beq.n	801ed2c <_scanf_float+0x250>
 801ed1e:	0550      	lsls	r0, r2, #21
 801ed20:	f57f af0c 	bpl.w	801eb3c <_scanf_float+0x60>
 801ed24:	f1b9 0f00 	cmp.w	r9, #0
 801ed28:	f43f af0f 	beq.w	801eb4a <_scanf_float+0x6e>
 801ed2c:	0591      	lsls	r1, r2, #22
 801ed2e:	bf58      	it	pl
 801ed30:	9901      	ldrpl	r1, [sp, #4]
 801ed32:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ed36:	bf58      	it	pl
 801ed38:	eba9 0101 	subpl.w	r1, r9, r1
 801ed3c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801ed40:	bf58      	it	pl
 801ed42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801ed46:	6022      	str	r2, [r4, #0]
 801ed48:	f04f 0900 	mov.w	r9, #0
 801ed4c:	e78a      	b.n	801ec64 <_scanf_float+0x188>
 801ed4e:	f04f 0a03 	mov.w	sl, #3
 801ed52:	e787      	b.n	801ec64 <_scanf_float+0x188>
 801ed54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ed58:	4639      	mov	r1, r7
 801ed5a:	4640      	mov	r0, r8
 801ed5c:	4798      	blx	r3
 801ed5e:	2800      	cmp	r0, #0
 801ed60:	f43f aedf 	beq.w	801eb22 <_scanf_float+0x46>
 801ed64:	e6ea      	b.n	801eb3c <_scanf_float+0x60>
 801ed66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ed6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ed6e:	463a      	mov	r2, r7
 801ed70:	4640      	mov	r0, r8
 801ed72:	4798      	blx	r3
 801ed74:	6923      	ldr	r3, [r4, #16]
 801ed76:	3b01      	subs	r3, #1
 801ed78:	6123      	str	r3, [r4, #16]
 801ed7a:	e6ec      	b.n	801eb56 <_scanf_float+0x7a>
 801ed7c:	1e6b      	subs	r3, r5, #1
 801ed7e:	2b06      	cmp	r3, #6
 801ed80:	d825      	bhi.n	801edce <_scanf_float+0x2f2>
 801ed82:	2d02      	cmp	r5, #2
 801ed84:	d836      	bhi.n	801edf4 <_scanf_float+0x318>
 801ed86:	455e      	cmp	r6, fp
 801ed88:	f67f aee8 	bls.w	801eb5c <_scanf_float+0x80>
 801ed8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ed90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ed94:	463a      	mov	r2, r7
 801ed96:	4640      	mov	r0, r8
 801ed98:	4798      	blx	r3
 801ed9a:	6923      	ldr	r3, [r4, #16]
 801ed9c:	3b01      	subs	r3, #1
 801ed9e:	6123      	str	r3, [r4, #16]
 801eda0:	e7f1      	b.n	801ed86 <_scanf_float+0x2aa>
 801eda2:	9802      	ldr	r0, [sp, #8]
 801eda4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801eda8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801edac:	9002      	str	r0, [sp, #8]
 801edae:	463a      	mov	r2, r7
 801edb0:	4640      	mov	r0, r8
 801edb2:	4798      	blx	r3
 801edb4:	6923      	ldr	r3, [r4, #16]
 801edb6:	3b01      	subs	r3, #1
 801edb8:	6123      	str	r3, [r4, #16]
 801edba:	f10a 3aff 	add.w	sl, sl, #4294967295
 801edbe:	fa5f fa8a 	uxtb.w	sl, sl
 801edc2:	f1ba 0f02 	cmp.w	sl, #2
 801edc6:	d1ec      	bne.n	801eda2 <_scanf_float+0x2c6>
 801edc8:	3d03      	subs	r5, #3
 801edca:	b2ed      	uxtb	r5, r5
 801edcc:	1b76      	subs	r6, r6, r5
 801edce:	6823      	ldr	r3, [r4, #0]
 801edd0:	05da      	lsls	r2, r3, #23
 801edd2:	d52f      	bpl.n	801ee34 <_scanf_float+0x358>
 801edd4:	055b      	lsls	r3, r3, #21
 801edd6:	d510      	bpl.n	801edfa <_scanf_float+0x31e>
 801edd8:	455e      	cmp	r6, fp
 801edda:	f67f aebf 	bls.w	801eb5c <_scanf_float+0x80>
 801edde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ede2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ede6:	463a      	mov	r2, r7
 801ede8:	4640      	mov	r0, r8
 801edea:	4798      	blx	r3
 801edec:	6923      	ldr	r3, [r4, #16]
 801edee:	3b01      	subs	r3, #1
 801edf0:	6123      	str	r3, [r4, #16]
 801edf2:	e7f1      	b.n	801edd8 <_scanf_float+0x2fc>
 801edf4:	46aa      	mov	sl, r5
 801edf6:	9602      	str	r6, [sp, #8]
 801edf8:	e7df      	b.n	801edba <_scanf_float+0x2de>
 801edfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801edfe:	6923      	ldr	r3, [r4, #16]
 801ee00:	2965      	cmp	r1, #101	; 0x65
 801ee02:	f103 33ff 	add.w	r3, r3, #4294967295
 801ee06:	f106 35ff 	add.w	r5, r6, #4294967295
 801ee0a:	6123      	str	r3, [r4, #16]
 801ee0c:	d00c      	beq.n	801ee28 <_scanf_float+0x34c>
 801ee0e:	2945      	cmp	r1, #69	; 0x45
 801ee10:	d00a      	beq.n	801ee28 <_scanf_float+0x34c>
 801ee12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ee16:	463a      	mov	r2, r7
 801ee18:	4640      	mov	r0, r8
 801ee1a:	4798      	blx	r3
 801ee1c:	6923      	ldr	r3, [r4, #16]
 801ee1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801ee22:	3b01      	subs	r3, #1
 801ee24:	1eb5      	subs	r5, r6, #2
 801ee26:	6123      	str	r3, [r4, #16]
 801ee28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ee2c:	463a      	mov	r2, r7
 801ee2e:	4640      	mov	r0, r8
 801ee30:	4798      	blx	r3
 801ee32:	462e      	mov	r6, r5
 801ee34:	6825      	ldr	r5, [r4, #0]
 801ee36:	f015 0510 	ands.w	r5, r5, #16
 801ee3a:	d158      	bne.n	801eeee <_scanf_float+0x412>
 801ee3c:	7035      	strb	r5, [r6, #0]
 801ee3e:	6823      	ldr	r3, [r4, #0]
 801ee40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ee44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ee48:	d11c      	bne.n	801ee84 <_scanf_float+0x3a8>
 801ee4a:	9b01      	ldr	r3, [sp, #4]
 801ee4c:	454b      	cmp	r3, r9
 801ee4e:	eba3 0209 	sub.w	r2, r3, r9
 801ee52:	d124      	bne.n	801ee9e <_scanf_float+0x3c2>
 801ee54:	2200      	movs	r2, #0
 801ee56:	4659      	mov	r1, fp
 801ee58:	4640      	mov	r0, r8
 801ee5a:	f001 f813 	bl	801fe84 <_strtod_r>
 801ee5e:	9b03      	ldr	r3, [sp, #12]
 801ee60:	6821      	ldr	r1, [r4, #0]
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	f011 0f02 	tst.w	r1, #2
 801ee68:	ec57 6b10 	vmov	r6, r7, d0
 801ee6c:	f103 0204 	add.w	r2, r3, #4
 801ee70:	d020      	beq.n	801eeb4 <_scanf_float+0x3d8>
 801ee72:	9903      	ldr	r1, [sp, #12]
 801ee74:	600a      	str	r2, [r1, #0]
 801ee76:	681b      	ldr	r3, [r3, #0]
 801ee78:	e9c3 6700 	strd	r6, r7, [r3]
 801ee7c:	68e3      	ldr	r3, [r4, #12]
 801ee7e:	3301      	adds	r3, #1
 801ee80:	60e3      	str	r3, [r4, #12]
 801ee82:	e66c      	b.n	801eb5e <_scanf_float+0x82>
 801ee84:	9b04      	ldr	r3, [sp, #16]
 801ee86:	2b00      	cmp	r3, #0
 801ee88:	d0e4      	beq.n	801ee54 <_scanf_float+0x378>
 801ee8a:	9905      	ldr	r1, [sp, #20]
 801ee8c:	230a      	movs	r3, #10
 801ee8e:	462a      	mov	r2, r5
 801ee90:	3101      	adds	r1, #1
 801ee92:	4640      	mov	r0, r8
 801ee94:	f001 f880 	bl	801ff98 <_strtol_r>
 801ee98:	9b04      	ldr	r3, [sp, #16]
 801ee9a:	9e05      	ldr	r6, [sp, #20]
 801ee9c:	1ac2      	subs	r2, r0, r3
 801ee9e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801eea2:	429e      	cmp	r6, r3
 801eea4:	bf28      	it	cs
 801eea6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801eeaa:	4912      	ldr	r1, [pc, #72]	; (801eef4 <_scanf_float+0x418>)
 801eeac:	4630      	mov	r0, r6
 801eeae:	f000 f8fd 	bl	801f0ac <siprintf>
 801eeb2:	e7cf      	b.n	801ee54 <_scanf_float+0x378>
 801eeb4:	f011 0f04 	tst.w	r1, #4
 801eeb8:	9903      	ldr	r1, [sp, #12]
 801eeba:	600a      	str	r2, [r1, #0]
 801eebc:	d1db      	bne.n	801ee76 <_scanf_float+0x39a>
 801eebe:	f8d3 8000 	ldr.w	r8, [r3]
 801eec2:	ee10 2a10 	vmov	r2, s0
 801eec6:	ee10 0a10 	vmov	r0, s0
 801eeca:	463b      	mov	r3, r7
 801eecc:	4639      	mov	r1, r7
 801eece:	f7e1 fe2d 	bl	8000b2c <__aeabi_dcmpun>
 801eed2:	b128      	cbz	r0, 801eee0 <_scanf_float+0x404>
 801eed4:	4808      	ldr	r0, [pc, #32]	; (801eef8 <_scanf_float+0x41c>)
 801eed6:	f000 f8e3 	bl	801f0a0 <nanf>
 801eeda:	ed88 0a00 	vstr	s0, [r8]
 801eede:	e7cd      	b.n	801ee7c <_scanf_float+0x3a0>
 801eee0:	4630      	mov	r0, r6
 801eee2:	4639      	mov	r1, r7
 801eee4:	f7e1 fe80 	bl	8000be8 <__aeabi_d2f>
 801eee8:	f8c8 0000 	str.w	r0, [r8]
 801eeec:	e7c6      	b.n	801ee7c <_scanf_float+0x3a0>
 801eeee:	2500      	movs	r5, #0
 801eef0:	e635      	b.n	801eb5e <_scanf_float+0x82>
 801eef2:	bf00      	nop
 801eef4:	08026dda 	.word	0x08026dda
 801eef8:	08026ee3 	.word	0x08026ee3

0801eefc <iprintf>:
 801eefc:	b40f      	push	{r0, r1, r2, r3}
 801eefe:	4b0a      	ldr	r3, [pc, #40]	; (801ef28 <iprintf+0x2c>)
 801ef00:	b513      	push	{r0, r1, r4, lr}
 801ef02:	681c      	ldr	r4, [r3, #0]
 801ef04:	b124      	cbz	r4, 801ef10 <iprintf+0x14>
 801ef06:	69a3      	ldr	r3, [r4, #24]
 801ef08:	b913      	cbnz	r3, 801ef10 <iprintf+0x14>
 801ef0a:	4620      	mov	r0, r4
 801ef0c:	f7fe ffca 	bl	801dea4 <__sinit>
 801ef10:	ab05      	add	r3, sp, #20
 801ef12:	9a04      	ldr	r2, [sp, #16]
 801ef14:	68a1      	ldr	r1, [r4, #8]
 801ef16:	9301      	str	r3, [sp, #4]
 801ef18:	4620      	mov	r0, r4
 801ef1a:	f003 fb99 	bl	8022650 <_vfiprintf_r>
 801ef1e:	b002      	add	sp, #8
 801ef20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef24:	b004      	add	sp, #16
 801ef26:	4770      	bx	lr
 801ef28:	20000360 	.word	0x20000360

0801ef2c <rand>:
 801ef2c:	4b17      	ldr	r3, [pc, #92]	; (801ef8c <rand+0x60>)
 801ef2e:	b510      	push	{r4, lr}
 801ef30:	681c      	ldr	r4, [r3, #0]
 801ef32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ef34:	b9b3      	cbnz	r3, 801ef64 <rand+0x38>
 801ef36:	2018      	movs	r0, #24
 801ef38:	f7ff f876 	bl	801e028 <malloc>
 801ef3c:	63a0      	str	r0, [r4, #56]	; 0x38
 801ef3e:	b928      	cbnz	r0, 801ef4c <rand+0x20>
 801ef40:	4602      	mov	r2, r0
 801ef42:	4b13      	ldr	r3, [pc, #76]	; (801ef90 <rand+0x64>)
 801ef44:	4813      	ldr	r0, [pc, #76]	; (801ef94 <rand+0x68>)
 801ef46:	214e      	movs	r1, #78	; 0x4e
 801ef48:	f001 f83a 	bl	801ffc0 <__assert_func>
 801ef4c:	4a12      	ldr	r2, [pc, #72]	; (801ef98 <rand+0x6c>)
 801ef4e:	4b13      	ldr	r3, [pc, #76]	; (801ef9c <rand+0x70>)
 801ef50:	e9c0 2300 	strd	r2, r3, [r0]
 801ef54:	4b12      	ldr	r3, [pc, #72]	; (801efa0 <rand+0x74>)
 801ef56:	6083      	str	r3, [r0, #8]
 801ef58:	230b      	movs	r3, #11
 801ef5a:	8183      	strh	r3, [r0, #12]
 801ef5c:	2201      	movs	r2, #1
 801ef5e:	2300      	movs	r3, #0
 801ef60:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ef64:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ef66:	480f      	ldr	r0, [pc, #60]	; (801efa4 <rand+0x78>)
 801ef68:	690a      	ldr	r2, [r1, #16]
 801ef6a:	694b      	ldr	r3, [r1, #20]
 801ef6c:	4c0e      	ldr	r4, [pc, #56]	; (801efa8 <rand+0x7c>)
 801ef6e:	4350      	muls	r0, r2
 801ef70:	fb04 0003 	mla	r0, r4, r3, r0
 801ef74:	fba2 3404 	umull	r3, r4, r2, r4
 801ef78:	1c5a      	adds	r2, r3, #1
 801ef7a:	4404      	add	r4, r0
 801ef7c:	f144 0000 	adc.w	r0, r4, #0
 801ef80:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801ef84:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ef88:	bd10      	pop	{r4, pc}
 801ef8a:	bf00      	nop
 801ef8c:	20000360 	.word	0x20000360
 801ef90:	08026ddf 	.word	0x08026ddf
 801ef94:	08026df6 	.word	0x08026df6
 801ef98:	abcd330e 	.word	0xabcd330e
 801ef9c:	e66d1234 	.word	0xe66d1234
 801efa0:	0005deec 	.word	0x0005deec
 801efa4:	5851f42d 	.word	0x5851f42d
 801efa8:	4c957f2d 	.word	0x4c957f2d

0801efac <cleanup_glue>:
 801efac:	b538      	push	{r3, r4, r5, lr}
 801efae:	460c      	mov	r4, r1
 801efb0:	6809      	ldr	r1, [r1, #0]
 801efb2:	4605      	mov	r5, r0
 801efb4:	b109      	cbz	r1, 801efba <cleanup_glue+0xe>
 801efb6:	f7ff fff9 	bl	801efac <cleanup_glue>
 801efba:	4621      	mov	r1, r4
 801efbc:	4628      	mov	r0, r5
 801efbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801efc2:	f7ff b877 	b.w	801e0b4 <_free_r>
	...

0801efc8 <_reclaim_reent>:
 801efc8:	4b2c      	ldr	r3, [pc, #176]	; (801f07c <_reclaim_reent+0xb4>)
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	4283      	cmp	r3, r0
 801efce:	b570      	push	{r4, r5, r6, lr}
 801efd0:	4604      	mov	r4, r0
 801efd2:	d051      	beq.n	801f078 <_reclaim_reent+0xb0>
 801efd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801efd6:	b143      	cbz	r3, 801efea <_reclaim_reent+0x22>
 801efd8:	68db      	ldr	r3, [r3, #12]
 801efda:	2b00      	cmp	r3, #0
 801efdc:	d14a      	bne.n	801f074 <_reclaim_reent+0xac>
 801efde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801efe0:	6819      	ldr	r1, [r3, #0]
 801efe2:	b111      	cbz	r1, 801efea <_reclaim_reent+0x22>
 801efe4:	4620      	mov	r0, r4
 801efe6:	f7ff f865 	bl	801e0b4 <_free_r>
 801efea:	6961      	ldr	r1, [r4, #20]
 801efec:	b111      	cbz	r1, 801eff4 <_reclaim_reent+0x2c>
 801efee:	4620      	mov	r0, r4
 801eff0:	f7ff f860 	bl	801e0b4 <_free_r>
 801eff4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801eff6:	b111      	cbz	r1, 801effe <_reclaim_reent+0x36>
 801eff8:	4620      	mov	r0, r4
 801effa:	f7ff f85b 	bl	801e0b4 <_free_r>
 801effe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f000:	b111      	cbz	r1, 801f008 <_reclaim_reent+0x40>
 801f002:	4620      	mov	r0, r4
 801f004:	f7ff f856 	bl	801e0b4 <_free_r>
 801f008:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801f00a:	b111      	cbz	r1, 801f012 <_reclaim_reent+0x4a>
 801f00c:	4620      	mov	r0, r4
 801f00e:	f7ff f851 	bl	801e0b4 <_free_r>
 801f012:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f014:	b111      	cbz	r1, 801f01c <_reclaim_reent+0x54>
 801f016:	4620      	mov	r0, r4
 801f018:	f7ff f84c 	bl	801e0b4 <_free_r>
 801f01c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801f01e:	b111      	cbz	r1, 801f026 <_reclaim_reent+0x5e>
 801f020:	4620      	mov	r0, r4
 801f022:	f7ff f847 	bl	801e0b4 <_free_r>
 801f026:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801f028:	b111      	cbz	r1, 801f030 <_reclaim_reent+0x68>
 801f02a:	4620      	mov	r0, r4
 801f02c:	f7ff f842 	bl	801e0b4 <_free_r>
 801f030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f032:	b111      	cbz	r1, 801f03a <_reclaim_reent+0x72>
 801f034:	4620      	mov	r0, r4
 801f036:	f7ff f83d 	bl	801e0b4 <_free_r>
 801f03a:	69a3      	ldr	r3, [r4, #24]
 801f03c:	b1e3      	cbz	r3, 801f078 <_reclaim_reent+0xb0>
 801f03e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f040:	4620      	mov	r0, r4
 801f042:	4798      	blx	r3
 801f044:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f046:	b1b9      	cbz	r1, 801f078 <_reclaim_reent+0xb0>
 801f048:	4620      	mov	r0, r4
 801f04a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f04e:	f7ff bfad 	b.w	801efac <cleanup_glue>
 801f052:	5949      	ldr	r1, [r1, r5]
 801f054:	b941      	cbnz	r1, 801f068 <_reclaim_reent+0xa0>
 801f056:	3504      	adds	r5, #4
 801f058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f05a:	2d80      	cmp	r5, #128	; 0x80
 801f05c:	68d9      	ldr	r1, [r3, #12]
 801f05e:	d1f8      	bne.n	801f052 <_reclaim_reent+0x8a>
 801f060:	4620      	mov	r0, r4
 801f062:	f7ff f827 	bl	801e0b4 <_free_r>
 801f066:	e7ba      	b.n	801efde <_reclaim_reent+0x16>
 801f068:	680e      	ldr	r6, [r1, #0]
 801f06a:	4620      	mov	r0, r4
 801f06c:	f7ff f822 	bl	801e0b4 <_free_r>
 801f070:	4631      	mov	r1, r6
 801f072:	e7ef      	b.n	801f054 <_reclaim_reent+0x8c>
 801f074:	2500      	movs	r5, #0
 801f076:	e7ef      	b.n	801f058 <_reclaim_reent+0x90>
 801f078:	bd70      	pop	{r4, r5, r6, pc}
 801f07a:	bf00      	nop
 801f07c:	20000360 	.word	0x20000360

0801f080 <_sbrk_r>:
 801f080:	b538      	push	{r3, r4, r5, lr}
 801f082:	4d06      	ldr	r5, [pc, #24]	; (801f09c <_sbrk_r+0x1c>)
 801f084:	2300      	movs	r3, #0
 801f086:	4604      	mov	r4, r0
 801f088:	4608      	mov	r0, r1
 801f08a:	602b      	str	r3, [r5, #0]
 801f08c:	f7e7 fa92 	bl	80065b4 <_sbrk>
 801f090:	1c43      	adds	r3, r0, #1
 801f092:	d102      	bne.n	801f09a <_sbrk_r+0x1a>
 801f094:	682b      	ldr	r3, [r5, #0]
 801f096:	b103      	cbz	r3, 801f09a <_sbrk_r+0x1a>
 801f098:	6023      	str	r3, [r4, #0]
 801f09a:	bd38      	pop	{r3, r4, r5, pc}
 801f09c:	2000e11c 	.word	0x2000e11c

0801f0a0 <nanf>:
 801f0a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f0a8 <nanf+0x8>
 801f0a4:	4770      	bx	lr
 801f0a6:	bf00      	nop
 801f0a8:	7fc00000 	.word	0x7fc00000

0801f0ac <siprintf>:
 801f0ac:	b40e      	push	{r1, r2, r3}
 801f0ae:	b500      	push	{lr}
 801f0b0:	b09c      	sub	sp, #112	; 0x70
 801f0b2:	ab1d      	add	r3, sp, #116	; 0x74
 801f0b4:	9002      	str	r0, [sp, #8]
 801f0b6:	9006      	str	r0, [sp, #24]
 801f0b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f0bc:	4809      	ldr	r0, [pc, #36]	; (801f0e4 <siprintf+0x38>)
 801f0be:	9107      	str	r1, [sp, #28]
 801f0c0:	9104      	str	r1, [sp, #16]
 801f0c2:	4909      	ldr	r1, [pc, #36]	; (801f0e8 <siprintf+0x3c>)
 801f0c4:	f853 2b04 	ldr.w	r2, [r3], #4
 801f0c8:	9105      	str	r1, [sp, #20]
 801f0ca:	6800      	ldr	r0, [r0, #0]
 801f0cc:	9301      	str	r3, [sp, #4]
 801f0ce:	a902      	add	r1, sp, #8
 801f0d0:	f002 ffc2 	bl	8022058 <_svfiprintf_r>
 801f0d4:	9b02      	ldr	r3, [sp, #8]
 801f0d6:	2200      	movs	r2, #0
 801f0d8:	701a      	strb	r2, [r3, #0]
 801f0da:	b01c      	add	sp, #112	; 0x70
 801f0dc:	f85d eb04 	ldr.w	lr, [sp], #4
 801f0e0:	b003      	add	sp, #12
 801f0e2:	4770      	bx	lr
 801f0e4:	20000360 	.word	0x20000360
 801f0e8:	ffff0208 	.word	0xffff0208

0801f0ec <siscanf>:
 801f0ec:	b40e      	push	{r1, r2, r3}
 801f0ee:	b510      	push	{r4, lr}
 801f0f0:	b09f      	sub	sp, #124	; 0x7c
 801f0f2:	ac21      	add	r4, sp, #132	; 0x84
 801f0f4:	f44f 7101 	mov.w	r1, #516	; 0x204
 801f0f8:	f854 2b04 	ldr.w	r2, [r4], #4
 801f0fc:	9201      	str	r2, [sp, #4]
 801f0fe:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f102:	9004      	str	r0, [sp, #16]
 801f104:	9008      	str	r0, [sp, #32]
 801f106:	f7e1 f863 	bl	80001d0 <strlen>
 801f10a:	4b0c      	ldr	r3, [pc, #48]	; (801f13c <siscanf+0x50>)
 801f10c:	9005      	str	r0, [sp, #20]
 801f10e:	9009      	str	r0, [sp, #36]	; 0x24
 801f110:	930d      	str	r3, [sp, #52]	; 0x34
 801f112:	480b      	ldr	r0, [pc, #44]	; (801f140 <siscanf+0x54>)
 801f114:	9a01      	ldr	r2, [sp, #4]
 801f116:	6800      	ldr	r0, [r0, #0]
 801f118:	9403      	str	r4, [sp, #12]
 801f11a:	2300      	movs	r3, #0
 801f11c:	9311      	str	r3, [sp, #68]	; 0x44
 801f11e:	9316      	str	r3, [sp, #88]	; 0x58
 801f120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f124:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f128:	a904      	add	r1, sp, #16
 801f12a:	4623      	mov	r3, r4
 801f12c:	f003 f8ee 	bl	802230c <__ssvfiscanf_r>
 801f130:	b01f      	add	sp, #124	; 0x7c
 801f132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f136:	b003      	add	sp, #12
 801f138:	4770      	bx	lr
 801f13a:	bf00      	nop
 801f13c:	0801f167 	.word	0x0801f167
 801f140:	20000360 	.word	0x20000360

0801f144 <__sread>:
 801f144:	b510      	push	{r4, lr}
 801f146:	460c      	mov	r4, r1
 801f148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f14c:	f003 fcfc 	bl	8022b48 <_read_r>
 801f150:	2800      	cmp	r0, #0
 801f152:	bfab      	itete	ge
 801f154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f156:	89a3      	ldrhlt	r3, [r4, #12]
 801f158:	181b      	addge	r3, r3, r0
 801f15a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f15e:	bfac      	ite	ge
 801f160:	6563      	strge	r3, [r4, #84]	; 0x54
 801f162:	81a3      	strhlt	r3, [r4, #12]
 801f164:	bd10      	pop	{r4, pc}

0801f166 <__seofread>:
 801f166:	2000      	movs	r0, #0
 801f168:	4770      	bx	lr

0801f16a <__swrite>:
 801f16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f16e:	461f      	mov	r7, r3
 801f170:	898b      	ldrh	r3, [r1, #12]
 801f172:	05db      	lsls	r3, r3, #23
 801f174:	4605      	mov	r5, r0
 801f176:	460c      	mov	r4, r1
 801f178:	4616      	mov	r6, r2
 801f17a:	d505      	bpl.n	801f188 <__swrite+0x1e>
 801f17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f180:	2302      	movs	r3, #2
 801f182:	2200      	movs	r2, #0
 801f184:	f002 fa12 	bl	80215ac <_lseek_r>
 801f188:	89a3      	ldrh	r3, [r4, #12]
 801f18a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f18e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f192:	81a3      	strh	r3, [r4, #12]
 801f194:	4632      	mov	r2, r6
 801f196:	463b      	mov	r3, r7
 801f198:	4628      	mov	r0, r5
 801f19a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f19e:	f000 befd 	b.w	801ff9c <_write_r>

0801f1a2 <__sseek>:
 801f1a2:	b510      	push	{r4, lr}
 801f1a4:	460c      	mov	r4, r1
 801f1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f1aa:	f002 f9ff 	bl	80215ac <_lseek_r>
 801f1ae:	1c43      	adds	r3, r0, #1
 801f1b0:	89a3      	ldrh	r3, [r4, #12]
 801f1b2:	bf15      	itete	ne
 801f1b4:	6560      	strne	r0, [r4, #84]	; 0x54
 801f1b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f1ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f1be:	81a3      	strheq	r3, [r4, #12]
 801f1c0:	bf18      	it	ne
 801f1c2:	81a3      	strhne	r3, [r4, #12]
 801f1c4:	bd10      	pop	{r4, pc}

0801f1c6 <__sclose>:
 801f1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f1ca:	f000 bf17 	b.w	801fffc <_close_r>

0801f1ce <strchr>:
 801f1ce:	b2c9      	uxtb	r1, r1
 801f1d0:	4603      	mov	r3, r0
 801f1d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f1d6:	b11a      	cbz	r2, 801f1e0 <strchr+0x12>
 801f1d8:	428a      	cmp	r2, r1
 801f1da:	d1f9      	bne.n	801f1d0 <strchr+0x2>
 801f1dc:	4618      	mov	r0, r3
 801f1de:	4770      	bx	lr
 801f1e0:	2900      	cmp	r1, #0
 801f1e2:	bf18      	it	ne
 801f1e4:	2300      	movne	r3, #0
 801f1e6:	e7f9      	b.n	801f1dc <strchr+0xe>

0801f1e8 <strncmp>:
 801f1e8:	b510      	push	{r4, lr}
 801f1ea:	b16a      	cbz	r2, 801f208 <strncmp+0x20>
 801f1ec:	3901      	subs	r1, #1
 801f1ee:	1884      	adds	r4, r0, r2
 801f1f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f1f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f1f8:	4293      	cmp	r3, r2
 801f1fa:	d103      	bne.n	801f204 <strncmp+0x1c>
 801f1fc:	42a0      	cmp	r0, r4
 801f1fe:	d001      	beq.n	801f204 <strncmp+0x1c>
 801f200:	2b00      	cmp	r3, #0
 801f202:	d1f5      	bne.n	801f1f0 <strncmp+0x8>
 801f204:	1a98      	subs	r0, r3, r2
 801f206:	bd10      	pop	{r4, pc}
 801f208:	4610      	mov	r0, r2
 801f20a:	e7fc      	b.n	801f206 <strncmp+0x1e>

0801f20c <strncpy>:
 801f20c:	b510      	push	{r4, lr}
 801f20e:	3901      	subs	r1, #1
 801f210:	4603      	mov	r3, r0
 801f212:	b132      	cbz	r2, 801f222 <strncpy+0x16>
 801f214:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f218:	f803 4b01 	strb.w	r4, [r3], #1
 801f21c:	3a01      	subs	r2, #1
 801f21e:	2c00      	cmp	r4, #0
 801f220:	d1f7      	bne.n	801f212 <strncpy+0x6>
 801f222:	441a      	add	r2, r3
 801f224:	2100      	movs	r1, #0
 801f226:	4293      	cmp	r3, r2
 801f228:	d100      	bne.n	801f22c <strncpy+0x20>
 801f22a:	bd10      	pop	{r4, pc}
 801f22c:	f803 1b01 	strb.w	r1, [r3], #1
 801f230:	e7f9      	b.n	801f226 <strncpy+0x1a>

0801f232 <sulp>:
 801f232:	b570      	push	{r4, r5, r6, lr}
 801f234:	4604      	mov	r4, r0
 801f236:	460d      	mov	r5, r1
 801f238:	ec45 4b10 	vmov	d0, r4, r5
 801f23c:	4616      	mov	r6, r2
 801f23e:	f002 fd51 	bl	8021ce4 <__ulp>
 801f242:	ec51 0b10 	vmov	r0, r1, d0
 801f246:	b17e      	cbz	r6, 801f268 <sulp+0x36>
 801f248:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801f24c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f250:	2b00      	cmp	r3, #0
 801f252:	dd09      	ble.n	801f268 <sulp+0x36>
 801f254:	051b      	lsls	r3, r3, #20
 801f256:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801f25a:	2400      	movs	r4, #0
 801f25c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801f260:	4622      	mov	r2, r4
 801f262:	462b      	mov	r3, r5
 801f264:	f7e1 f9c8 	bl	80005f8 <__aeabi_dmul>
 801f268:	bd70      	pop	{r4, r5, r6, pc}
 801f26a:	0000      	movs	r0, r0
 801f26c:	0000      	movs	r0, r0
	...

0801f270 <_strtod_l>:
 801f270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f274:	b0a3      	sub	sp, #140	; 0x8c
 801f276:	461f      	mov	r7, r3
 801f278:	2300      	movs	r3, #0
 801f27a:	931e      	str	r3, [sp, #120]	; 0x78
 801f27c:	4ba4      	ldr	r3, [pc, #656]	; (801f510 <_strtod_l+0x2a0>)
 801f27e:	9219      	str	r2, [sp, #100]	; 0x64
 801f280:	681b      	ldr	r3, [r3, #0]
 801f282:	9307      	str	r3, [sp, #28]
 801f284:	4604      	mov	r4, r0
 801f286:	4618      	mov	r0, r3
 801f288:	4688      	mov	r8, r1
 801f28a:	f7e0 ffa1 	bl	80001d0 <strlen>
 801f28e:	f04f 0a00 	mov.w	sl, #0
 801f292:	4605      	mov	r5, r0
 801f294:	f04f 0b00 	mov.w	fp, #0
 801f298:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801f29c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f29e:	781a      	ldrb	r2, [r3, #0]
 801f2a0:	2a2b      	cmp	r2, #43	; 0x2b
 801f2a2:	d04c      	beq.n	801f33e <_strtod_l+0xce>
 801f2a4:	d839      	bhi.n	801f31a <_strtod_l+0xaa>
 801f2a6:	2a0d      	cmp	r2, #13
 801f2a8:	d832      	bhi.n	801f310 <_strtod_l+0xa0>
 801f2aa:	2a08      	cmp	r2, #8
 801f2ac:	d832      	bhi.n	801f314 <_strtod_l+0xa4>
 801f2ae:	2a00      	cmp	r2, #0
 801f2b0:	d03c      	beq.n	801f32c <_strtod_l+0xbc>
 801f2b2:	2300      	movs	r3, #0
 801f2b4:	930e      	str	r3, [sp, #56]	; 0x38
 801f2b6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801f2b8:	7833      	ldrb	r3, [r6, #0]
 801f2ba:	2b30      	cmp	r3, #48	; 0x30
 801f2bc:	f040 80b4 	bne.w	801f428 <_strtod_l+0x1b8>
 801f2c0:	7873      	ldrb	r3, [r6, #1]
 801f2c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f2c6:	2b58      	cmp	r3, #88	; 0x58
 801f2c8:	d16c      	bne.n	801f3a4 <_strtod_l+0x134>
 801f2ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f2cc:	9301      	str	r3, [sp, #4]
 801f2ce:	ab1e      	add	r3, sp, #120	; 0x78
 801f2d0:	9702      	str	r7, [sp, #8]
 801f2d2:	9300      	str	r3, [sp, #0]
 801f2d4:	4a8f      	ldr	r2, [pc, #572]	; (801f514 <_strtod_l+0x2a4>)
 801f2d6:	ab1f      	add	r3, sp, #124	; 0x7c
 801f2d8:	a91d      	add	r1, sp, #116	; 0x74
 801f2da:	4620      	mov	r0, r4
 801f2dc:	f001 fe5a 	bl	8020f94 <__gethex>
 801f2e0:	f010 0707 	ands.w	r7, r0, #7
 801f2e4:	4605      	mov	r5, r0
 801f2e6:	d005      	beq.n	801f2f4 <_strtod_l+0x84>
 801f2e8:	2f06      	cmp	r7, #6
 801f2ea:	d12a      	bne.n	801f342 <_strtod_l+0xd2>
 801f2ec:	3601      	adds	r6, #1
 801f2ee:	2300      	movs	r3, #0
 801f2f0:	961d      	str	r6, [sp, #116]	; 0x74
 801f2f2:	930e      	str	r3, [sp, #56]	; 0x38
 801f2f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f2f6:	2b00      	cmp	r3, #0
 801f2f8:	f040 8596 	bne.w	801fe28 <_strtod_l+0xbb8>
 801f2fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f2fe:	b1db      	cbz	r3, 801f338 <_strtod_l+0xc8>
 801f300:	4652      	mov	r2, sl
 801f302:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801f306:	ec43 2b10 	vmov	d0, r2, r3
 801f30a:	b023      	add	sp, #140	; 0x8c
 801f30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f310:	2a20      	cmp	r2, #32
 801f312:	d1ce      	bne.n	801f2b2 <_strtod_l+0x42>
 801f314:	3301      	adds	r3, #1
 801f316:	931d      	str	r3, [sp, #116]	; 0x74
 801f318:	e7c0      	b.n	801f29c <_strtod_l+0x2c>
 801f31a:	2a2d      	cmp	r2, #45	; 0x2d
 801f31c:	d1c9      	bne.n	801f2b2 <_strtod_l+0x42>
 801f31e:	2201      	movs	r2, #1
 801f320:	920e      	str	r2, [sp, #56]	; 0x38
 801f322:	1c5a      	adds	r2, r3, #1
 801f324:	921d      	str	r2, [sp, #116]	; 0x74
 801f326:	785b      	ldrb	r3, [r3, #1]
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d1c4      	bne.n	801f2b6 <_strtod_l+0x46>
 801f32c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f32e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801f332:	2b00      	cmp	r3, #0
 801f334:	f040 8576 	bne.w	801fe24 <_strtod_l+0xbb4>
 801f338:	4652      	mov	r2, sl
 801f33a:	465b      	mov	r3, fp
 801f33c:	e7e3      	b.n	801f306 <_strtod_l+0x96>
 801f33e:	2200      	movs	r2, #0
 801f340:	e7ee      	b.n	801f320 <_strtod_l+0xb0>
 801f342:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f344:	b13a      	cbz	r2, 801f356 <_strtod_l+0xe6>
 801f346:	2135      	movs	r1, #53	; 0x35
 801f348:	a820      	add	r0, sp, #128	; 0x80
 801f34a:	f002 fdd6 	bl	8021efa <__copybits>
 801f34e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f350:	4620      	mov	r0, r4
 801f352:	f002 f99b 	bl	802168c <_Bfree>
 801f356:	3f01      	subs	r7, #1
 801f358:	2f05      	cmp	r7, #5
 801f35a:	d807      	bhi.n	801f36c <_strtod_l+0xfc>
 801f35c:	e8df f007 	tbb	[pc, r7]
 801f360:	1d180b0e 	.word	0x1d180b0e
 801f364:	030e      	.short	0x030e
 801f366:	f04f 0b00 	mov.w	fp, #0
 801f36a:	46da      	mov	sl, fp
 801f36c:	0728      	lsls	r0, r5, #28
 801f36e:	d5c1      	bpl.n	801f2f4 <_strtod_l+0x84>
 801f370:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801f374:	e7be      	b.n	801f2f4 <_strtod_l+0x84>
 801f376:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801f37a:	e7f7      	b.n	801f36c <_strtod_l+0xfc>
 801f37c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801f380:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f382:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801f386:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801f38a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801f38e:	e7ed      	b.n	801f36c <_strtod_l+0xfc>
 801f390:	f8df b184 	ldr.w	fp, [pc, #388]	; 801f518 <_strtod_l+0x2a8>
 801f394:	f04f 0a00 	mov.w	sl, #0
 801f398:	e7e8      	b.n	801f36c <_strtod_l+0xfc>
 801f39a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801f39e:	f04f 3aff 	mov.w	sl, #4294967295
 801f3a2:	e7e3      	b.n	801f36c <_strtod_l+0xfc>
 801f3a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f3a6:	1c5a      	adds	r2, r3, #1
 801f3a8:	921d      	str	r2, [sp, #116]	; 0x74
 801f3aa:	785b      	ldrb	r3, [r3, #1]
 801f3ac:	2b30      	cmp	r3, #48	; 0x30
 801f3ae:	d0f9      	beq.n	801f3a4 <_strtod_l+0x134>
 801f3b0:	2b00      	cmp	r3, #0
 801f3b2:	d09f      	beq.n	801f2f4 <_strtod_l+0x84>
 801f3b4:	2301      	movs	r3, #1
 801f3b6:	f04f 0900 	mov.w	r9, #0
 801f3ba:	9304      	str	r3, [sp, #16]
 801f3bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f3be:	930a      	str	r3, [sp, #40]	; 0x28
 801f3c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801f3c4:	464f      	mov	r7, r9
 801f3c6:	220a      	movs	r2, #10
 801f3c8:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f3ca:	7806      	ldrb	r6, [r0, #0]
 801f3cc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801f3d0:	b2d9      	uxtb	r1, r3
 801f3d2:	2909      	cmp	r1, #9
 801f3d4:	d92a      	bls.n	801f42c <_strtod_l+0x1bc>
 801f3d6:	9907      	ldr	r1, [sp, #28]
 801f3d8:	462a      	mov	r2, r5
 801f3da:	f7ff ff05 	bl	801f1e8 <strncmp>
 801f3de:	b398      	cbz	r0, 801f448 <_strtod_l+0x1d8>
 801f3e0:	2000      	movs	r0, #0
 801f3e2:	4633      	mov	r3, r6
 801f3e4:	463d      	mov	r5, r7
 801f3e6:	9007      	str	r0, [sp, #28]
 801f3e8:	4602      	mov	r2, r0
 801f3ea:	2b65      	cmp	r3, #101	; 0x65
 801f3ec:	d001      	beq.n	801f3f2 <_strtod_l+0x182>
 801f3ee:	2b45      	cmp	r3, #69	; 0x45
 801f3f0:	d118      	bne.n	801f424 <_strtod_l+0x1b4>
 801f3f2:	b91d      	cbnz	r5, 801f3fc <_strtod_l+0x18c>
 801f3f4:	9b04      	ldr	r3, [sp, #16]
 801f3f6:	4303      	orrs	r3, r0
 801f3f8:	d098      	beq.n	801f32c <_strtod_l+0xbc>
 801f3fa:	2500      	movs	r5, #0
 801f3fc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801f400:	f108 0301 	add.w	r3, r8, #1
 801f404:	931d      	str	r3, [sp, #116]	; 0x74
 801f406:	f898 3001 	ldrb.w	r3, [r8, #1]
 801f40a:	2b2b      	cmp	r3, #43	; 0x2b
 801f40c:	d075      	beq.n	801f4fa <_strtod_l+0x28a>
 801f40e:	2b2d      	cmp	r3, #45	; 0x2d
 801f410:	d07b      	beq.n	801f50a <_strtod_l+0x29a>
 801f412:	f04f 0c00 	mov.w	ip, #0
 801f416:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801f41a:	2909      	cmp	r1, #9
 801f41c:	f240 8082 	bls.w	801f524 <_strtod_l+0x2b4>
 801f420:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801f424:	2600      	movs	r6, #0
 801f426:	e09d      	b.n	801f564 <_strtod_l+0x2f4>
 801f428:	2300      	movs	r3, #0
 801f42a:	e7c4      	b.n	801f3b6 <_strtod_l+0x146>
 801f42c:	2f08      	cmp	r7, #8
 801f42e:	bfd8      	it	le
 801f430:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801f432:	f100 0001 	add.w	r0, r0, #1
 801f436:	bfda      	itte	le
 801f438:	fb02 3301 	mlale	r3, r2, r1, r3
 801f43c:	9309      	strle	r3, [sp, #36]	; 0x24
 801f43e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801f442:	3701      	adds	r7, #1
 801f444:	901d      	str	r0, [sp, #116]	; 0x74
 801f446:	e7bf      	b.n	801f3c8 <_strtod_l+0x158>
 801f448:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f44a:	195a      	adds	r2, r3, r5
 801f44c:	921d      	str	r2, [sp, #116]	; 0x74
 801f44e:	5d5b      	ldrb	r3, [r3, r5]
 801f450:	2f00      	cmp	r7, #0
 801f452:	d037      	beq.n	801f4c4 <_strtod_l+0x254>
 801f454:	9007      	str	r0, [sp, #28]
 801f456:	463d      	mov	r5, r7
 801f458:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801f45c:	2a09      	cmp	r2, #9
 801f45e:	d912      	bls.n	801f486 <_strtod_l+0x216>
 801f460:	2201      	movs	r2, #1
 801f462:	e7c2      	b.n	801f3ea <_strtod_l+0x17a>
 801f464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f466:	1c5a      	adds	r2, r3, #1
 801f468:	921d      	str	r2, [sp, #116]	; 0x74
 801f46a:	785b      	ldrb	r3, [r3, #1]
 801f46c:	3001      	adds	r0, #1
 801f46e:	2b30      	cmp	r3, #48	; 0x30
 801f470:	d0f8      	beq.n	801f464 <_strtod_l+0x1f4>
 801f472:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801f476:	2a08      	cmp	r2, #8
 801f478:	f200 84db 	bhi.w	801fe32 <_strtod_l+0xbc2>
 801f47c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801f47e:	9007      	str	r0, [sp, #28]
 801f480:	2000      	movs	r0, #0
 801f482:	920a      	str	r2, [sp, #40]	; 0x28
 801f484:	4605      	mov	r5, r0
 801f486:	3b30      	subs	r3, #48	; 0x30
 801f488:	f100 0201 	add.w	r2, r0, #1
 801f48c:	d014      	beq.n	801f4b8 <_strtod_l+0x248>
 801f48e:	9907      	ldr	r1, [sp, #28]
 801f490:	4411      	add	r1, r2
 801f492:	9107      	str	r1, [sp, #28]
 801f494:	462a      	mov	r2, r5
 801f496:	eb00 0e05 	add.w	lr, r0, r5
 801f49a:	210a      	movs	r1, #10
 801f49c:	4572      	cmp	r2, lr
 801f49e:	d113      	bne.n	801f4c8 <_strtod_l+0x258>
 801f4a0:	182a      	adds	r2, r5, r0
 801f4a2:	2a08      	cmp	r2, #8
 801f4a4:	f105 0501 	add.w	r5, r5, #1
 801f4a8:	4405      	add	r5, r0
 801f4aa:	dc1c      	bgt.n	801f4e6 <_strtod_l+0x276>
 801f4ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f4ae:	220a      	movs	r2, #10
 801f4b0:	fb02 3301 	mla	r3, r2, r1, r3
 801f4b4:	9309      	str	r3, [sp, #36]	; 0x24
 801f4b6:	2200      	movs	r2, #0
 801f4b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f4ba:	1c59      	adds	r1, r3, #1
 801f4bc:	911d      	str	r1, [sp, #116]	; 0x74
 801f4be:	785b      	ldrb	r3, [r3, #1]
 801f4c0:	4610      	mov	r0, r2
 801f4c2:	e7c9      	b.n	801f458 <_strtod_l+0x1e8>
 801f4c4:	4638      	mov	r0, r7
 801f4c6:	e7d2      	b.n	801f46e <_strtod_l+0x1fe>
 801f4c8:	2a08      	cmp	r2, #8
 801f4ca:	dc04      	bgt.n	801f4d6 <_strtod_l+0x266>
 801f4cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f4ce:	434e      	muls	r6, r1
 801f4d0:	9609      	str	r6, [sp, #36]	; 0x24
 801f4d2:	3201      	adds	r2, #1
 801f4d4:	e7e2      	b.n	801f49c <_strtod_l+0x22c>
 801f4d6:	f102 0c01 	add.w	ip, r2, #1
 801f4da:	f1bc 0f10 	cmp.w	ip, #16
 801f4de:	bfd8      	it	le
 801f4e0:	fb01 f909 	mulle.w	r9, r1, r9
 801f4e4:	e7f5      	b.n	801f4d2 <_strtod_l+0x262>
 801f4e6:	2d10      	cmp	r5, #16
 801f4e8:	bfdc      	itt	le
 801f4ea:	220a      	movle	r2, #10
 801f4ec:	fb02 3909 	mlale	r9, r2, r9, r3
 801f4f0:	e7e1      	b.n	801f4b6 <_strtod_l+0x246>
 801f4f2:	2300      	movs	r3, #0
 801f4f4:	9307      	str	r3, [sp, #28]
 801f4f6:	2201      	movs	r2, #1
 801f4f8:	e77c      	b.n	801f3f4 <_strtod_l+0x184>
 801f4fa:	f04f 0c00 	mov.w	ip, #0
 801f4fe:	f108 0302 	add.w	r3, r8, #2
 801f502:	931d      	str	r3, [sp, #116]	; 0x74
 801f504:	f898 3002 	ldrb.w	r3, [r8, #2]
 801f508:	e785      	b.n	801f416 <_strtod_l+0x1a6>
 801f50a:	f04f 0c01 	mov.w	ip, #1
 801f50e:	e7f6      	b.n	801f4fe <_strtod_l+0x28e>
 801f510:	08026fcc 	.word	0x08026fcc
 801f514:	08026e58 	.word	0x08026e58
 801f518:	7ff00000 	.word	0x7ff00000
 801f51c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f51e:	1c59      	adds	r1, r3, #1
 801f520:	911d      	str	r1, [sp, #116]	; 0x74
 801f522:	785b      	ldrb	r3, [r3, #1]
 801f524:	2b30      	cmp	r3, #48	; 0x30
 801f526:	d0f9      	beq.n	801f51c <_strtod_l+0x2ac>
 801f528:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801f52c:	2908      	cmp	r1, #8
 801f52e:	f63f af79 	bhi.w	801f424 <_strtod_l+0x1b4>
 801f532:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801f536:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f538:	9308      	str	r3, [sp, #32]
 801f53a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f53c:	1c59      	adds	r1, r3, #1
 801f53e:	911d      	str	r1, [sp, #116]	; 0x74
 801f540:	785b      	ldrb	r3, [r3, #1]
 801f542:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801f546:	2e09      	cmp	r6, #9
 801f548:	d937      	bls.n	801f5ba <_strtod_l+0x34a>
 801f54a:	9e08      	ldr	r6, [sp, #32]
 801f54c:	1b89      	subs	r1, r1, r6
 801f54e:	2908      	cmp	r1, #8
 801f550:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801f554:	dc02      	bgt.n	801f55c <_strtod_l+0x2ec>
 801f556:	4576      	cmp	r6, lr
 801f558:	bfa8      	it	ge
 801f55a:	4676      	movge	r6, lr
 801f55c:	f1bc 0f00 	cmp.w	ip, #0
 801f560:	d000      	beq.n	801f564 <_strtod_l+0x2f4>
 801f562:	4276      	negs	r6, r6
 801f564:	2d00      	cmp	r5, #0
 801f566:	d14f      	bne.n	801f608 <_strtod_l+0x398>
 801f568:	9904      	ldr	r1, [sp, #16]
 801f56a:	4301      	orrs	r1, r0
 801f56c:	f47f aec2 	bne.w	801f2f4 <_strtod_l+0x84>
 801f570:	2a00      	cmp	r2, #0
 801f572:	f47f aedb 	bne.w	801f32c <_strtod_l+0xbc>
 801f576:	2b69      	cmp	r3, #105	; 0x69
 801f578:	d027      	beq.n	801f5ca <_strtod_l+0x35a>
 801f57a:	dc24      	bgt.n	801f5c6 <_strtod_l+0x356>
 801f57c:	2b49      	cmp	r3, #73	; 0x49
 801f57e:	d024      	beq.n	801f5ca <_strtod_l+0x35a>
 801f580:	2b4e      	cmp	r3, #78	; 0x4e
 801f582:	f47f aed3 	bne.w	801f32c <_strtod_l+0xbc>
 801f586:	499e      	ldr	r1, [pc, #632]	; (801f800 <_strtod_l+0x590>)
 801f588:	a81d      	add	r0, sp, #116	; 0x74
 801f58a:	f001 ff5b 	bl	8021444 <__match>
 801f58e:	2800      	cmp	r0, #0
 801f590:	f43f aecc 	beq.w	801f32c <_strtod_l+0xbc>
 801f594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f596:	781b      	ldrb	r3, [r3, #0]
 801f598:	2b28      	cmp	r3, #40	; 0x28
 801f59a:	d12d      	bne.n	801f5f8 <_strtod_l+0x388>
 801f59c:	4999      	ldr	r1, [pc, #612]	; (801f804 <_strtod_l+0x594>)
 801f59e:	aa20      	add	r2, sp, #128	; 0x80
 801f5a0:	a81d      	add	r0, sp, #116	; 0x74
 801f5a2:	f001 ff63 	bl	802146c <__hexnan>
 801f5a6:	2805      	cmp	r0, #5
 801f5a8:	d126      	bne.n	801f5f8 <_strtod_l+0x388>
 801f5aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f5ac:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801f5b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801f5b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801f5b8:	e69c      	b.n	801f2f4 <_strtod_l+0x84>
 801f5ba:	210a      	movs	r1, #10
 801f5bc:	fb01 3e0e 	mla	lr, r1, lr, r3
 801f5c0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801f5c4:	e7b9      	b.n	801f53a <_strtod_l+0x2ca>
 801f5c6:	2b6e      	cmp	r3, #110	; 0x6e
 801f5c8:	e7db      	b.n	801f582 <_strtod_l+0x312>
 801f5ca:	498f      	ldr	r1, [pc, #572]	; (801f808 <_strtod_l+0x598>)
 801f5cc:	a81d      	add	r0, sp, #116	; 0x74
 801f5ce:	f001 ff39 	bl	8021444 <__match>
 801f5d2:	2800      	cmp	r0, #0
 801f5d4:	f43f aeaa 	beq.w	801f32c <_strtod_l+0xbc>
 801f5d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f5da:	498c      	ldr	r1, [pc, #560]	; (801f80c <_strtod_l+0x59c>)
 801f5dc:	3b01      	subs	r3, #1
 801f5de:	a81d      	add	r0, sp, #116	; 0x74
 801f5e0:	931d      	str	r3, [sp, #116]	; 0x74
 801f5e2:	f001 ff2f 	bl	8021444 <__match>
 801f5e6:	b910      	cbnz	r0, 801f5ee <_strtod_l+0x37e>
 801f5e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f5ea:	3301      	adds	r3, #1
 801f5ec:	931d      	str	r3, [sp, #116]	; 0x74
 801f5ee:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801f81c <_strtod_l+0x5ac>
 801f5f2:	f04f 0a00 	mov.w	sl, #0
 801f5f6:	e67d      	b.n	801f2f4 <_strtod_l+0x84>
 801f5f8:	4885      	ldr	r0, [pc, #532]	; (801f810 <_strtod_l+0x5a0>)
 801f5fa:	f003 fab9 	bl	8022b70 <nan>
 801f5fe:	ed8d 0b04 	vstr	d0, [sp, #16]
 801f602:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801f606:	e675      	b.n	801f2f4 <_strtod_l+0x84>
 801f608:	9b07      	ldr	r3, [sp, #28]
 801f60a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f60c:	1af3      	subs	r3, r6, r3
 801f60e:	2f00      	cmp	r7, #0
 801f610:	bf08      	it	eq
 801f612:	462f      	moveq	r7, r5
 801f614:	2d10      	cmp	r5, #16
 801f616:	9308      	str	r3, [sp, #32]
 801f618:	46a8      	mov	r8, r5
 801f61a:	bfa8      	it	ge
 801f61c:	f04f 0810 	movge.w	r8, #16
 801f620:	f7e0 ff70 	bl	8000504 <__aeabi_ui2d>
 801f624:	2d09      	cmp	r5, #9
 801f626:	4682      	mov	sl, r0
 801f628:	468b      	mov	fp, r1
 801f62a:	dd13      	ble.n	801f654 <_strtod_l+0x3e4>
 801f62c:	4b79      	ldr	r3, [pc, #484]	; (801f814 <_strtod_l+0x5a4>)
 801f62e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801f632:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801f636:	f7e0 ffdf 	bl	80005f8 <__aeabi_dmul>
 801f63a:	4682      	mov	sl, r0
 801f63c:	4648      	mov	r0, r9
 801f63e:	468b      	mov	fp, r1
 801f640:	f7e0 ff60 	bl	8000504 <__aeabi_ui2d>
 801f644:	4602      	mov	r2, r0
 801f646:	460b      	mov	r3, r1
 801f648:	4650      	mov	r0, sl
 801f64a:	4659      	mov	r1, fp
 801f64c:	f7e0 fe1e 	bl	800028c <__adddf3>
 801f650:	4682      	mov	sl, r0
 801f652:	468b      	mov	fp, r1
 801f654:	2d0f      	cmp	r5, #15
 801f656:	dc38      	bgt.n	801f6ca <_strtod_l+0x45a>
 801f658:	9b08      	ldr	r3, [sp, #32]
 801f65a:	2b00      	cmp	r3, #0
 801f65c:	f43f ae4a 	beq.w	801f2f4 <_strtod_l+0x84>
 801f660:	dd24      	ble.n	801f6ac <_strtod_l+0x43c>
 801f662:	2b16      	cmp	r3, #22
 801f664:	dc0b      	bgt.n	801f67e <_strtod_l+0x40e>
 801f666:	4d6b      	ldr	r5, [pc, #428]	; (801f814 <_strtod_l+0x5a4>)
 801f668:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801f66c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801f670:	4652      	mov	r2, sl
 801f672:	465b      	mov	r3, fp
 801f674:	f7e0 ffc0 	bl	80005f8 <__aeabi_dmul>
 801f678:	4682      	mov	sl, r0
 801f67a:	468b      	mov	fp, r1
 801f67c:	e63a      	b.n	801f2f4 <_strtod_l+0x84>
 801f67e:	9a08      	ldr	r2, [sp, #32]
 801f680:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801f684:	4293      	cmp	r3, r2
 801f686:	db20      	blt.n	801f6ca <_strtod_l+0x45a>
 801f688:	4c62      	ldr	r4, [pc, #392]	; (801f814 <_strtod_l+0x5a4>)
 801f68a:	f1c5 050f 	rsb	r5, r5, #15
 801f68e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801f692:	4652      	mov	r2, sl
 801f694:	465b      	mov	r3, fp
 801f696:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f69a:	f7e0 ffad 	bl	80005f8 <__aeabi_dmul>
 801f69e:	9b08      	ldr	r3, [sp, #32]
 801f6a0:	1b5d      	subs	r5, r3, r5
 801f6a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801f6a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801f6aa:	e7e3      	b.n	801f674 <_strtod_l+0x404>
 801f6ac:	9b08      	ldr	r3, [sp, #32]
 801f6ae:	3316      	adds	r3, #22
 801f6b0:	db0b      	blt.n	801f6ca <_strtod_l+0x45a>
 801f6b2:	9b07      	ldr	r3, [sp, #28]
 801f6b4:	4a57      	ldr	r2, [pc, #348]	; (801f814 <_strtod_l+0x5a4>)
 801f6b6:	1b9e      	subs	r6, r3, r6
 801f6b8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801f6bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f6c0:	4650      	mov	r0, sl
 801f6c2:	4659      	mov	r1, fp
 801f6c4:	f7e1 f8c2 	bl	800084c <__aeabi_ddiv>
 801f6c8:	e7d6      	b.n	801f678 <_strtod_l+0x408>
 801f6ca:	9b08      	ldr	r3, [sp, #32]
 801f6cc:	eba5 0808 	sub.w	r8, r5, r8
 801f6d0:	4498      	add	r8, r3
 801f6d2:	f1b8 0f00 	cmp.w	r8, #0
 801f6d6:	dd71      	ble.n	801f7bc <_strtod_l+0x54c>
 801f6d8:	f018 030f 	ands.w	r3, r8, #15
 801f6dc:	d00a      	beq.n	801f6f4 <_strtod_l+0x484>
 801f6de:	494d      	ldr	r1, [pc, #308]	; (801f814 <_strtod_l+0x5a4>)
 801f6e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801f6e4:	4652      	mov	r2, sl
 801f6e6:	465b      	mov	r3, fp
 801f6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f6ec:	f7e0 ff84 	bl	80005f8 <__aeabi_dmul>
 801f6f0:	4682      	mov	sl, r0
 801f6f2:	468b      	mov	fp, r1
 801f6f4:	f038 080f 	bics.w	r8, r8, #15
 801f6f8:	d04d      	beq.n	801f796 <_strtod_l+0x526>
 801f6fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801f6fe:	dd22      	ble.n	801f746 <_strtod_l+0x4d6>
 801f700:	2500      	movs	r5, #0
 801f702:	462e      	mov	r6, r5
 801f704:	9509      	str	r5, [sp, #36]	; 0x24
 801f706:	9507      	str	r5, [sp, #28]
 801f708:	2322      	movs	r3, #34	; 0x22
 801f70a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801f81c <_strtod_l+0x5ac>
 801f70e:	6023      	str	r3, [r4, #0]
 801f710:	f04f 0a00 	mov.w	sl, #0
 801f714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f716:	2b00      	cmp	r3, #0
 801f718:	f43f adec 	beq.w	801f2f4 <_strtod_l+0x84>
 801f71c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f71e:	4620      	mov	r0, r4
 801f720:	f001 ffb4 	bl	802168c <_Bfree>
 801f724:	9907      	ldr	r1, [sp, #28]
 801f726:	4620      	mov	r0, r4
 801f728:	f001 ffb0 	bl	802168c <_Bfree>
 801f72c:	4631      	mov	r1, r6
 801f72e:	4620      	mov	r0, r4
 801f730:	f001 ffac 	bl	802168c <_Bfree>
 801f734:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f736:	4620      	mov	r0, r4
 801f738:	f001 ffa8 	bl	802168c <_Bfree>
 801f73c:	4629      	mov	r1, r5
 801f73e:	4620      	mov	r0, r4
 801f740:	f001 ffa4 	bl	802168c <_Bfree>
 801f744:	e5d6      	b.n	801f2f4 <_strtod_l+0x84>
 801f746:	2300      	movs	r3, #0
 801f748:	ea4f 1828 	mov.w	r8, r8, asr #4
 801f74c:	4650      	mov	r0, sl
 801f74e:	4659      	mov	r1, fp
 801f750:	4699      	mov	r9, r3
 801f752:	f1b8 0f01 	cmp.w	r8, #1
 801f756:	dc21      	bgt.n	801f79c <_strtod_l+0x52c>
 801f758:	b10b      	cbz	r3, 801f75e <_strtod_l+0x4ee>
 801f75a:	4682      	mov	sl, r0
 801f75c:	468b      	mov	fp, r1
 801f75e:	4b2e      	ldr	r3, [pc, #184]	; (801f818 <_strtod_l+0x5a8>)
 801f760:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801f764:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801f768:	4652      	mov	r2, sl
 801f76a:	465b      	mov	r3, fp
 801f76c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801f770:	f7e0 ff42 	bl	80005f8 <__aeabi_dmul>
 801f774:	4b29      	ldr	r3, [pc, #164]	; (801f81c <_strtod_l+0x5ac>)
 801f776:	460a      	mov	r2, r1
 801f778:	400b      	ands	r3, r1
 801f77a:	4929      	ldr	r1, [pc, #164]	; (801f820 <_strtod_l+0x5b0>)
 801f77c:	428b      	cmp	r3, r1
 801f77e:	4682      	mov	sl, r0
 801f780:	d8be      	bhi.n	801f700 <_strtod_l+0x490>
 801f782:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801f786:	428b      	cmp	r3, r1
 801f788:	bf86      	itte	hi
 801f78a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801f824 <_strtod_l+0x5b4>
 801f78e:	f04f 3aff 	movhi.w	sl, #4294967295
 801f792:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801f796:	2300      	movs	r3, #0
 801f798:	9304      	str	r3, [sp, #16]
 801f79a:	e081      	b.n	801f8a0 <_strtod_l+0x630>
 801f79c:	f018 0f01 	tst.w	r8, #1
 801f7a0:	d007      	beq.n	801f7b2 <_strtod_l+0x542>
 801f7a2:	4b1d      	ldr	r3, [pc, #116]	; (801f818 <_strtod_l+0x5a8>)
 801f7a4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801f7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7ac:	f7e0 ff24 	bl	80005f8 <__aeabi_dmul>
 801f7b0:	2301      	movs	r3, #1
 801f7b2:	f109 0901 	add.w	r9, r9, #1
 801f7b6:	ea4f 0868 	mov.w	r8, r8, asr #1
 801f7ba:	e7ca      	b.n	801f752 <_strtod_l+0x4e2>
 801f7bc:	d0eb      	beq.n	801f796 <_strtod_l+0x526>
 801f7be:	f1c8 0800 	rsb	r8, r8, #0
 801f7c2:	f018 020f 	ands.w	r2, r8, #15
 801f7c6:	d00a      	beq.n	801f7de <_strtod_l+0x56e>
 801f7c8:	4b12      	ldr	r3, [pc, #72]	; (801f814 <_strtod_l+0x5a4>)
 801f7ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f7ce:	4650      	mov	r0, sl
 801f7d0:	4659      	mov	r1, fp
 801f7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7d6:	f7e1 f839 	bl	800084c <__aeabi_ddiv>
 801f7da:	4682      	mov	sl, r0
 801f7dc:	468b      	mov	fp, r1
 801f7de:	ea5f 1828 	movs.w	r8, r8, asr #4
 801f7e2:	d0d8      	beq.n	801f796 <_strtod_l+0x526>
 801f7e4:	f1b8 0f1f 	cmp.w	r8, #31
 801f7e8:	dd1e      	ble.n	801f828 <_strtod_l+0x5b8>
 801f7ea:	2500      	movs	r5, #0
 801f7ec:	462e      	mov	r6, r5
 801f7ee:	9509      	str	r5, [sp, #36]	; 0x24
 801f7f0:	9507      	str	r5, [sp, #28]
 801f7f2:	2322      	movs	r3, #34	; 0x22
 801f7f4:	f04f 0a00 	mov.w	sl, #0
 801f7f8:	f04f 0b00 	mov.w	fp, #0
 801f7fc:	6023      	str	r3, [r4, #0]
 801f7fe:	e789      	b.n	801f714 <_strtod_l+0x4a4>
 801f800:	08026db5 	.word	0x08026db5
 801f804:	08026e6c 	.word	0x08026e6c
 801f808:	08026dad 	.word	0x08026dad
 801f80c:	08026ee7 	.word	0x08026ee7
 801f810:	08026ee3 	.word	0x08026ee3
 801f814:	08027068 	.word	0x08027068
 801f818:	08027040 	.word	0x08027040
 801f81c:	7ff00000 	.word	0x7ff00000
 801f820:	7ca00000 	.word	0x7ca00000
 801f824:	7fefffff 	.word	0x7fefffff
 801f828:	f018 0310 	ands.w	r3, r8, #16
 801f82c:	bf18      	it	ne
 801f82e:	236a      	movne	r3, #106	; 0x6a
 801f830:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801fbe8 <_strtod_l+0x978>
 801f834:	9304      	str	r3, [sp, #16]
 801f836:	4650      	mov	r0, sl
 801f838:	4659      	mov	r1, fp
 801f83a:	2300      	movs	r3, #0
 801f83c:	f018 0f01 	tst.w	r8, #1
 801f840:	d004      	beq.n	801f84c <_strtod_l+0x5dc>
 801f842:	e9d9 2300 	ldrd	r2, r3, [r9]
 801f846:	f7e0 fed7 	bl	80005f8 <__aeabi_dmul>
 801f84a:	2301      	movs	r3, #1
 801f84c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801f850:	f109 0908 	add.w	r9, r9, #8
 801f854:	d1f2      	bne.n	801f83c <_strtod_l+0x5cc>
 801f856:	b10b      	cbz	r3, 801f85c <_strtod_l+0x5ec>
 801f858:	4682      	mov	sl, r0
 801f85a:	468b      	mov	fp, r1
 801f85c:	9b04      	ldr	r3, [sp, #16]
 801f85e:	b1bb      	cbz	r3, 801f890 <_strtod_l+0x620>
 801f860:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801f864:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f868:	2b00      	cmp	r3, #0
 801f86a:	4659      	mov	r1, fp
 801f86c:	dd10      	ble.n	801f890 <_strtod_l+0x620>
 801f86e:	2b1f      	cmp	r3, #31
 801f870:	f340 8128 	ble.w	801fac4 <_strtod_l+0x854>
 801f874:	2b34      	cmp	r3, #52	; 0x34
 801f876:	bfde      	ittt	le
 801f878:	3b20      	suble	r3, #32
 801f87a:	f04f 32ff 	movle.w	r2, #4294967295
 801f87e:	fa02 f303 	lslle.w	r3, r2, r3
 801f882:	f04f 0a00 	mov.w	sl, #0
 801f886:	bfcc      	ite	gt
 801f888:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801f88c:	ea03 0b01 	andle.w	fp, r3, r1
 801f890:	2200      	movs	r2, #0
 801f892:	2300      	movs	r3, #0
 801f894:	4650      	mov	r0, sl
 801f896:	4659      	mov	r1, fp
 801f898:	f7e1 f916 	bl	8000ac8 <__aeabi_dcmpeq>
 801f89c:	2800      	cmp	r0, #0
 801f89e:	d1a4      	bne.n	801f7ea <_strtod_l+0x57a>
 801f8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8a2:	9300      	str	r3, [sp, #0]
 801f8a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f8a6:	462b      	mov	r3, r5
 801f8a8:	463a      	mov	r2, r7
 801f8aa:	4620      	mov	r0, r4
 801f8ac:	f001 ff5a 	bl	8021764 <__s2b>
 801f8b0:	9009      	str	r0, [sp, #36]	; 0x24
 801f8b2:	2800      	cmp	r0, #0
 801f8b4:	f43f af24 	beq.w	801f700 <_strtod_l+0x490>
 801f8b8:	9b07      	ldr	r3, [sp, #28]
 801f8ba:	1b9e      	subs	r6, r3, r6
 801f8bc:	9b08      	ldr	r3, [sp, #32]
 801f8be:	2b00      	cmp	r3, #0
 801f8c0:	bfb4      	ite	lt
 801f8c2:	4633      	movlt	r3, r6
 801f8c4:	2300      	movge	r3, #0
 801f8c6:	9310      	str	r3, [sp, #64]	; 0x40
 801f8c8:	9b08      	ldr	r3, [sp, #32]
 801f8ca:	2500      	movs	r5, #0
 801f8cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f8d0:	9318      	str	r3, [sp, #96]	; 0x60
 801f8d2:	462e      	mov	r6, r5
 801f8d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8d6:	4620      	mov	r0, r4
 801f8d8:	6859      	ldr	r1, [r3, #4]
 801f8da:	f001 fe97 	bl	802160c <_Balloc>
 801f8de:	9007      	str	r0, [sp, #28]
 801f8e0:	2800      	cmp	r0, #0
 801f8e2:	f43f af11 	beq.w	801f708 <_strtod_l+0x498>
 801f8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8e8:	691a      	ldr	r2, [r3, #16]
 801f8ea:	3202      	adds	r2, #2
 801f8ec:	f103 010c 	add.w	r1, r3, #12
 801f8f0:	0092      	lsls	r2, r2, #2
 801f8f2:	300c      	adds	r0, #12
 801f8f4:	f7fe fbae 	bl	801e054 <memcpy>
 801f8f8:	ec4b ab10 	vmov	d0, sl, fp
 801f8fc:	aa20      	add	r2, sp, #128	; 0x80
 801f8fe:	a91f      	add	r1, sp, #124	; 0x7c
 801f900:	4620      	mov	r0, r4
 801f902:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801f906:	f002 fa69 	bl	8021ddc <__d2b>
 801f90a:	901e      	str	r0, [sp, #120]	; 0x78
 801f90c:	2800      	cmp	r0, #0
 801f90e:	f43f aefb 	beq.w	801f708 <_strtod_l+0x498>
 801f912:	2101      	movs	r1, #1
 801f914:	4620      	mov	r0, r4
 801f916:	f001 ffbf 	bl	8021898 <__i2b>
 801f91a:	4606      	mov	r6, r0
 801f91c:	2800      	cmp	r0, #0
 801f91e:	f43f aef3 	beq.w	801f708 <_strtod_l+0x498>
 801f922:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f924:	9904      	ldr	r1, [sp, #16]
 801f926:	2b00      	cmp	r3, #0
 801f928:	bfab      	itete	ge
 801f92a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801f92c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801f92e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801f930:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801f934:	bfac      	ite	ge
 801f936:	eb03 0902 	addge.w	r9, r3, r2
 801f93a:	1ad7      	sublt	r7, r2, r3
 801f93c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f93e:	eba3 0801 	sub.w	r8, r3, r1
 801f942:	4490      	add	r8, r2
 801f944:	4ba3      	ldr	r3, [pc, #652]	; (801fbd4 <_strtod_l+0x964>)
 801f946:	f108 38ff 	add.w	r8, r8, #4294967295
 801f94a:	4598      	cmp	r8, r3
 801f94c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801f950:	f280 80cc 	bge.w	801faec <_strtod_l+0x87c>
 801f954:	eba3 0308 	sub.w	r3, r3, r8
 801f958:	2b1f      	cmp	r3, #31
 801f95a:	eba2 0203 	sub.w	r2, r2, r3
 801f95e:	f04f 0101 	mov.w	r1, #1
 801f962:	f300 80b6 	bgt.w	801fad2 <_strtod_l+0x862>
 801f966:	fa01 f303 	lsl.w	r3, r1, r3
 801f96a:	9311      	str	r3, [sp, #68]	; 0x44
 801f96c:	2300      	movs	r3, #0
 801f96e:	930c      	str	r3, [sp, #48]	; 0x30
 801f970:	eb09 0802 	add.w	r8, r9, r2
 801f974:	9b04      	ldr	r3, [sp, #16]
 801f976:	45c1      	cmp	r9, r8
 801f978:	4417      	add	r7, r2
 801f97a:	441f      	add	r7, r3
 801f97c:	464b      	mov	r3, r9
 801f97e:	bfa8      	it	ge
 801f980:	4643      	movge	r3, r8
 801f982:	42bb      	cmp	r3, r7
 801f984:	bfa8      	it	ge
 801f986:	463b      	movge	r3, r7
 801f988:	2b00      	cmp	r3, #0
 801f98a:	bfc2      	ittt	gt
 801f98c:	eba8 0803 	subgt.w	r8, r8, r3
 801f990:	1aff      	subgt	r7, r7, r3
 801f992:	eba9 0903 	subgt.w	r9, r9, r3
 801f996:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f998:	2b00      	cmp	r3, #0
 801f99a:	dd17      	ble.n	801f9cc <_strtod_l+0x75c>
 801f99c:	4631      	mov	r1, r6
 801f99e:	461a      	mov	r2, r3
 801f9a0:	4620      	mov	r0, r4
 801f9a2:	f002 f835 	bl	8021a10 <__pow5mult>
 801f9a6:	4606      	mov	r6, r0
 801f9a8:	2800      	cmp	r0, #0
 801f9aa:	f43f aead 	beq.w	801f708 <_strtod_l+0x498>
 801f9ae:	4601      	mov	r1, r0
 801f9b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f9b2:	4620      	mov	r0, r4
 801f9b4:	f001 ff86 	bl	80218c4 <__multiply>
 801f9b8:	900f      	str	r0, [sp, #60]	; 0x3c
 801f9ba:	2800      	cmp	r0, #0
 801f9bc:	f43f aea4 	beq.w	801f708 <_strtod_l+0x498>
 801f9c0:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f9c2:	4620      	mov	r0, r4
 801f9c4:	f001 fe62 	bl	802168c <_Bfree>
 801f9c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f9ca:	931e      	str	r3, [sp, #120]	; 0x78
 801f9cc:	f1b8 0f00 	cmp.w	r8, #0
 801f9d0:	f300 8091 	bgt.w	801faf6 <_strtod_l+0x886>
 801f9d4:	9b08      	ldr	r3, [sp, #32]
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	dd08      	ble.n	801f9ec <_strtod_l+0x77c>
 801f9da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f9dc:	9907      	ldr	r1, [sp, #28]
 801f9de:	4620      	mov	r0, r4
 801f9e0:	f002 f816 	bl	8021a10 <__pow5mult>
 801f9e4:	9007      	str	r0, [sp, #28]
 801f9e6:	2800      	cmp	r0, #0
 801f9e8:	f43f ae8e 	beq.w	801f708 <_strtod_l+0x498>
 801f9ec:	2f00      	cmp	r7, #0
 801f9ee:	dd08      	ble.n	801fa02 <_strtod_l+0x792>
 801f9f0:	9907      	ldr	r1, [sp, #28]
 801f9f2:	463a      	mov	r2, r7
 801f9f4:	4620      	mov	r0, r4
 801f9f6:	f002 f865 	bl	8021ac4 <__lshift>
 801f9fa:	9007      	str	r0, [sp, #28]
 801f9fc:	2800      	cmp	r0, #0
 801f9fe:	f43f ae83 	beq.w	801f708 <_strtod_l+0x498>
 801fa02:	f1b9 0f00 	cmp.w	r9, #0
 801fa06:	dd08      	ble.n	801fa1a <_strtod_l+0x7aa>
 801fa08:	4631      	mov	r1, r6
 801fa0a:	464a      	mov	r2, r9
 801fa0c:	4620      	mov	r0, r4
 801fa0e:	f002 f859 	bl	8021ac4 <__lshift>
 801fa12:	4606      	mov	r6, r0
 801fa14:	2800      	cmp	r0, #0
 801fa16:	f43f ae77 	beq.w	801f708 <_strtod_l+0x498>
 801fa1a:	9a07      	ldr	r2, [sp, #28]
 801fa1c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fa1e:	4620      	mov	r0, r4
 801fa20:	f002 f8d8 	bl	8021bd4 <__mdiff>
 801fa24:	4605      	mov	r5, r0
 801fa26:	2800      	cmp	r0, #0
 801fa28:	f43f ae6e 	beq.w	801f708 <_strtod_l+0x498>
 801fa2c:	68c3      	ldr	r3, [r0, #12]
 801fa2e:	930f      	str	r3, [sp, #60]	; 0x3c
 801fa30:	2300      	movs	r3, #0
 801fa32:	60c3      	str	r3, [r0, #12]
 801fa34:	4631      	mov	r1, r6
 801fa36:	f002 f8b1 	bl	8021b9c <__mcmp>
 801fa3a:	2800      	cmp	r0, #0
 801fa3c:	da65      	bge.n	801fb0a <_strtod_l+0x89a>
 801fa3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fa40:	ea53 030a 	orrs.w	r3, r3, sl
 801fa44:	f040 8087 	bne.w	801fb56 <_strtod_l+0x8e6>
 801fa48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fa4c:	2b00      	cmp	r3, #0
 801fa4e:	f040 8082 	bne.w	801fb56 <_strtod_l+0x8e6>
 801fa52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801fa56:	0d1b      	lsrs	r3, r3, #20
 801fa58:	051b      	lsls	r3, r3, #20
 801fa5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801fa5e:	d97a      	bls.n	801fb56 <_strtod_l+0x8e6>
 801fa60:	696b      	ldr	r3, [r5, #20]
 801fa62:	b913      	cbnz	r3, 801fa6a <_strtod_l+0x7fa>
 801fa64:	692b      	ldr	r3, [r5, #16]
 801fa66:	2b01      	cmp	r3, #1
 801fa68:	dd75      	ble.n	801fb56 <_strtod_l+0x8e6>
 801fa6a:	4629      	mov	r1, r5
 801fa6c:	2201      	movs	r2, #1
 801fa6e:	4620      	mov	r0, r4
 801fa70:	f002 f828 	bl	8021ac4 <__lshift>
 801fa74:	4631      	mov	r1, r6
 801fa76:	4605      	mov	r5, r0
 801fa78:	f002 f890 	bl	8021b9c <__mcmp>
 801fa7c:	2800      	cmp	r0, #0
 801fa7e:	dd6a      	ble.n	801fb56 <_strtod_l+0x8e6>
 801fa80:	9904      	ldr	r1, [sp, #16]
 801fa82:	4a55      	ldr	r2, [pc, #340]	; (801fbd8 <_strtod_l+0x968>)
 801fa84:	465b      	mov	r3, fp
 801fa86:	2900      	cmp	r1, #0
 801fa88:	f000 8085 	beq.w	801fb96 <_strtod_l+0x926>
 801fa8c:	ea02 010b 	and.w	r1, r2, fp
 801fa90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801fa94:	dc7f      	bgt.n	801fb96 <_strtod_l+0x926>
 801fa96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801fa9a:	f77f aeaa 	ble.w	801f7f2 <_strtod_l+0x582>
 801fa9e:	4a4f      	ldr	r2, [pc, #316]	; (801fbdc <_strtod_l+0x96c>)
 801faa0:	2300      	movs	r3, #0
 801faa2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801faa6:	4650      	mov	r0, sl
 801faa8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801faac:	4659      	mov	r1, fp
 801faae:	f7e0 fda3 	bl	80005f8 <__aeabi_dmul>
 801fab2:	460b      	mov	r3, r1
 801fab4:	4303      	orrs	r3, r0
 801fab6:	bf08      	it	eq
 801fab8:	2322      	moveq	r3, #34	; 0x22
 801faba:	4682      	mov	sl, r0
 801fabc:	468b      	mov	fp, r1
 801fabe:	bf08      	it	eq
 801fac0:	6023      	streq	r3, [r4, #0]
 801fac2:	e62b      	b.n	801f71c <_strtod_l+0x4ac>
 801fac4:	f04f 32ff 	mov.w	r2, #4294967295
 801fac8:	fa02 f303 	lsl.w	r3, r2, r3
 801facc:	ea03 0a0a 	and.w	sl, r3, sl
 801fad0:	e6de      	b.n	801f890 <_strtod_l+0x620>
 801fad2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801fad6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801fada:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801fade:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801fae2:	fa01 f308 	lsl.w	r3, r1, r8
 801fae6:	930c      	str	r3, [sp, #48]	; 0x30
 801fae8:	9111      	str	r1, [sp, #68]	; 0x44
 801faea:	e741      	b.n	801f970 <_strtod_l+0x700>
 801faec:	2300      	movs	r3, #0
 801faee:	930c      	str	r3, [sp, #48]	; 0x30
 801faf0:	2301      	movs	r3, #1
 801faf2:	9311      	str	r3, [sp, #68]	; 0x44
 801faf4:	e73c      	b.n	801f970 <_strtod_l+0x700>
 801faf6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801faf8:	4642      	mov	r2, r8
 801fafa:	4620      	mov	r0, r4
 801fafc:	f001 ffe2 	bl	8021ac4 <__lshift>
 801fb00:	901e      	str	r0, [sp, #120]	; 0x78
 801fb02:	2800      	cmp	r0, #0
 801fb04:	f47f af66 	bne.w	801f9d4 <_strtod_l+0x764>
 801fb08:	e5fe      	b.n	801f708 <_strtod_l+0x498>
 801fb0a:	465f      	mov	r7, fp
 801fb0c:	d16e      	bne.n	801fbec <_strtod_l+0x97c>
 801fb0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fb10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fb14:	b342      	cbz	r2, 801fb68 <_strtod_l+0x8f8>
 801fb16:	4a32      	ldr	r2, [pc, #200]	; (801fbe0 <_strtod_l+0x970>)
 801fb18:	4293      	cmp	r3, r2
 801fb1a:	d128      	bne.n	801fb6e <_strtod_l+0x8fe>
 801fb1c:	9b04      	ldr	r3, [sp, #16]
 801fb1e:	4650      	mov	r0, sl
 801fb20:	b1eb      	cbz	r3, 801fb5e <_strtod_l+0x8ee>
 801fb22:	4a2d      	ldr	r2, [pc, #180]	; (801fbd8 <_strtod_l+0x968>)
 801fb24:	403a      	ands	r2, r7
 801fb26:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801fb2a:	f04f 31ff 	mov.w	r1, #4294967295
 801fb2e:	d819      	bhi.n	801fb64 <_strtod_l+0x8f4>
 801fb30:	0d12      	lsrs	r2, r2, #20
 801fb32:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801fb36:	fa01 f303 	lsl.w	r3, r1, r3
 801fb3a:	4298      	cmp	r0, r3
 801fb3c:	d117      	bne.n	801fb6e <_strtod_l+0x8fe>
 801fb3e:	4b29      	ldr	r3, [pc, #164]	; (801fbe4 <_strtod_l+0x974>)
 801fb40:	429f      	cmp	r7, r3
 801fb42:	d102      	bne.n	801fb4a <_strtod_l+0x8da>
 801fb44:	3001      	adds	r0, #1
 801fb46:	f43f addf 	beq.w	801f708 <_strtod_l+0x498>
 801fb4a:	4b23      	ldr	r3, [pc, #140]	; (801fbd8 <_strtod_l+0x968>)
 801fb4c:	403b      	ands	r3, r7
 801fb4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801fb52:	f04f 0a00 	mov.w	sl, #0
 801fb56:	9b04      	ldr	r3, [sp, #16]
 801fb58:	2b00      	cmp	r3, #0
 801fb5a:	d1a0      	bne.n	801fa9e <_strtod_l+0x82e>
 801fb5c:	e5de      	b.n	801f71c <_strtod_l+0x4ac>
 801fb5e:	f04f 33ff 	mov.w	r3, #4294967295
 801fb62:	e7ea      	b.n	801fb3a <_strtod_l+0x8ca>
 801fb64:	460b      	mov	r3, r1
 801fb66:	e7e8      	b.n	801fb3a <_strtod_l+0x8ca>
 801fb68:	ea53 030a 	orrs.w	r3, r3, sl
 801fb6c:	d088      	beq.n	801fa80 <_strtod_l+0x810>
 801fb6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fb70:	b1db      	cbz	r3, 801fbaa <_strtod_l+0x93a>
 801fb72:	423b      	tst	r3, r7
 801fb74:	d0ef      	beq.n	801fb56 <_strtod_l+0x8e6>
 801fb76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fb78:	9a04      	ldr	r2, [sp, #16]
 801fb7a:	4650      	mov	r0, sl
 801fb7c:	4659      	mov	r1, fp
 801fb7e:	b1c3      	cbz	r3, 801fbb2 <_strtod_l+0x942>
 801fb80:	f7ff fb57 	bl	801f232 <sulp>
 801fb84:	4602      	mov	r2, r0
 801fb86:	460b      	mov	r3, r1
 801fb88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801fb8c:	f7e0 fb7e 	bl	800028c <__adddf3>
 801fb90:	4682      	mov	sl, r0
 801fb92:	468b      	mov	fp, r1
 801fb94:	e7df      	b.n	801fb56 <_strtod_l+0x8e6>
 801fb96:	4013      	ands	r3, r2
 801fb98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801fb9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801fba0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801fba4:	f04f 3aff 	mov.w	sl, #4294967295
 801fba8:	e7d5      	b.n	801fb56 <_strtod_l+0x8e6>
 801fbaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fbac:	ea13 0f0a 	tst.w	r3, sl
 801fbb0:	e7e0      	b.n	801fb74 <_strtod_l+0x904>
 801fbb2:	f7ff fb3e 	bl	801f232 <sulp>
 801fbb6:	4602      	mov	r2, r0
 801fbb8:	460b      	mov	r3, r1
 801fbba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801fbbe:	f7e0 fb63 	bl	8000288 <__aeabi_dsub>
 801fbc2:	2200      	movs	r2, #0
 801fbc4:	2300      	movs	r3, #0
 801fbc6:	4682      	mov	sl, r0
 801fbc8:	468b      	mov	fp, r1
 801fbca:	f7e0 ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 801fbce:	2800      	cmp	r0, #0
 801fbd0:	d0c1      	beq.n	801fb56 <_strtod_l+0x8e6>
 801fbd2:	e60e      	b.n	801f7f2 <_strtod_l+0x582>
 801fbd4:	fffffc02 	.word	0xfffffc02
 801fbd8:	7ff00000 	.word	0x7ff00000
 801fbdc:	39500000 	.word	0x39500000
 801fbe0:	000fffff 	.word	0x000fffff
 801fbe4:	7fefffff 	.word	0x7fefffff
 801fbe8:	08026e80 	.word	0x08026e80
 801fbec:	4631      	mov	r1, r6
 801fbee:	4628      	mov	r0, r5
 801fbf0:	f002 f950 	bl	8021e94 <__ratio>
 801fbf4:	ec59 8b10 	vmov	r8, r9, d0
 801fbf8:	ee10 0a10 	vmov	r0, s0
 801fbfc:	2200      	movs	r2, #0
 801fbfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801fc02:	4649      	mov	r1, r9
 801fc04:	f7e0 ff74 	bl	8000af0 <__aeabi_dcmple>
 801fc08:	2800      	cmp	r0, #0
 801fc0a:	d07c      	beq.n	801fd06 <_strtod_l+0xa96>
 801fc0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fc0e:	2b00      	cmp	r3, #0
 801fc10:	d04c      	beq.n	801fcac <_strtod_l+0xa3c>
 801fc12:	4b95      	ldr	r3, [pc, #596]	; (801fe68 <_strtod_l+0xbf8>)
 801fc14:	2200      	movs	r2, #0
 801fc16:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801fc1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801fe68 <_strtod_l+0xbf8>
 801fc1e:	f04f 0800 	mov.w	r8, #0
 801fc22:	4b92      	ldr	r3, [pc, #584]	; (801fe6c <_strtod_l+0xbfc>)
 801fc24:	403b      	ands	r3, r7
 801fc26:	9311      	str	r3, [sp, #68]	; 0x44
 801fc28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fc2a:	4b91      	ldr	r3, [pc, #580]	; (801fe70 <_strtod_l+0xc00>)
 801fc2c:	429a      	cmp	r2, r3
 801fc2e:	f040 80b2 	bne.w	801fd96 <_strtod_l+0xb26>
 801fc32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801fc36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801fc3a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801fc3e:	ec4b ab10 	vmov	d0, sl, fp
 801fc42:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801fc46:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801fc4a:	f002 f84b 	bl	8021ce4 <__ulp>
 801fc4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801fc52:	ec53 2b10 	vmov	r2, r3, d0
 801fc56:	f7e0 fccf 	bl	80005f8 <__aeabi_dmul>
 801fc5a:	4652      	mov	r2, sl
 801fc5c:	465b      	mov	r3, fp
 801fc5e:	f7e0 fb15 	bl	800028c <__adddf3>
 801fc62:	460b      	mov	r3, r1
 801fc64:	4981      	ldr	r1, [pc, #516]	; (801fe6c <_strtod_l+0xbfc>)
 801fc66:	4a83      	ldr	r2, [pc, #524]	; (801fe74 <_strtod_l+0xc04>)
 801fc68:	4019      	ands	r1, r3
 801fc6a:	4291      	cmp	r1, r2
 801fc6c:	4682      	mov	sl, r0
 801fc6e:	d95e      	bls.n	801fd2e <_strtod_l+0xabe>
 801fc70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc72:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801fc76:	4293      	cmp	r3, r2
 801fc78:	d103      	bne.n	801fc82 <_strtod_l+0xa12>
 801fc7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fc7c:	3301      	adds	r3, #1
 801fc7e:	f43f ad43 	beq.w	801f708 <_strtod_l+0x498>
 801fc82:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801fe80 <_strtod_l+0xc10>
 801fc86:	f04f 3aff 	mov.w	sl, #4294967295
 801fc8a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fc8c:	4620      	mov	r0, r4
 801fc8e:	f001 fcfd 	bl	802168c <_Bfree>
 801fc92:	9907      	ldr	r1, [sp, #28]
 801fc94:	4620      	mov	r0, r4
 801fc96:	f001 fcf9 	bl	802168c <_Bfree>
 801fc9a:	4631      	mov	r1, r6
 801fc9c:	4620      	mov	r0, r4
 801fc9e:	f001 fcf5 	bl	802168c <_Bfree>
 801fca2:	4629      	mov	r1, r5
 801fca4:	4620      	mov	r0, r4
 801fca6:	f001 fcf1 	bl	802168c <_Bfree>
 801fcaa:	e613      	b.n	801f8d4 <_strtod_l+0x664>
 801fcac:	f1ba 0f00 	cmp.w	sl, #0
 801fcb0:	d11b      	bne.n	801fcea <_strtod_l+0xa7a>
 801fcb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fcb6:	b9f3      	cbnz	r3, 801fcf6 <_strtod_l+0xa86>
 801fcb8:	4b6b      	ldr	r3, [pc, #428]	; (801fe68 <_strtod_l+0xbf8>)
 801fcba:	2200      	movs	r2, #0
 801fcbc:	4640      	mov	r0, r8
 801fcbe:	4649      	mov	r1, r9
 801fcc0:	f7e0 ff0c 	bl	8000adc <__aeabi_dcmplt>
 801fcc4:	b9d0      	cbnz	r0, 801fcfc <_strtod_l+0xa8c>
 801fcc6:	4640      	mov	r0, r8
 801fcc8:	4649      	mov	r1, r9
 801fcca:	4b6b      	ldr	r3, [pc, #428]	; (801fe78 <_strtod_l+0xc08>)
 801fccc:	2200      	movs	r2, #0
 801fcce:	f7e0 fc93 	bl	80005f8 <__aeabi_dmul>
 801fcd2:	4680      	mov	r8, r0
 801fcd4:	4689      	mov	r9, r1
 801fcd6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801fcda:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801fcde:	931b      	str	r3, [sp, #108]	; 0x6c
 801fce0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801fce4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801fce8:	e79b      	b.n	801fc22 <_strtod_l+0x9b2>
 801fcea:	f1ba 0f01 	cmp.w	sl, #1
 801fcee:	d102      	bne.n	801fcf6 <_strtod_l+0xa86>
 801fcf0:	2f00      	cmp	r7, #0
 801fcf2:	f43f ad7e 	beq.w	801f7f2 <_strtod_l+0x582>
 801fcf6:	4b61      	ldr	r3, [pc, #388]	; (801fe7c <_strtod_l+0xc0c>)
 801fcf8:	2200      	movs	r2, #0
 801fcfa:	e78c      	b.n	801fc16 <_strtod_l+0x9a6>
 801fcfc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801fe78 <_strtod_l+0xc08>
 801fd00:	f04f 0800 	mov.w	r8, #0
 801fd04:	e7e7      	b.n	801fcd6 <_strtod_l+0xa66>
 801fd06:	4b5c      	ldr	r3, [pc, #368]	; (801fe78 <_strtod_l+0xc08>)
 801fd08:	4640      	mov	r0, r8
 801fd0a:	4649      	mov	r1, r9
 801fd0c:	2200      	movs	r2, #0
 801fd0e:	f7e0 fc73 	bl	80005f8 <__aeabi_dmul>
 801fd12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fd14:	4680      	mov	r8, r0
 801fd16:	4689      	mov	r9, r1
 801fd18:	b933      	cbnz	r3, 801fd28 <_strtod_l+0xab8>
 801fd1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801fd1e:	9012      	str	r0, [sp, #72]	; 0x48
 801fd20:	9313      	str	r3, [sp, #76]	; 0x4c
 801fd22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801fd26:	e7dd      	b.n	801fce4 <_strtod_l+0xa74>
 801fd28:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801fd2c:	e7f9      	b.n	801fd22 <_strtod_l+0xab2>
 801fd2e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801fd32:	9b04      	ldr	r3, [sp, #16]
 801fd34:	2b00      	cmp	r3, #0
 801fd36:	d1a8      	bne.n	801fc8a <_strtod_l+0xa1a>
 801fd38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801fd3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd3e:	0d1b      	lsrs	r3, r3, #20
 801fd40:	051b      	lsls	r3, r3, #20
 801fd42:	429a      	cmp	r2, r3
 801fd44:	d1a1      	bne.n	801fc8a <_strtod_l+0xa1a>
 801fd46:	4640      	mov	r0, r8
 801fd48:	4649      	mov	r1, r9
 801fd4a:	f7e0 ffb5 	bl	8000cb8 <__aeabi_d2lz>
 801fd4e:	f7e0 fc25 	bl	800059c <__aeabi_l2d>
 801fd52:	4602      	mov	r2, r0
 801fd54:	460b      	mov	r3, r1
 801fd56:	4640      	mov	r0, r8
 801fd58:	4649      	mov	r1, r9
 801fd5a:	f7e0 fa95 	bl	8000288 <__aeabi_dsub>
 801fd5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fd60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fd64:	ea43 030a 	orr.w	r3, r3, sl
 801fd68:	4313      	orrs	r3, r2
 801fd6a:	4680      	mov	r8, r0
 801fd6c:	4689      	mov	r9, r1
 801fd6e:	d053      	beq.n	801fe18 <_strtod_l+0xba8>
 801fd70:	a335      	add	r3, pc, #212	; (adr r3, 801fe48 <_strtod_l+0xbd8>)
 801fd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd76:	f7e0 feb1 	bl	8000adc <__aeabi_dcmplt>
 801fd7a:	2800      	cmp	r0, #0
 801fd7c:	f47f acce 	bne.w	801f71c <_strtod_l+0x4ac>
 801fd80:	a333      	add	r3, pc, #204	; (adr r3, 801fe50 <_strtod_l+0xbe0>)
 801fd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd86:	4640      	mov	r0, r8
 801fd88:	4649      	mov	r1, r9
 801fd8a:	f7e0 fec5 	bl	8000b18 <__aeabi_dcmpgt>
 801fd8e:	2800      	cmp	r0, #0
 801fd90:	f43f af7b 	beq.w	801fc8a <_strtod_l+0xa1a>
 801fd94:	e4c2      	b.n	801f71c <_strtod_l+0x4ac>
 801fd96:	9b04      	ldr	r3, [sp, #16]
 801fd98:	b333      	cbz	r3, 801fde8 <_strtod_l+0xb78>
 801fd9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fd9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801fda0:	d822      	bhi.n	801fde8 <_strtod_l+0xb78>
 801fda2:	a32d      	add	r3, pc, #180	; (adr r3, 801fe58 <_strtod_l+0xbe8>)
 801fda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fda8:	4640      	mov	r0, r8
 801fdaa:	4649      	mov	r1, r9
 801fdac:	f7e0 fea0 	bl	8000af0 <__aeabi_dcmple>
 801fdb0:	b1a0      	cbz	r0, 801fddc <_strtod_l+0xb6c>
 801fdb2:	4649      	mov	r1, r9
 801fdb4:	4640      	mov	r0, r8
 801fdb6:	f7e0 fef7 	bl	8000ba8 <__aeabi_d2uiz>
 801fdba:	2801      	cmp	r0, #1
 801fdbc:	bf38      	it	cc
 801fdbe:	2001      	movcc	r0, #1
 801fdc0:	f7e0 fba0 	bl	8000504 <__aeabi_ui2d>
 801fdc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fdc6:	4680      	mov	r8, r0
 801fdc8:	4689      	mov	r9, r1
 801fdca:	bb13      	cbnz	r3, 801fe12 <_strtod_l+0xba2>
 801fdcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801fdd0:	9014      	str	r0, [sp, #80]	; 0x50
 801fdd2:	9315      	str	r3, [sp, #84]	; 0x54
 801fdd4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801fdd8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801fddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fdde:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fde0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801fde4:	1a9b      	subs	r3, r3, r2
 801fde6:	930d      	str	r3, [sp, #52]	; 0x34
 801fde8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801fdec:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801fdf0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801fdf4:	f001 ff76 	bl	8021ce4 <__ulp>
 801fdf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801fdfc:	ec53 2b10 	vmov	r2, r3, d0
 801fe00:	f7e0 fbfa 	bl	80005f8 <__aeabi_dmul>
 801fe04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801fe08:	f7e0 fa40 	bl	800028c <__adddf3>
 801fe0c:	4682      	mov	sl, r0
 801fe0e:	468b      	mov	fp, r1
 801fe10:	e78f      	b.n	801fd32 <_strtod_l+0xac2>
 801fe12:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801fe16:	e7dd      	b.n	801fdd4 <_strtod_l+0xb64>
 801fe18:	a311      	add	r3, pc, #68	; (adr r3, 801fe60 <_strtod_l+0xbf0>)
 801fe1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe1e:	f7e0 fe5d 	bl	8000adc <__aeabi_dcmplt>
 801fe22:	e7b4      	b.n	801fd8e <_strtod_l+0xb1e>
 801fe24:	2300      	movs	r3, #0
 801fe26:	930e      	str	r3, [sp, #56]	; 0x38
 801fe28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801fe2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fe2c:	6013      	str	r3, [r2, #0]
 801fe2e:	f7ff ba65 	b.w	801f2fc <_strtod_l+0x8c>
 801fe32:	2b65      	cmp	r3, #101	; 0x65
 801fe34:	f43f ab5d 	beq.w	801f4f2 <_strtod_l+0x282>
 801fe38:	2b45      	cmp	r3, #69	; 0x45
 801fe3a:	f43f ab5a 	beq.w	801f4f2 <_strtod_l+0x282>
 801fe3e:	2201      	movs	r2, #1
 801fe40:	f7ff bb92 	b.w	801f568 <_strtod_l+0x2f8>
 801fe44:	f3af 8000 	nop.w
 801fe48:	94a03595 	.word	0x94a03595
 801fe4c:	3fdfffff 	.word	0x3fdfffff
 801fe50:	35afe535 	.word	0x35afe535
 801fe54:	3fe00000 	.word	0x3fe00000
 801fe58:	ffc00000 	.word	0xffc00000
 801fe5c:	41dfffff 	.word	0x41dfffff
 801fe60:	94a03595 	.word	0x94a03595
 801fe64:	3fcfffff 	.word	0x3fcfffff
 801fe68:	3ff00000 	.word	0x3ff00000
 801fe6c:	7ff00000 	.word	0x7ff00000
 801fe70:	7fe00000 	.word	0x7fe00000
 801fe74:	7c9fffff 	.word	0x7c9fffff
 801fe78:	3fe00000 	.word	0x3fe00000
 801fe7c:	bff00000 	.word	0xbff00000
 801fe80:	7fefffff 	.word	0x7fefffff

0801fe84 <_strtod_r>:
 801fe84:	4b01      	ldr	r3, [pc, #4]	; (801fe8c <_strtod_r+0x8>)
 801fe86:	f7ff b9f3 	b.w	801f270 <_strtod_l>
 801fe8a:	bf00      	nop
 801fe8c:	200003c8 	.word	0x200003c8

0801fe90 <_strtol_l.isra.0>:
 801fe90:	2b01      	cmp	r3, #1
 801fe92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fe96:	d001      	beq.n	801fe9c <_strtol_l.isra.0+0xc>
 801fe98:	2b24      	cmp	r3, #36	; 0x24
 801fe9a:	d906      	bls.n	801feaa <_strtol_l.isra.0+0x1a>
 801fe9c:	f000 ff38 	bl	8020d10 <__errno>
 801fea0:	2316      	movs	r3, #22
 801fea2:	6003      	str	r3, [r0, #0]
 801fea4:	2000      	movs	r0, #0
 801fea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801feaa:	4f3a      	ldr	r7, [pc, #232]	; (801ff94 <_strtol_l.isra.0+0x104>)
 801feac:	468e      	mov	lr, r1
 801feae:	4676      	mov	r6, lr
 801feb0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801feb4:	5de5      	ldrb	r5, [r4, r7]
 801feb6:	f015 0508 	ands.w	r5, r5, #8
 801feba:	d1f8      	bne.n	801feae <_strtol_l.isra.0+0x1e>
 801febc:	2c2d      	cmp	r4, #45	; 0x2d
 801febe:	d134      	bne.n	801ff2a <_strtol_l.isra.0+0x9a>
 801fec0:	f89e 4000 	ldrb.w	r4, [lr]
 801fec4:	f04f 0801 	mov.w	r8, #1
 801fec8:	f106 0e02 	add.w	lr, r6, #2
 801fecc:	2b00      	cmp	r3, #0
 801fece:	d05c      	beq.n	801ff8a <_strtol_l.isra.0+0xfa>
 801fed0:	2b10      	cmp	r3, #16
 801fed2:	d10c      	bne.n	801feee <_strtol_l.isra.0+0x5e>
 801fed4:	2c30      	cmp	r4, #48	; 0x30
 801fed6:	d10a      	bne.n	801feee <_strtol_l.isra.0+0x5e>
 801fed8:	f89e 4000 	ldrb.w	r4, [lr]
 801fedc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801fee0:	2c58      	cmp	r4, #88	; 0x58
 801fee2:	d14d      	bne.n	801ff80 <_strtol_l.isra.0+0xf0>
 801fee4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801fee8:	2310      	movs	r3, #16
 801feea:	f10e 0e02 	add.w	lr, lr, #2
 801feee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801fef2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fef6:	2600      	movs	r6, #0
 801fef8:	fbbc f9f3 	udiv	r9, ip, r3
 801fefc:	4635      	mov	r5, r6
 801fefe:	fb03 ca19 	mls	sl, r3, r9, ip
 801ff02:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801ff06:	2f09      	cmp	r7, #9
 801ff08:	d818      	bhi.n	801ff3c <_strtol_l.isra.0+0xac>
 801ff0a:	463c      	mov	r4, r7
 801ff0c:	42a3      	cmp	r3, r4
 801ff0e:	dd24      	ble.n	801ff5a <_strtol_l.isra.0+0xca>
 801ff10:	2e00      	cmp	r6, #0
 801ff12:	db1f      	blt.n	801ff54 <_strtol_l.isra.0+0xc4>
 801ff14:	45a9      	cmp	r9, r5
 801ff16:	d31d      	bcc.n	801ff54 <_strtol_l.isra.0+0xc4>
 801ff18:	d101      	bne.n	801ff1e <_strtol_l.isra.0+0x8e>
 801ff1a:	45a2      	cmp	sl, r4
 801ff1c:	db1a      	blt.n	801ff54 <_strtol_l.isra.0+0xc4>
 801ff1e:	fb05 4503 	mla	r5, r5, r3, r4
 801ff22:	2601      	movs	r6, #1
 801ff24:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ff28:	e7eb      	b.n	801ff02 <_strtol_l.isra.0+0x72>
 801ff2a:	2c2b      	cmp	r4, #43	; 0x2b
 801ff2c:	bf08      	it	eq
 801ff2e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801ff32:	46a8      	mov	r8, r5
 801ff34:	bf08      	it	eq
 801ff36:	f106 0e02 	addeq.w	lr, r6, #2
 801ff3a:	e7c7      	b.n	801fecc <_strtol_l.isra.0+0x3c>
 801ff3c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801ff40:	2f19      	cmp	r7, #25
 801ff42:	d801      	bhi.n	801ff48 <_strtol_l.isra.0+0xb8>
 801ff44:	3c37      	subs	r4, #55	; 0x37
 801ff46:	e7e1      	b.n	801ff0c <_strtol_l.isra.0+0x7c>
 801ff48:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801ff4c:	2f19      	cmp	r7, #25
 801ff4e:	d804      	bhi.n	801ff5a <_strtol_l.isra.0+0xca>
 801ff50:	3c57      	subs	r4, #87	; 0x57
 801ff52:	e7db      	b.n	801ff0c <_strtol_l.isra.0+0x7c>
 801ff54:	f04f 36ff 	mov.w	r6, #4294967295
 801ff58:	e7e4      	b.n	801ff24 <_strtol_l.isra.0+0x94>
 801ff5a:	2e00      	cmp	r6, #0
 801ff5c:	da05      	bge.n	801ff6a <_strtol_l.isra.0+0xda>
 801ff5e:	2322      	movs	r3, #34	; 0x22
 801ff60:	6003      	str	r3, [r0, #0]
 801ff62:	4665      	mov	r5, ip
 801ff64:	b942      	cbnz	r2, 801ff78 <_strtol_l.isra.0+0xe8>
 801ff66:	4628      	mov	r0, r5
 801ff68:	e79d      	b.n	801fea6 <_strtol_l.isra.0+0x16>
 801ff6a:	f1b8 0f00 	cmp.w	r8, #0
 801ff6e:	d000      	beq.n	801ff72 <_strtol_l.isra.0+0xe2>
 801ff70:	426d      	negs	r5, r5
 801ff72:	2a00      	cmp	r2, #0
 801ff74:	d0f7      	beq.n	801ff66 <_strtol_l.isra.0+0xd6>
 801ff76:	b10e      	cbz	r6, 801ff7c <_strtol_l.isra.0+0xec>
 801ff78:	f10e 31ff 	add.w	r1, lr, #4294967295
 801ff7c:	6011      	str	r1, [r2, #0]
 801ff7e:	e7f2      	b.n	801ff66 <_strtol_l.isra.0+0xd6>
 801ff80:	2430      	movs	r4, #48	; 0x30
 801ff82:	2b00      	cmp	r3, #0
 801ff84:	d1b3      	bne.n	801feee <_strtol_l.isra.0+0x5e>
 801ff86:	2308      	movs	r3, #8
 801ff88:	e7b1      	b.n	801feee <_strtol_l.isra.0+0x5e>
 801ff8a:	2c30      	cmp	r4, #48	; 0x30
 801ff8c:	d0a4      	beq.n	801fed8 <_strtol_l.isra.0+0x48>
 801ff8e:	230a      	movs	r3, #10
 801ff90:	e7ad      	b.n	801feee <_strtol_l.isra.0+0x5e>
 801ff92:	bf00      	nop
 801ff94:	08026c41 	.word	0x08026c41

0801ff98 <_strtol_r>:
 801ff98:	f7ff bf7a 	b.w	801fe90 <_strtol_l.isra.0>

0801ff9c <_write_r>:
 801ff9c:	b538      	push	{r3, r4, r5, lr}
 801ff9e:	4d07      	ldr	r5, [pc, #28]	; (801ffbc <_write_r+0x20>)
 801ffa0:	4604      	mov	r4, r0
 801ffa2:	4608      	mov	r0, r1
 801ffa4:	4611      	mov	r1, r2
 801ffa6:	2200      	movs	r2, #0
 801ffa8:	602a      	str	r2, [r5, #0]
 801ffaa:	461a      	mov	r2, r3
 801ffac:	f7e6 fab1 	bl	8006512 <_write>
 801ffb0:	1c43      	adds	r3, r0, #1
 801ffb2:	d102      	bne.n	801ffba <_write_r+0x1e>
 801ffb4:	682b      	ldr	r3, [r5, #0]
 801ffb6:	b103      	cbz	r3, 801ffba <_write_r+0x1e>
 801ffb8:	6023      	str	r3, [r4, #0]
 801ffba:	bd38      	pop	{r3, r4, r5, pc}
 801ffbc:	2000e11c 	.word	0x2000e11c

0801ffc0 <__assert_func>:
 801ffc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ffc2:	4614      	mov	r4, r2
 801ffc4:	461a      	mov	r2, r3
 801ffc6:	4b09      	ldr	r3, [pc, #36]	; (801ffec <__assert_func+0x2c>)
 801ffc8:	681b      	ldr	r3, [r3, #0]
 801ffca:	4605      	mov	r5, r0
 801ffcc:	68d8      	ldr	r0, [r3, #12]
 801ffce:	b14c      	cbz	r4, 801ffe4 <__assert_func+0x24>
 801ffd0:	4b07      	ldr	r3, [pc, #28]	; (801fff0 <__assert_func+0x30>)
 801ffd2:	9100      	str	r1, [sp, #0]
 801ffd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ffd8:	4906      	ldr	r1, [pc, #24]	; (801fff4 <__assert_func+0x34>)
 801ffda:	462b      	mov	r3, r5
 801ffdc:	f000 ff60 	bl	8020ea0 <fiprintf>
 801ffe0:	f002 ff8e 	bl	8022f00 <abort>
 801ffe4:	4b04      	ldr	r3, [pc, #16]	; (801fff8 <__assert_func+0x38>)
 801ffe6:	461c      	mov	r4, r3
 801ffe8:	e7f3      	b.n	801ffd2 <__assert_func+0x12>
 801ffea:	bf00      	nop
 801ffec:	20000360 	.word	0x20000360
 801fff0:	08026ea8 	.word	0x08026ea8
 801fff4:	08026eb5 	.word	0x08026eb5
 801fff8:	08026ee3 	.word	0x08026ee3

0801fffc <_close_r>:
 801fffc:	b538      	push	{r3, r4, r5, lr}
 801fffe:	4d06      	ldr	r5, [pc, #24]	; (8020018 <_close_r+0x1c>)
 8020000:	2300      	movs	r3, #0
 8020002:	4604      	mov	r4, r0
 8020004:	4608      	mov	r0, r1
 8020006:	602b      	str	r3, [r5, #0]
 8020008:	f7e6 fa9f 	bl	800654a <_close>
 802000c:	1c43      	adds	r3, r0, #1
 802000e:	d102      	bne.n	8020016 <_close_r+0x1a>
 8020010:	682b      	ldr	r3, [r5, #0]
 8020012:	b103      	cbz	r3, 8020016 <_close_r+0x1a>
 8020014:	6023      	str	r3, [r4, #0]
 8020016:	bd38      	pop	{r3, r4, r5, pc}
 8020018:	2000e11c 	.word	0x2000e11c

0802001c <quorem>:
 802001c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020020:	6903      	ldr	r3, [r0, #16]
 8020022:	690c      	ldr	r4, [r1, #16]
 8020024:	42a3      	cmp	r3, r4
 8020026:	4607      	mov	r7, r0
 8020028:	f2c0 8081 	blt.w	802012e <quorem+0x112>
 802002c:	3c01      	subs	r4, #1
 802002e:	f101 0814 	add.w	r8, r1, #20
 8020032:	f100 0514 	add.w	r5, r0, #20
 8020036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802003a:	9301      	str	r3, [sp, #4]
 802003c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020044:	3301      	adds	r3, #1
 8020046:	429a      	cmp	r2, r3
 8020048:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802004c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020050:	fbb2 f6f3 	udiv	r6, r2, r3
 8020054:	d331      	bcc.n	80200ba <quorem+0x9e>
 8020056:	f04f 0e00 	mov.w	lr, #0
 802005a:	4640      	mov	r0, r8
 802005c:	46ac      	mov	ip, r5
 802005e:	46f2      	mov	sl, lr
 8020060:	f850 2b04 	ldr.w	r2, [r0], #4
 8020064:	b293      	uxth	r3, r2
 8020066:	fb06 e303 	mla	r3, r6, r3, lr
 802006a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802006e:	b29b      	uxth	r3, r3
 8020070:	ebaa 0303 	sub.w	r3, sl, r3
 8020074:	0c12      	lsrs	r2, r2, #16
 8020076:	f8dc a000 	ldr.w	sl, [ip]
 802007a:	fb06 e202 	mla	r2, r6, r2, lr
 802007e:	fa13 f38a 	uxtah	r3, r3, sl
 8020082:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020086:	fa1f fa82 	uxth.w	sl, r2
 802008a:	f8dc 2000 	ldr.w	r2, [ip]
 802008e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8020092:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020096:	b29b      	uxth	r3, r3
 8020098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802009c:	4581      	cmp	r9, r0
 802009e:	f84c 3b04 	str.w	r3, [ip], #4
 80200a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80200a6:	d2db      	bcs.n	8020060 <quorem+0x44>
 80200a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80200ac:	b92b      	cbnz	r3, 80200ba <quorem+0x9e>
 80200ae:	9b01      	ldr	r3, [sp, #4]
 80200b0:	3b04      	subs	r3, #4
 80200b2:	429d      	cmp	r5, r3
 80200b4:	461a      	mov	r2, r3
 80200b6:	d32e      	bcc.n	8020116 <quorem+0xfa>
 80200b8:	613c      	str	r4, [r7, #16]
 80200ba:	4638      	mov	r0, r7
 80200bc:	f001 fd6e 	bl	8021b9c <__mcmp>
 80200c0:	2800      	cmp	r0, #0
 80200c2:	db24      	blt.n	802010e <quorem+0xf2>
 80200c4:	3601      	adds	r6, #1
 80200c6:	4628      	mov	r0, r5
 80200c8:	f04f 0c00 	mov.w	ip, #0
 80200cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80200d0:	f8d0 e000 	ldr.w	lr, [r0]
 80200d4:	b293      	uxth	r3, r2
 80200d6:	ebac 0303 	sub.w	r3, ip, r3
 80200da:	0c12      	lsrs	r2, r2, #16
 80200dc:	fa13 f38e 	uxtah	r3, r3, lr
 80200e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80200e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80200e8:	b29b      	uxth	r3, r3
 80200ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80200ee:	45c1      	cmp	r9, r8
 80200f0:	f840 3b04 	str.w	r3, [r0], #4
 80200f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80200f8:	d2e8      	bcs.n	80200cc <quorem+0xb0>
 80200fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80200fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020102:	b922      	cbnz	r2, 802010e <quorem+0xf2>
 8020104:	3b04      	subs	r3, #4
 8020106:	429d      	cmp	r5, r3
 8020108:	461a      	mov	r2, r3
 802010a:	d30a      	bcc.n	8020122 <quorem+0x106>
 802010c:	613c      	str	r4, [r7, #16]
 802010e:	4630      	mov	r0, r6
 8020110:	b003      	add	sp, #12
 8020112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020116:	6812      	ldr	r2, [r2, #0]
 8020118:	3b04      	subs	r3, #4
 802011a:	2a00      	cmp	r2, #0
 802011c:	d1cc      	bne.n	80200b8 <quorem+0x9c>
 802011e:	3c01      	subs	r4, #1
 8020120:	e7c7      	b.n	80200b2 <quorem+0x96>
 8020122:	6812      	ldr	r2, [r2, #0]
 8020124:	3b04      	subs	r3, #4
 8020126:	2a00      	cmp	r2, #0
 8020128:	d1f0      	bne.n	802010c <quorem+0xf0>
 802012a:	3c01      	subs	r4, #1
 802012c:	e7eb      	b.n	8020106 <quorem+0xea>
 802012e:	2000      	movs	r0, #0
 8020130:	e7ee      	b.n	8020110 <quorem+0xf4>
 8020132:	0000      	movs	r0, r0
 8020134:	0000      	movs	r0, r0
	...

08020138 <_dtoa_r>:
 8020138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802013c:	ed2d 8b02 	vpush	{d8}
 8020140:	ec57 6b10 	vmov	r6, r7, d0
 8020144:	b095      	sub	sp, #84	; 0x54
 8020146:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020148:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802014c:	9105      	str	r1, [sp, #20]
 802014e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8020152:	4604      	mov	r4, r0
 8020154:	9209      	str	r2, [sp, #36]	; 0x24
 8020156:	930f      	str	r3, [sp, #60]	; 0x3c
 8020158:	b975      	cbnz	r5, 8020178 <_dtoa_r+0x40>
 802015a:	2010      	movs	r0, #16
 802015c:	f7fd ff64 	bl	801e028 <malloc>
 8020160:	4602      	mov	r2, r0
 8020162:	6260      	str	r0, [r4, #36]	; 0x24
 8020164:	b920      	cbnz	r0, 8020170 <_dtoa_r+0x38>
 8020166:	4bb2      	ldr	r3, [pc, #712]	; (8020430 <_dtoa_r+0x2f8>)
 8020168:	21ea      	movs	r1, #234	; 0xea
 802016a:	48b2      	ldr	r0, [pc, #712]	; (8020434 <_dtoa_r+0x2fc>)
 802016c:	f7ff ff28 	bl	801ffc0 <__assert_func>
 8020170:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020174:	6005      	str	r5, [r0, #0]
 8020176:	60c5      	str	r5, [r0, #12]
 8020178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802017a:	6819      	ldr	r1, [r3, #0]
 802017c:	b151      	cbz	r1, 8020194 <_dtoa_r+0x5c>
 802017e:	685a      	ldr	r2, [r3, #4]
 8020180:	604a      	str	r2, [r1, #4]
 8020182:	2301      	movs	r3, #1
 8020184:	4093      	lsls	r3, r2
 8020186:	608b      	str	r3, [r1, #8]
 8020188:	4620      	mov	r0, r4
 802018a:	f001 fa7f 	bl	802168c <_Bfree>
 802018e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020190:	2200      	movs	r2, #0
 8020192:	601a      	str	r2, [r3, #0]
 8020194:	1e3b      	subs	r3, r7, #0
 8020196:	bfb9      	ittee	lt
 8020198:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802019c:	9303      	strlt	r3, [sp, #12]
 802019e:	2300      	movge	r3, #0
 80201a0:	f8c8 3000 	strge.w	r3, [r8]
 80201a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80201a8:	4ba3      	ldr	r3, [pc, #652]	; (8020438 <_dtoa_r+0x300>)
 80201aa:	bfbc      	itt	lt
 80201ac:	2201      	movlt	r2, #1
 80201ae:	f8c8 2000 	strlt.w	r2, [r8]
 80201b2:	ea33 0309 	bics.w	r3, r3, r9
 80201b6:	d11b      	bne.n	80201f0 <_dtoa_r+0xb8>
 80201b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80201ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80201be:	6013      	str	r3, [r2, #0]
 80201c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80201c4:	4333      	orrs	r3, r6
 80201c6:	f000 857a 	beq.w	8020cbe <_dtoa_r+0xb86>
 80201ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80201cc:	b963      	cbnz	r3, 80201e8 <_dtoa_r+0xb0>
 80201ce:	4b9b      	ldr	r3, [pc, #620]	; (802043c <_dtoa_r+0x304>)
 80201d0:	e024      	b.n	802021c <_dtoa_r+0xe4>
 80201d2:	4b9b      	ldr	r3, [pc, #620]	; (8020440 <_dtoa_r+0x308>)
 80201d4:	9300      	str	r3, [sp, #0]
 80201d6:	3308      	adds	r3, #8
 80201d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80201da:	6013      	str	r3, [r2, #0]
 80201dc:	9800      	ldr	r0, [sp, #0]
 80201de:	b015      	add	sp, #84	; 0x54
 80201e0:	ecbd 8b02 	vpop	{d8}
 80201e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201e8:	4b94      	ldr	r3, [pc, #592]	; (802043c <_dtoa_r+0x304>)
 80201ea:	9300      	str	r3, [sp, #0]
 80201ec:	3303      	adds	r3, #3
 80201ee:	e7f3      	b.n	80201d8 <_dtoa_r+0xa0>
 80201f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80201f4:	2200      	movs	r2, #0
 80201f6:	ec51 0b17 	vmov	r0, r1, d7
 80201fa:	2300      	movs	r3, #0
 80201fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8020200:	f7e0 fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 8020204:	4680      	mov	r8, r0
 8020206:	b158      	cbz	r0, 8020220 <_dtoa_r+0xe8>
 8020208:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802020a:	2301      	movs	r3, #1
 802020c:	6013      	str	r3, [r2, #0]
 802020e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020210:	2b00      	cmp	r3, #0
 8020212:	f000 8551 	beq.w	8020cb8 <_dtoa_r+0xb80>
 8020216:	488b      	ldr	r0, [pc, #556]	; (8020444 <_dtoa_r+0x30c>)
 8020218:	6018      	str	r0, [r3, #0]
 802021a:	1e43      	subs	r3, r0, #1
 802021c:	9300      	str	r3, [sp, #0]
 802021e:	e7dd      	b.n	80201dc <_dtoa_r+0xa4>
 8020220:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8020224:	aa12      	add	r2, sp, #72	; 0x48
 8020226:	a913      	add	r1, sp, #76	; 0x4c
 8020228:	4620      	mov	r0, r4
 802022a:	f001 fdd7 	bl	8021ddc <__d2b>
 802022e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020232:	4683      	mov	fp, r0
 8020234:	2d00      	cmp	r5, #0
 8020236:	d07c      	beq.n	8020332 <_dtoa_r+0x1fa>
 8020238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802023a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 802023e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020242:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8020246:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 802024a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802024e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020252:	4b7d      	ldr	r3, [pc, #500]	; (8020448 <_dtoa_r+0x310>)
 8020254:	2200      	movs	r2, #0
 8020256:	4630      	mov	r0, r6
 8020258:	4639      	mov	r1, r7
 802025a:	f7e0 f815 	bl	8000288 <__aeabi_dsub>
 802025e:	a36e      	add	r3, pc, #440	; (adr r3, 8020418 <_dtoa_r+0x2e0>)
 8020260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020264:	f7e0 f9c8 	bl	80005f8 <__aeabi_dmul>
 8020268:	a36d      	add	r3, pc, #436	; (adr r3, 8020420 <_dtoa_r+0x2e8>)
 802026a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802026e:	f7e0 f80d 	bl	800028c <__adddf3>
 8020272:	4606      	mov	r6, r0
 8020274:	4628      	mov	r0, r5
 8020276:	460f      	mov	r7, r1
 8020278:	f7e0 f954 	bl	8000524 <__aeabi_i2d>
 802027c:	a36a      	add	r3, pc, #424	; (adr r3, 8020428 <_dtoa_r+0x2f0>)
 802027e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020282:	f7e0 f9b9 	bl	80005f8 <__aeabi_dmul>
 8020286:	4602      	mov	r2, r0
 8020288:	460b      	mov	r3, r1
 802028a:	4630      	mov	r0, r6
 802028c:	4639      	mov	r1, r7
 802028e:	f7df fffd 	bl	800028c <__adddf3>
 8020292:	4606      	mov	r6, r0
 8020294:	460f      	mov	r7, r1
 8020296:	f7e0 fc5f 	bl	8000b58 <__aeabi_d2iz>
 802029a:	2200      	movs	r2, #0
 802029c:	4682      	mov	sl, r0
 802029e:	2300      	movs	r3, #0
 80202a0:	4630      	mov	r0, r6
 80202a2:	4639      	mov	r1, r7
 80202a4:	f7e0 fc1a 	bl	8000adc <__aeabi_dcmplt>
 80202a8:	b148      	cbz	r0, 80202be <_dtoa_r+0x186>
 80202aa:	4650      	mov	r0, sl
 80202ac:	f7e0 f93a 	bl	8000524 <__aeabi_i2d>
 80202b0:	4632      	mov	r2, r6
 80202b2:	463b      	mov	r3, r7
 80202b4:	f7e0 fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 80202b8:	b908      	cbnz	r0, 80202be <_dtoa_r+0x186>
 80202ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80202be:	f1ba 0f16 	cmp.w	sl, #22
 80202c2:	d854      	bhi.n	802036e <_dtoa_r+0x236>
 80202c4:	4b61      	ldr	r3, [pc, #388]	; (802044c <_dtoa_r+0x314>)
 80202c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80202ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80202d2:	f7e0 fc03 	bl	8000adc <__aeabi_dcmplt>
 80202d6:	2800      	cmp	r0, #0
 80202d8:	d04b      	beq.n	8020372 <_dtoa_r+0x23a>
 80202da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80202de:	2300      	movs	r3, #0
 80202e0:	930e      	str	r3, [sp, #56]	; 0x38
 80202e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80202e4:	1b5d      	subs	r5, r3, r5
 80202e6:	1e6b      	subs	r3, r5, #1
 80202e8:	9304      	str	r3, [sp, #16]
 80202ea:	bf43      	ittte	mi
 80202ec:	2300      	movmi	r3, #0
 80202ee:	f1c5 0801 	rsbmi	r8, r5, #1
 80202f2:	9304      	strmi	r3, [sp, #16]
 80202f4:	f04f 0800 	movpl.w	r8, #0
 80202f8:	f1ba 0f00 	cmp.w	sl, #0
 80202fc:	db3b      	blt.n	8020376 <_dtoa_r+0x23e>
 80202fe:	9b04      	ldr	r3, [sp, #16]
 8020300:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8020304:	4453      	add	r3, sl
 8020306:	9304      	str	r3, [sp, #16]
 8020308:	2300      	movs	r3, #0
 802030a:	9306      	str	r3, [sp, #24]
 802030c:	9b05      	ldr	r3, [sp, #20]
 802030e:	2b09      	cmp	r3, #9
 8020310:	d869      	bhi.n	80203e6 <_dtoa_r+0x2ae>
 8020312:	2b05      	cmp	r3, #5
 8020314:	bfc4      	itt	gt
 8020316:	3b04      	subgt	r3, #4
 8020318:	9305      	strgt	r3, [sp, #20]
 802031a:	9b05      	ldr	r3, [sp, #20]
 802031c:	f1a3 0302 	sub.w	r3, r3, #2
 8020320:	bfcc      	ite	gt
 8020322:	2500      	movgt	r5, #0
 8020324:	2501      	movle	r5, #1
 8020326:	2b03      	cmp	r3, #3
 8020328:	d869      	bhi.n	80203fe <_dtoa_r+0x2c6>
 802032a:	e8df f003 	tbb	[pc, r3]
 802032e:	4e2c      	.short	0x4e2c
 8020330:	5a4c      	.short	0x5a4c
 8020332:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8020336:	441d      	add	r5, r3
 8020338:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802033c:	2b20      	cmp	r3, #32
 802033e:	bfc1      	itttt	gt
 8020340:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8020344:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020348:	fa09 f303 	lslgt.w	r3, r9, r3
 802034c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8020350:	bfda      	itte	le
 8020352:	f1c3 0320 	rsble	r3, r3, #32
 8020356:	fa06 f003 	lslle.w	r0, r6, r3
 802035a:	4318      	orrgt	r0, r3
 802035c:	f7e0 f8d2 	bl	8000504 <__aeabi_ui2d>
 8020360:	2301      	movs	r3, #1
 8020362:	4606      	mov	r6, r0
 8020364:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020368:	3d01      	subs	r5, #1
 802036a:	9310      	str	r3, [sp, #64]	; 0x40
 802036c:	e771      	b.n	8020252 <_dtoa_r+0x11a>
 802036e:	2301      	movs	r3, #1
 8020370:	e7b6      	b.n	80202e0 <_dtoa_r+0x1a8>
 8020372:	900e      	str	r0, [sp, #56]	; 0x38
 8020374:	e7b5      	b.n	80202e2 <_dtoa_r+0x1aa>
 8020376:	f1ca 0300 	rsb	r3, sl, #0
 802037a:	9306      	str	r3, [sp, #24]
 802037c:	2300      	movs	r3, #0
 802037e:	eba8 080a 	sub.w	r8, r8, sl
 8020382:	930d      	str	r3, [sp, #52]	; 0x34
 8020384:	e7c2      	b.n	802030c <_dtoa_r+0x1d4>
 8020386:	2300      	movs	r3, #0
 8020388:	9308      	str	r3, [sp, #32]
 802038a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802038c:	2b00      	cmp	r3, #0
 802038e:	dc39      	bgt.n	8020404 <_dtoa_r+0x2cc>
 8020390:	f04f 0901 	mov.w	r9, #1
 8020394:	f8cd 9004 	str.w	r9, [sp, #4]
 8020398:	464b      	mov	r3, r9
 802039a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 802039e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80203a0:	2200      	movs	r2, #0
 80203a2:	6042      	str	r2, [r0, #4]
 80203a4:	2204      	movs	r2, #4
 80203a6:	f102 0614 	add.w	r6, r2, #20
 80203aa:	429e      	cmp	r6, r3
 80203ac:	6841      	ldr	r1, [r0, #4]
 80203ae:	d92f      	bls.n	8020410 <_dtoa_r+0x2d8>
 80203b0:	4620      	mov	r0, r4
 80203b2:	f001 f92b 	bl	802160c <_Balloc>
 80203b6:	9000      	str	r0, [sp, #0]
 80203b8:	2800      	cmp	r0, #0
 80203ba:	d14b      	bne.n	8020454 <_dtoa_r+0x31c>
 80203bc:	4b24      	ldr	r3, [pc, #144]	; (8020450 <_dtoa_r+0x318>)
 80203be:	4602      	mov	r2, r0
 80203c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80203c4:	e6d1      	b.n	802016a <_dtoa_r+0x32>
 80203c6:	2301      	movs	r3, #1
 80203c8:	e7de      	b.n	8020388 <_dtoa_r+0x250>
 80203ca:	2300      	movs	r3, #0
 80203cc:	9308      	str	r3, [sp, #32]
 80203ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80203d0:	eb0a 0903 	add.w	r9, sl, r3
 80203d4:	f109 0301 	add.w	r3, r9, #1
 80203d8:	2b01      	cmp	r3, #1
 80203da:	9301      	str	r3, [sp, #4]
 80203dc:	bfb8      	it	lt
 80203de:	2301      	movlt	r3, #1
 80203e0:	e7dd      	b.n	802039e <_dtoa_r+0x266>
 80203e2:	2301      	movs	r3, #1
 80203e4:	e7f2      	b.n	80203cc <_dtoa_r+0x294>
 80203e6:	2501      	movs	r5, #1
 80203e8:	2300      	movs	r3, #0
 80203ea:	9305      	str	r3, [sp, #20]
 80203ec:	9508      	str	r5, [sp, #32]
 80203ee:	f04f 39ff 	mov.w	r9, #4294967295
 80203f2:	2200      	movs	r2, #0
 80203f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80203f8:	2312      	movs	r3, #18
 80203fa:	9209      	str	r2, [sp, #36]	; 0x24
 80203fc:	e7cf      	b.n	802039e <_dtoa_r+0x266>
 80203fe:	2301      	movs	r3, #1
 8020400:	9308      	str	r3, [sp, #32]
 8020402:	e7f4      	b.n	80203ee <_dtoa_r+0x2b6>
 8020404:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8020408:	f8cd 9004 	str.w	r9, [sp, #4]
 802040c:	464b      	mov	r3, r9
 802040e:	e7c6      	b.n	802039e <_dtoa_r+0x266>
 8020410:	3101      	adds	r1, #1
 8020412:	6041      	str	r1, [r0, #4]
 8020414:	0052      	lsls	r2, r2, #1
 8020416:	e7c6      	b.n	80203a6 <_dtoa_r+0x26e>
 8020418:	636f4361 	.word	0x636f4361
 802041c:	3fd287a7 	.word	0x3fd287a7
 8020420:	8b60c8b3 	.word	0x8b60c8b3
 8020424:	3fc68a28 	.word	0x3fc68a28
 8020428:	509f79fb 	.word	0x509f79fb
 802042c:	3fd34413 	.word	0x3fd34413
 8020430:	08026ddf 	.word	0x08026ddf
 8020434:	08026ef1 	.word	0x08026ef1
 8020438:	7ff00000 	.word	0x7ff00000
 802043c:	08026eed 	.word	0x08026eed
 8020440:	08026ee4 	.word	0x08026ee4
 8020444:	08027152 	.word	0x08027152
 8020448:	3ff80000 	.word	0x3ff80000
 802044c:	08027068 	.word	0x08027068
 8020450:	08026f50 	.word	0x08026f50
 8020454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020456:	9a00      	ldr	r2, [sp, #0]
 8020458:	601a      	str	r2, [r3, #0]
 802045a:	9b01      	ldr	r3, [sp, #4]
 802045c:	2b0e      	cmp	r3, #14
 802045e:	f200 80ad 	bhi.w	80205bc <_dtoa_r+0x484>
 8020462:	2d00      	cmp	r5, #0
 8020464:	f000 80aa 	beq.w	80205bc <_dtoa_r+0x484>
 8020468:	f1ba 0f00 	cmp.w	sl, #0
 802046c:	dd36      	ble.n	80204dc <_dtoa_r+0x3a4>
 802046e:	4ac3      	ldr	r2, [pc, #780]	; (802077c <_dtoa_r+0x644>)
 8020470:	f00a 030f 	and.w	r3, sl, #15
 8020474:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8020478:	ed93 7b00 	vldr	d7, [r3]
 802047c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8020480:	ea4f 172a 	mov.w	r7, sl, asr #4
 8020484:	eeb0 8a47 	vmov.f32	s16, s14
 8020488:	eef0 8a67 	vmov.f32	s17, s15
 802048c:	d016      	beq.n	80204bc <_dtoa_r+0x384>
 802048e:	4bbc      	ldr	r3, [pc, #752]	; (8020780 <_dtoa_r+0x648>)
 8020490:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020494:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020498:	f7e0 f9d8 	bl	800084c <__aeabi_ddiv>
 802049c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80204a0:	f007 070f 	and.w	r7, r7, #15
 80204a4:	2503      	movs	r5, #3
 80204a6:	4eb6      	ldr	r6, [pc, #728]	; (8020780 <_dtoa_r+0x648>)
 80204a8:	b957      	cbnz	r7, 80204c0 <_dtoa_r+0x388>
 80204aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80204ae:	ec53 2b18 	vmov	r2, r3, d8
 80204b2:	f7e0 f9cb 	bl	800084c <__aeabi_ddiv>
 80204b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80204ba:	e029      	b.n	8020510 <_dtoa_r+0x3d8>
 80204bc:	2502      	movs	r5, #2
 80204be:	e7f2      	b.n	80204a6 <_dtoa_r+0x36e>
 80204c0:	07f9      	lsls	r1, r7, #31
 80204c2:	d508      	bpl.n	80204d6 <_dtoa_r+0x39e>
 80204c4:	ec51 0b18 	vmov	r0, r1, d8
 80204c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80204cc:	f7e0 f894 	bl	80005f8 <__aeabi_dmul>
 80204d0:	ec41 0b18 	vmov	d8, r0, r1
 80204d4:	3501      	adds	r5, #1
 80204d6:	107f      	asrs	r7, r7, #1
 80204d8:	3608      	adds	r6, #8
 80204da:	e7e5      	b.n	80204a8 <_dtoa_r+0x370>
 80204dc:	f000 80a6 	beq.w	802062c <_dtoa_r+0x4f4>
 80204e0:	f1ca 0600 	rsb	r6, sl, #0
 80204e4:	4ba5      	ldr	r3, [pc, #660]	; (802077c <_dtoa_r+0x644>)
 80204e6:	4fa6      	ldr	r7, [pc, #664]	; (8020780 <_dtoa_r+0x648>)
 80204e8:	f006 020f 	and.w	r2, r6, #15
 80204ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80204f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80204f8:	f7e0 f87e 	bl	80005f8 <__aeabi_dmul>
 80204fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020500:	1136      	asrs	r6, r6, #4
 8020502:	2300      	movs	r3, #0
 8020504:	2502      	movs	r5, #2
 8020506:	2e00      	cmp	r6, #0
 8020508:	f040 8085 	bne.w	8020616 <_dtoa_r+0x4de>
 802050c:	2b00      	cmp	r3, #0
 802050e:	d1d2      	bne.n	80204b6 <_dtoa_r+0x37e>
 8020510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020512:	2b00      	cmp	r3, #0
 8020514:	f000 808c 	beq.w	8020630 <_dtoa_r+0x4f8>
 8020518:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802051c:	4b99      	ldr	r3, [pc, #612]	; (8020784 <_dtoa_r+0x64c>)
 802051e:	2200      	movs	r2, #0
 8020520:	4630      	mov	r0, r6
 8020522:	4639      	mov	r1, r7
 8020524:	f7e0 fada 	bl	8000adc <__aeabi_dcmplt>
 8020528:	2800      	cmp	r0, #0
 802052a:	f000 8081 	beq.w	8020630 <_dtoa_r+0x4f8>
 802052e:	9b01      	ldr	r3, [sp, #4]
 8020530:	2b00      	cmp	r3, #0
 8020532:	d07d      	beq.n	8020630 <_dtoa_r+0x4f8>
 8020534:	f1b9 0f00 	cmp.w	r9, #0
 8020538:	dd3c      	ble.n	80205b4 <_dtoa_r+0x47c>
 802053a:	f10a 33ff 	add.w	r3, sl, #4294967295
 802053e:	9307      	str	r3, [sp, #28]
 8020540:	2200      	movs	r2, #0
 8020542:	4b91      	ldr	r3, [pc, #580]	; (8020788 <_dtoa_r+0x650>)
 8020544:	4630      	mov	r0, r6
 8020546:	4639      	mov	r1, r7
 8020548:	f7e0 f856 	bl	80005f8 <__aeabi_dmul>
 802054c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020550:	3501      	adds	r5, #1
 8020552:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8020556:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802055a:	4628      	mov	r0, r5
 802055c:	f7df ffe2 	bl	8000524 <__aeabi_i2d>
 8020560:	4632      	mov	r2, r6
 8020562:	463b      	mov	r3, r7
 8020564:	f7e0 f848 	bl	80005f8 <__aeabi_dmul>
 8020568:	4b88      	ldr	r3, [pc, #544]	; (802078c <_dtoa_r+0x654>)
 802056a:	2200      	movs	r2, #0
 802056c:	f7df fe8e 	bl	800028c <__adddf3>
 8020570:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8020574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020578:	9303      	str	r3, [sp, #12]
 802057a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802057c:	2b00      	cmp	r3, #0
 802057e:	d15c      	bne.n	802063a <_dtoa_r+0x502>
 8020580:	4b83      	ldr	r3, [pc, #524]	; (8020790 <_dtoa_r+0x658>)
 8020582:	2200      	movs	r2, #0
 8020584:	4630      	mov	r0, r6
 8020586:	4639      	mov	r1, r7
 8020588:	f7df fe7e 	bl	8000288 <__aeabi_dsub>
 802058c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020590:	4606      	mov	r6, r0
 8020592:	460f      	mov	r7, r1
 8020594:	f7e0 fac0 	bl	8000b18 <__aeabi_dcmpgt>
 8020598:	2800      	cmp	r0, #0
 802059a:	f040 8296 	bne.w	8020aca <_dtoa_r+0x992>
 802059e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80205a2:	4630      	mov	r0, r6
 80205a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80205a8:	4639      	mov	r1, r7
 80205aa:	f7e0 fa97 	bl	8000adc <__aeabi_dcmplt>
 80205ae:	2800      	cmp	r0, #0
 80205b0:	f040 8288 	bne.w	8020ac4 <_dtoa_r+0x98c>
 80205b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80205b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80205bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80205be:	2b00      	cmp	r3, #0
 80205c0:	f2c0 8158 	blt.w	8020874 <_dtoa_r+0x73c>
 80205c4:	f1ba 0f0e 	cmp.w	sl, #14
 80205c8:	f300 8154 	bgt.w	8020874 <_dtoa_r+0x73c>
 80205cc:	4b6b      	ldr	r3, [pc, #428]	; (802077c <_dtoa_r+0x644>)
 80205ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80205d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80205d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205d8:	2b00      	cmp	r3, #0
 80205da:	f280 80e3 	bge.w	80207a4 <_dtoa_r+0x66c>
 80205de:	9b01      	ldr	r3, [sp, #4]
 80205e0:	2b00      	cmp	r3, #0
 80205e2:	f300 80df 	bgt.w	80207a4 <_dtoa_r+0x66c>
 80205e6:	f040 826d 	bne.w	8020ac4 <_dtoa_r+0x98c>
 80205ea:	4b69      	ldr	r3, [pc, #420]	; (8020790 <_dtoa_r+0x658>)
 80205ec:	2200      	movs	r2, #0
 80205ee:	4640      	mov	r0, r8
 80205f0:	4649      	mov	r1, r9
 80205f2:	f7e0 f801 	bl	80005f8 <__aeabi_dmul>
 80205f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80205fa:	f7e0 fa83 	bl	8000b04 <__aeabi_dcmpge>
 80205fe:	9e01      	ldr	r6, [sp, #4]
 8020600:	4637      	mov	r7, r6
 8020602:	2800      	cmp	r0, #0
 8020604:	f040 8243 	bne.w	8020a8e <_dtoa_r+0x956>
 8020608:	9d00      	ldr	r5, [sp, #0]
 802060a:	2331      	movs	r3, #49	; 0x31
 802060c:	f805 3b01 	strb.w	r3, [r5], #1
 8020610:	f10a 0a01 	add.w	sl, sl, #1
 8020614:	e23f      	b.n	8020a96 <_dtoa_r+0x95e>
 8020616:	07f2      	lsls	r2, r6, #31
 8020618:	d505      	bpl.n	8020626 <_dtoa_r+0x4ee>
 802061a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802061e:	f7df ffeb 	bl	80005f8 <__aeabi_dmul>
 8020622:	3501      	adds	r5, #1
 8020624:	2301      	movs	r3, #1
 8020626:	1076      	asrs	r6, r6, #1
 8020628:	3708      	adds	r7, #8
 802062a:	e76c      	b.n	8020506 <_dtoa_r+0x3ce>
 802062c:	2502      	movs	r5, #2
 802062e:	e76f      	b.n	8020510 <_dtoa_r+0x3d8>
 8020630:	9b01      	ldr	r3, [sp, #4]
 8020632:	f8cd a01c 	str.w	sl, [sp, #28]
 8020636:	930c      	str	r3, [sp, #48]	; 0x30
 8020638:	e78d      	b.n	8020556 <_dtoa_r+0x41e>
 802063a:	9900      	ldr	r1, [sp, #0]
 802063c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802063e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020640:	4b4e      	ldr	r3, [pc, #312]	; (802077c <_dtoa_r+0x644>)
 8020642:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020646:	4401      	add	r1, r0
 8020648:	9102      	str	r1, [sp, #8]
 802064a:	9908      	ldr	r1, [sp, #32]
 802064c:	eeb0 8a47 	vmov.f32	s16, s14
 8020650:	eef0 8a67 	vmov.f32	s17, s15
 8020654:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020658:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802065c:	2900      	cmp	r1, #0
 802065e:	d045      	beq.n	80206ec <_dtoa_r+0x5b4>
 8020660:	494c      	ldr	r1, [pc, #304]	; (8020794 <_dtoa_r+0x65c>)
 8020662:	2000      	movs	r0, #0
 8020664:	f7e0 f8f2 	bl	800084c <__aeabi_ddiv>
 8020668:	ec53 2b18 	vmov	r2, r3, d8
 802066c:	f7df fe0c 	bl	8000288 <__aeabi_dsub>
 8020670:	9d00      	ldr	r5, [sp, #0]
 8020672:	ec41 0b18 	vmov	d8, r0, r1
 8020676:	4639      	mov	r1, r7
 8020678:	4630      	mov	r0, r6
 802067a:	f7e0 fa6d 	bl	8000b58 <__aeabi_d2iz>
 802067e:	900c      	str	r0, [sp, #48]	; 0x30
 8020680:	f7df ff50 	bl	8000524 <__aeabi_i2d>
 8020684:	4602      	mov	r2, r0
 8020686:	460b      	mov	r3, r1
 8020688:	4630      	mov	r0, r6
 802068a:	4639      	mov	r1, r7
 802068c:	f7df fdfc 	bl	8000288 <__aeabi_dsub>
 8020690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020692:	3330      	adds	r3, #48	; 0x30
 8020694:	f805 3b01 	strb.w	r3, [r5], #1
 8020698:	ec53 2b18 	vmov	r2, r3, d8
 802069c:	4606      	mov	r6, r0
 802069e:	460f      	mov	r7, r1
 80206a0:	f7e0 fa1c 	bl	8000adc <__aeabi_dcmplt>
 80206a4:	2800      	cmp	r0, #0
 80206a6:	d165      	bne.n	8020774 <_dtoa_r+0x63c>
 80206a8:	4632      	mov	r2, r6
 80206aa:	463b      	mov	r3, r7
 80206ac:	4935      	ldr	r1, [pc, #212]	; (8020784 <_dtoa_r+0x64c>)
 80206ae:	2000      	movs	r0, #0
 80206b0:	f7df fdea 	bl	8000288 <__aeabi_dsub>
 80206b4:	ec53 2b18 	vmov	r2, r3, d8
 80206b8:	f7e0 fa10 	bl	8000adc <__aeabi_dcmplt>
 80206bc:	2800      	cmp	r0, #0
 80206be:	f040 80b9 	bne.w	8020834 <_dtoa_r+0x6fc>
 80206c2:	9b02      	ldr	r3, [sp, #8]
 80206c4:	429d      	cmp	r5, r3
 80206c6:	f43f af75 	beq.w	80205b4 <_dtoa_r+0x47c>
 80206ca:	4b2f      	ldr	r3, [pc, #188]	; (8020788 <_dtoa_r+0x650>)
 80206cc:	ec51 0b18 	vmov	r0, r1, d8
 80206d0:	2200      	movs	r2, #0
 80206d2:	f7df ff91 	bl	80005f8 <__aeabi_dmul>
 80206d6:	4b2c      	ldr	r3, [pc, #176]	; (8020788 <_dtoa_r+0x650>)
 80206d8:	ec41 0b18 	vmov	d8, r0, r1
 80206dc:	2200      	movs	r2, #0
 80206de:	4630      	mov	r0, r6
 80206e0:	4639      	mov	r1, r7
 80206e2:	f7df ff89 	bl	80005f8 <__aeabi_dmul>
 80206e6:	4606      	mov	r6, r0
 80206e8:	460f      	mov	r7, r1
 80206ea:	e7c4      	b.n	8020676 <_dtoa_r+0x53e>
 80206ec:	ec51 0b17 	vmov	r0, r1, d7
 80206f0:	f7df ff82 	bl	80005f8 <__aeabi_dmul>
 80206f4:	9b02      	ldr	r3, [sp, #8]
 80206f6:	9d00      	ldr	r5, [sp, #0]
 80206f8:	930c      	str	r3, [sp, #48]	; 0x30
 80206fa:	ec41 0b18 	vmov	d8, r0, r1
 80206fe:	4639      	mov	r1, r7
 8020700:	4630      	mov	r0, r6
 8020702:	f7e0 fa29 	bl	8000b58 <__aeabi_d2iz>
 8020706:	9011      	str	r0, [sp, #68]	; 0x44
 8020708:	f7df ff0c 	bl	8000524 <__aeabi_i2d>
 802070c:	4602      	mov	r2, r0
 802070e:	460b      	mov	r3, r1
 8020710:	4630      	mov	r0, r6
 8020712:	4639      	mov	r1, r7
 8020714:	f7df fdb8 	bl	8000288 <__aeabi_dsub>
 8020718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802071a:	3330      	adds	r3, #48	; 0x30
 802071c:	f805 3b01 	strb.w	r3, [r5], #1
 8020720:	9b02      	ldr	r3, [sp, #8]
 8020722:	429d      	cmp	r5, r3
 8020724:	4606      	mov	r6, r0
 8020726:	460f      	mov	r7, r1
 8020728:	f04f 0200 	mov.w	r2, #0
 802072c:	d134      	bne.n	8020798 <_dtoa_r+0x660>
 802072e:	4b19      	ldr	r3, [pc, #100]	; (8020794 <_dtoa_r+0x65c>)
 8020730:	ec51 0b18 	vmov	r0, r1, d8
 8020734:	f7df fdaa 	bl	800028c <__adddf3>
 8020738:	4602      	mov	r2, r0
 802073a:	460b      	mov	r3, r1
 802073c:	4630      	mov	r0, r6
 802073e:	4639      	mov	r1, r7
 8020740:	f7e0 f9ea 	bl	8000b18 <__aeabi_dcmpgt>
 8020744:	2800      	cmp	r0, #0
 8020746:	d175      	bne.n	8020834 <_dtoa_r+0x6fc>
 8020748:	ec53 2b18 	vmov	r2, r3, d8
 802074c:	4911      	ldr	r1, [pc, #68]	; (8020794 <_dtoa_r+0x65c>)
 802074e:	2000      	movs	r0, #0
 8020750:	f7df fd9a 	bl	8000288 <__aeabi_dsub>
 8020754:	4602      	mov	r2, r0
 8020756:	460b      	mov	r3, r1
 8020758:	4630      	mov	r0, r6
 802075a:	4639      	mov	r1, r7
 802075c:	f7e0 f9be 	bl	8000adc <__aeabi_dcmplt>
 8020760:	2800      	cmp	r0, #0
 8020762:	f43f af27 	beq.w	80205b4 <_dtoa_r+0x47c>
 8020766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020768:	1e6b      	subs	r3, r5, #1
 802076a:	930c      	str	r3, [sp, #48]	; 0x30
 802076c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020770:	2b30      	cmp	r3, #48	; 0x30
 8020772:	d0f8      	beq.n	8020766 <_dtoa_r+0x62e>
 8020774:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020778:	e04a      	b.n	8020810 <_dtoa_r+0x6d8>
 802077a:	bf00      	nop
 802077c:	08027068 	.word	0x08027068
 8020780:	08027040 	.word	0x08027040
 8020784:	3ff00000 	.word	0x3ff00000
 8020788:	40240000 	.word	0x40240000
 802078c:	401c0000 	.word	0x401c0000
 8020790:	40140000 	.word	0x40140000
 8020794:	3fe00000 	.word	0x3fe00000
 8020798:	4baf      	ldr	r3, [pc, #700]	; (8020a58 <_dtoa_r+0x920>)
 802079a:	f7df ff2d 	bl	80005f8 <__aeabi_dmul>
 802079e:	4606      	mov	r6, r0
 80207a0:	460f      	mov	r7, r1
 80207a2:	e7ac      	b.n	80206fe <_dtoa_r+0x5c6>
 80207a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80207a8:	9d00      	ldr	r5, [sp, #0]
 80207aa:	4642      	mov	r2, r8
 80207ac:	464b      	mov	r3, r9
 80207ae:	4630      	mov	r0, r6
 80207b0:	4639      	mov	r1, r7
 80207b2:	f7e0 f84b 	bl	800084c <__aeabi_ddiv>
 80207b6:	f7e0 f9cf 	bl	8000b58 <__aeabi_d2iz>
 80207ba:	9002      	str	r0, [sp, #8]
 80207bc:	f7df feb2 	bl	8000524 <__aeabi_i2d>
 80207c0:	4642      	mov	r2, r8
 80207c2:	464b      	mov	r3, r9
 80207c4:	f7df ff18 	bl	80005f8 <__aeabi_dmul>
 80207c8:	4602      	mov	r2, r0
 80207ca:	460b      	mov	r3, r1
 80207cc:	4630      	mov	r0, r6
 80207ce:	4639      	mov	r1, r7
 80207d0:	f7df fd5a 	bl	8000288 <__aeabi_dsub>
 80207d4:	9e02      	ldr	r6, [sp, #8]
 80207d6:	9f01      	ldr	r7, [sp, #4]
 80207d8:	3630      	adds	r6, #48	; 0x30
 80207da:	f805 6b01 	strb.w	r6, [r5], #1
 80207de:	9e00      	ldr	r6, [sp, #0]
 80207e0:	1bae      	subs	r6, r5, r6
 80207e2:	42b7      	cmp	r7, r6
 80207e4:	4602      	mov	r2, r0
 80207e6:	460b      	mov	r3, r1
 80207e8:	d137      	bne.n	802085a <_dtoa_r+0x722>
 80207ea:	f7df fd4f 	bl	800028c <__adddf3>
 80207ee:	4642      	mov	r2, r8
 80207f0:	464b      	mov	r3, r9
 80207f2:	4606      	mov	r6, r0
 80207f4:	460f      	mov	r7, r1
 80207f6:	f7e0 f98f 	bl	8000b18 <__aeabi_dcmpgt>
 80207fa:	b9c8      	cbnz	r0, 8020830 <_dtoa_r+0x6f8>
 80207fc:	4642      	mov	r2, r8
 80207fe:	464b      	mov	r3, r9
 8020800:	4630      	mov	r0, r6
 8020802:	4639      	mov	r1, r7
 8020804:	f7e0 f960 	bl	8000ac8 <__aeabi_dcmpeq>
 8020808:	b110      	cbz	r0, 8020810 <_dtoa_r+0x6d8>
 802080a:	9b02      	ldr	r3, [sp, #8]
 802080c:	07d9      	lsls	r1, r3, #31
 802080e:	d40f      	bmi.n	8020830 <_dtoa_r+0x6f8>
 8020810:	4620      	mov	r0, r4
 8020812:	4659      	mov	r1, fp
 8020814:	f000 ff3a 	bl	802168c <_Bfree>
 8020818:	2300      	movs	r3, #0
 802081a:	702b      	strb	r3, [r5, #0]
 802081c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802081e:	f10a 0001 	add.w	r0, sl, #1
 8020822:	6018      	str	r0, [r3, #0]
 8020824:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020826:	2b00      	cmp	r3, #0
 8020828:	f43f acd8 	beq.w	80201dc <_dtoa_r+0xa4>
 802082c:	601d      	str	r5, [r3, #0]
 802082e:	e4d5      	b.n	80201dc <_dtoa_r+0xa4>
 8020830:	f8cd a01c 	str.w	sl, [sp, #28]
 8020834:	462b      	mov	r3, r5
 8020836:	461d      	mov	r5, r3
 8020838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802083c:	2a39      	cmp	r2, #57	; 0x39
 802083e:	d108      	bne.n	8020852 <_dtoa_r+0x71a>
 8020840:	9a00      	ldr	r2, [sp, #0]
 8020842:	429a      	cmp	r2, r3
 8020844:	d1f7      	bne.n	8020836 <_dtoa_r+0x6fe>
 8020846:	9a07      	ldr	r2, [sp, #28]
 8020848:	9900      	ldr	r1, [sp, #0]
 802084a:	3201      	adds	r2, #1
 802084c:	9207      	str	r2, [sp, #28]
 802084e:	2230      	movs	r2, #48	; 0x30
 8020850:	700a      	strb	r2, [r1, #0]
 8020852:	781a      	ldrb	r2, [r3, #0]
 8020854:	3201      	adds	r2, #1
 8020856:	701a      	strb	r2, [r3, #0]
 8020858:	e78c      	b.n	8020774 <_dtoa_r+0x63c>
 802085a:	4b7f      	ldr	r3, [pc, #508]	; (8020a58 <_dtoa_r+0x920>)
 802085c:	2200      	movs	r2, #0
 802085e:	f7df fecb 	bl	80005f8 <__aeabi_dmul>
 8020862:	2200      	movs	r2, #0
 8020864:	2300      	movs	r3, #0
 8020866:	4606      	mov	r6, r0
 8020868:	460f      	mov	r7, r1
 802086a:	f7e0 f92d 	bl	8000ac8 <__aeabi_dcmpeq>
 802086e:	2800      	cmp	r0, #0
 8020870:	d09b      	beq.n	80207aa <_dtoa_r+0x672>
 8020872:	e7cd      	b.n	8020810 <_dtoa_r+0x6d8>
 8020874:	9a08      	ldr	r2, [sp, #32]
 8020876:	2a00      	cmp	r2, #0
 8020878:	f000 80c4 	beq.w	8020a04 <_dtoa_r+0x8cc>
 802087c:	9a05      	ldr	r2, [sp, #20]
 802087e:	2a01      	cmp	r2, #1
 8020880:	f300 80a8 	bgt.w	80209d4 <_dtoa_r+0x89c>
 8020884:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020886:	2a00      	cmp	r2, #0
 8020888:	f000 80a0 	beq.w	80209cc <_dtoa_r+0x894>
 802088c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020890:	9e06      	ldr	r6, [sp, #24]
 8020892:	4645      	mov	r5, r8
 8020894:	9a04      	ldr	r2, [sp, #16]
 8020896:	2101      	movs	r1, #1
 8020898:	441a      	add	r2, r3
 802089a:	4620      	mov	r0, r4
 802089c:	4498      	add	r8, r3
 802089e:	9204      	str	r2, [sp, #16]
 80208a0:	f000 fffa 	bl	8021898 <__i2b>
 80208a4:	4607      	mov	r7, r0
 80208a6:	2d00      	cmp	r5, #0
 80208a8:	dd0b      	ble.n	80208c2 <_dtoa_r+0x78a>
 80208aa:	9b04      	ldr	r3, [sp, #16]
 80208ac:	2b00      	cmp	r3, #0
 80208ae:	dd08      	ble.n	80208c2 <_dtoa_r+0x78a>
 80208b0:	42ab      	cmp	r3, r5
 80208b2:	9a04      	ldr	r2, [sp, #16]
 80208b4:	bfa8      	it	ge
 80208b6:	462b      	movge	r3, r5
 80208b8:	eba8 0803 	sub.w	r8, r8, r3
 80208bc:	1aed      	subs	r5, r5, r3
 80208be:	1ad3      	subs	r3, r2, r3
 80208c0:	9304      	str	r3, [sp, #16]
 80208c2:	9b06      	ldr	r3, [sp, #24]
 80208c4:	b1fb      	cbz	r3, 8020906 <_dtoa_r+0x7ce>
 80208c6:	9b08      	ldr	r3, [sp, #32]
 80208c8:	2b00      	cmp	r3, #0
 80208ca:	f000 809f 	beq.w	8020a0c <_dtoa_r+0x8d4>
 80208ce:	2e00      	cmp	r6, #0
 80208d0:	dd11      	ble.n	80208f6 <_dtoa_r+0x7be>
 80208d2:	4639      	mov	r1, r7
 80208d4:	4632      	mov	r2, r6
 80208d6:	4620      	mov	r0, r4
 80208d8:	f001 f89a 	bl	8021a10 <__pow5mult>
 80208dc:	465a      	mov	r2, fp
 80208de:	4601      	mov	r1, r0
 80208e0:	4607      	mov	r7, r0
 80208e2:	4620      	mov	r0, r4
 80208e4:	f000 ffee 	bl	80218c4 <__multiply>
 80208e8:	4659      	mov	r1, fp
 80208ea:	9007      	str	r0, [sp, #28]
 80208ec:	4620      	mov	r0, r4
 80208ee:	f000 fecd 	bl	802168c <_Bfree>
 80208f2:	9b07      	ldr	r3, [sp, #28]
 80208f4:	469b      	mov	fp, r3
 80208f6:	9b06      	ldr	r3, [sp, #24]
 80208f8:	1b9a      	subs	r2, r3, r6
 80208fa:	d004      	beq.n	8020906 <_dtoa_r+0x7ce>
 80208fc:	4659      	mov	r1, fp
 80208fe:	4620      	mov	r0, r4
 8020900:	f001 f886 	bl	8021a10 <__pow5mult>
 8020904:	4683      	mov	fp, r0
 8020906:	2101      	movs	r1, #1
 8020908:	4620      	mov	r0, r4
 802090a:	f000 ffc5 	bl	8021898 <__i2b>
 802090e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020910:	2b00      	cmp	r3, #0
 8020912:	4606      	mov	r6, r0
 8020914:	dd7c      	ble.n	8020a10 <_dtoa_r+0x8d8>
 8020916:	461a      	mov	r2, r3
 8020918:	4601      	mov	r1, r0
 802091a:	4620      	mov	r0, r4
 802091c:	f001 f878 	bl	8021a10 <__pow5mult>
 8020920:	9b05      	ldr	r3, [sp, #20]
 8020922:	2b01      	cmp	r3, #1
 8020924:	4606      	mov	r6, r0
 8020926:	dd76      	ble.n	8020a16 <_dtoa_r+0x8de>
 8020928:	2300      	movs	r3, #0
 802092a:	9306      	str	r3, [sp, #24]
 802092c:	6933      	ldr	r3, [r6, #16]
 802092e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8020932:	6918      	ldr	r0, [r3, #16]
 8020934:	f000 ff60 	bl	80217f8 <__hi0bits>
 8020938:	f1c0 0020 	rsb	r0, r0, #32
 802093c:	9b04      	ldr	r3, [sp, #16]
 802093e:	4418      	add	r0, r3
 8020940:	f010 001f 	ands.w	r0, r0, #31
 8020944:	f000 8086 	beq.w	8020a54 <_dtoa_r+0x91c>
 8020948:	f1c0 0320 	rsb	r3, r0, #32
 802094c:	2b04      	cmp	r3, #4
 802094e:	dd7f      	ble.n	8020a50 <_dtoa_r+0x918>
 8020950:	f1c0 001c 	rsb	r0, r0, #28
 8020954:	9b04      	ldr	r3, [sp, #16]
 8020956:	4403      	add	r3, r0
 8020958:	4480      	add	r8, r0
 802095a:	4405      	add	r5, r0
 802095c:	9304      	str	r3, [sp, #16]
 802095e:	f1b8 0f00 	cmp.w	r8, #0
 8020962:	dd05      	ble.n	8020970 <_dtoa_r+0x838>
 8020964:	4659      	mov	r1, fp
 8020966:	4642      	mov	r2, r8
 8020968:	4620      	mov	r0, r4
 802096a:	f001 f8ab 	bl	8021ac4 <__lshift>
 802096e:	4683      	mov	fp, r0
 8020970:	9b04      	ldr	r3, [sp, #16]
 8020972:	2b00      	cmp	r3, #0
 8020974:	dd05      	ble.n	8020982 <_dtoa_r+0x84a>
 8020976:	4631      	mov	r1, r6
 8020978:	461a      	mov	r2, r3
 802097a:	4620      	mov	r0, r4
 802097c:	f001 f8a2 	bl	8021ac4 <__lshift>
 8020980:	4606      	mov	r6, r0
 8020982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020984:	2b00      	cmp	r3, #0
 8020986:	d069      	beq.n	8020a5c <_dtoa_r+0x924>
 8020988:	4631      	mov	r1, r6
 802098a:	4658      	mov	r0, fp
 802098c:	f001 f906 	bl	8021b9c <__mcmp>
 8020990:	2800      	cmp	r0, #0
 8020992:	da63      	bge.n	8020a5c <_dtoa_r+0x924>
 8020994:	2300      	movs	r3, #0
 8020996:	4659      	mov	r1, fp
 8020998:	220a      	movs	r2, #10
 802099a:	4620      	mov	r0, r4
 802099c:	f000 fe98 	bl	80216d0 <__multadd>
 80209a0:	9b08      	ldr	r3, [sp, #32]
 80209a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80209a6:	4683      	mov	fp, r0
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	f000 818f 	beq.w	8020ccc <_dtoa_r+0xb94>
 80209ae:	4639      	mov	r1, r7
 80209b0:	2300      	movs	r3, #0
 80209b2:	220a      	movs	r2, #10
 80209b4:	4620      	mov	r0, r4
 80209b6:	f000 fe8b 	bl	80216d0 <__multadd>
 80209ba:	f1b9 0f00 	cmp.w	r9, #0
 80209be:	4607      	mov	r7, r0
 80209c0:	f300 808e 	bgt.w	8020ae0 <_dtoa_r+0x9a8>
 80209c4:	9b05      	ldr	r3, [sp, #20]
 80209c6:	2b02      	cmp	r3, #2
 80209c8:	dc50      	bgt.n	8020a6c <_dtoa_r+0x934>
 80209ca:	e089      	b.n	8020ae0 <_dtoa_r+0x9a8>
 80209cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80209ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80209d2:	e75d      	b.n	8020890 <_dtoa_r+0x758>
 80209d4:	9b01      	ldr	r3, [sp, #4]
 80209d6:	1e5e      	subs	r6, r3, #1
 80209d8:	9b06      	ldr	r3, [sp, #24]
 80209da:	42b3      	cmp	r3, r6
 80209dc:	bfbf      	itttt	lt
 80209de:	9b06      	ldrlt	r3, [sp, #24]
 80209e0:	9606      	strlt	r6, [sp, #24]
 80209e2:	1af2      	sublt	r2, r6, r3
 80209e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80209e6:	bfb6      	itet	lt
 80209e8:	189b      	addlt	r3, r3, r2
 80209ea:	1b9e      	subge	r6, r3, r6
 80209ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80209ee:	9b01      	ldr	r3, [sp, #4]
 80209f0:	bfb8      	it	lt
 80209f2:	2600      	movlt	r6, #0
 80209f4:	2b00      	cmp	r3, #0
 80209f6:	bfb5      	itete	lt
 80209f8:	eba8 0503 	sublt.w	r5, r8, r3
 80209fc:	9b01      	ldrge	r3, [sp, #4]
 80209fe:	2300      	movlt	r3, #0
 8020a00:	4645      	movge	r5, r8
 8020a02:	e747      	b.n	8020894 <_dtoa_r+0x75c>
 8020a04:	9e06      	ldr	r6, [sp, #24]
 8020a06:	9f08      	ldr	r7, [sp, #32]
 8020a08:	4645      	mov	r5, r8
 8020a0a:	e74c      	b.n	80208a6 <_dtoa_r+0x76e>
 8020a0c:	9a06      	ldr	r2, [sp, #24]
 8020a0e:	e775      	b.n	80208fc <_dtoa_r+0x7c4>
 8020a10:	9b05      	ldr	r3, [sp, #20]
 8020a12:	2b01      	cmp	r3, #1
 8020a14:	dc18      	bgt.n	8020a48 <_dtoa_r+0x910>
 8020a16:	9b02      	ldr	r3, [sp, #8]
 8020a18:	b9b3      	cbnz	r3, 8020a48 <_dtoa_r+0x910>
 8020a1a:	9b03      	ldr	r3, [sp, #12]
 8020a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020a20:	b9a3      	cbnz	r3, 8020a4c <_dtoa_r+0x914>
 8020a22:	9b03      	ldr	r3, [sp, #12]
 8020a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020a28:	0d1b      	lsrs	r3, r3, #20
 8020a2a:	051b      	lsls	r3, r3, #20
 8020a2c:	b12b      	cbz	r3, 8020a3a <_dtoa_r+0x902>
 8020a2e:	9b04      	ldr	r3, [sp, #16]
 8020a30:	3301      	adds	r3, #1
 8020a32:	9304      	str	r3, [sp, #16]
 8020a34:	f108 0801 	add.w	r8, r8, #1
 8020a38:	2301      	movs	r3, #1
 8020a3a:	9306      	str	r3, [sp, #24]
 8020a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020a3e:	2b00      	cmp	r3, #0
 8020a40:	f47f af74 	bne.w	802092c <_dtoa_r+0x7f4>
 8020a44:	2001      	movs	r0, #1
 8020a46:	e779      	b.n	802093c <_dtoa_r+0x804>
 8020a48:	2300      	movs	r3, #0
 8020a4a:	e7f6      	b.n	8020a3a <_dtoa_r+0x902>
 8020a4c:	9b02      	ldr	r3, [sp, #8]
 8020a4e:	e7f4      	b.n	8020a3a <_dtoa_r+0x902>
 8020a50:	d085      	beq.n	802095e <_dtoa_r+0x826>
 8020a52:	4618      	mov	r0, r3
 8020a54:	301c      	adds	r0, #28
 8020a56:	e77d      	b.n	8020954 <_dtoa_r+0x81c>
 8020a58:	40240000 	.word	0x40240000
 8020a5c:	9b01      	ldr	r3, [sp, #4]
 8020a5e:	2b00      	cmp	r3, #0
 8020a60:	dc38      	bgt.n	8020ad4 <_dtoa_r+0x99c>
 8020a62:	9b05      	ldr	r3, [sp, #20]
 8020a64:	2b02      	cmp	r3, #2
 8020a66:	dd35      	ble.n	8020ad4 <_dtoa_r+0x99c>
 8020a68:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8020a6c:	f1b9 0f00 	cmp.w	r9, #0
 8020a70:	d10d      	bne.n	8020a8e <_dtoa_r+0x956>
 8020a72:	4631      	mov	r1, r6
 8020a74:	464b      	mov	r3, r9
 8020a76:	2205      	movs	r2, #5
 8020a78:	4620      	mov	r0, r4
 8020a7a:	f000 fe29 	bl	80216d0 <__multadd>
 8020a7e:	4601      	mov	r1, r0
 8020a80:	4606      	mov	r6, r0
 8020a82:	4658      	mov	r0, fp
 8020a84:	f001 f88a 	bl	8021b9c <__mcmp>
 8020a88:	2800      	cmp	r0, #0
 8020a8a:	f73f adbd 	bgt.w	8020608 <_dtoa_r+0x4d0>
 8020a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a90:	9d00      	ldr	r5, [sp, #0]
 8020a92:	ea6f 0a03 	mvn.w	sl, r3
 8020a96:	f04f 0800 	mov.w	r8, #0
 8020a9a:	4631      	mov	r1, r6
 8020a9c:	4620      	mov	r0, r4
 8020a9e:	f000 fdf5 	bl	802168c <_Bfree>
 8020aa2:	2f00      	cmp	r7, #0
 8020aa4:	f43f aeb4 	beq.w	8020810 <_dtoa_r+0x6d8>
 8020aa8:	f1b8 0f00 	cmp.w	r8, #0
 8020aac:	d005      	beq.n	8020aba <_dtoa_r+0x982>
 8020aae:	45b8      	cmp	r8, r7
 8020ab0:	d003      	beq.n	8020aba <_dtoa_r+0x982>
 8020ab2:	4641      	mov	r1, r8
 8020ab4:	4620      	mov	r0, r4
 8020ab6:	f000 fde9 	bl	802168c <_Bfree>
 8020aba:	4639      	mov	r1, r7
 8020abc:	4620      	mov	r0, r4
 8020abe:	f000 fde5 	bl	802168c <_Bfree>
 8020ac2:	e6a5      	b.n	8020810 <_dtoa_r+0x6d8>
 8020ac4:	2600      	movs	r6, #0
 8020ac6:	4637      	mov	r7, r6
 8020ac8:	e7e1      	b.n	8020a8e <_dtoa_r+0x956>
 8020aca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020acc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020ad0:	4637      	mov	r7, r6
 8020ad2:	e599      	b.n	8020608 <_dtoa_r+0x4d0>
 8020ad4:	9b08      	ldr	r3, [sp, #32]
 8020ad6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8020ada:	2b00      	cmp	r3, #0
 8020adc:	f000 80fd 	beq.w	8020cda <_dtoa_r+0xba2>
 8020ae0:	2d00      	cmp	r5, #0
 8020ae2:	dd05      	ble.n	8020af0 <_dtoa_r+0x9b8>
 8020ae4:	4639      	mov	r1, r7
 8020ae6:	462a      	mov	r2, r5
 8020ae8:	4620      	mov	r0, r4
 8020aea:	f000 ffeb 	bl	8021ac4 <__lshift>
 8020aee:	4607      	mov	r7, r0
 8020af0:	9b06      	ldr	r3, [sp, #24]
 8020af2:	2b00      	cmp	r3, #0
 8020af4:	d05c      	beq.n	8020bb0 <_dtoa_r+0xa78>
 8020af6:	6879      	ldr	r1, [r7, #4]
 8020af8:	4620      	mov	r0, r4
 8020afa:	f000 fd87 	bl	802160c <_Balloc>
 8020afe:	4605      	mov	r5, r0
 8020b00:	b928      	cbnz	r0, 8020b0e <_dtoa_r+0x9d6>
 8020b02:	4b80      	ldr	r3, [pc, #512]	; (8020d04 <_dtoa_r+0xbcc>)
 8020b04:	4602      	mov	r2, r0
 8020b06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8020b0a:	f7ff bb2e 	b.w	802016a <_dtoa_r+0x32>
 8020b0e:	693a      	ldr	r2, [r7, #16]
 8020b10:	3202      	adds	r2, #2
 8020b12:	0092      	lsls	r2, r2, #2
 8020b14:	f107 010c 	add.w	r1, r7, #12
 8020b18:	300c      	adds	r0, #12
 8020b1a:	f7fd fa9b 	bl	801e054 <memcpy>
 8020b1e:	2201      	movs	r2, #1
 8020b20:	4629      	mov	r1, r5
 8020b22:	4620      	mov	r0, r4
 8020b24:	f000 ffce 	bl	8021ac4 <__lshift>
 8020b28:	9b00      	ldr	r3, [sp, #0]
 8020b2a:	3301      	adds	r3, #1
 8020b2c:	9301      	str	r3, [sp, #4]
 8020b2e:	9b00      	ldr	r3, [sp, #0]
 8020b30:	444b      	add	r3, r9
 8020b32:	9307      	str	r3, [sp, #28]
 8020b34:	9b02      	ldr	r3, [sp, #8]
 8020b36:	f003 0301 	and.w	r3, r3, #1
 8020b3a:	46b8      	mov	r8, r7
 8020b3c:	9306      	str	r3, [sp, #24]
 8020b3e:	4607      	mov	r7, r0
 8020b40:	9b01      	ldr	r3, [sp, #4]
 8020b42:	4631      	mov	r1, r6
 8020b44:	3b01      	subs	r3, #1
 8020b46:	4658      	mov	r0, fp
 8020b48:	9302      	str	r3, [sp, #8]
 8020b4a:	f7ff fa67 	bl	802001c <quorem>
 8020b4e:	4603      	mov	r3, r0
 8020b50:	3330      	adds	r3, #48	; 0x30
 8020b52:	9004      	str	r0, [sp, #16]
 8020b54:	4641      	mov	r1, r8
 8020b56:	4658      	mov	r0, fp
 8020b58:	9308      	str	r3, [sp, #32]
 8020b5a:	f001 f81f 	bl	8021b9c <__mcmp>
 8020b5e:	463a      	mov	r2, r7
 8020b60:	4681      	mov	r9, r0
 8020b62:	4631      	mov	r1, r6
 8020b64:	4620      	mov	r0, r4
 8020b66:	f001 f835 	bl	8021bd4 <__mdiff>
 8020b6a:	68c2      	ldr	r2, [r0, #12]
 8020b6c:	9b08      	ldr	r3, [sp, #32]
 8020b6e:	4605      	mov	r5, r0
 8020b70:	bb02      	cbnz	r2, 8020bb4 <_dtoa_r+0xa7c>
 8020b72:	4601      	mov	r1, r0
 8020b74:	4658      	mov	r0, fp
 8020b76:	f001 f811 	bl	8021b9c <__mcmp>
 8020b7a:	9b08      	ldr	r3, [sp, #32]
 8020b7c:	4602      	mov	r2, r0
 8020b7e:	4629      	mov	r1, r5
 8020b80:	4620      	mov	r0, r4
 8020b82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8020b86:	f000 fd81 	bl	802168c <_Bfree>
 8020b8a:	9b05      	ldr	r3, [sp, #20]
 8020b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020b8e:	9d01      	ldr	r5, [sp, #4]
 8020b90:	ea43 0102 	orr.w	r1, r3, r2
 8020b94:	9b06      	ldr	r3, [sp, #24]
 8020b96:	430b      	orrs	r3, r1
 8020b98:	9b08      	ldr	r3, [sp, #32]
 8020b9a:	d10d      	bne.n	8020bb8 <_dtoa_r+0xa80>
 8020b9c:	2b39      	cmp	r3, #57	; 0x39
 8020b9e:	d029      	beq.n	8020bf4 <_dtoa_r+0xabc>
 8020ba0:	f1b9 0f00 	cmp.w	r9, #0
 8020ba4:	dd01      	ble.n	8020baa <_dtoa_r+0xa72>
 8020ba6:	9b04      	ldr	r3, [sp, #16]
 8020ba8:	3331      	adds	r3, #49	; 0x31
 8020baa:	9a02      	ldr	r2, [sp, #8]
 8020bac:	7013      	strb	r3, [r2, #0]
 8020bae:	e774      	b.n	8020a9a <_dtoa_r+0x962>
 8020bb0:	4638      	mov	r0, r7
 8020bb2:	e7b9      	b.n	8020b28 <_dtoa_r+0x9f0>
 8020bb4:	2201      	movs	r2, #1
 8020bb6:	e7e2      	b.n	8020b7e <_dtoa_r+0xa46>
 8020bb8:	f1b9 0f00 	cmp.w	r9, #0
 8020bbc:	db06      	blt.n	8020bcc <_dtoa_r+0xa94>
 8020bbe:	9905      	ldr	r1, [sp, #20]
 8020bc0:	ea41 0909 	orr.w	r9, r1, r9
 8020bc4:	9906      	ldr	r1, [sp, #24]
 8020bc6:	ea59 0101 	orrs.w	r1, r9, r1
 8020bca:	d120      	bne.n	8020c0e <_dtoa_r+0xad6>
 8020bcc:	2a00      	cmp	r2, #0
 8020bce:	ddec      	ble.n	8020baa <_dtoa_r+0xa72>
 8020bd0:	4659      	mov	r1, fp
 8020bd2:	2201      	movs	r2, #1
 8020bd4:	4620      	mov	r0, r4
 8020bd6:	9301      	str	r3, [sp, #4]
 8020bd8:	f000 ff74 	bl	8021ac4 <__lshift>
 8020bdc:	4631      	mov	r1, r6
 8020bde:	4683      	mov	fp, r0
 8020be0:	f000 ffdc 	bl	8021b9c <__mcmp>
 8020be4:	2800      	cmp	r0, #0
 8020be6:	9b01      	ldr	r3, [sp, #4]
 8020be8:	dc02      	bgt.n	8020bf0 <_dtoa_r+0xab8>
 8020bea:	d1de      	bne.n	8020baa <_dtoa_r+0xa72>
 8020bec:	07da      	lsls	r2, r3, #31
 8020bee:	d5dc      	bpl.n	8020baa <_dtoa_r+0xa72>
 8020bf0:	2b39      	cmp	r3, #57	; 0x39
 8020bf2:	d1d8      	bne.n	8020ba6 <_dtoa_r+0xa6e>
 8020bf4:	9a02      	ldr	r2, [sp, #8]
 8020bf6:	2339      	movs	r3, #57	; 0x39
 8020bf8:	7013      	strb	r3, [r2, #0]
 8020bfa:	462b      	mov	r3, r5
 8020bfc:	461d      	mov	r5, r3
 8020bfe:	3b01      	subs	r3, #1
 8020c00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8020c04:	2a39      	cmp	r2, #57	; 0x39
 8020c06:	d050      	beq.n	8020caa <_dtoa_r+0xb72>
 8020c08:	3201      	adds	r2, #1
 8020c0a:	701a      	strb	r2, [r3, #0]
 8020c0c:	e745      	b.n	8020a9a <_dtoa_r+0x962>
 8020c0e:	2a00      	cmp	r2, #0
 8020c10:	dd03      	ble.n	8020c1a <_dtoa_r+0xae2>
 8020c12:	2b39      	cmp	r3, #57	; 0x39
 8020c14:	d0ee      	beq.n	8020bf4 <_dtoa_r+0xabc>
 8020c16:	3301      	adds	r3, #1
 8020c18:	e7c7      	b.n	8020baa <_dtoa_r+0xa72>
 8020c1a:	9a01      	ldr	r2, [sp, #4]
 8020c1c:	9907      	ldr	r1, [sp, #28]
 8020c1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020c22:	428a      	cmp	r2, r1
 8020c24:	d02a      	beq.n	8020c7c <_dtoa_r+0xb44>
 8020c26:	4659      	mov	r1, fp
 8020c28:	2300      	movs	r3, #0
 8020c2a:	220a      	movs	r2, #10
 8020c2c:	4620      	mov	r0, r4
 8020c2e:	f000 fd4f 	bl	80216d0 <__multadd>
 8020c32:	45b8      	cmp	r8, r7
 8020c34:	4683      	mov	fp, r0
 8020c36:	f04f 0300 	mov.w	r3, #0
 8020c3a:	f04f 020a 	mov.w	r2, #10
 8020c3e:	4641      	mov	r1, r8
 8020c40:	4620      	mov	r0, r4
 8020c42:	d107      	bne.n	8020c54 <_dtoa_r+0xb1c>
 8020c44:	f000 fd44 	bl	80216d0 <__multadd>
 8020c48:	4680      	mov	r8, r0
 8020c4a:	4607      	mov	r7, r0
 8020c4c:	9b01      	ldr	r3, [sp, #4]
 8020c4e:	3301      	adds	r3, #1
 8020c50:	9301      	str	r3, [sp, #4]
 8020c52:	e775      	b.n	8020b40 <_dtoa_r+0xa08>
 8020c54:	f000 fd3c 	bl	80216d0 <__multadd>
 8020c58:	4639      	mov	r1, r7
 8020c5a:	4680      	mov	r8, r0
 8020c5c:	2300      	movs	r3, #0
 8020c5e:	220a      	movs	r2, #10
 8020c60:	4620      	mov	r0, r4
 8020c62:	f000 fd35 	bl	80216d0 <__multadd>
 8020c66:	4607      	mov	r7, r0
 8020c68:	e7f0      	b.n	8020c4c <_dtoa_r+0xb14>
 8020c6a:	f1b9 0f00 	cmp.w	r9, #0
 8020c6e:	9a00      	ldr	r2, [sp, #0]
 8020c70:	bfcc      	ite	gt
 8020c72:	464d      	movgt	r5, r9
 8020c74:	2501      	movle	r5, #1
 8020c76:	4415      	add	r5, r2
 8020c78:	f04f 0800 	mov.w	r8, #0
 8020c7c:	4659      	mov	r1, fp
 8020c7e:	2201      	movs	r2, #1
 8020c80:	4620      	mov	r0, r4
 8020c82:	9301      	str	r3, [sp, #4]
 8020c84:	f000 ff1e 	bl	8021ac4 <__lshift>
 8020c88:	4631      	mov	r1, r6
 8020c8a:	4683      	mov	fp, r0
 8020c8c:	f000 ff86 	bl	8021b9c <__mcmp>
 8020c90:	2800      	cmp	r0, #0
 8020c92:	dcb2      	bgt.n	8020bfa <_dtoa_r+0xac2>
 8020c94:	d102      	bne.n	8020c9c <_dtoa_r+0xb64>
 8020c96:	9b01      	ldr	r3, [sp, #4]
 8020c98:	07db      	lsls	r3, r3, #31
 8020c9a:	d4ae      	bmi.n	8020bfa <_dtoa_r+0xac2>
 8020c9c:	462b      	mov	r3, r5
 8020c9e:	461d      	mov	r5, r3
 8020ca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020ca4:	2a30      	cmp	r2, #48	; 0x30
 8020ca6:	d0fa      	beq.n	8020c9e <_dtoa_r+0xb66>
 8020ca8:	e6f7      	b.n	8020a9a <_dtoa_r+0x962>
 8020caa:	9a00      	ldr	r2, [sp, #0]
 8020cac:	429a      	cmp	r2, r3
 8020cae:	d1a5      	bne.n	8020bfc <_dtoa_r+0xac4>
 8020cb0:	f10a 0a01 	add.w	sl, sl, #1
 8020cb4:	2331      	movs	r3, #49	; 0x31
 8020cb6:	e779      	b.n	8020bac <_dtoa_r+0xa74>
 8020cb8:	4b13      	ldr	r3, [pc, #76]	; (8020d08 <_dtoa_r+0xbd0>)
 8020cba:	f7ff baaf 	b.w	802021c <_dtoa_r+0xe4>
 8020cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020cc0:	2b00      	cmp	r3, #0
 8020cc2:	f47f aa86 	bne.w	80201d2 <_dtoa_r+0x9a>
 8020cc6:	4b11      	ldr	r3, [pc, #68]	; (8020d0c <_dtoa_r+0xbd4>)
 8020cc8:	f7ff baa8 	b.w	802021c <_dtoa_r+0xe4>
 8020ccc:	f1b9 0f00 	cmp.w	r9, #0
 8020cd0:	dc03      	bgt.n	8020cda <_dtoa_r+0xba2>
 8020cd2:	9b05      	ldr	r3, [sp, #20]
 8020cd4:	2b02      	cmp	r3, #2
 8020cd6:	f73f aec9 	bgt.w	8020a6c <_dtoa_r+0x934>
 8020cda:	9d00      	ldr	r5, [sp, #0]
 8020cdc:	4631      	mov	r1, r6
 8020cde:	4658      	mov	r0, fp
 8020ce0:	f7ff f99c 	bl	802001c <quorem>
 8020ce4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8020ce8:	f805 3b01 	strb.w	r3, [r5], #1
 8020cec:	9a00      	ldr	r2, [sp, #0]
 8020cee:	1aaa      	subs	r2, r5, r2
 8020cf0:	4591      	cmp	r9, r2
 8020cf2:	ddba      	ble.n	8020c6a <_dtoa_r+0xb32>
 8020cf4:	4659      	mov	r1, fp
 8020cf6:	2300      	movs	r3, #0
 8020cf8:	220a      	movs	r2, #10
 8020cfa:	4620      	mov	r0, r4
 8020cfc:	f000 fce8 	bl	80216d0 <__multadd>
 8020d00:	4683      	mov	fp, r0
 8020d02:	e7eb      	b.n	8020cdc <_dtoa_r+0xba4>
 8020d04:	08026f50 	.word	0x08026f50
 8020d08:	08027151 	.word	0x08027151
 8020d0c:	08026ee4 	.word	0x08026ee4

08020d10 <__errno>:
 8020d10:	4b01      	ldr	r3, [pc, #4]	; (8020d18 <__errno+0x8>)
 8020d12:	6818      	ldr	r0, [r3, #0]
 8020d14:	4770      	bx	lr
 8020d16:	bf00      	nop
 8020d18:	20000360 	.word	0x20000360

08020d1c <__sflush_r>:
 8020d1c:	898a      	ldrh	r2, [r1, #12]
 8020d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d22:	4605      	mov	r5, r0
 8020d24:	0710      	lsls	r0, r2, #28
 8020d26:	460c      	mov	r4, r1
 8020d28:	d458      	bmi.n	8020ddc <__sflush_r+0xc0>
 8020d2a:	684b      	ldr	r3, [r1, #4]
 8020d2c:	2b00      	cmp	r3, #0
 8020d2e:	dc05      	bgt.n	8020d3c <__sflush_r+0x20>
 8020d30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	dc02      	bgt.n	8020d3c <__sflush_r+0x20>
 8020d36:	2000      	movs	r0, #0
 8020d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020d3e:	2e00      	cmp	r6, #0
 8020d40:	d0f9      	beq.n	8020d36 <__sflush_r+0x1a>
 8020d42:	2300      	movs	r3, #0
 8020d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020d48:	682f      	ldr	r7, [r5, #0]
 8020d4a:	602b      	str	r3, [r5, #0]
 8020d4c:	d032      	beq.n	8020db4 <__sflush_r+0x98>
 8020d4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020d50:	89a3      	ldrh	r3, [r4, #12]
 8020d52:	075a      	lsls	r2, r3, #29
 8020d54:	d505      	bpl.n	8020d62 <__sflush_r+0x46>
 8020d56:	6863      	ldr	r3, [r4, #4]
 8020d58:	1ac0      	subs	r0, r0, r3
 8020d5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020d5c:	b10b      	cbz	r3, 8020d62 <__sflush_r+0x46>
 8020d5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020d60:	1ac0      	subs	r0, r0, r3
 8020d62:	2300      	movs	r3, #0
 8020d64:	4602      	mov	r2, r0
 8020d66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020d68:	6a21      	ldr	r1, [r4, #32]
 8020d6a:	4628      	mov	r0, r5
 8020d6c:	47b0      	blx	r6
 8020d6e:	1c43      	adds	r3, r0, #1
 8020d70:	89a3      	ldrh	r3, [r4, #12]
 8020d72:	d106      	bne.n	8020d82 <__sflush_r+0x66>
 8020d74:	6829      	ldr	r1, [r5, #0]
 8020d76:	291d      	cmp	r1, #29
 8020d78:	d82c      	bhi.n	8020dd4 <__sflush_r+0xb8>
 8020d7a:	4a2a      	ldr	r2, [pc, #168]	; (8020e24 <__sflush_r+0x108>)
 8020d7c:	40ca      	lsrs	r2, r1
 8020d7e:	07d6      	lsls	r6, r2, #31
 8020d80:	d528      	bpl.n	8020dd4 <__sflush_r+0xb8>
 8020d82:	2200      	movs	r2, #0
 8020d84:	6062      	str	r2, [r4, #4]
 8020d86:	04d9      	lsls	r1, r3, #19
 8020d88:	6922      	ldr	r2, [r4, #16]
 8020d8a:	6022      	str	r2, [r4, #0]
 8020d8c:	d504      	bpl.n	8020d98 <__sflush_r+0x7c>
 8020d8e:	1c42      	adds	r2, r0, #1
 8020d90:	d101      	bne.n	8020d96 <__sflush_r+0x7a>
 8020d92:	682b      	ldr	r3, [r5, #0]
 8020d94:	b903      	cbnz	r3, 8020d98 <__sflush_r+0x7c>
 8020d96:	6560      	str	r0, [r4, #84]	; 0x54
 8020d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020d9a:	602f      	str	r7, [r5, #0]
 8020d9c:	2900      	cmp	r1, #0
 8020d9e:	d0ca      	beq.n	8020d36 <__sflush_r+0x1a>
 8020da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020da4:	4299      	cmp	r1, r3
 8020da6:	d002      	beq.n	8020dae <__sflush_r+0x92>
 8020da8:	4628      	mov	r0, r5
 8020daa:	f7fd f983 	bl	801e0b4 <_free_r>
 8020dae:	2000      	movs	r0, #0
 8020db0:	6360      	str	r0, [r4, #52]	; 0x34
 8020db2:	e7c1      	b.n	8020d38 <__sflush_r+0x1c>
 8020db4:	6a21      	ldr	r1, [r4, #32]
 8020db6:	2301      	movs	r3, #1
 8020db8:	4628      	mov	r0, r5
 8020dba:	47b0      	blx	r6
 8020dbc:	1c41      	adds	r1, r0, #1
 8020dbe:	d1c7      	bne.n	8020d50 <__sflush_r+0x34>
 8020dc0:	682b      	ldr	r3, [r5, #0]
 8020dc2:	2b00      	cmp	r3, #0
 8020dc4:	d0c4      	beq.n	8020d50 <__sflush_r+0x34>
 8020dc6:	2b1d      	cmp	r3, #29
 8020dc8:	d001      	beq.n	8020dce <__sflush_r+0xb2>
 8020dca:	2b16      	cmp	r3, #22
 8020dcc:	d101      	bne.n	8020dd2 <__sflush_r+0xb6>
 8020dce:	602f      	str	r7, [r5, #0]
 8020dd0:	e7b1      	b.n	8020d36 <__sflush_r+0x1a>
 8020dd2:	89a3      	ldrh	r3, [r4, #12]
 8020dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020dd8:	81a3      	strh	r3, [r4, #12]
 8020dda:	e7ad      	b.n	8020d38 <__sflush_r+0x1c>
 8020ddc:	690f      	ldr	r7, [r1, #16]
 8020dde:	2f00      	cmp	r7, #0
 8020de0:	d0a9      	beq.n	8020d36 <__sflush_r+0x1a>
 8020de2:	0793      	lsls	r3, r2, #30
 8020de4:	680e      	ldr	r6, [r1, #0]
 8020de6:	bf08      	it	eq
 8020de8:	694b      	ldreq	r3, [r1, #20]
 8020dea:	600f      	str	r7, [r1, #0]
 8020dec:	bf18      	it	ne
 8020dee:	2300      	movne	r3, #0
 8020df0:	eba6 0807 	sub.w	r8, r6, r7
 8020df4:	608b      	str	r3, [r1, #8]
 8020df6:	f1b8 0f00 	cmp.w	r8, #0
 8020dfa:	dd9c      	ble.n	8020d36 <__sflush_r+0x1a>
 8020dfc:	6a21      	ldr	r1, [r4, #32]
 8020dfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020e00:	4643      	mov	r3, r8
 8020e02:	463a      	mov	r2, r7
 8020e04:	4628      	mov	r0, r5
 8020e06:	47b0      	blx	r6
 8020e08:	2800      	cmp	r0, #0
 8020e0a:	dc06      	bgt.n	8020e1a <__sflush_r+0xfe>
 8020e0c:	89a3      	ldrh	r3, [r4, #12]
 8020e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020e12:	81a3      	strh	r3, [r4, #12]
 8020e14:	f04f 30ff 	mov.w	r0, #4294967295
 8020e18:	e78e      	b.n	8020d38 <__sflush_r+0x1c>
 8020e1a:	4407      	add	r7, r0
 8020e1c:	eba8 0800 	sub.w	r8, r8, r0
 8020e20:	e7e9      	b.n	8020df6 <__sflush_r+0xda>
 8020e22:	bf00      	nop
 8020e24:	20400001 	.word	0x20400001

08020e28 <_fflush_r>:
 8020e28:	b538      	push	{r3, r4, r5, lr}
 8020e2a:	690b      	ldr	r3, [r1, #16]
 8020e2c:	4605      	mov	r5, r0
 8020e2e:	460c      	mov	r4, r1
 8020e30:	b913      	cbnz	r3, 8020e38 <_fflush_r+0x10>
 8020e32:	2500      	movs	r5, #0
 8020e34:	4628      	mov	r0, r5
 8020e36:	bd38      	pop	{r3, r4, r5, pc}
 8020e38:	b118      	cbz	r0, 8020e42 <_fflush_r+0x1a>
 8020e3a:	6983      	ldr	r3, [r0, #24]
 8020e3c:	b90b      	cbnz	r3, 8020e42 <_fflush_r+0x1a>
 8020e3e:	f7fd f831 	bl	801dea4 <__sinit>
 8020e42:	4b14      	ldr	r3, [pc, #80]	; (8020e94 <_fflush_r+0x6c>)
 8020e44:	429c      	cmp	r4, r3
 8020e46:	d11b      	bne.n	8020e80 <_fflush_r+0x58>
 8020e48:	686c      	ldr	r4, [r5, #4]
 8020e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	d0ef      	beq.n	8020e32 <_fflush_r+0xa>
 8020e52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020e54:	07d0      	lsls	r0, r2, #31
 8020e56:	d404      	bmi.n	8020e62 <_fflush_r+0x3a>
 8020e58:	0599      	lsls	r1, r3, #22
 8020e5a:	d402      	bmi.n	8020e62 <_fflush_r+0x3a>
 8020e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020e5e:	f7e5 fefd 	bl	8006c5c <__retarget_lock_acquire_recursive>
 8020e62:	4628      	mov	r0, r5
 8020e64:	4621      	mov	r1, r4
 8020e66:	f7ff ff59 	bl	8020d1c <__sflush_r>
 8020e6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020e6c:	07da      	lsls	r2, r3, #31
 8020e6e:	4605      	mov	r5, r0
 8020e70:	d4e0      	bmi.n	8020e34 <_fflush_r+0xc>
 8020e72:	89a3      	ldrh	r3, [r4, #12]
 8020e74:	059b      	lsls	r3, r3, #22
 8020e76:	d4dd      	bmi.n	8020e34 <_fflush_r+0xc>
 8020e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020e7a:	f7e5 ff03 	bl	8006c84 <__retarget_lock_release_recursive>
 8020e7e:	e7d9      	b.n	8020e34 <_fflush_r+0xc>
 8020e80:	4b05      	ldr	r3, [pc, #20]	; (8020e98 <_fflush_r+0x70>)
 8020e82:	429c      	cmp	r4, r3
 8020e84:	d101      	bne.n	8020e8a <_fflush_r+0x62>
 8020e86:	68ac      	ldr	r4, [r5, #8]
 8020e88:	e7df      	b.n	8020e4a <_fflush_r+0x22>
 8020e8a:	4b04      	ldr	r3, [pc, #16]	; (8020e9c <_fflush_r+0x74>)
 8020e8c:	429c      	cmp	r4, r3
 8020e8e:	bf08      	it	eq
 8020e90:	68ec      	ldreq	r4, [r5, #12]
 8020e92:	e7da      	b.n	8020e4a <_fflush_r+0x22>
 8020e94:	08026d64 	.word	0x08026d64
 8020e98:	08026d84 	.word	0x08026d84
 8020e9c:	08026d44 	.word	0x08026d44

08020ea0 <fiprintf>:
 8020ea0:	b40e      	push	{r1, r2, r3}
 8020ea2:	b503      	push	{r0, r1, lr}
 8020ea4:	4601      	mov	r1, r0
 8020ea6:	ab03      	add	r3, sp, #12
 8020ea8:	4805      	ldr	r0, [pc, #20]	; (8020ec0 <fiprintf+0x20>)
 8020eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8020eae:	6800      	ldr	r0, [r0, #0]
 8020eb0:	9301      	str	r3, [sp, #4]
 8020eb2:	f001 fbcd 	bl	8022650 <_vfiprintf_r>
 8020eb6:	b002      	add	sp, #8
 8020eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8020ebc:	b003      	add	sp, #12
 8020ebe:	4770      	bx	lr
 8020ec0:	20000360 	.word	0x20000360

08020ec4 <rshift>:
 8020ec4:	6903      	ldr	r3, [r0, #16]
 8020ec6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8020eca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020ece:	ea4f 1261 	mov.w	r2, r1, asr #5
 8020ed2:	f100 0414 	add.w	r4, r0, #20
 8020ed6:	dd45      	ble.n	8020f64 <rshift+0xa0>
 8020ed8:	f011 011f 	ands.w	r1, r1, #31
 8020edc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8020ee0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8020ee4:	d10c      	bne.n	8020f00 <rshift+0x3c>
 8020ee6:	f100 0710 	add.w	r7, r0, #16
 8020eea:	4629      	mov	r1, r5
 8020eec:	42b1      	cmp	r1, r6
 8020eee:	d334      	bcc.n	8020f5a <rshift+0x96>
 8020ef0:	1a9b      	subs	r3, r3, r2
 8020ef2:	009b      	lsls	r3, r3, #2
 8020ef4:	1eea      	subs	r2, r5, #3
 8020ef6:	4296      	cmp	r6, r2
 8020ef8:	bf38      	it	cc
 8020efa:	2300      	movcc	r3, #0
 8020efc:	4423      	add	r3, r4
 8020efe:	e015      	b.n	8020f2c <rshift+0x68>
 8020f00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8020f04:	f1c1 0820 	rsb	r8, r1, #32
 8020f08:	40cf      	lsrs	r7, r1
 8020f0a:	f105 0e04 	add.w	lr, r5, #4
 8020f0e:	46a1      	mov	r9, r4
 8020f10:	4576      	cmp	r6, lr
 8020f12:	46f4      	mov	ip, lr
 8020f14:	d815      	bhi.n	8020f42 <rshift+0x7e>
 8020f16:	1a9b      	subs	r3, r3, r2
 8020f18:	009a      	lsls	r2, r3, #2
 8020f1a:	3a04      	subs	r2, #4
 8020f1c:	3501      	adds	r5, #1
 8020f1e:	42ae      	cmp	r6, r5
 8020f20:	bf38      	it	cc
 8020f22:	2200      	movcc	r2, #0
 8020f24:	18a3      	adds	r3, r4, r2
 8020f26:	50a7      	str	r7, [r4, r2]
 8020f28:	b107      	cbz	r7, 8020f2c <rshift+0x68>
 8020f2a:	3304      	adds	r3, #4
 8020f2c:	1b1a      	subs	r2, r3, r4
 8020f2e:	42a3      	cmp	r3, r4
 8020f30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8020f34:	bf08      	it	eq
 8020f36:	2300      	moveq	r3, #0
 8020f38:	6102      	str	r2, [r0, #16]
 8020f3a:	bf08      	it	eq
 8020f3c:	6143      	streq	r3, [r0, #20]
 8020f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020f42:	f8dc c000 	ldr.w	ip, [ip]
 8020f46:	fa0c fc08 	lsl.w	ip, ip, r8
 8020f4a:	ea4c 0707 	orr.w	r7, ip, r7
 8020f4e:	f849 7b04 	str.w	r7, [r9], #4
 8020f52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020f56:	40cf      	lsrs	r7, r1
 8020f58:	e7da      	b.n	8020f10 <rshift+0x4c>
 8020f5a:	f851 cb04 	ldr.w	ip, [r1], #4
 8020f5e:	f847 cf04 	str.w	ip, [r7, #4]!
 8020f62:	e7c3      	b.n	8020eec <rshift+0x28>
 8020f64:	4623      	mov	r3, r4
 8020f66:	e7e1      	b.n	8020f2c <rshift+0x68>

08020f68 <__hexdig_fun>:
 8020f68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8020f6c:	2b09      	cmp	r3, #9
 8020f6e:	d802      	bhi.n	8020f76 <__hexdig_fun+0xe>
 8020f70:	3820      	subs	r0, #32
 8020f72:	b2c0      	uxtb	r0, r0
 8020f74:	4770      	bx	lr
 8020f76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8020f7a:	2b05      	cmp	r3, #5
 8020f7c:	d801      	bhi.n	8020f82 <__hexdig_fun+0x1a>
 8020f7e:	3847      	subs	r0, #71	; 0x47
 8020f80:	e7f7      	b.n	8020f72 <__hexdig_fun+0xa>
 8020f82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8020f86:	2b05      	cmp	r3, #5
 8020f88:	d801      	bhi.n	8020f8e <__hexdig_fun+0x26>
 8020f8a:	3827      	subs	r0, #39	; 0x27
 8020f8c:	e7f1      	b.n	8020f72 <__hexdig_fun+0xa>
 8020f8e:	2000      	movs	r0, #0
 8020f90:	4770      	bx	lr
	...

08020f94 <__gethex>:
 8020f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f98:	ed2d 8b02 	vpush	{d8}
 8020f9c:	b089      	sub	sp, #36	; 0x24
 8020f9e:	ee08 0a10 	vmov	s16, r0
 8020fa2:	9304      	str	r3, [sp, #16]
 8020fa4:	4bbc      	ldr	r3, [pc, #752]	; (8021298 <__gethex+0x304>)
 8020fa6:	681b      	ldr	r3, [r3, #0]
 8020fa8:	9301      	str	r3, [sp, #4]
 8020faa:	4618      	mov	r0, r3
 8020fac:	468b      	mov	fp, r1
 8020fae:	4690      	mov	r8, r2
 8020fb0:	f7df f90e 	bl	80001d0 <strlen>
 8020fb4:	9b01      	ldr	r3, [sp, #4]
 8020fb6:	f8db 2000 	ldr.w	r2, [fp]
 8020fba:	4403      	add	r3, r0
 8020fbc:	4682      	mov	sl, r0
 8020fbe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8020fc2:	9305      	str	r3, [sp, #20]
 8020fc4:	1c93      	adds	r3, r2, #2
 8020fc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8020fca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8020fce:	32fe      	adds	r2, #254	; 0xfe
 8020fd0:	18d1      	adds	r1, r2, r3
 8020fd2:	461f      	mov	r7, r3
 8020fd4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8020fd8:	9100      	str	r1, [sp, #0]
 8020fda:	2830      	cmp	r0, #48	; 0x30
 8020fdc:	d0f8      	beq.n	8020fd0 <__gethex+0x3c>
 8020fde:	f7ff ffc3 	bl	8020f68 <__hexdig_fun>
 8020fe2:	4604      	mov	r4, r0
 8020fe4:	2800      	cmp	r0, #0
 8020fe6:	d13a      	bne.n	802105e <__gethex+0xca>
 8020fe8:	9901      	ldr	r1, [sp, #4]
 8020fea:	4652      	mov	r2, sl
 8020fec:	4638      	mov	r0, r7
 8020fee:	f7fe f8fb 	bl	801f1e8 <strncmp>
 8020ff2:	4605      	mov	r5, r0
 8020ff4:	2800      	cmp	r0, #0
 8020ff6:	d168      	bne.n	80210ca <__gethex+0x136>
 8020ff8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8020ffc:	eb07 060a 	add.w	r6, r7, sl
 8021000:	f7ff ffb2 	bl	8020f68 <__hexdig_fun>
 8021004:	2800      	cmp	r0, #0
 8021006:	d062      	beq.n	80210ce <__gethex+0x13a>
 8021008:	4633      	mov	r3, r6
 802100a:	7818      	ldrb	r0, [r3, #0]
 802100c:	2830      	cmp	r0, #48	; 0x30
 802100e:	461f      	mov	r7, r3
 8021010:	f103 0301 	add.w	r3, r3, #1
 8021014:	d0f9      	beq.n	802100a <__gethex+0x76>
 8021016:	f7ff ffa7 	bl	8020f68 <__hexdig_fun>
 802101a:	2301      	movs	r3, #1
 802101c:	fab0 f480 	clz	r4, r0
 8021020:	0964      	lsrs	r4, r4, #5
 8021022:	4635      	mov	r5, r6
 8021024:	9300      	str	r3, [sp, #0]
 8021026:	463a      	mov	r2, r7
 8021028:	4616      	mov	r6, r2
 802102a:	3201      	adds	r2, #1
 802102c:	7830      	ldrb	r0, [r6, #0]
 802102e:	f7ff ff9b 	bl	8020f68 <__hexdig_fun>
 8021032:	2800      	cmp	r0, #0
 8021034:	d1f8      	bne.n	8021028 <__gethex+0x94>
 8021036:	9901      	ldr	r1, [sp, #4]
 8021038:	4652      	mov	r2, sl
 802103a:	4630      	mov	r0, r6
 802103c:	f7fe f8d4 	bl	801f1e8 <strncmp>
 8021040:	b980      	cbnz	r0, 8021064 <__gethex+0xd0>
 8021042:	b94d      	cbnz	r5, 8021058 <__gethex+0xc4>
 8021044:	eb06 050a 	add.w	r5, r6, sl
 8021048:	462a      	mov	r2, r5
 802104a:	4616      	mov	r6, r2
 802104c:	3201      	adds	r2, #1
 802104e:	7830      	ldrb	r0, [r6, #0]
 8021050:	f7ff ff8a 	bl	8020f68 <__hexdig_fun>
 8021054:	2800      	cmp	r0, #0
 8021056:	d1f8      	bne.n	802104a <__gethex+0xb6>
 8021058:	1bad      	subs	r5, r5, r6
 802105a:	00ad      	lsls	r5, r5, #2
 802105c:	e004      	b.n	8021068 <__gethex+0xd4>
 802105e:	2400      	movs	r4, #0
 8021060:	4625      	mov	r5, r4
 8021062:	e7e0      	b.n	8021026 <__gethex+0x92>
 8021064:	2d00      	cmp	r5, #0
 8021066:	d1f7      	bne.n	8021058 <__gethex+0xc4>
 8021068:	7833      	ldrb	r3, [r6, #0]
 802106a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802106e:	2b50      	cmp	r3, #80	; 0x50
 8021070:	d13b      	bne.n	80210ea <__gethex+0x156>
 8021072:	7873      	ldrb	r3, [r6, #1]
 8021074:	2b2b      	cmp	r3, #43	; 0x2b
 8021076:	d02c      	beq.n	80210d2 <__gethex+0x13e>
 8021078:	2b2d      	cmp	r3, #45	; 0x2d
 802107a:	d02e      	beq.n	80210da <__gethex+0x146>
 802107c:	1c71      	adds	r1, r6, #1
 802107e:	f04f 0900 	mov.w	r9, #0
 8021082:	7808      	ldrb	r0, [r1, #0]
 8021084:	f7ff ff70 	bl	8020f68 <__hexdig_fun>
 8021088:	1e43      	subs	r3, r0, #1
 802108a:	b2db      	uxtb	r3, r3
 802108c:	2b18      	cmp	r3, #24
 802108e:	d82c      	bhi.n	80210ea <__gethex+0x156>
 8021090:	f1a0 0210 	sub.w	r2, r0, #16
 8021094:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021098:	f7ff ff66 	bl	8020f68 <__hexdig_fun>
 802109c:	1e43      	subs	r3, r0, #1
 802109e:	b2db      	uxtb	r3, r3
 80210a0:	2b18      	cmp	r3, #24
 80210a2:	d91d      	bls.n	80210e0 <__gethex+0x14c>
 80210a4:	f1b9 0f00 	cmp.w	r9, #0
 80210a8:	d000      	beq.n	80210ac <__gethex+0x118>
 80210aa:	4252      	negs	r2, r2
 80210ac:	4415      	add	r5, r2
 80210ae:	f8cb 1000 	str.w	r1, [fp]
 80210b2:	b1e4      	cbz	r4, 80210ee <__gethex+0x15a>
 80210b4:	9b00      	ldr	r3, [sp, #0]
 80210b6:	2b00      	cmp	r3, #0
 80210b8:	bf14      	ite	ne
 80210ba:	2700      	movne	r7, #0
 80210bc:	2706      	moveq	r7, #6
 80210be:	4638      	mov	r0, r7
 80210c0:	b009      	add	sp, #36	; 0x24
 80210c2:	ecbd 8b02 	vpop	{d8}
 80210c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210ca:	463e      	mov	r6, r7
 80210cc:	4625      	mov	r5, r4
 80210ce:	2401      	movs	r4, #1
 80210d0:	e7ca      	b.n	8021068 <__gethex+0xd4>
 80210d2:	f04f 0900 	mov.w	r9, #0
 80210d6:	1cb1      	adds	r1, r6, #2
 80210d8:	e7d3      	b.n	8021082 <__gethex+0xee>
 80210da:	f04f 0901 	mov.w	r9, #1
 80210de:	e7fa      	b.n	80210d6 <__gethex+0x142>
 80210e0:	230a      	movs	r3, #10
 80210e2:	fb03 0202 	mla	r2, r3, r2, r0
 80210e6:	3a10      	subs	r2, #16
 80210e8:	e7d4      	b.n	8021094 <__gethex+0x100>
 80210ea:	4631      	mov	r1, r6
 80210ec:	e7df      	b.n	80210ae <__gethex+0x11a>
 80210ee:	1bf3      	subs	r3, r6, r7
 80210f0:	3b01      	subs	r3, #1
 80210f2:	4621      	mov	r1, r4
 80210f4:	2b07      	cmp	r3, #7
 80210f6:	dc0b      	bgt.n	8021110 <__gethex+0x17c>
 80210f8:	ee18 0a10 	vmov	r0, s16
 80210fc:	f000 fa86 	bl	802160c <_Balloc>
 8021100:	4604      	mov	r4, r0
 8021102:	b940      	cbnz	r0, 8021116 <__gethex+0x182>
 8021104:	4b65      	ldr	r3, [pc, #404]	; (802129c <__gethex+0x308>)
 8021106:	4602      	mov	r2, r0
 8021108:	21de      	movs	r1, #222	; 0xde
 802110a:	4865      	ldr	r0, [pc, #404]	; (80212a0 <__gethex+0x30c>)
 802110c:	f7fe ff58 	bl	801ffc0 <__assert_func>
 8021110:	3101      	adds	r1, #1
 8021112:	105b      	asrs	r3, r3, #1
 8021114:	e7ee      	b.n	80210f4 <__gethex+0x160>
 8021116:	f100 0914 	add.w	r9, r0, #20
 802111a:	f04f 0b00 	mov.w	fp, #0
 802111e:	f1ca 0301 	rsb	r3, sl, #1
 8021122:	f8cd 9008 	str.w	r9, [sp, #8]
 8021126:	f8cd b000 	str.w	fp, [sp]
 802112a:	9306      	str	r3, [sp, #24]
 802112c:	42b7      	cmp	r7, r6
 802112e:	d340      	bcc.n	80211b2 <__gethex+0x21e>
 8021130:	9802      	ldr	r0, [sp, #8]
 8021132:	9b00      	ldr	r3, [sp, #0]
 8021134:	f840 3b04 	str.w	r3, [r0], #4
 8021138:	eba0 0009 	sub.w	r0, r0, r9
 802113c:	1080      	asrs	r0, r0, #2
 802113e:	0146      	lsls	r6, r0, #5
 8021140:	6120      	str	r0, [r4, #16]
 8021142:	4618      	mov	r0, r3
 8021144:	f000 fb58 	bl	80217f8 <__hi0bits>
 8021148:	1a30      	subs	r0, r6, r0
 802114a:	f8d8 6000 	ldr.w	r6, [r8]
 802114e:	42b0      	cmp	r0, r6
 8021150:	dd63      	ble.n	802121a <__gethex+0x286>
 8021152:	1b87      	subs	r7, r0, r6
 8021154:	4639      	mov	r1, r7
 8021156:	4620      	mov	r0, r4
 8021158:	f000 fef2 	bl	8021f40 <__any_on>
 802115c:	4682      	mov	sl, r0
 802115e:	b1a8      	cbz	r0, 802118c <__gethex+0x1f8>
 8021160:	1e7b      	subs	r3, r7, #1
 8021162:	1159      	asrs	r1, r3, #5
 8021164:	f003 021f 	and.w	r2, r3, #31
 8021168:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 802116c:	f04f 0a01 	mov.w	sl, #1
 8021170:	fa0a f202 	lsl.w	r2, sl, r2
 8021174:	420a      	tst	r2, r1
 8021176:	d009      	beq.n	802118c <__gethex+0x1f8>
 8021178:	4553      	cmp	r3, sl
 802117a:	dd05      	ble.n	8021188 <__gethex+0x1f4>
 802117c:	1eb9      	subs	r1, r7, #2
 802117e:	4620      	mov	r0, r4
 8021180:	f000 fede 	bl	8021f40 <__any_on>
 8021184:	2800      	cmp	r0, #0
 8021186:	d145      	bne.n	8021214 <__gethex+0x280>
 8021188:	f04f 0a02 	mov.w	sl, #2
 802118c:	4639      	mov	r1, r7
 802118e:	4620      	mov	r0, r4
 8021190:	f7ff fe98 	bl	8020ec4 <rshift>
 8021194:	443d      	add	r5, r7
 8021196:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802119a:	42ab      	cmp	r3, r5
 802119c:	da4c      	bge.n	8021238 <__gethex+0x2a4>
 802119e:	ee18 0a10 	vmov	r0, s16
 80211a2:	4621      	mov	r1, r4
 80211a4:	f000 fa72 	bl	802168c <_Bfree>
 80211a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80211aa:	2300      	movs	r3, #0
 80211ac:	6013      	str	r3, [r2, #0]
 80211ae:	27a3      	movs	r7, #163	; 0xa3
 80211b0:	e785      	b.n	80210be <__gethex+0x12a>
 80211b2:	1e73      	subs	r3, r6, #1
 80211b4:	9a05      	ldr	r2, [sp, #20]
 80211b6:	9303      	str	r3, [sp, #12]
 80211b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80211bc:	4293      	cmp	r3, r2
 80211be:	d019      	beq.n	80211f4 <__gethex+0x260>
 80211c0:	f1bb 0f20 	cmp.w	fp, #32
 80211c4:	d107      	bne.n	80211d6 <__gethex+0x242>
 80211c6:	9b02      	ldr	r3, [sp, #8]
 80211c8:	9a00      	ldr	r2, [sp, #0]
 80211ca:	f843 2b04 	str.w	r2, [r3], #4
 80211ce:	9302      	str	r3, [sp, #8]
 80211d0:	2300      	movs	r3, #0
 80211d2:	9300      	str	r3, [sp, #0]
 80211d4:	469b      	mov	fp, r3
 80211d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80211da:	f7ff fec5 	bl	8020f68 <__hexdig_fun>
 80211de:	9b00      	ldr	r3, [sp, #0]
 80211e0:	f000 000f 	and.w	r0, r0, #15
 80211e4:	fa00 f00b 	lsl.w	r0, r0, fp
 80211e8:	4303      	orrs	r3, r0
 80211ea:	9300      	str	r3, [sp, #0]
 80211ec:	f10b 0b04 	add.w	fp, fp, #4
 80211f0:	9b03      	ldr	r3, [sp, #12]
 80211f2:	e00d      	b.n	8021210 <__gethex+0x27c>
 80211f4:	9b03      	ldr	r3, [sp, #12]
 80211f6:	9a06      	ldr	r2, [sp, #24]
 80211f8:	4413      	add	r3, r2
 80211fa:	42bb      	cmp	r3, r7
 80211fc:	d3e0      	bcc.n	80211c0 <__gethex+0x22c>
 80211fe:	4618      	mov	r0, r3
 8021200:	9901      	ldr	r1, [sp, #4]
 8021202:	9307      	str	r3, [sp, #28]
 8021204:	4652      	mov	r2, sl
 8021206:	f7fd ffef 	bl	801f1e8 <strncmp>
 802120a:	9b07      	ldr	r3, [sp, #28]
 802120c:	2800      	cmp	r0, #0
 802120e:	d1d7      	bne.n	80211c0 <__gethex+0x22c>
 8021210:	461e      	mov	r6, r3
 8021212:	e78b      	b.n	802112c <__gethex+0x198>
 8021214:	f04f 0a03 	mov.w	sl, #3
 8021218:	e7b8      	b.n	802118c <__gethex+0x1f8>
 802121a:	da0a      	bge.n	8021232 <__gethex+0x29e>
 802121c:	1a37      	subs	r7, r6, r0
 802121e:	4621      	mov	r1, r4
 8021220:	ee18 0a10 	vmov	r0, s16
 8021224:	463a      	mov	r2, r7
 8021226:	f000 fc4d 	bl	8021ac4 <__lshift>
 802122a:	1bed      	subs	r5, r5, r7
 802122c:	4604      	mov	r4, r0
 802122e:	f100 0914 	add.w	r9, r0, #20
 8021232:	f04f 0a00 	mov.w	sl, #0
 8021236:	e7ae      	b.n	8021196 <__gethex+0x202>
 8021238:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802123c:	42a8      	cmp	r0, r5
 802123e:	dd72      	ble.n	8021326 <__gethex+0x392>
 8021240:	1b45      	subs	r5, r0, r5
 8021242:	42ae      	cmp	r6, r5
 8021244:	dc36      	bgt.n	80212b4 <__gethex+0x320>
 8021246:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802124a:	2b02      	cmp	r3, #2
 802124c:	d02a      	beq.n	80212a4 <__gethex+0x310>
 802124e:	2b03      	cmp	r3, #3
 8021250:	d02c      	beq.n	80212ac <__gethex+0x318>
 8021252:	2b01      	cmp	r3, #1
 8021254:	d115      	bne.n	8021282 <__gethex+0x2ee>
 8021256:	42ae      	cmp	r6, r5
 8021258:	d113      	bne.n	8021282 <__gethex+0x2ee>
 802125a:	2e01      	cmp	r6, #1
 802125c:	d10b      	bne.n	8021276 <__gethex+0x2e2>
 802125e:	9a04      	ldr	r2, [sp, #16]
 8021260:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021264:	6013      	str	r3, [r2, #0]
 8021266:	2301      	movs	r3, #1
 8021268:	6123      	str	r3, [r4, #16]
 802126a:	f8c9 3000 	str.w	r3, [r9]
 802126e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021270:	2762      	movs	r7, #98	; 0x62
 8021272:	601c      	str	r4, [r3, #0]
 8021274:	e723      	b.n	80210be <__gethex+0x12a>
 8021276:	1e71      	subs	r1, r6, #1
 8021278:	4620      	mov	r0, r4
 802127a:	f000 fe61 	bl	8021f40 <__any_on>
 802127e:	2800      	cmp	r0, #0
 8021280:	d1ed      	bne.n	802125e <__gethex+0x2ca>
 8021282:	ee18 0a10 	vmov	r0, s16
 8021286:	4621      	mov	r1, r4
 8021288:	f000 fa00 	bl	802168c <_Bfree>
 802128c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802128e:	2300      	movs	r3, #0
 8021290:	6013      	str	r3, [r2, #0]
 8021292:	2750      	movs	r7, #80	; 0x50
 8021294:	e713      	b.n	80210be <__gethex+0x12a>
 8021296:	bf00      	nop
 8021298:	08026fcc 	.word	0x08026fcc
 802129c:	08026f50 	.word	0x08026f50
 80212a0:	08026f61 	.word	0x08026f61
 80212a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80212a6:	2b00      	cmp	r3, #0
 80212a8:	d1eb      	bne.n	8021282 <__gethex+0x2ee>
 80212aa:	e7d8      	b.n	802125e <__gethex+0x2ca>
 80212ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80212ae:	2b00      	cmp	r3, #0
 80212b0:	d1d5      	bne.n	802125e <__gethex+0x2ca>
 80212b2:	e7e6      	b.n	8021282 <__gethex+0x2ee>
 80212b4:	1e6f      	subs	r7, r5, #1
 80212b6:	f1ba 0f00 	cmp.w	sl, #0
 80212ba:	d131      	bne.n	8021320 <__gethex+0x38c>
 80212bc:	b127      	cbz	r7, 80212c8 <__gethex+0x334>
 80212be:	4639      	mov	r1, r7
 80212c0:	4620      	mov	r0, r4
 80212c2:	f000 fe3d 	bl	8021f40 <__any_on>
 80212c6:	4682      	mov	sl, r0
 80212c8:	117b      	asrs	r3, r7, #5
 80212ca:	2101      	movs	r1, #1
 80212cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80212d0:	f007 071f 	and.w	r7, r7, #31
 80212d4:	fa01 f707 	lsl.w	r7, r1, r7
 80212d8:	421f      	tst	r7, r3
 80212da:	4629      	mov	r1, r5
 80212dc:	4620      	mov	r0, r4
 80212de:	bf18      	it	ne
 80212e0:	f04a 0a02 	orrne.w	sl, sl, #2
 80212e4:	1b76      	subs	r6, r6, r5
 80212e6:	f7ff fded 	bl	8020ec4 <rshift>
 80212ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80212ee:	2702      	movs	r7, #2
 80212f0:	f1ba 0f00 	cmp.w	sl, #0
 80212f4:	d048      	beq.n	8021388 <__gethex+0x3f4>
 80212f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80212fa:	2b02      	cmp	r3, #2
 80212fc:	d015      	beq.n	802132a <__gethex+0x396>
 80212fe:	2b03      	cmp	r3, #3
 8021300:	d017      	beq.n	8021332 <__gethex+0x39e>
 8021302:	2b01      	cmp	r3, #1
 8021304:	d109      	bne.n	802131a <__gethex+0x386>
 8021306:	f01a 0f02 	tst.w	sl, #2
 802130a:	d006      	beq.n	802131a <__gethex+0x386>
 802130c:	f8d9 0000 	ldr.w	r0, [r9]
 8021310:	ea4a 0a00 	orr.w	sl, sl, r0
 8021314:	f01a 0f01 	tst.w	sl, #1
 8021318:	d10e      	bne.n	8021338 <__gethex+0x3a4>
 802131a:	f047 0710 	orr.w	r7, r7, #16
 802131e:	e033      	b.n	8021388 <__gethex+0x3f4>
 8021320:	f04f 0a01 	mov.w	sl, #1
 8021324:	e7d0      	b.n	80212c8 <__gethex+0x334>
 8021326:	2701      	movs	r7, #1
 8021328:	e7e2      	b.n	80212f0 <__gethex+0x35c>
 802132a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802132c:	f1c3 0301 	rsb	r3, r3, #1
 8021330:	9315      	str	r3, [sp, #84]	; 0x54
 8021332:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021334:	2b00      	cmp	r3, #0
 8021336:	d0f0      	beq.n	802131a <__gethex+0x386>
 8021338:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802133c:	f104 0314 	add.w	r3, r4, #20
 8021340:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021344:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021348:	f04f 0c00 	mov.w	ip, #0
 802134c:	4618      	mov	r0, r3
 802134e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021352:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021356:	d01c      	beq.n	8021392 <__gethex+0x3fe>
 8021358:	3201      	adds	r2, #1
 802135a:	6002      	str	r2, [r0, #0]
 802135c:	2f02      	cmp	r7, #2
 802135e:	f104 0314 	add.w	r3, r4, #20
 8021362:	d13f      	bne.n	80213e4 <__gethex+0x450>
 8021364:	f8d8 2000 	ldr.w	r2, [r8]
 8021368:	3a01      	subs	r2, #1
 802136a:	42b2      	cmp	r2, r6
 802136c:	d10a      	bne.n	8021384 <__gethex+0x3f0>
 802136e:	1171      	asrs	r1, r6, #5
 8021370:	2201      	movs	r2, #1
 8021372:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021376:	f006 061f 	and.w	r6, r6, #31
 802137a:	fa02 f606 	lsl.w	r6, r2, r6
 802137e:	421e      	tst	r6, r3
 8021380:	bf18      	it	ne
 8021382:	4617      	movne	r7, r2
 8021384:	f047 0720 	orr.w	r7, r7, #32
 8021388:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802138a:	601c      	str	r4, [r3, #0]
 802138c:	9b04      	ldr	r3, [sp, #16]
 802138e:	601d      	str	r5, [r3, #0]
 8021390:	e695      	b.n	80210be <__gethex+0x12a>
 8021392:	4299      	cmp	r1, r3
 8021394:	f843 cc04 	str.w	ip, [r3, #-4]
 8021398:	d8d8      	bhi.n	802134c <__gethex+0x3b8>
 802139a:	68a3      	ldr	r3, [r4, #8]
 802139c:	459b      	cmp	fp, r3
 802139e:	db19      	blt.n	80213d4 <__gethex+0x440>
 80213a0:	6861      	ldr	r1, [r4, #4]
 80213a2:	ee18 0a10 	vmov	r0, s16
 80213a6:	3101      	adds	r1, #1
 80213a8:	f000 f930 	bl	802160c <_Balloc>
 80213ac:	4681      	mov	r9, r0
 80213ae:	b918      	cbnz	r0, 80213b8 <__gethex+0x424>
 80213b0:	4b1a      	ldr	r3, [pc, #104]	; (802141c <__gethex+0x488>)
 80213b2:	4602      	mov	r2, r0
 80213b4:	2184      	movs	r1, #132	; 0x84
 80213b6:	e6a8      	b.n	802110a <__gethex+0x176>
 80213b8:	6922      	ldr	r2, [r4, #16]
 80213ba:	3202      	adds	r2, #2
 80213bc:	f104 010c 	add.w	r1, r4, #12
 80213c0:	0092      	lsls	r2, r2, #2
 80213c2:	300c      	adds	r0, #12
 80213c4:	f7fc fe46 	bl	801e054 <memcpy>
 80213c8:	4621      	mov	r1, r4
 80213ca:	ee18 0a10 	vmov	r0, s16
 80213ce:	f000 f95d 	bl	802168c <_Bfree>
 80213d2:	464c      	mov	r4, r9
 80213d4:	6923      	ldr	r3, [r4, #16]
 80213d6:	1c5a      	adds	r2, r3, #1
 80213d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80213dc:	6122      	str	r2, [r4, #16]
 80213de:	2201      	movs	r2, #1
 80213e0:	615a      	str	r2, [r3, #20]
 80213e2:	e7bb      	b.n	802135c <__gethex+0x3c8>
 80213e4:	6922      	ldr	r2, [r4, #16]
 80213e6:	455a      	cmp	r2, fp
 80213e8:	dd0b      	ble.n	8021402 <__gethex+0x46e>
 80213ea:	2101      	movs	r1, #1
 80213ec:	4620      	mov	r0, r4
 80213ee:	f7ff fd69 	bl	8020ec4 <rshift>
 80213f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80213f6:	3501      	adds	r5, #1
 80213f8:	42ab      	cmp	r3, r5
 80213fa:	f6ff aed0 	blt.w	802119e <__gethex+0x20a>
 80213fe:	2701      	movs	r7, #1
 8021400:	e7c0      	b.n	8021384 <__gethex+0x3f0>
 8021402:	f016 061f 	ands.w	r6, r6, #31
 8021406:	d0fa      	beq.n	80213fe <__gethex+0x46a>
 8021408:	449a      	add	sl, r3
 802140a:	f1c6 0620 	rsb	r6, r6, #32
 802140e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8021412:	f000 f9f1 	bl	80217f8 <__hi0bits>
 8021416:	42b0      	cmp	r0, r6
 8021418:	dbe7      	blt.n	80213ea <__gethex+0x456>
 802141a:	e7f0      	b.n	80213fe <__gethex+0x46a>
 802141c:	08026f50 	.word	0x08026f50

08021420 <L_shift>:
 8021420:	f1c2 0208 	rsb	r2, r2, #8
 8021424:	0092      	lsls	r2, r2, #2
 8021426:	b570      	push	{r4, r5, r6, lr}
 8021428:	f1c2 0620 	rsb	r6, r2, #32
 802142c:	6843      	ldr	r3, [r0, #4]
 802142e:	6804      	ldr	r4, [r0, #0]
 8021430:	fa03 f506 	lsl.w	r5, r3, r6
 8021434:	432c      	orrs	r4, r5
 8021436:	40d3      	lsrs	r3, r2
 8021438:	6004      	str	r4, [r0, #0]
 802143a:	f840 3f04 	str.w	r3, [r0, #4]!
 802143e:	4288      	cmp	r0, r1
 8021440:	d3f4      	bcc.n	802142c <L_shift+0xc>
 8021442:	bd70      	pop	{r4, r5, r6, pc}

08021444 <__match>:
 8021444:	b530      	push	{r4, r5, lr}
 8021446:	6803      	ldr	r3, [r0, #0]
 8021448:	3301      	adds	r3, #1
 802144a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802144e:	b914      	cbnz	r4, 8021456 <__match+0x12>
 8021450:	6003      	str	r3, [r0, #0]
 8021452:	2001      	movs	r0, #1
 8021454:	bd30      	pop	{r4, r5, pc}
 8021456:	f813 2b01 	ldrb.w	r2, [r3], #1
 802145a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802145e:	2d19      	cmp	r5, #25
 8021460:	bf98      	it	ls
 8021462:	3220      	addls	r2, #32
 8021464:	42a2      	cmp	r2, r4
 8021466:	d0f0      	beq.n	802144a <__match+0x6>
 8021468:	2000      	movs	r0, #0
 802146a:	e7f3      	b.n	8021454 <__match+0x10>

0802146c <__hexnan>:
 802146c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021470:	680b      	ldr	r3, [r1, #0]
 8021472:	6801      	ldr	r1, [r0, #0]
 8021474:	115e      	asrs	r6, r3, #5
 8021476:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802147a:	f013 031f 	ands.w	r3, r3, #31
 802147e:	b087      	sub	sp, #28
 8021480:	bf18      	it	ne
 8021482:	3604      	addne	r6, #4
 8021484:	2500      	movs	r5, #0
 8021486:	1f37      	subs	r7, r6, #4
 8021488:	4682      	mov	sl, r0
 802148a:	4690      	mov	r8, r2
 802148c:	9301      	str	r3, [sp, #4]
 802148e:	f846 5c04 	str.w	r5, [r6, #-4]
 8021492:	46b9      	mov	r9, r7
 8021494:	463c      	mov	r4, r7
 8021496:	9502      	str	r5, [sp, #8]
 8021498:	46ab      	mov	fp, r5
 802149a:	784a      	ldrb	r2, [r1, #1]
 802149c:	1c4b      	adds	r3, r1, #1
 802149e:	9303      	str	r3, [sp, #12]
 80214a0:	b342      	cbz	r2, 80214f4 <__hexnan+0x88>
 80214a2:	4610      	mov	r0, r2
 80214a4:	9105      	str	r1, [sp, #20]
 80214a6:	9204      	str	r2, [sp, #16]
 80214a8:	f7ff fd5e 	bl	8020f68 <__hexdig_fun>
 80214ac:	2800      	cmp	r0, #0
 80214ae:	d14f      	bne.n	8021550 <__hexnan+0xe4>
 80214b0:	9a04      	ldr	r2, [sp, #16]
 80214b2:	9905      	ldr	r1, [sp, #20]
 80214b4:	2a20      	cmp	r2, #32
 80214b6:	d818      	bhi.n	80214ea <__hexnan+0x7e>
 80214b8:	9b02      	ldr	r3, [sp, #8]
 80214ba:	459b      	cmp	fp, r3
 80214bc:	dd13      	ble.n	80214e6 <__hexnan+0x7a>
 80214be:	454c      	cmp	r4, r9
 80214c0:	d206      	bcs.n	80214d0 <__hexnan+0x64>
 80214c2:	2d07      	cmp	r5, #7
 80214c4:	dc04      	bgt.n	80214d0 <__hexnan+0x64>
 80214c6:	462a      	mov	r2, r5
 80214c8:	4649      	mov	r1, r9
 80214ca:	4620      	mov	r0, r4
 80214cc:	f7ff ffa8 	bl	8021420 <L_shift>
 80214d0:	4544      	cmp	r4, r8
 80214d2:	d950      	bls.n	8021576 <__hexnan+0x10a>
 80214d4:	2300      	movs	r3, #0
 80214d6:	f1a4 0904 	sub.w	r9, r4, #4
 80214da:	f844 3c04 	str.w	r3, [r4, #-4]
 80214de:	f8cd b008 	str.w	fp, [sp, #8]
 80214e2:	464c      	mov	r4, r9
 80214e4:	461d      	mov	r5, r3
 80214e6:	9903      	ldr	r1, [sp, #12]
 80214e8:	e7d7      	b.n	802149a <__hexnan+0x2e>
 80214ea:	2a29      	cmp	r2, #41	; 0x29
 80214ec:	d156      	bne.n	802159c <__hexnan+0x130>
 80214ee:	3102      	adds	r1, #2
 80214f0:	f8ca 1000 	str.w	r1, [sl]
 80214f4:	f1bb 0f00 	cmp.w	fp, #0
 80214f8:	d050      	beq.n	802159c <__hexnan+0x130>
 80214fa:	454c      	cmp	r4, r9
 80214fc:	d206      	bcs.n	802150c <__hexnan+0xa0>
 80214fe:	2d07      	cmp	r5, #7
 8021500:	dc04      	bgt.n	802150c <__hexnan+0xa0>
 8021502:	462a      	mov	r2, r5
 8021504:	4649      	mov	r1, r9
 8021506:	4620      	mov	r0, r4
 8021508:	f7ff ff8a 	bl	8021420 <L_shift>
 802150c:	4544      	cmp	r4, r8
 802150e:	d934      	bls.n	802157a <__hexnan+0x10e>
 8021510:	f1a8 0204 	sub.w	r2, r8, #4
 8021514:	4623      	mov	r3, r4
 8021516:	f853 1b04 	ldr.w	r1, [r3], #4
 802151a:	f842 1f04 	str.w	r1, [r2, #4]!
 802151e:	429f      	cmp	r7, r3
 8021520:	d2f9      	bcs.n	8021516 <__hexnan+0xaa>
 8021522:	1b3b      	subs	r3, r7, r4
 8021524:	f023 0303 	bic.w	r3, r3, #3
 8021528:	3304      	adds	r3, #4
 802152a:	3401      	adds	r4, #1
 802152c:	3e03      	subs	r6, #3
 802152e:	42b4      	cmp	r4, r6
 8021530:	bf88      	it	hi
 8021532:	2304      	movhi	r3, #4
 8021534:	4443      	add	r3, r8
 8021536:	2200      	movs	r2, #0
 8021538:	f843 2b04 	str.w	r2, [r3], #4
 802153c:	429f      	cmp	r7, r3
 802153e:	d2fb      	bcs.n	8021538 <__hexnan+0xcc>
 8021540:	683b      	ldr	r3, [r7, #0]
 8021542:	b91b      	cbnz	r3, 802154c <__hexnan+0xe0>
 8021544:	4547      	cmp	r7, r8
 8021546:	d127      	bne.n	8021598 <__hexnan+0x12c>
 8021548:	2301      	movs	r3, #1
 802154a:	603b      	str	r3, [r7, #0]
 802154c:	2005      	movs	r0, #5
 802154e:	e026      	b.n	802159e <__hexnan+0x132>
 8021550:	3501      	adds	r5, #1
 8021552:	2d08      	cmp	r5, #8
 8021554:	f10b 0b01 	add.w	fp, fp, #1
 8021558:	dd06      	ble.n	8021568 <__hexnan+0xfc>
 802155a:	4544      	cmp	r4, r8
 802155c:	d9c3      	bls.n	80214e6 <__hexnan+0x7a>
 802155e:	2300      	movs	r3, #0
 8021560:	f844 3c04 	str.w	r3, [r4, #-4]
 8021564:	2501      	movs	r5, #1
 8021566:	3c04      	subs	r4, #4
 8021568:	6822      	ldr	r2, [r4, #0]
 802156a:	f000 000f 	and.w	r0, r0, #15
 802156e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8021572:	6022      	str	r2, [r4, #0]
 8021574:	e7b7      	b.n	80214e6 <__hexnan+0x7a>
 8021576:	2508      	movs	r5, #8
 8021578:	e7b5      	b.n	80214e6 <__hexnan+0x7a>
 802157a:	9b01      	ldr	r3, [sp, #4]
 802157c:	2b00      	cmp	r3, #0
 802157e:	d0df      	beq.n	8021540 <__hexnan+0xd4>
 8021580:	f04f 32ff 	mov.w	r2, #4294967295
 8021584:	f1c3 0320 	rsb	r3, r3, #32
 8021588:	fa22 f303 	lsr.w	r3, r2, r3
 802158c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8021590:	401a      	ands	r2, r3
 8021592:	f846 2c04 	str.w	r2, [r6, #-4]
 8021596:	e7d3      	b.n	8021540 <__hexnan+0xd4>
 8021598:	3f04      	subs	r7, #4
 802159a:	e7d1      	b.n	8021540 <__hexnan+0xd4>
 802159c:	2004      	movs	r0, #4
 802159e:	b007      	add	sp, #28
 80215a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080215a4 <_localeconv_r>:
 80215a4:	4800      	ldr	r0, [pc, #0]	; (80215a8 <_localeconv_r+0x4>)
 80215a6:	4770      	bx	lr
 80215a8:	200004b8 	.word	0x200004b8

080215ac <_lseek_r>:
 80215ac:	b538      	push	{r3, r4, r5, lr}
 80215ae:	4d07      	ldr	r5, [pc, #28]	; (80215cc <_lseek_r+0x20>)
 80215b0:	4604      	mov	r4, r0
 80215b2:	4608      	mov	r0, r1
 80215b4:	4611      	mov	r1, r2
 80215b6:	2200      	movs	r2, #0
 80215b8:	602a      	str	r2, [r5, #0]
 80215ba:	461a      	mov	r2, r3
 80215bc:	f7e4 ffec 	bl	8006598 <_lseek>
 80215c0:	1c43      	adds	r3, r0, #1
 80215c2:	d102      	bne.n	80215ca <_lseek_r+0x1e>
 80215c4:	682b      	ldr	r3, [r5, #0]
 80215c6:	b103      	cbz	r3, 80215ca <_lseek_r+0x1e>
 80215c8:	6023      	str	r3, [r4, #0]
 80215ca:	bd38      	pop	{r3, r4, r5, pc}
 80215cc:	2000e11c 	.word	0x2000e11c

080215d0 <__ascii_mbtowc>:
 80215d0:	b082      	sub	sp, #8
 80215d2:	b901      	cbnz	r1, 80215d6 <__ascii_mbtowc+0x6>
 80215d4:	a901      	add	r1, sp, #4
 80215d6:	b142      	cbz	r2, 80215ea <__ascii_mbtowc+0x1a>
 80215d8:	b14b      	cbz	r3, 80215ee <__ascii_mbtowc+0x1e>
 80215da:	7813      	ldrb	r3, [r2, #0]
 80215dc:	600b      	str	r3, [r1, #0]
 80215de:	7812      	ldrb	r2, [r2, #0]
 80215e0:	1e10      	subs	r0, r2, #0
 80215e2:	bf18      	it	ne
 80215e4:	2001      	movne	r0, #1
 80215e6:	b002      	add	sp, #8
 80215e8:	4770      	bx	lr
 80215ea:	4610      	mov	r0, r2
 80215ec:	e7fb      	b.n	80215e6 <__ascii_mbtowc+0x16>
 80215ee:	f06f 0001 	mvn.w	r0, #1
 80215f2:	e7f8      	b.n	80215e6 <__ascii_mbtowc+0x16>

080215f4 <__malloc_lock>:
 80215f4:	4801      	ldr	r0, [pc, #4]	; (80215fc <__malloc_lock+0x8>)
 80215f6:	f7e5 bb31 	b.w	8006c5c <__retarget_lock_acquire_recursive>
 80215fa:	bf00      	nop
 80215fc:	200008f0 	.word	0x200008f0

08021600 <__malloc_unlock>:
 8021600:	4801      	ldr	r0, [pc, #4]	; (8021608 <__malloc_unlock+0x8>)
 8021602:	f7e5 bb3f 	b.w	8006c84 <__retarget_lock_release_recursive>
 8021606:	bf00      	nop
 8021608:	200008f0 	.word	0x200008f0

0802160c <_Balloc>:
 802160c:	b570      	push	{r4, r5, r6, lr}
 802160e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021610:	4604      	mov	r4, r0
 8021612:	460d      	mov	r5, r1
 8021614:	b976      	cbnz	r6, 8021634 <_Balloc+0x28>
 8021616:	2010      	movs	r0, #16
 8021618:	f7fc fd06 	bl	801e028 <malloc>
 802161c:	4602      	mov	r2, r0
 802161e:	6260      	str	r0, [r4, #36]	; 0x24
 8021620:	b920      	cbnz	r0, 802162c <_Balloc+0x20>
 8021622:	4b18      	ldr	r3, [pc, #96]	; (8021684 <_Balloc+0x78>)
 8021624:	4818      	ldr	r0, [pc, #96]	; (8021688 <_Balloc+0x7c>)
 8021626:	2166      	movs	r1, #102	; 0x66
 8021628:	f7fe fcca 	bl	801ffc0 <__assert_func>
 802162c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021630:	6006      	str	r6, [r0, #0]
 8021632:	60c6      	str	r6, [r0, #12]
 8021634:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8021636:	68f3      	ldr	r3, [r6, #12]
 8021638:	b183      	cbz	r3, 802165c <_Balloc+0x50>
 802163a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802163c:	68db      	ldr	r3, [r3, #12]
 802163e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021642:	b9b8      	cbnz	r0, 8021674 <_Balloc+0x68>
 8021644:	2101      	movs	r1, #1
 8021646:	fa01 f605 	lsl.w	r6, r1, r5
 802164a:	1d72      	adds	r2, r6, #5
 802164c:	0092      	lsls	r2, r2, #2
 802164e:	4620      	mov	r0, r4
 8021650:	f000 fc97 	bl	8021f82 <_calloc_r>
 8021654:	b160      	cbz	r0, 8021670 <_Balloc+0x64>
 8021656:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802165a:	e00e      	b.n	802167a <_Balloc+0x6e>
 802165c:	2221      	movs	r2, #33	; 0x21
 802165e:	2104      	movs	r1, #4
 8021660:	4620      	mov	r0, r4
 8021662:	f000 fc8e 	bl	8021f82 <_calloc_r>
 8021666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021668:	60f0      	str	r0, [r6, #12]
 802166a:	68db      	ldr	r3, [r3, #12]
 802166c:	2b00      	cmp	r3, #0
 802166e:	d1e4      	bne.n	802163a <_Balloc+0x2e>
 8021670:	2000      	movs	r0, #0
 8021672:	bd70      	pop	{r4, r5, r6, pc}
 8021674:	6802      	ldr	r2, [r0, #0]
 8021676:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802167a:	2300      	movs	r3, #0
 802167c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021680:	e7f7      	b.n	8021672 <_Balloc+0x66>
 8021682:	bf00      	nop
 8021684:	08026ddf 	.word	0x08026ddf
 8021688:	08026fe0 	.word	0x08026fe0

0802168c <_Bfree>:
 802168c:	b570      	push	{r4, r5, r6, lr}
 802168e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021690:	4605      	mov	r5, r0
 8021692:	460c      	mov	r4, r1
 8021694:	b976      	cbnz	r6, 80216b4 <_Bfree+0x28>
 8021696:	2010      	movs	r0, #16
 8021698:	f7fc fcc6 	bl	801e028 <malloc>
 802169c:	4602      	mov	r2, r0
 802169e:	6268      	str	r0, [r5, #36]	; 0x24
 80216a0:	b920      	cbnz	r0, 80216ac <_Bfree+0x20>
 80216a2:	4b09      	ldr	r3, [pc, #36]	; (80216c8 <_Bfree+0x3c>)
 80216a4:	4809      	ldr	r0, [pc, #36]	; (80216cc <_Bfree+0x40>)
 80216a6:	218a      	movs	r1, #138	; 0x8a
 80216a8:	f7fe fc8a 	bl	801ffc0 <__assert_func>
 80216ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80216b0:	6006      	str	r6, [r0, #0]
 80216b2:	60c6      	str	r6, [r0, #12]
 80216b4:	b13c      	cbz	r4, 80216c6 <_Bfree+0x3a>
 80216b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80216b8:	6862      	ldr	r2, [r4, #4]
 80216ba:	68db      	ldr	r3, [r3, #12]
 80216bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80216c0:	6021      	str	r1, [r4, #0]
 80216c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80216c6:	bd70      	pop	{r4, r5, r6, pc}
 80216c8:	08026ddf 	.word	0x08026ddf
 80216cc:	08026fe0 	.word	0x08026fe0

080216d0 <__multadd>:
 80216d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80216d4:	690e      	ldr	r6, [r1, #16]
 80216d6:	4607      	mov	r7, r0
 80216d8:	4698      	mov	r8, r3
 80216da:	460c      	mov	r4, r1
 80216dc:	f101 0014 	add.w	r0, r1, #20
 80216e0:	2300      	movs	r3, #0
 80216e2:	6805      	ldr	r5, [r0, #0]
 80216e4:	b2a9      	uxth	r1, r5
 80216e6:	fb02 8101 	mla	r1, r2, r1, r8
 80216ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80216ee:	0c2d      	lsrs	r5, r5, #16
 80216f0:	fb02 c505 	mla	r5, r2, r5, ip
 80216f4:	b289      	uxth	r1, r1
 80216f6:	3301      	adds	r3, #1
 80216f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80216fc:	429e      	cmp	r6, r3
 80216fe:	f840 1b04 	str.w	r1, [r0], #4
 8021702:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8021706:	dcec      	bgt.n	80216e2 <__multadd+0x12>
 8021708:	f1b8 0f00 	cmp.w	r8, #0
 802170c:	d022      	beq.n	8021754 <__multadd+0x84>
 802170e:	68a3      	ldr	r3, [r4, #8]
 8021710:	42b3      	cmp	r3, r6
 8021712:	dc19      	bgt.n	8021748 <__multadd+0x78>
 8021714:	6861      	ldr	r1, [r4, #4]
 8021716:	4638      	mov	r0, r7
 8021718:	3101      	adds	r1, #1
 802171a:	f7ff ff77 	bl	802160c <_Balloc>
 802171e:	4605      	mov	r5, r0
 8021720:	b928      	cbnz	r0, 802172e <__multadd+0x5e>
 8021722:	4602      	mov	r2, r0
 8021724:	4b0d      	ldr	r3, [pc, #52]	; (802175c <__multadd+0x8c>)
 8021726:	480e      	ldr	r0, [pc, #56]	; (8021760 <__multadd+0x90>)
 8021728:	21b5      	movs	r1, #181	; 0xb5
 802172a:	f7fe fc49 	bl	801ffc0 <__assert_func>
 802172e:	6922      	ldr	r2, [r4, #16]
 8021730:	3202      	adds	r2, #2
 8021732:	f104 010c 	add.w	r1, r4, #12
 8021736:	0092      	lsls	r2, r2, #2
 8021738:	300c      	adds	r0, #12
 802173a:	f7fc fc8b 	bl	801e054 <memcpy>
 802173e:	4621      	mov	r1, r4
 8021740:	4638      	mov	r0, r7
 8021742:	f7ff ffa3 	bl	802168c <_Bfree>
 8021746:	462c      	mov	r4, r5
 8021748:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802174c:	3601      	adds	r6, #1
 802174e:	f8c3 8014 	str.w	r8, [r3, #20]
 8021752:	6126      	str	r6, [r4, #16]
 8021754:	4620      	mov	r0, r4
 8021756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802175a:	bf00      	nop
 802175c:	08026f50 	.word	0x08026f50
 8021760:	08026fe0 	.word	0x08026fe0

08021764 <__s2b>:
 8021764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021768:	460c      	mov	r4, r1
 802176a:	4615      	mov	r5, r2
 802176c:	461f      	mov	r7, r3
 802176e:	2209      	movs	r2, #9
 8021770:	3308      	adds	r3, #8
 8021772:	4606      	mov	r6, r0
 8021774:	fb93 f3f2 	sdiv	r3, r3, r2
 8021778:	2100      	movs	r1, #0
 802177a:	2201      	movs	r2, #1
 802177c:	429a      	cmp	r2, r3
 802177e:	db09      	blt.n	8021794 <__s2b+0x30>
 8021780:	4630      	mov	r0, r6
 8021782:	f7ff ff43 	bl	802160c <_Balloc>
 8021786:	b940      	cbnz	r0, 802179a <__s2b+0x36>
 8021788:	4602      	mov	r2, r0
 802178a:	4b19      	ldr	r3, [pc, #100]	; (80217f0 <__s2b+0x8c>)
 802178c:	4819      	ldr	r0, [pc, #100]	; (80217f4 <__s2b+0x90>)
 802178e:	21ce      	movs	r1, #206	; 0xce
 8021790:	f7fe fc16 	bl	801ffc0 <__assert_func>
 8021794:	0052      	lsls	r2, r2, #1
 8021796:	3101      	adds	r1, #1
 8021798:	e7f0      	b.n	802177c <__s2b+0x18>
 802179a:	9b08      	ldr	r3, [sp, #32]
 802179c:	6143      	str	r3, [r0, #20]
 802179e:	2d09      	cmp	r5, #9
 80217a0:	f04f 0301 	mov.w	r3, #1
 80217a4:	6103      	str	r3, [r0, #16]
 80217a6:	dd16      	ble.n	80217d6 <__s2b+0x72>
 80217a8:	f104 0909 	add.w	r9, r4, #9
 80217ac:	46c8      	mov	r8, r9
 80217ae:	442c      	add	r4, r5
 80217b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80217b4:	4601      	mov	r1, r0
 80217b6:	3b30      	subs	r3, #48	; 0x30
 80217b8:	220a      	movs	r2, #10
 80217ba:	4630      	mov	r0, r6
 80217bc:	f7ff ff88 	bl	80216d0 <__multadd>
 80217c0:	45a0      	cmp	r8, r4
 80217c2:	d1f5      	bne.n	80217b0 <__s2b+0x4c>
 80217c4:	f1a5 0408 	sub.w	r4, r5, #8
 80217c8:	444c      	add	r4, r9
 80217ca:	1b2d      	subs	r5, r5, r4
 80217cc:	1963      	adds	r3, r4, r5
 80217ce:	42bb      	cmp	r3, r7
 80217d0:	db04      	blt.n	80217dc <__s2b+0x78>
 80217d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80217d6:	340a      	adds	r4, #10
 80217d8:	2509      	movs	r5, #9
 80217da:	e7f6      	b.n	80217ca <__s2b+0x66>
 80217dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80217e0:	4601      	mov	r1, r0
 80217e2:	3b30      	subs	r3, #48	; 0x30
 80217e4:	220a      	movs	r2, #10
 80217e6:	4630      	mov	r0, r6
 80217e8:	f7ff ff72 	bl	80216d0 <__multadd>
 80217ec:	e7ee      	b.n	80217cc <__s2b+0x68>
 80217ee:	bf00      	nop
 80217f0:	08026f50 	.word	0x08026f50
 80217f4:	08026fe0 	.word	0x08026fe0

080217f8 <__hi0bits>:
 80217f8:	0c03      	lsrs	r3, r0, #16
 80217fa:	041b      	lsls	r3, r3, #16
 80217fc:	b9d3      	cbnz	r3, 8021834 <__hi0bits+0x3c>
 80217fe:	0400      	lsls	r0, r0, #16
 8021800:	2310      	movs	r3, #16
 8021802:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021806:	bf04      	itt	eq
 8021808:	0200      	lsleq	r0, r0, #8
 802180a:	3308      	addeq	r3, #8
 802180c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021810:	bf04      	itt	eq
 8021812:	0100      	lsleq	r0, r0, #4
 8021814:	3304      	addeq	r3, #4
 8021816:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802181a:	bf04      	itt	eq
 802181c:	0080      	lsleq	r0, r0, #2
 802181e:	3302      	addeq	r3, #2
 8021820:	2800      	cmp	r0, #0
 8021822:	db05      	blt.n	8021830 <__hi0bits+0x38>
 8021824:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021828:	f103 0301 	add.w	r3, r3, #1
 802182c:	bf08      	it	eq
 802182e:	2320      	moveq	r3, #32
 8021830:	4618      	mov	r0, r3
 8021832:	4770      	bx	lr
 8021834:	2300      	movs	r3, #0
 8021836:	e7e4      	b.n	8021802 <__hi0bits+0xa>

08021838 <__lo0bits>:
 8021838:	6803      	ldr	r3, [r0, #0]
 802183a:	f013 0207 	ands.w	r2, r3, #7
 802183e:	4601      	mov	r1, r0
 8021840:	d00b      	beq.n	802185a <__lo0bits+0x22>
 8021842:	07da      	lsls	r2, r3, #31
 8021844:	d424      	bmi.n	8021890 <__lo0bits+0x58>
 8021846:	0798      	lsls	r0, r3, #30
 8021848:	bf49      	itett	mi
 802184a:	085b      	lsrmi	r3, r3, #1
 802184c:	089b      	lsrpl	r3, r3, #2
 802184e:	2001      	movmi	r0, #1
 8021850:	600b      	strmi	r3, [r1, #0]
 8021852:	bf5c      	itt	pl
 8021854:	600b      	strpl	r3, [r1, #0]
 8021856:	2002      	movpl	r0, #2
 8021858:	4770      	bx	lr
 802185a:	b298      	uxth	r0, r3
 802185c:	b9b0      	cbnz	r0, 802188c <__lo0bits+0x54>
 802185e:	0c1b      	lsrs	r3, r3, #16
 8021860:	2010      	movs	r0, #16
 8021862:	f013 0fff 	tst.w	r3, #255	; 0xff
 8021866:	bf04      	itt	eq
 8021868:	0a1b      	lsreq	r3, r3, #8
 802186a:	3008      	addeq	r0, #8
 802186c:	071a      	lsls	r2, r3, #28
 802186e:	bf04      	itt	eq
 8021870:	091b      	lsreq	r3, r3, #4
 8021872:	3004      	addeq	r0, #4
 8021874:	079a      	lsls	r2, r3, #30
 8021876:	bf04      	itt	eq
 8021878:	089b      	lsreq	r3, r3, #2
 802187a:	3002      	addeq	r0, #2
 802187c:	07da      	lsls	r2, r3, #31
 802187e:	d403      	bmi.n	8021888 <__lo0bits+0x50>
 8021880:	085b      	lsrs	r3, r3, #1
 8021882:	f100 0001 	add.w	r0, r0, #1
 8021886:	d005      	beq.n	8021894 <__lo0bits+0x5c>
 8021888:	600b      	str	r3, [r1, #0]
 802188a:	4770      	bx	lr
 802188c:	4610      	mov	r0, r2
 802188e:	e7e8      	b.n	8021862 <__lo0bits+0x2a>
 8021890:	2000      	movs	r0, #0
 8021892:	4770      	bx	lr
 8021894:	2020      	movs	r0, #32
 8021896:	4770      	bx	lr

08021898 <__i2b>:
 8021898:	b510      	push	{r4, lr}
 802189a:	460c      	mov	r4, r1
 802189c:	2101      	movs	r1, #1
 802189e:	f7ff feb5 	bl	802160c <_Balloc>
 80218a2:	4602      	mov	r2, r0
 80218a4:	b928      	cbnz	r0, 80218b2 <__i2b+0x1a>
 80218a6:	4b05      	ldr	r3, [pc, #20]	; (80218bc <__i2b+0x24>)
 80218a8:	4805      	ldr	r0, [pc, #20]	; (80218c0 <__i2b+0x28>)
 80218aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80218ae:	f7fe fb87 	bl	801ffc0 <__assert_func>
 80218b2:	2301      	movs	r3, #1
 80218b4:	6144      	str	r4, [r0, #20]
 80218b6:	6103      	str	r3, [r0, #16]
 80218b8:	bd10      	pop	{r4, pc}
 80218ba:	bf00      	nop
 80218bc:	08026f50 	.word	0x08026f50
 80218c0:	08026fe0 	.word	0x08026fe0

080218c4 <__multiply>:
 80218c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218c8:	4614      	mov	r4, r2
 80218ca:	690a      	ldr	r2, [r1, #16]
 80218cc:	6923      	ldr	r3, [r4, #16]
 80218ce:	429a      	cmp	r2, r3
 80218d0:	bfb8      	it	lt
 80218d2:	460b      	movlt	r3, r1
 80218d4:	460d      	mov	r5, r1
 80218d6:	bfbc      	itt	lt
 80218d8:	4625      	movlt	r5, r4
 80218da:	461c      	movlt	r4, r3
 80218dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80218e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80218e4:	68ab      	ldr	r3, [r5, #8]
 80218e6:	6869      	ldr	r1, [r5, #4]
 80218e8:	eb0a 0709 	add.w	r7, sl, r9
 80218ec:	42bb      	cmp	r3, r7
 80218ee:	b085      	sub	sp, #20
 80218f0:	bfb8      	it	lt
 80218f2:	3101      	addlt	r1, #1
 80218f4:	f7ff fe8a 	bl	802160c <_Balloc>
 80218f8:	b930      	cbnz	r0, 8021908 <__multiply+0x44>
 80218fa:	4602      	mov	r2, r0
 80218fc:	4b42      	ldr	r3, [pc, #264]	; (8021a08 <__multiply+0x144>)
 80218fe:	4843      	ldr	r0, [pc, #268]	; (8021a0c <__multiply+0x148>)
 8021900:	f240 115d 	movw	r1, #349	; 0x15d
 8021904:	f7fe fb5c 	bl	801ffc0 <__assert_func>
 8021908:	f100 0614 	add.w	r6, r0, #20
 802190c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8021910:	4633      	mov	r3, r6
 8021912:	2200      	movs	r2, #0
 8021914:	4543      	cmp	r3, r8
 8021916:	d31e      	bcc.n	8021956 <__multiply+0x92>
 8021918:	f105 0c14 	add.w	ip, r5, #20
 802191c:	f104 0314 	add.w	r3, r4, #20
 8021920:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8021924:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8021928:	9202      	str	r2, [sp, #8]
 802192a:	ebac 0205 	sub.w	r2, ip, r5
 802192e:	3a15      	subs	r2, #21
 8021930:	f022 0203 	bic.w	r2, r2, #3
 8021934:	3204      	adds	r2, #4
 8021936:	f105 0115 	add.w	r1, r5, #21
 802193a:	458c      	cmp	ip, r1
 802193c:	bf38      	it	cc
 802193e:	2204      	movcc	r2, #4
 8021940:	9201      	str	r2, [sp, #4]
 8021942:	9a02      	ldr	r2, [sp, #8]
 8021944:	9303      	str	r3, [sp, #12]
 8021946:	429a      	cmp	r2, r3
 8021948:	d808      	bhi.n	802195c <__multiply+0x98>
 802194a:	2f00      	cmp	r7, #0
 802194c:	dc55      	bgt.n	80219fa <__multiply+0x136>
 802194e:	6107      	str	r7, [r0, #16]
 8021950:	b005      	add	sp, #20
 8021952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021956:	f843 2b04 	str.w	r2, [r3], #4
 802195a:	e7db      	b.n	8021914 <__multiply+0x50>
 802195c:	f8b3 a000 	ldrh.w	sl, [r3]
 8021960:	f1ba 0f00 	cmp.w	sl, #0
 8021964:	d020      	beq.n	80219a8 <__multiply+0xe4>
 8021966:	f105 0e14 	add.w	lr, r5, #20
 802196a:	46b1      	mov	r9, r6
 802196c:	2200      	movs	r2, #0
 802196e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8021972:	f8d9 b000 	ldr.w	fp, [r9]
 8021976:	b2a1      	uxth	r1, r4
 8021978:	fa1f fb8b 	uxth.w	fp, fp
 802197c:	fb0a b101 	mla	r1, sl, r1, fp
 8021980:	4411      	add	r1, r2
 8021982:	f8d9 2000 	ldr.w	r2, [r9]
 8021986:	0c24      	lsrs	r4, r4, #16
 8021988:	0c12      	lsrs	r2, r2, #16
 802198a:	fb0a 2404 	mla	r4, sl, r4, r2
 802198e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8021992:	b289      	uxth	r1, r1
 8021994:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8021998:	45f4      	cmp	ip, lr
 802199a:	f849 1b04 	str.w	r1, [r9], #4
 802199e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80219a2:	d8e4      	bhi.n	802196e <__multiply+0xaa>
 80219a4:	9901      	ldr	r1, [sp, #4]
 80219a6:	5072      	str	r2, [r6, r1]
 80219a8:	9a03      	ldr	r2, [sp, #12]
 80219aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80219ae:	3304      	adds	r3, #4
 80219b0:	f1b9 0f00 	cmp.w	r9, #0
 80219b4:	d01f      	beq.n	80219f6 <__multiply+0x132>
 80219b6:	6834      	ldr	r4, [r6, #0]
 80219b8:	f105 0114 	add.w	r1, r5, #20
 80219bc:	46b6      	mov	lr, r6
 80219be:	f04f 0a00 	mov.w	sl, #0
 80219c2:	880a      	ldrh	r2, [r1, #0]
 80219c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80219c8:	fb09 b202 	mla	r2, r9, r2, fp
 80219cc:	4492      	add	sl, r2
 80219ce:	b2a4      	uxth	r4, r4
 80219d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80219d4:	f84e 4b04 	str.w	r4, [lr], #4
 80219d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80219dc:	f8be 2000 	ldrh.w	r2, [lr]
 80219e0:	0c24      	lsrs	r4, r4, #16
 80219e2:	fb09 2404 	mla	r4, r9, r4, r2
 80219e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80219ea:	458c      	cmp	ip, r1
 80219ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80219f0:	d8e7      	bhi.n	80219c2 <__multiply+0xfe>
 80219f2:	9a01      	ldr	r2, [sp, #4]
 80219f4:	50b4      	str	r4, [r6, r2]
 80219f6:	3604      	adds	r6, #4
 80219f8:	e7a3      	b.n	8021942 <__multiply+0x7e>
 80219fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80219fe:	2b00      	cmp	r3, #0
 8021a00:	d1a5      	bne.n	802194e <__multiply+0x8a>
 8021a02:	3f01      	subs	r7, #1
 8021a04:	e7a1      	b.n	802194a <__multiply+0x86>
 8021a06:	bf00      	nop
 8021a08:	08026f50 	.word	0x08026f50
 8021a0c:	08026fe0 	.word	0x08026fe0

08021a10 <__pow5mult>:
 8021a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021a14:	4615      	mov	r5, r2
 8021a16:	f012 0203 	ands.w	r2, r2, #3
 8021a1a:	4606      	mov	r6, r0
 8021a1c:	460f      	mov	r7, r1
 8021a1e:	d007      	beq.n	8021a30 <__pow5mult+0x20>
 8021a20:	4c25      	ldr	r4, [pc, #148]	; (8021ab8 <__pow5mult+0xa8>)
 8021a22:	3a01      	subs	r2, #1
 8021a24:	2300      	movs	r3, #0
 8021a26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021a2a:	f7ff fe51 	bl	80216d0 <__multadd>
 8021a2e:	4607      	mov	r7, r0
 8021a30:	10ad      	asrs	r5, r5, #2
 8021a32:	d03d      	beq.n	8021ab0 <__pow5mult+0xa0>
 8021a34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021a36:	b97c      	cbnz	r4, 8021a58 <__pow5mult+0x48>
 8021a38:	2010      	movs	r0, #16
 8021a3a:	f7fc faf5 	bl	801e028 <malloc>
 8021a3e:	4602      	mov	r2, r0
 8021a40:	6270      	str	r0, [r6, #36]	; 0x24
 8021a42:	b928      	cbnz	r0, 8021a50 <__pow5mult+0x40>
 8021a44:	4b1d      	ldr	r3, [pc, #116]	; (8021abc <__pow5mult+0xac>)
 8021a46:	481e      	ldr	r0, [pc, #120]	; (8021ac0 <__pow5mult+0xb0>)
 8021a48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021a4c:	f7fe fab8 	bl	801ffc0 <__assert_func>
 8021a50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021a54:	6004      	str	r4, [r0, #0]
 8021a56:	60c4      	str	r4, [r0, #12]
 8021a58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021a5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021a60:	b94c      	cbnz	r4, 8021a76 <__pow5mult+0x66>
 8021a62:	f240 2171 	movw	r1, #625	; 0x271
 8021a66:	4630      	mov	r0, r6
 8021a68:	f7ff ff16 	bl	8021898 <__i2b>
 8021a6c:	2300      	movs	r3, #0
 8021a6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8021a72:	4604      	mov	r4, r0
 8021a74:	6003      	str	r3, [r0, #0]
 8021a76:	f04f 0900 	mov.w	r9, #0
 8021a7a:	07eb      	lsls	r3, r5, #31
 8021a7c:	d50a      	bpl.n	8021a94 <__pow5mult+0x84>
 8021a7e:	4639      	mov	r1, r7
 8021a80:	4622      	mov	r2, r4
 8021a82:	4630      	mov	r0, r6
 8021a84:	f7ff ff1e 	bl	80218c4 <__multiply>
 8021a88:	4639      	mov	r1, r7
 8021a8a:	4680      	mov	r8, r0
 8021a8c:	4630      	mov	r0, r6
 8021a8e:	f7ff fdfd 	bl	802168c <_Bfree>
 8021a92:	4647      	mov	r7, r8
 8021a94:	106d      	asrs	r5, r5, #1
 8021a96:	d00b      	beq.n	8021ab0 <__pow5mult+0xa0>
 8021a98:	6820      	ldr	r0, [r4, #0]
 8021a9a:	b938      	cbnz	r0, 8021aac <__pow5mult+0x9c>
 8021a9c:	4622      	mov	r2, r4
 8021a9e:	4621      	mov	r1, r4
 8021aa0:	4630      	mov	r0, r6
 8021aa2:	f7ff ff0f 	bl	80218c4 <__multiply>
 8021aa6:	6020      	str	r0, [r4, #0]
 8021aa8:	f8c0 9000 	str.w	r9, [r0]
 8021aac:	4604      	mov	r4, r0
 8021aae:	e7e4      	b.n	8021a7a <__pow5mult+0x6a>
 8021ab0:	4638      	mov	r0, r7
 8021ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021ab6:	bf00      	nop
 8021ab8:	08027130 	.word	0x08027130
 8021abc:	08026ddf 	.word	0x08026ddf
 8021ac0:	08026fe0 	.word	0x08026fe0

08021ac4 <__lshift>:
 8021ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ac8:	460c      	mov	r4, r1
 8021aca:	6849      	ldr	r1, [r1, #4]
 8021acc:	6923      	ldr	r3, [r4, #16]
 8021ace:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021ad2:	68a3      	ldr	r3, [r4, #8]
 8021ad4:	4607      	mov	r7, r0
 8021ad6:	4691      	mov	r9, r2
 8021ad8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021adc:	f108 0601 	add.w	r6, r8, #1
 8021ae0:	42b3      	cmp	r3, r6
 8021ae2:	db0b      	blt.n	8021afc <__lshift+0x38>
 8021ae4:	4638      	mov	r0, r7
 8021ae6:	f7ff fd91 	bl	802160c <_Balloc>
 8021aea:	4605      	mov	r5, r0
 8021aec:	b948      	cbnz	r0, 8021b02 <__lshift+0x3e>
 8021aee:	4602      	mov	r2, r0
 8021af0:	4b28      	ldr	r3, [pc, #160]	; (8021b94 <__lshift+0xd0>)
 8021af2:	4829      	ldr	r0, [pc, #164]	; (8021b98 <__lshift+0xd4>)
 8021af4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021af8:	f7fe fa62 	bl	801ffc0 <__assert_func>
 8021afc:	3101      	adds	r1, #1
 8021afe:	005b      	lsls	r3, r3, #1
 8021b00:	e7ee      	b.n	8021ae0 <__lshift+0x1c>
 8021b02:	2300      	movs	r3, #0
 8021b04:	f100 0114 	add.w	r1, r0, #20
 8021b08:	f100 0210 	add.w	r2, r0, #16
 8021b0c:	4618      	mov	r0, r3
 8021b0e:	4553      	cmp	r3, sl
 8021b10:	db33      	blt.n	8021b7a <__lshift+0xb6>
 8021b12:	6920      	ldr	r0, [r4, #16]
 8021b14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021b18:	f104 0314 	add.w	r3, r4, #20
 8021b1c:	f019 091f 	ands.w	r9, r9, #31
 8021b20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021b24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021b28:	d02b      	beq.n	8021b82 <__lshift+0xbe>
 8021b2a:	f1c9 0e20 	rsb	lr, r9, #32
 8021b2e:	468a      	mov	sl, r1
 8021b30:	2200      	movs	r2, #0
 8021b32:	6818      	ldr	r0, [r3, #0]
 8021b34:	fa00 f009 	lsl.w	r0, r0, r9
 8021b38:	4302      	orrs	r2, r0
 8021b3a:	f84a 2b04 	str.w	r2, [sl], #4
 8021b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021b42:	459c      	cmp	ip, r3
 8021b44:	fa22 f20e 	lsr.w	r2, r2, lr
 8021b48:	d8f3      	bhi.n	8021b32 <__lshift+0x6e>
 8021b4a:	ebac 0304 	sub.w	r3, ip, r4
 8021b4e:	3b15      	subs	r3, #21
 8021b50:	f023 0303 	bic.w	r3, r3, #3
 8021b54:	3304      	adds	r3, #4
 8021b56:	f104 0015 	add.w	r0, r4, #21
 8021b5a:	4584      	cmp	ip, r0
 8021b5c:	bf38      	it	cc
 8021b5e:	2304      	movcc	r3, #4
 8021b60:	50ca      	str	r2, [r1, r3]
 8021b62:	b10a      	cbz	r2, 8021b68 <__lshift+0xa4>
 8021b64:	f108 0602 	add.w	r6, r8, #2
 8021b68:	3e01      	subs	r6, #1
 8021b6a:	4638      	mov	r0, r7
 8021b6c:	612e      	str	r6, [r5, #16]
 8021b6e:	4621      	mov	r1, r4
 8021b70:	f7ff fd8c 	bl	802168c <_Bfree>
 8021b74:	4628      	mov	r0, r5
 8021b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021b7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8021b7e:	3301      	adds	r3, #1
 8021b80:	e7c5      	b.n	8021b0e <__lshift+0x4a>
 8021b82:	3904      	subs	r1, #4
 8021b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8021b88:	f841 2f04 	str.w	r2, [r1, #4]!
 8021b8c:	459c      	cmp	ip, r3
 8021b8e:	d8f9      	bhi.n	8021b84 <__lshift+0xc0>
 8021b90:	e7ea      	b.n	8021b68 <__lshift+0xa4>
 8021b92:	bf00      	nop
 8021b94:	08026f50 	.word	0x08026f50
 8021b98:	08026fe0 	.word	0x08026fe0

08021b9c <__mcmp>:
 8021b9c:	b530      	push	{r4, r5, lr}
 8021b9e:	6902      	ldr	r2, [r0, #16]
 8021ba0:	690c      	ldr	r4, [r1, #16]
 8021ba2:	1b12      	subs	r2, r2, r4
 8021ba4:	d10e      	bne.n	8021bc4 <__mcmp+0x28>
 8021ba6:	f100 0314 	add.w	r3, r0, #20
 8021baa:	3114      	adds	r1, #20
 8021bac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021bb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021bb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021bb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021bbc:	42a5      	cmp	r5, r4
 8021bbe:	d003      	beq.n	8021bc8 <__mcmp+0x2c>
 8021bc0:	d305      	bcc.n	8021bce <__mcmp+0x32>
 8021bc2:	2201      	movs	r2, #1
 8021bc4:	4610      	mov	r0, r2
 8021bc6:	bd30      	pop	{r4, r5, pc}
 8021bc8:	4283      	cmp	r3, r0
 8021bca:	d3f3      	bcc.n	8021bb4 <__mcmp+0x18>
 8021bcc:	e7fa      	b.n	8021bc4 <__mcmp+0x28>
 8021bce:	f04f 32ff 	mov.w	r2, #4294967295
 8021bd2:	e7f7      	b.n	8021bc4 <__mcmp+0x28>

08021bd4 <__mdiff>:
 8021bd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bd8:	460c      	mov	r4, r1
 8021bda:	4606      	mov	r6, r0
 8021bdc:	4611      	mov	r1, r2
 8021bde:	4620      	mov	r0, r4
 8021be0:	4617      	mov	r7, r2
 8021be2:	f7ff ffdb 	bl	8021b9c <__mcmp>
 8021be6:	1e05      	subs	r5, r0, #0
 8021be8:	d110      	bne.n	8021c0c <__mdiff+0x38>
 8021bea:	4629      	mov	r1, r5
 8021bec:	4630      	mov	r0, r6
 8021bee:	f7ff fd0d 	bl	802160c <_Balloc>
 8021bf2:	b930      	cbnz	r0, 8021c02 <__mdiff+0x2e>
 8021bf4:	4b39      	ldr	r3, [pc, #228]	; (8021cdc <__mdiff+0x108>)
 8021bf6:	4602      	mov	r2, r0
 8021bf8:	f240 2132 	movw	r1, #562	; 0x232
 8021bfc:	4838      	ldr	r0, [pc, #224]	; (8021ce0 <__mdiff+0x10c>)
 8021bfe:	f7fe f9df 	bl	801ffc0 <__assert_func>
 8021c02:	2301      	movs	r3, #1
 8021c04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021c08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c0c:	bfa4      	itt	ge
 8021c0e:	463b      	movge	r3, r7
 8021c10:	4627      	movge	r7, r4
 8021c12:	4630      	mov	r0, r6
 8021c14:	6879      	ldr	r1, [r7, #4]
 8021c16:	bfa6      	itte	ge
 8021c18:	461c      	movge	r4, r3
 8021c1a:	2500      	movge	r5, #0
 8021c1c:	2501      	movlt	r5, #1
 8021c1e:	f7ff fcf5 	bl	802160c <_Balloc>
 8021c22:	b920      	cbnz	r0, 8021c2e <__mdiff+0x5a>
 8021c24:	4b2d      	ldr	r3, [pc, #180]	; (8021cdc <__mdiff+0x108>)
 8021c26:	4602      	mov	r2, r0
 8021c28:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021c2c:	e7e6      	b.n	8021bfc <__mdiff+0x28>
 8021c2e:	693e      	ldr	r6, [r7, #16]
 8021c30:	60c5      	str	r5, [r0, #12]
 8021c32:	6925      	ldr	r5, [r4, #16]
 8021c34:	f107 0114 	add.w	r1, r7, #20
 8021c38:	f104 0914 	add.w	r9, r4, #20
 8021c3c:	f100 0e14 	add.w	lr, r0, #20
 8021c40:	f107 0210 	add.w	r2, r7, #16
 8021c44:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8021c48:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8021c4c:	46f2      	mov	sl, lr
 8021c4e:	2700      	movs	r7, #0
 8021c50:	f859 3b04 	ldr.w	r3, [r9], #4
 8021c54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8021c58:	fa1f f883 	uxth.w	r8, r3
 8021c5c:	fa17 f78b 	uxtah	r7, r7, fp
 8021c60:	0c1b      	lsrs	r3, r3, #16
 8021c62:	eba7 0808 	sub.w	r8, r7, r8
 8021c66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8021c6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8021c6e:	fa1f f888 	uxth.w	r8, r8
 8021c72:	141f      	asrs	r7, r3, #16
 8021c74:	454d      	cmp	r5, r9
 8021c76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8021c7a:	f84a 3b04 	str.w	r3, [sl], #4
 8021c7e:	d8e7      	bhi.n	8021c50 <__mdiff+0x7c>
 8021c80:	1b2b      	subs	r3, r5, r4
 8021c82:	3b15      	subs	r3, #21
 8021c84:	f023 0303 	bic.w	r3, r3, #3
 8021c88:	3304      	adds	r3, #4
 8021c8a:	3415      	adds	r4, #21
 8021c8c:	42a5      	cmp	r5, r4
 8021c8e:	bf38      	it	cc
 8021c90:	2304      	movcc	r3, #4
 8021c92:	4419      	add	r1, r3
 8021c94:	4473      	add	r3, lr
 8021c96:	469e      	mov	lr, r3
 8021c98:	460d      	mov	r5, r1
 8021c9a:	4565      	cmp	r5, ip
 8021c9c:	d30e      	bcc.n	8021cbc <__mdiff+0xe8>
 8021c9e:	f10c 0203 	add.w	r2, ip, #3
 8021ca2:	1a52      	subs	r2, r2, r1
 8021ca4:	f022 0203 	bic.w	r2, r2, #3
 8021ca8:	3903      	subs	r1, #3
 8021caa:	458c      	cmp	ip, r1
 8021cac:	bf38      	it	cc
 8021cae:	2200      	movcc	r2, #0
 8021cb0:	441a      	add	r2, r3
 8021cb2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8021cb6:	b17b      	cbz	r3, 8021cd8 <__mdiff+0x104>
 8021cb8:	6106      	str	r6, [r0, #16]
 8021cba:	e7a5      	b.n	8021c08 <__mdiff+0x34>
 8021cbc:	f855 8b04 	ldr.w	r8, [r5], #4
 8021cc0:	fa17 f488 	uxtah	r4, r7, r8
 8021cc4:	1422      	asrs	r2, r4, #16
 8021cc6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8021cca:	b2a4      	uxth	r4, r4
 8021ccc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8021cd0:	f84e 4b04 	str.w	r4, [lr], #4
 8021cd4:	1417      	asrs	r7, r2, #16
 8021cd6:	e7e0      	b.n	8021c9a <__mdiff+0xc6>
 8021cd8:	3e01      	subs	r6, #1
 8021cda:	e7ea      	b.n	8021cb2 <__mdiff+0xde>
 8021cdc:	08026f50 	.word	0x08026f50
 8021ce0:	08026fe0 	.word	0x08026fe0

08021ce4 <__ulp>:
 8021ce4:	b082      	sub	sp, #8
 8021ce6:	ed8d 0b00 	vstr	d0, [sp]
 8021cea:	9b01      	ldr	r3, [sp, #4]
 8021cec:	4912      	ldr	r1, [pc, #72]	; (8021d38 <__ulp+0x54>)
 8021cee:	4019      	ands	r1, r3
 8021cf0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8021cf4:	2900      	cmp	r1, #0
 8021cf6:	dd05      	ble.n	8021d04 <__ulp+0x20>
 8021cf8:	2200      	movs	r2, #0
 8021cfa:	460b      	mov	r3, r1
 8021cfc:	ec43 2b10 	vmov	d0, r2, r3
 8021d00:	b002      	add	sp, #8
 8021d02:	4770      	bx	lr
 8021d04:	4249      	negs	r1, r1
 8021d06:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8021d0a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8021d0e:	f04f 0200 	mov.w	r2, #0
 8021d12:	f04f 0300 	mov.w	r3, #0
 8021d16:	da04      	bge.n	8021d22 <__ulp+0x3e>
 8021d18:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8021d1c:	fa41 f300 	asr.w	r3, r1, r0
 8021d20:	e7ec      	b.n	8021cfc <__ulp+0x18>
 8021d22:	f1a0 0114 	sub.w	r1, r0, #20
 8021d26:	291e      	cmp	r1, #30
 8021d28:	bfda      	itte	le
 8021d2a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8021d2e:	fa20 f101 	lsrle.w	r1, r0, r1
 8021d32:	2101      	movgt	r1, #1
 8021d34:	460a      	mov	r2, r1
 8021d36:	e7e1      	b.n	8021cfc <__ulp+0x18>
 8021d38:	7ff00000 	.word	0x7ff00000

08021d3c <__b2d>:
 8021d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d3e:	6905      	ldr	r5, [r0, #16]
 8021d40:	f100 0714 	add.w	r7, r0, #20
 8021d44:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8021d48:	1f2e      	subs	r6, r5, #4
 8021d4a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8021d4e:	4620      	mov	r0, r4
 8021d50:	f7ff fd52 	bl	80217f8 <__hi0bits>
 8021d54:	f1c0 0320 	rsb	r3, r0, #32
 8021d58:	280a      	cmp	r0, #10
 8021d5a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8021dd8 <__b2d+0x9c>
 8021d5e:	600b      	str	r3, [r1, #0]
 8021d60:	dc14      	bgt.n	8021d8c <__b2d+0x50>
 8021d62:	f1c0 0e0b 	rsb	lr, r0, #11
 8021d66:	fa24 f10e 	lsr.w	r1, r4, lr
 8021d6a:	42b7      	cmp	r7, r6
 8021d6c:	ea41 030c 	orr.w	r3, r1, ip
 8021d70:	bf34      	ite	cc
 8021d72:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8021d76:	2100      	movcs	r1, #0
 8021d78:	3015      	adds	r0, #21
 8021d7a:	fa04 f000 	lsl.w	r0, r4, r0
 8021d7e:	fa21 f10e 	lsr.w	r1, r1, lr
 8021d82:	ea40 0201 	orr.w	r2, r0, r1
 8021d86:	ec43 2b10 	vmov	d0, r2, r3
 8021d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021d8c:	42b7      	cmp	r7, r6
 8021d8e:	bf3a      	itte	cc
 8021d90:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8021d94:	f1a5 0608 	subcc.w	r6, r5, #8
 8021d98:	2100      	movcs	r1, #0
 8021d9a:	380b      	subs	r0, #11
 8021d9c:	d017      	beq.n	8021dce <__b2d+0x92>
 8021d9e:	f1c0 0c20 	rsb	ip, r0, #32
 8021da2:	fa04 f500 	lsl.w	r5, r4, r0
 8021da6:	42be      	cmp	r6, r7
 8021da8:	fa21 f40c 	lsr.w	r4, r1, ip
 8021dac:	ea45 0504 	orr.w	r5, r5, r4
 8021db0:	bf8c      	ite	hi
 8021db2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8021db6:	2400      	movls	r4, #0
 8021db8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8021dbc:	fa01 f000 	lsl.w	r0, r1, r0
 8021dc0:	fa24 f40c 	lsr.w	r4, r4, ip
 8021dc4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8021dc8:	ea40 0204 	orr.w	r2, r0, r4
 8021dcc:	e7db      	b.n	8021d86 <__b2d+0x4a>
 8021dce:	ea44 030c 	orr.w	r3, r4, ip
 8021dd2:	460a      	mov	r2, r1
 8021dd4:	e7d7      	b.n	8021d86 <__b2d+0x4a>
 8021dd6:	bf00      	nop
 8021dd8:	3ff00000 	.word	0x3ff00000

08021ddc <__d2b>:
 8021ddc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021de0:	4689      	mov	r9, r1
 8021de2:	2101      	movs	r1, #1
 8021de4:	ec57 6b10 	vmov	r6, r7, d0
 8021de8:	4690      	mov	r8, r2
 8021dea:	f7ff fc0f 	bl	802160c <_Balloc>
 8021dee:	4604      	mov	r4, r0
 8021df0:	b930      	cbnz	r0, 8021e00 <__d2b+0x24>
 8021df2:	4602      	mov	r2, r0
 8021df4:	4b25      	ldr	r3, [pc, #148]	; (8021e8c <__d2b+0xb0>)
 8021df6:	4826      	ldr	r0, [pc, #152]	; (8021e90 <__d2b+0xb4>)
 8021df8:	f240 310a 	movw	r1, #778	; 0x30a
 8021dfc:	f7fe f8e0 	bl	801ffc0 <__assert_func>
 8021e00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8021e04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021e08:	bb35      	cbnz	r5, 8021e58 <__d2b+0x7c>
 8021e0a:	2e00      	cmp	r6, #0
 8021e0c:	9301      	str	r3, [sp, #4]
 8021e0e:	d028      	beq.n	8021e62 <__d2b+0x86>
 8021e10:	4668      	mov	r0, sp
 8021e12:	9600      	str	r6, [sp, #0]
 8021e14:	f7ff fd10 	bl	8021838 <__lo0bits>
 8021e18:	9900      	ldr	r1, [sp, #0]
 8021e1a:	b300      	cbz	r0, 8021e5e <__d2b+0x82>
 8021e1c:	9a01      	ldr	r2, [sp, #4]
 8021e1e:	f1c0 0320 	rsb	r3, r0, #32
 8021e22:	fa02 f303 	lsl.w	r3, r2, r3
 8021e26:	430b      	orrs	r3, r1
 8021e28:	40c2      	lsrs	r2, r0
 8021e2a:	6163      	str	r3, [r4, #20]
 8021e2c:	9201      	str	r2, [sp, #4]
 8021e2e:	9b01      	ldr	r3, [sp, #4]
 8021e30:	61a3      	str	r3, [r4, #24]
 8021e32:	2b00      	cmp	r3, #0
 8021e34:	bf14      	ite	ne
 8021e36:	2202      	movne	r2, #2
 8021e38:	2201      	moveq	r2, #1
 8021e3a:	6122      	str	r2, [r4, #16]
 8021e3c:	b1d5      	cbz	r5, 8021e74 <__d2b+0x98>
 8021e3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021e42:	4405      	add	r5, r0
 8021e44:	f8c9 5000 	str.w	r5, [r9]
 8021e48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8021e4c:	f8c8 0000 	str.w	r0, [r8]
 8021e50:	4620      	mov	r0, r4
 8021e52:	b003      	add	sp, #12
 8021e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021e5c:	e7d5      	b.n	8021e0a <__d2b+0x2e>
 8021e5e:	6161      	str	r1, [r4, #20]
 8021e60:	e7e5      	b.n	8021e2e <__d2b+0x52>
 8021e62:	a801      	add	r0, sp, #4
 8021e64:	f7ff fce8 	bl	8021838 <__lo0bits>
 8021e68:	9b01      	ldr	r3, [sp, #4]
 8021e6a:	6163      	str	r3, [r4, #20]
 8021e6c:	2201      	movs	r2, #1
 8021e6e:	6122      	str	r2, [r4, #16]
 8021e70:	3020      	adds	r0, #32
 8021e72:	e7e3      	b.n	8021e3c <__d2b+0x60>
 8021e74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021e78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8021e7c:	f8c9 0000 	str.w	r0, [r9]
 8021e80:	6918      	ldr	r0, [r3, #16]
 8021e82:	f7ff fcb9 	bl	80217f8 <__hi0bits>
 8021e86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8021e8a:	e7df      	b.n	8021e4c <__d2b+0x70>
 8021e8c:	08026f50 	.word	0x08026f50
 8021e90:	08026fe0 	.word	0x08026fe0

08021e94 <__ratio>:
 8021e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e98:	4688      	mov	r8, r1
 8021e9a:	4669      	mov	r1, sp
 8021e9c:	4681      	mov	r9, r0
 8021e9e:	f7ff ff4d 	bl	8021d3c <__b2d>
 8021ea2:	a901      	add	r1, sp, #4
 8021ea4:	4640      	mov	r0, r8
 8021ea6:	ec55 4b10 	vmov	r4, r5, d0
 8021eaa:	f7ff ff47 	bl	8021d3c <__b2d>
 8021eae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021eb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8021eb6:	eba3 0c02 	sub.w	ip, r3, r2
 8021eba:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021ebe:	1a9b      	subs	r3, r3, r2
 8021ec0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8021ec4:	ec51 0b10 	vmov	r0, r1, d0
 8021ec8:	2b00      	cmp	r3, #0
 8021eca:	bfd6      	itet	le
 8021ecc:	460a      	movle	r2, r1
 8021ece:	462a      	movgt	r2, r5
 8021ed0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8021ed4:	468b      	mov	fp, r1
 8021ed6:	462f      	mov	r7, r5
 8021ed8:	bfd4      	ite	le
 8021eda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8021ede:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8021ee2:	4620      	mov	r0, r4
 8021ee4:	ee10 2a10 	vmov	r2, s0
 8021ee8:	465b      	mov	r3, fp
 8021eea:	4639      	mov	r1, r7
 8021eec:	f7de fcae 	bl	800084c <__aeabi_ddiv>
 8021ef0:	ec41 0b10 	vmov	d0, r0, r1
 8021ef4:	b003      	add	sp, #12
 8021ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021efa <__copybits>:
 8021efa:	3901      	subs	r1, #1
 8021efc:	b570      	push	{r4, r5, r6, lr}
 8021efe:	1149      	asrs	r1, r1, #5
 8021f00:	6914      	ldr	r4, [r2, #16]
 8021f02:	3101      	adds	r1, #1
 8021f04:	f102 0314 	add.w	r3, r2, #20
 8021f08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8021f0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8021f10:	1f05      	subs	r5, r0, #4
 8021f12:	42a3      	cmp	r3, r4
 8021f14:	d30c      	bcc.n	8021f30 <__copybits+0x36>
 8021f16:	1aa3      	subs	r3, r4, r2
 8021f18:	3b11      	subs	r3, #17
 8021f1a:	f023 0303 	bic.w	r3, r3, #3
 8021f1e:	3211      	adds	r2, #17
 8021f20:	42a2      	cmp	r2, r4
 8021f22:	bf88      	it	hi
 8021f24:	2300      	movhi	r3, #0
 8021f26:	4418      	add	r0, r3
 8021f28:	2300      	movs	r3, #0
 8021f2a:	4288      	cmp	r0, r1
 8021f2c:	d305      	bcc.n	8021f3a <__copybits+0x40>
 8021f2e:	bd70      	pop	{r4, r5, r6, pc}
 8021f30:	f853 6b04 	ldr.w	r6, [r3], #4
 8021f34:	f845 6f04 	str.w	r6, [r5, #4]!
 8021f38:	e7eb      	b.n	8021f12 <__copybits+0x18>
 8021f3a:	f840 3b04 	str.w	r3, [r0], #4
 8021f3e:	e7f4      	b.n	8021f2a <__copybits+0x30>

08021f40 <__any_on>:
 8021f40:	f100 0214 	add.w	r2, r0, #20
 8021f44:	6900      	ldr	r0, [r0, #16]
 8021f46:	114b      	asrs	r3, r1, #5
 8021f48:	4298      	cmp	r0, r3
 8021f4a:	b510      	push	{r4, lr}
 8021f4c:	db11      	blt.n	8021f72 <__any_on+0x32>
 8021f4e:	dd0a      	ble.n	8021f66 <__any_on+0x26>
 8021f50:	f011 011f 	ands.w	r1, r1, #31
 8021f54:	d007      	beq.n	8021f66 <__any_on+0x26>
 8021f56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8021f5a:	fa24 f001 	lsr.w	r0, r4, r1
 8021f5e:	fa00 f101 	lsl.w	r1, r0, r1
 8021f62:	428c      	cmp	r4, r1
 8021f64:	d10b      	bne.n	8021f7e <__any_on+0x3e>
 8021f66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021f6a:	4293      	cmp	r3, r2
 8021f6c:	d803      	bhi.n	8021f76 <__any_on+0x36>
 8021f6e:	2000      	movs	r0, #0
 8021f70:	bd10      	pop	{r4, pc}
 8021f72:	4603      	mov	r3, r0
 8021f74:	e7f7      	b.n	8021f66 <__any_on+0x26>
 8021f76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8021f7a:	2900      	cmp	r1, #0
 8021f7c:	d0f5      	beq.n	8021f6a <__any_on+0x2a>
 8021f7e:	2001      	movs	r0, #1
 8021f80:	e7f6      	b.n	8021f70 <__any_on+0x30>

08021f82 <_calloc_r>:
 8021f82:	b513      	push	{r0, r1, r4, lr}
 8021f84:	434a      	muls	r2, r1
 8021f86:	4611      	mov	r1, r2
 8021f88:	9201      	str	r2, [sp, #4]
 8021f8a:	f7fc f8e3 	bl	801e154 <_malloc_r>
 8021f8e:	4604      	mov	r4, r0
 8021f90:	b118      	cbz	r0, 8021f9a <_calloc_r+0x18>
 8021f92:	9a01      	ldr	r2, [sp, #4]
 8021f94:	2100      	movs	r1, #0
 8021f96:	f7fc f885 	bl	801e0a4 <memset>
 8021f9a:	4620      	mov	r0, r4
 8021f9c:	b002      	add	sp, #8
 8021f9e:	bd10      	pop	{r4, pc}

08021fa0 <__ssputs_r>:
 8021fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021fa4:	688e      	ldr	r6, [r1, #8]
 8021fa6:	429e      	cmp	r6, r3
 8021fa8:	4682      	mov	sl, r0
 8021faa:	460c      	mov	r4, r1
 8021fac:	4690      	mov	r8, r2
 8021fae:	461f      	mov	r7, r3
 8021fb0:	d838      	bhi.n	8022024 <__ssputs_r+0x84>
 8021fb2:	898a      	ldrh	r2, [r1, #12]
 8021fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021fb8:	d032      	beq.n	8022020 <__ssputs_r+0x80>
 8021fba:	6825      	ldr	r5, [r4, #0]
 8021fbc:	6909      	ldr	r1, [r1, #16]
 8021fbe:	eba5 0901 	sub.w	r9, r5, r1
 8021fc2:	6965      	ldr	r5, [r4, #20]
 8021fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021fcc:	3301      	adds	r3, #1
 8021fce:	444b      	add	r3, r9
 8021fd0:	106d      	asrs	r5, r5, #1
 8021fd2:	429d      	cmp	r5, r3
 8021fd4:	bf38      	it	cc
 8021fd6:	461d      	movcc	r5, r3
 8021fd8:	0553      	lsls	r3, r2, #21
 8021fda:	d531      	bpl.n	8022040 <__ssputs_r+0xa0>
 8021fdc:	4629      	mov	r1, r5
 8021fde:	f7fc f8b9 	bl	801e154 <_malloc_r>
 8021fe2:	4606      	mov	r6, r0
 8021fe4:	b950      	cbnz	r0, 8021ffc <__ssputs_r+0x5c>
 8021fe6:	230c      	movs	r3, #12
 8021fe8:	f8ca 3000 	str.w	r3, [sl]
 8021fec:	89a3      	ldrh	r3, [r4, #12]
 8021fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021ff2:	81a3      	strh	r3, [r4, #12]
 8021ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8021ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ffc:	6921      	ldr	r1, [r4, #16]
 8021ffe:	464a      	mov	r2, r9
 8022000:	f7fc f828 	bl	801e054 <memcpy>
 8022004:	89a3      	ldrh	r3, [r4, #12]
 8022006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802200a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802200e:	81a3      	strh	r3, [r4, #12]
 8022010:	6126      	str	r6, [r4, #16]
 8022012:	6165      	str	r5, [r4, #20]
 8022014:	444e      	add	r6, r9
 8022016:	eba5 0509 	sub.w	r5, r5, r9
 802201a:	6026      	str	r6, [r4, #0]
 802201c:	60a5      	str	r5, [r4, #8]
 802201e:	463e      	mov	r6, r7
 8022020:	42be      	cmp	r6, r7
 8022022:	d900      	bls.n	8022026 <__ssputs_r+0x86>
 8022024:	463e      	mov	r6, r7
 8022026:	4632      	mov	r2, r6
 8022028:	6820      	ldr	r0, [r4, #0]
 802202a:	4641      	mov	r1, r8
 802202c:	f7fc f820 	bl	801e070 <memmove>
 8022030:	68a3      	ldr	r3, [r4, #8]
 8022032:	6822      	ldr	r2, [r4, #0]
 8022034:	1b9b      	subs	r3, r3, r6
 8022036:	4432      	add	r2, r6
 8022038:	60a3      	str	r3, [r4, #8]
 802203a:	6022      	str	r2, [r4, #0]
 802203c:	2000      	movs	r0, #0
 802203e:	e7db      	b.n	8021ff8 <__ssputs_r+0x58>
 8022040:	462a      	mov	r2, r5
 8022042:	f000 ffc9 	bl	8022fd8 <_realloc_r>
 8022046:	4606      	mov	r6, r0
 8022048:	2800      	cmp	r0, #0
 802204a:	d1e1      	bne.n	8022010 <__ssputs_r+0x70>
 802204c:	6921      	ldr	r1, [r4, #16]
 802204e:	4650      	mov	r0, sl
 8022050:	f7fc f830 	bl	801e0b4 <_free_r>
 8022054:	e7c7      	b.n	8021fe6 <__ssputs_r+0x46>
	...

08022058 <_svfiprintf_r>:
 8022058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802205c:	4698      	mov	r8, r3
 802205e:	898b      	ldrh	r3, [r1, #12]
 8022060:	061b      	lsls	r3, r3, #24
 8022062:	b09d      	sub	sp, #116	; 0x74
 8022064:	4607      	mov	r7, r0
 8022066:	460d      	mov	r5, r1
 8022068:	4614      	mov	r4, r2
 802206a:	d50e      	bpl.n	802208a <_svfiprintf_r+0x32>
 802206c:	690b      	ldr	r3, [r1, #16]
 802206e:	b963      	cbnz	r3, 802208a <_svfiprintf_r+0x32>
 8022070:	2140      	movs	r1, #64	; 0x40
 8022072:	f7fc f86f 	bl	801e154 <_malloc_r>
 8022076:	6028      	str	r0, [r5, #0]
 8022078:	6128      	str	r0, [r5, #16]
 802207a:	b920      	cbnz	r0, 8022086 <_svfiprintf_r+0x2e>
 802207c:	230c      	movs	r3, #12
 802207e:	603b      	str	r3, [r7, #0]
 8022080:	f04f 30ff 	mov.w	r0, #4294967295
 8022084:	e0d1      	b.n	802222a <_svfiprintf_r+0x1d2>
 8022086:	2340      	movs	r3, #64	; 0x40
 8022088:	616b      	str	r3, [r5, #20]
 802208a:	2300      	movs	r3, #0
 802208c:	9309      	str	r3, [sp, #36]	; 0x24
 802208e:	2320      	movs	r3, #32
 8022090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022094:	f8cd 800c 	str.w	r8, [sp, #12]
 8022098:	2330      	movs	r3, #48	; 0x30
 802209a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022244 <_svfiprintf_r+0x1ec>
 802209e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80220a2:	f04f 0901 	mov.w	r9, #1
 80220a6:	4623      	mov	r3, r4
 80220a8:	469a      	mov	sl, r3
 80220aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80220ae:	b10a      	cbz	r2, 80220b4 <_svfiprintf_r+0x5c>
 80220b0:	2a25      	cmp	r2, #37	; 0x25
 80220b2:	d1f9      	bne.n	80220a8 <_svfiprintf_r+0x50>
 80220b4:	ebba 0b04 	subs.w	fp, sl, r4
 80220b8:	d00b      	beq.n	80220d2 <_svfiprintf_r+0x7a>
 80220ba:	465b      	mov	r3, fp
 80220bc:	4622      	mov	r2, r4
 80220be:	4629      	mov	r1, r5
 80220c0:	4638      	mov	r0, r7
 80220c2:	f7ff ff6d 	bl	8021fa0 <__ssputs_r>
 80220c6:	3001      	adds	r0, #1
 80220c8:	f000 80aa 	beq.w	8022220 <_svfiprintf_r+0x1c8>
 80220cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80220ce:	445a      	add	r2, fp
 80220d0:	9209      	str	r2, [sp, #36]	; 0x24
 80220d2:	f89a 3000 	ldrb.w	r3, [sl]
 80220d6:	2b00      	cmp	r3, #0
 80220d8:	f000 80a2 	beq.w	8022220 <_svfiprintf_r+0x1c8>
 80220dc:	2300      	movs	r3, #0
 80220de:	f04f 32ff 	mov.w	r2, #4294967295
 80220e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80220e6:	f10a 0a01 	add.w	sl, sl, #1
 80220ea:	9304      	str	r3, [sp, #16]
 80220ec:	9307      	str	r3, [sp, #28]
 80220ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80220f2:	931a      	str	r3, [sp, #104]	; 0x68
 80220f4:	4654      	mov	r4, sl
 80220f6:	2205      	movs	r2, #5
 80220f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80220fc:	4851      	ldr	r0, [pc, #324]	; (8022244 <_svfiprintf_r+0x1ec>)
 80220fe:	f7de f86f 	bl	80001e0 <memchr>
 8022102:	9a04      	ldr	r2, [sp, #16]
 8022104:	b9d8      	cbnz	r0, 802213e <_svfiprintf_r+0xe6>
 8022106:	06d0      	lsls	r0, r2, #27
 8022108:	bf44      	itt	mi
 802210a:	2320      	movmi	r3, #32
 802210c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022110:	0711      	lsls	r1, r2, #28
 8022112:	bf44      	itt	mi
 8022114:	232b      	movmi	r3, #43	; 0x2b
 8022116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802211a:	f89a 3000 	ldrb.w	r3, [sl]
 802211e:	2b2a      	cmp	r3, #42	; 0x2a
 8022120:	d015      	beq.n	802214e <_svfiprintf_r+0xf6>
 8022122:	9a07      	ldr	r2, [sp, #28]
 8022124:	4654      	mov	r4, sl
 8022126:	2000      	movs	r0, #0
 8022128:	f04f 0c0a 	mov.w	ip, #10
 802212c:	4621      	mov	r1, r4
 802212e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022132:	3b30      	subs	r3, #48	; 0x30
 8022134:	2b09      	cmp	r3, #9
 8022136:	d94e      	bls.n	80221d6 <_svfiprintf_r+0x17e>
 8022138:	b1b0      	cbz	r0, 8022168 <_svfiprintf_r+0x110>
 802213a:	9207      	str	r2, [sp, #28]
 802213c:	e014      	b.n	8022168 <_svfiprintf_r+0x110>
 802213e:	eba0 0308 	sub.w	r3, r0, r8
 8022142:	fa09 f303 	lsl.w	r3, r9, r3
 8022146:	4313      	orrs	r3, r2
 8022148:	9304      	str	r3, [sp, #16]
 802214a:	46a2      	mov	sl, r4
 802214c:	e7d2      	b.n	80220f4 <_svfiprintf_r+0x9c>
 802214e:	9b03      	ldr	r3, [sp, #12]
 8022150:	1d19      	adds	r1, r3, #4
 8022152:	681b      	ldr	r3, [r3, #0]
 8022154:	9103      	str	r1, [sp, #12]
 8022156:	2b00      	cmp	r3, #0
 8022158:	bfbb      	ittet	lt
 802215a:	425b      	neglt	r3, r3
 802215c:	f042 0202 	orrlt.w	r2, r2, #2
 8022160:	9307      	strge	r3, [sp, #28]
 8022162:	9307      	strlt	r3, [sp, #28]
 8022164:	bfb8      	it	lt
 8022166:	9204      	strlt	r2, [sp, #16]
 8022168:	7823      	ldrb	r3, [r4, #0]
 802216a:	2b2e      	cmp	r3, #46	; 0x2e
 802216c:	d10c      	bne.n	8022188 <_svfiprintf_r+0x130>
 802216e:	7863      	ldrb	r3, [r4, #1]
 8022170:	2b2a      	cmp	r3, #42	; 0x2a
 8022172:	d135      	bne.n	80221e0 <_svfiprintf_r+0x188>
 8022174:	9b03      	ldr	r3, [sp, #12]
 8022176:	1d1a      	adds	r2, r3, #4
 8022178:	681b      	ldr	r3, [r3, #0]
 802217a:	9203      	str	r2, [sp, #12]
 802217c:	2b00      	cmp	r3, #0
 802217e:	bfb8      	it	lt
 8022180:	f04f 33ff 	movlt.w	r3, #4294967295
 8022184:	3402      	adds	r4, #2
 8022186:	9305      	str	r3, [sp, #20]
 8022188:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022254 <_svfiprintf_r+0x1fc>
 802218c:	7821      	ldrb	r1, [r4, #0]
 802218e:	2203      	movs	r2, #3
 8022190:	4650      	mov	r0, sl
 8022192:	f7de f825 	bl	80001e0 <memchr>
 8022196:	b140      	cbz	r0, 80221aa <_svfiprintf_r+0x152>
 8022198:	2340      	movs	r3, #64	; 0x40
 802219a:	eba0 000a 	sub.w	r0, r0, sl
 802219e:	fa03 f000 	lsl.w	r0, r3, r0
 80221a2:	9b04      	ldr	r3, [sp, #16]
 80221a4:	4303      	orrs	r3, r0
 80221a6:	3401      	adds	r4, #1
 80221a8:	9304      	str	r3, [sp, #16]
 80221aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80221ae:	4826      	ldr	r0, [pc, #152]	; (8022248 <_svfiprintf_r+0x1f0>)
 80221b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80221b4:	2206      	movs	r2, #6
 80221b6:	f7de f813 	bl	80001e0 <memchr>
 80221ba:	2800      	cmp	r0, #0
 80221bc:	d038      	beq.n	8022230 <_svfiprintf_r+0x1d8>
 80221be:	4b23      	ldr	r3, [pc, #140]	; (802224c <_svfiprintf_r+0x1f4>)
 80221c0:	bb1b      	cbnz	r3, 802220a <_svfiprintf_r+0x1b2>
 80221c2:	9b03      	ldr	r3, [sp, #12]
 80221c4:	3307      	adds	r3, #7
 80221c6:	f023 0307 	bic.w	r3, r3, #7
 80221ca:	3308      	adds	r3, #8
 80221cc:	9303      	str	r3, [sp, #12]
 80221ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221d0:	4433      	add	r3, r6
 80221d2:	9309      	str	r3, [sp, #36]	; 0x24
 80221d4:	e767      	b.n	80220a6 <_svfiprintf_r+0x4e>
 80221d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80221da:	460c      	mov	r4, r1
 80221dc:	2001      	movs	r0, #1
 80221de:	e7a5      	b.n	802212c <_svfiprintf_r+0xd4>
 80221e0:	2300      	movs	r3, #0
 80221e2:	3401      	adds	r4, #1
 80221e4:	9305      	str	r3, [sp, #20]
 80221e6:	4619      	mov	r1, r3
 80221e8:	f04f 0c0a 	mov.w	ip, #10
 80221ec:	4620      	mov	r0, r4
 80221ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80221f2:	3a30      	subs	r2, #48	; 0x30
 80221f4:	2a09      	cmp	r2, #9
 80221f6:	d903      	bls.n	8022200 <_svfiprintf_r+0x1a8>
 80221f8:	2b00      	cmp	r3, #0
 80221fa:	d0c5      	beq.n	8022188 <_svfiprintf_r+0x130>
 80221fc:	9105      	str	r1, [sp, #20]
 80221fe:	e7c3      	b.n	8022188 <_svfiprintf_r+0x130>
 8022200:	fb0c 2101 	mla	r1, ip, r1, r2
 8022204:	4604      	mov	r4, r0
 8022206:	2301      	movs	r3, #1
 8022208:	e7f0      	b.n	80221ec <_svfiprintf_r+0x194>
 802220a:	ab03      	add	r3, sp, #12
 802220c:	9300      	str	r3, [sp, #0]
 802220e:	462a      	mov	r2, r5
 8022210:	4b0f      	ldr	r3, [pc, #60]	; (8022250 <_svfiprintf_r+0x1f8>)
 8022212:	a904      	add	r1, sp, #16
 8022214:	4638      	mov	r0, r7
 8022216:	f7fc f897 	bl	801e348 <_printf_float>
 802221a:	1c42      	adds	r2, r0, #1
 802221c:	4606      	mov	r6, r0
 802221e:	d1d6      	bne.n	80221ce <_svfiprintf_r+0x176>
 8022220:	89ab      	ldrh	r3, [r5, #12]
 8022222:	065b      	lsls	r3, r3, #25
 8022224:	f53f af2c 	bmi.w	8022080 <_svfiprintf_r+0x28>
 8022228:	9809      	ldr	r0, [sp, #36]	; 0x24
 802222a:	b01d      	add	sp, #116	; 0x74
 802222c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022230:	ab03      	add	r3, sp, #12
 8022232:	9300      	str	r3, [sp, #0]
 8022234:	462a      	mov	r2, r5
 8022236:	4b06      	ldr	r3, [pc, #24]	; (8022250 <_svfiprintf_r+0x1f8>)
 8022238:	a904      	add	r1, sp, #16
 802223a:	4638      	mov	r0, r7
 802223c:	f7fc fb28 	bl	801e890 <_printf_i>
 8022240:	e7eb      	b.n	802221a <_svfiprintf_r+0x1c2>
 8022242:	bf00      	nop
 8022244:	0802713c 	.word	0x0802713c
 8022248:	08027146 	.word	0x08027146
 802224c:	0801e349 	.word	0x0801e349
 8022250:	08021fa1 	.word	0x08021fa1
 8022254:	08027142 	.word	0x08027142

08022258 <_sungetc_r>:
 8022258:	b538      	push	{r3, r4, r5, lr}
 802225a:	1c4b      	adds	r3, r1, #1
 802225c:	4614      	mov	r4, r2
 802225e:	d103      	bne.n	8022268 <_sungetc_r+0x10>
 8022260:	f04f 35ff 	mov.w	r5, #4294967295
 8022264:	4628      	mov	r0, r5
 8022266:	bd38      	pop	{r3, r4, r5, pc}
 8022268:	8993      	ldrh	r3, [r2, #12]
 802226a:	f023 0320 	bic.w	r3, r3, #32
 802226e:	8193      	strh	r3, [r2, #12]
 8022270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022272:	6852      	ldr	r2, [r2, #4]
 8022274:	b2cd      	uxtb	r5, r1
 8022276:	b18b      	cbz	r3, 802229c <_sungetc_r+0x44>
 8022278:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802227a:	4293      	cmp	r3, r2
 802227c:	dd08      	ble.n	8022290 <_sungetc_r+0x38>
 802227e:	6823      	ldr	r3, [r4, #0]
 8022280:	1e5a      	subs	r2, r3, #1
 8022282:	6022      	str	r2, [r4, #0]
 8022284:	f803 5c01 	strb.w	r5, [r3, #-1]
 8022288:	6863      	ldr	r3, [r4, #4]
 802228a:	3301      	adds	r3, #1
 802228c:	6063      	str	r3, [r4, #4]
 802228e:	e7e9      	b.n	8022264 <_sungetc_r+0xc>
 8022290:	4621      	mov	r1, r4
 8022292:	f000 fd2d 	bl	8022cf0 <__submore>
 8022296:	2800      	cmp	r0, #0
 8022298:	d0f1      	beq.n	802227e <_sungetc_r+0x26>
 802229a:	e7e1      	b.n	8022260 <_sungetc_r+0x8>
 802229c:	6921      	ldr	r1, [r4, #16]
 802229e:	6823      	ldr	r3, [r4, #0]
 80222a0:	b151      	cbz	r1, 80222b8 <_sungetc_r+0x60>
 80222a2:	4299      	cmp	r1, r3
 80222a4:	d208      	bcs.n	80222b8 <_sungetc_r+0x60>
 80222a6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80222aa:	42a9      	cmp	r1, r5
 80222ac:	d104      	bne.n	80222b8 <_sungetc_r+0x60>
 80222ae:	3b01      	subs	r3, #1
 80222b0:	3201      	adds	r2, #1
 80222b2:	6023      	str	r3, [r4, #0]
 80222b4:	6062      	str	r2, [r4, #4]
 80222b6:	e7d5      	b.n	8022264 <_sungetc_r+0xc>
 80222b8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80222bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80222c0:	6363      	str	r3, [r4, #52]	; 0x34
 80222c2:	2303      	movs	r3, #3
 80222c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80222c6:	4623      	mov	r3, r4
 80222c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80222cc:	6023      	str	r3, [r4, #0]
 80222ce:	2301      	movs	r3, #1
 80222d0:	e7dc      	b.n	802228c <_sungetc_r+0x34>

080222d2 <__ssrefill_r>:
 80222d2:	b510      	push	{r4, lr}
 80222d4:	460c      	mov	r4, r1
 80222d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80222d8:	b169      	cbz	r1, 80222f6 <__ssrefill_r+0x24>
 80222da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80222de:	4299      	cmp	r1, r3
 80222e0:	d001      	beq.n	80222e6 <__ssrefill_r+0x14>
 80222e2:	f7fb fee7 	bl	801e0b4 <_free_r>
 80222e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80222e8:	6063      	str	r3, [r4, #4]
 80222ea:	2000      	movs	r0, #0
 80222ec:	6360      	str	r0, [r4, #52]	; 0x34
 80222ee:	b113      	cbz	r3, 80222f6 <__ssrefill_r+0x24>
 80222f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80222f2:	6023      	str	r3, [r4, #0]
 80222f4:	bd10      	pop	{r4, pc}
 80222f6:	6923      	ldr	r3, [r4, #16]
 80222f8:	6023      	str	r3, [r4, #0]
 80222fa:	2300      	movs	r3, #0
 80222fc:	6063      	str	r3, [r4, #4]
 80222fe:	89a3      	ldrh	r3, [r4, #12]
 8022300:	f043 0320 	orr.w	r3, r3, #32
 8022304:	81a3      	strh	r3, [r4, #12]
 8022306:	f04f 30ff 	mov.w	r0, #4294967295
 802230a:	e7f3      	b.n	80222f4 <__ssrefill_r+0x22>

0802230c <__ssvfiscanf_r>:
 802230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022310:	460c      	mov	r4, r1
 8022312:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8022316:	2100      	movs	r1, #0
 8022318:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802231c:	49b2      	ldr	r1, [pc, #712]	; (80225e8 <__ssvfiscanf_r+0x2dc>)
 802231e:	91a0      	str	r1, [sp, #640]	; 0x280
 8022320:	f10d 0804 	add.w	r8, sp, #4
 8022324:	49b1      	ldr	r1, [pc, #708]	; (80225ec <__ssvfiscanf_r+0x2e0>)
 8022326:	4fb2      	ldr	r7, [pc, #712]	; (80225f0 <__ssvfiscanf_r+0x2e4>)
 8022328:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80225f4 <__ssvfiscanf_r+0x2e8>
 802232c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8022330:	4606      	mov	r6, r0
 8022332:	91a1      	str	r1, [sp, #644]	; 0x284
 8022334:	9300      	str	r3, [sp, #0]
 8022336:	f892 a000 	ldrb.w	sl, [r2]
 802233a:	f1ba 0f00 	cmp.w	sl, #0
 802233e:	f000 8151 	beq.w	80225e4 <__ssvfiscanf_r+0x2d8>
 8022342:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8022346:	f013 0308 	ands.w	r3, r3, #8
 802234a:	f102 0501 	add.w	r5, r2, #1
 802234e:	d019      	beq.n	8022384 <__ssvfiscanf_r+0x78>
 8022350:	6863      	ldr	r3, [r4, #4]
 8022352:	2b00      	cmp	r3, #0
 8022354:	dd0f      	ble.n	8022376 <__ssvfiscanf_r+0x6a>
 8022356:	6823      	ldr	r3, [r4, #0]
 8022358:	781a      	ldrb	r2, [r3, #0]
 802235a:	5cba      	ldrb	r2, [r7, r2]
 802235c:	0712      	lsls	r2, r2, #28
 802235e:	d401      	bmi.n	8022364 <__ssvfiscanf_r+0x58>
 8022360:	462a      	mov	r2, r5
 8022362:	e7e8      	b.n	8022336 <__ssvfiscanf_r+0x2a>
 8022364:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022366:	3201      	adds	r2, #1
 8022368:	9245      	str	r2, [sp, #276]	; 0x114
 802236a:	6862      	ldr	r2, [r4, #4]
 802236c:	3301      	adds	r3, #1
 802236e:	3a01      	subs	r2, #1
 8022370:	6062      	str	r2, [r4, #4]
 8022372:	6023      	str	r3, [r4, #0]
 8022374:	e7ec      	b.n	8022350 <__ssvfiscanf_r+0x44>
 8022376:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022378:	4621      	mov	r1, r4
 802237a:	4630      	mov	r0, r6
 802237c:	4798      	blx	r3
 802237e:	2800      	cmp	r0, #0
 8022380:	d0e9      	beq.n	8022356 <__ssvfiscanf_r+0x4a>
 8022382:	e7ed      	b.n	8022360 <__ssvfiscanf_r+0x54>
 8022384:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8022388:	f040 8083 	bne.w	8022492 <__ssvfiscanf_r+0x186>
 802238c:	9341      	str	r3, [sp, #260]	; 0x104
 802238e:	9343      	str	r3, [sp, #268]	; 0x10c
 8022390:	7853      	ldrb	r3, [r2, #1]
 8022392:	2b2a      	cmp	r3, #42	; 0x2a
 8022394:	bf02      	ittt	eq
 8022396:	2310      	moveq	r3, #16
 8022398:	1c95      	addeq	r5, r2, #2
 802239a:	9341      	streq	r3, [sp, #260]	; 0x104
 802239c:	220a      	movs	r2, #10
 802239e:	46ab      	mov	fp, r5
 80223a0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80223a4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80223a8:	2b09      	cmp	r3, #9
 80223aa:	d91d      	bls.n	80223e8 <__ssvfiscanf_r+0xdc>
 80223ac:	4891      	ldr	r0, [pc, #580]	; (80225f4 <__ssvfiscanf_r+0x2e8>)
 80223ae:	2203      	movs	r2, #3
 80223b0:	f7dd ff16 	bl	80001e0 <memchr>
 80223b4:	b140      	cbz	r0, 80223c8 <__ssvfiscanf_r+0xbc>
 80223b6:	2301      	movs	r3, #1
 80223b8:	eba0 0009 	sub.w	r0, r0, r9
 80223bc:	fa03 f000 	lsl.w	r0, r3, r0
 80223c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80223c2:	4318      	orrs	r0, r3
 80223c4:	9041      	str	r0, [sp, #260]	; 0x104
 80223c6:	465d      	mov	r5, fp
 80223c8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80223cc:	2b78      	cmp	r3, #120	; 0x78
 80223ce:	d806      	bhi.n	80223de <__ssvfiscanf_r+0xd2>
 80223d0:	2b57      	cmp	r3, #87	; 0x57
 80223d2:	d810      	bhi.n	80223f6 <__ssvfiscanf_r+0xea>
 80223d4:	2b25      	cmp	r3, #37	; 0x25
 80223d6:	d05c      	beq.n	8022492 <__ssvfiscanf_r+0x186>
 80223d8:	d856      	bhi.n	8022488 <__ssvfiscanf_r+0x17c>
 80223da:	2b00      	cmp	r3, #0
 80223dc:	d074      	beq.n	80224c8 <__ssvfiscanf_r+0x1bc>
 80223de:	2303      	movs	r3, #3
 80223e0:	9347      	str	r3, [sp, #284]	; 0x11c
 80223e2:	230a      	movs	r3, #10
 80223e4:	9342      	str	r3, [sp, #264]	; 0x108
 80223e6:	e081      	b.n	80224ec <__ssvfiscanf_r+0x1e0>
 80223e8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80223ea:	fb02 1303 	mla	r3, r2, r3, r1
 80223ee:	3b30      	subs	r3, #48	; 0x30
 80223f0:	9343      	str	r3, [sp, #268]	; 0x10c
 80223f2:	465d      	mov	r5, fp
 80223f4:	e7d3      	b.n	802239e <__ssvfiscanf_r+0x92>
 80223f6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80223fa:	2a20      	cmp	r2, #32
 80223fc:	d8ef      	bhi.n	80223de <__ssvfiscanf_r+0xd2>
 80223fe:	a101      	add	r1, pc, #4	; (adr r1, 8022404 <__ssvfiscanf_r+0xf8>)
 8022400:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8022404:	080224d7 	.word	0x080224d7
 8022408:	080223df 	.word	0x080223df
 802240c:	080223df 	.word	0x080223df
 8022410:	08022535 	.word	0x08022535
 8022414:	080223df 	.word	0x080223df
 8022418:	080223df 	.word	0x080223df
 802241c:	080223df 	.word	0x080223df
 8022420:	080223df 	.word	0x080223df
 8022424:	080223df 	.word	0x080223df
 8022428:	080223df 	.word	0x080223df
 802242c:	080223df 	.word	0x080223df
 8022430:	0802254b 	.word	0x0802254b
 8022434:	08022521 	.word	0x08022521
 8022438:	0802248f 	.word	0x0802248f
 802243c:	0802248f 	.word	0x0802248f
 8022440:	0802248f 	.word	0x0802248f
 8022444:	080223df 	.word	0x080223df
 8022448:	08022525 	.word	0x08022525
 802244c:	080223df 	.word	0x080223df
 8022450:	080223df 	.word	0x080223df
 8022454:	080223df 	.word	0x080223df
 8022458:	080223df 	.word	0x080223df
 802245c:	0802255b 	.word	0x0802255b
 8022460:	0802252d 	.word	0x0802252d
 8022464:	080224cf 	.word	0x080224cf
 8022468:	080223df 	.word	0x080223df
 802246c:	080223df 	.word	0x080223df
 8022470:	08022557 	.word	0x08022557
 8022474:	080223df 	.word	0x080223df
 8022478:	08022521 	.word	0x08022521
 802247c:	080223df 	.word	0x080223df
 8022480:	080223df 	.word	0x080223df
 8022484:	080224d7 	.word	0x080224d7
 8022488:	3b45      	subs	r3, #69	; 0x45
 802248a:	2b02      	cmp	r3, #2
 802248c:	d8a7      	bhi.n	80223de <__ssvfiscanf_r+0xd2>
 802248e:	2305      	movs	r3, #5
 8022490:	e02b      	b.n	80224ea <__ssvfiscanf_r+0x1de>
 8022492:	6863      	ldr	r3, [r4, #4]
 8022494:	2b00      	cmp	r3, #0
 8022496:	dd0d      	ble.n	80224b4 <__ssvfiscanf_r+0x1a8>
 8022498:	6823      	ldr	r3, [r4, #0]
 802249a:	781a      	ldrb	r2, [r3, #0]
 802249c:	4552      	cmp	r2, sl
 802249e:	f040 80a1 	bne.w	80225e4 <__ssvfiscanf_r+0x2d8>
 80224a2:	3301      	adds	r3, #1
 80224a4:	6862      	ldr	r2, [r4, #4]
 80224a6:	6023      	str	r3, [r4, #0]
 80224a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80224aa:	3a01      	subs	r2, #1
 80224ac:	3301      	adds	r3, #1
 80224ae:	6062      	str	r2, [r4, #4]
 80224b0:	9345      	str	r3, [sp, #276]	; 0x114
 80224b2:	e755      	b.n	8022360 <__ssvfiscanf_r+0x54>
 80224b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80224b6:	4621      	mov	r1, r4
 80224b8:	4630      	mov	r0, r6
 80224ba:	4798      	blx	r3
 80224bc:	2800      	cmp	r0, #0
 80224be:	d0eb      	beq.n	8022498 <__ssvfiscanf_r+0x18c>
 80224c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80224c2:	2800      	cmp	r0, #0
 80224c4:	f040 8084 	bne.w	80225d0 <__ssvfiscanf_r+0x2c4>
 80224c8:	f04f 30ff 	mov.w	r0, #4294967295
 80224cc:	e086      	b.n	80225dc <__ssvfiscanf_r+0x2d0>
 80224ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80224d0:	f042 0220 	orr.w	r2, r2, #32
 80224d4:	9241      	str	r2, [sp, #260]	; 0x104
 80224d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80224d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80224dc:	9241      	str	r2, [sp, #260]	; 0x104
 80224de:	2210      	movs	r2, #16
 80224e0:	2b6f      	cmp	r3, #111	; 0x6f
 80224e2:	9242      	str	r2, [sp, #264]	; 0x108
 80224e4:	bf34      	ite	cc
 80224e6:	2303      	movcc	r3, #3
 80224e8:	2304      	movcs	r3, #4
 80224ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80224ec:	6863      	ldr	r3, [r4, #4]
 80224ee:	2b00      	cmp	r3, #0
 80224f0:	dd41      	ble.n	8022576 <__ssvfiscanf_r+0x26a>
 80224f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80224f4:	0659      	lsls	r1, r3, #25
 80224f6:	d404      	bmi.n	8022502 <__ssvfiscanf_r+0x1f6>
 80224f8:	6823      	ldr	r3, [r4, #0]
 80224fa:	781a      	ldrb	r2, [r3, #0]
 80224fc:	5cba      	ldrb	r2, [r7, r2]
 80224fe:	0712      	lsls	r2, r2, #28
 8022500:	d440      	bmi.n	8022584 <__ssvfiscanf_r+0x278>
 8022502:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8022504:	2b02      	cmp	r3, #2
 8022506:	dc4f      	bgt.n	80225a8 <__ssvfiscanf_r+0x29c>
 8022508:	466b      	mov	r3, sp
 802250a:	4622      	mov	r2, r4
 802250c:	a941      	add	r1, sp, #260	; 0x104
 802250e:	4630      	mov	r0, r6
 8022510:	f000 f9ce 	bl	80228b0 <_scanf_chars>
 8022514:	2801      	cmp	r0, #1
 8022516:	d065      	beq.n	80225e4 <__ssvfiscanf_r+0x2d8>
 8022518:	2802      	cmp	r0, #2
 802251a:	f47f af21 	bne.w	8022360 <__ssvfiscanf_r+0x54>
 802251e:	e7cf      	b.n	80224c0 <__ssvfiscanf_r+0x1b4>
 8022520:	220a      	movs	r2, #10
 8022522:	e7dd      	b.n	80224e0 <__ssvfiscanf_r+0x1d4>
 8022524:	2300      	movs	r3, #0
 8022526:	9342      	str	r3, [sp, #264]	; 0x108
 8022528:	2303      	movs	r3, #3
 802252a:	e7de      	b.n	80224ea <__ssvfiscanf_r+0x1de>
 802252c:	2308      	movs	r3, #8
 802252e:	9342      	str	r3, [sp, #264]	; 0x108
 8022530:	2304      	movs	r3, #4
 8022532:	e7da      	b.n	80224ea <__ssvfiscanf_r+0x1de>
 8022534:	4629      	mov	r1, r5
 8022536:	4640      	mov	r0, r8
 8022538:	f000 fb22 	bl	8022b80 <__sccl>
 802253c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802253e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022542:	9341      	str	r3, [sp, #260]	; 0x104
 8022544:	4605      	mov	r5, r0
 8022546:	2301      	movs	r3, #1
 8022548:	e7cf      	b.n	80224ea <__ssvfiscanf_r+0x1de>
 802254a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802254c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022550:	9341      	str	r3, [sp, #260]	; 0x104
 8022552:	2300      	movs	r3, #0
 8022554:	e7c9      	b.n	80224ea <__ssvfiscanf_r+0x1de>
 8022556:	2302      	movs	r3, #2
 8022558:	e7c7      	b.n	80224ea <__ssvfiscanf_r+0x1de>
 802255a:	9841      	ldr	r0, [sp, #260]	; 0x104
 802255c:	06c3      	lsls	r3, r0, #27
 802255e:	f53f aeff 	bmi.w	8022360 <__ssvfiscanf_r+0x54>
 8022562:	9b00      	ldr	r3, [sp, #0]
 8022564:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022566:	1d19      	adds	r1, r3, #4
 8022568:	9100      	str	r1, [sp, #0]
 802256a:	681b      	ldr	r3, [r3, #0]
 802256c:	07c0      	lsls	r0, r0, #31
 802256e:	bf4c      	ite	mi
 8022570:	801a      	strhmi	r2, [r3, #0]
 8022572:	601a      	strpl	r2, [r3, #0]
 8022574:	e6f4      	b.n	8022360 <__ssvfiscanf_r+0x54>
 8022576:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022578:	4621      	mov	r1, r4
 802257a:	4630      	mov	r0, r6
 802257c:	4798      	blx	r3
 802257e:	2800      	cmp	r0, #0
 8022580:	d0b7      	beq.n	80224f2 <__ssvfiscanf_r+0x1e6>
 8022582:	e79d      	b.n	80224c0 <__ssvfiscanf_r+0x1b4>
 8022584:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022586:	3201      	adds	r2, #1
 8022588:	9245      	str	r2, [sp, #276]	; 0x114
 802258a:	6862      	ldr	r2, [r4, #4]
 802258c:	3a01      	subs	r2, #1
 802258e:	2a00      	cmp	r2, #0
 8022590:	6062      	str	r2, [r4, #4]
 8022592:	dd02      	ble.n	802259a <__ssvfiscanf_r+0x28e>
 8022594:	3301      	adds	r3, #1
 8022596:	6023      	str	r3, [r4, #0]
 8022598:	e7ae      	b.n	80224f8 <__ssvfiscanf_r+0x1ec>
 802259a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802259c:	4621      	mov	r1, r4
 802259e:	4630      	mov	r0, r6
 80225a0:	4798      	blx	r3
 80225a2:	2800      	cmp	r0, #0
 80225a4:	d0a8      	beq.n	80224f8 <__ssvfiscanf_r+0x1ec>
 80225a6:	e78b      	b.n	80224c0 <__ssvfiscanf_r+0x1b4>
 80225a8:	2b04      	cmp	r3, #4
 80225aa:	dc06      	bgt.n	80225ba <__ssvfiscanf_r+0x2ae>
 80225ac:	466b      	mov	r3, sp
 80225ae:	4622      	mov	r2, r4
 80225b0:	a941      	add	r1, sp, #260	; 0x104
 80225b2:	4630      	mov	r0, r6
 80225b4:	f000 f9d4 	bl	8022960 <_scanf_i>
 80225b8:	e7ac      	b.n	8022514 <__ssvfiscanf_r+0x208>
 80225ba:	4b0f      	ldr	r3, [pc, #60]	; (80225f8 <__ssvfiscanf_r+0x2ec>)
 80225bc:	2b00      	cmp	r3, #0
 80225be:	f43f aecf 	beq.w	8022360 <__ssvfiscanf_r+0x54>
 80225c2:	466b      	mov	r3, sp
 80225c4:	4622      	mov	r2, r4
 80225c6:	a941      	add	r1, sp, #260	; 0x104
 80225c8:	4630      	mov	r0, r6
 80225ca:	f7fc fa87 	bl	801eadc <_scanf_float>
 80225ce:	e7a1      	b.n	8022514 <__ssvfiscanf_r+0x208>
 80225d0:	89a3      	ldrh	r3, [r4, #12]
 80225d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80225d6:	bf18      	it	ne
 80225d8:	f04f 30ff 	movne.w	r0, #4294967295
 80225dc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80225e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80225e6:	e7f9      	b.n	80225dc <__ssvfiscanf_r+0x2d0>
 80225e8:	08022259 	.word	0x08022259
 80225ec:	080222d3 	.word	0x080222d3
 80225f0:	08026c41 	.word	0x08026c41
 80225f4:	08027142 	.word	0x08027142
 80225f8:	0801eadd 	.word	0x0801eadd

080225fc <__sfputc_r>:
 80225fc:	6893      	ldr	r3, [r2, #8]
 80225fe:	3b01      	subs	r3, #1
 8022600:	2b00      	cmp	r3, #0
 8022602:	b410      	push	{r4}
 8022604:	6093      	str	r3, [r2, #8]
 8022606:	da08      	bge.n	802261a <__sfputc_r+0x1e>
 8022608:	6994      	ldr	r4, [r2, #24]
 802260a:	42a3      	cmp	r3, r4
 802260c:	db01      	blt.n	8022612 <__sfputc_r+0x16>
 802260e:	290a      	cmp	r1, #10
 8022610:	d103      	bne.n	802261a <__sfputc_r+0x1e>
 8022612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022616:	f000 bba5 	b.w	8022d64 <__swbuf_r>
 802261a:	6813      	ldr	r3, [r2, #0]
 802261c:	1c58      	adds	r0, r3, #1
 802261e:	6010      	str	r0, [r2, #0]
 8022620:	7019      	strb	r1, [r3, #0]
 8022622:	4608      	mov	r0, r1
 8022624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022628:	4770      	bx	lr

0802262a <__sfputs_r>:
 802262a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802262c:	4606      	mov	r6, r0
 802262e:	460f      	mov	r7, r1
 8022630:	4614      	mov	r4, r2
 8022632:	18d5      	adds	r5, r2, r3
 8022634:	42ac      	cmp	r4, r5
 8022636:	d101      	bne.n	802263c <__sfputs_r+0x12>
 8022638:	2000      	movs	r0, #0
 802263a:	e007      	b.n	802264c <__sfputs_r+0x22>
 802263c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022640:	463a      	mov	r2, r7
 8022642:	4630      	mov	r0, r6
 8022644:	f7ff ffda 	bl	80225fc <__sfputc_r>
 8022648:	1c43      	adds	r3, r0, #1
 802264a:	d1f3      	bne.n	8022634 <__sfputs_r+0xa>
 802264c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022650 <_vfiprintf_r>:
 8022650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022654:	460d      	mov	r5, r1
 8022656:	b09d      	sub	sp, #116	; 0x74
 8022658:	4614      	mov	r4, r2
 802265a:	4698      	mov	r8, r3
 802265c:	4606      	mov	r6, r0
 802265e:	b118      	cbz	r0, 8022668 <_vfiprintf_r+0x18>
 8022660:	6983      	ldr	r3, [r0, #24]
 8022662:	b90b      	cbnz	r3, 8022668 <_vfiprintf_r+0x18>
 8022664:	f7fb fc1e 	bl	801dea4 <__sinit>
 8022668:	4b89      	ldr	r3, [pc, #548]	; (8022890 <_vfiprintf_r+0x240>)
 802266a:	429d      	cmp	r5, r3
 802266c:	d11b      	bne.n	80226a6 <_vfiprintf_r+0x56>
 802266e:	6875      	ldr	r5, [r6, #4]
 8022670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022672:	07d9      	lsls	r1, r3, #31
 8022674:	d405      	bmi.n	8022682 <_vfiprintf_r+0x32>
 8022676:	89ab      	ldrh	r3, [r5, #12]
 8022678:	059a      	lsls	r2, r3, #22
 802267a:	d402      	bmi.n	8022682 <_vfiprintf_r+0x32>
 802267c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802267e:	f7e4 faed 	bl	8006c5c <__retarget_lock_acquire_recursive>
 8022682:	89ab      	ldrh	r3, [r5, #12]
 8022684:	071b      	lsls	r3, r3, #28
 8022686:	d501      	bpl.n	802268c <_vfiprintf_r+0x3c>
 8022688:	692b      	ldr	r3, [r5, #16]
 802268a:	b9eb      	cbnz	r3, 80226c8 <_vfiprintf_r+0x78>
 802268c:	4629      	mov	r1, r5
 802268e:	4630      	mov	r0, r6
 8022690:	f000 fbc8 	bl	8022e24 <__swsetup_r>
 8022694:	b1c0      	cbz	r0, 80226c8 <_vfiprintf_r+0x78>
 8022696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022698:	07dc      	lsls	r4, r3, #31
 802269a:	d50e      	bpl.n	80226ba <_vfiprintf_r+0x6a>
 802269c:	f04f 30ff 	mov.w	r0, #4294967295
 80226a0:	b01d      	add	sp, #116	; 0x74
 80226a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226a6:	4b7b      	ldr	r3, [pc, #492]	; (8022894 <_vfiprintf_r+0x244>)
 80226a8:	429d      	cmp	r5, r3
 80226aa:	d101      	bne.n	80226b0 <_vfiprintf_r+0x60>
 80226ac:	68b5      	ldr	r5, [r6, #8]
 80226ae:	e7df      	b.n	8022670 <_vfiprintf_r+0x20>
 80226b0:	4b79      	ldr	r3, [pc, #484]	; (8022898 <_vfiprintf_r+0x248>)
 80226b2:	429d      	cmp	r5, r3
 80226b4:	bf08      	it	eq
 80226b6:	68f5      	ldreq	r5, [r6, #12]
 80226b8:	e7da      	b.n	8022670 <_vfiprintf_r+0x20>
 80226ba:	89ab      	ldrh	r3, [r5, #12]
 80226bc:	0598      	lsls	r0, r3, #22
 80226be:	d4ed      	bmi.n	802269c <_vfiprintf_r+0x4c>
 80226c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80226c2:	f7e4 fadf 	bl	8006c84 <__retarget_lock_release_recursive>
 80226c6:	e7e9      	b.n	802269c <_vfiprintf_r+0x4c>
 80226c8:	2300      	movs	r3, #0
 80226ca:	9309      	str	r3, [sp, #36]	; 0x24
 80226cc:	2320      	movs	r3, #32
 80226ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80226d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80226d6:	2330      	movs	r3, #48	; 0x30
 80226d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802289c <_vfiprintf_r+0x24c>
 80226dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80226e0:	f04f 0901 	mov.w	r9, #1
 80226e4:	4623      	mov	r3, r4
 80226e6:	469a      	mov	sl, r3
 80226e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80226ec:	b10a      	cbz	r2, 80226f2 <_vfiprintf_r+0xa2>
 80226ee:	2a25      	cmp	r2, #37	; 0x25
 80226f0:	d1f9      	bne.n	80226e6 <_vfiprintf_r+0x96>
 80226f2:	ebba 0b04 	subs.w	fp, sl, r4
 80226f6:	d00b      	beq.n	8022710 <_vfiprintf_r+0xc0>
 80226f8:	465b      	mov	r3, fp
 80226fa:	4622      	mov	r2, r4
 80226fc:	4629      	mov	r1, r5
 80226fe:	4630      	mov	r0, r6
 8022700:	f7ff ff93 	bl	802262a <__sfputs_r>
 8022704:	3001      	adds	r0, #1
 8022706:	f000 80aa 	beq.w	802285e <_vfiprintf_r+0x20e>
 802270a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802270c:	445a      	add	r2, fp
 802270e:	9209      	str	r2, [sp, #36]	; 0x24
 8022710:	f89a 3000 	ldrb.w	r3, [sl]
 8022714:	2b00      	cmp	r3, #0
 8022716:	f000 80a2 	beq.w	802285e <_vfiprintf_r+0x20e>
 802271a:	2300      	movs	r3, #0
 802271c:	f04f 32ff 	mov.w	r2, #4294967295
 8022720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022724:	f10a 0a01 	add.w	sl, sl, #1
 8022728:	9304      	str	r3, [sp, #16]
 802272a:	9307      	str	r3, [sp, #28]
 802272c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022730:	931a      	str	r3, [sp, #104]	; 0x68
 8022732:	4654      	mov	r4, sl
 8022734:	2205      	movs	r2, #5
 8022736:	f814 1b01 	ldrb.w	r1, [r4], #1
 802273a:	4858      	ldr	r0, [pc, #352]	; (802289c <_vfiprintf_r+0x24c>)
 802273c:	f7dd fd50 	bl	80001e0 <memchr>
 8022740:	9a04      	ldr	r2, [sp, #16]
 8022742:	b9d8      	cbnz	r0, 802277c <_vfiprintf_r+0x12c>
 8022744:	06d1      	lsls	r1, r2, #27
 8022746:	bf44      	itt	mi
 8022748:	2320      	movmi	r3, #32
 802274a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802274e:	0713      	lsls	r3, r2, #28
 8022750:	bf44      	itt	mi
 8022752:	232b      	movmi	r3, #43	; 0x2b
 8022754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022758:	f89a 3000 	ldrb.w	r3, [sl]
 802275c:	2b2a      	cmp	r3, #42	; 0x2a
 802275e:	d015      	beq.n	802278c <_vfiprintf_r+0x13c>
 8022760:	9a07      	ldr	r2, [sp, #28]
 8022762:	4654      	mov	r4, sl
 8022764:	2000      	movs	r0, #0
 8022766:	f04f 0c0a 	mov.w	ip, #10
 802276a:	4621      	mov	r1, r4
 802276c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022770:	3b30      	subs	r3, #48	; 0x30
 8022772:	2b09      	cmp	r3, #9
 8022774:	d94e      	bls.n	8022814 <_vfiprintf_r+0x1c4>
 8022776:	b1b0      	cbz	r0, 80227a6 <_vfiprintf_r+0x156>
 8022778:	9207      	str	r2, [sp, #28]
 802277a:	e014      	b.n	80227a6 <_vfiprintf_r+0x156>
 802277c:	eba0 0308 	sub.w	r3, r0, r8
 8022780:	fa09 f303 	lsl.w	r3, r9, r3
 8022784:	4313      	orrs	r3, r2
 8022786:	9304      	str	r3, [sp, #16]
 8022788:	46a2      	mov	sl, r4
 802278a:	e7d2      	b.n	8022732 <_vfiprintf_r+0xe2>
 802278c:	9b03      	ldr	r3, [sp, #12]
 802278e:	1d19      	adds	r1, r3, #4
 8022790:	681b      	ldr	r3, [r3, #0]
 8022792:	9103      	str	r1, [sp, #12]
 8022794:	2b00      	cmp	r3, #0
 8022796:	bfbb      	ittet	lt
 8022798:	425b      	neglt	r3, r3
 802279a:	f042 0202 	orrlt.w	r2, r2, #2
 802279e:	9307      	strge	r3, [sp, #28]
 80227a0:	9307      	strlt	r3, [sp, #28]
 80227a2:	bfb8      	it	lt
 80227a4:	9204      	strlt	r2, [sp, #16]
 80227a6:	7823      	ldrb	r3, [r4, #0]
 80227a8:	2b2e      	cmp	r3, #46	; 0x2e
 80227aa:	d10c      	bne.n	80227c6 <_vfiprintf_r+0x176>
 80227ac:	7863      	ldrb	r3, [r4, #1]
 80227ae:	2b2a      	cmp	r3, #42	; 0x2a
 80227b0:	d135      	bne.n	802281e <_vfiprintf_r+0x1ce>
 80227b2:	9b03      	ldr	r3, [sp, #12]
 80227b4:	1d1a      	adds	r2, r3, #4
 80227b6:	681b      	ldr	r3, [r3, #0]
 80227b8:	9203      	str	r2, [sp, #12]
 80227ba:	2b00      	cmp	r3, #0
 80227bc:	bfb8      	it	lt
 80227be:	f04f 33ff 	movlt.w	r3, #4294967295
 80227c2:	3402      	adds	r4, #2
 80227c4:	9305      	str	r3, [sp, #20]
 80227c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80228ac <_vfiprintf_r+0x25c>
 80227ca:	7821      	ldrb	r1, [r4, #0]
 80227cc:	2203      	movs	r2, #3
 80227ce:	4650      	mov	r0, sl
 80227d0:	f7dd fd06 	bl	80001e0 <memchr>
 80227d4:	b140      	cbz	r0, 80227e8 <_vfiprintf_r+0x198>
 80227d6:	2340      	movs	r3, #64	; 0x40
 80227d8:	eba0 000a 	sub.w	r0, r0, sl
 80227dc:	fa03 f000 	lsl.w	r0, r3, r0
 80227e0:	9b04      	ldr	r3, [sp, #16]
 80227e2:	4303      	orrs	r3, r0
 80227e4:	3401      	adds	r4, #1
 80227e6:	9304      	str	r3, [sp, #16]
 80227e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227ec:	482c      	ldr	r0, [pc, #176]	; (80228a0 <_vfiprintf_r+0x250>)
 80227ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80227f2:	2206      	movs	r2, #6
 80227f4:	f7dd fcf4 	bl	80001e0 <memchr>
 80227f8:	2800      	cmp	r0, #0
 80227fa:	d03f      	beq.n	802287c <_vfiprintf_r+0x22c>
 80227fc:	4b29      	ldr	r3, [pc, #164]	; (80228a4 <_vfiprintf_r+0x254>)
 80227fe:	bb1b      	cbnz	r3, 8022848 <_vfiprintf_r+0x1f8>
 8022800:	9b03      	ldr	r3, [sp, #12]
 8022802:	3307      	adds	r3, #7
 8022804:	f023 0307 	bic.w	r3, r3, #7
 8022808:	3308      	adds	r3, #8
 802280a:	9303      	str	r3, [sp, #12]
 802280c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802280e:	443b      	add	r3, r7
 8022810:	9309      	str	r3, [sp, #36]	; 0x24
 8022812:	e767      	b.n	80226e4 <_vfiprintf_r+0x94>
 8022814:	fb0c 3202 	mla	r2, ip, r2, r3
 8022818:	460c      	mov	r4, r1
 802281a:	2001      	movs	r0, #1
 802281c:	e7a5      	b.n	802276a <_vfiprintf_r+0x11a>
 802281e:	2300      	movs	r3, #0
 8022820:	3401      	adds	r4, #1
 8022822:	9305      	str	r3, [sp, #20]
 8022824:	4619      	mov	r1, r3
 8022826:	f04f 0c0a 	mov.w	ip, #10
 802282a:	4620      	mov	r0, r4
 802282c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022830:	3a30      	subs	r2, #48	; 0x30
 8022832:	2a09      	cmp	r2, #9
 8022834:	d903      	bls.n	802283e <_vfiprintf_r+0x1ee>
 8022836:	2b00      	cmp	r3, #0
 8022838:	d0c5      	beq.n	80227c6 <_vfiprintf_r+0x176>
 802283a:	9105      	str	r1, [sp, #20]
 802283c:	e7c3      	b.n	80227c6 <_vfiprintf_r+0x176>
 802283e:	fb0c 2101 	mla	r1, ip, r1, r2
 8022842:	4604      	mov	r4, r0
 8022844:	2301      	movs	r3, #1
 8022846:	e7f0      	b.n	802282a <_vfiprintf_r+0x1da>
 8022848:	ab03      	add	r3, sp, #12
 802284a:	9300      	str	r3, [sp, #0]
 802284c:	462a      	mov	r2, r5
 802284e:	4b16      	ldr	r3, [pc, #88]	; (80228a8 <_vfiprintf_r+0x258>)
 8022850:	a904      	add	r1, sp, #16
 8022852:	4630      	mov	r0, r6
 8022854:	f7fb fd78 	bl	801e348 <_printf_float>
 8022858:	4607      	mov	r7, r0
 802285a:	1c78      	adds	r0, r7, #1
 802285c:	d1d6      	bne.n	802280c <_vfiprintf_r+0x1bc>
 802285e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022860:	07d9      	lsls	r1, r3, #31
 8022862:	d405      	bmi.n	8022870 <_vfiprintf_r+0x220>
 8022864:	89ab      	ldrh	r3, [r5, #12]
 8022866:	059a      	lsls	r2, r3, #22
 8022868:	d402      	bmi.n	8022870 <_vfiprintf_r+0x220>
 802286a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802286c:	f7e4 fa0a 	bl	8006c84 <__retarget_lock_release_recursive>
 8022870:	89ab      	ldrh	r3, [r5, #12]
 8022872:	065b      	lsls	r3, r3, #25
 8022874:	f53f af12 	bmi.w	802269c <_vfiprintf_r+0x4c>
 8022878:	9809      	ldr	r0, [sp, #36]	; 0x24
 802287a:	e711      	b.n	80226a0 <_vfiprintf_r+0x50>
 802287c:	ab03      	add	r3, sp, #12
 802287e:	9300      	str	r3, [sp, #0]
 8022880:	462a      	mov	r2, r5
 8022882:	4b09      	ldr	r3, [pc, #36]	; (80228a8 <_vfiprintf_r+0x258>)
 8022884:	a904      	add	r1, sp, #16
 8022886:	4630      	mov	r0, r6
 8022888:	f7fc f802 	bl	801e890 <_printf_i>
 802288c:	e7e4      	b.n	8022858 <_vfiprintf_r+0x208>
 802288e:	bf00      	nop
 8022890:	08026d64 	.word	0x08026d64
 8022894:	08026d84 	.word	0x08026d84
 8022898:	08026d44 	.word	0x08026d44
 802289c:	0802713c 	.word	0x0802713c
 80228a0:	08027146 	.word	0x08027146
 80228a4:	0801e349 	.word	0x0801e349
 80228a8:	0802262b 	.word	0x0802262b
 80228ac:	08027142 	.word	0x08027142

080228b0 <_scanf_chars>:
 80228b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80228b4:	4615      	mov	r5, r2
 80228b6:	688a      	ldr	r2, [r1, #8]
 80228b8:	4680      	mov	r8, r0
 80228ba:	460c      	mov	r4, r1
 80228bc:	b932      	cbnz	r2, 80228cc <_scanf_chars+0x1c>
 80228be:	698a      	ldr	r2, [r1, #24]
 80228c0:	2a00      	cmp	r2, #0
 80228c2:	bf0c      	ite	eq
 80228c4:	2201      	moveq	r2, #1
 80228c6:	f04f 32ff 	movne.w	r2, #4294967295
 80228ca:	608a      	str	r2, [r1, #8]
 80228cc:	6822      	ldr	r2, [r4, #0]
 80228ce:	f8df 908c 	ldr.w	r9, [pc, #140]	; 802295c <_scanf_chars+0xac>
 80228d2:	06d1      	lsls	r1, r2, #27
 80228d4:	bf5f      	itttt	pl
 80228d6:	681a      	ldrpl	r2, [r3, #0]
 80228d8:	1d11      	addpl	r1, r2, #4
 80228da:	6019      	strpl	r1, [r3, #0]
 80228dc:	6816      	ldrpl	r6, [r2, #0]
 80228de:	2700      	movs	r7, #0
 80228e0:	69a0      	ldr	r0, [r4, #24]
 80228e2:	b188      	cbz	r0, 8022908 <_scanf_chars+0x58>
 80228e4:	2801      	cmp	r0, #1
 80228e6:	d107      	bne.n	80228f8 <_scanf_chars+0x48>
 80228e8:	682b      	ldr	r3, [r5, #0]
 80228ea:	781a      	ldrb	r2, [r3, #0]
 80228ec:	6963      	ldr	r3, [r4, #20]
 80228ee:	5c9b      	ldrb	r3, [r3, r2]
 80228f0:	b953      	cbnz	r3, 8022908 <_scanf_chars+0x58>
 80228f2:	bb27      	cbnz	r7, 802293e <_scanf_chars+0x8e>
 80228f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80228f8:	2802      	cmp	r0, #2
 80228fa:	d120      	bne.n	802293e <_scanf_chars+0x8e>
 80228fc:	682b      	ldr	r3, [r5, #0]
 80228fe:	781b      	ldrb	r3, [r3, #0]
 8022900:	f813 3009 	ldrb.w	r3, [r3, r9]
 8022904:	071b      	lsls	r3, r3, #28
 8022906:	d41a      	bmi.n	802293e <_scanf_chars+0x8e>
 8022908:	6823      	ldr	r3, [r4, #0]
 802290a:	06da      	lsls	r2, r3, #27
 802290c:	bf5e      	ittt	pl
 802290e:	682b      	ldrpl	r3, [r5, #0]
 8022910:	781b      	ldrbpl	r3, [r3, #0]
 8022912:	f806 3b01 	strbpl.w	r3, [r6], #1
 8022916:	682a      	ldr	r2, [r5, #0]
 8022918:	686b      	ldr	r3, [r5, #4]
 802291a:	3201      	adds	r2, #1
 802291c:	602a      	str	r2, [r5, #0]
 802291e:	68a2      	ldr	r2, [r4, #8]
 8022920:	3b01      	subs	r3, #1
 8022922:	3a01      	subs	r2, #1
 8022924:	606b      	str	r3, [r5, #4]
 8022926:	3701      	adds	r7, #1
 8022928:	60a2      	str	r2, [r4, #8]
 802292a:	b142      	cbz	r2, 802293e <_scanf_chars+0x8e>
 802292c:	2b00      	cmp	r3, #0
 802292e:	dcd7      	bgt.n	80228e0 <_scanf_chars+0x30>
 8022930:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022934:	4629      	mov	r1, r5
 8022936:	4640      	mov	r0, r8
 8022938:	4798      	blx	r3
 802293a:	2800      	cmp	r0, #0
 802293c:	d0d0      	beq.n	80228e0 <_scanf_chars+0x30>
 802293e:	6823      	ldr	r3, [r4, #0]
 8022940:	f013 0310 	ands.w	r3, r3, #16
 8022944:	d105      	bne.n	8022952 <_scanf_chars+0xa2>
 8022946:	68e2      	ldr	r2, [r4, #12]
 8022948:	3201      	adds	r2, #1
 802294a:	60e2      	str	r2, [r4, #12]
 802294c:	69a2      	ldr	r2, [r4, #24]
 802294e:	b102      	cbz	r2, 8022952 <_scanf_chars+0xa2>
 8022950:	7033      	strb	r3, [r6, #0]
 8022952:	6923      	ldr	r3, [r4, #16]
 8022954:	441f      	add	r7, r3
 8022956:	6127      	str	r7, [r4, #16]
 8022958:	2000      	movs	r0, #0
 802295a:	e7cb      	b.n	80228f4 <_scanf_chars+0x44>
 802295c:	08026c41 	.word	0x08026c41

08022960 <_scanf_i>:
 8022960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022964:	4698      	mov	r8, r3
 8022966:	4b74      	ldr	r3, [pc, #464]	; (8022b38 <_scanf_i+0x1d8>)
 8022968:	460c      	mov	r4, r1
 802296a:	4682      	mov	sl, r0
 802296c:	4616      	mov	r6, r2
 802296e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8022972:	b087      	sub	sp, #28
 8022974:	ab03      	add	r3, sp, #12
 8022976:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802297a:	4b70      	ldr	r3, [pc, #448]	; (8022b3c <_scanf_i+0x1dc>)
 802297c:	69a1      	ldr	r1, [r4, #24]
 802297e:	4a70      	ldr	r2, [pc, #448]	; (8022b40 <_scanf_i+0x1e0>)
 8022980:	2903      	cmp	r1, #3
 8022982:	bf18      	it	ne
 8022984:	461a      	movne	r2, r3
 8022986:	68a3      	ldr	r3, [r4, #8]
 8022988:	9201      	str	r2, [sp, #4]
 802298a:	1e5a      	subs	r2, r3, #1
 802298c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8022990:	bf88      	it	hi
 8022992:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8022996:	4627      	mov	r7, r4
 8022998:	bf82      	ittt	hi
 802299a:	eb03 0905 	addhi.w	r9, r3, r5
 802299e:	f240 135d 	movwhi	r3, #349	; 0x15d
 80229a2:	60a3      	strhi	r3, [r4, #8]
 80229a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80229a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80229ac:	bf98      	it	ls
 80229ae:	f04f 0900 	movls.w	r9, #0
 80229b2:	6023      	str	r3, [r4, #0]
 80229b4:	463d      	mov	r5, r7
 80229b6:	f04f 0b00 	mov.w	fp, #0
 80229ba:	6831      	ldr	r1, [r6, #0]
 80229bc:	ab03      	add	r3, sp, #12
 80229be:	7809      	ldrb	r1, [r1, #0]
 80229c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80229c4:	2202      	movs	r2, #2
 80229c6:	f7dd fc0b 	bl	80001e0 <memchr>
 80229ca:	b328      	cbz	r0, 8022a18 <_scanf_i+0xb8>
 80229cc:	f1bb 0f01 	cmp.w	fp, #1
 80229d0:	d159      	bne.n	8022a86 <_scanf_i+0x126>
 80229d2:	6862      	ldr	r2, [r4, #4]
 80229d4:	b92a      	cbnz	r2, 80229e2 <_scanf_i+0x82>
 80229d6:	6822      	ldr	r2, [r4, #0]
 80229d8:	2308      	movs	r3, #8
 80229da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80229de:	6063      	str	r3, [r4, #4]
 80229e0:	6022      	str	r2, [r4, #0]
 80229e2:	6822      	ldr	r2, [r4, #0]
 80229e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80229e8:	6022      	str	r2, [r4, #0]
 80229ea:	68a2      	ldr	r2, [r4, #8]
 80229ec:	1e51      	subs	r1, r2, #1
 80229ee:	60a1      	str	r1, [r4, #8]
 80229f0:	b192      	cbz	r2, 8022a18 <_scanf_i+0xb8>
 80229f2:	6832      	ldr	r2, [r6, #0]
 80229f4:	1c51      	adds	r1, r2, #1
 80229f6:	6031      	str	r1, [r6, #0]
 80229f8:	7812      	ldrb	r2, [r2, #0]
 80229fa:	f805 2b01 	strb.w	r2, [r5], #1
 80229fe:	6872      	ldr	r2, [r6, #4]
 8022a00:	3a01      	subs	r2, #1
 8022a02:	2a00      	cmp	r2, #0
 8022a04:	6072      	str	r2, [r6, #4]
 8022a06:	dc07      	bgt.n	8022a18 <_scanf_i+0xb8>
 8022a08:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8022a0c:	4631      	mov	r1, r6
 8022a0e:	4650      	mov	r0, sl
 8022a10:	4790      	blx	r2
 8022a12:	2800      	cmp	r0, #0
 8022a14:	f040 8085 	bne.w	8022b22 <_scanf_i+0x1c2>
 8022a18:	f10b 0b01 	add.w	fp, fp, #1
 8022a1c:	f1bb 0f03 	cmp.w	fp, #3
 8022a20:	d1cb      	bne.n	80229ba <_scanf_i+0x5a>
 8022a22:	6863      	ldr	r3, [r4, #4]
 8022a24:	b90b      	cbnz	r3, 8022a2a <_scanf_i+0xca>
 8022a26:	230a      	movs	r3, #10
 8022a28:	6063      	str	r3, [r4, #4]
 8022a2a:	6863      	ldr	r3, [r4, #4]
 8022a2c:	4945      	ldr	r1, [pc, #276]	; (8022b44 <_scanf_i+0x1e4>)
 8022a2e:	6960      	ldr	r0, [r4, #20]
 8022a30:	1ac9      	subs	r1, r1, r3
 8022a32:	f000 f8a5 	bl	8022b80 <__sccl>
 8022a36:	f04f 0b00 	mov.w	fp, #0
 8022a3a:	68a3      	ldr	r3, [r4, #8]
 8022a3c:	6822      	ldr	r2, [r4, #0]
 8022a3e:	2b00      	cmp	r3, #0
 8022a40:	d03d      	beq.n	8022abe <_scanf_i+0x15e>
 8022a42:	6831      	ldr	r1, [r6, #0]
 8022a44:	6960      	ldr	r0, [r4, #20]
 8022a46:	f891 c000 	ldrb.w	ip, [r1]
 8022a4a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8022a4e:	2800      	cmp	r0, #0
 8022a50:	d035      	beq.n	8022abe <_scanf_i+0x15e>
 8022a52:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8022a56:	d124      	bne.n	8022aa2 <_scanf_i+0x142>
 8022a58:	0510      	lsls	r0, r2, #20
 8022a5a:	d522      	bpl.n	8022aa2 <_scanf_i+0x142>
 8022a5c:	f10b 0b01 	add.w	fp, fp, #1
 8022a60:	f1b9 0f00 	cmp.w	r9, #0
 8022a64:	d003      	beq.n	8022a6e <_scanf_i+0x10e>
 8022a66:	3301      	adds	r3, #1
 8022a68:	f109 39ff 	add.w	r9, r9, #4294967295
 8022a6c:	60a3      	str	r3, [r4, #8]
 8022a6e:	6873      	ldr	r3, [r6, #4]
 8022a70:	3b01      	subs	r3, #1
 8022a72:	2b00      	cmp	r3, #0
 8022a74:	6073      	str	r3, [r6, #4]
 8022a76:	dd1b      	ble.n	8022ab0 <_scanf_i+0x150>
 8022a78:	6833      	ldr	r3, [r6, #0]
 8022a7a:	3301      	adds	r3, #1
 8022a7c:	6033      	str	r3, [r6, #0]
 8022a7e:	68a3      	ldr	r3, [r4, #8]
 8022a80:	3b01      	subs	r3, #1
 8022a82:	60a3      	str	r3, [r4, #8]
 8022a84:	e7d9      	b.n	8022a3a <_scanf_i+0xda>
 8022a86:	f1bb 0f02 	cmp.w	fp, #2
 8022a8a:	d1ae      	bne.n	80229ea <_scanf_i+0x8a>
 8022a8c:	6822      	ldr	r2, [r4, #0]
 8022a8e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8022a92:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8022a96:	d1bf      	bne.n	8022a18 <_scanf_i+0xb8>
 8022a98:	2310      	movs	r3, #16
 8022a9a:	6063      	str	r3, [r4, #4]
 8022a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022aa0:	e7a2      	b.n	80229e8 <_scanf_i+0x88>
 8022aa2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8022aa6:	6022      	str	r2, [r4, #0]
 8022aa8:	780b      	ldrb	r3, [r1, #0]
 8022aaa:	f805 3b01 	strb.w	r3, [r5], #1
 8022aae:	e7de      	b.n	8022a6e <_scanf_i+0x10e>
 8022ab0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022ab4:	4631      	mov	r1, r6
 8022ab6:	4650      	mov	r0, sl
 8022ab8:	4798      	blx	r3
 8022aba:	2800      	cmp	r0, #0
 8022abc:	d0df      	beq.n	8022a7e <_scanf_i+0x11e>
 8022abe:	6823      	ldr	r3, [r4, #0]
 8022ac0:	05d9      	lsls	r1, r3, #23
 8022ac2:	d50d      	bpl.n	8022ae0 <_scanf_i+0x180>
 8022ac4:	42bd      	cmp	r5, r7
 8022ac6:	d909      	bls.n	8022adc <_scanf_i+0x17c>
 8022ac8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8022acc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022ad0:	4632      	mov	r2, r6
 8022ad2:	4650      	mov	r0, sl
 8022ad4:	4798      	blx	r3
 8022ad6:	f105 39ff 	add.w	r9, r5, #4294967295
 8022ada:	464d      	mov	r5, r9
 8022adc:	42bd      	cmp	r5, r7
 8022ade:	d028      	beq.n	8022b32 <_scanf_i+0x1d2>
 8022ae0:	6822      	ldr	r2, [r4, #0]
 8022ae2:	f012 0210 	ands.w	r2, r2, #16
 8022ae6:	d113      	bne.n	8022b10 <_scanf_i+0x1b0>
 8022ae8:	702a      	strb	r2, [r5, #0]
 8022aea:	6863      	ldr	r3, [r4, #4]
 8022aec:	9e01      	ldr	r6, [sp, #4]
 8022aee:	4639      	mov	r1, r7
 8022af0:	4650      	mov	r0, sl
 8022af2:	47b0      	blx	r6
 8022af4:	f8d8 3000 	ldr.w	r3, [r8]
 8022af8:	6821      	ldr	r1, [r4, #0]
 8022afa:	1d1a      	adds	r2, r3, #4
 8022afc:	f8c8 2000 	str.w	r2, [r8]
 8022b00:	f011 0f20 	tst.w	r1, #32
 8022b04:	681b      	ldr	r3, [r3, #0]
 8022b06:	d00f      	beq.n	8022b28 <_scanf_i+0x1c8>
 8022b08:	6018      	str	r0, [r3, #0]
 8022b0a:	68e3      	ldr	r3, [r4, #12]
 8022b0c:	3301      	adds	r3, #1
 8022b0e:	60e3      	str	r3, [r4, #12]
 8022b10:	1bed      	subs	r5, r5, r7
 8022b12:	44ab      	add	fp, r5
 8022b14:	6925      	ldr	r5, [r4, #16]
 8022b16:	445d      	add	r5, fp
 8022b18:	6125      	str	r5, [r4, #16]
 8022b1a:	2000      	movs	r0, #0
 8022b1c:	b007      	add	sp, #28
 8022b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b22:	f04f 0b00 	mov.w	fp, #0
 8022b26:	e7ca      	b.n	8022abe <_scanf_i+0x15e>
 8022b28:	07ca      	lsls	r2, r1, #31
 8022b2a:	bf4c      	ite	mi
 8022b2c:	8018      	strhmi	r0, [r3, #0]
 8022b2e:	6018      	strpl	r0, [r3, #0]
 8022b30:	e7eb      	b.n	8022b0a <_scanf_i+0x1aa>
 8022b32:	2001      	movs	r0, #1
 8022b34:	e7f2      	b.n	8022b1c <_scanf_i+0x1bc>
 8022b36:	bf00      	nop
 8022b38:	08026978 	.word	0x08026978
 8022b3c:	08022ced 	.word	0x08022ced
 8022b40:	0801ff99 	.word	0x0801ff99
 8022b44:	08027166 	.word	0x08027166

08022b48 <_read_r>:
 8022b48:	b538      	push	{r3, r4, r5, lr}
 8022b4a:	4d07      	ldr	r5, [pc, #28]	; (8022b68 <_read_r+0x20>)
 8022b4c:	4604      	mov	r4, r0
 8022b4e:	4608      	mov	r0, r1
 8022b50:	4611      	mov	r1, r2
 8022b52:	2200      	movs	r2, #0
 8022b54:	602a      	str	r2, [r5, #0]
 8022b56:	461a      	mov	r2, r3
 8022b58:	f7e3 fcbe 	bl	80064d8 <_read>
 8022b5c:	1c43      	adds	r3, r0, #1
 8022b5e:	d102      	bne.n	8022b66 <_read_r+0x1e>
 8022b60:	682b      	ldr	r3, [r5, #0]
 8022b62:	b103      	cbz	r3, 8022b66 <_read_r+0x1e>
 8022b64:	6023      	str	r3, [r4, #0]
 8022b66:	bd38      	pop	{r3, r4, r5, pc}
 8022b68:	2000e11c 	.word	0x2000e11c
 8022b6c:	00000000 	.word	0x00000000

08022b70 <nan>:
 8022b70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8022b78 <nan+0x8>
 8022b74:	4770      	bx	lr
 8022b76:	bf00      	nop
 8022b78:	00000000 	.word	0x00000000
 8022b7c:	7ff80000 	.word	0x7ff80000

08022b80 <__sccl>:
 8022b80:	b570      	push	{r4, r5, r6, lr}
 8022b82:	780b      	ldrb	r3, [r1, #0]
 8022b84:	4604      	mov	r4, r0
 8022b86:	2b5e      	cmp	r3, #94	; 0x5e
 8022b88:	bf0b      	itete	eq
 8022b8a:	784b      	ldrbeq	r3, [r1, #1]
 8022b8c:	1c48      	addne	r0, r1, #1
 8022b8e:	1c88      	addeq	r0, r1, #2
 8022b90:	2200      	movne	r2, #0
 8022b92:	bf08      	it	eq
 8022b94:	2201      	moveq	r2, #1
 8022b96:	1e61      	subs	r1, r4, #1
 8022b98:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8022b9c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8022ba0:	42a9      	cmp	r1, r5
 8022ba2:	d1fb      	bne.n	8022b9c <__sccl+0x1c>
 8022ba4:	b90b      	cbnz	r3, 8022baa <__sccl+0x2a>
 8022ba6:	3801      	subs	r0, #1
 8022ba8:	bd70      	pop	{r4, r5, r6, pc}
 8022baa:	f082 0101 	eor.w	r1, r2, #1
 8022bae:	54e1      	strb	r1, [r4, r3]
 8022bb0:	1c42      	adds	r2, r0, #1
 8022bb2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8022bb6:	2d2d      	cmp	r5, #45	; 0x2d
 8022bb8:	f102 36ff 	add.w	r6, r2, #4294967295
 8022bbc:	4610      	mov	r0, r2
 8022bbe:	d006      	beq.n	8022bce <__sccl+0x4e>
 8022bc0:	2d5d      	cmp	r5, #93	; 0x5d
 8022bc2:	d0f1      	beq.n	8022ba8 <__sccl+0x28>
 8022bc4:	b90d      	cbnz	r5, 8022bca <__sccl+0x4a>
 8022bc6:	4630      	mov	r0, r6
 8022bc8:	e7ee      	b.n	8022ba8 <__sccl+0x28>
 8022bca:	462b      	mov	r3, r5
 8022bcc:	e7ef      	b.n	8022bae <__sccl+0x2e>
 8022bce:	7816      	ldrb	r6, [r2, #0]
 8022bd0:	2e5d      	cmp	r6, #93	; 0x5d
 8022bd2:	d0fa      	beq.n	8022bca <__sccl+0x4a>
 8022bd4:	42b3      	cmp	r3, r6
 8022bd6:	dcf8      	bgt.n	8022bca <__sccl+0x4a>
 8022bd8:	4618      	mov	r0, r3
 8022bda:	3001      	adds	r0, #1
 8022bdc:	4286      	cmp	r6, r0
 8022bde:	5421      	strb	r1, [r4, r0]
 8022be0:	dcfb      	bgt.n	8022bda <__sccl+0x5a>
 8022be2:	43d8      	mvns	r0, r3
 8022be4:	4430      	add	r0, r6
 8022be6:	1c5d      	adds	r5, r3, #1
 8022be8:	42b3      	cmp	r3, r6
 8022bea:	bfa8      	it	ge
 8022bec:	2000      	movge	r0, #0
 8022bee:	182b      	adds	r3, r5, r0
 8022bf0:	3202      	adds	r2, #2
 8022bf2:	e7de      	b.n	8022bb2 <__sccl+0x32>

08022bf4 <_strtoul_l.isra.0>:
 8022bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022bf8:	4e3b      	ldr	r6, [pc, #236]	; (8022ce8 <_strtoul_l.isra.0+0xf4>)
 8022bfa:	4686      	mov	lr, r0
 8022bfc:	468c      	mov	ip, r1
 8022bfe:	4660      	mov	r0, ip
 8022c00:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8022c04:	5da5      	ldrb	r5, [r4, r6]
 8022c06:	f015 0508 	ands.w	r5, r5, #8
 8022c0a:	d1f8      	bne.n	8022bfe <_strtoul_l.isra.0+0xa>
 8022c0c:	2c2d      	cmp	r4, #45	; 0x2d
 8022c0e:	d134      	bne.n	8022c7a <_strtoul_l.isra.0+0x86>
 8022c10:	f89c 4000 	ldrb.w	r4, [ip]
 8022c14:	f04f 0801 	mov.w	r8, #1
 8022c18:	f100 0c02 	add.w	ip, r0, #2
 8022c1c:	2b00      	cmp	r3, #0
 8022c1e:	d05e      	beq.n	8022cde <_strtoul_l.isra.0+0xea>
 8022c20:	2b10      	cmp	r3, #16
 8022c22:	d10c      	bne.n	8022c3e <_strtoul_l.isra.0+0x4a>
 8022c24:	2c30      	cmp	r4, #48	; 0x30
 8022c26:	d10a      	bne.n	8022c3e <_strtoul_l.isra.0+0x4a>
 8022c28:	f89c 0000 	ldrb.w	r0, [ip]
 8022c2c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8022c30:	2858      	cmp	r0, #88	; 0x58
 8022c32:	d14f      	bne.n	8022cd4 <_strtoul_l.isra.0+0xe0>
 8022c34:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8022c38:	2310      	movs	r3, #16
 8022c3a:	f10c 0c02 	add.w	ip, ip, #2
 8022c3e:	f04f 37ff 	mov.w	r7, #4294967295
 8022c42:	2500      	movs	r5, #0
 8022c44:	fbb7 f7f3 	udiv	r7, r7, r3
 8022c48:	fb03 f907 	mul.w	r9, r3, r7
 8022c4c:	ea6f 0909 	mvn.w	r9, r9
 8022c50:	4628      	mov	r0, r5
 8022c52:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8022c56:	2e09      	cmp	r6, #9
 8022c58:	d818      	bhi.n	8022c8c <_strtoul_l.isra.0+0x98>
 8022c5a:	4634      	mov	r4, r6
 8022c5c:	42a3      	cmp	r3, r4
 8022c5e:	dd24      	ble.n	8022caa <_strtoul_l.isra.0+0xb6>
 8022c60:	2d00      	cmp	r5, #0
 8022c62:	db1f      	blt.n	8022ca4 <_strtoul_l.isra.0+0xb0>
 8022c64:	4287      	cmp	r7, r0
 8022c66:	d31d      	bcc.n	8022ca4 <_strtoul_l.isra.0+0xb0>
 8022c68:	d101      	bne.n	8022c6e <_strtoul_l.isra.0+0x7a>
 8022c6a:	45a1      	cmp	r9, r4
 8022c6c:	db1a      	blt.n	8022ca4 <_strtoul_l.isra.0+0xb0>
 8022c6e:	fb00 4003 	mla	r0, r0, r3, r4
 8022c72:	2501      	movs	r5, #1
 8022c74:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8022c78:	e7eb      	b.n	8022c52 <_strtoul_l.isra.0+0x5e>
 8022c7a:	2c2b      	cmp	r4, #43	; 0x2b
 8022c7c:	bf08      	it	eq
 8022c7e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8022c82:	46a8      	mov	r8, r5
 8022c84:	bf08      	it	eq
 8022c86:	f100 0c02 	addeq.w	ip, r0, #2
 8022c8a:	e7c7      	b.n	8022c1c <_strtoul_l.isra.0+0x28>
 8022c8c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8022c90:	2e19      	cmp	r6, #25
 8022c92:	d801      	bhi.n	8022c98 <_strtoul_l.isra.0+0xa4>
 8022c94:	3c37      	subs	r4, #55	; 0x37
 8022c96:	e7e1      	b.n	8022c5c <_strtoul_l.isra.0+0x68>
 8022c98:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8022c9c:	2e19      	cmp	r6, #25
 8022c9e:	d804      	bhi.n	8022caa <_strtoul_l.isra.0+0xb6>
 8022ca0:	3c57      	subs	r4, #87	; 0x57
 8022ca2:	e7db      	b.n	8022c5c <_strtoul_l.isra.0+0x68>
 8022ca4:	f04f 35ff 	mov.w	r5, #4294967295
 8022ca8:	e7e4      	b.n	8022c74 <_strtoul_l.isra.0+0x80>
 8022caa:	2d00      	cmp	r5, #0
 8022cac:	da07      	bge.n	8022cbe <_strtoul_l.isra.0+0xca>
 8022cae:	2322      	movs	r3, #34	; 0x22
 8022cb0:	f8ce 3000 	str.w	r3, [lr]
 8022cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8022cb8:	b942      	cbnz	r2, 8022ccc <_strtoul_l.isra.0+0xd8>
 8022cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022cbe:	f1b8 0f00 	cmp.w	r8, #0
 8022cc2:	d000      	beq.n	8022cc6 <_strtoul_l.isra.0+0xd2>
 8022cc4:	4240      	negs	r0, r0
 8022cc6:	2a00      	cmp	r2, #0
 8022cc8:	d0f7      	beq.n	8022cba <_strtoul_l.isra.0+0xc6>
 8022cca:	b10d      	cbz	r5, 8022cd0 <_strtoul_l.isra.0+0xdc>
 8022ccc:	f10c 31ff 	add.w	r1, ip, #4294967295
 8022cd0:	6011      	str	r1, [r2, #0]
 8022cd2:	e7f2      	b.n	8022cba <_strtoul_l.isra.0+0xc6>
 8022cd4:	2430      	movs	r4, #48	; 0x30
 8022cd6:	2b00      	cmp	r3, #0
 8022cd8:	d1b1      	bne.n	8022c3e <_strtoul_l.isra.0+0x4a>
 8022cda:	2308      	movs	r3, #8
 8022cdc:	e7af      	b.n	8022c3e <_strtoul_l.isra.0+0x4a>
 8022cde:	2c30      	cmp	r4, #48	; 0x30
 8022ce0:	d0a2      	beq.n	8022c28 <_strtoul_l.isra.0+0x34>
 8022ce2:	230a      	movs	r3, #10
 8022ce4:	e7ab      	b.n	8022c3e <_strtoul_l.isra.0+0x4a>
 8022ce6:	bf00      	nop
 8022ce8:	08026c41 	.word	0x08026c41

08022cec <_strtoul_r>:
 8022cec:	f7ff bf82 	b.w	8022bf4 <_strtoul_l.isra.0>

08022cf0 <__submore>:
 8022cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022cf4:	460c      	mov	r4, r1
 8022cf6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022cfc:	4299      	cmp	r1, r3
 8022cfe:	d11d      	bne.n	8022d3c <__submore+0x4c>
 8022d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022d04:	f7fb fa26 	bl	801e154 <_malloc_r>
 8022d08:	b918      	cbnz	r0, 8022d12 <__submore+0x22>
 8022d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8022d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022d16:	63a3      	str	r3, [r4, #56]	; 0x38
 8022d18:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8022d1c:	6360      	str	r0, [r4, #52]	; 0x34
 8022d1e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8022d22:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8022d26:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8022d2a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8022d2e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8022d32:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8022d36:	6020      	str	r0, [r4, #0]
 8022d38:	2000      	movs	r0, #0
 8022d3a:	e7e8      	b.n	8022d0e <__submore+0x1e>
 8022d3c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8022d3e:	0077      	lsls	r7, r6, #1
 8022d40:	463a      	mov	r2, r7
 8022d42:	f000 f949 	bl	8022fd8 <_realloc_r>
 8022d46:	4605      	mov	r5, r0
 8022d48:	2800      	cmp	r0, #0
 8022d4a:	d0de      	beq.n	8022d0a <__submore+0x1a>
 8022d4c:	eb00 0806 	add.w	r8, r0, r6
 8022d50:	4601      	mov	r1, r0
 8022d52:	4632      	mov	r2, r6
 8022d54:	4640      	mov	r0, r8
 8022d56:	f7fb f97d 	bl	801e054 <memcpy>
 8022d5a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8022d5e:	f8c4 8000 	str.w	r8, [r4]
 8022d62:	e7e9      	b.n	8022d38 <__submore+0x48>

08022d64 <__swbuf_r>:
 8022d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d66:	460e      	mov	r6, r1
 8022d68:	4614      	mov	r4, r2
 8022d6a:	4605      	mov	r5, r0
 8022d6c:	b118      	cbz	r0, 8022d76 <__swbuf_r+0x12>
 8022d6e:	6983      	ldr	r3, [r0, #24]
 8022d70:	b90b      	cbnz	r3, 8022d76 <__swbuf_r+0x12>
 8022d72:	f7fb f897 	bl	801dea4 <__sinit>
 8022d76:	4b21      	ldr	r3, [pc, #132]	; (8022dfc <__swbuf_r+0x98>)
 8022d78:	429c      	cmp	r4, r3
 8022d7a:	d12b      	bne.n	8022dd4 <__swbuf_r+0x70>
 8022d7c:	686c      	ldr	r4, [r5, #4]
 8022d7e:	69a3      	ldr	r3, [r4, #24]
 8022d80:	60a3      	str	r3, [r4, #8]
 8022d82:	89a3      	ldrh	r3, [r4, #12]
 8022d84:	071a      	lsls	r2, r3, #28
 8022d86:	d52f      	bpl.n	8022de8 <__swbuf_r+0x84>
 8022d88:	6923      	ldr	r3, [r4, #16]
 8022d8a:	b36b      	cbz	r3, 8022de8 <__swbuf_r+0x84>
 8022d8c:	6923      	ldr	r3, [r4, #16]
 8022d8e:	6820      	ldr	r0, [r4, #0]
 8022d90:	1ac0      	subs	r0, r0, r3
 8022d92:	6963      	ldr	r3, [r4, #20]
 8022d94:	b2f6      	uxtb	r6, r6
 8022d96:	4283      	cmp	r3, r0
 8022d98:	4637      	mov	r7, r6
 8022d9a:	dc04      	bgt.n	8022da6 <__swbuf_r+0x42>
 8022d9c:	4621      	mov	r1, r4
 8022d9e:	4628      	mov	r0, r5
 8022da0:	f7fe f842 	bl	8020e28 <_fflush_r>
 8022da4:	bb30      	cbnz	r0, 8022df4 <__swbuf_r+0x90>
 8022da6:	68a3      	ldr	r3, [r4, #8]
 8022da8:	3b01      	subs	r3, #1
 8022daa:	60a3      	str	r3, [r4, #8]
 8022dac:	6823      	ldr	r3, [r4, #0]
 8022dae:	1c5a      	adds	r2, r3, #1
 8022db0:	6022      	str	r2, [r4, #0]
 8022db2:	701e      	strb	r6, [r3, #0]
 8022db4:	6963      	ldr	r3, [r4, #20]
 8022db6:	3001      	adds	r0, #1
 8022db8:	4283      	cmp	r3, r0
 8022dba:	d004      	beq.n	8022dc6 <__swbuf_r+0x62>
 8022dbc:	89a3      	ldrh	r3, [r4, #12]
 8022dbe:	07db      	lsls	r3, r3, #31
 8022dc0:	d506      	bpl.n	8022dd0 <__swbuf_r+0x6c>
 8022dc2:	2e0a      	cmp	r6, #10
 8022dc4:	d104      	bne.n	8022dd0 <__swbuf_r+0x6c>
 8022dc6:	4621      	mov	r1, r4
 8022dc8:	4628      	mov	r0, r5
 8022dca:	f7fe f82d 	bl	8020e28 <_fflush_r>
 8022dce:	b988      	cbnz	r0, 8022df4 <__swbuf_r+0x90>
 8022dd0:	4638      	mov	r0, r7
 8022dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022dd4:	4b0a      	ldr	r3, [pc, #40]	; (8022e00 <__swbuf_r+0x9c>)
 8022dd6:	429c      	cmp	r4, r3
 8022dd8:	d101      	bne.n	8022dde <__swbuf_r+0x7a>
 8022dda:	68ac      	ldr	r4, [r5, #8]
 8022ddc:	e7cf      	b.n	8022d7e <__swbuf_r+0x1a>
 8022dde:	4b09      	ldr	r3, [pc, #36]	; (8022e04 <__swbuf_r+0xa0>)
 8022de0:	429c      	cmp	r4, r3
 8022de2:	bf08      	it	eq
 8022de4:	68ec      	ldreq	r4, [r5, #12]
 8022de6:	e7ca      	b.n	8022d7e <__swbuf_r+0x1a>
 8022de8:	4621      	mov	r1, r4
 8022dea:	4628      	mov	r0, r5
 8022dec:	f000 f81a 	bl	8022e24 <__swsetup_r>
 8022df0:	2800      	cmp	r0, #0
 8022df2:	d0cb      	beq.n	8022d8c <__swbuf_r+0x28>
 8022df4:	f04f 37ff 	mov.w	r7, #4294967295
 8022df8:	e7ea      	b.n	8022dd0 <__swbuf_r+0x6c>
 8022dfa:	bf00      	nop
 8022dfc:	08026d64 	.word	0x08026d64
 8022e00:	08026d84 	.word	0x08026d84
 8022e04:	08026d44 	.word	0x08026d44

08022e08 <__ascii_wctomb>:
 8022e08:	b149      	cbz	r1, 8022e1e <__ascii_wctomb+0x16>
 8022e0a:	2aff      	cmp	r2, #255	; 0xff
 8022e0c:	bf85      	ittet	hi
 8022e0e:	238a      	movhi	r3, #138	; 0x8a
 8022e10:	6003      	strhi	r3, [r0, #0]
 8022e12:	700a      	strbls	r2, [r1, #0]
 8022e14:	f04f 30ff 	movhi.w	r0, #4294967295
 8022e18:	bf98      	it	ls
 8022e1a:	2001      	movls	r0, #1
 8022e1c:	4770      	bx	lr
 8022e1e:	4608      	mov	r0, r1
 8022e20:	4770      	bx	lr
	...

08022e24 <__swsetup_r>:
 8022e24:	4b32      	ldr	r3, [pc, #200]	; (8022ef0 <__swsetup_r+0xcc>)
 8022e26:	b570      	push	{r4, r5, r6, lr}
 8022e28:	681d      	ldr	r5, [r3, #0]
 8022e2a:	4606      	mov	r6, r0
 8022e2c:	460c      	mov	r4, r1
 8022e2e:	b125      	cbz	r5, 8022e3a <__swsetup_r+0x16>
 8022e30:	69ab      	ldr	r3, [r5, #24]
 8022e32:	b913      	cbnz	r3, 8022e3a <__swsetup_r+0x16>
 8022e34:	4628      	mov	r0, r5
 8022e36:	f7fb f835 	bl	801dea4 <__sinit>
 8022e3a:	4b2e      	ldr	r3, [pc, #184]	; (8022ef4 <__swsetup_r+0xd0>)
 8022e3c:	429c      	cmp	r4, r3
 8022e3e:	d10f      	bne.n	8022e60 <__swsetup_r+0x3c>
 8022e40:	686c      	ldr	r4, [r5, #4]
 8022e42:	89a3      	ldrh	r3, [r4, #12]
 8022e44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022e48:	0719      	lsls	r1, r3, #28
 8022e4a:	d42c      	bmi.n	8022ea6 <__swsetup_r+0x82>
 8022e4c:	06dd      	lsls	r5, r3, #27
 8022e4e:	d411      	bmi.n	8022e74 <__swsetup_r+0x50>
 8022e50:	2309      	movs	r3, #9
 8022e52:	6033      	str	r3, [r6, #0]
 8022e54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022e58:	81a3      	strh	r3, [r4, #12]
 8022e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8022e5e:	e03e      	b.n	8022ede <__swsetup_r+0xba>
 8022e60:	4b25      	ldr	r3, [pc, #148]	; (8022ef8 <__swsetup_r+0xd4>)
 8022e62:	429c      	cmp	r4, r3
 8022e64:	d101      	bne.n	8022e6a <__swsetup_r+0x46>
 8022e66:	68ac      	ldr	r4, [r5, #8]
 8022e68:	e7eb      	b.n	8022e42 <__swsetup_r+0x1e>
 8022e6a:	4b24      	ldr	r3, [pc, #144]	; (8022efc <__swsetup_r+0xd8>)
 8022e6c:	429c      	cmp	r4, r3
 8022e6e:	bf08      	it	eq
 8022e70:	68ec      	ldreq	r4, [r5, #12]
 8022e72:	e7e6      	b.n	8022e42 <__swsetup_r+0x1e>
 8022e74:	0758      	lsls	r0, r3, #29
 8022e76:	d512      	bpl.n	8022e9e <__swsetup_r+0x7a>
 8022e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022e7a:	b141      	cbz	r1, 8022e8e <__swsetup_r+0x6a>
 8022e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022e80:	4299      	cmp	r1, r3
 8022e82:	d002      	beq.n	8022e8a <__swsetup_r+0x66>
 8022e84:	4630      	mov	r0, r6
 8022e86:	f7fb f915 	bl	801e0b4 <_free_r>
 8022e8a:	2300      	movs	r3, #0
 8022e8c:	6363      	str	r3, [r4, #52]	; 0x34
 8022e8e:	89a3      	ldrh	r3, [r4, #12]
 8022e90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022e94:	81a3      	strh	r3, [r4, #12]
 8022e96:	2300      	movs	r3, #0
 8022e98:	6063      	str	r3, [r4, #4]
 8022e9a:	6923      	ldr	r3, [r4, #16]
 8022e9c:	6023      	str	r3, [r4, #0]
 8022e9e:	89a3      	ldrh	r3, [r4, #12]
 8022ea0:	f043 0308 	orr.w	r3, r3, #8
 8022ea4:	81a3      	strh	r3, [r4, #12]
 8022ea6:	6923      	ldr	r3, [r4, #16]
 8022ea8:	b94b      	cbnz	r3, 8022ebe <__swsetup_r+0x9a>
 8022eaa:	89a3      	ldrh	r3, [r4, #12]
 8022eac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022eb4:	d003      	beq.n	8022ebe <__swsetup_r+0x9a>
 8022eb6:	4621      	mov	r1, r4
 8022eb8:	4630      	mov	r0, r6
 8022eba:	f000 f84d 	bl	8022f58 <__smakebuf_r>
 8022ebe:	89a0      	ldrh	r0, [r4, #12]
 8022ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022ec4:	f010 0301 	ands.w	r3, r0, #1
 8022ec8:	d00a      	beq.n	8022ee0 <__swsetup_r+0xbc>
 8022eca:	2300      	movs	r3, #0
 8022ecc:	60a3      	str	r3, [r4, #8]
 8022ece:	6963      	ldr	r3, [r4, #20]
 8022ed0:	425b      	negs	r3, r3
 8022ed2:	61a3      	str	r3, [r4, #24]
 8022ed4:	6923      	ldr	r3, [r4, #16]
 8022ed6:	b943      	cbnz	r3, 8022eea <__swsetup_r+0xc6>
 8022ed8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022edc:	d1ba      	bne.n	8022e54 <__swsetup_r+0x30>
 8022ede:	bd70      	pop	{r4, r5, r6, pc}
 8022ee0:	0781      	lsls	r1, r0, #30
 8022ee2:	bf58      	it	pl
 8022ee4:	6963      	ldrpl	r3, [r4, #20]
 8022ee6:	60a3      	str	r3, [r4, #8]
 8022ee8:	e7f4      	b.n	8022ed4 <__swsetup_r+0xb0>
 8022eea:	2000      	movs	r0, #0
 8022eec:	e7f7      	b.n	8022ede <__swsetup_r+0xba>
 8022eee:	bf00      	nop
 8022ef0:	20000360 	.word	0x20000360
 8022ef4:	08026d64 	.word	0x08026d64
 8022ef8:	08026d84 	.word	0x08026d84
 8022efc:	08026d44 	.word	0x08026d44

08022f00 <abort>:
 8022f00:	b508      	push	{r3, lr}
 8022f02:	2006      	movs	r0, #6
 8022f04:	f000 f8b6 	bl	8023074 <raise>
 8022f08:	2001      	movs	r0, #1
 8022f0a:	f7e3 fadb 	bl	80064c4 <_exit>

08022f0e <__swhatbuf_r>:
 8022f0e:	b570      	push	{r4, r5, r6, lr}
 8022f10:	460e      	mov	r6, r1
 8022f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022f16:	2900      	cmp	r1, #0
 8022f18:	b096      	sub	sp, #88	; 0x58
 8022f1a:	4614      	mov	r4, r2
 8022f1c:	461d      	mov	r5, r3
 8022f1e:	da07      	bge.n	8022f30 <__swhatbuf_r+0x22>
 8022f20:	2300      	movs	r3, #0
 8022f22:	602b      	str	r3, [r5, #0]
 8022f24:	89b3      	ldrh	r3, [r6, #12]
 8022f26:	061a      	lsls	r2, r3, #24
 8022f28:	d410      	bmi.n	8022f4c <__swhatbuf_r+0x3e>
 8022f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022f2e:	e00e      	b.n	8022f4e <__swhatbuf_r+0x40>
 8022f30:	466a      	mov	r2, sp
 8022f32:	f000 f8bb 	bl	80230ac <_fstat_r>
 8022f36:	2800      	cmp	r0, #0
 8022f38:	dbf2      	blt.n	8022f20 <__swhatbuf_r+0x12>
 8022f3a:	9a01      	ldr	r2, [sp, #4]
 8022f3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022f40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022f44:	425a      	negs	r2, r3
 8022f46:	415a      	adcs	r2, r3
 8022f48:	602a      	str	r2, [r5, #0]
 8022f4a:	e7ee      	b.n	8022f2a <__swhatbuf_r+0x1c>
 8022f4c:	2340      	movs	r3, #64	; 0x40
 8022f4e:	2000      	movs	r0, #0
 8022f50:	6023      	str	r3, [r4, #0]
 8022f52:	b016      	add	sp, #88	; 0x58
 8022f54:	bd70      	pop	{r4, r5, r6, pc}
	...

08022f58 <__smakebuf_r>:
 8022f58:	898b      	ldrh	r3, [r1, #12]
 8022f5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022f5c:	079d      	lsls	r5, r3, #30
 8022f5e:	4606      	mov	r6, r0
 8022f60:	460c      	mov	r4, r1
 8022f62:	d507      	bpl.n	8022f74 <__smakebuf_r+0x1c>
 8022f64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022f68:	6023      	str	r3, [r4, #0]
 8022f6a:	6123      	str	r3, [r4, #16]
 8022f6c:	2301      	movs	r3, #1
 8022f6e:	6163      	str	r3, [r4, #20]
 8022f70:	b002      	add	sp, #8
 8022f72:	bd70      	pop	{r4, r5, r6, pc}
 8022f74:	ab01      	add	r3, sp, #4
 8022f76:	466a      	mov	r2, sp
 8022f78:	f7ff ffc9 	bl	8022f0e <__swhatbuf_r>
 8022f7c:	9900      	ldr	r1, [sp, #0]
 8022f7e:	4605      	mov	r5, r0
 8022f80:	4630      	mov	r0, r6
 8022f82:	f7fb f8e7 	bl	801e154 <_malloc_r>
 8022f86:	b948      	cbnz	r0, 8022f9c <__smakebuf_r+0x44>
 8022f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022f8c:	059a      	lsls	r2, r3, #22
 8022f8e:	d4ef      	bmi.n	8022f70 <__smakebuf_r+0x18>
 8022f90:	f023 0303 	bic.w	r3, r3, #3
 8022f94:	f043 0302 	orr.w	r3, r3, #2
 8022f98:	81a3      	strh	r3, [r4, #12]
 8022f9a:	e7e3      	b.n	8022f64 <__smakebuf_r+0xc>
 8022f9c:	4b0d      	ldr	r3, [pc, #52]	; (8022fd4 <__smakebuf_r+0x7c>)
 8022f9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8022fa0:	89a3      	ldrh	r3, [r4, #12]
 8022fa2:	6020      	str	r0, [r4, #0]
 8022fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022fa8:	81a3      	strh	r3, [r4, #12]
 8022faa:	9b00      	ldr	r3, [sp, #0]
 8022fac:	6163      	str	r3, [r4, #20]
 8022fae:	9b01      	ldr	r3, [sp, #4]
 8022fb0:	6120      	str	r0, [r4, #16]
 8022fb2:	b15b      	cbz	r3, 8022fcc <__smakebuf_r+0x74>
 8022fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022fb8:	4630      	mov	r0, r6
 8022fba:	f000 f889 	bl	80230d0 <_isatty_r>
 8022fbe:	b128      	cbz	r0, 8022fcc <__smakebuf_r+0x74>
 8022fc0:	89a3      	ldrh	r3, [r4, #12]
 8022fc2:	f023 0303 	bic.w	r3, r3, #3
 8022fc6:	f043 0301 	orr.w	r3, r3, #1
 8022fca:	81a3      	strh	r3, [r4, #12]
 8022fcc:	89a0      	ldrh	r0, [r4, #12]
 8022fce:	4305      	orrs	r5, r0
 8022fd0:	81a5      	strh	r5, [r4, #12]
 8022fd2:	e7cd      	b.n	8022f70 <__smakebuf_r+0x18>
 8022fd4:	0801de3d 	.word	0x0801de3d

08022fd8 <_realloc_r>:
 8022fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fda:	4607      	mov	r7, r0
 8022fdc:	4614      	mov	r4, r2
 8022fde:	460e      	mov	r6, r1
 8022fe0:	b921      	cbnz	r1, 8022fec <_realloc_r+0x14>
 8022fe2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8022fe6:	4611      	mov	r1, r2
 8022fe8:	f7fb b8b4 	b.w	801e154 <_malloc_r>
 8022fec:	b922      	cbnz	r2, 8022ff8 <_realloc_r+0x20>
 8022fee:	f7fb f861 	bl	801e0b4 <_free_r>
 8022ff2:	4625      	mov	r5, r4
 8022ff4:	4628      	mov	r0, r5
 8022ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022ff8:	f000 f87a 	bl	80230f0 <_malloc_usable_size_r>
 8022ffc:	42a0      	cmp	r0, r4
 8022ffe:	d20f      	bcs.n	8023020 <_realloc_r+0x48>
 8023000:	4621      	mov	r1, r4
 8023002:	4638      	mov	r0, r7
 8023004:	f7fb f8a6 	bl	801e154 <_malloc_r>
 8023008:	4605      	mov	r5, r0
 802300a:	2800      	cmp	r0, #0
 802300c:	d0f2      	beq.n	8022ff4 <_realloc_r+0x1c>
 802300e:	4631      	mov	r1, r6
 8023010:	4622      	mov	r2, r4
 8023012:	f7fb f81f 	bl	801e054 <memcpy>
 8023016:	4631      	mov	r1, r6
 8023018:	4638      	mov	r0, r7
 802301a:	f7fb f84b 	bl	801e0b4 <_free_r>
 802301e:	e7e9      	b.n	8022ff4 <_realloc_r+0x1c>
 8023020:	4635      	mov	r5, r6
 8023022:	e7e7      	b.n	8022ff4 <_realloc_r+0x1c>

08023024 <_raise_r>:
 8023024:	291f      	cmp	r1, #31
 8023026:	b538      	push	{r3, r4, r5, lr}
 8023028:	4604      	mov	r4, r0
 802302a:	460d      	mov	r5, r1
 802302c:	d904      	bls.n	8023038 <_raise_r+0x14>
 802302e:	2316      	movs	r3, #22
 8023030:	6003      	str	r3, [r0, #0]
 8023032:	f04f 30ff 	mov.w	r0, #4294967295
 8023036:	bd38      	pop	{r3, r4, r5, pc}
 8023038:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802303a:	b112      	cbz	r2, 8023042 <_raise_r+0x1e>
 802303c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023040:	b94b      	cbnz	r3, 8023056 <_raise_r+0x32>
 8023042:	4620      	mov	r0, r4
 8023044:	f000 f830 	bl	80230a8 <_getpid_r>
 8023048:	462a      	mov	r2, r5
 802304a:	4601      	mov	r1, r0
 802304c:	4620      	mov	r0, r4
 802304e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023052:	f000 b817 	b.w	8023084 <_kill_r>
 8023056:	2b01      	cmp	r3, #1
 8023058:	d00a      	beq.n	8023070 <_raise_r+0x4c>
 802305a:	1c59      	adds	r1, r3, #1
 802305c:	d103      	bne.n	8023066 <_raise_r+0x42>
 802305e:	2316      	movs	r3, #22
 8023060:	6003      	str	r3, [r0, #0]
 8023062:	2001      	movs	r0, #1
 8023064:	e7e7      	b.n	8023036 <_raise_r+0x12>
 8023066:	2400      	movs	r4, #0
 8023068:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802306c:	4628      	mov	r0, r5
 802306e:	4798      	blx	r3
 8023070:	2000      	movs	r0, #0
 8023072:	e7e0      	b.n	8023036 <_raise_r+0x12>

08023074 <raise>:
 8023074:	4b02      	ldr	r3, [pc, #8]	; (8023080 <raise+0xc>)
 8023076:	4601      	mov	r1, r0
 8023078:	6818      	ldr	r0, [r3, #0]
 802307a:	f7ff bfd3 	b.w	8023024 <_raise_r>
 802307e:	bf00      	nop
 8023080:	20000360 	.word	0x20000360

08023084 <_kill_r>:
 8023084:	b538      	push	{r3, r4, r5, lr}
 8023086:	4d07      	ldr	r5, [pc, #28]	; (80230a4 <_kill_r+0x20>)
 8023088:	2300      	movs	r3, #0
 802308a:	4604      	mov	r4, r0
 802308c:	4608      	mov	r0, r1
 802308e:	4611      	mov	r1, r2
 8023090:	602b      	str	r3, [r5, #0]
 8023092:	f7e3 fa05 	bl	80064a0 <_kill>
 8023096:	1c43      	adds	r3, r0, #1
 8023098:	d102      	bne.n	80230a0 <_kill_r+0x1c>
 802309a:	682b      	ldr	r3, [r5, #0]
 802309c:	b103      	cbz	r3, 80230a0 <_kill_r+0x1c>
 802309e:	6023      	str	r3, [r4, #0]
 80230a0:	bd38      	pop	{r3, r4, r5, pc}
 80230a2:	bf00      	nop
 80230a4:	2000e11c 	.word	0x2000e11c

080230a8 <_getpid_r>:
 80230a8:	f7e3 b9f2 	b.w	8006490 <_getpid>

080230ac <_fstat_r>:
 80230ac:	b538      	push	{r3, r4, r5, lr}
 80230ae:	4d07      	ldr	r5, [pc, #28]	; (80230cc <_fstat_r+0x20>)
 80230b0:	2300      	movs	r3, #0
 80230b2:	4604      	mov	r4, r0
 80230b4:	4608      	mov	r0, r1
 80230b6:	4611      	mov	r1, r2
 80230b8:	602b      	str	r3, [r5, #0]
 80230ba:	f7e3 fa52 	bl	8006562 <_fstat>
 80230be:	1c43      	adds	r3, r0, #1
 80230c0:	d102      	bne.n	80230c8 <_fstat_r+0x1c>
 80230c2:	682b      	ldr	r3, [r5, #0]
 80230c4:	b103      	cbz	r3, 80230c8 <_fstat_r+0x1c>
 80230c6:	6023      	str	r3, [r4, #0]
 80230c8:	bd38      	pop	{r3, r4, r5, pc}
 80230ca:	bf00      	nop
 80230cc:	2000e11c 	.word	0x2000e11c

080230d0 <_isatty_r>:
 80230d0:	b538      	push	{r3, r4, r5, lr}
 80230d2:	4d06      	ldr	r5, [pc, #24]	; (80230ec <_isatty_r+0x1c>)
 80230d4:	2300      	movs	r3, #0
 80230d6:	4604      	mov	r4, r0
 80230d8:	4608      	mov	r0, r1
 80230da:	602b      	str	r3, [r5, #0]
 80230dc:	f7e3 fa51 	bl	8006582 <_isatty>
 80230e0:	1c43      	adds	r3, r0, #1
 80230e2:	d102      	bne.n	80230ea <_isatty_r+0x1a>
 80230e4:	682b      	ldr	r3, [r5, #0]
 80230e6:	b103      	cbz	r3, 80230ea <_isatty_r+0x1a>
 80230e8:	6023      	str	r3, [r4, #0]
 80230ea:	bd38      	pop	{r3, r4, r5, pc}
 80230ec:	2000e11c 	.word	0x2000e11c

080230f0 <_malloc_usable_size_r>:
 80230f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80230f4:	1f18      	subs	r0, r3, #4
 80230f6:	2b00      	cmp	r3, #0
 80230f8:	bfbc      	itt	lt
 80230fa:	580b      	ldrlt	r3, [r1, r0]
 80230fc:	18c0      	addlt	r0, r0, r3
 80230fe:	4770      	bx	lr

08023100 <_init>:
 8023100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023102:	bf00      	nop
 8023104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023106:	bc08      	pop	{r3}
 8023108:	469e      	mov	lr, r3
 802310a:	4770      	bx	lr

0802310c <_fini>:
 802310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802310e:	bf00      	nop
 8023110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023112:	bc08      	pop	{r3}
 8023114:	469e      	mov	lr, r3
 8023116:	4770      	bx	lr
