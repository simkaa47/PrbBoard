
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038b8  080196d8  080196d8  000296d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cf90  0801cf90  00030114  2**0
                  CONTENTS
  4 .ARM          00000008  0801cf90  0801cf90  0002cf90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cf98  0801cf98  00030114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cf98  0801cf98  0002cf98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cf9c  0801cf9c  0002cf9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  0801cfa0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030114  2**0
                  CONTENTS
 10 .bss          0000d924  20000114  20000114  00030114  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000da38  2000da38  00030114  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004f16f  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009803  00000000  00000000  0007f2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002460  00000000  00000000  00088ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002278  00000000  00000000  0008af18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003492e  00000000  00000000  0008d190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003bef7  00000000  00000000  000c1abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f34ec  00000000  00000000  000fd9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001f0ea1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c58  00000000  00000000  001f0ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080196c0 	.word	0x080196c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	080196c0 	.word	0x080196c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <set_bit>:
 */

#include <control_bit.h>

uint16_t set_bit(uint16_t value, uint8_t num)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	80fb      	strh	r3, [r7, #6]
 8000574:	4613      	mov	r3, r2
 8000576:	717b      	strb	r3, [r7, #5]
     return value | (1 << num);
 8000578:	797b      	ldrb	r3, [r7, #5]
 800057a:	2201      	movs	r2, #1
 800057c:	fa02 f303 	lsl.w	r3, r2, r3
 8000580:	b21a      	sxth	r2, r3
 8000582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000586:	4313      	orrs	r3, r2
 8000588:	b21b      	sxth	r3, r3
 800058a:	b29b      	uxth	r3, r3
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <Read_Inputs>:

extern Settings_Struct settings;
extern Meas_Data meas_data;

void Read_Inputs()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	meas_data.d_inputs.in0 	= settings.input_emulation_switches.in0  ? settings.input_emulation_values.in0 :  HAL_GPIO_ReadPin(DIN_0_GPIO_Port, DIN_0_Pin);
 800059c:	4b9f      	ldr	r3, [pc, #636]	; (800081c <Read_Inputs+0x284>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d005      	beq.n	80005b6 <Read_Inputs+0x1e>
 80005aa:	4b9c      	ldr	r3, [pc, #624]	; (800081c <Read_Inputs+0x284>)
 80005ac:	789b      	ldrb	r3, [r3, #2]
 80005ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	e008      	b.n	80005c8 <Read_Inputs+0x30>
 80005b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ba:	4899      	ldr	r0, [pc, #612]	; (8000820 <Read_Inputs+0x288>)
 80005bc:	f004 fc42 	bl	8004e44 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4996      	ldr	r1, [pc, #600]	; (8000824 <Read_Inputs+0x28c>)
 80005ca:	780b      	ldrb	r3, [r1, #0]
 80005cc:	f362 0300 	bfi	r3, r2, #0, #1
 80005d0:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in1 	= settings.input_emulation_switches.in1  ? settings.input_emulation_values.in1 :  HAL_GPIO_ReadPin(DIN_1_GPIO_Port, DIN_1_Pin);
 80005d2:	4b92      	ldr	r3, [pc, #584]	; (800081c <Read_Inputs+0x284>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d005      	beq.n	80005ec <Read_Inputs+0x54>
 80005e0:	4b8e      	ldr	r3, [pc, #568]	; (800081c <Read_Inputs+0x284>)
 80005e2:	789b      	ldrb	r3, [r3, #2]
 80005e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	e008      	b.n	80005fe <Read_Inputs+0x66>
 80005ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f0:	488b      	ldr	r0, [pc, #556]	; (8000820 <Read_Inputs+0x288>)
 80005f2:	f004 fc27 	bl	8004e44 <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4989      	ldr	r1, [pc, #548]	; (8000824 <Read_Inputs+0x28c>)
 8000600:	780b      	ldrb	r3, [r1, #0]
 8000602:	f362 0341 	bfi	r3, r2, #1, #1
 8000606:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in2 	= settings.input_emulation_switches.in2  ? settings.input_emulation_values.in2 :  HAL_GPIO_ReadPin(DIN_2_GPIO_Port, DIN_2_Pin);
 8000608:	4b84      	ldr	r3, [pc, #528]	; (800081c <Read_Inputs+0x284>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d005      	beq.n	8000622 <Read_Inputs+0x8a>
 8000616:	4b81      	ldr	r3, [pc, #516]	; (800081c <Read_Inputs+0x284>)
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	e007      	b.n	8000632 <Read_Inputs+0x9a>
 8000622:	2101      	movs	r1, #1
 8000624:	4880      	ldr	r0, [pc, #512]	; (8000828 <Read_Inputs+0x290>)
 8000626:	f004 fc0d 	bl	8004e44 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	b2da      	uxtb	r2, r3
 8000632:	497c      	ldr	r1, [pc, #496]	; (8000824 <Read_Inputs+0x28c>)
 8000634:	780b      	ldrb	r3, [r1, #0]
 8000636:	f362 0382 	bfi	r3, r2, #2, #1
 800063a:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in3 	= settings.input_emulation_switches.in3  ? settings.input_emulation_values.in3 :  HAL_GPIO_ReadPin(DIN_3_GPIO_Port, DIN_3_Pin);
 800063c:	4b77      	ldr	r3, [pc, #476]	; (800081c <Read_Inputs+0x284>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	f003 0308 	and.w	r3, r3, #8
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d005      	beq.n	8000656 <Read_Inputs+0xbe>
 800064a:	4b74      	ldr	r3, [pc, #464]	; (800081c <Read_Inputs+0x284>)
 800064c:	789b      	ldrb	r3, [r3, #2]
 800064e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000652:	b2da      	uxtb	r2, r3
 8000654:	e007      	b.n	8000666 <Read_Inputs+0xce>
 8000656:	2102      	movs	r1, #2
 8000658:	4873      	ldr	r0, [pc, #460]	; (8000828 <Read_Inputs+0x290>)
 800065a:	f004 fbf3 	bl	8004e44 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	496f      	ldr	r1, [pc, #444]	; (8000824 <Read_Inputs+0x28c>)
 8000668:	780b      	ldrb	r3, [r1, #0]
 800066a:	f362 03c3 	bfi	r3, r2, #3, #1
 800066e:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in4 	= settings.input_emulation_switches.in4  ? settings.input_emulation_values.in4 :  HAL_GPIO_ReadPin(DIN_4_GPIO_Port, DIN_4_Pin);
 8000670:	4b6a      	ldr	r3, [pc, #424]	; (800081c <Read_Inputs+0x284>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	f003 0310 	and.w	r3, r3, #16
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d005      	beq.n	800068a <Read_Inputs+0xf2>
 800067e:	4b67      	ldr	r3, [pc, #412]	; (800081c <Read_Inputs+0x284>)
 8000680:	789b      	ldrb	r3, [r3, #2]
 8000682:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000686:	b2da      	uxtb	r2, r3
 8000688:	e007      	b.n	800069a <Read_Inputs+0x102>
 800068a:	2104      	movs	r1, #4
 800068c:	4866      	ldr	r0, [pc, #408]	; (8000828 <Read_Inputs+0x290>)
 800068e:	f004 fbd9 	bl	8004e44 <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4962      	ldr	r1, [pc, #392]	; (8000824 <Read_Inputs+0x28c>)
 800069c:	780b      	ldrb	r3, [r1, #0]
 800069e:	f362 1304 	bfi	r3, r2, #4, #1
 80006a2:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in5 	= settings.input_emulation_switches.in5  ? settings.input_emulation_values.in5 :  HAL_GPIO_ReadPin(DIN_5_GPIO_Port, DIN_5_Pin);
 80006a4:	4b5d      	ldr	r3, [pc, #372]	; (800081c <Read_Inputs+0x284>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	f003 0320 	and.w	r3, r3, #32
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d005      	beq.n	80006be <Read_Inputs+0x126>
 80006b2:	4b5a      	ldr	r3, [pc, #360]	; (800081c <Read_Inputs+0x284>)
 80006b4:	789b      	ldrb	r3, [r3, #2]
 80006b6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	e007      	b.n	80006ce <Read_Inputs+0x136>
 80006be:	2108      	movs	r1, #8
 80006c0:	4859      	ldr	r0, [pc, #356]	; (8000828 <Read_Inputs+0x290>)
 80006c2:	f004 fbbf 	bl	8004e44 <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4955      	ldr	r1, [pc, #340]	; (8000824 <Read_Inputs+0x28c>)
 80006d0:	780b      	ldrb	r3, [r1, #0]
 80006d2:	f362 1345 	bfi	r3, r2, #5, #1
 80006d6:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in6 	= settings.input_emulation_switches.in6  ? settings.input_emulation_values.in6 :  HAL_GPIO_ReadPin(DIN_6_GPIO_Port, DIN_6_Pin);
 80006d8:	4b50      	ldr	r3, [pc, #320]	; (800081c <Read_Inputs+0x284>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d005      	beq.n	80006f2 <Read_Inputs+0x15a>
 80006e6:	4b4d      	ldr	r3, [pc, #308]	; (800081c <Read_Inputs+0x284>)
 80006e8:	789b      	ldrb	r3, [r3, #2]
 80006ea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	e007      	b.n	8000702 <Read_Inputs+0x16a>
 80006f2:	2110      	movs	r1, #16
 80006f4:	484c      	ldr	r0, [pc, #304]	; (8000828 <Read_Inputs+0x290>)
 80006f6:	f004 fba5 	bl	8004e44 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4948      	ldr	r1, [pc, #288]	; (8000824 <Read_Inputs+0x28c>)
 8000704:	780b      	ldrb	r3, [r1, #0]
 8000706:	f362 1386 	bfi	r3, r2, #6, #1
 800070a:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in7 	= settings.input_emulation_switches.in7  ? settings.input_emulation_values.in7 :  HAL_GPIO_ReadPin(DIN_7_GPIO_Port, DIN_7_Pin);
 800070c:	4b43      	ldr	r3, [pc, #268]	; (800081c <Read_Inputs+0x284>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d005      	beq.n	8000726 <Read_Inputs+0x18e>
 800071a:	4b40      	ldr	r3, [pc, #256]	; (800081c <Read_Inputs+0x284>)
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000722:	b2da      	uxtb	r2, r3
 8000724:	e007      	b.n	8000736 <Read_Inputs+0x19e>
 8000726:	2120      	movs	r1, #32
 8000728:	483f      	ldr	r0, [pc, #252]	; (8000828 <Read_Inputs+0x290>)
 800072a:	f004 fb8b 	bl	8004e44 <HAL_GPIO_ReadPin>
 800072e:	4603      	mov	r3, r0
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	493b      	ldr	r1, [pc, #236]	; (8000824 <Read_Inputs+0x28c>)
 8000738:	780b      	ldrb	r3, [r1, #0]
 800073a:	f362 13c7 	bfi	r3, r2, #7, #1
 800073e:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in8 	= settings.input_emulation_switches.in8  ? settings.input_emulation_values.in8 :  HAL_GPIO_ReadPin(DIN_8_GPIO_Port, DIN_8_Pin);
 8000740:	4b36      	ldr	r3, [pc, #216]	; (800081c <Read_Inputs+0x284>)
 8000742:	785b      	ldrb	r3, [r3, #1]
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d005      	beq.n	800075a <Read_Inputs+0x1c2>
 800074e:	4b33      	ldr	r3, [pc, #204]	; (800081c <Read_Inputs+0x284>)
 8000750:	78db      	ldrb	r3, [r3, #3]
 8000752:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	e007      	b.n	800076a <Read_Inputs+0x1d2>
 800075a:	2140      	movs	r1, #64	; 0x40
 800075c:	4832      	ldr	r0, [pc, #200]	; (8000828 <Read_Inputs+0x290>)
 800075e:	f004 fb71 	bl	8004e44 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	b2da      	uxtb	r2, r3
 800076a:	492e      	ldr	r1, [pc, #184]	; (8000824 <Read_Inputs+0x28c>)
 800076c:	784b      	ldrb	r3, [r1, #1]
 800076e:	f362 0300 	bfi	r3, r2, #0, #1
 8000772:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in9 	= settings.input_emulation_switches.in9  ? settings.input_emulation_values.in9 :  HAL_GPIO_ReadPin(DIN_9_GPIO_Port, DIN_9_Pin);
 8000774:	4b29      	ldr	r3, [pc, #164]	; (800081c <Read_Inputs+0x284>)
 8000776:	785b      	ldrb	r3, [r3, #1]
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d005      	beq.n	800078e <Read_Inputs+0x1f6>
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <Read_Inputs+0x284>)
 8000784:	78db      	ldrb	r3, [r3, #3]
 8000786:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800078a:	b2da      	uxtb	r2, r3
 800078c:	e008      	b.n	80007a0 <Read_Inputs+0x208>
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	4826      	ldr	r0, [pc, #152]	; (800082c <Read_Inputs+0x294>)
 8000794:	f004 fb56 	bl	8004e44 <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4920      	ldr	r1, [pc, #128]	; (8000824 <Read_Inputs+0x28c>)
 80007a2:	784b      	ldrb	r3, [r1, #1]
 80007a4:	f362 0341 	bfi	r3, r2, #1, #1
 80007a8:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in10 = settings.input_emulation_switches.in10 ? settings.input_emulation_values.in10 : HAL_GPIO_ReadPin(DIN_10_GPIO_Port, DIN_10_Pin);
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <Read_Inputs+0x284>)
 80007ac:	785b      	ldrb	r3, [r3, #1]
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d005      	beq.n	80007c4 <Read_Inputs+0x22c>
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <Read_Inputs+0x284>)
 80007ba:	78db      	ldrb	r3, [r3, #3]
 80007bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	e008      	b.n	80007d6 <Read_Inputs+0x23e>
 80007c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c8:	4818      	ldr	r0, [pc, #96]	; (800082c <Read_Inputs+0x294>)
 80007ca:	f004 fb3b 	bl	8004e44 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4913      	ldr	r1, [pc, #76]	; (8000824 <Read_Inputs+0x28c>)
 80007d8:	784b      	ldrb	r3, [r1, #1]
 80007da:	f362 0382 	bfi	r3, r2, #2, #1
 80007de:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in11 = settings.input_emulation_switches.in11 ? settings.input_emulation_values.in11 : HAL_GPIO_ReadPin(DIN_11_GPIO_Port, DIN_11_Pin);
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <Read_Inputs+0x284>)
 80007e2:	785b      	ldrb	r3, [r3, #1]
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d005      	beq.n	80007fa <Read_Inputs+0x262>
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <Read_Inputs+0x284>)
 80007f0:	78db      	ldrb	r3, [r3, #3]
 80007f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	e008      	b.n	800080c <Read_Inputs+0x274>
 80007fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fe:	480b      	ldr	r0, [pc, #44]	; (800082c <Read_Inputs+0x294>)
 8000800:	f004 fb20 	bl	8004e44 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4905      	ldr	r1, [pc, #20]	; (8000824 <Read_Inputs+0x28c>)
 800080e:	784b      	ldrb	r3, [r1, #1]
 8000810:	f362 03c3 	bfi	r3, r2, #3, #1
 8000814:	704b      	strb	r3, [r1, #1]
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20006d70 	.word	0x20006d70
 8000820:	40020400 	.word	0x40020400
 8000824:	20006de0 	.word	0x20006de0
 8000828:	40021000 	.word	0x40021000
 800082c:	40020800 	.word	0x40020800

08000830 <Write_Outputs>:

void Write_Outputs()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	meas_data.d_outputs.out0  = settings.output_emulation_switches.out0  ? settings.output_emulation_values.out0  :  0;
 8000834:	4bb4      	ldr	r3, [pc, #720]	; (8000b08 <Write_Outputs+0x2d8>)
 8000836:	791b      	ldrb	r3, [r3, #4]
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d005      	beq.n	800084e <Write_Outputs+0x1e>
 8000842:	4bb1      	ldr	r3, [pc, #708]	; (8000b08 <Write_Outputs+0x2d8>)
 8000844:	799b      	ldrb	r3, [r3, #6]
 8000846:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800084a:	b2d9      	uxtb	r1, r3
 800084c:	e000      	b.n	8000850 <Write_Outputs+0x20>
 800084e:	2100      	movs	r1, #0
 8000850:	4aae      	ldr	r2, [pc, #696]	; (8000b0c <Write_Outputs+0x2dc>)
 8000852:	7893      	ldrb	r3, [r2, #2]
 8000854:	f361 0300 	bfi	r3, r1, #0, #1
 8000858:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out1  = settings.output_emulation_switches.out1  ? settings.output_emulation_values.out1  :  0;
 800085a:	4bab      	ldr	r3, [pc, #684]	; (8000b08 <Write_Outputs+0x2d8>)
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d005      	beq.n	8000874 <Write_Outputs+0x44>
 8000868:	4ba7      	ldr	r3, [pc, #668]	; (8000b08 <Write_Outputs+0x2d8>)
 800086a:	799b      	ldrb	r3, [r3, #6]
 800086c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000870:	b2d9      	uxtb	r1, r3
 8000872:	e000      	b.n	8000876 <Write_Outputs+0x46>
 8000874:	2100      	movs	r1, #0
 8000876:	4aa5      	ldr	r2, [pc, #660]	; (8000b0c <Write_Outputs+0x2dc>)
 8000878:	7893      	ldrb	r3, [r2, #2]
 800087a:	f361 0341 	bfi	r3, r1, #1, #1
 800087e:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out2  = settings.output_emulation_switches.out2  ? settings.output_emulation_values.out2  :  0;
 8000880:	4ba1      	ldr	r3, [pc, #644]	; (8000b08 <Write_Outputs+0x2d8>)
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d005      	beq.n	800089a <Write_Outputs+0x6a>
 800088e:	4b9e      	ldr	r3, [pc, #632]	; (8000b08 <Write_Outputs+0x2d8>)
 8000890:	799b      	ldrb	r3, [r3, #6]
 8000892:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000896:	b2d9      	uxtb	r1, r3
 8000898:	e000      	b.n	800089c <Write_Outputs+0x6c>
 800089a:	2100      	movs	r1, #0
 800089c:	4a9b      	ldr	r2, [pc, #620]	; (8000b0c <Write_Outputs+0x2dc>)
 800089e:	7893      	ldrb	r3, [r2, #2]
 80008a0:	f361 0382 	bfi	r3, r1, #2, #1
 80008a4:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out3  = settings.output_emulation_switches.out3  ? settings.output_emulation_values.out3  :  0;
 80008a6:	4b98      	ldr	r3, [pc, #608]	; (8000b08 <Write_Outputs+0x2d8>)
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d005      	beq.n	80008c0 <Write_Outputs+0x90>
 80008b4:	4b94      	ldr	r3, [pc, #592]	; (8000b08 <Write_Outputs+0x2d8>)
 80008b6:	799b      	ldrb	r3, [r3, #6]
 80008b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80008bc:	b2d9      	uxtb	r1, r3
 80008be:	e000      	b.n	80008c2 <Write_Outputs+0x92>
 80008c0:	2100      	movs	r1, #0
 80008c2:	4a92      	ldr	r2, [pc, #584]	; (8000b0c <Write_Outputs+0x2dc>)
 80008c4:	7893      	ldrb	r3, [r2, #2]
 80008c6:	f361 03c3 	bfi	r3, r1, #3, #1
 80008ca:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out4  = settings.output_emulation_switches.out4  ? settings.output_emulation_values.out4  :  0;
 80008cc:	4b8e      	ldr	r3, [pc, #568]	; (8000b08 <Write_Outputs+0x2d8>)
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d005      	beq.n	80008e6 <Write_Outputs+0xb6>
 80008da:	4b8b      	ldr	r3, [pc, #556]	; (8000b08 <Write_Outputs+0x2d8>)
 80008dc:	799b      	ldrb	r3, [r3, #6]
 80008de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80008e2:	b2d9      	uxtb	r1, r3
 80008e4:	e000      	b.n	80008e8 <Write_Outputs+0xb8>
 80008e6:	2100      	movs	r1, #0
 80008e8:	4a88      	ldr	r2, [pc, #544]	; (8000b0c <Write_Outputs+0x2dc>)
 80008ea:	7893      	ldrb	r3, [r2, #2]
 80008ec:	f361 1304 	bfi	r3, r1, #4, #1
 80008f0:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out5  = settings.output_emulation_switches.out5  ? settings.output_emulation_values.out5  :  0;
 80008f2:	4b85      	ldr	r3, [pc, #532]	; (8000b08 <Write_Outputs+0x2d8>)
 80008f4:	791b      	ldrb	r3, [r3, #4]
 80008f6:	f003 0320 	and.w	r3, r3, #32
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d005      	beq.n	800090c <Write_Outputs+0xdc>
 8000900:	4b81      	ldr	r3, [pc, #516]	; (8000b08 <Write_Outputs+0x2d8>)
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000908:	b2d9      	uxtb	r1, r3
 800090a:	e000      	b.n	800090e <Write_Outputs+0xde>
 800090c:	2100      	movs	r1, #0
 800090e:	4a7f      	ldr	r2, [pc, #508]	; (8000b0c <Write_Outputs+0x2dc>)
 8000910:	7893      	ldrb	r3, [r2, #2]
 8000912:	f361 1345 	bfi	r3, r1, #5, #1
 8000916:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out6  = settings.output_emulation_switches.out6  ? settings.output_emulation_values.out6  :  0;
 8000918:	4b7b      	ldr	r3, [pc, #492]	; (8000b08 <Write_Outputs+0x2d8>)
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d005      	beq.n	8000932 <Write_Outputs+0x102>
 8000926:	4b78      	ldr	r3, [pc, #480]	; (8000b08 <Write_Outputs+0x2d8>)
 8000928:	799b      	ldrb	r3, [r3, #6]
 800092a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800092e:	b2d9      	uxtb	r1, r3
 8000930:	e000      	b.n	8000934 <Write_Outputs+0x104>
 8000932:	2100      	movs	r1, #0
 8000934:	4a75      	ldr	r2, [pc, #468]	; (8000b0c <Write_Outputs+0x2dc>)
 8000936:	7893      	ldrb	r3, [r2, #2]
 8000938:	f361 1386 	bfi	r3, r1, #6, #1
 800093c:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out7  = settings.output_emulation_switches.out7  ? settings.output_emulation_values.out7  :  0;
 800093e:	4b72      	ldr	r3, [pc, #456]	; (8000b08 <Write_Outputs+0x2d8>)
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d005      	beq.n	8000958 <Write_Outputs+0x128>
 800094c:	4b6e      	ldr	r3, [pc, #440]	; (8000b08 <Write_Outputs+0x2d8>)
 800094e:	799b      	ldrb	r3, [r3, #6]
 8000950:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000954:	b2d9      	uxtb	r1, r3
 8000956:	e000      	b.n	800095a <Write_Outputs+0x12a>
 8000958:	2100      	movs	r1, #0
 800095a:	4a6c      	ldr	r2, [pc, #432]	; (8000b0c <Write_Outputs+0x2dc>)
 800095c:	7893      	ldrb	r3, [r2, #2]
 800095e:	f361 13c7 	bfi	r3, r1, #7, #1
 8000962:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out8  = settings.output_emulation_switches.out8  ? settings.output_emulation_values.out8  :  0;
 8000964:	4b68      	ldr	r3, [pc, #416]	; (8000b08 <Write_Outputs+0x2d8>)
 8000966:	795b      	ldrb	r3, [r3, #5]
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d005      	beq.n	800097e <Write_Outputs+0x14e>
 8000972:	4b65      	ldr	r3, [pc, #404]	; (8000b08 <Write_Outputs+0x2d8>)
 8000974:	79db      	ldrb	r3, [r3, #7]
 8000976:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800097a:	b2d9      	uxtb	r1, r3
 800097c:	e000      	b.n	8000980 <Write_Outputs+0x150>
 800097e:	2100      	movs	r1, #0
 8000980:	4a62      	ldr	r2, [pc, #392]	; (8000b0c <Write_Outputs+0x2dc>)
 8000982:	78d3      	ldrb	r3, [r2, #3]
 8000984:	f361 0300 	bfi	r3, r1, #0, #1
 8000988:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out9  = settings.output_emulation_switches.out9  ? settings.output_emulation_values.out9  :  0;
 800098a:	4b5f      	ldr	r3, [pc, #380]	; (8000b08 <Write_Outputs+0x2d8>)
 800098c:	795b      	ldrb	r3, [r3, #5]
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d005      	beq.n	80009a4 <Write_Outputs+0x174>
 8000998:	4b5b      	ldr	r3, [pc, #364]	; (8000b08 <Write_Outputs+0x2d8>)
 800099a:	79db      	ldrb	r3, [r3, #7]
 800099c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80009a0:	b2d9      	uxtb	r1, r3
 80009a2:	e000      	b.n	80009a6 <Write_Outputs+0x176>
 80009a4:	2100      	movs	r1, #0
 80009a6:	4a59      	ldr	r2, [pc, #356]	; (8000b0c <Write_Outputs+0x2dc>)
 80009a8:	78d3      	ldrb	r3, [r2, #3]
 80009aa:	f361 0341 	bfi	r3, r1, #1, #1
 80009ae:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out10 = settings.output_emulation_switches.out10 ? settings.output_emulation_values.out10 :  0;
 80009b0:	4b55      	ldr	r3, [pc, #340]	; (8000b08 <Write_Outputs+0x2d8>)
 80009b2:	795b      	ldrb	r3, [r3, #5]
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d005      	beq.n	80009ca <Write_Outputs+0x19a>
 80009be:	4b52      	ldr	r3, [pc, #328]	; (8000b08 <Write_Outputs+0x2d8>)
 80009c0:	79db      	ldrb	r3, [r3, #7]
 80009c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80009c6:	b2d9      	uxtb	r1, r3
 80009c8:	e000      	b.n	80009cc <Write_Outputs+0x19c>
 80009ca:	2100      	movs	r1, #0
 80009cc:	4a4f      	ldr	r2, [pc, #316]	; (8000b0c <Write_Outputs+0x2dc>)
 80009ce:	78d3      	ldrb	r3, [r2, #3]
 80009d0:	f361 0382 	bfi	r3, r1, #2, #1
 80009d4:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out11 = settings.output_emulation_switches.out11 ? settings.output_emulation_values.out11 :  0;
 80009d6:	4b4c      	ldr	r3, [pc, #304]	; (8000b08 <Write_Outputs+0x2d8>)
 80009d8:	795b      	ldrb	r3, [r3, #5]
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d005      	beq.n	80009f0 <Write_Outputs+0x1c0>
 80009e4:	4b48      	ldr	r3, [pc, #288]	; (8000b08 <Write_Outputs+0x2d8>)
 80009e6:	79db      	ldrb	r3, [r3, #7]
 80009e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80009ec:	b2d9      	uxtb	r1, r3
 80009ee:	e000      	b.n	80009f2 <Write_Outputs+0x1c2>
 80009f0:	2100      	movs	r1, #0
 80009f2:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <Write_Outputs+0x2dc>)
 80009f4:	78d3      	ldrb	r3, [r2, #3]
 80009f6:	f361 03c3 	bfi	r3, r1, #3, #1
 80009fa:	70d3      	strb	r3, [r2, #3]
	HAL_GPIO_WritePin(DOUT_0_GPIO_Port, DOUT_0_Pin, meas_data.d_outputs.out0);
 80009fc:	4b43      	ldr	r3, [pc, #268]	; (8000b0c <Write_Outputs+0x2dc>)
 80009fe:	789b      	ldrb	r3, [r3, #2]
 8000a00:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	461a      	mov	r2, r3
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	4841      	ldr	r0, [pc, #260]	; (8000b10 <Write_Outputs+0x2e0>)
 8000a0c:	f004 fa32 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_1_GPIO_Port, DOUT_1_Pin, meas_data.d_outputs.out1);
 8000a10:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <Write_Outputs+0x2dc>)
 8000a12:	789b      	ldrb	r3, [r3, #2]
 8000a14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a20:	483b      	ldr	r0, [pc, #236]	; (8000b10 <Write_Outputs+0x2e0>)
 8000a22:	f004 fa27 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_2_GPIO_Port, DOUT_2_Pin, meas_data.d_outputs.out2);
 8000a26:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <Write_Outputs+0x2dc>)
 8000a28:	789b      	ldrb	r3, [r3, #2]
 8000a2a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a36:	4836      	ldr	r0, [pc, #216]	; (8000b10 <Write_Outputs+0x2e0>)
 8000a38:	f004 fa1c 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_3_GPIO_Port, DOUT_3_Pin, meas_data.d_outputs.out3);
 8000a3c:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <Write_Outputs+0x2dc>)
 8000a3e:	789b      	ldrb	r3, [r3, #2]
 8000a40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4c:	4830      	ldr	r0, [pc, #192]	; (8000b10 <Write_Outputs+0x2e0>)
 8000a4e:	f004 fa11 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_4_GPIO_Port, DOUT_4_Pin, meas_data.d_outputs.out4);
 8000a52:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <Write_Outputs+0x2dc>)
 8000a54:	789b      	ldrb	r3, [r3, #2]
 8000a56:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a62:	482b      	ldr	r0, [pc, #172]	; (8000b10 <Write_Outputs+0x2e0>)
 8000a64:	f004 fa06 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_5_GPIO_Port, DOUT_5_Pin, meas_data.d_outputs.out5);
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <Write_Outputs+0x2dc>)
 8000a6a:	789b      	ldrb	r3, [r3, #2]
 8000a6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	461a      	mov	r2, r3
 8000a74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a78:	4825      	ldr	r0, [pc, #148]	; (8000b10 <Write_Outputs+0x2e0>)
 8000a7a:	f004 f9fb 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_6_GPIO_Port, DOUT_6_Pin, meas_data.d_outputs.out6);
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <Write_Outputs+0x2dc>)
 8000a80:	789b      	ldrb	r3, [r3, #2]
 8000a82:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8e:	4820      	ldr	r0, [pc, #128]	; (8000b10 <Write_Outputs+0x2e0>)
 8000a90:	f004 f9f0 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_7_GPIO_Port, DOUT_7_Pin, meas_data.d_outputs.out7);
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <Write_Outputs+0x2dc>)
 8000a96:	789b      	ldrb	r3, [r3, #2]
 8000a98:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa4:	481a      	ldr	r0, [pc, #104]	; (8000b10 <Write_Outputs+0x2e0>)
 8000aa6:	f004 f9e5 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_8_GPIO_Port, DOUT_8_Pin, meas_data.d_outputs.out8);
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <Write_Outputs+0x2dc>)
 8000aac:	78db      	ldrb	r3, [r3, #3]
 8000aae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aba:	4815      	ldr	r0, [pc, #84]	; (8000b10 <Write_Outputs+0x2e0>)
 8000abc:	f004 f9da 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_9_GPIO_Port, DOUT_9_Pin, meas_data.d_outputs.out9);
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <Write_Outputs+0x2dc>)
 8000ac2:	78db      	ldrb	r3, [r3, #3]
 8000ac4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad0:	4810      	ldr	r0, [pc, #64]	; (8000b14 <Write_Outputs+0x2e4>)
 8000ad2:	f004 f9cf 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_10_GPIO_Port, DOUT_10_Pin, meas_data.d_outputs.out10);
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <Write_Outputs+0x2dc>)
 8000ad8:	78db      	ldrb	r3, [r3, #3]
 8000ada:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <Write_Outputs+0x2e8>)
 8000ae8:	f004 f9c4 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_11_GPIO_Port, DOUT_11_Pin, meas_data.d_outputs.out11);
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <Write_Outputs+0x2dc>)
 8000aee:	78db      	ldrb	r3, [r3, #3]
 8000af0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <Write_Outputs+0x2e8>)
 8000afe:	f004 f9b9 	bl	8004e74 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20006d70 	.word	0x20006d70
 8000b0c:	20006de0 	.word	0x20006de0
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40020c00 	.word	0x40020c00

08000b1c <ethernet_reset>:

static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer);
static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf);

void ethernet_reset()
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2101      	movs	r1, #1
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <ethernet_reset+0x24>)
 8000b26:	f004 f9a5 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b2a:	2064      	movs	r0, #100	; 0x64
 8000b2c:	f002 f940 	bl	8002db0 <HAL_Delay>
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	2101      	movs	r1, #1
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <ethernet_reset+0x24>)
 8000b36:	f004 f99d 	bl	8004e74 <HAL_GPIO_WritePin>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40020000 	.word	0x40020000

08000b44 <ethernet_thread>:

void ethernet_thread(void *arg)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b0cc      	sub	sp, #304	; 0x130
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	6018      	str	r0, [r3, #0]
	struct netconn *conn;
	struct netbuf *buf;
	ip_addr_t *client_addr;
	unsigned short local_port;
	unsigned short client_port;
	local_port = *((unsigned short*)arg);
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	void* data;
	uint8_t answer[256];
	u16_t len;
	uint16_t answer_len;
	conn = netconn_new(NETCONN_UDP);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2020      	movs	r0, #32
 8000b5e:	f00a fa2f 	bl	800afc0 <netconn_new_with_proto_and_callback>
 8000b62:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
	if (conn!= NULL)
 8000b66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d05b      	beq.n	8000c26 <ethernet_thread+0xe2>
	{
	  err = netconn_bind(conn, IP_ADDR_ANY, local_port);
 8000b6e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8000b72:	461a      	mov	r2, r3
 8000b74:	492e      	ldr	r1, [pc, #184]	; (8000c30 <ethernet_thread+0xec>)
 8000b76:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000b7a:	f00a fadb 	bl	800b134 <netconn_bind>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  if (err == ERR_OK)
 8000b84:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d148      	bne.n	8000c1e <ethernet_thread+0xda>
	  {
		  for(;;)
		  {
			  recv_err = netconn_recv(conn, &buf);
 8000b8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b90:	4619      	mov	r1, r3
 8000b92:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000b96:	f00a fc81 	bl	800b49c <netconn_recv>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
			  if (recv_err == ERR_OK)
 8000ba0:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1f1      	bne.n	8000b8c <ethernet_thread+0x48>
			  {
				  client_addr = netbuf_fromaddr(buf);
 8000ba8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bac:	3308      	adds	r3, #8
 8000bae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				  client_port = netbuf_fromport(buf);
 8000bb2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bb6:	899b      	ldrh	r3, [r3, #12]
 8000bb8:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

				  netbuf_data(buf, &data, &len);
 8000bbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bc0:	f107 020a 	add.w	r2, r7, #10
 8000bc4:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f00c f839 	bl	800cc40 <netbuf_data>
				  answer_len = ethernet_answer(data, len, answer);
 8000bce:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8000bd2:	f107 030a 	add.w	r3, r7, #10
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	f107 020c 	add.w	r2, r7, #12
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f000 f859 	bl	8000c94 <ethernet_answer>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				  if(answer_len)
 8000be8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d010      	beq.n	8000c12 <ethernet_thread+0xce>
				  {
					  Send(conn, answer, answer_len, client_addr, client_port, buf);
 8000bf0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bf4:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8000bf8:	f107 010c 	add.w	r1, r7, #12
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c08:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000c0c:	f000 f812 	bl	8000c34 <Send>
 8000c10:	e7bc      	b.n	8000b8c <ethernet_thread+0x48>
				  }
				  else netbuf_delete(buf);
 8000c12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c16:	4618      	mov	r0, r3
 8000c18:	f00b ffa8 	bl	800cb6c <netbuf_delete>
			  recv_err = netconn_recv(conn, &buf);
 8000c1c:	e7b6      	b.n	8000b8c <ethernet_thread+0x48>

		  }
	  }
	  else
	  {
	    netconn_delete(conn);
 8000c1e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000c22:	f00a fa6b 	bl	800b0fc <netconn_delete>
	  }
	}
}
 8000c26:	bf00      	nop
 8000c28:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	0801ce28 	.word	0x0801ce28

08000c34 <Send>:

static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	4613      	mov	r3, r2
 8000c42:	80fb      	strh	r3, [r7, #6]
	u32_t address = addr->addr;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	617b      	str	r3, [r7, #20]
	netbuf_delete(buf);
 8000c4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c4c:	f00b ff8e 	bl	800cb6c <netbuf_delete>
	buf = netbuf_new();
 8000c50:	f00b ff78 	bl	800cb44 <netbuf_new>
 8000c54:	6278      	str	r0, [r7, #36]	; 0x24
	buf->port = port;
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	8c3a      	ldrh	r2, [r7, #32]
 8000c5a:	819a      	strh	r2, [r3, #12]
	addr->addr = address;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	601a      	str	r2, [r3, #0]
	err_t err;
	err  = netbuf_ref(buf, pointer, size);
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	461a      	mov	r2, r3
 8000c66:	68b9      	ldr	r1, [r7, #8]
 8000c68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c6a:	f00b ff9f 	bl	800cbac <netbuf_ref>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	74fb      	strb	r3, [r7, #19]
	if(err==ERR_OK)
 8000c72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d108      	bne.n	8000c8c <Send+0x58>
	{
		netconn_sendto(conn, buf, addr, port);
 8000c7a:	8c3b      	ldrh	r3, [r7, #32]
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f00a fc85 	bl	800b590 <netconn_sendto>
		netbuf_delete(buf);
 8000c86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c88:	f00b ff70 	bl	800cb6c <netbuf_delete>
	}
}
 8000c8c:	bf00      	nop
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <ethernet_answer>:

//Возвращает кол-во байт для отправки клиенту
static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	817b      	strh	r3, [r7, #10]
	int result = ModbusParse(data, data_length, answer, ETHERNET);
 8000ca2:	8979      	ldrh	r1, [r7, #10]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f000 ff5b 	bl	8001b64 <ModbusParse>
 8000cae:	6178      	str	r0, [r7, #20]
	if(result)return result;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <ethernet_answer+0x26>
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	e000      	b.n	8000cbc <ethernet_answer+0x28>
	return 0;
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <vApplicationGetIdleTaskMemory+0x30>)
 8000cda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000130 	.word	0x20000130
 8000cf4:	200001e4 	.word	0x200001e4

08000cf8 <task_init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void task_init()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af02      	add	r7, sp, #8
	size_t fre = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
	fre=xPortGetFreeHeapSize();
 8000d02:	f00a f877 	bl	800adf4 <xPortGetFreeHeapSize>
 8000d06:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread1", ethernet_thread, (void*)&port1, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8000d08:	2300      	movs	r3, #0
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d10:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <task_init+0x90>)
 8000d12:	491e      	ldr	r1, [pc, #120]	; (8000d8c <task_init+0x94>)
 8000d14:	481e      	ldr	r0, [pc, #120]	; (8000d90 <task_init+0x98>)
 8000d16:	f017 fa01 	bl	801811c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8000d1a:	f00a f86b 	bl	800adf4 <xPortGetFreeHeapSize>
 8000d1e:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread2", ethernet_thread, (void*)&port2, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8000d20:	2300      	movs	r3, #0
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d28:	4a1a      	ldr	r2, [pc, #104]	; (8000d94 <task_init+0x9c>)
 8000d2a:	4918      	ldr	r1, [pc, #96]	; (8000d8c <task_init+0x94>)
 8000d2c:	481a      	ldr	r0, [pc, #104]	; (8000d98 <task_init+0xa0>)
 8000d2e:	f017 f9f5 	bl	801811c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8000d32:	f00a f85f 	bl	800adf4 <xPortGetFreeHeapSize>
 8000d36:	6178      	str	r0, [r7, #20]
	sys_thread_new("uart_thread", uart_thread, (void*)NULL, 512, osPriorityNormal );
 8000d38:	2300      	movs	r3, #0
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d40:	2200      	movs	r2, #0
 8000d42:	4916      	ldr	r1, [pc, #88]	; (8000d9c <task_init+0xa4>)
 8000d44:	4816      	ldr	r0, [pc, #88]	; (8000da0 <task_init+0xa8>)
 8000d46:	f017 f9e9 	bl	801811c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8000d4a:	f00a f853 	bl	800adf4 <xPortGetFreeHeapSize>
 8000d4e:	6178      	str	r0, [r7, #20]
	osMailQDef(uart_queue, UART_QUEUE_SIZE, Uart_Queue_Struct);
 8000d50:	2303      	movs	r3, #3
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	2310      	movs	r3, #16
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	60fb      	str	r3, [r7, #12]
	uart_queue = osMailCreate(osMailQ(uart_queue), NULL);
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f007 fab6 	bl	80082d4 <osMailCreate>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <task_init+0xac>)
 8000d6c:	6013      	str	r3, [r2, #0]
	sys_thread_new("keyboard_thread", keyscan_thread, (void*)NULL, 128, osPriorityNormal );
 8000d6e:	2300      	movs	r3, #0
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	2200      	movs	r2, #0
 8000d76:	490c      	ldr	r1, [pc, #48]	; (8000da8 <task_init+0xb0>)
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <task_init+0xb4>)
 8000d7a:	f017 f9cf 	bl	801811c <sys_thread_new>
}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	08000b45 	.word	0x08000b45
 8000d90:	080196d8 	.word	0x080196d8
 8000d94:	20000002 	.word	0x20000002
 8000d98:	080196e4 	.word	0x080196e4
 8000d9c:	080028d5 	.word	0x080028d5
 8000da0:	080196f0 	.word	0x080196f0
 8000da4:	20006ad8 	.word	0x20006ad8
 8000da8:	08000db1 	.word	0x08000db1
 8000dac:	080196fc 	.word	0x080196fc

08000db0 <keyscan_thread>:
static void key_filter_all();
static void PrintSymbol(const char *str);


void keyscan_thread(void *argument)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

	while(1)
	{
		Tact_pins();
 8000db8:	f000 f846 	bl	8000e48 <Tact_pins>
		Key_Read();
 8000dbc:	f000 f950 	bl	8001060 <Key_Read>
		key_filter_all();
 8000dc0:	f000 f9c4 	bl	800114c <key_filter_all>
		GetPositiveFront();
 8000dc4:	f000 fa72 	bl	80012ac <GetPositiveFront>
		for (int i = 0; i < 6; ++i) {
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	e030      	b.n	8000e30 <keyscan_thread+0x80>
			for (int j = 0; j < 6; ++j) {
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	e027      	b.n	8000e24 <keyscan_thread+0x74>
				if(positive_fronts[i][j])
 8000dd4:	491a      	ldr	r1, [pc, #104]	; (8000e40 <keyscan_thread+0x90>)
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	18ca      	adds	r2, r1, r3
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	4413      	add	r3, r2
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d018      	beq.n	8000e1e <keyscan_thread+0x6e>
				{
					if(keys[i][j]!=NULL)
 8000dec:	4915      	ldr	r1, [pc, #84]	; (8000e44 <keyscan_thread+0x94>)
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d00c      	beq.n	8000e1e <keyscan_thread+0x6e>
					{
						PrintSymbol(keys[i][j]);
 8000e04:	490f      	ldr	r1, [pc, #60]	; (8000e44 <keyscan_thread+0x94>)
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	4413      	add	r3, r2
 8000e14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 faa5 	bl	8001368 <PrintSymbol>
			for (int j = 0; j < 6; ++j) {
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	3301      	adds	r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	ddd4      	ble.n	8000dd4 <keyscan_thread+0x24>
		for (int i = 0; i < 6; ++i) {
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b05      	cmp	r3, #5
 8000e34:	ddcb      	ble.n	8000dce <keyscan_thread+0x1e>
				}
			}
		}


		osDelay(2);
 8000e36:	2002      	movs	r0, #2
 8000e38:	f006 fef5 	bl	8007c26 <osDelay>
		Tact_pins();
 8000e3c:	e7bc      	b.n	8000db8 <keyscan_thread+0x8>
 8000e3e:	bf00      	nop
 8000e40:	20000474 	.word	0x20000474
 8000e44:	20000004 	.word	0x20000004

08000e48 <Tact_pins>:
	}
}

static void Tact_pins(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	out_key_pin = (out_key_pin+1)%COLUMNS_COUNT;
 8000e4c:	4b81      	ldr	r3, [pc, #516]	; (8001054 <Tact_pins+0x20c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	4b81      	ldr	r3, [pc, #516]	; (8001058 <Tact_pins+0x210>)
 8000e54:	fb83 3102 	smull	r3, r1, r3, r2
 8000e58:	17d3      	asrs	r3, r2, #31
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	440b      	add	r3, r1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	1ad1      	subs	r1, r2, r3
 8000e66:	b2ca      	uxtb	r2, r1
 8000e68:	4b7a      	ldr	r3, [pc, #488]	; (8001054 <Tact_pins+0x20c>)
 8000e6a:	701a      	strb	r2, [r3, #0]
	switch(out_key_pin)
 8000e6c:	4b79      	ldr	r3, [pc, #484]	; (8001054 <Tact_pins+0x20c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b05      	cmp	r3, #5
 8000e72:	f200 80ed 	bhi.w	8001050 <Tact_pins+0x208>
 8000e76:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <Tact_pins+0x34>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000e95 	.word	0x08000e95
 8000e80:	08000edf 	.word	0x08000edf
 8000e84:	08000f29 	.word	0x08000f29
 8000e88:	08000f73 	.word	0x08000f73
 8000e8c:	08000fbd 	.word	0x08000fbd
 8000e90:	08001007 	.word	0x08001007
	{
		case 0:
			C0_HIGH;
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9a:	4870      	ldr	r0, [pc, #448]	; (800105c <Tact_pins+0x214>)
 8000e9c:	f003 ffea 	bl	8004e74 <HAL_GPIO_WritePin>
			C1_LOW;
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea6:	486d      	ldr	r0, [pc, #436]	; (800105c <Tact_pins+0x214>)
 8000ea8:	f003 ffe4 	bl	8004e74 <HAL_GPIO_WritePin>
			C2_LOW;
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb2:	486a      	ldr	r0, [pc, #424]	; (800105c <Tact_pins+0x214>)
 8000eb4:	f003 ffde 	bl	8004e74 <HAL_GPIO_WritePin>
			C3_LOW;
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebe:	4867      	ldr	r0, [pc, #412]	; (800105c <Tact_pins+0x214>)
 8000ec0:	f003 ffd8 	bl	8004e74 <HAL_GPIO_WritePin>
			C4_LOW;
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eca:	4864      	ldr	r0, [pc, #400]	; (800105c <Tact_pins+0x214>)
 8000ecc:	f003 ffd2 	bl	8004e74 <HAL_GPIO_WritePin>
			C5_LOW;
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed6:	4861      	ldr	r0, [pc, #388]	; (800105c <Tact_pins+0x214>)
 8000ed8:	f003 ffcc 	bl	8004e74 <HAL_GPIO_WritePin>
			break;
 8000edc:	e0b8      	b.n	8001050 <Tact_pins+0x208>
		case 1:
			C0_LOW;
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee4:	485d      	ldr	r0, [pc, #372]	; (800105c <Tact_pins+0x214>)
 8000ee6:	f003 ffc5 	bl	8004e74 <HAL_GPIO_WritePin>
			C1_HIGH;
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef0:	485a      	ldr	r0, [pc, #360]	; (800105c <Tact_pins+0x214>)
 8000ef2:	f003 ffbf 	bl	8004e74 <HAL_GPIO_WritePin>
			C2_LOW;
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000efc:	4857      	ldr	r0, [pc, #348]	; (800105c <Tact_pins+0x214>)
 8000efe:	f003 ffb9 	bl	8004e74 <HAL_GPIO_WritePin>
			C3_LOW;
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f08:	4854      	ldr	r0, [pc, #336]	; (800105c <Tact_pins+0x214>)
 8000f0a:	f003 ffb3 	bl	8004e74 <HAL_GPIO_WritePin>
			C4_LOW;
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f14:	4851      	ldr	r0, [pc, #324]	; (800105c <Tact_pins+0x214>)
 8000f16:	f003 ffad 	bl	8004e74 <HAL_GPIO_WritePin>
			C5_LOW;
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f20:	484e      	ldr	r0, [pc, #312]	; (800105c <Tact_pins+0x214>)
 8000f22:	f003 ffa7 	bl	8004e74 <HAL_GPIO_WritePin>
			break;
 8000f26:	e093      	b.n	8001050 <Tact_pins+0x208>
		case 2:
			C0_LOW;
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2e:	484b      	ldr	r0, [pc, #300]	; (800105c <Tact_pins+0x214>)
 8000f30:	f003 ffa0 	bl	8004e74 <HAL_GPIO_WritePin>
			C1_LOW;
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f3a:	4848      	ldr	r0, [pc, #288]	; (800105c <Tact_pins+0x214>)
 8000f3c:	f003 ff9a 	bl	8004e74 <HAL_GPIO_WritePin>
			C2_HIGH;
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f46:	4845      	ldr	r0, [pc, #276]	; (800105c <Tact_pins+0x214>)
 8000f48:	f003 ff94 	bl	8004e74 <HAL_GPIO_WritePin>
			C3_LOW;
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f52:	4842      	ldr	r0, [pc, #264]	; (800105c <Tact_pins+0x214>)
 8000f54:	f003 ff8e 	bl	8004e74 <HAL_GPIO_WritePin>
			C4_LOW;
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f5e:	483f      	ldr	r0, [pc, #252]	; (800105c <Tact_pins+0x214>)
 8000f60:	f003 ff88 	bl	8004e74 <HAL_GPIO_WritePin>
			C5_LOW;
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f6a:	483c      	ldr	r0, [pc, #240]	; (800105c <Tact_pins+0x214>)
 8000f6c:	f003 ff82 	bl	8004e74 <HAL_GPIO_WritePin>
			break;
 8000f70:	e06e      	b.n	8001050 <Tact_pins+0x208>
		case 3:
			C0_LOW;
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f78:	4838      	ldr	r0, [pc, #224]	; (800105c <Tact_pins+0x214>)
 8000f7a:	f003 ff7b 	bl	8004e74 <HAL_GPIO_WritePin>
			C1_LOW;
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f84:	4835      	ldr	r0, [pc, #212]	; (800105c <Tact_pins+0x214>)
 8000f86:	f003 ff75 	bl	8004e74 <HAL_GPIO_WritePin>
			C2_LOW;
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f90:	4832      	ldr	r0, [pc, #200]	; (800105c <Tact_pins+0x214>)
 8000f92:	f003 ff6f 	bl	8004e74 <HAL_GPIO_WritePin>
			C3_HIGH;
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	482f      	ldr	r0, [pc, #188]	; (800105c <Tact_pins+0x214>)
 8000f9e:	f003 ff69 	bl	8004e74 <HAL_GPIO_WritePin>
			C4_LOW;
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa8:	482c      	ldr	r0, [pc, #176]	; (800105c <Tact_pins+0x214>)
 8000faa:	f003 ff63 	bl	8004e74 <HAL_GPIO_WritePin>
			C5_LOW;
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb4:	4829      	ldr	r0, [pc, #164]	; (800105c <Tact_pins+0x214>)
 8000fb6:	f003 ff5d 	bl	8004e74 <HAL_GPIO_WritePin>
			break;
 8000fba:	e049      	b.n	8001050 <Tact_pins+0x208>
		case 4:
			C0_LOW;
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc2:	4826      	ldr	r0, [pc, #152]	; (800105c <Tact_pins+0x214>)
 8000fc4:	f003 ff56 	bl	8004e74 <HAL_GPIO_WritePin>
			C1_LOW;
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fce:	4823      	ldr	r0, [pc, #140]	; (800105c <Tact_pins+0x214>)
 8000fd0:	f003 ff50 	bl	8004e74 <HAL_GPIO_WritePin>
			C2_LOW;
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fda:	4820      	ldr	r0, [pc, #128]	; (800105c <Tact_pins+0x214>)
 8000fdc:	f003 ff4a 	bl	8004e74 <HAL_GPIO_WritePin>
			C3_LOW;
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe6:	481d      	ldr	r0, [pc, #116]	; (800105c <Tact_pins+0x214>)
 8000fe8:	f003 ff44 	bl	8004e74 <HAL_GPIO_WritePin>
			C4_HIGH;
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff2:	481a      	ldr	r0, [pc, #104]	; (800105c <Tact_pins+0x214>)
 8000ff4:	f003 ff3e 	bl	8004e74 <HAL_GPIO_WritePin>
			C5_LOW;
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffe:	4817      	ldr	r0, [pc, #92]	; (800105c <Tact_pins+0x214>)
 8001000:	f003 ff38 	bl	8004e74 <HAL_GPIO_WritePin>
			break;
 8001004:	e024      	b.n	8001050 <Tact_pins+0x208>
		case 5:
			C0_LOW;
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100c:	4813      	ldr	r0, [pc, #76]	; (800105c <Tact_pins+0x214>)
 800100e:	f003 ff31 	bl	8004e74 <HAL_GPIO_WritePin>
			C1_LOW;
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001018:	4810      	ldr	r0, [pc, #64]	; (800105c <Tact_pins+0x214>)
 800101a:	f003 ff2b 	bl	8004e74 <HAL_GPIO_WritePin>
			C2_LOW;
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001024:	480d      	ldr	r0, [pc, #52]	; (800105c <Tact_pins+0x214>)
 8001026:	f003 ff25 	bl	8004e74 <HAL_GPIO_WritePin>
			C3_LOW;
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001030:	480a      	ldr	r0, [pc, #40]	; (800105c <Tact_pins+0x214>)
 8001032:	f003 ff1f 	bl	8004e74 <HAL_GPIO_WritePin>
			C4_LOW;
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800103c:	4807      	ldr	r0, [pc, #28]	; (800105c <Tact_pins+0x214>)
 800103e:	f003 ff19 	bl	8004e74 <HAL_GPIO_WritePin>
			C5_HIGH;
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <Tact_pins+0x214>)
 800104a:	f003 ff13 	bl	8004e74 <HAL_GPIO_WritePin>
			break;
 800104e:	bf00      	nop
	}
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20006c1c 	.word	0x20006c1c
 8001058:	2aaaaaab 	.word	0x2aaaaaab
 800105c:	40020c00 	.word	0x40020c00

08001060 <Key_Read>:


static void Key_Read(void)
{
 8001060:	b598      	push	{r3, r4, r7, lr}
 8001062:	af00      	add	r7, sp, #0
	key_input_mask[out_key_pin][0] = R0_IN;
 8001064:	4b36      	ldr	r3, [pc, #216]	; (8001140 <Key_Read+0xe0>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461c      	mov	r4, r3
 800106a:	2101      	movs	r1, #1
 800106c:	4835      	ldr	r0, [pc, #212]	; (8001144 <Key_Read+0xe4>)
 800106e:	f003 fee9 	bl	8004e44 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	4619      	mov	r1, r3
 8001076:	4a34      	ldr	r2, [pc, #208]	; (8001148 <Key_Read+0xe8>)
 8001078:	4623      	mov	r3, r4
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4423      	add	r3, r4
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	460a      	mov	r2, r1
 8001084:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][1] = R1_IN;
 8001086:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <Key_Read+0xe0>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461c      	mov	r4, r3
 800108c:	2102      	movs	r1, #2
 800108e:	482d      	ldr	r0, [pc, #180]	; (8001144 <Key_Read+0xe4>)
 8001090:	f003 fed8 	bl	8004e44 <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	4619      	mov	r1, r3
 8001098:	4a2b      	ldr	r2, [pc, #172]	; (8001148 <Key_Read+0xe8>)
 800109a:	4623      	mov	r3, r4
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4423      	add	r3, r4
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	3301      	adds	r3, #1
 80010a6:	460a      	mov	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][2] = R2_IN;
 80010aa:	4b25      	ldr	r3, [pc, #148]	; (8001140 <Key_Read+0xe0>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461c      	mov	r4, r3
 80010b0:	2104      	movs	r1, #4
 80010b2:	4824      	ldr	r0, [pc, #144]	; (8001144 <Key_Read+0xe4>)
 80010b4:	f003 fec6 	bl	8004e44 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4619      	mov	r1, r3
 80010bc:	4a22      	ldr	r2, [pc, #136]	; (8001148 <Key_Read+0xe8>)
 80010be:	4623      	mov	r3, r4
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4423      	add	r3, r4
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	3302      	adds	r3, #2
 80010ca:	460a      	mov	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][3] = R3_IN;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <Key_Read+0xe0>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461c      	mov	r4, r3
 80010d4:	2108      	movs	r1, #8
 80010d6:	481b      	ldr	r0, [pc, #108]	; (8001144 <Key_Read+0xe4>)
 80010d8:	f003 feb4 	bl	8004e44 <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	4619      	mov	r1, r3
 80010e0:	4a19      	ldr	r2, [pc, #100]	; (8001148 <Key_Read+0xe8>)
 80010e2:	4623      	mov	r3, r4
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4423      	add	r3, r4
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	3303      	adds	r3, #3
 80010ee:	460a      	mov	r2, r1
 80010f0:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][4] = R4_IN;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <Key_Read+0xe0>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461c      	mov	r4, r3
 80010f8:	2110      	movs	r1, #16
 80010fa:	4812      	ldr	r0, [pc, #72]	; (8001144 <Key_Read+0xe4>)
 80010fc:	f003 fea2 	bl	8004e44 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	4619      	mov	r1, r3
 8001104:	4a10      	ldr	r2, [pc, #64]	; (8001148 <Key_Read+0xe8>)
 8001106:	4623      	mov	r3, r4
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4423      	add	r3, r4
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	3304      	adds	r3, #4
 8001112:	460a      	mov	r2, r1
 8001114:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][5] = R5_IN;
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <Key_Read+0xe0>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461c      	mov	r4, r3
 800111c:	2120      	movs	r1, #32
 800111e:	4809      	ldr	r0, [pc, #36]	; (8001144 <Key_Read+0xe4>)
 8001120:	f003 fe90 	bl	8004e44 <HAL_GPIO_ReadPin>
 8001124:	4603      	mov	r3, r0
 8001126:	4619      	mov	r1, r3
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <Key_Read+0xe8>)
 800112a:	4623      	mov	r3, r4
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4423      	add	r3, r4
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	3305      	adds	r3, #5
 8001136:	460a      	mov	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	bd98      	pop	{r3, r4, r7, pc}
 800113e:	bf00      	nop
 8001140:	20006c1c 	.word	0x20006c1c
 8001144:	40020c00 	.word	0x40020c00
 8001148:	200003e4 	.word	0x200003e4

0800114c <key_filter_all>:

static void key_filter_all()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	e013      	b.n	8001180 <key_filter_all+0x34>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 8001158:	2300      	movs	r3, #0
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	e00a      	b.n	8001174 <key_filter_all+0x28>
			key_filter(x, y);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f811 	bl	8001190 <key_filter>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	2b05      	cmp	r3, #5
 8001178:	ddf1      	ble.n	800115e <key_filter_all+0x12>
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3301      	adds	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b05      	cmp	r3, #5
 8001184:	dde8      	ble.n	8001158 <key_filter_all+0xc>
		}
	}
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <key_filter>:

static void key_filter(uint8_t x, uint8_t y)
{
 8001190:	b490      	push	{r4, r7}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]
	if(key_input_mask[x][y])
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	79b9      	ldrb	r1, [r7, #6]
 80011a4:	483e      	ldr	r0, [pc, #248]	; (80012a0 <key_filter+0x110>)
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4403      	add	r3, r0
 80011b0:	440b      	add	r3, r1
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d01b      	beq.n	80011f0 <key_filter+0x60>
	{
		key_sence_count[x][y]= key_sence_count[x][y]>=KEY_SENCE ? KEY_SENCE : key_sence_count[x][y]+1;
 80011b8:	79fa      	ldrb	r2, [r7, #7]
 80011ba:	79b9      	ldrb	r1, [r7, #6]
 80011bc:	4839      	ldr	r0, [pc, #228]	; (80012a4 <key_filter+0x114>)
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4403      	add	r3, r0
 80011c8:	440b      	add	r3, r1
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	bf28      	it	cs
 80011d0:	2304      	movcs	r3, #4
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	79b9      	ldrb	r1, [r7, #6]
 80011d8:	3301      	adds	r3, #1
 80011da:	b2dc      	uxtb	r4, r3
 80011dc:	4831      	ldr	r0, [pc, #196]	; (80012a4 <key_filter+0x114>)
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4403      	add	r3, r0
 80011e8:	440b      	add	r3, r1
 80011ea:	4622      	mov	r2, r4
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e024      	b.n	800123a <key_filter+0xaa>
	}
	else{
		key_sence_count[x][y]= key_sence_count[x][y]<=0 ? 0 : key_sence_count[x][y]-1;
 80011f0:	79fa      	ldrb	r2, [r7, #7]
 80011f2:	79b9      	ldrb	r1, [r7, #6]
 80011f4:	482b      	ldr	r0, [pc, #172]	; (80012a4 <key_filter+0x114>)
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4403      	add	r3, r0
 8001200:	440b      	add	r3, r1
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00c      	beq.n	8001222 <key_filter+0x92>
 8001208:	79fa      	ldrb	r2, [r7, #7]
 800120a:	79b9      	ldrb	r1, [r7, #6]
 800120c:	4825      	ldr	r0, [pc, #148]	; (80012a4 <key_filter+0x114>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4403      	add	r3, r0
 8001218:	440b      	add	r3, r1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	b2d8      	uxtb	r0, r3
 8001220:	e000      	b.n	8001224 <key_filter+0x94>
 8001222:	2000      	movs	r0, #0
 8001224:	79fa      	ldrb	r2, [r7, #7]
 8001226:	79b9      	ldrb	r1, [r7, #6]
 8001228:	4c1e      	ldr	r4, [pc, #120]	; (80012a4 <key_filter+0x114>)
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4423      	add	r3, r4
 8001234:	440b      	add	r3, r1
 8001236:	4602      	mov	r2, r0
 8001238:	701a      	strb	r2, [r3, #0]
	}
	if(key_sence_count[x][y]==KEY_SENCE)key_input_filtered_mask[x][y] = 1;
 800123a:	79fa      	ldrb	r2, [r7, #7]
 800123c:	79b9      	ldrb	r1, [r7, #6]
 800123e:	4819      	ldr	r0, [pc, #100]	; (80012a4 <key_filter+0x114>)
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4403      	add	r3, r0
 800124a:	440b      	add	r3, r1
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b05      	cmp	r3, #5
 8001250:	d10a      	bne.n	8001268 <key_filter+0xd8>
 8001252:	79fa      	ldrb	r2, [r7, #7]
 8001254:	79b9      	ldrb	r1, [r7, #6]
 8001256:	4814      	ldr	r0, [pc, #80]	; (80012a8 <key_filter+0x118>)
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4403      	add	r3, r0
 8001262:	440b      	add	r3, r1
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
	if(key_sence_count[x][y]==0)key_input_filtered_mask[x][y] = 0;
 8001268:	79fa      	ldrb	r2, [r7, #7]
 800126a:	79b9      	ldrb	r1, [r7, #6]
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <key_filter+0x114>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4403      	add	r3, r0
 8001278:	440b      	add	r3, r1
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10a      	bne.n	8001296 <key_filter+0x106>
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	79b9      	ldrb	r1, [r7, #6]
 8001284:	4808      	ldr	r0, [pc, #32]	; (80012a8 <key_filter+0x118>)
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4403      	add	r3, r0
 8001290:	440b      	add	r3, r1
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bc90      	pop	{r4, r7}
 800129e:	4770      	bx	lr
 80012a0:	200003e4 	.word	0x200003e4
 80012a4:	20000450 	.word	0x20000450
 80012a8:	20000408 	.word	0x20000408

080012ac <GetPositiveFront>:

static void GetPositiveFront()
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	e047      	b.n	8001348 <GetPositiveFront+0x9c>
		for (int row = 0; row < ROWS_COUNT; ++row) {
 80012b8:	2300      	movs	r3, #0
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	e03e      	b.n	800133c <GetPositiveFront+0x90>
			positive_fronts[col][row] = key_input_filtered_mask[col][row]==1 && key_input_old_mask[col][row]==0 ? 1:0;
 80012be:	4927      	ldr	r1, [pc, #156]	; (800135c <GetPositiveFront+0xb0>)
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	18ca      	adds	r2, r1, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d10d      	bne.n	80012f2 <GetPositiveFront+0x46>
 80012d6:	4922      	ldr	r1, [pc, #136]	; (8001360 <GetPositiveFront+0xb4>)
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	18ca      	adds	r2, r1, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <GetPositiveFront+0x46>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <GetPositiveFront+0x48>
 80012f2:	2300      	movs	r3, #0
 80012f4:	b2d8      	uxtb	r0, r3
 80012f6:	491b      	ldr	r1, [pc, #108]	; (8001364 <GetPositiveFront+0xb8>)
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	18ca      	adds	r2, r1, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4602      	mov	r2, r0
 800130a:	701a      	strb	r2, [r3, #0]
			key_input_old_mask[col][row] = key_input_filtered_mask[col][row];
 800130c:	4913      	ldr	r1, [pc, #76]	; (800135c <GetPositiveFront+0xb0>)
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	18ca      	adds	r2, r1, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	4413      	add	r3, r2
 800131e:	7818      	ldrb	r0, [r3, #0]
 8001320:	490f      	ldr	r1, [pc, #60]	; (8001360 <GetPositiveFront+0xb4>)
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	18ca      	adds	r2, r1, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	4413      	add	r3, r2
 8001332:	4602      	mov	r2, r0
 8001334:	701a      	strb	r2, [r3, #0]
		for (int row = 0; row < ROWS_COUNT; ++row) {
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	2b05      	cmp	r3, #5
 8001340:	ddbd      	ble.n	80012be <GetPositiveFront+0x12>
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3301      	adds	r3, #1
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b05      	cmp	r3, #5
 800134c:	ddb4      	ble.n	80012b8 <GetPositiveFront+0xc>
		}
	}
}
 800134e:	bf00      	nop
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	20000408 	.word	0x20000408
 8001360:	2000042c 	.word	0x2000042c
 8001364:	20000474 	.word	0x20000474

08001368 <PrintSymbol>:

static void PrintSymbol(const char *str)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	counter++;
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <PrintSymbol+0x7c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <PrintSymbol+0x7c>)
 8001378:	6013      	str	r3, [r2, #0]
	sprintf(lcd[row_pointer], "%s  %d",str,counter);
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <PrintSymbol+0x80>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4a18      	ldr	r2, [pc, #96]	; (80013ec <PrintSymbol+0x84>)
 800138a:	1898      	adds	r0, r3, r2
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <PrintSymbol+0x7c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4917      	ldr	r1, [pc, #92]	; (80013f0 <PrintSymbol+0x88>)
 8001394:	f017 f9e2 	bl	801875c <siprintf>
	row_pointer = row_pointer>=3 ? 0 : row_pointer++;
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <PrintSymbol+0x80>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d806      	bhi.n	80013ae <PrintSymbol+0x46>
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <PrintSymbol+0x80>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	b2d1      	uxtb	r1, r2
 80013a8:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <PrintSymbol+0x80>)
 80013aa:	7011      	strb	r1, [r2, #0]
 80013ac:	e000      	b.n	80013b0 <PrintSymbol+0x48>
 80013ae:	2300      	movs	r3, #0
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <PrintSymbol+0x80>)
 80013b2:	7013      	strb	r3, [r2, #0]
	sendStr(lcd[0], 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <PrintSymbol+0x84>)
 80013ba:	f000 f8f5 	bl	80015a8 <sendStr>
	sendStr(lcd[1], 1, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2101      	movs	r1, #1
 80013c2:	480c      	ldr	r0, [pc, #48]	; (80013f4 <PrintSymbol+0x8c>)
 80013c4:	f000 f8f0 	bl	80015a8 <sendStr>
	sendStr(lcd[2], 2, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2102      	movs	r1, #2
 80013cc:	480a      	ldr	r0, [pc, #40]	; (80013f8 <PrintSymbol+0x90>)
 80013ce:	f000 f8eb 	bl	80015a8 <sendStr>
	sendStr(lcd[3], 3, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2103      	movs	r1, #3
 80013d6:	4809      	ldr	r0, [pc, #36]	; (80013fc <PrintSymbol+0x94>)
 80013d8:	f000 f8e6 	bl	80015a8 <sendStr>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2000049c 	.word	0x2000049c
 80013e8:	20000498 	.word	0x20000498
 80013ec:	20006adc 	.word	0x20006adc
 80013f0:	08019774 	.word	0x08019774
 80013f4:	20006b2c 	.word	0x20006b2c
 80013f8:	20006b7c 	.word	0x20006b7c
 80013fc:	20006bcc 	.word	0x20006bcc

08001400 <lcd_init>:


static void sendByte(uint8_t byte, int isData);

void lcd_init()
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCDLED_GPIO_Port, LCDLED_Pin, SET);// Включаем подсветку
 8001404:	2201      	movs	r2, #1
 8001406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800140a:	481f      	ldr	r0, [pc, #124]	; (8001488 <lcd_init+0x88>)
 800140c:	f003 fd32 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDR_GPIO_Port, LCDR_Pin, RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2110      	movs	r1, #16
 8001414:	481c      	ldr	r0, [pc, #112]	; (8001488 <lcd_init+0x88>)
 8001416:	f003 fd2d 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 800141a:	200f      	movs	r0, #15
 800141c:	f001 fcc8 	bl	8002db0 <HAL_Delay>

	sendByte(0x33, 0); // шлем в одном байте два 0011
 8001420:	2100      	movs	r1, #0
 8001422:	2033      	movs	r0, #51	; 0x33
 8001424:	f000 f832 	bl	800148c <sendByte>
	HAL_Delay(1);
 8001428:	2001      	movs	r0, #1
 800142a:	f001 fcc1 	bl	8002db0 <HAL_Delay>

	sendByte(0x32, 0); // шлем в одном байте  00110010
 800142e:	2100      	movs	r1, #0
 8001430:	2032      	movs	r0, #50	; 0x32
 8001432:	f000 f82b 	bl	800148c <sendByte>
	HAL_Delay(1);
 8001436:	2001      	movs	r0, #1
 8001438:	f001 fcba 	bl	8002db0 <HAL_Delay>

	sendByte(DATA_BUS_4BIT_PAGE0, 0); // включаем режим 4 бит
 800143c:	2100      	movs	r1, #0
 800143e:	2028      	movs	r0, #40	; 0x28
 8001440:	f000 f824 	bl	800148c <sendByte>
	HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f001 fcb3 	bl	8002db0 <HAL_Delay>
	sendByte(DISPLAY_OFF, 0); // выключаем дисплей
 800144a:	2100      	movs	r1, #0
 800144c:	2008      	movs	r0, #8
 800144e:	f000 f81d 	bl	800148c <sendByte>
	HAL_Delay(1);
 8001452:	2001      	movs	r0, #1
 8001454:	f001 fcac 	bl	8002db0 <HAL_Delay>
	sendByte(CLEAR_DISPLAY, 0); // очищаем дисплей
 8001458:	2100      	movs	r1, #0
 800145a:	2001      	movs	r0, #1
 800145c:	f000 f816 	bl	800148c <sendByte>
	HAL_Delay(2);
 8001460:	2002      	movs	r0, #2
 8001462:	f001 fca5 	bl	8002db0 <HAL_Delay>
	sendByte(ENTRY_MODE_SET, 0); //ставим режим смещение курсора экран не смещается
 8001466:	2100      	movs	r1, #0
 8001468:	2006      	movs	r0, #6
 800146a:	f000 f80f 	bl	800148c <sendByte>
	HAL_Delay(1);
 800146e:	2001      	movs	r0, #1
 8001470:	f001 fc9e 	bl	8002db0 <HAL_Delay>
	sendByte(DISPLAY_ON, 0);// включаем дисплей и убираем курсор
 8001474:	2100      	movs	r1, #0
 8001476:	200c      	movs	r0, #12
 8001478:	f000 f808 	bl	800148c <sendByte>
	HAL_Delay(1);
 800147c:	2001      	movs	r0, #1
 800147e:	f001 fc97 	bl	8002db0 <HAL_Delay>



}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40020400 	.word	0x40020400

0800148c <sendByte>:

static void sendByte(uint8_t byte, int isData)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD_PIN_MASK, RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	216f      	movs	r1, #111	; 0x6f
 800149c:	4841      	ldr	r0, [pc, #260]	; (80015a4 <sendByte+0x118>)
 800149e:	f003 fce9 	bl	8004e74 <HAL_GPIO_WritePin>

	if(isData == 1) HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, SET); // если данные ставмим A
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <sendByte+0x28>
 80014a8:	2201      	movs	r2, #1
 80014aa:	2140      	movs	r1, #64	; 0x40
 80014ac:	483d      	ldr	r0, [pc, #244]	; (80015a4 <sendByte+0x118>)
 80014ae:	f003 fce1 	bl	8004e74 <HAL_GPIO_WritePin>
 80014b2:	e004      	b.n	80014be <sendByte+0x32>
	else HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, RESET);		   // иначе скидываем A
 80014b4:	2200      	movs	r2, #0
 80014b6:	2140      	movs	r1, #64	; 0x40
 80014b8:	483a      	ldr	r0, [pc, #232]	; (80015a4 <sendByte+0x118>)
 80014ba:	f003 fcdb 	bl	8004e74 <HAL_GPIO_WritePin>

	// ставим старшую тетраду на порт
	if(byte & 0x80) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	da04      	bge.n	80014d0 <sendByte+0x44>
 80014c6:	2201      	movs	r2, #1
 80014c8:	2108      	movs	r1, #8
 80014ca:	4836      	ldr	r0, [pc, #216]	; (80015a4 <sendByte+0x118>)
 80014cc:	f003 fcd2 	bl	8004e74 <HAL_GPIO_WritePin>
	if(byte & 0x40) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <sendByte+0x58>
 80014da:	2201      	movs	r2, #1
 80014dc:	2104      	movs	r1, #4
 80014de:	4831      	ldr	r0, [pc, #196]	; (80015a4 <sendByte+0x118>)
 80014e0:	f003 fcc8 	bl	8004e74 <HAL_GPIO_WritePin>
	if(byte & 0x20) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 0320 	and.w	r3, r3, #32
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d004      	beq.n	80014f8 <sendByte+0x6c>
 80014ee:	2201      	movs	r2, #1
 80014f0:	2102      	movs	r1, #2
 80014f2:	482c      	ldr	r0, [pc, #176]	; (80015a4 <sendByte+0x118>)
 80014f4:	f003 fcbe 	bl	8004e74 <HAL_GPIO_WritePin>
	if(byte & 0x10) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d004      	beq.n	800150c <sendByte+0x80>
 8001502:	2201      	movs	r2, #1
 8001504:	2101      	movs	r1, #1
 8001506:	4827      	ldr	r0, [pc, #156]	; (80015a4 <sendByte+0x118>)
 8001508:	f003 fcb4 	bl	8004e74 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 800150c:	2201      	movs	r2, #1
 800150e:	2120      	movs	r1, #32
 8001510:	4824      	ldr	r0, [pc, #144]	; (80015a4 <sendByte+0x118>)
 8001512:	f003 fcaf 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001516:	2001      	movs	r0, #1
 8001518:	f001 fc4a 	bl	8002db0 <HAL_Delay>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 800151c:	2200      	movs	r2, #0
 800151e:	2120      	movs	r1, #32
 8001520:	4820      	ldr	r0, [pc, #128]	; (80015a4 <sendByte+0x118>)
 8001522:	f003 fca7 	bl	8004e74 <HAL_GPIO_WritePin>

	//обнуляем все пины дисплея кроме RS
	HAL_GPIO_WritePin(LCD0_GPIO_Port, (LCD_PIN_MASK & ~LCDA_Pin), RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	212f      	movs	r1, #47	; 0x2f
 800152a:	481e      	ldr	r0, [pc, #120]	; (80015a4 <sendByte+0x118>)
 800152c:	f003 fca2 	bl	8004e74 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8001530:	2201      	movs	r2, #1
 8001532:	2120      	movs	r1, #32
 8001534:	481b      	ldr	r0, [pc, #108]	; (80015a4 <sendByte+0x118>)
 8001536:	f003 fc9d 	bl	8004e74 <HAL_GPIO_WritePin>
	if(byte & 0x08) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	2b00      	cmp	r3, #0
 8001542:	d004      	beq.n	800154e <sendByte+0xc2>
 8001544:	2201      	movs	r2, #1
 8001546:	2108      	movs	r1, #8
 8001548:	4816      	ldr	r0, [pc, #88]	; (80015a4 <sendByte+0x118>)
 800154a:	f003 fc93 	bl	8004e74 <HAL_GPIO_WritePin>
	if(byte & 0x04) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d004      	beq.n	8001562 <sendByte+0xd6>
 8001558:	2201      	movs	r2, #1
 800155a:	2104      	movs	r1, #4
 800155c:	4811      	ldr	r0, [pc, #68]	; (80015a4 <sendByte+0x118>)
 800155e:	f003 fc89 	bl	8004e74 <HAL_GPIO_WritePin>
	if(byte & 0x02) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d004      	beq.n	8001576 <sendByte+0xea>
 800156c:	2201      	movs	r2, #1
 800156e:	2102      	movs	r1, #2
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <sendByte+0x118>)
 8001572:	f003 fc7f 	bl	8004e74 <HAL_GPIO_WritePin>
	if(byte & 0x01) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d004      	beq.n	800158a <sendByte+0xfe>
 8001580:	2201      	movs	r2, #1
 8001582:	2101      	movs	r1, #1
 8001584:	4807      	ldr	r0, [pc, #28]	; (80015a4 <sendByte+0x118>)
 8001586:	f003 fc75 	bl	8004e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 800158a:	2200      	movs	r2, #0
 800158c:	2120      	movs	r1, #32
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <sendByte+0x118>)
 8001590:	f003 fc70 	bl	8004e74 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8001594:	2001      	movs	r0, #1
 8001596:	f001 fc0b 	bl	8002db0 <HAL_Delay>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020400 	.word	0x40020400

080015a8 <sendStr>:


void sendStr( char *str, int row , int position )
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d817      	bhi.n	80015ec <sendStr+0x44>
 80015bc:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <sendStr+0x1c>)
 80015be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c2:	bf00      	nop
 80015c4:	080015d5 	.word	0x080015d5
 80015c8:	080015db 	.word	0x080015db
 80015cc:	080015e1 	.word	0x080015e1
 80015d0:	080015e7 	.word	0x080015e7

	switch (row)
	{

		case 1:
			start_address = 0x0; // 1 строка
 80015d4:	2300      	movs	r3, #0
 80015d6:	75fb      	strb	r3, [r7, #23]
			break;
 80015d8:	e008      	b.n	80015ec <sendStr+0x44>

		case 2:
			start_address = 0x40; // 2 строка
 80015da:	2340      	movs	r3, #64	; 0x40
 80015dc:	75fb      	strb	r3, [r7, #23]
			break;
 80015de:	e005      	b.n	80015ec <sendStr+0x44>

		case 3:
			start_address = 0x14; // 3 строка
 80015e0:	2314      	movs	r3, #20
 80015e2:	75fb      	strb	r3, [r7, #23]
			break;
 80015e4:	e002      	b.n	80015ec <sendStr+0x44>

		case 4:
			start_address = 0x54; // 4 строка
 80015e6:	2354      	movs	r3, #84	; 0x54
 80015e8:	75fb      	strb	r3, [r7, #23]
			break;
 80015ea:	bf00      	nop

	}

	start_address += position; // к началу строки прибавляем позицию в строке
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
 80015f2:	4413      	add	r3, r2
 80015f4:	75fb      	strb	r3, [r7, #23]

	sendByte((start_address |= SET_DDRAM_ADDRESS), 0); // ставим курсор на начало нужной строки  в DDRAM
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015fc:	75fb      	strb	r3, [r7, #23]
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff42 	bl	800148c <sendByte>

	HAL_Delay(4);
 8001608:	2004      	movs	r0, #4
 800160a:	f001 fbd1 	bl	8002db0 <HAL_Delay>
	while(*str != '\0'){
 800160e:	e008      	b.n	8001622 <sendStr+0x7a>

		sendByte(*str, 1);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff38 	bl	800148c <sendByte>
		str++;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3301      	adds	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
	while(*str != '\0'){
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f2      	bne.n	8001610 <sendStr+0x68>
	}
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001634:	b5b0      	push	{r4, r5, r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ModbusInit();
 800163a:	f000 fa6b 	bl	8001b14 <ModbusInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f001 fb75 	bl	8002d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f833 	bl	80016ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001646:	f000 f91d 	bl	8001884 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800164a:	f000 f89f 	bl	800178c <MX_USART1_UART_Init>
  MX_DMA_Init();
 800164e:	f000 f8f1 	bl	8001834 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8001652:	f000 f8c5 	bl	80017e0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001656:	f7ff fed3 	bl	8001400 <lcd_init>
  ethernet_reset();
 800165a:	f7ff fa5f 	bl	8000b1c <ethernet_reset>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of writeMemorySemaphore */
  osSemaphoreDef(writeMemorySemaphore);
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  writeMemorySemaphoreHandle = osSemaphoreCreate(osSemaphore(writeMemorySemaphore), 1);
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	2101      	movs	r1, #1
 800166c:	4618      	mov	r0, r3
 800166e:	f006 fb8b 	bl	8007d88 <osSemaphoreCreate>
 8001672:	4603      	mov	r3, r0
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <main+0x6c>)
 8001676:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <main+0x70>)
 800167a:	1d3c      	adds	r4, r7, #4
 800167c:	461d      	mov	r5, r3
 800167e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f006 fa7d 	bl	8007b8e <osThreadCreate>
 8001694:	4603      	mov	r3, r0
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <main+0x74>)
 8001698:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800169a:	f006 fa61 	bl	8007b60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800169e:	e7fe      	b.n	800169e <main+0x6a>
 80016a0:	20006d28 	.word	0x20006d28
 80016a4:	08019788 	.word	0x08019788
 80016a8:	20006c20 	.word	0x20006c20

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b094      	sub	sp, #80	; 0x50
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	2230      	movs	r2, #48	; 0x30
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f016 feca 	bl	8018454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <SystemClock_Config+0xd8>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a2a      	ldr	r2, [pc, #168]	; (8001784 <SystemClock_Config+0xd8>)
 80016da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <SystemClock_Config+0xd8>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <SystemClock_Config+0xdc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a24      	ldr	r2, [pc, #144]	; (8001788 <SystemClock_Config+0xdc>)
 80016f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <SystemClock_Config+0xdc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001708:	2301      	movs	r3, #1
 800170a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800170c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001712:	2302      	movs	r3, #2
 8001714:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800171a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800171c:	2319      	movs	r3, #25
 800171e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001720:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001726:	2302      	movs	r3, #2
 8001728:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800172a:	2304      	movs	r3, #4
 800172c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fbb8 	bl	8004ea8 <HAL_RCC_OscConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800173e:	f000 f9db 	bl	8001af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001742:	230f      	movs	r3, #15
 8001744:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001746:	2302      	movs	r3, #2
 8001748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800174e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	2105      	movs	r1, #5
 8001760:	4618      	mov	r0, r3
 8001762:	f003 fe19 	bl	8005398 <HAL_RCC_ClockConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800176c:	f000 f9c4 	bl	8001af8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001776:	2000      	movs	r0, #0
 8001778:	f003 fef4 	bl	8005564 <HAL_RCC_MCOConfig>
}
 800177c:	bf00      	nop
 800177e:	3750      	adds	r7, #80	; 0x50
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40023800 	.word	0x40023800
 8001788:	40007000 	.word	0x40007000

0800178c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_USART1_UART_Init+0x50>)
 8001794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 8001798:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800179c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 80017c4:	f004 fb00 	bl	8005dc8 <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ce:	f000 f993 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20006ce4 	.word	0x20006ce4
 80017dc:	40011000 	.word	0x40011000

080017e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_USART6_UART_Init+0x4c>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <MX_USART6_UART_Init+0x50>)
 80017e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <MX_USART6_UART_Init+0x4c>)
 80017ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_USART6_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_USART6_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_USART6_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_USART6_UART_Init+0x4c>)
 8001806:	220c      	movs	r2, #12
 8001808:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_USART6_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_USART6_UART_Init+0x4c>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_USART6_UART_Init+0x4c>)
 8001818:	f004 fad6 	bl	8005dc8 <HAL_UART_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001822:	f000 f969 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20006d2c 	.word	0x20006d2c
 8001830:	40011400 	.word	0x40011400

08001834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <MX_DMA_Init+0x4c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <MX_DMA_Init+0x4c>)
 8001844:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <MX_DMA_Init+0x4c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2105      	movs	r1, #5
 800185a:	2039      	movs	r0, #57	; 0x39
 800185c:	f001 fb84 	bl	8002f68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001860:	2039      	movs	r0, #57	; 0x39
 8001862:	f001 fb9d 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2105      	movs	r1, #5
 800186a:	203a      	movs	r0, #58	; 0x3a
 800186c:	f001 fb7c 	bl	8002f68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001870:	203a      	movs	r0, #58	; 0x3a
 8001872:	f001 fb95 	bl	8002fa0 <HAL_NVIC_EnableIRQ>

}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800

08001884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08c      	sub	sp, #48	; 0x30
 8001888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	4b80      	ldr	r3, [pc, #512]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a7f      	ldr	r2, [pc, #508]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 80018a4:	f043 0310 	orr.w	r3, r3, #16
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b7d      	ldr	r3, [pc, #500]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	4b79      	ldr	r3, [pc, #484]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a78      	ldr	r2, [pc, #480]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b76      	ldr	r3, [pc, #472]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b72      	ldr	r3, [pc, #456]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a71      	ldr	r2, [pc, #452]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 80018dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b6f      	ldr	r3, [pc, #444]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b6b      	ldr	r3, [pc, #428]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a6a      	ldr	r2, [pc, #424]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b68      	ldr	r3, [pc, #416]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	4b64      	ldr	r3, [pc, #400]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a63      	ldr	r2, [pc, #396]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a5c      	ldr	r2, [pc, #368]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b5a      	ldr	r3, [pc, #360]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2101      	movs	r1, #1
 8001946:	4857      	ldr	r0, [pc, #348]	; (8001aa4 <MX_GPIO_Init+0x220>)
 8001948:	f003 fa94 	bl	8004e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 800194c:	2200      	movs	r2, #0
 800194e:	f24c 417f 	movw	r1, #50303	; 0xc47f
 8001952:	4855      	ldr	r0, [pc, #340]	; (8001aa8 <MX_GPIO_Init+0x224>)
 8001954:	f003 fa8e 	bl	8004e74 <HAL_GPIO_WritePin>
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8001958:	2200      	movs	r2, #0
 800195a:	f64f 7180 	movw	r1, #65408	; 0xff80
 800195e:	4853      	ldr	r0, [pc, #332]	; (8001aac <MX_GPIO_Init+0x228>)
 8001960:	f003 fa88 	bl	8004e74 <HAL_GPIO_WritePin>
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800196a:	4851      	ldr	r0, [pc, #324]	; (8001ab0 <MX_GPIO_Init+0x22c>)
 800196c:	f003 fa82 	bl	8004e74 <HAL_GPIO_WritePin>
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001976:	484f      	ldr	r0, [pc, #316]	; (8001ab4 <MX_GPIO_Init+0x230>)
 8001978:	f003 fa7c 	bl	8004e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN_4_Pin DIN_5_Pin DIN_6_Pin DIN_7_Pin
                           DIN_8_Pin DIN_2_Pin DIN_3_Pin */
  GPIO_InitStruct.Pin = DIN_4_Pin|DIN_5_Pin|DIN_6_Pin|DIN_7_Pin
 800197c:	237f      	movs	r3, #127	; 0x7f
 800197e:	61fb      	str	r3, [r7, #28]
                          |DIN_8_Pin|DIN_2_Pin|DIN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001984:	2301      	movs	r3, #1
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	4847      	ldr	r0, [pc, #284]	; (8001aac <MX_GPIO_Init+0x228>)
 8001990:	f003 f8bc 	bl	8004b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_9_Pin DIN_10_Pin DIN_11_Pin */
  GPIO_InitStruct.Pin = DIN_9_Pin|DIN_10_Pin|DIN_11_Pin;
 8001994:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199e:	2301      	movs	r3, #1
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	4842      	ldr	r0, [pc, #264]	; (8001ab4 <MX_GPIO_Init+0x230>)
 80019aa:	f003 f8af 	bl	8004b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ERESET_Pin */
  GPIO_InitStruct.Pin = ERESET_Pin;
 80019ae:	2301      	movs	r3, #1
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ERESET_GPIO_Port, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	4837      	ldr	r0, [pc, #220]	; (8001aa4 <MX_GPIO_Init+0x220>)
 80019c6:	f003 f8a1 	bl	8004b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD0_Pin LCD1_Pin LCD2_Pin DOUT_9_Pin
                           LED_Pin LCDLED_Pin LCD3_Pin LCDR_Pin
                           LCDE_Pin LCDA_Pin */
  GPIO_InitStruct.Pin = LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 80019ca:	f24c 437f 	movw	r3, #50303	; 0xc47f
 80019ce:	61fb      	str	r3, [r7, #28]
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	4619      	mov	r1, r3
 80019e2:	4831      	ldr	r0, [pc, #196]	; (8001aa8 <MX_GPIO_Init+0x224>)
 80019e4:	f003 f892 	bl	8004b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_0_Pin DOUT_1_Pin DOUT_2_Pin DOUT_3_Pin
                           DOUT_4_Pin DOUT_5_Pin DOUT_6_Pin DOUT_7_Pin
                           DOUT_8_Pin */
  GPIO_InitStruct.Pin = DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 80019e8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80019ec:	61fb      	str	r3, [r7, #28]
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	482a      	ldr	r0, [pc, #168]	; (8001aac <MX_GPIO_Init+0x228>)
 8001a02:	f003 f883 	bl	8004b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_10_Pin DOUT_11_Pin KEYB_C0_Pin KEYB_C1_Pin
                           KEYB_C2_Pin KEYB_C3_Pin KEYB_C4_Pin KEYB_C5_Pin */
  GPIO_InitStruct.Pin = DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 8001a06:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001a0a:	61fb      	str	r3, [r7, #28]
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4824      	ldr	r0, [pc, #144]	; (8001ab0 <MX_GPIO_Init+0x22c>)
 8001a20:	f003 f874 	bl	8004b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_TX_Pin */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 8001a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	481d      	ldr	r0, [pc, #116]	; (8001ab4 <MX_GPIO_Init+0x230>)
 8001a3e:	f003 f865 	bl	8004b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4811      	ldr	r0, [pc, #68]	; (8001aa4 <MX_GPIO_Init+0x220>)
 8001a60:	f003 f854 	bl	8004b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYB_R0_Pin KEYB_R1_Pin KEYB_R2_Pin KEYB_R3_Pin
                           KEYB_R4_Pin KEYB_R5_Pin */
  GPIO_InitStruct.Pin = KEYB_R0_Pin|KEYB_R1_Pin|KEYB_R2_Pin|KEYB_R3_Pin
 8001a64:	233f      	movs	r3, #63	; 0x3f
 8001a66:	61fb      	str	r3, [r7, #28]
                          |KEYB_R4_Pin|KEYB_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	480e      	ldr	r0, [pc, #56]	; (8001ab0 <MX_GPIO_Init+0x22c>)
 8001a78:	f003 f848 	bl	8004b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_0_Pin DIN_1_Pin */
  GPIO_InitStruct.Pin = DIN_0_Pin|DIN_1_Pin;
 8001a7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a86:	2301      	movs	r3, #1
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_GPIO_Init+0x224>)
 8001a92:	f003 f83b 	bl	8004b0c <HAL_GPIO_Init>

}
 8001a96:	bf00      	nop
 8001a98:	3730      	adds	r7, #48	; 0x30
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40020c00 	.word	0x40020c00
 8001ab4:	40020800 	.word	0x40020800

08001ab8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001ac0:	f005 fb06 	bl	80070d0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  task_init();
 8001ac4:	f7ff f918 	bl	8000cf8 <task_init>

  /* Infinite loop */
  for(;;)
  {
	main_process();
 8001ac8:	f000 f81b 	bl	8001b02 <main_process>
    osDelay(1);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f006 f8aa 	bl	8007c26 <osDelay>
	main_process();
 8001ad2:	e7f9      	b.n	8001ac8 <StartDefaultTask+0x10>

08001ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ae6:	f001 f943 	bl	8002d70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40010000 	.word	0x40010000

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <Error_Handler+0x8>

08001b02 <main_process>:
 */
#include <string.h>
#include <dio.h>

void main_process()
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0
	Read_Inputs();
 8001b06:	f7fe fd47 	bl	8000598 <Read_Inputs>
	Write_Outputs();
 8001b0a:	f7fe fe91 	bl	8000830 <Write_Outputs>
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <ModbusInit>:
static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source);
static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source);
static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource));

void ModbusInit()
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
	holding_pointer = (uint16_t*)&settings;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <ModbusInit+0x38>)
 8001b1a:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <ModbusInit+0x3c>)
 8001b1c:	601a      	str	r2, [r3, #0]
	reading_pointer = (uint16_t*)&meas_data;
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <ModbusInit+0x40>)
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <ModbusInit+0x44>)
 8001b22:	601a      	str	r2, [r3, #0]
	holding_size = sizeof(settings)/2;
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <ModbusInit+0x48>)
 8001b26:	2237      	movs	r2, #55	; 0x37
 8001b28:	801a      	strh	r2, [r3, #0]
	reading_size = sizeof(meas_data)/2;
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <ModbusInit+0x4c>)
 8001b2c:	222a      	movs	r2, #42	; 0x2a
 8001b2e:	801a      	strh	r2, [r3, #0]
	if(settings.mb_addr==0)settings.mb_addr = 1;
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <ModbusInit+0x3c>)
 8001b32:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d103      	bne.n	8001b42 <ModbusInit+0x2e>
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <ModbusInit+0x3c>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	200004a0 	.word	0x200004a0
 8001b50:	20006d70 	.word	0x20006d70
 8001b54:	200004a4 	.word	0x200004a4
 8001b58:	20006de0 	.word	0x20006de0
 8001b5c:	200004a8 	.word	0x200004a8
 8001b60:	200004aa 	.word	0x200004aa

08001b64 <ModbusParse>:


//Ф-я парсинга входящего буфера, если это Modbus, то возвращает кол-во байт
int ModbusParse(uint8_t *request, uint16_t req_length, uint8_t *answer, ModbusSource source)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	460b      	mov	r3, r1
 8001b72:	817b      	strh	r3, [r7, #10]
 8001b74:	4613      	mov	r3, r2
 8001b76:	727b      	strb	r3, [r7, #9]
	settings.data[37]++;
 8001b78:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <ModbusParse+0xb0>)
 8001b7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001b7e:	3301      	adds	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <ModbusParse+0xb0>)
 8001b84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	if(answer==NULL)return 0; // Проверка, выделилась ли память под ответ
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <ModbusParse+0x2e>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e03c      	b.n	8001c0c <ModbusParse+0xa8>
	if(!CheckRequestLength(request,req_length,source))return 0; // Проверка корректности длины пакета
 8001b92:	897b      	ldrh	r3, [r7, #10]
 8001b94:	7a7a      	ldrb	r2, [r7, #9]
 8001b96:	4619      	mov	r1, r3
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f83d 	bl	8001c18 <CheckRequestLength>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <ModbusParse+0x44>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e031      	b.n	8001c0c <ModbusParse+0xa8>
	if(!CheckMbAddr(request, source))return 0; // Проверка корректности адреса
 8001ba8:	7a7b      	ldrb	r3, [r7, #9]
 8001baa:	4619      	mov	r1, r3
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f857 	bl	8001c60 <CheckMbAddr>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <ModbusParse+0x58>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e027      	b.n	8001c0c <ModbusParse+0xa8>
	if(!IsCorrectMbCommand(request, source))// Проверка корректности функционального кода
 8001bbc:	7a7b      	ldrb	r3, [r7, #9]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 f875 	bl	8001cb0 <IsCorrectMbCommand>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d107      	bne.n	8001bdc <ModbusParse+0x78>
	{
		return SetInvalidCommand(request, answer, 1, source);
 8001bcc:	7a7b      	ldrb	r3, [r7, #9]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 f8a0 	bl	8001d18 <SetInvalidCommand>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	e017      	b.n	8001c0c <ModbusParse+0xa8>
	}
	if(!CheckCrc(request, req_length, source))
 8001bdc:	897b      	ldrh	r3, [r7, #10]
 8001bde:	7a7a      	ldrb	r2, [r7, #9]
 8001be0:	4619      	mov	r1, r3
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f941 	bl	8001e6a <CheckCrc>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d107      	bne.n	8001bfe <ModbusParse+0x9a>
	{
		return SetInvalidCommand(request, answer, 3, source);
 8001bee:	7a7b      	ldrb	r3, [r7, #9]
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f88f 	bl	8001d18 <SetInvalidCommand>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	e006      	b.n	8001c0c <ModbusParse+0xa8>
	}
	return GetModbusAnswer(request, answer, source);
 8001bfe:	7a7b      	ldrb	r3, [r7, #9]
 8001c00:	461a      	mov	r2, r3
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f965 	bl	8001ed4 <GetModbusAnswer>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20006d70 	.word	0x20006d70

08001c18 <CheckRequestLength>:

//Проверка соответствия длины данных, передаваемых в буфере
static uint8_t CheckRequestLength(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	4613      	mov	r3, r2
 8001c24:	71fb      	strb	r3, [r7, #7]
	if(source==RS485)return 1;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <CheckRequestLength+0x18>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e010      	b.n	8001c52 <CheckRequestLength+0x3a>
    int len_from_packet = (*(request_pointer+4))*256 + *(request_pointer+5);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3304      	adds	r3, #4
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	3205      	adds	r2, #5
 8001c3c:	7812      	ldrb	r2, [r2, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	617b      	str	r3, [r7, #20]
    return len_from_packet+6 == request_length;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3306      	adds	r3, #6
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	bf0c      	ite	eq
 8001c4c:	2301      	moveq	r3, #1
 8001c4e:	2300      	movne	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <CheckMbAddr>:

//Проверка соответсия адреса в сети Modbus сервера
static uint8_t CheckMbAddr(uint8_t *request,ModbusSource source)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	70fb      	strb	r3, [r7, #3]
	uint8_t addr = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d103      	bne.n	8001c7e <CheckMbAddr+0x1e>
	{
		addr =  *(request+6);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	799b      	ldrb	r3, [r3, #6]
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	e005      	b.n	8001c8a <CheckMbAddr+0x2a>
	}
	else if(source==RS485)
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <CheckMbAddr+0x2a>
	{
		addr =  *(request);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	73fb      	strb	r3, [r7, #15]
	}
	return addr == settings.mb_addr;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <CheckMbAddr+0x4c>)
 8001c90:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8001c94:	429a      	cmp	r2, r3
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20006d70 	.word	0x20006d70

08001cb0 <IsCorrectMbCommand>:

//Проверка корректности функционального кода
static uint8_t IsCorrectMbCommand(uint8_t *request,ModbusSource source)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d103      	bne.n	8001cce <IsCorrectMbCommand+0x1e>
	{
		cmd = *(request+7);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	79db      	ldrb	r3, [r3, #7]
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e005      	b.n	8001cda <IsCorrectMbCommand+0x2a>
	}
	else if(source==RS485)
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <IsCorrectMbCommand+0x2a>
	{
		cmd = *(request+1);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	785b      	ldrb	r3, [r3, #1]
 8001cd8:	73fb      	strb	r3, [r7, #15]
	}
	/*
	 * Функция возвращает 1, если номер команды корректен, 0 - если некорректен
	 * cmd - номер команды
	 * */
	switch (cmd) {
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2b10      	cmp	r3, #16
 8001cde:	bf8c      	ite	hi
 8001ce0:	2201      	movhi	r2, #1
 8001ce2:	2200      	movls	r2, #0
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	2a00      	cmp	r2, #0
 8001ce8:	d10c      	bne.n	8001d04 <IsCorrectMbCommand+0x54>
 8001cea:	2201      	movs	r2, #1
 8001cec:	409a      	lsls	r2, r3
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <IsCorrectMbCommand+0x64>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	bf14      	ite	ne
 8001cf6:	2301      	movne	r3, #1
 8001cf8:	2300      	moveq	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <IsCorrectMbCommand+0x54>
		case 3:
		case 4:
		case 6:
		//case 5:
        case 16:
            return 1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <IsCorrectMbCommand+0x56>
		default:
			return 0;
 8001d04:	2300      	movs	r3, #0
	}
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	00010058 	.word	0x00010058

08001d18 <SetInvalidCommand>:

//Формирует телеграмму ошиобного запроса
static int SetInvalidCommand(uint8_t *request, uint8_t *answer, uint8_t code, ModbusSource source)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	4611      	mov	r1, r2
 8001d24:	461a      	mov	r2, r3
 8001d26:	460b      	mov	r3, r1
 8001d28:	71fb      	strb	r3, [r7, #7]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	71bb      	strb	r3, [r7, #6]
	uint8_t func_code = source ? *(request+1) : *(request+1);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	785b      	ldrb	r3, [r3, #1]
 8001d32:	75fb      	strb	r3, [r7, #23]
	func_code = set_bit(func_code, 7);
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2107      	movs	r1, #7
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fc14 	bl	8000568 <set_bit>
 8001d40:	4603      	mov	r3, r0
 8001d42:	75fb      	strb	r3, [r7, #23]
	if(source==RS485)
 8001d44:	79bb      	ldrb	r3, [r7, #6]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d11d      	bne.n	8001d86 <SetInvalidCommand+0x6e>
	{
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	82bb      	strh	r3, [r7, #20]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	781a      	ldrb	r2, [r3, #0]
		memcpy(answer,request,1);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	701a      	strb	r2, [r3, #0]
		*(answer+1) = func_code;//Функциональный код с измененным битом
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	7dfa      	ldrb	r2, [r7, #23]
 8001d5c:	701a      	strb	r2, [r3, #0]
		*(answer+2) = code;//Функциональный код с измененным битом
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3302      	adds	r3, #2
 8001d62:	79fa      	ldrb	r2, [r7, #7]
 8001d64:	701a      	strb	r2, [r3, #0]
		CRC16_CALC(answer,check_sum,3);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	68b8      	ldr	r0, [r7, #8]
 8001d70:	f000 f832 	bl	8001dd8 <CRC16_CALC>
		*(answer+3) = check_sum[0];
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	3303      	adds	r3, #3
 8001d78:	7d3a      	ldrb	r2, [r7, #20]
 8001d7a:	701a      	strb	r2, [r3, #0]
		*(answer+4) = check_sum[1];
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	7d7a      	ldrb	r2, [r7, #21]
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e01c      	b.n	8001dc0 <SetInvalidCommand+0xa8>
	}
	else if(source==ETHERNET)
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d119      	bne.n	8001dc0 <SetInvalidCommand+0xa8>
	{
		memcpy(answer,request,8);
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	68f9      	ldr	r1, [r7, #12]
 8001d90:	68b8      	ldr	r0, [r7, #8]
 8001d92:	f016 fb37 	bl	8018404 <memcpy>
		*(answer+4) = 0;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
		*(answer+5) = 3;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3305      	adds	r3, #5
 8001da2:	2203      	movs	r2, #3
 8001da4:	701a      	strb	r2, [r3, #0]
		*(answer+7) |= 128;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	3307      	adds	r3, #7
 8001daa:	781a      	ldrb	r2, [r3, #0]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	3307      	adds	r3, #7
 8001db0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	701a      	strb	r2, [r3, #0]
		*(answer+8) = code;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	3308      	adds	r3, #8
 8001dbc:	79fa      	ldrb	r2, [r7, #7]
 8001dbe:	701a      	strb	r2, [r3, #0]
	}

	uint8_t len = source==RS485 ? 5 : 9;
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <SetInvalidCommand+0xb2>
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	e000      	b.n	8001dcc <SetInvalidCommand+0xb4>
 8001dca:	2309      	movs	r3, #9
 8001dcc:	75bb      	strb	r3, [r7, #22]
	return len;
 8001dce:	7dbb      	ldrb	r3, [r7, #22]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <CRC16_CALC>:

static void CRC16_CALC(uint8_t* arr, uint8_t* checkSum, uint8_t messageLength)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	4613      	mov	r3, r2
 8001de4:	71fb      	strb	r3, [r7, #7]
	/*Функция расчета контрольной суммы
		 * arr - указатель на массив байт, по которым нужно посчитать CRC
		 * checkSum - указатель на массив из 2 байт, куда нужно положить CRC
		 * messageLength - ко-во байт, по которым нужно считать CRC	 *
		 * */
		uint16_t reg = 0xFFFF;
 8001de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dea:	83fb      	strh	r3, [r7, #30]
		uint16_t polinom = 0xA001;
 8001dec:	f24a 0301 	movw	r3, #40961	; 0xa001
 8001df0:	827b      	strh	r3, [r7, #18]
		for(int i=0;i < messageLength;i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	e023      	b.n	8001e40 <CRC16_CALC+0x68>
		{
			reg^=*(arr+i);
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	8bfb      	ldrh	r3, [r7, #30]
 8001e04:	4053      	eors	r3, r2
 8001e06:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e012      	b.n	8001e34 <CRC16_CALC+0x5c>
			{
				if ((reg&1)==1) {
 8001e0e:	8bfb      	ldrh	r3, [r7, #30]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <CRC16_CALC+0x50>
					reg>>=1;
 8001e18:	8bfb      	ldrh	r3, [r7, #30]
 8001e1a:	085b      	lsrs	r3, r3, #1
 8001e1c:	83fb      	strh	r3, [r7, #30]
					reg^=polinom;
 8001e1e:	8bfa      	ldrh	r2, [r7, #30]
 8001e20:	8a7b      	ldrh	r3, [r7, #18]
 8001e22:	4053      	eors	r3, r2
 8001e24:	83fb      	strh	r3, [r7, #30]
 8001e26:	e002      	b.n	8001e2e <CRC16_CALC+0x56>
				}
				else reg>>=1;
 8001e28:	8bfb      	ldrh	r3, [r7, #30]
 8001e2a:	085b      	lsrs	r3, r3, #1
 8001e2c:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b07      	cmp	r3, #7
 8001e38:	dde9      	ble.n	8001e0e <CRC16_CALC+0x36>
		for(int i=0;i < messageLength;i++)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	61bb      	str	r3, [r7, #24]
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dbd7      	blt.n	8001df8 <CRC16_CALC+0x20>
			}
		}
		*(checkSum+1)=(uint8_t)(reg>>8);
 8001e48:	8bfb      	ldrh	r3, [r7, #30]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3301      	adds	r3, #1
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]
		*checkSum = (uint8_t)(reg & 0x00FF);
 8001e56:	8bfb      	ldrh	r3, [r7, #30]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	701a      	strb	r2, [r3, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <CheckCrc>:

//Проверка контрольной суммы запроса
static uint8_t CheckCrc(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	4613      	mov	r3, r2
 8001e76:	71fb      	strb	r3, [r7, #7]
	if(source==ETHERNET)return 1;
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <CheckCrc+0x18>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e024      	b.n	8001ecc <CheckCrc+0x62>
	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8001e82:	2300      	movs	r3, #0
 8001e84:	82bb      	strh	r3, [r7, #20]
	if(request_length<4)return 0;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	dc01      	bgt.n	8001e90 <CheckCrc+0x26>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e01d      	b.n	8001ecc <CheckCrc+0x62>
	CRC16_CALC(request_pointer, check_sum, request_length-2);
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	3b02      	subs	r3, #2
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff ff9a 	bl	8001dd8 <CRC16_CALC>
	return request_pointer[request_length-2]==check_sum[0] && request_pointer[request_length-1]==check_sum[1];
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3b02      	subs	r3, #2
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	7d3b      	ldrb	r3, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d109      	bne.n	8001ec8 <CheckCrc+0x5e>
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	7d7b      	ldrb	r3, [r7, #21]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d101      	bne.n	8001ec8 <CheckCrc+0x5e>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <CheckCrc+0x60>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	b2db      	uxtb	r3, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <GetModbusAnswer>:

//Возвращает кол-во байт, котрые нужно передать обратно
static int GetModbusAnswer(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	71fb      	strb	r3, [r7, #7]
	uint8_t func_code = source==RS485 ? *(request+1) : *(request+7);
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <GetModbusAnswer+0x1a>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	785b      	ldrb	r3, [r3, #1]
 8001eec:	e001      	b.n	8001ef2 <GetModbusAnswer+0x1e>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	79db      	ldrb	r3, [r3, #7]
 8001ef2:	75fb      	strb	r3, [r7, #23]

	switch (func_code) {
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
 8001ef6:	3b03      	subs	r3, #3
 8001ef8:	2b0d      	cmp	r3, #13
 8001efa:	d849      	bhi.n	8001f90 <GetModbusAnswer+0xbc>
 8001efc:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <GetModbusAnswer+0x30>)
 8001efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f02:	bf00      	nop
 8001f04:	08001f3d 	.word	0x08001f3d
 8001f08:	08001f57 	.word	0x08001f57
 8001f0c:	08001f91 	.word	0x08001f91
 8001f10:	08001f71 	.word	0x08001f71
 8001f14:	08001f91 	.word	0x08001f91
 8001f18:	08001f91 	.word	0x08001f91
 8001f1c:	08001f91 	.word	0x08001f91
 8001f20:	08001f91 	.word	0x08001f91
 8001f24:	08001f91 	.word	0x08001f91
 8001f28:	08001f91 	.word	0x08001f91
 8001f2c:	08001f91 	.word	0x08001f91
 8001f30:	08001f91 	.word	0x08001f91
 8001f34:	08001f91 	.word	0x08001f91
 8001f38:	08001f81 	.word	0x08001f81
		case READ_HOLDING_REGS:
			return ReadRegisters(request, answer, holding_pointer, holding_size, source);
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <GetModbusAnswer+0xc8>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <GetModbusAnswer+0xcc>)
 8001f42:	8819      	ldrh	r1, [r3, #0]
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f831 	bl	8001fb4 <ReadRegisters>
 8001f52:	4603      	mov	r3, r0
 8001f54:	e01e      	b.n	8001f94 <GetModbusAnswer+0xc0>
		case READ_INPUT_REGS:
			return ReadRegisters(request, answer, reading_pointer, reading_size, source);
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <GetModbusAnswer+0xd0>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <GetModbusAnswer+0xd4>)
 8001f5c:	8819      	ldrh	r1, [r3, #0]
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	460b      	mov	r3, r1
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f824 	bl	8001fb4 <ReadRegisters>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	e011      	b.n	8001f94 <GetModbusAnswer+0xc0>
		case WRITE_SINGLE_REG:
			return WriteToHoldings(request, answer, source, &WriteSingleRegister);
 8001f70:	79fa      	ldrb	r2, [r7, #7]
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <GetModbusAnswer+0xd8>)
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 f9dc 	bl	8002334 <WriteToHoldings>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	e009      	b.n	8001f94 <GetModbusAnswer+0xc0>
		case WRITE_MULTIPLY_REGS:
			return WriteToHoldings(request, answer, source, &WrieMultiplyRegisters);
 8001f80:	79fa      	ldrb	r2, [r7, #7]
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <GetModbusAnswer+0xdc>)
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f9d4 	bl	8002334 <WriteToHoldings>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	e001      	b.n	8001f94 <GetModbusAnswer+0xc0>
		default:
			break;
 8001f90:	bf00      	nop
	}
	return 0;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200004a0 	.word	0x200004a0
 8001fa0:	200004a8 	.word	0x200004a8
 8001fa4:	200004a4 	.word	0x200004a4
 8001fa8:	200004aa 	.word	0x200004aa
 8001fac:	08002195 	.word	0x08002195
 8001fb0:	08002239 	.word	0x08002239

08001fb4 <ReadRegisters>:

//Ф-я чтения регистров из памяти memory_pointer размером memory_size
static int ReadRegisters(uint8_t *request, uint8_t *answer, uint16_t *memory_pointer, uint16_t memory_size, ModbusSource source)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	807b      	strh	r3, [r7, #2]
	uint16_t  maxAddr = memory_size-1;
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	83fb      	strh	r3, [r7, #30]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8001fc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <ReadRegisters+0x20>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e000      	b.n	8001fd6 <ReadRegisters+0x22>
 8001fd4:	2308      	movs	r3, #8
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f882 	bl	80020e2 <GetWordFromBytes>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	83bb      	strh	r3, [r7, #28]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 8001fe2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <ReadRegisters+0x3a>
 8001fea:	2304      	movs	r3, #4
 8001fec:	e000      	b.n	8001ff0 <ReadRegisters+0x3c>
 8001fee:	230a      	movs	r3, #10
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f875 	bl	80020e2 <GetWordFromBytes>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	837b      	strh	r3, [r7, #26]
	if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8001ffc:	8bba      	ldrh	r2, [r7, #28]
 8001ffe:	8b7b      	ldrh	r3, [r7, #26]
 8002000:	4413      	add	r3, r2
 8002002:	1e5a      	subs	r2, r3, #1
 8002004:	8bfb      	ldrh	r3, [r7, #30]
 8002006:	429a      	cmp	r2, r3
 8002008:	dd08      	ble.n	800201c <ReadRegisters+0x68>
 800200a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800200e:	2202      	movs	r2, #2
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f7ff fe80 	bl	8001d18 <SetInvalidCommand>
 8002018:	4603      	mov	r3, r0
 800201a:	e05e      	b.n	80020da <ReadRegisters+0x126>
	if(source==ETHERNET)
 800201c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002020:	2b01      	cmp	r3, #1
 8002022:	d124      	bne.n	800206e <ReadRegisters+0xba>
	{
		memcpy(answer,request,8);
 8002024:	2208      	movs	r2, #8
 8002026:	68f9      	ldr	r1, [r7, #12]
 8002028:	68b8      	ldr	r0, [r7, #8]
 800202a:	f016 f9eb 	bl	8018404 <memcpy>
		InsertWordToMemory(reg_count*2+3, answer+4);//Длина сообщения
 800202e:	8b7b      	ldrh	r3, [r7, #26]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	3303      	adds	r3, #3
 8002036:	b29a      	uxth	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	3304      	adds	r3, #4
 800203c:	4619      	mov	r1, r3
 800203e:	4610      	mov	r0, r2
 8002040:	f000 f86a 	bl	8002118 <InsertWordToMemory>
		*(answer+8) = reg_count*2;//количесво байт далее
 8002044:	8b7b      	ldrh	r3, [r7, #26]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3308      	adds	r3, #8
 800204c:	0052      	lsls	r2, r2, #1
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+9,reg_count);
 8002052:	8bbb      	ldrh	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	18d0      	adds	r0, r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3309      	adds	r3, #9
 800205e:	8b7a      	ldrh	r2, [r7, #26]
 8002060:	4619      	mov	r1, r3
 8002062:	f000 f869 	bl	8002138 <InsertWordsToMemory>
		return 9+reg_count*2;
 8002066:	8b7b      	ldrh	r3, [r7, #26]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	3309      	adds	r3, #9
 800206c:	e035      	b.n	80020da <ReadRegisters+0x126>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b29a      	uxth	r2, r3
	}
	else
	{
		memcpy(answer,request,2);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	801a      	strh	r2, [r3, #0]
		*(answer+2) = reg_count*2;//количесво байт далее
 8002078:	8b7b      	ldrh	r3, [r7, #26]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	3302      	adds	r3, #2
 8002080:	0052      	lsls	r2, r2, #1
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+3,reg_count);//Данные
 8002086:	8bbb      	ldrh	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	18d0      	adds	r0, r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3303      	adds	r3, #3
 8002092:	8b7a      	ldrh	r2, [r7, #26]
 8002094:	4619      	mov	r1, r3
 8002096:	f000 f84f 	bl	8002138 <InsertWordsToMemory>
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 800209a:	2300      	movs	r3, #0
 800209c:	823b      	strh	r3, [r7, #16]
		CRC16_CALC(answer,check_sum,3+reg_count*2);
 800209e:	8b7b      	ldrh	r3, [r7, #26]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	3303      	adds	r3, #3
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	4619      	mov	r1, r3
 80020b0:	68b8      	ldr	r0, [r7, #8]
 80020b2:	f7ff fe91 	bl	8001dd8 <CRC16_CALC>
		int offset = 3+reg_count*2;
 80020b6:	8b7b      	ldrh	r3, [r7, #26]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	3303      	adds	r3, #3
 80020bc:	617b      	str	r3, [r7, #20]
		*(answer+offset)=check_sum[0];
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	4413      	add	r3, r2
 80020c4:	7c3a      	ldrb	r2, [r7, #16]
 80020c6:	701a      	strb	r2, [r3, #0]
		*(answer+offset+1)=check_sum[1];
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	3301      	adds	r3, #1
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	4413      	add	r3, r2
 80020d0:	7c7a      	ldrb	r2, [r7, #17]
 80020d2:	701a      	strb	r2, [r3, #0]
		return 5+reg_count*2;
 80020d4:	8b7b      	ldrh	r3, [r7, #26]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	3305      	adds	r3, #5

	}
	return 0;
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <GetWordFromBytes>:

static uint16_t GetWordFromBytes(uint8_t *arr, uint8_t pos)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	70fb      	strb	r3, [r7, #3]
	/*Получает 16 битное число из 2x байт, и возвращает его
	 * arr -  указатель на массив байт, из которого нужно получить word
	 * pos - индекс первого байта в массиве
	 *
	 * */
	return (((uint16_t)(*(arr+pos)))<<8) + (uint16_t)(*(arr + pos+1));
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	3301      	adds	r3, #1
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	440b      	add	r3, r1
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	4413      	add	r3, r2
 800210a:	b29b      	uxth	r3, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <InsertWordToMemory>:

static void InsertWordToMemory(uint16_t value, uint8_t* memory)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	80fb      	strh	r3, [r7, #6]
    InsertWordsToMemory(&value,memory,1);
 8002124:	1dbb      	adds	r3, r7, #6
 8002126:	2201      	movs	r2, #1
 8002128:	6839      	ldr	r1, [r7, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f804 	bl	8002138 <InsertWordsToMemory>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <InsertWordsToMemory>:

static void InsertWordsToMemory(uint16_t *source, uint8_t * destination, uint16_t count)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	4613      	mov	r3, r2
 8002144:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
    for(i=0;i<count*2;i+=2)
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e014      	b.n	800217a <InsertWordsToMemory+0x42>
    {
        *(destination+i+1)=*((uint8_t*)source+i);
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	441a      	add	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	440b      	add	r3, r1
 800215e:	7812      	ldrb	r2, [r2, #0]
 8002160:	701a      	strb	r2, [r3, #0]
        *(destination+i)=*((uint8_t*)source+i+1);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3301      	adds	r3, #1
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	441a      	add	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	440b      	add	r3, r1
 8002170:	7812      	ldrb	r2, [r2, #0]
 8002172:	701a      	strb	r2, [r3, #0]
    for(i=0;i<count*2;i+=2)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3302      	adds	r3, #2
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	429a      	cmp	r2, r3
 8002182:	dbe5      	blt.n	8002150 <InsertWordsToMemory+0x18>
    }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <WriteSingleRegister>:


static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	4613      	mov	r3, r2
 80021a0:	71fb      	strb	r3, [r7, #7]
    uint16_t  maxAddr = holding_size-1;
 80021a2:	4b23      	ldr	r3, [pc, #140]	; (8002230 <WriteSingleRegister+0x9c>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	82fb      	strh	r3, [r7, #22]
    uint16_t addr = GetWordFromBytes(request,source==RS485?2:8);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <WriteSingleRegister+0x20>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e000      	b.n	80021b6 <WriteSingleRegister+0x22>
 80021b4:	2308      	movs	r3, #8
 80021b6:	4619      	mov	r1, r3
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff ff92 	bl	80020e2 <GetWordFromBytes>
 80021be:	4603      	mov	r3, r0
 80021c0:	82bb      	strh	r3, [r7, #20]
    if(addr>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 80021c2:	8aba      	ldrh	r2, [r7, #20]
 80021c4:	8afb      	ldrh	r3, [r7, #22]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d907      	bls.n	80021da <WriteSingleRegister+0x46>
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	2202      	movs	r2, #2
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7ff fda1 	bl	8001d18 <SetInvalidCommand>
 80021d6:	4603      	mov	r3, r0
 80021d8:	e026      	b.n	8002228 <WriteSingleRegister+0x94>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d112      	bne.n	8002206 <WriteSingleRegister+0x72>
    {
    	InsertWordsToMemory((uint16_t*)(request+10), ((uint8_t*)holding_pointer)+addr*2,1);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f103 000a 	add.w	r0, r3, #10
 80021e6:	4b13      	ldr	r3, [pc, #76]	; (8002234 <WriteSingleRegister+0xa0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	8aba      	ldrh	r2, [r7, #20]
 80021ec:	0052      	lsls	r2, r2, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	2201      	movs	r2, #1
 80021f2:	4619      	mov	r1, r3
 80021f4:	f7ff ffa0 	bl	8002138 <InsertWordsToMemory>
    	memcpy(answer, request,12);
 80021f8:	220c      	movs	r2, #12
 80021fa:	68f9      	ldr	r1, [r7, #12]
 80021fc:	68b8      	ldr	r0, [r7, #8]
 80021fe:	f016 f901 	bl	8018404 <memcpy>
    	return 12;
 8002202:	230c      	movs	r3, #12
 8002204:	e010      	b.n	8002228 <WriteSingleRegister+0x94>
    }
    else
    {
    	InsertWordsToMemory((uint16_t*)(request+4), ((uint8_t*)holding_pointer)+addr*2,1);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1d18      	adds	r0, r3, #4
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <WriteSingleRegister+0xa0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	8aba      	ldrh	r2, [r7, #20]
 8002210:	0052      	lsls	r2, r2, #1
 8002212:	4413      	add	r3, r2
 8002214:	2201      	movs	r2, #1
 8002216:	4619      	mov	r1, r3
 8002218:	f7ff ff8e 	bl	8002138 <InsertWordsToMemory>
    	memcpy(answer, request,8);
 800221c:	2208      	movs	r2, #8
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	68b8      	ldr	r0, [r7, #8]
 8002222:	f016 f8ef 	bl	8018404 <memcpy>
    	return 8;
 8002226:	2308      	movs	r3, #8
    }
    return 0;
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200004a8 	.word	0x200004a8
 8002234:	200004a0 	.word	0x200004a0

08002238 <WrieMultiplyRegisters>:

static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	4613      	mov	r3, r2
 8002244:	71fb      	strb	r3, [r7, #7]
	uint16_t  maxAddr = holding_size-1;
 8002246:	4b39      	ldr	r3, [pc, #228]	; (800232c <WrieMultiplyRegisters+0xf4>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	3b01      	subs	r3, #1
 800224c:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <WrieMultiplyRegisters+0x20>
 8002254:	2302      	movs	r3, #2
 8002256:	e000      	b.n	800225a <WrieMultiplyRegisters+0x22>
 8002258:	2308      	movs	r3, #8
 800225a:	4619      	mov	r1, r3
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f7ff ff40 	bl	80020e2 <GetWordFromBytes>
 8002262:	4603      	mov	r3, r0
 8002264:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <WrieMultiplyRegisters+0x38>
 800226c:	2304      	movs	r3, #4
 800226e:	e000      	b.n	8002272 <WrieMultiplyRegisters+0x3a>
 8002270:	230a      	movs	r3, #10
 8002272:	4619      	mov	r1, r3
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff ff34 	bl	80020e2 <GetWordFromBytes>
 800227a:	4603      	mov	r3, r0
 800227c:	827b      	strh	r3, [r7, #18]
    if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 800227e:	8aba      	ldrh	r2, [r7, #20]
 8002280:	8a7b      	ldrh	r3, [r7, #18]
 8002282:	4413      	add	r3, r2
 8002284:	1e5a      	subs	r2, r3, #1
 8002286:	8afb      	ldrh	r3, [r7, #22]
 8002288:	429a      	cmp	r2, r3
 800228a:	dd07      	ble.n	800229c <WrieMultiplyRegisters+0x64>
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	2202      	movs	r2, #2
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f7ff fd40 	bl	8001d18 <SetInvalidCommand>
 8002298:	4603      	mov	r3, r0
 800229a:	e042      	b.n	8002322 <WrieMultiplyRegisters+0xea>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d11d      	bne.n	80022de <WrieMultiplyRegisters+0xa6>
    {
    	memcpy(answer, request,12);//сначала повторяющиеся с запросом данные
 80022a2:	220c      	movs	r2, #12
 80022a4:	68f9      	ldr	r1, [r7, #12]
 80022a6:	68b8      	ldr	r0, [r7, #8]
 80022a8:	f016 f8ac 	bl	8018404 <memcpy>
    	InsertWordToMemory(reg_count*2+4, answer+4);//Длина сообщения
 80022ac:	8a7b      	ldrh	r3, [r7, #18]
 80022ae:	3302      	adds	r3, #2
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3304      	adds	r3, #4
 80022ba:	4619      	mov	r1, r3
 80022bc:	4610      	mov	r0, r2
 80022be:	f7ff ff2b 	bl	8002118 <InsertWordToMemory>
    	InsertWordsToMemory((uint16_t*)(request+13), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f103 000d 	add.w	r0, r3, #13
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <WrieMultiplyRegisters+0xf8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	8aba      	ldrh	r2, [r7, #20]
 80022ce:	0052      	lsls	r2, r2, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	8a7a      	ldrh	r2, [r7, #18]
 80022d4:	4619      	mov	r1, r3
 80022d6:	f7ff ff2f 	bl	8002138 <InsertWordsToMemory>
        return 12;
 80022da:	230c      	movs	r3, #12
 80022dc:	e021      	b.n	8002322 <WrieMultiplyRegisters+0xea>
    }
    else
    {
    	memcpy(answer, request,6);//сначала повторяющиеся с запросом данные
 80022de:	2206      	movs	r2, #6
 80022e0:	68f9      	ldr	r1, [r7, #12]
 80022e2:	68b8      	ldr	r0, [r7, #8]
 80022e4:	f016 f88e 	bl	8018404 <memcpy>
    	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 80022e8:	2300      	movs	r3, #0
 80022ea:	823b      	strh	r3, [r7, #16]
    	CRC16_CALC(answer,check_sum,6);
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	2206      	movs	r2, #6
 80022f2:	4619      	mov	r1, r3
 80022f4:	68b8      	ldr	r0, [r7, #8]
 80022f6:	f7ff fd6f 	bl	8001dd8 <CRC16_CALC>
		*(answer+6)=check_sum[0];
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	3306      	adds	r3, #6
 80022fe:	7c3a      	ldrb	r2, [r7, #16]
 8002300:	701a      	strb	r2, [r3, #0]
		*(answer+7)=check_sum[1];
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3307      	adds	r3, #7
 8002306:	7c7a      	ldrb	r2, [r7, #17]
 8002308:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory((uint16_t*)(request+7), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1dd8      	adds	r0, r3, #7
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <WrieMultiplyRegisters+0xf8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	8aba      	ldrh	r2, [r7, #20]
 8002314:	0052      	lsls	r2, r2, #1
 8002316:	4413      	add	r3, r2
 8002318:	8a7a      	ldrh	r2, [r7, #18]
 800231a:	4619      	mov	r1, r3
 800231c:	f7ff ff0c 	bl	8002138 <InsertWordsToMemory>
		return 8;
 8002320:	2308      	movs	r3, #8
    }
    return 0;
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200004a8 	.word	0x200004a8
 8002330:	200004a0 	.word	0x200004a0

08002334 <WriteToHoldings>:

static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource))
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	4613      	mov	r3, r2
 8002342:	71fb      	strb	r3, [r7, #7]
	int result = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
	if(writeMemorySemaphoreHandle!=NULL)
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <WriteToHoldings+0x50>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d014      	beq.n	800237a <WriteToHoldings+0x46>
	{
		if(osSemaphoreWait(writeMemorySemaphoreHandle, 1000)==osOK)
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <WriteToHoldings+0x50>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002358:	4618      	mov	r0, r3
 800235a:	f005 fd47 	bl	8007dec <osSemaphoreWait>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <WriteToHoldings+0x46>
		{
			result =  (*write)(request,answer,source);
 8002364:	79fa      	ldrb	r2, [r7, #7]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	4798      	blx	r3
 800236e:	6178      	str	r0, [r7, #20]
			osSemaphoreRelease(writeMemorySemaphoreHandle);
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <WriteToHoldings+0x50>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f005 fd87 	bl	8007e88 <osSemaphoreRelease>
		}
	}
	return result;
 800237a:	697b      	ldr	r3, [r7, #20]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20006d28 	.word	0x20006d28

08002388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_MspInit+0x54>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a11      	ldr	r2, [pc, #68]	; (80023dc <HAL_MspInit+0x54>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_MspInit+0x54>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_MspInit+0x54>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_MspInit+0x54>)
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_MspInit+0x54>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	210f      	movs	r1, #15
 80023ca:	f06f 0001 	mvn.w	r0, #1
 80023ce:	f000 fdcb 	bl	8002f68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800

080023e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	; 0x30
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 031c 	add.w	r3, r7, #28
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a68      	ldr	r2, [pc, #416]	; (80025a0 <HAL_UART_MspInit+0x1c0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d163      	bne.n	80024ca <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	4b67      	ldr	r3, [pc, #412]	; (80025a4 <HAL_UART_MspInit+0x1c4>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	4a66      	ldr	r2, [pc, #408]	; (80025a4 <HAL_UART_MspInit+0x1c4>)
 800240c:	f043 0310 	orr.w	r3, r3, #16
 8002410:	6453      	str	r3, [r2, #68]	; 0x44
 8002412:	4b64      	ldr	r3, [pc, #400]	; (80025a4 <HAL_UART_MspInit+0x1c4>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	4b60      	ldr	r3, [pc, #384]	; (80025a4 <HAL_UART_MspInit+0x1c4>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a5f      	ldr	r2, [pc, #380]	; (80025a4 <HAL_UART_MspInit+0x1c4>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b5d      	ldr	r3, [pc, #372]	; (80025a4 <HAL_UART_MspInit+0x1c4>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800243a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800243e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800244c:	2307      	movs	r3, #7
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	f107 031c 	add.w	r3, r7, #28
 8002454:	4619      	mov	r1, r3
 8002456:	4854      	ldr	r0, [pc, #336]	; (80025a8 <HAL_UART_MspInit+0x1c8>)
 8002458:	f002 fb58 	bl	8004b0c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800245c:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_UART_MspInit+0x1cc>)
 800245e:	4a54      	ldr	r2, [pc, #336]	; (80025b0 <HAL_UART_MspInit+0x1d0>)
 8002460:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002462:	4b52      	ldr	r3, [pc, #328]	; (80025ac <HAL_UART_MspInit+0x1cc>)
 8002464:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002468:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800246a:	4b50      	ldr	r3, [pc, #320]	; (80025ac <HAL_UART_MspInit+0x1cc>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002470:	4b4e      	ldr	r3, [pc, #312]	; (80025ac <HAL_UART_MspInit+0x1cc>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002476:	4b4d      	ldr	r3, [pc, #308]	; (80025ac <HAL_UART_MspInit+0x1cc>)
 8002478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800247c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800247e:	4b4b      	ldr	r3, [pc, #300]	; (80025ac <HAL_UART_MspInit+0x1cc>)
 8002480:	2200      	movs	r2, #0
 8002482:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002484:	4b49      	ldr	r3, [pc, #292]	; (80025ac <HAL_UART_MspInit+0x1cc>)
 8002486:	2200      	movs	r2, #0
 8002488:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800248a:	4b48      	ldr	r3, [pc, #288]	; (80025ac <HAL_UART_MspInit+0x1cc>)
 800248c:	2200      	movs	r2, #0
 800248e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002490:	4b46      	ldr	r3, [pc, #280]	; (80025ac <HAL_UART_MspInit+0x1cc>)
 8002492:	2200      	movs	r2, #0
 8002494:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002496:	4b45      	ldr	r3, [pc, #276]	; (80025ac <HAL_UART_MspInit+0x1cc>)
 8002498:	2200      	movs	r2, #0
 800249a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800249c:	4843      	ldr	r0, [pc, #268]	; (80025ac <HAL_UART_MspInit+0x1cc>)
 800249e:	f000 fd8d 	bl	8002fbc <HAL_DMA_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80024a8:	f7ff fb26 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a3f      	ldr	r2, [pc, #252]	; (80025ac <HAL_UART_MspInit+0x1cc>)
 80024b0:	639a      	str	r2, [r3, #56]	; 0x38
 80024b2:	4a3e      	ldr	r2, [pc, #248]	; (80025ac <HAL_UART_MspInit+0x1cc>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80024b8:	2200      	movs	r2, #0
 80024ba:	2105      	movs	r1, #5
 80024bc:	2025      	movs	r0, #37	; 0x25
 80024be:	f000 fd53 	bl	8002f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024c2:	2025      	movs	r0, #37	; 0x25
 80024c4:	f000 fd6c 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80024c8:	e066      	b.n	8002598 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a39      	ldr	r2, [pc, #228]	; (80025b4 <HAL_UART_MspInit+0x1d4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d161      	bne.n	8002598 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 80024d4:	2300      	movs	r3, #0
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_UART_MspInit+0x1c4>)
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	4a31      	ldr	r2, [pc, #196]	; (80025a4 <HAL_UART_MspInit+0x1c4>)
 80024de:	f043 0320 	orr.w	r3, r3, #32
 80024e2:	6453      	str	r3, [r2, #68]	; 0x44
 80024e4:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <HAL_UART_MspInit+0x1c4>)
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_UART_MspInit+0x1c4>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	4a2a      	ldr	r2, [pc, #168]	; (80025a4 <HAL_UART_MspInit+0x1c4>)
 80024fa:	f043 0304 	orr.w	r3, r3, #4
 80024fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002500:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <HAL_UART_MspInit+0x1c4>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800250c:	23c0      	movs	r3, #192	; 0xc0
 800250e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	2302      	movs	r3, #2
 8002512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800251c:	2308      	movs	r3, #8
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002520:	f107 031c 	add.w	r3, r7, #28
 8002524:	4619      	mov	r1, r3
 8002526:	4824      	ldr	r0, [pc, #144]	; (80025b8 <HAL_UART_MspInit+0x1d8>)
 8002528:	f002 faf0 	bl	8004b0c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800252c:	4b23      	ldr	r3, [pc, #140]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 800252e:	4a24      	ldr	r2, [pc, #144]	; (80025c0 <HAL_UART_MspInit+0x1e0>)
 8002530:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002532:	4b22      	ldr	r3, [pc, #136]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002534:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002538:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002540:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800254c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800254e:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002550:	2200      	movs	r2, #0
 8002552:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800255a:	4b18      	ldr	r3, [pc, #96]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 800255c:	2200      	movs	r2, #0
 800255e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002560:	4b16      	ldr	r3, [pc, #88]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002562:	2200      	movs	r2, #0
 8002564:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002568:	2200      	movs	r2, #0
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800256c:	4813      	ldr	r0, [pc, #76]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 800256e:	f000 fd25 	bl	8002fbc <HAL_DMA_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8002578:	f7ff fabe 	bl	8001af8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
 8002582:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002588:	2200      	movs	r2, #0
 800258a:	2105      	movs	r1, #5
 800258c:	2047      	movs	r0, #71	; 0x47
 800258e:	f000 fceb 	bl	8002f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002592:	2047      	movs	r0, #71	; 0x47
 8002594:	f000 fd04 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
}
 8002598:	bf00      	nop
 800259a:	3730      	adds	r7, #48	; 0x30
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40011000 	.word	0x40011000
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020000 	.word	0x40020000
 80025ac:	20006c84 	.word	0x20006c84
 80025b0:	40026440 	.word	0x40026440
 80025b4:	40011400 	.word	0x40011400
 80025b8:	40020800 	.word	0x40020800
 80025bc:	20006c24 	.word	0x20006c24
 80025c0:	40026428 	.word	0x40026428

080025c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08c      	sub	sp, #48	; 0x30
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	2019      	movs	r0, #25
 80025da:	f000 fcc5 	bl	8002f68 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025de:	2019      	movs	r0, #25
 80025e0:	f000 fcde 	bl	8002fa0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <HAL_InitTick+0xa4>)
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	4a1e      	ldr	r2, [pc, #120]	; (8002668 <HAL_InitTick+0xa4>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6453      	str	r3, [r2, #68]	; 0x44
 80025f4:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <HAL_InitTick+0xa4>)
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002600:	f107 0210 	add.w	r2, r7, #16
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f003 f8fc 	bl	8005808 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002610:	f003 f8e6 	bl	80057e0 <HAL_RCC_GetPCLK2Freq>
 8002614:	4603      	mov	r3, r0
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	4a13      	ldr	r2, [pc, #76]	; (800266c <HAL_InitTick+0xa8>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	0c9b      	lsrs	r3, r3, #18
 8002624:	3b01      	subs	r3, #1
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_InitTick+0xac>)
 800262a:	4a12      	ldr	r2, [pc, #72]	; (8002674 <HAL_InitTick+0xb0>)
 800262c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <HAL_InitTick+0xac>)
 8002630:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002634:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002636:	4a0e      	ldr	r2, [pc, #56]	; (8002670 <HAL_InitTick+0xac>)
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_InitTick+0xac>)
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_InitTick+0xac>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002648:	4809      	ldr	r0, [pc, #36]	; (8002670 <HAL_InitTick+0xac>)
 800264a:	f003 f90f 	bl	800586c <HAL_TIM_Base_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d104      	bne.n	800265e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002654:	4806      	ldr	r0, [pc, #24]	; (8002670 <HAL_InitTick+0xac>)
 8002656:	f003 f963 	bl	8005920 <HAL_TIM_Base_Start_IT>
 800265a:	4603      	mov	r3, r0
 800265c:	e000      	b.n	8002660 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
}
 8002660:	4618      	mov	r0, r3
 8002662:	3730      	adds	r7, #48	; 0x30
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40023800 	.word	0x40023800
 800266c:	431bde83 	.word	0x431bde83
 8002670:	20006e34 	.word	0x20006e34
 8002674:	40010000 	.word	0x40010000

08002678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800267c:	e7fe      	b.n	800267c <NMI_Handler+0x4>

0800267e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002682:	e7fe      	b.n	8002682 <HardFault_Handler+0x4>

08002684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <MemManage_Handler+0x4>

0800268a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800268e:	e7fe      	b.n	800268e <BusFault_Handler+0x4>

08002690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002694:	e7fe      	b.n	8002694 <UsageFault_Handler+0x4>

08002696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80026aa:	f003 f9a9 	bl	8005a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20006e34 	.word	0x20006e34

080026b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <USART1_IRQHandler+0x10>)
 80026be:	f003 fcc7 	bl	8006050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20006ce4 	.word	0x20006ce4

080026cc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <DMA2_Stream1_IRQHandler+0x10>)
 80026d2:	f000 fe0b 	bl	80032ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20006c24 	.word	0x20006c24

080026e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <DMA2_Stream2_IRQHandler+0x10>)
 80026e6:	f000 fe01 	bl	80032ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20006c84 	.word	0x20006c84

080026f4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <ETH_IRQHandler+0x10>)
 80026fa:	f001 fc45 	bl	8003f88 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20008aa4 	.word	0x20008aa4

08002708 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <USART6_IRQHandler+0x10>)
 800270e:	f003 fc9f 	bl	8006050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20006d2c 	.word	0x20006d2c

0800271c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
	return 1;
 8002720:	2301      	movs	r3, #1
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <_kill>:

int _kill(int pid, int sig)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <_kill+0x20>)
 8002738:	2216      	movs	r2, #22
 800273a:	601a      	str	r2, [r3, #0]
	return -1;
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	2000da30 	.word	0x2000da30

08002750 <_exit>:

void _exit (int status)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002758:	f04f 31ff 	mov.w	r1, #4294967295
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ffe5 	bl	800272c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002762:	e7fe      	b.n	8002762 <_exit+0x12>

08002764 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	e00a      	b.n	800278c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002776:	f3af 8000 	nop.w
 800277a:	4601      	mov	r1, r0
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	60ba      	str	r2, [r7, #8]
 8002782:	b2ca      	uxtb	r2, r1
 8002784:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3301      	adds	r3, #1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	dbf0      	blt.n	8002776 <_read+0x12>
	}

return len;
 8002794:	687b      	ldr	r3, [r7, #4]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e009      	b.n	80027c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	60ba      	str	r2, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	dbf1      	blt.n	80027b0 <_write+0x12>
	}
	return len;
 80027cc:	687b      	ldr	r3, [r7, #4]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_close>:

int _close(int file)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
	return -1;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <_isatty>:

int _isatty(int file)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
	return 1;
 8002816:	2301      	movs	r3, #1
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
	return 0;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <_sbrk+0x5c>)
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <_sbrk+0x60>)
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <_sbrk+0x64>)
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <_sbrk+0x68>)
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	429a      	cmp	r2, r3
 800286e:	d205      	bcs.n	800287c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <_sbrk+0x6c>)
 8002872:	220c      	movs	r2, #12
 8002874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	e009      	b.n	8002890 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <_sbrk+0x64>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <_sbrk+0x64>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	4a06      	ldr	r2, [pc, #24]	; (80028a4 <_sbrk+0x64>)
 800288c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	20020000 	.word	0x20020000
 80028a0:	00000400 	.word	0x00000400
 80028a4:	200004ac 	.word	0x200004ac
 80028a8:	2000da38 	.word	0x2000da38
 80028ac:	2000da30 	.word	0x2000da30

080028b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <SystemInit+0x20>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <SystemInit+0x20>)
 80028bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <uart_thread>:
static void StartReciveUartAll();
static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size);


void uart_thread(void *argument)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	osEvent event;
	Uart_Queue_Struct *queue_arg;
	StartReciveUartAll();
 80028dc:	f000 f82c 	bl	8002938 <StartReciveUartAll>
	while(1)
	{
		event = osMailGet(uart_queue, osWaitForever);
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <uart_thread+0x60>)
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ec:	4618      	mov	r0, r3
 80028ee:	f005 fd9d 	bl	800842c <osMailGet>
		if(event.status == osEventMail)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d1f3      	bne.n	80028e0 <uart_thread+0xc>
		{
			int result = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
			queue_arg = event.value.p;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	61bb      	str	r3, [r7, #24]
			result = RecognizePacket(queue_arg);
 8002900:	69b8      	ldr	r0, [r7, #24]
 8002902:	f000 f8c5 	bl	8002a90 <RecognizePacket>
 8002906:	61f8      	str	r0, [r7, #28]
			if(result)Transmit(queue_arg->huart, queue_arg->output_pointer, result);
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <uart_thread+0x4c>
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	68d8      	ldr	r0, [r3, #12]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	b292      	uxth	r2, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f000 f8ec 	bl	8002af8 <Transmit>
			StartReceive(1);
 8002920:	2001      	movs	r0, #1
 8002922:	f000 f81d 	bl	8002960 <StartReceive>
			osMailFree(uart_queue, queue_arg);
 8002926:	4b03      	ldr	r3, [pc, #12]	; (8002934 <uart_thread+0x60>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69b9      	ldr	r1, [r7, #24]
 800292c:	4618      	mov	r0, r3
 800292e:	f005 fdf1 	bl	8008514 <osMailFree>
		event = osMailGet(uart_queue, osWaitForever);
 8002932:	e7d5      	b.n	80028e0 <uart_thread+0xc>
 8002934:	20006ad8 	.word	0x20006ad8

08002938 <StartReciveUartAll>:
	}
}


static void StartReciveUartAll()
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; ++i) {
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	e005      	b.n	8002950 <StartReciveUartAll+0x18>
		StartReceive(i);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f80b 	bl	8002960 <StartReceive>
	for (int i = 0; i < 2; ++i) {
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3301      	adds	r3, #1
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b01      	cmp	r3, #1
 8002954:	ddf6      	ble.n	8002944 <StartReciveUartAll+0xc>
	}
}
 8002956:	bf00      	nop
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <StartReceive>:


static void StartReceive(int index)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	switch (index) {
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <StartReceive+0x16>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d016      	beq.n	80029a2 <StartReceive+0x42>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
			}
			break;
		default:
			break;
 8002974:	e02e      	b.n	80029d4 <StartReceive+0x74>
			if (huart1.hdmarx->State==HAL_DMA_STATE_READY) {
 8002976:	4b19      	ldr	r3, [pc, #100]	; (80029dc <StartReceive+0x7c>)
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d124      	bne.n	80029ce <StartReceive+0x6e>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_input_buffer[0], UART_INPUT_BUFFER_SZ);
 8002984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002988:	4915      	ldr	r1, [pc, #84]	; (80029e0 <StartReceive+0x80>)
 800298a:	4814      	ldr	r0, [pc, #80]	; (80029dc <StartReceive+0x7c>)
 800298c:	f003 fafb 	bl	8005f86 <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <StartReceive+0x84>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <StartReceive+0x84>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0208 	bic.w	r2, r2, #8
 800299e:	601a      	str	r2, [r3, #0]
			break;
 80029a0:	e015      	b.n	80029ce <StartReceive+0x6e>
			if(huart6.hdmarx->State==HAL_DMA_STATE_READY){
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <StartReceive+0x88>)
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d110      	bne.n	80029d2 <StartReceive+0x72>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
 80029b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029b4:	490d      	ldr	r1, [pc, #52]	; (80029ec <StartReceive+0x8c>)
 80029b6:	480c      	ldr	r0, [pc, #48]	; (80029e8 <StartReceive+0x88>)
 80029b8:	f003 fae5 	bl	8005f86 <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <StartReceive+0x90>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <StartReceive+0x90>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0208 	bic.w	r2, r2, #8
 80029ca:	601a      	str	r2, [r3, #0]
			break;
 80029cc:	e001      	b.n	80029d2 <StartReceive+0x72>
			break;
 80029ce:	bf00      	nop
 80029d0:	e000      	b.n	80029d4 <StartReceive+0x74>
			break;
 80029d2:	bf00      	nop
	}
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20006ce4 	.word	0x20006ce4
 80029e0:	20006e7c 	.word	0x20006e7c
 80029e4:	20006c84 	.word	0x20006c84
 80029e8:	20006d2c 	.word	0x20006d2c
 80029ec:	20006f7c 	.word	0x20006f7c
 80029f0:	20006c24 	.word	0x20006c24

080029f4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
	Uart_Queue_Struct *queue_arg;
	uint8_t *input_pointer = NULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
	uint8_t *output_pointer = NULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]
	if (huart->Instance==USART1) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1a      	ldr	r2, [pc, #104]	; (8002a78 <HAL_UARTEx_RxEventCallback+0x84>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d105      	bne.n	8002a1e <HAL_UARTEx_RxEventCallback+0x2a>
		input_pointer = uart_input_buffer[0];
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <HAL_UARTEx_RxEventCallback+0x88>)
 8002a14:	617b      	str	r3, [r7, #20]
		StartReceive(0);
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7ff ffa2 	bl	8002960 <StartReceive>
 8002a1c:	e008      	b.n	8002a30 <HAL_UARTEx_RxEventCallback+0x3c>
	}
	else if(huart->Instance==USART6){
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <HAL_UARTEx_RxEventCallback+0x8c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d120      	bne.n	8002a6a <HAL_UARTEx_RxEventCallback+0x76>
		input_pointer = uart_input_buffer[1];
 8002a28:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <HAL_UARTEx_RxEventCallback+0x90>)
 8002a2a:	617b      	str	r3, [r7, #20]
		output_pointer = rs_answer;
 8002a2c:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <HAL_UARTEx_RxEventCallback+0x94>)
 8002a2e:	613b      	str	r3, [r7, #16]

	}
	else return;
	queue_arg = osMailAlloc(uart_queue, 0);
 8002a30:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_UARTEx_RxEventCallback+0x98>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f005 fca4 	bl	8008384 <osMailAlloc>
 8002a3c:	60f8      	str	r0, [r7, #12]
	if(queue_arg==NULL)return;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d014      	beq.n	8002a6e <HAL_UARTEx_RxEventCallback+0x7a>
	queue_arg->inpit_size = size;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	811a      	strh	r2, [r3, #8]
	queue_arg->input_pointer = input_pointer;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	601a      	str	r2, [r3, #0]
	queue_arg->output_pointer = output_pointer;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	605a      	str	r2, [r3, #4]
	queue_arg->huart = huart;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	60da      	str	r2, [r3, #12]
	osMailPut(uart_queue, queue_arg);
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_UARTEx_RxEventCallback+0x98>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68f9      	ldr	r1, [r7, #12]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f005 fca4 	bl	80083b0 <osMailPut>
 8002a68:	e002      	b.n	8002a70 <HAL_UARTEx_RxEventCallback+0x7c>
	else return;
 8002a6a:	bf00      	nop
 8002a6c:	e000      	b.n	8002a70 <HAL_UARTEx_RxEventCallback+0x7c>
	if(queue_arg==NULL)return;
 8002a6e:	bf00      	nop
}
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40011000 	.word	0x40011000
 8002a7c:	20006e7c 	.word	0x20006e7c
 8002a80:	40011400 	.word	0x40011400
 8002a84:	20006f7c 	.word	0x20006f7c
 8002a88:	2000707c 	.word	0x2000707c
 8002a8c:	20006ad8 	.word	0x20006ad8

08002a90 <RecognizePacket>:

static int RecognizePacket(Uart_Queue_Struct *request)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	int result = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
	if(request->input_pointer==NULL)return 0;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <RecognizePacket+0x18>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e01e      	b.n	8002ae6 <RecognizePacket+0x56>
	if(request->huart->Instance==USART1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <RecognizePacket+0x60>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d101      	bne.n	8002ab8 <RecognizePacket+0x28>
	{
		// Написать обработку пакета от АЦП
		return 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e016      	b.n	8002ae6 <RecognizePacket+0x56>
	}
	else if (request->huart->Instance==USART6) {
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a0d      	ldr	r2, [pc, #52]	; (8002af4 <RecognizePacket+0x64>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d10f      	bne.n	8002ae4 <RecognizePacket+0x54>
		if(request->output_pointer == NULL)return 0;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <RecognizePacket+0x40>
 8002acc:	2300      	movs	r3, #0
 8002ace:	e00a      	b.n	8002ae6 <RecognizePacket+0x56>
		result = ModbusParse(request->input_pointer, request->inpit_size, request->output_pointer, RS485);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	8919      	ldrh	r1, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	2300      	movs	r3, #0
 8002ade:	f7ff f841 	bl	8001b64 <ModbusParse>
 8002ae2:	60f8      	str	r0, [r7, #12]
	}
	return result;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40011000 	.word	0x40011000
 8002af4:	40011400 	.word	0x40011400

08002af8 <Transmit>:

static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
	if(huart->Instance==USART6)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <Transmit+0x48>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d112      	bne.n	8002b36 <Transmit+0x3e>
	{
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, SET);
 8002b10:	2201      	movs	r2, #1
 8002b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b16:	480b      	ldr	r0, [pc, #44]	; (8002b44 <Transmit+0x4c>)
 8002b18:	f002 f9ac 	bl	8004e74 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(huart, p, size, 1000);
 8002b1c:	88fa      	ldrh	r2, [r7, #6]
 8002b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f003 f99c 	bl	8005e62 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, RESET);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b30:	4804      	ldr	r0, [pc, #16]	; (8002b44 <Transmit+0x4c>)
 8002b32:	f002 f99f 	bl	8004e74 <HAL_GPIO_WritePin>

	}
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40011400 	.word	0x40011400
 8002b44:	40020800 	.word	0x40020800

08002b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b4c:	480d      	ldr	r0, [pc, #52]	; (8002b84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b4e:	490e      	ldr	r1, [pc, #56]	; (8002b88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b50:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b54:	e002      	b.n	8002b5c <LoopCopyDataInit>

08002b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b5a:	3304      	adds	r3, #4

08002b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b60:	d3f9      	bcc.n	8002b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b62:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b64:	4c0b      	ldr	r4, [pc, #44]	; (8002b94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b68:	e001      	b.n	8002b6e <LoopFillZerobss>

08002b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b6c:	3204      	adds	r2, #4

08002b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b70:	d3fb      	bcc.n	8002b6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b72:	f7ff fe9d 	bl	80028b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b76:	f015 fc0b 	bl	8018390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b7a:	f7fe fd5b 	bl	8001634 <main>
  bx  lr    
 8002b7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b88:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8002b8c:	0801cfa0 	.word	0x0801cfa0
  ldr r2, =_sbss
 8002b90:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8002b94:	2000da38 	.word	0x2000da38

08002b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b98:	e7fe      	b.n	8002b98 <ADC_IRQHandler>

08002b9a <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d104      	bne.n	8002bb2 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba8:	b672      	cpsid	i
}
 8002baa:	bf00      	nop
 8002bac:	f7fe ffa4 	bl	8001af8 <Error_Handler>
 8002bb0:	e7fe      	b.n	8002bb0 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	e007      	b.n	8002bc8 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d9f4      	bls.n	8002bb8 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	721a      	strb	r2, [r3, #8]
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d104      	bne.n	8002bf4 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002bea:	b672      	cpsid	i
}
 8002bec:	bf00      	nop
 8002bee:	f7fe ff83 	bl	8001af8 <Error_Handler>
 8002bf2:	e7fe      	b.n	8002bf2 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7a1b      	ldrb	r3, [r3, #8]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d904      	bls.n	8002c06 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002bfc:	b672      	cpsid	i
}
 8002bfe:	bf00      	nop
 8002c00:	f7fe ff7a 	bl	8001af8 <Error_Handler>
 8002c04:	e7fe      	b.n	8002c04 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7a1b      	ldrb	r3, [r3, #8]
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	b2d1      	uxtb	r1, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	7211      	strb	r1, [r2, #8]
 8002c12:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c14:	f3ef 8211 	mrs	r2, BASEPRI
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	60fa      	str	r2, [r7, #12]
 8002c2a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d104      	bne.n	8002c54 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c4a:	b672      	cpsid	i
}
 8002c4c:	bf00      	nop
 8002c4e:	f7fe ff53 	bl	8001af8 <Error_Handler>
 8002c52:	e7fe      	b.n	8002c52 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7a1b      	ldrb	r3, [r3, #8]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7a1b      	ldrb	r3, [r3, #8]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d904      	bls.n	8002c72 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c68:	b672      	cpsid	i
}
 8002c6a:	bf00      	nop
 8002c6c:	f7fe ff44 	bl	8001af8 <Error_Handler>
 8002c70:	e7fe      	b.n	8002c70 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7a1b      	ldrb	r3, [r3, #8]
 8002c76:	461a      	mov	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c86:	bf00      	nop
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d103      	bne.n	8002ca6 <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <__retarget_lock_init_recursive+0x48>)
 8002ca0:	2216      	movs	r2, #22
 8002ca2:	601a      	str	r2, [r3, #0]
    return;
 8002ca4:	e015      	b.n	8002cd2 <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002ca6:	200c      	movs	r0, #12
 8002ca8:	f015 fb96 	bl	80183d8 <malloc>
 8002cac:	4603      	mov	r3, r0
 8002cae:	461a      	mov	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff6a 	bl	8002b9a <stm32_lock_init>
    return;
 8002cc6:	e004      	b.n	8002cd2 <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc8:	b672      	cpsid	i
}
 8002cca:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002ccc:	f7fe ff14 	bl	8001af8 <Error_Handler>
 8002cd0:	e7fe      	b.n	8002cd0 <__retarget_lock_init_recursive+0x40>
}
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	2000da30 	.word	0x2000da30

08002cdc <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d104      	bne.n	8002cf4 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002cea:	b672      	cpsid	i
}
 8002cec:	bf00      	nop
 8002cee:	f7fe ff03 	bl	8001af8 <Error_Handler>
 8002cf2:	e7fe      	b.n	8002cf2 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff70 	bl	8002bdc <stm32_lock_acquire>
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d12:	b672      	cpsid	i
}
 8002d14:	bf00      	nop
 8002d16:	f7fe feef 	bl	8001af8 <Error_Handler>
 8002d1a:	e7fe      	b.n	8002d1a <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff8c 	bl	8002c3c <stm32_lock_release>
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d30:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_Init+0x40>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0d      	ldr	r2, [pc, #52]	; (8002d6c <HAL_Init+0x40>)
 8002d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_Init+0x40>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <HAL_Init+0x40>)
 8002d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <HAL_Init+0x40>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <HAL_Init+0x40>)
 8002d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d54:	2003      	movs	r0, #3
 8002d56:	f000 f8fc 	bl	8002f52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d5a:	200f      	movs	r0, #15
 8002d5c:	f7ff fc32 	bl	80025c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d60:	f7ff fb12 	bl	8002388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023c00 	.word	0x40023c00

08002d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_IncTick+0x20>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_IncTick+0x24>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <HAL_IncTick+0x24>)
 8002d82:	6013      	str	r3, [r2, #0]
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	2000009c 	.word	0x2000009c
 8002d94:	2000717c 	.word	0x2000717c

08002d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <HAL_GetTick+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	2000717c 	.word	0x2000717c

08002db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7ff ffee 	bl	8002d98 <HAL_GetTick>
 8002dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d005      	beq.n	8002dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_Delay+0x44>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dd6:	bf00      	nop
 8002dd8:	f7ff ffde 	bl	8002d98 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d8f7      	bhi.n	8002dd8 <HAL_Delay+0x28>
  {
  }
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	2000009c 	.word	0x2000009c

08002df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <__NVIC_SetPriorityGrouping+0x44>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e14:	4013      	ands	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e2a:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <__NVIC_SetPriorityGrouping+0x44>)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	60d3      	str	r3, [r2, #12]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <__NVIC_GetPriorityGrouping+0x18>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	f003 0307 	and.w	r3, r3, #7
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	db0b      	blt.n	8002e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	f003 021f 	and.w	r2, r3, #31
 8002e74:	4907      	ldr	r1, [pc, #28]	; (8002e94 <__NVIC_EnableIRQ+0x38>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000e100 	.word	0xe000e100

08002e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	6039      	str	r1, [r7, #0]
 8002ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	db0a      	blt.n	8002ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	490c      	ldr	r1, [pc, #48]	; (8002ee4 <__NVIC_SetPriority+0x4c>)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	0112      	lsls	r2, r2, #4
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	440b      	add	r3, r1
 8002ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ec0:	e00a      	b.n	8002ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4908      	ldr	r1, [pc, #32]	; (8002ee8 <__NVIC_SetPriority+0x50>)
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	3b04      	subs	r3, #4
 8002ed0:	0112      	lsls	r2, r2, #4
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	761a      	strb	r2, [r3, #24]
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000e100 	.word	0xe000e100
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b089      	sub	sp, #36	; 0x24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f1c3 0307 	rsb	r3, r3, #7
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	bf28      	it	cs
 8002f0a:	2304      	movcs	r3, #4
 8002f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3304      	adds	r3, #4
 8002f12:	2b06      	cmp	r3, #6
 8002f14:	d902      	bls.n	8002f1c <NVIC_EncodePriority+0x30>
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3b03      	subs	r3, #3
 8002f1a:	e000      	b.n	8002f1e <NVIC_EncodePriority+0x32>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f20:	f04f 32ff 	mov.w	r2, #4294967295
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	401a      	ands	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f34:	f04f 31ff 	mov.w	r1, #4294967295
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3e:	43d9      	mvns	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f44:	4313      	orrs	r3, r2
         );
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3724      	adds	r7, #36	; 0x24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ff4c 	bl	8002df8 <__NVIC_SetPriorityGrouping>
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f7a:	f7ff ff61 	bl	8002e40 <__NVIC_GetPriorityGrouping>
 8002f7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	68b9      	ldr	r1, [r7, #8]
 8002f84:	6978      	ldr	r0, [r7, #20]
 8002f86:	f7ff ffb1 	bl	8002eec <NVIC_EncodePriority>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff80 	bl	8002e98 <__NVIC_SetPriority>
}
 8002f98:	bf00      	nop
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff ff54 	bl	8002e5c <__NVIC_EnableIRQ>
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fc8:	f7ff fee6 	bl	8002d98 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e099      	b.n	800310c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff8:	e00f      	b.n	800301a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ffa:	f7ff fecd 	bl	8002d98 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b05      	cmp	r3, #5
 8003006:	d908      	bls.n	800301a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2203      	movs	r2, #3
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e078      	b.n	800310c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e8      	bne.n	8002ffa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4b38      	ldr	r3, [pc, #224]	; (8003114 <HAL_DMA_Init+0x158>)
 8003034:	4013      	ands	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003046:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	2b04      	cmp	r3, #4
 8003072:	d107      	bne.n	8003084 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	4313      	orrs	r3, r2
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f023 0307 	bic.w	r3, r3, #7
 800309a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d117      	bne.n	80030de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00e      	beq.n	80030de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fb01 	bl	80036c8 <DMA_CheckFifoParam>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2240      	movs	r2, #64	; 0x40
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030da:	2301      	movs	r3, #1
 80030dc:	e016      	b.n	800310c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fab8 	bl	800365c <DMA_CalcBaseAndBitshift>
 80030ec:	4603      	mov	r3, r0
 80030ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	223f      	movs	r2, #63	; 0x3f
 80030f6:	409a      	lsls	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	f010803f 	.word	0xf010803f

08003118 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_DMA_Start_IT+0x26>
 800313a:	2302      	movs	r3, #2
 800313c:	e040      	b.n	80031c0 <HAL_DMA_Start_IT+0xa8>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d12f      	bne.n	80031b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fa4a 	bl	8003600 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003170:	223f      	movs	r2, #63	; 0x3f
 8003172:	409a      	lsls	r2, r3
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0216 	orr.w	r2, r2, #22
 8003186:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0208 	orr.w	r2, r2, #8
 800319e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e005      	b.n	80031be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
 80031bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031be:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031d6:	f7ff fddf 	bl	8002d98 <HAL_GetTick>
 80031da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d008      	beq.n	80031fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2280      	movs	r2, #128	; 0x80
 80031ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e052      	b.n	80032a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0216 	bic.w	r2, r2, #22
 8003208:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003218:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <HAL_DMA_Abort+0x62>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0208 	bic.w	r2, r2, #8
 8003238:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0201 	bic.w	r2, r2, #1
 8003248:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800324a:	e013      	b.n	8003274 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800324c:	f7ff fda4 	bl	8002d98 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b05      	cmp	r3, #5
 8003258:	d90c      	bls.n	8003274 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2203      	movs	r2, #3
 8003264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e015      	b.n	80032a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1e4      	bne.n	800324c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	223f      	movs	r2, #63	; 0x3f
 8003288:	409a      	lsls	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d004      	beq.n	80032c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e00c      	b.n	80032e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2205      	movs	r2, #5
 80032ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032f8:	4b92      	ldr	r3, [pc, #584]	; (8003544 <HAL_DMA_IRQHandler+0x258>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a92      	ldr	r2, [pc, #584]	; (8003548 <HAL_DMA_IRQHandler+0x25c>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0a9b      	lsrs	r3, r3, #10
 8003304:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003316:	2208      	movs	r2, #8
 8003318:	409a      	lsls	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01a      	beq.n	8003358 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d013      	beq.n	8003358 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0204 	bic.w	r2, r2, #4
 800333e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	2208      	movs	r2, #8
 8003346:	409a      	lsls	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	f043 0201 	orr.w	r2, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	2201      	movs	r2, #1
 800335e:	409a      	lsls	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d012      	beq.n	800338e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	2201      	movs	r2, #1
 800337c:	409a      	lsls	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003386:	f043 0202 	orr.w	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	2204      	movs	r2, #4
 8003394:	409a      	lsls	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d012      	beq.n	80033c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00b      	beq.n	80033c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	2204      	movs	r2, #4
 80033b2:	409a      	lsls	r2, r3
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f043 0204 	orr.w	r2, r3, #4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	2210      	movs	r2, #16
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d043      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d03c      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e6:	2210      	movs	r2, #16
 80033e8:	409a      	lsls	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d018      	beq.n	800342e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d108      	bne.n	800341c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d024      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
 800341a:	e01f      	b.n	800345c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01b      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
 800342c:	e016      	b.n	800345c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d107      	bne.n	800344c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0208 	bic.w	r2, r2, #8
 800344a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	2220      	movs	r2, #32
 8003462:	409a      	lsls	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 808e 	beq.w	800358a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8086 	beq.w	800358a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003482:	2220      	movs	r2, #32
 8003484:	409a      	lsls	r2, r3
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b05      	cmp	r3, #5
 8003494:	d136      	bne.n	8003504 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0216 	bic.w	r2, r2, #22
 80034a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <HAL_DMA_IRQHandler+0x1da>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0208 	bic.w	r2, r2, #8
 80034d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	223f      	movs	r2, #63	; 0x3f
 80034dc:	409a      	lsls	r2, r3
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d07d      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	4798      	blx	r3
        }
        return;
 8003502:	e078      	b.n	80035f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01c      	beq.n	800354c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d108      	bne.n	8003532 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	2b00      	cmp	r3, #0
 8003526:	d030      	beq.n	800358a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
 8003530:	e02b      	b.n	800358a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d027      	beq.n	800358a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
 8003542:	e022      	b.n	800358a <HAL_DMA_IRQHandler+0x29e>
 8003544:	20000094 	.word	0x20000094
 8003548:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10f      	bne.n	800357a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0210 	bic.w	r2, r2, #16
 8003568:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	2b00      	cmp	r3, #0
 8003590:	d032      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d022      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2205      	movs	r2, #5
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	3301      	adds	r3, #1
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d307      	bcc.n	80035d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f2      	bne.n	80035b6 <HAL_DMA_IRQHandler+0x2ca>
 80035d0:	e000      	b.n	80035d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80035d2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
 80035f4:	e000      	b.n	80035f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80035f6:	bf00      	nop
    }
  }
}
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop

08003600 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800361c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d108      	bne.n	8003640 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800363e:	e007      	b.n	8003650 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	60da      	str	r2, [r3, #12]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	3b10      	subs	r3, #16
 800366c:	4a14      	ldr	r2, [pc, #80]	; (80036c0 <DMA_CalcBaseAndBitshift+0x64>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003676:	4a13      	ldr	r2, [pc, #76]	; (80036c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4413      	add	r3, r2
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d909      	bls.n	800369e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003692:	f023 0303 	bic.w	r3, r3, #3
 8003696:	1d1a      	adds	r2, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	659a      	str	r2, [r3, #88]	; 0x58
 800369c:	e007      	b.n	80036ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	aaaaaaab 	.word	0xaaaaaaab
 80036c4:	0801cd0c 	.word	0x0801cd0c

080036c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11f      	bne.n	8003722 <DMA_CheckFifoParam+0x5a>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d856      	bhi.n	8003796 <DMA_CheckFifoParam+0xce>
 80036e8:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <DMA_CheckFifoParam+0x28>)
 80036ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ee:	bf00      	nop
 80036f0:	08003701 	.word	0x08003701
 80036f4:	08003713 	.word	0x08003713
 80036f8:	08003701 	.word	0x08003701
 80036fc:	08003797 	.word	0x08003797
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d046      	beq.n	800379a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003710:	e043      	b.n	800379a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800371a:	d140      	bne.n	800379e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003720:	e03d      	b.n	800379e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372a:	d121      	bne.n	8003770 <DMA_CheckFifoParam+0xa8>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d837      	bhi.n	80037a2 <DMA_CheckFifoParam+0xda>
 8003732:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <DMA_CheckFifoParam+0x70>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	08003749 	.word	0x08003749
 800373c:	0800374f 	.word	0x0800374f
 8003740:	08003749 	.word	0x08003749
 8003744:	08003761 	.word	0x08003761
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      break;
 800374c:	e030      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d025      	beq.n	80037a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375e:	e022      	b.n	80037a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003768:	d11f      	bne.n	80037aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800376e:	e01c      	b.n	80037aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d903      	bls.n	800377e <DMA_CheckFifoParam+0xb6>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d003      	beq.n	8003784 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800377c:	e018      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
      break;
 8003782:	e015      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00e      	beq.n	80037ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e00b      	b.n	80037ae <DMA_CheckFifoParam+0xe6>
      break;
 8003796:	bf00      	nop
 8003798:	e00a      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 800379a:	bf00      	nop
 800379c:	e008      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 800379e:	bf00      	nop
 80037a0:	e006      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 80037a2:	bf00      	nop
 80037a4:	e004      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 80037a6:	bf00      	nop
 80037a8:	e002      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ae:	bf00      	nop
    }
  } 
  
  return status; 
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop

080037c0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80037d0:	4baa      	ldr	r3, [pc, #680]	; (8003a7c <HAL_ETH_Init+0x2bc>)
 80037d2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e183      	b.n	8003aee <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f003 fdb4 	bl	8007368 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	4b9e      	ldr	r3, [pc, #632]	; (8003a80 <HAL_ETH_Init+0x2c0>)
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	4a9d      	ldr	r2, [pc, #628]	; (8003a80 <HAL_ETH_Init+0x2c0>)
 800380a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800380e:	6453      	str	r3, [r2, #68]	; 0x44
 8003810:	4b9b      	ldr	r3, [pc, #620]	; (8003a80 <HAL_ETH_Init+0x2c0>)
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800381c:	4b99      	ldr	r3, [pc, #612]	; (8003a84 <HAL_ETH_Init+0x2c4>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a98      	ldr	r2, [pc, #608]	; (8003a84 <HAL_ETH_Init+0x2c4>)
 8003822:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003826:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003828:	4b96      	ldr	r3, [pc, #600]	; (8003a84 <HAL_ETH_Init+0x2c4>)
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4994      	ldr	r1, [pc, #592]	; (8003a84 <HAL_ETH_Init+0x2c4>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800384c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800384e:	f7ff faa3 	bl	8002d98 <HAL_GetTick>
 8003852:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003854:	e011      	b.n	800387a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003856:	f7ff fa9f 	bl	8002d98 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003864:	d909      	bls.n	800387a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2203      	movs	r2, #3
 800386a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e139      	b.n	8003aee <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e4      	bne.n	8003856 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f023 031c 	bic.w	r3, r3, #28
 800389a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800389c:	f001 ff80 	bl	80057a0 <HAL_RCC_GetHCLKFreq>
 80038a0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	4a78      	ldr	r2, [pc, #480]	; (8003a88 <HAL_ETH_Init+0x2c8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d908      	bls.n	80038bc <HAL_ETH_Init+0xfc>
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	4a77      	ldr	r2, [pc, #476]	; (8003a8c <HAL_ETH_Init+0x2cc>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d804      	bhi.n	80038bc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f043 0308 	orr.w	r3, r3, #8
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e027      	b.n	800390c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	4a73      	ldr	r2, [pc, #460]	; (8003a8c <HAL_ETH_Init+0x2cc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d908      	bls.n	80038d6 <HAL_ETH_Init+0x116>
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	4a6d      	ldr	r2, [pc, #436]	; (8003a7c <HAL_ETH_Init+0x2bc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d204      	bcs.n	80038d6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f043 030c 	orr.w	r3, r3, #12
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	e01a      	b.n	800390c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	4a68      	ldr	r2, [pc, #416]	; (8003a7c <HAL_ETH_Init+0x2bc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d303      	bcc.n	80038e6 <HAL_ETH_Init+0x126>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	4a6b      	ldr	r2, [pc, #428]	; (8003a90 <HAL_ETH_Init+0x2d0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d911      	bls.n	800390a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	4a69      	ldr	r2, [pc, #420]	; (8003a90 <HAL_ETH_Init+0x2d0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d908      	bls.n	8003900 <HAL_ETH_Init+0x140>
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	4a68      	ldr	r2, [pc, #416]	; (8003a94 <HAL_ETH_Init+0x2d4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d804      	bhi.n	8003900 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f043 0304 	orr.w	r3, r3, #4
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	e005      	b.n	800390c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f043 0310 	orr.w	r3, r3, #16
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	e000      	b.n	800390c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800390a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003914:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003918:	2100      	movs	r1, #0
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fc17 	bl	800414e <HAL_ETH_WritePHYRegister>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00b      	beq.n	800393e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800392a:	6939      	ldr	r1, [r7, #16]
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fdcd 	bl	80044cc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e0d7      	b.n	8003aee <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800393e:	20ff      	movs	r0, #255	; 0xff
 8003940:	f7ff fa36 	bl	8002db0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80a5 	beq.w	8003a98 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800394e:	f7ff fa23 	bl	8002d98 <HAL_GetTick>
 8003952:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003954:	f107 030c 	add.w	r3, r7, #12
 8003958:	461a      	mov	r2, r3
 800395a:	2101      	movs	r1, #1
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fb8e 	bl	800407e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003962:	f7ff fa19 	bl	8002d98 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d90f      	bls.n	8003994 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003978:	6939      	ldr	r1, [r7, #16]
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fda6 	bl	80044cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e0ac      	b.n	8003aee <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0da      	beq.n	8003954 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800399e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039a2:	2100      	movs	r1, #0
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fbd2 	bl	800414e <HAL_ETH_WritePHYRegister>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00b      	beq.n	80039c8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80039b4:	6939      	ldr	r1, [r7, #16]
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fd88 	bl	80044cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80039c4:	2301      	movs	r3, #1
 80039c6:	e092      	b.n	8003aee <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80039c8:	f7ff f9e6 	bl	8002d98 <HAL_GetTick>
 80039cc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80039ce:	f107 030c 	add.w	r3, r7, #12
 80039d2:	461a      	mov	r2, r3
 80039d4:	2101      	movs	r1, #1
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fb51 	bl	800407e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80039dc:	f7ff f9dc 	bl	8002d98 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d90f      	bls.n	8003a0e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80039f2:	6939      	ldr	r1, [r7, #16]
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fd69 	bl	80044cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e06f      	b.n	8003aee <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0da      	beq.n	80039ce <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003a18:	f107 030c 	add.w	r3, r7, #12
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2110      	movs	r1, #16
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fb2c 	bl	800407e <HAL_ETH_ReadPHYRegister>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003a30:	6939      	ldr	r1, [r7, #16]
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fd4a 	bl	80044cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003a40:	2301      	movs	r3, #1
 8003a42:	e054      	b.n	8003aee <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d004      	beq.n	8003a58 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	e002      	b.n	8003a5e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
 8003a6e:	e035      	b.n	8003adc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	e030      	b.n	8003adc <HAL_ETH_Init+0x31c>
 8003a7a:	bf00      	nop
 8003a7c:	03938700 	.word	0x03938700
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40013800 	.word	0x40013800
 8003a88:	01312cff 	.word	0x01312cff
 8003a8c:	02160ebf 	.word	0x02160ebf
 8003a90:	05f5e0ff 	.word	0x05f5e0ff
 8003a94:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	08db      	lsrs	r3, r3, #3
 8003a9e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	2100      	movs	r1, #0
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fb4c 	bl	800414e <HAL_ETH_WritePHYRegister>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00b      	beq.n	8003ad4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003ac0:	6939      	ldr	r1, [r7, #16]
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fd02 	bl	80044cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e00c      	b.n	8003aee <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003ad4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003ad8:	f7ff f96a 	bl	8002db0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003adc:	6939      	ldr	r1, [r7, #16]
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fcf4 	bl	80044cc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop

08003af8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_ETH_DMATxDescListInit+0x20>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e052      	b.n	8003bbe <HAL_ETH_DMATxDescListInit+0xc6>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e030      	b.n	8003b96 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	015b      	lsls	r3, r3, #5
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b44:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003b4c:	fb02 f303 	mul.w	r3, r2, r3
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	4413      	add	r3, r2
 8003b54:	461a      	mov	r2, r3
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d105      	bne.n	8003b6e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d208      	bcs.n	8003b8a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	015b      	lsls	r3, r3, #5
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	4413      	add	r3, r2
 8003b82:	461a      	mov	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	e002      	b.n	8003b90 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	3301      	adds	r3, #1
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d3ca      	bcc.n	8003b34 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba8:	3310      	adds	r3, #16
 8003baa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b087      	sub	sp, #28
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_ETH_DMARxDescListInit+0x20>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e056      	b.n	8003c98 <HAL_ETH_DMARxDescListInit+0xce>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	e034      	b.n	8003c70 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	015b      	lsls	r3, r3, #5
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c16:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003c1e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	461a      	mov	r2, r3
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d208      	bcs.n	8003c64 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	3301      	adds	r3, #1
 8003c56:	015b      	lsls	r3, r3, #5
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	e002      	b.n	8003c6a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d3c6      	bcc.n	8003c06 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c82:	330c      	adds	r3, #12
 8003c84:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ETH_TransmitFrame+0x24>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e0cd      	b.n	8003e64 <HAL_ETH_TransmitFrame+0x1c0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e0b8      	b.n	8003e64 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	da09      	bge.n	8003d10 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2212      	movs	r2, #18
 8003d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0a9      	b.n	8003e64 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d915      	bls.n	8003d46 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	4a54      	ldr	r2, [pc, #336]	; (8003e70 <HAL_ETH_TransmitFrame+0x1cc>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	0a9b      	lsrs	r3, r3, #10
 8003d24:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	4b51      	ldr	r3, [pc, #324]	; (8003e70 <HAL_ETH_TransmitFrame+0x1cc>)
 8003d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d2e:	0a9b      	lsrs	r3, r3, #10
 8003d30:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	3301      	adds	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e001      	b.n	8003d4a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003d46:	2301      	movs	r3, #1
 8003d48:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d11c      	bne.n	8003d8a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003d5e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003d6a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d7a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	461a      	mov	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d88:	e04b      	b.n	8003e22 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	e044      	b.n	8003e1a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d9e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d107      	bne.n	8003db6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003db4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003dbe:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d116      	bne.n	8003df8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003dd8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <HAL_ETH_TransmitFrame+0x1d0>)
 8003dde:	fb02 f203 	mul.w	r2, r2, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	4413      	add	r3, r2
 8003de6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003dea:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003df6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003e06:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	3301      	adds	r3, #1
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d3b6      	bcc.n	8003d90 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e2a:	3314      	adds	r3, #20
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00d      	beq.n	8003e52 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3e:	3314      	adds	r3, #20
 8003e40:	2204      	movs	r2, #4
 8003e42:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	ac02b00b 	.word	0xac02b00b
 8003e74:	fffffa0c 	.word	0xfffffa0c

08003e78 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e074      	b.n	8003f7c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003ea2:	e05a      	b.n	8003f5a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb8:	d10d      	bne.n	8003ed6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ed4:	e041      	b.n	8003f5a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10b      	bne.n	8003efc <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	629a      	str	r2, [r3, #40]	; 0x28
 8003efa:	e02e      	b.n	8003f5a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d103      	bne.n	8003f1e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003f2a:	1f1a      	subs	r2, r3, #4
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	461a      	mov	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e010      	b.n	8003f7c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	db02      	blt.n	8003f6a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d99c      	bls.n	8003ea4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f98:	3314      	adds	r3, #20
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	d112      	bne.n	8003fca <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f003 fa8d 	bl	80074c4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	2240      	movs	r2, #64	; 0x40
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fc8:	e01b      	b.n	8004002 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd2:	3314      	adds	r3, #20
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d111      	bne.n	8004002 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f839 	bl	8004056 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fec:	3314      	adds	r3, #20
 8003fee:	2201      	movs	r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400a:	3314      	adds	r3, #20
 800400c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004010:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800401a:	3314      	adds	r3, #20
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004026:	d112      	bne.n	800404e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f81e 	bl	800406a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004036:	3314      	adds	r3, #20
 8004038:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800403c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b086      	sub	sp, #24
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	460b      	mov	r3, r1
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b82      	cmp	r3, #130	; 0x82
 800409e:	d101      	bne.n	80040a4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80040a0:	2302      	movs	r3, #2
 80040a2:	e050      	b.n	8004146 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2282      	movs	r2, #130	; 0x82
 80040a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f003 031c 	and.w	r3, r3, #28
 80040ba:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8a1b      	ldrh	r3, [r3, #16]
 80040c0:	02db      	lsls	r3, r3, #11
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80040ca:	897b      	ldrh	r3, [r7, #10]
 80040cc:	019b      	lsls	r3, r3, #6
 80040ce:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0302 	bic.w	r3, r3, #2
 80040de:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80040f0:	f7fe fe52 	bl	8002d98 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040f6:	e015      	b.n	8004124 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80040f8:	f7fe fe4e 	bl	8002d98 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004106:	d309      	bcc.n	800411c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e014      	b.n	8004146 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e4      	bne.n	80040f8 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	b29b      	uxth	r3, r3
 8004136:	461a      	mov	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b086      	sub	sp, #24
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	460b      	mov	r3, r1
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b42      	cmp	r3, #66	; 0x42
 800416e:	d101      	bne.n	8004174 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
 8004172:	e04e      	b.n	8004212 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2242      	movs	r2, #66	; 0x42
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f003 031c 	and.w	r3, r3, #28
 800418a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8a1b      	ldrh	r3, [r3, #16]
 8004190:	02db      	lsls	r3, r3, #11
 8004192:	b29b      	uxth	r3, r3
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800419a:	897b      	ldrh	r3, [r7, #10]
 800419c:	019b      	lsls	r3, r3, #6
 800419e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f043 0302 	orr.w	r3, r3, #2
 80041ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80041ca:	f7fe fde5 	bl	8002d98 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041d0:	e015      	b.n	80041fe <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80041d2:	f7fe fde1 	bl	8002d98 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e0:	d309      	bcc.n	80041f6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e00d      	b.n	8004212 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e4      	bne.n	80041d2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_ETH_Start+0x16>
 800422c:	2302      	movs	r3, #2
 800422e:	e01f      	b.n	8004270 <HAL_ETH_Start+0x56>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fb45 	bl	80048d0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fb7c 	bl	8004944 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fc13 	bl	8004a78 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fbb0 	bl	80049b8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fbdd 	bl	8004a18 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_ETH_Stop+0x16>
 800428a:	2302      	movs	r3, #2
 800428c:	e01f      	b.n	80042ce <HAL_ETH_Stop+0x56>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2202      	movs	r2, #2
 800429a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fba2 	bl	80049e8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fbcf 	bl	8004a48 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fb67 	bl	800497e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fbe1 	bl	8004a78 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fb27 	bl	800490a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_ETH_ConfigMAC+0x1c>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e0e4      	b.n	80044be <HAL_ETH_ConfigMAC+0x1e6>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80b1 	beq.w	800446e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4b6c      	ldr	r3, [pc, #432]	; (80044c8 <HAL_ETH_ConfigMAC+0x1f0>)
 8004318:	4013      	ands	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004324:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800432a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8004330:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8004336:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800433c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8004342:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8004348:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800434e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8004354:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800435a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8004360:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8004366:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800437e:	2001      	movs	r0, #1
 8004380:	f7fe fd16 	bl	8002db0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004394:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800439a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80043a0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80043a6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80043ac:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80043b2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80043be:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80043c0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80043ca:	2001      	movs	r0, #1
 80043cc:	f7fe fcf0 	bl	8002db0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043e0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043ea:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80043fa:	4013      	ands	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004402:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004408:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800440e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8004414:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800441a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004420:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004438:	2001      	movs	r0, #1
 800443a:	f7fe fcb9 	bl	8002db0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800445e:	2001      	movs	r0, #1
 8004460:	f7fe fca6 	bl	8002db0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	61da      	str	r2, [r3, #28]
 800446c:	e01e      	b.n	80044ac <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800447c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800449e:	2001      	movs	r0, #1
 80044a0:	f7fe fc86 	bl	8002db0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	ff20810f 	.word	0xff20810f

080044cc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b0b0      	sub	sp, #192	; 0xc0
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044e8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80044f2:	2300      	movs	r3, #0
 80044f4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80044fa:	2300      	movs	r3, #0
 80044fc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80044fe:	2300      	movs	r3, #0
 8004500:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004502:	2300      	movs	r3, #0
 8004504:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004506:	2300      	movs	r3, #0
 8004508:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004516:	663b      	str	r3, [r7, #96]	; 0x60
 8004518:	e001      	b.n	800451e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800451a:	2300      	movs	r3, #0
 800451c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800451e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004522:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004524:	2300      	movs	r3, #0
 8004526:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004528:	2300      	movs	r3, #0
 800452a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800452c:	2300      	movs	r3, #0
 800452e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004530:	2300      	movs	r3, #0
 8004532:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004534:	2300      	movs	r3, #0
 8004536:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004538:	2340      	movs	r3, #64	; 0x40
 800453a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800453c:	2300      	movs	r3, #0
 800453e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004542:	2300      	movs	r3, #0
 8004544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004548:	2300      	movs	r3, #0
 800454a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800454e:	2300      	movs	r3, #0
 8004550:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004554:	2300      	movs	r3, #0
 8004556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8004566:	2300      	movs	r3, #0
 8004568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004572:	2300      	movs	r3, #0
 8004574:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004578:	2300      	movs	r3, #0
 800457a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800457e:	2300      	movs	r3, #0
 8004580:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004584:	2300      	movs	r3, #0
 8004586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800458a:	2300      	movs	r3, #0
 800458c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004590:	2300      	movs	r3, #0
 8004592:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80045a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045a4:	4bac      	ldr	r3, [pc, #688]	; (8004858 <ETH_MACDMAConfig+0x38c>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80045ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80045ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80045b0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80045b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80045b4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80045b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80045b8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80045be:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80045c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80045c2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80045c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80045c6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80045cc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80045ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80045d0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80045d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80045d4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80045d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80045d8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80045da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80045dc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80045de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80045e0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80045e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004600:	2001      	movs	r0, #1
 8004602:	f7fe fbd5 	bl	8002db0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800460e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004610:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004614:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004616:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004618:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800461a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800461e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004624:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004626:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800462a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800462c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004630:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004634:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800463c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800463e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800464a:	2001      	movs	r0, #1
 800464c:	f7fe fbb0 	bl	8002db0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004658:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004662:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800466c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004678:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800467c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004680:	4013      	ands	r3, r2
 8004682:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004686:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800468a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800468c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004690:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004692:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004696:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004698:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800469c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800469e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80046a2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80046a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80046a8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80046aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046bc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80046c8:	2001      	movs	r0, #1
 80046ca:	f7fe fb71 	bl	8002db0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046d6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80046d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80046dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80046f2:	2001      	movs	r0, #1
 80046f4:	f7fe fb5c 	bl	8002db0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004700:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800470a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004710:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004714:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004716:	2300      	movs	r3, #0
 8004718:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800471e:	2300      	movs	r3, #0
 8004720:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004722:	2300      	movs	r3, #0
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004726:	2304      	movs	r3, #4
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800472a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004734:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800473a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800473c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004740:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004742:	2380      	movs	r3, #128	; 0x80
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8004746:	2300      	movs	r3, #0
 8004748:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800474a:	2300      	movs	r3, #0
 800474c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004756:	3318      	adds	r3, #24
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800475e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004762:	4b3e      	ldr	r3, [pc, #248]	; (800485c <ETH_MACDMAConfig+0x390>)
 8004764:	4013      	ands	r3, r2
 8004766:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800476a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800476c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800476e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004770:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004772:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004774:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004776:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004778:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800477a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800477c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800477e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004780:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004782:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004786:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800478a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800478c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479e:	3318      	adds	r3, #24
 80047a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ae:	3318      	adds	r3, #24
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80047b6:	2001      	movs	r0, #1
 80047b8:	f7fe fafa 	bl	8002db0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c4:	3318      	adds	r3, #24
 80047c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047ca:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80047cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80047d0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80047d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80047d4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80047d8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80047da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80047dc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80047de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80047e2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80047e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80047e6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80047f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004804:	2001      	movs	r0, #1
 8004806:	f7fe fad3 	bl	8002db0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004812:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004816:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d10f      	bne.n	8004840 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004828:	331c      	adds	r3, #28
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483c:	331c      	adds	r3, #28
 800483e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	461a      	mov	r2, r3
 8004846:	2100      	movs	r1, #0
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f809 	bl	8004860 <ETH_MACAddressConfig>
}
 800484e:	bf00      	nop
 8004850:	37c0      	adds	r7, #192	; 0xc0
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	ff20810f 	.word	0xff20810f
 800485c:	f8de3f23 	.word	0xf8de3f23

08004860 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3305      	adds	r3, #5
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	3204      	adds	r2, #4
 8004878:	7812      	ldrb	r2, [r2, #0]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <ETH_MACAddressConfig+0x68>)
 8004882:	4413      	add	r3, r2
 8004884:	461a      	mov	r2, r3
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3303      	adds	r3, #3
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	061a      	lsls	r2, r3, #24
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3302      	adds	r3, #2
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3301      	adds	r3, #1
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	4313      	orrs	r3, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	7812      	ldrb	r2, [r2, #0]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <ETH_MACAddressConfig+0x6c>)
 80048b2:	4413      	add	r3, r2
 80048b4:	461a      	mov	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	6013      	str	r3, [r2, #0]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40028040 	.word	0x40028040
 80048cc:	40028044 	.word	0x40028044

080048d0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0208 	orr.w	r2, r2, #8
 80048ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80048f4:	2001      	movs	r0, #1
 80048f6:	f000 f8e9 	bl	8004acc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	601a      	str	r2, [r3, #0]
}
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0208 	bic.w	r2, r2, #8
 8004924:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800492e:	2001      	movs	r0, #1
 8004930:	f000 f8cc 	bl	8004acc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	601a      	str	r2, [r3, #0]
}
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0204 	orr.w	r2, r2, #4
 800495e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004968:	2001      	movs	r0, #1
 800496a:	f000 f8af 	bl	8004acc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	601a      	str	r2, [r3, #0]
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0204 	bic.w	r2, r2, #4
 8004998:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80049a2:	2001      	movs	r0, #1
 80049a4:	f000 f892 	bl	8004acc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	601a      	str	r2, [r3, #0]
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c8:	3318      	adds	r3, #24
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d8:	3318      	adds	r3, #24
 80049da:	601a      	str	r2, [r3, #0]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f8:	3318      	adds	r3, #24
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a08:	3318      	adds	r3, #24
 8004a0a:	601a      	str	r2, [r3, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a28:	3318      	adds	r3, #24
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0202 	orr.w	r2, r2, #2
 8004a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a38:	3318      	adds	r3, #24
 8004a3a:	601a      	str	r2, [r3, #0]
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a58:	3318      	adds	r3, #24
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0202 	bic.w	r2, r2, #2
 8004a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a68:	3318      	adds	r3, #24
 8004a6a:	601a      	str	r2, [r3, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8c:	3318      	adds	r3, #24
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a9c:	3318      	adds	r3, #24
 8004a9e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa8:	3318      	adds	r3, #24
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004aae:	2001      	movs	r0, #1
 8004ab0:	f000 f80c 	bl	8004acc <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004abe:	3318      	adds	r3, #24
 8004ac0:	601a      	str	r2, [r3, #0]
}
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <ETH_Delay+0x38>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a0b      	ldr	r2, [pc, #44]	; (8004b08 <ETH_Delay+0x3c>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	0a5b      	lsrs	r3, r3, #9
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004ae8:	bf00      	nop
  } 
  while (Delay --);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1e5a      	subs	r2, r3, #1
 8004aee:	60fa      	str	r2, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1f9      	bne.n	8004ae8 <ETH_Delay+0x1c>
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000094 	.word	0x20000094
 8004b08:	10624dd3 	.word	0x10624dd3

08004b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b089      	sub	sp, #36	; 0x24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	e16b      	b.n	8004e00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b28:	2201      	movs	r2, #1
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	f040 815a 	bne.w	8004dfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d005      	beq.n	8004b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d130      	bne.n	8004bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	2203      	movs	r2, #3
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b94:	2201      	movs	r2, #1
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 0201 	and.w	r2, r3, #1
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d017      	beq.n	8004bfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4013      	ands	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d123      	bne.n	8004c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	08da      	lsrs	r2, r3, #3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3208      	adds	r2, #8
 8004c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	220f      	movs	r2, #15
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	08da      	lsrs	r2, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3208      	adds	r2, #8
 8004c4a:	69b9      	ldr	r1, [r7, #24]
 8004c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	43db      	mvns	r3, r3
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4013      	ands	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 0203 	and.w	r2, r3, #3
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80b4 	beq.w	8004dfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	4b60      	ldr	r3, [pc, #384]	; (8004e18 <HAL_GPIO_Init+0x30c>)
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	4a5f      	ldr	r2, [pc, #380]	; (8004e18 <HAL_GPIO_Init+0x30c>)
 8004c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ca2:	4b5d      	ldr	r3, [pc, #372]	; (8004e18 <HAL_GPIO_Init+0x30c>)
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cae:	4a5b      	ldr	r2, [pc, #364]	; (8004e1c <HAL_GPIO_Init+0x310>)
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	220f      	movs	r2, #15
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a52      	ldr	r2, [pc, #328]	; (8004e20 <HAL_GPIO_Init+0x314>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d02b      	beq.n	8004d32 <HAL_GPIO_Init+0x226>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a51      	ldr	r2, [pc, #324]	; (8004e24 <HAL_GPIO_Init+0x318>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d025      	beq.n	8004d2e <HAL_GPIO_Init+0x222>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a50      	ldr	r2, [pc, #320]	; (8004e28 <HAL_GPIO_Init+0x31c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d01f      	beq.n	8004d2a <HAL_GPIO_Init+0x21e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a4f      	ldr	r2, [pc, #316]	; (8004e2c <HAL_GPIO_Init+0x320>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d019      	beq.n	8004d26 <HAL_GPIO_Init+0x21a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a4e      	ldr	r2, [pc, #312]	; (8004e30 <HAL_GPIO_Init+0x324>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d013      	beq.n	8004d22 <HAL_GPIO_Init+0x216>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a4d      	ldr	r2, [pc, #308]	; (8004e34 <HAL_GPIO_Init+0x328>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d00d      	beq.n	8004d1e <HAL_GPIO_Init+0x212>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a4c      	ldr	r2, [pc, #304]	; (8004e38 <HAL_GPIO_Init+0x32c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d007      	beq.n	8004d1a <HAL_GPIO_Init+0x20e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a4b      	ldr	r2, [pc, #300]	; (8004e3c <HAL_GPIO_Init+0x330>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d101      	bne.n	8004d16 <HAL_GPIO_Init+0x20a>
 8004d12:	2307      	movs	r3, #7
 8004d14:	e00e      	b.n	8004d34 <HAL_GPIO_Init+0x228>
 8004d16:	2308      	movs	r3, #8
 8004d18:	e00c      	b.n	8004d34 <HAL_GPIO_Init+0x228>
 8004d1a:	2306      	movs	r3, #6
 8004d1c:	e00a      	b.n	8004d34 <HAL_GPIO_Init+0x228>
 8004d1e:	2305      	movs	r3, #5
 8004d20:	e008      	b.n	8004d34 <HAL_GPIO_Init+0x228>
 8004d22:	2304      	movs	r3, #4
 8004d24:	e006      	b.n	8004d34 <HAL_GPIO_Init+0x228>
 8004d26:	2303      	movs	r3, #3
 8004d28:	e004      	b.n	8004d34 <HAL_GPIO_Init+0x228>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e002      	b.n	8004d34 <HAL_GPIO_Init+0x228>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <HAL_GPIO_Init+0x228>
 8004d32:	2300      	movs	r3, #0
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	f002 0203 	and.w	r2, r2, #3
 8004d3a:	0092      	lsls	r2, r2, #2
 8004d3c:	4093      	lsls	r3, r2
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d44:	4935      	ldr	r1, [pc, #212]	; (8004e1c <HAL_GPIO_Init+0x310>)
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	089b      	lsrs	r3, r3, #2
 8004d4a:	3302      	adds	r3, #2
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d52:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <HAL_GPIO_Init+0x334>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d76:	4a32      	ldr	r2, [pc, #200]	; (8004e40 <HAL_GPIO_Init+0x334>)
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d7c:	4b30      	ldr	r3, [pc, #192]	; (8004e40 <HAL_GPIO_Init+0x334>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	43db      	mvns	r3, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004da0:	4a27      	ldr	r2, [pc, #156]	; (8004e40 <HAL_GPIO_Init+0x334>)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004da6:	4b26      	ldr	r3, [pc, #152]	; (8004e40 <HAL_GPIO_Init+0x334>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	43db      	mvns	r3, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4013      	ands	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004dca:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <HAL_GPIO_Init+0x334>)
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004dd0:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <HAL_GPIO_Init+0x334>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004df4:	4a12      	ldr	r2, [pc, #72]	; (8004e40 <HAL_GPIO_Init+0x334>)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	61fb      	str	r3, [r7, #28]
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b0f      	cmp	r3, #15
 8004e04:	f67f ae90 	bls.w	8004b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	3724      	adds	r7, #36	; 0x24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	40013800 	.word	0x40013800
 8004e20:	40020000 	.word	0x40020000
 8004e24:	40020400 	.word	0x40020400
 8004e28:	40020800 	.word	0x40020800
 8004e2c:	40020c00 	.word	0x40020c00
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40021400 	.word	0x40021400
 8004e38:	40021800 	.word	0x40021800
 8004e3c:	40021c00 	.word	0x40021c00
 8004e40:	40013c00 	.word	0x40013c00

08004e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	887b      	ldrh	r3, [r7, #2]
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
 8004e60:	e001      	b.n	8004e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e62:	2300      	movs	r3, #0
 8004e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	807b      	strh	r3, [r7, #2]
 8004e80:	4613      	mov	r3, r2
 8004e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e84:	787b      	ldrb	r3, [r7, #1]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e8a:	887a      	ldrh	r2, [r7, #2]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e90:	e003      	b.n	8004e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e92:	887b      	ldrh	r3, [r7, #2]
 8004e94:	041a      	lsls	r2, r3, #16
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	619a      	str	r2, [r3, #24]
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e264      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d075      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ec6:	4ba3      	ldr	r3, [pc, #652]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d00c      	beq.n	8004eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ed2:	4ba0      	ldr	r3, [pc, #640]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d112      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ede:	4b9d      	ldr	r3, [pc, #628]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eea:	d10b      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eec:	4b99      	ldr	r3, [pc, #612]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d05b      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x108>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d157      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e23f      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0c:	d106      	bne.n	8004f1c <HAL_RCC_OscConfig+0x74>
 8004f0e:	4b91      	ldr	r3, [pc, #580]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a90      	ldr	r2, [pc, #576]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e01d      	b.n	8004f58 <HAL_RCC_OscConfig+0xb0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f24:	d10c      	bne.n	8004f40 <HAL_RCC_OscConfig+0x98>
 8004f26:	4b8b      	ldr	r3, [pc, #556]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a8a      	ldr	r2, [pc, #552]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	4b88      	ldr	r3, [pc, #544]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a87      	ldr	r2, [pc, #540]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e00b      	b.n	8004f58 <HAL_RCC_OscConfig+0xb0>
 8004f40:	4b84      	ldr	r3, [pc, #528]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a83      	ldr	r2, [pc, #524]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	4b81      	ldr	r3, [pc, #516]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a80      	ldr	r2, [pc, #512]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d013      	beq.n	8004f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f60:	f7fd ff1a 	bl	8002d98 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f68:	f7fd ff16 	bl	8002d98 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e204      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	4b76      	ldr	r3, [pc, #472]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0xc0>
 8004f86:	e014      	b.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f88:	f7fd ff06 	bl	8002d98 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f90:	f7fd ff02 	bl	8002d98 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b64      	cmp	r3, #100	; 0x64
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e1f0      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa2:	4b6c      	ldr	r3, [pc, #432]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0xe8>
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d063      	beq.n	8005086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fbe:	4b65      	ldr	r3, [pc, #404]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fca:	4b62      	ldr	r3, [pc, #392]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d11c      	bne.n	8005010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fd6:	4b5f      	ldr	r3, [pc, #380]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d116      	bne.n	8005010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe2:	4b5c      	ldr	r3, [pc, #368]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_RCC_OscConfig+0x152>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e1c4      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffa:	4b56      	ldr	r3, [pc, #344]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4952      	ldr	r1, [pc, #328]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500e:	e03a      	b.n	8005086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005018:	4b4f      	ldr	r3, [pc, #316]	; (8005158 <HAL_RCC_OscConfig+0x2b0>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fd febb 	bl	8002d98 <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005026:	f7fd feb7 	bl	8002d98 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e1a5      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005038:	4b46      	ldr	r3, [pc, #280]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	4b43      	ldr	r3, [pc, #268]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4940      	ldr	r1, [pc, #256]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005054:	4313      	orrs	r3, r2
 8005056:	600b      	str	r3, [r1, #0]
 8005058:	e015      	b.n	8005086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800505a:	4b3f      	ldr	r3, [pc, #252]	; (8005158 <HAL_RCC_OscConfig+0x2b0>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005060:	f7fd fe9a 	bl	8002d98 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005068:	f7fd fe96 	bl	8002d98 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e184      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800507a:	4b36      	ldr	r3, [pc, #216]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d030      	beq.n	80050f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509a:	4b30      	ldr	r3, [pc, #192]	; (800515c <HAL_RCC_OscConfig+0x2b4>)
 800509c:	2201      	movs	r2, #1
 800509e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fd fe7a 	bl	8002d98 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a8:	f7fd fe76 	bl	8002d98 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e164      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ba:	4b26      	ldr	r3, [pc, #152]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 80050bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x200>
 80050c6:	e015      	b.n	80050f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c8:	4b24      	ldr	r3, [pc, #144]	; (800515c <HAL_RCC_OscConfig+0x2b4>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ce:	f7fd fe63 	bl	8002d98 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d6:	f7fd fe5f 	bl	8002d98 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e14d      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e8:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 80050ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f0      	bne.n	80050d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80a0 	beq.w	8005242 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005106:	4b13      	ldr	r3, [pc, #76]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10f      	bne.n	8005132 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	4a0e      	ldr	r2, [pc, #56]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800511c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005120:	6413      	str	r3, [r2, #64]	; 0x40
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512a:	60bb      	str	r3, [r7, #8]
 800512c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800512e:	2301      	movs	r3, #1
 8005130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCC_OscConfig+0x2b8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d121      	bne.n	8005182 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800513e:	4b08      	ldr	r3, [pc, #32]	; (8005160 <HAL_RCC_OscConfig+0x2b8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a07      	ldr	r2, [pc, #28]	; (8005160 <HAL_RCC_OscConfig+0x2b8>)
 8005144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800514a:	f7fd fe25 	bl	8002d98 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005150:	e011      	b.n	8005176 <HAL_RCC_OscConfig+0x2ce>
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800
 8005158:	42470000 	.word	0x42470000
 800515c:	42470e80 	.word	0x42470e80
 8005160:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005164:	f7fd fe18 	bl	8002d98 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e106      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005176:	4b85      	ldr	r3, [pc, #532]	; (800538c <HAL_RCC_OscConfig+0x4e4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d106      	bne.n	8005198 <HAL_RCC_OscConfig+0x2f0>
 800518a:	4b81      	ldr	r3, [pc, #516]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	4a80      	ldr	r2, [pc, #512]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6713      	str	r3, [r2, #112]	; 0x70
 8005196:	e01c      	b.n	80051d2 <HAL_RCC_OscConfig+0x32a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b05      	cmp	r3, #5
 800519e:	d10c      	bne.n	80051ba <HAL_RCC_OscConfig+0x312>
 80051a0:	4b7b      	ldr	r3, [pc, #492]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a4:	4a7a      	ldr	r2, [pc, #488]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	6713      	str	r3, [r2, #112]	; 0x70
 80051ac:	4b78      	ldr	r3, [pc, #480]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b0:	4a77      	ldr	r2, [pc, #476]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	6713      	str	r3, [r2, #112]	; 0x70
 80051b8:	e00b      	b.n	80051d2 <HAL_RCC_OscConfig+0x32a>
 80051ba:	4b75      	ldr	r3, [pc, #468]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	4a74      	ldr	r2, [pc, #464]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	6713      	str	r3, [r2, #112]	; 0x70
 80051c6:	4b72      	ldr	r3, [pc, #456]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ca:	4a71      	ldr	r2, [pc, #452]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051cc:	f023 0304 	bic.w	r3, r3, #4
 80051d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d015      	beq.n	8005206 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051da:	f7fd fddd 	bl	8002d98 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e0:	e00a      	b.n	80051f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7fd fdd9 	bl	8002d98 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e0c5      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f8:	4b65      	ldr	r3, [pc, #404]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ee      	beq.n	80051e2 <HAL_RCC_OscConfig+0x33a>
 8005204:	e014      	b.n	8005230 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005206:	f7fd fdc7 	bl	8002d98 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520c:	e00a      	b.n	8005224 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fd fdc3 	bl	8002d98 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	; 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e0af      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005224:	4b5a      	ldr	r3, [pc, #360]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1ee      	bne.n	800520e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d105      	bne.n	8005242 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005236:	4b56      	ldr	r3, [pc, #344]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	4a55      	ldr	r2, [pc, #340]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 800523c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 809b 	beq.w	8005382 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800524c:	4b50      	ldr	r3, [pc, #320]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 030c 	and.w	r3, r3, #12
 8005254:	2b08      	cmp	r3, #8
 8005256:	d05c      	beq.n	8005312 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b02      	cmp	r3, #2
 800525e:	d141      	bne.n	80052e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005260:	4b4c      	ldr	r3, [pc, #304]	; (8005394 <HAL_RCC_OscConfig+0x4ec>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005266:	f7fd fd97 	bl	8002d98 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800526e:	f7fd fd93 	bl	8002d98 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e081      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005280:	4b43      	ldr	r3, [pc, #268]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f0      	bne.n	800526e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	019b      	lsls	r3, r3, #6
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	3b01      	subs	r3, #1
 80052a6:	041b      	lsls	r3, r3, #16
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	061b      	lsls	r3, r3, #24
 80052b0:	4937      	ldr	r1, [pc, #220]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b6:	4b37      	ldr	r3, [pc, #220]	; (8005394 <HAL_RCC_OscConfig+0x4ec>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fd fd6c 	bl	8002d98 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c4:	f7fd fd68 	bl	8002d98 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e056      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d6:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0x41c>
 80052e2:	e04e      	b.n	8005382 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e4:	4b2b      	ldr	r3, [pc, #172]	; (8005394 <HAL_RCC_OscConfig+0x4ec>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ea:	f7fd fd55 	bl	8002d98 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f2:	f7fd fd51 	bl	8002d98 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e03f      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005304:	4b22      	ldr	r3, [pc, #136]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f0      	bne.n	80052f2 <HAL_RCC_OscConfig+0x44a>
 8005310:	e037      	b.n	8005382 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e032      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800531e:	4b1c      	ldr	r3, [pc, #112]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d028      	beq.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d121      	bne.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005344:	429a      	cmp	r2, r3
 8005346:	d11a      	bne.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800534e:	4013      	ands	r3, r2
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005354:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005356:	4293      	cmp	r3, r2
 8005358:	d111      	bne.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	085b      	lsrs	r3, r3, #1
 8005366:	3b01      	subs	r3, #1
 8005368:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800536a:	429a      	cmp	r2, r3
 800536c:	d107      	bne.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800537a:	429a      	cmp	r2, r3
 800537c:	d001      	beq.n	8005382 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40007000 	.word	0x40007000
 8005390:	40023800 	.word	0x40023800
 8005394:	42470060 	.word	0x42470060

08005398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0cc      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053ac:	4b68      	ldr	r3, [pc, #416]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d90c      	bls.n	80053d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ba:	4b65      	ldr	r3, [pc, #404]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c2:	4b63      	ldr	r3, [pc, #396]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0b8      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d020      	beq.n	8005422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053ec:	4b59      	ldr	r3, [pc, #356]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a58      	ldr	r2, [pc, #352]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005404:	4b53      	ldr	r3, [pc, #332]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	4a52      	ldr	r2, [pc, #328]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800540e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005410:	4b50      	ldr	r3, [pc, #320]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	494d      	ldr	r1, [pc, #308]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	4313      	orrs	r3, r2
 8005420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d044      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d107      	bne.n	8005446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005436:	4b47      	ldr	r3, [pc, #284]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d119      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e07f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d003      	beq.n	8005456 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005452:	2b03      	cmp	r3, #3
 8005454:	d107      	bne.n	8005466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005456:	4b3f      	ldr	r3, [pc, #252]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e06f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005466:	4b3b      	ldr	r3, [pc, #236]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e067      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005476:	4b37      	ldr	r3, [pc, #220]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f023 0203 	bic.w	r2, r3, #3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	4934      	ldr	r1, [pc, #208]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	4313      	orrs	r3, r2
 8005486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005488:	f7fd fc86 	bl	8002d98 <HAL_GetTick>
 800548c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	e00a      	b.n	80054a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005490:	f7fd fc82 	bl	8002d98 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	f241 3288 	movw	r2, #5000	; 0x1388
 800549e:	4293      	cmp	r3, r2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e04f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054a6:	4b2b      	ldr	r3, [pc, #172]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 020c 	and.w	r2, r3, #12
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d1eb      	bne.n	8005490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054b8:	4b25      	ldr	r3, [pc, #148]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d20c      	bcs.n	80054e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c6:	4b22      	ldr	r3, [pc, #136]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	4b20      	ldr	r3, [pc, #128]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e032      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ec:	4b19      	ldr	r3, [pc, #100]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4916      	ldr	r1, [pc, #88]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d009      	beq.n	800551e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800550a:	4b12      	ldr	r3, [pc, #72]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	490e      	ldr	r1, [pc, #56]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800551e:	f000 f889 	bl	8005634 <HAL_RCC_GetSysClockFreq>
 8005522:	4602      	mov	r2, r0
 8005524:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	490a      	ldr	r1, [pc, #40]	; (8005558 <HAL_RCC_ClockConfig+0x1c0>)
 8005530:	5ccb      	ldrb	r3, [r1, r3]
 8005532:	fa22 f303 	lsr.w	r3, r2, r3
 8005536:	4a09      	ldr	r2, [pc, #36]	; (800555c <HAL_RCC_ClockConfig+0x1c4>)
 8005538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800553a:	4b09      	ldr	r3, [pc, #36]	; (8005560 <HAL_RCC_ClockConfig+0x1c8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fd f840 	bl	80025c4 <HAL_InitTick>

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40023c00 	.word	0x40023c00
 8005554:	40023800 	.word	0x40023800
 8005558:	0801ccf4 	.word	0x0801ccf4
 800555c:	20000094 	.word	0x20000094
 8005560:	20000098 	.word	0x20000098

08005564 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08c      	sub	sp, #48	; 0x30
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d129      	bne.n	80055ca <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005576:	2300      	movs	r3, #0
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <HAL_RCC_MCOConfig+0xc4>)
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	4a2a      	ldr	r2, [pc, #168]	; (8005628 <HAL_RCC_MCOConfig+0xc4>)
 8005580:	f043 0301 	orr.w	r3, r3, #1
 8005584:	6313      	str	r3, [r2, #48]	; 0x30
 8005586:	4b28      	ldr	r3, [pc, #160]	; (8005628 <HAL_RCC_MCOConfig+0xc4>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005598:	2302      	movs	r3, #2
 800559a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800559c:	2303      	movs	r3, #3
 800559e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80055a4:	2300      	movs	r3, #0
 80055a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80055a8:	f107 031c 	add.w	r3, r7, #28
 80055ac:	4619      	mov	r1, r3
 80055ae:	481f      	ldr	r0, [pc, #124]	; (800562c <HAL_RCC_MCOConfig+0xc8>)
 80055b0:	f7ff faac 	bl	8004b0c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80055b4:	4b1c      	ldr	r3, [pc, #112]	; (8005628 <HAL_RCC_MCOConfig+0xc4>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	430b      	orrs	r3, r1
 80055c2:	4919      	ldr	r1, [pc, #100]	; (8005628 <HAL_RCC_MCOConfig+0xc4>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80055c8:	e029      	b.n	800561e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	4b16      	ldr	r3, [pc, #88]	; (8005628 <HAL_RCC_MCOConfig+0xc4>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	4a15      	ldr	r2, [pc, #84]	; (8005628 <HAL_RCC_MCOConfig+0xc4>)
 80055d4:	f043 0304 	orr.w	r3, r3, #4
 80055d8:	6313      	str	r3, [r2, #48]	; 0x30
 80055da:	4b13      	ldr	r3, [pc, #76]	; (8005628 <HAL_RCC_MCOConfig+0xc4>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80055e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ec:	2302      	movs	r3, #2
 80055ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f0:	2303      	movs	r3, #3
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80055f8:	2300      	movs	r3, #0
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80055fc:	f107 031c 	add.w	r3, r7, #28
 8005600:	4619      	mov	r1, r3
 8005602:	480b      	ldr	r0, [pc, #44]	; (8005630 <HAL_RCC_MCOConfig+0xcc>)
 8005604:	f7ff fa82 	bl	8004b0c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005608:	4b07      	ldr	r3, [pc, #28]	; (8005628 <HAL_RCC_MCOConfig+0xc4>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	00d9      	lsls	r1, r3, #3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	430b      	orrs	r3, r1
 8005618:	4903      	ldr	r1, [pc, #12]	; (8005628 <HAL_RCC_MCOConfig+0xc4>)
 800561a:	4313      	orrs	r3, r2
 800561c:	608b      	str	r3, [r1, #8]
}
 800561e:	bf00      	nop
 8005620:	3730      	adds	r7, #48	; 0x30
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40023800 	.word	0x40023800
 800562c:	40020000 	.word	0x40020000
 8005630:	40020800 	.word	0x40020800

08005634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005634:	b5b0      	push	{r4, r5, r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800563a:	2100      	movs	r1, #0
 800563c:	6079      	str	r1, [r7, #4]
 800563e:	2100      	movs	r1, #0
 8005640:	60f9      	str	r1, [r7, #12]
 8005642:	2100      	movs	r1, #0
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005646:	2100      	movs	r1, #0
 8005648:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800564a:	4952      	ldr	r1, [pc, #328]	; (8005794 <HAL_RCC_GetSysClockFreq+0x160>)
 800564c:	6889      	ldr	r1, [r1, #8]
 800564e:	f001 010c 	and.w	r1, r1, #12
 8005652:	2908      	cmp	r1, #8
 8005654:	d00d      	beq.n	8005672 <HAL_RCC_GetSysClockFreq+0x3e>
 8005656:	2908      	cmp	r1, #8
 8005658:	f200 8094 	bhi.w	8005784 <HAL_RCC_GetSysClockFreq+0x150>
 800565c:	2900      	cmp	r1, #0
 800565e:	d002      	beq.n	8005666 <HAL_RCC_GetSysClockFreq+0x32>
 8005660:	2904      	cmp	r1, #4
 8005662:	d003      	beq.n	800566c <HAL_RCC_GetSysClockFreq+0x38>
 8005664:	e08e      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005666:	4b4c      	ldr	r3, [pc, #304]	; (8005798 <HAL_RCC_GetSysClockFreq+0x164>)
 8005668:	60bb      	str	r3, [r7, #8]
       break;
 800566a:	e08e      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800566c:	4b4b      	ldr	r3, [pc, #300]	; (800579c <HAL_RCC_GetSysClockFreq+0x168>)
 800566e:	60bb      	str	r3, [r7, #8]
      break;
 8005670:	e08b      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005672:	4948      	ldr	r1, [pc, #288]	; (8005794 <HAL_RCC_GetSysClockFreq+0x160>)
 8005674:	6849      	ldr	r1, [r1, #4]
 8005676:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800567a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800567c:	4945      	ldr	r1, [pc, #276]	; (8005794 <HAL_RCC_GetSysClockFreq+0x160>)
 800567e:	6849      	ldr	r1, [r1, #4]
 8005680:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005684:	2900      	cmp	r1, #0
 8005686:	d024      	beq.n	80056d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005688:	4942      	ldr	r1, [pc, #264]	; (8005794 <HAL_RCC_GetSysClockFreq+0x160>)
 800568a:	6849      	ldr	r1, [r1, #4]
 800568c:	0989      	lsrs	r1, r1, #6
 800568e:	4608      	mov	r0, r1
 8005690:	f04f 0100 	mov.w	r1, #0
 8005694:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005698:	f04f 0500 	mov.w	r5, #0
 800569c:	ea00 0204 	and.w	r2, r0, r4
 80056a0:	ea01 0305 	and.w	r3, r1, r5
 80056a4:	493d      	ldr	r1, [pc, #244]	; (800579c <HAL_RCC_GetSysClockFreq+0x168>)
 80056a6:	fb01 f003 	mul.w	r0, r1, r3
 80056aa:	2100      	movs	r1, #0
 80056ac:	fb01 f102 	mul.w	r1, r1, r2
 80056b0:	1844      	adds	r4, r0, r1
 80056b2:	493a      	ldr	r1, [pc, #232]	; (800579c <HAL_RCC_GetSysClockFreq+0x168>)
 80056b4:	fba2 0101 	umull	r0, r1, r2, r1
 80056b8:	1863      	adds	r3, r4, r1
 80056ba:	4619      	mov	r1, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	461a      	mov	r2, r3
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	f7fa fdd4 	bl	8000270 <__aeabi_uldivmod>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4613      	mov	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	e04a      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d2:	4b30      	ldr	r3, [pc, #192]	; (8005794 <HAL_RCC_GetSysClockFreq+0x160>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	461a      	mov	r2, r3
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80056e2:	f04f 0100 	mov.w	r1, #0
 80056e6:	ea02 0400 	and.w	r4, r2, r0
 80056ea:	ea03 0501 	and.w	r5, r3, r1
 80056ee:	4620      	mov	r0, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	014b      	lsls	r3, r1, #5
 80056fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005700:	0142      	lsls	r2, r0, #5
 8005702:	4610      	mov	r0, r2
 8005704:	4619      	mov	r1, r3
 8005706:	1b00      	subs	r0, r0, r4
 8005708:	eb61 0105 	sbc.w	r1, r1, r5
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	018b      	lsls	r3, r1, #6
 8005716:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800571a:	0182      	lsls	r2, r0, #6
 800571c:	1a12      	subs	r2, r2, r0
 800571e:	eb63 0301 	sbc.w	r3, r3, r1
 8005722:	f04f 0000 	mov.w	r0, #0
 8005726:	f04f 0100 	mov.w	r1, #0
 800572a:	00d9      	lsls	r1, r3, #3
 800572c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005730:	00d0      	lsls	r0, r2, #3
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	1912      	adds	r2, r2, r4
 8005738:	eb45 0303 	adc.w	r3, r5, r3
 800573c:	f04f 0000 	mov.w	r0, #0
 8005740:	f04f 0100 	mov.w	r1, #0
 8005744:	0299      	lsls	r1, r3, #10
 8005746:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800574a:	0290      	lsls	r0, r2, #10
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4610      	mov	r0, r2
 8005752:	4619      	mov	r1, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	461a      	mov	r2, r3
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	f7fa fd88 	bl	8000270 <__aeabi_uldivmod>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4613      	mov	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <HAL_RCC_GetSysClockFreq+0x160>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	0c1b      	lsrs	r3, r3, #16
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	3301      	adds	r3, #1
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005780:	60bb      	str	r3, [r7, #8]
      break;
 8005782:	e002      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005784:	4b04      	ldr	r3, [pc, #16]	; (8005798 <HAL_RCC_GetSysClockFreq+0x164>)
 8005786:	60bb      	str	r3, [r7, #8]
      break;
 8005788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800578a:	68bb      	ldr	r3, [r7, #8]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bdb0      	pop	{r4, r5, r7, pc}
 8005794:	40023800 	.word	0x40023800
 8005798:	00f42400 	.word	0x00f42400
 800579c:	017d7840 	.word	0x017d7840

080057a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057a4:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057a6:	681b      	ldr	r3, [r3, #0]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	20000094 	.word	0x20000094

080057b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057bc:	f7ff fff0 	bl	80057a0 <HAL_RCC_GetHCLKFreq>
 80057c0:	4602      	mov	r2, r0
 80057c2:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	0a9b      	lsrs	r3, r3, #10
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	4903      	ldr	r1, [pc, #12]	; (80057dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ce:	5ccb      	ldrb	r3, [r1, r3]
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40023800 	.word	0x40023800
 80057dc:	0801cd04 	.word	0x0801cd04

080057e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057e4:	f7ff ffdc 	bl	80057a0 <HAL_RCC_GetHCLKFreq>
 80057e8:	4602      	mov	r2, r0
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	0b5b      	lsrs	r3, r3, #13
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	4903      	ldr	r1, [pc, #12]	; (8005804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057f6:	5ccb      	ldrb	r3, [r1, r3]
 80057f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40023800 	.word	0x40023800
 8005804:	0801cd04 	.word	0x0801cd04

08005808 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	220f      	movs	r2, #15
 8005816:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005818:	4b12      	ldr	r3, [pc, #72]	; (8005864 <HAL_RCC_GetClockConfig+0x5c>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0203 	and.w	r2, r3, #3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005824:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <HAL_RCC_GetClockConfig+0x5c>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <HAL_RCC_GetClockConfig+0x5c>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800583c:	4b09      	ldr	r3, [pc, #36]	; (8005864 <HAL_RCC_GetClockConfig+0x5c>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	08db      	lsrs	r3, r3, #3
 8005842:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800584a:	4b07      	ldr	r3, [pc, #28]	; (8005868 <HAL_RCC_GetClockConfig+0x60>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0207 	and.w	r2, r3, #7
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	601a      	str	r2, [r3, #0]
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40023800 	.word	0x40023800
 8005868:	40023c00 	.word	0x40023c00

0800586c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e041      	b.n	8005902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f839 	bl	800590a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f000 f9d8 	bl	8005c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d001      	beq.n	8005938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e04e      	b.n	80059d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a23      	ldr	r2, [pc, #140]	; (80059e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d022      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005962:	d01d      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d018      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1e      	ldr	r2, [pc, #120]	; (80059ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d013      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00e      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1b      	ldr	r2, [pc, #108]	; (80059f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d009      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a19      	ldr	r2, [pc, #100]	; (80059f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a18      	ldr	r2, [pc, #96]	; (80059fc <HAL_TIM_Base_Start_IT+0xdc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d111      	bne.n	80059c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b06      	cmp	r3, #6
 80059b0:	d010      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0201 	orr.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c2:	e007      	b.n	80059d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40000400 	.word	0x40000400
 80059ec:	40000800 	.word	0x40000800
 80059f0:	40000c00 	.word	0x40000c00
 80059f4:	40010400 	.word	0x40010400
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40001800 	.word	0x40001800

08005a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d122      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d11b      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0202 	mvn.w	r2, #2
 8005a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f8ee 	bl	8005c24 <HAL_TIM_IC_CaptureCallback>
 8005a48:	e005      	b.n	8005a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f8e0 	bl	8005c10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f8f1 	bl	8005c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d122      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d11b      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0204 	mvn.w	r2, #4
 8005a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2202      	movs	r2, #2
 8005a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f8c4 	bl	8005c24 <HAL_TIM_IC_CaptureCallback>
 8005a9c:	e005      	b.n	8005aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f8b6 	bl	8005c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f8c7 	bl	8005c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d122      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d11b      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f06f 0208 	mvn.w	r2, #8
 8005ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2204      	movs	r2, #4
 8005ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f89a 	bl	8005c24 <HAL_TIM_IC_CaptureCallback>
 8005af0:	e005      	b.n	8005afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f88c 	bl	8005c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f89d 	bl	8005c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b10      	cmp	r3, #16
 8005b10:	d122      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d11b      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f06f 0210 	mvn.w	r2, #16
 8005b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f870 	bl	8005c24 <HAL_TIM_IC_CaptureCallback>
 8005b44:	e005      	b.n	8005b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f862 	bl	8005c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f873 	bl	8005c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d10e      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d107      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0201 	mvn.w	r2, #1
 8005b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fb ffa8 	bl	8001ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b80      	cmp	r3, #128	; 0x80
 8005b90:	d10e      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9c:	2b80      	cmp	r3, #128	; 0x80
 8005b9e:	d107      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f902 	bl	8005db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b40      	cmp	r3, #64	; 0x40
 8005bbc:	d10e      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc8:	2b40      	cmp	r3, #64	; 0x40
 8005bca:	d107      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f838 	bl	8005c4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	d10e      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	d107      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0220 	mvn.w	r2, #32
 8005c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f8cc 	bl	8005da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c08:	bf00      	nop
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a40      	ldr	r2, [pc, #256]	; (8005d74 <TIM_Base_SetConfig+0x114>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d013      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7e:	d00f      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a3d      	ldr	r2, [pc, #244]	; (8005d78 <TIM_Base_SetConfig+0x118>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00b      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a3c      	ldr	r2, [pc, #240]	; (8005d7c <TIM_Base_SetConfig+0x11c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a3b      	ldr	r2, [pc, #236]	; (8005d80 <TIM_Base_SetConfig+0x120>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a3a      	ldr	r2, [pc, #232]	; (8005d84 <TIM_Base_SetConfig+0x124>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d108      	bne.n	8005cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2f      	ldr	r2, [pc, #188]	; (8005d74 <TIM_Base_SetConfig+0x114>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d02b      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc0:	d027      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a2c      	ldr	r2, [pc, #176]	; (8005d78 <TIM_Base_SetConfig+0x118>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d023      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2b      	ldr	r2, [pc, #172]	; (8005d7c <TIM_Base_SetConfig+0x11c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d01f      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a2a      	ldr	r2, [pc, #168]	; (8005d80 <TIM_Base_SetConfig+0x120>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01b      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a29      	ldr	r2, [pc, #164]	; (8005d84 <TIM_Base_SetConfig+0x124>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d017      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a28      	ldr	r2, [pc, #160]	; (8005d88 <TIM_Base_SetConfig+0x128>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d013      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a27      	ldr	r2, [pc, #156]	; (8005d8c <TIM_Base_SetConfig+0x12c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00f      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a26      	ldr	r2, [pc, #152]	; (8005d90 <TIM_Base_SetConfig+0x130>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00b      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a25      	ldr	r2, [pc, #148]	; (8005d94 <TIM_Base_SetConfig+0x134>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d007      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a24      	ldr	r2, [pc, #144]	; (8005d98 <TIM_Base_SetConfig+0x138>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d003      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a23      	ldr	r2, [pc, #140]	; (8005d9c <TIM_Base_SetConfig+0x13c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d108      	bne.n	8005d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a0a      	ldr	r2, [pc, #40]	; (8005d74 <TIM_Base_SetConfig+0x114>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d003      	beq.n	8005d58 <TIM_Base_SetConfig+0xf8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a0c      	ldr	r2, [pc, #48]	; (8005d84 <TIM_Base_SetConfig+0x124>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d103      	bne.n	8005d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	615a      	str	r2, [r3, #20]
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40010400 	.word	0x40010400
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400
 8005d90:	40014800 	.word	0x40014800
 8005d94:	40001800 	.word	0x40001800
 8005d98:	40001c00 	.word	0x40001c00
 8005d9c:	40002000 	.word	0x40002000

08005da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e03f      	b.n	8005e5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fc faf6 	bl	80023e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2224      	movs	r2, #36	; 0x24
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 ff97 	bl	8006d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695a      	ldr	r2, [r3, #20]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b08a      	sub	sp, #40	; 0x28
 8005e66:	af02      	add	r7, sp, #8
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	603b      	str	r3, [r7, #0]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d17c      	bne.n	8005f7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <HAL_UART_Transmit+0x2c>
 8005e88:	88fb      	ldrh	r3, [r7, #6]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e075      	b.n	8005f7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_UART_Transmit+0x3e>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e06e      	b.n	8005f7e <HAL_UART_Transmit+0x11c>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2221      	movs	r2, #33	; 0x21
 8005eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eb6:	f7fc ff6f 	bl	8002d98 <HAL_GetTick>
 8005eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	88fa      	ldrh	r2, [r7, #6]
 8005ec0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	88fa      	ldrh	r2, [r7, #6]
 8005ec6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed0:	d108      	bne.n	8005ee4 <HAL_UART_Transmit+0x82>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d104      	bne.n	8005ee4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	e003      	b.n	8005eec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ef4:	e02a      	b.n	8005f4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2180      	movs	r1, #128	; 0x80
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 fc53 	bl	80067ac <UART_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e036      	b.n	8005f7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10b      	bne.n	8005f2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	3302      	adds	r3, #2
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e007      	b.n	8005f3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	781a      	ldrb	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1cf      	bne.n	8005ef6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2140      	movs	r1, #64	; 0x40
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 fc23 	bl	80067ac <UART_WaitOnFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e006      	b.n	8005f7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e000      	b.n	8005f7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f7c:	2302      	movs	r3, #2
  }
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3720      	adds	r7, #32
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b08c      	sub	sp, #48	; 0x30
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	4613      	mov	r3, r2
 8005f92:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d152      	bne.n	8006046 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e04b      	b.n	8006048 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e044      	b.n	8006048 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005fcc:	88fb      	ldrh	r3, [r7, #6]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	68b9      	ldr	r1, [r7, #8]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 fc58 	bl	8006888 <UART_Start_Receive_DMA>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005fde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d12c      	bne.n	8006040 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d125      	bne.n	800603a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	330c      	adds	r3, #12
 800600a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	617b      	str	r3, [r7, #20]
   return(result);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f043 0310 	orr.w	r3, r3, #16
 800601a:	62bb      	str	r3, [r7, #40]	; 0x28
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006024:	627a      	str	r2, [r7, #36]	; 0x24
 8006026:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	6a39      	ldr	r1, [r7, #32]
 800602a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800602c:	e841 2300 	strex	r3, r2, [r1]
 8006030:	61fb      	str	r3, [r7, #28]
   return(result);
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e5      	bne.n	8006004 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006038:	e002      	b.n	8006040 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006044:	e000      	b.n	8006048 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006046:	2302      	movs	r3, #2
  }
}
 8006048:	4618      	mov	r0, r3
 800604a:	3730      	adds	r7, #48	; 0x30
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b0ba      	sub	sp, #232	; 0xe8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006076:	2300      	movs	r3, #0
 8006078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800607c:	2300      	movs	r3, #0
 800607e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800608e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10f      	bne.n	80060b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d009      	beq.n	80060b6 <HAL_UART_IRQHandler+0x66>
 80060a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fd8b 	bl	8006bca <UART_Receive_IT>
      return;
 80060b4:	e256      	b.n	8006564 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80de 	beq.w	800627c <HAL_UART_IRQHandler+0x22c>
 80060c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d106      	bne.n	80060da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 80d1 	beq.w	800627c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00b      	beq.n	80060fe <HAL_UART_IRQHandler+0xae>
 80060e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	f043 0201 	orr.w	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <HAL_UART_IRQHandler+0xd2>
 800610a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	f043 0202 	orr.w	r2, r3, #2
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00b      	beq.n	8006146 <HAL_UART_IRQHandler+0xf6>
 800612e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	f043 0204 	orr.w	r2, r3, #4
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d011      	beq.n	8006176 <HAL_UART_IRQHandler+0x126>
 8006152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	d105      	bne.n	800616a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800615e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	f043 0208 	orr.w	r2, r3, #8
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 81ed 	beq.w	800655a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b00      	cmp	r3, #0
 800618a:	d008      	beq.n	800619e <HAL_UART_IRQHandler+0x14e>
 800618c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fd16 	bl	8006bca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	bf0c      	ite	eq
 80061ac:	2301      	moveq	r3, #1
 80061ae:	2300      	movne	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d103      	bne.n	80061ca <HAL_UART_IRQHandler+0x17a>
 80061c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d04f      	beq.n	800626a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fc1e 	bl	8006a0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d141      	bne.n	8006262 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3314      	adds	r3, #20
 80061e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3314      	adds	r3, #20
 8006206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800620a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800620e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1d9      	bne.n	80061de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622e:	2b00      	cmp	r3, #0
 8006230:	d013      	beq.n	800625a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	4a7d      	ldr	r2, [pc, #500]	; (800642c <HAL_UART_IRQHandler+0x3dc>)
 8006238:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	4618      	mov	r0, r3
 8006240:	f7fd f832 	bl	80032a8 <HAL_DMA_Abort_IT>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d016      	beq.n	8006278 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006254:	4610      	mov	r0, r2
 8006256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006258:	e00e      	b.n	8006278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f9a4 	bl	80065a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006260:	e00a      	b.n	8006278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f9a0 	bl	80065a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006268:	e006      	b.n	8006278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f99c 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006276:	e170      	b.n	800655a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006278:	bf00      	nop
    return;
 800627a:	e16e      	b.n	800655a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	2b01      	cmp	r3, #1
 8006282:	f040 814a 	bne.w	800651a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628a:	f003 0310 	and.w	r3, r3, #16
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 8143 	beq.w	800651a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 813c 	beq.w	800651a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062a2:	2300      	movs	r3, #0
 80062a4:	60bb      	str	r3, [r7, #8]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c2:	2b40      	cmp	r3, #64	; 0x40
 80062c4:	f040 80b4 	bne.w	8006430 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 8140 	beq.w	800655e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062e6:	429a      	cmp	r2, r3
 80062e8:	f080 8139 	bcs.w	800655e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062fe:	f000 8088 	beq.w	8006412 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	330c      	adds	r3, #12
 8006308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800631c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	330c      	adds	r3, #12
 800632a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800632e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800633a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1d9      	bne.n	8006302 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3314      	adds	r3, #20
 8006354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006358:	e853 3f00 	ldrex	r3, [r3]
 800635c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800635e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006360:	f023 0301 	bic.w	r3, r3, #1
 8006364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3314      	adds	r3, #20
 800636e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006376:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800637a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e1      	bne.n	800634e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3314      	adds	r3, #20
 8006390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800639a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800639c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3314      	adds	r3, #20
 80063aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e3      	bne.n	800638a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	330c      	adds	r3, #12
 80063d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e2:	f023 0310 	bic.w	r3, r3, #16
 80063e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80063f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e3      	bne.n	80063d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	4618      	mov	r0, r3
 800640e:	f7fc fedb 	bl	80031c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800641a:	b29b      	uxth	r3, r3
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	b29b      	uxth	r3, r3
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fc fae6 	bl	80029f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006428:	e099      	b.n	800655e <HAL_UART_IRQHandler+0x50e>
 800642a:	bf00      	nop
 800642c:	08006ad3 	.word	0x08006ad3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006438:	b29b      	uxth	r3, r3
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006444:	b29b      	uxth	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 808b 	beq.w	8006562 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800644c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8086 	beq.w	8006562 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	330c      	adds	r3, #12
 800645c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800646c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	330c      	adds	r3, #12
 8006476:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800647a:	647a      	str	r2, [r7, #68]	; 0x44
 800647c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e3      	bne.n	8006456 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3314      	adds	r3, #20
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	623b      	str	r3, [r7, #32]
   return(result);
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	f023 0301 	bic.w	r3, r3, #1
 80064a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3314      	adds	r3, #20
 80064ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064b2:	633a      	str	r2, [r7, #48]	; 0x30
 80064b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e3      	bne.n	800648e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	330c      	adds	r3, #12
 80064da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0310 	bic.w	r3, r3, #16
 80064ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	330c      	adds	r3, #12
 80064f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80064f8:	61fa      	str	r2, [r7, #28]
 80064fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	69b9      	ldr	r1, [r7, #24]
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	617b      	str	r3, [r7, #20]
   return(result);
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e3      	bne.n	80064d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800650c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fc fa6e 	bl	80029f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006518:	e023      	b.n	8006562 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800651a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <HAL_UART_IRQHandler+0x4ea>
 8006526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fae1 	bl	8006afa <UART_Transmit_IT>
    return;
 8006538:	e014      	b.n	8006564 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00e      	beq.n	8006564 <HAL_UART_IRQHandler+0x514>
 8006546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fb21 	bl	8006b9a <UART_EndTransmit_IT>
    return;
 8006558:	e004      	b.n	8006564 <HAL_UART_IRQHandler+0x514>
    return;
 800655a:	bf00      	nop
 800655c:	e002      	b.n	8006564 <HAL_UART_IRQHandler+0x514>
      return;
 800655e:	bf00      	nop
 8006560:	e000      	b.n	8006564 <HAL_UART_IRQHandler+0x514>
      return;
 8006562:	bf00      	nop
  }
}
 8006564:	37e8      	adds	r7, #232	; 0xe8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop

0800656c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b09c      	sub	sp, #112	; 0x70
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d172      	bne.n	80066be <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80065d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065da:	2200      	movs	r2, #0
 80065dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	330c      	adds	r3, #12
 80065e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80065f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8006600:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006604:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800660c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e5      	bne.n	80065de <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	667b      	str	r3, [r7, #100]	; 0x64
 800662a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3314      	adds	r3, #20
 8006630:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006632:	647a      	str	r2, [r7, #68]	; 0x44
 8006634:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006636:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800663a:	e841 2300 	strex	r3, r2, [r1]
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e5      	bne.n	8006612 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3314      	adds	r3, #20
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	623b      	str	r3, [r7, #32]
   return(result);
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800665c:	663b      	str	r3, [r7, #96]	; 0x60
 800665e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3314      	adds	r3, #20
 8006664:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006666:	633a      	str	r2, [r7, #48]	; 0x30
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800666c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e5      	bne.n	8006646 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800667a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667c:	2220      	movs	r2, #32
 800667e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	2b01      	cmp	r3, #1
 8006688:	d119      	bne.n	80066be <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	330c      	adds	r3, #12
 8006690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	60fb      	str	r3, [r7, #12]
   return(result);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f023 0310 	bic.w	r3, r3, #16
 80066a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	330c      	adds	r3, #12
 80066a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066aa:	61fa      	str	r2, [r7, #28]
 80066ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	69b9      	ldr	r1, [r7, #24]
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	617b      	str	r3, [r7, #20]
   return(result);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e5      	bne.n	800668a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d106      	bne.n	80066d4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066ca:	4619      	mov	r1, r3
 80066cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066ce:	f7fc f991 	bl	80029f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066d2:	e002      	b.n	80066da <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80066d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066d6:	f7ff ff53 	bl	8006580 <HAL_UART_RxCpltCallback>
}
 80066da:	bf00      	nop
 80066dc:	3770      	adds	r7, #112	; 0x70
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d108      	bne.n	800670a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066fc:	085b      	lsrs	r3, r3, #1
 80066fe:	b29b      	uxth	r3, r3
 8006700:	4619      	mov	r1, r3
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7fc f976 	bl	80029f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006708:	e002      	b.n	8006710 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff ff42 	bl	8006594 <HAL_UART_RxHalfCpltCallback>
}
 8006710:	bf00      	nop
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006734:	2b80      	cmp	r3, #128	; 0x80
 8006736:	bf0c      	ite	eq
 8006738:	2301      	moveq	r3, #1
 800673a:	2300      	movne	r3, #0
 800673c:	b2db      	uxtb	r3, r3
 800673e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b21      	cmp	r3, #33	; 0x21
 800674a:	d108      	bne.n	800675e <UART_DMAError+0x46>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d005      	beq.n	800675e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2200      	movs	r2, #0
 8006756:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006758:	68b8      	ldr	r0, [r7, #8]
 800675a:	f000 f92f 	bl	80069bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006768:	2b40      	cmp	r3, #64	; 0x40
 800676a:	bf0c      	ite	eq
 800676c:	2301      	moveq	r3, #1
 800676e:	2300      	movne	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b22      	cmp	r3, #34	; 0x22
 800677e:	d108      	bne.n	8006792 <UART_DMAError+0x7a>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2200      	movs	r2, #0
 800678a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800678c:	68b8      	ldr	r0, [r7, #8]
 800678e:	f000 f93d 	bl	8006a0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	f043 0210 	orr.w	r2, r3, #16
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800679e:	68b8      	ldr	r0, [r7, #8]
 80067a0:	f7ff ff02 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067a4:	bf00      	nop
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b090      	sub	sp, #64	; 0x40
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	4613      	mov	r3, r2
 80067ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067bc:	e050      	b.n	8006860 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c4:	d04c      	beq.n	8006860 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <UART_WaitOnFlagUntilTimeout+0x30>
 80067cc:	f7fc fae4 	bl	8002d98 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067d8:	429a      	cmp	r2, r3
 80067da:	d241      	bcs.n	8006860 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	330c      	adds	r3, #12
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	330c      	adds	r3, #12
 80067fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067fc:	637a      	str	r2, [r7, #52]	; 0x34
 80067fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e5      	bne.n	80067dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3314      	adds	r3, #20
 8006816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	613b      	str	r3, [r7, #16]
   return(result);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f023 0301 	bic.w	r3, r3, #1
 8006826:	63bb      	str	r3, [r7, #56]	; 0x38
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3314      	adds	r3, #20
 800682e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006830:	623a      	str	r2, [r7, #32]
 8006832:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	69f9      	ldr	r1, [r7, #28]
 8006836:	6a3a      	ldr	r2, [r7, #32]
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	61bb      	str	r3, [r7, #24]
   return(result);
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e5      	bne.n	8006810 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2220      	movs	r2, #32
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2220      	movs	r2, #32
 8006850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e00f      	b.n	8006880 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	4013      	ands	r3, r2
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	429a      	cmp	r2, r3
 800686e:	bf0c      	ite	eq
 8006870:	2301      	moveq	r3, #1
 8006872:	2300      	movne	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	461a      	mov	r2, r3
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	429a      	cmp	r2, r3
 800687c:	d09f      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3740      	adds	r7, #64	; 0x40
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b098      	sub	sp, #96	; 0x60
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	4613      	mov	r3, r2
 8006894:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	88fa      	ldrh	r2, [r7, #6]
 80068a0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2222      	movs	r2, #34	; 0x22
 80068ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b4:	4a3e      	ldr	r2, [pc, #248]	; (80069b0 <UART_Start_Receive_DMA+0x128>)
 80068b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	4a3d      	ldr	r2, [pc, #244]	; (80069b4 <UART_Start_Receive_DMA+0x12c>)
 80068be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	4a3c      	ldr	r2, [pc, #240]	; (80069b8 <UART_Start_Receive_DMA+0x130>)
 80068c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	2200      	movs	r2, #0
 80068ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80068d0:	f107 0308 	add.w	r3, r7, #8
 80068d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3304      	adds	r3, #4
 80068e0:	4619      	mov	r1, r3
 80068e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	f7fc fc16 	bl	8003118 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80068ec:	2300      	movs	r3, #0
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800691a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006920:	65bb      	str	r3, [r7, #88]	; 0x58
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	330c      	adds	r3, #12
 8006928:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800692a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800692c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e5      	bne.n	800690a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006950:	f043 0301 	orr.w	r3, r3, #1
 8006954:	657b      	str	r3, [r7, #84]	; 0x54
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3314      	adds	r3, #20
 800695c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800695e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006960:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e5      	bne.n	800693e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3314      	adds	r3, #20
 8006978:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	617b      	str	r3, [r7, #20]
   return(result);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006988:	653b      	str	r3, [r7, #80]	; 0x50
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3314      	adds	r3, #20
 8006990:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006992:	627a      	str	r2, [r7, #36]	; 0x24
 8006994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6a39      	ldr	r1, [r7, #32]
 8006998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	61fb      	str	r3, [r7, #28]
   return(result);
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e5      	bne.n	8006972 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3760      	adds	r7, #96	; 0x60
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	080065bd 	.word	0x080065bd
 80069b4:	080066e3 	.word	0x080066e3
 80069b8:	08006719 	.word	0x08006719

080069bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069bc:	b480      	push	{r7}
 80069be:	b089      	sub	sp, #36	; 0x24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	330c      	adds	r3, #12
 80069ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069da:	61fb      	str	r3, [r7, #28]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	330c      	adds	r3, #12
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	61ba      	str	r2, [r7, #24]
 80069e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6979      	ldr	r1, [r7, #20]
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	613b      	str	r3, [r7, #16]
   return(result);
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e5      	bne.n	80069c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006a00:	bf00      	nop
 8006a02:	3724      	adds	r7, #36	; 0x24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b095      	sub	sp, #84	; 0x54
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	330c      	adds	r3, #12
 8006a32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a34:	643a      	str	r2, [r7, #64]	; 0x40
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e5      	bne.n	8006a14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3314      	adds	r3, #20
 8006a4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f023 0301 	bic.w	r3, r3, #1
 8006a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3314      	adds	r3, #20
 8006a66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a70:	e841 2300 	strex	r3, r2, [r1]
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e5      	bne.n	8006a48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d119      	bne.n	8006ab8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f023 0310 	bic.w	r3, r3, #16
 8006a9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aa4:	61ba      	str	r2, [r7, #24]
 8006aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6979      	ldr	r1, [r7, #20]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e5      	bne.n	8006a84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ac6:	bf00      	nop
 8006ac8:	3754      	adds	r7, #84	; 0x54
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f7ff fd5b 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b085      	sub	sp, #20
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b21      	cmp	r3, #33	; 0x21
 8006b0c:	d13e      	bne.n	8006b8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b16:	d114      	bne.n	8006b42 <UART_Transmit_IT+0x48>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d110      	bne.n	8006b42 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	1c9a      	adds	r2, r3, #2
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	621a      	str	r2, [r3, #32]
 8006b40:	e008      	b.n	8006b54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	1c59      	adds	r1, r3, #1
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6211      	str	r1, [r2, #32]
 8006b4c:	781a      	ldrb	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	4619      	mov	r1, r3
 8006b62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10f      	bne.n	8006b88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	e000      	b.n	8006b8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b8c:	2302      	movs	r3, #2
  }
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68da      	ldr	r2, [r3, #12]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff fcd6 	bl	800656c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b08c      	sub	sp, #48	; 0x30
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b22      	cmp	r3, #34	; 0x22
 8006bdc:	f040 80ab 	bne.w	8006d36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be8:	d117      	bne.n	8006c1a <UART_Receive_IT+0x50>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d113      	bne.n	8006c1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c12:	1c9a      	adds	r2, r3, #2
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	629a      	str	r2, [r3, #40]	; 0x28
 8006c18:	e026      	b.n	8006c68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c20:	2300      	movs	r3, #0
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c2c:	d007      	beq.n	8006c3e <UART_Receive_IT+0x74>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10a      	bne.n	8006c4c <UART_Receive_IT+0x82>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c48:	701a      	strb	r2, [r3, #0]
 8006c4a:	e008      	b.n	8006c5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	4619      	mov	r1, r3
 8006c76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d15a      	bne.n	8006d32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0220 	bic.w	r2, r2, #32
 8006c8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695a      	ldr	r2, [r3, #20]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0201 	bic.w	r2, r2, #1
 8006caa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d135      	bne.n	8006d28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	330c      	adds	r3, #12
 8006cc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f023 0310 	bic.w	r3, r3, #16
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	330c      	adds	r3, #12
 8006ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce2:	623a      	str	r2, [r7, #32]
 8006ce4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	69f9      	ldr	r1, [r7, #28]
 8006ce8:	6a3a      	ldr	r2, [r7, #32]
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e5      	bne.n	8006cc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b10      	cmp	r3, #16
 8006d02:	d10a      	bne.n	8006d1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7fb fe67 	bl	80029f4 <HAL_UARTEx_RxEventCallback>
 8006d26:	e002      	b.n	8006d2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff fc29 	bl	8006580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e002      	b.n	8006d38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e000      	b.n	8006d38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d36:	2302      	movs	r3, #2
  }
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3730      	adds	r7, #48	; 0x30
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	b09f      	sub	sp, #124	; 0x7c
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d56:	68d9      	ldr	r1, [r3, #12]
 8006d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	ea40 0301 	orr.w	r3, r0, r1
 8006d60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	431a      	orrs	r2, r3
 8006d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d84:	f021 010c 	bic.w	r1, r1, #12
 8006d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d8e:	430b      	orrs	r3, r1
 8006d90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9e:	6999      	ldr	r1, [r3, #24]
 8006da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	ea40 0301 	orr.w	r3, r0, r1
 8006da8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4bc5      	ldr	r3, [pc, #788]	; (80070c4 <UART_SetConfig+0x384>)
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d004      	beq.n	8006dbe <UART_SetConfig+0x7e>
 8006db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	4bc3      	ldr	r3, [pc, #780]	; (80070c8 <UART_SetConfig+0x388>)
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d103      	bne.n	8006dc6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dbe:	f7fe fd0f 	bl	80057e0 <HAL_RCC_GetPCLK2Freq>
 8006dc2:	6778      	str	r0, [r7, #116]	; 0x74
 8006dc4:	e002      	b.n	8006dcc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dc6:	f7fe fcf7 	bl	80057b8 <HAL_RCC_GetPCLK1Freq>
 8006dca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd4:	f040 80b6 	bne.w	8006f44 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dda:	461c      	mov	r4, r3
 8006ddc:	f04f 0500 	mov.w	r5, #0
 8006de0:	4622      	mov	r2, r4
 8006de2:	462b      	mov	r3, r5
 8006de4:	1891      	adds	r1, r2, r2
 8006de6:	6439      	str	r1, [r7, #64]	; 0x40
 8006de8:	415b      	adcs	r3, r3
 8006dea:	647b      	str	r3, [r7, #68]	; 0x44
 8006dec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006df0:	1912      	adds	r2, r2, r4
 8006df2:	eb45 0303 	adc.w	r3, r5, r3
 8006df6:	f04f 0000 	mov.w	r0, #0
 8006dfa:	f04f 0100 	mov.w	r1, #0
 8006dfe:	00d9      	lsls	r1, r3, #3
 8006e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e04:	00d0      	lsls	r0, r2, #3
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	1911      	adds	r1, r2, r4
 8006e0c:	6639      	str	r1, [r7, #96]	; 0x60
 8006e0e:	416b      	adcs	r3, r5
 8006e10:	667b      	str	r3, [r7, #100]	; 0x64
 8006e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	461a      	mov	r2, r3
 8006e18:	f04f 0300 	mov.w	r3, #0
 8006e1c:	1891      	adds	r1, r2, r2
 8006e1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e20:	415b      	adcs	r3, r3
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e28:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006e2c:	f7f9 fa20 	bl	8000270 <__aeabi_uldivmod>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4ba5      	ldr	r3, [pc, #660]	; (80070cc <UART_SetConfig+0x38c>)
 8006e36:	fba3 2302 	umull	r2, r3, r3, r2
 8006e3a:	095b      	lsrs	r3, r3, #5
 8006e3c:	011e      	lsls	r6, r3, #4
 8006e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e40:	461c      	mov	r4, r3
 8006e42:	f04f 0500 	mov.w	r5, #0
 8006e46:	4622      	mov	r2, r4
 8006e48:	462b      	mov	r3, r5
 8006e4a:	1891      	adds	r1, r2, r2
 8006e4c:	6339      	str	r1, [r7, #48]	; 0x30
 8006e4e:	415b      	adcs	r3, r3
 8006e50:	637b      	str	r3, [r7, #52]	; 0x34
 8006e52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e56:	1912      	adds	r2, r2, r4
 8006e58:	eb45 0303 	adc.w	r3, r5, r3
 8006e5c:	f04f 0000 	mov.w	r0, #0
 8006e60:	f04f 0100 	mov.w	r1, #0
 8006e64:	00d9      	lsls	r1, r3, #3
 8006e66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e6a:	00d0      	lsls	r0, r2, #3
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	1911      	adds	r1, r2, r4
 8006e72:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e74:	416b      	adcs	r3, r5
 8006e76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	1891      	adds	r1, r2, r2
 8006e84:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e86:	415b      	adcs	r3, r3
 8006e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e8e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006e92:	f7f9 f9ed 	bl	8000270 <__aeabi_uldivmod>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4b8c      	ldr	r3, [pc, #560]	; (80070cc <UART_SetConfig+0x38c>)
 8006e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	2164      	movs	r1, #100	; 0x64
 8006ea4:	fb01 f303 	mul.w	r3, r1, r3
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	3332      	adds	r3, #50	; 0x32
 8006eae:	4a87      	ldr	r2, [pc, #540]	; (80070cc <UART_SetConfig+0x38c>)
 8006eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb4:	095b      	lsrs	r3, r3, #5
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ebc:	441e      	add	r6, r3
 8006ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f04f 0100 	mov.w	r1, #0
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	1894      	adds	r4, r2, r2
 8006ecc:	623c      	str	r4, [r7, #32]
 8006ece:	415b      	adcs	r3, r3
 8006ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ed6:	1812      	adds	r2, r2, r0
 8006ed8:	eb41 0303 	adc.w	r3, r1, r3
 8006edc:	f04f 0400 	mov.w	r4, #0
 8006ee0:	f04f 0500 	mov.w	r5, #0
 8006ee4:	00dd      	lsls	r5, r3, #3
 8006ee6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006eea:	00d4      	lsls	r4, r2, #3
 8006eec:	4622      	mov	r2, r4
 8006eee:	462b      	mov	r3, r5
 8006ef0:	1814      	adds	r4, r2, r0
 8006ef2:	653c      	str	r4, [r7, #80]	; 0x50
 8006ef4:	414b      	adcs	r3, r1
 8006ef6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	461a      	mov	r2, r3
 8006efe:	f04f 0300 	mov.w	r3, #0
 8006f02:	1891      	adds	r1, r2, r2
 8006f04:	61b9      	str	r1, [r7, #24]
 8006f06:	415b      	adcs	r3, r3
 8006f08:	61fb      	str	r3, [r7, #28]
 8006f0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f12:	f7f9 f9ad 	bl	8000270 <__aeabi_uldivmod>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4b6c      	ldr	r3, [pc, #432]	; (80070cc <UART_SetConfig+0x38c>)
 8006f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f20:	095b      	lsrs	r3, r3, #5
 8006f22:	2164      	movs	r1, #100	; 0x64
 8006f24:	fb01 f303 	mul.w	r3, r1, r3
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	3332      	adds	r3, #50	; 0x32
 8006f2e:	4a67      	ldr	r2, [pc, #412]	; (80070cc <UART_SetConfig+0x38c>)
 8006f30:	fba2 2303 	umull	r2, r3, r2, r3
 8006f34:	095b      	lsrs	r3, r3, #5
 8006f36:	f003 0207 	and.w	r2, r3, #7
 8006f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4432      	add	r2, r6
 8006f40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f42:	e0b9      	b.n	80070b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f46:	461c      	mov	r4, r3
 8006f48:	f04f 0500 	mov.w	r5, #0
 8006f4c:	4622      	mov	r2, r4
 8006f4e:	462b      	mov	r3, r5
 8006f50:	1891      	adds	r1, r2, r2
 8006f52:	6139      	str	r1, [r7, #16]
 8006f54:	415b      	adcs	r3, r3
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f5c:	1912      	adds	r2, r2, r4
 8006f5e:	eb45 0303 	adc.w	r3, r5, r3
 8006f62:	f04f 0000 	mov.w	r0, #0
 8006f66:	f04f 0100 	mov.w	r1, #0
 8006f6a:	00d9      	lsls	r1, r3, #3
 8006f6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f70:	00d0      	lsls	r0, r2, #3
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	eb12 0804 	adds.w	r8, r2, r4
 8006f7a:	eb43 0905 	adc.w	r9, r3, r5
 8006f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f04f 0100 	mov.w	r1, #0
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	008b      	lsls	r3, r1, #2
 8006f92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f96:	0082      	lsls	r2, r0, #2
 8006f98:	4640      	mov	r0, r8
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	f7f9 f968 	bl	8000270 <__aeabi_uldivmod>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4b49      	ldr	r3, [pc, #292]	; (80070cc <UART_SetConfig+0x38c>)
 8006fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8006faa:	095b      	lsrs	r3, r3, #5
 8006fac:	011e      	lsls	r6, r3, #4
 8006fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f04f 0100 	mov.w	r1, #0
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	1894      	adds	r4, r2, r2
 8006fbc:	60bc      	str	r4, [r7, #8]
 8006fbe:	415b      	adcs	r3, r3
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fc6:	1812      	adds	r2, r2, r0
 8006fc8:	eb41 0303 	adc.w	r3, r1, r3
 8006fcc:	f04f 0400 	mov.w	r4, #0
 8006fd0:	f04f 0500 	mov.w	r5, #0
 8006fd4:	00dd      	lsls	r5, r3, #3
 8006fd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006fda:	00d4      	lsls	r4, r2, #3
 8006fdc:	4622      	mov	r2, r4
 8006fde:	462b      	mov	r3, r5
 8006fe0:	1814      	adds	r4, r2, r0
 8006fe2:	64bc      	str	r4, [r7, #72]	; 0x48
 8006fe4:	414b      	adcs	r3, r1
 8006fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f04f 0100 	mov.w	r1, #0
 8006ff2:	f04f 0200 	mov.w	r2, #0
 8006ff6:	f04f 0300 	mov.w	r3, #0
 8006ffa:	008b      	lsls	r3, r1, #2
 8006ffc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007000:	0082      	lsls	r2, r0, #2
 8007002:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007006:	f7f9 f933 	bl	8000270 <__aeabi_uldivmod>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4b2f      	ldr	r3, [pc, #188]	; (80070cc <UART_SetConfig+0x38c>)
 8007010:	fba3 1302 	umull	r1, r3, r3, r2
 8007014:	095b      	lsrs	r3, r3, #5
 8007016:	2164      	movs	r1, #100	; 0x64
 8007018:	fb01 f303 	mul.w	r3, r1, r3
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	3332      	adds	r3, #50	; 0x32
 8007022:	4a2a      	ldr	r2, [pc, #168]	; (80070cc <UART_SetConfig+0x38c>)
 8007024:	fba2 2303 	umull	r2, r3, r2, r3
 8007028:	095b      	lsrs	r3, r3, #5
 800702a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800702e:	441e      	add	r6, r3
 8007030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007032:	4618      	mov	r0, r3
 8007034:	f04f 0100 	mov.w	r1, #0
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	1894      	adds	r4, r2, r2
 800703e:	603c      	str	r4, [r7, #0]
 8007040:	415b      	adcs	r3, r3
 8007042:	607b      	str	r3, [r7, #4]
 8007044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007048:	1812      	adds	r2, r2, r0
 800704a:	eb41 0303 	adc.w	r3, r1, r3
 800704e:	f04f 0400 	mov.w	r4, #0
 8007052:	f04f 0500 	mov.w	r5, #0
 8007056:	00dd      	lsls	r5, r3, #3
 8007058:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800705c:	00d4      	lsls	r4, r2, #3
 800705e:	4622      	mov	r2, r4
 8007060:	462b      	mov	r3, r5
 8007062:	eb12 0a00 	adds.w	sl, r2, r0
 8007066:	eb43 0b01 	adc.w	fp, r3, r1
 800706a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	4618      	mov	r0, r3
 8007070:	f04f 0100 	mov.w	r1, #0
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	008b      	lsls	r3, r1, #2
 800707e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007082:	0082      	lsls	r2, r0, #2
 8007084:	4650      	mov	r0, sl
 8007086:	4659      	mov	r1, fp
 8007088:	f7f9 f8f2 	bl	8000270 <__aeabi_uldivmod>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <UART_SetConfig+0x38c>)
 8007092:	fba3 1302 	umull	r1, r3, r3, r2
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	2164      	movs	r1, #100	; 0x64
 800709a:	fb01 f303 	mul.w	r3, r1, r3
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	3332      	adds	r3, #50	; 0x32
 80070a4:	4a09      	ldr	r2, [pc, #36]	; (80070cc <UART_SetConfig+0x38c>)
 80070a6:	fba2 2303 	umull	r2, r3, r2, r3
 80070aa:	095b      	lsrs	r3, r3, #5
 80070ac:	f003 020f 	and.w	r2, r3, #15
 80070b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4432      	add	r2, r6
 80070b6:	609a      	str	r2, [r3, #8]
}
 80070b8:	bf00      	nop
 80070ba:	377c      	adds	r7, #124	; 0x7c
 80070bc:	46bd      	mov	sp, r7
 80070be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c2:	bf00      	nop
 80070c4:	40011000 	.word	0x40011000
 80070c8:	40011400 	.word	0x40011400
 80070cc:	51eb851f 	.word	0x51eb851f

080070d0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80070d6:	4b98      	ldr	r3, [pc, #608]	; (8007338 <MX_LWIP_Init+0x268>)
 80070d8:	22c0      	movs	r2, #192	; 0xc0
 80070da:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80070dc:	4b96      	ldr	r3, [pc, #600]	; (8007338 <MX_LWIP_Init+0x268>)
 80070de:	22a8      	movs	r2, #168	; 0xa8
 80070e0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80070e2:	4b95      	ldr	r3, [pc, #596]	; (8007338 <MX_LWIP_Init+0x268>)
 80070e4:	2201      	movs	r2, #1
 80070e6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 177;
 80070e8:	4b93      	ldr	r3, [pc, #588]	; (8007338 <MX_LWIP_Init+0x268>)
 80070ea:	22b1      	movs	r2, #177	; 0xb1
 80070ec:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80070ee:	4b93      	ldr	r3, [pc, #588]	; (800733c <MX_LWIP_Init+0x26c>)
 80070f0:	22ff      	movs	r2, #255	; 0xff
 80070f2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80070f4:	4b91      	ldr	r3, [pc, #580]	; (800733c <MX_LWIP_Init+0x26c>)
 80070f6:	22ff      	movs	r2, #255	; 0xff
 80070f8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80070fa:	4b90      	ldr	r3, [pc, #576]	; (800733c <MX_LWIP_Init+0x26c>)
 80070fc:	22ff      	movs	r2, #255	; 0xff
 80070fe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007100:	4b8e      	ldr	r3, [pc, #568]	; (800733c <MX_LWIP_Init+0x26c>)
 8007102:	2200      	movs	r2, #0
 8007104:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007106:	4b8e      	ldr	r3, [pc, #568]	; (8007340 <MX_LWIP_Init+0x270>)
 8007108:	22c0      	movs	r2, #192	; 0xc0
 800710a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800710c:	4b8c      	ldr	r3, [pc, #560]	; (8007340 <MX_LWIP_Init+0x270>)
 800710e:	22a8      	movs	r2, #168	; 0xa8
 8007110:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8007112:	4b8b      	ldr	r3, [pc, #556]	; (8007340 <MX_LWIP_Init+0x270>)
 8007114:	2201      	movs	r2, #1
 8007116:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007118:	4b89      	ldr	r3, [pc, #548]	; (8007340 <MX_LWIP_Init+0x270>)
 800711a:	2201      	movs	r2, #1
 800711c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800711e:	2100      	movs	r1, #0
 8007120:	2000      	movs	r0, #0
 8007122:	f005 ff45 	bl	800cfb0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007126:	4b84      	ldr	r3, [pc, #528]	; (8007338 <MX_LWIP_Init+0x268>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	061a      	lsls	r2, r3, #24
 800712c:	4b82      	ldr	r3, [pc, #520]	; (8007338 <MX_LWIP_Init+0x268>)
 800712e:	785b      	ldrb	r3, [r3, #1]
 8007130:	041b      	lsls	r3, r3, #16
 8007132:	431a      	orrs	r2, r3
 8007134:	4b80      	ldr	r3, [pc, #512]	; (8007338 <MX_LWIP_Init+0x268>)
 8007136:	789b      	ldrb	r3, [r3, #2]
 8007138:	021b      	lsls	r3, r3, #8
 800713a:	4313      	orrs	r3, r2
 800713c:	4a7e      	ldr	r2, [pc, #504]	; (8007338 <MX_LWIP_Init+0x268>)
 800713e:	78d2      	ldrb	r2, [r2, #3]
 8007140:	4313      	orrs	r3, r2
 8007142:	061a      	lsls	r2, r3, #24
 8007144:	4b7c      	ldr	r3, [pc, #496]	; (8007338 <MX_LWIP_Init+0x268>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	0619      	lsls	r1, r3, #24
 800714a:	4b7b      	ldr	r3, [pc, #492]	; (8007338 <MX_LWIP_Init+0x268>)
 800714c:	785b      	ldrb	r3, [r3, #1]
 800714e:	041b      	lsls	r3, r3, #16
 8007150:	4319      	orrs	r1, r3
 8007152:	4b79      	ldr	r3, [pc, #484]	; (8007338 <MX_LWIP_Init+0x268>)
 8007154:	789b      	ldrb	r3, [r3, #2]
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	430b      	orrs	r3, r1
 800715a:	4977      	ldr	r1, [pc, #476]	; (8007338 <MX_LWIP_Init+0x268>)
 800715c:	78c9      	ldrb	r1, [r1, #3]
 800715e:	430b      	orrs	r3, r1
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007166:	431a      	orrs	r2, r3
 8007168:	4b73      	ldr	r3, [pc, #460]	; (8007338 <MX_LWIP_Init+0x268>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	0619      	lsls	r1, r3, #24
 800716e:	4b72      	ldr	r3, [pc, #456]	; (8007338 <MX_LWIP_Init+0x268>)
 8007170:	785b      	ldrb	r3, [r3, #1]
 8007172:	041b      	lsls	r3, r3, #16
 8007174:	4319      	orrs	r1, r3
 8007176:	4b70      	ldr	r3, [pc, #448]	; (8007338 <MX_LWIP_Init+0x268>)
 8007178:	789b      	ldrb	r3, [r3, #2]
 800717a:	021b      	lsls	r3, r3, #8
 800717c:	430b      	orrs	r3, r1
 800717e:	496e      	ldr	r1, [pc, #440]	; (8007338 <MX_LWIP_Init+0x268>)
 8007180:	78c9      	ldrb	r1, [r1, #3]
 8007182:	430b      	orrs	r3, r1
 8007184:	0a1b      	lsrs	r3, r3, #8
 8007186:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800718a:	431a      	orrs	r2, r3
 800718c:	4b6a      	ldr	r3, [pc, #424]	; (8007338 <MX_LWIP_Init+0x268>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	0619      	lsls	r1, r3, #24
 8007192:	4b69      	ldr	r3, [pc, #420]	; (8007338 <MX_LWIP_Init+0x268>)
 8007194:	785b      	ldrb	r3, [r3, #1]
 8007196:	041b      	lsls	r3, r3, #16
 8007198:	4319      	orrs	r1, r3
 800719a:	4b67      	ldr	r3, [pc, #412]	; (8007338 <MX_LWIP_Init+0x268>)
 800719c:	789b      	ldrb	r3, [r3, #2]
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	430b      	orrs	r3, r1
 80071a2:	4965      	ldr	r1, [pc, #404]	; (8007338 <MX_LWIP_Init+0x268>)
 80071a4:	78c9      	ldrb	r1, [r1, #3]
 80071a6:	430b      	orrs	r3, r1
 80071a8:	0e1b      	lsrs	r3, r3, #24
 80071aa:	4313      	orrs	r3, r2
 80071ac:	4a65      	ldr	r2, [pc, #404]	; (8007344 <MX_LWIP_Init+0x274>)
 80071ae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80071b0:	4b62      	ldr	r3, [pc, #392]	; (800733c <MX_LWIP_Init+0x26c>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	061a      	lsls	r2, r3, #24
 80071b6:	4b61      	ldr	r3, [pc, #388]	; (800733c <MX_LWIP_Init+0x26c>)
 80071b8:	785b      	ldrb	r3, [r3, #1]
 80071ba:	041b      	lsls	r3, r3, #16
 80071bc:	431a      	orrs	r2, r3
 80071be:	4b5f      	ldr	r3, [pc, #380]	; (800733c <MX_LWIP_Init+0x26c>)
 80071c0:	789b      	ldrb	r3, [r3, #2]
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	4313      	orrs	r3, r2
 80071c6:	4a5d      	ldr	r2, [pc, #372]	; (800733c <MX_LWIP_Init+0x26c>)
 80071c8:	78d2      	ldrb	r2, [r2, #3]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	061a      	lsls	r2, r3, #24
 80071ce:	4b5b      	ldr	r3, [pc, #364]	; (800733c <MX_LWIP_Init+0x26c>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	0619      	lsls	r1, r3, #24
 80071d4:	4b59      	ldr	r3, [pc, #356]	; (800733c <MX_LWIP_Init+0x26c>)
 80071d6:	785b      	ldrb	r3, [r3, #1]
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	4319      	orrs	r1, r3
 80071dc:	4b57      	ldr	r3, [pc, #348]	; (800733c <MX_LWIP_Init+0x26c>)
 80071de:	789b      	ldrb	r3, [r3, #2]
 80071e0:	021b      	lsls	r3, r3, #8
 80071e2:	430b      	orrs	r3, r1
 80071e4:	4955      	ldr	r1, [pc, #340]	; (800733c <MX_LWIP_Init+0x26c>)
 80071e6:	78c9      	ldrb	r1, [r1, #3]
 80071e8:	430b      	orrs	r3, r1
 80071ea:	021b      	lsls	r3, r3, #8
 80071ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071f0:	431a      	orrs	r2, r3
 80071f2:	4b52      	ldr	r3, [pc, #328]	; (800733c <MX_LWIP_Init+0x26c>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	0619      	lsls	r1, r3, #24
 80071f8:	4b50      	ldr	r3, [pc, #320]	; (800733c <MX_LWIP_Init+0x26c>)
 80071fa:	785b      	ldrb	r3, [r3, #1]
 80071fc:	041b      	lsls	r3, r3, #16
 80071fe:	4319      	orrs	r1, r3
 8007200:	4b4e      	ldr	r3, [pc, #312]	; (800733c <MX_LWIP_Init+0x26c>)
 8007202:	789b      	ldrb	r3, [r3, #2]
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	430b      	orrs	r3, r1
 8007208:	494c      	ldr	r1, [pc, #304]	; (800733c <MX_LWIP_Init+0x26c>)
 800720a:	78c9      	ldrb	r1, [r1, #3]
 800720c:	430b      	orrs	r3, r1
 800720e:	0a1b      	lsrs	r3, r3, #8
 8007210:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007214:	431a      	orrs	r2, r3
 8007216:	4b49      	ldr	r3, [pc, #292]	; (800733c <MX_LWIP_Init+0x26c>)
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	0619      	lsls	r1, r3, #24
 800721c:	4b47      	ldr	r3, [pc, #284]	; (800733c <MX_LWIP_Init+0x26c>)
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	041b      	lsls	r3, r3, #16
 8007222:	4319      	orrs	r1, r3
 8007224:	4b45      	ldr	r3, [pc, #276]	; (800733c <MX_LWIP_Init+0x26c>)
 8007226:	789b      	ldrb	r3, [r3, #2]
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	430b      	orrs	r3, r1
 800722c:	4943      	ldr	r1, [pc, #268]	; (800733c <MX_LWIP_Init+0x26c>)
 800722e:	78c9      	ldrb	r1, [r1, #3]
 8007230:	430b      	orrs	r3, r1
 8007232:	0e1b      	lsrs	r3, r3, #24
 8007234:	4313      	orrs	r3, r2
 8007236:	4a44      	ldr	r2, [pc, #272]	; (8007348 <MX_LWIP_Init+0x278>)
 8007238:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800723a:	4b41      	ldr	r3, [pc, #260]	; (8007340 <MX_LWIP_Init+0x270>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	061a      	lsls	r2, r3, #24
 8007240:	4b3f      	ldr	r3, [pc, #252]	; (8007340 <MX_LWIP_Init+0x270>)
 8007242:	785b      	ldrb	r3, [r3, #1]
 8007244:	041b      	lsls	r3, r3, #16
 8007246:	431a      	orrs	r2, r3
 8007248:	4b3d      	ldr	r3, [pc, #244]	; (8007340 <MX_LWIP_Init+0x270>)
 800724a:	789b      	ldrb	r3, [r3, #2]
 800724c:	021b      	lsls	r3, r3, #8
 800724e:	4313      	orrs	r3, r2
 8007250:	4a3b      	ldr	r2, [pc, #236]	; (8007340 <MX_LWIP_Init+0x270>)
 8007252:	78d2      	ldrb	r2, [r2, #3]
 8007254:	4313      	orrs	r3, r2
 8007256:	061a      	lsls	r2, r3, #24
 8007258:	4b39      	ldr	r3, [pc, #228]	; (8007340 <MX_LWIP_Init+0x270>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	0619      	lsls	r1, r3, #24
 800725e:	4b38      	ldr	r3, [pc, #224]	; (8007340 <MX_LWIP_Init+0x270>)
 8007260:	785b      	ldrb	r3, [r3, #1]
 8007262:	041b      	lsls	r3, r3, #16
 8007264:	4319      	orrs	r1, r3
 8007266:	4b36      	ldr	r3, [pc, #216]	; (8007340 <MX_LWIP_Init+0x270>)
 8007268:	789b      	ldrb	r3, [r3, #2]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	430b      	orrs	r3, r1
 800726e:	4934      	ldr	r1, [pc, #208]	; (8007340 <MX_LWIP_Init+0x270>)
 8007270:	78c9      	ldrb	r1, [r1, #3]
 8007272:	430b      	orrs	r3, r1
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800727a:	431a      	orrs	r2, r3
 800727c:	4b30      	ldr	r3, [pc, #192]	; (8007340 <MX_LWIP_Init+0x270>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	0619      	lsls	r1, r3, #24
 8007282:	4b2f      	ldr	r3, [pc, #188]	; (8007340 <MX_LWIP_Init+0x270>)
 8007284:	785b      	ldrb	r3, [r3, #1]
 8007286:	041b      	lsls	r3, r3, #16
 8007288:	4319      	orrs	r1, r3
 800728a:	4b2d      	ldr	r3, [pc, #180]	; (8007340 <MX_LWIP_Init+0x270>)
 800728c:	789b      	ldrb	r3, [r3, #2]
 800728e:	021b      	lsls	r3, r3, #8
 8007290:	430b      	orrs	r3, r1
 8007292:	492b      	ldr	r1, [pc, #172]	; (8007340 <MX_LWIP_Init+0x270>)
 8007294:	78c9      	ldrb	r1, [r1, #3]
 8007296:	430b      	orrs	r3, r1
 8007298:	0a1b      	lsrs	r3, r3, #8
 800729a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800729e:	431a      	orrs	r2, r3
 80072a0:	4b27      	ldr	r3, [pc, #156]	; (8007340 <MX_LWIP_Init+0x270>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	0619      	lsls	r1, r3, #24
 80072a6:	4b26      	ldr	r3, [pc, #152]	; (8007340 <MX_LWIP_Init+0x270>)
 80072a8:	785b      	ldrb	r3, [r3, #1]
 80072aa:	041b      	lsls	r3, r3, #16
 80072ac:	4319      	orrs	r1, r3
 80072ae:	4b24      	ldr	r3, [pc, #144]	; (8007340 <MX_LWIP_Init+0x270>)
 80072b0:	789b      	ldrb	r3, [r3, #2]
 80072b2:	021b      	lsls	r3, r3, #8
 80072b4:	430b      	orrs	r3, r1
 80072b6:	4922      	ldr	r1, [pc, #136]	; (8007340 <MX_LWIP_Init+0x270>)
 80072b8:	78c9      	ldrb	r1, [r1, #3]
 80072ba:	430b      	orrs	r3, r1
 80072bc:	0e1b      	lsrs	r3, r3, #24
 80072be:	4313      	orrs	r3, r2
 80072c0:	4a22      	ldr	r2, [pc, #136]	; (800734c <MX_LWIP_Init+0x27c>)
 80072c2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80072c4:	4b22      	ldr	r3, [pc, #136]	; (8007350 <MX_LWIP_Init+0x280>)
 80072c6:	9302      	str	r3, [sp, #8]
 80072c8:	4b22      	ldr	r3, [pc, #136]	; (8007354 <MX_LWIP_Init+0x284>)
 80072ca:	9301      	str	r3, [sp, #4]
 80072cc:	2300      	movs	r3, #0
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	4b1e      	ldr	r3, [pc, #120]	; (800734c <MX_LWIP_Init+0x27c>)
 80072d2:	4a1d      	ldr	r2, [pc, #116]	; (8007348 <MX_LWIP_Init+0x278>)
 80072d4:	491b      	ldr	r1, [pc, #108]	; (8007344 <MX_LWIP_Init+0x274>)
 80072d6:	4820      	ldr	r0, [pc, #128]	; (8007358 <MX_LWIP_Init+0x288>)
 80072d8:	f006 fbee 	bl	800dab8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80072dc:	481e      	ldr	r0, [pc, #120]	; (8007358 <MX_LWIP_Init+0x288>)
 80072de:	f006 fd9d 	bl	800de1c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80072e2:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <MX_LWIP_Init+0x288>)
 80072e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072e8:	089b      	lsrs	r3, r3, #2
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80072f4:	4818      	ldr	r0, [pc, #96]	; (8007358 <MX_LWIP_Init+0x288>)
 80072f6:	f006 fda1 	bl	800de3c <netif_set_up>
 80072fa:	e002      	b.n	8007302 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80072fc:	4816      	ldr	r0, [pc, #88]	; (8007358 <MX_LWIP_Init+0x288>)
 80072fe:	f006 fe09 	bl	800df14 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8007302:	4916      	ldr	r1, [pc, #88]	; (800735c <MX_LWIP_Init+0x28c>)
 8007304:	4814      	ldr	r0, [pc, #80]	; (8007358 <MX_LWIP_Init+0x288>)
 8007306:	f006 fe37 	bl	800df78 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800730a:	2300      	movs	r3, #0
 800730c:	603b      	str	r3, [r7, #0]
 800730e:	2300      	movs	r3, #0
 8007310:	607b      	str	r3, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8007312:	463b      	mov	r3, r7
 8007314:	2101      	movs	r1, #1
 8007316:	4618      	mov	r0, r3
 8007318:	f000 fd36 	bl	8007d88 <osSemaphoreCreate>
 800731c:	4603      	mov	r3, r0
 800731e:	4a10      	ldr	r2, [pc, #64]	; (8007360 <MX_LWIP_Init+0x290>)
 8007320:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8007322:	4b10      	ldr	r3, [pc, #64]	; (8007364 <MX_LWIP_Init+0x294>)
 8007324:	4a0c      	ldr	r2, [pc, #48]	; (8007358 <MX_LWIP_Init+0x288>)
 8007326:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8007328:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <MX_LWIP_Init+0x290>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a0d      	ldr	r2, [pc, #52]	; (8007364 <MX_LWIP_Init+0x294>)
 800732e:	6053      	str	r3, [r2, #4]
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	200071c8 	.word	0x200071c8
 800733c:	200071c4 	.word	0x200071c4
 8007340:	20007188 	.word	0x20007188
 8007344:	200071c0 	.word	0x200071c0
 8007348:	200071cc 	.word	0x200071cc
 800734c:	200071d0 	.word	0x200071d0
 8007350:	0800cec1 	.word	0x0800cec1
 8007354:	08007995 	.word	0x08007995
 8007358:	2000718c 	.word	0x2000718c
 800735c:	08007a01 	.word	0x08007a01
 8007360:	200004d4 	.word	0x200004d4
 8007364:	20007180 	.word	0x20007180

08007368 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08e      	sub	sp, #56	; 0x38
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	605a      	str	r2, [r3, #4]
 800737a:	609a      	str	r2, [r3, #8]
 800737c:	60da      	str	r2, [r3, #12]
 800737e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a4a      	ldr	r2, [pc, #296]	; (80074b0 <HAL_ETH_MspInit+0x148>)
 8007386:	4293      	cmp	r3, r2
 8007388:	f040 808d 	bne.w	80074a6 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800738c:	2300      	movs	r3, #0
 800738e:	623b      	str	r3, [r7, #32]
 8007390:	4b48      	ldr	r3, [pc, #288]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 8007392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007394:	4a47      	ldr	r2, [pc, #284]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 8007396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800739a:	6313      	str	r3, [r2, #48]	; 0x30
 800739c:	4b45      	ldr	r3, [pc, #276]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 800739e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a4:	623b      	str	r3, [r7, #32]
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	2300      	movs	r3, #0
 80073aa:	61fb      	str	r3, [r7, #28]
 80073ac:	4b41      	ldr	r3, [pc, #260]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 80073ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b0:	4a40      	ldr	r2, [pc, #256]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 80073b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073b6:	6313      	str	r3, [r2, #48]	; 0x30
 80073b8:	4b3e      	ldr	r3, [pc, #248]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 80073ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	2300      	movs	r3, #0
 80073c6:	61bb      	str	r3, [r7, #24]
 80073c8:	4b3a      	ldr	r3, [pc, #232]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 80073ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073cc:	4a39      	ldr	r2, [pc, #228]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 80073ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073d2:	6313      	str	r3, [r2, #48]	; 0x30
 80073d4:	4b37      	ldr	r3, [pc, #220]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 80073d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073dc:	61bb      	str	r3, [r7, #24]
 80073de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073e0:	2300      	movs	r3, #0
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	4b33      	ldr	r3, [pc, #204]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 80073e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e8:	4a32      	ldr	r2, [pc, #200]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 80073ea:	f043 0304 	orr.w	r3, r3, #4
 80073ee:	6313      	str	r3, [r2, #48]	; 0x30
 80073f0:	4b30      	ldr	r3, [pc, #192]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 80073f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073fc:	2300      	movs	r3, #0
 80073fe:	613b      	str	r3, [r7, #16]
 8007400:	4b2c      	ldr	r3, [pc, #176]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 8007402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007404:	4a2b      	ldr	r2, [pc, #172]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 8007406:	f043 0301 	orr.w	r3, r3, #1
 800740a:	6313      	str	r3, [r2, #48]	; 0x30
 800740c:	4b29      	ldr	r3, [pc, #164]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 800740e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	613b      	str	r3, [r7, #16]
 8007416:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	4b25      	ldr	r3, [pc, #148]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	4a24      	ldr	r2, [pc, #144]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 8007422:	f043 0302 	orr.w	r3, r3, #2
 8007426:	6313      	str	r3, [r2, #48]	; 0x30
 8007428:	4b22      	ldr	r3, [pc, #136]	; (80074b4 <HAL_ETH_MspInit+0x14c>)
 800742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007434:	2332      	movs	r3, #50	; 0x32
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007438:	2302      	movs	r3, #2
 800743a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800743c:	2300      	movs	r3, #0
 800743e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007440:	2303      	movs	r3, #3
 8007442:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007444:	230b      	movs	r3, #11
 8007446:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800744c:	4619      	mov	r1, r3
 800744e:	481a      	ldr	r0, [pc, #104]	; (80074b8 <HAL_ETH_MspInit+0x150>)
 8007450:	f7fd fb5c 	bl	8004b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007454:	2386      	movs	r3, #134	; 0x86
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007458:	2302      	movs	r3, #2
 800745a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800745c:	2300      	movs	r3, #0
 800745e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007460:	2303      	movs	r3, #3
 8007462:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007464:	230b      	movs	r3, #11
 8007466:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800746c:	4619      	mov	r1, r3
 800746e:	4813      	ldr	r0, [pc, #76]	; (80074bc <HAL_ETH_MspInit+0x154>)
 8007470:	f7fd fb4c 	bl	8004b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8007474:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800747a:	2302      	movs	r3, #2
 800747c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800747e:	2300      	movs	r3, #0
 8007480:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007482:	2303      	movs	r3, #3
 8007484:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007486:	230b      	movs	r3, #11
 8007488:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800748a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800748e:	4619      	mov	r1, r3
 8007490:	480b      	ldr	r0, [pc, #44]	; (80074c0 <HAL_ETH_MspInit+0x158>)
 8007492:	f7fd fb3b 	bl	8004b0c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007496:	2200      	movs	r2, #0
 8007498:	2105      	movs	r1, #5
 800749a:	203d      	movs	r0, #61	; 0x3d
 800749c:	f7fb fd64 	bl	8002f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80074a0:	203d      	movs	r0, #61	; 0x3d
 80074a2:	f7fb fd7d 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80074a6:	bf00      	nop
 80074a8:	3738      	adds	r7, #56	; 0x38
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40028000 	.word	0x40028000
 80074b4:	40023800 	.word	0x40023800
 80074b8:	40020800 	.word	0x40020800
 80074bc:	40020000 	.word	0x40020000
 80074c0:	40020400 	.word	0x40020400

080074c4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80074cc:	4b04      	ldr	r3, [pc, #16]	; (80074e0 <HAL_ETH_RxCpltCallback+0x1c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 fcd9 	bl	8007e88 <osSemaphoreRelease>
}
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	200004d8 	.word	0x200004d8

080074e4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80074e4:	b5b0      	push	{r4, r5, r7, lr}
 80074e6:	b090      	sub	sp, #64	; 0x40
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80074f0:	4b5f      	ldr	r3, [pc, #380]	; (8007670 <low_level_init+0x18c>)
 80074f2:	4a60      	ldr	r2, [pc, #384]	; (8007674 <low_level_init+0x190>)
 80074f4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 80074f6:	4b5e      	ldr	r3, [pc, #376]	; (8007670 <low_level_init+0x18c>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80074fc:	4b5c      	ldr	r3, [pc, #368]	; (8007670 <low_level_init+0x18c>)
 80074fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007502:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007504:	4b5a      	ldr	r3, [pc, #360]	; (8007670 <low_level_init+0x18c>)
 8007506:	2200      	movs	r2, #0
 8007508:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800750a:	4b59      	ldr	r3, [pc, #356]	; (8007670 <low_level_init+0x18c>)
 800750c:	2200      	movs	r2, #0
 800750e:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007510:	2300      	movs	r3, #0
 8007512:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8007516:	2380      	movs	r3, #128	; 0x80
 8007518:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800751c:	23e1      	movs	r3, #225	; 0xe1
 800751e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8007522:	2300      	movs	r3, #0
 8007524:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8007528:	2300      	movs	r3, #0
 800752a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800752e:	2300      	movs	r3, #0
 8007530:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8007534:	4a4e      	ldr	r2, [pc, #312]	; (8007670 <low_level_init+0x18c>)
 8007536:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800753a:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800753c:	4b4c      	ldr	r3, [pc, #304]	; (8007670 <low_level_init+0x18c>)
 800753e:	2201      	movs	r2, #1
 8007540:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007542:	4b4b      	ldr	r3, [pc, #300]	; (8007670 <low_level_init+0x18c>)
 8007544:	2200      	movs	r2, #0
 8007546:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007548:	4b49      	ldr	r3, [pc, #292]	; (8007670 <low_level_init+0x18c>)
 800754a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800754e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007550:	4847      	ldr	r0, [pc, #284]	; (8007670 <low_level_init+0x18c>)
 8007552:	f7fc f935 	bl	80037c0 <HAL_ETH_Init>
 8007556:	4603      	mov	r3, r0
 8007558:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800755c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007560:	2b00      	cmp	r3, #0
 8007562:	d108      	bne.n	8007576 <low_level_init+0x92>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800756a:	f043 0304 	orr.w	r3, r3, #4
 800756e:	b2da      	uxtb	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007576:	2304      	movs	r3, #4
 8007578:	4a3f      	ldr	r2, [pc, #252]	; (8007678 <low_level_init+0x194>)
 800757a:	4940      	ldr	r1, [pc, #256]	; (800767c <low_level_init+0x198>)
 800757c:	483c      	ldr	r0, [pc, #240]	; (8007670 <low_level_init+0x18c>)
 800757e:	f7fc fabb 	bl	8003af8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007582:	2304      	movs	r3, #4
 8007584:	4a3e      	ldr	r2, [pc, #248]	; (8007680 <low_level_init+0x19c>)
 8007586:	493f      	ldr	r1, [pc, #252]	; (8007684 <low_level_init+0x1a0>)
 8007588:	4839      	ldr	r0, [pc, #228]	; (8007670 <low_level_init+0x18c>)
 800758a:	f7fc fb1e 	bl	8003bca <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2206      	movs	r2, #6
 8007592:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007596:	4b36      	ldr	r3, [pc, #216]	; (8007670 <low_level_init+0x18c>)
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	781a      	ldrb	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80075a2:	4b33      	ldr	r3, [pc, #204]	; (8007670 <low_level_init+0x18c>)
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	785a      	ldrb	r2, [r3, #1]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80075ae:	4b30      	ldr	r3, [pc, #192]	; (8007670 <low_level_init+0x18c>)
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	789a      	ldrb	r2, [r3, #2]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80075ba:	4b2d      	ldr	r3, [pc, #180]	; (8007670 <low_level_init+0x18c>)
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	78da      	ldrb	r2, [r3, #3]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80075c6:	4b2a      	ldr	r3, [pc, #168]	; (8007670 <low_level_init+0x18c>)
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	791a      	ldrb	r2, [r3, #4]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80075d2:	4b27      	ldr	r3, [pc, #156]	; (8007670 <low_level_init+0x18c>)
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	795a      	ldrb	r2, [r3, #5]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80075e4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80075ec:	f043 030a 	orr.w	r3, r3, #10
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80075f8:	2300      	movs	r3, #0
 80075fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80075fc:	2300      	movs	r3, #0
 80075fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007600:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007604:	2101      	movs	r1, #1
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fbbe 	bl	8007d88 <osSemaphoreCreate>
 800760c:	4603      	mov	r3, r0
 800760e:	4a1e      	ldr	r2, [pc, #120]	; (8007688 <low_level_init+0x1a4>)
 8007610:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007612:	4b1e      	ldr	r3, [pc, #120]	; (800768c <low_level_init+0x1a8>)
 8007614:	f107 040c 	add.w	r4, r7, #12
 8007618:	461d      	mov	r5, r3
 800761a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800761c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800761e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8007626:	f107 030c 	add.w	r3, r7, #12
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	4618      	mov	r0, r3
 800762e:	f000 faae 	bl	8007b8e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007632:	480f      	ldr	r0, [pc, #60]	; (8007670 <low_level_init+0x18c>)
 8007634:	f7fc fdf1 	bl	800421a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007638:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800763c:	461a      	mov	r2, r3
 800763e:	211d      	movs	r1, #29
 8007640:	480b      	ldr	r0, [pc, #44]	; (8007670 <low_level_init+0x18c>)
 8007642:	f7fc fd1c 	bl	800407e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	f043 030b 	orr.w	r3, r3, #11
 800764c:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007650:	461a      	mov	r2, r3
 8007652:	211d      	movs	r1, #29
 8007654:	4806      	ldr	r0, [pc, #24]	; (8007670 <low_level_init+0x18c>)
 8007656:	f7fc fd7a 	bl	800414e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800765a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800765e:	461a      	mov	r2, r3
 8007660:	211d      	movs	r1, #29
 8007662:	4803      	ldr	r0, [pc, #12]	; (8007670 <low_level_init+0x18c>)
 8007664:	f7fc fd0b 	bl	800407e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007668:	bf00      	nop
 800766a:	3740      	adds	r7, #64	; 0x40
 800766c:	46bd      	mov	sp, r7
 800766e:	bdb0      	pop	{r4, r5, r7, pc}
 8007670:	20008aa4 	.word	0x20008aa4
 8007674:	40028000 	.word	0x40028000
 8007678:	20008aec 	.word	0x20008aec
 800767c:	200071d4 	.word	0x200071d4
 8007680:	20007254 	.word	0x20007254
 8007684:	20008a24 	.word	0x20008a24
 8007688:	200004d8 	.word	0x200004d8
 800768c:	080197ac 	.word	0x080197ac

08007690 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b08a      	sub	sp, #40	; 0x28
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800769a:	4b4b      	ldr	r3, [pc, #300]	; (80077c8 <low_level_output+0x138>)
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80076b2:	4b45      	ldr	r3, [pc, #276]	; (80077c8 <low_level_output+0x138>)
 80076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	623b      	str	r3, [r7, #32]
 80076c0:	e05a      	b.n	8007778 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	da03      	bge.n	80076d2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80076ca:	23f8      	movs	r3, #248	; 0xf8
 80076cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80076d0:	e05c      	b.n	800778c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	895b      	ldrh	r3, [r3, #10]
 80076d6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80076dc:	e02f      	b.n	800773e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	18d0      	adds	r0, r2, r3
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	18d1      	adds	r1, r2, r3
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80076f2:	3304      	adds	r3, #4
 80076f4:	461a      	mov	r2, r3
 80076f6:	f010 fe85 	bl	8018404 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	da03      	bge.n	8007710 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007708:	23f8      	movs	r3, #248	; 0xf8
 800770a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800770e:	e03d      	b.n	800778c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007720:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800772c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007738:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	4413      	add	r3, r2
 8007744:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007748:	4293      	cmp	r3, r2
 800774a:	d8c8      	bhi.n	80076de <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	18d0      	adds	r0, r2, r3
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	4413      	add	r3, r2
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4619      	mov	r1, r3
 800775e:	f010 fe51 	bl	8018404 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	623b      	str	r3, [r7, #32]
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1a1      	bne.n	80076c2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800777e:	6979      	ldr	r1, [r7, #20]
 8007780:	4811      	ldr	r0, [pc, #68]	; (80077c8 <low_level_output+0x138>)
 8007782:	f7fc fa8f 	bl	8003ca4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800778c:	4b0e      	ldr	r3, [pc, #56]	; (80077c8 <low_level_output+0x138>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007794:	3314      	adds	r3, #20
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0320 	and.w	r3, r3, #32
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00d      	beq.n	80077bc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80077a0:	4b09      	ldr	r3, [pc, #36]	; (80077c8 <low_level_output+0x138>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a8:	3314      	adds	r3, #20
 80077aa:	2220      	movs	r2, #32
 80077ac:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80077ae:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <low_level_output+0x138>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b6:	3304      	adds	r3, #4
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80077bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3728      	adds	r7, #40	; 0x28
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	20008aa4 	.word	0x20008aa4

080077cc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08c      	sub	sp, #48	; 0x30
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80077d8:	2300      	movs	r3, #0
 80077da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80077dc:	2300      	movs	r3, #0
 80077de:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80077ec:	2300      	movs	r3, #0
 80077ee:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80077f0:	484f      	ldr	r0, [pc, #316]	; (8007930 <low_level_input+0x164>)
 80077f2:	f7fc fb41 	bl	8003e78 <HAL_ETH_GetReceivedFrame_IT>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <low_level_input+0x34>

    return NULL;
 80077fc:	2300      	movs	r3, #0
 80077fe:	e092      	b.n	8007926 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007800:	4b4b      	ldr	r3, [pc, #300]	; (8007930 <low_level_input+0x164>)
 8007802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007804:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007806:	4b4a      	ldr	r3, [pc, #296]	; (8007930 <low_level_input+0x164>)
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800780c:	89fb      	ldrh	r3, [r7, #14]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007812:	89fb      	ldrh	r3, [r7, #14]
 8007814:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007818:	4619      	mov	r1, r3
 800781a:	2000      	movs	r0, #0
 800781c:	f006 fc76 	bl	800e10c <pbuf_alloc>
 8007820:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007824:	2b00      	cmp	r3, #0
 8007826:	d04b      	beq.n	80078c0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007828:	4b41      	ldr	r3, [pc, #260]	; (8007930 <low_level_input+0x164>)
 800782a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800782e:	2300      	movs	r3, #0
 8007830:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	62bb      	str	r3, [r7, #40]	; 0x28
 8007836:	e040      	b.n	80078ba <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783a:	895b      	ldrh	r3, [r3, #10]
 800783c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007842:	e021      	b.n	8007888 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	18d0      	adds	r0, r2, r3
 800784c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	18d1      	adds	r1, r2, r3
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007858:	3304      	adds	r3, #4
 800785a:	461a      	mov	r2, r3
 800785c:	f010 fdd2 	bl	8018404 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800786c:	69fa      	ldr	r2, [r7, #28]
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	4413      	add	r3, r2
 8007872:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007876:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007882:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007884:	2300      	movs	r3, #0
 8007886:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	4413      	add	r3, r2
 800788e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007892:	4293      	cmp	r3, r2
 8007894:	d8d6      	bhi.n	8007844 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	18d0      	adds	r0, r2, r3
 800789e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	4413      	add	r3, r2
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	4619      	mov	r1, r3
 80078a8:	f010 fdac 	bl	8018404 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	4413      	add	r3, r2
 80078b2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1bb      	bne.n	8007838 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80078c0:	4b1b      	ldr	r3, [pc, #108]	; (8007930 <low_level_input+0x164>)
 80078c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80078c6:	2300      	movs	r3, #0
 80078c8:	613b      	str	r3, [r7, #16]
 80078ca:	e00b      	b.n	80078e4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	3301      	adds	r3, #1
 80078e2:	613b      	str	r3, [r7, #16]
 80078e4:	4b12      	ldr	r3, [pc, #72]	; (8007930 <low_level_input+0x164>)
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d3ee      	bcc.n	80078cc <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80078ee:	4b10      	ldr	r3, [pc, #64]	; (8007930 <low_level_input+0x164>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80078f4:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <low_level_input+0x164>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078fc:	3314      	adds	r3, #20
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00d      	beq.n	8007924 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007908:	4b09      	ldr	r3, [pc, #36]	; (8007930 <low_level_input+0x164>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007910:	3314      	adds	r3, #20
 8007912:	2280      	movs	r2, #128	; 0x80
 8007914:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007916:	4b06      	ldr	r3, [pc, #24]	; (8007930 <low_level_input+0x164>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800791e:	3308      	adds	r3, #8
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007926:	4618      	mov	r0, r3
 8007928:	3730      	adds	r7, #48	; 0x30
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	20008aa4 	.word	0x20008aa4

08007934 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007940:	4b12      	ldr	r3, [pc, #72]	; (800798c <ethernetif_input+0x58>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f04f 31ff 	mov.w	r1, #4294967295
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fa4f 	bl	8007dec <osSemaphoreWait>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1f5      	bne.n	8007940 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8007954:	480e      	ldr	r0, [pc, #56]	; (8007990 <ethernetif_input+0x5c>)
 8007956:	f010 fbc5 	bl	80180e4 <sys_mutex_lock>
        p = low_level_input( netif );
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f7ff ff36 	bl	80077cc <low_level_input>
 8007960:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	68f9      	ldr	r1, [r7, #12]
 800796e:	68b8      	ldr	r0, [r7, #8]
 8007970:	4798      	blx	r3
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8007978:	68b8      	ldr	r0, [r7, #8]
 800797a:	f006 feab 	bl	800e6d4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800797e:	4804      	ldr	r0, [pc, #16]	; (8007990 <ethernetif_input+0x5c>)
 8007980:	f010 fbbf 	bl	8018102 <sys_mutex_unlock>
      } while(p!=NULL);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e4      	bne.n	8007954 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800798a:	e7d9      	b.n	8007940 <ethernetif_input+0xc>
 800798c:	200004d8 	.word	0x200004d8
 8007990:	2000a2fc 	.word	0x2000a2fc

08007994 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d106      	bne.n	80079b0 <ethernetif_init+0x1c>
 80079a2:	4b0e      	ldr	r3, [pc, #56]	; (80079dc <ethernetif_init+0x48>)
 80079a4:	f44f 720b 	mov.w	r2, #556	; 0x22c
 80079a8:	490d      	ldr	r1, [pc, #52]	; (80079e0 <ethernetif_init+0x4c>)
 80079aa:	480e      	ldr	r0, [pc, #56]	; (80079e4 <ethernetif_init+0x50>)
 80079ac:	f010 fe04 	bl	80185b8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2273      	movs	r2, #115	; 0x73
 80079b4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2274      	movs	r2, #116	; 0x74
 80079bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a09      	ldr	r2, [pc, #36]	; (80079e8 <ethernetif_init+0x54>)
 80079c4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a08      	ldr	r2, [pc, #32]	; (80079ec <ethernetif_init+0x58>)
 80079ca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff fd89 	bl	80074e4 <low_level_init>

  return ERR_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	080197c8 	.word	0x080197c8
 80079e0:	080197e4 	.word	0x080197e4
 80079e4:	080197f4 	.word	0x080197f4
 80079e8:	080160f9 	.word	0x080160f9
 80079ec:	08007691 	.word	0x08007691

080079f0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80079f4:	f7fb f9d0 	bl	8002d98 <HAL_GetTick>
 80079f8:	4603      	mov	r3, r0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a16:	089b      	lsrs	r3, r3, #2
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d05d      	beq.n	8007ade <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007a22:	4b34      	ldr	r3, [pc, #208]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d03f      	beq.n	8007aaa <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007a2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a2e:	2100      	movs	r1, #0
 8007a30:	4830      	ldr	r0, [pc, #192]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007a32:	f7fc fb8c 	bl	800414e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8007a36:	f7fb f9af 	bl	8002d98 <HAL_GetTick>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007a3e:	f107 0308 	add.w	r3, r7, #8
 8007a42:	461a      	mov	r2, r3
 8007a44:	2101      	movs	r1, #1
 8007a46:	482b      	ldr	r0, [pc, #172]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007a48:	f7fc fb19 	bl	800407e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007a4c:	f7fb f9a4 	bl	8002d98 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a5a:	d828      	bhi.n	8007aae <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0eb      	beq.n	8007a3e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007a66:	f107 0308 	add.w	r3, r7, #8
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	2110      	movs	r1, #16
 8007a6e:	4821      	ldr	r0, [pc, #132]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007a70:	f7fc fb05 	bl	800407e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d004      	beq.n	8007a88 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007a7e:	4b1d      	ldr	r3, [pc, #116]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a84:	60da      	str	r2, [r3, #12]
 8007a86:	e002      	b.n	8007a8e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007a88:	4b1a      	ldr	r3, [pc, #104]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007a98:	4b16      	ldr	r3, [pc, #88]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	609a      	str	r2, [r3, #8]
 8007a9e:	e016      	b.n	8007ace <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007aa0:	4b14      	ldr	r3, [pc, #80]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007aa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007aa6:	609a      	str	r2, [r3, #8]
 8007aa8:	e011      	b.n	8007ace <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007aaa:	bf00      	nop
 8007aac:	e000      	b.n	8007ab0 <ethernetif_update_config+0xb0>
          goto error;
 8007aae:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007ab0:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	08db      	lsrs	r3, r3, #3
 8007ab6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007ab8:	4b0e      	ldr	r3, [pc, #56]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	085b      	lsrs	r3, r3, #1
 8007abe:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	480a      	ldr	r0, [pc, #40]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007aca:	f7fc fb40 	bl	800414e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4808      	ldr	r0, [pc, #32]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007ad2:	f7fc fc01 	bl	80042d8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007ad6:	4807      	ldr	r0, [pc, #28]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007ad8:	f7fc fb9f 	bl	800421a <HAL_ETH_Start>
 8007adc:	e002      	b.n	8007ae4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007ade:	4805      	ldr	r0, [pc, #20]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007ae0:	f7fc fbca 	bl	8004278 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f807 	bl	8007af8 <ethernetif_notify_conn_changed>
}
 8007aea:	bf00      	nop
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20008aa4 	.word	0x20008aa4

08007af8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b1e:	2b84      	cmp	r3, #132	; 0x84
 8007b20:	d005      	beq.n	8007b2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007b22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	3303      	adds	r3, #3
 8007b2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b42:	f3ef 8305 	mrs	r3, IPSR
 8007b46:	607b      	str	r3, [r7, #4]
  return(result);
 8007b48:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bf14      	ite	ne
 8007b4e:	2301      	movne	r3, #1
 8007b50:	2300      	moveq	r3, #0
 8007b52:	b2db      	uxtb	r3, r3
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b64:	f001 ff70 	bl	8009a48 <vTaskStartScheduler>
  
  return osOK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007b72:	f7ff ffe3 	bl	8007b3c <inHandlerMode>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007b7c:	f002 f888 	bl	8009c90 <xTaskGetTickCountFromISR>
 8007b80:	4603      	mov	r3, r0
 8007b82:	e002      	b.n	8007b8a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007b84:	f002 f874 	bl	8009c70 <xTaskGetTickCount>
 8007b88:	4603      	mov	r3, r0
  }
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b90:	b089      	sub	sp, #36	; 0x24
 8007b92:	af04      	add	r7, sp, #16
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d020      	beq.n	8007be2 <osThreadCreate+0x54>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d01c      	beq.n	8007be2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685c      	ldr	r4, [r3, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681d      	ldr	r5, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691e      	ldr	r6, [r3, #16]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7ff ffa6 	bl	8007b0c <makeFreeRtosPriority>
 8007bc0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bca:	9202      	str	r2, [sp, #8]
 8007bcc:	9301      	str	r3, [sp, #4]
 8007bce:	9100      	str	r1, [sp, #0]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	4632      	mov	r2, r6
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f001 fd58 	bl	800968c <xTaskCreateStatic>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	e01c      	b.n	8007c1c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685c      	ldr	r4, [r3, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bee:	b29e      	uxth	r6, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff ff88 	bl	8007b0c <makeFreeRtosPriority>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	f107 030c 	add.w	r3, r7, #12
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	9200      	str	r2, [sp, #0]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	4632      	mov	r2, r6
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f001 fd9a 	bl	8009746 <xTaskCreate>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d001      	beq.n	8007c1c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	e000      	b.n	8007c1e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <osDelay+0x16>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	e000      	b.n	8007c3e <osDelay+0x18>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f001 fece 	bl	80099e0 <vTaskDelay>
  
  return osOK;
 8007c44:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d007      	beq.n	8007c6e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	4619      	mov	r1, r3
 8007c64:	2001      	movs	r0, #1
 8007c66:	f000 feb2 	bl	80089ce <xQueueCreateMutexStatic>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	e003      	b.n	8007c76 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007c6e:	2001      	movs	r0, #1
 8007c70:	f000 fe95 	bl	800899e <xQueueCreateMutex>
 8007c74:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <osMutexWait+0x18>
    return osErrorParameter;
 8007c94:	2380      	movs	r3, #128	; 0x80
 8007c96:	e03a      	b.n	8007d0e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca2:	d103      	bne.n	8007cac <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	e009      	b.n	8007cc0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d006      	beq.n	8007cc0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <osMutexWait+0x40>
      ticks = 1;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007cc0:	f7ff ff3c 	bl	8007b3c <inHandlerMode>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d017      	beq.n	8007cfa <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007cca:	f107 0308 	add.w	r3, r7, #8
 8007cce:	461a      	mov	r2, r3
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 faa8 	bl	8009228 <xQueueReceiveFromISR>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d001      	beq.n	8007ce2 <osMutexWait+0x62>
      return osErrorOS;
 8007cde:	23ff      	movs	r3, #255	; 0xff
 8007ce0:	e015      	b.n	8007d0e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d011      	beq.n	8007d0c <osMutexWait+0x8c>
 8007ce8:	4b0b      	ldr	r3, [pc, #44]	; (8007d18 <osMutexWait+0x98>)
 8007cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cee:	601a      	str	r2, [r3, #0]
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	e008      	b.n	8007d0c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007cfa:	68f9      	ldr	r1, [r7, #12]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 f987 	bl	8009010 <xQueueSemaphoreTake>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d001      	beq.n	8007d0c <osMutexWait+0x8c>
    return osErrorOS;
 8007d08:	23ff      	movs	r3, #255	; 0xff
 8007d0a:	e000      	b.n	8007d0e <osMutexWait+0x8e>
  }
  
  return osOK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	e000ed04 	.word	0xe000ed04

08007d1c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007d2c:	f7ff ff06 	bl	8007b3c <inHandlerMode>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d016      	beq.n	8007d64 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007d36:	f107 0308 	add.w	r3, r7, #8
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fffa 	bl	8008d36 <xQueueGiveFromISR>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d001      	beq.n	8007d4c <osMutexRelease+0x30>
      return osErrorOS;
 8007d48:	23ff      	movs	r3, #255	; 0xff
 8007d4a:	e017      	b.n	8007d7c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d013      	beq.n	8007d7a <osMutexRelease+0x5e>
 8007d52:	4b0c      	ldr	r3, [pc, #48]	; (8007d84 <osMutexRelease+0x68>)
 8007d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	e00a      	b.n	8007d7a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007d64:	2300      	movs	r3, #0
 8007d66:	2200      	movs	r2, #0
 8007d68:	2100      	movs	r1, #0
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fe4a 	bl	8008a04 <xQueueGenericSend>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d001      	beq.n	8007d7a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007d76:	23ff      	movs	r3, #255	; 0xff
 8007d78:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	e000ed04 	.word	0xe000ed04

08007d88 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00f      	beq.n	8007dba <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d10a      	bne.n	8007db6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	2203      	movs	r2, #3
 8007da6:	9200      	str	r2, [sp, #0]
 8007da8:	2200      	movs	r2, #0
 8007daa:	2100      	movs	r1, #0
 8007dac:	2001      	movs	r0, #1
 8007dae:	f000 fd0b 	bl	80087c8 <xQueueGenericCreateStatic>
 8007db2:	4603      	mov	r3, r0
 8007db4:	e016      	b.n	8007de4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007db6:	2300      	movs	r3, #0
 8007db8:	e014      	b.n	8007de4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d110      	bne.n	8007de2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007dc0:	2203      	movs	r2, #3
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	f000 fd77 	bl	80088b8 <xQueueGenericCreate>
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d005      	beq.n	8007dde <osSemaphoreCreate+0x56>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fe13 	bl	8008a04 <xQueueGenericSend>
      return sema;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	e000      	b.n	8007de4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007de2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007df6:	2300      	movs	r3, #0
 8007df8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007e00:	2380      	movs	r3, #128	; 0x80
 8007e02:	e03a      	b.n	8007e7a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0e:	d103      	bne.n	8007e18 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007e10:	f04f 33ff 	mov.w	r3, #4294967295
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	e009      	b.n	8007e2c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d006      	beq.n	8007e2c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <osSemaphoreWait+0x40>
      ticks = 1;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007e2c:	f7ff fe86 	bl	8007b3c <inHandlerMode>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d017      	beq.n	8007e66 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007e36:	f107 0308 	add.w	r3, r7, #8
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 f9f2 	bl	8009228 <xQueueReceiveFromISR>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d001      	beq.n	8007e4e <osSemaphoreWait+0x62>
      return osErrorOS;
 8007e4a:	23ff      	movs	r3, #255	; 0xff
 8007e4c:	e015      	b.n	8007e7a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d011      	beq.n	8007e78 <osSemaphoreWait+0x8c>
 8007e54:	4b0b      	ldr	r3, [pc, #44]	; (8007e84 <osSemaphoreWait+0x98>)
 8007e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	e008      	b.n	8007e78 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007e66:	68f9      	ldr	r1, [r7, #12]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 f8d1 	bl	8009010 <xQueueSemaphoreTake>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d001      	beq.n	8007e78 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007e74:	23ff      	movs	r3, #255	; 0xff
 8007e76:	e000      	b.n	8007e7a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	e000ed04 	.word	0xe000ed04

08007e88 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007e98:	f7ff fe50 	bl	8007b3c <inHandlerMode>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d016      	beq.n	8007ed0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007ea2:	f107 0308 	add.w	r3, r7, #8
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 ff44 	bl	8008d36 <xQueueGiveFromISR>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d001      	beq.n	8007eb8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007eb4:	23ff      	movs	r3, #255	; 0xff
 8007eb6:	e017      	b.n	8007ee8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d013      	beq.n	8007ee6 <osSemaphoreRelease+0x5e>
 8007ebe:	4b0c      	ldr	r3, [pc, #48]	; (8007ef0 <osSemaphoreRelease+0x68>)
 8007ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	e00a      	b.n	8007ee6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fd94 	bl	8008a04 <xQueueGenericSend>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d001      	beq.n	8007ee6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007ee2:	23ff      	movs	r3, #255	; 0xff
 8007ee4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007efc:	f7ff fe1e 	bl	8007b3c <inHandlerMode>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007f06:	2382      	movs	r3, #130	; 0x82
 8007f08:	e003      	b.n	8007f12 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 fa48 	bl	80093a0 <vQueueDelete>

  return osOK; 
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b086      	sub	sp, #24
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	3303      	adds	r3, #3
 8007f28:	f023 0303 	bic.w	r3, r3, #3
 8007f2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8007f2e:	2014      	movs	r0, #20
 8007f30:	f002 fe32 	bl	800ab98 <pvPortMalloc>
 8007f34:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d046      	beq.n	8007fca <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f002 fe1f 	bl	800ab98 <pvPortMalloc>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d02b      	beq.n	8007fc0 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	fb02 f303 	mul.w	r3, r2, r3
 8007f72:	4618      	mov	r0, r3
 8007f74:	f002 fe10 	bl	800ab98 <pvPortMalloc>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d011      	beq.n	8007faa <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	e008      	b.n	8007f9e <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	4413      	add	r3, r2
 8007f94:	2200      	movs	r2, #0
 8007f96:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	613b      	str	r3, [r7, #16]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d3f1      	bcc.n	8007f8c <osPoolCreate+0x72>
 8007fa8:	e00f      	b.n	8007fca <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f002 febe 	bl	800ad30 <vPortFree>
        vPortFree(thePool);
 8007fb4:	6978      	ldr	r0, [r7, #20]
 8007fb6:	f002 febb 	bl	800ad30 <vPortFree>
        thePool = NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	e004      	b.n	8007fca <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8007fc0:	6978      	ldr	r0, [r7, #20]
 8007fc2:	f002 feb5 	bl	800ad30 <vPortFree>
      thePool = NULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8007fca:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08a      	sub	sp, #40	; 0x28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8007fe4:	f7ff fdaa 	bl	8007b3c <inHandlerMode>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00e      	beq.n	800800c <osPoolAlloc+0x38>
	__asm volatile
 8007fee:	f3ef 8211 	mrs	r2, BASEPRI
 8007ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	617a      	str	r2, [r7, #20]
 8008004:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008006:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8008008:	627b      	str	r3, [r7, #36]	; 0x24
 800800a:	e001      	b.n	8008010 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800800c:	f002 fca2 	bl	800a954 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8008010:	2300      	movs	r3, #0
 8008012:	61fb      	str	r3, [r7, #28]
 8008014:	e029      	b.n	800806a <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691a      	ldr	r2, [r3, #16]
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	4413      	add	r3, r2
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	6892      	ldr	r2, [r2, #8]
 8008022:	fbb3 f1f2 	udiv	r1, r3, r2
 8008026:	fb02 f201 	mul.w	r2, r2, r1
 800802a:	1a9b      	subs	r3, r3, r2
 800802c:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	4413      	add	r3, r2
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d113      	bne.n	8008064 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	4413      	add	r3, r2
 8008044:	2201      	movs	r2, #1
 8008046:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4619      	mov	r1, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	fb02 f303 	mul.w	r3, r2, r3
 8008058:	440b      	add	r3, r1
 800805a:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	611a      	str	r2, [r3, #16]
      break;
 8008062:	e007      	b.n	8008074 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	3301      	adds	r3, #1
 8008068:	61fb      	str	r3, [r7, #28]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	429a      	cmp	r2, r3
 8008072:	d3d0      	bcc.n	8008016 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8008074:	f7ff fd62 	bl	8007b3c <inHandlerMode>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f383 8811 	msr	BASEPRI, r3
}
 8008088:	e001      	b.n	800808e <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800808a:	f002 fc93 	bl	800a9b4 <vPortExitCritical>
  }
  
  return p;
 800808e:	6a3b      	ldr	r3, [r7, #32]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3728      	adds	r7, #40	; 0x28
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <osPoolFree+0x14>
    return osErrorParameter;
 80080a8:	2380      	movs	r3, #128	; 0x80
 80080aa:	e030      	b.n	800810e <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <osPoolFree+0x1e>
    return osErrorParameter;
 80080b2:	2380      	movs	r3, #128	; 0x80
 80080b4:	e02b      	b.n	800810e <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d201      	bcs.n	80080c4 <osPoolFree+0x2c>
    return osErrorParameter;
 80080c0:	2380      	movs	r3, #128	; 0x80
 80080c2:	e024      	b.n	800810e <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	6812      	ldr	r2, [r2, #0]
 80080ca:	1a9b      	subs	r3, r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68da      	ldr	r2, [r3, #12]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80080d8:	fb02 f201 	mul.w	r2, r2, r1
 80080dc:	1a9b      	subs	r3, r3, r2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <osPoolFree+0x4e>
    return osErrorParameter;
 80080e2:	2380      	movs	r3, #128	; 0x80
 80080e4:	e013      	b.n	800810e <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f0:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d301      	bcc.n	8008100 <osPoolFree+0x68>
    return osErrorParameter;
 80080fc:	2380      	movs	r3, #128	; 0x80
 80080fe:	e006      	b.n	800810e <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4413      	add	r3, r2
 8008108:	2200      	movs	r2, #0
 800810a:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800811a:	b590      	push	{r4, r7, lr}
 800811c:	b085      	sub	sp, #20
 800811e:	af02      	add	r7, sp, #8
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d011      	beq.n	8008150 <osMessageCreate+0x36>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00d      	beq.n	8008150 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6859      	ldr	r1, [r3, #4]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	689a      	ldr	r2, [r3, #8]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	2400      	movs	r4, #0
 8008146:	9400      	str	r4, [sp, #0]
 8008148:	f000 fb3e 	bl	80087c8 <xQueueGenericCreateStatic>
 800814c:	4603      	mov	r3, r0
 800814e:	e008      	b.n	8008162 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6818      	ldr	r0, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	4619      	mov	r1, r3
 800815c:	f000 fbac 	bl	80088b8 <xQueueGenericCreate>
 8008160:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	bd90      	pop	{r4, r7, pc}
	...

0800816c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008178:	2300      	movs	r3, #0
 800817a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <osMessagePut+0x1e>
    ticks = 1;
 8008186:	2301      	movs	r3, #1
 8008188:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800818a:	f7ff fcd7 	bl	8007b3c <inHandlerMode>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d018      	beq.n	80081c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008194:	f107 0210 	add.w	r2, r7, #16
 8008198:	f107 0108 	add.w	r1, r7, #8
 800819c:	2300      	movs	r3, #0
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 fd2e 	bl	8008c00 <xQueueGenericSendFromISR>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d001      	beq.n	80081ae <osMessagePut+0x42>
      return osErrorOS;
 80081aa:	23ff      	movs	r3, #255	; 0xff
 80081ac:	e018      	b.n	80081e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d014      	beq.n	80081de <osMessagePut+0x72>
 80081b4:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <osMessagePut+0x7c>)
 80081b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	e00b      	b.n	80081de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80081c6:	f107 0108 	add.w	r1, r7, #8
 80081ca:	2300      	movs	r3, #0
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 fc18 	bl	8008a04 <xQueueGenericSend>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d001      	beq.n	80081de <osMessagePut+0x72>
      return osErrorOS;
 80081da:	23ff      	movs	r3, #255	; 0xff
 80081dc:	e000      	b.n	80081e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	e000ed04 	.word	0xe000ed04

080081ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80081ec:	b590      	push	{r4, r7, lr}
 80081ee:	b08b      	sub	sp, #44	; 0x2c
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10a      	bne.n	800821c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008206:	2380      	movs	r3, #128	; 0x80
 8008208:	617b      	str	r3, [r7, #20]
    return event;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	461c      	mov	r4, r3
 800820e:	f107 0314 	add.w	r3, r7, #20
 8008212:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008216:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800821a:	e054      	b.n	80082c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800821c:	2300      	movs	r3, #0
 800821e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822a:	d103      	bne.n	8008234 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800822c:	f04f 33ff 	mov.w	r3, #4294967295
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
 8008232:	e009      	b.n	8008248 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d006      	beq.n	8008248 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <osMessageGet+0x5c>
      ticks = 1;
 8008244:	2301      	movs	r3, #1
 8008246:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008248:	f7ff fc78 	bl	8007b3c <inHandlerMode>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d01c      	beq.n	800828c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008252:	f107 0220 	add.w	r2, r7, #32
 8008256:	f107 0314 	add.w	r3, r7, #20
 800825a:	3304      	adds	r3, #4
 800825c:	4619      	mov	r1, r3
 800825e:	68b8      	ldr	r0, [r7, #8]
 8008260:	f000 ffe2 	bl	8009228 <xQueueReceiveFromISR>
 8008264:	4603      	mov	r3, r0
 8008266:	2b01      	cmp	r3, #1
 8008268:	d102      	bne.n	8008270 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800826a:	2310      	movs	r3, #16
 800826c:	617b      	str	r3, [r7, #20]
 800826e:	e001      	b.n	8008274 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008270:	2300      	movs	r3, #0
 8008272:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d01d      	beq.n	80082b6 <osMessageGet+0xca>
 800827a:	4b15      	ldr	r3, [pc, #84]	; (80082d0 <osMessageGet+0xe4>)
 800827c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	e014      	b.n	80082b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800828c:	f107 0314 	add.w	r3, r7, #20
 8008290:	3304      	adds	r3, #4
 8008292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008294:	4619      	mov	r1, r3
 8008296:	68b8      	ldr	r0, [r7, #8]
 8008298:	f000 fdda 	bl	8008e50 <xQueueReceive>
 800829c:	4603      	mov	r3, r0
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d102      	bne.n	80082a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80082a2:	2310      	movs	r3, #16
 80082a4:	617b      	str	r3, [r7, #20]
 80082a6:	e006      	b.n	80082b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <osMessageGet+0xc6>
 80082ae:	2300      	movs	r3, #0
 80082b0:	e000      	b.n	80082b4 <osMessageGet+0xc8>
 80082b2:	2340      	movs	r3, #64	; 0x40
 80082b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	461c      	mov	r4, r3
 80082ba:	f107 0314 	add.w	r3, r7, #20
 80082be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	372c      	adds	r7, #44	; 0x2c
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd90      	pop	{r4, r7, pc}
 80082ce:	bf00      	nop
 80082d0:	e000ed04 	.word	0xe000ed04

080082d4 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80082d4:	b590      	push	{r4, r7, lr}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	613b      	str	r3, [r7, #16]
 80082ea:	2300      	movs	r3, #0
 80082ec:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	689c      	ldr	r4, [r3, #8]
 80082f2:	200c      	movs	r0, #12
 80082f4:	f002 fc50 	bl	800ab98 <pvPortMalloc>
 80082f8:	4603      	mov	r3, r0
 80082fa:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <osMailCreate+0x36>
    return NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	e038      	b.n	800837c <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6818      	ldr	r0, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	681c      	ldr	r4, [r3, #0]
 800831e:	2200      	movs	r2, #0
 8008320:	2104      	movs	r1, #4
 8008322:	f000 fac9 	bl	80088b8 <xQueueGenericCreate>
 8008326:	4603      	mov	r3, r0
 8008328:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d107      	bne.n	8008346 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4618      	mov	r0, r3
 800833e:	f002 fcf7 	bl	800ad30 <vPortFree>
    return NULL;
 8008342:	2300      	movs	r3, #0
 8008344:	e01a      	b.n	800837c <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	681c      	ldr	r4, [r3, #0]
 800834c:	f107 030c 	add.w	r3, r7, #12
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff fde2 	bl	8007f1a <osPoolCreate>
 8008356:	4603      	mov	r3, r0
 8008358:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d107      	bne.n	8008376 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	f002 fcdf 	bl	800ad30 <vPortFree>
    return NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	e002      	b.n	800837c <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800837c:	4618      	mov	r0, r3
 800837e:	371c      	adds	r7, #28
 8008380:	46bd      	mov	sp, r7
 8008382:	bd90      	pop	{r4, r7, pc}

08008384 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <osMailAlloc+0x14>
    return NULL;
 8008394:	2300      	movs	r3, #0
 8008396:	e006      	b.n	80083a6 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	4618      	mov	r0, r3
 800839e:	f7ff fe19 	bl	8007fd4 <osPoolAlloc>
 80083a2:	60f8      	str	r0, [r7, #12]
  
  return p;
 80083a4:	68fb      	ldr	r3, [r7, #12]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <osMailPut+0x14>
    return osErrorParameter;
 80083c0:	2380      	movs	r3, #128	; 0x80
 80083c2:	e02c      	b.n	800841e <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80083c4:	2300      	movs	r3, #0
 80083c6:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80083c8:	f7ff fbb8 	bl	8007b3c <inHandlerMode>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d018      	beq.n	8008404 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6858      	ldr	r0, [r3, #4]
 80083d6:	f107 020c 	add.w	r2, r7, #12
 80083da:	4639      	mov	r1, r7
 80083dc:	2300      	movs	r3, #0
 80083de:	f000 fc0f 	bl	8008c00 <xQueueGenericSendFromISR>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d001      	beq.n	80083ec <osMailPut+0x3c>
      return osErrorOS;
 80083e8:	23ff      	movs	r3, #255	; 0xff
 80083ea:	e018      	b.n	800841e <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d014      	beq.n	800841c <osMailPut+0x6c>
 80083f2:	4b0d      	ldr	r3, [pc, #52]	; (8008428 <osMailPut+0x78>)
 80083f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	e00b      	b.n	800841c <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6858      	ldr	r0, [r3, #4]
 8008408:	4639      	mov	r1, r7
 800840a:	2300      	movs	r3, #0
 800840c:	2200      	movs	r2, #0
 800840e:	f000 faf9 	bl	8008a04 <xQueueGenericSend>
 8008412:	4603      	mov	r3, r0
 8008414:	2b01      	cmp	r3, #1
 8008416:	d001      	beq.n	800841c <osMailPut+0x6c>
      return osErrorOS;
 8008418:	23ff      	movs	r3, #255	; 0xff
 800841a:	e000      	b.n	800841e <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	e000ed04 	.word	0xe000ed04

0800842c <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800842c:	b590      	push	{r4, r7, lr}
 800842e:	b08b      	sub	sp, #44	; 0x2c
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10a      	bne.n	8008458 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8008442:	2380      	movs	r3, #128	; 0x80
 8008444:	617b      	str	r3, [r7, #20]
    return event;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	461c      	mov	r4, r3
 800844a:	f107 0314 	add.w	r3, r7, #20
 800844e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008452:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008456:	e056      	b.n	8008506 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008458:	2300      	movs	r3, #0
 800845a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800845c:	2300      	movs	r3, #0
 800845e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008466:	d103      	bne.n	8008470 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8008468:	f04f 33ff 	mov.w	r3, #4294967295
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
 800846e:	e009      	b.n	8008484 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d006      	beq.n	8008484 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <osMailGet+0x58>
      ticks = 1;
 8008480:	2301      	movs	r3, #1
 8008482:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008484:	f7ff fb5a 	bl	8007b3c <inHandlerMode>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01d      	beq.n	80084ca <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	6858      	ldr	r0, [r3, #4]
 8008492:	f107 0220 	add.w	r2, r7, #32
 8008496:	f107 0314 	add.w	r3, r7, #20
 800849a:	3304      	adds	r3, #4
 800849c:	4619      	mov	r1, r3
 800849e:	f000 fec3 	bl	8009228 <xQueueReceiveFromISR>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d102      	bne.n	80084ae <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 80084a8:	2320      	movs	r3, #32
 80084aa:	617b      	str	r3, [r7, #20]
 80084ac:	e001      	b.n	80084b2 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01e      	beq.n	80084f6 <osMailGet+0xca>
 80084b8:	4b15      	ldr	r3, [pc, #84]	; (8008510 <osMailGet+0xe4>)
 80084ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	e015      	b.n	80084f6 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	6858      	ldr	r0, [r3, #4]
 80084ce:	f107 0314 	add.w	r3, r7, #20
 80084d2:	3304      	adds	r3, #4
 80084d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d6:	4619      	mov	r1, r3
 80084d8:	f000 fcba 	bl	8008e50 <xQueueReceive>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d102      	bne.n	80084e8 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80084e2:	2320      	movs	r3, #32
 80084e4:	617b      	str	r3, [r7, #20]
 80084e6:	e006      	b.n	80084f6 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <osMailGet+0xc6>
 80084ee:	2300      	movs	r3, #0
 80084f0:	e000      	b.n	80084f4 <osMailGet+0xc8>
 80084f2:	2340      	movs	r3, #64	; 0x40
 80084f4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	461c      	mov	r4, r3
 80084fa:	f107 0314 	add.w	r3, r7, #20
 80084fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008502:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	372c      	adds	r7, #44	; 0x2c
 800850a:	46bd      	mov	sp, r7
 800850c:	bd90      	pop	{r4, r7, pc}
 800850e:	bf00      	nop
 8008510:	e000ed04 	.word	0xe000ed04

08008514 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <osMailFree+0x14>
    return osErrorParameter;
 8008524:	2380      	movs	r3, #128	; 0x80
 8008526:	e006      	b.n	8008536 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	4618      	mov	r0, r3
 8008530:	f7ff fdb2 	bl	8008098 <osPoolFree>
 8008534:	4603      	mov	r3, r0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b082      	sub	sp, #8
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008546:	f7ff faf9 	bl	8007b3c <inHandlerMode>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d004      	beq.n	800855a <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 ff07 	bl	8009364 <uxQueueMessagesWaitingFromISR>
 8008556:	4603      	mov	r3, r0
 8008558:	e003      	b.n	8008562 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fee4 	bl	8009328 <uxQueueMessagesWaiting>
 8008560:	4603      	mov	r3, r0
  }
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008572:	f7ff fae3 	bl	8007b3c <inHandlerMode>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <osMessageDelete+0x16>
    return osErrorISR;
 800857c:	2382      	movs	r3, #130	; 0x82
 800857e:	e003      	b.n	8008588 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 ff0d 	bl	80093a0 <vQueueDelete>

  return osOK; 
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f103 0208 	add.w	r2, r3, #8
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f04f 32ff 	mov.w	r2, #4294967295
 80085a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f103 0208 	add.w	r2, r3, #8
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f103 0208 	add.w	r2, r3, #8
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	689a      	ldr	r2, [r3, #8]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	601a      	str	r2, [r3, #0]
}
 8008626:	bf00      	nop
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d103      	bne.n	8008652 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	e00c      	b.n	800866c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	3308      	adds	r3, #8
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	e002      	b.n	8008660 <vListInsert+0x2e>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	429a      	cmp	r2, r3
 800866a:	d2f6      	bcs.n	800865a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	685a      	ldr	r2, [r3, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	601a      	str	r2, [r3, #0]
}
 8008698:	bf00      	nop
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6892      	ldr	r2, [r2, #8]
 80086ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6852      	ldr	r2, [r2, #4]
 80086c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d103      	bne.n	80086d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689a      	ldr	r2, [r3, #8]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	1e5a      	subs	r2, r3, #1
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10a      	bne.n	8008722 <xQueueGenericReset+0x2a>
	__asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	60bb      	str	r3, [r7, #8]
}
 800871e:	bf00      	nop
 8008720:	e7fe      	b.n	8008720 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008722:	f002 f917 	bl	800a954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872e:	68f9      	ldr	r1, [r7, #12]
 8008730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008732:	fb01 f303 	mul.w	r3, r1, r3
 8008736:	441a      	add	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008752:	3b01      	subs	r3, #1
 8008754:	68f9      	ldr	r1, [r7, #12]
 8008756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008758:	fb01 f303 	mul.w	r3, r1, r3
 800875c:	441a      	add	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	22ff      	movs	r2, #255	; 0xff
 8008766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	22ff      	movs	r2, #255	; 0xff
 800876e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d114      	bne.n	80087a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d01a      	beq.n	80087b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3310      	adds	r3, #16
 8008784:	4618      	mov	r0, r3
 8008786:	f001 fbd3 	bl	8009f30 <xTaskRemoveFromEventList>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d012      	beq.n	80087b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008790:	4b0c      	ldr	r3, [pc, #48]	; (80087c4 <xQueueGenericReset+0xcc>)
 8008792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	e009      	b.n	80087b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3310      	adds	r3, #16
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff fef2 	bl	8008590 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3324      	adds	r3, #36	; 0x24
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7ff feed 	bl	8008590 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80087b6:	f002 f8fd 	bl	800a9b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80087ba:	2301      	movs	r3, #1
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	e000ed04 	.word	0xe000ed04

080087c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08e      	sub	sp, #56	; 0x38
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
 80087d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10a      	bne.n	80087f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10a      	bne.n	800880e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	627b      	str	r3, [r7, #36]	; 0x24
}
 800880a:	bf00      	nop
 800880c:	e7fe      	b.n	800880c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d002      	beq.n	800881a <xQueueGenericCreateStatic+0x52>
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <xQueueGenericCreateStatic+0x56>
 800881a:	2301      	movs	r3, #1
 800881c:	e000      	b.n	8008820 <xQueueGenericCreateStatic+0x58>
 800881e:	2300      	movs	r3, #0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10a      	bne.n	800883a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	623b      	str	r3, [r7, #32]
}
 8008836:	bf00      	nop
 8008838:	e7fe      	b.n	8008838 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d102      	bne.n	8008846 <xQueueGenericCreateStatic+0x7e>
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <xQueueGenericCreateStatic+0x82>
 8008846:	2301      	movs	r3, #1
 8008848:	e000      	b.n	800884c <xQueueGenericCreateStatic+0x84>
 800884a:	2300      	movs	r3, #0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	61fb      	str	r3, [r7, #28]
}
 8008862:	bf00      	nop
 8008864:	e7fe      	b.n	8008864 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008866:	2348      	movs	r3, #72	; 0x48
 8008868:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b48      	cmp	r3, #72	; 0x48
 800886e:	d00a      	beq.n	8008886 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	61bb      	str	r3, [r7, #24]
}
 8008882:	bf00      	nop
 8008884:	e7fe      	b.n	8008884 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008886:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00d      	beq.n	80088ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800889a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	4613      	mov	r3, r2
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f83f 	bl	800892c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3730      	adds	r7, #48	; 0x30
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08a      	sub	sp, #40	; 0x28
 80088bc:	af02      	add	r7, sp, #8
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	4613      	mov	r3, r2
 80088c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10a      	bne.n	80088e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80088cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d0:	f383 8811 	msr	BASEPRI, r3
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	613b      	str	r3, [r7, #16]
}
 80088de:	bf00      	nop
 80088e0:	e7fe      	b.n	80088e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	fb02 f303 	mul.w	r3, r2, r3
 80088ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	3348      	adds	r3, #72	; 0x48
 80088f0:	4618      	mov	r0, r3
 80088f2:	f002 f951 	bl	800ab98 <pvPortMalloc>
 80088f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d011      	beq.n	8008922 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	3348      	adds	r3, #72	; 0x48
 8008906:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008910:	79fa      	ldrb	r2, [r7, #7]
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	4613      	mov	r3, r2
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	68b9      	ldr	r1, [r7, #8]
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 f805 	bl	800892c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008922:	69bb      	ldr	r3, [r7, #24]
	}
 8008924:	4618      	mov	r0, r3
 8008926:	3720      	adds	r7, #32
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d103      	bne.n	8008948 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	69ba      	ldr	r2, [r7, #24]
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	e002      	b.n	800894e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800895a:	2101      	movs	r1, #1
 800895c:	69b8      	ldr	r0, [r7, #24]
 800895e:	f7ff fecb 	bl	80086f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008962:	bf00      	nop
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00e      	beq.n	8008996 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800898a:	2300      	movs	r3, #0
 800898c:	2200      	movs	r2, #0
 800898e:	2100      	movs	r1, #0
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f837 	bl	8008a04 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b086      	sub	sp, #24
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	4603      	mov	r3, r0
 80089a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80089a8:	2301      	movs	r3, #1
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	2300      	movs	r3, #0
 80089ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80089b0:	79fb      	ldrb	r3, [r7, #7]
 80089b2:	461a      	mov	r2, r3
 80089b4:	6939      	ldr	r1, [r7, #16]
 80089b6:	6978      	ldr	r0, [r7, #20]
 80089b8:	f7ff ff7e 	bl	80088b8 <xQueueGenericCreate>
 80089bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f7ff ffd3 	bl	800896a <prvInitialiseMutex>

		return xNewQueue;
 80089c4:	68fb      	ldr	r3, [r7, #12]
	}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b088      	sub	sp, #32
 80089d2:	af02      	add	r7, sp, #8
 80089d4:	4603      	mov	r3, r0
 80089d6:	6039      	str	r1, [r7, #0]
 80089d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80089da:	2301      	movs	r3, #1
 80089dc:	617b      	str	r3, [r7, #20]
 80089de:	2300      	movs	r3, #0
 80089e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	2200      	movs	r2, #0
 80089ea:	6939      	ldr	r1, [r7, #16]
 80089ec:	6978      	ldr	r0, [r7, #20]
 80089ee:	f7ff feeb 	bl	80087c8 <xQueueGenericCreateStatic>
 80089f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f7ff ffb8 	bl	800896a <prvInitialiseMutex>

		return xNewQueue;
 80089fa:	68fb      	ldr	r3, [r7, #12]
	}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3718      	adds	r7, #24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08e      	sub	sp, #56	; 0x38
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a12:	2300      	movs	r3, #0
 8008a14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10a      	bne.n	8008a36 <xQueueGenericSend+0x32>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a32:	bf00      	nop
 8008a34:	e7fe      	b.n	8008a34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d103      	bne.n	8008a44 <xQueueGenericSend+0x40>
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <xQueueGenericSend+0x44>
 8008a44:	2301      	movs	r3, #1
 8008a46:	e000      	b.n	8008a4a <xQueueGenericSend+0x46>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10a      	bne.n	8008a64 <xQueueGenericSend+0x60>
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a60:	bf00      	nop
 8008a62:	e7fe      	b.n	8008a62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d103      	bne.n	8008a72 <xQueueGenericSend+0x6e>
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d101      	bne.n	8008a76 <xQueueGenericSend+0x72>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e000      	b.n	8008a78 <xQueueGenericSend+0x74>
 8008a76:	2300      	movs	r3, #0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10a      	bne.n	8008a92 <xQueueGenericSend+0x8e>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	623b      	str	r3, [r7, #32]
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a92:	f001 fc0d 	bl	800a2b0 <xTaskGetSchedulerState>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d102      	bne.n	8008aa2 <xQueueGenericSend+0x9e>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <xQueueGenericSend+0xa2>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e000      	b.n	8008aa8 <xQueueGenericSend+0xa4>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10a      	bne.n	8008ac2 <xQueueGenericSend+0xbe>
	__asm volatile
 8008aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	61fb      	str	r3, [r7, #28]
}
 8008abe:	bf00      	nop
 8008ac0:	e7fe      	b.n	8008ac0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ac2:	f001 ff47 	bl	800a954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d302      	bcc.n	8008ad8 <xQueueGenericSend+0xd4>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d129      	bne.n	8008b2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	68b9      	ldr	r1, [r7, #8]
 8008adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ade:	f000 fc9a 	bl	8009416 <prvCopyDataToQueue>
 8008ae2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d010      	beq.n	8008b0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	3324      	adds	r3, #36	; 0x24
 8008af0:	4618      	mov	r0, r3
 8008af2:	f001 fa1d 	bl	8009f30 <xTaskRemoveFromEventList>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d013      	beq.n	8008b24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008afc:	4b3f      	ldr	r3, [pc, #252]	; (8008bfc <xQueueGenericSend+0x1f8>)
 8008afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	e00a      	b.n	8008b24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d007      	beq.n	8008b24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b14:	4b39      	ldr	r3, [pc, #228]	; (8008bfc <xQueueGenericSend+0x1f8>)
 8008b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b24:	f001 ff46 	bl	800a9b4 <vPortExitCritical>
				return pdPASS;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e063      	b.n	8008bf4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d103      	bne.n	8008b3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b32:	f001 ff3f 	bl	800a9b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b36:	2300      	movs	r3, #0
 8008b38:	e05c      	b.n	8008bf4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d106      	bne.n	8008b4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b40:	f107 0314 	add.w	r3, r7, #20
 8008b44:	4618      	mov	r0, r3
 8008b46:	f001 fa55 	bl	8009ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b4e:	f001 ff31 	bl	800a9b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b52:	f000 ffe3 	bl	8009b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b56:	f001 fefd 	bl	800a954 <vPortEnterCritical>
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b60:	b25b      	sxtb	r3, r3
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b66:	d103      	bne.n	8008b70 <xQueueGenericSend+0x16c>
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b76:	b25b      	sxtb	r3, r3
 8008b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7c:	d103      	bne.n	8008b86 <xQueueGenericSend+0x182>
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b86:	f001 ff15 	bl	800a9b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b8a:	1d3a      	adds	r2, r7, #4
 8008b8c:	f107 0314 	add.w	r3, r7, #20
 8008b90:	4611      	mov	r1, r2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f001 fa44 	bl	800a020 <xTaskCheckForTimeOut>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d124      	bne.n	8008be8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ba0:	f000 fd31 	bl	8009606 <prvIsQueueFull>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d018      	beq.n	8008bdc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	3310      	adds	r3, #16
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f001 f998 	bl	8009ee8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bba:	f000 fcbc 	bl	8009536 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008bbe:	f000 ffbb 	bl	8009b38 <xTaskResumeAll>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f47f af7c 	bne.w	8008ac2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008bca:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <xQueueGenericSend+0x1f8>)
 8008bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	e772      	b.n	8008ac2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bde:	f000 fcaa 	bl	8009536 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008be2:	f000 ffa9 	bl	8009b38 <xTaskResumeAll>
 8008be6:	e76c      	b.n	8008ac2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bea:	f000 fca4 	bl	8009536 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bee:	f000 ffa3 	bl	8009b38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008bf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3738      	adds	r7, #56	; 0x38
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	e000ed04 	.word	0xe000ed04

08008c00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b090      	sub	sp, #64	; 0x40
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d103      	bne.n	8008c3c <xQueueGenericSendFromISR+0x3c>
 8008c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <xQueueGenericSendFromISR+0x40>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e000      	b.n	8008c42 <xQueueGenericSendFromISR+0x42>
 8008c40:	2300      	movs	r3, #0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d10a      	bne.n	8008c5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c58:	bf00      	nop
 8008c5a:	e7fe      	b.n	8008c5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d103      	bne.n	8008c6a <xQueueGenericSendFromISR+0x6a>
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d101      	bne.n	8008c6e <xQueueGenericSendFromISR+0x6e>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e000      	b.n	8008c70 <xQueueGenericSendFromISR+0x70>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	623b      	str	r3, [r7, #32]
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c8a:	f001 ff45 	bl	800ab18 <vPortValidateInterruptPriority>
	__asm volatile
 8008c8e:	f3ef 8211 	mrs	r2, BASEPRI
 8008c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	61fa      	str	r2, [r7, #28]
 8008ca4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ca8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d302      	bcc.n	8008cbc <xQueueGenericSendFromISR+0xbc>
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d12f      	bne.n	8008d1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	68b9      	ldr	r1, [r7, #8]
 8008cd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cd2:	f000 fba0 	bl	8009416 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008cd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cde:	d112      	bne.n	8008d06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d016      	beq.n	8008d16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	3324      	adds	r3, #36	; 0x24
 8008cec:	4618      	mov	r0, r3
 8008cee:	f001 f91f 	bl	8009f30 <xTaskRemoveFromEventList>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00e      	beq.n	8008d16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00b      	beq.n	8008d16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	e007      	b.n	8008d16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	b25a      	sxtb	r2, r3
 8008d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008d16:	2301      	movs	r3, #1
 8008d18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008d1a:	e001      	b.n	8008d20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d22:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	f383 8811 	msr	BASEPRI, r3
}
 8008d2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3740      	adds	r7, #64	; 0x40
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b08e      	sub	sp, #56	; 0x38
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10a      	bne.n	8008d60 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	623b      	str	r3, [r7, #32]
}
 8008d5c:	bf00      	nop
 8008d5e:	e7fe      	b.n	8008d5e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00a      	beq.n	8008d7e <xQueueGiveFromISR+0x48>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	61fb      	str	r3, [r7, #28]
}
 8008d7a:	bf00      	nop
 8008d7c:	e7fe      	b.n	8008d7c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d103      	bne.n	8008d8e <xQueueGiveFromISR+0x58>
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <xQueueGiveFromISR+0x5c>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e000      	b.n	8008d94 <xQueueGiveFromISR+0x5e>
 8008d92:	2300      	movs	r3, #0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10a      	bne.n	8008dae <xQueueGiveFromISR+0x78>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	61bb      	str	r3, [r7, #24]
}
 8008daa:	bf00      	nop
 8008dac:	e7fe      	b.n	8008dac <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008dae:	f001 feb3 	bl	800ab18 <vPortValidateInterruptPriority>
	__asm volatile
 8008db2:	f3ef 8211 	mrs	r2, BASEPRI
 8008db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	617a      	str	r2, [r7, #20]
 8008dc8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008dca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d22b      	bcs.n	8008e36 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008df0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df8:	d112      	bne.n	8008e20 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d016      	beq.n	8008e30 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	3324      	adds	r3, #36	; 0x24
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 f892 	bl	8009f30 <xTaskRemoveFromEventList>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00e      	beq.n	8008e30 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00b      	beq.n	8008e30 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	e007      	b.n	8008e30 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e24:	3301      	adds	r3, #1
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	b25a      	sxtb	r2, r3
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008e30:	2301      	movs	r3, #1
 8008e32:	637b      	str	r3, [r7, #52]	; 0x34
 8008e34:	e001      	b.n	8008e3a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e36:	2300      	movs	r3, #0
 8008e38:	637b      	str	r3, [r7, #52]	; 0x34
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f383 8811 	msr	BASEPRI, r3
}
 8008e44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3738      	adds	r7, #56	; 0x38
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b08c      	sub	sp, #48	; 0x30
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10a      	bne.n	8008e80 <xQueueReceive+0x30>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	623b      	str	r3, [r7, #32]
}
 8008e7c:	bf00      	nop
 8008e7e:	e7fe      	b.n	8008e7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d103      	bne.n	8008e8e <xQueueReceive+0x3e>
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <xQueueReceive+0x42>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e000      	b.n	8008e94 <xQueueReceive+0x44>
 8008e92:	2300      	movs	r3, #0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10a      	bne.n	8008eae <xQueueReceive+0x5e>
	__asm volatile
 8008e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	61fb      	str	r3, [r7, #28]
}
 8008eaa:	bf00      	nop
 8008eac:	e7fe      	b.n	8008eac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008eae:	f001 f9ff 	bl	800a2b0 <xTaskGetSchedulerState>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d102      	bne.n	8008ebe <xQueueReceive+0x6e>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d101      	bne.n	8008ec2 <xQueueReceive+0x72>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e000      	b.n	8008ec4 <xQueueReceive+0x74>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10a      	bne.n	8008ede <xQueueReceive+0x8e>
	__asm volatile
 8008ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ecc:	f383 8811 	msr	BASEPRI, r3
 8008ed0:	f3bf 8f6f 	isb	sy
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	61bb      	str	r3, [r7, #24]
}
 8008eda:	bf00      	nop
 8008edc:	e7fe      	b.n	8008edc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ede:	f001 fd39 	bl	800a954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d01f      	beq.n	8008f2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008eee:	68b9      	ldr	r1, [r7, #8]
 8008ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ef2:	f000 fafa 	bl	80094ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	1e5a      	subs	r2, r3, #1
 8008efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00f      	beq.n	8008f26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f08:	3310      	adds	r3, #16
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f001 f810 	bl	8009f30 <xTaskRemoveFromEventList>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d007      	beq.n	8008f26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f16:	4b3d      	ldr	r3, [pc, #244]	; (800900c <xQueueReceive+0x1bc>)
 8008f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f26:	f001 fd45 	bl	800a9b4 <vPortExitCritical>
				return pdPASS;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e069      	b.n	8009002 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d103      	bne.n	8008f3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f34:	f001 fd3e 	bl	800a9b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	e062      	b.n	8009002 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d106      	bne.n	8008f50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f42:	f107 0310 	add.w	r3, r7, #16
 8008f46:	4618      	mov	r0, r3
 8008f48:	f001 f854 	bl	8009ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f50:	f001 fd30 	bl	800a9b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f54:	f000 fde2 	bl	8009b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f58:	f001 fcfc 	bl	800a954 <vPortEnterCritical>
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f62:	b25b      	sxtb	r3, r3
 8008f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f68:	d103      	bne.n	8008f72 <xQueueReceive+0x122>
 8008f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f78:	b25b      	sxtb	r3, r3
 8008f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f7e:	d103      	bne.n	8008f88 <xQueueReceive+0x138>
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f88:	f001 fd14 	bl	800a9b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f8c:	1d3a      	adds	r2, r7, #4
 8008f8e:	f107 0310 	add.w	r3, r7, #16
 8008f92:	4611      	mov	r1, r2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f001 f843 	bl	800a020 <xTaskCheckForTimeOut>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d123      	bne.n	8008fe8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fa2:	f000 fb1a 	bl	80095da <prvIsQueueEmpty>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d017      	beq.n	8008fdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	3324      	adds	r3, #36	; 0x24
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 ff97 	bl	8009ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fbc:	f000 fabb 	bl	8009536 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008fc0:	f000 fdba 	bl	8009b38 <xTaskResumeAll>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d189      	bne.n	8008ede <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008fca:	4b10      	ldr	r3, [pc, #64]	; (800900c <xQueueReceive+0x1bc>)
 8008fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	e780      	b.n	8008ede <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fde:	f000 faaa 	bl	8009536 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fe2:	f000 fda9 	bl	8009b38 <xTaskResumeAll>
 8008fe6:	e77a      	b.n	8008ede <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fea:	f000 faa4 	bl	8009536 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fee:	f000 fda3 	bl	8009b38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ff4:	f000 faf1 	bl	80095da <prvIsQueueEmpty>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f43f af6f 	beq.w	8008ede <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009000:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009002:	4618      	mov	r0, r3
 8009004:	3730      	adds	r7, #48	; 0x30
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	e000ed04 	.word	0xe000ed04

08009010 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b08e      	sub	sp, #56	; 0x38
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800901a:	2300      	movs	r3, #0
 800901c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009022:	2300      	movs	r3, #0
 8009024:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10a      	bne.n	8009042 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	623b      	str	r3, [r7, #32]
}
 800903e:	bf00      	nop
 8009040:	e7fe      	b.n	8009040 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00a      	beq.n	8009060 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	61fb      	str	r3, [r7, #28]
}
 800905c:	bf00      	nop
 800905e:	e7fe      	b.n	800905e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009060:	f001 f926 	bl	800a2b0 <xTaskGetSchedulerState>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d102      	bne.n	8009070 <xQueueSemaphoreTake+0x60>
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <xQueueSemaphoreTake+0x64>
 8009070:	2301      	movs	r3, #1
 8009072:	e000      	b.n	8009076 <xQueueSemaphoreTake+0x66>
 8009074:	2300      	movs	r3, #0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10a      	bne.n	8009090 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	61bb      	str	r3, [r7, #24]
}
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009090:	f001 fc60 	bl	800a954 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009098:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	2b00      	cmp	r3, #0
 800909e:	d024      	beq.n	80090ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	1e5a      	subs	r2, r3, #1
 80090a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d104      	bne.n	80090ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80090b0:	f001 faa6 	bl	800a600 <pvTaskIncrementMutexHeldCount>
 80090b4:	4602      	mov	r2, r0
 80090b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00f      	beq.n	80090e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	3310      	adds	r3, #16
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 ff32 	bl	8009f30 <xTaskRemoveFromEventList>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d007      	beq.n	80090e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090d2:	4b54      	ldr	r3, [pc, #336]	; (8009224 <xQueueSemaphoreTake+0x214>)
 80090d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090e2:	f001 fc67 	bl	800a9b4 <vPortExitCritical>
				return pdPASS;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e097      	b.n	800921a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d111      	bne.n	8009114 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80090f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00a      	beq.n	800910c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	617b      	str	r3, [r7, #20]
}
 8009108:	bf00      	nop
 800910a:	e7fe      	b.n	800910a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800910c:	f001 fc52 	bl	800a9b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009110:	2300      	movs	r3, #0
 8009112:	e082      	b.n	800921a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800911a:	f107 030c 	add.w	r3, r7, #12
 800911e:	4618      	mov	r0, r3
 8009120:	f000 ff68 	bl	8009ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009124:	2301      	movs	r3, #1
 8009126:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009128:	f001 fc44 	bl	800a9b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800912c:	f000 fcf6 	bl	8009b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009130:	f001 fc10 	bl	800a954 <vPortEnterCritical>
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800913a:	b25b      	sxtb	r3, r3
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009140:	d103      	bne.n	800914a <xQueueSemaphoreTake+0x13a>
 8009142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800914a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009150:	b25b      	sxtb	r3, r3
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009156:	d103      	bne.n	8009160 <xQueueSemaphoreTake+0x150>
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009160:	f001 fc28 	bl	800a9b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009164:	463a      	mov	r2, r7
 8009166:	f107 030c 	add.w	r3, r7, #12
 800916a:	4611      	mov	r1, r2
 800916c:	4618      	mov	r0, r3
 800916e:	f000 ff57 	bl	800a020 <xTaskCheckForTimeOut>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d132      	bne.n	80091de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800917a:	f000 fa2e 	bl	80095da <prvIsQueueEmpty>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d026      	beq.n	80091d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d109      	bne.n	80091a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800918c:	f001 fbe2 	bl	800a954 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	4618      	mov	r0, r3
 8009196:	f001 f8a9 	bl	800a2ec <xTaskPriorityInherit>
 800919a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800919c:	f001 fc0a 	bl	800a9b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a2:	3324      	adds	r3, #36	; 0x24
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	4611      	mov	r1, r2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 fe9d 	bl	8009ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091b0:	f000 f9c1 	bl	8009536 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091b4:	f000 fcc0 	bl	8009b38 <xTaskResumeAll>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f47f af68 	bne.w	8009090 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80091c0:	4b18      	ldr	r3, [pc, #96]	; (8009224 <xQueueSemaphoreTake+0x214>)
 80091c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	e75e      	b.n	8009090 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80091d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091d4:	f000 f9af 	bl	8009536 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091d8:	f000 fcae 	bl	8009b38 <xTaskResumeAll>
 80091dc:	e758      	b.n	8009090 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80091de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091e0:	f000 f9a9 	bl	8009536 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091e4:	f000 fca8 	bl	8009b38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091ea:	f000 f9f6 	bl	80095da <prvIsQueueEmpty>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f43f af4d 	beq.w	8009090 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80091f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00d      	beq.n	8009218 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80091fc:	f001 fbaa 	bl	800a954 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009202:	f000 f8f0 	bl	80093e6 <prvGetDisinheritPriorityAfterTimeout>
 8009206:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800920e:	4618      	mov	r0, r3
 8009210:	f001 f968 	bl	800a4e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009214:	f001 fbce 	bl	800a9b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009218:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800921a:	4618      	mov	r0, r3
 800921c:	3738      	adds	r7, #56	; 0x38
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	e000ed04 	.word	0xe000ed04

08009228 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b08e      	sub	sp, #56	; 0x38
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10a      	bne.n	8009254 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800923e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	623b      	str	r3, [r7, #32]
}
 8009250:	bf00      	nop
 8009252:	e7fe      	b.n	8009252 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d103      	bne.n	8009262 <xQueueReceiveFromISR+0x3a>
 800925a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <xQueueReceiveFromISR+0x3e>
 8009262:	2301      	movs	r3, #1
 8009264:	e000      	b.n	8009268 <xQueueReceiveFromISR+0x40>
 8009266:	2300      	movs	r3, #0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10a      	bne.n	8009282 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800926c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	61fb      	str	r3, [r7, #28]
}
 800927e:	bf00      	nop
 8009280:	e7fe      	b.n	8009280 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009282:	f001 fc49 	bl	800ab18 <vPortValidateInterruptPriority>
	__asm volatile
 8009286:	f3ef 8211 	mrs	r2, BASEPRI
 800928a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	61ba      	str	r2, [r7, #24]
 800929c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800929e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d02f      	beq.n	800930e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092b8:	68b9      	ldr	r1, [r7, #8]
 80092ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092bc:	f000 f915 	bl	80094ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c2:	1e5a      	subs	r2, r3, #1
 80092c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80092c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d0:	d112      	bne.n	80092f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d016      	beq.n	8009308 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	3310      	adds	r3, #16
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fe26 	bl	8009f30 <xTaskRemoveFromEventList>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00e      	beq.n	8009308 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	601a      	str	r2, [r3, #0]
 80092f6:	e007      	b.n	8009308 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80092f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092fc:	3301      	adds	r3, #1
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	b25a      	sxtb	r2, r3
 8009302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009308:	2301      	movs	r3, #1
 800930a:	637b      	str	r3, [r7, #52]	; 0x34
 800930c:	e001      	b.n	8009312 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800930e:	2300      	movs	r3, #0
 8009310:	637b      	str	r3, [r7, #52]	; 0x34
 8009312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009314:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f383 8811 	msr	BASEPRI, r3
}
 800931c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800931e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009320:	4618      	mov	r0, r3
 8009322:	3738      	adds	r7, #56	; 0x38
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10a      	bne.n	800934c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8009336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933a:	f383 8811 	msr	BASEPRI, r3
 800933e:	f3bf 8f6f 	isb	sy
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	60bb      	str	r3, [r7, #8]
}
 8009348:	bf00      	nop
 800934a:	e7fe      	b.n	800934a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800934c:	f001 fb02 	bl	800a954 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009354:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009356:	f001 fb2d 	bl	800a9b4 <vPortExitCritical>

	return uxReturn;
 800935a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10a      	bne.n	800938c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	60fb      	str	r3, [r7, #12]
}
 8009388:	bf00      	nop
 800938a:	e7fe      	b.n	800938a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009390:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009392:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009394:	4618      	mov	r0, r3
 8009396:	371c      	adds	r7, #28
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10a      	bne.n	80093c8 <vQueueDelete+0x28>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	60bb      	str	r3, [r7, #8]
}
 80093c4:	bf00      	nop
 80093c6:	e7fe      	b.n	80093c6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 f935 	bl	8009638 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f001 fca9 	bl	800ad30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80093de:	bf00      	nop
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80093e6:	b480      	push	{r7}
 80093e8:	b085      	sub	sp, #20
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d006      	beq.n	8009404 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f1c3 0307 	rsb	r3, r3, #7
 8009400:	60fb      	str	r3, [r7, #12]
 8009402:	e001      	b.n	8009408 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009404:	2300      	movs	r3, #0
 8009406:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009408:	68fb      	ldr	r3, [r7, #12]
	}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b086      	sub	sp, #24
 800941a:	af00      	add	r7, sp, #0
 800941c:	60f8      	str	r0, [r7, #12]
 800941e:	60b9      	str	r1, [r7, #8]
 8009420:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009422:	2300      	movs	r3, #0
 8009424:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10d      	bne.n	8009450 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d14d      	bne.n	80094d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	4618      	mov	r0, r3
 8009442:	f000 ffc9 	bl	800a3d8 <xTaskPriorityDisinherit>
 8009446:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	609a      	str	r2, [r3, #8]
 800944e:	e043      	b.n	80094d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d119      	bne.n	800948a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6858      	ldr	r0, [r3, #4]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	461a      	mov	r2, r3
 8009460:	68b9      	ldr	r1, [r7, #8]
 8009462:	f00e ffcf 	bl	8018404 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946e:	441a      	add	r2, r3
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	429a      	cmp	r2, r3
 800947e:	d32b      	bcc.n	80094d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	605a      	str	r2, [r3, #4]
 8009488:	e026      	b.n	80094d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	68d8      	ldr	r0, [r3, #12]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009492:	461a      	mov	r2, r3
 8009494:	68b9      	ldr	r1, [r7, #8]
 8009496:	f00e ffb5 	bl	8018404 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a2:	425b      	negs	r3, r3
 80094a4:	441a      	add	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	68da      	ldr	r2, [r3, #12]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d207      	bcs.n	80094c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	689a      	ldr	r2, [r3, #8]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	425b      	negs	r3, r3
 80094c0:	441a      	add	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d105      	bne.n	80094d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d002      	beq.n	80094d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80094e0:	697b      	ldr	r3, [r7, #20]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3718      	adds	r7, #24
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b082      	sub	sp, #8
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d018      	beq.n	800952e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68da      	ldr	r2, [r3, #12]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009504:	441a      	add	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	429a      	cmp	r2, r3
 8009514:	d303      	bcc.n	800951e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68d9      	ldr	r1, [r3, #12]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009526:	461a      	mov	r2, r3
 8009528:	6838      	ldr	r0, [r7, #0]
 800952a:	f00e ff6b 	bl	8018404 <memcpy>
	}
}
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800953e:	f001 fa09 	bl	800a954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009548:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800954a:	e011      	b.n	8009570 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	2b00      	cmp	r3, #0
 8009552:	d012      	beq.n	800957a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	3324      	adds	r3, #36	; 0x24
 8009558:	4618      	mov	r0, r3
 800955a:	f000 fce9 	bl	8009f30 <xTaskRemoveFromEventList>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009564:	f000 fdbe 	bl	800a0e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009568:	7bfb      	ldrb	r3, [r7, #15]
 800956a:	3b01      	subs	r3, #1
 800956c:	b2db      	uxtb	r3, r3
 800956e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009574:	2b00      	cmp	r3, #0
 8009576:	dce9      	bgt.n	800954c <prvUnlockQueue+0x16>
 8009578:	e000      	b.n	800957c <prvUnlockQueue+0x46>
					break;
 800957a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	22ff      	movs	r2, #255	; 0xff
 8009580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009584:	f001 fa16 	bl	800a9b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009588:	f001 f9e4 	bl	800a954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009592:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009594:	e011      	b.n	80095ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d012      	beq.n	80095c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	3310      	adds	r3, #16
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 fcc4 	bl	8009f30 <xTaskRemoveFromEventList>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80095ae:	f000 fd99 	bl	800a0e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80095b2:	7bbb      	ldrb	r3, [r7, #14]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	dce9      	bgt.n	8009596 <prvUnlockQueue+0x60>
 80095c2:	e000      	b.n	80095c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80095c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	22ff      	movs	r2, #255	; 0xff
 80095ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80095ce:	f001 f9f1 	bl	800a9b4 <vPortExitCritical>
}
 80095d2:	bf00      	nop
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095e2:	f001 f9b7 	bl	800a954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d102      	bne.n	80095f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80095ee:	2301      	movs	r3, #1
 80095f0:	60fb      	str	r3, [r7, #12]
 80095f2:	e001      	b.n	80095f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80095f4:	2300      	movs	r3, #0
 80095f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095f8:	f001 f9dc 	bl	800a9b4 <vPortExitCritical>

	return xReturn;
 80095fc:	68fb      	ldr	r3, [r7, #12]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b084      	sub	sp, #16
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800960e:	f001 f9a1 	bl	800a954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800961a:	429a      	cmp	r2, r3
 800961c:	d102      	bne.n	8009624 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800961e:	2301      	movs	r3, #1
 8009620:	60fb      	str	r3, [r7, #12]
 8009622:	e001      	b.n	8009628 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009624:	2300      	movs	r3, #0
 8009626:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009628:	f001 f9c4 	bl	800a9b4 <vPortExitCritical>

	return xReturn;
 800962c:	68fb      	ldr	r3, [r7, #12]
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
	...

08009638 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009640:	2300      	movs	r3, #0
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	e016      	b.n	8009674 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009646:	4a10      	ldr	r2, [pc, #64]	; (8009688 <vQueueUnregisterQueue+0x50>)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	4413      	add	r3, r2
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	429a      	cmp	r2, r3
 8009654:	d10b      	bne.n	800966e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009656:	4a0c      	ldr	r2, [pc, #48]	; (8009688 <vQueueUnregisterQueue+0x50>)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2100      	movs	r1, #0
 800965c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009660:	4a09      	ldr	r2, [pc, #36]	; (8009688 <vQueueUnregisterQueue+0x50>)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	00db      	lsls	r3, r3, #3
 8009666:	4413      	add	r3, r2
 8009668:	2200      	movs	r2, #0
 800966a:	605a      	str	r2, [r3, #4]
				break;
 800966c:	e006      	b.n	800967c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3301      	adds	r3, #1
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b07      	cmp	r3, #7
 8009678:	d9e5      	bls.n	8009646 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800967a:	bf00      	nop
 800967c:	bf00      	nop
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	2000a2bc 	.word	0x2000a2bc

0800968c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800968c:	b580      	push	{r7, lr}
 800968e:	b08e      	sub	sp, #56	; 0x38
 8009690:	af04      	add	r7, sp, #16
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800969a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10a      	bne.n	80096b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	623b      	str	r3, [r7, #32]
}
 80096b2:	bf00      	nop
 80096b4:	e7fe      	b.n	80096b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80096b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10a      	bne.n	80096d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	61fb      	str	r3, [r7, #28]
}
 80096ce:	bf00      	nop
 80096d0:	e7fe      	b.n	80096d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80096d2:	23b4      	movs	r3, #180	; 0xb4
 80096d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	2bb4      	cmp	r3, #180	; 0xb4
 80096da:	d00a      	beq.n	80096f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	61bb      	str	r3, [r7, #24]
}
 80096ee:	bf00      	nop
 80096f0:	e7fe      	b.n	80096f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80096f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80096f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d01e      	beq.n	8009738 <xTaskCreateStatic+0xac>
 80096fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d01b      	beq.n	8009738 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009702:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009708:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800970a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970c:	2202      	movs	r2, #2
 800970e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009712:	2300      	movs	r3, #0
 8009714:	9303      	str	r3, [sp, #12]
 8009716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009718:	9302      	str	r3, [sp, #8]
 800971a:	f107 0314 	add.w	r3, r7, #20
 800971e:	9301      	str	r3, [sp, #4]
 8009720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	68b9      	ldr	r1, [r7, #8]
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f000 f850 	bl	80097d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009732:	f000 f8eb 	bl	800990c <prvAddNewTaskToReadyList>
 8009736:	e001      	b.n	800973c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009738:	2300      	movs	r3, #0
 800973a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800973c:	697b      	ldr	r3, [r7, #20]
	}
 800973e:	4618      	mov	r0, r3
 8009740:	3728      	adds	r7, #40	; 0x28
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009746:	b580      	push	{r7, lr}
 8009748:	b08c      	sub	sp, #48	; 0x30
 800974a:	af04      	add	r7, sp, #16
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	60b9      	str	r1, [r7, #8]
 8009750:	603b      	str	r3, [r7, #0]
 8009752:	4613      	mov	r3, r2
 8009754:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009756:	88fb      	ldrh	r3, [r7, #6]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4618      	mov	r0, r3
 800975c:	f001 fa1c 	bl	800ab98 <pvPortMalloc>
 8009760:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00e      	beq.n	8009786 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009768:	20b4      	movs	r0, #180	; 0xb4
 800976a:	f001 fa15 	bl	800ab98 <pvPortMalloc>
 800976e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	631a      	str	r2, [r3, #48]	; 0x30
 800977c:	e005      	b.n	800978a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800977e:	6978      	ldr	r0, [r7, #20]
 8009780:	f001 fad6 	bl	800ad30 <vPortFree>
 8009784:	e001      	b.n	800978a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009786:	2300      	movs	r3, #0
 8009788:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d017      	beq.n	80097c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009798:	88fa      	ldrh	r2, [r7, #6]
 800979a:	2300      	movs	r3, #0
 800979c:	9303      	str	r3, [sp, #12]
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	9302      	str	r3, [sp, #8]
 80097a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a4:	9301      	str	r3, [sp, #4]
 80097a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	68b9      	ldr	r1, [r7, #8]
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 f80e 	bl	80097d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097b4:	69f8      	ldr	r0, [r7, #28]
 80097b6:	f000 f8a9 	bl	800990c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80097ba:	2301      	movs	r3, #1
 80097bc:	61bb      	str	r3, [r7, #24]
 80097be:	e002      	b.n	80097c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80097c0:	f04f 33ff 	mov.w	r3, #4294967295
 80097c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80097c6:	69bb      	ldr	r3, [r7, #24]
	}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3720      	adds	r7, #32
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b088      	sub	sp, #32
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
 80097dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80097e8:	3b01      	subs	r3, #1
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	f023 0307 	bic.w	r3, r3, #7
 80097f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	f003 0307 	and.w	r3, r3, #7
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00a      	beq.n	8009818 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	617b      	str	r3, [r7, #20]
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d01f      	beq.n	800985e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800981e:	2300      	movs	r3, #0
 8009820:	61fb      	str	r3, [r7, #28]
 8009822:	e012      	b.n	800984a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	4413      	add	r3, r2
 800982a:	7819      	ldrb	r1, [r3, #0]
 800982c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	4413      	add	r3, r2
 8009832:	3334      	adds	r3, #52	; 0x34
 8009834:	460a      	mov	r2, r1
 8009836:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	4413      	add	r3, r2
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d006      	beq.n	8009852 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	3301      	adds	r3, #1
 8009848:	61fb      	str	r3, [r7, #28]
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	2b0f      	cmp	r3, #15
 800984e:	d9e9      	bls.n	8009824 <prvInitialiseNewTask+0x54>
 8009850:	e000      	b.n	8009854 <prvInitialiseNewTask+0x84>
			{
				break;
 8009852:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	2200      	movs	r2, #0
 8009858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800985c:	e003      	b.n	8009866 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	2200      	movs	r2, #0
 8009862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009868:	2b06      	cmp	r3, #6
 800986a:	d901      	bls.n	8009870 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800986c:	2306      	movs	r3, #6
 800986e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009874:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800987a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800987c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987e:	2200      	movs	r2, #0
 8009880:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009884:	3304      	adds	r3, #4
 8009886:	4618      	mov	r0, r3
 8009888:	f7fe fea2 	bl	80085d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800988c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988e:	3318      	adds	r3, #24
 8009890:	4618      	mov	r0, r3
 8009892:	f7fe fe9d 	bl	80085d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800989a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	f1c3 0207 	rsb	r2, r3, #7
 80098a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80098a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80098ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ae:	2200      	movs	r2, #0
 80098b0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80098bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098be:	334c      	adds	r3, #76	; 0x4c
 80098c0:	2260      	movs	r2, #96	; 0x60
 80098c2:	2100      	movs	r1, #0
 80098c4:	4618      	mov	r0, r3
 80098c6:	f00e fdc5 	bl	8018454 <memset>
 80098ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098cc:	4a0c      	ldr	r2, [pc, #48]	; (8009900 <prvInitialiseNewTask+0x130>)
 80098ce:	651a      	str	r2, [r3, #80]	; 0x50
 80098d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d2:	4a0c      	ldr	r2, [pc, #48]	; (8009904 <prvInitialiseNewTask+0x134>)
 80098d4:	655a      	str	r2, [r3, #84]	; 0x54
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	4a0b      	ldr	r2, [pc, #44]	; (8009908 <prvInitialiseNewTask+0x138>)
 80098da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	68f9      	ldr	r1, [r7, #12]
 80098e0:	69b8      	ldr	r0, [r7, #24]
 80098e2:	f000 ff07 	bl	800a6f4 <pxPortInitialiseStack>
 80098e6:	4602      	mov	r2, r0
 80098e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80098ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d002      	beq.n	80098f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80098f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098f8:	bf00      	nop
 80098fa:	3720      	adds	r7, #32
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	0801ce64 	.word	0x0801ce64
 8009904:	0801ce84 	.word	0x0801ce84
 8009908:	0801ce44 	.word	0x0801ce44

0800990c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009914:	f001 f81e 	bl	800a954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009918:	4b2a      	ldr	r3, [pc, #168]	; (80099c4 <prvAddNewTaskToReadyList+0xb8>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	3301      	adds	r3, #1
 800991e:	4a29      	ldr	r2, [pc, #164]	; (80099c4 <prvAddNewTaskToReadyList+0xb8>)
 8009920:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009922:	4b29      	ldr	r3, [pc, #164]	; (80099c8 <prvAddNewTaskToReadyList+0xbc>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d109      	bne.n	800993e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800992a:	4a27      	ldr	r2, [pc, #156]	; (80099c8 <prvAddNewTaskToReadyList+0xbc>)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009930:	4b24      	ldr	r3, [pc, #144]	; (80099c4 <prvAddNewTaskToReadyList+0xb8>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d110      	bne.n	800995a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009938:	f000 fbf8 	bl	800a12c <prvInitialiseTaskLists>
 800993c:	e00d      	b.n	800995a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800993e:	4b23      	ldr	r3, [pc, #140]	; (80099cc <prvAddNewTaskToReadyList+0xc0>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d109      	bne.n	800995a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009946:	4b20      	ldr	r3, [pc, #128]	; (80099c8 <prvAddNewTaskToReadyList+0xbc>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009950:	429a      	cmp	r2, r3
 8009952:	d802      	bhi.n	800995a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009954:	4a1c      	ldr	r2, [pc, #112]	; (80099c8 <prvAddNewTaskToReadyList+0xbc>)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800995a:	4b1d      	ldr	r3, [pc, #116]	; (80099d0 <prvAddNewTaskToReadyList+0xc4>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3301      	adds	r3, #1
 8009960:	4a1b      	ldr	r2, [pc, #108]	; (80099d0 <prvAddNewTaskToReadyList+0xc4>)
 8009962:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	2201      	movs	r2, #1
 800996a:	409a      	lsls	r2, r3
 800996c:	4b19      	ldr	r3, [pc, #100]	; (80099d4 <prvAddNewTaskToReadyList+0xc8>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4313      	orrs	r3, r2
 8009972:	4a18      	ldr	r2, [pc, #96]	; (80099d4 <prvAddNewTaskToReadyList+0xc8>)
 8009974:	6013      	str	r3, [r2, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800997a:	4613      	mov	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4a15      	ldr	r2, [pc, #84]	; (80099d8 <prvAddNewTaskToReadyList+0xcc>)
 8009984:	441a      	add	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	3304      	adds	r3, #4
 800998a:	4619      	mov	r1, r3
 800998c:	4610      	mov	r0, r2
 800998e:	f7fe fe2c 	bl	80085ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009992:	f001 f80f 	bl	800a9b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009996:	4b0d      	ldr	r3, [pc, #52]	; (80099cc <prvAddNewTaskToReadyList+0xc0>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00e      	beq.n	80099bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800999e:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <prvAddNewTaskToReadyList+0xbc>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d207      	bcs.n	80099bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80099ac:	4b0b      	ldr	r3, [pc, #44]	; (80099dc <prvAddNewTaskToReadyList+0xd0>)
 80099ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099bc:	bf00      	nop
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	200005dc 	.word	0x200005dc
 80099c8:	200004dc 	.word	0x200004dc
 80099cc:	200005e8 	.word	0x200005e8
 80099d0:	200005f8 	.word	0x200005f8
 80099d4:	200005e4 	.word	0x200005e4
 80099d8:	200004e0 	.word	0x200004e0
 80099dc:	e000ed04 	.word	0xe000ed04

080099e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d017      	beq.n	8009a22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80099f2:	4b13      	ldr	r3, [pc, #76]	; (8009a40 <vTaskDelay+0x60>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00a      	beq.n	8009a10 <vTaskDelay+0x30>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	60bb      	str	r3, [r7, #8]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a10:	f000 f884 	bl	8009b1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a14:	2100      	movs	r1, #0
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fe06 	bl	800a628 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a1c:	f000 f88c 	bl	8009b38 <xTaskResumeAll>
 8009a20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d107      	bne.n	8009a38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009a28:	4b06      	ldr	r3, [pc, #24]	; (8009a44 <vTaskDelay+0x64>)
 8009a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a38:	bf00      	nop
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20000604 	.word	0x20000604
 8009a44:	e000ed04 	.word	0xe000ed04

08009a48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08a      	sub	sp, #40	; 0x28
 8009a4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a52:	2300      	movs	r3, #0
 8009a54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a56:	463a      	mov	r2, r7
 8009a58:	1d39      	adds	r1, r7, #4
 8009a5a:	f107 0308 	add.w	r3, r7, #8
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7f7 f930 	bl	8000cc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	9202      	str	r2, [sp, #8]
 8009a6c:	9301      	str	r3, [sp, #4]
 8009a6e:	2300      	movs	r3, #0
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	2300      	movs	r3, #0
 8009a74:	460a      	mov	r2, r1
 8009a76:	4921      	ldr	r1, [pc, #132]	; (8009afc <vTaskStartScheduler+0xb4>)
 8009a78:	4821      	ldr	r0, [pc, #132]	; (8009b00 <vTaskStartScheduler+0xb8>)
 8009a7a:	f7ff fe07 	bl	800968c <xTaskCreateStatic>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	4a20      	ldr	r2, [pc, #128]	; (8009b04 <vTaskStartScheduler+0xbc>)
 8009a82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009a84:	4b1f      	ldr	r3, [pc, #124]	; (8009b04 <vTaskStartScheduler+0xbc>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	617b      	str	r3, [r7, #20]
 8009a90:	e001      	b.n	8009a96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009a92:	2300      	movs	r3, #0
 8009a94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d11b      	bne.n	8009ad4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	613b      	str	r3, [r7, #16]
}
 8009aae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ab0:	4b15      	ldr	r3, [pc, #84]	; (8009b08 <vTaskStartScheduler+0xc0>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	334c      	adds	r3, #76	; 0x4c
 8009ab6:	4a15      	ldr	r2, [pc, #84]	; (8009b0c <vTaskStartScheduler+0xc4>)
 8009ab8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009aba:	4b15      	ldr	r3, [pc, #84]	; (8009b10 <vTaskStartScheduler+0xc8>)
 8009abc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009ac2:	4b14      	ldr	r3, [pc, #80]	; (8009b14 <vTaskStartScheduler+0xcc>)
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ac8:	4b13      	ldr	r3, [pc, #76]	; (8009b18 <vTaskStartScheduler+0xd0>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ace:	f000 fe9f 	bl	800a810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009ad2:	e00e      	b.n	8009af2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ada:	d10a      	bne.n	8009af2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8009adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	60fb      	str	r3, [r7, #12]
}
 8009aee:	bf00      	nop
 8009af0:	e7fe      	b.n	8009af0 <vTaskStartScheduler+0xa8>
}
 8009af2:	bf00      	nop
 8009af4:	3718      	adds	r7, #24
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	0801981c 	.word	0x0801981c
 8009b00:	0800a0fd 	.word	0x0800a0fd
 8009b04:	20000600 	.word	0x20000600
 8009b08:	200004dc 	.word	0x200004dc
 8009b0c:	200000b0 	.word	0x200000b0
 8009b10:	200005fc 	.word	0x200005fc
 8009b14:	200005e8 	.word	0x200005e8
 8009b18:	200005e0 	.word	0x200005e0

08009b1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009b20:	4b04      	ldr	r3, [pc, #16]	; (8009b34 <vTaskSuspendAll+0x18>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3301      	adds	r3, #1
 8009b26:	4a03      	ldr	r2, [pc, #12]	; (8009b34 <vTaskSuspendAll+0x18>)
 8009b28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009b2a:	bf00      	nop
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	20000604 	.word	0x20000604

08009b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b46:	4b41      	ldr	r3, [pc, #260]	; (8009c4c <xTaskResumeAll+0x114>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10a      	bne.n	8009b64 <xTaskResumeAll+0x2c>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	603b      	str	r3, [r7, #0]
}
 8009b60:	bf00      	nop
 8009b62:	e7fe      	b.n	8009b62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b64:	f000 fef6 	bl	800a954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b68:	4b38      	ldr	r3, [pc, #224]	; (8009c4c <xTaskResumeAll+0x114>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	4a37      	ldr	r2, [pc, #220]	; (8009c4c <xTaskResumeAll+0x114>)
 8009b70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b72:	4b36      	ldr	r3, [pc, #216]	; (8009c4c <xTaskResumeAll+0x114>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d161      	bne.n	8009c3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b7a:	4b35      	ldr	r3, [pc, #212]	; (8009c50 <xTaskResumeAll+0x118>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d05d      	beq.n	8009c3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b82:	e02e      	b.n	8009be2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b84:	4b33      	ldr	r3, [pc, #204]	; (8009c54 <xTaskResumeAll+0x11c>)
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	3318      	adds	r3, #24
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fe fd87 	bl	80086a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe fd82 	bl	80086a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	409a      	lsls	r2, r3
 8009ba8:	4b2b      	ldr	r3, [pc, #172]	; (8009c58 <xTaskResumeAll+0x120>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	4a2a      	ldr	r2, [pc, #168]	; (8009c58 <xTaskResumeAll+0x120>)
 8009bb0:	6013      	str	r3, [r2, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4413      	add	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4a27      	ldr	r2, [pc, #156]	; (8009c5c <xTaskResumeAll+0x124>)
 8009bc0:	441a      	add	r2, r3
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4610      	mov	r0, r2
 8009bca:	f7fe fd0e 	bl	80085ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd2:	4b23      	ldr	r3, [pc, #140]	; (8009c60 <xTaskResumeAll+0x128>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d302      	bcc.n	8009be2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009bdc:	4b21      	ldr	r3, [pc, #132]	; (8009c64 <xTaskResumeAll+0x12c>)
 8009bde:	2201      	movs	r2, #1
 8009be0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009be2:	4b1c      	ldr	r3, [pc, #112]	; (8009c54 <xTaskResumeAll+0x11c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1cc      	bne.n	8009b84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009bf0:	f000 fb3e 	bl	800a270 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009bf4:	4b1c      	ldr	r3, [pc, #112]	; (8009c68 <xTaskResumeAll+0x130>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d010      	beq.n	8009c22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c00:	f000 f858 	bl	8009cb4 <xTaskIncrementTick>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d002      	beq.n	8009c10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009c0a:	4b16      	ldr	r3, [pc, #88]	; (8009c64 <xTaskResumeAll+0x12c>)
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1f1      	bne.n	8009c00 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009c1c:	4b12      	ldr	r3, [pc, #72]	; (8009c68 <xTaskResumeAll+0x130>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c22:	4b10      	ldr	r3, [pc, #64]	; (8009c64 <xTaskResumeAll+0x12c>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d009      	beq.n	8009c3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c2e:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <xTaskResumeAll+0x134>)
 8009c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c3e:	f000 feb9 	bl	800a9b4 <vPortExitCritical>

	return xAlreadyYielded;
 8009c42:	68bb      	ldr	r3, [r7, #8]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	20000604 	.word	0x20000604
 8009c50:	200005dc 	.word	0x200005dc
 8009c54:	2000059c 	.word	0x2000059c
 8009c58:	200005e4 	.word	0x200005e4
 8009c5c:	200004e0 	.word	0x200004e0
 8009c60:	200004dc 	.word	0x200004dc
 8009c64:	200005f0 	.word	0x200005f0
 8009c68:	200005ec 	.word	0x200005ec
 8009c6c:	e000ed04 	.word	0xe000ed04

08009c70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009c76:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <xTaskGetTickCount+0x1c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c7c:	687b      	ldr	r3, [r7, #4]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	370c      	adds	r7, #12
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	200005e0 	.word	0x200005e0

08009c90 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c96:	f000 ff3f 	bl	800ab18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009c9e:	4b04      	ldr	r3, [pc, #16]	; (8009cb0 <xTaskGetTickCountFromISR+0x20>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ca4:	683b      	ldr	r3, [r7, #0]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	200005e0 	.word	0x200005e0

08009cb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cbe:	4b4e      	ldr	r3, [pc, #312]	; (8009df8 <xTaskIncrementTick+0x144>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f040 808e 	bne.w	8009de4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009cc8:	4b4c      	ldr	r3, [pc, #304]	; (8009dfc <xTaskIncrementTick+0x148>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009cd0:	4a4a      	ldr	r2, [pc, #296]	; (8009dfc <xTaskIncrementTick+0x148>)
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d120      	bne.n	8009d1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009cdc:	4b48      	ldr	r3, [pc, #288]	; (8009e00 <xTaskIncrementTick+0x14c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00a      	beq.n	8009cfc <xTaskIncrementTick+0x48>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	603b      	str	r3, [r7, #0]
}
 8009cf8:	bf00      	nop
 8009cfa:	e7fe      	b.n	8009cfa <xTaskIncrementTick+0x46>
 8009cfc:	4b40      	ldr	r3, [pc, #256]	; (8009e00 <xTaskIncrementTick+0x14c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	60fb      	str	r3, [r7, #12]
 8009d02:	4b40      	ldr	r3, [pc, #256]	; (8009e04 <xTaskIncrementTick+0x150>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a3e      	ldr	r2, [pc, #248]	; (8009e00 <xTaskIncrementTick+0x14c>)
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	4a3e      	ldr	r2, [pc, #248]	; (8009e04 <xTaskIncrementTick+0x150>)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6013      	str	r3, [r2, #0]
 8009d10:	4b3d      	ldr	r3, [pc, #244]	; (8009e08 <xTaskIncrementTick+0x154>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3301      	adds	r3, #1
 8009d16:	4a3c      	ldr	r2, [pc, #240]	; (8009e08 <xTaskIncrementTick+0x154>)
 8009d18:	6013      	str	r3, [r2, #0]
 8009d1a:	f000 faa9 	bl	800a270 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d1e:	4b3b      	ldr	r3, [pc, #236]	; (8009e0c <xTaskIncrementTick+0x158>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d348      	bcc.n	8009dba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d28:	4b35      	ldr	r3, [pc, #212]	; (8009e00 <xTaskIncrementTick+0x14c>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d104      	bne.n	8009d3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d32:	4b36      	ldr	r3, [pc, #216]	; (8009e0c <xTaskIncrementTick+0x158>)
 8009d34:	f04f 32ff 	mov.w	r2, #4294967295
 8009d38:	601a      	str	r2, [r3, #0]
					break;
 8009d3a:	e03e      	b.n	8009dba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d3c:	4b30      	ldr	r3, [pc, #192]	; (8009e00 <xTaskIncrementTick+0x14c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d203      	bcs.n	8009d5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d54:	4a2d      	ldr	r2, [pc, #180]	; (8009e0c <xTaskIncrementTick+0x158>)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d5a:	e02e      	b.n	8009dba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	3304      	adds	r3, #4
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe fc9f 	bl	80086a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d004      	beq.n	8009d78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	3318      	adds	r3, #24
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fe fc96 	bl	80086a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	409a      	lsls	r2, r3
 8009d80:	4b23      	ldr	r3, [pc, #140]	; (8009e10 <xTaskIncrementTick+0x15c>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	4a22      	ldr	r2, [pc, #136]	; (8009e10 <xTaskIncrementTick+0x15c>)
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d8e:	4613      	mov	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4413      	add	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4a1f      	ldr	r2, [pc, #124]	; (8009e14 <xTaskIncrementTick+0x160>)
 8009d98:	441a      	add	r2, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4610      	mov	r0, r2
 8009da2:	f7fe fc22 	bl	80085ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009daa:	4b1b      	ldr	r3, [pc, #108]	; (8009e18 <xTaskIncrementTick+0x164>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d3b9      	bcc.n	8009d28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009db4:	2301      	movs	r3, #1
 8009db6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009db8:	e7b6      	b.n	8009d28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009dba:	4b17      	ldr	r3, [pc, #92]	; (8009e18 <xTaskIncrementTick+0x164>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc0:	4914      	ldr	r1, [pc, #80]	; (8009e14 <xTaskIncrementTick+0x160>)
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	440b      	add	r3, r1
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d901      	bls.n	8009dd6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009dd6:	4b11      	ldr	r3, [pc, #68]	; (8009e1c <xTaskIncrementTick+0x168>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d007      	beq.n	8009dee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009dde:	2301      	movs	r3, #1
 8009de0:	617b      	str	r3, [r7, #20]
 8009de2:	e004      	b.n	8009dee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009de4:	4b0e      	ldr	r3, [pc, #56]	; (8009e20 <xTaskIncrementTick+0x16c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3301      	adds	r3, #1
 8009dea:	4a0d      	ldr	r2, [pc, #52]	; (8009e20 <xTaskIncrementTick+0x16c>)
 8009dec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009dee:	697b      	ldr	r3, [r7, #20]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3718      	adds	r7, #24
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	20000604 	.word	0x20000604
 8009dfc:	200005e0 	.word	0x200005e0
 8009e00:	20000594 	.word	0x20000594
 8009e04:	20000598 	.word	0x20000598
 8009e08:	200005f4 	.word	0x200005f4
 8009e0c:	200005fc 	.word	0x200005fc
 8009e10:	200005e4 	.word	0x200005e4
 8009e14:	200004e0 	.word	0x200004e0
 8009e18:	200004dc 	.word	0x200004dc
 8009e1c:	200005f0 	.word	0x200005f0
 8009e20:	200005ec 	.word	0x200005ec

08009e24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e24:	b480      	push	{r7}
 8009e26:	b087      	sub	sp, #28
 8009e28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e2a:	4b29      	ldr	r3, [pc, #164]	; (8009ed0 <vTaskSwitchContext+0xac>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d003      	beq.n	8009e3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e32:	4b28      	ldr	r3, [pc, #160]	; (8009ed4 <vTaskSwitchContext+0xb0>)
 8009e34:	2201      	movs	r2, #1
 8009e36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e38:	e044      	b.n	8009ec4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009e3a:	4b26      	ldr	r3, [pc, #152]	; (8009ed4 <vTaskSwitchContext+0xb0>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e40:	4b25      	ldr	r3, [pc, #148]	; (8009ed8 <vTaskSwitchContext+0xb4>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	fab3 f383 	clz	r3, r3
 8009e4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009e4e:	7afb      	ldrb	r3, [r7, #11]
 8009e50:	f1c3 031f 	rsb	r3, r3, #31
 8009e54:	617b      	str	r3, [r7, #20]
 8009e56:	4921      	ldr	r1, [pc, #132]	; (8009edc <vTaskSwitchContext+0xb8>)
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	4413      	add	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	440b      	add	r3, r1
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10a      	bne.n	8009e80 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	607b      	str	r3, [r7, #4]
}
 8009e7c:	bf00      	nop
 8009e7e:	e7fe      	b.n	8009e7e <vTaskSwitchContext+0x5a>
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	4613      	mov	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4a14      	ldr	r2, [pc, #80]	; (8009edc <vTaskSwitchContext+0xb8>)
 8009e8c:	4413      	add	r3, r2
 8009e8e:	613b      	str	r3, [r7, #16]
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	685a      	ldr	r2, [r3, #4]
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	605a      	str	r2, [r3, #4]
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	3308      	adds	r3, #8
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d104      	bne.n	8009eb0 <vTaskSwitchContext+0x8c>
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	605a      	str	r2, [r3, #4]
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	4a0a      	ldr	r2, [pc, #40]	; (8009ee0 <vTaskSwitchContext+0xbc>)
 8009eb8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009eba:	4b09      	ldr	r3, [pc, #36]	; (8009ee0 <vTaskSwitchContext+0xbc>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	334c      	adds	r3, #76	; 0x4c
 8009ec0:	4a08      	ldr	r2, [pc, #32]	; (8009ee4 <vTaskSwitchContext+0xc0>)
 8009ec2:	6013      	str	r3, [r2, #0]
}
 8009ec4:	bf00      	nop
 8009ec6:	371c      	adds	r7, #28
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr
 8009ed0:	20000604 	.word	0x20000604
 8009ed4:	200005f0 	.word	0x200005f0
 8009ed8:	200005e4 	.word	0x200005e4
 8009edc:	200004e0 	.word	0x200004e0
 8009ee0:	200004dc 	.word	0x200004dc
 8009ee4:	200000b0 	.word	0x200000b0

08009ee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10a      	bne.n	8009f0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	60fb      	str	r3, [r7, #12]
}
 8009f0a:	bf00      	nop
 8009f0c:	e7fe      	b.n	8009f0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f0e:	4b07      	ldr	r3, [pc, #28]	; (8009f2c <vTaskPlaceOnEventList+0x44>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3318      	adds	r3, #24
 8009f14:	4619      	mov	r1, r3
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7fe fb8b 	bl	8008632 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f1c:	2101      	movs	r1, #1
 8009f1e:	6838      	ldr	r0, [r7, #0]
 8009f20:	f000 fb82 	bl	800a628 <prvAddCurrentTaskToDelayedList>
}
 8009f24:	bf00      	nop
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	200004dc 	.word	0x200004dc

08009f30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10a      	bne.n	8009f5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	60fb      	str	r3, [r7, #12]
}
 8009f58:	bf00      	nop
 8009f5a:	e7fe      	b.n	8009f5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	3318      	adds	r3, #24
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fe fb9f 	bl	80086a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f66:	4b1d      	ldr	r3, [pc, #116]	; (8009fdc <xTaskRemoveFromEventList+0xac>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d11c      	bne.n	8009fa8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	3304      	adds	r3, #4
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fb96 	bl	80086a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	409a      	lsls	r2, r3
 8009f80:	4b17      	ldr	r3, [pc, #92]	; (8009fe0 <xTaskRemoveFromEventList+0xb0>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	4a16      	ldr	r2, [pc, #88]	; (8009fe0 <xTaskRemoveFromEventList+0xb0>)
 8009f88:	6013      	str	r3, [r2, #0]
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4a13      	ldr	r2, [pc, #76]	; (8009fe4 <xTaskRemoveFromEventList+0xb4>)
 8009f98:	441a      	add	r2, r3
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	f7fe fb22 	bl	80085ea <vListInsertEnd>
 8009fa6:	e005      	b.n	8009fb4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	3318      	adds	r3, #24
 8009fac:	4619      	mov	r1, r3
 8009fae:	480e      	ldr	r0, [pc, #56]	; (8009fe8 <xTaskRemoveFromEventList+0xb8>)
 8009fb0:	f7fe fb1b 	bl	80085ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb8:	4b0c      	ldr	r3, [pc, #48]	; (8009fec <xTaskRemoveFromEventList+0xbc>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d905      	bls.n	8009fce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009fc6:	4b0a      	ldr	r3, [pc, #40]	; (8009ff0 <xTaskRemoveFromEventList+0xc0>)
 8009fc8:	2201      	movs	r2, #1
 8009fca:	601a      	str	r2, [r3, #0]
 8009fcc:	e001      	b.n	8009fd2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009fd2:	697b      	ldr	r3, [r7, #20]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	20000604 	.word	0x20000604
 8009fe0:	200005e4 	.word	0x200005e4
 8009fe4:	200004e0 	.word	0x200004e0
 8009fe8:	2000059c 	.word	0x2000059c
 8009fec:	200004dc 	.word	0x200004dc
 8009ff0:	200005f0 	.word	0x200005f0

08009ff4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ffc:	4b06      	ldr	r3, [pc, #24]	; (800a018 <vTaskInternalSetTimeOutState+0x24>)
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a004:	4b05      	ldr	r3, [pc, #20]	; (800a01c <vTaskInternalSetTimeOutState+0x28>)
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	605a      	str	r2, [r3, #4]
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr
 800a018:	200005f4 	.word	0x200005f4
 800a01c:	200005e0 	.word	0x200005e0

0800a020 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b088      	sub	sp, #32
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10a      	bne.n	800a046 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	613b      	str	r3, [r7, #16]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10a      	bne.n	800a062 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	60fb      	str	r3, [r7, #12]
}
 800a05e:	bf00      	nop
 800a060:	e7fe      	b.n	800a060 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a062:	f000 fc77 	bl	800a954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a066:	4b1d      	ldr	r3, [pc, #116]	; (800a0dc <xTaskCheckForTimeOut+0xbc>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07e:	d102      	bne.n	800a086 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a080:	2300      	movs	r3, #0
 800a082:	61fb      	str	r3, [r7, #28]
 800a084:	e023      	b.n	800a0ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	4b15      	ldr	r3, [pc, #84]	; (800a0e0 <xTaskCheckForTimeOut+0xc0>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d007      	beq.n	800a0a2 <xTaskCheckForTimeOut+0x82>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d302      	bcc.n	800a0a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a09c:	2301      	movs	r3, #1
 800a09e:	61fb      	str	r3, [r7, #28]
 800a0a0:	e015      	b.n	800a0ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d20b      	bcs.n	800a0c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	1ad2      	subs	r2, r2, r3
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7ff ff9b 	bl	8009ff4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	61fb      	str	r3, [r7, #28]
 800a0c2:	e004      	b.n	800a0ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0ce:	f000 fc71 	bl	800a9b4 <vPortExitCritical>

	return xReturn;
 800a0d2:	69fb      	ldr	r3, [r7, #28]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3720      	adds	r7, #32
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	200005e0 	.word	0x200005e0
 800a0e0:	200005f4 	.word	0x200005f4

0800a0e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a0e8:	4b03      	ldr	r3, [pc, #12]	; (800a0f8 <vTaskMissedYield+0x14>)
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	601a      	str	r2, [r3, #0]
}
 800a0ee:	bf00      	nop
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr
 800a0f8:	200005f0 	.word	0x200005f0

0800a0fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a104:	f000 f852 	bl	800a1ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a108:	4b06      	ldr	r3, [pc, #24]	; (800a124 <prvIdleTask+0x28>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d9f9      	bls.n	800a104 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a110:	4b05      	ldr	r3, [pc, #20]	; (800a128 <prvIdleTask+0x2c>)
 800a112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a116:	601a      	str	r2, [r3, #0]
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a120:	e7f0      	b.n	800a104 <prvIdleTask+0x8>
 800a122:	bf00      	nop
 800a124:	200004e0 	.word	0x200004e0
 800a128:	e000ed04 	.word	0xe000ed04

0800a12c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a132:	2300      	movs	r3, #0
 800a134:	607b      	str	r3, [r7, #4]
 800a136:	e00c      	b.n	800a152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	4613      	mov	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4a12      	ldr	r2, [pc, #72]	; (800a18c <prvInitialiseTaskLists+0x60>)
 800a144:	4413      	add	r3, r2
 800a146:	4618      	mov	r0, r3
 800a148:	f7fe fa22 	bl	8008590 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3301      	adds	r3, #1
 800a150:	607b      	str	r3, [r7, #4]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b06      	cmp	r3, #6
 800a156:	d9ef      	bls.n	800a138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a158:	480d      	ldr	r0, [pc, #52]	; (800a190 <prvInitialiseTaskLists+0x64>)
 800a15a:	f7fe fa19 	bl	8008590 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a15e:	480d      	ldr	r0, [pc, #52]	; (800a194 <prvInitialiseTaskLists+0x68>)
 800a160:	f7fe fa16 	bl	8008590 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a164:	480c      	ldr	r0, [pc, #48]	; (800a198 <prvInitialiseTaskLists+0x6c>)
 800a166:	f7fe fa13 	bl	8008590 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a16a:	480c      	ldr	r0, [pc, #48]	; (800a19c <prvInitialiseTaskLists+0x70>)
 800a16c:	f7fe fa10 	bl	8008590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a170:	480b      	ldr	r0, [pc, #44]	; (800a1a0 <prvInitialiseTaskLists+0x74>)
 800a172:	f7fe fa0d 	bl	8008590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a176:	4b0b      	ldr	r3, [pc, #44]	; (800a1a4 <prvInitialiseTaskLists+0x78>)
 800a178:	4a05      	ldr	r2, [pc, #20]	; (800a190 <prvInitialiseTaskLists+0x64>)
 800a17a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a17c:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <prvInitialiseTaskLists+0x7c>)
 800a17e:	4a05      	ldr	r2, [pc, #20]	; (800a194 <prvInitialiseTaskLists+0x68>)
 800a180:	601a      	str	r2, [r3, #0]
}
 800a182:	bf00      	nop
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	200004e0 	.word	0x200004e0
 800a190:	2000056c 	.word	0x2000056c
 800a194:	20000580 	.word	0x20000580
 800a198:	2000059c 	.word	0x2000059c
 800a19c:	200005b0 	.word	0x200005b0
 800a1a0:	200005c8 	.word	0x200005c8
 800a1a4:	20000594 	.word	0x20000594
 800a1a8:	20000598 	.word	0x20000598

0800a1ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1b2:	e019      	b.n	800a1e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a1b4:	f000 fbce 	bl	800a954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1b8:	4b10      	ldr	r3, [pc, #64]	; (800a1fc <prvCheckTasksWaitingTermination+0x50>)
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fe fa6d 	bl	80086a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a1ca:	4b0d      	ldr	r3, [pc, #52]	; (800a200 <prvCheckTasksWaitingTermination+0x54>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	4a0b      	ldr	r2, [pc, #44]	; (800a200 <prvCheckTasksWaitingTermination+0x54>)
 800a1d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a1d4:	4b0b      	ldr	r3, [pc, #44]	; (800a204 <prvCheckTasksWaitingTermination+0x58>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	4a0a      	ldr	r2, [pc, #40]	; (800a204 <prvCheckTasksWaitingTermination+0x58>)
 800a1dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a1de:	f000 fbe9 	bl	800a9b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f810 	bl	800a208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1e8:	4b06      	ldr	r3, [pc, #24]	; (800a204 <prvCheckTasksWaitingTermination+0x58>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1e1      	bne.n	800a1b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1f0:	bf00      	nop
 800a1f2:	bf00      	nop
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	200005b0 	.word	0x200005b0
 800a200:	200005dc 	.word	0x200005dc
 800a204:	200005c4 	.word	0x200005c4

0800a208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	334c      	adds	r3, #76	; 0x4c
 800a214:	4618      	mov	r0, r3
 800a216:	f00e fa35 	bl	8018684 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a220:	2b00      	cmp	r3, #0
 800a222:	d108      	bne.n	800a236 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a228:	4618      	mov	r0, r3
 800a22a:	f000 fd81 	bl	800ad30 <vPortFree>
				vPortFree( pxTCB );
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fd7e 	bl	800ad30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a234:	e018      	b.n	800a268 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d103      	bne.n	800a248 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fd75 	bl	800ad30 <vPortFree>
	}
 800a246:	e00f      	b.n	800a268 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d00a      	beq.n	800a268 <prvDeleteTCB+0x60>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	60fb      	str	r3, [r7, #12]
}
 800a264:	bf00      	nop
 800a266:	e7fe      	b.n	800a266 <prvDeleteTCB+0x5e>
	}
 800a268:	bf00      	nop
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a276:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <prvResetNextTaskUnblockTime+0x38>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d104      	bne.n	800a28a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a280:	4b0a      	ldr	r3, [pc, #40]	; (800a2ac <prvResetNextTaskUnblockTime+0x3c>)
 800a282:	f04f 32ff 	mov.w	r2, #4294967295
 800a286:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a288:	e008      	b.n	800a29c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a28a:	4b07      	ldr	r3, [pc, #28]	; (800a2a8 <prvResetNextTaskUnblockTime+0x38>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	4a04      	ldr	r2, [pc, #16]	; (800a2ac <prvResetNextTaskUnblockTime+0x3c>)
 800a29a:	6013      	str	r3, [r2, #0]
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr
 800a2a8:	20000594 	.word	0x20000594
 800a2ac:	200005fc 	.word	0x200005fc

0800a2b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a2b6:	4b0b      	ldr	r3, [pc, #44]	; (800a2e4 <xTaskGetSchedulerState+0x34>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d102      	bne.n	800a2c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	607b      	str	r3, [r7, #4]
 800a2c2:	e008      	b.n	800a2d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2c4:	4b08      	ldr	r3, [pc, #32]	; (800a2e8 <xTaskGetSchedulerState+0x38>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d102      	bne.n	800a2d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	607b      	str	r3, [r7, #4]
 800a2d0:	e001      	b.n	800a2d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a2d6:	687b      	ldr	r3, [r7, #4]
	}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr
 800a2e4:	200005e8 	.word	0x200005e8
 800a2e8:	20000604 	.word	0x20000604

0800a2ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d05e      	beq.n	800a3c0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a306:	4b31      	ldr	r3, [pc, #196]	; (800a3cc <xTaskPriorityInherit+0xe0>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d24e      	bcs.n	800a3ae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	2b00      	cmp	r3, #0
 800a316:	db06      	blt.n	800a326 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a318:	4b2c      	ldr	r3, [pc, #176]	; (800a3cc <xTaskPriorityInherit+0xe0>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31e:	f1c3 0207 	rsb	r2, r3, #7
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	6959      	ldr	r1, [r3, #20]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a32e:	4613      	mov	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4413      	add	r3, r2
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	4a26      	ldr	r2, [pc, #152]	; (800a3d0 <xTaskPriorityInherit+0xe4>)
 800a338:	4413      	add	r3, r2
 800a33a:	4299      	cmp	r1, r3
 800a33c:	d12f      	bne.n	800a39e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	3304      	adds	r3, #4
 800a342:	4618      	mov	r0, r3
 800a344:	f7fe f9ae 	bl	80086a4 <uxListRemove>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d10a      	bne.n	800a364 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a352:	2201      	movs	r2, #1
 800a354:	fa02 f303 	lsl.w	r3, r2, r3
 800a358:	43da      	mvns	r2, r3
 800a35a:	4b1e      	ldr	r3, [pc, #120]	; (800a3d4 <xTaskPriorityInherit+0xe8>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4013      	ands	r3, r2
 800a360:	4a1c      	ldr	r2, [pc, #112]	; (800a3d4 <xTaskPriorityInherit+0xe8>)
 800a362:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a364:	4b19      	ldr	r3, [pc, #100]	; (800a3cc <xTaskPriorityInherit+0xe0>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a372:	2201      	movs	r2, #1
 800a374:	409a      	lsls	r2, r3
 800a376:	4b17      	ldr	r3, [pc, #92]	; (800a3d4 <xTaskPriorityInherit+0xe8>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	4a15      	ldr	r2, [pc, #84]	; (800a3d4 <xTaskPriorityInherit+0xe8>)
 800a37e:	6013      	str	r3, [r2, #0]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a384:	4613      	mov	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4a10      	ldr	r2, [pc, #64]	; (800a3d0 <xTaskPriorityInherit+0xe4>)
 800a38e:	441a      	add	r2, r3
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	3304      	adds	r3, #4
 800a394:	4619      	mov	r1, r3
 800a396:	4610      	mov	r0, r2
 800a398:	f7fe f927 	bl	80085ea <vListInsertEnd>
 800a39c:	e004      	b.n	800a3a8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a39e:	4b0b      	ldr	r3, [pc, #44]	; (800a3cc <xTaskPriorityInherit+0xe0>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	60fb      	str	r3, [r7, #12]
 800a3ac:	e008      	b.n	800a3c0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3b2:	4b06      	ldr	r3, [pc, #24]	; (800a3cc <xTaskPriorityInherit+0xe0>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d201      	bcs.n	800a3c0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
	}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	200004dc 	.word	0x200004dc
 800a3d0:	200004e0 	.word	0x200004e0
 800a3d4:	200005e4 	.word	0x200005e4

0800a3d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d06e      	beq.n	800a4cc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3ee:	4b3a      	ldr	r3, [pc, #232]	; (800a4d8 <xTaskPriorityDisinherit+0x100>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d00a      	beq.n	800a40e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	60fb      	str	r3, [r7, #12]
}
 800a40a:	bf00      	nop
 800a40c:	e7fe      	b.n	800a40c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10a      	bne.n	800a42c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	60bb      	str	r3, [r7, #8]
}
 800a428:	bf00      	nop
 800a42a:	e7fe      	b.n	800a42a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a430:	1e5a      	subs	r2, r3, #1
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43e:	429a      	cmp	r2, r3
 800a440:	d044      	beq.n	800a4cc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a446:	2b00      	cmp	r3, #0
 800a448:	d140      	bne.n	800a4cc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	3304      	adds	r3, #4
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fe f928 	bl	80086a4 <uxListRemove>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d115      	bne.n	800a486 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45e:	491f      	ldr	r1, [pc, #124]	; (800a4dc <xTaskPriorityDisinherit+0x104>)
 800a460:	4613      	mov	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	440b      	add	r3, r1
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10a      	bne.n	800a486 <xTaskPriorityDisinherit+0xae>
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a474:	2201      	movs	r2, #1
 800a476:	fa02 f303 	lsl.w	r3, r2, r3
 800a47a:	43da      	mvns	r2, r3
 800a47c:	4b18      	ldr	r3, [pc, #96]	; (800a4e0 <xTaskPriorityDisinherit+0x108>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4013      	ands	r3, r2
 800a482:	4a17      	ldr	r2, [pc, #92]	; (800a4e0 <xTaskPriorityDisinherit+0x108>)
 800a484:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a492:	f1c3 0207 	rsb	r2, r3, #7
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49e:	2201      	movs	r2, #1
 800a4a0:	409a      	lsls	r2, r3
 800a4a2:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <xTaskPriorityDisinherit+0x108>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	4a0d      	ldr	r2, [pc, #52]	; (800a4e0 <xTaskPriorityDisinherit+0x108>)
 800a4aa:	6013      	str	r3, [r2, #0]
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4a08      	ldr	r2, [pc, #32]	; (800a4dc <xTaskPriorityDisinherit+0x104>)
 800a4ba:	441a      	add	r2, r3
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	3304      	adds	r3, #4
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4610      	mov	r0, r2
 800a4c4:	f7fe f891 	bl	80085ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4cc:	697b      	ldr	r3, [r7, #20]
	}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3718      	adds	r7, #24
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	200004dc 	.word	0x200004dc
 800a4dc:	200004e0 	.word	0x200004e0
 800a4e0:	200005e4 	.word	0x200005e4

0800a4e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b088      	sub	sp, #32
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d077      	beq.n	800a5ec <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	60fb      	str	r3, [r7, #12]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	429a      	cmp	r2, r3
 800a522:	d902      	bls.n	800a52a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	61fb      	str	r3, [r7, #28]
 800a528:	e002      	b.n	800a530 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a52e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a534:	69fa      	ldr	r2, [r7, #28]
 800a536:	429a      	cmp	r2, r3
 800a538:	d058      	beq.n	800a5ec <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	429a      	cmp	r2, r3
 800a542:	d153      	bne.n	800a5ec <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a544:	4b2b      	ldr	r3, [pc, #172]	; (800a5f4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	69ba      	ldr	r2, [r7, #24]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d10a      	bne.n	800a564 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	60bb      	str	r3, [r7, #8]
}
 800a560:	bf00      	nop
 800a562:	e7fe      	b.n	800a562 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a568:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	69fa      	ldr	r2, [r7, #28]
 800a56e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	2b00      	cmp	r3, #0
 800a576:	db04      	blt.n	800a582 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	f1c3 0207 	rsb	r2, r3, #7
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	6959      	ldr	r1, [r3, #20]
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	4613      	mov	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4a19      	ldr	r2, [pc, #100]	; (800a5f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a592:	4413      	add	r3, r2
 800a594:	4299      	cmp	r1, r3
 800a596:	d129      	bne.n	800a5ec <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	3304      	adds	r3, #4
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7fe f881 	bl	80086a4 <uxListRemove>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10a      	bne.n	800a5be <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b2:	43da      	mvns	r2, r3
 800a5b4:	4b11      	ldr	r3, [pc, #68]	; (800a5fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	4a10      	ldr	r2, [pc, #64]	; (800a5fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a5bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	409a      	lsls	r2, r3
 800a5c6:	4b0d      	ldr	r3, [pc, #52]	; (800a5fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	4a0b      	ldr	r2, [pc, #44]	; (800a5fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a5ce:	6013      	str	r3, [r2, #0]
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4a06      	ldr	r2, [pc, #24]	; (800a5f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a5de:	441a      	add	r2, r3
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	f7fd ffff 	bl	80085ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a5ec:	bf00      	nop
 800a5ee:	3720      	adds	r7, #32
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	200004dc 	.word	0x200004dc
 800a5f8:	200004e0 	.word	0x200004e0
 800a5fc:	200005e4 	.word	0x200005e4

0800a600 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a600:	b480      	push	{r7}
 800a602:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a604:	4b07      	ldr	r3, [pc, #28]	; (800a624 <pvTaskIncrementMutexHeldCount+0x24>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d004      	beq.n	800a616 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a60c:	4b05      	ldr	r3, [pc, #20]	; (800a624 <pvTaskIncrementMutexHeldCount+0x24>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a612:	3201      	adds	r2, #1
 800a614:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a616:	4b03      	ldr	r3, [pc, #12]	; (800a624 <pvTaskIncrementMutexHeldCount+0x24>)
 800a618:	681b      	ldr	r3, [r3, #0]
	}
 800a61a:	4618      	mov	r0, r3
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr
 800a624:	200004dc 	.word	0x200004dc

0800a628 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a632:	4b29      	ldr	r3, [pc, #164]	; (800a6d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a638:	4b28      	ldr	r3, [pc, #160]	; (800a6dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3304      	adds	r3, #4
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fe f830 	bl	80086a4 <uxListRemove>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10b      	bne.n	800a662 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a64a:	4b24      	ldr	r3, [pc, #144]	; (800a6dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a650:	2201      	movs	r2, #1
 800a652:	fa02 f303 	lsl.w	r3, r2, r3
 800a656:	43da      	mvns	r2, r3
 800a658:	4b21      	ldr	r3, [pc, #132]	; (800a6e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4013      	ands	r3, r2
 800a65e:	4a20      	ldr	r2, [pc, #128]	; (800a6e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a660:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a668:	d10a      	bne.n	800a680 <prvAddCurrentTaskToDelayedList+0x58>
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d007      	beq.n	800a680 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a670:	4b1a      	ldr	r3, [pc, #104]	; (800a6dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	3304      	adds	r3, #4
 800a676:	4619      	mov	r1, r3
 800a678:	481a      	ldr	r0, [pc, #104]	; (800a6e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a67a:	f7fd ffb6 	bl	80085ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a67e:	e026      	b.n	800a6ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4413      	add	r3, r2
 800a686:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a688:	4b14      	ldr	r3, [pc, #80]	; (800a6dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	429a      	cmp	r2, r3
 800a696:	d209      	bcs.n	800a6ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a698:	4b13      	ldr	r3, [pc, #76]	; (800a6e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	4b0f      	ldr	r3, [pc, #60]	; (800a6dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	f7fd ffc4 	bl	8008632 <vListInsert>
}
 800a6aa:	e010      	b.n	800a6ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6ac:	4b0f      	ldr	r3, [pc, #60]	; (800a6ec <prvAddCurrentTaskToDelayedList+0xc4>)
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	4b0a      	ldr	r3, [pc, #40]	; (800a6dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	f7fd ffba 	bl	8008632 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a6be:	4b0c      	ldr	r3, [pc, #48]	; (800a6f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d202      	bcs.n	800a6ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a6c8:	4a09      	ldr	r2, [pc, #36]	; (800a6f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	6013      	str	r3, [r2, #0]
}
 800a6ce:	bf00      	nop
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	200005e0 	.word	0x200005e0
 800a6dc:	200004dc 	.word	0x200004dc
 800a6e0:	200005e4 	.word	0x200005e4
 800a6e4:	200005c8 	.word	0x200005c8
 800a6e8:	20000598 	.word	0x20000598
 800a6ec:	20000594 	.word	0x20000594
 800a6f0:	200005fc 	.word	0x200005fc

0800a6f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	3b04      	subs	r3, #4
 800a704:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a70c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3b04      	subs	r3, #4
 800a712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	f023 0201 	bic.w	r2, r3, #1
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3b04      	subs	r3, #4
 800a722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a724:	4a0c      	ldr	r2, [pc, #48]	; (800a758 <pxPortInitialiseStack+0x64>)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3b14      	subs	r3, #20
 800a72e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	3b04      	subs	r3, #4
 800a73a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f06f 0202 	mvn.w	r2, #2
 800a742:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	3b20      	subs	r3, #32
 800a748:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a74a:	68fb      	ldr	r3, [r7, #12]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	0800a75d 	.word	0x0800a75d

0800a75c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a766:	4b12      	ldr	r3, [pc, #72]	; (800a7b0 <prvTaskExitError+0x54>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76e:	d00a      	beq.n	800a786 <prvTaskExitError+0x2a>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	60fb      	str	r3, [r7, #12]
}
 800a782:	bf00      	nop
 800a784:	e7fe      	b.n	800a784 <prvTaskExitError+0x28>
	__asm volatile
 800a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	60bb      	str	r3, [r7, #8]
}
 800a798:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a79a:	bf00      	nop
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d0fc      	beq.n	800a79c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a7a2:	bf00      	nop
 800a7a4:	bf00      	nop
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	200000a0 	.word	0x200000a0
	...

0800a7c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7c0:	4b07      	ldr	r3, [pc, #28]	; (800a7e0 <pxCurrentTCBConst2>)
 800a7c2:	6819      	ldr	r1, [r3, #0]
 800a7c4:	6808      	ldr	r0, [r1, #0]
 800a7c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ca:	f380 8809 	msr	PSP, r0
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f04f 0000 	mov.w	r0, #0
 800a7d6:	f380 8811 	msr	BASEPRI, r0
 800a7da:	4770      	bx	lr
 800a7dc:	f3af 8000 	nop.w

0800a7e0 <pxCurrentTCBConst2>:
 800a7e0:	200004dc 	.word	0x200004dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop

0800a7e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7e8:	4808      	ldr	r0, [pc, #32]	; (800a80c <prvPortStartFirstTask+0x24>)
 800a7ea:	6800      	ldr	r0, [r0, #0]
 800a7ec:	6800      	ldr	r0, [r0, #0]
 800a7ee:	f380 8808 	msr	MSP, r0
 800a7f2:	f04f 0000 	mov.w	r0, #0
 800a7f6:	f380 8814 	msr	CONTROL, r0
 800a7fa:	b662      	cpsie	i
 800a7fc:	b661      	cpsie	f
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	f3bf 8f6f 	isb	sy
 800a806:	df00      	svc	0
 800a808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a80a:	bf00      	nop
 800a80c:	e000ed08 	.word	0xe000ed08

0800a810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a816:	4b46      	ldr	r3, [pc, #280]	; (800a930 <xPortStartScheduler+0x120>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a46      	ldr	r2, [pc, #280]	; (800a934 <xPortStartScheduler+0x124>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d10a      	bne.n	800a836 <xPortStartScheduler+0x26>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	613b      	str	r3, [r7, #16]
}
 800a832:	bf00      	nop
 800a834:	e7fe      	b.n	800a834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a836:	4b3e      	ldr	r3, [pc, #248]	; (800a930 <xPortStartScheduler+0x120>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a3f      	ldr	r2, [pc, #252]	; (800a938 <xPortStartScheduler+0x128>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d10a      	bne.n	800a856 <xPortStartScheduler+0x46>
	__asm volatile
 800a840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a844:	f383 8811 	msr	BASEPRI, r3
 800a848:	f3bf 8f6f 	isb	sy
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	60fb      	str	r3, [r7, #12]
}
 800a852:	bf00      	nop
 800a854:	e7fe      	b.n	800a854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a856:	4b39      	ldr	r3, [pc, #228]	; (800a93c <xPortStartScheduler+0x12c>)
 800a858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	22ff      	movs	r2, #255	; 0xff
 800a866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	4b31      	ldr	r3, [pc, #196]	; (800a940 <xPortStartScheduler+0x130>)
 800a87c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a87e:	4b31      	ldr	r3, [pc, #196]	; (800a944 <xPortStartScheduler+0x134>)
 800a880:	2207      	movs	r2, #7
 800a882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a884:	e009      	b.n	800a89a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a886:	4b2f      	ldr	r3, [pc, #188]	; (800a944 <xPortStartScheduler+0x134>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	4a2d      	ldr	r2, [pc, #180]	; (800a944 <xPortStartScheduler+0x134>)
 800a88e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a890:	78fb      	ldrb	r3, [r7, #3]
 800a892:	b2db      	uxtb	r3, r3
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	b2db      	uxtb	r3, r3
 800a898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a89a:	78fb      	ldrb	r3, [r7, #3]
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8a2:	2b80      	cmp	r3, #128	; 0x80
 800a8a4:	d0ef      	beq.n	800a886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8a6:	4b27      	ldr	r3, [pc, #156]	; (800a944 <xPortStartScheduler+0x134>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f1c3 0307 	rsb	r3, r3, #7
 800a8ae:	2b04      	cmp	r3, #4
 800a8b0:	d00a      	beq.n	800a8c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b6:	f383 8811 	msr	BASEPRI, r3
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	60bb      	str	r3, [r7, #8]
}
 800a8c4:	bf00      	nop
 800a8c6:	e7fe      	b.n	800a8c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8c8:	4b1e      	ldr	r3, [pc, #120]	; (800a944 <xPortStartScheduler+0x134>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	021b      	lsls	r3, r3, #8
 800a8ce:	4a1d      	ldr	r2, [pc, #116]	; (800a944 <xPortStartScheduler+0x134>)
 800a8d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8d2:	4b1c      	ldr	r3, [pc, #112]	; (800a944 <xPortStartScheduler+0x134>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8da:	4a1a      	ldr	r2, [pc, #104]	; (800a944 <xPortStartScheduler+0x134>)
 800a8dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8e6:	4b18      	ldr	r3, [pc, #96]	; (800a948 <xPortStartScheduler+0x138>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a17      	ldr	r2, [pc, #92]	; (800a948 <xPortStartScheduler+0x138>)
 800a8ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8f2:	4b15      	ldr	r3, [pc, #84]	; (800a948 <xPortStartScheduler+0x138>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a14      	ldr	r2, [pc, #80]	; (800a948 <xPortStartScheduler+0x138>)
 800a8f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8fe:	f000 f8dd 	bl	800aabc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a902:	4b12      	ldr	r3, [pc, #72]	; (800a94c <xPortStartScheduler+0x13c>)
 800a904:	2200      	movs	r2, #0
 800a906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a908:	f000 f8fc 	bl	800ab04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a90c:	4b10      	ldr	r3, [pc, #64]	; (800a950 <xPortStartScheduler+0x140>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a0f      	ldr	r2, [pc, #60]	; (800a950 <xPortStartScheduler+0x140>)
 800a912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a918:	f7ff ff66 	bl	800a7e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a91c:	f7ff fa82 	bl	8009e24 <vTaskSwitchContext>
	prvTaskExitError();
 800a920:	f7ff ff1c 	bl	800a75c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3718      	adds	r7, #24
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	e000ed00 	.word	0xe000ed00
 800a934:	410fc271 	.word	0x410fc271
 800a938:	410fc270 	.word	0x410fc270
 800a93c:	e000e400 	.word	0xe000e400
 800a940:	20000608 	.word	0x20000608
 800a944:	2000060c 	.word	0x2000060c
 800a948:	e000ed20 	.word	0xe000ed20
 800a94c:	200000a0 	.word	0x200000a0
 800a950:	e000ef34 	.word	0xe000ef34

0800a954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
	__asm volatile
 800a95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95e:	f383 8811 	msr	BASEPRI, r3
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	607b      	str	r3, [r7, #4]
}
 800a96c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a96e:	4b0f      	ldr	r3, [pc, #60]	; (800a9ac <vPortEnterCritical+0x58>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3301      	adds	r3, #1
 800a974:	4a0d      	ldr	r2, [pc, #52]	; (800a9ac <vPortEnterCritical+0x58>)
 800a976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a978:	4b0c      	ldr	r3, [pc, #48]	; (800a9ac <vPortEnterCritical+0x58>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d10f      	bne.n	800a9a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a980:	4b0b      	ldr	r3, [pc, #44]	; (800a9b0 <vPortEnterCritical+0x5c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00a      	beq.n	800a9a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98e:	f383 8811 	msr	BASEPRI, r3
 800a992:	f3bf 8f6f 	isb	sy
 800a996:	f3bf 8f4f 	dsb	sy
 800a99a:	603b      	str	r3, [r7, #0]
}
 800a99c:	bf00      	nop
 800a99e:	e7fe      	b.n	800a99e <vPortEnterCritical+0x4a>
	}
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	200000a0 	.word	0x200000a0
 800a9b0:	e000ed04 	.word	0xe000ed04

0800a9b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a9ba:	4b12      	ldr	r3, [pc, #72]	; (800aa04 <vPortExitCritical+0x50>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10a      	bne.n	800a9d8 <vPortExitCritical+0x24>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	607b      	str	r3, [r7, #4]
}
 800a9d4:	bf00      	nop
 800a9d6:	e7fe      	b.n	800a9d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9d8:	4b0a      	ldr	r3, [pc, #40]	; (800aa04 <vPortExitCritical+0x50>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	4a09      	ldr	r2, [pc, #36]	; (800aa04 <vPortExitCritical+0x50>)
 800a9e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9e2:	4b08      	ldr	r3, [pc, #32]	; (800aa04 <vPortExitCritical+0x50>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d105      	bne.n	800a9f6 <vPortExitCritical+0x42>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	f383 8811 	msr	BASEPRI, r3
}
 800a9f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9f6:	bf00      	nop
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	200000a0 	.word	0x200000a0
	...

0800aa10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa10:	f3ef 8009 	mrs	r0, PSP
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	4b15      	ldr	r3, [pc, #84]	; (800aa70 <pxCurrentTCBConst>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	f01e 0f10 	tst.w	lr, #16
 800aa20:	bf08      	it	eq
 800aa22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2a:	6010      	str	r0, [r2, #0]
 800aa2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa34:	f380 8811 	msr	BASEPRI, r0
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f7ff f9f0 	bl	8009e24 <vTaskSwitchContext>
 800aa44:	f04f 0000 	mov.w	r0, #0
 800aa48:	f380 8811 	msr	BASEPRI, r0
 800aa4c:	bc09      	pop	{r0, r3}
 800aa4e:	6819      	ldr	r1, [r3, #0]
 800aa50:	6808      	ldr	r0, [r1, #0]
 800aa52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa56:	f01e 0f10 	tst.w	lr, #16
 800aa5a:	bf08      	it	eq
 800aa5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa60:	f380 8809 	msr	PSP, r0
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	f3af 8000 	nop.w

0800aa70 <pxCurrentTCBConst>:
 800aa70:	200004dc 	.word	0x200004dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop

0800aa78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	607b      	str	r3, [r7, #4]
}
 800aa90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa92:	f7ff f90f 	bl	8009cb4 <xTaskIncrementTick>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa9c:	4b06      	ldr	r3, [pc, #24]	; (800aab8 <SysTick_Handler+0x40>)
 800aa9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa2:	601a      	str	r2, [r3, #0]
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	f383 8811 	msr	BASEPRI, r3
}
 800aaae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	e000ed04 	.word	0xe000ed04

0800aabc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aabc:	b480      	push	{r7}
 800aabe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aac0:	4b0b      	ldr	r3, [pc, #44]	; (800aaf0 <vPortSetupTimerInterrupt+0x34>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aac6:	4b0b      	ldr	r3, [pc, #44]	; (800aaf4 <vPortSetupTimerInterrupt+0x38>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aacc:	4b0a      	ldr	r3, [pc, #40]	; (800aaf8 <vPortSetupTimerInterrupt+0x3c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a0a      	ldr	r2, [pc, #40]	; (800aafc <vPortSetupTimerInterrupt+0x40>)
 800aad2:	fba2 2303 	umull	r2, r3, r2, r3
 800aad6:	099b      	lsrs	r3, r3, #6
 800aad8:	4a09      	ldr	r2, [pc, #36]	; (800ab00 <vPortSetupTimerInterrupt+0x44>)
 800aada:	3b01      	subs	r3, #1
 800aadc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aade:	4b04      	ldr	r3, [pc, #16]	; (800aaf0 <vPortSetupTimerInterrupt+0x34>)
 800aae0:	2207      	movs	r2, #7
 800aae2:	601a      	str	r2, [r3, #0]
}
 800aae4:	bf00      	nop
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	e000e010 	.word	0xe000e010
 800aaf4:	e000e018 	.word	0xe000e018
 800aaf8:	20000094 	.word	0x20000094
 800aafc:	10624dd3 	.word	0x10624dd3
 800ab00:	e000e014 	.word	0xe000e014

0800ab04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab14 <vPortEnableVFP+0x10>
 800ab08:	6801      	ldr	r1, [r0, #0]
 800ab0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab0e:	6001      	str	r1, [r0, #0]
 800ab10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab12:	bf00      	nop
 800ab14:	e000ed88 	.word	0xe000ed88

0800ab18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab1e:	f3ef 8305 	mrs	r3, IPSR
 800ab22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2b0f      	cmp	r3, #15
 800ab28:	d914      	bls.n	800ab54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab2a:	4a17      	ldr	r2, [pc, #92]	; (800ab88 <vPortValidateInterruptPriority+0x70>)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	4413      	add	r3, r2
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab34:	4b15      	ldr	r3, [pc, #84]	; (800ab8c <vPortValidateInterruptPriority+0x74>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	7afa      	ldrb	r2, [r7, #11]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d20a      	bcs.n	800ab54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	607b      	str	r3, [r7, #4]
}
 800ab50:	bf00      	nop
 800ab52:	e7fe      	b.n	800ab52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab54:	4b0e      	ldr	r3, [pc, #56]	; (800ab90 <vPortValidateInterruptPriority+0x78>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab5c:	4b0d      	ldr	r3, [pc, #52]	; (800ab94 <vPortValidateInterruptPriority+0x7c>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d90a      	bls.n	800ab7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	603b      	str	r3, [r7, #0]
}
 800ab76:	bf00      	nop
 800ab78:	e7fe      	b.n	800ab78 <vPortValidateInterruptPriority+0x60>
	}
 800ab7a:	bf00      	nop
 800ab7c:	3714      	adds	r7, #20
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	e000e3f0 	.word	0xe000e3f0
 800ab8c:	20000608 	.word	0x20000608
 800ab90:	e000ed0c 	.word	0xe000ed0c
 800ab94:	2000060c 	.word	0x2000060c

0800ab98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b08a      	sub	sp, #40	; 0x28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aba0:	2300      	movs	r3, #0
 800aba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aba4:	f7fe ffba 	bl	8009b1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aba8:	4b5b      	ldr	r3, [pc, #364]	; (800ad18 <pvPortMalloc+0x180>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abb0:	f000 f92c 	bl	800ae0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abb4:	4b59      	ldr	r3, [pc, #356]	; (800ad1c <pvPortMalloc+0x184>)
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4013      	ands	r3, r2
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f040 8093 	bne.w	800ace8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d01d      	beq.n	800ac04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800abc8:	2208      	movs	r2, #8
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4413      	add	r3, r2
 800abce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f003 0307 	and.w	r3, r3, #7
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d014      	beq.n	800ac04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f023 0307 	bic.w	r3, r3, #7
 800abe0:	3308      	adds	r3, #8
 800abe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f003 0307 	and.w	r3, r3, #7
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00a      	beq.n	800ac04 <pvPortMalloc+0x6c>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	617b      	str	r3, [r7, #20]
}
 800ac00:	bf00      	nop
 800ac02:	e7fe      	b.n	800ac02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d06e      	beq.n	800ace8 <pvPortMalloc+0x150>
 800ac0a:	4b45      	ldr	r3, [pc, #276]	; (800ad20 <pvPortMalloc+0x188>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d869      	bhi.n	800ace8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac14:	4b43      	ldr	r3, [pc, #268]	; (800ad24 <pvPortMalloc+0x18c>)
 800ac16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac18:	4b42      	ldr	r3, [pc, #264]	; (800ad24 <pvPortMalloc+0x18c>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac1e:	e004      	b.n	800ac2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d903      	bls.n	800ac3c <pvPortMalloc+0xa4>
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1f1      	bne.n	800ac20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac3c:	4b36      	ldr	r3, [pc, #216]	; (800ad18 <pvPortMalloc+0x180>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d050      	beq.n	800ace8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac46:	6a3b      	ldr	r3, [r7, #32]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2208      	movs	r2, #8
 800ac4c:	4413      	add	r3, r2
 800ac4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	6a3b      	ldr	r3, [r7, #32]
 800ac56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	1ad2      	subs	r2, r2, r3
 800ac60:	2308      	movs	r3, #8
 800ac62:	005b      	lsls	r3, r3, #1
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d91f      	bls.n	800aca8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	f003 0307 	and.w	r3, r3, #7
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00a      	beq.n	800ac90 <pvPortMalloc+0xf8>
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	613b      	str	r3, [r7, #16]
}
 800ac8c:	bf00      	nop
 800ac8e:	e7fe      	b.n	800ac8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	1ad2      	subs	r2, r2, r3
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aca2:	69b8      	ldr	r0, [r7, #24]
 800aca4:	f000 f914 	bl	800aed0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aca8:	4b1d      	ldr	r3, [pc, #116]	; (800ad20 <pvPortMalloc+0x188>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	4a1b      	ldr	r2, [pc, #108]	; (800ad20 <pvPortMalloc+0x188>)
 800acb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acb6:	4b1a      	ldr	r3, [pc, #104]	; (800ad20 <pvPortMalloc+0x188>)
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	4b1b      	ldr	r3, [pc, #108]	; (800ad28 <pvPortMalloc+0x190>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d203      	bcs.n	800acca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acc2:	4b17      	ldr	r3, [pc, #92]	; (800ad20 <pvPortMalloc+0x188>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a18      	ldr	r2, [pc, #96]	; (800ad28 <pvPortMalloc+0x190>)
 800acc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800accc:	685a      	ldr	r2, [r3, #4]
 800acce:	4b13      	ldr	r3, [pc, #76]	; (800ad1c <pvPortMalloc+0x184>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	431a      	orrs	r2, r3
 800acd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800acd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acda:	2200      	movs	r2, #0
 800acdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acde:	4b13      	ldr	r3, [pc, #76]	; (800ad2c <pvPortMalloc+0x194>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3301      	adds	r3, #1
 800ace4:	4a11      	ldr	r2, [pc, #68]	; (800ad2c <pvPortMalloc+0x194>)
 800ace6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ace8:	f7fe ff26 	bl	8009b38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	f003 0307 	and.w	r3, r3, #7
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00a      	beq.n	800ad0c <pvPortMalloc+0x174>
	__asm volatile
 800acf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfa:	f383 8811 	msr	BASEPRI, r3
 800acfe:	f3bf 8f6f 	isb	sy
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	60fb      	str	r3, [r7, #12]
}
 800ad08:	bf00      	nop
 800ad0a:	e7fe      	b.n	800ad0a <pvPortMalloc+0x172>
	return pvReturn;
 800ad0c:	69fb      	ldr	r3, [r7, #28]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3728      	adds	r7, #40	; 0x28
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	20006928 	.word	0x20006928
 800ad1c:	2000693c 	.word	0x2000693c
 800ad20:	2000692c 	.word	0x2000692c
 800ad24:	20006920 	.word	0x20006920
 800ad28:	20006930 	.word	0x20006930
 800ad2c:	20006934 	.word	0x20006934

0800ad30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d04d      	beq.n	800adde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad42:	2308      	movs	r3, #8
 800ad44:	425b      	negs	r3, r3
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	4413      	add	r3, r2
 800ad4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	685a      	ldr	r2, [r3, #4]
 800ad54:	4b24      	ldr	r3, [pc, #144]	; (800ade8 <vPortFree+0xb8>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4013      	ands	r3, r2
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10a      	bne.n	800ad74 <vPortFree+0x44>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	60fb      	str	r3, [r7, #12]
}
 800ad70:	bf00      	nop
 800ad72:	e7fe      	b.n	800ad72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00a      	beq.n	800ad92 <vPortFree+0x62>
	__asm volatile
 800ad7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	60bb      	str	r3, [r7, #8]
}
 800ad8e:	bf00      	nop
 800ad90:	e7fe      	b.n	800ad90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	685a      	ldr	r2, [r3, #4]
 800ad96:	4b14      	ldr	r3, [pc, #80]	; (800ade8 <vPortFree+0xb8>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d01e      	beq.n	800adde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d11a      	bne.n	800adde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	4b0e      	ldr	r3, [pc, #56]	; (800ade8 <vPortFree+0xb8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	43db      	mvns	r3, r3
 800adb2:	401a      	ands	r2, r3
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800adb8:	f7fe feb0 	bl	8009b1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	4b0a      	ldr	r3, [pc, #40]	; (800adec <vPortFree+0xbc>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4413      	add	r3, r2
 800adc6:	4a09      	ldr	r2, [pc, #36]	; (800adec <vPortFree+0xbc>)
 800adc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adca:	6938      	ldr	r0, [r7, #16]
 800adcc:	f000 f880 	bl	800aed0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800add0:	4b07      	ldr	r3, [pc, #28]	; (800adf0 <vPortFree+0xc0>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3301      	adds	r3, #1
 800add6:	4a06      	ldr	r2, [pc, #24]	; (800adf0 <vPortFree+0xc0>)
 800add8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800adda:	f7fe fead 	bl	8009b38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adde:	bf00      	nop
 800ade0:	3718      	adds	r7, #24
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	2000693c 	.word	0x2000693c
 800adec:	2000692c 	.word	0x2000692c
 800adf0:	20006938 	.word	0x20006938

0800adf4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800adf4:	b480      	push	{r7}
 800adf6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800adf8:	4b03      	ldr	r3, [pc, #12]	; (800ae08 <xPortGetFreeHeapSize+0x14>)
 800adfa:	681b      	ldr	r3, [r3, #0]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	2000692c 	.word	0x2000692c

0800ae0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae12:	f246 3310 	movw	r3, #25360	; 0x6310
 800ae16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae18:	4b27      	ldr	r3, [pc, #156]	; (800aeb8 <prvHeapInit+0xac>)
 800ae1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f003 0307 	and.w	r3, r3, #7
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00c      	beq.n	800ae40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	3307      	adds	r3, #7
 800ae2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 0307 	bic.w	r3, r3, #7
 800ae32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	4a1f      	ldr	r2, [pc, #124]	; (800aeb8 <prvHeapInit+0xac>)
 800ae3c:	4413      	add	r3, r2
 800ae3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae44:	4a1d      	ldr	r2, [pc, #116]	; (800aebc <prvHeapInit+0xb0>)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae4a:	4b1c      	ldr	r3, [pc, #112]	; (800aebc <prvHeapInit+0xb0>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	4413      	add	r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae58:	2208      	movs	r2, #8
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	1a9b      	subs	r3, r3, r2
 800ae5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f023 0307 	bic.w	r3, r3, #7
 800ae66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	4a15      	ldr	r2, [pc, #84]	; (800aec0 <prvHeapInit+0xb4>)
 800ae6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae6e:	4b14      	ldr	r3, [pc, #80]	; (800aec0 <prvHeapInit+0xb4>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2200      	movs	r2, #0
 800ae74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae76:	4b12      	ldr	r3, [pc, #72]	; (800aec0 <prvHeapInit+0xb4>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	1ad2      	subs	r2, r2, r3
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae8c:	4b0c      	ldr	r3, [pc, #48]	; (800aec0 <prvHeapInit+0xb4>)
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	4a0a      	ldr	r2, [pc, #40]	; (800aec4 <prvHeapInit+0xb8>)
 800ae9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	4a09      	ldr	r2, [pc, #36]	; (800aec8 <prvHeapInit+0xbc>)
 800aea2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aea4:	4b09      	ldr	r3, [pc, #36]	; (800aecc <prvHeapInit+0xc0>)
 800aea6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aeaa:	601a      	str	r2, [r3, #0]
}
 800aeac:	bf00      	nop
 800aeae:	3714      	adds	r7, #20
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr
 800aeb8:	20000610 	.word	0x20000610
 800aebc:	20006920 	.word	0x20006920
 800aec0:	20006928 	.word	0x20006928
 800aec4:	20006930 	.word	0x20006930
 800aec8:	2000692c 	.word	0x2000692c
 800aecc:	2000693c 	.word	0x2000693c

0800aed0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aed8:	4b28      	ldr	r3, [pc, #160]	; (800af7c <prvInsertBlockIntoFreeList+0xac>)
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	e002      	b.n	800aee4 <prvInsertBlockIntoFreeList+0x14>
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	60fb      	str	r3, [r7, #12]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d8f7      	bhi.n	800aede <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	4413      	add	r3, r2
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d108      	bne.n	800af12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	441a      	add	r2, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	441a      	add	r2, r3
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	429a      	cmp	r2, r3
 800af24:	d118      	bne.n	800af58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	4b15      	ldr	r3, [pc, #84]	; (800af80 <prvInsertBlockIntoFreeList+0xb0>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d00d      	beq.n	800af4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	685a      	ldr	r2, [r3, #4]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	441a      	add	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	601a      	str	r2, [r3, #0]
 800af4c:	e008      	b.n	800af60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af4e:	4b0c      	ldr	r3, [pc, #48]	; (800af80 <prvInsertBlockIntoFreeList+0xb0>)
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	601a      	str	r2, [r3, #0]
 800af56:	e003      	b.n	800af60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	429a      	cmp	r2, r3
 800af66:	d002      	beq.n	800af6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af6e:	bf00      	nop
 800af70:	3714      	adds	r7, #20
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	20006920 	.word	0x20006920
 800af80:	20006928 	.word	0x20006928

0800af84 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	330c      	adds	r3, #12
 800af94:	461a      	mov	r2, r3
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f001 fff3 	bl	800cf84 <tcpip_send_msg_wait_sem>
 800af9e:	4603      	mov	r3, r0
 800afa0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800afa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d103      	bne.n	800afb2 <netconn_apimsg+0x2e>
    return apimsg->err;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800afb0:	e001      	b.n	800afb6 <netconn_apimsg+0x32>
  }
  return err;
 800afb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b08c      	sub	sp, #48	; 0x30
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	4603      	mov	r3, r0
 800afc8:	603a      	str	r2, [r7, #0]
 800afca:	71fb      	strb	r3, [r7, #7]
 800afcc:	460b      	mov	r3, r1
 800afce:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800afd0:	79fb      	ldrb	r3, [r7, #7]
 800afd2:	6839      	ldr	r1, [r7, #0]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 ff21 	bl	800be1c <netconn_alloc>
 800afda:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800afdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d054      	beq.n	800b08c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800afe2:	79bb      	ldrb	r3, [r7, #6]
 800afe4:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800afe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe8:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800afea:	f107 0308 	add.w	r3, r7, #8
 800afee:	4619      	mov	r1, r3
 800aff0:	4829      	ldr	r0, [pc, #164]	; (800b098 <netconn_new_with_proto_and_callback+0xd8>)
 800aff2:	f7ff ffc7 	bl	800af84 <netconn_apimsg>
 800aff6:	4603      	mov	r3, r0
 800aff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800affc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b000:	2b00      	cmp	r3, #0
 800b002:	d043      	beq.n	800b08c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d005      	beq.n	800b018 <netconn_new_with_proto_and_callback+0x58>
 800b00c:	4b23      	ldr	r3, [pc, #140]	; (800b09c <netconn_new_with_proto_and_callback+0xdc>)
 800b00e:	22a3      	movs	r2, #163	; 0xa3
 800b010:	4923      	ldr	r1, [pc, #140]	; (800b0a0 <netconn_new_with_proto_and_callback+0xe0>)
 800b012:	4824      	ldr	r0, [pc, #144]	; (800b0a4 <netconn_new_with_proto_and_callback+0xe4>)
 800b014:	f00d fad0 	bl	80185b8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800b018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01a:	3310      	adds	r3, #16
 800b01c:	4618      	mov	r0, r3
 800b01e:	f00c ff88 	bl	8017f32 <sys_mbox_valid>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d105      	bne.n	800b034 <netconn_new_with_proto_and_callback+0x74>
 800b028:	4b1c      	ldr	r3, [pc, #112]	; (800b09c <netconn_new_with_proto_and_callback+0xdc>)
 800b02a:	22a4      	movs	r2, #164	; 0xa4
 800b02c:	491e      	ldr	r1, [pc, #120]	; (800b0a8 <netconn_new_with_proto_and_callback+0xe8>)
 800b02e:	481d      	ldr	r0, [pc, #116]	; (800b0a4 <netconn_new_with_proto_and_callback+0xe4>)
 800b030:	f00d fac2 	bl	80185b8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800b034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b036:	3314      	adds	r3, #20
 800b038:	4618      	mov	r0, r3
 800b03a:	f00c ff7a 	bl	8017f32 <sys_mbox_valid>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d005      	beq.n	800b050 <netconn_new_with_proto_and_callback+0x90>
 800b044:	4b15      	ldr	r3, [pc, #84]	; (800b09c <netconn_new_with_proto_and_callback+0xdc>)
 800b046:	22a6      	movs	r2, #166	; 0xa6
 800b048:	4918      	ldr	r1, [pc, #96]	; (800b0ac <netconn_new_with_proto_and_callback+0xec>)
 800b04a:	4816      	ldr	r0, [pc, #88]	; (800b0a4 <netconn_new_with_proto_and_callback+0xe4>)
 800b04c:	f00d fab4 	bl	80185b8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800b050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b052:	330c      	adds	r3, #12
 800b054:	4618      	mov	r0, r3
 800b056:	f00c fffd 	bl	8018054 <sys_sem_valid>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d105      	bne.n	800b06c <netconn_new_with_proto_and_callback+0xac>
 800b060:	4b0e      	ldr	r3, [pc, #56]	; (800b09c <netconn_new_with_proto_and_callback+0xdc>)
 800b062:	22a9      	movs	r2, #169	; 0xa9
 800b064:	4912      	ldr	r1, [pc, #72]	; (800b0b0 <netconn_new_with_proto_and_callback+0xf0>)
 800b066:	480f      	ldr	r0, [pc, #60]	; (800b0a4 <netconn_new_with_proto_and_callback+0xe4>)
 800b068:	f00d faa6 	bl	80185b8 <iprintf>
      sys_sem_free(&conn->op_completed);
 800b06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06e:	330c      	adds	r3, #12
 800b070:	4618      	mov	r0, r3
 800b072:	f00c ffe2 	bl	801803a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800b076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b078:	3310      	adds	r3, #16
 800b07a:	4618      	mov	r0, r3
 800b07c:	f00c fed2 	bl	8017e24 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800b080:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b082:	2007      	movs	r0, #7
 800b084:	f002 fce6 	bl	800da54 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800b088:	2300      	movs	r3, #0
 800b08a:	e000      	b.n	800b08e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800b08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3730      	adds	r7, #48	; 0x30
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	0800bdf1 	.word	0x0800bdf1
 800b09c:	08019824 	.word	0x08019824
 800b0a0:	08019858 	.word	0x08019858
 800b0a4:	0801987c 	.word	0x0801987c
 800b0a8:	080198a4 	.word	0x080198a4
 800b0ac:	080198bc 	.word	0x080198bc
 800b0b0:	080198e0 	.word	0x080198e0

0800b0b4 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b08c      	sub	sp, #48	; 0x30
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	e014      	b.n	800b0f0 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b0ca:	2329      	movs	r3, #41	; 0x29
 800b0cc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800b0ce:	f107 030c 	add.w	r3, r7, #12
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4808      	ldr	r0, [pc, #32]	; (800b0f8 <netconn_prepare_delete+0x44>)
 800b0d6:	f7ff ff55 	bl	800af84 <netconn_apimsg>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800b0e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <netconn_prepare_delete+0x3a>
    return err;
 800b0e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b0ec:	e000      	b.n	800b0f0 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3730      	adds	r7, #48	; 0x30
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	0800c355 	.word	0x0800c355

0800b0fc <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d101      	bne.n	800b10e <netconn_delete+0x12>
    return ERR_OK;
 800b10a:	2300      	movs	r3, #0
 800b10c:	e00d      	b.n	800b12a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7ff ffd0 	bl	800b0b4 <netconn_prepare_delete>
 800b114:	4603      	mov	r3, r0
 800b116:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800b118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d102      	bne.n	800b126 <netconn_delete+0x2a>
    netconn_free(conn);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fee9 	bl	800bef8 <netconn_free>
  }
  return err;
 800b126:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
	...

0800b134 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b08e      	sub	sp, #56	; 0x38
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	4613      	mov	r3, r2
 800b140:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d109      	bne.n	800b15c <netconn_bind+0x28>
 800b148:	4b11      	ldr	r3, [pc, #68]	; (800b190 <netconn_bind+0x5c>)
 800b14a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800b14e:	4911      	ldr	r1, [pc, #68]	; (800b194 <netconn_bind+0x60>)
 800b150:	4811      	ldr	r0, [pc, #68]	; (800b198 <netconn_bind+0x64>)
 800b152:	f00d fa31 	bl	80185b8 <iprintf>
 800b156:	f06f 030f 	mvn.w	r3, #15
 800b15a:	e015      	b.n	800b188 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800b162:	4b0e      	ldr	r3, [pc, #56]	; (800b19c <netconn_bind+0x68>)
 800b164:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800b16e:	88fb      	ldrh	r3, [r7, #6]
 800b170:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800b172:	f107 0314 	add.w	r3, r7, #20
 800b176:	4619      	mov	r1, r3
 800b178:	4809      	ldr	r0, [pc, #36]	; (800b1a0 <netconn_bind+0x6c>)
 800b17a:	f7ff ff03 	bl	800af84 <netconn_apimsg>
 800b17e:	4603      	mov	r3, r0
 800b180:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800b184:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3738      	adds	r7, #56	; 0x38
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	08019824 	.word	0x08019824
 800b194:	0801995c 	.word	0x0801995c
 800b198:	0801987c 	.word	0x0801987c
 800b19c:	0801ce28 	.word	0x0801ce28
 800b1a0:	0800c51d 	.word	0x0800c51d

0800b1a4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b088      	sub	sp, #32
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d109      	bne.n	800b1d0 <netconn_recv_data+0x2c>
 800b1bc:	4b58      	ldr	r3, [pc, #352]	; (800b320 <netconn_recv_data+0x17c>)
 800b1be:	f44f 7212 	mov.w	r2, #584	; 0x248
 800b1c2:	4958      	ldr	r1, [pc, #352]	; (800b324 <netconn_recv_data+0x180>)
 800b1c4:	4858      	ldr	r0, [pc, #352]	; (800b328 <netconn_recv_data+0x184>)
 800b1c6:	f00d f9f7 	bl	80185b8 <iprintf>
 800b1ca:	f06f 030f 	mvn.w	r3, #15
 800b1ce:	e0a2      	b.n	800b316 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d109      	bne.n	800b1f0 <netconn_recv_data+0x4c>
 800b1dc:	4b50      	ldr	r3, [pc, #320]	; (800b320 <netconn_recv_data+0x17c>)
 800b1de:	f240 224a 	movw	r2, #586	; 0x24a
 800b1e2:	4952      	ldr	r1, [pc, #328]	; (800b32c <netconn_recv_data+0x188>)
 800b1e4:	4850      	ldr	r0, [pc, #320]	; (800b328 <netconn_recv_data+0x184>)
 800b1e6:	f00d f9e7 	bl	80185b8 <iprintf>
 800b1ea:	f06f 030f 	mvn.w	r3, #15
 800b1ee:	e092      	b.n	800b316 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	3310      	adds	r3, #16
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f00c fe9c 	bl	8017f32 <sys_mbox_valid>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10e      	bne.n	800b21e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f000 fa45 	bl	800b690 <netconn_err>
 800b206:	4603      	mov	r3, r0
 800b208:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800b20a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800b212:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b216:	e07e      	b.n	800b316 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800b218:	f06f 030a 	mvn.w	r3, #10
 800b21c:	e07b      	b.n	800b316 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	7f1b      	ldrb	r3, [r3, #28]
 800b222:	f003 0302 	and.w	r3, r3, #2
 800b226:	2b00      	cmp	r3, #0
 800b228:	d10f      	bne.n	800b24a <netconn_recv_data+0xa6>
 800b22a:	79fb      	ldrb	r3, [r7, #7]
 800b22c:	f003 0304 	and.w	r3, r3, #4
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10a      	bne.n	800b24a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	7f1b      	ldrb	r3, [r3, #28]
 800b238:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d104      	bne.n	800b24a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d023      	beq.n	800b292 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3310      	adds	r3, #16
 800b24e:	f107 0218 	add.w	r2, r7, #24
 800b252:	4611      	mov	r1, r2
 800b254:	4618      	mov	r0, r3
 800b256:	f00c fe50 	bl	8017efa <sys_arch_mbox_tryfetch>
 800b25a:	4603      	mov	r3, r0
 800b25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b260:	d11f      	bne.n	800b2a2 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f000 fa14 	bl	800b690 <netconn_err>
 800b268:	4603      	mov	r3, r0
 800b26a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800b26c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d002      	beq.n	800b27a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800b274:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b278:	e04d      	b.n	800b316 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	7f1b      	ldrb	r3, [r3, #28]
 800b27e:	f003 0301 	and.w	r3, r3, #1
 800b282:	2b00      	cmp	r3, #0
 800b284:	d002      	beq.n	800b28c <netconn_recv_data+0xe8>
        return ERR_CONN;
 800b286:	f06f 030a 	mvn.w	r3, #10
 800b28a:	e044      	b.n	800b316 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800b28c:	f06f 0306 	mvn.w	r3, #6
 800b290:	e041      	b.n	800b316 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3310      	adds	r3, #16
 800b296:	f107 0118 	add.w	r1, r7, #24
 800b29a:	2200      	movs	r2, #0
 800b29c:	4618      	mov	r0, r3
 800b29e:	f00c fded 	bl	8017e7c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2aa:	2b10      	cmp	r3, #16
 800b2ac:	d117      	bne.n	800b2de <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	f107 0217 	add.w	r2, r7, #23
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 fa3c 	bl	800b734 <lwip_netconn_is_err_msg>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d009      	beq.n	800b2d6 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800b2c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2c6:	f113 0f0f 	cmn.w	r3, #15
 800b2ca:	d101      	bne.n	800b2d0 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	e022      	b.n	800b316 <netconn_recv_data+0x172>
      }
      return err;
 800b2d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2d4:	e01f      	b.n	800b316 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	891b      	ldrh	r3, [r3, #8]
 800b2da:	83fb      	strh	r3, [r7, #30]
 800b2dc:	e00d      	b.n	800b2fa <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d106      	bne.n	800b2f2 <netconn_recv_data+0x14e>
 800b2e4:	4b0e      	ldr	r3, [pc, #56]	; (800b320 <netconn_recv_data+0x17c>)
 800b2e6:	f240 2291 	movw	r2, #657	; 0x291
 800b2ea:	4911      	ldr	r1, [pc, #68]	; (800b330 <netconn_recv_data+0x18c>)
 800b2ec:	480e      	ldr	r0, [pc, #56]	; (800b328 <netconn_recv_data+0x184>)
 800b2ee:	f00d f963 	bl	80185b8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	891b      	ldrh	r3, [r3, #8]
 800b2f8:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d005      	beq.n	800b30e <netconn_recv_data+0x16a>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b306:	8bfa      	ldrh	r2, [r7, #30]
 800b308:	2101      	movs	r1, #1
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800b30e:	69ba      	ldr	r2, [r7, #24]
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3720      	adds	r7, #32
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	08019824 	.word	0x08019824
 800b324:	08019a3c 	.word	0x08019a3c
 800b328:	0801987c 	.word	0x0801987c
 800b32c:	08019a5c 	.word	0x08019a5c
 800b330:	08019a78 	.word	0x08019a78

0800b334 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d005      	beq.n	800b352 <netconn_tcp_recvd_msg+0x1e>
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b34e:	2b10      	cmp	r3, #16
 800b350:	d009      	beq.n	800b366 <netconn_tcp_recvd_msg+0x32>
 800b352:	4b0c      	ldr	r3, [pc, #48]	; (800b384 <netconn_tcp_recvd_msg+0x50>)
 800b354:	f240 22a7 	movw	r2, #679	; 0x2a7
 800b358:	490b      	ldr	r1, [pc, #44]	; (800b388 <netconn_tcp_recvd_msg+0x54>)
 800b35a:	480c      	ldr	r0, [pc, #48]	; (800b38c <netconn_tcp_recvd_msg+0x58>)
 800b35c:	f00d f92c 	bl	80185b8 <iprintf>
 800b360:	f06f 030f 	mvn.w	r3, #15
 800b364:	e00a      	b.n	800b37c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800b372:	6879      	ldr	r1, [r7, #4]
 800b374:	4806      	ldr	r0, [pc, #24]	; (800b390 <netconn_tcp_recvd_msg+0x5c>)
 800b376:	f7ff fe05 	bl	800af84 <netconn_apimsg>
 800b37a:	4603      	mov	r3, r0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	08019824 	.word	0x08019824
 800b388:	08019a84 	.word	0x08019a84
 800b38c:	0801987c 	.word	0x0801987c
 800b390:	0800c62b 	.word	0x0800c62b

0800b394 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b090      	sub	sp, #64	; 0x40
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3310      	adds	r3, #16
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f00c fdc3 	bl	8017f32 <sys_mbox_valid>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d102      	bne.n	800b3b8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800b3b2:	f06f 030a 	mvn.w	r3, #10
 800b3b6:	e06d      	b.n	800b494 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	7f1b      	ldrb	r3, [r3, #28]
 800b3bc:	b25b      	sxtb	r3, r3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	da07      	bge.n	800b3d2 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	7f1b      	ldrb	r3, [r3, #28]
 800b3c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3ca:	b2da      	uxtb	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800b3d0:	e039      	b.n	800b446 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	68b9      	ldr	r1, [r7, #8]
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	f7ff fee3 	bl	800b1a4 <netconn_recv_data>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800b3e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800b3ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b3f0:	e050      	b.n	800b494 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800b3f8:	79fb      	ldrb	r3, [r7, #7]
 800b3fa:	f003 0308 	and.w	r3, r3, #8
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10e      	bne.n	800b420 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800b402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b404:	2b00      	cmp	r3, #0
 800b406:	d002      	beq.n	800b40e <netconn_recv_data_tcp+0x7a>
 800b408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40a:	891b      	ldrh	r3, [r3, #8]
 800b40c:	e000      	b.n	800b410 <netconn_recv_data_tcp+0x7c>
 800b40e:	2301      	movs	r3, #1
 800b410:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800b412:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b414:	f107 0214 	add.w	r2, r7, #20
 800b418:	4619      	mov	r1, r3
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f7ff ff8a 	bl	800b334 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800b420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b422:	2b00      	cmp	r3, #0
 800b424:	d134      	bne.n	800b490 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800b426:	79fb      	ldrb	r3, [r7, #7]
 800b428:	f003 0310 	and.w	r3, r3, #16
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d009      	beq.n	800b444 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	7f1b      	ldrb	r3, [r3, #28]
 800b434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800b43e:	f06f 0306 	mvn.w	r3, #6
 800b442:	e027      	b.n	800b494 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800b444:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d005      	beq.n	800b45a <netconn_recv_data_tcp+0xc6>
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b452:	2200      	movs	r2, #0
 800b454:	2101      	movs	r1, #1
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10f      	bne.n	800b482 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f000 f914 	bl	800b690 <netconn_err>
 800b468:	4603      	mov	r3, r0
 800b46a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800b46e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b472:	2b00      	cmp	r3, #0
 800b474:	d002      	beq.n	800b47c <netconn_recv_data_tcp+0xe8>
          return err;
 800b476:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b47a:	e00b      	b.n	800b494 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800b47c:	f06f 030d 	mvn.w	r3, #13
 800b480:	e008      	b.n	800b494 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b482:	2101      	movs	r1, #1
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f000 f8d3 	bl	800b630 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800b48a:	f06f 030e 	mvn.w	r3, #14
 800b48e:	e001      	b.n	800b494 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800b490:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b494:	4618      	mov	r0, r3
 800b496:	3740      	adds	r7, #64	; 0x40
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d109      	bne.n	800b4c4 <netconn_recv+0x28>
 800b4b0:	4b32      	ldr	r3, [pc, #200]	; (800b57c <netconn_recv+0xe0>)
 800b4b2:	f240 3263 	movw	r2, #867	; 0x363
 800b4b6:	4932      	ldr	r1, [pc, #200]	; (800b580 <netconn_recv+0xe4>)
 800b4b8:	4832      	ldr	r0, [pc, #200]	; (800b584 <netconn_recv+0xe8>)
 800b4ba:	f00d f87d 	bl	80185b8 <iprintf>
 800b4be:	f06f 030f 	mvn.w	r3, #15
 800b4c2:	e056      	b.n	800b572 <netconn_recv+0xd6>
  *new_buf = NULL;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d109      	bne.n	800b4e4 <netconn_recv+0x48>
 800b4d0:	4b2a      	ldr	r3, [pc, #168]	; (800b57c <netconn_recv+0xe0>)
 800b4d2:	f240 3265 	movw	r2, #869	; 0x365
 800b4d6:	492c      	ldr	r1, [pc, #176]	; (800b588 <netconn_recv+0xec>)
 800b4d8:	482a      	ldr	r0, [pc, #168]	; (800b584 <netconn_recv+0xe8>)
 800b4da:	f00d f86d 	bl	80185b8 <iprintf>
 800b4de:	f06f 030f 	mvn.w	r3, #15
 800b4e2:	e046      	b.n	800b572 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4ec:	2b10      	cmp	r3, #16
 800b4ee:	d13a      	bne.n	800b566 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b4f4:	2006      	movs	r0, #6
 800b4f6:	f002 fa5b 	bl	800d9b0 <memp_malloc>
 800b4fa:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d102      	bne.n	800b508 <netconn_recv+0x6c>
      return ERR_MEM;
 800b502:	f04f 33ff 	mov.w	r3, #4294967295
 800b506:	e034      	b.n	800b572 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800b508:	f107 030c 	add.w	r3, r7, #12
 800b50c:	2200      	movs	r2, #0
 800b50e:	4619      	mov	r1, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7ff ff3f 	bl	800b394 <netconn_recv_data_tcp>
 800b516:	4603      	mov	r3, r0
 800b518:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b51a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d006      	beq.n	800b530 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800b522:	6979      	ldr	r1, [r7, #20]
 800b524:	2006      	movs	r0, #6
 800b526:	f002 fa95 	bl	800da54 <memp_free>
      return err;
 800b52a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b52e:	e020      	b.n	800b572 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d106      	bne.n	800b544 <netconn_recv+0xa8>
 800b536:	4b11      	ldr	r3, [pc, #68]	; (800b57c <netconn_recv+0xe0>)
 800b538:	f240 3279 	movw	r2, #889	; 0x379
 800b53c:	4913      	ldr	r1, [pc, #76]	; (800b58c <netconn_recv+0xf0>)
 800b53e:	4811      	ldr	r0, [pc, #68]	; (800b584 <netconn_recv+0xe8>)
 800b540:	f00d f83a 	bl	80185b8 <iprintf>

    buf->p = p;
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	2200      	movs	r2, #0
 800b554:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2200      	movs	r2, #0
 800b55a:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	e005      	b.n	800b572 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800b566:	2200      	movs	r2, #0
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7ff fe1a 	bl	800b1a4 <netconn_recv_data>
 800b570:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800b572:	4618      	mov	r0, r3
 800b574:	3718      	adds	r7, #24
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	08019824 	.word	0x08019824
 800b580:	08019a3c 	.word	0x08019a3c
 800b584:	0801987c 	.word	0x0801987c
 800b588:	08019a5c 	.word	0x08019a5c
 800b58c:	08019ad4 	.word	0x08019ad4

0800b590 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	607a      	str	r2, [r7, #4]
 800b59c:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d011      	beq.n	800b5c8 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d002      	beq.n	800b5b0 <netconn_sendto+0x20>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	e000      	b.n	800b5b2 <netconn_sendto+0x22>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	887a      	ldrh	r2, [r7, #2]
 800b5ba:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 800b5bc:	68b9      	ldr	r1, [r7, #8]
 800b5be:	68f8      	ldr	r0, [r7, #12]
 800b5c0:	f000 f808 	bl	800b5d4 <netconn_send>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	e001      	b.n	800b5cc <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 800b5c8:	f06f 0305 	mvn.w	r3, #5
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b08c      	sub	sp, #48	; 0x30
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d109      	bne.n	800b5f8 <netconn_send+0x24>
 800b5e4:	4b0e      	ldr	r3, [pc, #56]	; (800b620 <netconn_send+0x4c>)
 800b5e6:	f240 32b2 	movw	r2, #946	; 0x3b2
 800b5ea:	490e      	ldr	r1, [pc, #56]	; (800b624 <netconn_send+0x50>)
 800b5ec:	480e      	ldr	r0, [pc, #56]	; (800b628 <netconn_send+0x54>)
 800b5ee:	f00c ffe3 	bl	80185b8 <iprintf>
 800b5f2:	f06f 030f 	mvn.w	r3, #15
 800b5f6:	e00e      	b.n	800b616 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800b600:	f107 030c 	add.w	r3, r7, #12
 800b604:	4619      	mov	r1, r3
 800b606:	4809      	ldr	r0, [pc, #36]	; (800b62c <netconn_send+0x58>)
 800b608:	f7ff fcbc 	bl	800af84 <netconn_apimsg>
 800b60c:	4603      	mov	r3, r0
 800b60e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b612:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b616:	4618      	mov	r0, r3
 800b618:	3730      	adds	r7, #48	; 0x30
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	08019824 	.word	0x08019824
 800b624:	08019ae0 	.word	0x08019ae0
 800b628:	0801987c 	.word	0x0801987c
 800b62c:	0800c591 	.word	0x0800c591

0800b630 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b08c      	sub	sp, #48	; 0x30
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d109      	bne.n	800b656 <netconn_close_shutdown+0x26>
 800b642:	4b0f      	ldr	r3, [pc, #60]	; (800b680 <netconn_close_shutdown+0x50>)
 800b644:	f240 4247 	movw	r2, #1095	; 0x447
 800b648:	490e      	ldr	r1, [pc, #56]	; (800b684 <netconn_close_shutdown+0x54>)
 800b64a:	480f      	ldr	r0, [pc, #60]	; (800b688 <netconn_close_shutdown+0x58>)
 800b64c:	f00c ffb4 	bl	80185b8 <iprintf>
 800b650:	f06f 030f 	mvn.w	r3, #15
 800b654:	e010      	b.n	800b678 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b65a:	78fb      	ldrb	r3, [r7, #3]
 800b65c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b65e:	2329      	movs	r3, #41	; 0x29
 800b660:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b662:	f107 030c 	add.w	r3, r7, #12
 800b666:	4619      	mov	r1, r3
 800b668:	4808      	ldr	r0, [pc, #32]	; (800b68c <netconn_close_shutdown+0x5c>)
 800b66a:	f7ff fc8b 	bl	800af84 <netconn_apimsg>
 800b66e:	4603      	mov	r3, r0
 800b670:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b674:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3730      	adds	r7, #48	; 0x30
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	08019824 	.word	0x08019824
 800b684:	08019b60 	.word	0x08019b60
 800b688:	0801987c 	.word	0x0801987c
 800b68c:	0800ca2d 	.word	0x0800ca2d

0800b690 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <netconn_err+0x12>
    return ERR_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	e00d      	b.n	800b6be <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800b6a2:	f00c fd61 	bl	8018168 <sys_arch_protect>
 800b6a6:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	7a1b      	ldrb	r3, [r3, #8]
 800b6ac:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	f00c fd65 	bl	8018184 <sys_arch_unprotect>
  return err;
 800b6ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
	...

0800b6c8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800b6d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6d6:	f113 0f0d 	cmn.w	r3, #13
 800b6da:	d009      	beq.n	800b6f0 <lwip_netconn_err_to_msg+0x28>
 800b6dc:	f113 0f0d 	cmn.w	r3, #13
 800b6e0:	dc0c      	bgt.n	800b6fc <lwip_netconn_err_to_msg+0x34>
 800b6e2:	f113 0f0f 	cmn.w	r3, #15
 800b6e6:	d007      	beq.n	800b6f8 <lwip_netconn_err_to_msg+0x30>
 800b6e8:	f113 0f0e 	cmn.w	r3, #14
 800b6ec:	d002      	beq.n	800b6f4 <lwip_netconn_err_to_msg+0x2c>
 800b6ee:	e005      	b.n	800b6fc <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800b6f0:	4b0a      	ldr	r3, [pc, #40]	; (800b71c <lwip_netconn_err_to_msg+0x54>)
 800b6f2:	e00e      	b.n	800b712 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800b6f4:	4b0a      	ldr	r3, [pc, #40]	; (800b720 <lwip_netconn_err_to_msg+0x58>)
 800b6f6:	e00c      	b.n	800b712 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800b6f8:	4b0a      	ldr	r3, [pc, #40]	; (800b724 <lwip_netconn_err_to_msg+0x5c>)
 800b6fa:	e00a      	b.n	800b712 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b6fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d005      	beq.n	800b710 <lwip_netconn_err_to_msg+0x48>
 800b704:	4b08      	ldr	r3, [pc, #32]	; (800b728 <lwip_netconn_err_to_msg+0x60>)
 800b706:	227d      	movs	r2, #125	; 0x7d
 800b708:	4908      	ldr	r1, [pc, #32]	; (800b72c <lwip_netconn_err_to_msg+0x64>)
 800b70a:	4809      	ldr	r0, [pc, #36]	; (800b730 <lwip_netconn_err_to_msg+0x68>)
 800b70c:	f00c ff54 	bl	80185b8 <iprintf>
      return NULL;
 800b710:	2300      	movs	r3, #0
  }
}
 800b712:	4618      	mov	r0, r3
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	0801cd14 	.word	0x0801cd14
 800b720:	0801cd15 	.word	0x0801cd15
 800b724:	0801cd16 	.word	0x0801cd16
 800b728:	08019b7c 	.word	0x08019b7c
 800b72c:	08019bb0 	.word	0x08019bb0
 800b730:	08019bc0 	.word	0x08019bc0

0800b734 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d105      	bne.n	800b750 <lwip_netconn_is_err_msg+0x1c>
 800b744:	4b12      	ldr	r3, [pc, #72]	; (800b790 <lwip_netconn_is_err_msg+0x5c>)
 800b746:	2285      	movs	r2, #133	; 0x85
 800b748:	4912      	ldr	r1, [pc, #72]	; (800b794 <lwip_netconn_is_err_msg+0x60>)
 800b74a:	4813      	ldr	r0, [pc, #76]	; (800b798 <lwip_netconn_is_err_msg+0x64>)
 800b74c:	f00c ff34 	bl	80185b8 <iprintf>

  if (msg == &netconn_aborted) {
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a12      	ldr	r2, [pc, #72]	; (800b79c <lwip_netconn_is_err_msg+0x68>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d104      	bne.n	800b762 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	22f3      	movs	r2, #243	; 0xf3
 800b75c:	701a      	strb	r2, [r3, #0]
    return 1;
 800b75e:	2301      	movs	r3, #1
 800b760:	e012      	b.n	800b788 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4a0e      	ldr	r2, [pc, #56]	; (800b7a0 <lwip_netconn_is_err_msg+0x6c>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d104      	bne.n	800b774 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	22f2      	movs	r2, #242	; 0xf2
 800b76e:	701a      	strb	r2, [r3, #0]
    return 1;
 800b770:	2301      	movs	r3, #1
 800b772:	e009      	b.n	800b788 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a0b      	ldr	r2, [pc, #44]	; (800b7a4 <lwip_netconn_is_err_msg+0x70>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d104      	bne.n	800b786 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	22f1      	movs	r2, #241	; 0xf1
 800b780:	701a      	strb	r2, [r3, #0]
    return 1;
 800b782:	2301      	movs	r3, #1
 800b784:	e000      	b.n	800b788 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3708      	adds	r7, #8
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	08019b7c 	.word	0x08019b7c
 800b794:	08019be8 	.word	0x08019be8
 800b798:	08019bc0 	.word	0x08019bc0
 800b79c:	0801cd14 	.word	0x0801cd14
 800b7a0:	0801cd15 	.word	0x0801cd15
 800b7a4:	0801cd16 	.word	0x0801cd16

0800b7a8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
 800b7b4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d105      	bne.n	800b7c8 <recv_udp+0x20>
 800b7bc:	4b34      	ldr	r3, [pc, #208]	; (800b890 <recv_udp+0xe8>)
 800b7be:	22e5      	movs	r2, #229	; 0xe5
 800b7c0:	4934      	ldr	r1, [pc, #208]	; (800b894 <recv_udp+0xec>)
 800b7c2:	4835      	ldr	r0, [pc, #212]	; (800b898 <recv_udp+0xf0>)
 800b7c4:	f00c fef8 	bl	80185b8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d105      	bne.n	800b7da <recv_udp+0x32>
 800b7ce:	4b30      	ldr	r3, [pc, #192]	; (800b890 <recv_udp+0xe8>)
 800b7d0:	22e6      	movs	r2, #230	; 0xe6
 800b7d2:	4932      	ldr	r1, [pc, #200]	; (800b89c <recv_udp+0xf4>)
 800b7d4:	4830      	ldr	r0, [pc, #192]	; (800b898 <recv_udp+0xf0>)
 800b7d6:	f00c feef 	bl	80185b8 <iprintf>
  conn = (struct netconn *)arg;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d103      	bne.n	800b7ec <recv_udp+0x44>
    pbuf_free(p);
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f002 ff75 	bl	800e6d4 <pbuf_free>
    return;
 800b7ea:	e04d      	b.n	800b888 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	68ba      	ldr	r2, [r7, #8]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d005      	beq.n	800b802 <recv_udp+0x5a>
 800b7f6:	4b26      	ldr	r3, [pc, #152]	; (800b890 <recv_udp+0xe8>)
 800b7f8:	22ee      	movs	r2, #238	; 0xee
 800b7fa:	4929      	ldr	r1, [pc, #164]	; (800b8a0 <recv_udp+0xf8>)
 800b7fc:	4826      	ldr	r0, [pc, #152]	; (800b898 <recv_udp+0xf0>)
 800b7fe:	f00c fedb 	bl	80185b8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b802:	69fb      	ldr	r3, [r7, #28]
 800b804:	3310      	adds	r3, #16
 800b806:	4618      	mov	r0, r3
 800b808:	f00c fb93 	bl	8017f32 <sys_mbox_valid>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d103      	bne.n	800b81a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f002 ff5e 	bl	800e6d4 <pbuf_free>
    return;
 800b818:	e036      	b.n	800b888 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b81a:	2006      	movs	r0, #6
 800b81c:	f002 f8c8 	bl	800d9b0 <memp_malloc>
 800b820:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d103      	bne.n	800b830 <recv_udp+0x88>
    pbuf_free(p);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f002 ff53 	bl	800e6d4 <pbuf_free>
    return;
 800b82e:	e02b      	b.n	800b888 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d002      	beq.n	800b848 <recv_udp+0xa0>
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	e000      	b.n	800b84a <recv_udp+0xa2>
 800b848:	2300      	movs	r3, #0
 800b84a:	69ba      	ldr	r2, [r7, #24]
 800b84c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b852:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	891b      	ldrh	r3, [r3, #8]
 800b858:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	3310      	adds	r3, #16
 800b85e:	69b9      	ldr	r1, [r7, #24]
 800b860:	4618      	mov	r0, r3
 800b862:	f00c faf1 	bl	8017e48 <sys_mbox_trypost>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <recv_udp+0xcc>
    netbuf_delete(buf);
 800b86c:	69b8      	ldr	r0, [r7, #24]
 800b86e:	f001 f97d 	bl	800cb6c <netbuf_delete>
    return;
 800b872:	e009      	b.n	800b888 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d005      	beq.n	800b888 <recv_udp+0xe0>
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	8afa      	ldrh	r2, [r7, #22]
 800b882:	2100      	movs	r1, #0
 800b884:	69f8      	ldr	r0, [r7, #28]
 800b886:	4798      	blx	r3
  }
}
 800b888:	3720      	adds	r7, #32
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	08019b7c 	.word	0x08019b7c
 800b894:	08019bf4 	.word	0x08019bf4
 800b898:	08019bc0 	.word	0x08019bc0
 800b89c:	08019c18 	.word	0x08019c18
 800b8a0:	08019c38 	.word	0x08019c38

0800b8a4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b088      	sub	sp, #32
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
 800b8b0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d106      	bne.n	800b8c6 <recv_tcp+0x22>
 800b8b8:	4b36      	ldr	r3, [pc, #216]	; (800b994 <recv_tcp+0xf0>)
 800b8ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b8be:	4936      	ldr	r1, [pc, #216]	; (800b998 <recv_tcp+0xf4>)
 800b8c0:	4836      	ldr	r0, [pc, #216]	; (800b99c <recv_tcp+0xf8>)
 800b8c2:	f00c fe79 	bl	80185b8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d106      	bne.n	800b8da <recv_tcp+0x36>
 800b8cc:	4b31      	ldr	r3, [pc, #196]	; (800b994 <recv_tcp+0xf0>)
 800b8ce:	f240 122d 	movw	r2, #301	; 0x12d
 800b8d2:	4933      	ldr	r1, [pc, #204]	; (800b9a0 <recv_tcp+0xfc>)
 800b8d4:	4831      	ldr	r0, [pc, #196]	; (800b99c <recv_tcp+0xf8>)
 800b8d6:	f00c fe6f 	bl	80185b8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b8da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d006      	beq.n	800b8f0 <recv_tcp+0x4c>
 800b8e2:	4b2c      	ldr	r3, [pc, #176]	; (800b994 <recv_tcp+0xf0>)
 800b8e4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b8e8:	492e      	ldr	r1, [pc, #184]	; (800b9a4 <recv_tcp+0x100>)
 800b8ea:	482c      	ldr	r0, [pc, #176]	; (800b99c <recv_tcp+0xf8>)
 800b8ec:	f00c fe64 	bl	80185b8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d102      	bne.n	800b900 <recv_tcp+0x5c>
    return ERR_VAL;
 800b8fa:	f06f 0305 	mvn.w	r3, #5
 800b8fe:	e045      	b.n	800b98c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	68ba      	ldr	r2, [r7, #8]
 800b906:	429a      	cmp	r2, r3
 800b908:	d006      	beq.n	800b918 <recv_tcp+0x74>
 800b90a:	4b22      	ldr	r3, [pc, #136]	; (800b994 <recv_tcp+0xf0>)
 800b90c:	f240 1235 	movw	r2, #309	; 0x135
 800b910:	4925      	ldr	r1, [pc, #148]	; (800b9a8 <recv_tcp+0x104>)
 800b912:	4822      	ldr	r0, [pc, #136]	; (800b99c <recv_tcp+0xf8>)
 800b914:	f00c fe50 	bl	80185b8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	3310      	adds	r3, #16
 800b91c:	4618      	mov	r0, r3
 800b91e:	f00c fb08 	bl	8017f32 <sys_mbox_valid>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d10d      	bne.n	800b944 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d008      	beq.n	800b940 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	891b      	ldrh	r3, [r3, #8]
 800b932:	4619      	mov	r1, r3
 800b934:	68b8      	ldr	r0, [r7, #8]
 800b936:	f003 fdcb 	bl	800f4d0 <tcp_recved>
      pbuf_free(p);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f002 feca 	bl	800e6d4 <pbuf_free>
    }
    return ERR_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	e023      	b.n	800b98c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d005      	beq.n	800b956 <recv_tcp+0xb2>
    msg = p;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	891b      	ldrh	r3, [r3, #8]
 800b952:	83fb      	strh	r3, [r7, #30]
 800b954:	e003      	b.n	800b95e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b956:	4b15      	ldr	r3, [pc, #84]	; (800b9ac <recv_tcp+0x108>)
 800b958:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	3310      	adds	r3, #16
 800b962:	69b9      	ldr	r1, [r7, #24]
 800b964:	4618      	mov	r0, r3
 800b966:	f00c fa6f 	bl	8017e48 <sys_mbox_trypost>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b970:	f04f 33ff 	mov.w	r3, #4294967295
 800b974:	e00a      	b.n	800b98c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d005      	beq.n	800b98a <recv_tcp+0xe6>
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b982:	8bfa      	ldrh	r2, [r7, #30]
 800b984:	2100      	movs	r1, #0
 800b986:	6978      	ldr	r0, [r7, #20]
 800b988:	4798      	blx	r3
  }

  return ERR_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3720      	adds	r7, #32
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	08019b7c 	.word	0x08019b7c
 800b998:	08019c58 	.word	0x08019c58
 800b99c:	08019bc0 	.word	0x08019bc0
 800b9a0:	08019c7c 	.word	0x08019c7c
 800b9a4:	08019c9c 	.word	0x08019c9c
 800b9a8:	08019cb4 	.word	0x08019cb4
 800b9ac:	0801cd16 	.word	0x0801cd16

0800b9b0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d106      	bne.n	800b9d2 <poll_tcp+0x22>
 800b9c4:	4b29      	ldr	r3, [pc, #164]	; (800ba6c <poll_tcp+0xbc>)
 800b9c6:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b9ca:	4929      	ldr	r1, [pc, #164]	; (800ba70 <poll_tcp+0xc0>)
 800b9cc:	4829      	ldr	r0, [pc, #164]	; (800ba74 <poll_tcp+0xc4>)
 800b9ce:	f00c fdf3 	bl	80185b8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	785b      	ldrb	r3, [r3, #1]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d104      	bne.n	800b9e4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b9da:	2101      	movs	r1, #1
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f000 fe59 	bl	800c694 <lwip_netconn_do_writemore>
 800b9e2:	e016      	b.n	800ba12 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	785b      	ldrb	r3, [r3, #1]
 800b9e8:	2b04      	cmp	r3, #4
 800b9ea:	d112      	bne.n	800ba12 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6a1b      	ldr	r3, [r3, #32]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00a      	beq.n	800ba0a <poll_tcp+0x5a>
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6a1b      	ldr	r3, [r3, #32]
 800b9f8:	7a5b      	ldrb	r3, [r3, #9]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d005      	beq.n	800ba0a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	7a5a      	ldrb	r2, [r3, #9]
 800ba04:	3a01      	subs	r2, #1
 800ba06:	b2d2      	uxtb	r2, r2
 800ba08:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ba0a:	2101      	movs	r1, #1
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f000 fb3b 	bl	800c088 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	7f1b      	ldrb	r3, [r3, #28]
 800ba16:	f003 0310 	and.w	r3, r3, #16
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d021      	beq.n	800ba62 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d01d      	beq.n	800ba62 <poll_tcp+0xb2>
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ba2e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ba32:	d316      	bcc.n	800ba62 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ba3c:	2b04      	cmp	r3, #4
 800ba3e:	d810      	bhi.n	800ba62 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	7f1b      	ldrb	r3, [r3, #28]
 800ba44:	f023 0310 	bic.w	r3, r3, #16
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d005      	beq.n	800ba62 <poll_tcp+0xb2>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2102      	movs	r1, #2
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	08019b7c 	.word	0x08019b7c
 800ba70:	08019cd4 	.word	0x08019cd4
 800ba74:	08019bc0 	.word	0x08019bc0

0800ba78 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	4613      	mov	r3, r2
 800ba84:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d106      	bne.n	800ba9e <sent_tcp+0x26>
 800ba90:	4b20      	ldr	r3, [pc, #128]	; (800bb14 <sent_tcp+0x9c>)
 800ba92:	f240 1293 	movw	r2, #403	; 0x193
 800ba96:	4920      	ldr	r1, [pc, #128]	; (800bb18 <sent_tcp+0xa0>)
 800ba98:	4820      	ldr	r0, [pc, #128]	; (800bb1c <sent_tcp+0xa4>)
 800ba9a:	f00c fd8d 	bl	80185b8 <iprintf>

  if (conn) {
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d032      	beq.n	800bb0a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	785b      	ldrb	r3, [r3, #1]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d104      	bne.n	800bab6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800baac:	2101      	movs	r1, #1
 800baae:	6978      	ldr	r0, [r7, #20]
 800bab0:	f000 fdf0 	bl	800c694 <lwip_netconn_do_writemore>
 800bab4:	e007      	b.n	800bac6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	785b      	ldrb	r3, [r3, #1]
 800baba:	2b04      	cmp	r3, #4
 800babc:	d103      	bne.n	800bac6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800babe:	2101      	movs	r1, #1
 800bac0:	6978      	ldr	r0, [r7, #20]
 800bac2:	f000 fae1 	bl	800c088 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d01d      	beq.n	800bb0a <sent_tcp+0x92>
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bad6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800bada:	d316      	bcc.n	800bb0a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bae4:	2b04      	cmp	r3, #4
 800bae6:	d810      	bhi.n	800bb0a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	7f1b      	ldrb	r3, [r3, #28]
 800baec:	f023 0310 	bic.w	r3, r3, #16
 800baf0:	b2da      	uxtb	r2, r3
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d005      	beq.n	800bb0a <sent_tcp+0x92>
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb02:	88fa      	ldrh	r2, [r7, #6]
 800bb04:	2102      	movs	r1, #2
 800bb06:	6978      	ldr	r0, [r7, #20]
 800bb08:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800bb0a:	2300      	movs	r3, #0
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3718      	adds	r7, #24
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	08019b7c 	.word	0x08019b7c
 800bb18:	08019cd4 	.word	0x08019cd4
 800bb1c:	08019bc0 	.word	0x08019bc0

0800bb20 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b088      	sub	sp, #32
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d106      	bne.n	800bb44 <err_tcp+0x24>
 800bb36:	4b5f      	ldr	r3, [pc, #380]	; (800bcb4 <err_tcp+0x194>)
 800bb38:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800bb3c:	495e      	ldr	r1, [pc, #376]	; (800bcb8 <err_tcp+0x198>)
 800bb3e:	485f      	ldr	r0, [pc, #380]	; (800bcbc <err_tcp+0x19c>)
 800bb40:	f00c fd3a 	bl	80185b8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800bb44:	f00c fb10 	bl	8018168 <sys_arch_protect>
 800bb48:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	78fa      	ldrb	r2, [r7, #3]
 800bb54:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	7f1b      	ldrb	r3, [r3, #28]
 800bb5a:	f043 0301 	orr.w	r3, r3, #1
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	785b      	ldrb	r3, [r3, #1]
 800bb68:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800bb70:	69b8      	ldr	r0, [r7, #24]
 800bb72:	f00c fb07 	bl	8018184 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d005      	beq.n	800bb8a <err_tcp+0x6a>
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb82:	2200      	movs	r2, #0
 800bb84:	2104      	movs	r1, #4
 800bb86:	69f8      	ldr	r0, [r7, #28]
 800bb88:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d005      	beq.n	800bb9e <err_tcp+0x7e>
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb96:	2200      	movs	r2, #0
 800bb98:	2100      	movs	r1, #0
 800bb9a:	69f8      	ldr	r0, [r7, #28]
 800bb9c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bb9e:	69fb      	ldr	r3, [r7, #28]
 800bba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d005      	beq.n	800bbb2 <err_tcp+0x92>
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbaa:	2200      	movs	r2, #0
 800bbac:	2102      	movs	r1, #2
 800bbae:	69f8      	ldr	r0, [r7, #28]
 800bbb0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800bbb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7ff fd86 	bl	800b6c8 <lwip_netconn_err_to_msg>
 800bbbc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	3310      	adds	r3, #16
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f00c f9b5 	bl	8017f32 <sys_mbox_valid>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d005      	beq.n	800bbda <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	3310      	adds	r3, #16
 800bbd2:	6939      	ldr	r1, [r7, #16]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f00c f937 	bl	8017e48 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	3314      	adds	r3, #20
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f00c f9a7 	bl	8017f32 <sys_mbox_valid>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d005      	beq.n	800bbf6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	3314      	adds	r3, #20
 800bbee:	6939      	ldr	r1, [r7, #16]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f00c f929 	bl	8017e48 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800bbf6:	7dfb      	ldrb	r3, [r7, #23]
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d005      	beq.n	800bc08 <err_tcp+0xe8>
 800bbfc:	7dfb      	ldrb	r3, [r7, #23]
 800bbfe:	2b04      	cmp	r3, #4
 800bc00:	d002      	beq.n	800bc08 <err_tcp+0xe8>
 800bc02:	7dfb      	ldrb	r3, [r7, #23]
 800bc04:	2b03      	cmp	r3, #3
 800bc06:	d143      	bne.n	800bc90 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	7f1b      	ldrb	r3, [r3, #28]
 800bc0c:	f003 0304 	and.w	r3, r3, #4
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	bf14      	ite	ne
 800bc14:	2301      	movne	r3, #1
 800bc16:	2300      	moveq	r3, #0
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	7f1b      	ldrb	r3, [r3, #28]
 800bc20:	f023 0304 	bic.w	r3, r3, #4
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d13b      	bne.n	800bca8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	6a1b      	ldr	r3, [r3, #32]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d106      	bne.n	800bc46 <err_tcp+0x126>
 800bc38:	4b1e      	ldr	r3, [pc, #120]	; (800bcb4 <err_tcp+0x194>)
 800bc3a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bc3e:	4920      	ldr	r1, [pc, #128]	; (800bcc0 <err_tcp+0x1a0>)
 800bc40:	481e      	ldr	r0, [pc, #120]	; (800bcbc <err_tcp+0x19c>)
 800bc42:	f00c fcb9 	bl	80185b8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800bc46:	7dfb      	ldrb	r3, [r7, #23]
 800bc48:	2b04      	cmp	r3, #4
 800bc4a:	d104      	bne.n	800bc56 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	6a1b      	ldr	r3, [r3, #32]
 800bc50:	2200      	movs	r2, #0
 800bc52:	711a      	strb	r2, [r3, #4]
 800bc54:	e003      	b.n	800bc5e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	6a1b      	ldr	r3, [r3, #32]
 800bc5a:	78fa      	ldrb	r2, [r7, #3]
 800bc5c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	6a1b      	ldr	r3, [r3, #32]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	330c      	adds	r3, #12
 800bc66:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800bc68:	68b8      	ldr	r0, [r7, #8]
 800bc6a:	f00c f9f3 	bl	8018054 <sys_sem_valid>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d106      	bne.n	800bc82 <err_tcp+0x162>
 800bc74:	4b0f      	ldr	r3, [pc, #60]	; (800bcb4 <err_tcp+0x194>)
 800bc76:	f240 12ef 	movw	r2, #495	; 0x1ef
 800bc7a:	4912      	ldr	r1, [pc, #72]	; (800bcc4 <err_tcp+0x1a4>)
 800bc7c:	480f      	ldr	r0, [pc, #60]	; (800bcbc <err_tcp+0x19c>)
 800bc7e:	f00c fc9b 	bl	80185b8 <iprintf>
      conn->current_msg = NULL;
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	2200      	movs	r2, #0
 800bc86:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800bc88:	68b8      	ldr	r0, [r7, #8]
 800bc8a:	f00c f9c9 	bl	8018020 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800bc8e:	e00b      	b.n	800bca8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	6a1b      	ldr	r3, [r3, #32]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d008      	beq.n	800bcaa <err_tcp+0x18a>
 800bc98:	4b06      	ldr	r3, [pc, #24]	; (800bcb4 <err_tcp+0x194>)
 800bc9a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800bc9e:	490a      	ldr	r1, [pc, #40]	; (800bcc8 <err_tcp+0x1a8>)
 800bca0:	4806      	ldr	r0, [pc, #24]	; (800bcbc <err_tcp+0x19c>)
 800bca2:	f00c fc89 	bl	80185b8 <iprintf>
  }
}
 800bca6:	e000      	b.n	800bcaa <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800bca8:	bf00      	nop
}
 800bcaa:	bf00      	nop
 800bcac:	3720      	adds	r7, #32
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	08019b7c 	.word	0x08019b7c
 800bcb8:	08019cd4 	.word	0x08019cd4
 800bcbc:	08019bc0 	.word	0x08019bc0
 800bcc0:	08019ce4 	.word	0x08019ce4
 800bcc4:	08019d00 	.word	0x08019d00
 800bcc8:	08019d1c 	.word	0x08019d1c

0800bccc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800bcda:	6879      	ldr	r1, [r7, #4]
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f004 fabd 	bl	801025c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800bce2:	490a      	ldr	r1, [pc, #40]	; (800bd0c <setup_tcp+0x40>)
 800bce4:	68f8      	ldr	r0, [r7, #12]
 800bce6:	f004 facb 	bl	8010280 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800bcea:	4909      	ldr	r1, [pc, #36]	; (800bd10 <setup_tcp+0x44>)
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f004 fae9 	bl	80102c4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	4907      	ldr	r1, [pc, #28]	; (800bd14 <setup_tcp+0x48>)
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f004 fb40 	bl	801037c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800bcfc:	4906      	ldr	r1, [pc, #24]	; (800bd18 <setup_tcp+0x4c>)
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	f004 fb02 	bl	8010308 <tcp_err>
}
 800bd04:	bf00      	nop
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	0800b8a5 	.word	0x0800b8a5
 800bd10:	0800ba79 	.word	0x0800ba79
 800bd14:	0800b9b1 	.word	0x0800b9b1
 800bd18:	0800bb21 	.word	0x0800bb21

0800bd1c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800bd1c:	b590      	push	{r4, r7, lr}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800bd24:	2300      	movs	r3, #0
 800bd26:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d006      	beq.n	800bd40 <pcb_new+0x24>
 800bd32:	4b2b      	ldr	r3, [pc, #172]	; (800bde0 <pcb_new+0xc4>)
 800bd34:	f240 2265 	movw	r2, #613	; 0x265
 800bd38:	492a      	ldr	r1, [pc, #168]	; (800bde4 <pcb_new+0xc8>)
 800bd3a:	482b      	ldr	r0, [pc, #172]	; (800bde8 <pcb_new+0xcc>)
 800bd3c:	f00c fc3c 	bl	80185b8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd4a:	2b10      	cmp	r3, #16
 800bd4c:	d022      	beq.n	800bd94 <pcb_new+0x78>
 800bd4e:	2b20      	cmp	r3, #32
 800bd50:	d133      	bne.n	800bdba <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681c      	ldr	r4, [r3, #0]
 800bd56:	7bfb      	ldrb	r3, [r7, #15]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f009 fd44 	bl	80157e6 <udp_new_ip_type>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d02a      	beq.n	800bdc2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	2b22      	cmp	r3, #34	; 0x22
 800bd74:	d104      	bne.n	800bd80 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	6858      	ldr	r0, [r3, #4]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	4917      	ldr	r1, [pc, #92]	; (800bdec <pcb_new+0xd0>)
 800bd8e:	f009 fcb1 	bl	80156f4 <udp_recv>
      }
      break;
 800bd92:	e016      	b.n	800bdc2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681c      	ldr	r4, [r3, #0]
 800bd98:	7bfb      	ldrb	r3, [r7, #15]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f004 fa50 	bl	8010240 <tcp_new_ip_type>
 800bda0:	4603      	mov	r3, r0
 800bda2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00b      	beq.n	800bdc6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff ff8a 	bl	800bccc <setup_tcp>
      }
      break;
 800bdb8:	e005      	b.n	800bdc6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	22fa      	movs	r2, #250	; 0xfa
 800bdbe:	711a      	strb	r2, [r3, #4]
      return;
 800bdc0:	e00a      	b.n	800bdd8 <pcb_new+0xbc>
      break;
 800bdc2:	bf00      	nop
 800bdc4:	e000      	b.n	800bdc8 <pcb_new+0xac>
      break;
 800bdc6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d102      	bne.n	800bdd8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	22ff      	movs	r2, #255	; 0xff
 800bdd6:	711a      	strb	r2, [r3, #4]
  }
}
 800bdd8:	3714      	adds	r7, #20
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd90      	pop	{r4, r7, pc}
 800bdde:	bf00      	nop
 800bde0:	08019b7c 	.word	0x08019b7c
 800bde4:	08019d60 	.word	0x08019d60
 800bde8:	08019bc0 	.word	0x08019bc0
 800bdec:	0800b7a9 	.word	0x0800b7a9

0800bdf0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2200      	movs	r2, #0
 800be00:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d102      	bne.n	800be12 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f7ff ff85 	bl	800bd1c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800be12:	bf00      	nop
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
	...

0800be1c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b086      	sub	sp, #24
 800be20:	af00      	add	r7, sp, #0
 800be22:	4603      	mov	r3, r0
 800be24:	6039      	str	r1, [r7, #0]
 800be26:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800be28:	2300      	movs	r3, #0
 800be2a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800be2c:	2007      	movs	r0, #7
 800be2e:	f001 fdbf 	bl	800d9b0 <memp_malloc>
 800be32:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d101      	bne.n	800be3e <netconn_alloc+0x22>
    return NULL;
 800be3a:	2300      	movs	r3, #0
 800be3c:	e052      	b.n	800bee4 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	79fa      	ldrb	r2, [r7, #7]
 800be48:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2200      	movs	r2, #0
 800be4e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800be50:	79fb      	ldrb	r3, [r7, #7]
 800be52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be56:	2b10      	cmp	r3, #16
 800be58:	d004      	beq.n	800be64 <netconn_alloc+0x48>
 800be5a:	2b20      	cmp	r3, #32
 800be5c:	d105      	bne.n	800be6a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800be5e:	2306      	movs	r3, #6
 800be60:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800be62:	e00a      	b.n	800be7a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800be64:	2306      	movs	r3, #6
 800be66:	617b      	str	r3, [r7, #20]
      break;
 800be68:	e007      	b.n	800be7a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800be6a:	4b20      	ldr	r3, [pc, #128]	; (800beec <netconn_alloc+0xd0>)
 800be6c:	f240 22e5 	movw	r2, #741	; 0x2e5
 800be70:	491f      	ldr	r1, [pc, #124]	; (800bef0 <netconn_alloc+0xd4>)
 800be72:	4820      	ldr	r0, [pc, #128]	; (800bef4 <netconn_alloc+0xd8>)
 800be74:	f00c fba0 	bl	80185b8 <iprintf>
      goto free_and_return;
 800be78:	e02f      	b.n	800beda <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	3310      	adds	r3, #16
 800be7e:	6979      	ldr	r1, [r7, #20]
 800be80:	4618      	mov	r0, r3
 800be82:	f00b ffad 	bl	8017de0 <sys_mbox_new>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d125      	bne.n	800bed8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	330c      	adds	r3, #12
 800be90:	2100      	movs	r1, #0
 800be92:	4618      	mov	r0, r3
 800be94:	f00c f86b 	bl	8017f6e <sys_sem_new>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d005      	beq.n	800beaa <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	3310      	adds	r3, #16
 800bea2:	4618      	mov	r0, r3
 800bea4:	f00b ffbe 	bl	8017e24 <sys_mbox_free>
    goto free_and_return;
 800bea8:	e017      	b.n	800beda <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	3314      	adds	r3, #20
 800beae:	4618      	mov	r0, r3
 800beb0:	f00c f850 	bl	8017f54 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2200      	movs	r2, #0
 800beb8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f04f 32ff 	mov.w	r2, #4294967295
 800bec0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	683a      	ldr	r2, [r7, #0]
 800bec6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	7cfa      	ldrb	r2, [r7, #19]
 800bed2:	771a      	strb	r2, [r3, #28]
  return conn;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	e005      	b.n	800bee4 <netconn_alloc+0xc8>
    goto free_and_return;
 800bed8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800beda:	68f9      	ldr	r1, [r7, #12]
 800bedc:	2007      	movs	r0, #7
 800bede:	f001 fdb9 	bl	800da54 <memp_free>
  return NULL;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3718      	adds	r7, #24
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	08019b7c 	.word	0x08019b7c
 800bef0:	08019d80 	.word	0x08019d80
 800bef4:	08019bc0 	.word	0x08019bc0

0800bef8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d006      	beq.n	800bf16 <netconn_free+0x1e>
 800bf08:	4b1b      	ldr	r3, [pc, #108]	; (800bf78 <netconn_free+0x80>)
 800bf0a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bf0e:	491b      	ldr	r1, [pc, #108]	; (800bf7c <netconn_free+0x84>)
 800bf10:	481b      	ldr	r0, [pc, #108]	; (800bf80 <netconn_free+0x88>)
 800bf12:	f00c fb51 	bl	80185b8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	3310      	adds	r3, #16
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f00c f809 	bl	8017f32 <sys_mbox_valid>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d006      	beq.n	800bf34 <netconn_free+0x3c>
 800bf26:	4b14      	ldr	r3, [pc, #80]	; (800bf78 <netconn_free+0x80>)
 800bf28:	f240 3223 	movw	r2, #803	; 0x323
 800bf2c:	4915      	ldr	r1, [pc, #84]	; (800bf84 <netconn_free+0x8c>)
 800bf2e:	4814      	ldr	r0, [pc, #80]	; (800bf80 <netconn_free+0x88>)
 800bf30:	f00c fb42 	bl	80185b8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	3314      	adds	r3, #20
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f00b fffa 	bl	8017f32 <sys_mbox_valid>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d006      	beq.n	800bf52 <netconn_free+0x5a>
 800bf44:	4b0c      	ldr	r3, [pc, #48]	; (800bf78 <netconn_free+0x80>)
 800bf46:	f240 3226 	movw	r2, #806	; 0x326
 800bf4a:	490f      	ldr	r1, [pc, #60]	; (800bf88 <netconn_free+0x90>)
 800bf4c:	480c      	ldr	r0, [pc, #48]	; (800bf80 <netconn_free+0x88>)
 800bf4e:	f00c fb33 	bl	80185b8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	330c      	adds	r3, #12
 800bf56:	4618      	mov	r0, r3
 800bf58:	f00c f86f 	bl	801803a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	330c      	adds	r3, #12
 800bf60:	4618      	mov	r0, r3
 800bf62:	f00c f888 	bl	8018076 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800bf66:	6879      	ldr	r1, [r7, #4]
 800bf68:	2007      	movs	r0, #7
 800bf6a:	f001 fd73 	bl	800da54 <memp_free>
}
 800bf6e:	bf00      	nop
 800bf70:	3708      	adds	r7, #8
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	08019b7c 	.word	0x08019b7c
 800bf7c:	08019da8 	.word	0x08019da8
 800bf80:	08019bc0 	.word	0x08019bc0
 800bf84:	08019dd8 	.word	0x08019dd8
 800bf88:	08019e14 	.word	0x08019e14

0800bf8c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b086      	sub	sp, #24
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	3310      	adds	r3, #16
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f00b ffca 	bl	8017f32 <sys_mbox_valid>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d02f      	beq.n	800c004 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bfa4:	e018      	b.n	800bfd8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfae:	2b10      	cmp	r3, #16
 800bfb0:	d10e      	bne.n	800bfd0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	f107 020f 	add.w	r2, r7, #15
 800bfb8:	4611      	mov	r1, r2
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7ff fbba 	bl	800b734 <lwip_netconn_is_err_msg>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d108      	bne.n	800bfd8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f002 fb83 	bl	800e6d4 <pbuf_free>
 800bfce:	e003      	b.n	800bfd8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f000 fdca 	bl	800cb6c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	3310      	adds	r3, #16
 800bfdc:	f107 0210 	add.w	r2, r7, #16
 800bfe0:	4611      	mov	r1, r2
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f00b ff89 	bl	8017efa <sys_arch_mbox_tryfetch>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfee:	d1da      	bne.n	800bfa6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	3310      	adds	r3, #16
 800bff4:	4618      	mov	r0, r3
 800bff6:	f00b ff15 	bl	8017e24 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	3310      	adds	r3, #16
 800bffe:	4618      	mov	r0, r3
 800c000:	f00b ffa8 	bl	8017f54 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	3314      	adds	r3, #20
 800c008:	4618      	mov	r0, r3
 800c00a:	f00b ff92 	bl	8017f32 <sys_mbox_valid>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d034      	beq.n	800c07e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c014:	e01d      	b.n	800c052 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	f107 020e 	add.w	r2, r7, #14
 800c01c:	4611      	mov	r1, r2
 800c01e:	4618      	mov	r0, r3
 800c020:	f7ff fb88 	bl	800b734 <lwip_netconn_is_err_msg>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d113      	bne.n	800c052 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800c02e:	6978      	ldr	r0, [r7, #20]
 800c030:	f7ff ffac 	bl	800bf8c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d007      	beq.n	800c04c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	4618      	mov	r0, r3
 800c042:	f003 f947 	bl	800f2d4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	2200      	movs	r2, #0
 800c04a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800c04c:	6978      	ldr	r0, [r7, #20]
 800c04e:	f7ff ff53 	bl	800bef8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	3314      	adds	r3, #20
 800c056:	f107 0210 	add.w	r2, r7, #16
 800c05a:	4611      	mov	r1, r2
 800c05c:	4618      	mov	r0, r3
 800c05e:	f00b ff4c 	bl	8017efa <sys_arch_mbox_tryfetch>
 800c062:	4603      	mov	r3, r0
 800c064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c068:	d1d5      	bne.n	800c016 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	3314      	adds	r3, #20
 800c06e:	4618      	mov	r0, r3
 800c070:	f00b fed8 	bl	8017e24 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	3314      	adds	r3, #20
 800c078:	4618      	mov	r0, r3
 800c07a:	f00b ff6b 	bl	8017f54 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800c07e:	bf00      	nop
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
	...

0800c088 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b086      	sub	sp, #24
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	460b      	mov	r3, r1
 800c092:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800c094:	2300      	movs	r3, #0
 800c096:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d106      	bne.n	800c0ac <lwip_netconn_do_close_internal+0x24>
 800c09e:	4ba1      	ldr	r3, [pc, #644]	; (800c324 <lwip_netconn_do_close_internal+0x29c>)
 800c0a0:	f240 32a2 	movw	r2, #930	; 0x3a2
 800c0a4:	49a0      	ldr	r1, [pc, #640]	; (800c328 <lwip_netconn_do_close_internal+0x2a0>)
 800c0a6:	48a1      	ldr	r0, [pc, #644]	; (800c32c <lwip_netconn_do_close_internal+0x2a4>)
 800c0a8:	f00c fa86 	bl	80185b8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0b4:	2b10      	cmp	r3, #16
 800c0b6:	d006      	beq.n	800c0c6 <lwip_netconn_do_close_internal+0x3e>
 800c0b8:	4b9a      	ldr	r3, [pc, #616]	; (800c324 <lwip_netconn_do_close_internal+0x29c>)
 800c0ba:	f240 32a3 	movw	r2, #931	; 0x3a3
 800c0be:	499c      	ldr	r1, [pc, #624]	; (800c330 <lwip_netconn_do_close_internal+0x2a8>)
 800c0c0:	489a      	ldr	r0, [pc, #616]	; (800c32c <lwip_netconn_do_close_internal+0x2a4>)
 800c0c2:	f00c fa79 	bl	80185b8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	785b      	ldrb	r3, [r3, #1]
 800c0ca:	2b04      	cmp	r3, #4
 800c0cc:	d006      	beq.n	800c0dc <lwip_netconn_do_close_internal+0x54>
 800c0ce:	4b95      	ldr	r3, [pc, #596]	; (800c324 <lwip_netconn_do_close_internal+0x29c>)
 800c0d0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800c0d4:	4997      	ldr	r1, [pc, #604]	; (800c334 <lwip_netconn_do_close_internal+0x2ac>)
 800c0d6:	4895      	ldr	r0, [pc, #596]	; (800c32c <lwip_netconn_do_close_internal+0x2a4>)
 800c0d8:	f00c fa6e 	bl	80185b8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d106      	bne.n	800c0f2 <lwip_netconn_do_close_internal+0x6a>
 800c0e4:	4b8f      	ldr	r3, [pc, #572]	; (800c324 <lwip_netconn_do_close_internal+0x29c>)
 800c0e6:	f240 32a5 	movw	r2, #933	; 0x3a5
 800c0ea:	4993      	ldr	r1, [pc, #588]	; (800c338 <lwip_netconn_do_close_internal+0x2b0>)
 800c0ec:	488f      	ldr	r0, [pc, #572]	; (800c32c <lwip_netconn_do_close_internal+0x2a4>)
 800c0ee:	f00c fa63 	bl	80185b8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6a1b      	ldr	r3, [r3, #32]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d106      	bne.n	800c108 <lwip_netconn_do_close_internal+0x80>
 800c0fa:	4b8a      	ldr	r3, [pc, #552]	; (800c324 <lwip_netconn_do_close_internal+0x29c>)
 800c0fc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c100:	498e      	ldr	r1, [pc, #568]	; (800c33c <lwip_netconn_do_close_internal+0x2b4>)
 800c102:	488a      	ldr	r0, [pc, #552]	; (800c32c <lwip_netconn_do_close_internal+0x2a4>)
 800c104:	f00c fa58 	bl	80185b8 <iprintf>

  tpcb = conn->pcb.tcp;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6a1b      	ldr	r3, [r3, #32]
 800c112:	7a1b      	ldrb	r3, [r3, #8]
 800c114:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800c116:	7bfb      	ldrb	r3, [r7, #15]
 800c118:	f003 0301 	and.w	r3, r3, #1
 800c11c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800c11e:	7bfb      	ldrb	r3, [r7, #15]
 800c120:	f003 0302 	and.w	r3, r3, #2
 800c124:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800c126:	7bfb      	ldrb	r3, [r7, #15]
 800c128:	2b03      	cmp	r3, #3
 800c12a:	d102      	bne.n	800c132 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800c12c:	2301      	movs	r3, #1
 800c12e:	75bb      	strb	r3, [r7, #22]
 800c130:	e01f      	b.n	800c172 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800c132:	7bbb      	ldrb	r3, [r7, #14]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00e      	beq.n	800c156 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800c13c:	2b05      	cmp	r3, #5
 800c13e:	d007      	beq.n	800c150 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800c144:	2b06      	cmp	r3, #6
 800c146:	d003      	beq.n	800c150 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800c14c:	2b08      	cmp	r3, #8
 800c14e:	d102      	bne.n	800c156 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800c150:	2301      	movs	r3, #1
 800c152:	75bb      	strb	r3, [r7, #22]
 800c154:	e00d      	b.n	800c172 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800c156:	7b7b      	ldrb	r3, [r7, #13]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d008      	beq.n	800c16e <lwip_netconn_do_close_internal+0xe6>
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	8b5b      	ldrh	r3, [r3, #26]
 800c160:	f003 0310 	and.w	r3, r3, #16
 800c164:	2b00      	cmp	r3, #0
 800c166:	d002      	beq.n	800c16e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800c168:	2301      	movs	r3, #1
 800c16a:	75bb      	strb	r3, [r7, #22]
 800c16c:	e001      	b.n	800c172 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800c16e:	2300      	movs	r3, #0
 800c170:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800c172:	7dbb      	ldrb	r3, [r7, #22]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d003      	beq.n	800c180 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800c178:	2100      	movs	r1, #0
 800c17a:	6938      	ldr	r0, [r7, #16]
 800c17c:	f004 f86e 	bl	801025c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	7d1b      	ldrb	r3, [r3, #20]
 800c184:	2b01      	cmp	r3, #1
 800c186:	d104      	bne.n	800c192 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800c188:	2100      	movs	r1, #0
 800c18a:	6938      	ldr	r0, [r7, #16]
 800c18c:	f004 f8de 	bl	801034c <tcp_accept>
 800c190:	e01d      	b.n	800c1ce <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800c192:	7bbb      	ldrb	r3, [r7, #14]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d007      	beq.n	800c1a8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800c198:	2100      	movs	r1, #0
 800c19a:	6938      	ldr	r0, [r7, #16]
 800c19c:	f004 f870 	bl	8010280 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	6938      	ldr	r0, [r7, #16]
 800c1a4:	f004 f8d2 	bl	801034c <tcp_accept>
    }
    if (shut_tx) {
 800c1a8:	7b7b      	ldrb	r3, [r7, #13]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	6938      	ldr	r0, [r7, #16]
 800c1b2:	f004 f887 	bl	80102c4 <tcp_sent>
    }
    if (shut_close) {
 800c1b6:	7dbb      	ldrb	r3, [r7, #22]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d008      	beq.n	800c1ce <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800c1bc:	2200      	movs	r2, #0
 800c1be:	2100      	movs	r1, #0
 800c1c0:	6938      	ldr	r0, [r7, #16]
 800c1c2:	f004 f8db 	bl	801037c <tcp_poll>
      tcp_err(tpcb, NULL);
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	6938      	ldr	r0, [r7, #16]
 800c1ca:	f004 f89d 	bl	8010308 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800c1ce:	7dbb      	ldrb	r3, [r7, #22]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d005      	beq.n	800c1e0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800c1d4:	6938      	ldr	r0, [r7, #16]
 800c1d6:	f002 ff37 	bl	800f048 <tcp_close>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	75fb      	strb	r3, [r7, #23]
 800c1de:	e007      	b.n	800c1f0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
 800c1e2:	7b7a      	ldrb	r2, [r7, #13]
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	6938      	ldr	r0, [r7, #16]
 800c1e8:	f002 ff5a 	bl	800f0a0 <tcp_shutdown>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800c1f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d102      	bne.n	800c1fe <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	757b      	strb	r3, [r7, #21]
 800c1fc:	e016      	b.n	800c22c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800c1fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c206:	d10f      	bne.n	800c228 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6a1b      	ldr	r3, [r3, #32]
 800c20c:	7a5b      	ldrb	r3, [r3, #9]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d10c      	bne.n	800c22c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800c212:	2301      	movs	r3, #1
 800c214:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800c216:	7dbb      	ldrb	r3, [r7, #22]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d007      	beq.n	800c22c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800c21c:	6938      	ldr	r0, [r7, #16]
 800c21e:	f003 f859 	bl	800f2d4 <tcp_abort>
          err = ERR_OK;
 800c222:	2300      	movs	r3, #0
 800c224:	75fb      	strb	r3, [r7, #23]
 800c226:	e001      	b.n	800c22c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800c228:	2301      	movs	r3, #1
 800c22a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800c22c:	7d7b      	ldrb	r3, [r7, #21]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d044      	beq.n	800c2bc <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6a1b      	ldr	r3, [r3, #32]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	330c      	adds	r3, #12
 800c23a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a1b      	ldr	r3, [r3, #32]
 800c240:	7dfa      	ldrb	r2, [r7, #23]
 800c242:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800c250:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d129      	bne.n	800c2ac <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800c258:	7dbb      	ldrb	r3, [r7, #22]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00c      	beq.n	800c278 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d005      	beq.n	800c278 <lwip_netconn_do_close_internal+0x1f0>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c270:	2200      	movs	r2, #0
 800c272:	2104      	movs	r1, #4
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	4798      	blx	r3
      }
      if (shut_rx) {
 800c278:	7bbb      	ldrb	r3, [r7, #14]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d009      	beq.n	800c292 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c282:	2b00      	cmp	r3, #0
 800c284:	d005      	beq.n	800c292 <lwip_netconn_do_close_internal+0x20a>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28a:	2200      	movs	r2, #0
 800c28c:	2100      	movs	r1, #0
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	4798      	blx	r3
      }
      if (shut_tx) {
 800c292:	7b7b      	ldrb	r3, [r7, #13]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d009      	beq.n	800c2ac <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d005      	beq.n	800c2ac <lwip_netconn_do_close_internal+0x224>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	2102      	movs	r1, #2
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c2ac:	78fb      	ldrb	r3, [r7, #3]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800c2b2:	68b8      	ldr	r0, [r7, #8]
 800c2b4:	f00b feb4 	bl	8018020 <sys_sem_signal>
    }
    return ERR_OK;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	e02e      	b.n	800c31a <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800c2bc:	7d7b      	ldrb	r3, [r7, #21]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d11e      	bne.n	800c300 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	7d1b      	ldrb	r3, [r3, #20]
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d106      	bne.n	800c2d8 <lwip_netconn_do_close_internal+0x250>
 800c2ca:	4b16      	ldr	r3, [pc, #88]	; (800c324 <lwip_netconn_do_close_internal+0x29c>)
 800c2cc:	f240 4241 	movw	r2, #1089	; 0x441
 800c2d0:	491b      	ldr	r1, [pc, #108]	; (800c340 <lwip_netconn_do_close_internal+0x2b8>)
 800c2d2:	4816      	ldr	r0, [pc, #88]	; (800c32c <lwip_netconn_do_close_internal+0x2a4>)
 800c2d4:	f00c f970 	bl	80185b8 <iprintf>
    if (shut_tx) {
 800c2d8:	7b7b      	ldrb	r3, [r7, #13]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d003      	beq.n	800c2e6 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800c2de:	4919      	ldr	r1, [pc, #100]	; (800c344 <lwip_netconn_do_close_internal+0x2bc>)
 800c2e0:	6938      	ldr	r0, [r7, #16]
 800c2e2:	f003 ffef 	bl	80102c4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	4917      	ldr	r1, [pc, #92]	; (800c348 <lwip_netconn_do_close_internal+0x2c0>)
 800c2ea:	6938      	ldr	r0, [r7, #16]
 800c2ec:	f004 f846 	bl	801037c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800c2f0:	4916      	ldr	r1, [pc, #88]	; (800c34c <lwip_netconn_do_close_internal+0x2c4>)
 800c2f2:	6938      	ldr	r0, [r7, #16]
 800c2f4:	f004 f808 	bl	8010308 <tcp_err>
    tcp_arg(tpcb, conn);
 800c2f8:	6879      	ldr	r1, [r7, #4]
 800c2fa:	6938      	ldr	r0, [r7, #16]
 800c2fc:	f003 ffae 	bl	801025c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800c300:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d106      	bne.n	800c316 <lwip_netconn_do_close_internal+0x28e>
 800c308:	4b06      	ldr	r3, [pc, #24]	; (800c324 <lwip_netconn_do_close_internal+0x29c>)
 800c30a:	f240 424d 	movw	r2, #1101	; 0x44d
 800c30e:	4910      	ldr	r1, [pc, #64]	; (800c350 <lwip_netconn_do_close_internal+0x2c8>)
 800c310:	4806      	ldr	r0, [pc, #24]	; (800c32c <lwip_netconn_do_close_internal+0x2a4>)
 800c312:	f00c f951 	bl	80185b8 <iprintf>
  return err;
 800c316:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3718      	adds	r7, #24
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	08019b7c 	.word	0x08019b7c
 800c328:	08019e50 	.word	0x08019e50
 800c32c:	08019bc0 	.word	0x08019bc0
 800c330:	08019e60 	.word	0x08019e60
 800c334:	08019e80 	.word	0x08019e80
 800c338:	08019ea4 	.word	0x08019ea4
 800c33c:	08019ce4 	.word	0x08019ce4
 800c340:	08019eb8 	.word	0x08019eb8
 800c344:	0800ba79 	.word	0x0800ba79
 800c348:	0800b9b1 	.word	0x0800b9b1
 800c34c:	0800bb21 	.word	0x0800bb21
 800c350:	08019edc 	.word	0x08019edc

0800c354 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	785b      	ldrb	r3, [r3, #1]
 800c366:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800c368:	7afb      	ldrb	r3, [r7, #11]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00d      	beq.n	800c38a <lwip_netconn_do_delconn+0x36>
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c378:	2b10      	cmp	r3, #16
 800c37a:	d006      	beq.n	800c38a <lwip_netconn_do_delconn+0x36>
 800c37c:	4b60      	ldr	r3, [pc, #384]	; (800c500 <lwip_netconn_do_delconn+0x1ac>)
 800c37e:	f240 425e 	movw	r2, #1118	; 0x45e
 800c382:	4960      	ldr	r1, [pc, #384]	; (800c504 <lwip_netconn_do_delconn+0x1b0>)
 800c384:	4860      	ldr	r0, [pc, #384]	; (800c508 <lwip_netconn_do_delconn+0x1b4>)
 800c386:	f00c f917 	bl	80185b8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800c38a:	7afb      	ldrb	r3, [r7, #11]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d005      	beq.n	800c39c <lwip_netconn_do_delconn+0x48>
 800c390:	7afb      	ldrb	r3, [r7, #11]
 800c392:	2b02      	cmp	r3, #2
 800c394:	d002      	beq.n	800c39c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800c396:	7afb      	ldrb	r3, [r7, #11]
 800c398:	2b03      	cmp	r3, #3
 800c39a:	d109      	bne.n	800c3b0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800c39c:	7afb      	ldrb	r3, [r7, #11]
 800c39e:	2b03      	cmp	r3, #3
 800c3a0:	d10a      	bne.n	800c3b8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	7f1b      	ldrb	r3, [r3, #28]
 800c3a8:	f003 0304 	and.w	r3, r3, #4
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d103      	bne.n	800c3b8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	22fb      	movs	r2, #251	; 0xfb
 800c3b4:	711a      	strb	r2, [r3, #4]
 800c3b6:	e097      	b.n	800c4e8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800c3b8:	7afb      	ldrb	r3, [r7, #11]
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	d10d      	bne.n	800c3da <lwip_netconn_do_delconn+0x86>
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	7f1b      	ldrb	r3, [r3, #28]
 800c3c4:	f003 0304 	and.w	r3, r3, #4
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d106      	bne.n	800c3da <lwip_netconn_do_delconn+0x86>
 800c3cc:	4b4c      	ldr	r3, [pc, #304]	; (800c500 <lwip_netconn_do_delconn+0x1ac>)
 800c3ce:	f240 427a 	movw	r2, #1146	; 0x47a
 800c3d2:	494e      	ldr	r1, [pc, #312]	; (800c50c <lwip_netconn_do_delconn+0x1b8>)
 800c3d4:	484c      	ldr	r0, [pc, #304]	; (800c508 <lwip_netconn_do_delconn+0x1b4>)
 800c3d6:	f00c f8ef 	bl	80185b8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7ff fdd1 	bl	800bf8c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d05f      	beq.n	800c4b4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3fe:	2b10      	cmp	r3, #16
 800c400:	d00d      	beq.n	800c41e <lwip_netconn_do_delconn+0xca>
 800c402:	2b20      	cmp	r3, #32
 800c404:	d151      	bne.n	800c4aa <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	4618      	mov	r0, r3
 800c418:	f009 f98c 	bl	8015734 <udp_remove>
          break;
 800c41c:	e046      	b.n	800c4ac <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	6a1b      	ldr	r3, [r3, #32]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d006      	beq.n	800c436 <lwip_netconn_do_delconn+0xe2>
 800c428:	4b35      	ldr	r3, [pc, #212]	; (800c500 <lwip_netconn_do_delconn+0x1ac>)
 800c42a:	f240 4294 	movw	r2, #1172	; 0x494
 800c42e:	4938      	ldr	r1, [pc, #224]	; (800c510 <lwip_netconn_do_delconn+0x1bc>)
 800c430:	4835      	ldr	r0, [pc, #212]	; (800c508 <lwip_netconn_do_delconn+0x1b4>)
 800c432:	f00c f8c1 	bl	80185b8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2204      	movs	r2, #4
 800c43c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2203      	movs	r2, #3
 800c442:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2100      	movs	r1, #0
 800c452:	4618      	mov	r0, r3
 800c454:	f7ff fe18 	bl	800c088 <lwip_netconn_do_close_internal>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d04b      	beq.n	800c4f6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	785b      	ldrb	r3, [r3, #1]
 800c464:	2b04      	cmp	r3, #4
 800c466:	d006      	beq.n	800c476 <lwip_netconn_do_delconn+0x122>
 800c468:	4b25      	ldr	r3, [pc, #148]	; (800c500 <lwip_netconn_do_delconn+0x1ac>)
 800c46a:	f240 429a 	movw	r2, #1178	; 0x49a
 800c46e:	4929      	ldr	r1, [pc, #164]	; (800c514 <lwip_netconn_do_delconn+0x1c0>)
 800c470:	4825      	ldr	r0, [pc, #148]	; (800c508 <lwip_netconn_do_delconn+0x1b4>)
 800c472:	f00c f8a1 	bl	80185b8 <iprintf>
            UNLOCK_TCPIP_CORE();
 800c476:	4828      	ldr	r0, [pc, #160]	; (800c518 <lwip_netconn_do_delconn+0x1c4>)
 800c478:	f00b fe43 	bl	8018102 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	330c      	adds	r3, #12
 800c482:	2100      	movs	r1, #0
 800c484:	4618      	mov	r0, r3
 800c486:	f00b fd9a 	bl	8017fbe <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800c48a:	4823      	ldr	r0, [pc, #140]	; (800c518 <lwip_netconn_do_delconn+0x1c4>)
 800c48c:	f00b fe2a 	bl	80180e4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	785b      	ldrb	r3, [r3, #1]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d02d      	beq.n	800c4f6 <lwip_netconn_do_delconn+0x1a2>
 800c49a:	4b19      	ldr	r3, [pc, #100]	; (800c500 <lwip_netconn_do_delconn+0x1ac>)
 800c49c:	f240 429e 	movw	r2, #1182	; 0x49e
 800c4a0:	491c      	ldr	r1, [pc, #112]	; (800c514 <lwip_netconn_do_delconn+0x1c0>)
 800c4a2:	4819      	ldr	r0, [pc, #100]	; (800c508 <lwip_netconn_do_delconn+0x1b4>)
 800c4a4:	f00c f888 	bl	80185b8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800c4a8:	e025      	b.n	800c4f6 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800c4aa:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d007      	beq.n	800c4ce <lwip_netconn_do_delconn+0x17a>
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	6810      	ldr	r0, [r2, #0]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d007      	beq.n	800c4e8 <lwip_netconn_do_delconn+0x194>
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4de:	68fa      	ldr	r2, [r7, #12]
 800c4e0:	6810      	ldr	r0, [r2, #0]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	2102      	movs	r1, #2
 800c4e6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	330c      	adds	r3, #12
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f00b fdb0 	bl	8018054 <sys_sem_valid>
 800c4f4:	e000      	b.n	800c4f8 <lwip_netconn_do_delconn+0x1a4>
          return;
 800c4f6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	08019b7c 	.word	0x08019b7c
 800c504:	08019eec 	.word	0x08019eec
 800c508:	08019bc0 	.word	0x08019bc0
 800c50c:	08019f00 	.word	0x08019f00
 800c510:	08019f20 	.word	0x08019f20
 800c514:	08019f3c 	.word	0x08019f3c
 800c518:	2000a2fc 	.word	0x2000a2fc

0800c51c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d025      	beq.n	800c57e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c53c:	2b10      	cmp	r3, #16
 800c53e:	d00e      	beq.n	800c55e <lwip_netconn_do_bind+0x42>
 800c540:	2b20      	cmp	r3, #32
 800c542:	d119      	bne.n	800c578 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	6858      	ldr	r0, [r3, #4]
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	6899      	ldr	r1, [r3, #8]
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	899b      	ldrh	r3, [r3, #12]
 800c552:	461a      	mov	r2, r3
 800c554:	f009 f846 	bl	80155e4 <udp_bind>
 800c558:	4603      	mov	r3, r0
 800c55a:	73fb      	strb	r3, [r7, #15]
        break;
 800c55c:	e011      	b.n	800c582 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	6858      	ldr	r0, [r3, #4]
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	6899      	ldr	r1, [r3, #8]
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	899b      	ldrh	r3, [r3, #12]
 800c56c:	461a      	mov	r2, r3
 800c56e:	f002 febd 	bl	800f2ec <tcp_bind>
 800c572:	4603      	mov	r3, r0
 800c574:	73fb      	strb	r3, [r7, #15]
        break;
 800c576:	e004      	b.n	800c582 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800c578:	23fa      	movs	r3, #250	; 0xfa
 800c57a:	73fb      	strb	r3, [r7, #15]
        break;
 800c57c:	e001      	b.n	800c582 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800c57e:	23fa      	movs	r3, #250	; 0xfa
 800c580:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	7bfa      	ldrb	r2, [r7, #15]
 800c586:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c588:	bf00      	nop
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7ff f875 	bl	800b690 <netconn_err>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c5aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d134      	bne.n	800c61c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d02d      	beq.n	800c618 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5c6:	2b20      	cmp	r3, #32
 800c5c8:	d123      	bne.n	800c612 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10c      	bne.n	800c5ee <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	685a      	ldr	r2, [r3, #4]
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	4610      	mov	r0, r2
 800c5e4:	f008 fe14 	bl	8015210 <udp_send>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800c5ec:	e016      	b.n	800c61c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	6858      	ldr	r0, [r3, #4]
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	6819      	ldr	r1, [r3, #0]
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	f103 0208 	add.w	r2, r3, #8
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	899b      	ldrh	r3, [r3, #12]
 800c608:	f008 fe36 	bl	8015278 <udp_sendto>
 800c60c:	4603      	mov	r3, r0
 800c60e:	73fb      	strb	r3, [r7, #15]
          break;
 800c610:	e004      	b.n	800c61c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800c612:	23f5      	movs	r3, #245	; 0xf5
 800c614:	73fb      	strb	r3, [r7, #15]
          break;
 800c616:	e001      	b.n	800c61c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800c618:	23f5      	movs	r3, #245	; 0xf5
 800c61a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	7bfa      	ldrb	r2, [r7, #15]
 800c620:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c622:	bf00      	nop
 800c624:	3710      	adds	r7, #16
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b086      	sub	sp, #24
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	2200      	movs	r2, #0
 800c63a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d022      	beq.n	800c68c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c650:	2b10      	cmp	r3, #16
 800c652:	d11b      	bne.n	800c68c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	689b      	ldr	r3, [r3, #8]
 800c658:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c660:	d202      	bcs.n	800c668 <lwip_netconn_do_recv+0x3e>
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	b29b      	uxth	r3, r3
 800c666:	e001      	b.n	800c66c <lwip_netconn_do_recv+0x42>
 800c668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c66c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	89fa      	ldrh	r2, [r7, #14]
 800c676:	4611      	mov	r1, r2
 800c678:	4618      	mov	r0, r3
 800c67a:	f002 ff29 	bl	800f4d0 <tcp_recved>
        remaining -= recved;
 800c67e:	89fb      	ldrh	r3, [r7, #14]
 800c680:	697a      	ldr	r2, [r7, #20]
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1e6      	bne.n	800c65a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c68c:	bf00      	nop
 800c68e:	3718      	adds	r7, #24
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b088      	sub	sp, #32
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	460b      	mov	r3, r1
 800c69e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d106      	bne.n	800c6b8 <lwip_netconn_do_writemore+0x24>
 800c6aa:	4b96      	ldr	r3, [pc, #600]	; (800c904 <lwip_netconn_do_writemore+0x270>)
 800c6ac:	f240 6273 	movw	r2, #1651	; 0x673
 800c6b0:	4995      	ldr	r1, [pc, #596]	; (800c908 <lwip_netconn_do_writemore+0x274>)
 800c6b2:	4896      	ldr	r0, [pc, #600]	; (800c90c <lwip_netconn_do_writemore+0x278>)
 800c6b4:	f00b ff80 	bl	80185b8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	785b      	ldrb	r3, [r3, #1]
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d006      	beq.n	800c6ce <lwip_netconn_do_writemore+0x3a>
 800c6c0:	4b90      	ldr	r3, [pc, #576]	; (800c904 <lwip_netconn_do_writemore+0x270>)
 800c6c2:	f240 6274 	movw	r2, #1652	; 0x674
 800c6c6:	4992      	ldr	r1, [pc, #584]	; (800c910 <lwip_netconn_do_writemore+0x27c>)
 800c6c8:	4890      	ldr	r0, [pc, #576]	; (800c90c <lwip_netconn_do_writemore+0x278>)
 800c6ca:	f00b ff75 	bl	80185b8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a1b      	ldr	r3, [r3, #32]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d106      	bne.n	800c6e4 <lwip_netconn_do_writemore+0x50>
 800c6d6:	4b8b      	ldr	r3, [pc, #556]	; (800c904 <lwip_netconn_do_writemore+0x270>)
 800c6d8:	f240 6275 	movw	r2, #1653	; 0x675
 800c6dc:	498d      	ldr	r1, [pc, #564]	; (800c914 <lwip_netconn_do_writemore+0x280>)
 800c6de:	488b      	ldr	r0, [pc, #556]	; (800c90c <lwip_netconn_do_writemore+0x278>)
 800c6e0:	f00b ff6a 	bl	80185b8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d106      	bne.n	800c6fa <lwip_netconn_do_writemore+0x66>
 800c6ec:	4b85      	ldr	r3, [pc, #532]	; (800c904 <lwip_netconn_do_writemore+0x270>)
 800c6ee:	f240 6276 	movw	r2, #1654	; 0x676
 800c6f2:	4989      	ldr	r1, [pc, #548]	; (800c918 <lwip_netconn_do_writemore+0x284>)
 800c6f4:	4885      	ldr	r0, [pc, #532]	; (800c90c <lwip_netconn_do_writemore+0x278>)
 800c6f6:	f00b ff5f 	bl	80185b8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a1b      	ldr	r3, [r3, #32]
 800c6fe:	699a      	ldr	r2, [r3, #24]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6a1b      	ldr	r3, [r3, #32]
 800c704:	695b      	ldr	r3, [r3, #20]
 800c706:	429a      	cmp	r2, r3
 800c708:	d306      	bcc.n	800c718 <lwip_netconn_do_writemore+0x84>
 800c70a:	4b7e      	ldr	r3, [pc, #504]	; (800c904 <lwip_netconn_do_writemore+0x270>)
 800c70c:	f240 6277 	movw	r2, #1655	; 0x677
 800c710:	4982      	ldr	r1, [pc, #520]	; (800c91c <lwip_netconn_do_writemore+0x288>)
 800c712:	487e      	ldr	r0, [pc, #504]	; (800c90c <lwip_netconn_do_writemore+0x278>)
 800c714:	f00b ff50 	bl	80185b8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6a1b      	ldr	r3, [r3, #32]
 800c71c:	899b      	ldrh	r3, [r3, #12]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d106      	bne.n	800c730 <lwip_netconn_do_writemore+0x9c>
 800c722:	4b78      	ldr	r3, [pc, #480]	; (800c904 <lwip_netconn_do_writemore+0x270>)
 800c724:	f240 6279 	movw	r2, #1657	; 0x679
 800c728:	497d      	ldr	r1, [pc, #500]	; (800c920 <lwip_netconn_do_writemore+0x28c>)
 800c72a:	4878      	ldr	r0, [pc, #480]	; (800c90c <lwip_netconn_do_writemore+0x278>)
 800c72c:	f00b ff44 	bl	80185b8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6a1b      	ldr	r3, [r3, #32]
 800c734:	7f1b      	ldrb	r3, [r3, #28]
 800c736:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	7f1b      	ldrb	r3, [r3, #28]
 800c73c:	f003 0302 	and.w	r3, r3, #2
 800c740:	2b00      	cmp	r3, #0
 800c742:	d104      	bne.n	800c74e <lwip_netconn_do_writemore+0xba>
 800c744:	7ebb      	ldrb	r3, [r7, #26]
 800c746:	f003 0304 	and.w	r3, r3, #4
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d001      	beq.n	800c752 <lwip_netconn_do_writemore+0xbe>
 800c74e:	2301      	movs	r3, #1
 800c750:	e000      	b.n	800c754 <lwip_netconn_do_writemore+0xc0>
 800c752:	2300      	movs	r3, #0
 800c754:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6a1b      	ldr	r3, [r3, #32]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a1b      	ldr	r3, [r3, #32]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	4413      	add	r3, r2
 800c766:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a1b      	ldr	r3, [r3, #32]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	685a      	ldr	r2, [r3, #4]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6a1b      	ldr	r3, [r3, #32]
 800c774:	691b      	ldr	r3, [r3, #16]
 800c776:	1ad3      	subs	r3, r2, r3
 800c778:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c780:	d307      	bcc.n	800c792 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800c782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c786:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c788:	7ebb      	ldrb	r3, [r7, #26]
 800c78a:	f043 0302 	orr.w	r3, r3, #2
 800c78e:	76bb      	strb	r3, [r7, #26]
 800c790:	e001      	b.n	800c796 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c79e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c7a0:	89fa      	ldrh	r2, [r7, #14]
 800c7a2:	8bbb      	ldrh	r3, [r7, #28]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d216      	bcs.n	800c7d6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800c7a8:	89fb      	ldrh	r3, [r7, #14]
 800c7aa:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c7ac:	7e3b      	ldrb	r3, [r7, #24]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00d      	beq.n	800c7ce <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800c7b2:	8bbb      	ldrh	r3, [r7, #28]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d10e      	bne.n	800c7d6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6a1b      	ldr	r3, [r3, #32]
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d102      	bne.n	800c7c8 <lwip_netconn_do_writemore+0x134>
 800c7c2:	f06f 0306 	mvn.w	r3, #6
 800c7c6:	e000      	b.n	800c7ca <lwip_netconn_do_writemore+0x136>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c7cc:	e07d      	b.n	800c8ca <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c7ce:	7ebb      	ldrb	r3, [r7, #26]
 800c7d0:	f043 0302 	orr.w	r3, r3, #2
 800c7d4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6a1b      	ldr	r3, [r3, #32]
 800c7da:	691a      	ldr	r2, [r3, #16]
 800c7dc:	8bbb      	ldrh	r3, [r7, #28]
 800c7de:	441a      	add	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6a1b      	ldr	r3, [r3, #32]
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d906      	bls.n	800c7fa <lwip_netconn_do_writemore+0x166>
 800c7ec:	4b45      	ldr	r3, [pc, #276]	; (800c904 <lwip_netconn_do_writemore+0x270>)
 800c7ee:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800c7f2:	494c      	ldr	r1, [pc, #304]	; (800c924 <lwip_netconn_do_writemore+0x290>)
 800c7f4:	4845      	ldr	r0, [pc, #276]	; (800c90c <lwip_netconn_do_writemore+0x278>)
 800c7f6:	f00b fedf 	bl	80185b8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c7fa:	8bbb      	ldrh	r3, [r7, #28]
 800c7fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c800:	4293      	cmp	r3, r2
 800c802:	d103      	bne.n	800c80c <lwip_netconn_do_writemore+0x178>
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c80a:	d209      	bcs.n	800c820 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c810:	8bba      	ldrh	r2, [r7, #28]
 800c812:	429a      	cmp	r2, r3
 800c814:	d10b      	bne.n	800c82e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	899b      	ldrh	r3, [r3, #12]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d906      	bls.n	800c82e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800c820:	2301      	movs	r3, #1
 800c822:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c824:	7ebb      	ldrb	r3, [r7, #26]
 800c826:	f043 0302 	orr.w	r3, r3, #2
 800c82a:	76bb      	strb	r3, [r7, #26]
 800c82c:	e001      	b.n	800c832 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800c82e:	2300      	movs	r3, #0
 800c830:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6858      	ldr	r0, [r3, #4]
 800c836:	7ebb      	ldrb	r3, [r7, #26]
 800c838:	8bba      	ldrh	r2, [r7, #28]
 800c83a:	6979      	ldr	r1, [r7, #20]
 800c83c:	f006 fc4c 	bl	80130d8 <tcp_write>
 800c840:	4603      	mov	r3, r0
 800c842:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800c844:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d12c      	bne.n	800c8a6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6a1b      	ldr	r3, [r3, #32]
 800c850:	6999      	ldr	r1, [r3, #24]
 800c852:	8bba      	ldrh	r2, [r7, #28]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6a1b      	ldr	r3, [r3, #32]
 800c858:	440a      	add	r2, r1
 800c85a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a1b      	ldr	r3, [r3, #32]
 800c860:	6919      	ldr	r1, [r3, #16]
 800c862:	8bba      	ldrh	r2, [r7, #28]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a1b      	ldr	r3, [r3, #32]
 800c868:	440a      	add	r2, r1
 800c86a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a1b      	ldr	r3, [r3, #32]
 800c870:	691a      	ldr	r2, [r3, #16]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a1b      	ldr	r3, [r3, #32]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d113      	bne.n	800c8a6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6a1b      	ldr	r3, [r3, #32]
 800c882:	899a      	ldrh	r2, [r3, #12]
 800c884:	3a01      	subs	r2, #1
 800c886:	b292      	uxth	r2, r2
 800c888:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a1b      	ldr	r3, [r3, #32]
 800c88e:	899b      	ldrh	r3, [r3, #12]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d008      	beq.n	800c8a6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6a1b      	ldr	r3, [r3, #32]
 800c898:	689a      	ldr	r2, [r3, #8]
 800c89a:	3208      	adds	r2, #8
 800c89c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a1b      	ldr	r3, [r3, #32]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800c8a6:	7e7b      	ldrb	r3, [r7, #25]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d004      	beq.n	800c8b6 <lwip_netconn_do_writemore+0x222>
 800c8ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f43f af50 	beq.w	800c756 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800c8b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d004      	beq.n	800c8c8 <lwip_netconn_do_writemore+0x234>
 800c8be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c6:	d146      	bne.n	800c956 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800c8c8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800c8ca:	7e3b      	ldrb	r3, [r7, #24]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d02b      	beq.n	800c928 <lwip_netconn_do_writemore+0x294>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6a1b      	ldr	r3, [r3, #32]
 800c8d4:	699a      	ldr	r2, [r3, #24]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a1b      	ldr	r3, [r3, #32]
 800c8da:	695b      	ldr	r3, [r3, #20]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d223      	bcs.n	800c928 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d005      	beq.n	800c8f4 <lwip_netconn_do_writemore+0x260>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	2103      	movs	r1, #3
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	7f1b      	ldrb	r3, [r3, #28]
 800c8f8:	f043 0310 	orr.w	r3, r3, #16
 800c8fc:	b2da      	uxtb	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	771a      	strb	r2, [r3, #28]
 800c902:	e028      	b.n	800c956 <lwip_netconn_do_writemore+0x2c2>
 800c904:	08019b7c 	.word	0x08019b7c
 800c908:	08019cd4 	.word	0x08019cd4
 800c90c:	08019bc0 	.word	0x08019bc0
 800c910:	08019fdc 	.word	0x08019fdc
 800c914:	08019ce4 	.word	0x08019ce4
 800c918:	08019ffc 	.word	0x08019ffc
 800c91c:	0801a014 	.word	0x0801a014
 800c920:	0801a054 	.word	0x0801a054
 800c924:	0801a07c 	.word	0x0801a07c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c930:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c934:	d305      	bcc.n	800c942 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c93e:	2b04      	cmp	r3, #4
 800c940:	d909      	bls.n	800c956 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c946:	2b00      	cmp	r3, #0
 800c948:	d005      	beq.n	800c956 <lwip_netconn_do_writemore+0x2c2>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94e:	2200      	movs	r2, #0
 800c950:	2103      	movs	r1, #3
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800c956:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d11d      	bne.n	800c99a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	699a      	ldr	r2, [r3, #24]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a1b      	ldr	r3, [r3, #32]
 800c968:	695b      	ldr	r3, [r3, #20]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d002      	beq.n	800c974 <lwip_netconn_do_writemore+0x2e0>
 800c96e:	7e3b      	ldrb	r3, [r7, #24]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800c974:	2301      	movs	r3, #1
 800c976:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	4618      	mov	r0, r3
 800c97e:	f007 f995 	bl	8013cac <tcp_output>
 800c982:	4603      	mov	r3, r0
 800c984:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800c986:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c98a:	f113 0f04 	cmn.w	r3, #4
 800c98e:	d12c      	bne.n	800c9ea <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c990:	7b3b      	ldrb	r3, [r7, #12]
 800c992:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c994:	2301      	movs	r3, #1
 800c996:	76fb      	strb	r3, [r7, #27]
 800c998:	e027      	b.n	800c9ea <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800c99a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a2:	d120      	bne.n	800c9e6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f007 f97f 	bl	8013cac <tcp_output>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800c9b2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c9b6:	f113 0f04 	cmn.w	r3, #4
 800c9ba:	d104      	bne.n	800c9c6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c9bc:	7b7b      	ldrb	r3, [r7, #13]
 800c9be:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	76fb      	strb	r3, [r7, #27]
 800c9c4:	e011      	b.n	800c9ea <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800c9c6:	7e3b      	ldrb	r3, [r7, #24]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00e      	beq.n	800c9ea <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6a1b      	ldr	r3, [r3, #32]
 800c9d0:	699b      	ldr	r3, [r3, #24]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d102      	bne.n	800c9dc <lwip_netconn_do_writemore+0x348>
 800c9d6:	f06f 0306 	mvn.w	r3, #6
 800c9da:	e000      	b.n	800c9de <lwip_netconn_do_writemore+0x34a>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	76fb      	strb	r3, [r7, #27]
 800c9e4:	e001      	b.n	800c9ea <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800c9ea:	7efb      	ldrb	r3, [r7, #27]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d015      	beq.n	800ca1c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6a1b      	ldr	r3, [r3, #32]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	330c      	adds	r3, #12
 800c9f8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a1b      	ldr	r3, [r3, #32]
 800c9fe:	7ffa      	ldrb	r2, [r7, #31]
 800ca00:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ca0e:	78fb      	ldrb	r3, [r7, #3]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d006      	beq.n	800ca22 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800ca14:	68b8      	ldr	r0, [r7, #8]
 800ca16:	f00b fb03 	bl	8018020 <sys_sem_signal>
 800ca1a:	e002      	b.n	800ca22 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ca1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca20:	e000      	b.n	800ca24 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3720      	adds	r7, #32
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	785b      	ldrb	r3, [r3, #1]
 800ca3e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d069      	beq.n	800cb1e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800ca54:	2b10      	cmp	r3, #16
 800ca56:	d162      	bne.n	800cb1e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ca5c:	2b03      	cmp	r3, #3
 800ca5e:	d002      	beq.n	800ca66 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ca60:	7afb      	ldrb	r3, [r7, #11]
 800ca62:	2b02      	cmp	r3, #2
 800ca64:	d05b      	beq.n	800cb1e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800ca66:	7afb      	ldrb	r3, [r7, #11]
 800ca68:	2b03      	cmp	r3, #3
 800ca6a:	d103      	bne.n	800ca74 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	22f5      	movs	r2, #245	; 0xf5
 800ca70:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ca72:	e059      	b.n	800cb28 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800ca74:	7afb      	ldrb	r3, [r7, #11]
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d103      	bne.n	800ca82 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	22fb      	movs	r2, #251	; 0xfb
 800ca7e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ca80:	e052      	b.n	800cb28 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	7a1b      	ldrb	r3, [r3, #8]
 800ca86:	f003 0301 	and.w	r3, r3, #1
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d004      	beq.n	800ca98 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7ff fa7a 	bl	800bf8c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	6a1b      	ldr	r3, [r3, #32]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d006      	beq.n	800cab0 <lwip_netconn_do_close+0x84>
 800caa2:	4b23      	ldr	r3, [pc, #140]	; (800cb30 <lwip_netconn_do_close+0x104>)
 800caa4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800caa8:	4922      	ldr	r1, [pc, #136]	; (800cb34 <lwip_netconn_do_close+0x108>)
 800caaa:	4823      	ldr	r0, [pc, #140]	; (800cb38 <lwip_netconn_do_close+0x10c>)
 800caac:	f00b fd84 	bl	80185b8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2204      	movs	r2, #4
 800cab6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2100      	movs	r1, #0
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7ff fade 	bl	800c088 <lwip_netconn_do_close_internal>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d029      	beq.n	800cb26 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	785b      	ldrb	r3, [r3, #1]
 800cad8:	2b04      	cmp	r3, #4
 800cada:	d006      	beq.n	800caea <lwip_netconn_do_close+0xbe>
 800cadc:	4b14      	ldr	r3, [pc, #80]	; (800cb30 <lwip_netconn_do_close+0x104>)
 800cade:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800cae2:	4916      	ldr	r1, [pc, #88]	; (800cb3c <lwip_netconn_do_close+0x110>)
 800cae4:	4814      	ldr	r0, [pc, #80]	; (800cb38 <lwip_netconn_do_close+0x10c>)
 800cae6:	f00b fd67 	bl	80185b8 <iprintf>
        UNLOCK_TCPIP_CORE();
 800caea:	4815      	ldr	r0, [pc, #84]	; (800cb40 <lwip_netconn_do_close+0x114>)
 800caec:	f00b fb09 	bl	8018102 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	330c      	adds	r3, #12
 800caf6:	2100      	movs	r1, #0
 800caf8:	4618      	mov	r0, r3
 800cafa:	f00b fa60 	bl	8017fbe <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800cafe:	4810      	ldr	r0, [pc, #64]	; (800cb40 <lwip_netconn_do_close+0x114>)
 800cb00:	f00b faf0 	bl	80180e4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	785b      	ldrb	r3, [r3, #1]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00b      	beq.n	800cb26 <lwip_netconn_do_close+0xfa>
 800cb0e:	4b08      	ldr	r3, [pc, #32]	; (800cb30 <lwip_netconn_do_close+0x104>)
 800cb10:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800cb14:	4909      	ldr	r1, [pc, #36]	; (800cb3c <lwip_netconn_do_close+0x110>)
 800cb16:	4808      	ldr	r0, [pc, #32]	; (800cb38 <lwip_netconn_do_close+0x10c>)
 800cb18:	f00b fd4e 	bl	80185b8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800cb1c:	e003      	b.n	800cb26 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	22f5      	movs	r2, #245	; 0xf5
 800cb22:	711a      	strb	r2, [r3, #4]
 800cb24:	e000      	b.n	800cb28 <lwip_netconn_do_close+0xfc>
      return;
 800cb26:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	08019b7c 	.word	0x08019b7c
 800cb34:	08019f20 	.word	0x08019f20
 800cb38:	08019bc0 	.word	0x08019bc0
 800cb3c:	08019f3c 	.word	0x08019f3c
 800cb40:	2000a2fc 	.word	0x2000a2fc

0800cb44 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800cb4a:	2006      	movs	r0, #6
 800cb4c:	f000 ff30 	bl	800d9b0 <memp_malloc>
 800cb50:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d004      	beq.n	800cb62 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 800cb58:	2210      	movs	r2, #16
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f00b fc79 	bl	8018454 <memset>
  }
  return buf;
 800cb62:	687b      	ldr	r3, [r7, #4]
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d013      	beq.n	800cba2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00b      	beq.n	800cb9a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f001 fda4 	bl	800e6d4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	605a      	str	r2, [r3, #4]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	685a      	ldr	r2, [r3, #4]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800cb9a:	6879      	ldr	r1, [r7, #4]
 800cb9c:	2006      	movs	r0, #6
 800cb9e:	f000 ff59 	bl	800da54 <memp_free>
  }
}
 800cba2:	bf00      	nop
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
	...

0800cbac <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d108      	bne.n	800cbd2 <netbuf_ref+0x26>
 800cbc0:	4b1c      	ldr	r3, [pc, #112]	; (800cc34 <netbuf_ref+0x88>)
 800cbc2:	2299      	movs	r2, #153	; 0x99
 800cbc4:	491c      	ldr	r1, [pc, #112]	; (800cc38 <netbuf_ref+0x8c>)
 800cbc6:	481d      	ldr	r0, [pc, #116]	; (800cc3c <netbuf_ref+0x90>)
 800cbc8:	f00b fcf6 	bl	80185b8 <iprintf>
 800cbcc:	f06f 030f 	mvn.w	r3, #15
 800cbd0:	e02b      	b.n	800cc2a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d004      	beq.n	800cbe4 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f001 fd78 	bl	800e6d4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800cbe4:	2241      	movs	r2, #65	; 0x41
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	2036      	movs	r0, #54	; 0x36
 800cbea:	f001 fa8f 	bl	800e10c <pbuf_alloc>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d105      	bne.n	800cc08 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800cc02:	f04f 33ff 	mov.w	r3, #4294967295
 800cc06:	e010      	b.n	800cc2a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68ba      	ldr	r2, [r7, #8]
 800cc0e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	88fa      	ldrh	r2, [r7, #6]
 800cc16:	811a      	strh	r2, [r3, #8]
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	6812      	ldr	r2, [r2, #0]
 800cc1c:	891b      	ldrh	r3, [r3, #8]
 800cc1e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3710      	adds	r7, #16
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	0801a0d4 	.word	0x0801a0d4
 800cc38:	0801a18c 	.word	0x0801a18c
 800cc3c:	0801a124 	.word	0x0801a124

0800cc40 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d108      	bne.n	800cc64 <netbuf_data+0x24>
 800cc52:	4b1b      	ldr	r3, [pc, #108]	; (800ccc0 <netbuf_data+0x80>)
 800cc54:	22c6      	movs	r2, #198	; 0xc6
 800cc56:	491b      	ldr	r1, [pc, #108]	; (800ccc4 <netbuf_data+0x84>)
 800cc58:	481b      	ldr	r0, [pc, #108]	; (800ccc8 <netbuf_data+0x88>)
 800cc5a:	f00b fcad 	bl	80185b8 <iprintf>
 800cc5e:	f06f 030f 	mvn.w	r3, #15
 800cc62:	e029      	b.n	800ccb8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d108      	bne.n	800cc7c <netbuf_data+0x3c>
 800cc6a:	4b15      	ldr	r3, [pc, #84]	; (800ccc0 <netbuf_data+0x80>)
 800cc6c:	22c7      	movs	r2, #199	; 0xc7
 800cc6e:	4917      	ldr	r1, [pc, #92]	; (800cccc <netbuf_data+0x8c>)
 800cc70:	4815      	ldr	r0, [pc, #84]	; (800ccc8 <netbuf_data+0x88>)
 800cc72:	f00b fca1 	bl	80185b8 <iprintf>
 800cc76:	f06f 030f 	mvn.w	r3, #15
 800cc7a:	e01d      	b.n	800ccb8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d108      	bne.n	800cc94 <netbuf_data+0x54>
 800cc82:	4b0f      	ldr	r3, [pc, #60]	; (800ccc0 <netbuf_data+0x80>)
 800cc84:	22c8      	movs	r2, #200	; 0xc8
 800cc86:	4912      	ldr	r1, [pc, #72]	; (800ccd0 <netbuf_data+0x90>)
 800cc88:	480f      	ldr	r0, [pc, #60]	; (800ccc8 <netbuf_data+0x88>)
 800cc8a:	f00b fc95 	bl	80185b8 <iprintf>
 800cc8e:	f06f 030f 	mvn.w	r3, #15
 800cc92:	e011      	b.n	800ccb8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d102      	bne.n	800cca2 <netbuf_data+0x62>
    return ERR_BUF;
 800cc9c:	f06f 0301 	mvn.w	r3, #1
 800cca0:	e00a      	b.n	800ccb8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	685a      	ldr	r2, [r3, #4]
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	895a      	ldrh	r2, [r3, #10]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800ccb6:	2300      	movs	r3, #0
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3710      	adds	r7, #16
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	0801a0d4 	.word	0x0801a0d4
 800ccc4:	0801a1dc 	.word	0x0801a1dc
 800ccc8:	0801a124 	.word	0x0801a124
 800cccc:	0801a1f8 	.word	0x0801a1f8
 800ccd0:	0801a218 	.word	0x0801a218

0800ccd4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ccde:	f008 f89d 	bl	8014e1c <sys_timeouts_sleeptime>
 800cce2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccea:	d10b      	bne.n	800cd04 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ccec:	4813      	ldr	r0, [pc, #76]	; (800cd3c <tcpip_timeouts_mbox_fetch+0x68>)
 800ccee:	f00b fa08 	bl	8018102 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	6839      	ldr	r1, [r7, #0]
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f00b f8c0 	bl	8017e7c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ccfc:	480f      	ldr	r0, [pc, #60]	; (800cd3c <tcpip_timeouts_mbox_fetch+0x68>)
 800ccfe:	f00b f9f1 	bl	80180e4 <sys_mutex_lock>
    return;
 800cd02:	e018      	b.n	800cd36 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d102      	bne.n	800cd10 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cd0a:	f008 f84d 	bl	8014da8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cd0e:	e7e6      	b.n	800ccde <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cd10:	480a      	ldr	r0, [pc, #40]	; (800cd3c <tcpip_timeouts_mbox_fetch+0x68>)
 800cd12:	f00b f9f6 	bl	8018102 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	6839      	ldr	r1, [r7, #0]
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f00b f8ae 	bl	8017e7c <sys_arch_mbox_fetch>
 800cd20:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cd22:	4806      	ldr	r0, [pc, #24]	; (800cd3c <tcpip_timeouts_mbox_fetch+0x68>)
 800cd24:	f00b f9de 	bl	80180e4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd2e:	d102      	bne.n	800cd36 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cd30:	f008 f83a 	bl	8014da8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cd34:	e7d3      	b.n	800ccde <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cd36:	3710      	adds	r7, #16
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	2000a2fc 	.word	0x2000a2fc

0800cd40 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cd48:	4810      	ldr	r0, [pc, #64]	; (800cd8c <tcpip_thread+0x4c>)
 800cd4a:	f00b f9cb 	bl	80180e4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cd4e:	4b10      	ldr	r3, [pc, #64]	; (800cd90 <tcpip_thread+0x50>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d005      	beq.n	800cd62 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cd56:	4b0e      	ldr	r3, [pc, #56]	; (800cd90 <tcpip_thread+0x50>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a0e      	ldr	r2, [pc, #56]	; (800cd94 <tcpip_thread+0x54>)
 800cd5c:	6812      	ldr	r2, [r2, #0]
 800cd5e:	4610      	mov	r0, r2
 800cd60:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cd62:	f107 030c 	add.w	r3, r7, #12
 800cd66:	4619      	mov	r1, r3
 800cd68:	480b      	ldr	r0, [pc, #44]	; (800cd98 <tcpip_thread+0x58>)
 800cd6a:	f7ff ffb3 	bl	800ccd4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d106      	bne.n	800cd82 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cd74:	4b09      	ldr	r3, [pc, #36]	; (800cd9c <tcpip_thread+0x5c>)
 800cd76:	2291      	movs	r2, #145	; 0x91
 800cd78:	4909      	ldr	r1, [pc, #36]	; (800cda0 <tcpip_thread+0x60>)
 800cd7a:	480a      	ldr	r0, [pc, #40]	; (800cda4 <tcpip_thread+0x64>)
 800cd7c:	f00b fc1c 	bl	80185b8 <iprintf>
      continue;
 800cd80:	e003      	b.n	800cd8a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	4618      	mov	r0, r3
 800cd86:	f000 f80f 	bl	800cda8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cd8a:	e7ea      	b.n	800cd62 <tcpip_thread+0x22>
 800cd8c:	2000a2fc 	.word	0x2000a2fc
 800cd90:	20006940 	.word	0x20006940
 800cd94:	20006944 	.word	0x20006944
 800cd98:	20006948 	.word	0x20006948
 800cd9c:	0801a26c 	.word	0x0801a26c
 800cda0:	0801a29c 	.word	0x0801a29c
 800cda4:	0801a2bc 	.word	0x0801a2bc

0800cda8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	2b02      	cmp	r3, #2
 800cdb6:	d026      	beq.n	800ce06 <tcpip_thread_handle_msg+0x5e>
 800cdb8:	2b02      	cmp	r3, #2
 800cdba:	dc2b      	bgt.n	800ce14 <tcpip_thread_handle_msg+0x6c>
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d002      	beq.n	800cdc6 <tcpip_thread_handle_msg+0x1e>
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d015      	beq.n	800cdf0 <tcpip_thread_handle_msg+0x48>
 800cdc4:	e026      	b.n	800ce14 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	6850      	ldr	r0, [r2, #4]
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	6892      	ldr	r2, [r2, #8]
 800cdd2:	4611      	mov	r1, r2
 800cdd4:	4798      	blx	r3
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d004      	beq.n	800cde6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f001 fc77 	bl	800e6d4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cde6:	6879      	ldr	r1, [r7, #4]
 800cde8:	2009      	movs	r0, #9
 800cdea:	f000 fe33 	bl	800da54 <memp_free>
      break;
 800cdee:	e018      	b.n	800ce22 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	6892      	ldr	r2, [r2, #8]
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	2008      	movs	r0, #8
 800ce00:	f000 fe28 	bl	800da54 <memp_free>
      break;
 800ce04:	e00d      	b.n	800ce22 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	6892      	ldr	r2, [r2, #8]
 800ce0e:	4610      	mov	r0, r2
 800ce10:	4798      	blx	r3
      break;
 800ce12:	e006      	b.n	800ce22 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ce14:	4b05      	ldr	r3, [pc, #20]	; (800ce2c <tcpip_thread_handle_msg+0x84>)
 800ce16:	22cf      	movs	r2, #207	; 0xcf
 800ce18:	4905      	ldr	r1, [pc, #20]	; (800ce30 <tcpip_thread_handle_msg+0x88>)
 800ce1a:	4806      	ldr	r0, [pc, #24]	; (800ce34 <tcpip_thread_handle_msg+0x8c>)
 800ce1c:	f00b fbcc 	bl	80185b8 <iprintf>
      break;
 800ce20:	bf00      	nop
  }
}
 800ce22:	bf00      	nop
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	0801a26c 	.word	0x0801a26c
 800ce30:	0801a29c 	.word	0x0801a29c
 800ce34:	0801a2bc 	.word	0x0801a2bc

0800ce38 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ce44:	481a      	ldr	r0, [pc, #104]	; (800ceb0 <tcpip_inpkt+0x78>)
 800ce46:	f00b f874 	bl	8017f32 <sys_mbox_valid>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d105      	bne.n	800ce5c <tcpip_inpkt+0x24>
 800ce50:	4b18      	ldr	r3, [pc, #96]	; (800ceb4 <tcpip_inpkt+0x7c>)
 800ce52:	22fc      	movs	r2, #252	; 0xfc
 800ce54:	4918      	ldr	r1, [pc, #96]	; (800ceb8 <tcpip_inpkt+0x80>)
 800ce56:	4819      	ldr	r0, [pc, #100]	; (800cebc <tcpip_inpkt+0x84>)
 800ce58:	f00b fbae 	bl	80185b8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ce5c:	2009      	movs	r0, #9
 800ce5e:	f000 fda7 	bl	800d9b0 <memp_malloc>
 800ce62:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d102      	bne.n	800ce70 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ce6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce6e:	e01a      	b.n	800cea6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	2200      	movs	r2, #0
 800ce74:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	68ba      	ldr	r2, [r7, #8]
 800ce80:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ce88:	6979      	ldr	r1, [r7, #20]
 800ce8a:	4809      	ldr	r0, [pc, #36]	; (800ceb0 <tcpip_inpkt+0x78>)
 800ce8c:	f00a ffdc 	bl	8017e48 <sys_mbox_trypost>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d006      	beq.n	800cea4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ce96:	6979      	ldr	r1, [r7, #20]
 800ce98:	2009      	movs	r0, #9
 800ce9a:	f000 fddb 	bl	800da54 <memp_free>
    return ERR_MEM;
 800ce9e:	f04f 33ff 	mov.w	r3, #4294967295
 800cea2:	e000      	b.n	800cea6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cea4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3718      	adds	r7, #24
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	20006948 	.word	0x20006948
 800ceb4:	0801a26c 	.word	0x0801a26c
 800ceb8:	0801a2e4 	.word	0x0801a2e4
 800cebc:	0801a2bc 	.word	0x0801a2bc

0800cec0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ced0:	f003 0318 	and.w	r3, r3, #24
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d006      	beq.n	800cee6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ced8:	4a08      	ldr	r2, [pc, #32]	; (800cefc <tcpip_input+0x3c>)
 800ceda:	6839      	ldr	r1, [r7, #0]
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff ffab 	bl	800ce38 <tcpip_inpkt>
 800cee2:	4603      	mov	r3, r0
 800cee4:	e005      	b.n	800cef2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800cee6:	4a06      	ldr	r2, [pc, #24]	; (800cf00 <tcpip_input+0x40>)
 800cee8:	6839      	ldr	r1, [r7, #0]
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f7ff ffa4 	bl	800ce38 <tcpip_inpkt>
 800cef0:	4603      	mov	r3, r0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3708      	adds	r7, #8
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	08017c35 	.word	0x08017c35
 800cf00:	08016b49 	.word	0x08016b49

0800cf04 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cf0e:	4819      	ldr	r0, [pc, #100]	; (800cf74 <tcpip_try_callback+0x70>)
 800cf10:	f00b f80f 	bl	8017f32 <sys_mbox_valid>
 800cf14:	4603      	mov	r3, r0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d106      	bne.n	800cf28 <tcpip_try_callback+0x24>
 800cf1a:	4b17      	ldr	r3, [pc, #92]	; (800cf78 <tcpip_try_callback+0x74>)
 800cf1c:	f240 125d 	movw	r2, #349	; 0x15d
 800cf20:	4916      	ldr	r1, [pc, #88]	; (800cf7c <tcpip_try_callback+0x78>)
 800cf22:	4817      	ldr	r0, [pc, #92]	; (800cf80 <tcpip_try_callback+0x7c>)
 800cf24:	f00b fb48 	bl	80185b8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800cf28:	2008      	movs	r0, #8
 800cf2a:	f000 fd41 	bl	800d9b0 <memp_malloc>
 800cf2e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d102      	bne.n	800cf3c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800cf36:	f04f 33ff 	mov.w	r3, #4294967295
 800cf3a:	e017      	b.n	800cf6c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	683a      	ldr	r2, [r7, #0]
 800cf4c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cf4e:	68f9      	ldr	r1, [r7, #12]
 800cf50:	4808      	ldr	r0, [pc, #32]	; (800cf74 <tcpip_try_callback+0x70>)
 800cf52:	f00a ff79 	bl	8017e48 <sys_mbox_trypost>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d006      	beq.n	800cf6a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800cf5c:	68f9      	ldr	r1, [r7, #12]
 800cf5e:	2008      	movs	r0, #8
 800cf60:	f000 fd78 	bl	800da54 <memp_free>
    return ERR_MEM;
 800cf64:	f04f 33ff 	mov.w	r3, #4294967295
 800cf68:	e000      	b.n	800cf6c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800cf6a:	2300      	movs	r3, #0
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	20006948 	.word	0x20006948
 800cf78:	0801a26c 	.word	0x0801a26c
 800cf7c:	0801a2e4 	.word	0x0801a2e4
 800cf80:	0801a2bc 	.word	0x0801a2bc

0800cf84 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800cf90:	4806      	ldr	r0, [pc, #24]	; (800cfac <tcpip_send_msg_wait_sem+0x28>)
 800cf92:	f00b f8a7 	bl	80180e4 <sys_mutex_lock>
  fn(apimsg);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	68b8      	ldr	r0, [r7, #8]
 800cf9a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800cf9c:	4803      	ldr	r0, [pc, #12]	; (800cfac <tcpip_send_msg_wait_sem+0x28>)
 800cf9e:	f00b f8b0 	bl	8018102 <sys_mutex_unlock>
  return ERR_OK;
 800cfa2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	2000a2fc 	.word	0x2000a2fc

0800cfb0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af02      	add	r7, sp, #8
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800cfba:	f000 f871 	bl	800d0a0 <lwip_init>

  tcpip_init_done = initfunc;
 800cfbe:	4a17      	ldr	r2, [pc, #92]	; (800d01c <tcpip_init+0x6c>)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800cfc4:	4a16      	ldr	r2, [pc, #88]	; (800d020 <tcpip_init+0x70>)
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800cfca:	2106      	movs	r1, #6
 800cfcc:	4815      	ldr	r0, [pc, #84]	; (800d024 <tcpip_init+0x74>)
 800cfce:	f00a ff07 	bl	8017de0 <sys_mbox_new>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d006      	beq.n	800cfe6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800cfd8:	4b13      	ldr	r3, [pc, #76]	; (800d028 <tcpip_init+0x78>)
 800cfda:	f240 2261 	movw	r2, #609	; 0x261
 800cfde:	4913      	ldr	r1, [pc, #76]	; (800d02c <tcpip_init+0x7c>)
 800cfe0:	4813      	ldr	r0, [pc, #76]	; (800d030 <tcpip_init+0x80>)
 800cfe2:	f00b fae9 	bl	80185b8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800cfe6:	4813      	ldr	r0, [pc, #76]	; (800d034 <tcpip_init+0x84>)
 800cfe8:	f00b f860 	bl	80180ac <sys_mutex_new>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d006      	beq.n	800d000 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800cff2:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <tcpip_init+0x78>)
 800cff4:	f240 2265 	movw	r2, #613	; 0x265
 800cff8:	490f      	ldr	r1, [pc, #60]	; (800d038 <tcpip_init+0x88>)
 800cffa:	480d      	ldr	r0, [pc, #52]	; (800d030 <tcpip_init+0x80>)
 800cffc:	f00b fadc 	bl	80185b8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d000:	2300      	movs	r3, #0
 800d002:	9300      	str	r3, [sp, #0]
 800d004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d008:	2200      	movs	r2, #0
 800d00a:	490c      	ldr	r1, [pc, #48]	; (800d03c <tcpip_init+0x8c>)
 800d00c:	480c      	ldr	r0, [pc, #48]	; (800d040 <tcpip_init+0x90>)
 800d00e:	f00b f885 	bl	801811c <sys_thread_new>
}
 800d012:	bf00      	nop
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	20006940 	.word	0x20006940
 800d020:	20006944 	.word	0x20006944
 800d024:	20006948 	.word	0x20006948
 800d028:	0801a26c 	.word	0x0801a26c
 800d02c:	0801a2f4 	.word	0x0801a2f4
 800d030:	0801a2bc 	.word	0x0801a2bc
 800d034:	2000a2fc 	.word	0x2000a2fc
 800d038:	0801a318 	.word	0x0801a318
 800d03c:	0800cd41 	.word	0x0800cd41
 800d040:	0801a33c 	.word	0x0801a33c

0800d044 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
 800d04a:	4603      	mov	r3, r0
 800d04c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d04e:	88fb      	ldrh	r3, [r7, #6]
 800d050:	021b      	lsls	r3, r3, #8
 800d052:	b21a      	sxth	r2, r3
 800d054:	88fb      	ldrh	r3, [r7, #6]
 800d056:	0a1b      	lsrs	r3, r3, #8
 800d058:	b29b      	uxth	r3, r3
 800d05a:	b21b      	sxth	r3, r3
 800d05c:	4313      	orrs	r3, r2
 800d05e:	b21b      	sxth	r3, r3
 800d060:	b29b      	uxth	r3, r3
}
 800d062:	4618      	mov	r0, r3
 800d064:	370c      	adds	r7, #12
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr

0800d06e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d06e:	b480      	push	{r7}
 800d070:	b083      	sub	sp, #12
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	061a      	lsls	r2, r3, #24
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	021b      	lsls	r3, r3, #8
 800d07e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d082:	431a      	orrs	r2, r3
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	0a1b      	lsrs	r3, r3, #8
 800d088:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d08c:	431a      	orrs	r2, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	0e1b      	lsrs	r3, r3, #24
 800d092:	4313      	orrs	r3, r2
}
 800d094:	4618      	mov	r0, r3
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d0aa:	f00a fff1 	bl	8018090 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d0ae:	f000 f8d5 	bl	800d25c <mem_init>
  memp_init();
 800d0b2:	f000 fc31 	bl	800d918 <memp_init>
  pbuf_init();
  netif_init();
 800d0b6:	f000 fcf7 	bl	800daa8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d0ba:	f007 fee7 	bl	8014e8c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d0be:	f001 fdb3 	bl	800ec28 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d0c2:	f007 fe29 	bl	8014d18 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d0c6:	bf00      	nop
 800d0c8:	3708      	adds	r7, #8
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
	...

0800d0d0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d0da:	4b05      	ldr	r3, [pc, #20]	; (800d0f0 <ptr_to_mem+0x20>)
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	88fb      	ldrh	r3, [r7, #6]
 800d0e0:	4413      	add	r3, r2
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	370c      	adds	r7, #12
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	2000694c 	.word	0x2000694c

0800d0f4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d0fc:	4b05      	ldr	r3, [pc, #20]	; (800d114 <mem_to_ptr+0x20>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	1ad3      	subs	r3, r2, r3
 800d104:	b29b      	uxth	r3, r3
}
 800d106:	4618      	mov	r0, r3
 800d108:	370c      	adds	r7, #12
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	2000694c 	.word	0x2000694c

0800d118 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d118:	b590      	push	{r4, r7, lr}
 800d11a:	b085      	sub	sp, #20
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d120:	4b45      	ldr	r3, [pc, #276]	; (800d238 <plug_holes+0x120>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	429a      	cmp	r2, r3
 800d128:	d206      	bcs.n	800d138 <plug_holes+0x20>
 800d12a:	4b44      	ldr	r3, [pc, #272]	; (800d23c <plug_holes+0x124>)
 800d12c:	f240 12df 	movw	r2, #479	; 0x1df
 800d130:	4943      	ldr	r1, [pc, #268]	; (800d240 <plug_holes+0x128>)
 800d132:	4844      	ldr	r0, [pc, #272]	; (800d244 <plug_holes+0x12c>)
 800d134:	f00b fa40 	bl	80185b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d138:	4b43      	ldr	r3, [pc, #268]	; (800d248 <plug_holes+0x130>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d306      	bcc.n	800d150 <plug_holes+0x38>
 800d142:	4b3e      	ldr	r3, [pc, #248]	; (800d23c <plug_holes+0x124>)
 800d144:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d148:	4940      	ldr	r1, [pc, #256]	; (800d24c <plug_holes+0x134>)
 800d14a:	483e      	ldr	r0, [pc, #248]	; (800d244 <plug_holes+0x12c>)
 800d14c:	f00b fa34 	bl	80185b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	791b      	ldrb	r3, [r3, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d006      	beq.n	800d166 <plug_holes+0x4e>
 800d158:	4b38      	ldr	r3, [pc, #224]	; (800d23c <plug_holes+0x124>)
 800d15a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d15e:	493c      	ldr	r1, [pc, #240]	; (800d250 <plug_holes+0x138>)
 800d160:	4838      	ldr	r0, [pc, #224]	; (800d244 <plug_holes+0x12c>)
 800d162:	f00b fa29 	bl	80185b8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	881b      	ldrh	r3, [r3, #0]
 800d16a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d16e:	d906      	bls.n	800d17e <plug_holes+0x66>
 800d170:	4b32      	ldr	r3, [pc, #200]	; (800d23c <plug_holes+0x124>)
 800d172:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d176:	4937      	ldr	r1, [pc, #220]	; (800d254 <plug_holes+0x13c>)
 800d178:	4832      	ldr	r0, [pc, #200]	; (800d244 <plug_holes+0x12c>)
 800d17a:	f00b fa1d 	bl	80185b8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	881b      	ldrh	r3, [r3, #0]
 800d182:	4618      	mov	r0, r3
 800d184:	f7ff ffa4 	bl	800d0d0 <ptr_to_mem>
 800d188:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d024      	beq.n	800d1dc <plug_holes+0xc4>
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	791b      	ldrb	r3, [r3, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d120      	bne.n	800d1dc <plug_holes+0xc4>
 800d19a:	4b2b      	ldr	r3, [pc, #172]	; (800d248 <plug_holes+0x130>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d01b      	beq.n	800d1dc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d1a4:	4b2c      	ldr	r3, [pc, #176]	; (800d258 <plug_holes+0x140>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	68fa      	ldr	r2, [r7, #12]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d102      	bne.n	800d1b4 <plug_holes+0x9c>
      lfree = mem;
 800d1ae:	4a2a      	ldr	r2, [pc, #168]	; (800d258 <plug_holes+0x140>)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	881a      	ldrh	r2, [r3, #0]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d1c4:	d00a      	beq.n	800d1dc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	881b      	ldrh	r3, [r3, #0]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7ff ff80 	bl	800d0d0 <ptr_to_mem>
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7ff ff8e 	bl	800d0f4 <mem_to_ptr>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	885b      	ldrh	r3, [r3, #2]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7ff ff75 	bl	800d0d0 <ptr_to_mem>
 800d1e6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d01f      	beq.n	800d230 <plug_holes+0x118>
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	791b      	ldrb	r3, [r3, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d11b      	bne.n	800d230 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d1f8:	4b17      	ldr	r3, [pc, #92]	; (800d258 <plug_holes+0x140>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d102      	bne.n	800d208 <plug_holes+0xf0>
      lfree = pmem;
 800d202:	4a15      	ldr	r2, [pc, #84]	; (800d258 <plug_holes+0x140>)
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	881a      	ldrh	r2, [r3, #0]
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	881b      	ldrh	r3, [r3, #0]
 800d214:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d218:	d00a      	beq.n	800d230 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	881b      	ldrh	r3, [r3, #0]
 800d21e:	4618      	mov	r0, r3
 800d220:	f7ff ff56 	bl	800d0d0 <ptr_to_mem>
 800d224:	4604      	mov	r4, r0
 800d226:	68b8      	ldr	r0, [r7, #8]
 800d228:	f7ff ff64 	bl	800d0f4 <mem_to_ptr>
 800d22c:	4603      	mov	r3, r0
 800d22e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d230:	bf00      	nop
 800d232:	3714      	adds	r7, #20
 800d234:	46bd      	mov	sp, r7
 800d236:	bd90      	pop	{r4, r7, pc}
 800d238:	2000694c 	.word	0x2000694c
 800d23c:	0801a34c 	.word	0x0801a34c
 800d240:	0801a37c 	.word	0x0801a37c
 800d244:	0801a394 	.word	0x0801a394
 800d248:	20006950 	.word	0x20006950
 800d24c:	0801a3bc 	.word	0x0801a3bc
 800d250:	0801a3d8 	.word	0x0801a3d8
 800d254:	0801a3f4 	.word	0x0801a3f4
 800d258:	20006958 	.word	0x20006958

0800d25c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d262:	4b1f      	ldr	r3, [pc, #124]	; (800d2e0 <mem_init+0x84>)
 800d264:	3303      	adds	r3, #3
 800d266:	f023 0303 	bic.w	r3, r3, #3
 800d26a:	461a      	mov	r2, r3
 800d26c:	4b1d      	ldr	r3, [pc, #116]	; (800d2e4 <mem_init+0x88>)
 800d26e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d270:	4b1c      	ldr	r3, [pc, #112]	; (800d2e4 <mem_init+0x88>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d27c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2200      	movs	r2, #0
 800d288:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d28a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d28e:	f7ff ff1f 	bl	800d0d0 <ptr_to_mem>
 800d292:	4603      	mov	r3, r0
 800d294:	4a14      	ldr	r2, [pc, #80]	; (800d2e8 <mem_init+0x8c>)
 800d296:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d298:	4b13      	ldr	r3, [pc, #76]	; (800d2e8 <mem_init+0x8c>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2201      	movs	r2, #1
 800d29e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d2a0:	4b11      	ldr	r3, [pc, #68]	; (800d2e8 <mem_init+0x8c>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d2a8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d2aa:	4b0f      	ldr	r3, [pc, #60]	; (800d2e8 <mem_init+0x8c>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d2b2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d2b4:	4b0b      	ldr	r3, [pc, #44]	; (800d2e4 <mem_init+0x88>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a0c      	ldr	r2, [pc, #48]	; (800d2ec <mem_init+0x90>)
 800d2ba:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d2bc:	480c      	ldr	r0, [pc, #48]	; (800d2f0 <mem_init+0x94>)
 800d2be:	f00a fef5 	bl	80180ac <sys_mutex_new>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d006      	beq.n	800d2d6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d2c8:	4b0a      	ldr	r3, [pc, #40]	; (800d2f4 <mem_init+0x98>)
 800d2ca:	f240 221f 	movw	r2, #543	; 0x21f
 800d2ce:	490a      	ldr	r1, [pc, #40]	; (800d2f8 <mem_init+0x9c>)
 800d2d0:	480a      	ldr	r0, [pc, #40]	; (800d2fc <mem_init+0xa0>)
 800d2d2:	f00b f971 	bl	80185b8 <iprintf>
  }
}
 800d2d6:	bf00      	nop
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	2000a318 	.word	0x2000a318
 800d2e4:	2000694c 	.word	0x2000694c
 800d2e8:	20006950 	.word	0x20006950
 800d2ec:	20006958 	.word	0x20006958
 800d2f0:	20006954 	.word	0x20006954
 800d2f4:	0801a34c 	.word	0x0801a34c
 800d2f8:	0801a420 	.word	0x0801a420
 800d2fc:	0801a394 	.word	0x0801a394

0800d300 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b086      	sub	sp, #24
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7ff fef3 	bl	800d0f4 <mem_to_ptr>
 800d30e:	4603      	mov	r3, r0
 800d310:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	881b      	ldrh	r3, [r3, #0]
 800d316:	4618      	mov	r0, r3
 800d318:	f7ff feda 	bl	800d0d0 <ptr_to_mem>
 800d31c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	885b      	ldrh	r3, [r3, #2]
 800d322:	4618      	mov	r0, r3
 800d324:	f7ff fed4 	bl	800d0d0 <ptr_to_mem>
 800d328:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	881b      	ldrh	r3, [r3, #0]
 800d32e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d332:	d818      	bhi.n	800d366 <mem_link_valid+0x66>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	885b      	ldrh	r3, [r3, #2]
 800d338:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d33c:	d813      	bhi.n	800d366 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d342:	8afa      	ldrh	r2, [r7, #22]
 800d344:	429a      	cmp	r2, r3
 800d346:	d004      	beq.n	800d352 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	881b      	ldrh	r3, [r3, #0]
 800d34c:	8afa      	ldrh	r2, [r7, #22]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d109      	bne.n	800d366 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d352:	4b08      	ldr	r3, [pc, #32]	; (800d374 <mem_link_valid+0x74>)
 800d354:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d356:	693a      	ldr	r2, [r7, #16]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d006      	beq.n	800d36a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	885b      	ldrh	r3, [r3, #2]
 800d360:	8afa      	ldrh	r2, [r7, #22]
 800d362:	429a      	cmp	r2, r3
 800d364:	d001      	beq.n	800d36a <mem_link_valid+0x6a>
    return 0;
 800d366:	2300      	movs	r3, #0
 800d368:	e000      	b.n	800d36c <mem_link_valid+0x6c>
  }
  return 1;
 800d36a:	2301      	movs	r3, #1
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3718      	adds	r7, #24
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	20006950 	.word	0x20006950

0800d378 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b088      	sub	sp, #32
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d070      	beq.n	800d468 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f003 0303 	and.w	r3, r3, #3
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d00d      	beq.n	800d3ac <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d390:	4b37      	ldr	r3, [pc, #220]	; (800d470 <mem_free+0xf8>)
 800d392:	f240 2273 	movw	r2, #627	; 0x273
 800d396:	4937      	ldr	r1, [pc, #220]	; (800d474 <mem_free+0xfc>)
 800d398:	4837      	ldr	r0, [pc, #220]	; (800d478 <mem_free+0x100>)
 800d39a:	f00b f90d 	bl	80185b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d39e:	f00a fee3 	bl	8018168 <sys_arch_protect>
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f00a feed 	bl	8018184 <sys_arch_unprotect>
    return;
 800d3aa:	e05e      	b.n	800d46a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	3b08      	subs	r3, #8
 800d3b0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d3b2:	4b32      	ldr	r3, [pc, #200]	; (800d47c <mem_free+0x104>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	69fa      	ldr	r2, [r7, #28]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d306      	bcc.n	800d3ca <mem_free+0x52>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f103 020c 	add.w	r2, r3, #12
 800d3c2:	4b2f      	ldr	r3, [pc, #188]	; (800d480 <mem_free+0x108>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d90d      	bls.n	800d3e6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d3ca:	4b29      	ldr	r3, [pc, #164]	; (800d470 <mem_free+0xf8>)
 800d3cc:	f240 227f 	movw	r2, #639	; 0x27f
 800d3d0:	492c      	ldr	r1, [pc, #176]	; (800d484 <mem_free+0x10c>)
 800d3d2:	4829      	ldr	r0, [pc, #164]	; (800d478 <mem_free+0x100>)
 800d3d4:	f00b f8f0 	bl	80185b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d3d8:	f00a fec6 	bl	8018168 <sys_arch_protect>
 800d3dc:	6138      	str	r0, [r7, #16]
 800d3de:	6938      	ldr	r0, [r7, #16]
 800d3e0:	f00a fed0 	bl	8018184 <sys_arch_unprotect>
    return;
 800d3e4:	e041      	b.n	800d46a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d3e6:	4828      	ldr	r0, [pc, #160]	; (800d488 <mem_free+0x110>)
 800d3e8:	f00a fe7c 	bl	80180e4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	791b      	ldrb	r3, [r3, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d110      	bne.n	800d416 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d3f4:	4b1e      	ldr	r3, [pc, #120]	; (800d470 <mem_free+0xf8>)
 800d3f6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d3fa:	4924      	ldr	r1, [pc, #144]	; (800d48c <mem_free+0x114>)
 800d3fc:	481e      	ldr	r0, [pc, #120]	; (800d478 <mem_free+0x100>)
 800d3fe:	f00b f8db 	bl	80185b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d402:	4821      	ldr	r0, [pc, #132]	; (800d488 <mem_free+0x110>)
 800d404:	f00a fe7d 	bl	8018102 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d408:	f00a feae 	bl	8018168 <sys_arch_protect>
 800d40c:	6178      	str	r0, [r7, #20]
 800d40e:	6978      	ldr	r0, [r7, #20]
 800d410:	f00a feb8 	bl	8018184 <sys_arch_unprotect>
    return;
 800d414:	e029      	b.n	800d46a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d416:	69f8      	ldr	r0, [r7, #28]
 800d418:	f7ff ff72 	bl	800d300 <mem_link_valid>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d110      	bne.n	800d444 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d422:	4b13      	ldr	r3, [pc, #76]	; (800d470 <mem_free+0xf8>)
 800d424:	f240 2295 	movw	r2, #661	; 0x295
 800d428:	4919      	ldr	r1, [pc, #100]	; (800d490 <mem_free+0x118>)
 800d42a:	4813      	ldr	r0, [pc, #76]	; (800d478 <mem_free+0x100>)
 800d42c:	f00b f8c4 	bl	80185b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d430:	4815      	ldr	r0, [pc, #84]	; (800d488 <mem_free+0x110>)
 800d432:	f00a fe66 	bl	8018102 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d436:	f00a fe97 	bl	8018168 <sys_arch_protect>
 800d43a:	61b8      	str	r0, [r7, #24]
 800d43c:	69b8      	ldr	r0, [r7, #24]
 800d43e:	f00a fea1 	bl	8018184 <sys_arch_unprotect>
    return;
 800d442:	e012      	b.n	800d46a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	2200      	movs	r2, #0
 800d448:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d44a:	4b12      	ldr	r3, [pc, #72]	; (800d494 <mem_free+0x11c>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	69fa      	ldr	r2, [r7, #28]
 800d450:	429a      	cmp	r2, r3
 800d452:	d202      	bcs.n	800d45a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d454:	4a0f      	ldr	r2, [pc, #60]	; (800d494 <mem_free+0x11c>)
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d45a:	69f8      	ldr	r0, [r7, #28]
 800d45c:	f7ff fe5c 	bl	800d118 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d460:	4809      	ldr	r0, [pc, #36]	; (800d488 <mem_free+0x110>)
 800d462:	f00a fe4e 	bl	8018102 <sys_mutex_unlock>
 800d466:	e000      	b.n	800d46a <mem_free+0xf2>
    return;
 800d468:	bf00      	nop
}
 800d46a:	3720      	adds	r7, #32
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	0801a34c 	.word	0x0801a34c
 800d474:	0801a43c 	.word	0x0801a43c
 800d478:	0801a394 	.word	0x0801a394
 800d47c:	2000694c 	.word	0x2000694c
 800d480:	20006950 	.word	0x20006950
 800d484:	0801a460 	.word	0x0801a460
 800d488:	20006954 	.word	0x20006954
 800d48c:	0801a47c 	.word	0x0801a47c
 800d490:	0801a4a4 	.word	0x0801a4a4
 800d494:	20006958 	.word	0x20006958

0800d498 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b088      	sub	sp, #32
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d4a4:	887b      	ldrh	r3, [r7, #2]
 800d4a6:	3303      	adds	r3, #3
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	f023 0303 	bic.w	r3, r3, #3
 800d4ae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d4b0:	8bfb      	ldrh	r3, [r7, #30]
 800d4b2:	2b0b      	cmp	r3, #11
 800d4b4:	d801      	bhi.n	800d4ba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d4b6:	230c      	movs	r3, #12
 800d4b8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d4ba:	8bfb      	ldrh	r3, [r7, #30]
 800d4bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d4c0:	d803      	bhi.n	800d4ca <mem_trim+0x32>
 800d4c2:	8bfa      	ldrh	r2, [r7, #30]
 800d4c4:	887b      	ldrh	r3, [r7, #2]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d201      	bcs.n	800d4ce <mem_trim+0x36>
    return NULL;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	e0d8      	b.n	800d680 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d4ce:	4b6e      	ldr	r3, [pc, #440]	; (800d688 <mem_trim+0x1f0>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d304      	bcc.n	800d4e2 <mem_trim+0x4a>
 800d4d8:	4b6c      	ldr	r3, [pc, #432]	; (800d68c <mem_trim+0x1f4>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d306      	bcc.n	800d4f0 <mem_trim+0x58>
 800d4e2:	4b6b      	ldr	r3, [pc, #428]	; (800d690 <mem_trim+0x1f8>)
 800d4e4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d4e8:	496a      	ldr	r1, [pc, #424]	; (800d694 <mem_trim+0x1fc>)
 800d4ea:	486b      	ldr	r0, [pc, #428]	; (800d698 <mem_trim+0x200>)
 800d4ec:	f00b f864 	bl	80185b8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d4f0:	4b65      	ldr	r3, [pc, #404]	; (800d688 <mem_trim+0x1f0>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d304      	bcc.n	800d504 <mem_trim+0x6c>
 800d4fa:	4b64      	ldr	r3, [pc, #400]	; (800d68c <mem_trim+0x1f4>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	429a      	cmp	r2, r3
 800d502:	d307      	bcc.n	800d514 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d504:	f00a fe30 	bl	8018168 <sys_arch_protect>
 800d508:	60b8      	str	r0, [r7, #8]
 800d50a:	68b8      	ldr	r0, [r7, #8]
 800d50c:	f00a fe3a 	bl	8018184 <sys_arch_unprotect>
    return rmem;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	e0b5      	b.n	800d680 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	3b08      	subs	r3, #8
 800d518:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d51a:	69b8      	ldr	r0, [r7, #24]
 800d51c:	f7ff fdea 	bl	800d0f4 <mem_to_ptr>
 800d520:	4603      	mov	r3, r0
 800d522:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	881a      	ldrh	r2, [r3, #0]
 800d528:	8afb      	ldrh	r3, [r7, #22]
 800d52a:	1ad3      	subs	r3, r2, r3
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	3b08      	subs	r3, #8
 800d530:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d532:	8bfa      	ldrh	r2, [r7, #30]
 800d534:	8abb      	ldrh	r3, [r7, #20]
 800d536:	429a      	cmp	r2, r3
 800d538:	d906      	bls.n	800d548 <mem_trim+0xb0>
 800d53a:	4b55      	ldr	r3, [pc, #340]	; (800d690 <mem_trim+0x1f8>)
 800d53c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d540:	4956      	ldr	r1, [pc, #344]	; (800d69c <mem_trim+0x204>)
 800d542:	4855      	ldr	r0, [pc, #340]	; (800d698 <mem_trim+0x200>)
 800d544:	f00b f838 	bl	80185b8 <iprintf>
  if (newsize > size) {
 800d548:	8bfa      	ldrh	r2, [r7, #30]
 800d54a:	8abb      	ldrh	r3, [r7, #20]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d901      	bls.n	800d554 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d550:	2300      	movs	r3, #0
 800d552:	e095      	b.n	800d680 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d554:	8bfa      	ldrh	r2, [r7, #30]
 800d556:	8abb      	ldrh	r3, [r7, #20]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d101      	bne.n	800d560 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	e08f      	b.n	800d680 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d560:	484f      	ldr	r0, [pc, #316]	; (800d6a0 <mem_trim+0x208>)
 800d562:	f00a fdbf 	bl	80180e4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	881b      	ldrh	r3, [r3, #0]
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7ff fdb0 	bl	800d0d0 <ptr_to_mem>
 800d570:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	791b      	ldrb	r3, [r3, #4]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d13f      	bne.n	800d5fa <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	881b      	ldrh	r3, [r3, #0]
 800d57e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d582:	d106      	bne.n	800d592 <mem_trim+0xfa>
 800d584:	4b42      	ldr	r3, [pc, #264]	; (800d690 <mem_trim+0x1f8>)
 800d586:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d58a:	4946      	ldr	r1, [pc, #280]	; (800d6a4 <mem_trim+0x20c>)
 800d58c:	4842      	ldr	r0, [pc, #264]	; (800d698 <mem_trim+0x200>)
 800d58e:	f00b f813 	bl	80185b8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	881b      	ldrh	r3, [r3, #0]
 800d596:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d598:	8afa      	ldrh	r2, [r7, #22]
 800d59a:	8bfb      	ldrh	r3, [r7, #30]
 800d59c:	4413      	add	r3, r2
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	3308      	adds	r3, #8
 800d5a2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d5a4:	4b40      	ldr	r3, [pc, #256]	; (800d6a8 <mem_trim+0x210>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	693a      	ldr	r2, [r7, #16]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d106      	bne.n	800d5bc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d5ae:	89fb      	ldrh	r3, [r7, #14]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7ff fd8d 	bl	800d0d0 <ptr_to_mem>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	4a3b      	ldr	r2, [pc, #236]	; (800d6a8 <mem_trim+0x210>)
 800d5ba:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d5bc:	89fb      	ldrh	r3, [r7, #14]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7ff fd86 	bl	800d0d0 <ptr_to_mem>
 800d5c4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	89ba      	ldrh	r2, [r7, #12]
 800d5d0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	8afa      	ldrh	r2, [r7, #22]
 800d5d6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d5d8:	69bb      	ldr	r3, [r7, #24]
 800d5da:	89fa      	ldrh	r2, [r7, #14]
 800d5dc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	881b      	ldrh	r3, [r3, #0]
 800d5e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d5e6:	d047      	beq.n	800d678 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	881b      	ldrh	r3, [r3, #0]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7ff fd6f 	bl	800d0d0 <ptr_to_mem>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	89fb      	ldrh	r3, [r7, #14]
 800d5f6:	8053      	strh	r3, [r2, #2]
 800d5f8:	e03e      	b.n	800d678 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d5fa:	8bfb      	ldrh	r3, [r7, #30]
 800d5fc:	f103 0214 	add.w	r2, r3, #20
 800d600:	8abb      	ldrh	r3, [r7, #20]
 800d602:	429a      	cmp	r2, r3
 800d604:	d838      	bhi.n	800d678 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d606:	8afa      	ldrh	r2, [r7, #22]
 800d608:	8bfb      	ldrh	r3, [r7, #30]
 800d60a:	4413      	add	r3, r2
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	3308      	adds	r3, #8
 800d610:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	881b      	ldrh	r3, [r3, #0]
 800d616:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d61a:	d106      	bne.n	800d62a <mem_trim+0x192>
 800d61c:	4b1c      	ldr	r3, [pc, #112]	; (800d690 <mem_trim+0x1f8>)
 800d61e:	f240 3216 	movw	r2, #790	; 0x316
 800d622:	4920      	ldr	r1, [pc, #128]	; (800d6a4 <mem_trim+0x20c>)
 800d624:	481c      	ldr	r0, [pc, #112]	; (800d698 <mem_trim+0x200>)
 800d626:	f00a ffc7 	bl	80185b8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d62a:	89fb      	ldrh	r3, [r7, #14]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7ff fd4f 	bl	800d0d0 <ptr_to_mem>
 800d632:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d634:	4b1c      	ldr	r3, [pc, #112]	; (800d6a8 <mem_trim+0x210>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	693a      	ldr	r2, [r7, #16]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d202      	bcs.n	800d644 <mem_trim+0x1ac>
      lfree = mem2;
 800d63e:	4a1a      	ldr	r2, [pc, #104]	; (800d6a8 <mem_trim+0x210>)
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	2200      	movs	r2, #0
 800d648:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	881a      	ldrh	r2, [r3, #0]
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	8afa      	ldrh	r2, [r7, #22]
 800d656:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	89fa      	ldrh	r2, [r7, #14]
 800d65c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	881b      	ldrh	r3, [r3, #0]
 800d662:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d666:	d007      	beq.n	800d678 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	881b      	ldrh	r3, [r3, #0]
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7ff fd2f 	bl	800d0d0 <ptr_to_mem>
 800d672:	4602      	mov	r2, r0
 800d674:	89fb      	ldrh	r3, [r7, #14]
 800d676:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d678:	4809      	ldr	r0, [pc, #36]	; (800d6a0 <mem_trim+0x208>)
 800d67a:	f00a fd42 	bl	8018102 <sys_mutex_unlock>
  return rmem;
 800d67e:	687b      	ldr	r3, [r7, #4]
}
 800d680:	4618      	mov	r0, r3
 800d682:	3720      	adds	r7, #32
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	2000694c 	.word	0x2000694c
 800d68c:	20006950 	.word	0x20006950
 800d690:	0801a34c 	.word	0x0801a34c
 800d694:	0801a4d8 	.word	0x0801a4d8
 800d698:	0801a394 	.word	0x0801a394
 800d69c:	0801a4f0 	.word	0x0801a4f0
 800d6a0:	20006954 	.word	0x20006954
 800d6a4:	0801a510 	.word	0x0801a510
 800d6a8:	20006958 	.word	0x20006958

0800d6ac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b088      	sub	sp, #32
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d6b6:	88fb      	ldrh	r3, [r7, #6]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d101      	bne.n	800d6c0 <mem_malloc+0x14>
    return NULL;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	e0e2      	b.n	800d886 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d6c0:	88fb      	ldrh	r3, [r7, #6]
 800d6c2:	3303      	adds	r3, #3
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	f023 0303 	bic.w	r3, r3, #3
 800d6ca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d6cc:	8bbb      	ldrh	r3, [r7, #28]
 800d6ce:	2b0b      	cmp	r3, #11
 800d6d0:	d801      	bhi.n	800d6d6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d6d2:	230c      	movs	r3, #12
 800d6d4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d6d6:	8bbb      	ldrh	r3, [r7, #28]
 800d6d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6dc:	d803      	bhi.n	800d6e6 <mem_malloc+0x3a>
 800d6de:	8bba      	ldrh	r2, [r7, #28]
 800d6e0:	88fb      	ldrh	r3, [r7, #6]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d201      	bcs.n	800d6ea <mem_malloc+0x3e>
    return NULL;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e0cd      	b.n	800d886 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d6ea:	4869      	ldr	r0, [pc, #420]	; (800d890 <mem_malloc+0x1e4>)
 800d6ec:	f00a fcfa 	bl	80180e4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d6f0:	4b68      	ldr	r3, [pc, #416]	; (800d894 <mem_malloc+0x1e8>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7ff fcfd 	bl	800d0f4 <mem_to_ptr>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	83fb      	strh	r3, [r7, #30]
 800d6fe:	e0b7      	b.n	800d870 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d700:	8bfb      	ldrh	r3, [r7, #30]
 800d702:	4618      	mov	r0, r3
 800d704:	f7ff fce4 	bl	800d0d0 <ptr_to_mem>
 800d708:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	791b      	ldrb	r3, [r3, #4]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f040 80a7 	bne.w	800d862 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	461a      	mov	r2, r3
 800d71a:	8bfb      	ldrh	r3, [r7, #30]
 800d71c:	1ad3      	subs	r3, r2, r3
 800d71e:	f1a3 0208 	sub.w	r2, r3, #8
 800d722:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d724:	429a      	cmp	r2, r3
 800d726:	f0c0 809c 	bcc.w	800d862 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	881b      	ldrh	r3, [r3, #0]
 800d72e:	461a      	mov	r2, r3
 800d730:	8bfb      	ldrh	r3, [r7, #30]
 800d732:	1ad3      	subs	r3, r2, r3
 800d734:	f1a3 0208 	sub.w	r2, r3, #8
 800d738:	8bbb      	ldrh	r3, [r7, #28]
 800d73a:	3314      	adds	r3, #20
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d333      	bcc.n	800d7a8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d740:	8bfa      	ldrh	r2, [r7, #30]
 800d742:	8bbb      	ldrh	r3, [r7, #28]
 800d744:	4413      	add	r3, r2
 800d746:	b29b      	uxth	r3, r3
 800d748:	3308      	adds	r3, #8
 800d74a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d74c:	8a7b      	ldrh	r3, [r7, #18]
 800d74e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d752:	d106      	bne.n	800d762 <mem_malloc+0xb6>
 800d754:	4b50      	ldr	r3, [pc, #320]	; (800d898 <mem_malloc+0x1ec>)
 800d756:	f240 3287 	movw	r2, #903	; 0x387
 800d75a:	4950      	ldr	r1, [pc, #320]	; (800d89c <mem_malloc+0x1f0>)
 800d75c:	4850      	ldr	r0, [pc, #320]	; (800d8a0 <mem_malloc+0x1f4>)
 800d75e:	f00a ff2b 	bl	80185b8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d762:	8a7b      	ldrh	r3, [r7, #18]
 800d764:	4618      	mov	r0, r3
 800d766:	f7ff fcb3 	bl	800d0d0 <ptr_to_mem>
 800d76a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2200      	movs	r2, #0
 800d770:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	881a      	ldrh	r2, [r3, #0]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	8bfa      	ldrh	r2, [r7, #30]
 800d77e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	8a7a      	ldrh	r2, [r7, #18]
 800d784:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	2201      	movs	r2, #1
 800d78a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	881b      	ldrh	r3, [r3, #0]
 800d790:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d794:	d00b      	beq.n	800d7ae <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	881b      	ldrh	r3, [r3, #0]
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7ff fc98 	bl	800d0d0 <ptr_to_mem>
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	8a7b      	ldrh	r3, [r7, #18]
 800d7a4:	8053      	strh	r3, [r2, #2]
 800d7a6:	e002      	b.n	800d7ae <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d7ae:	4b39      	ldr	r3, [pc, #228]	; (800d894 <mem_malloc+0x1e8>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	697a      	ldr	r2, [r7, #20]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d127      	bne.n	800d808 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d7b8:	4b36      	ldr	r3, [pc, #216]	; (800d894 <mem_malloc+0x1e8>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d7be:	e005      	b.n	800d7cc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d7c0:	69bb      	ldr	r3, [r7, #24]
 800d7c2:	881b      	ldrh	r3, [r3, #0]
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7ff fc83 	bl	800d0d0 <ptr_to_mem>
 800d7ca:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	791b      	ldrb	r3, [r3, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d004      	beq.n	800d7de <mem_malloc+0x132>
 800d7d4:	4b33      	ldr	r3, [pc, #204]	; (800d8a4 <mem_malloc+0x1f8>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	69ba      	ldr	r2, [r7, #24]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d1f0      	bne.n	800d7c0 <mem_malloc+0x114>
          }
          lfree = cur;
 800d7de:	4a2d      	ldr	r2, [pc, #180]	; (800d894 <mem_malloc+0x1e8>)
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d7e4:	4b2b      	ldr	r3, [pc, #172]	; (800d894 <mem_malloc+0x1e8>)
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	4b2e      	ldr	r3, [pc, #184]	; (800d8a4 <mem_malloc+0x1f8>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d00b      	beq.n	800d808 <mem_malloc+0x15c>
 800d7f0:	4b28      	ldr	r3, [pc, #160]	; (800d894 <mem_malloc+0x1e8>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	791b      	ldrb	r3, [r3, #4]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d006      	beq.n	800d808 <mem_malloc+0x15c>
 800d7fa:	4b27      	ldr	r3, [pc, #156]	; (800d898 <mem_malloc+0x1ec>)
 800d7fc:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d800:	4929      	ldr	r1, [pc, #164]	; (800d8a8 <mem_malloc+0x1fc>)
 800d802:	4827      	ldr	r0, [pc, #156]	; (800d8a0 <mem_malloc+0x1f4>)
 800d804:	f00a fed8 	bl	80185b8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d808:	4821      	ldr	r0, [pc, #132]	; (800d890 <mem_malloc+0x1e4>)
 800d80a:	f00a fc7a 	bl	8018102 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d80e:	8bba      	ldrh	r2, [r7, #28]
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	4413      	add	r3, r2
 800d814:	3308      	adds	r3, #8
 800d816:	4a23      	ldr	r2, [pc, #140]	; (800d8a4 <mem_malloc+0x1f8>)
 800d818:	6812      	ldr	r2, [r2, #0]
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d906      	bls.n	800d82c <mem_malloc+0x180>
 800d81e:	4b1e      	ldr	r3, [pc, #120]	; (800d898 <mem_malloc+0x1ec>)
 800d820:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d824:	4921      	ldr	r1, [pc, #132]	; (800d8ac <mem_malloc+0x200>)
 800d826:	481e      	ldr	r0, [pc, #120]	; (800d8a0 <mem_malloc+0x1f4>)
 800d828:	f00a fec6 	bl	80185b8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	f003 0303 	and.w	r3, r3, #3
 800d832:	2b00      	cmp	r3, #0
 800d834:	d006      	beq.n	800d844 <mem_malloc+0x198>
 800d836:	4b18      	ldr	r3, [pc, #96]	; (800d898 <mem_malloc+0x1ec>)
 800d838:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d83c:	491c      	ldr	r1, [pc, #112]	; (800d8b0 <mem_malloc+0x204>)
 800d83e:	4818      	ldr	r0, [pc, #96]	; (800d8a0 <mem_malloc+0x1f4>)
 800d840:	f00a feba 	bl	80185b8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	f003 0303 	and.w	r3, r3, #3
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d006      	beq.n	800d85c <mem_malloc+0x1b0>
 800d84e:	4b12      	ldr	r3, [pc, #72]	; (800d898 <mem_malloc+0x1ec>)
 800d850:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d854:	4917      	ldr	r1, [pc, #92]	; (800d8b4 <mem_malloc+0x208>)
 800d856:	4812      	ldr	r0, [pc, #72]	; (800d8a0 <mem_malloc+0x1f4>)
 800d858:	f00a feae 	bl	80185b8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	3308      	adds	r3, #8
 800d860:	e011      	b.n	800d886 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d862:	8bfb      	ldrh	r3, [r7, #30]
 800d864:	4618      	mov	r0, r3
 800d866:	f7ff fc33 	bl	800d0d0 <ptr_to_mem>
 800d86a:	4603      	mov	r3, r0
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d870:	8bfa      	ldrh	r2, [r7, #30]
 800d872:	8bbb      	ldrh	r3, [r7, #28]
 800d874:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d878:	429a      	cmp	r2, r3
 800d87a:	f4ff af41 	bcc.w	800d700 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d87e:	4804      	ldr	r0, [pc, #16]	; (800d890 <mem_malloc+0x1e4>)
 800d880:	f00a fc3f 	bl	8018102 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d884:	2300      	movs	r3, #0
}
 800d886:	4618      	mov	r0, r3
 800d888:	3720      	adds	r7, #32
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	20006954 	.word	0x20006954
 800d894:	20006958 	.word	0x20006958
 800d898:	0801a34c 	.word	0x0801a34c
 800d89c:	0801a510 	.word	0x0801a510
 800d8a0:	0801a394 	.word	0x0801a394
 800d8a4:	20006950 	.word	0x20006950
 800d8a8:	0801a524 	.word	0x0801a524
 800d8ac:	0801a540 	.word	0x0801a540
 800d8b0:	0801a570 	.word	0x0801a570
 800d8b4:	0801a5a0 	.word	0x0801a5a0

0800d8b8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	3303      	adds	r3, #3
 800d8ce:	f023 0303 	bic.w	r3, r3, #3
 800d8d2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	60fb      	str	r3, [r7, #12]
 800d8d8:	e011      	b.n	800d8fe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	689b      	ldr	r3, [r3, #8]
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	68ba      	ldr	r2, [r7, #8]
 800d8ea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	881b      	ldrh	r3, [r3, #0]
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	60fb      	str	r3, [r7, #12]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	885b      	ldrh	r3, [r3, #2]
 800d902:	461a      	mov	r2, r3
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	4293      	cmp	r3, r2
 800d908:	dbe7      	blt.n	800d8da <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d90a:	bf00      	nop
 800d90c:	bf00      	nop
 800d90e:	3714      	adds	r7, #20
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d91e:	2300      	movs	r3, #0
 800d920:	80fb      	strh	r3, [r7, #6]
 800d922:	e009      	b.n	800d938 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d924:	88fb      	ldrh	r3, [r7, #6]
 800d926:	4a08      	ldr	r2, [pc, #32]	; (800d948 <memp_init+0x30>)
 800d928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7ff ffc3 	bl	800d8b8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d932:	88fb      	ldrh	r3, [r7, #6]
 800d934:	3301      	adds	r3, #1
 800d936:	80fb      	strh	r3, [r7, #6]
 800d938:	88fb      	ldrh	r3, [r7, #6]
 800d93a:	2b0c      	cmp	r3, #12
 800d93c:	d9f2      	bls.n	800d924 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d93e:	bf00      	nop
 800d940:	bf00      	nop
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	0801cdb4 	.word	0x0801cdb4

0800d94c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d954:	f00a fc08 	bl	8018168 <sys_arch_protect>
 800d958:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	689b      	ldr	r3, [r3, #8]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d015      	beq.n	800d994 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	689b      	ldr	r3, [r3, #8]
 800d96c:	68ba      	ldr	r2, [r7, #8]
 800d96e:	6812      	ldr	r2, [r2, #0]
 800d970:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	f003 0303 	and.w	r3, r3, #3
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d006      	beq.n	800d98a <do_memp_malloc_pool+0x3e>
 800d97c:	4b09      	ldr	r3, [pc, #36]	; (800d9a4 <do_memp_malloc_pool+0x58>)
 800d97e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d982:	4909      	ldr	r1, [pc, #36]	; (800d9a8 <do_memp_malloc_pool+0x5c>)
 800d984:	4809      	ldr	r0, [pc, #36]	; (800d9ac <do_memp_malloc_pool+0x60>)
 800d986:	f00a fe17 	bl	80185b8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	f00a fbfa 	bl	8018184 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	e003      	b.n	800d99c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d994:	68f8      	ldr	r0, [r7, #12]
 800d996:	f00a fbf5 	bl	8018184 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d99a:	2300      	movs	r3, #0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3710      	adds	r7, #16
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	0801a5c4 	.word	0x0801a5c4
 800d9a8:	0801a5f4 	.word	0x0801a5f4
 800d9ac:	0801a618 	.word	0x0801a618

0800d9b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d9ba:	79fb      	ldrb	r3, [r7, #7]
 800d9bc:	2b0c      	cmp	r3, #12
 800d9be:	d908      	bls.n	800d9d2 <memp_malloc+0x22>
 800d9c0:	4b0a      	ldr	r3, [pc, #40]	; (800d9ec <memp_malloc+0x3c>)
 800d9c2:	f240 1257 	movw	r2, #343	; 0x157
 800d9c6:	490a      	ldr	r1, [pc, #40]	; (800d9f0 <memp_malloc+0x40>)
 800d9c8:	480a      	ldr	r0, [pc, #40]	; (800d9f4 <memp_malloc+0x44>)
 800d9ca:	f00a fdf5 	bl	80185b8 <iprintf>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	e008      	b.n	800d9e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	4a08      	ldr	r2, [pc, #32]	; (800d9f8 <memp_malloc+0x48>)
 800d9d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7ff ffb6 	bl	800d94c <do_memp_malloc_pool>
 800d9e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3710      	adds	r7, #16
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	0801a5c4 	.word	0x0801a5c4
 800d9f0:	0801a654 	.word	0x0801a654
 800d9f4:	0801a618 	.word	0x0801a618
 800d9f8:	0801cdb4 	.word	0x0801cdb4

0800d9fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	f003 0303 	and.w	r3, r3, #3
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d006      	beq.n	800da1e <do_memp_free_pool+0x22>
 800da10:	4b0d      	ldr	r3, [pc, #52]	; (800da48 <do_memp_free_pool+0x4c>)
 800da12:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800da16:	490d      	ldr	r1, [pc, #52]	; (800da4c <do_memp_free_pool+0x50>)
 800da18:	480d      	ldr	r0, [pc, #52]	; (800da50 <do_memp_free_pool+0x54>)
 800da1a:	f00a fdcd 	bl	80185b8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800da22:	f00a fba1 	bl	8018168 <sys_arch_protect>
 800da26:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	68fa      	ldr	r2, [r7, #12]
 800da38:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800da3a:	68b8      	ldr	r0, [r7, #8]
 800da3c:	f00a fba2 	bl	8018184 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800da40:	bf00      	nop
 800da42:	3710      	adds	r7, #16
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	0801a5c4 	.word	0x0801a5c4
 800da4c:	0801a674 	.word	0x0801a674
 800da50:	0801a618 	.word	0x0801a618

0800da54 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	4603      	mov	r3, r0
 800da5c:	6039      	str	r1, [r7, #0]
 800da5e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800da60:	79fb      	ldrb	r3, [r7, #7]
 800da62:	2b0c      	cmp	r3, #12
 800da64:	d907      	bls.n	800da76 <memp_free+0x22>
 800da66:	4b0c      	ldr	r3, [pc, #48]	; (800da98 <memp_free+0x44>)
 800da68:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800da6c:	490b      	ldr	r1, [pc, #44]	; (800da9c <memp_free+0x48>)
 800da6e:	480c      	ldr	r0, [pc, #48]	; (800daa0 <memp_free+0x4c>)
 800da70:	f00a fda2 	bl	80185b8 <iprintf>
 800da74:	e00c      	b.n	800da90 <memp_free+0x3c>

  if (mem == NULL) {
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d008      	beq.n	800da8e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800da7c:	79fb      	ldrb	r3, [r7, #7]
 800da7e:	4a09      	ldr	r2, [pc, #36]	; (800daa4 <memp_free+0x50>)
 800da80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da84:	6839      	ldr	r1, [r7, #0]
 800da86:	4618      	mov	r0, r3
 800da88:	f7ff ffb8 	bl	800d9fc <do_memp_free_pool>
 800da8c:	e000      	b.n	800da90 <memp_free+0x3c>
    return;
 800da8e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800da90:	3708      	adds	r7, #8
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	0801a5c4 	.word	0x0801a5c4
 800da9c:	0801a694 	.word	0x0801a694
 800daa0:	0801a618 	.word	0x0801a618
 800daa4:	0801cdb4 	.word	0x0801cdb4

0800daa8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800daa8:	b480      	push	{r7}
 800daaa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800daac:	bf00      	nop
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr
	...

0800dab8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]
 800dac4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d108      	bne.n	800dade <netif_add+0x26>
 800dacc:	4b57      	ldr	r3, [pc, #348]	; (800dc2c <netif_add+0x174>)
 800dace:	f240 1227 	movw	r2, #295	; 0x127
 800dad2:	4957      	ldr	r1, [pc, #348]	; (800dc30 <netif_add+0x178>)
 800dad4:	4857      	ldr	r0, [pc, #348]	; (800dc34 <netif_add+0x17c>)
 800dad6:	f00a fd6f 	bl	80185b8 <iprintf>
 800dada:	2300      	movs	r3, #0
 800dadc:	e0a2      	b.n	800dc24 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d108      	bne.n	800daf6 <netif_add+0x3e>
 800dae4:	4b51      	ldr	r3, [pc, #324]	; (800dc2c <netif_add+0x174>)
 800dae6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800daea:	4953      	ldr	r1, [pc, #332]	; (800dc38 <netif_add+0x180>)
 800daec:	4851      	ldr	r0, [pc, #324]	; (800dc34 <netif_add+0x17c>)
 800daee:	f00a fd63 	bl	80185b8 <iprintf>
 800daf2:	2300      	movs	r3, #0
 800daf4:	e096      	b.n	800dc24 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d101      	bne.n	800db00 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dafc:	4b4f      	ldr	r3, [pc, #316]	; (800dc3c <netif_add+0x184>)
 800dafe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d101      	bne.n	800db0a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800db06:	4b4d      	ldr	r3, [pc, #308]	; (800dc3c <netif_add+0x184>)
 800db08:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d101      	bne.n	800db14 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800db10:	4b4a      	ldr	r3, [pc, #296]	; (800dc3c <netif_add+0x184>)
 800db12:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2200      	movs	r2, #0
 800db18:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2200      	movs	r2, #0
 800db1e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2200      	movs	r2, #0
 800db24:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	4a45      	ldr	r2, [pc, #276]	; (800dc40 <netif_add+0x188>)
 800db2a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2200      	movs	r2, #0
 800db30:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2200      	movs	r2, #0
 800db36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2200      	movs	r2, #0
 800db3e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6a3a      	ldr	r2, [r7, #32]
 800db44:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800db46:	4b3f      	ldr	r3, [pc, #252]	; (800dc44 <netif_add+0x18c>)
 800db48:	781a      	ldrb	r2, [r3, #0]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db54:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	68b9      	ldr	r1, [r7, #8]
 800db5c:	68f8      	ldr	r0, [r7, #12]
 800db5e:	f000 f913 	bl	800dd88 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800db62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	4798      	blx	r3
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d001      	beq.n	800db72 <netif_add+0xba>
    return NULL;
 800db6e:	2300      	movs	r3, #0
 800db70:	e058      	b.n	800dc24 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db78:	2bff      	cmp	r3, #255	; 0xff
 800db7a:	d103      	bne.n	800db84 <netif_add+0xcc>
        netif->num = 0;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2200      	movs	r2, #0
 800db80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800db84:	2300      	movs	r3, #0
 800db86:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800db88:	4b2f      	ldr	r3, [pc, #188]	; (800dc48 <netif_add+0x190>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	617b      	str	r3, [r7, #20]
 800db8e:	e02b      	b.n	800dbe8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	429a      	cmp	r2, r3
 800db96:	d106      	bne.n	800dba6 <netif_add+0xee>
 800db98:	4b24      	ldr	r3, [pc, #144]	; (800dc2c <netif_add+0x174>)
 800db9a:	f240 128b 	movw	r2, #395	; 0x18b
 800db9e:	492b      	ldr	r1, [pc, #172]	; (800dc4c <netif_add+0x194>)
 800dba0:	4824      	ldr	r0, [pc, #144]	; (800dc34 <netif_add+0x17c>)
 800dba2:	f00a fd09 	bl	80185b8 <iprintf>
        num_netifs++;
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	2bff      	cmp	r3, #255	; 0xff
 800dbb0:	dd06      	ble.n	800dbc0 <netif_add+0x108>
 800dbb2:	4b1e      	ldr	r3, [pc, #120]	; (800dc2c <netif_add+0x174>)
 800dbb4:	f240 128d 	movw	r2, #397	; 0x18d
 800dbb8:	4925      	ldr	r1, [pc, #148]	; (800dc50 <netif_add+0x198>)
 800dbba:	481e      	ldr	r0, [pc, #120]	; (800dc34 <netif_add+0x17c>)
 800dbbc:	f00a fcfc 	bl	80185b8 <iprintf>
        if (netif2->num == netif->num) {
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d108      	bne.n	800dbe2 <netif_add+0x12a>
          netif->num++;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	b2da      	uxtb	r2, r3
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800dbe0:	e005      	b.n	800dbee <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	617b      	str	r3, [r7, #20]
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d1d0      	bne.n	800db90 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d1be      	bne.n	800db72 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbfa:	2bfe      	cmp	r3, #254	; 0xfe
 800dbfc:	d103      	bne.n	800dc06 <netif_add+0x14e>
    netif_num = 0;
 800dbfe:	4b11      	ldr	r3, [pc, #68]	; (800dc44 <netif_add+0x18c>)
 800dc00:	2200      	movs	r2, #0
 800dc02:	701a      	strb	r2, [r3, #0]
 800dc04:	e006      	b.n	800dc14 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	b2da      	uxtb	r2, r3
 800dc10:	4b0c      	ldr	r3, [pc, #48]	; (800dc44 <netif_add+0x18c>)
 800dc12:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800dc14:	4b0c      	ldr	r3, [pc, #48]	; (800dc48 <netif_add+0x190>)
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800dc1c:	4a0a      	ldr	r2, [pc, #40]	; (800dc48 <netif_add+0x190>)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800dc22:	68fb      	ldr	r3, [r7, #12]
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3718      	adds	r7, #24
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	0801a6b0 	.word	0x0801a6b0
 800dc30:	0801a744 	.word	0x0801a744
 800dc34:	0801a700 	.word	0x0801a700
 800dc38:	0801a760 	.word	0x0801a760
 800dc3c:	0801ce28 	.word	0x0801ce28
 800dc40:	0800df9b 	.word	0x0800df9b
 800dc44:	20006990 	.word	0x20006990
 800dc48:	2000da04 	.word	0x2000da04
 800dc4c:	0801a784 	.word	0x0801a784
 800dc50:	0801a798 	.word	0x0801a798

0800dc54 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800dc5e:	6839      	ldr	r1, [r7, #0]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f002 fd31 	bl	80106c8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800dc66:	6839      	ldr	r1, [r7, #0]
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f007 fdc9 	bl	8015800 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800dc6e:	bf00      	nop
 800dc70:	3708      	adds	r7, #8
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
	...

0800dc78 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b086      	sub	sp, #24
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d106      	bne.n	800dc98 <netif_do_set_ipaddr+0x20>
 800dc8a:	4b1d      	ldr	r3, [pc, #116]	; (800dd00 <netif_do_set_ipaddr+0x88>)
 800dc8c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800dc90:	491c      	ldr	r1, [pc, #112]	; (800dd04 <netif_do_set_ipaddr+0x8c>)
 800dc92:	481d      	ldr	r0, [pc, #116]	; (800dd08 <netif_do_set_ipaddr+0x90>)
 800dc94:	f00a fc90 	bl	80185b8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d106      	bne.n	800dcac <netif_do_set_ipaddr+0x34>
 800dc9e:	4b18      	ldr	r3, [pc, #96]	; (800dd00 <netif_do_set_ipaddr+0x88>)
 800dca0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800dca4:	4917      	ldr	r1, [pc, #92]	; (800dd04 <netif_do_set_ipaddr+0x8c>)
 800dca6:	4818      	ldr	r0, [pc, #96]	; (800dd08 <netif_do_set_ipaddr+0x90>)
 800dca8:	f00a fc86 	bl	80185b8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d01c      	beq.n	800dcf4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dcca:	f107 0314 	add.w	r3, r7, #20
 800dcce:	4619      	mov	r1, r3
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7ff ffbf 	bl	800dc54 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d002      	beq.n	800dce2 <netif_do_set_ipaddr+0x6a>
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	e000      	b.n	800dce4 <netif_do_set_ipaddr+0x6c>
 800dce2:	2300      	movs	r3, #0
 800dce4:	68fa      	ldr	r2, [r7, #12]
 800dce6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dce8:	2101      	movs	r1, #1
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	f000 f8d2 	bl	800de94 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e000      	b.n	800dcf6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3718      	adds	r7, #24
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	0801a6b0 	.word	0x0801a6b0
 800dd04:	0801a7c8 	.word	0x0801a7c8
 800dd08:	0801a700 	.word	0x0801a700

0800dd0c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	3308      	adds	r3, #8
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d00a      	beq.n	800dd3c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d002      	beq.n	800dd32 <netif_do_set_netmask+0x26>
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	e000      	b.n	800dd34 <netif_do_set_netmask+0x28>
 800dd32:	2300      	movs	r3, #0
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e000      	b.n	800dd3e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800dd3c:	2300      	movs	r3, #0
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3714      	adds	r7, #20
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr

0800dd4a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dd4a:	b480      	push	{r7}
 800dd4c:	b085      	sub	sp, #20
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	60f8      	str	r0, [r7, #12]
 800dd52:	60b9      	str	r1, [r7, #8]
 800dd54:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	330c      	adds	r3, #12
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d00a      	beq.n	800dd7a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d002      	beq.n	800dd70 <netif_do_set_gw+0x26>
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	e000      	b.n	800dd72 <netif_do_set_gw+0x28>
 800dd70:	2300      	movs	r3, #0
 800dd72:	68fa      	ldr	r2, [r7, #12]
 800dd74:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dd76:	2301      	movs	r3, #1
 800dd78:	e000      	b.n	800dd7c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dd7a:	2300      	movs	r3, #0
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3714      	adds	r7, #20
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b088      	sub	sp, #32
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	607a      	str	r2, [r7, #4]
 800dd94:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dd96:	2300      	movs	r3, #0
 800dd98:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d101      	bne.n	800dda8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dda4:	4b1c      	ldr	r3, [pc, #112]	; (800de18 <netif_set_addr+0x90>)
 800dda6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d101      	bne.n	800ddb2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ddae:	4b1a      	ldr	r3, [pc, #104]	; (800de18 <netif_set_addr+0x90>)
 800ddb0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d101      	bne.n	800ddbc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ddb8:	4b17      	ldr	r3, [pc, #92]	; (800de18 <netif_set_addr+0x90>)
 800ddba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d003      	beq.n	800ddca <netif_set_addr+0x42>
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d101      	bne.n	800ddce <netif_set_addr+0x46>
 800ddca:	2301      	movs	r3, #1
 800ddcc:	e000      	b.n	800ddd0 <netif_set_addr+0x48>
 800ddce:	2300      	movs	r3, #0
 800ddd0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d006      	beq.n	800dde6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ddd8:	f107 0310 	add.w	r3, r7, #16
 800dddc:	461a      	mov	r2, r3
 800ddde:	68b9      	ldr	r1, [r7, #8]
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f7ff ff49 	bl	800dc78 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dde6:	69fa      	ldr	r2, [r7, #28]
 800dde8:	6879      	ldr	r1, [r7, #4]
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f7ff ff8e 	bl	800dd0c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ddf0:	69ba      	ldr	r2, [r7, #24]
 800ddf2:	6839      	ldr	r1, [r7, #0]
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f7ff ffa8 	bl	800dd4a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d106      	bne.n	800de0e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800de00:	f107 0310 	add.w	r3, r7, #16
 800de04:	461a      	mov	r2, r3
 800de06:	68b9      	ldr	r1, [r7, #8]
 800de08:	68f8      	ldr	r0, [r7, #12]
 800de0a:	f7ff ff35 	bl	800dc78 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800de0e:	bf00      	nop
 800de10:	3720      	adds	r7, #32
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	0801ce28 	.word	0x0801ce28

0800de1c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800de24:	4a04      	ldr	r2, [pc, #16]	; (800de38 <netif_set_default+0x1c>)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800de2a:	bf00      	nop
 800de2c:	370c      	adds	r7, #12
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr
 800de36:	bf00      	nop
 800de38:	2000da08 	.word	0x2000da08

0800de3c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d107      	bne.n	800de5a <netif_set_up+0x1e>
 800de4a:	4b0f      	ldr	r3, [pc, #60]	; (800de88 <netif_set_up+0x4c>)
 800de4c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800de50:	490e      	ldr	r1, [pc, #56]	; (800de8c <netif_set_up+0x50>)
 800de52:	480f      	ldr	r0, [pc, #60]	; (800de90 <netif_set_up+0x54>)
 800de54:	f00a fbb0 	bl	80185b8 <iprintf>
 800de58:	e013      	b.n	800de82 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de60:	f003 0301 	and.w	r3, r3, #1
 800de64:	2b00      	cmp	r3, #0
 800de66:	d10c      	bne.n	800de82 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de6e:	f043 0301 	orr.w	r3, r3, #1
 800de72:	b2da      	uxtb	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800de7a:	2103      	movs	r1, #3
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 f809 	bl	800de94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	0801a6b0 	.word	0x0801a6b0
 800de8c:	0801a838 	.word	0x0801a838
 800de90:	0801a700 	.word	0x0801a700

0800de94 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	460b      	mov	r3, r1
 800de9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d106      	bne.n	800deb4 <netif_issue_reports+0x20>
 800dea6:	4b18      	ldr	r3, [pc, #96]	; (800df08 <netif_issue_reports+0x74>)
 800dea8:	f240 326d 	movw	r2, #877	; 0x36d
 800deac:	4917      	ldr	r1, [pc, #92]	; (800df0c <netif_issue_reports+0x78>)
 800deae:	4818      	ldr	r0, [pc, #96]	; (800df10 <netif_issue_reports+0x7c>)
 800deb0:	f00a fb82 	bl	80185b8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800deba:	f003 0304 	and.w	r3, r3, #4
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d01e      	beq.n	800df00 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dec8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800decc:	2b00      	cmp	r3, #0
 800dece:	d017      	beq.n	800df00 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ded0:	78fb      	ldrb	r3, [r7, #3]
 800ded2:	f003 0301 	and.w	r3, r3, #1
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d013      	beq.n	800df02 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	3304      	adds	r3, #4
 800dede:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d00e      	beq.n	800df02 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800deea:	f003 0308 	and.w	r3, r3, #8
 800deee:	2b00      	cmp	r3, #0
 800def0:	d007      	beq.n	800df02 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	3304      	adds	r3, #4
 800def6:	4619      	mov	r1, r3
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f008 fbeb 	bl	80166d4 <etharp_request>
 800defe:	e000      	b.n	800df02 <netif_issue_reports+0x6e>
    return;
 800df00:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800df02:	3708      	adds	r7, #8
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	0801a6b0 	.word	0x0801a6b0
 800df0c:	0801a854 	.word	0x0801a854
 800df10:	0801a700 	.word	0x0801a700

0800df14 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d107      	bne.n	800df32 <netif_set_down+0x1e>
 800df22:	4b12      	ldr	r3, [pc, #72]	; (800df6c <netif_set_down+0x58>)
 800df24:	f240 329b 	movw	r2, #923	; 0x39b
 800df28:	4911      	ldr	r1, [pc, #68]	; (800df70 <netif_set_down+0x5c>)
 800df2a:	4812      	ldr	r0, [pc, #72]	; (800df74 <netif_set_down+0x60>)
 800df2c:	f00a fb44 	bl	80185b8 <iprintf>
 800df30:	e019      	b.n	800df66 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df38:	f003 0301 	and.w	r3, r3, #1
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d012      	beq.n	800df66 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df46:	f023 0301 	bic.w	r3, r3, #1
 800df4a:	b2da      	uxtb	r2, r3
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df58:	f003 0308 	and.w	r3, r3, #8
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d002      	beq.n	800df66 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f007 ff75 	bl	8015e50 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	0801a6b0 	.word	0x0801a6b0
 800df70:	0801a878 	.word	0x0801a878
 800df74:	0801a700 	.word	0x0801a700

0800df78 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d002      	beq.n	800df8e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	683a      	ldr	r2, [r7, #0]
 800df8c:	61da      	str	r2, [r3, #28]
  }
}
 800df8e:	bf00      	nop
 800df90:	370c      	adds	r7, #12
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr

0800df9a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800df9a:	b480      	push	{r7}
 800df9c:	b085      	sub	sp, #20
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	60f8      	str	r0, [r7, #12]
 800dfa2:	60b9      	str	r1, [r7, #8]
 800dfa4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800dfa6:	f06f 030b 	mvn.w	r3, #11
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3714      	adds	r7, #20
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr
	...

0800dfb8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b085      	sub	sp, #20
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800dfc2:	79fb      	ldrb	r3, [r7, #7]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d013      	beq.n	800dff0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800dfc8:	4b0d      	ldr	r3, [pc, #52]	; (800e000 <netif_get_by_index+0x48>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	60fb      	str	r3, [r7, #12]
 800dfce:	e00c      	b.n	800dfea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	79fa      	ldrb	r2, [r7, #7]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d101      	bne.n	800dfe4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	e006      	b.n	800dff2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	60fb      	str	r3, [r7, #12]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d1ef      	bne.n	800dfd0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800dff0:	2300      	movs	r3, #0
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3714      	adds	r7, #20
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	2000da04 	.word	0x2000da04

0800e004 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e00a:	f00a f8ad 	bl	8018168 <sys_arch_protect>
 800e00e:	6038      	str	r0, [r7, #0]
 800e010:	4b0d      	ldr	r3, [pc, #52]	; (800e048 <pbuf_free_ooseq+0x44>)
 800e012:	2200      	movs	r2, #0
 800e014:	701a      	strb	r2, [r3, #0]
 800e016:	6838      	ldr	r0, [r7, #0]
 800e018:	f00a f8b4 	bl	8018184 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e01c:	4b0b      	ldr	r3, [pc, #44]	; (800e04c <pbuf_free_ooseq+0x48>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	607b      	str	r3, [r7, #4]
 800e022:	e00a      	b.n	800e03a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d003      	beq.n	800e034 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f002 fb89 	bl	8010744 <tcp_free_ooseq>
      return;
 800e032:	e005      	b.n	800e040 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	68db      	ldr	r3, [r3, #12]
 800e038:	607b      	str	r3, [r7, #4]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d1f1      	bne.n	800e024 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e040:	3708      	adds	r7, #8
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	2000da0c 	.word	0x2000da0c
 800e04c:	2000da14 	.word	0x2000da14

0800e050 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e058:	f7ff ffd4 	bl	800e004 <pbuf_free_ooseq>
}
 800e05c:	bf00      	nop
 800e05e:	3708      	adds	r7, #8
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e06a:	f00a f87d 	bl	8018168 <sys_arch_protect>
 800e06e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e070:	4b0f      	ldr	r3, [pc, #60]	; (800e0b0 <pbuf_pool_is_empty+0x4c>)
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e076:	4b0e      	ldr	r3, [pc, #56]	; (800e0b0 <pbuf_pool_is_empty+0x4c>)
 800e078:	2201      	movs	r2, #1
 800e07a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f00a f881 	bl	8018184 <sys_arch_unprotect>

  if (!queued) {
 800e082:	78fb      	ldrb	r3, [r7, #3]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10f      	bne.n	800e0a8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e088:	2100      	movs	r1, #0
 800e08a:	480a      	ldr	r0, [pc, #40]	; (800e0b4 <pbuf_pool_is_empty+0x50>)
 800e08c:	f7fe ff3a 	bl	800cf04 <tcpip_try_callback>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d008      	beq.n	800e0a8 <pbuf_pool_is_empty+0x44>
 800e096:	f00a f867 	bl	8018168 <sys_arch_protect>
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	4b04      	ldr	r3, [pc, #16]	; (800e0b0 <pbuf_pool_is_empty+0x4c>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	701a      	strb	r2, [r3, #0]
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f00a f86e 	bl	8018184 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e0a8:	bf00      	nop
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	2000da0c 	.word	0x2000da0c
 800e0b4:	0800e051 	.word	0x0800e051

0800e0b8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	4611      	mov	r1, r2
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	80fb      	strh	r3, [r7, #6]
 800e0ca:	4613      	mov	r3, r2
 800e0cc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	68ba      	ldr	r2, [r7, #8]
 800e0d8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	88fa      	ldrh	r2, [r7, #6]
 800e0de:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	88ba      	ldrh	r2, [r7, #4]
 800e0e4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e0e6:	8b3b      	ldrh	r3, [r7, #24]
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	7f3a      	ldrb	r2, [r7, #28]
 800e0f2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	73da      	strb	r2, [r3, #15]
}
 800e100:	bf00      	nop
 800e102:	3714      	adds	r7, #20
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b08c      	sub	sp, #48	; 0x30
 800e110:	af02      	add	r7, sp, #8
 800e112:	4603      	mov	r3, r0
 800e114:	71fb      	strb	r3, [r7, #7]
 800e116:	460b      	mov	r3, r1
 800e118:	80bb      	strh	r3, [r7, #4]
 800e11a:	4613      	mov	r3, r2
 800e11c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e11e:	79fb      	ldrb	r3, [r7, #7]
 800e120:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e122:	887b      	ldrh	r3, [r7, #2]
 800e124:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e128:	d07f      	beq.n	800e22a <pbuf_alloc+0x11e>
 800e12a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e12e:	f300 80c8 	bgt.w	800e2c2 <pbuf_alloc+0x1b6>
 800e132:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e136:	d010      	beq.n	800e15a <pbuf_alloc+0x4e>
 800e138:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e13c:	f300 80c1 	bgt.w	800e2c2 <pbuf_alloc+0x1b6>
 800e140:	2b01      	cmp	r3, #1
 800e142:	d002      	beq.n	800e14a <pbuf_alloc+0x3e>
 800e144:	2b41      	cmp	r3, #65	; 0x41
 800e146:	f040 80bc 	bne.w	800e2c2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e14a:	887a      	ldrh	r2, [r7, #2]
 800e14c:	88bb      	ldrh	r3, [r7, #4]
 800e14e:	4619      	mov	r1, r3
 800e150:	2000      	movs	r0, #0
 800e152:	f000 f8d1 	bl	800e2f8 <pbuf_alloc_reference>
 800e156:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e158:	e0bd      	b.n	800e2d6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e15a:	2300      	movs	r3, #0
 800e15c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e15e:	2300      	movs	r3, #0
 800e160:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e162:	88bb      	ldrh	r3, [r7, #4]
 800e164:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e166:	200c      	movs	r0, #12
 800e168:	f7ff fc22 	bl	800d9b0 <memp_malloc>
 800e16c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d109      	bne.n	800e188 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e174:	f7ff ff76 	bl	800e064 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d002      	beq.n	800e184 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e17e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e180:	f000 faa8 	bl	800e6d4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e184:	2300      	movs	r3, #0
 800e186:	e0a7      	b.n	800e2d8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e18a:	3303      	adds	r3, #3
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	f023 0303 	bic.w	r3, r3, #3
 800e192:	b29b      	uxth	r3, r3
 800e194:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e198:	b29b      	uxth	r3, r3
 800e19a:	8b7a      	ldrh	r2, [r7, #26]
 800e19c:	4293      	cmp	r3, r2
 800e19e:	bf28      	it	cs
 800e1a0:	4613      	movcs	r3, r2
 800e1a2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e1a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e1a6:	3310      	adds	r3, #16
 800e1a8:	693a      	ldr	r2, [r7, #16]
 800e1aa:	4413      	add	r3, r2
 800e1ac:	3303      	adds	r3, #3
 800e1ae:	f023 0303 	bic.w	r3, r3, #3
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	89f9      	ldrh	r1, [r7, #14]
 800e1b6:	8b7a      	ldrh	r2, [r7, #26]
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	9301      	str	r3, [sp, #4]
 800e1bc:	887b      	ldrh	r3, [r7, #2]
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	4601      	mov	r1, r0
 800e1c4:	6938      	ldr	r0, [r7, #16]
 800e1c6:	f7ff ff77 	bl	800e0b8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	f003 0303 	and.w	r3, r3, #3
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d006      	beq.n	800e1e4 <pbuf_alloc+0xd8>
 800e1d6:	4b42      	ldr	r3, [pc, #264]	; (800e2e0 <pbuf_alloc+0x1d4>)
 800e1d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e1dc:	4941      	ldr	r1, [pc, #260]	; (800e2e4 <pbuf_alloc+0x1d8>)
 800e1de:	4842      	ldr	r0, [pc, #264]	; (800e2e8 <pbuf_alloc+0x1dc>)
 800e1e0:	f00a f9ea 	bl	80185b8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e1e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e1e6:	3303      	adds	r3, #3
 800e1e8:	f023 0303 	bic.w	r3, r3, #3
 800e1ec:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e1f0:	d106      	bne.n	800e200 <pbuf_alloc+0xf4>
 800e1f2:	4b3b      	ldr	r3, [pc, #236]	; (800e2e0 <pbuf_alloc+0x1d4>)
 800e1f4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e1f8:	493c      	ldr	r1, [pc, #240]	; (800e2ec <pbuf_alloc+0x1e0>)
 800e1fa:	483b      	ldr	r0, [pc, #236]	; (800e2e8 <pbuf_alloc+0x1dc>)
 800e1fc:	f00a f9dc 	bl	80185b8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e202:	2b00      	cmp	r3, #0
 800e204:	d102      	bne.n	800e20c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	627b      	str	r3, [r7, #36]	; 0x24
 800e20a:	e002      	b.n	800e212 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	693a      	ldr	r2, [r7, #16]
 800e210:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e216:	8b7a      	ldrh	r2, [r7, #26]
 800e218:	89fb      	ldrh	r3, [r7, #14]
 800e21a:	1ad3      	subs	r3, r2, r3
 800e21c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e21e:	2300      	movs	r3, #0
 800e220:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e222:	8b7b      	ldrh	r3, [r7, #26]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d19e      	bne.n	800e166 <pbuf_alloc+0x5a>
      break;
 800e228:	e055      	b.n	800e2d6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e22a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e22c:	3303      	adds	r3, #3
 800e22e:	b29b      	uxth	r3, r3
 800e230:	f023 0303 	bic.w	r3, r3, #3
 800e234:	b29a      	uxth	r2, r3
 800e236:	88bb      	ldrh	r3, [r7, #4]
 800e238:	3303      	adds	r3, #3
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	f023 0303 	bic.w	r3, r3, #3
 800e240:	b29b      	uxth	r3, r3
 800e242:	4413      	add	r3, r2
 800e244:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e246:	8b3b      	ldrh	r3, [r7, #24]
 800e248:	3310      	adds	r3, #16
 800e24a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e24c:	8b3a      	ldrh	r2, [r7, #24]
 800e24e:	88bb      	ldrh	r3, [r7, #4]
 800e250:	3303      	adds	r3, #3
 800e252:	f023 0303 	bic.w	r3, r3, #3
 800e256:	429a      	cmp	r2, r3
 800e258:	d306      	bcc.n	800e268 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e25a:	8afa      	ldrh	r2, [r7, #22]
 800e25c:	88bb      	ldrh	r3, [r7, #4]
 800e25e:	3303      	adds	r3, #3
 800e260:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e264:	429a      	cmp	r2, r3
 800e266:	d201      	bcs.n	800e26c <pbuf_alloc+0x160>
        return NULL;
 800e268:	2300      	movs	r3, #0
 800e26a:	e035      	b.n	800e2d8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e26c:	8afb      	ldrh	r3, [r7, #22]
 800e26e:	4618      	mov	r0, r3
 800e270:	f7ff fa1c 	bl	800d6ac <mem_malloc>
 800e274:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d101      	bne.n	800e280 <pbuf_alloc+0x174>
        return NULL;
 800e27c:	2300      	movs	r3, #0
 800e27e:	e02b      	b.n	800e2d8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e280:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e282:	3310      	adds	r3, #16
 800e284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e286:	4413      	add	r3, r2
 800e288:	3303      	adds	r3, #3
 800e28a:	f023 0303 	bic.w	r3, r3, #3
 800e28e:	4618      	mov	r0, r3
 800e290:	88b9      	ldrh	r1, [r7, #4]
 800e292:	88ba      	ldrh	r2, [r7, #4]
 800e294:	2300      	movs	r3, #0
 800e296:	9301      	str	r3, [sp, #4]
 800e298:	887b      	ldrh	r3, [r7, #2]
 800e29a:	9300      	str	r3, [sp, #0]
 800e29c:	460b      	mov	r3, r1
 800e29e:	4601      	mov	r1, r0
 800e2a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2a2:	f7ff ff09 	bl	800e0b8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	f003 0303 	and.w	r3, r3, #3
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d010      	beq.n	800e2d4 <pbuf_alloc+0x1c8>
 800e2b2:	4b0b      	ldr	r3, [pc, #44]	; (800e2e0 <pbuf_alloc+0x1d4>)
 800e2b4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e2b8:	490d      	ldr	r1, [pc, #52]	; (800e2f0 <pbuf_alloc+0x1e4>)
 800e2ba:	480b      	ldr	r0, [pc, #44]	; (800e2e8 <pbuf_alloc+0x1dc>)
 800e2bc:	f00a f97c 	bl	80185b8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e2c0:	e008      	b.n	800e2d4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e2c2:	4b07      	ldr	r3, [pc, #28]	; (800e2e0 <pbuf_alloc+0x1d4>)
 800e2c4:	f240 1227 	movw	r2, #295	; 0x127
 800e2c8:	490a      	ldr	r1, [pc, #40]	; (800e2f4 <pbuf_alloc+0x1e8>)
 800e2ca:	4807      	ldr	r0, [pc, #28]	; (800e2e8 <pbuf_alloc+0x1dc>)
 800e2cc:	f00a f974 	bl	80185b8 <iprintf>
      return NULL;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	e001      	b.n	800e2d8 <pbuf_alloc+0x1cc>
      break;
 800e2d4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3728      	adds	r7, #40	; 0x28
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	0801a8e0 	.word	0x0801a8e0
 800e2e4:	0801a910 	.word	0x0801a910
 800e2e8:	0801a940 	.word	0x0801a940
 800e2ec:	0801a968 	.word	0x0801a968
 800e2f0:	0801a99c 	.word	0x0801a99c
 800e2f4:	0801a9c8 	.word	0x0801a9c8

0800e2f8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af02      	add	r7, sp, #8
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	460b      	mov	r3, r1
 800e302:	807b      	strh	r3, [r7, #2]
 800e304:	4613      	mov	r3, r2
 800e306:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e308:	883b      	ldrh	r3, [r7, #0]
 800e30a:	2b41      	cmp	r3, #65	; 0x41
 800e30c:	d009      	beq.n	800e322 <pbuf_alloc_reference+0x2a>
 800e30e:	883b      	ldrh	r3, [r7, #0]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d006      	beq.n	800e322 <pbuf_alloc_reference+0x2a>
 800e314:	4b0f      	ldr	r3, [pc, #60]	; (800e354 <pbuf_alloc_reference+0x5c>)
 800e316:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e31a:	490f      	ldr	r1, [pc, #60]	; (800e358 <pbuf_alloc_reference+0x60>)
 800e31c:	480f      	ldr	r0, [pc, #60]	; (800e35c <pbuf_alloc_reference+0x64>)
 800e31e:	f00a f94b 	bl	80185b8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e322:	200b      	movs	r0, #11
 800e324:	f7ff fb44 	bl	800d9b0 <memp_malloc>
 800e328:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d101      	bne.n	800e334 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e330:	2300      	movs	r3, #0
 800e332:	e00b      	b.n	800e34c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e334:	8879      	ldrh	r1, [r7, #2]
 800e336:	887a      	ldrh	r2, [r7, #2]
 800e338:	2300      	movs	r3, #0
 800e33a:	9301      	str	r3, [sp, #4]
 800e33c:	883b      	ldrh	r3, [r7, #0]
 800e33e:	9300      	str	r3, [sp, #0]
 800e340:	460b      	mov	r3, r1
 800e342:	6879      	ldr	r1, [r7, #4]
 800e344:	68f8      	ldr	r0, [r7, #12]
 800e346:	f7ff feb7 	bl	800e0b8 <pbuf_init_alloced_pbuf>
  return p;
 800e34a:	68fb      	ldr	r3, [r7, #12]
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3710      	adds	r7, #16
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	0801a8e0 	.word	0x0801a8e0
 800e358:	0801a9e4 	.word	0x0801a9e4
 800e35c:	0801a940 	.word	0x0801a940

0800e360 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b088      	sub	sp, #32
 800e364:	af02      	add	r7, sp, #8
 800e366:	607b      	str	r3, [r7, #4]
 800e368:	4603      	mov	r3, r0
 800e36a:	73fb      	strb	r3, [r7, #15]
 800e36c:	460b      	mov	r3, r1
 800e36e:	81bb      	strh	r3, [r7, #12]
 800e370:	4613      	mov	r3, r2
 800e372:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e374:	7bfb      	ldrb	r3, [r7, #15]
 800e376:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e378:	8a7b      	ldrh	r3, [r7, #18]
 800e37a:	3303      	adds	r3, #3
 800e37c:	f023 0203 	bic.w	r2, r3, #3
 800e380:	89bb      	ldrh	r3, [r7, #12]
 800e382:	441a      	add	r2, r3
 800e384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e386:	429a      	cmp	r2, r3
 800e388:	d901      	bls.n	800e38e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e38a:	2300      	movs	r3, #0
 800e38c:	e018      	b.n	800e3c0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e38e:	6a3b      	ldr	r3, [r7, #32]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d007      	beq.n	800e3a4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e394:	8a7b      	ldrh	r3, [r7, #18]
 800e396:	3303      	adds	r3, #3
 800e398:	f023 0303 	bic.w	r3, r3, #3
 800e39c:	6a3a      	ldr	r2, [r7, #32]
 800e39e:	4413      	add	r3, r2
 800e3a0:	617b      	str	r3, [r7, #20]
 800e3a2:	e001      	b.n	800e3a8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	89b9      	ldrh	r1, [r7, #12]
 800e3ac:	89ba      	ldrh	r2, [r7, #12]
 800e3ae:	2302      	movs	r3, #2
 800e3b0:	9301      	str	r3, [sp, #4]
 800e3b2:	897b      	ldrh	r3, [r7, #10]
 800e3b4:	9300      	str	r3, [sp, #0]
 800e3b6:	460b      	mov	r3, r1
 800e3b8:	6979      	ldr	r1, [r7, #20]
 800e3ba:	f7ff fe7d 	bl	800e0b8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e3be:	687b      	ldr	r3, [r7, #4]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3718      	adds	r7, #24
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d106      	bne.n	800e3e8 <pbuf_realloc+0x20>
 800e3da:	4b3a      	ldr	r3, [pc, #232]	; (800e4c4 <pbuf_realloc+0xfc>)
 800e3dc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e3e0:	4939      	ldr	r1, [pc, #228]	; (800e4c8 <pbuf_realloc+0x100>)
 800e3e2:	483a      	ldr	r0, [pc, #232]	; (800e4cc <pbuf_realloc+0x104>)
 800e3e4:	f00a f8e8 	bl	80185b8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	891b      	ldrh	r3, [r3, #8]
 800e3ec:	887a      	ldrh	r2, [r7, #2]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d263      	bcs.n	800e4ba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	891a      	ldrh	r2, [r3, #8]
 800e3f6:	887b      	ldrh	r3, [r7, #2]
 800e3f8:	1ad3      	subs	r3, r2, r3
 800e3fa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e3fc:	887b      	ldrh	r3, [r7, #2]
 800e3fe:	817b      	strh	r3, [r7, #10]
  q = p;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e404:	e018      	b.n	800e438 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	895b      	ldrh	r3, [r3, #10]
 800e40a:	897a      	ldrh	r2, [r7, #10]
 800e40c:	1ad3      	subs	r3, r2, r3
 800e40e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	891a      	ldrh	r2, [r3, #8]
 800e414:	893b      	ldrh	r3, [r7, #8]
 800e416:	1ad3      	subs	r3, r2, r3
 800e418:	b29a      	uxth	r2, r3
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d106      	bne.n	800e438 <pbuf_realloc+0x70>
 800e42a:	4b26      	ldr	r3, [pc, #152]	; (800e4c4 <pbuf_realloc+0xfc>)
 800e42c:	f240 12af 	movw	r2, #431	; 0x1af
 800e430:	4927      	ldr	r1, [pc, #156]	; (800e4d0 <pbuf_realloc+0x108>)
 800e432:	4826      	ldr	r0, [pc, #152]	; (800e4cc <pbuf_realloc+0x104>)
 800e434:	f00a f8c0 	bl	80185b8 <iprintf>
  while (rem_len > q->len) {
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	895b      	ldrh	r3, [r3, #10]
 800e43c:	897a      	ldrh	r2, [r7, #10]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d8e1      	bhi.n	800e406 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	7b1b      	ldrb	r3, [r3, #12]
 800e446:	f003 030f 	and.w	r3, r3, #15
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d121      	bne.n	800e492 <pbuf_realloc+0xca>
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	895b      	ldrh	r3, [r3, #10]
 800e452:	897a      	ldrh	r2, [r7, #10]
 800e454:	429a      	cmp	r2, r3
 800e456:	d01c      	beq.n	800e492 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	7b5b      	ldrb	r3, [r3, #13]
 800e45c:	f003 0302 	and.w	r3, r3, #2
 800e460:	2b00      	cmp	r3, #0
 800e462:	d116      	bne.n	800e492 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	685a      	ldr	r2, [r3, #4]
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	1ad3      	subs	r3, r2, r3
 800e46c:	b29a      	uxth	r2, r3
 800e46e:	897b      	ldrh	r3, [r7, #10]
 800e470:	4413      	add	r3, r2
 800e472:	b29b      	uxth	r3, r3
 800e474:	4619      	mov	r1, r3
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f7ff f80e 	bl	800d498 <mem_trim>
 800e47c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d106      	bne.n	800e492 <pbuf_realloc+0xca>
 800e484:	4b0f      	ldr	r3, [pc, #60]	; (800e4c4 <pbuf_realloc+0xfc>)
 800e486:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e48a:	4912      	ldr	r1, [pc, #72]	; (800e4d4 <pbuf_realloc+0x10c>)
 800e48c:	480f      	ldr	r0, [pc, #60]	; (800e4cc <pbuf_realloc+0x104>)
 800e48e:	f00a f893 	bl	80185b8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	897a      	ldrh	r2, [r7, #10]
 800e496:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	895a      	ldrh	r2, [r3, #10]
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d004      	beq.n	800e4b2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f000 f911 	bl	800e6d4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	601a      	str	r2, [r3, #0]
 800e4b8:	e000      	b.n	800e4bc <pbuf_realloc+0xf4>
    return;
 800e4ba:	bf00      	nop

}
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	0801a8e0 	.word	0x0801a8e0
 800e4c8:	0801a9f8 	.word	0x0801a9f8
 800e4cc:	0801a940 	.word	0x0801a940
 800e4d0:	0801aa10 	.word	0x0801aa10
 800e4d4:	0801aa28 	.word	0x0801aa28

0800e4d8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b086      	sub	sp, #24
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	4613      	mov	r3, r2
 800e4e4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d106      	bne.n	800e4fa <pbuf_add_header_impl+0x22>
 800e4ec:	4b2b      	ldr	r3, [pc, #172]	; (800e59c <pbuf_add_header_impl+0xc4>)
 800e4ee:	f240 12df 	movw	r2, #479	; 0x1df
 800e4f2:	492b      	ldr	r1, [pc, #172]	; (800e5a0 <pbuf_add_header_impl+0xc8>)
 800e4f4:	482b      	ldr	r0, [pc, #172]	; (800e5a4 <pbuf_add_header_impl+0xcc>)
 800e4f6:	f00a f85f 	bl	80185b8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d003      	beq.n	800e508 <pbuf_add_header_impl+0x30>
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e506:	d301      	bcc.n	800e50c <pbuf_add_header_impl+0x34>
    return 1;
 800e508:	2301      	movs	r3, #1
 800e50a:	e043      	b.n	800e594 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d101      	bne.n	800e516 <pbuf_add_header_impl+0x3e>
    return 0;
 800e512:	2300      	movs	r3, #0
 800e514:	e03e      	b.n	800e594 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	891a      	ldrh	r2, [r3, #8]
 800e51e:	8a7b      	ldrh	r3, [r7, #18]
 800e520:	4413      	add	r3, r2
 800e522:	b29b      	uxth	r3, r3
 800e524:	8a7a      	ldrh	r2, [r7, #18]
 800e526:	429a      	cmp	r2, r3
 800e528:	d901      	bls.n	800e52e <pbuf_add_header_impl+0x56>
    return 1;
 800e52a:	2301      	movs	r3, #1
 800e52c:	e032      	b.n	800e594 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	7b1b      	ldrb	r3, [r3, #12]
 800e532:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e534:	8a3b      	ldrh	r3, [r7, #16]
 800e536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d00c      	beq.n	800e558 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	685a      	ldr	r2, [r3, #4]
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	425b      	negs	r3, r3
 800e546:	4413      	add	r3, r2
 800e548:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	3310      	adds	r3, #16
 800e54e:	697a      	ldr	r2, [r7, #20]
 800e550:	429a      	cmp	r2, r3
 800e552:	d20d      	bcs.n	800e570 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e554:	2301      	movs	r3, #1
 800e556:	e01d      	b.n	800e594 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e558:	79fb      	ldrb	r3, [r7, #7]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d006      	beq.n	800e56c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	685a      	ldr	r2, [r3, #4]
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	425b      	negs	r3, r3
 800e566:	4413      	add	r3, r2
 800e568:	617b      	str	r3, [r7, #20]
 800e56a:	e001      	b.n	800e570 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e56c:	2301      	movs	r3, #1
 800e56e:	e011      	b.n	800e594 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	697a      	ldr	r2, [r7, #20]
 800e574:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	895a      	ldrh	r2, [r3, #10]
 800e57a:	8a7b      	ldrh	r3, [r7, #18]
 800e57c:	4413      	add	r3, r2
 800e57e:	b29a      	uxth	r2, r3
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	891a      	ldrh	r2, [r3, #8]
 800e588:	8a7b      	ldrh	r3, [r7, #18]
 800e58a:	4413      	add	r3, r2
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	811a      	strh	r2, [r3, #8]


  return 0;
 800e592:	2300      	movs	r3, #0
}
 800e594:	4618      	mov	r0, r3
 800e596:	3718      	adds	r7, #24
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	0801a8e0 	.word	0x0801a8e0
 800e5a0:	0801aa44 	.word	0x0801aa44
 800e5a4:	0801a940 	.word	0x0801a940

0800e5a8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	6839      	ldr	r1, [r7, #0]
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f7ff ff8e 	bl	800e4d8 <pbuf_add_header_impl>
 800e5bc:	4603      	mov	r3, r0
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3708      	adds	r7, #8
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
	...

0800e5c8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d106      	bne.n	800e5e6 <pbuf_remove_header+0x1e>
 800e5d8:	4b20      	ldr	r3, [pc, #128]	; (800e65c <pbuf_remove_header+0x94>)
 800e5da:	f240 224b 	movw	r2, #587	; 0x24b
 800e5de:	4920      	ldr	r1, [pc, #128]	; (800e660 <pbuf_remove_header+0x98>)
 800e5e0:	4820      	ldr	r0, [pc, #128]	; (800e664 <pbuf_remove_header+0x9c>)
 800e5e2:	f009 ffe9 	bl	80185b8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d003      	beq.n	800e5f4 <pbuf_remove_header+0x2c>
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5f2:	d301      	bcc.n	800e5f8 <pbuf_remove_header+0x30>
    return 1;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	e02c      	b.n	800e652 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d101      	bne.n	800e602 <pbuf_remove_header+0x3a>
    return 0;
 800e5fe:	2300      	movs	r3, #0
 800e600:	e027      	b.n	800e652 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	895b      	ldrh	r3, [r3, #10]
 800e60a:	89fa      	ldrh	r2, [r7, #14]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d908      	bls.n	800e622 <pbuf_remove_header+0x5a>
 800e610:	4b12      	ldr	r3, [pc, #72]	; (800e65c <pbuf_remove_header+0x94>)
 800e612:	f240 2255 	movw	r2, #597	; 0x255
 800e616:	4914      	ldr	r1, [pc, #80]	; (800e668 <pbuf_remove_header+0xa0>)
 800e618:	4812      	ldr	r0, [pc, #72]	; (800e664 <pbuf_remove_header+0x9c>)
 800e61a:	f009 ffcd 	bl	80185b8 <iprintf>
 800e61e:	2301      	movs	r3, #1
 800e620:	e017      	b.n	800e652 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	685a      	ldr	r2, [r3, #4]
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	441a      	add	r2, r3
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	895a      	ldrh	r2, [r3, #10]
 800e638:	89fb      	ldrh	r3, [r7, #14]
 800e63a:	1ad3      	subs	r3, r2, r3
 800e63c:	b29a      	uxth	r2, r3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	891a      	ldrh	r2, [r3, #8]
 800e646:	89fb      	ldrh	r3, [r7, #14]
 800e648:	1ad3      	subs	r3, r2, r3
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e650:	2300      	movs	r3, #0
}
 800e652:	4618      	mov	r0, r3
 800e654:	3710      	adds	r7, #16
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	0801a8e0 	.word	0x0801a8e0
 800e660:	0801aa44 	.word	0x0801aa44
 800e664:	0801a940 	.word	0x0801a940
 800e668:	0801aa50 	.word	0x0801aa50

0800e66c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	460b      	mov	r3, r1
 800e676:	807b      	strh	r3, [r7, #2]
 800e678:	4613      	mov	r3, r2
 800e67a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e67c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e680:	2b00      	cmp	r3, #0
 800e682:	da08      	bge.n	800e696 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e688:	425b      	negs	r3, r3
 800e68a:	4619      	mov	r1, r3
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f7ff ff9b 	bl	800e5c8 <pbuf_remove_header>
 800e692:	4603      	mov	r3, r0
 800e694:	e007      	b.n	800e6a6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e696:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e69a:	787a      	ldrb	r2, [r7, #1]
 800e69c:	4619      	mov	r1, r3
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7ff ff1a 	bl	800e4d8 <pbuf_add_header_impl>
 800e6a4:	4603      	mov	r3, r0
  }
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3708      	adds	r7, #8
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b082      	sub	sp, #8
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e6ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f7ff ffd2 	bl	800e66c <pbuf_header_impl>
 800e6c8:	4603      	mov	r3, r0
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3708      	adds	r7, #8
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
	...

0800e6d4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b088      	sub	sp, #32
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d10b      	bne.n	800e6fa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d106      	bne.n	800e6f6 <pbuf_free+0x22>
 800e6e8:	4b3b      	ldr	r3, [pc, #236]	; (800e7d8 <pbuf_free+0x104>)
 800e6ea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e6ee:	493b      	ldr	r1, [pc, #236]	; (800e7dc <pbuf_free+0x108>)
 800e6f0:	483b      	ldr	r0, [pc, #236]	; (800e7e0 <pbuf_free+0x10c>)
 800e6f2:	f009 ff61 	bl	80185b8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	e069      	b.n	800e7ce <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e6fe:	e062      	b.n	800e7c6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e700:	f009 fd32 	bl	8018168 <sys_arch_protect>
 800e704:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	7b9b      	ldrb	r3, [r3, #14]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d106      	bne.n	800e71c <pbuf_free+0x48>
 800e70e:	4b32      	ldr	r3, [pc, #200]	; (800e7d8 <pbuf_free+0x104>)
 800e710:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e714:	4933      	ldr	r1, [pc, #204]	; (800e7e4 <pbuf_free+0x110>)
 800e716:	4832      	ldr	r0, [pc, #200]	; (800e7e0 <pbuf_free+0x10c>)
 800e718:	f009 ff4e 	bl	80185b8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	7b9b      	ldrb	r3, [r3, #14]
 800e720:	3b01      	subs	r3, #1
 800e722:	b2da      	uxtb	r2, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	739a      	strb	r2, [r3, #14]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	7b9b      	ldrb	r3, [r3, #14]
 800e72c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e72e:	69b8      	ldr	r0, [r7, #24]
 800e730:	f009 fd28 	bl	8018184 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e734:	7dfb      	ldrb	r3, [r7, #23]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d143      	bne.n	800e7c2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	7b1b      	ldrb	r3, [r3, #12]
 800e744:	f003 030f 	and.w	r3, r3, #15
 800e748:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	7b5b      	ldrb	r3, [r3, #13]
 800e74e:	f003 0302 	and.w	r3, r3, #2
 800e752:	2b00      	cmp	r3, #0
 800e754:	d011      	beq.n	800e77a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	691b      	ldr	r3, [r3, #16]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d106      	bne.n	800e770 <pbuf_free+0x9c>
 800e762:	4b1d      	ldr	r3, [pc, #116]	; (800e7d8 <pbuf_free+0x104>)
 800e764:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e768:	491f      	ldr	r1, [pc, #124]	; (800e7e8 <pbuf_free+0x114>)
 800e76a:	481d      	ldr	r0, [pc, #116]	; (800e7e0 <pbuf_free+0x10c>)
 800e76c:	f009 ff24 	bl	80185b8 <iprintf>
        pc->custom_free_function(p);
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	691b      	ldr	r3, [r3, #16]
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	4798      	blx	r3
 800e778:	e01d      	b.n	800e7b6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e77a:	7bfb      	ldrb	r3, [r7, #15]
 800e77c:	2b02      	cmp	r3, #2
 800e77e:	d104      	bne.n	800e78a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e780:	6879      	ldr	r1, [r7, #4]
 800e782:	200c      	movs	r0, #12
 800e784:	f7ff f966 	bl	800da54 <memp_free>
 800e788:	e015      	b.n	800e7b6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e78a:	7bfb      	ldrb	r3, [r7, #15]
 800e78c:	2b01      	cmp	r3, #1
 800e78e:	d104      	bne.n	800e79a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e790:	6879      	ldr	r1, [r7, #4]
 800e792:	200b      	movs	r0, #11
 800e794:	f7ff f95e 	bl	800da54 <memp_free>
 800e798:	e00d      	b.n	800e7b6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e79a:	7bfb      	ldrb	r3, [r7, #15]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d103      	bne.n	800e7a8 <pbuf_free+0xd4>
          mem_free(p);
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f7fe fde9 	bl	800d378 <mem_free>
 800e7a6:	e006      	b.n	800e7b6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e7a8:	4b0b      	ldr	r3, [pc, #44]	; (800e7d8 <pbuf_free+0x104>)
 800e7aa:	f240 320f 	movw	r2, #783	; 0x30f
 800e7ae:	490f      	ldr	r1, [pc, #60]	; (800e7ec <pbuf_free+0x118>)
 800e7b0:	480b      	ldr	r0, [pc, #44]	; (800e7e0 <pbuf_free+0x10c>)
 800e7b2:	f009 ff01 	bl	80185b8 <iprintf>
        }
      }
      count++;
 800e7b6:	7ffb      	ldrb	r3, [r7, #31]
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	607b      	str	r3, [r7, #4]
 800e7c0:	e001      	b.n	800e7c6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d199      	bne.n	800e700 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e7cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3720      	adds	r7, #32
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	0801a8e0 	.word	0x0801a8e0
 800e7dc:	0801aa44 	.word	0x0801aa44
 800e7e0:	0801a940 	.word	0x0801a940
 800e7e4:	0801aa70 	.word	0x0801aa70
 800e7e8:	0801aa88 	.word	0x0801aa88
 800e7ec:	0801aaac 	.word	0x0801aaac

0800e7f0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b085      	sub	sp, #20
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e7fc:	e005      	b.n	800e80a <pbuf_clen+0x1a>
    ++len;
 800e7fe:	89fb      	ldrh	r3, [r7, #14]
 800e800:	3301      	adds	r3, #1
 800e802:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d1f6      	bne.n	800e7fe <pbuf_clen+0xe>
  }
  return len;
 800e810:	89fb      	ldrh	r3, [r7, #14]
}
 800e812:	4618      	mov	r0, r3
 800e814:	3714      	adds	r7, #20
 800e816:	46bd      	mov	sp, r7
 800e818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81c:	4770      	bx	lr
	...

0800e820 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d016      	beq.n	800e85c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e82e:	f009 fc9b 	bl	8018168 <sys_arch_protect>
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	7b9b      	ldrb	r3, [r3, #14]
 800e838:	3301      	adds	r3, #1
 800e83a:	b2da      	uxtb	r2, r3
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	739a      	strb	r2, [r3, #14]
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f009 fc9f 	bl	8018184 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	7b9b      	ldrb	r3, [r3, #14]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d106      	bne.n	800e85c <pbuf_ref+0x3c>
 800e84e:	4b05      	ldr	r3, [pc, #20]	; (800e864 <pbuf_ref+0x44>)
 800e850:	f240 3242 	movw	r2, #834	; 0x342
 800e854:	4904      	ldr	r1, [pc, #16]	; (800e868 <pbuf_ref+0x48>)
 800e856:	4805      	ldr	r0, [pc, #20]	; (800e86c <pbuf_ref+0x4c>)
 800e858:	f009 feae 	bl	80185b8 <iprintf>
  }
}
 800e85c:	bf00      	nop
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}
 800e864:	0801a8e0 	.word	0x0801a8e0
 800e868:	0801aac0 	.word	0x0801aac0
 800e86c:	0801a940 	.word	0x0801a940

0800e870 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d002      	beq.n	800e886 <pbuf_cat+0x16>
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d107      	bne.n	800e896 <pbuf_cat+0x26>
 800e886:	4b20      	ldr	r3, [pc, #128]	; (800e908 <pbuf_cat+0x98>)
 800e888:	f240 3259 	movw	r2, #857	; 0x359
 800e88c:	491f      	ldr	r1, [pc, #124]	; (800e90c <pbuf_cat+0x9c>)
 800e88e:	4820      	ldr	r0, [pc, #128]	; (800e910 <pbuf_cat+0xa0>)
 800e890:	f009 fe92 	bl	80185b8 <iprintf>
 800e894:	e034      	b.n	800e900 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	60fb      	str	r3, [r7, #12]
 800e89a:	e00a      	b.n	800e8b2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	891a      	ldrh	r2, [r3, #8]
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	891b      	ldrh	r3, [r3, #8]
 800e8a4:	4413      	add	r3, r2
 800e8a6:	b29a      	uxth	r2, r3
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	60fb      	str	r3, [r7, #12]
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d1f0      	bne.n	800e89c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	891a      	ldrh	r2, [r3, #8]
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	895b      	ldrh	r3, [r3, #10]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d006      	beq.n	800e8d4 <pbuf_cat+0x64>
 800e8c6:	4b10      	ldr	r3, [pc, #64]	; (800e908 <pbuf_cat+0x98>)
 800e8c8:	f240 3262 	movw	r2, #866	; 0x362
 800e8cc:	4911      	ldr	r1, [pc, #68]	; (800e914 <pbuf_cat+0xa4>)
 800e8ce:	4810      	ldr	r0, [pc, #64]	; (800e910 <pbuf_cat+0xa0>)
 800e8d0:	f009 fe72 	bl	80185b8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d006      	beq.n	800e8ea <pbuf_cat+0x7a>
 800e8dc:	4b0a      	ldr	r3, [pc, #40]	; (800e908 <pbuf_cat+0x98>)
 800e8de:	f240 3263 	movw	r2, #867	; 0x363
 800e8e2:	490d      	ldr	r1, [pc, #52]	; (800e918 <pbuf_cat+0xa8>)
 800e8e4:	480a      	ldr	r0, [pc, #40]	; (800e910 <pbuf_cat+0xa0>)
 800e8e6:	f009 fe67 	bl	80185b8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	891a      	ldrh	r2, [r3, #8]
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	891b      	ldrh	r3, [r3, #8]
 800e8f2:	4413      	add	r3, r2
 800e8f4:	b29a      	uxth	r2, r3
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	683a      	ldr	r2, [r7, #0]
 800e8fe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	0801a8e0 	.word	0x0801a8e0
 800e90c:	0801aad4 	.word	0x0801aad4
 800e910:	0801a940 	.word	0x0801a940
 800e914:	0801ab0c 	.word	0x0801ab0c
 800e918:	0801ab3c 	.word	0x0801ab3c

0800e91c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e926:	6839      	ldr	r1, [r7, #0]
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f7ff ffa1 	bl	800e870 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e92e:	6838      	ldr	r0, [r7, #0]
 800e930:	f7ff ff76 	bl	800e820 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e934:	bf00      	nop
 800e936:	3708      	adds	r7, #8
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b086      	sub	sp, #24
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e946:	2300      	movs	r3, #0
 800e948:	617b      	str	r3, [r7, #20]
 800e94a:	2300      	movs	r3, #0
 800e94c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d008      	beq.n	800e966 <pbuf_copy+0x2a>
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d005      	beq.n	800e966 <pbuf_copy+0x2a>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	891a      	ldrh	r2, [r3, #8]
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	891b      	ldrh	r3, [r3, #8]
 800e962:	429a      	cmp	r2, r3
 800e964:	d209      	bcs.n	800e97a <pbuf_copy+0x3e>
 800e966:	4b57      	ldr	r3, [pc, #348]	; (800eac4 <pbuf_copy+0x188>)
 800e968:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e96c:	4956      	ldr	r1, [pc, #344]	; (800eac8 <pbuf_copy+0x18c>)
 800e96e:	4857      	ldr	r0, [pc, #348]	; (800eacc <pbuf_copy+0x190>)
 800e970:	f009 fe22 	bl	80185b8 <iprintf>
 800e974:	f06f 030f 	mvn.w	r3, #15
 800e978:	e09f      	b.n	800eaba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	895b      	ldrh	r3, [r3, #10]
 800e97e:	461a      	mov	r2, r3
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	1ad2      	subs	r2, r2, r3
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	895b      	ldrh	r3, [r3, #10]
 800e988:	4619      	mov	r1, r3
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	1acb      	subs	r3, r1, r3
 800e98e:	429a      	cmp	r2, r3
 800e990:	d306      	bcc.n	800e9a0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	895b      	ldrh	r3, [r3, #10]
 800e996:	461a      	mov	r2, r3
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	60fb      	str	r3, [r7, #12]
 800e99e:	e005      	b.n	800e9ac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	895b      	ldrh	r3, [r3, #10]
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	1ad3      	subs	r3, r2, r3
 800e9aa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	685a      	ldr	r2, [r3, #4]
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	18d0      	adds	r0, r2, r3
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	685a      	ldr	r2, [r3, #4]
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	68fa      	ldr	r2, [r7, #12]
 800e9be:	4619      	mov	r1, r3
 800e9c0:	f009 fd20 	bl	8018404 <memcpy>
    offset_to += len;
 800e9c4:	697a      	ldr	r2, [r7, #20]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e9cc:	693a      	ldr	r2, [r7, #16]
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	4413      	add	r3, r2
 800e9d2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	895b      	ldrh	r3, [r3, #10]
 800e9d8:	461a      	mov	r2, r3
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d906      	bls.n	800e9ee <pbuf_copy+0xb2>
 800e9e0:	4b38      	ldr	r3, [pc, #224]	; (800eac4 <pbuf_copy+0x188>)
 800e9e2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e9e6:	493a      	ldr	r1, [pc, #232]	; (800ead0 <pbuf_copy+0x194>)
 800e9e8:	4838      	ldr	r0, [pc, #224]	; (800eacc <pbuf_copy+0x190>)
 800e9ea:	f009 fde5 	bl	80185b8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	895b      	ldrh	r3, [r3, #10]
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d906      	bls.n	800ea08 <pbuf_copy+0xcc>
 800e9fa:	4b32      	ldr	r3, [pc, #200]	; (800eac4 <pbuf_copy+0x188>)
 800e9fc:	f240 32da 	movw	r2, #986	; 0x3da
 800ea00:	4934      	ldr	r1, [pc, #208]	; (800ead4 <pbuf_copy+0x198>)
 800ea02:	4832      	ldr	r0, [pc, #200]	; (800eacc <pbuf_copy+0x190>)
 800ea04:	f009 fdd8 	bl	80185b8 <iprintf>
    if (offset_from >= p_from->len) {
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	895b      	ldrh	r3, [r3, #10]
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d304      	bcc.n	800ea1e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ea14:	2300      	movs	r3, #0
 800ea16:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	895b      	ldrh	r3, [r3, #10]
 800ea22:	461a      	mov	r2, r3
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d114      	bne.n	800ea54 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10c      	bne.n	800ea54 <pbuf_copy+0x118>
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d009      	beq.n	800ea54 <pbuf_copy+0x118>
 800ea40:	4b20      	ldr	r3, [pc, #128]	; (800eac4 <pbuf_copy+0x188>)
 800ea42:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ea46:	4924      	ldr	r1, [pc, #144]	; (800ead8 <pbuf_copy+0x19c>)
 800ea48:	4820      	ldr	r0, [pc, #128]	; (800eacc <pbuf_copy+0x190>)
 800ea4a:	f009 fdb5 	bl	80185b8 <iprintf>
 800ea4e:	f06f 030f 	mvn.w	r3, #15
 800ea52:	e032      	b.n	800eaba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d013      	beq.n	800ea82 <pbuf_copy+0x146>
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	895a      	ldrh	r2, [r3, #10]
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	891b      	ldrh	r3, [r3, #8]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d10d      	bne.n	800ea82 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d009      	beq.n	800ea82 <pbuf_copy+0x146>
 800ea6e:	4b15      	ldr	r3, [pc, #84]	; (800eac4 <pbuf_copy+0x188>)
 800ea70:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ea74:	4919      	ldr	r1, [pc, #100]	; (800eadc <pbuf_copy+0x1a0>)
 800ea76:	4815      	ldr	r0, [pc, #84]	; (800eacc <pbuf_copy+0x190>)
 800ea78:	f009 fd9e 	bl	80185b8 <iprintf>
 800ea7c:	f06f 0305 	mvn.w	r3, #5
 800ea80:	e01b      	b.n	800eaba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d013      	beq.n	800eab0 <pbuf_copy+0x174>
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	895a      	ldrh	r2, [r3, #10]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	891b      	ldrh	r3, [r3, #8]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d10d      	bne.n	800eab0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d009      	beq.n	800eab0 <pbuf_copy+0x174>
 800ea9c:	4b09      	ldr	r3, [pc, #36]	; (800eac4 <pbuf_copy+0x188>)
 800ea9e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800eaa2:	490e      	ldr	r1, [pc, #56]	; (800eadc <pbuf_copy+0x1a0>)
 800eaa4:	4809      	ldr	r0, [pc, #36]	; (800eacc <pbuf_copy+0x190>)
 800eaa6:	f009 fd87 	bl	80185b8 <iprintf>
 800eaaa:	f06f 0305 	mvn.w	r3, #5
 800eaae:	e004      	b.n	800eaba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f47f af61 	bne.w	800e97a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800eab8:	2300      	movs	r3, #0
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3718      	adds	r7, #24
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	0801a8e0 	.word	0x0801a8e0
 800eac8:	0801ab88 	.word	0x0801ab88
 800eacc:	0801a940 	.word	0x0801a940
 800ead0:	0801abb8 	.word	0x0801abb8
 800ead4:	0801abd0 	.word	0x0801abd0
 800ead8:	0801abec 	.word	0x0801abec
 800eadc:	0801abfc 	.word	0x0801abfc

0800eae0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b088      	sub	sp, #32
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	4611      	mov	r1, r2
 800eaec:	461a      	mov	r2, r3
 800eaee:	460b      	mov	r3, r1
 800eaf0:	80fb      	strh	r3, [r7, #6]
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800eafa:	2300      	movs	r3, #0
 800eafc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d108      	bne.n	800eb16 <pbuf_copy_partial+0x36>
 800eb04:	4b2b      	ldr	r3, [pc, #172]	; (800ebb4 <pbuf_copy_partial+0xd4>)
 800eb06:	f240 420a 	movw	r2, #1034	; 0x40a
 800eb0a:	492b      	ldr	r1, [pc, #172]	; (800ebb8 <pbuf_copy_partial+0xd8>)
 800eb0c:	482b      	ldr	r0, [pc, #172]	; (800ebbc <pbuf_copy_partial+0xdc>)
 800eb0e:	f009 fd53 	bl	80185b8 <iprintf>
 800eb12:	2300      	movs	r3, #0
 800eb14:	e04a      	b.n	800ebac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d108      	bne.n	800eb2e <pbuf_copy_partial+0x4e>
 800eb1c:	4b25      	ldr	r3, [pc, #148]	; (800ebb4 <pbuf_copy_partial+0xd4>)
 800eb1e:	f240 420b 	movw	r2, #1035	; 0x40b
 800eb22:	4927      	ldr	r1, [pc, #156]	; (800ebc0 <pbuf_copy_partial+0xe0>)
 800eb24:	4825      	ldr	r0, [pc, #148]	; (800ebbc <pbuf_copy_partial+0xdc>)
 800eb26:	f009 fd47 	bl	80185b8 <iprintf>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	e03e      	b.n	800ebac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	61fb      	str	r3, [r7, #28]
 800eb32:	e034      	b.n	800eb9e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800eb34:	88bb      	ldrh	r3, [r7, #4]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d00a      	beq.n	800eb50 <pbuf_copy_partial+0x70>
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	895b      	ldrh	r3, [r3, #10]
 800eb3e:	88ba      	ldrh	r2, [r7, #4]
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d305      	bcc.n	800eb50 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	895b      	ldrh	r3, [r3, #10]
 800eb48:	88ba      	ldrh	r2, [r7, #4]
 800eb4a:	1ad3      	subs	r3, r2, r3
 800eb4c:	80bb      	strh	r3, [r7, #4]
 800eb4e:	e023      	b.n	800eb98 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800eb50:	69fb      	ldr	r3, [r7, #28]
 800eb52:	895a      	ldrh	r2, [r3, #10]
 800eb54:	88bb      	ldrh	r3, [r7, #4]
 800eb56:	1ad3      	subs	r3, r2, r3
 800eb58:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800eb5a:	8b3a      	ldrh	r2, [r7, #24]
 800eb5c:	88fb      	ldrh	r3, [r7, #6]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d901      	bls.n	800eb66 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800eb62:	88fb      	ldrh	r3, [r7, #6]
 800eb64:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800eb66:	8b7b      	ldrh	r3, [r7, #26]
 800eb68:	68ba      	ldr	r2, [r7, #8]
 800eb6a:	18d0      	adds	r0, r2, r3
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	685a      	ldr	r2, [r3, #4]
 800eb70:	88bb      	ldrh	r3, [r7, #4]
 800eb72:	4413      	add	r3, r2
 800eb74:	8b3a      	ldrh	r2, [r7, #24]
 800eb76:	4619      	mov	r1, r3
 800eb78:	f009 fc44 	bl	8018404 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800eb7c:	8afa      	ldrh	r2, [r7, #22]
 800eb7e:	8b3b      	ldrh	r3, [r7, #24]
 800eb80:	4413      	add	r3, r2
 800eb82:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800eb84:	8b7a      	ldrh	r2, [r7, #26]
 800eb86:	8b3b      	ldrh	r3, [r7, #24]
 800eb88:	4413      	add	r3, r2
 800eb8a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800eb8c:	88fa      	ldrh	r2, [r7, #6]
 800eb8e:	8b3b      	ldrh	r3, [r7, #24]
 800eb90:	1ad3      	subs	r3, r2, r3
 800eb92:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800eb94:	2300      	movs	r3, #0
 800eb96:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	61fb      	str	r3, [r7, #28]
 800eb9e:	88fb      	ldrh	r3, [r7, #6]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d002      	beq.n	800ebaa <pbuf_copy_partial+0xca>
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d1c4      	bne.n	800eb34 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ebaa:	8afb      	ldrh	r3, [r7, #22]
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3720      	adds	r7, #32
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	0801a8e0 	.word	0x0801a8e0
 800ebb8:	0801ac28 	.word	0x0801ac28
 800ebbc:	0801a940 	.word	0x0801a940
 800ebc0:	0801ac48 	.word	0x0801ac48

0800ebc4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	4603      	mov	r3, r0
 800ebcc:	603a      	str	r2, [r7, #0]
 800ebce:	71fb      	strb	r3, [r7, #7]
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	8919      	ldrh	r1, [r3, #8]
 800ebd8:	88ba      	ldrh	r2, [r7, #4]
 800ebda:	79fb      	ldrb	r3, [r7, #7]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7ff fa95 	bl	800e10c <pbuf_alloc>
 800ebe2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d101      	bne.n	800ebee <pbuf_clone+0x2a>
    return NULL;
 800ebea:	2300      	movs	r3, #0
 800ebec:	e011      	b.n	800ec12 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ebee:	6839      	ldr	r1, [r7, #0]
 800ebf0:	68f8      	ldr	r0, [r7, #12]
 800ebf2:	f7ff fea3 	bl	800e93c <pbuf_copy>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ebfa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d006      	beq.n	800ec10 <pbuf_clone+0x4c>
 800ec02:	4b06      	ldr	r3, [pc, #24]	; (800ec1c <pbuf_clone+0x58>)
 800ec04:	f240 5224 	movw	r2, #1316	; 0x524
 800ec08:	4905      	ldr	r1, [pc, #20]	; (800ec20 <pbuf_clone+0x5c>)
 800ec0a:	4806      	ldr	r0, [pc, #24]	; (800ec24 <pbuf_clone+0x60>)
 800ec0c:	f009 fcd4 	bl	80185b8 <iprintf>
  return q;
 800ec10:	68fb      	ldr	r3, [r7, #12]
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3710      	adds	r7, #16
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	0801a8e0 	.word	0x0801a8e0
 800ec20:	0801ad54 	.word	0x0801ad54
 800ec24:	0801a940 	.word	0x0801a940

0800ec28 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ec2c:	f009 fcdc 	bl	80185e8 <rand>
 800ec30:	4603      	mov	r3, r0
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	4b01      	ldr	r3, [pc, #4]	; (800ec48 <tcp_init+0x20>)
 800ec42:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ec44:	bf00      	nop
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	200000a4 	.word	0x200000a4

0800ec4c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	7d1b      	ldrb	r3, [r3, #20]
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d105      	bne.n	800ec68 <tcp_free+0x1c>
 800ec5c:	4b06      	ldr	r3, [pc, #24]	; (800ec78 <tcp_free+0x2c>)
 800ec5e:	22d4      	movs	r2, #212	; 0xd4
 800ec60:	4906      	ldr	r1, [pc, #24]	; (800ec7c <tcp_free+0x30>)
 800ec62:	4807      	ldr	r0, [pc, #28]	; (800ec80 <tcp_free+0x34>)
 800ec64:	f009 fca8 	bl	80185b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ec68:	6879      	ldr	r1, [r7, #4]
 800ec6a:	2001      	movs	r0, #1
 800ec6c:	f7fe fef2 	bl	800da54 <memp_free>
}
 800ec70:	bf00      	nop
 800ec72:	3708      	adds	r7, #8
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	0801ade0 	.word	0x0801ade0
 800ec7c:	0801ae10 	.word	0x0801ae10
 800ec80:	0801ae24 	.word	0x0801ae24

0800ec84 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	7d1b      	ldrb	r3, [r3, #20]
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d105      	bne.n	800eca0 <tcp_free_listen+0x1c>
 800ec94:	4b06      	ldr	r3, [pc, #24]	; (800ecb0 <tcp_free_listen+0x2c>)
 800ec96:	22df      	movs	r2, #223	; 0xdf
 800ec98:	4906      	ldr	r1, [pc, #24]	; (800ecb4 <tcp_free_listen+0x30>)
 800ec9a:	4807      	ldr	r0, [pc, #28]	; (800ecb8 <tcp_free_listen+0x34>)
 800ec9c:	f009 fc8c 	bl	80185b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800eca0:	6879      	ldr	r1, [r7, #4]
 800eca2:	2002      	movs	r0, #2
 800eca4:	f7fe fed6 	bl	800da54 <memp_free>
}
 800eca8:	bf00      	nop
 800ecaa:	3708      	adds	r7, #8
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}
 800ecb0:	0801ade0 	.word	0x0801ade0
 800ecb4:	0801ae4c 	.word	0x0801ae4c
 800ecb8:	0801ae24 	.word	0x0801ae24

0800ecbc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ecc0:	f000 ffdc 	bl	800fc7c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ecc4:	4b07      	ldr	r3, [pc, #28]	; (800ece4 <tcp_tmr+0x28>)
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	4b05      	ldr	r3, [pc, #20]	; (800ece4 <tcp_tmr+0x28>)
 800ecce:	701a      	strb	r2, [r3, #0]
 800ecd0:	4b04      	ldr	r3, [pc, #16]	; (800ece4 <tcp_tmr+0x28>)
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	f003 0301 	and.w	r3, r3, #1
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d001      	beq.n	800ece0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ecdc:	f000 fc8e 	bl	800f5fc <tcp_slowtmr>
  }
}
 800ece0:	bf00      	nop
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	20006991 	.word	0x20006991

0800ece8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d105      	bne.n	800ed04 <tcp_remove_listener+0x1c>
 800ecf8:	4b0d      	ldr	r3, [pc, #52]	; (800ed30 <tcp_remove_listener+0x48>)
 800ecfa:	22ff      	movs	r2, #255	; 0xff
 800ecfc:	490d      	ldr	r1, [pc, #52]	; (800ed34 <tcp_remove_listener+0x4c>)
 800ecfe:	480e      	ldr	r0, [pc, #56]	; (800ed38 <tcp_remove_listener+0x50>)
 800ed00:	f009 fc5a 	bl	80185b8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	60fb      	str	r3, [r7, #12]
 800ed08:	e00a      	b.n	800ed20 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed0e:	683a      	ldr	r2, [r7, #0]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d102      	bne.n	800ed1a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2200      	movs	r2, #0
 800ed18:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	68db      	ldr	r3, [r3, #12]
 800ed1e:	60fb      	str	r3, [r7, #12]
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1f1      	bne.n	800ed0a <tcp_remove_listener+0x22>
    }
  }
}
 800ed26:	bf00      	nop
 800ed28:	bf00      	nop
 800ed2a:	3710      	adds	r7, #16
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	0801ade0 	.word	0x0801ade0
 800ed34:	0801ae68 	.word	0x0801ae68
 800ed38:	0801ae24 	.word	0x0801ae24

0800ed3c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d106      	bne.n	800ed58 <tcp_listen_closed+0x1c>
 800ed4a:	4b14      	ldr	r3, [pc, #80]	; (800ed9c <tcp_listen_closed+0x60>)
 800ed4c:	f240 1211 	movw	r2, #273	; 0x111
 800ed50:	4913      	ldr	r1, [pc, #76]	; (800eda0 <tcp_listen_closed+0x64>)
 800ed52:	4814      	ldr	r0, [pc, #80]	; (800eda4 <tcp_listen_closed+0x68>)
 800ed54:	f009 fc30 	bl	80185b8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	7d1b      	ldrb	r3, [r3, #20]
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d006      	beq.n	800ed6e <tcp_listen_closed+0x32>
 800ed60:	4b0e      	ldr	r3, [pc, #56]	; (800ed9c <tcp_listen_closed+0x60>)
 800ed62:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ed66:	4910      	ldr	r1, [pc, #64]	; (800eda8 <tcp_listen_closed+0x6c>)
 800ed68:	480e      	ldr	r0, [pc, #56]	; (800eda4 <tcp_listen_closed+0x68>)
 800ed6a:	f009 fc25 	bl	80185b8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ed6e:	2301      	movs	r3, #1
 800ed70:	60fb      	str	r3, [r7, #12]
 800ed72:	e00b      	b.n	800ed8c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ed74:	4a0d      	ldr	r2, [pc, #52]	; (800edac <tcp_listen_closed+0x70>)
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	6879      	ldr	r1, [r7, #4]
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7ff ffb1 	bl	800ece8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	3301      	adds	r3, #1
 800ed8a:	60fb      	str	r3, [r7, #12]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2b03      	cmp	r3, #3
 800ed90:	d9f0      	bls.n	800ed74 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ed92:	bf00      	nop
 800ed94:	bf00      	nop
 800ed96:	3710      	adds	r7, #16
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}
 800ed9c:	0801ade0 	.word	0x0801ade0
 800eda0:	0801ae90 	.word	0x0801ae90
 800eda4:	0801ae24 	.word	0x0801ae24
 800eda8:	0801ae9c 	.word	0x0801ae9c
 800edac:	0801ce00 	.word	0x0801ce00

0800edb0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800edb0:	b5b0      	push	{r4, r5, r7, lr}
 800edb2:	b088      	sub	sp, #32
 800edb4:	af04      	add	r7, sp, #16
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	460b      	mov	r3, r1
 800edba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d106      	bne.n	800edd0 <tcp_close_shutdown+0x20>
 800edc2:	4b63      	ldr	r3, [pc, #396]	; (800ef50 <tcp_close_shutdown+0x1a0>)
 800edc4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800edc8:	4962      	ldr	r1, [pc, #392]	; (800ef54 <tcp_close_shutdown+0x1a4>)
 800edca:	4863      	ldr	r0, [pc, #396]	; (800ef58 <tcp_close_shutdown+0x1a8>)
 800edcc:	f009 fbf4 	bl	80185b8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800edd0:	78fb      	ldrb	r3, [r7, #3]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d066      	beq.n	800eea4 <tcp_close_shutdown+0xf4>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	7d1b      	ldrb	r3, [r3, #20]
 800edda:	2b04      	cmp	r3, #4
 800eddc:	d003      	beq.n	800ede6 <tcp_close_shutdown+0x36>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	7d1b      	ldrb	r3, [r3, #20]
 800ede2:	2b07      	cmp	r3, #7
 800ede4:	d15e      	bne.n	800eea4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edea:	2b00      	cmp	r3, #0
 800edec:	d104      	bne.n	800edf8 <tcp_close_shutdown+0x48>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800edf2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800edf6:	d055      	beq.n	800eea4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	8b5b      	ldrh	r3, [r3, #26]
 800edfc:	f003 0310 	and.w	r3, r3, #16
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d106      	bne.n	800ee12 <tcp_close_shutdown+0x62>
 800ee04:	4b52      	ldr	r3, [pc, #328]	; (800ef50 <tcp_close_shutdown+0x1a0>)
 800ee06:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ee0a:	4954      	ldr	r1, [pc, #336]	; (800ef5c <tcp_close_shutdown+0x1ac>)
 800ee0c:	4852      	ldr	r0, [pc, #328]	; (800ef58 <tcp_close_shutdown+0x1a8>)
 800ee0e:	f009 fbd3 	bl	80185b8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ee1a:	687d      	ldr	r5, [r7, #4]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	3304      	adds	r3, #4
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	8ad2      	ldrh	r2, [r2, #22]
 800ee24:	6879      	ldr	r1, [r7, #4]
 800ee26:	8b09      	ldrh	r1, [r1, #24]
 800ee28:	9102      	str	r1, [sp, #8]
 800ee2a:	9201      	str	r2, [sp, #4]
 800ee2c:	9300      	str	r3, [sp, #0]
 800ee2e:	462b      	mov	r3, r5
 800ee30:	4622      	mov	r2, r4
 800ee32:	4601      	mov	r1, r0
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f005 fced 	bl	8014814 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f001 face 	bl	80103dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ee40:	4b47      	ldr	r3, [pc, #284]	; (800ef60 <tcp_close_shutdown+0x1b0>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d105      	bne.n	800ee56 <tcp_close_shutdown+0xa6>
 800ee4a:	4b45      	ldr	r3, [pc, #276]	; (800ef60 <tcp_close_shutdown+0x1b0>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	68db      	ldr	r3, [r3, #12]
 800ee50:	4a43      	ldr	r2, [pc, #268]	; (800ef60 <tcp_close_shutdown+0x1b0>)
 800ee52:	6013      	str	r3, [r2, #0]
 800ee54:	e013      	b.n	800ee7e <tcp_close_shutdown+0xce>
 800ee56:	4b42      	ldr	r3, [pc, #264]	; (800ef60 <tcp_close_shutdown+0x1b0>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	60fb      	str	r3, [r7, #12]
 800ee5c:	e00c      	b.n	800ee78 <tcp_close_shutdown+0xc8>
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	68db      	ldr	r3, [r3, #12]
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d104      	bne.n	800ee72 <tcp_close_shutdown+0xc2>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	68da      	ldr	r2, [r3, #12]
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	60da      	str	r2, [r3, #12]
 800ee70:	e005      	b.n	800ee7e <tcp_close_shutdown+0xce>
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	60fb      	str	r3, [r7, #12]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d1ef      	bne.n	800ee5e <tcp_close_shutdown+0xae>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2200      	movs	r2, #0
 800ee82:	60da      	str	r2, [r3, #12]
 800ee84:	4b37      	ldr	r3, [pc, #220]	; (800ef64 <tcp_close_shutdown+0x1b4>)
 800ee86:	2201      	movs	r2, #1
 800ee88:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ee8a:	4b37      	ldr	r3, [pc, #220]	; (800ef68 <tcp_close_shutdown+0x1b8>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d102      	bne.n	800ee9a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ee94:	f003 ff62 	bl	8012d5c <tcp_trigger_input_pcb_close>
 800ee98:	e002      	b.n	800eea0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f7ff fed6 	bl	800ec4c <tcp_free>
      }
      return ERR_OK;
 800eea0:	2300      	movs	r3, #0
 800eea2:	e050      	b.n	800ef46 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	7d1b      	ldrb	r3, [r3, #20]
 800eea8:	2b02      	cmp	r3, #2
 800eeaa:	d03b      	beq.n	800ef24 <tcp_close_shutdown+0x174>
 800eeac:	2b02      	cmp	r3, #2
 800eeae:	dc44      	bgt.n	800ef3a <tcp_close_shutdown+0x18a>
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d002      	beq.n	800eeba <tcp_close_shutdown+0x10a>
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d02a      	beq.n	800ef0e <tcp_close_shutdown+0x15e>
 800eeb8:	e03f      	b.n	800ef3a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	8adb      	ldrh	r3, [r3, #22]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d021      	beq.n	800ef06 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eec2:	4b2a      	ldr	r3, [pc, #168]	; (800ef6c <tcp_close_shutdown+0x1bc>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d105      	bne.n	800eed8 <tcp_close_shutdown+0x128>
 800eecc:	4b27      	ldr	r3, [pc, #156]	; (800ef6c <tcp_close_shutdown+0x1bc>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	68db      	ldr	r3, [r3, #12]
 800eed2:	4a26      	ldr	r2, [pc, #152]	; (800ef6c <tcp_close_shutdown+0x1bc>)
 800eed4:	6013      	str	r3, [r2, #0]
 800eed6:	e013      	b.n	800ef00 <tcp_close_shutdown+0x150>
 800eed8:	4b24      	ldr	r3, [pc, #144]	; (800ef6c <tcp_close_shutdown+0x1bc>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	60bb      	str	r3, [r7, #8]
 800eede:	e00c      	b.n	800eefa <tcp_close_shutdown+0x14a>
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	687a      	ldr	r2, [r7, #4]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d104      	bne.n	800eef4 <tcp_close_shutdown+0x144>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	68da      	ldr	r2, [r3, #12]
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	60da      	str	r2, [r3, #12]
 800eef2:	e005      	b.n	800ef00 <tcp_close_shutdown+0x150>
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	68db      	ldr	r3, [r3, #12]
 800eef8:	60bb      	str	r3, [r7, #8]
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1ef      	bne.n	800eee0 <tcp_close_shutdown+0x130>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2200      	movs	r2, #0
 800ef04:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f7ff fea0 	bl	800ec4c <tcp_free>
      break;
 800ef0c:	e01a      	b.n	800ef44 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f7ff ff14 	bl	800ed3c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ef14:	6879      	ldr	r1, [r7, #4]
 800ef16:	4816      	ldr	r0, [pc, #88]	; (800ef70 <tcp_close_shutdown+0x1c0>)
 800ef18:	f001 fab0 	bl	801047c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f7ff feb1 	bl	800ec84 <tcp_free_listen>
      break;
 800ef22:	e00f      	b.n	800ef44 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ef24:	6879      	ldr	r1, [r7, #4]
 800ef26:	480e      	ldr	r0, [pc, #56]	; (800ef60 <tcp_close_shutdown+0x1b0>)
 800ef28:	f001 faa8 	bl	801047c <tcp_pcb_remove>
 800ef2c:	4b0d      	ldr	r3, [pc, #52]	; (800ef64 <tcp_close_shutdown+0x1b4>)
 800ef2e:	2201      	movs	r2, #1
 800ef30:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f7ff fe8a 	bl	800ec4c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ef38:	e004      	b.n	800ef44 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f000 f81a 	bl	800ef74 <tcp_close_shutdown_fin>
 800ef40:	4603      	mov	r3, r0
 800ef42:	e000      	b.n	800ef46 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ef44:	2300      	movs	r3, #0
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3710      	adds	r7, #16
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bdb0      	pop	{r4, r5, r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	0801ade0 	.word	0x0801ade0
 800ef54:	0801aeb4 	.word	0x0801aeb4
 800ef58:	0801ae24 	.word	0x0801ae24
 800ef5c:	0801aed4 	.word	0x0801aed4
 800ef60:	2000da14 	.word	0x2000da14
 800ef64:	2000da10 	.word	0x2000da10
 800ef68:	2000da28 	.word	0x2000da28
 800ef6c:	2000da20 	.word	0x2000da20
 800ef70:	2000da1c 	.word	0x2000da1c

0800ef74 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d106      	bne.n	800ef90 <tcp_close_shutdown_fin+0x1c>
 800ef82:	4b2e      	ldr	r3, [pc, #184]	; (800f03c <tcp_close_shutdown_fin+0xc8>)
 800ef84:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ef88:	492d      	ldr	r1, [pc, #180]	; (800f040 <tcp_close_shutdown_fin+0xcc>)
 800ef8a:	482e      	ldr	r0, [pc, #184]	; (800f044 <tcp_close_shutdown_fin+0xd0>)
 800ef8c:	f009 fb14 	bl	80185b8 <iprintf>

  switch (pcb->state) {
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	7d1b      	ldrb	r3, [r3, #20]
 800ef94:	2b07      	cmp	r3, #7
 800ef96:	d020      	beq.n	800efda <tcp_close_shutdown_fin+0x66>
 800ef98:	2b07      	cmp	r3, #7
 800ef9a:	dc2b      	bgt.n	800eff4 <tcp_close_shutdown_fin+0x80>
 800ef9c:	2b03      	cmp	r3, #3
 800ef9e:	d002      	beq.n	800efa6 <tcp_close_shutdown_fin+0x32>
 800efa0:	2b04      	cmp	r3, #4
 800efa2:	d00d      	beq.n	800efc0 <tcp_close_shutdown_fin+0x4c>
 800efa4:	e026      	b.n	800eff4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f004 fd42 	bl	8013a30 <tcp_send_fin>
 800efac:	4603      	mov	r3, r0
 800efae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800efb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d11f      	bne.n	800eff8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2205      	movs	r2, #5
 800efbc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800efbe:	e01b      	b.n	800eff8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f004 fd35 	bl	8013a30 <tcp_send_fin>
 800efc6:	4603      	mov	r3, r0
 800efc8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800efca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d114      	bne.n	800effc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2205      	movs	r2, #5
 800efd6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800efd8:	e010      	b.n	800effc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f004 fd28 	bl	8013a30 <tcp_send_fin>
 800efe0:	4603      	mov	r3, r0
 800efe2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800efe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d109      	bne.n	800f000 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2209      	movs	r2, #9
 800eff0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eff2:	e005      	b.n	800f000 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800eff4:	2300      	movs	r3, #0
 800eff6:	e01c      	b.n	800f032 <tcp_close_shutdown_fin+0xbe>
      break;
 800eff8:	bf00      	nop
 800effa:	e002      	b.n	800f002 <tcp_close_shutdown_fin+0x8e>
      break;
 800effc:	bf00      	nop
 800effe:	e000      	b.n	800f002 <tcp_close_shutdown_fin+0x8e>
      break;
 800f000:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d103      	bne.n	800f012 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f004 fe4e 	bl	8013cac <tcp_output>
 800f010:	e00d      	b.n	800f02e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f01a:	d108      	bne.n	800f02e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	8b5b      	ldrh	r3, [r3, #26]
 800f020:	f043 0308 	orr.w	r3, r3, #8
 800f024:	b29a      	uxth	r2, r3
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f02a:	2300      	movs	r3, #0
 800f02c:	e001      	b.n	800f032 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f02e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f032:	4618      	mov	r0, r3
 800f034:	3710      	adds	r7, #16
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	0801ade0 	.word	0x0801ade0
 800f040:	0801ae90 	.word	0x0801ae90
 800f044:	0801ae24 	.word	0x0801ae24

0800f048 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b082      	sub	sp, #8
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d109      	bne.n	800f06a <tcp_close+0x22>
 800f056:	4b0f      	ldr	r3, [pc, #60]	; (800f094 <tcp_close+0x4c>)
 800f058:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f05c:	490e      	ldr	r1, [pc, #56]	; (800f098 <tcp_close+0x50>)
 800f05e:	480f      	ldr	r0, [pc, #60]	; (800f09c <tcp_close+0x54>)
 800f060:	f009 faaa 	bl	80185b8 <iprintf>
 800f064:	f06f 030f 	mvn.w	r3, #15
 800f068:	e00f      	b.n	800f08a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	7d1b      	ldrb	r3, [r3, #20]
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d006      	beq.n	800f080 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	8b5b      	ldrh	r3, [r3, #26]
 800f076:	f043 0310 	orr.w	r3, r3, #16
 800f07a:	b29a      	uxth	r2, r3
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f080:	2101      	movs	r1, #1
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f7ff fe94 	bl	800edb0 <tcp_close_shutdown>
 800f088:	4603      	mov	r3, r0
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3708      	adds	r7, #8
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	0801ade0 	.word	0x0801ade0
 800f098:	0801aef0 	.word	0x0801aef0
 800f09c:	0801ae24 	.word	0x0801ae24

0800f0a0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b084      	sub	sp, #16
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	60f8      	str	r0, [r7, #12]
 800f0a8:	60b9      	str	r1, [r7, #8]
 800f0aa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d109      	bne.n	800f0c6 <tcp_shutdown+0x26>
 800f0b2:	4b26      	ldr	r3, [pc, #152]	; (800f14c <tcp_shutdown+0xac>)
 800f0b4:	f240 2207 	movw	r2, #519	; 0x207
 800f0b8:	4925      	ldr	r1, [pc, #148]	; (800f150 <tcp_shutdown+0xb0>)
 800f0ba:	4826      	ldr	r0, [pc, #152]	; (800f154 <tcp_shutdown+0xb4>)
 800f0bc:	f009 fa7c 	bl	80185b8 <iprintf>
 800f0c0:	f06f 030f 	mvn.w	r3, #15
 800f0c4:	e03d      	b.n	800f142 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	7d1b      	ldrb	r3, [r3, #20]
 800f0ca:	2b01      	cmp	r3, #1
 800f0cc:	d102      	bne.n	800f0d4 <tcp_shutdown+0x34>
    return ERR_CONN;
 800f0ce:	f06f 030a 	mvn.w	r3, #10
 800f0d2:	e036      	b.n	800f142 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d01b      	beq.n	800f112 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	8b5b      	ldrh	r3, [r3, #26]
 800f0de:	f043 0310 	orr.w	r3, r3, #16
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d005      	beq.n	800f0fa <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f0ee:	2101      	movs	r1, #1
 800f0f0:	68f8      	ldr	r0, [r7, #12]
 800f0f2:	f7ff fe5d 	bl	800edb0 <tcp_close_shutdown>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	e023      	b.n	800f142 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d007      	beq.n	800f112 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f106:	4618      	mov	r0, r3
 800f108:	f7ff fae4 	bl	800e6d4 <pbuf_free>
      pcb->refused_data = NULL;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2200      	movs	r2, #0
 800f110:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d013      	beq.n	800f140 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	7d1b      	ldrb	r3, [r3, #20]
 800f11c:	2b04      	cmp	r3, #4
 800f11e:	dc02      	bgt.n	800f126 <tcp_shutdown+0x86>
 800f120:	2b03      	cmp	r3, #3
 800f122:	da02      	bge.n	800f12a <tcp_shutdown+0x8a>
 800f124:	e009      	b.n	800f13a <tcp_shutdown+0x9a>
 800f126:	2b07      	cmp	r3, #7
 800f128:	d107      	bne.n	800f13a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	4619      	mov	r1, r3
 800f130:	68f8      	ldr	r0, [r7, #12]
 800f132:	f7ff fe3d 	bl	800edb0 <tcp_close_shutdown>
 800f136:	4603      	mov	r3, r0
 800f138:	e003      	b.n	800f142 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f13a:	f06f 030a 	mvn.w	r3, #10
 800f13e:	e000      	b.n	800f142 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	3710      	adds	r7, #16
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	0801ade0 	.word	0x0801ade0
 800f150:	0801af08 	.word	0x0801af08
 800f154:	0801ae24 	.word	0x0801ae24

0800f158 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b08e      	sub	sp, #56	; 0x38
 800f15c:	af04      	add	r7, sp, #16
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d107      	bne.n	800f178 <tcp_abandon+0x20>
 800f168:	4b52      	ldr	r3, [pc, #328]	; (800f2b4 <tcp_abandon+0x15c>)
 800f16a:	f240 223d 	movw	r2, #573	; 0x23d
 800f16e:	4952      	ldr	r1, [pc, #328]	; (800f2b8 <tcp_abandon+0x160>)
 800f170:	4852      	ldr	r0, [pc, #328]	; (800f2bc <tcp_abandon+0x164>)
 800f172:	f009 fa21 	bl	80185b8 <iprintf>
 800f176:	e099      	b.n	800f2ac <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	7d1b      	ldrb	r3, [r3, #20]
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d106      	bne.n	800f18e <tcp_abandon+0x36>
 800f180:	4b4c      	ldr	r3, [pc, #304]	; (800f2b4 <tcp_abandon+0x15c>)
 800f182:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f186:	494e      	ldr	r1, [pc, #312]	; (800f2c0 <tcp_abandon+0x168>)
 800f188:	484c      	ldr	r0, [pc, #304]	; (800f2bc <tcp_abandon+0x164>)
 800f18a:	f009 fa15 	bl	80185b8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	7d1b      	ldrb	r3, [r3, #20]
 800f192:	2b0a      	cmp	r3, #10
 800f194:	d107      	bne.n	800f1a6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f196:	6879      	ldr	r1, [r7, #4]
 800f198:	484a      	ldr	r0, [pc, #296]	; (800f2c4 <tcp_abandon+0x16c>)
 800f19a:	f001 f96f 	bl	801047c <tcp_pcb_remove>
    tcp_free(pcb);
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f7ff fd54 	bl	800ec4c <tcp_free>
 800f1a4:	e082      	b.n	800f2ac <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1b2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1c0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	691b      	ldr	r3, [r3, #16]
 800f1c6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	7d1b      	ldrb	r3, [r3, #20]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d126      	bne.n	800f21e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	8adb      	ldrh	r3, [r3, #22]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d02e      	beq.n	800f236 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f1d8:	4b3b      	ldr	r3, [pc, #236]	; (800f2c8 <tcp_abandon+0x170>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d105      	bne.n	800f1ee <tcp_abandon+0x96>
 800f1e2:	4b39      	ldr	r3, [pc, #228]	; (800f2c8 <tcp_abandon+0x170>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	4a37      	ldr	r2, [pc, #220]	; (800f2c8 <tcp_abandon+0x170>)
 800f1ea:	6013      	str	r3, [r2, #0]
 800f1ec:	e013      	b.n	800f216 <tcp_abandon+0xbe>
 800f1ee:	4b36      	ldr	r3, [pc, #216]	; (800f2c8 <tcp_abandon+0x170>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	61fb      	str	r3, [r7, #28]
 800f1f4:	e00c      	b.n	800f210 <tcp_abandon+0xb8>
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d104      	bne.n	800f20a <tcp_abandon+0xb2>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	68da      	ldr	r2, [r3, #12]
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	60da      	str	r2, [r3, #12]
 800f208:	e005      	b.n	800f216 <tcp_abandon+0xbe>
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	68db      	ldr	r3, [r3, #12]
 800f20e:	61fb      	str	r3, [r7, #28]
 800f210:	69fb      	ldr	r3, [r7, #28]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d1ef      	bne.n	800f1f6 <tcp_abandon+0x9e>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2200      	movs	r2, #0
 800f21a:	60da      	str	r2, [r3, #12]
 800f21c:	e00b      	b.n	800f236 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	8adb      	ldrh	r3, [r3, #22]
 800f226:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f228:	6879      	ldr	r1, [r7, #4]
 800f22a:	4828      	ldr	r0, [pc, #160]	; (800f2cc <tcp_abandon+0x174>)
 800f22c:	f001 f926 	bl	801047c <tcp_pcb_remove>
 800f230:	4b27      	ldr	r3, [pc, #156]	; (800f2d0 <tcp_abandon+0x178>)
 800f232:	2201      	movs	r2, #1
 800f234:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d004      	beq.n	800f248 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f242:	4618      	mov	r0, r3
 800f244:	f000 fdfa 	bl	800fe3c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d004      	beq.n	800f25a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f254:	4618      	mov	r0, r3
 800f256:	f000 fdf1 	bl	800fe3c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d004      	beq.n	800f26c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f266:	4618      	mov	r0, r3
 800f268:	f000 fde8 	bl	800fe3c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d00e      	beq.n	800f290 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f272:	6879      	ldr	r1, [r7, #4]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	3304      	adds	r3, #4
 800f278:	687a      	ldr	r2, [r7, #4]
 800f27a:	8b12      	ldrh	r2, [r2, #24]
 800f27c:	9202      	str	r2, [sp, #8]
 800f27e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f280:	9201      	str	r2, [sp, #4]
 800f282:	9300      	str	r3, [sp, #0]
 800f284:	460b      	mov	r3, r1
 800f286:	697a      	ldr	r2, [r7, #20]
 800f288:	69b9      	ldr	r1, [r7, #24]
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f005 fac2 	bl	8014814 <tcp_rst>
    }
    last_state = pcb->state;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	7d1b      	ldrb	r3, [r3, #20]
 800f294:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f7ff fcd8 	bl	800ec4c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d004      	beq.n	800f2ac <tcp_abandon+0x154>
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	f06f 010c 	mvn.w	r1, #12
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	4798      	blx	r3
  }
}
 800f2ac:	3728      	adds	r7, #40	; 0x28
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	0801ade0 	.word	0x0801ade0
 800f2b8:	0801af24 	.word	0x0801af24
 800f2bc:	0801ae24 	.word	0x0801ae24
 800f2c0:	0801af40 	.word	0x0801af40
 800f2c4:	2000da24 	.word	0x2000da24
 800f2c8:	2000da20 	.word	0x2000da20
 800f2cc:	2000da14 	.word	0x2000da14
 800f2d0:	2000da10 	.word	0x2000da10

0800f2d4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f2dc:	2101      	movs	r1, #1
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f7ff ff3a 	bl	800f158 <tcp_abandon>
}
 800f2e4:	bf00      	nop
 800f2e6:	3708      	adds	r7, #8
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}

0800f2ec <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b088      	sub	sp, #32
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	60f8      	str	r0, [r7, #12]
 800f2f4:	60b9      	str	r1, [r7, #8]
 800f2f6:	4613      	mov	r3, r2
 800f2f8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f2fa:	2304      	movs	r3, #4
 800f2fc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d101      	bne.n	800f308 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f304:	4b3e      	ldr	r3, [pc, #248]	; (800f400 <tcp_bind+0x114>)
 800f306:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d109      	bne.n	800f322 <tcp_bind+0x36>
 800f30e:	4b3d      	ldr	r3, [pc, #244]	; (800f404 <tcp_bind+0x118>)
 800f310:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f314:	493c      	ldr	r1, [pc, #240]	; (800f408 <tcp_bind+0x11c>)
 800f316:	483d      	ldr	r0, [pc, #244]	; (800f40c <tcp_bind+0x120>)
 800f318:	f009 f94e 	bl	80185b8 <iprintf>
 800f31c:	f06f 030f 	mvn.w	r3, #15
 800f320:	e06a      	b.n	800f3f8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	7d1b      	ldrb	r3, [r3, #20]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d009      	beq.n	800f33e <tcp_bind+0x52>
 800f32a:	4b36      	ldr	r3, [pc, #216]	; (800f404 <tcp_bind+0x118>)
 800f32c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f330:	4937      	ldr	r1, [pc, #220]	; (800f410 <tcp_bind+0x124>)
 800f332:	4836      	ldr	r0, [pc, #216]	; (800f40c <tcp_bind+0x120>)
 800f334:	f009 f940 	bl	80185b8 <iprintf>
 800f338:	f06f 0305 	mvn.w	r3, #5
 800f33c:	e05c      	b.n	800f3f8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f33e:	88fb      	ldrh	r3, [r7, #6]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d109      	bne.n	800f358 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f344:	f000 f914 	bl	800f570 <tcp_new_port>
 800f348:	4603      	mov	r3, r0
 800f34a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f34c:	88fb      	ldrh	r3, [r7, #6]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d135      	bne.n	800f3be <tcp_bind+0xd2>
      return ERR_BUF;
 800f352:	f06f 0301 	mvn.w	r3, #1
 800f356:	e04f      	b.n	800f3f8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f358:	2300      	movs	r3, #0
 800f35a:	61fb      	str	r3, [r7, #28]
 800f35c:	e02b      	b.n	800f3b6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f35e:	4a2d      	ldr	r2, [pc, #180]	; (800f414 <tcp_bind+0x128>)
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	61bb      	str	r3, [r7, #24]
 800f36a:	e01e      	b.n	800f3aa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	8adb      	ldrh	r3, [r3, #22]
 800f370:	88fa      	ldrh	r2, [r7, #6]
 800f372:	429a      	cmp	r2, r3
 800f374:	d116      	bne.n	800f3a4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f376:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d010      	beq.n	800f39e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f37c:	69bb      	ldr	r3, [r7, #24]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d00c      	beq.n	800f39e <tcp_bind+0xb2>
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d009      	beq.n	800f39e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d005      	beq.n	800f39e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f392:	69bb      	ldr	r3, [r7, #24]
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d102      	bne.n	800f3a4 <tcp_bind+0xb8>
              return ERR_USE;
 800f39e:	f06f 0307 	mvn.w	r3, #7
 800f3a2:	e029      	b.n	800f3f8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f3a4:	69bb      	ldr	r3, [r7, #24]
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	61bb      	str	r3, [r7, #24]
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d1dd      	bne.n	800f36c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	61fb      	str	r3, [r7, #28]
 800f3b6:	69fa      	ldr	r2, [r7, #28]
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	dbcf      	blt.n	800f35e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00c      	beq.n	800f3de <tcp_bind+0xf2>
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d008      	beq.n	800f3de <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d002      	beq.n	800f3d8 <tcp_bind+0xec>
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	e000      	b.n	800f3da <tcp_bind+0xee>
 800f3d8:	2300      	movs	r3, #0
 800f3da:	68fa      	ldr	r2, [r7, #12]
 800f3dc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	88fa      	ldrh	r2, [r7, #6]
 800f3e2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f3e4:	4b0c      	ldr	r3, [pc, #48]	; (800f418 <tcp_bind+0x12c>)
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	60da      	str	r2, [r3, #12]
 800f3ec:	4a0a      	ldr	r2, [pc, #40]	; (800f418 <tcp_bind+0x12c>)
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	6013      	str	r3, [r2, #0]
 800f3f2:	f005 fbd1 	bl	8014b98 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f3f6:	2300      	movs	r3, #0
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3720      	adds	r7, #32
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	0801ce28 	.word	0x0801ce28
 800f404:	0801ade0 	.word	0x0801ade0
 800f408:	0801af74 	.word	0x0801af74
 800f40c:	0801ae24 	.word	0x0801ae24
 800f410:	0801af8c 	.word	0x0801af8c
 800f414:	0801ce00 	.word	0x0801ce00
 800f418:	2000da20 	.word	0x2000da20

0800f41c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d106      	bne.n	800f438 <tcp_update_rcv_ann_wnd+0x1c>
 800f42a:	4b25      	ldr	r3, [pc, #148]	; (800f4c0 <tcp_update_rcv_ann_wnd+0xa4>)
 800f42c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f430:	4924      	ldr	r1, [pc, #144]	; (800f4c4 <tcp_update_rcv_ann_wnd+0xa8>)
 800f432:	4825      	ldr	r0, [pc, #148]	; (800f4c8 <tcp_update_rcv_ann_wnd+0xac>)
 800f434:	f009 f8c0 	bl	80185b8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f440:	4413      	add	r3, r2
 800f442:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f448:	687a      	ldr	r2, [r7, #4]
 800f44a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f44c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f450:	bf28      	it	cs
 800f452:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f456:	b292      	uxth	r2, r2
 800f458:	4413      	add	r3, r2
 800f45a:	68fa      	ldr	r2, [r7, #12]
 800f45c:	1ad3      	subs	r3, r2, r3
 800f45e:	2b00      	cmp	r3, #0
 800f460:	db08      	blt.n	800f474 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f46e:	68fa      	ldr	r2, [r7, #12]
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	e020      	b.n	800f4b6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f47c:	1ad3      	subs	r3, r2, r3
 800f47e:	2b00      	cmp	r3, #0
 800f480:	dd03      	ble.n	800f48a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2200      	movs	r2, #0
 800f486:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f488:	e014      	b.n	800f4b4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f492:	1ad3      	subs	r3, r2, r3
 800f494:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f49c:	d306      	bcc.n	800f4ac <tcp_update_rcv_ann_wnd+0x90>
 800f49e:	4b08      	ldr	r3, [pc, #32]	; (800f4c0 <tcp_update_rcv_ann_wnd+0xa4>)
 800f4a0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f4a4:	4909      	ldr	r1, [pc, #36]	; (800f4cc <tcp_update_rcv_ann_wnd+0xb0>)
 800f4a6:	4808      	ldr	r0, [pc, #32]	; (800f4c8 <tcp_update_rcv_ann_wnd+0xac>)
 800f4a8:	f009 f886 	bl	80185b8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	b29a      	uxth	r2, r3
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f4b4:	2300      	movs	r3, #0
  }
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3710      	adds	r7, #16
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	0801ade0 	.word	0x0801ade0
 800f4c4:	0801b03c 	.word	0x0801b03c
 800f4c8:	0801ae24 	.word	0x0801ae24
 800f4cc:	0801b060 	.word	0x0801b060

0800f4d0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	460b      	mov	r3, r1
 800f4da:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d107      	bne.n	800f4f2 <tcp_recved+0x22>
 800f4e2:	4b1f      	ldr	r3, [pc, #124]	; (800f560 <tcp_recved+0x90>)
 800f4e4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f4e8:	491e      	ldr	r1, [pc, #120]	; (800f564 <tcp_recved+0x94>)
 800f4ea:	481f      	ldr	r0, [pc, #124]	; (800f568 <tcp_recved+0x98>)
 800f4ec:	f009 f864 	bl	80185b8 <iprintf>
 800f4f0:	e032      	b.n	800f558 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	7d1b      	ldrb	r3, [r3, #20]
 800f4f6:	2b01      	cmp	r3, #1
 800f4f8:	d106      	bne.n	800f508 <tcp_recved+0x38>
 800f4fa:	4b19      	ldr	r3, [pc, #100]	; (800f560 <tcp_recved+0x90>)
 800f4fc:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f500:	491a      	ldr	r1, [pc, #104]	; (800f56c <tcp_recved+0x9c>)
 800f502:	4819      	ldr	r0, [pc, #100]	; (800f568 <tcp_recved+0x98>)
 800f504:	f009 f858 	bl	80185b8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f50c:	887b      	ldrh	r3, [r7, #2]
 800f50e:	4413      	add	r3, r2
 800f510:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f512:	89fb      	ldrh	r3, [r7, #14]
 800f514:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f518:	d804      	bhi.n	800f524 <tcp_recved+0x54>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f51e:	89fa      	ldrh	r2, [r7, #14]
 800f520:	429a      	cmp	r2, r3
 800f522:	d204      	bcs.n	800f52e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f52a:	851a      	strh	r2, [r3, #40]	; 0x28
 800f52c:	e002      	b.n	800f534 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	89fa      	ldrh	r2, [r7, #14]
 800f532:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f7ff ff71 	bl	800f41c <tcp_update_rcv_ann_wnd>
 800f53a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f542:	d309      	bcc.n	800f558 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	8b5b      	ldrh	r3, [r3, #26]
 800f548:	f043 0302 	orr.w	r3, r3, #2
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f004 fbaa 	bl	8013cac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	0801ade0 	.word	0x0801ade0
 800f564:	0801b07c 	.word	0x0801b07c
 800f568:	0801ae24 	.word	0x0801ae24
 800f56c:	0801b094 	.word	0x0801b094

0800f570 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f576:	2300      	movs	r3, #0
 800f578:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f57a:	4b1e      	ldr	r3, [pc, #120]	; (800f5f4 <tcp_new_port+0x84>)
 800f57c:	881b      	ldrh	r3, [r3, #0]
 800f57e:	3301      	adds	r3, #1
 800f580:	b29a      	uxth	r2, r3
 800f582:	4b1c      	ldr	r3, [pc, #112]	; (800f5f4 <tcp_new_port+0x84>)
 800f584:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f586:	4b1b      	ldr	r3, [pc, #108]	; (800f5f4 <tcp_new_port+0x84>)
 800f588:	881b      	ldrh	r3, [r3, #0]
 800f58a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f58e:	4293      	cmp	r3, r2
 800f590:	d103      	bne.n	800f59a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f592:	4b18      	ldr	r3, [pc, #96]	; (800f5f4 <tcp_new_port+0x84>)
 800f594:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f598:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f59a:	2300      	movs	r3, #0
 800f59c:	71fb      	strb	r3, [r7, #7]
 800f59e:	e01e      	b.n	800f5de <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f5a0:	79fb      	ldrb	r3, [r7, #7]
 800f5a2:	4a15      	ldr	r2, [pc, #84]	; (800f5f8 <tcp_new_port+0x88>)
 800f5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	603b      	str	r3, [r7, #0]
 800f5ac:	e011      	b.n	800f5d2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	8ada      	ldrh	r2, [r3, #22]
 800f5b2:	4b10      	ldr	r3, [pc, #64]	; (800f5f4 <tcp_new_port+0x84>)
 800f5b4:	881b      	ldrh	r3, [r3, #0]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d108      	bne.n	800f5cc <tcp_new_port+0x5c>
        n++;
 800f5ba:	88bb      	ldrh	r3, [r7, #4]
 800f5bc:	3301      	adds	r3, #1
 800f5be:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f5c0:	88bb      	ldrh	r3, [r7, #4]
 800f5c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f5c6:	d3d8      	bcc.n	800f57a <tcp_new_port+0xa>
          return 0;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	e00d      	b.n	800f5e8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	68db      	ldr	r3, [r3, #12]
 800f5d0:	603b      	str	r3, [r7, #0]
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d1ea      	bne.n	800f5ae <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f5d8:	79fb      	ldrb	r3, [r7, #7]
 800f5da:	3301      	adds	r3, #1
 800f5dc:	71fb      	strb	r3, [r7, #7]
 800f5de:	79fb      	ldrb	r3, [r7, #7]
 800f5e0:	2b03      	cmp	r3, #3
 800f5e2:	d9dd      	bls.n	800f5a0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f5e4:	4b03      	ldr	r3, [pc, #12]	; (800f5f4 <tcp_new_port+0x84>)
 800f5e6:	881b      	ldrh	r3, [r3, #0]
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr
 800f5f4:	200000a4 	.word	0x200000a4
 800f5f8:	0801ce00 	.word	0x0801ce00

0800f5fc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f5fc:	b5b0      	push	{r4, r5, r7, lr}
 800f5fe:	b090      	sub	sp, #64	; 0x40
 800f600:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f602:	2300      	movs	r3, #0
 800f604:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f608:	4b94      	ldr	r3, [pc, #592]	; (800f85c <tcp_slowtmr+0x260>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	3301      	adds	r3, #1
 800f60e:	4a93      	ldr	r2, [pc, #588]	; (800f85c <tcp_slowtmr+0x260>)
 800f610:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f612:	4b93      	ldr	r3, [pc, #588]	; (800f860 <tcp_slowtmr+0x264>)
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	3301      	adds	r3, #1
 800f618:	b2da      	uxtb	r2, r3
 800f61a:	4b91      	ldr	r3, [pc, #580]	; (800f860 <tcp_slowtmr+0x264>)
 800f61c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f61e:	2300      	movs	r3, #0
 800f620:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f622:	4b90      	ldr	r3, [pc, #576]	; (800f864 <tcp_slowtmr+0x268>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f628:	e29f      	b.n	800fb6a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62c:	7d1b      	ldrb	r3, [r3, #20]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d106      	bne.n	800f640 <tcp_slowtmr+0x44>
 800f632:	4b8d      	ldr	r3, [pc, #564]	; (800f868 <tcp_slowtmr+0x26c>)
 800f634:	f240 42be 	movw	r2, #1214	; 0x4be
 800f638:	498c      	ldr	r1, [pc, #560]	; (800f86c <tcp_slowtmr+0x270>)
 800f63a:	488d      	ldr	r0, [pc, #564]	; (800f870 <tcp_slowtmr+0x274>)
 800f63c:	f008 ffbc 	bl	80185b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f642:	7d1b      	ldrb	r3, [r3, #20]
 800f644:	2b01      	cmp	r3, #1
 800f646:	d106      	bne.n	800f656 <tcp_slowtmr+0x5a>
 800f648:	4b87      	ldr	r3, [pc, #540]	; (800f868 <tcp_slowtmr+0x26c>)
 800f64a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f64e:	4989      	ldr	r1, [pc, #548]	; (800f874 <tcp_slowtmr+0x278>)
 800f650:	4887      	ldr	r0, [pc, #540]	; (800f870 <tcp_slowtmr+0x274>)
 800f652:	f008 ffb1 	bl	80185b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f658:	7d1b      	ldrb	r3, [r3, #20]
 800f65a:	2b0a      	cmp	r3, #10
 800f65c:	d106      	bne.n	800f66c <tcp_slowtmr+0x70>
 800f65e:	4b82      	ldr	r3, [pc, #520]	; (800f868 <tcp_slowtmr+0x26c>)
 800f660:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f664:	4984      	ldr	r1, [pc, #528]	; (800f878 <tcp_slowtmr+0x27c>)
 800f666:	4882      	ldr	r0, [pc, #520]	; (800f870 <tcp_slowtmr+0x274>)
 800f668:	f008 ffa6 	bl	80185b8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f66e:	7f9a      	ldrb	r2, [r3, #30]
 800f670:	4b7b      	ldr	r3, [pc, #492]	; (800f860 <tcp_slowtmr+0x264>)
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	429a      	cmp	r2, r3
 800f676:	d105      	bne.n	800f684 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f682:	e272      	b.n	800fb6a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f684:	4b76      	ldr	r3, [pc, #472]	; (800f860 <tcp_slowtmr+0x264>)
 800f686:	781a      	ldrb	r2, [r3, #0]
 800f688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f68a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f68c:	2300      	movs	r3, #0
 800f68e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f692:	2300      	movs	r3, #0
 800f694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69a:	7d1b      	ldrb	r3, [r3, #20]
 800f69c:	2b02      	cmp	r3, #2
 800f69e:	d10a      	bne.n	800f6b6 <tcp_slowtmr+0xba>
 800f6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6a6:	2b05      	cmp	r3, #5
 800f6a8:	d905      	bls.n	800f6b6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f6aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6b4:	e11e      	b.n	800f8f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6bc:	2b0b      	cmp	r3, #11
 800f6be:	d905      	bls.n	800f6cc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f6c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6ca:	e113      	b.n	800f8f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d075      	beq.n	800f7c2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d006      	beq.n	800f6ec <tcp_slowtmr+0xf0>
 800f6de:	4b62      	ldr	r3, [pc, #392]	; (800f868 <tcp_slowtmr+0x26c>)
 800f6e0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f6e4:	4965      	ldr	r1, [pc, #404]	; (800f87c <tcp_slowtmr+0x280>)
 800f6e6:	4862      	ldr	r0, [pc, #392]	; (800f870 <tcp_slowtmr+0x274>)
 800f6e8:	f008 ff66 	bl	80185b8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d106      	bne.n	800f702 <tcp_slowtmr+0x106>
 800f6f4:	4b5c      	ldr	r3, [pc, #368]	; (800f868 <tcp_slowtmr+0x26c>)
 800f6f6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f6fa:	4961      	ldr	r1, [pc, #388]	; (800f880 <tcp_slowtmr+0x284>)
 800f6fc:	485c      	ldr	r0, [pc, #368]	; (800f870 <tcp_slowtmr+0x274>)
 800f6fe:	f008 ff5b 	bl	80185b8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f704:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f708:	2b0b      	cmp	r3, #11
 800f70a:	d905      	bls.n	800f718 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f710:	3301      	adds	r3, #1
 800f712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f716:	e0ed      	b.n	800f8f4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f71e:	3b01      	subs	r3, #1
 800f720:	4a58      	ldr	r2, [pc, #352]	; (800f884 <tcp_slowtmr+0x288>)
 800f722:	5cd3      	ldrb	r3, [r2, r3]
 800f724:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f728:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f72c:	7c7a      	ldrb	r2, [r7, #17]
 800f72e:	429a      	cmp	r2, r3
 800f730:	d907      	bls.n	800f742 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f734:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f738:	3301      	adds	r3, #1
 800f73a:	b2da      	uxtb	r2, r3
 800f73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f744:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f748:	7c7a      	ldrb	r2, [r7, #17]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	f200 80d2 	bhi.w	800f8f4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f750:	2301      	movs	r3, #1
 800f752:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d108      	bne.n	800f770 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f75e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f760:	f005 f94c 	bl	80149fc <tcp_zero_window_probe>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	d014      	beq.n	800f794 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f76a:	2300      	movs	r3, #0
 800f76c:	623b      	str	r3, [r7, #32]
 800f76e:	e011      	b.n	800f794 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f772:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f776:	4619      	mov	r1, r3
 800f778:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f77a:	f004 f811 	bl	80137a0 <tcp_split_unsent_seg>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	d107      	bne.n	800f794 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f786:	f004 fa91 	bl	8013cac <tcp_output>
 800f78a:	4603      	mov	r3, r0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d101      	bne.n	800f794 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f790:	2300      	movs	r3, #0
 800f792:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f794:	6a3b      	ldr	r3, [r7, #32]
 800f796:	2b00      	cmp	r3, #0
 800f798:	f000 80ac 	beq.w	800f8f4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f7aa:	2b06      	cmp	r3, #6
 800f7ac:	f200 80a2 	bhi.w	800f8f4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	b2da      	uxtb	r2, r3
 800f7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f7c0:	e098      	b.n	800f8f4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	db0f      	blt.n	800f7ec <tcp_slowtmr+0x1f0>
 800f7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f7d2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d008      	beq.n	800f7ec <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f7e0:	b29b      	uxth	r3, r3
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	b21a      	sxth	r2, r3
 800f7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ea:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ee:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	db7b      	blt.n	800f8f4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f7fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7fe:	f004 fd47 	bl	8014290 <tcp_rexmit_rto_prepare>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	d007      	beq.n	800f818 <tcp_slowtmr+0x21c>
 800f808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d171      	bne.n	800f8f4 <tcp_slowtmr+0x2f8>
 800f810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f814:	2b00      	cmp	r3, #0
 800f816:	d06d      	beq.n	800f8f4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81a:	7d1b      	ldrb	r3, [r3, #20]
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	d03a      	beq.n	800f896 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f822:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f826:	2b0c      	cmp	r3, #12
 800f828:	bf28      	it	cs
 800f82a:	230c      	movcs	r3, #12
 800f82c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f830:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f834:	10db      	asrs	r3, r3, #3
 800f836:	b21b      	sxth	r3, r3
 800f838:	461a      	mov	r2, r3
 800f83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f840:	4413      	add	r3, r2
 800f842:	7efa      	ldrb	r2, [r7, #27]
 800f844:	4910      	ldr	r1, [pc, #64]	; (800f888 <tcp_slowtmr+0x28c>)
 800f846:	5c8a      	ldrb	r2, [r1, r2]
 800f848:	4093      	lsls	r3, r2
 800f84a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f852:	4293      	cmp	r3, r2
 800f854:	dc1a      	bgt.n	800f88c <tcp_slowtmr+0x290>
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	b21a      	sxth	r2, r3
 800f85a:	e019      	b.n	800f890 <tcp_slowtmr+0x294>
 800f85c:	2000da18 	.word	0x2000da18
 800f860:	20006992 	.word	0x20006992
 800f864:	2000da14 	.word	0x2000da14
 800f868:	0801ade0 	.word	0x0801ade0
 800f86c:	0801b124 	.word	0x0801b124
 800f870:	0801ae24 	.word	0x0801ae24
 800f874:	0801b150 	.word	0x0801b150
 800f878:	0801b17c 	.word	0x0801b17c
 800f87c:	0801b1ac 	.word	0x0801b1ac
 800f880:	0801b1e0 	.word	0x0801b1e0
 800f884:	0801cdf8 	.word	0x0801cdf8
 800f888:	0801cde8 	.word	0x0801cde8
 800f88c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f892:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f898:	2200      	movs	r2, #0
 800f89a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	bf28      	it	cs
 800f8ac:	4613      	movcs	r3, r2
 800f8ae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f8b0:	8a7b      	ldrh	r3, [r7, #18]
 800f8b2:	085b      	lsrs	r3, r3, #1
 800f8b4:	b29a      	uxth	r2, r3
 800f8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8c6:	005b      	lsls	r3, r3, #1
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d206      	bcs.n	800f8dc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8d2:	005b      	lsls	r3, r3, #1
 800f8d4:	b29a      	uxth	r2, r3
 800f8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8de:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f8ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8f0:	f004 fd3e 	bl	8014370 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f6:	7d1b      	ldrb	r3, [r3, #20]
 800f8f8:	2b06      	cmp	r3, #6
 800f8fa:	d111      	bne.n	800f920 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fe:	8b5b      	ldrh	r3, [r3, #26]
 800f900:	f003 0310 	and.w	r3, r3, #16
 800f904:	2b00      	cmp	r3, #0
 800f906:	d00b      	beq.n	800f920 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f908:	4b9d      	ldr	r3, [pc, #628]	; (800fb80 <tcp_slowtmr+0x584>)
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90e:	6a1b      	ldr	r3, [r3, #32]
 800f910:	1ad3      	subs	r3, r2, r3
 800f912:	2b28      	cmp	r3, #40	; 0x28
 800f914:	d904      	bls.n	800f920 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f91a:	3301      	adds	r3, #1
 800f91c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f922:	7a5b      	ldrb	r3, [r3, #9]
 800f924:	f003 0308 	and.w	r3, r3, #8
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d04c      	beq.n	800f9c6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f930:	2b04      	cmp	r3, #4
 800f932:	d003      	beq.n	800f93c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f936:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f938:	2b07      	cmp	r3, #7
 800f93a:	d144      	bne.n	800f9c6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f93c:	4b90      	ldr	r3, [pc, #576]	; (800fb80 <tcp_slowtmr+0x584>)
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f942:	6a1b      	ldr	r3, [r3, #32]
 800f944:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f94c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f950:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f954:	498b      	ldr	r1, [pc, #556]	; (800fb84 <tcp_slowtmr+0x588>)
 800f956:	fba1 1303 	umull	r1, r3, r1, r3
 800f95a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d90a      	bls.n	800f976 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f964:	3301      	adds	r3, #1
 800f966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f96a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f96e:	3301      	adds	r3, #1
 800f970:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f974:	e027      	b.n	800f9c6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f976:	4b82      	ldr	r3, [pc, #520]	; (800fb80 <tcp_slowtmr+0x584>)
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97c:	6a1b      	ldr	r3, [r3, #32]
 800f97e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f982:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f988:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f98c:	4618      	mov	r0, r3
 800f98e:	4b7e      	ldr	r3, [pc, #504]	; (800fb88 <tcp_slowtmr+0x58c>)
 800f990:	fb03 f300 	mul.w	r3, r3, r0
 800f994:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f996:	497b      	ldr	r1, [pc, #492]	; (800fb84 <tcp_slowtmr+0x588>)
 800f998:	fba1 1303 	umull	r1, r3, r1, r3
 800f99c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d911      	bls.n	800f9c6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f9a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9a4:	f004 ffea 	bl	801497c <tcp_keepalive>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f9ae:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d107      	bne.n	800f9c6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f9bc:	3301      	adds	r3, #1
 800f9be:	b2da      	uxtb	r2, r3
 800f9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d011      	beq.n	800f9f2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f9ce:	4b6c      	ldr	r3, [pc, #432]	; (800fb80 <tcp_slowtmr+0x584>)
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d4:	6a1b      	ldr	r3, [r3, #32]
 800f9d6:	1ad2      	subs	r2, r2, r3
 800f9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9da:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f9de:	4619      	mov	r1, r3
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	005b      	lsls	r3, r3, #1
 800f9e4:	440b      	add	r3, r1
 800f9e6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d302      	bcc.n	800f9f2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f9ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9ee:	f000 fea9 	bl	8010744 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f4:	7d1b      	ldrb	r3, [r3, #20]
 800f9f6:	2b03      	cmp	r3, #3
 800f9f8:	d10b      	bne.n	800fa12 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f9fa:	4b61      	ldr	r3, [pc, #388]	; (800fb80 <tcp_slowtmr+0x584>)
 800f9fc:	681a      	ldr	r2, [r3, #0]
 800f9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa00:	6a1b      	ldr	r3, [r3, #32]
 800fa02:	1ad3      	subs	r3, r2, r3
 800fa04:	2b28      	cmp	r3, #40	; 0x28
 800fa06:	d904      	bls.n	800fa12 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fa08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa14:	7d1b      	ldrb	r3, [r3, #20]
 800fa16:	2b09      	cmp	r3, #9
 800fa18:	d10b      	bne.n	800fa32 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fa1a:	4b59      	ldr	r3, [pc, #356]	; (800fb80 <tcp_slowtmr+0x584>)
 800fa1c:	681a      	ldr	r2, [r3, #0]
 800fa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa20:	6a1b      	ldr	r3, [r3, #32]
 800fa22:	1ad3      	subs	r3, r2, r3
 800fa24:	2bf0      	cmp	r3, #240	; 0xf0
 800fa26:	d904      	bls.n	800fa32 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800fa28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fa32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d060      	beq.n	800fafc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa40:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fa42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa44:	f000 fcca 	bl	80103dc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d010      	beq.n	800fa70 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fa4e:	4b4f      	ldr	r3, [pc, #316]	; (800fb8c <tcp_slowtmr+0x590>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d106      	bne.n	800fa66 <tcp_slowtmr+0x46a>
 800fa58:	4b4d      	ldr	r3, [pc, #308]	; (800fb90 <tcp_slowtmr+0x594>)
 800fa5a:	f240 526d 	movw	r2, #1389	; 0x56d
 800fa5e:	494d      	ldr	r1, [pc, #308]	; (800fb94 <tcp_slowtmr+0x598>)
 800fa60:	484d      	ldr	r0, [pc, #308]	; (800fb98 <tcp_slowtmr+0x59c>)
 800fa62:	f008 fda9 	bl	80185b8 <iprintf>
        prev->next = pcb->next;
 800fa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa68:	68da      	ldr	r2, [r3, #12]
 800fa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6c:	60da      	str	r2, [r3, #12]
 800fa6e:	e00f      	b.n	800fa90 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fa70:	4b46      	ldr	r3, [pc, #280]	; (800fb8c <tcp_slowtmr+0x590>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d006      	beq.n	800fa88 <tcp_slowtmr+0x48c>
 800fa7a:	4b45      	ldr	r3, [pc, #276]	; (800fb90 <tcp_slowtmr+0x594>)
 800fa7c:	f240 5271 	movw	r2, #1393	; 0x571
 800fa80:	4946      	ldr	r1, [pc, #280]	; (800fb9c <tcp_slowtmr+0x5a0>)
 800fa82:	4845      	ldr	r0, [pc, #276]	; (800fb98 <tcp_slowtmr+0x59c>)
 800fa84:	f008 fd98 	bl	80185b8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	4a3f      	ldr	r2, [pc, #252]	; (800fb8c <tcp_slowtmr+0x590>)
 800fa8e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fa90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d013      	beq.n	800fac0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800faa0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800faa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa4:	3304      	adds	r3, #4
 800faa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800faa8:	8ad2      	ldrh	r2, [r2, #22]
 800faaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800faac:	8b09      	ldrh	r1, [r1, #24]
 800faae:	9102      	str	r1, [sp, #8]
 800fab0:	9201      	str	r2, [sp, #4]
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	462b      	mov	r3, r5
 800fab6:	4622      	mov	r2, r4
 800fab8:	4601      	mov	r1, r0
 800faba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fabc:	f004 feaa 	bl	8014814 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac2:	691b      	ldr	r3, [r3, #16]
 800fac4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac8:	7d1b      	ldrb	r3, [r3, #20]
 800faca:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800facc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800face:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad2:	68db      	ldr	r3, [r3, #12]
 800fad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fad6:	6838      	ldr	r0, [r7, #0]
 800fad8:	f7ff f8b8 	bl	800ec4c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fadc:	4b30      	ldr	r3, [pc, #192]	; (800fba0 <tcp_slowtmr+0x5a4>)
 800fade:	2200      	movs	r2, #0
 800fae0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d004      	beq.n	800faf2 <tcp_slowtmr+0x4f6>
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f06f 010c 	mvn.w	r1, #12
 800faee:	68b8      	ldr	r0, [r7, #8]
 800faf0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800faf2:	4b2b      	ldr	r3, [pc, #172]	; (800fba0 <tcp_slowtmr+0x5a4>)
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d037      	beq.n	800fb6a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800fafa:	e590      	b.n	800f61e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb08:	7f1b      	ldrb	r3, [r3, #28]
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	b2da      	uxtb	r2, r3
 800fb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb10:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb14:	7f1a      	ldrb	r2, [r3, #28]
 800fb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb18:	7f5b      	ldrb	r3, [r3, #29]
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d325      	bcc.n	800fb6a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800fb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb20:	2200      	movs	r2, #0
 800fb22:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fb24:	4b1e      	ldr	r3, [pc, #120]	; (800fba0 <tcp_slowtmr+0x5a4>)
 800fb26:	2200      	movs	r2, #0
 800fb28:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d00b      	beq.n	800fb4c <tcp_slowtmr+0x550>
 800fb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb3c:	6912      	ldr	r2, [r2, #16]
 800fb3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb40:	4610      	mov	r0, r2
 800fb42:	4798      	blx	r3
 800fb44:	4603      	mov	r3, r0
 800fb46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fb4a:	e002      	b.n	800fb52 <tcp_slowtmr+0x556>
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fb52:	4b13      	ldr	r3, [pc, #76]	; (800fba0 <tcp_slowtmr+0x5a4>)
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d000      	beq.n	800fb5c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800fb5a:	e560      	b.n	800f61e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fb5c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d102      	bne.n	800fb6a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800fb64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb66:	f004 f8a1 	bl	8013cac <tcp_output>
  while (pcb != NULL) {
 800fb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	f47f ad5c 	bne.w	800f62a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fb72:	2300      	movs	r3, #0
 800fb74:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fb76:	4b0b      	ldr	r3, [pc, #44]	; (800fba4 <tcp_slowtmr+0x5a8>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fb7c:	e067      	b.n	800fc4e <tcp_slowtmr+0x652>
 800fb7e:	bf00      	nop
 800fb80:	2000da18 	.word	0x2000da18
 800fb84:	10624dd3 	.word	0x10624dd3
 800fb88:	000124f8 	.word	0x000124f8
 800fb8c:	2000da14 	.word	0x2000da14
 800fb90:	0801ade0 	.word	0x0801ade0
 800fb94:	0801b218 	.word	0x0801b218
 800fb98:	0801ae24 	.word	0x0801ae24
 800fb9c:	0801b244 	.word	0x0801b244
 800fba0:	2000da10 	.word	0x2000da10
 800fba4:	2000da24 	.word	0x2000da24
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbaa:	7d1b      	ldrb	r3, [r3, #20]
 800fbac:	2b0a      	cmp	r3, #10
 800fbae:	d006      	beq.n	800fbbe <tcp_slowtmr+0x5c2>
 800fbb0:	4b2b      	ldr	r3, [pc, #172]	; (800fc60 <tcp_slowtmr+0x664>)
 800fbb2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fbb6:	492b      	ldr	r1, [pc, #172]	; (800fc64 <tcp_slowtmr+0x668>)
 800fbb8:	482b      	ldr	r0, [pc, #172]	; (800fc68 <tcp_slowtmr+0x66c>)
 800fbba:	f008 fcfd 	bl	80185b8 <iprintf>
    pcb_remove = 0;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fbc4:	4b29      	ldr	r3, [pc, #164]	; (800fc6c <tcp_slowtmr+0x670>)
 800fbc6:	681a      	ldr	r2, [r3, #0]
 800fbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbca:	6a1b      	ldr	r3, [r3, #32]
 800fbcc:	1ad3      	subs	r3, r2, r3
 800fbce:	2bf0      	cmp	r3, #240	; 0xf0
 800fbd0:	d904      	bls.n	800fbdc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fbd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fbdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d02f      	beq.n	800fc44 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fbe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbe6:	f000 fbf9 	bl	80103dc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d010      	beq.n	800fc12 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fbf0:	4b1f      	ldr	r3, [pc, #124]	; (800fc70 <tcp_slowtmr+0x674>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d106      	bne.n	800fc08 <tcp_slowtmr+0x60c>
 800fbfa:	4b19      	ldr	r3, [pc, #100]	; (800fc60 <tcp_slowtmr+0x664>)
 800fbfc:	f240 52af 	movw	r2, #1455	; 0x5af
 800fc00:	491c      	ldr	r1, [pc, #112]	; (800fc74 <tcp_slowtmr+0x678>)
 800fc02:	4819      	ldr	r0, [pc, #100]	; (800fc68 <tcp_slowtmr+0x66c>)
 800fc04:	f008 fcd8 	bl	80185b8 <iprintf>
        prev->next = pcb->next;
 800fc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0a:	68da      	ldr	r2, [r3, #12]
 800fc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0e:	60da      	str	r2, [r3, #12]
 800fc10:	e00f      	b.n	800fc32 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fc12:	4b17      	ldr	r3, [pc, #92]	; (800fc70 <tcp_slowtmr+0x674>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d006      	beq.n	800fc2a <tcp_slowtmr+0x62e>
 800fc1c:	4b10      	ldr	r3, [pc, #64]	; (800fc60 <tcp_slowtmr+0x664>)
 800fc1e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fc22:	4915      	ldr	r1, [pc, #84]	; (800fc78 <tcp_slowtmr+0x67c>)
 800fc24:	4810      	ldr	r0, [pc, #64]	; (800fc68 <tcp_slowtmr+0x66c>)
 800fc26:	f008 fcc7 	bl	80185b8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	4a10      	ldr	r2, [pc, #64]	; (800fc70 <tcp_slowtmr+0x674>)
 800fc30:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc34:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fc3c:	69f8      	ldr	r0, [r7, #28]
 800fc3e:	f7ff f805 	bl	800ec4c <tcp_free>
 800fc42:	e004      	b.n	800fc4e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d1a9      	bne.n	800fba8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800fc54:	bf00      	nop
 800fc56:	bf00      	nop
 800fc58:	3730      	adds	r7, #48	; 0x30
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bdb0      	pop	{r4, r5, r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	0801ade0 	.word	0x0801ade0
 800fc64:	0801b270 	.word	0x0801b270
 800fc68:	0801ae24 	.word	0x0801ae24
 800fc6c:	2000da18 	.word	0x2000da18
 800fc70:	2000da24 	.word	0x2000da24
 800fc74:	0801b2a0 	.word	0x0801b2a0
 800fc78:	0801b2c8 	.word	0x0801b2c8

0800fc7c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fc82:	4b2d      	ldr	r3, [pc, #180]	; (800fd38 <tcp_fasttmr+0xbc>)
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	3301      	adds	r3, #1
 800fc88:	b2da      	uxtb	r2, r3
 800fc8a:	4b2b      	ldr	r3, [pc, #172]	; (800fd38 <tcp_fasttmr+0xbc>)
 800fc8c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fc8e:	4b2b      	ldr	r3, [pc, #172]	; (800fd3c <tcp_fasttmr+0xc0>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fc94:	e048      	b.n	800fd28 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	7f9a      	ldrb	r2, [r3, #30]
 800fc9a:	4b27      	ldr	r3, [pc, #156]	; (800fd38 <tcp_fasttmr+0xbc>)
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d03f      	beq.n	800fd22 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fca2:	4b25      	ldr	r3, [pc, #148]	; (800fd38 <tcp_fasttmr+0xbc>)
 800fca4:	781a      	ldrb	r2, [r3, #0]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	8b5b      	ldrh	r3, [r3, #26]
 800fcae:	f003 0301 	and.w	r3, r3, #1
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d010      	beq.n	800fcd8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	8b5b      	ldrh	r3, [r3, #26]
 800fcba:	f043 0302 	orr.w	r3, r3, #2
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f003 fff1 	bl	8013cac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	8b5b      	ldrh	r3, [r3, #26]
 800fcce:	f023 0303 	bic.w	r3, r3, #3
 800fcd2:	b29a      	uxth	r2, r3
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	8b5b      	ldrh	r3, [r3, #26]
 800fcdc:	f003 0308 	and.w	r3, r3, #8
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d009      	beq.n	800fcf8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	8b5b      	ldrh	r3, [r3, #26]
 800fce8:	f023 0308 	bic.w	r3, r3, #8
 800fcec:	b29a      	uxth	r2, r3
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f7ff f93e 	bl	800ef74 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d00a      	beq.n	800fd1c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fd06:	4b0e      	ldr	r3, [pc, #56]	; (800fd40 <tcp_fasttmr+0xc4>)
 800fd08:	2200      	movs	r2, #0
 800fd0a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f000 f819 	bl	800fd44 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fd12:	4b0b      	ldr	r3, [pc, #44]	; (800fd40 <tcp_fasttmr+0xc4>)
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d000      	beq.n	800fd1c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fd1a:	e7b8      	b.n	800fc8e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	607b      	str	r3, [r7, #4]
 800fd20:	e002      	b.n	800fd28 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	68db      	ldr	r3, [r3, #12]
 800fd26:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d1b3      	bne.n	800fc96 <tcp_fasttmr+0x1a>
    }
  }
}
 800fd2e:	bf00      	nop
 800fd30:	bf00      	nop
 800fd32:	3708      	adds	r7, #8
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	20006992 	.word	0x20006992
 800fd3c:	2000da14 	.word	0x2000da14
 800fd40:	2000da10 	.word	0x2000da10

0800fd44 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fd44:	b590      	push	{r4, r7, lr}
 800fd46:	b085      	sub	sp, #20
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d109      	bne.n	800fd66 <tcp_process_refused_data+0x22>
 800fd52:	4b37      	ldr	r3, [pc, #220]	; (800fe30 <tcp_process_refused_data+0xec>)
 800fd54:	f240 6209 	movw	r2, #1545	; 0x609
 800fd58:	4936      	ldr	r1, [pc, #216]	; (800fe34 <tcp_process_refused_data+0xf0>)
 800fd5a:	4837      	ldr	r0, [pc, #220]	; (800fe38 <tcp_process_refused_data+0xf4>)
 800fd5c:	f008 fc2c 	bl	80185b8 <iprintf>
 800fd60:	f06f 030f 	mvn.w	r3, #15
 800fd64:	e060      	b.n	800fe28 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd6a:	7b5b      	ldrb	r3, [r3, #13]
 800fd6c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd72:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2200      	movs	r2, #0
 800fd78:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d00b      	beq.n	800fd9c <tcp_process_refused_data+0x58>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6918      	ldr	r0, [r3, #16]
 800fd8e:	2300      	movs	r3, #0
 800fd90:	68ba      	ldr	r2, [r7, #8]
 800fd92:	6879      	ldr	r1, [r7, #4]
 800fd94:	47a0      	blx	r4
 800fd96:	4603      	mov	r3, r0
 800fd98:	73fb      	strb	r3, [r7, #15]
 800fd9a:	e007      	b.n	800fdac <tcp_process_refused_data+0x68>
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	68ba      	ldr	r2, [r7, #8]
 800fda0:	6879      	ldr	r1, [r7, #4]
 800fda2:	2000      	movs	r0, #0
 800fda4:	f000 f8a4 	bl	800fef0 <tcp_recv_null>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fdac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d12a      	bne.n	800fe0a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800fdb4:	7bbb      	ldrb	r3, [r7, #14]
 800fdb6:	f003 0320 	and.w	r3, r3, #32
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d033      	beq.n	800fe26 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdc2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fdc6:	d005      	beq.n	800fdd4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdcc:	3301      	adds	r3, #1
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d00b      	beq.n	800fdf6 <tcp_process_refused_data+0xb2>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6918      	ldr	r0, [r3, #16]
 800fde8:	2300      	movs	r3, #0
 800fdea:	2200      	movs	r2, #0
 800fdec:	6879      	ldr	r1, [r7, #4]
 800fdee:	47a0      	blx	r4
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	73fb      	strb	r3, [r7, #15]
 800fdf4:	e001      	b.n	800fdfa <tcp_process_refused_data+0xb6>
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fdfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdfe:	f113 0f0d 	cmn.w	r3, #13
 800fe02:	d110      	bne.n	800fe26 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800fe04:	f06f 030c 	mvn.w	r3, #12
 800fe08:	e00e      	b.n	800fe28 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800fe0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe0e:	f113 0f0d 	cmn.w	r3, #13
 800fe12:	d102      	bne.n	800fe1a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800fe14:	f06f 030c 	mvn.w	r3, #12
 800fe18:	e006      	b.n	800fe28 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	68ba      	ldr	r2, [r7, #8]
 800fe1e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800fe20:	f06f 0304 	mvn.w	r3, #4
 800fe24:	e000      	b.n	800fe28 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fe26:	2300      	movs	r3, #0
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3714      	adds	r7, #20
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd90      	pop	{r4, r7, pc}
 800fe30:	0801ade0 	.word	0x0801ade0
 800fe34:	0801b2f0 	.word	0x0801b2f0
 800fe38:	0801ae24 	.word	0x0801ae24

0800fe3c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b084      	sub	sp, #16
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fe44:	e007      	b.n	800fe56 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f000 f80a 	bl	800fe66 <tcp_seg_free>
    seg = next;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d1f4      	bne.n	800fe46 <tcp_segs_free+0xa>
  }
}
 800fe5c:	bf00      	nop
 800fe5e:	bf00      	nop
 800fe60:	3710      	adds	r7, #16
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}

0800fe66 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fe66:	b580      	push	{r7, lr}
 800fe68:	b082      	sub	sp, #8
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d00c      	beq.n	800fe8e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d004      	beq.n	800fe86 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7fe fc27 	bl	800e6d4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fe86:	6879      	ldr	r1, [r7, #4]
 800fe88:	2003      	movs	r0, #3
 800fe8a:	f7fd fde3 	bl	800da54 <memp_free>
  }
}
 800fe8e:	bf00      	nop
 800fe90:	3708      	adds	r7, #8
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
	...

0800fe98 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d106      	bne.n	800feb4 <tcp_seg_copy+0x1c>
 800fea6:	4b0f      	ldr	r3, [pc, #60]	; (800fee4 <tcp_seg_copy+0x4c>)
 800fea8:	f240 6282 	movw	r2, #1666	; 0x682
 800feac:	490e      	ldr	r1, [pc, #56]	; (800fee8 <tcp_seg_copy+0x50>)
 800feae:	480f      	ldr	r0, [pc, #60]	; (800feec <tcp_seg_copy+0x54>)
 800feb0:	f008 fb82 	bl	80185b8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800feb4:	2003      	movs	r0, #3
 800feb6:	f7fd fd7b 	bl	800d9b0 <memp_malloc>
 800feba:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d101      	bne.n	800fec6 <tcp_seg_copy+0x2e>
    return NULL;
 800fec2:	2300      	movs	r3, #0
 800fec4:	e00a      	b.n	800fedc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800fec6:	2210      	movs	r2, #16
 800fec8:	6879      	ldr	r1, [r7, #4]
 800feca:	68f8      	ldr	r0, [r7, #12]
 800fecc:	f008 fa9a 	bl	8018404 <memcpy>
  pbuf_ref(cseg->p);
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7fe fca3 	bl	800e820 <pbuf_ref>
  return cseg;
 800feda:	68fb      	ldr	r3, [r7, #12]
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3710      	adds	r7, #16
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	0801ade0 	.word	0x0801ade0
 800fee8:	0801b334 	.word	0x0801b334
 800feec:	0801ae24 	.word	0x0801ae24

0800fef0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	60f8      	str	r0, [r7, #12]
 800fef8:	60b9      	str	r1, [r7, #8]
 800fefa:	607a      	str	r2, [r7, #4]
 800fefc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d109      	bne.n	800ff18 <tcp_recv_null+0x28>
 800ff04:	4b12      	ldr	r3, [pc, #72]	; (800ff50 <tcp_recv_null+0x60>)
 800ff06:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ff0a:	4912      	ldr	r1, [pc, #72]	; (800ff54 <tcp_recv_null+0x64>)
 800ff0c:	4812      	ldr	r0, [pc, #72]	; (800ff58 <tcp_recv_null+0x68>)
 800ff0e:	f008 fb53 	bl	80185b8 <iprintf>
 800ff12:	f06f 030f 	mvn.w	r3, #15
 800ff16:	e016      	b.n	800ff46 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d009      	beq.n	800ff32 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	891b      	ldrh	r3, [r3, #8]
 800ff22:	4619      	mov	r1, r3
 800ff24:	68b8      	ldr	r0, [r7, #8]
 800ff26:	f7ff fad3 	bl	800f4d0 <tcp_recved>
    pbuf_free(p);
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f7fe fbd2 	bl	800e6d4 <pbuf_free>
 800ff30:	e008      	b.n	800ff44 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ff32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d104      	bne.n	800ff44 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ff3a:	68b8      	ldr	r0, [r7, #8]
 800ff3c:	f7ff f884 	bl	800f048 <tcp_close>
 800ff40:	4603      	mov	r3, r0
 800ff42:	e000      	b.n	800ff46 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ff44:	2300      	movs	r3, #0
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3710      	adds	r7, #16
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	0801ade0 	.word	0x0801ade0
 800ff54:	0801b350 	.word	0x0801b350
 800ff58:	0801ae24 	.word	0x0801ae24

0800ff5c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b086      	sub	sp, #24
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	4603      	mov	r3, r0
 800ff64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ff66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	db01      	blt.n	800ff72 <tcp_kill_prio+0x16>
 800ff6e:	79fb      	ldrb	r3, [r7, #7]
 800ff70:	e000      	b.n	800ff74 <tcp_kill_prio+0x18>
 800ff72:	237f      	movs	r3, #127	; 0x7f
 800ff74:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ff76:	7afb      	ldrb	r3, [r7, #11]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d034      	beq.n	800ffe6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ff7c:	7afb      	ldrb	r3, [r7, #11]
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ff82:	2300      	movs	r3, #0
 800ff84:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ff86:	2300      	movs	r3, #0
 800ff88:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ff8a:	4b19      	ldr	r3, [pc, #100]	; (800fff0 <tcp_kill_prio+0x94>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	617b      	str	r3, [r7, #20]
 800ff90:	e01f      	b.n	800ffd2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	7d5b      	ldrb	r3, [r3, #21]
 800ff96:	7afa      	ldrb	r2, [r7, #11]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d80c      	bhi.n	800ffb6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ffa0:	7afa      	ldrb	r2, [r7, #11]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d112      	bne.n	800ffcc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ffa6:	4b13      	ldr	r3, [pc, #76]	; (800fff4 <tcp_kill_prio+0x98>)
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	6a1b      	ldr	r3, [r3, #32]
 800ffae:	1ad3      	subs	r3, r2, r3
 800ffb0:	68fa      	ldr	r2, [r7, #12]
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d80a      	bhi.n	800ffcc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ffb6:	4b0f      	ldr	r3, [pc, #60]	; (800fff4 <tcp_kill_prio+0x98>)
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	6a1b      	ldr	r3, [r3, #32]
 800ffbe:	1ad3      	subs	r3, r2, r3
 800ffc0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	7d5b      	ldrb	r3, [r3, #21]
 800ffca:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	617b      	str	r3, [r7, #20]
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d1dc      	bne.n	800ff92 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d004      	beq.n	800ffe8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ffde:	6938      	ldr	r0, [r7, #16]
 800ffe0:	f7ff f978 	bl	800f2d4 <tcp_abort>
 800ffe4:	e000      	b.n	800ffe8 <tcp_kill_prio+0x8c>
    return;
 800ffe6:	bf00      	nop
  }
}
 800ffe8:	3718      	adds	r7, #24
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	2000da14 	.word	0x2000da14
 800fff4:	2000da18 	.word	0x2000da18

0800fff8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b086      	sub	sp, #24
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	4603      	mov	r3, r0
 8010000:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010002:	79fb      	ldrb	r3, [r7, #7]
 8010004:	2b08      	cmp	r3, #8
 8010006:	d009      	beq.n	801001c <tcp_kill_state+0x24>
 8010008:	79fb      	ldrb	r3, [r7, #7]
 801000a:	2b09      	cmp	r3, #9
 801000c:	d006      	beq.n	801001c <tcp_kill_state+0x24>
 801000e:	4b1a      	ldr	r3, [pc, #104]	; (8010078 <tcp_kill_state+0x80>)
 8010010:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010014:	4919      	ldr	r1, [pc, #100]	; (801007c <tcp_kill_state+0x84>)
 8010016:	481a      	ldr	r0, [pc, #104]	; (8010080 <tcp_kill_state+0x88>)
 8010018:	f008 face 	bl	80185b8 <iprintf>

  inactivity = 0;
 801001c:	2300      	movs	r3, #0
 801001e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010020:	2300      	movs	r3, #0
 8010022:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010024:	4b17      	ldr	r3, [pc, #92]	; (8010084 <tcp_kill_state+0x8c>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	617b      	str	r3, [r7, #20]
 801002a:	e017      	b.n	801005c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	7d1b      	ldrb	r3, [r3, #20]
 8010030:	79fa      	ldrb	r2, [r7, #7]
 8010032:	429a      	cmp	r2, r3
 8010034:	d10f      	bne.n	8010056 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010036:	4b14      	ldr	r3, [pc, #80]	; (8010088 <tcp_kill_state+0x90>)
 8010038:	681a      	ldr	r2, [r3, #0]
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	6a1b      	ldr	r3, [r3, #32]
 801003e:	1ad3      	subs	r3, r2, r3
 8010040:	68fa      	ldr	r2, [r7, #12]
 8010042:	429a      	cmp	r2, r3
 8010044:	d807      	bhi.n	8010056 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010046:	4b10      	ldr	r3, [pc, #64]	; (8010088 <tcp_kill_state+0x90>)
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	6a1b      	ldr	r3, [r3, #32]
 801004e:	1ad3      	subs	r3, r2, r3
 8010050:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	617b      	str	r3, [r7, #20]
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d1e4      	bne.n	801002c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d003      	beq.n	8010070 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010068:	2100      	movs	r1, #0
 801006a:	6938      	ldr	r0, [r7, #16]
 801006c:	f7ff f874 	bl	800f158 <tcp_abandon>
  }
}
 8010070:	bf00      	nop
 8010072:	3718      	adds	r7, #24
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	0801ade0 	.word	0x0801ade0
 801007c:	0801b36c 	.word	0x0801b36c
 8010080:	0801ae24 	.word	0x0801ae24
 8010084:	2000da14 	.word	0x2000da14
 8010088:	2000da18 	.word	0x2000da18

0801008c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b084      	sub	sp, #16
 8010090:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010092:	2300      	movs	r3, #0
 8010094:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010096:	2300      	movs	r3, #0
 8010098:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801009a:	4b12      	ldr	r3, [pc, #72]	; (80100e4 <tcp_kill_timewait+0x58>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	60fb      	str	r3, [r7, #12]
 80100a0:	e012      	b.n	80100c8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80100a2:	4b11      	ldr	r3, [pc, #68]	; (80100e8 <tcp_kill_timewait+0x5c>)
 80100a4:	681a      	ldr	r2, [r3, #0]
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	6a1b      	ldr	r3, [r3, #32]
 80100aa:	1ad3      	subs	r3, r2, r3
 80100ac:	687a      	ldr	r2, [r7, #4]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d807      	bhi.n	80100c2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80100b2:	4b0d      	ldr	r3, [pc, #52]	; (80100e8 <tcp_kill_timewait+0x5c>)
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	6a1b      	ldr	r3, [r3, #32]
 80100ba:	1ad3      	subs	r3, r2, r3
 80100bc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	60fb      	str	r3, [r7, #12]
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d1e9      	bne.n	80100a2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d002      	beq.n	80100da <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80100d4:	68b8      	ldr	r0, [r7, #8]
 80100d6:	f7ff f8fd 	bl	800f2d4 <tcp_abort>
  }
}
 80100da:	bf00      	nop
 80100dc:	3710      	adds	r7, #16
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}
 80100e2:	bf00      	nop
 80100e4:	2000da24 	.word	0x2000da24
 80100e8:	2000da18 	.word	0x2000da18

080100ec <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80100f2:	4b10      	ldr	r3, [pc, #64]	; (8010134 <tcp_handle_closepend+0x48>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80100f8:	e014      	b.n	8010124 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	68db      	ldr	r3, [r3, #12]
 80100fe:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	8b5b      	ldrh	r3, [r3, #26]
 8010104:	f003 0308 	and.w	r3, r3, #8
 8010108:	2b00      	cmp	r3, #0
 801010a:	d009      	beq.n	8010120 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	8b5b      	ldrh	r3, [r3, #26]
 8010110:	f023 0308 	bic.w	r3, r3, #8
 8010114:	b29a      	uxth	r2, r3
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f7fe ff2a 	bl	800ef74 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d1e7      	bne.n	80100fa <tcp_handle_closepend+0xe>
  }
}
 801012a:	bf00      	nop
 801012c:	bf00      	nop
 801012e:	3708      	adds	r7, #8
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	2000da14 	.word	0x2000da14

08010138 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b084      	sub	sp, #16
 801013c:	af00      	add	r7, sp, #0
 801013e:	4603      	mov	r3, r0
 8010140:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010142:	2001      	movs	r0, #1
 8010144:	f7fd fc34 	bl	800d9b0 <memp_malloc>
 8010148:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d126      	bne.n	801019e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010150:	f7ff ffcc 	bl	80100ec <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010154:	f7ff ff9a 	bl	801008c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010158:	2001      	movs	r0, #1
 801015a:	f7fd fc29 	bl	800d9b0 <memp_malloc>
 801015e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d11b      	bne.n	801019e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010166:	2009      	movs	r0, #9
 8010168:	f7ff ff46 	bl	800fff8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801016c:	2001      	movs	r0, #1
 801016e:	f7fd fc1f 	bl	800d9b0 <memp_malloc>
 8010172:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d111      	bne.n	801019e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801017a:	2008      	movs	r0, #8
 801017c:	f7ff ff3c 	bl	800fff8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010180:	2001      	movs	r0, #1
 8010182:	f7fd fc15 	bl	800d9b0 <memp_malloc>
 8010186:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d107      	bne.n	801019e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801018e:	79fb      	ldrb	r3, [r7, #7]
 8010190:	4618      	mov	r0, r3
 8010192:	f7ff fee3 	bl	800ff5c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010196:	2001      	movs	r0, #1
 8010198:	f7fd fc0a 	bl	800d9b0 <memp_malloc>
 801019c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d03f      	beq.n	8010224 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80101a4:	229c      	movs	r2, #156	; 0x9c
 80101a6:	2100      	movs	r1, #0
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f008 f953 	bl	8018454 <memset>
    pcb->prio = prio;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	79fa      	ldrb	r2, [r7, #7]
 80101b2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80101ba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80101c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	22ff      	movs	r2, #255	; 0xff
 80101d2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80101da:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	2206      	movs	r2, #6
 80101e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2206      	movs	r2, #6
 80101e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101f0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	2201      	movs	r2, #1
 80101f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80101fa:	4b0d      	ldr	r3, [pc, #52]	; (8010230 <tcp_alloc+0xf8>)
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010202:	4b0c      	ldr	r3, [pc, #48]	; (8010234 <tcp_alloc+0xfc>)
 8010204:	781a      	ldrb	r2, [r3, #0]
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010210:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	4a08      	ldr	r2, [pc, #32]	; (8010238 <tcp_alloc+0x100>)
 8010218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	4a07      	ldr	r2, [pc, #28]	; (801023c <tcp_alloc+0x104>)
 8010220:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010224:	68fb      	ldr	r3, [r7, #12]
}
 8010226:	4618      	mov	r0, r3
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	2000da18 	.word	0x2000da18
 8010234:	20006992 	.word	0x20006992
 8010238:	0800fef1 	.word	0x0800fef1
 801023c:	006ddd00 	.word	0x006ddd00

08010240 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b084      	sub	sp, #16
 8010244:	af00      	add	r7, sp, #0
 8010246:	4603      	mov	r3, r0
 8010248:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801024a:	2040      	movs	r0, #64	; 0x40
 801024c:	f7ff ff74 	bl	8010138 <tcp_alloc>
 8010250:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010252:	68fb      	ldr	r3, [r7, #12]
}
 8010254:	4618      	mov	r0, r3
 8010256:	3710      	adds	r7, #16
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801025c:	b480      	push	{r7}
 801025e:	b083      	sub	sp, #12
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d002      	beq.n	8010272 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	683a      	ldr	r2, [r7, #0]
 8010270:	611a      	str	r2, [r3, #16]
  }
}
 8010272:	bf00      	nop
 8010274:	370c      	adds	r7, #12
 8010276:	46bd      	mov	sp, r7
 8010278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027c:	4770      	bx	lr
	...

08010280 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b082      	sub	sp, #8
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d00e      	beq.n	80102ae <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	7d1b      	ldrb	r3, [r3, #20]
 8010294:	2b01      	cmp	r3, #1
 8010296:	d106      	bne.n	80102a6 <tcp_recv+0x26>
 8010298:	4b07      	ldr	r3, [pc, #28]	; (80102b8 <tcp_recv+0x38>)
 801029a:	f240 72df 	movw	r2, #2015	; 0x7df
 801029e:	4907      	ldr	r1, [pc, #28]	; (80102bc <tcp_recv+0x3c>)
 80102a0:	4807      	ldr	r0, [pc, #28]	; (80102c0 <tcp_recv+0x40>)
 80102a2:	f008 f989 	bl	80185b8 <iprintf>
    pcb->recv = recv;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	683a      	ldr	r2, [r7, #0]
 80102aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80102ae:	bf00      	nop
 80102b0:	3708      	adds	r7, #8
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	0801ade0 	.word	0x0801ade0
 80102bc:	0801b37c 	.word	0x0801b37c
 80102c0:	0801ae24 	.word	0x0801ae24

080102c4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b082      	sub	sp, #8
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d00e      	beq.n	80102f2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	7d1b      	ldrb	r3, [r3, #20]
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d106      	bne.n	80102ea <tcp_sent+0x26>
 80102dc:	4b07      	ldr	r3, [pc, #28]	; (80102fc <tcp_sent+0x38>)
 80102de:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80102e2:	4907      	ldr	r1, [pc, #28]	; (8010300 <tcp_sent+0x3c>)
 80102e4:	4807      	ldr	r0, [pc, #28]	; (8010304 <tcp_sent+0x40>)
 80102e6:	f008 f967 	bl	80185b8 <iprintf>
    pcb->sent = sent;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	683a      	ldr	r2, [r7, #0]
 80102ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80102f2:	bf00      	nop
 80102f4:	3708      	adds	r7, #8
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}
 80102fa:	bf00      	nop
 80102fc:	0801ade0 	.word	0x0801ade0
 8010300:	0801b3a4 	.word	0x0801b3a4
 8010304:	0801ae24 	.word	0x0801ae24

08010308 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d00e      	beq.n	8010336 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	7d1b      	ldrb	r3, [r3, #20]
 801031c:	2b01      	cmp	r3, #1
 801031e:	d106      	bne.n	801032e <tcp_err+0x26>
 8010320:	4b07      	ldr	r3, [pc, #28]	; (8010340 <tcp_err+0x38>)
 8010322:	f640 020d 	movw	r2, #2061	; 0x80d
 8010326:	4907      	ldr	r1, [pc, #28]	; (8010344 <tcp_err+0x3c>)
 8010328:	4807      	ldr	r0, [pc, #28]	; (8010348 <tcp_err+0x40>)
 801032a:	f008 f945 	bl	80185b8 <iprintf>
    pcb->errf = err;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	683a      	ldr	r2, [r7, #0]
 8010332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010336:	bf00      	nop
 8010338:	3708      	adds	r7, #8
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	0801ade0 	.word	0x0801ade0
 8010344:	0801b3cc 	.word	0x0801b3cc
 8010348:	0801ae24 	.word	0x0801ae24

0801034c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801034c:	b480      	push	{r7}
 801034e:	b085      	sub	sp, #20
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d008      	beq.n	801036e <tcp_accept+0x22>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	7d1b      	ldrb	r3, [r3, #20]
 8010360:	2b01      	cmp	r3, #1
 8010362:	d104      	bne.n	801036e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	683a      	ldr	r2, [r7, #0]
 801036c:	619a      	str	r2, [r3, #24]
  }
}
 801036e:	bf00      	nop
 8010370:	3714      	adds	r7, #20
 8010372:	46bd      	mov	sp, r7
 8010374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010378:	4770      	bx	lr
	...

0801037c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	4613      	mov	r3, r2
 8010388:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d107      	bne.n	80103a0 <tcp_poll+0x24>
 8010390:	4b0e      	ldr	r3, [pc, #56]	; (80103cc <tcp_poll+0x50>)
 8010392:	f640 023d 	movw	r2, #2109	; 0x83d
 8010396:	490e      	ldr	r1, [pc, #56]	; (80103d0 <tcp_poll+0x54>)
 8010398:	480e      	ldr	r0, [pc, #56]	; (80103d4 <tcp_poll+0x58>)
 801039a:	f008 f90d 	bl	80185b8 <iprintf>
 801039e:	e011      	b.n	80103c4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	7d1b      	ldrb	r3, [r3, #20]
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d106      	bne.n	80103b6 <tcp_poll+0x3a>
 80103a8:	4b08      	ldr	r3, [pc, #32]	; (80103cc <tcp_poll+0x50>)
 80103aa:	f640 023e 	movw	r2, #2110	; 0x83e
 80103ae:	490a      	ldr	r1, [pc, #40]	; (80103d8 <tcp_poll+0x5c>)
 80103b0:	4808      	ldr	r0, [pc, #32]	; (80103d4 <tcp_poll+0x58>)
 80103b2:	f008 f901 	bl	80185b8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	68ba      	ldr	r2, [r7, #8]
 80103ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	79fa      	ldrb	r2, [r7, #7]
 80103c2:	775a      	strb	r2, [r3, #29]
}
 80103c4:	3710      	adds	r7, #16
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop
 80103cc:	0801ade0 	.word	0x0801ade0
 80103d0:	0801b3f4 	.word	0x0801b3f4
 80103d4:	0801ae24 	.word	0x0801ae24
 80103d8:	0801b40c 	.word	0x0801b40c

080103dc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d107      	bne.n	80103fa <tcp_pcb_purge+0x1e>
 80103ea:	4b21      	ldr	r3, [pc, #132]	; (8010470 <tcp_pcb_purge+0x94>)
 80103ec:	f640 0251 	movw	r2, #2129	; 0x851
 80103f0:	4920      	ldr	r1, [pc, #128]	; (8010474 <tcp_pcb_purge+0x98>)
 80103f2:	4821      	ldr	r0, [pc, #132]	; (8010478 <tcp_pcb_purge+0x9c>)
 80103f4:	f008 f8e0 	bl	80185b8 <iprintf>
 80103f8:	e037      	b.n	801046a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	7d1b      	ldrb	r3, [r3, #20]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d033      	beq.n	801046a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010406:	2b0a      	cmp	r3, #10
 8010408:	d02f      	beq.n	801046a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801040e:	2b01      	cmp	r3, #1
 8010410:	d02b      	beq.n	801046a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010416:	2b00      	cmp	r3, #0
 8010418:	d007      	beq.n	801042a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801041e:	4618      	mov	r0, r3
 8010420:	f7fe f958 	bl	800e6d4 <pbuf_free>
      pcb->refused_data = NULL;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2200      	movs	r2, #0
 8010428:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801042e:	2b00      	cmp	r3, #0
 8010430:	d002      	beq.n	8010438 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f000 f986 	bl	8010744 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801043e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010444:	4618      	mov	r0, r3
 8010446:	f7ff fcf9 	bl	800fe3c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801044e:	4618      	mov	r0, r3
 8010450:	f7ff fcf4 	bl	800fe3c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2200      	movs	r2, #0
 8010458:	66da      	str	r2, [r3, #108]	; 0x6c
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801046a:	3708      	adds	r7, #8
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}
 8010470:	0801ade0 	.word	0x0801ade0
 8010474:	0801b42c 	.word	0x0801b42c
 8010478:	0801ae24 	.word	0x0801ae24

0801047c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b084      	sub	sp, #16
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d106      	bne.n	801049a <tcp_pcb_remove+0x1e>
 801048c:	4b3e      	ldr	r3, [pc, #248]	; (8010588 <tcp_pcb_remove+0x10c>)
 801048e:	f640 0283 	movw	r2, #2179	; 0x883
 8010492:	493e      	ldr	r1, [pc, #248]	; (801058c <tcp_pcb_remove+0x110>)
 8010494:	483e      	ldr	r0, [pc, #248]	; (8010590 <tcp_pcb_remove+0x114>)
 8010496:	f008 f88f 	bl	80185b8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d106      	bne.n	80104ae <tcp_pcb_remove+0x32>
 80104a0:	4b39      	ldr	r3, [pc, #228]	; (8010588 <tcp_pcb_remove+0x10c>)
 80104a2:	f640 0284 	movw	r2, #2180	; 0x884
 80104a6:	493b      	ldr	r1, [pc, #236]	; (8010594 <tcp_pcb_remove+0x118>)
 80104a8:	4839      	ldr	r0, [pc, #228]	; (8010590 <tcp_pcb_remove+0x114>)
 80104aa:	f008 f885 	bl	80185b8 <iprintf>

  TCP_RMV(pcblist, pcb);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	683a      	ldr	r2, [r7, #0]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d105      	bne.n	80104c4 <tcp_pcb_remove+0x48>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	68da      	ldr	r2, [r3, #12]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	601a      	str	r2, [r3, #0]
 80104c2:	e013      	b.n	80104ec <tcp_pcb_remove+0x70>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	60fb      	str	r3, [r7, #12]
 80104ca:	e00c      	b.n	80104e6 <tcp_pcb_remove+0x6a>
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	683a      	ldr	r2, [r7, #0]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d104      	bne.n	80104e0 <tcp_pcb_remove+0x64>
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	68da      	ldr	r2, [r3, #12]
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	60da      	str	r2, [r3, #12]
 80104de:	e005      	b.n	80104ec <tcp_pcb_remove+0x70>
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	60fb      	str	r3, [r7, #12]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d1ef      	bne.n	80104cc <tcp_pcb_remove+0x50>
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	2200      	movs	r2, #0
 80104f0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80104f2:	6838      	ldr	r0, [r7, #0]
 80104f4:	f7ff ff72 	bl	80103dc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	7d1b      	ldrb	r3, [r3, #20]
 80104fc:	2b0a      	cmp	r3, #10
 80104fe:	d013      	beq.n	8010528 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010504:	2b01      	cmp	r3, #1
 8010506:	d00f      	beq.n	8010528 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	8b5b      	ldrh	r3, [r3, #26]
 801050c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010510:	2b00      	cmp	r3, #0
 8010512:	d009      	beq.n	8010528 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	8b5b      	ldrh	r3, [r3, #26]
 8010518:	f043 0302 	orr.w	r3, r3, #2
 801051c:	b29a      	uxth	r2, r3
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010522:	6838      	ldr	r0, [r7, #0]
 8010524:	f003 fbc2 	bl	8013cac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	7d1b      	ldrb	r3, [r3, #20]
 801052c:	2b01      	cmp	r3, #1
 801052e:	d020      	beq.n	8010572 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010534:	2b00      	cmp	r3, #0
 8010536:	d006      	beq.n	8010546 <tcp_pcb_remove+0xca>
 8010538:	4b13      	ldr	r3, [pc, #76]	; (8010588 <tcp_pcb_remove+0x10c>)
 801053a:	f640 0293 	movw	r2, #2195	; 0x893
 801053e:	4916      	ldr	r1, [pc, #88]	; (8010598 <tcp_pcb_remove+0x11c>)
 8010540:	4813      	ldr	r0, [pc, #76]	; (8010590 <tcp_pcb_remove+0x114>)
 8010542:	f008 f839 	bl	80185b8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801054a:	2b00      	cmp	r3, #0
 801054c:	d006      	beq.n	801055c <tcp_pcb_remove+0xe0>
 801054e:	4b0e      	ldr	r3, [pc, #56]	; (8010588 <tcp_pcb_remove+0x10c>)
 8010550:	f640 0294 	movw	r2, #2196	; 0x894
 8010554:	4911      	ldr	r1, [pc, #68]	; (801059c <tcp_pcb_remove+0x120>)
 8010556:	480e      	ldr	r0, [pc, #56]	; (8010590 <tcp_pcb_remove+0x114>)
 8010558:	f008 f82e 	bl	80185b8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010560:	2b00      	cmp	r3, #0
 8010562:	d006      	beq.n	8010572 <tcp_pcb_remove+0xf6>
 8010564:	4b08      	ldr	r3, [pc, #32]	; (8010588 <tcp_pcb_remove+0x10c>)
 8010566:	f640 0296 	movw	r2, #2198	; 0x896
 801056a:	490d      	ldr	r1, [pc, #52]	; (80105a0 <tcp_pcb_remove+0x124>)
 801056c:	4808      	ldr	r0, [pc, #32]	; (8010590 <tcp_pcb_remove+0x114>)
 801056e:	f008 f823 	bl	80185b8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	2200      	movs	r2, #0
 8010576:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	2200      	movs	r2, #0
 801057c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801057e:	bf00      	nop
 8010580:	3710      	adds	r7, #16
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
 8010586:	bf00      	nop
 8010588:	0801ade0 	.word	0x0801ade0
 801058c:	0801b448 	.word	0x0801b448
 8010590:	0801ae24 	.word	0x0801ae24
 8010594:	0801b464 	.word	0x0801b464
 8010598:	0801b484 	.word	0x0801b484
 801059c:	0801b49c 	.word	0x0801b49c
 80105a0:	0801b4b8 	.word	0x0801b4b8

080105a4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d106      	bne.n	80105c0 <tcp_next_iss+0x1c>
 80105b2:	4b0a      	ldr	r3, [pc, #40]	; (80105dc <tcp_next_iss+0x38>)
 80105b4:	f640 02af 	movw	r2, #2223	; 0x8af
 80105b8:	4909      	ldr	r1, [pc, #36]	; (80105e0 <tcp_next_iss+0x3c>)
 80105ba:	480a      	ldr	r0, [pc, #40]	; (80105e4 <tcp_next_iss+0x40>)
 80105bc:	f007 fffc 	bl	80185b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80105c0:	4b09      	ldr	r3, [pc, #36]	; (80105e8 <tcp_next_iss+0x44>)
 80105c2:	681a      	ldr	r2, [r3, #0]
 80105c4:	4b09      	ldr	r3, [pc, #36]	; (80105ec <tcp_next_iss+0x48>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	4413      	add	r3, r2
 80105ca:	4a07      	ldr	r2, [pc, #28]	; (80105e8 <tcp_next_iss+0x44>)
 80105cc:	6013      	str	r3, [r2, #0]
  return iss;
 80105ce:	4b06      	ldr	r3, [pc, #24]	; (80105e8 <tcp_next_iss+0x44>)
 80105d0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3708      	adds	r7, #8
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
 80105da:	bf00      	nop
 80105dc:	0801ade0 	.word	0x0801ade0
 80105e0:	0801b4d0 	.word	0x0801b4d0
 80105e4:	0801ae24 	.word	0x0801ae24
 80105e8:	200000a8 	.word	0x200000a8
 80105ec:	2000da18 	.word	0x2000da18

080105f0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b086      	sub	sp, #24
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	4603      	mov	r3, r0
 80105f8:	60b9      	str	r1, [r7, #8]
 80105fa:	607a      	str	r2, [r7, #4]
 80105fc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d106      	bne.n	8010612 <tcp_eff_send_mss_netif+0x22>
 8010604:	4b14      	ldr	r3, [pc, #80]	; (8010658 <tcp_eff_send_mss_netif+0x68>)
 8010606:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801060a:	4914      	ldr	r1, [pc, #80]	; (801065c <tcp_eff_send_mss_netif+0x6c>)
 801060c:	4814      	ldr	r0, [pc, #80]	; (8010660 <tcp_eff_send_mss_netif+0x70>)
 801060e:	f007 ffd3 	bl	80185b8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d101      	bne.n	801061c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010618:	89fb      	ldrh	r3, [r7, #14]
 801061a:	e019      	b.n	8010650 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010620:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010622:	8afb      	ldrh	r3, [r7, #22]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d012      	beq.n	801064e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010628:	2328      	movs	r3, #40	; 0x28
 801062a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801062c:	8afa      	ldrh	r2, [r7, #22]
 801062e:	8abb      	ldrh	r3, [r7, #20]
 8010630:	429a      	cmp	r2, r3
 8010632:	d904      	bls.n	801063e <tcp_eff_send_mss_netif+0x4e>
 8010634:	8afa      	ldrh	r2, [r7, #22]
 8010636:	8abb      	ldrh	r3, [r7, #20]
 8010638:	1ad3      	subs	r3, r2, r3
 801063a:	b29b      	uxth	r3, r3
 801063c:	e000      	b.n	8010640 <tcp_eff_send_mss_netif+0x50>
 801063e:	2300      	movs	r3, #0
 8010640:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010642:	8a7a      	ldrh	r2, [r7, #18]
 8010644:	89fb      	ldrh	r3, [r7, #14]
 8010646:	4293      	cmp	r3, r2
 8010648:	bf28      	it	cs
 801064a:	4613      	movcs	r3, r2
 801064c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801064e:	89fb      	ldrh	r3, [r7, #14]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3718      	adds	r7, #24
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}
 8010658:	0801ade0 	.word	0x0801ade0
 801065c:	0801b4ec 	.word	0x0801b4ec
 8010660:	0801ae24 	.word	0x0801ae24

08010664 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b084      	sub	sp, #16
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
 801066c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d119      	bne.n	80106ac <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010678:	4b10      	ldr	r3, [pc, #64]	; (80106bc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801067a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801067e:	4910      	ldr	r1, [pc, #64]	; (80106c0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010680:	4810      	ldr	r0, [pc, #64]	; (80106c4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010682:	f007 ff99 	bl	80185b8 <iprintf>

  while (pcb != NULL) {
 8010686:	e011      	b.n	80106ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681a      	ldr	r2, [r3, #0]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	429a      	cmp	r2, r3
 8010692:	d108      	bne.n	80106a6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	68db      	ldr	r3, [r3, #12]
 8010698:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801069a:	68f8      	ldr	r0, [r7, #12]
 801069c:	f7fe fe1a 	bl	800f2d4 <tcp_abort>
      pcb = next;
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	60fb      	str	r3, [r7, #12]
 80106a4:	e002      	b.n	80106ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d1ea      	bne.n	8010688 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80106b2:	bf00      	nop
 80106b4:	bf00      	nop
 80106b6:	3710      	adds	r7, #16
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	0801ade0 	.word	0x0801ade0
 80106c0:	0801b514 	.word	0x0801b514
 80106c4:	0801ae24 	.word	0x0801ae24

080106c8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b084      	sub	sp, #16
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d02a      	beq.n	801072e <tcp_netif_ip_addr_changed+0x66>
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d026      	beq.n	801072e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80106e0:	4b15      	ldr	r3, [pc, #84]	; (8010738 <tcp_netif_ip_addr_changed+0x70>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	4619      	mov	r1, r3
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f7ff ffbc 	bl	8010664 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80106ec:	4b13      	ldr	r3, [pc, #76]	; (801073c <tcp_netif_ip_addr_changed+0x74>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	4619      	mov	r1, r3
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f7ff ffb6 	bl	8010664 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d017      	beq.n	801072e <tcp_netif_ip_addr_changed+0x66>
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d013      	beq.n	801072e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010706:	4b0e      	ldr	r3, [pc, #56]	; (8010740 <tcp_netif_ip_addr_changed+0x78>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	60fb      	str	r3, [r7, #12]
 801070c:	e00c      	b.n	8010728 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681a      	ldr	r2, [r3, #0]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	429a      	cmp	r2, r3
 8010718:	d103      	bne.n	8010722 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	60fb      	str	r3, [r7, #12]
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d1ef      	bne.n	801070e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801072e:	bf00      	nop
 8010730:	3710      	adds	r7, #16
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	2000da14 	.word	0x2000da14
 801073c:	2000da20 	.word	0x2000da20
 8010740:	2000da1c 	.word	0x2000da1c

08010744 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010750:	2b00      	cmp	r3, #0
 8010752:	d007      	beq.n	8010764 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010758:	4618      	mov	r0, r3
 801075a:	f7ff fb6f 	bl	800fe3c <tcp_segs_free>
    pcb->ooseq = NULL;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2200      	movs	r2, #0
 8010762:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010764:	bf00      	nop
 8010766:	3708      	adds	r7, #8
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801076c:	b590      	push	{r4, r7, lr}
 801076e:	b08d      	sub	sp, #52	; 0x34
 8010770:	af04      	add	r7, sp, #16
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d105      	bne.n	8010788 <tcp_input+0x1c>
 801077c:	4b9b      	ldr	r3, [pc, #620]	; (80109ec <tcp_input+0x280>)
 801077e:	2283      	movs	r2, #131	; 0x83
 8010780:	499b      	ldr	r1, [pc, #620]	; (80109f0 <tcp_input+0x284>)
 8010782:	489c      	ldr	r0, [pc, #624]	; (80109f4 <tcp_input+0x288>)
 8010784:	f007 ff18 	bl	80185b8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	685b      	ldr	r3, [r3, #4]
 801078c:	4a9a      	ldr	r2, [pc, #616]	; (80109f8 <tcp_input+0x28c>)
 801078e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	895b      	ldrh	r3, [r3, #10]
 8010794:	2b13      	cmp	r3, #19
 8010796:	f240 83c4 	bls.w	8010f22 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801079a:	4b98      	ldr	r3, [pc, #608]	; (80109fc <tcp_input+0x290>)
 801079c:	695b      	ldr	r3, [r3, #20]
 801079e:	4a97      	ldr	r2, [pc, #604]	; (80109fc <tcp_input+0x290>)
 80107a0:	6812      	ldr	r2, [r2, #0]
 80107a2:	4611      	mov	r1, r2
 80107a4:	4618      	mov	r0, r3
 80107a6:	f006 fbcb 	bl	8016f40 <ip4_addr_isbroadcast_u32>
 80107aa:	4603      	mov	r3, r0
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	f040 83ba 	bne.w	8010f26 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80107b2:	4b92      	ldr	r3, [pc, #584]	; (80109fc <tcp_input+0x290>)
 80107b4:	695b      	ldr	r3, [r3, #20]
 80107b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80107ba:	2be0      	cmp	r3, #224	; 0xe0
 80107bc:	f000 83b3 	beq.w	8010f26 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80107c0:	4b8d      	ldr	r3, [pc, #564]	; (80109f8 <tcp_input+0x28c>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	899b      	ldrh	r3, [r3, #12]
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7fc fc3b 	bl	800d044 <lwip_htons>
 80107ce:	4603      	mov	r3, r0
 80107d0:	0b1b      	lsrs	r3, r3, #12
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	b2db      	uxtb	r3, r3
 80107d6:	009b      	lsls	r3, r3, #2
 80107d8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80107da:	7cbb      	ldrb	r3, [r7, #18]
 80107dc:	2b13      	cmp	r3, #19
 80107de:	f240 83a4 	bls.w	8010f2a <tcp_input+0x7be>
 80107e2:	7cbb      	ldrb	r3, [r7, #18]
 80107e4:	b29a      	uxth	r2, r3
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	891b      	ldrh	r3, [r3, #8]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	f200 839d 	bhi.w	8010f2a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80107f0:	7cbb      	ldrb	r3, [r7, #18]
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	3b14      	subs	r3, #20
 80107f6:	b29a      	uxth	r2, r3
 80107f8:	4b81      	ldr	r3, [pc, #516]	; (8010a00 <tcp_input+0x294>)
 80107fa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80107fc:	4b81      	ldr	r3, [pc, #516]	; (8010a04 <tcp_input+0x298>)
 80107fe:	2200      	movs	r2, #0
 8010800:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	895a      	ldrh	r2, [r3, #10]
 8010806:	7cbb      	ldrb	r3, [r7, #18]
 8010808:	b29b      	uxth	r3, r3
 801080a:	429a      	cmp	r2, r3
 801080c:	d309      	bcc.n	8010822 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801080e:	4b7c      	ldr	r3, [pc, #496]	; (8010a00 <tcp_input+0x294>)
 8010810:	881a      	ldrh	r2, [r3, #0]
 8010812:	4b7d      	ldr	r3, [pc, #500]	; (8010a08 <tcp_input+0x29c>)
 8010814:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010816:	7cbb      	ldrb	r3, [r7, #18]
 8010818:	4619      	mov	r1, r3
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f7fd fed4 	bl	800e5c8 <pbuf_remove_header>
 8010820:	e04e      	b.n	80108c0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d105      	bne.n	8010836 <tcp_input+0xca>
 801082a:	4b70      	ldr	r3, [pc, #448]	; (80109ec <tcp_input+0x280>)
 801082c:	22c2      	movs	r2, #194	; 0xc2
 801082e:	4977      	ldr	r1, [pc, #476]	; (8010a0c <tcp_input+0x2a0>)
 8010830:	4870      	ldr	r0, [pc, #448]	; (80109f4 <tcp_input+0x288>)
 8010832:	f007 fec1 	bl	80185b8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010836:	2114      	movs	r1, #20
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f7fd fec5 	bl	800e5c8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	895a      	ldrh	r2, [r3, #10]
 8010842:	4b71      	ldr	r3, [pc, #452]	; (8010a08 <tcp_input+0x29c>)
 8010844:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010846:	4b6e      	ldr	r3, [pc, #440]	; (8010a00 <tcp_input+0x294>)
 8010848:	881a      	ldrh	r2, [r3, #0]
 801084a:	4b6f      	ldr	r3, [pc, #444]	; (8010a08 <tcp_input+0x29c>)
 801084c:	881b      	ldrh	r3, [r3, #0]
 801084e:	1ad3      	subs	r3, r2, r3
 8010850:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010852:	4b6d      	ldr	r3, [pc, #436]	; (8010a08 <tcp_input+0x29c>)
 8010854:	881b      	ldrh	r3, [r3, #0]
 8010856:	4619      	mov	r1, r3
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f7fd feb5 	bl	800e5c8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	895b      	ldrh	r3, [r3, #10]
 8010864:	8a3a      	ldrh	r2, [r7, #16]
 8010866:	429a      	cmp	r2, r3
 8010868:	f200 8361 	bhi.w	8010f2e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	4a64      	ldr	r2, [pc, #400]	; (8010a04 <tcp_input+0x298>)
 8010874:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	8a3a      	ldrh	r2, [r7, #16]
 801087c:	4611      	mov	r1, r2
 801087e:	4618      	mov	r0, r3
 8010880:	f7fd fea2 	bl	800e5c8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	891a      	ldrh	r2, [r3, #8]
 8010888:	8a3b      	ldrh	r3, [r7, #16]
 801088a:	1ad3      	subs	r3, r2, r3
 801088c:	b29a      	uxth	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	895b      	ldrh	r3, [r3, #10]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d005      	beq.n	80108a6 <tcp_input+0x13a>
 801089a:	4b54      	ldr	r3, [pc, #336]	; (80109ec <tcp_input+0x280>)
 801089c:	22df      	movs	r2, #223	; 0xdf
 801089e:	495c      	ldr	r1, [pc, #368]	; (8010a10 <tcp_input+0x2a4>)
 80108a0:	4854      	ldr	r0, [pc, #336]	; (80109f4 <tcp_input+0x288>)
 80108a2:	f007 fe89 	bl	80185b8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	891a      	ldrh	r2, [r3, #8]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	891b      	ldrh	r3, [r3, #8]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d005      	beq.n	80108c0 <tcp_input+0x154>
 80108b4:	4b4d      	ldr	r3, [pc, #308]	; (80109ec <tcp_input+0x280>)
 80108b6:	22e0      	movs	r2, #224	; 0xe0
 80108b8:	4956      	ldr	r1, [pc, #344]	; (8010a14 <tcp_input+0x2a8>)
 80108ba:	484e      	ldr	r0, [pc, #312]	; (80109f4 <tcp_input+0x288>)
 80108bc:	f007 fe7c 	bl	80185b8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80108c0:	4b4d      	ldr	r3, [pc, #308]	; (80109f8 <tcp_input+0x28c>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	881b      	ldrh	r3, [r3, #0]
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	4a4b      	ldr	r2, [pc, #300]	; (80109f8 <tcp_input+0x28c>)
 80108ca:	6814      	ldr	r4, [r2, #0]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fc fbb9 	bl	800d044 <lwip_htons>
 80108d2:	4603      	mov	r3, r0
 80108d4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80108d6:	4b48      	ldr	r3, [pc, #288]	; (80109f8 <tcp_input+0x28c>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	885b      	ldrh	r3, [r3, #2]
 80108dc:	b29b      	uxth	r3, r3
 80108de:	4a46      	ldr	r2, [pc, #280]	; (80109f8 <tcp_input+0x28c>)
 80108e0:	6814      	ldr	r4, [r2, #0]
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7fc fbae 	bl	800d044 <lwip_htons>
 80108e8:	4603      	mov	r3, r0
 80108ea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80108ec:	4b42      	ldr	r3, [pc, #264]	; (80109f8 <tcp_input+0x28c>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	4a41      	ldr	r2, [pc, #260]	; (80109f8 <tcp_input+0x28c>)
 80108f4:	6814      	ldr	r4, [r2, #0]
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7fc fbb9 	bl	800d06e <lwip_htonl>
 80108fc:	4603      	mov	r3, r0
 80108fe:	6063      	str	r3, [r4, #4]
 8010900:	6863      	ldr	r3, [r4, #4]
 8010902:	4a45      	ldr	r2, [pc, #276]	; (8010a18 <tcp_input+0x2ac>)
 8010904:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010906:	4b3c      	ldr	r3, [pc, #240]	; (80109f8 <tcp_input+0x28c>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	4a3a      	ldr	r2, [pc, #232]	; (80109f8 <tcp_input+0x28c>)
 801090e:	6814      	ldr	r4, [r2, #0]
 8010910:	4618      	mov	r0, r3
 8010912:	f7fc fbac 	bl	800d06e <lwip_htonl>
 8010916:	4603      	mov	r3, r0
 8010918:	60a3      	str	r3, [r4, #8]
 801091a:	68a3      	ldr	r3, [r4, #8]
 801091c:	4a3f      	ldr	r2, [pc, #252]	; (8010a1c <tcp_input+0x2b0>)
 801091e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010920:	4b35      	ldr	r3, [pc, #212]	; (80109f8 <tcp_input+0x28c>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	89db      	ldrh	r3, [r3, #14]
 8010926:	b29b      	uxth	r3, r3
 8010928:	4a33      	ldr	r2, [pc, #204]	; (80109f8 <tcp_input+0x28c>)
 801092a:	6814      	ldr	r4, [r2, #0]
 801092c:	4618      	mov	r0, r3
 801092e:	f7fc fb89 	bl	800d044 <lwip_htons>
 8010932:	4603      	mov	r3, r0
 8010934:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010936:	4b30      	ldr	r3, [pc, #192]	; (80109f8 <tcp_input+0x28c>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	899b      	ldrh	r3, [r3, #12]
 801093c:	b29b      	uxth	r3, r3
 801093e:	4618      	mov	r0, r3
 8010940:	f7fc fb80 	bl	800d044 <lwip_htons>
 8010944:	4603      	mov	r3, r0
 8010946:	b2db      	uxtb	r3, r3
 8010948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801094c:	b2da      	uxtb	r2, r3
 801094e:	4b34      	ldr	r3, [pc, #208]	; (8010a20 <tcp_input+0x2b4>)
 8010950:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	891a      	ldrh	r2, [r3, #8]
 8010956:	4b33      	ldr	r3, [pc, #204]	; (8010a24 <tcp_input+0x2b8>)
 8010958:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801095a:	4b31      	ldr	r3, [pc, #196]	; (8010a20 <tcp_input+0x2b4>)
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	f003 0303 	and.w	r3, r3, #3
 8010962:	2b00      	cmp	r3, #0
 8010964:	d00c      	beq.n	8010980 <tcp_input+0x214>
    tcplen++;
 8010966:	4b2f      	ldr	r3, [pc, #188]	; (8010a24 <tcp_input+0x2b8>)
 8010968:	881b      	ldrh	r3, [r3, #0]
 801096a:	3301      	adds	r3, #1
 801096c:	b29a      	uxth	r2, r3
 801096e:	4b2d      	ldr	r3, [pc, #180]	; (8010a24 <tcp_input+0x2b8>)
 8010970:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	891a      	ldrh	r2, [r3, #8]
 8010976:	4b2b      	ldr	r3, [pc, #172]	; (8010a24 <tcp_input+0x2b8>)
 8010978:	881b      	ldrh	r3, [r3, #0]
 801097a:	429a      	cmp	r2, r3
 801097c:	f200 82d9 	bhi.w	8010f32 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010980:	2300      	movs	r3, #0
 8010982:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010984:	4b28      	ldr	r3, [pc, #160]	; (8010a28 <tcp_input+0x2bc>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	61fb      	str	r3, [r7, #28]
 801098a:	e09d      	b.n	8010ac8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801098c:	69fb      	ldr	r3, [r7, #28]
 801098e:	7d1b      	ldrb	r3, [r3, #20]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d105      	bne.n	80109a0 <tcp_input+0x234>
 8010994:	4b15      	ldr	r3, [pc, #84]	; (80109ec <tcp_input+0x280>)
 8010996:	22fb      	movs	r2, #251	; 0xfb
 8010998:	4924      	ldr	r1, [pc, #144]	; (8010a2c <tcp_input+0x2c0>)
 801099a:	4816      	ldr	r0, [pc, #88]	; (80109f4 <tcp_input+0x288>)
 801099c:	f007 fe0c 	bl	80185b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80109a0:	69fb      	ldr	r3, [r7, #28]
 80109a2:	7d1b      	ldrb	r3, [r3, #20]
 80109a4:	2b0a      	cmp	r3, #10
 80109a6:	d105      	bne.n	80109b4 <tcp_input+0x248>
 80109a8:	4b10      	ldr	r3, [pc, #64]	; (80109ec <tcp_input+0x280>)
 80109aa:	22fc      	movs	r2, #252	; 0xfc
 80109ac:	4920      	ldr	r1, [pc, #128]	; (8010a30 <tcp_input+0x2c4>)
 80109ae:	4811      	ldr	r0, [pc, #68]	; (80109f4 <tcp_input+0x288>)
 80109b0:	f007 fe02 	bl	80185b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80109b4:	69fb      	ldr	r3, [r7, #28]
 80109b6:	7d1b      	ldrb	r3, [r3, #20]
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	d105      	bne.n	80109c8 <tcp_input+0x25c>
 80109bc:	4b0b      	ldr	r3, [pc, #44]	; (80109ec <tcp_input+0x280>)
 80109be:	22fd      	movs	r2, #253	; 0xfd
 80109c0:	491c      	ldr	r1, [pc, #112]	; (8010a34 <tcp_input+0x2c8>)
 80109c2:	480c      	ldr	r0, [pc, #48]	; (80109f4 <tcp_input+0x288>)
 80109c4:	f007 fdf8 	bl	80185b8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80109c8:	69fb      	ldr	r3, [r7, #28]
 80109ca:	7a1b      	ldrb	r3, [r3, #8]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d033      	beq.n	8010a38 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80109d0:	69fb      	ldr	r3, [r7, #28]
 80109d2:	7a1a      	ldrb	r2, [r3, #8]
 80109d4:	4b09      	ldr	r3, [pc, #36]	; (80109fc <tcp_input+0x290>)
 80109d6:	685b      	ldr	r3, [r3, #4]
 80109d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109dc:	3301      	adds	r3, #1
 80109de:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d029      	beq.n	8010a38 <tcp_input+0x2cc>
      prev = pcb;
 80109e4:	69fb      	ldr	r3, [r7, #28]
 80109e6:	61bb      	str	r3, [r7, #24]
      continue;
 80109e8:	e06b      	b.n	8010ac2 <tcp_input+0x356>
 80109ea:	bf00      	nop
 80109ec:	0801b548 	.word	0x0801b548
 80109f0:	0801b57c 	.word	0x0801b57c
 80109f4:	0801b594 	.word	0x0801b594
 80109f8:	200069a4 	.word	0x200069a4
 80109fc:	2000a300 	.word	0x2000a300
 8010a00:	200069a8 	.word	0x200069a8
 8010a04:	200069ac 	.word	0x200069ac
 8010a08:	200069aa 	.word	0x200069aa
 8010a0c:	0801b5bc 	.word	0x0801b5bc
 8010a10:	0801b5cc 	.word	0x0801b5cc
 8010a14:	0801b5d8 	.word	0x0801b5d8
 8010a18:	200069b4 	.word	0x200069b4
 8010a1c:	200069b8 	.word	0x200069b8
 8010a20:	200069c0 	.word	0x200069c0
 8010a24:	200069be 	.word	0x200069be
 8010a28:	2000da14 	.word	0x2000da14
 8010a2c:	0801b5f8 	.word	0x0801b5f8
 8010a30:	0801b620 	.word	0x0801b620
 8010a34:	0801b64c 	.word	0x0801b64c
    }

    if (pcb->remote_port == tcphdr->src &&
 8010a38:	69fb      	ldr	r3, [r7, #28]
 8010a3a:	8b1a      	ldrh	r2, [r3, #24]
 8010a3c:	4b94      	ldr	r3, [pc, #592]	; (8010c90 <tcp_input+0x524>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	881b      	ldrh	r3, [r3, #0]
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d13a      	bne.n	8010abe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010a48:	69fb      	ldr	r3, [r7, #28]
 8010a4a:	8ada      	ldrh	r2, [r3, #22]
 8010a4c:	4b90      	ldr	r3, [pc, #576]	; (8010c90 <tcp_input+0x524>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	885b      	ldrh	r3, [r3, #2]
 8010a52:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d132      	bne.n	8010abe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010a58:	69fb      	ldr	r3, [r7, #28]
 8010a5a:	685a      	ldr	r2, [r3, #4]
 8010a5c:	4b8d      	ldr	r3, [pc, #564]	; (8010c94 <tcp_input+0x528>)
 8010a5e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d12c      	bne.n	8010abe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010a64:	69fb      	ldr	r3, [r7, #28]
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	4b8a      	ldr	r3, [pc, #552]	; (8010c94 <tcp_input+0x528>)
 8010a6a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d126      	bne.n	8010abe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010a70:	69fb      	ldr	r3, [r7, #28]
 8010a72:	68db      	ldr	r3, [r3, #12]
 8010a74:	69fa      	ldr	r2, [r7, #28]
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d106      	bne.n	8010a88 <tcp_input+0x31c>
 8010a7a:	4b87      	ldr	r3, [pc, #540]	; (8010c98 <tcp_input+0x52c>)
 8010a7c:	f240 120d 	movw	r2, #269	; 0x10d
 8010a80:	4986      	ldr	r1, [pc, #536]	; (8010c9c <tcp_input+0x530>)
 8010a82:	4887      	ldr	r0, [pc, #540]	; (8010ca0 <tcp_input+0x534>)
 8010a84:	f007 fd98 	bl	80185b8 <iprintf>
      if (prev != NULL) {
 8010a88:	69bb      	ldr	r3, [r7, #24]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d00a      	beq.n	8010aa4 <tcp_input+0x338>
        prev->next = pcb->next;
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	68da      	ldr	r2, [r3, #12]
 8010a92:	69bb      	ldr	r3, [r7, #24]
 8010a94:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010a96:	4b83      	ldr	r3, [pc, #524]	; (8010ca4 <tcp_input+0x538>)
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	69fb      	ldr	r3, [r7, #28]
 8010a9c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010a9e:	4a81      	ldr	r2, [pc, #516]	; (8010ca4 <tcp_input+0x538>)
 8010aa0:	69fb      	ldr	r3, [r7, #28]
 8010aa2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010aa4:	69fb      	ldr	r3, [r7, #28]
 8010aa6:	68db      	ldr	r3, [r3, #12]
 8010aa8:	69fa      	ldr	r2, [r7, #28]
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d111      	bne.n	8010ad2 <tcp_input+0x366>
 8010aae:	4b7a      	ldr	r3, [pc, #488]	; (8010c98 <tcp_input+0x52c>)
 8010ab0:	f240 1215 	movw	r2, #277	; 0x115
 8010ab4:	497c      	ldr	r1, [pc, #496]	; (8010ca8 <tcp_input+0x53c>)
 8010ab6:	487a      	ldr	r0, [pc, #488]	; (8010ca0 <tcp_input+0x534>)
 8010ab8:	f007 fd7e 	bl	80185b8 <iprintf>
      break;
 8010abc:	e009      	b.n	8010ad2 <tcp_input+0x366>
    }
    prev = pcb;
 8010abe:	69fb      	ldr	r3, [r7, #28]
 8010ac0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ac2:	69fb      	ldr	r3, [r7, #28]
 8010ac4:	68db      	ldr	r3, [r3, #12]
 8010ac6:	61fb      	str	r3, [r7, #28]
 8010ac8:	69fb      	ldr	r3, [r7, #28]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	f47f af5e 	bne.w	801098c <tcp_input+0x220>
 8010ad0:	e000      	b.n	8010ad4 <tcp_input+0x368>
      break;
 8010ad2:	bf00      	nop
  }

  if (pcb == NULL) {
 8010ad4:	69fb      	ldr	r3, [r7, #28]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	f040 8095 	bne.w	8010c06 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010adc:	4b73      	ldr	r3, [pc, #460]	; (8010cac <tcp_input+0x540>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	61fb      	str	r3, [r7, #28]
 8010ae2:	e03f      	b.n	8010b64 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010ae4:	69fb      	ldr	r3, [r7, #28]
 8010ae6:	7d1b      	ldrb	r3, [r3, #20]
 8010ae8:	2b0a      	cmp	r3, #10
 8010aea:	d006      	beq.n	8010afa <tcp_input+0x38e>
 8010aec:	4b6a      	ldr	r3, [pc, #424]	; (8010c98 <tcp_input+0x52c>)
 8010aee:	f240 121f 	movw	r2, #287	; 0x11f
 8010af2:	496f      	ldr	r1, [pc, #444]	; (8010cb0 <tcp_input+0x544>)
 8010af4:	486a      	ldr	r0, [pc, #424]	; (8010ca0 <tcp_input+0x534>)
 8010af6:	f007 fd5f 	bl	80185b8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	7a1b      	ldrb	r3, [r3, #8]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d009      	beq.n	8010b16 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010b02:	69fb      	ldr	r3, [r7, #28]
 8010b04:	7a1a      	ldrb	r2, [r3, #8]
 8010b06:	4b63      	ldr	r3, [pc, #396]	; (8010c94 <tcp_input+0x528>)
 8010b08:	685b      	ldr	r3, [r3, #4]
 8010b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b0e:	3301      	adds	r3, #1
 8010b10:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d122      	bne.n	8010b5c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010b16:	69fb      	ldr	r3, [r7, #28]
 8010b18:	8b1a      	ldrh	r2, [r3, #24]
 8010b1a:	4b5d      	ldr	r3, [pc, #372]	; (8010c90 <tcp_input+0x524>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	881b      	ldrh	r3, [r3, #0]
 8010b20:	b29b      	uxth	r3, r3
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d11b      	bne.n	8010b5e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010b26:	69fb      	ldr	r3, [r7, #28]
 8010b28:	8ada      	ldrh	r2, [r3, #22]
 8010b2a:	4b59      	ldr	r3, [pc, #356]	; (8010c90 <tcp_input+0x524>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	885b      	ldrh	r3, [r3, #2]
 8010b30:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d113      	bne.n	8010b5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b36:	69fb      	ldr	r3, [r7, #28]
 8010b38:	685a      	ldr	r2, [r3, #4]
 8010b3a:	4b56      	ldr	r3, [pc, #344]	; (8010c94 <tcp_input+0x528>)
 8010b3c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d10d      	bne.n	8010b5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	4b53      	ldr	r3, [pc, #332]	; (8010c94 <tcp_input+0x528>)
 8010b48:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d107      	bne.n	8010b5e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010b4e:	69f8      	ldr	r0, [r7, #28]
 8010b50:	f000 fb54 	bl	80111fc <tcp_timewait_input>
        }
        pbuf_free(p);
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f7fd fdbd 	bl	800e6d4 <pbuf_free>
        return;
 8010b5a:	e1f0      	b.n	8010f3e <tcp_input+0x7d2>
        continue;
 8010b5c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b5e:	69fb      	ldr	r3, [r7, #28]
 8010b60:	68db      	ldr	r3, [r3, #12]
 8010b62:	61fb      	str	r3, [r7, #28]
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d1bc      	bne.n	8010ae4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010b6e:	4b51      	ldr	r3, [pc, #324]	; (8010cb4 <tcp_input+0x548>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	617b      	str	r3, [r7, #20]
 8010b74:	e02a      	b.n	8010bcc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	7a1b      	ldrb	r3, [r3, #8]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d00c      	beq.n	8010b98 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	7a1a      	ldrb	r2, [r3, #8]
 8010b82:	4b44      	ldr	r3, [pc, #272]	; (8010c94 <tcp_input+0x528>)
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b8a:	3301      	adds	r3, #1
 8010b8c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d002      	beq.n	8010b98 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	61bb      	str	r3, [r7, #24]
        continue;
 8010b96:	e016      	b.n	8010bc6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	8ada      	ldrh	r2, [r3, #22]
 8010b9c:	4b3c      	ldr	r3, [pc, #240]	; (8010c90 <tcp_input+0x524>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	885b      	ldrh	r3, [r3, #2]
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d10c      	bne.n	8010bc2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	4b39      	ldr	r3, [pc, #228]	; (8010c94 <tcp_input+0x528>)
 8010bae:	695b      	ldr	r3, [r3, #20]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d00f      	beq.n	8010bd4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d00d      	beq.n	8010bd6 <tcp_input+0x46a>
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d009      	beq.n	8010bd6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	617b      	str	r3, [r7, #20]
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d1d1      	bne.n	8010b76 <tcp_input+0x40a>
 8010bd2:	e000      	b.n	8010bd6 <tcp_input+0x46a>
            break;
 8010bd4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d014      	beq.n	8010c06 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010bdc:	69bb      	ldr	r3, [r7, #24]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d00a      	beq.n	8010bf8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	68da      	ldr	r2, [r3, #12]
 8010be6:	69bb      	ldr	r3, [r7, #24]
 8010be8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010bea:	4b32      	ldr	r3, [pc, #200]	; (8010cb4 <tcp_input+0x548>)
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010bf2:	4a30      	ldr	r2, [pc, #192]	; (8010cb4 <tcp_input+0x548>)
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010bf8:	6978      	ldr	r0, [r7, #20]
 8010bfa:	f000 fa01 	bl	8011000 <tcp_listen_input>
      }
      pbuf_free(p);
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f7fd fd68 	bl	800e6d4 <pbuf_free>
      return;
 8010c04:	e19b      	b.n	8010f3e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010c06:	69fb      	ldr	r3, [r7, #28]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	f000 8160 	beq.w	8010ece <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010c0e:	4b2a      	ldr	r3, [pc, #168]	; (8010cb8 <tcp_input+0x54c>)
 8010c10:	2200      	movs	r2, #0
 8010c12:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	891a      	ldrh	r2, [r3, #8]
 8010c18:	4b27      	ldr	r3, [pc, #156]	; (8010cb8 <tcp_input+0x54c>)
 8010c1a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010c1c:	4a26      	ldr	r2, [pc, #152]	; (8010cb8 <tcp_input+0x54c>)
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010c22:	4b1b      	ldr	r3, [pc, #108]	; (8010c90 <tcp_input+0x524>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	4a24      	ldr	r2, [pc, #144]	; (8010cb8 <tcp_input+0x54c>)
 8010c28:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010c2a:	4b24      	ldr	r3, [pc, #144]	; (8010cbc <tcp_input+0x550>)
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010c30:	4b23      	ldr	r3, [pc, #140]	; (8010cc0 <tcp_input+0x554>)
 8010c32:	2200      	movs	r2, #0
 8010c34:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010c36:	4b23      	ldr	r3, [pc, #140]	; (8010cc4 <tcp_input+0x558>)
 8010c38:	2200      	movs	r2, #0
 8010c3a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010c3c:	4b22      	ldr	r3, [pc, #136]	; (8010cc8 <tcp_input+0x55c>)
 8010c3e:	781b      	ldrb	r3, [r3, #0]
 8010c40:	f003 0308 	and.w	r3, r3, #8
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d006      	beq.n	8010c56 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	7b5b      	ldrb	r3, [r3, #13]
 8010c4c:	f043 0301 	orr.w	r3, r3, #1
 8010c50:	b2da      	uxtb	r2, r3
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010c56:	69fb      	ldr	r3, [r7, #28]
 8010c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d038      	beq.n	8010cd0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010c5e:	69f8      	ldr	r0, [r7, #28]
 8010c60:	f7ff f870 	bl	800fd44 <tcp_process_refused_data>
 8010c64:	4603      	mov	r3, r0
 8010c66:	f113 0f0d 	cmn.w	r3, #13
 8010c6a:	d007      	beq.n	8010c7c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d02d      	beq.n	8010cd0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010c74:	4b15      	ldr	r3, [pc, #84]	; (8010ccc <tcp_input+0x560>)
 8010c76:	881b      	ldrh	r3, [r3, #0]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d029      	beq.n	8010cd0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	f040 8104 	bne.w	8010e8e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010c86:	69f8      	ldr	r0, [r7, #28]
 8010c88:	f003 fe16 	bl	80148b8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010c8c:	e0ff      	b.n	8010e8e <tcp_input+0x722>
 8010c8e:	bf00      	nop
 8010c90:	200069a4 	.word	0x200069a4
 8010c94:	2000a300 	.word	0x2000a300
 8010c98:	0801b548 	.word	0x0801b548
 8010c9c:	0801b674 	.word	0x0801b674
 8010ca0:	0801b594 	.word	0x0801b594
 8010ca4:	2000da14 	.word	0x2000da14
 8010ca8:	0801b6a0 	.word	0x0801b6a0
 8010cac:	2000da24 	.word	0x2000da24
 8010cb0:	0801b6cc 	.word	0x0801b6cc
 8010cb4:	2000da1c 	.word	0x2000da1c
 8010cb8:	20006994 	.word	0x20006994
 8010cbc:	200069c4 	.word	0x200069c4
 8010cc0:	200069c1 	.word	0x200069c1
 8010cc4:	200069bc 	.word	0x200069bc
 8010cc8:	200069c0 	.word	0x200069c0
 8010ccc:	200069be 	.word	0x200069be
      }
    }
    tcp_input_pcb = pcb;
 8010cd0:	4a9c      	ldr	r2, [pc, #624]	; (8010f44 <tcp_input+0x7d8>)
 8010cd2:	69fb      	ldr	r3, [r7, #28]
 8010cd4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010cd6:	69f8      	ldr	r0, [r7, #28]
 8010cd8:	f000 fb0a 	bl	80112f0 <tcp_process>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010ce0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ce4:	f113 0f0d 	cmn.w	r3, #13
 8010ce8:	f000 80d3 	beq.w	8010e92 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010cec:	4b96      	ldr	r3, [pc, #600]	; (8010f48 <tcp_input+0x7dc>)
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	f003 0308 	and.w	r3, r3, #8
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d015      	beq.n	8010d24 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010cf8:	69fb      	ldr	r3, [r7, #28]
 8010cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d008      	beq.n	8010d14 <tcp_input+0x5a8>
 8010d02:	69fb      	ldr	r3, [r7, #28]
 8010d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d08:	69fa      	ldr	r2, [r7, #28]
 8010d0a:	6912      	ldr	r2, [r2, #16]
 8010d0c:	f06f 010d 	mvn.w	r1, #13
 8010d10:	4610      	mov	r0, r2
 8010d12:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010d14:	69f9      	ldr	r1, [r7, #28]
 8010d16:	488d      	ldr	r0, [pc, #564]	; (8010f4c <tcp_input+0x7e0>)
 8010d18:	f7ff fbb0 	bl	801047c <tcp_pcb_remove>
        tcp_free(pcb);
 8010d1c:	69f8      	ldr	r0, [r7, #28]
 8010d1e:	f7fd ff95 	bl	800ec4c <tcp_free>
 8010d22:	e0c1      	b.n	8010ea8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010d24:	2300      	movs	r3, #0
 8010d26:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010d28:	4b89      	ldr	r3, [pc, #548]	; (8010f50 <tcp_input+0x7e4>)
 8010d2a:	881b      	ldrh	r3, [r3, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d01d      	beq.n	8010d6c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010d30:	4b87      	ldr	r3, [pc, #540]	; (8010f50 <tcp_input+0x7e4>)
 8010d32:	881b      	ldrh	r3, [r3, #0]
 8010d34:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010d36:	69fb      	ldr	r3, [r7, #28]
 8010d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d00a      	beq.n	8010d56 <tcp_input+0x5ea>
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d46:	69fa      	ldr	r2, [r7, #28]
 8010d48:	6910      	ldr	r0, [r2, #16]
 8010d4a:	89fa      	ldrh	r2, [r7, #14]
 8010d4c:	69f9      	ldr	r1, [r7, #28]
 8010d4e:	4798      	blx	r3
 8010d50:	4603      	mov	r3, r0
 8010d52:	74fb      	strb	r3, [r7, #19]
 8010d54:	e001      	b.n	8010d5a <tcp_input+0x5ee>
 8010d56:	2300      	movs	r3, #0
 8010d58:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010d5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d5e:	f113 0f0d 	cmn.w	r3, #13
 8010d62:	f000 8098 	beq.w	8010e96 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010d66:	4b7a      	ldr	r3, [pc, #488]	; (8010f50 <tcp_input+0x7e4>)
 8010d68:	2200      	movs	r2, #0
 8010d6a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010d6c:	69f8      	ldr	r0, [r7, #28]
 8010d6e:	f000 f907 	bl	8010f80 <tcp_input_delayed_close>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	f040 8090 	bne.w	8010e9a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010d7a:	4b76      	ldr	r3, [pc, #472]	; (8010f54 <tcp_input+0x7e8>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d041      	beq.n	8010e06 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010d82:	69fb      	ldr	r3, [r7, #28]
 8010d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d006      	beq.n	8010d98 <tcp_input+0x62c>
 8010d8a:	4b73      	ldr	r3, [pc, #460]	; (8010f58 <tcp_input+0x7ec>)
 8010d8c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010d90:	4972      	ldr	r1, [pc, #456]	; (8010f5c <tcp_input+0x7f0>)
 8010d92:	4873      	ldr	r0, [pc, #460]	; (8010f60 <tcp_input+0x7f4>)
 8010d94:	f007 fc10 	bl	80185b8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010d98:	69fb      	ldr	r3, [r7, #28]
 8010d9a:	8b5b      	ldrh	r3, [r3, #26]
 8010d9c:	f003 0310 	and.w	r3, r3, #16
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d008      	beq.n	8010db6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010da4:	4b6b      	ldr	r3, [pc, #428]	; (8010f54 <tcp_input+0x7e8>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7fd fc93 	bl	800e6d4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010dae:	69f8      	ldr	r0, [r7, #28]
 8010db0:	f7fe fa90 	bl	800f2d4 <tcp_abort>
            goto aborted;
 8010db4:	e078      	b.n	8010ea8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010db6:	69fb      	ldr	r3, [r7, #28]
 8010db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d00c      	beq.n	8010dda <tcp_input+0x66e>
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010dc6:	69fb      	ldr	r3, [r7, #28]
 8010dc8:	6918      	ldr	r0, [r3, #16]
 8010dca:	4b62      	ldr	r3, [pc, #392]	; (8010f54 <tcp_input+0x7e8>)
 8010dcc:	681a      	ldr	r2, [r3, #0]
 8010dce:	2300      	movs	r3, #0
 8010dd0:	69f9      	ldr	r1, [r7, #28]
 8010dd2:	47a0      	blx	r4
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	74fb      	strb	r3, [r7, #19]
 8010dd8:	e008      	b.n	8010dec <tcp_input+0x680>
 8010dda:	4b5e      	ldr	r3, [pc, #376]	; (8010f54 <tcp_input+0x7e8>)
 8010ddc:	681a      	ldr	r2, [r3, #0]
 8010dde:	2300      	movs	r3, #0
 8010de0:	69f9      	ldr	r1, [r7, #28]
 8010de2:	2000      	movs	r0, #0
 8010de4:	f7ff f884 	bl	800fef0 <tcp_recv_null>
 8010de8:	4603      	mov	r3, r0
 8010dea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010dec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010df0:	f113 0f0d 	cmn.w	r3, #13
 8010df4:	d053      	beq.n	8010e9e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010df6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d003      	beq.n	8010e06 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010dfe:	4b55      	ldr	r3, [pc, #340]	; (8010f54 <tcp_input+0x7e8>)
 8010e00:	681a      	ldr	r2, [r3, #0]
 8010e02:	69fb      	ldr	r3, [r7, #28]
 8010e04:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010e06:	4b50      	ldr	r3, [pc, #320]	; (8010f48 <tcp_input+0x7dc>)
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	f003 0320 	and.w	r3, r3, #32
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d030      	beq.n	8010e74 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010e12:	69fb      	ldr	r3, [r7, #28]
 8010e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d009      	beq.n	8010e2e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010e1a:	69fb      	ldr	r3, [r7, #28]
 8010e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e1e:	7b5a      	ldrb	r2, [r3, #13]
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e24:	f042 0220 	orr.w	r2, r2, #32
 8010e28:	b2d2      	uxtb	r2, r2
 8010e2a:	735a      	strb	r2, [r3, #13]
 8010e2c:	e022      	b.n	8010e74 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010e2e:	69fb      	ldr	r3, [r7, #28]
 8010e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e32:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010e36:	d005      	beq.n	8010e44 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010e38:	69fb      	ldr	r3, [r7, #28]
 8010e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	b29a      	uxth	r2, r3
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010e44:	69fb      	ldr	r3, [r7, #28]
 8010e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d00b      	beq.n	8010e66 <tcp_input+0x6fa>
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010e54:	69fb      	ldr	r3, [r7, #28]
 8010e56:	6918      	ldr	r0, [r3, #16]
 8010e58:	2300      	movs	r3, #0
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	69f9      	ldr	r1, [r7, #28]
 8010e5e:	47a0      	blx	r4
 8010e60:	4603      	mov	r3, r0
 8010e62:	74fb      	strb	r3, [r7, #19]
 8010e64:	e001      	b.n	8010e6a <tcp_input+0x6fe>
 8010e66:	2300      	movs	r3, #0
 8010e68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010e6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e6e:	f113 0f0d 	cmn.w	r3, #13
 8010e72:	d016      	beq.n	8010ea2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010e74:	4b33      	ldr	r3, [pc, #204]	; (8010f44 <tcp_input+0x7d8>)
 8010e76:	2200      	movs	r2, #0
 8010e78:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010e7a:	69f8      	ldr	r0, [r7, #28]
 8010e7c:	f000 f880 	bl	8010f80 <tcp_input_delayed_close>
 8010e80:	4603      	mov	r3, r0
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d10f      	bne.n	8010ea6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010e86:	69f8      	ldr	r0, [r7, #28]
 8010e88:	f002 ff10 	bl	8013cac <tcp_output>
 8010e8c:	e00c      	b.n	8010ea8 <tcp_input+0x73c>
        goto aborted;
 8010e8e:	bf00      	nop
 8010e90:	e00a      	b.n	8010ea8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010e92:	bf00      	nop
 8010e94:	e008      	b.n	8010ea8 <tcp_input+0x73c>
              goto aborted;
 8010e96:	bf00      	nop
 8010e98:	e006      	b.n	8010ea8 <tcp_input+0x73c>
          goto aborted;
 8010e9a:	bf00      	nop
 8010e9c:	e004      	b.n	8010ea8 <tcp_input+0x73c>
            goto aborted;
 8010e9e:	bf00      	nop
 8010ea0:	e002      	b.n	8010ea8 <tcp_input+0x73c>
              goto aborted;
 8010ea2:	bf00      	nop
 8010ea4:	e000      	b.n	8010ea8 <tcp_input+0x73c>
          goto aborted;
 8010ea6:	bf00      	nop
    tcp_input_pcb = NULL;
 8010ea8:	4b26      	ldr	r3, [pc, #152]	; (8010f44 <tcp_input+0x7d8>)
 8010eaa:	2200      	movs	r2, #0
 8010eac:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010eae:	4b29      	ldr	r3, [pc, #164]	; (8010f54 <tcp_input+0x7e8>)
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010eb4:	4b2b      	ldr	r3, [pc, #172]	; (8010f64 <tcp_input+0x7f8>)
 8010eb6:	685b      	ldr	r3, [r3, #4]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d03f      	beq.n	8010f3c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8010ebc:	4b29      	ldr	r3, [pc, #164]	; (8010f64 <tcp_input+0x7f8>)
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7fd fc07 	bl	800e6d4 <pbuf_free>
      inseg.p = NULL;
 8010ec6:	4b27      	ldr	r3, [pc, #156]	; (8010f64 <tcp_input+0x7f8>)
 8010ec8:	2200      	movs	r2, #0
 8010eca:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010ecc:	e036      	b.n	8010f3c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010ece:	4b26      	ldr	r3, [pc, #152]	; (8010f68 <tcp_input+0x7fc>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	899b      	ldrh	r3, [r3, #12]
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fc f8b4 	bl	800d044 <lwip_htons>
 8010edc:	4603      	mov	r3, r0
 8010ede:	b2db      	uxtb	r3, r3
 8010ee0:	f003 0304 	and.w	r3, r3, #4
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d118      	bne.n	8010f1a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ee8:	4b20      	ldr	r3, [pc, #128]	; (8010f6c <tcp_input+0x800>)
 8010eea:	6819      	ldr	r1, [r3, #0]
 8010eec:	4b20      	ldr	r3, [pc, #128]	; (8010f70 <tcp_input+0x804>)
 8010eee:	881b      	ldrh	r3, [r3, #0]
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	4b20      	ldr	r3, [pc, #128]	; (8010f74 <tcp_input+0x808>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ef8:	4b1b      	ldr	r3, [pc, #108]	; (8010f68 <tcp_input+0x7fc>)
 8010efa:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010efc:	885b      	ldrh	r3, [r3, #2]
 8010efe:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f00:	4a19      	ldr	r2, [pc, #100]	; (8010f68 <tcp_input+0x7fc>)
 8010f02:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f04:	8812      	ldrh	r2, [r2, #0]
 8010f06:	b292      	uxth	r2, r2
 8010f08:	9202      	str	r2, [sp, #8]
 8010f0a:	9301      	str	r3, [sp, #4]
 8010f0c:	4b1a      	ldr	r3, [pc, #104]	; (8010f78 <tcp_input+0x80c>)
 8010f0e:	9300      	str	r3, [sp, #0]
 8010f10:	4b1a      	ldr	r3, [pc, #104]	; (8010f7c <tcp_input+0x810>)
 8010f12:	4602      	mov	r2, r0
 8010f14:	2000      	movs	r0, #0
 8010f16:	f003 fc7d 	bl	8014814 <tcp_rst>
    pbuf_free(p);
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f7fd fbda 	bl	800e6d4 <pbuf_free>
  return;
 8010f20:	e00c      	b.n	8010f3c <tcp_input+0x7d0>
    goto dropped;
 8010f22:	bf00      	nop
 8010f24:	e006      	b.n	8010f34 <tcp_input+0x7c8>
    goto dropped;
 8010f26:	bf00      	nop
 8010f28:	e004      	b.n	8010f34 <tcp_input+0x7c8>
    goto dropped;
 8010f2a:	bf00      	nop
 8010f2c:	e002      	b.n	8010f34 <tcp_input+0x7c8>
      goto dropped;
 8010f2e:	bf00      	nop
 8010f30:	e000      	b.n	8010f34 <tcp_input+0x7c8>
      goto dropped;
 8010f32:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f7fd fbcd 	bl	800e6d4 <pbuf_free>
 8010f3a:	e000      	b.n	8010f3e <tcp_input+0x7d2>
  return;
 8010f3c:	bf00      	nop
}
 8010f3e:	3724      	adds	r7, #36	; 0x24
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd90      	pop	{r4, r7, pc}
 8010f44:	2000da28 	.word	0x2000da28
 8010f48:	200069c1 	.word	0x200069c1
 8010f4c:	2000da14 	.word	0x2000da14
 8010f50:	200069bc 	.word	0x200069bc
 8010f54:	200069c4 	.word	0x200069c4
 8010f58:	0801b548 	.word	0x0801b548
 8010f5c:	0801b6fc 	.word	0x0801b6fc
 8010f60:	0801b594 	.word	0x0801b594
 8010f64:	20006994 	.word	0x20006994
 8010f68:	200069a4 	.word	0x200069a4
 8010f6c:	200069b8 	.word	0x200069b8
 8010f70:	200069be 	.word	0x200069be
 8010f74:	200069b4 	.word	0x200069b4
 8010f78:	2000a310 	.word	0x2000a310
 8010f7c:	2000a314 	.word	0x2000a314

08010f80 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d106      	bne.n	8010f9c <tcp_input_delayed_close+0x1c>
 8010f8e:	4b17      	ldr	r3, [pc, #92]	; (8010fec <tcp_input_delayed_close+0x6c>)
 8010f90:	f240 225a 	movw	r2, #602	; 0x25a
 8010f94:	4916      	ldr	r1, [pc, #88]	; (8010ff0 <tcp_input_delayed_close+0x70>)
 8010f96:	4817      	ldr	r0, [pc, #92]	; (8010ff4 <tcp_input_delayed_close+0x74>)
 8010f98:	f007 fb0e 	bl	80185b8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010f9c:	4b16      	ldr	r3, [pc, #88]	; (8010ff8 <tcp_input_delayed_close+0x78>)
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	f003 0310 	and.w	r3, r3, #16
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d01c      	beq.n	8010fe2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	8b5b      	ldrh	r3, [r3, #26]
 8010fac:	f003 0310 	and.w	r3, r3, #16
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d10d      	bne.n	8010fd0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d008      	beq.n	8010fd0 <tcp_input_delayed_close+0x50>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	6912      	ldr	r2, [r2, #16]
 8010fc8:	f06f 010e 	mvn.w	r1, #14
 8010fcc:	4610      	mov	r0, r2
 8010fce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010fd0:	6879      	ldr	r1, [r7, #4]
 8010fd2:	480a      	ldr	r0, [pc, #40]	; (8010ffc <tcp_input_delayed_close+0x7c>)
 8010fd4:	f7ff fa52 	bl	801047c <tcp_pcb_remove>
    tcp_free(pcb);
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f7fd fe37 	bl	800ec4c <tcp_free>
    return 1;
 8010fde:	2301      	movs	r3, #1
 8010fe0:	e000      	b.n	8010fe4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010fe2:	2300      	movs	r3, #0
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3708      	adds	r7, #8
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}
 8010fec:	0801b548 	.word	0x0801b548
 8010ff0:	0801b718 	.word	0x0801b718
 8010ff4:	0801b594 	.word	0x0801b594
 8010ff8:	200069c1 	.word	0x200069c1
 8010ffc:	2000da14 	.word	0x2000da14

08011000 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011000:	b590      	push	{r4, r7, lr}
 8011002:	b08b      	sub	sp, #44	; 0x2c
 8011004:	af04      	add	r7, sp, #16
 8011006:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011008:	4b6f      	ldr	r3, [pc, #444]	; (80111c8 <tcp_listen_input+0x1c8>)
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	f003 0304 	and.w	r3, r3, #4
 8011010:	2b00      	cmp	r3, #0
 8011012:	f040 80d2 	bne.w	80111ba <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d106      	bne.n	801102a <tcp_listen_input+0x2a>
 801101c:	4b6b      	ldr	r3, [pc, #428]	; (80111cc <tcp_listen_input+0x1cc>)
 801101e:	f240 2281 	movw	r2, #641	; 0x281
 8011022:	496b      	ldr	r1, [pc, #428]	; (80111d0 <tcp_listen_input+0x1d0>)
 8011024:	486b      	ldr	r0, [pc, #428]	; (80111d4 <tcp_listen_input+0x1d4>)
 8011026:	f007 fac7 	bl	80185b8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801102a:	4b67      	ldr	r3, [pc, #412]	; (80111c8 <tcp_listen_input+0x1c8>)
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	f003 0310 	and.w	r3, r3, #16
 8011032:	2b00      	cmp	r3, #0
 8011034:	d019      	beq.n	801106a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011036:	4b68      	ldr	r3, [pc, #416]	; (80111d8 <tcp_listen_input+0x1d8>)
 8011038:	6819      	ldr	r1, [r3, #0]
 801103a:	4b68      	ldr	r3, [pc, #416]	; (80111dc <tcp_listen_input+0x1dc>)
 801103c:	881b      	ldrh	r3, [r3, #0]
 801103e:	461a      	mov	r2, r3
 8011040:	4b67      	ldr	r3, [pc, #412]	; (80111e0 <tcp_listen_input+0x1e0>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011046:	4b67      	ldr	r3, [pc, #412]	; (80111e4 <tcp_listen_input+0x1e4>)
 8011048:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801104a:	885b      	ldrh	r3, [r3, #2]
 801104c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801104e:	4a65      	ldr	r2, [pc, #404]	; (80111e4 <tcp_listen_input+0x1e4>)
 8011050:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011052:	8812      	ldrh	r2, [r2, #0]
 8011054:	b292      	uxth	r2, r2
 8011056:	9202      	str	r2, [sp, #8]
 8011058:	9301      	str	r3, [sp, #4]
 801105a:	4b63      	ldr	r3, [pc, #396]	; (80111e8 <tcp_listen_input+0x1e8>)
 801105c:	9300      	str	r3, [sp, #0]
 801105e:	4b63      	ldr	r3, [pc, #396]	; (80111ec <tcp_listen_input+0x1ec>)
 8011060:	4602      	mov	r2, r0
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f003 fbd6 	bl	8014814 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011068:	e0a9      	b.n	80111be <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801106a:	4b57      	ldr	r3, [pc, #348]	; (80111c8 <tcp_listen_input+0x1c8>)
 801106c:	781b      	ldrb	r3, [r3, #0]
 801106e:	f003 0302 	and.w	r3, r3, #2
 8011072:	2b00      	cmp	r3, #0
 8011074:	f000 80a3 	beq.w	80111be <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	7d5b      	ldrb	r3, [r3, #21]
 801107c:	4618      	mov	r0, r3
 801107e:	f7ff f85b 	bl	8010138 <tcp_alloc>
 8011082:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d111      	bne.n	80110ae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	699b      	ldr	r3, [r3, #24]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d00a      	beq.n	80110a8 <tcp_listen_input+0xa8>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	699b      	ldr	r3, [r3, #24]
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	6910      	ldr	r0, [r2, #16]
 801109a:	f04f 32ff 	mov.w	r2, #4294967295
 801109e:	2100      	movs	r1, #0
 80110a0:	4798      	blx	r3
 80110a2:	4603      	mov	r3, r0
 80110a4:	73bb      	strb	r3, [r7, #14]
      return;
 80110a6:	e08b      	b.n	80111c0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80110a8:	23f0      	movs	r3, #240	; 0xf0
 80110aa:	73bb      	strb	r3, [r7, #14]
      return;
 80110ac:	e088      	b.n	80111c0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80110ae:	4b50      	ldr	r3, [pc, #320]	; (80111f0 <tcp_listen_input+0x1f0>)
 80110b0:	695a      	ldr	r2, [r3, #20]
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80110b6:	4b4e      	ldr	r3, [pc, #312]	; (80111f0 <tcp_listen_input+0x1f0>)
 80110b8:	691a      	ldr	r2, [r3, #16]
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	8ada      	ldrh	r2, [r3, #22]
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80110c6:	4b47      	ldr	r3, [pc, #284]	; (80111e4 <tcp_listen_input+0x1e4>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	881b      	ldrh	r3, [r3, #0]
 80110cc:	b29a      	uxth	r2, r3
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	2203      	movs	r2, #3
 80110d6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80110d8:	4b41      	ldr	r3, [pc, #260]	; (80111e0 <tcp_listen_input+0x1e0>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	1c5a      	adds	r2, r3, #1
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80110ea:	6978      	ldr	r0, [r7, #20]
 80110ec:	f7ff fa5a 	bl	80105a4 <tcp_next_iss>
 80110f0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	693a      	ldr	r2, [r7, #16]
 80110f6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	693a      	ldr	r2, [r7, #16]
 80110fc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	693a      	ldr	r2, [r7, #16]
 8011102:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011104:	697b      	ldr	r3, [r7, #20]
 8011106:	693a      	ldr	r2, [r7, #16]
 8011108:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801110a:	4b35      	ldr	r3, [pc, #212]	; (80111e0 <tcp_listen_input+0x1e0>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	1e5a      	subs	r2, r3, #1
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	691a      	ldr	r2, [r3, #16]
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	687a      	ldr	r2, [r7, #4]
 8011120:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	7a5b      	ldrb	r3, [r3, #9]
 8011126:	f003 030c 	and.w	r3, r3, #12
 801112a:	b2da      	uxtb	r2, r3
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	7a1a      	ldrb	r2, [r3, #8]
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011138:	4b2e      	ldr	r3, [pc, #184]	; (80111f4 <tcp_listen_input+0x1f4>)
 801113a:	681a      	ldr	r2, [r3, #0]
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	60da      	str	r2, [r3, #12]
 8011140:	4a2c      	ldr	r2, [pc, #176]	; (80111f4 <tcp_listen_input+0x1f4>)
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	6013      	str	r3, [r2, #0]
 8011146:	f003 fd27 	bl	8014b98 <tcp_timer_needed>
 801114a:	4b2b      	ldr	r3, [pc, #172]	; (80111f8 <tcp_listen_input+0x1f8>)
 801114c:	2201      	movs	r2, #1
 801114e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011150:	6978      	ldr	r0, [r7, #20]
 8011152:	f001 fd8d 	bl	8012c70 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011156:	4b23      	ldr	r3, [pc, #140]	; (80111e4 <tcp_listen_input+0x1e4>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	89db      	ldrh	r3, [r3, #14]
 801115c:	b29a      	uxth	r2, r3
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	3304      	adds	r3, #4
 8011178:	4618      	mov	r0, r3
 801117a:	f005 fc4b 	bl	8016a14 <ip4_route>
 801117e:	4601      	mov	r1, r0
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	3304      	adds	r3, #4
 8011184:	461a      	mov	r2, r3
 8011186:	4620      	mov	r0, r4
 8011188:	f7ff fa32 	bl	80105f0 <tcp_eff_send_mss_netif>
 801118c:	4603      	mov	r3, r0
 801118e:	461a      	mov	r2, r3
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011194:	2112      	movs	r1, #18
 8011196:	6978      	ldr	r0, [r7, #20]
 8011198:	f002 fc9a 	bl	8013ad0 <tcp_enqueue_flags>
 801119c:	4603      	mov	r3, r0
 801119e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80111a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d004      	beq.n	80111b2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80111a8:	2100      	movs	r1, #0
 80111aa:	6978      	ldr	r0, [r7, #20]
 80111ac:	f7fd ffd4 	bl	800f158 <tcp_abandon>
      return;
 80111b0:	e006      	b.n	80111c0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80111b2:	6978      	ldr	r0, [r7, #20]
 80111b4:	f002 fd7a 	bl	8013cac <tcp_output>
  return;
 80111b8:	e001      	b.n	80111be <tcp_listen_input+0x1be>
    return;
 80111ba:	bf00      	nop
 80111bc:	e000      	b.n	80111c0 <tcp_listen_input+0x1c0>
  return;
 80111be:	bf00      	nop
}
 80111c0:	371c      	adds	r7, #28
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd90      	pop	{r4, r7, pc}
 80111c6:	bf00      	nop
 80111c8:	200069c0 	.word	0x200069c0
 80111cc:	0801b548 	.word	0x0801b548
 80111d0:	0801b740 	.word	0x0801b740
 80111d4:	0801b594 	.word	0x0801b594
 80111d8:	200069b8 	.word	0x200069b8
 80111dc:	200069be 	.word	0x200069be
 80111e0:	200069b4 	.word	0x200069b4
 80111e4:	200069a4 	.word	0x200069a4
 80111e8:	2000a310 	.word	0x2000a310
 80111ec:	2000a314 	.word	0x2000a314
 80111f0:	2000a300 	.word	0x2000a300
 80111f4:	2000da14 	.word	0x2000da14
 80111f8:	2000da10 	.word	0x2000da10

080111fc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b086      	sub	sp, #24
 8011200:	af04      	add	r7, sp, #16
 8011202:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011204:	4b2f      	ldr	r3, [pc, #188]	; (80112c4 <tcp_timewait_input+0xc8>)
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	f003 0304 	and.w	r3, r3, #4
 801120c:	2b00      	cmp	r3, #0
 801120e:	d153      	bne.n	80112b8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d106      	bne.n	8011224 <tcp_timewait_input+0x28>
 8011216:	4b2c      	ldr	r3, [pc, #176]	; (80112c8 <tcp_timewait_input+0xcc>)
 8011218:	f240 22ee 	movw	r2, #750	; 0x2ee
 801121c:	492b      	ldr	r1, [pc, #172]	; (80112cc <tcp_timewait_input+0xd0>)
 801121e:	482c      	ldr	r0, [pc, #176]	; (80112d0 <tcp_timewait_input+0xd4>)
 8011220:	f007 f9ca 	bl	80185b8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011224:	4b27      	ldr	r3, [pc, #156]	; (80112c4 <tcp_timewait_input+0xc8>)
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	f003 0302 	and.w	r3, r3, #2
 801122c:	2b00      	cmp	r3, #0
 801122e:	d02a      	beq.n	8011286 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011230:	4b28      	ldr	r3, [pc, #160]	; (80112d4 <tcp_timewait_input+0xd8>)
 8011232:	681a      	ldr	r2, [r3, #0]
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011238:	1ad3      	subs	r3, r2, r3
 801123a:	2b00      	cmp	r3, #0
 801123c:	db2d      	blt.n	801129a <tcp_timewait_input+0x9e>
 801123e:	4b25      	ldr	r3, [pc, #148]	; (80112d4 <tcp_timewait_input+0xd8>)
 8011240:	681a      	ldr	r2, [r3, #0]
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011246:	6879      	ldr	r1, [r7, #4]
 8011248:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801124a:	440b      	add	r3, r1
 801124c:	1ad3      	subs	r3, r2, r3
 801124e:	2b00      	cmp	r3, #0
 8011250:	dc23      	bgt.n	801129a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011252:	4b21      	ldr	r3, [pc, #132]	; (80112d8 <tcp_timewait_input+0xdc>)
 8011254:	6819      	ldr	r1, [r3, #0]
 8011256:	4b21      	ldr	r3, [pc, #132]	; (80112dc <tcp_timewait_input+0xe0>)
 8011258:	881b      	ldrh	r3, [r3, #0]
 801125a:	461a      	mov	r2, r3
 801125c:	4b1d      	ldr	r3, [pc, #116]	; (80112d4 <tcp_timewait_input+0xd8>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011262:	4b1f      	ldr	r3, [pc, #124]	; (80112e0 <tcp_timewait_input+0xe4>)
 8011264:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011266:	885b      	ldrh	r3, [r3, #2]
 8011268:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801126a:	4a1d      	ldr	r2, [pc, #116]	; (80112e0 <tcp_timewait_input+0xe4>)
 801126c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801126e:	8812      	ldrh	r2, [r2, #0]
 8011270:	b292      	uxth	r2, r2
 8011272:	9202      	str	r2, [sp, #8]
 8011274:	9301      	str	r3, [sp, #4]
 8011276:	4b1b      	ldr	r3, [pc, #108]	; (80112e4 <tcp_timewait_input+0xe8>)
 8011278:	9300      	str	r3, [sp, #0]
 801127a:	4b1b      	ldr	r3, [pc, #108]	; (80112e8 <tcp_timewait_input+0xec>)
 801127c:	4602      	mov	r2, r0
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f003 fac8 	bl	8014814 <tcp_rst>
      return;
 8011284:	e01b      	b.n	80112be <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011286:	4b0f      	ldr	r3, [pc, #60]	; (80112c4 <tcp_timewait_input+0xc8>)
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	f003 0301 	and.w	r3, r3, #1
 801128e:	2b00      	cmp	r3, #0
 8011290:	d003      	beq.n	801129a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011292:	4b16      	ldr	r3, [pc, #88]	; (80112ec <tcp_timewait_input+0xf0>)
 8011294:	681a      	ldr	r2, [r3, #0]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801129a:	4b10      	ldr	r3, [pc, #64]	; (80112dc <tcp_timewait_input+0xe0>)
 801129c:	881b      	ldrh	r3, [r3, #0]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d00c      	beq.n	80112bc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	8b5b      	ldrh	r3, [r3, #26]
 80112a6:	f043 0302 	orr.w	r3, r3, #2
 80112aa:	b29a      	uxth	r2, r3
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f002 fcfb 	bl	8013cac <tcp_output>
  }
  return;
 80112b6:	e001      	b.n	80112bc <tcp_timewait_input+0xc0>
    return;
 80112b8:	bf00      	nop
 80112ba:	e000      	b.n	80112be <tcp_timewait_input+0xc2>
  return;
 80112bc:	bf00      	nop
}
 80112be:	3708      	adds	r7, #8
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	200069c0 	.word	0x200069c0
 80112c8:	0801b548 	.word	0x0801b548
 80112cc:	0801b760 	.word	0x0801b760
 80112d0:	0801b594 	.word	0x0801b594
 80112d4:	200069b4 	.word	0x200069b4
 80112d8:	200069b8 	.word	0x200069b8
 80112dc:	200069be 	.word	0x200069be
 80112e0:	200069a4 	.word	0x200069a4
 80112e4:	2000a310 	.word	0x2000a310
 80112e8:	2000a314 	.word	0x2000a314
 80112ec:	2000da18 	.word	0x2000da18

080112f0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80112f0:	b590      	push	{r4, r7, lr}
 80112f2:	b08d      	sub	sp, #52	; 0x34
 80112f4:	af04      	add	r7, sp, #16
 80112f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80112f8:	2300      	movs	r3, #0
 80112fa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80112fc:	2300      	movs	r3, #0
 80112fe:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d106      	bne.n	8011314 <tcp_process+0x24>
 8011306:	4ba5      	ldr	r3, [pc, #660]	; (801159c <tcp_process+0x2ac>)
 8011308:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801130c:	49a4      	ldr	r1, [pc, #656]	; (80115a0 <tcp_process+0x2b0>)
 801130e:	48a5      	ldr	r0, [pc, #660]	; (80115a4 <tcp_process+0x2b4>)
 8011310:	f007 f952 	bl	80185b8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011314:	4ba4      	ldr	r3, [pc, #656]	; (80115a8 <tcp_process+0x2b8>)
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	f003 0304 	and.w	r3, r3, #4
 801131c:	2b00      	cmp	r3, #0
 801131e:	d04e      	beq.n	80113be <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	7d1b      	ldrb	r3, [r3, #20]
 8011324:	2b02      	cmp	r3, #2
 8011326:	d108      	bne.n	801133a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801132c:	4b9f      	ldr	r3, [pc, #636]	; (80115ac <tcp_process+0x2bc>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	429a      	cmp	r2, r3
 8011332:	d123      	bne.n	801137c <tcp_process+0x8c>
        acceptable = 1;
 8011334:	2301      	movs	r3, #1
 8011336:	76fb      	strb	r3, [r7, #27]
 8011338:	e020      	b.n	801137c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801133e:	4b9c      	ldr	r3, [pc, #624]	; (80115b0 <tcp_process+0x2c0>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	429a      	cmp	r2, r3
 8011344:	d102      	bne.n	801134c <tcp_process+0x5c>
        acceptable = 1;
 8011346:	2301      	movs	r3, #1
 8011348:	76fb      	strb	r3, [r7, #27]
 801134a:	e017      	b.n	801137c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801134c:	4b98      	ldr	r3, [pc, #608]	; (80115b0 <tcp_process+0x2c0>)
 801134e:	681a      	ldr	r2, [r3, #0]
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011354:	1ad3      	subs	r3, r2, r3
 8011356:	2b00      	cmp	r3, #0
 8011358:	db10      	blt.n	801137c <tcp_process+0x8c>
 801135a:	4b95      	ldr	r3, [pc, #596]	; (80115b0 <tcp_process+0x2c0>)
 801135c:	681a      	ldr	r2, [r3, #0]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011362:	6879      	ldr	r1, [r7, #4]
 8011364:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011366:	440b      	add	r3, r1
 8011368:	1ad3      	subs	r3, r2, r3
 801136a:	2b00      	cmp	r3, #0
 801136c:	dc06      	bgt.n	801137c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	8b5b      	ldrh	r3, [r3, #26]
 8011372:	f043 0302 	orr.w	r3, r3, #2
 8011376:	b29a      	uxth	r2, r3
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801137c:	7efb      	ldrb	r3, [r7, #27]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d01b      	beq.n	80113ba <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	7d1b      	ldrb	r3, [r3, #20]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d106      	bne.n	8011398 <tcp_process+0xa8>
 801138a:	4b84      	ldr	r3, [pc, #528]	; (801159c <tcp_process+0x2ac>)
 801138c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011390:	4988      	ldr	r1, [pc, #544]	; (80115b4 <tcp_process+0x2c4>)
 8011392:	4884      	ldr	r0, [pc, #528]	; (80115a4 <tcp_process+0x2b4>)
 8011394:	f007 f910 	bl	80185b8 <iprintf>
      recv_flags |= TF_RESET;
 8011398:	4b87      	ldr	r3, [pc, #540]	; (80115b8 <tcp_process+0x2c8>)
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	f043 0308 	orr.w	r3, r3, #8
 80113a0:	b2da      	uxtb	r2, r3
 80113a2:	4b85      	ldr	r3, [pc, #532]	; (80115b8 <tcp_process+0x2c8>)
 80113a4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	8b5b      	ldrh	r3, [r3, #26]
 80113aa:	f023 0301 	bic.w	r3, r3, #1
 80113ae:	b29a      	uxth	r2, r3
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80113b4:	f06f 030d 	mvn.w	r3, #13
 80113b8:	e37a      	b.n	8011ab0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80113ba:	2300      	movs	r3, #0
 80113bc:	e378      	b.n	8011ab0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80113be:	4b7a      	ldr	r3, [pc, #488]	; (80115a8 <tcp_process+0x2b8>)
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	f003 0302 	and.w	r3, r3, #2
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d010      	beq.n	80113ec <tcp_process+0xfc>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	7d1b      	ldrb	r3, [r3, #20]
 80113ce:	2b02      	cmp	r3, #2
 80113d0:	d00c      	beq.n	80113ec <tcp_process+0xfc>
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	7d1b      	ldrb	r3, [r3, #20]
 80113d6:	2b03      	cmp	r3, #3
 80113d8:	d008      	beq.n	80113ec <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	8b5b      	ldrh	r3, [r3, #26]
 80113de:	f043 0302 	orr.w	r3, r3, #2
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80113e8:	2300      	movs	r3, #0
 80113ea:	e361      	b.n	8011ab0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	8b5b      	ldrh	r3, [r3, #26]
 80113f0:	f003 0310 	and.w	r3, r3, #16
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d103      	bne.n	8011400 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80113f8:	4b70      	ldr	r3, [pc, #448]	; (80115bc <tcp_process+0x2cc>)
 80113fa:	681a      	ldr	r2, [r3, #0]
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2200      	movs	r2, #0
 8011404:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2200      	movs	r2, #0
 801140c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f001 fc2d 	bl	8012c70 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	7d1b      	ldrb	r3, [r3, #20]
 801141a:	3b02      	subs	r3, #2
 801141c:	2b07      	cmp	r3, #7
 801141e:	f200 8337 	bhi.w	8011a90 <tcp_process+0x7a0>
 8011422:	a201      	add	r2, pc, #4	; (adr r2, 8011428 <tcp_process+0x138>)
 8011424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011428:	08011449 	.word	0x08011449
 801142c:	08011679 	.word	0x08011679
 8011430:	080117f1 	.word	0x080117f1
 8011434:	0801181b 	.word	0x0801181b
 8011438:	0801193f 	.word	0x0801193f
 801143c:	080117f1 	.word	0x080117f1
 8011440:	080119cb 	.word	0x080119cb
 8011444:	08011a5b 	.word	0x08011a5b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011448:	4b57      	ldr	r3, [pc, #348]	; (80115a8 <tcp_process+0x2b8>)
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	f003 0310 	and.w	r3, r3, #16
 8011450:	2b00      	cmp	r3, #0
 8011452:	f000 80e4 	beq.w	801161e <tcp_process+0x32e>
 8011456:	4b54      	ldr	r3, [pc, #336]	; (80115a8 <tcp_process+0x2b8>)
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	f003 0302 	and.w	r3, r3, #2
 801145e:	2b00      	cmp	r3, #0
 8011460:	f000 80dd 	beq.w	801161e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011468:	1c5a      	adds	r2, r3, #1
 801146a:	4b50      	ldr	r3, [pc, #320]	; (80115ac <tcp_process+0x2bc>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	429a      	cmp	r2, r3
 8011470:	f040 80d5 	bne.w	801161e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011474:	4b4e      	ldr	r3, [pc, #312]	; (80115b0 <tcp_process+0x2c0>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	1c5a      	adds	r2, r3, #1
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011486:	4b49      	ldr	r3, [pc, #292]	; (80115ac <tcp_process+0x2bc>)
 8011488:	681a      	ldr	r2, [r3, #0]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801148e:	4b4c      	ldr	r3, [pc, #304]	; (80115c0 <tcp_process+0x2d0>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	89db      	ldrh	r3, [r3, #14]
 8011494:	b29a      	uxth	r2, r3
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80114a8:	4b41      	ldr	r3, [pc, #260]	; (80115b0 <tcp_process+0x2c0>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	1e5a      	subs	r2, r3, #1
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2204      	movs	r2, #4
 80114b6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	3304      	adds	r3, #4
 80114c0:	4618      	mov	r0, r3
 80114c2:	f005 faa7 	bl	8016a14 <ip4_route>
 80114c6:	4601      	mov	r1, r0
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	3304      	adds	r3, #4
 80114cc:	461a      	mov	r2, r3
 80114ce:	4620      	mov	r0, r4
 80114d0:	f7ff f88e 	bl	80105f0 <tcp_eff_send_mss_netif>
 80114d4:	4603      	mov	r3, r0
 80114d6:	461a      	mov	r2, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114e0:	009a      	lsls	r2, r3, #2
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114e6:	005b      	lsls	r3, r3, #1
 80114e8:	f241 111c 	movw	r1, #4380	; 0x111c
 80114ec:	428b      	cmp	r3, r1
 80114ee:	bf38      	it	cc
 80114f0:	460b      	movcc	r3, r1
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d204      	bcs.n	8011500 <tcp_process+0x210>
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114fa:	009b      	lsls	r3, r3, #2
 80114fc:	b29b      	uxth	r3, r3
 80114fe:	e00d      	b.n	801151c <tcp_process+0x22c>
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011504:	005b      	lsls	r3, r3, #1
 8011506:	f241 121c 	movw	r2, #4380	; 0x111c
 801150a:	4293      	cmp	r3, r2
 801150c:	d904      	bls.n	8011518 <tcp_process+0x228>
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011512:	005b      	lsls	r3, r3, #1
 8011514:	b29b      	uxth	r3, r3
 8011516:	e001      	b.n	801151c <tcp_process+0x22c>
 8011518:	f241 131c 	movw	r3, #4380	; 0x111c
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011528:	2b00      	cmp	r3, #0
 801152a:	d106      	bne.n	801153a <tcp_process+0x24a>
 801152c:	4b1b      	ldr	r3, [pc, #108]	; (801159c <tcp_process+0x2ac>)
 801152e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011532:	4924      	ldr	r1, [pc, #144]	; (80115c4 <tcp_process+0x2d4>)
 8011534:	481b      	ldr	r0, [pc, #108]	; (80115a4 <tcp_process+0x2b4>)
 8011536:	f007 f83f 	bl	80185b8 <iprintf>
        --pcb->snd_queuelen;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011540:	3b01      	subs	r3, #1
 8011542:	b29a      	uxth	r2, r3
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801154e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011550:	69fb      	ldr	r3, [r7, #28]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d111      	bne.n	801157a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801155a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d106      	bne.n	8011570 <tcp_process+0x280>
 8011562:	4b0e      	ldr	r3, [pc, #56]	; (801159c <tcp_process+0x2ac>)
 8011564:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011568:	4917      	ldr	r1, [pc, #92]	; (80115c8 <tcp_process+0x2d8>)
 801156a:	480e      	ldr	r0, [pc, #56]	; (80115a4 <tcp_process+0x2b4>)
 801156c:	f007 f824 	bl	80185b8 <iprintf>
          pcb->unsent = rseg->next;
 8011570:	69fb      	ldr	r3, [r7, #28]
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	66da      	str	r2, [r3, #108]	; 0x6c
 8011578:	e003      	b.n	8011582 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801157a:	69fb      	ldr	r3, [r7, #28]
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011582:	69f8      	ldr	r0, [r7, #28]
 8011584:	f7fe fc6f 	bl	800fe66 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801158c:	2b00      	cmp	r3, #0
 801158e:	d11d      	bne.n	80115cc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011596:	861a      	strh	r2, [r3, #48]	; 0x30
 8011598:	e01f      	b.n	80115da <tcp_process+0x2ea>
 801159a:	bf00      	nop
 801159c:	0801b548 	.word	0x0801b548
 80115a0:	0801b780 	.word	0x0801b780
 80115a4:	0801b594 	.word	0x0801b594
 80115a8:	200069c0 	.word	0x200069c0
 80115ac:	200069b8 	.word	0x200069b8
 80115b0:	200069b4 	.word	0x200069b4
 80115b4:	0801b79c 	.word	0x0801b79c
 80115b8:	200069c1 	.word	0x200069c1
 80115bc:	2000da18 	.word	0x2000da18
 80115c0:	200069a4 	.word	0x200069a4
 80115c4:	0801b7bc 	.word	0x0801b7bc
 80115c8:	0801b7d4 	.word	0x0801b7d4
        } else {
          pcb->rtime = 0;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2200      	movs	r2, #0
 80115d0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2200      	movs	r2, #0
 80115d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d00a      	beq.n	80115fa <tcp_process+0x30a>
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115ea:	687a      	ldr	r2, [r7, #4]
 80115ec:	6910      	ldr	r0, [r2, #16]
 80115ee:	2200      	movs	r2, #0
 80115f0:	6879      	ldr	r1, [r7, #4]
 80115f2:	4798      	blx	r3
 80115f4:	4603      	mov	r3, r0
 80115f6:	76bb      	strb	r3, [r7, #26]
 80115f8:	e001      	b.n	80115fe <tcp_process+0x30e>
 80115fa:	2300      	movs	r3, #0
 80115fc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80115fe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011602:	f113 0f0d 	cmn.w	r3, #13
 8011606:	d102      	bne.n	801160e <tcp_process+0x31e>
          return ERR_ABRT;
 8011608:	f06f 030c 	mvn.w	r3, #12
 801160c:	e250      	b.n	8011ab0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	8b5b      	ldrh	r3, [r3, #26]
 8011612:	f043 0302 	orr.w	r3, r3, #2
 8011616:	b29a      	uxth	r2, r3
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801161c:	e23a      	b.n	8011a94 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801161e:	4b9d      	ldr	r3, [pc, #628]	; (8011894 <tcp_process+0x5a4>)
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	f003 0310 	and.w	r3, r3, #16
 8011626:	2b00      	cmp	r3, #0
 8011628:	f000 8234 	beq.w	8011a94 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801162c:	4b9a      	ldr	r3, [pc, #616]	; (8011898 <tcp_process+0x5a8>)
 801162e:	6819      	ldr	r1, [r3, #0]
 8011630:	4b9a      	ldr	r3, [pc, #616]	; (801189c <tcp_process+0x5ac>)
 8011632:	881b      	ldrh	r3, [r3, #0]
 8011634:	461a      	mov	r2, r3
 8011636:	4b9a      	ldr	r3, [pc, #616]	; (80118a0 <tcp_process+0x5b0>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801163c:	4b99      	ldr	r3, [pc, #612]	; (80118a4 <tcp_process+0x5b4>)
 801163e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011640:	885b      	ldrh	r3, [r3, #2]
 8011642:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011644:	4a97      	ldr	r2, [pc, #604]	; (80118a4 <tcp_process+0x5b4>)
 8011646:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011648:	8812      	ldrh	r2, [r2, #0]
 801164a:	b292      	uxth	r2, r2
 801164c:	9202      	str	r2, [sp, #8]
 801164e:	9301      	str	r3, [sp, #4]
 8011650:	4b95      	ldr	r3, [pc, #596]	; (80118a8 <tcp_process+0x5b8>)
 8011652:	9300      	str	r3, [sp, #0]
 8011654:	4b95      	ldr	r3, [pc, #596]	; (80118ac <tcp_process+0x5bc>)
 8011656:	4602      	mov	r2, r0
 8011658:	6878      	ldr	r0, [r7, #4]
 801165a:	f003 f8db 	bl	8014814 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011664:	2b05      	cmp	r3, #5
 8011666:	f200 8215 	bhi.w	8011a94 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2200      	movs	r2, #0
 801166e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f002 fea5 	bl	80143c0 <tcp_rexmit_rto>
      break;
 8011676:	e20d      	b.n	8011a94 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011678:	4b86      	ldr	r3, [pc, #536]	; (8011894 <tcp_process+0x5a4>)
 801167a:	781b      	ldrb	r3, [r3, #0]
 801167c:	f003 0310 	and.w	r3, r3, #16
 8011680:	2b00      	cmp	r3, #0
 8011682:	f000 80a1 	beq.w	80117c8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011686:	4b84      	ldr	r3, [pc, #528]	; (8011898 <tcp_process+0x5a8>)
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801168e:	1ad3      	subs	r3, r2, r3
 8011690:	3b01      	subs	r3, #1
 8011692:	2b00      	cmp	r3, #0
 8011694:	db7e      	blt.n	8011794 <tcp_process+0x4a4>
 8011696:	4b80      	ldr	r3, [pc, #512]	; (8011898 <tcp_process+0x5a8>)
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801169e:	1ad3      	subs	r3, r2, r3
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	dc77      	bgt.n	8011794 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2204      	movs	r2, #4
 80116a8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d102      	bne.n	80116b8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80116b2:	23fa      	movs	r3, #250	; 0xfa
 80116b4:	76bb      	strb	r3, [r7, #26]
 80116b6:	e01d      	b.n	80116f4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116bc:	699b      	ldr	r3, [r3, #24]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d106      	bne.n	80116d0 <tcp_process+0x3e0>
 80116c2:	4b7b      	ldr	r3, [pc, #492]	; (80118b0 <tcp_process+0x5c0>)
 80116c4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80116c8:	497a      	ldr	r1, [pc, #488]	; (80118b4 <tcp_process+0x5c4>)
 80116ca:	487b      	ldr	r0, [pc, #492]	; (80118b8 <tcp_process+0x5c8>)
 80116cc:	f006 ff74 	bl	80185b8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116d4:	699b      	ldr	r3, [r3, #24]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d00a      	beq.n	80116f0 <tcp_process+0x400>
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116de:	699b      	ldr	r3, [r3, #24]
 80116e0:	687a      	ldr	r2, [r7, #4]
 80116e2:	6910      	ldr	r0, [r2, #16]
 80116e4:	2200      	movs	r2, #0
 80116e6:	6879      	ldr	r1, [r7, #4]
 80116e8:	4798      	blx	r3
 80116ea:	4603      	mov	r3, r0
 80116ec:	76bb      	strb	r3, [r7, #26]
 80116ee:	e001      	b.n	80116f4 <tcp_process+0x404>
 80116f0:	23f0      	movs	r3, #240	; 0xf0
 80116f2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80116f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d00a      	beq.n	8011712 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80116fc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011700:	f113 0f0d 	cmn.w	r3, #13
 8011704:	d002      	beq.n	801170c <tcp_process+0x41c>
              tcp_abort(pcb);
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f7fd fde4 	bl	800f2d4 <tcp_abort>
            }
            return ERR_ABRT;
 801170c:	f06f 030c 	mvn.w	r3, #12
 8011710:	e1ce      	b.n	8011ab0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f000 fae0 	bl	8011cd8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011718:	4b68      	ldr	r3, [pc, #416]	; (80118bc <tcp_process+0x5cc>)
 801171a:	881b      	ldrh	r3, [r3, #0]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d005      	beq.n	801172c <tcp_process+0x43c>
            recv_acked--;
 8011720:	4b66      	ldr	r3, [pc, #408]	; (80118bc <tcp_process+0x5cc>)
 8011722:	881b      	ldrh	r3, [r3, #0]
 8011724:	3b01      	subs	r3, #1
 8011726:	b29a      	uxth	r2, r3
 8011728:	4b64      	ldr	r3, [pc, #400]	; (80118bc <tcp_process+0x5cc>)
 801172a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011730:	009a      	lsls	r2, r3, #2
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011736:	005b      	lsls	r3, r3, #1
 8011738:	f241 111c 	movw	r1, #4380	; 0x111c
 801173c:	428b      	cmp	r3, r1
 801173e:	bf38      	it	cc
 8011740:	460b      	movcc	r3, r1
 8011742:	429a      	cmp	r2, r3
 8011744:	d204      	bcs.n	8011750 <tcp_process+0x460>
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801174a:	009b      	lsls	r3, r3, #2
 801174c:	b29b      	uxth	r3, r3
 801174e:	e00d      	b.n	801176c <tcp_process+0x47c>
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011754:	005b      	lsls	r3, r3, #1
 8011756:	f241 121c 	movw	r2, #4380	; 0x111c
 801175a:	4293      	cmp	r3, r2
 801175c:	d904      	bls.n	8011768 <tcp_process+0x478>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011762:	005b      	lsls	r3, r3, #1
 8011764:	b29b      	uxth	r3, r3
 8011766:	e001      	b.n	801176c <tcp_process+0x47c>
 8011768:	f241 131c 	movw	r3, #4380	; 0x111c
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011772:	4b53      	ldr	r3, [pc, #332]	; (80118c0 <tcp_process+0x5d0>)
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	f003 0320 	and.w	r3, r3, #32
 801177a:	2b00      	cmp	r3, #0
 801177c:	d037      	beq.n	80117ee <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	8b5b      	ldrh	r3, [r3, #26]
 8011782:	f043 0302 	orr.w	r3, r3, #2
 8011786:	b29a      	uxth	r2, r3
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2207      	movs	r2, #7
 8011790:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011792:	e02c      	b.n	80117ee <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011794:	4b40      	ldr	r3, [pc, #256]	; (8011898 <tcp_process+0x5a8>)
 8011796:	6819      	ldr	r1, [r3, #0]
 8011798:	4b40      	ldr	r3, [pc, #256]	; (801189c <tcp_process+0x5ac>)
 801179a:	881b      	ldrh	r3, [r3, #0]
 801179c:	461a      	mov	r2, r3
 801179e:	4b40      	ldr	r3, [pc, #256]	; (80118a0 <tcp_process+0x5b0>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117a4:	4b3f      	ldr	r3, [pc, #252]	; (80118a4 <tcp_process+0x5b4>)
 80117a6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117a8:	885b      	ldrh	r3, [r3, #2]
 80117aa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117ac:	4a3d      	ldr	r2, [pc, #244]	; (80118a4 <tcp_process+0x5b4>)
 80117ae:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117b0:	8812      	ldrh	r2, [r2, #0]
 80117b2:	b292      	uxth	r2, r2
 80117b4:	9202      	str	r2, [sp, #8]
 80117b6:	9301      	str	r3, [sp, #4]
 80117b8:	4b3b      	ldr	r3, [pc, #236]	; (80118a8 <tcp_process+0x5b8>)
 80117ba:	9300      	str	r3, [sp, #0]
 80117bc:	4b3b      	ldr	r3, [pc, #236]	; (80118ac <tcp_process+0x5bc>)
 80117be:	4602      	mov	r2, r0
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f003 f827 	bl	8014814 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80117c6:	e167      	b.n	8011a98 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80117c8:	4b32      	ldr	r3, [pc, #200]	; (8011894 <tcp_process+0x5a4>)
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	f003 0302 	and.w	r3, r3, #2
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	f000 8161 	beq.w	8011a98 <tcp_process+0x7a8>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117da:	1e5a      	subs	r2, r3, #1
 80117dc:	4b30      	ldr	r3, [pc, #192]	; (80118a0 <tcp_process+0x5b0>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	429a      	cmp	r2, r3
 80117e2:	f040 8159 	bne.w	8011a98 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f002 fe0c 	bl	8014404 <tcp_rexmit>
      break;
 80117ec:	e154      	b.n	8011a98 <tcp_process+0x7a8>
 80117ee:	e153      	b.n	8011a98 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f000 fa71 	bl	8011cd8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80117f6:	4b32      	ldr	r3, [pc, #200]	; (80118c0 <tcp_process+0x5d0>)
 80117f8:	781b      	ldrb	r3, [r3, #0]
 80117fa:	f003 0320 	and.w	r3, r3, #32
 80117fe:	2b00      	cmp	r3, #0
 8011800:	f000 814c 	beq.w	8011a9c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	8b5b      	ldrh	r3, [r3, #26]
 8011808:	f043 0302 	orr.w	r3, r3, #2
 801180c:	b29a      	uxth	r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2207      	movs	r2, #7
 8011816:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011818:	e140      	b.n	8011a9c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f000 fa5c 	bl	8011cd8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011820:	4b27      	ldr	r3, [pc, #156]	; (80118c0 <tcp_process+0x5d0>)
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	f003 0320 	and.w	r3, r3, #32
 8011828:	2b00      	cmp	r3, #0
 801182a:	d071      	beq.n	8011910 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801182c:	4b19      	ldr	r3, [pc, #100]	; (8011894 <tcp_process+0x5a4>)
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	f003 0310 	and.w	r3, r3, #16
 8011834:	2b00      	cmp	r3, #0
 8011836:	d060      	beq.n	80118fa <tcp_process+0x60a>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801183c:	4b16      	ldr	r3, [pc, #88]	; (8011898 <tcp_process+0x5a8>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	429a      	cmp	r2, r3
 8011842:	d15a      	bne.n	80118fa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011848:	2b00      	cmp	r3, #0
 801184a:	d156      	bne.n	80118fa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	8b5b      	ldrh	r3, [r3, #26]
 8011850:	f043 0302 	orr.w	r3, r3, #2
 8011854:	b29a      	uxth	r2, r3
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f7fe fdbe 	bl	80103dc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011860:	4b18      	ldr	r3, [pc, #96]	; (80118c4 <tcp_process+0x5d4>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	687a      	ldr	r2, [r7, #4]
 8011866:	429a      	cmp	r2, r3
 8011868:	d105      	bne.n	8011876 <tcp_process+0x586>
 801186a:	4b16      	ldr	r3, [pc, #88]	; (80118c4 <tcp_process+0x5d4>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	68db      	ldr	r3, [r3, #12]
 8011870:	4a14      	ldr	r2, [pc, #80]	; (80118c4 <tcp_process+0x5d4>)
 8011872:	6013      	str	r3, [r2, #0]
 8011874:	e02e      	b.n	80118d4 <tcp_process+0x5e4>
 8011876:	4b13      	ldr	r3, [pc, #76]	; (80118c4 <tcp_process+0x5d4>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	617b      	str	r3, [r7, #20]
 801187c:	e027      	b.n	80118ce <tcp_process+0x5de>
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	68db      	ldr	r3, [r3, #12]
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	429a      	cmp	r2, r3
 8011886:	d11f      	bne.n	80118c8 <tcp_process+0x5d8>
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	68da      	ldr	r2, [r3, #12]
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	60da      	str	r2, [r3, #12]
 8011890:	e020      	b.n	80118d4 <tcp_process+0x5e4>
 8011892:	bf00      	nop
 8011894:	200069c0 	.word	0x200069c0
 8011898:	200069b8 	.word	0x200069b8
 801189c:	200069be 	.word	0x200069be
 80118a0:	200069b4 	.word	0x200069b4
 80118a4:	200069a4 	.word	0x200069a4
 80118a8:	2000a310 	.word	0x2000a310
 80118ac:	2000a314 	.word	0x2000a314
 80118b0:	0801b548 	.word	0x0801b548
 80118b4:	0801b7e8 	.word	0x0801b7e8
 80118b8:	0801b594 	.word	0x0801b594
 80118bc:	200069bc 	.word	0x200069bc
 80118c0:	200069c1 	.word	0x200069c1
 80118c4:	2000da14 	.word	0x2000da14
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	68db      	ldr	r3, [r3, #12]
 80118cc:	617b      	str	r3, [r7, #20]
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d1d4      	bne.n	801187e <tcp_process+0x58e>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2200      	movs	r2, #0
 80118d8:	60da      	str	r2, [r3, #12]
 80118da:	4b77      	ldr	r3, [pc, #476]	; (8011ab8 <tcp_process+0x7c8>)
 80118dc:	2201      	movs	r2, #1
 80118de:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	220a      	movs	r2, #10
 80118e4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80118e6:	4b75      	ldr	r3, [pc, #468]	; (8011abc <tcp_process+0x7cc>)
 80118e8:	681a      	ldr	r2, [r3, #0]
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	60da      	str	r2, [r3, #12]
 80118ee:	4a73      	ldr	r2, [pc, #460]	; (8011abc <tcp_process+0x7cc>)
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6013      	str	r3, [r2, #0]
 80118f4:	f003 f950 	bl	8014b98 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80118f8:	e0d2      	b.n	8011aa0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	8b5b      	ldrh	r3, [r3, #26]
 80118fe:	f043 0302 	orr.w	r3, r3, #2
 8011902:	b29a      	uxth	r2, r3
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2208      	movs	r2, #8
 801190c:	751a      	strb	r2, [r3, #20]
      break;
 801190e:	e0c7      	b.n	8011aa0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011910:	4b6b      	ldr	r3, [pc, #428]	; (8011ac0 <tcp_process+0x7d0>)
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	f003 0310 	and.w	r3, r3, #16
 8011918:	2b00      	cmp	r3, #0
 801191a:	f000 80c1 	beq.w	8011aa0 <tcp_process+0x7b0>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011922:	4b68      	ldr	r3, [pc, #416]	; (8011ac4 <tcp_process+0x7d4>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	429a      	cmp	r2, r3
 8011928:	f040 80ba 	bne.w	8011aa0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011930:	2b00      	cmp	r3, #0
 8011932:	f040 80b5 	bne.w	8011aa0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2206      	movs	r2, #6
 801193a:	751a      	strb	r2, [r3, #20]
      break;
 801193c:	e0b0      	b.n	8011aa0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f000 f9ca 	bl	8011cd8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011944:	4b60      	ldr	r3, [pc, #384]	; (8011ac8 <tcp_process+0x7d8>)
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	f003 0320 	and.w	r3, r3, #32
 801194c:	2b00      	cmp	r3, #0
 801194e:	f000 80a9 	beq.w	8011aa4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	8b5b      	ldrh	r3, [r3, #26]
 8011956:	f043 0302 	orr.w	r3, r3, #2
 801195a:	b29a      	uxth	r2, r3
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f7fe fd3b 	bl	80103dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011966:	4b59      	ldr	r3, [pc, #356]	; (8011acc <tcp_process+0x7dc>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	687a      	ldr	r2, [r7, #4]
 801196c:	429a      	cmp	r2, r3
 801196e:	d105      	bne.n	801197c <tcp_process+0x68c>
 8011970:	4b56      	ldr	r3, [pc, #344]	; (8011acc <tcp_process+0x7dc>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	68db      	ldr	r3, [r3, #12]
 8011976:	4a55      	ldr	r2, [pc, #340]	; (8011acc <tcp_process+0x7dc>)
 8011978:	6013      	str	r3, [r2, #0]
 801197a:	e013      	b.n	80119a4 <tcp_process+0x6b4>
 801197c:	4b53      	ldr	r3, [pc, #332]	; (8011acc <tcp_process+0x7dc>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	613b      	str	r3, [r7, #16]
 8011982:	e00c      	b.n	801199e <tcp_process+0x6ae>
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	68db      	ldr	r3, [r3, #12]
 8011988:	687a      	ldr	r2, [r7, #4]
 801198a:	429a      	cmp	r2, r3
 801198c:	d104      	bne.n	8011998 <tcp_process+0x6a8>
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	68da      	ldr	r2, [r3, #12]
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	60da      	str	r2, [r3, #12]
 8011996:	e005      	b.n	80119a4 <tcp_process+0x6b4>
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	68db      	ldr	r3, [r3, #12]
 801199c:	613b      	str	r3, [r7, #16]
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d1ef      	bne.n	8011984 <tcp_process+0x694>
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	2200      	movs	r2, #0
 80119a8:	60da      	str	r2, [r3, #12]
 80119aa:	4b43      	ldr	r3, [pc, #268]	; (8011ab8 <tcp_process+0x7c8>)
 80119ac:	2201      	movs	r2, #1
 80119ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	220a      	movs	r2, #10
 80119b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80119b6:	4b41      	ldr	r3, [pc, #260]	; (8011abc <tcp_process+0x7cc>)
 80119b8:	681a      	ldr	r2, [r3, #0]
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	60da      	str	r2, [r3, #12]
 80119be:	4a3f      	ldr	r2, [pc, #252]	; (8011abc <tcp_process+0x7cc>)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6013      	str	r3, [r2, #0]
 80119c4:	f003 f8e8 	bl	8014b98 <tcp_timer_needed>
      }
      break;
 80119c8:	e06c      	b.n	8011aa4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f000 f984 	bl	8011cd8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80119d0:	4b3b      	ldr	r3, [pc, #236]	; (8011ac0 <tcp_process+0x7d0>)
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	f003 0310 	and.w	r3, r3, #16
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d065      	beq.n	8011aa8 <tcp_process+0x7b8>
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119e0:	4b38      	ldr	r3, [pc, #224]	; (8011ac4 <tcp_process+0x7d4>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d15f      	bne.n	8011aa8 <tcp_process+0x7b8>
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d15b      	bne.n	8011aa8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f7fe fcf3 	bl	80103dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80119f6:	4b35      	ldr	r3, [pc, #212]	; (8011acc <tcp_process+0x7dc>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	687a      	ldr	r2, [r7, #4]
 80119fc:	429a      	cmp	r2, r3
 80119fe:	d105      	bne.n	8011a0c <tcp_process+0x71c>
 8011a00:	4b32      	ldr	r3, [pc, #200]	; (8011acc <tcp_process+0x7dc>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	68db      	ldr	r3, [r3, #12]
 8011a06:	4a31      	ldr	r2, [pc, #196]	; (8011acc <tcp_process+0x7dc>)
 8011a08:	6013      	str	r3, [r2, #0]
 8011a0a:	e013      	b.n	8011a34 <tcp_process+0x744>
 8011a0c:	4b2f      	ldr	r3, [pc, #188]	; (8011acc <tcp_process+0x7dc>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	60fb      	str	r3, [r7, #12]
 8011a12:	e00c      	b.n	8011a2e <tcp_process+0x73e>
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	687a      	ldr	r2, [r7, #4]
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d104      	bne.n	8011a28 <tcp_process+0x738>
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	68da      	ldr	r2, [r3, #12]
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	60da      	str	r2, [r3, #12]
 8011a26:	e005      	b.n	8011a34 <tcp_process+0x744>
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	68db      	ldr	r3, [r3, #12]
 8011a2c:	60fb      	str	r3, [r7, #12]
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d1ef      	bne.n	8011a14 <tcp_process+0x724>
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2200      	movs	r2, #0
 8011a38:	60da      	str	r2, [r3, #12]
 8011a3a:	4b1f      	ldr	r3, [pc, #124]	; (8011ab8 <tcp_process+0x7c8>)
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	220a      	movs	r2, #10
 8011a44:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011a46:	4b1d      	ldr	r3, [pc, #116]	; (8011abc <tcp_process+0x7cc>)
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	60da      	str	r2, [r3, #12]
 8011a4e:	4a1b      	ldr	r2, [pc, #108]	; (8011abc <tcp_process+0x7cc>)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6013      	str	r3, [r2, #0]
 8011a54:	f003 f8a0 	bl	8014b98 <tcp_timer_needed>
      }
      break;
 8011a58:	e026      	b.n	8011aa8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011a5a:	6878      	ldr	r0, [r7, #4]
 8011a5c:	f000 f93c 	bl	8011cd8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011a60:	4b17      	ldr	r3, [pc, #92]	; (8011ac0 <tcp_process+0x7d0>)
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	f003 0310 	and.w	r3, r3, #16
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d01f      	beq.n	8011aac <tcp_process+0x7bc>
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a70:	4b14      	ldr	r3, [pc, #80]	; (8011ac4 <tcp_process+0x7d4>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	429a      	cmp	r2, r3
 8011a76:	d119      	bne.n	8011aac <tcp_process+0x7bc>
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d115      	bne.n	8011aac <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011a80:	4b11      	ldr	r3, [pc, #68]	; (8011ac8 <tcp_process+0x7d8>)
 8011a82:	781b      	ldrb	r3, [r3, #0]
 8011a84:	f043 0310 	orr.w	r3, r3, #16
 8011a88:	b2da      	uxtb	r2, r3
 8011a8a:	4b0f      	ldr	r3, [pc, #60]	; (8011ac8 <tcp_process+0x7d8>)
 8011a8c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011a8e:	e00d      	b.n	8011aac <tcp_process+0x7bc>
    default:
      break;
 8011a90:	bf00      	nop
 8011a92:	e00c      	b.n	8011aae <tcp_process+0x7be>
      break;
 8011a94:	bf00      	nop
 8011a96:	e00a      	b.n	8011aae <tcp_process+0x7be>
      break;
 8011a98:	bf00      	nop
 8011a9a:	e008      	b.n	8011aae <tcp_process+0x7be>
      break;
 8011a9c:	bf00      	nop
 8011a9e:	e006      	b.n	8011aae <tcp_process+0x7be>
      break;
 8011aa0:	bf00      	nop
 8011aa2:	e004      	b.n	8011aae <tcp_process+0x7be>
      break;
 8011aa4:	bf00      	nop
 8011aa6:	e002      	b.n	8011aae <tcp_process+0x7be>
      break;
 8011aa8:	bf00      	nop
 8011aaa:	e000      	b.n	8011aae <tcp_process+0x7be>
      break;
 8011aac:	bf00      	nop
  }
  return ERR_OK;
 8011aae:	2300      	movs	r3, #0
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3724      	adds	r7, #36	; 0x24
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd90      	pop	{r4, r7, pc}
 8011ab8:	2000da10 	.word	0x2000da10
 8011abc:	2000da24 	.word	0x2000da24
 8011ac0:	200069c0 	.word	0x200069c0
 8011ac4:	200069b8 	.word	0x200069b8
 8011ac8:	200069c1 	.word	0x200069c1
 8011acc:	2000da14 	.word	0x2000da14

08011ad0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011ad0:	b590      	push	{r4, r7, lr}
 8011ad2:	b085      	sub	sp, #20
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d106      	bne.n	8011aee <tcp_oos_insert_segment+0x1e>
 8011ae0:	4b3b      	ldr	r3, [pc, #236]	; (8011bd0 <tcp_oos_insert_segment+0x100>)
 8011ae2:	f240 421f 	movw	r2, #1055	; 0x41f
 8011ae6:	493b      	ldr	r1, [pc, #236]	; (8011bd4 <tcp_oos_insert_segment+0x104>)
 8011ae8:	483b      	ldr	r0, [pc, #236]	; (8011bd8 <tcp_oos_insert_segment+0x108>)
 8011aea:	f006 fd65 	bl	80185b8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	68db      	ldr	r3, [r3, #12]
 8011af2:	899b      	ldrh	r3, [r3, #12]
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7fb faa4 	bl	800d044 <lwip_htons>
 8011afc:	4603      	mov	r3, r0
 8011afe:	b2db      	uxtb	r3, r3
 8011b00:	f003 0301 	and.w	r3, r3, #1
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d028      	beq.n	8011b5a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011b08:	6838      	ldr	r0, [r7, #0]
 8011b0a:	f7fe f997 	bl	800fe3c <tcp_segs_free>
    next = NULL;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	603b      	str	r3, [r7, #0]
 8011b12:	e056      	b.n	8011bc2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	899b      	ldrh	r3, [r3, #12]
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7fb fa91 	bl	800d044 <lwip_htons>
 8011b22:	4603      	mov	r3, r0
 8011b24:	b2db      	uxtb	r3, r3
 8011b26:	f003 0301 	and.w	r3, r3, #1
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d00d      	beq.n	8011b4a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	68db      	ldr	r3, [r3, #12]
 8011b32:	899b      	ldrh	r3, [r3, #12]
 8011b34:	b29c      	uxth	r4, r3
 8011b36:	2001      	movs	r0, #1
 8011b38:	f7fb fa84 	bl	800d044 <lwip_htons>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	461a      	mov	r2, r3
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	68db      	ldr	r3, [r3, #12]
 8011b44:	4322      	orrs	r2, r4
 8011b46:	b292      	uxth	r2, r2
 8011b48:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011b54:	68f8      	ldr	r0, [r7, #12]
 8011b56:	f7fe f986 	bl	800fe66 <tcp_seg_free>
    while (next &&
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d00e      	beq.n	8011b7e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	891b      	ldrh	r3, [r3, #8]
 8011b64:	461a      	mov	r2, r3
 8011b66:	4b1d      	ldr	r3, [pc, #116]	; (8011bdc <tcp_oos_insert_segment+0x10c>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	441a      	add	r2, r3
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	685b      	ldr	r3, [r3, #4]
 8011b72:	6839      	ldr	r1, [r7, #0]
 8011b74:	8909      	ldrh	r1, [r1, #8]
 8011b76:	440b      	add	r3, r1
 8011b78:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	daca      	bge.n	8011b14 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d01e      	beq.n	8011bc2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	891b      	ldrh	r3, [r3, #8]
 8011b88:	461a      	mov	r2, r3
 8011b8a:	4b14      	ldr	r3, [pc, #80]	; (8011bdc <tcp_oos_insert_segment+0x10c>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	441a      	add	r2, r3
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	68db      	ldr	r3, [r3, #12]
 8011b94:	685b      	ldr	r3, [r3, #4]
 8011b96:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	dd12      	ble.n	8011bc2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	68db      	ldr	r3, [r3, #12]
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	b29a      	uxth	r2, r3
 8011ba4:	4b0d      	ldr	r3, [pc, #52]	; (8011bdc <tcp_oos_insert_segment+0x10c>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	1ad3      	subs	r3, r2, r3
 8011bac:	b29a      	uxth	r2, r3
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	685a      	ldr	r2, [r3, #4]
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	891b      	ldrh	r3, [r3, #8]
 8011bba:	4619      	mov	r1, r3
 8011bbc:	4610      	mov	r0, r2
 8011bbe:	f7fc fc03 	bl	800e3c8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	683a      	ldr	r2, [r7, #0]
 8011bc6:	601a      	str	r2, [r3, #0]
}
 8011bc8:	bf00      	nop
 8011bca:	3714      	adds	r7, #20
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd90      	pop	{r4, r7, pc}
 8011bd0:	0801b548 	.word	0x0801b548
 8011bd4:	0801b808 	.word	0x0801b808
 8011bd8:	0801b594 	.word	0x0801b594
 8011bdc:	200069b4 	.word	0x200069b4

08011be0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011be0:	b5b0      	push	{r4, r5, r7, lr}
 8011be2:	b086      	sub	sp, #24
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	60f8      	str	r0, [r7, #12]
 8011be8:	60b9      	str	r1, [r7, #8]
 8011bea:	607a      	str	r2, [r7, #4]
 8011bec:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011bee:	e03e      	b.n	8011c6e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	685b      	ldr	r3, [r3, #4]
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7fc fdf6 	bl	800e7f0 <pbuf_clen>
 8011c04:	4603      	mov	r3, r0
 8011c06:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c0e:	8a7a      	ldrh	r2, [r7, #18]
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d906      	bls.n	8011c22 <tcp_free_acked_segments+0x42>
 8011c14:	4b2a      	ldr	r3, [pc, #168]	; (8011cc0 <tcp_free_acked_segments+0xe0>)
 8011c16:	f240 4257 	movw	r2, #1111	; 0x457
 8011c1a:	492a      	ldr	r1, [pc, #168]	; (8011cc4 <tcp_free_acked_segments+0xe4>)
 8011c1c:	482a      	ldr	r0, [pc, #168]	; (8011cc8 <tcp_free_acked_segments+0xe8>)
 8011c1e:	f006 fccb 	bl	80185b8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011c28:	8a7b      	ldrh	r3, [r7, #18]
 8011c2a:	1ad3      	subs	r3, r2, r3
 8011c2c:	b29a      	uxth	r2, r3
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	891a      	ldrh	r2, [r3, #8]
 8011c38:	4b24      	ldr	r3, [pc, #144]	; (8011ccc <tcp_free_acked_segments+0xec>)
 8011c3a:	881b      	ldrh	r3, [r3, #0]
 8011c3c:	4413      	add	r3, r2
 8011c3e:	b29a      	uxth	r2, r3
 8011c40:	4b22      	ldr	r3, [pc, #136]	; (8011ccc <tcp_free_acked_segments+0xec>)
 8011c42:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011c44:	6978      	ldr	r0, [r7, #20]
 8011c46:	f7fe f90e 	bl	800fe66 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d00c      	beq.n	8011c6e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d109      	bne.n	8011c6e <tcp_free_acked_segments+0x8e>
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d106      	bne.n	8011c6e <tcp_free_acked_segments+0x8e>
 8011c60:	4b17      	ldr	r3, [pc, #92]	; (8011cc0 <tcp_free_acked_segments+0xe0>)
 8011c62:	f240 4261 	movw	r2, #1121	; 0x461
 8011c66:	491a      	ldr	r1, [pc, #104]	; (8011cd0 <tcp_free_acked_segments+0xf0>)
 8011c68:	4817      	ldr	r0, [pc, #92]	; (8011cc8 <tcp_free_acked_segments+0xe8>)
 8011c6a:	f006 fca5 	bl	80185b8 <iprintf>
  while (seg_list != NULL &&
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d020      	beq.n	8011cb6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7fb f9f7 	bl	800d06e <lwip_htonl>
 8011c80:	4604      	mov	r4, r0
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	891b      	ldrh	r3, [r3, #8]
 8011c86:	461d      	mov	r5, r3
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	68db      	ldr	r3, [r3, #12]
 8011c8c:	899b      	ldrh	r3, [r3, #12]
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	4618      	mov	r0, r3
 8011c92:	f7fb f9d7 	bl	800d044 <lwip_htons>
 8011c96:	4603      	mov	r3, r0
 8011c98:	b2db      	uxtb	r3, r3
 8011c9a:	f003 0303 	and.w	r3, r3, #3
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d001      	beq.n	8011ca6 <tcp_free_acked_segments+0xc6>
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	e000      	b.n	8011ca8 <tcp_free_acked_segments+0xc8>
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	442b      	add	r3, r5
 8011caa:	18e2      	adds	r2, r4, r3
 8011cac:	4b09      	ldr	r3, [pc, #36]	; (8011cd4 <tcp_free_acked_segments+0xf4>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	dd9c      	ble.n	8011bf0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011cb6:	68bb      	ldr	r3, [r7, #8]
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3718      	adds	r7, #24
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8011cc0:	0801b548 	.word	0x0801b548
 8011cc4:	0801b830 	.word	0x0801b830
 8011cc8:	0801b594 	.word	0x0801b594
 8011ccc:	200069bc 	.word	0x200069bc
 8011cd0:	0801b858 	.word	0x0801b858
 8011cd4:	200069b8 	.word	0x200069b8

08011cd8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011cd8:	b5b0      	push	{r4, r5, r7, lr}
 8011cda:	b094      	sub	sp, #80	; 0x50
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d106      	bne.n	8011cf8 <tcp_receive+0x20>
 8011cea:	4ba6      	ldr	r3, [pc, #664]	; (8011f84 <tcp_receive+0x2ac>)
 8011cec:	f240 427b 	movw	r2, #1147	; 0x47b
 8011cf0:	49a5      	ldr	r1, [pc, #660]	; (8011f88 <tcp_receive+0x2b0>)
 8011cf2:	48a6      	ldr	r0, [pc, #664]	; (8011f8c <tcp_receive+0x2b4>)
 8011cf4:	f006 fc60 	bl	80185b8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	7d1b      	ldrb	r3, [r3, #20]
 8011cfc:	2b03      	cmp	r3, #3
 8011cfe:	d806      	bhi.n	8011d0e <tcp_receive+0x36>
 8011d00:	4ba0      	ldr	r3, [pc, #640]	; (8011f84 <tcp_receive+0x2ac>)
 8011d02:	f240 427c 	movw	r2, #1148	; 0x47c
 8011d06:	49a2      	ldr	r1, [pc, #648]	; (8011f90 <tcp_receive+0x2b8>)
 8011d08:	48a0      	ldr	r0, [pc, #640]	; (8011f8c <tcp_receive+0x2b4>)
 8011d0a:	f006 fc55 	bl	80185b8 <iprintf>

  if (flags & TCP_ACK) {
 8011d0e:	4ba1      	ldr	r3, [pc, #644]	; (8011f94 <tcp_receive+0x2bc>)
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	f003 0310 	and.w	r3, r3, #16
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	f000 8263 	beq.w	80121e2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d22:	461a      	mov	r2, r3
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d28:	4413      	add	r3, r2
 8011d2a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d30:	4b99      	ldr	r3, [pc, #612]	; (8011f98 <tcp_receive+0x2c0>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	1ad3      	subs	r3, r2, r3
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	db1b      	blt.n	8011d72 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d3e:	4b96      	ldr	r3, [pc, #600]	; (8011f98 <tcp_receive+0x2c0>)
 8011d40:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d106      	bne.n	8011d54 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011d4a:	4b94      	ldr	r3, [pc, #592]	; (8011f9c <tcp_receive+0x2c4>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	1ad3      	subs	r3, r2, r3
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	db0e      	blt.n	8011d72 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011d58:	4b90      	ldr	r3, [pc, #576]	; (8011f9c <tcp_receive+0x2c4>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011d5c:	429a      	cmp	r2, r3
 8011d5e:	d125      	bne.n	8011dac <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011d60:	4b8f      	ldr	r3, [pc, #572]	; (8011fa0 <tcp_receive+0x2c8>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	89db      	ldrh	r3, [r3, #14]
 8011d66:	b29a      	uxth	r2, r3
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d91c      	bls.n	8011dac <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011d72:	4b8b      	ldr	r3, [pc, #556]	; (8011fa0 <tcp_receive+0x2c8>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	89db      	ldrh	r3, [r3, #14]
 8011d78:	b29a      	uxth	r2, r3
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d205      	bcs.n	8011d9c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011d9c:	4b7e      	ldr	r3, [pc, #504]	; (8011f98 <tcp_receive+0x2c0>)
 8011d9e:	681a      	ldr	r2, [r3, #0]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011da4:	4b7d      	ldr	r3, [pc, #500]	; (8011f9c <tcp_receive+0x2c4>)
 8011da6:	681a      	ldr	r2, [r3, #0]
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011dac:	4b7b      	ldr	r3, [pc, #492]	; (8011f9c <tcp_receive+0x2c4>)
 8011dae:	681a      	ldr	r2, [r3, #0]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011db4:	1ad3      	subs	r3, r2, r3
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	dc58      	bgt.n	8011e6c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011dba:	4b7a      	ldr	r3, [pc, #488]	; (8011fa4 <tcp_receive+0x2cc>)
 8011dbc:	881b      	ldrh	r3, [r3, #0]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d14b      	bne.n	8011e5a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011dcc:	4413      	add	r3, r2
 8011dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d142      	bne.n	8011e5a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	db3d      	blt.n	8011e5a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011de2:	4b6e      	ldr	r3, [pc, #440]	; (8011f9c <tcp_receive+0x2c4>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d137      	bne.n	8011e5a <tcp_receive+0x182>
              found_dupack = 1;
 8011dea:	2301      	movs	r3, #1
 8011dec:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011df4:	2bff      	cmp	r3, #255	; 0xff
 8011df6:	d007      	beq.n	8011e08 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011dfe:	3301      	adds	r3, #1
 8011e00:	b2da      	uxtb	r2, r3
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011e0e:	2b03      	cmp	r3, #3
 8011e10:	d91b      	bls.n	8011e4a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e1c:	4413      	add	r3, r2
 8011e1e:	b29a      	uxth	r2, r3
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d30a      	bcc.n	8011e40 <tcp_receive+0x168>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e34:	4413      	add	r3, r2
 8011e36:	b29a      	uxth	r2, r3
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011e3e:	e004      	b.n	8011e4a <tcp_receive+0x172>
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011e50:	2b02      	cmp	r3, #2
 8011e52:	d902      	bls.n	8011e5a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	f002 fb41 	bl	80144dc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	f040 8160 	bne.w	8012122 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2200      	movs	r2, #0
 8011e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011e6a:	e15a      	b.n	8012122 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011e6c:	4b4b      	ldr	r3, [pc, #300]	; (8011f9c <tcp_receive+0x2c4>)
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e74:	1ad3      	subs	r3, r2, r3
 8011e76:	3b01      	subs	r3, #1
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	f2c0 814d 	blt.w	8012118 <tcp_receive+0x440>
 8011e7e:	4b47      	ldr	r3, [pc, #284]	; (8011f9c <tcp_receive+0x2c4>)
 8011e80:	681a      	ldr	r2, [r3, #0]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e86:	1ad3      	subs	r3, r2, r3
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	f300 8145 	bgt.w	8012118 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	8b5b      	ldrh	r3, [r3, #26]
 8011e92:	f003 0304 	and.w	r3, r3, #4
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d010      	beq.n	8011ebc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	8b5b      	ldrh	r3, [r3, #26]
 8011e9e:	f023 0304 	bic.w	r3, r3, #4
 8011ea2:	b29a      	uxth	r2, r3
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011eca:	10db      	asrs	r3, r3, #3
 8011ecc:	b21b      	sxth	r3, r3
 8011ece:	b29a      	uxth	r2, r3
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	4413      	add	r3, r2
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	b21a      	sxth	r2, r3
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011ee4:	4b2d      	ldr	r3, [pc, #180]	; (8011f9c <tcp_receive+0x2c4>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	b29a      	uxth	r2, r3
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	1ad3      	subs	r3, r2, r3
 8011ef2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011efc:	4b27      	ldr	r3, [pc, #156]	; (8011f9c <tcp_receive+0x2c4>)
 8011efe:	681a      	ldr	r2, [r3, #0]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	7d1b      	ldrb	r3, [r3, #20]
 8011f08:	2b03      	cmp	r3, #3
 8011f0a:	f240 8096 	bls.w	801203a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d244      	bcs.n	8011fa8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	8b5b      	ldrh	r3, [r3, #26]
 8011f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d001      	beq.n	8011f2e <tcp_receive+0x256>
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	e000      	b.n	8011f30 <tcp_receive+0x258>
 8011f2e:	2302      	movs	r3, #2
 8011f30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011f34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011f38:	b29a      	uxth	r2, r3
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f3e:	fb12 f303 	smulbb	r3, r2, r3
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f46:	4293      	cmp	r3, r2
 8011f48:	bf28      	it	cs
 8011f4a:	4613      	movcs	r3, r2
 8011f4c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011f56:	4413      	add	r3, r2
 8011f58:	b29a      	uxth	r2, r3
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d309      	bcc.n	8011f78 <tcp_receive+0x2a0>
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011f6c:	4413      	add	r3, r2
 8011f6e:	b29a      	uxth	r2, r3
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011f76:	e060      	b.n	801203a <tcp_receive+0x362>
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011f82:	e05a      	b.n	801203a <tcp_receive+0x362>
 8011f84:	0801b548 	.word	0x0801b548
 8011f88:	0801b878 	.word	0x0801b878
 8011f8c:	0801b594 	.word	0x0801b594
 8011f90:	0801b894 	.word	0x0801b894
 8011f94:	200069c0 	.word	0x200069c0
 8011f98:	200069b4 	.word	0x200069b4
 8011f9c:	200069b8 	.word	0x200069b8
 8011fa0:	200069a4 	.word	0x200069a4
 8011fa4:	200069be 	.word	0x200069be
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011fae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011fb0:	4413      	add	r3, r2
 8011fb2:	b29a      	uxth	r2, r3
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d309      	bcc.n	8011fd2 <tcp_receive+0x2fa>
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011fc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011fc6:	4413      	add	r3, r2
 8011fc8:	b29a      	uxth	r2, r3
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011fd0:	e004      	b.n	8011fdc <tcp_receive+0x304>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d326      	bcc.n	801203a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011ff8:	1ad3      	subs	r3, r2, r3
 8011ffa:	b29a      	uxth	r2, r3
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801200c:	4413      	add	r3, r2
 801200e:	b29a      	uxth	r2, r3
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012016:	429a      	cmp	r2, r3
 8012018:	d30a      	bcc.n	8012030 <tcp_receive+0x358>
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012024:	4413      	add	r3, r2
 8012026:	b29a      	uxth	r2, r3
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801202e:	e004      	b.n	801203a <tcp_receive+0x362>
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012036:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012042:	4a98      	ldr	r2, [pc, #608]	; (80122a4 <tcp_receive+0x5cc>)
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7ff fdcb 	bl	8011be0 <tcp_free_acked_segments>
 801204a:	4602      	mov	r2, r0
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012058:	4a93      	ldr	r2, [pc, #588]	; (80122a8 <tcp_receive+0x5d0>)
 801205a:	6878      	ldr	r0, [r7, #4]
 801205c:	f7ff fdc0 	bl	8011be0 <tcp_free_acked_segments>
 8012060:	4602      	mov	r2, r0
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801206a:	2b00      	cmp	r3, #0
 801206c:	d104      	bne.n	8012078 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012074:	861a      	strh	r2, [r3, #48]	; 0x30
 8012076:	e002      	b.n	801207e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2200      	movs	r2, #0
 801207c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2200      	movs	r2, #0
 8012082:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012088:	2b00      	cmp	r3, #0
 801208a:	d103      	bne.n	8012094 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2200      	movs	r2, #0
 8012090:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801209a:	4b84      	ldr	r3, [pc, #528]	; (80122ac <tcp_receive+0x5d4>)
 801209c:	881b      	ldrh	r3, [r3, #0]
 801209e:	4413      	add	r3, r2
 80120a0:	b29a      	uxth	r2, r3
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	8b5b      	ldrh	r3, [r3, #26]
 80120ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d035      	beq.n	8012120 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d118      	bne.n	80120ee <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d00c      	beq.n	80120de <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120cc:	68db      	ldr	r3, [r3, #12]
 80120ce:	685b      	ldr	r3, [r3, #4]
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7fa ffcc 	bl	800d06e <lwip_htonl>
 80120d6:	4603      	mov	r3, r0
 80120d8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80120da:	2b00      	cmp	r3, #0
 80120dc:	dc20      	bgt.n	8012120 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	8b5b      	ldrh	r3, [r3, #26]
 80120e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80120e6:	b29a      	uxth	r2, r3
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80120ec:	e018      	b.n	8012120 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	685b      	ldr	r3, [r3, #4]
 80120fa:	4618      	mov	r0, r3
 80120fc:	f7fa ffb7 	bl	800d06e <lwip_htonl>
 8012100:	4603      	mov	r3, r0
 8012102:	1ae3      	subs	r3, r4, r3
 8012104:	2b00      	cmp	r3, #0
 8012106:	dc0b      	bgt.n	8012120 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	8b5b      	ldrh	r3, [r3, #26]
 801210c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012110:	b29a      	uxth	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012116:	e003      	b.n	8012120 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f002 fbcd 	bl	80148b8 <tcp_send_empty_ack>
 801211e:	e000      	b.n	8012122 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012120:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012126:	2b00      	cmp	r3, #0
 8012128:	d05b      	beq.n	80121e2 <tcp_receive+0x50a>
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801212e:	4b60      	ldr	r3, [pc, #384]	; (80122b0 <tcp_receive+0x5d8>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	1ad3      	subs	r3, r2, r3
 8012134:	2b00      	cmp	r3, #0
 8012136:	da54      	bge.n	80121e2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012138:	4b5e      	ldr	r3, [pc, #376]	; (80122b4 <tcp_receive+0x5dc>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	b29a      	uxth	r2, r3
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012142:	b29b      	uxth	r3, r3
 8012144:	1ad3      	subs	r3, r2, r3
 8012146:	b29b      	uxth	r3, r3
 8012148:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801214c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012156:	10db      	asrs	r3, r3, #3
 8012158:	b21b      	sxth	r3, r3
 801215a:	b29b      	uxth	r3, r3
 801215c:	1ad3      	subs	r3, r2, r3
 801215e:	b29b      	uxth	r3, r3
 8012160:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801216a:	b29a      	uxth	r2, r3
 801216c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012170:	4413      	add	r3, r2
 8012172:	b29b      	uxth	r3, r3
 8012174:	b21a      	sxth	r2, r3
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801217a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801217e:	2b00      	cmp	r3, #0
 8012180:	da05      	bge.n	801218e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8012182:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012186:	425b      	negs	r3, r3
 8012188:	b29b      	uxth	r3, r3
 801218a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801218e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012198:	109b      	asrs	r3, r3, #2
 801219a:	b21b      	sxth	r3, r3
 801219c:	b29b      	uxth	r3, r3
 801219e:	1ad3      	subs	r3, r2, r3
 80121a0:	b29b      	uxth	r3, r3
 80121a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80121ac:	b29a      	uxth	r2, r3
 80121ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80121b2:	4413      	add	r3, r2
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	b21a      	sxth	r2, r3
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121c2:	10db      	asrs	r3, r3, #3
 80121c4:	b21b      	sxth	r3, r3
 80121c6:	b29a      	uxth	r2, r3
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	4413      	add	r3, r2
 80121d2:	b29b      	uxth	r3, r3
 80121d4:	b21a      	sxth	r2, r3
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2200      	movs	r2, #0
 80121e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80121e2:	4b35      	ldr	r3, [pc, #212]	; (80122b8 <tcp_receive+0x5e0>)
 80121e4:	881b      	ldrh	r3, [r3, #0]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	f000 84e1 	beq.w	8012bae <tcp_receive+0xed6>
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	7d1b      	ldrb	r3, [r3, #20]
 80121f0:	2b06      	cmp	r3, #6
 80121f2:	f200 84dc 	bhi.w	8012bae <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121fa:	4b30      	ldr	r3, [pc, #192]	; (80122bc <tcp_receive+0x5e4>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	1ad3      	subs	r3, r2, r3
 8012200:	3b01      	subs	r3, #1
 8012202:	2b00      	cmp	r3, #0
 8012204:	f2c0 808e 	blt.w	8012324 <tcp_receive+0x64c>
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801220c:	4b2a      	ldr	r3, [pc, #168]	; (80122b8 <tcp_receive+0x5e0>)
 801220e:	881b      	ldrh	r3, [r3, #0]
 8012210:	4619      	mov	r1, r3
 8012212:	4b2a      	ldr	r3, [pc, #168]	; (80122bc <tcp_receive+0x5e4>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	440b      	add	r3, r1
 8012218:	1ad3      	subs	r3, r2, r3
 801221a:	3301      	adds	r3, #1
 801221c:	2b00      	cmp	r3, #0
 801221e:	f300 8081 	bgt.w	8012324 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012222:	4b27      	ldr	r3, [pc, #156]	; (80122c0 <tcp_receive+0x5e8>)
 8012224:	685b      	ldr	r3, [r3, #4]
 8012226:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801222c:	4b23      	ldr	r3, [pc, #140]	; (80122bc <tcp_receive+0x5e4>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	1ad3      	subs	r3, r2, r3
 8012232:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012234:	4b22      	ldr	r3, [pc, #136]	; (80122c0 <tcp_receive+0x5e8>)
 8012236:	685b      	ldr	r3, [r3, #4]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d106      	bne.n	801224a <tcp_receive+0x572>
 801223c:	4b21      	ldr	r3, [pc, #132]	; (80122c4 <tcp_receive+0x5ec>)
 801223e:	f240 5294 	movw	r2, #1428	; 0x594
 8012242:	4921      	ldr	r1, [pc, #132]	; (80122c8 <tcp_receive+0x5f0>)
 8012244:	4821      	ldr	r0, [pc, #132]	; (80122cc <tcp_receive+0x5f4>)
 8012246:	f006 f9b7 	bl	80185b8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012250:	4293      	cmp	r3, r2
 8012252:	d906      	bls.n	8012262 <tcp_receive+0x58a>
 8012254:	4b1b      	ldr	r3, [pc, #108]	; (80122c4 <tcp_receive+0x5ec>)
 8012256:	f240 5295 	movw	r2, #1429	; 0x595
 801225a:	491d      	ldr	r1, [pc, #116]	; (80122d0 <tcp_receive+0x5f8>)
 801225c:	481b      	ldr	r0, [pc, #108]	; (80122cc <tcp_receive+0x5f4>)
 801225e:	f006 f9ab 	bl	80185b8 <iprintf>
      off = (u16_t)off32;
 8012262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012264:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012268:	4b15      	ldr	r3, [pc, #84]	; (80122c0 <tcp_receive+0x5e8>)
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	891b      	ldrh	r3, [r3, #8]
 801226e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012272:	429a      	cmp	r2, r3
 8012274:	d906      	bls.n	8012284 <tcp_receive+0x5ac>
 8012276:	4b13      	ldr	r3, [pc, #76]	; (80122c4 <tcp_receive+0x5ec>)
 8012278:	f240 5297 	movw	r2, #1431	; 0x597
 801227c:	4915      	ldr	r1, [pc, #84]	; (80122d4 <tcp_receive+0x5fc>)
 801227e:	4813      	ldr	r0, [pc, #76]	; (80122cc <tcp_receive+0x5f4>)
 8012280:	f006 f99a 	bl	80185b8 <iprintf>
      inseg.len -= off;
 8012284:	4b0e      	ldr	r3, [pc, #56]	; (80122c0 <tcp_receive+0x5e8>)
 8012286:	891a      	ldrh	r2, [r3, #8]
 8012288:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801228c:	1ad3      	subs	r3, r2, r3
 801228e:	b29a      	uxth	r2, r3
 8012290:	4b0b      	ldr	r3, [pc, #44]	; (80122c0 <tcp_receive+0x5e8>)
 8012292:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012294:	4b0a      	ldr	r3, [pc, #40]	; (80122c0 <tcp_receive+0x5e8>)
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	891a      	ldrh	r2, [r3, #8]
 801229a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801229e:	1ad3      	subs	r3, r2, r3
 80122a0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80122a2:	e029      	b.n	80122f8 <tcp_receive+0x620>
 80122a4:	0801b8b0 	.word	0x0801b8b0
 80122a8:	0801b8b8 	.word	0x0801b8b8
 80122ac:	200069bc 	.word	0x200069bc
 80122b0:	200069b8 	.word	0x200069b8
 80122b4:	2000da18 	.word	0x2000da18
 80122b8:	200069be 	.word	0x200069be
 80122bc:	200069b4 	.word	0x200069b4
 80122c0:	20006994 	.word	0x20006994
 80122c4:	0801b548 	.word	0x0801b548
 80122c8:	0801b8c0 	.word	0x0801b8c0
 80122cc:	0801b594 	.word	0x0801b594
 80122d0:	0801b8d0 	.word	0x0801b8d0
 80122d4:	0801b8e0 	.word	0x0801b8e0
        off -= p->len;
 80122d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122da:	895b      	ldrh	r3, [r3, #10]
 80122dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80122e0:	1ad3      	subs	r3, r2, r3
 80122e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80122e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80122ea:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80122ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122ee:	2200      	movs	r2, #0
 80122f0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80122f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80122f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122fa:	895b      	ldrh	r3, [r3, #10]
 80122fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012300:	429a      	cmp	r2, r3
 8012302:	d8e9      	bhi.n	80122d8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012304:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012308:	4619      	mov	r1, r3
 801230a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801230c:	f7fc f95c 	bl	800e5c8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012314:	4a91      	ldr	r2, [pc, #580]	; (801255c <tcp_receive+0x884>)
 8012316:	6013      	str	r3, [r2, #0]
 8012318:	4b91      	ldr	r3, [pc, #580]	; (8012560 <tcp_receive+0x888>)
 801231a:	68db      	ldr	r3, [r3, #12]
 801231c:	4a8f      	ldr	r2, [pc, #572]	; (801255c <tcp_receive+0x884>)
 801231e:	6812      	ldr	r2, [r2, #0]
 8012320:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012322:	e00d      	b.n	8012340 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012324:	4b8d      	ldr	r3, [pc, #564]	; (801255c <tcp_receive+0x884>)
 8012326:	681a      	ldr	r2, [r3, #0]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801232c:	1ad3      	subs	r3, r2, r3
 801232e:	2b00      	cmp	r3, #0
 8012330:	da06      	bge.n	8012340 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	8b5b      	ldrh	r3, [r3, #26]
 8012336:	f043 0302 	orr.w	r3, r3, #2
 801233a:	b29a      	uxth	r2, r3
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012340:	4b86      	ldr	r3, [pc, #536]	; (801255c <tcp_receive+0x884>)
 8012342:	681a      	ldr	r2, [r3, #0]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012348:	1ad3      	subs	r3, r2, r3
 801234a:	2b00      	cmp	r3, #0
 801234c:	f2c0 842a 	blt.w	8012ba4 <tcp_receive+0xecc>
 8012350:	4b82      	ldr	r3, [pc, #520]	; (801255c <tcp_receive+0x884>)
 8012352:	681a      	ldr	r2, [r3, #0]
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012358:	6879      	ldr	r1, [r7, #4]
 801235a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801235c:	440b      	add	r3, r1
 801235e:	1ad3      	subs	r3, r2, r3
 8012360:	3301      	adds	r3, #1
 8012362:	2b00      	cmp	r3, #0
 8012364:	f300 841e 	bgt.w	8012ba4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801236c:	4b7b      	ldr	r3, [pc, #492]	; (801255c <tcp_receive+0x884>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	429a      	cmp	r2, r3
 8012372:	f040 829a 	bne.w	80128aa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012376:	4b7a      	ldr	r3, [pc, #488]	; (8012560 <tcp_receive+0x888>)
 8012378:	891c      	ldrh	r4, [r3, #8]
 801237a:	4b79      	ldr	r3, [pc, #484]	; (8012560 <tcp_receive+0x888>)
 801237c:	68db      	ldr	r3, [r3, #12]
 801237e:	899b      	ldrh	r3, [r3, #12]
 8012380:	b29b      	uxth	r3, r3
 8012382:	4618      	mov	r0, r3
 8012384:	f7fa fe5e 	bl	800d044 <lwip_htons>
 8012388:	4603      	mov	r3, r0
 801238a:	b2db      	uxtb	r3, r3
 801238c:	f003 0303 	and.w	r3, r3, #3
 8012390:	2b00      	cmp	r3, #0
 8012392:	d001      	beq.n	8012398 <tcp_receive+0x6c0>
 8012394:	2301      	movs	r3, #1
 8012396:	e000      	b.n	801239a <tcp_receive+0x6c2>
 8012398:	2300      	movs	r3, #0
 801239a:	4423      	add	r3, r4
 801239c:	b29a      	uxth	r2, r3
 801239e:	4b71      	ldr	r3, [pc, #452]	; (8012564 <tcp_receive+0x88c>)
 80123a0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80123a6:	4b6f      	ldr	r3, [pc, #444]	; (8012564 <tcp_receive+0x88c>)
 80123a8:	881b      	ldrh	r3, [r3, #0]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d275      	bcs.n	801249a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80123ae:	4b6c      	ldr	r3, [pc, #432]	; (8012560 <tcp_receive+0x888>)
 80123b0:	68db      	ldr	r3, [r3, #12]
 80123b2:	899b      	ldrh	r3, [r3, #12]
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7fa fe44 	bl	800d044 <lwip_htons>
 80123bc:	4603      	mov	r3, r0
 80123be:	b2db      	uxtb	r3, r3
 80123c0:	f003 0301 	and.w	r3, r3, #1
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d01f      	beq.n	8012408 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80123c8:	4b65      	ldr	r3, [pc, #404]	; (8012560 <tcp_receive+0x888>)
 80123ca:	68db      	ldr	r3, [r3, #12]
 80123cc:	899b      	ldrh	r3, [r3, #12]
 80123ce:	b29b      	uxth	r3, r3
 80123d0:	b21b      	sxth	r3, r3
 80123d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80123d6:	b21c      	sxth	r4, r3
 80123d8:	4b61      	ldr	r3, [pc, #388]	; (8012560 <tcp_receive+0x888>)
 80123da:	68db      	ldr	r3, [r3, #12]
 80123dc:	899b      	ldrh	r3, [r3, #12]
 80123de:	b29b      	uxth	r3, r3
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7fa fe2f 	bl	800d044 <lwip_htons>
 80123e6:	4603      	mov	r3, r0
 80123e8:	b2db      	uxtb	r3, r3
 80123ea:	b29b      	uxth	r3, r3
 80123ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80123f0:	b29b      	uxth	r3, r3
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7fa fe26 	bl	800d044 <lwip_htons>
 80123f8:	4603      	mov	r3, r0
 80123fa:	b21b      	sxth	r3, r3
 80123fc:	4323      	orrs	r3, r4
 80123fe:	b21a      	sxth	r2, r3
 8012400:	4b57      	ldr	r3, [pc, #348]	; (8012560 <tcp_receive+0x888>)
 8012402:	68db      	ldr	r3, [r3, #12]
 8012404:	b292      	uxth	r2, r2
 8012406:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801240c:	4b54      	ldr	r3, [pc, #336]	; (8012560 <tcp_receive+0x888>)
 801240e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012410:	4b53      	ldr	r3, [pc, #332]	; (8012560 <tcp_receive+0x888>)
 8012412:	68db      	ldr	r3, [r3, #12]
 8012414:	899b      	ldrh	r3, [r3, #12]
 8012416:	b29b      	uxth	r3, r3
 8012418:	4618      	mov	r0, r3
 801241a:	f7fa fe13 	bl	800d044 <lwip_htons>
 801241e:	4603      	mov	r3, r0
 8012420:	b2db      	uxtb	r3, r3
 8012422:	f003 0302 	and.w	r3, r3, #2
 8012426:	2b00      	cmp	r3, #0
 8012428:	d005      	beq.n	8012436 <tcp_receive+0x75e>
            inseg.len -= 1;
 801242a:	4b4d      	ldr	r3, [pc, #308]	; (8012560 <tcp_receive+0x888>)
 801242c:	891b      	ldrh	r3, [r3, #8]
 801242e:	3b01      	subs	r3, #1
 8012430:	b29a      	uxth	r2, r3
 8012432:	4b4b      	ldr	r3, [pc, #300]	; (8012560 <tcp_receive+0x888>)
 8012434:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012436:	4b4a      	ldr	r3, [pc, #296]	; (8012560 <tcp_receive+0x888>)
 8012438:	685b      	ldr	r3, [r3, #4]
 801243a:	4a49      	ldr	r2, [pc, #292]	; (8012560 <tcp_receive+0x888>)
 801243c:	8912      	ldrh	r2, [r2, #8]
 801243e:	4611      	mov	r1, r2
 8012440:	4618      	mov	r0, r3
 8012442:	f7fb ffc1 	bl	800e3c8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012446:	4b46      	ldr	r3, [pc, #280]	; (8012560 <tcp_receive+0x888>)
 8012448:	891c      	ldrh	r4, [r3, #8]
 801244a:	4b45      	ldr	r3, [pc, #276]	; (8012560 <tcp_receive+0x888>)
 801244c:	68db      	ldr	r3, [r3, #12]
 801244e:	899b      	ldrh	r3, [r3, #12]
 8012450:	b29b      	uxth	r3, r3
 8012452:	4618      	mov	r0, r3
 8012454:	f7fa fdf6 	bl	800d044 <lwip_htons>
 8012458:	4603      	mov	r3, r0
 801245a:	b2db      	uxtb	r3, r3
 801245c:	f003 0303 	and.w	r3, r3, #3
 8012460:	2b00      	cmp	r3, #0
 8012462:	d001      	beq.n	8012468 <tcp_receive+0x790>
 8012464:	2301      	movs	r3, #1
 8012466:	e000      	b.n	801246a <tcp_receive+0x792>
 8012468:	2300      	movs	r3, #0
 801246a:	4423      	add	r3, r4
 801246c:	b29a      	uxth	r2, r3
 801246e:	4b3d      	ldr	r3, [pc, #244]	; (8012564 <tcp_receive+0x88c>)
 8012470:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012472:	4b3c      	ldr	r3, [pc, #240]	; (8012564 <tcp_receive+0x88c>)
 8012474:	881b      	ldrh	r3, [r3, #0]
 8012476:	461a      	mov	r2, r3
 8012478:	4b38      	ldr	r3, [pc, #224]	; (801255c <tcp_receive+0x884>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	441a      	add	r2, r3
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012482:	6879      	ldr	r1, [r7, #4]
 8012484:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012486:	440b      	add	r3, r1
 8012488:	429a      	cmp	r2, r3
 801248a:	d006      	beq.n	801249a <tcp_receive+0x7c2>
 801248c:	4b36      	ldr	r3, [pc, #216]	; (8012568 <tcp_receive+0x890>)
 801248e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012492:	4936      	ldr	r1, [pc, #216]	; (801256c <tcp_receive+0x894>)
 8012494:	4836      	ldr	r0, [pc, #216]	; (8012570 <tcp_receive+0x898>)
 8012496:	f006 f88f 	bl	80185b8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801249e:	2b00      	cmp	r3, #0
 80124a0:	f000 80e7 	beq.w	8012672 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80124a4:	4b2e      	ldr	r3, [pc, #184]	; (8012560 <tcp_receive+0x888>)
 80124a6:	68db      	ldr	r3, [r3, #12]
 80124a8:	899b      	ldrh	r3, [r3, #12]
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7fa fdc9 	bl	800d044 <lwip_htons>
 80124b2:	4603      	mov	r3, r0
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	f003 0301 	and.w	r3, r3, #1
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d010      	beq.n	80124e0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80124be:	e00a      	b.n	80124d6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124c4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124ca:	681a      	ldr	r2, [r3, #0]
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80124d0:	68f8      	ldr	r0, [r7, #12]
 80124d2:	f7fd fcc8 	bl	800fe66 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d1f0      	bne.n	80124c0 <tcp_receive+0x7e8>
 80124de:	e0c8      	b.n	8012672 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124e4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80124e6:	e052      	b.n	801258e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80124e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124ea:	68db      	ldr	r3, [r3, #12]
 80124ec:	899b      	ldrh	r3, [r3, #12]
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7fa fda7 	bl	800d044 <lwip_htons>
 80124f6:	4603      	mov	r3, r0
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	f003 0301 	and.w	r3, r3, #1
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d03d      	beq.n	801257e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012502:	4b17      	ldr	r3, [pc, #92]	; (8012560 <tcp_receive+0x888>)
 8012504:	68db      	ldr	r3, [r3, #12]
 8012506:	899b      	ldrh	r3, [r3, #12]
 8012508:	b29b      	uxth	r3, r3
 801250a:	4618      	mov	r0, r3
 801250c:	f7fa fd9a 	bl	800d044 <lwip_htons>
 8012510:	4603      	mov	r3, r0
 8012512:	b2db      	uxtb	r3, r3
 8012514:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012518:	2b00      	cmp	r3, #0
 801251a:	d130      	bne.n	801257e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801251c:	4b10      	ldr	r3, [pc, #64]	; (8012560 <tcp_receive+0x888>)
 801251e:	68db      	ldr	r3, [r3, #12]
 8012520:	899b      	ldrh	r3, [r3, #12]
 8012522:	b29c      	uxth	r4, r3
 8012524:	2001      	movs	r0, #1
 8012526:	f7fa fd8d 	bl	800d044 <lwip_htons>
 801252a:	4603      	mov	r3, r0
 801252c:	461a      	mov	r2, r3
 801252e:	4b0c      	ldr	r3, [pc, #48]	; (8012560 <tcp_receive+0x888>)
 8012530:	68db      	ldr	r3, [r3, #12]
 8012532:	4322      	orrs	r2, r4
 8012534:	b292      	uxth	r2, r2
 8012536:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012538:	4b09      	ldr	r3, [pc, #36]	; (8012560 <tcp_receive+0x888>)
 801253a:	891c      	ldrh	r4, [r3, #8]
 801253c:	4b08      	ldr	r3, [pc, #32]	; (8012560 <tcp_receive+0x888>)
 801253e:	68db      	ldr	r3, [r3, #12]
 8012540:	899b      	ldrh	r3, [r3, #12]
 8012542:	b29b      	uxth	r3, r3
 8012544:	4618      	mov	r0, r3
 8012546:	f7fa fd7d 	bl	800d044 <lwip_htons>
 801254a:	4603      	mov	r3, r0
 801254c:	b2db      	uxtb	r3, r3
 801254e:	f003 0303 	and.w	r3, r3, #3
 8012552:	2b00      	cmp	r3, #0
 8012554:	d00e      	beq.n	8012574 <tcp_receive+0x89c>
 8012556:	2301      	movs	r3, #1
 8012558:	e00d      	b.n	8012576 <tcp_receive+0x89e>
 801255a:	bf00      	nop
 801255c:	200069b4 	.word	0x200069b4
 8012560:	20006994 	.word	0x20006994
 8012564:	200069be 	.word	0x200069be
 8012568:	0801b548 	.word	0x0801b548
 801256c:	0801b8f0 	.word	0x0801b8f0
 8012570:	0801b594 	.word	0x0801b594
 8012574:	2300      	movs	r3, #0
 8012576:	4423      	add	r3, r4
 8012578:	b29a      	uxth	r2, r3
 801257a:	4b98      	ldr	r3, [pc, #608]	; (80127dc <tcp_receive+0xb04>)
 801257c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801257e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012580:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012588:	6938      	ldr	r0, [r7, #16]
 801258a:	f7fd fc6c 	bl	800fe66 <tcp_seg_free>
            while (next &&
 801258e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012590:	2b00      	cmp	r3, #0
 8012592:	d00e      	beq.n	80125b2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012594:	4b91      	ldr	r3, [pc, #580]	; (80127dc <tcp_receive+0xb04>)
 8012596:	881b      	ldrh	r3, [r3, #0]
 8012598:	461a      	mov	r2, r3
 801259a:	4b91      	ldr	r3, [pc, #580]	; (80127e0 <tcp_receive+0xb08>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	441a      	add	r2, r3
 80125a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125a2:	68db      	ldr	r3, [r3, #12]
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80125a8:	8909      	ldrh	r1, [r1, #8]
 80125aa:	440b      	add	r3, r1
 80125ac:	1ad3      	subs	r3, r2, r3
            while (next &&
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	da9a      	bge.n	80124e8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80125b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d059      	beq.n	801266c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80125b8:	4b88      	ldr	r3, [pc, #544]	; (80127dc <tcp_receive+0xb04>)
 80125ba:	881b      	ldrh	r3, [r3, #0]
 80125bc:	461a      	mov	r2, r3
 80125be:	4b88      	ldr	r3, [pc, #544]	; (80127e0 <tcp_receive+0xb08>)
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	441a      	add	r2, r3
 80125c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125c6:	68db      	ldr	r3, [r3, #12]
 80125c8:	685b      	ldr	r3, [r3, #4]
 80125ca:	1ad3      	subs	r3, r2, r3
            if (next &&
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	dd4d      	ble.n	801266c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80125d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125d2:	68db      	ldr	r3, [r3, #12]
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	4b81      	ldr	r3, [pc, #516]	; (80127e0 <tcp_receive+0xb08>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	b29b      	uxth	r3, r3
 80125de:	1ad3      	subs	r3, r2, r3
 80125e0:	b29a      	uxth	r2, r3
 80125e2:	4b80      	ldr	r3, [pc, #512]	; (80127e4 <tcp_receive+0xb0c>)
 80125e4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80125e6:	4b7f      	ldr	r3, [pc, #508]	; (80127e4 <tcp_receive+0xb0c>)
 80125e8:	68db      	ldr	r3, [r3, #12]
 80125ea:	899b      	ldrh	r3, [r3, #12]
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7fa fd28 	bl	800d044 <lwip_htons>
 80125f4:	4603      	mov	r3, r0
 80125f6:	b2db      	uxtb	r3, r3
 80125f8:	f003 0302 	and.w	r3, r3, #2
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d005      	beq.n	801260c <tcp_receive+0x934>
                inseg.len -= 1;
 8012600:	4b78      	ldr	r3, [pc, #480]	; (80127e4 <tcp_receive+0xb0c>)
 8012602:	891b      	ldrh	r3, [r3, #8]
 8012604:	3b01      	subs	r3, #1
 8012606:	b29a      	uxth	r2, r3
 8012608:	4b76      	ldr	r3, [pc, #472]	; (80127e4 <tcp_receive+0xb0c>)
 801260a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801260c:	4b75      	ldr	r3, [pc, #468]	; (80127e4 <tcp_receive+0xb0c>)
 801260e:	685b      	ldr	r3, [r3, #4]
 8012610:	4a74      	ldr	r2, [pc, #464]	; (80127e4 <tcp_receive+0xb0c>)
 8012612:	8912      	ldrh	r2, [r2, #8]
 8012614:	4611      	mov	r1, r2
 8012616:	4618      	mov	r0, r3
 8012618:	f7fb fed6 	bl	800e3c8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801261c:	4b71      	ldr	r3, [pc, #452]	; (80127e4 <tcp_receive+0xb0c>)
 801261e:	891c      	ldrh	r4, [r3, #8]
 8012620:	4b70      	ldr	r3, [pc, #448]	; (80127e4 <tcp_receive+0xb0c>)
 8012622:	68db      	ldr	r3, [r3, #12]
 8012624:	899b      	ldrh	r3, [r3, #12]
 8012626:	b29b      	uxth	r3, r3
 8012628:	4618      	mov	r0, r3
 801262a:	f7fa fd0b 	bl	800d044 <lwip_htons>
 801262e:	4603      	mov	r3, r0
 8012630:	b2db      	uxtb	r3, r3
 8012632:	f003 0303 	and.w	r3, r3, #3
 8012636:	2b00      	cmp	r3, #0
 8012638:	d001      	beq.n	801263e <tcp_receive+0x966>
 801263a:	2301      	movs	r3, #1
 801263c:	e000      	b.n	8012640 <tcp_receive+0x968>
 801263e:	2300      	movs	r3, #0
 8012640:	4423      	add	r3, r4
 8012642:	b29a      	uxth	r2, r3
 8012644:	4b65      	ldr	r3, [pc, #404]	; (80127dc <tcp_receive+0xb04>)
 8012646:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012648:	4b64      	ldr	r3, [pc, #400]	; (80127dc <tcp_receive+0xb04>)
 801264a:	881b      	ldrh	r3, [r3, #0]
 801264c:	461a      	mov	r2, r3
 801264e:	4b64      	ldr	r3, [pc, #400]	; (80127e0 <tcp_receive+0xb08>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	441a      	add	r2, r3
 8012654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	429a      	cmp	r2, r3
 801265c:	d006      	beq.n	801266c <tcp_receive+0x994>
 801265e:	4b62      	ldr	r3, [pc, #392]	; (80127e8 <tcp_receive+0xb10>)
 8012660:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012664:	4961      	ldr	r1, [pc, #388]	; (80127ec <tcp_receive+0xb14>)
 8012666:	4862      	ldr	r0, [pc, #392]	; (80127f0 <tcp_receive+0xb18>)
 8012668:	f005 ffa6 	bl	80185b8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012670:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012672:	4b5a      	ldr	r3, [pc, #360]	; (80127dc <tcp_receive+0xb04>)
 8012674:	881b      	ldrh	r3, [r3, #0]
 8012676:	461a      	mov	r2, r3
 8012678:	4b59      	ldr	r3, [pc, #356]	; (80127e0 <tcp_receive+0xb08>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	441a      	add	r2, r3
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012686:	4b55      	ldr	r3, [pc, #340]	; (80127dc <tcp_receive+0xb04>)
 8012688:	881b      	ldrh	r3, [r3, #0]
 801268a:	429a      	cmp	r2, r3
 801268c:	d206      	bcs.n	801269c <tcp_receive+0x9c4>
 801268e:	4b56      	ldr	r3, [pc, #344]	; (80127e8 <tcp_receive+0xb10>)
 8012690:	f240 6207 	movw	r2, #1543	; 0x607
 8012694:	4957      	ldr	r1, [pc, #348]	; (80127f4 <tcp_receive+0xb1c>)
 8012696:	4856      	ldr	r0, [pc, #344]	; (80127f0 <tcp_receive+0xb18>)
 8012698:	f005 ff8e 	bl	80185b8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80126a0:	4b4e      	ldr	r3, [pc, #312]	; (80127dc <tcp_receive+0xb04>)
 80126a2:	881b      	ldrh	r3, [r3, #0]
 80126a4:	1ad3      	subs	r3, r2, r3
 80126a6:	b29a      	uxth	r2, r3
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f7fc feb5 	bl	800f41c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80126b2:	4b4c      	ldr	r3, [pc, #304]	; (80127e4 <tcp_receive+0xb0c>)
 80126b4:	685b      	ldr	r3, [r3, #4]
 80126b6:	891b      	ldrh	r3, [r3, #8]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d006      	beq.n	80126ca <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80126bc:	4b49      	ldr	r3, [pc, #292]	; (80127e4 <tcp_receive+0xb0c>)
 80126be:	685b      	ldr	r3, [r3, #4]
 80126c0:	4a4d      	ldr	r2, [pc, #308]	; (80127f8 <tcp_receive+0xb20>)
 80126c2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80126c4:	4b47      	ldr	r3, [pc, #284]	; (80127e4 <tcp_receive+0xb0c>)
 80126c6:	2200      	movs	r2, #0
 80126c8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80126ca:	4b46      	ldr	r3, [pc, #280]	; (80127e4 <tcp_receive+0xb0c>)
 80126cc:	68db      	ldr	r3, [r3, #12]
 80126ce:	899b      	ldrh	r3, [r3, #12]
 80126d0:	b29b      	uxth	r3, r3
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7fa fcb6 	bl	800d044 <lwip_htons>
 80126d8:	4603      	mov	r3, r0
 80126da:	b2db      	uxtb	r3, r3
 80126dc:	f003 0301 	and.w	r3, r3, #1
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	f000 80b8 	beq.w	8012856 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80126e6:	4b45      	ldr	r3, [pc, #276]	; (80127fc <tcp_receive+0xb24>)
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	f043 0320 	orr.w	r3, r3, #32
 80126ee:	b2da      	uxtb	r2, r3
 80126f0:	4b42      	ldr	r3, [pc, #264]	; (80127fc <tcp_receive+0xb24>)
 80126f2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80126f4:	e0af      	b.n	8012856 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126fa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	4a36      	ldr	r2, [pc, #216]	; (80127e0 <tcp_receive+0xb08>)
 8012706:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012708:	68bb      	ldr	r3, [r7, #8]
 801270a:	891b      	ldrh	r3, [r3, #8]
 801270c:	461c      	mov	r4, r3
 801270e:	68bb      	ldr	r3, [r7, #8]
 8012710:	68db      	ldr	r3, [r3, #12]
 8012712:	899b      	ldrh	r3, [r3, #12]
 8012714:	b29b      	uxth	r3, r3
 8012716:	4618      	mov	r0, r3
 8012718:	f7fa fc94 	bl	800d044 <lwip_htons>
 801271c:	4603      	mov	r3, r0
 801271e:	b2db      	uxtb	r3, r3
 8012720:	f003 0303 	and.w	r3, r3, #3
 8012724:	2b00      	cmp	r3, #0
 8012726:	d001      	beq.n	801272c <tcp_receive+0xa54>
 8012728:	2301      	movs	r3, #1
 801272a:	e000      	b.n	801272e <tcp_receive+0xa56>
 801272c:	2300      	movs	r3, #0
 801272e:	191a      	adds	r2, r3, r4
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012734:	441a      	add	r2, r3
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801273e:	461c      	mov	r4, r3
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	891b      	ldrh	r3, [r3, #8]
 8012744:	461d      	mov	r5, r3
 8012746:	68bb      	ldr	r3, [r7, #8]
 8012748:	68db      	ldr	r3, [r3, #12]
 801274a:	899b      	ldrh	r3, [r3, #12]
 801274c:	b29b      	uxth	r3, r3
 801274e:	4618      	mov	r0, r3
 8012750:	f7fa fc78 	bl	800d044 <lwip_htons>
 8012754:	4603      	mov	r3, r0
 8012756:	b2db      	uxtb	r3, r3
 8012758:	f003 0303 	and.w	r3, r3, #3
 801275c:	2b00      	cmp	r3, #0
 801275e:	d001      	beq.n	8012764 <tcp_receive+0xa8c>
 8012760:	2301      	movs	r3, #1
 8012762:	e000      	b.n	8012766 <tcp_receive+0xa8e>
 8012764:	2300      	movs	r3, #0
 8012766:	442b      	add	r3, r5
 8012768:	429c      	cmp	r4, r3
 801276a:	d206      	bcs.n	801277a <tcp_receive+0xaa2>
 801276c:	4b1e      	ldr	r3, [pc, #120]	; (80127e8 <tcp_receive+0xb10>)
 801276e:	f240 622b 	movw	r2, #1579	; 0x62b
 8012772:	4923      	ldr	r1, [pc, #140]	; (8012800 <tcp_receive+0xb28>)
 8012774:	481e      	ldr	r0, [pc, #120]	; (80127f0 <tcp_receive+0xb18>)
 8012776:	f005 ff1f 	bl	80185b8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	891b      	ldrh	r3, [r3, #8]
 801277e:	461c      	mov	r4, r3
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	68db      	ldr	r3, [r3, #12]
 8012784:	899b      	ldrh	r3, [r3, #12]
 8012786:	b29b      	uxth	r3, r3
 8012788:	4618      	mov	r0, r3
 801278a:	f7fa fc5b 	bl	800d044 <lwip_htons>
 801278e:	4603      	mov	r3, r0
 8012790:	b2db      	uxtb	r3, r3
 8012792:	f003 0303 	and.w	r3, r3, #3
 8012796:	2b00      	cmp	r3, #0
 8012798:	d001      	beq.n	801279e <tcp_receive+0xac6>
 801279a:	2301      	movs	r3, #1
 801279c:	e000      	b.n	80127a0 <tcp_receive+0xac8>
 801279e:	2300      	movs	r3, #0
 80127a0:	1919      	adds	r1, r3, r4
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80127a6:	b28b      	uxth	r3, r1
 80127a8:	1ad3      	subs	r3, r2, r3
 80127aa:	b29a      	uxth	r2, r3
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f7fc fe33 	bl	800f41c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	891b      	ldrh	r3, [r3, #8]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d028      	beq.n	8012812 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80127c0:	4b0d      	ldr	r3, [pc, #52]	; (80127f8 <tcp_receive+0xb20>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d01d      	beq.n	8012804 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80127c8:	4b0b      	ldr	r3, [pc, #44]	; (80127f8 <tcp_receive+0xb20>)
 80127ca:	681a      	ldr	r2, [r3, #0]
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	685b      	ldr	r3, [r3, #4]
 80127d0:	4619      	mov	r1, r3
 80127d2:	4610      	mov	r0, r2
 80127d4:	f7fc f84c 	bl	800e870 <pbuf_cat>
 80127d8:	e018      	b.n	801280c <tcp_receive+0xb34>
 80127da:	bf00      	nop
 80127dc:	200069be 	.word	0x200069be
 80127e0:	200069b4 	.word	0x200069b4
 80127e4:	20006994 	.word	0x20006994
 80127e8:	0801b548 	.word	0x0801b548
 80127ec:	0801b928 	.word	0x0801b928
 80127f0:	0801b594 	.word	0x0801b594
 80127f4:	0801b964 	.word	0x0801b964
 80127f8:	200069c4 	.word	0x200069c4
 80127fc:	200069c1 	.word	0x200069c1
 8012800:	0801b984 	.word	0x0801b984
            } else {
              recv_data = cseg->p;
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	4a70      	ldr	r2, [pc, #448]	; (80129cc <tcp_receive+0xcf4>)
 801280a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	2200      	movs	r2, #0
 8012810:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	68db      	ldr	r3, [r3, #12]
 8012816:	899b      	ldrh	r3, [r3, #12]
 8012818:	b29b      	uxth	r3, r3
 801281a:	4618      	mov	r0, r3
 801281c:	f7fa fc12 	bl	800d044 <lwip_htons>
 8012820:	4603      	mov	r3, r0
 8012822:	b2db      	uxtb	r3, r3
 8012824:	f003 0301 	and.w	r3, r3, #1
 8012828:	2b00      	cmp	r3, #0
 801282a:	d00d      	beq.n	8012848 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801282c:	4b68      	ldr	r3, [pc, #416]	; (80129d0 <tcp_receive+0xcf8>)
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	f043 0320 	orr.w	r3, r3, #32
 8012834:	b2da      	uxtb	r2, r3
 8012836:	4b66      	ldr	r3, [pc, #408]	; (80129d0 <tcp_receive+0xcf8>)
 8012838:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	7d1b      	ldrb	r3, [r3, #20]
 801283e:	2b04      	cmp	r3, #4
 8012840:	d102      	bne.n	8012848 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2207      	movs	r2, #7
 8012846:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	681a      	ldr	r2, [r3, #0]
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012850:	68b8      	ldr	r0, [r7, #8]
 8012852:	f7fd fb08 	bl	800fe66 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801285a:	2b00      	cmp	r3, #0
 801285c:	d008      	beq.n	8012870 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012862:	68db      	ldr	r3, [r3, #12]
 8012864:	685a      	ldr	r2, [r3, #4]
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801286a:	429a      	cmp	r2, r3
 801286c:	f43f af43 	beq.w	80126f6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	8b5b      	ldrh	r3, [r3, #26]
 8012874:	f003 0301 	and.w	r3, r3, #1
 8012878:	2b00      	cmp	r3, #0
 801287a:	d00e      	beq.n	801289a <tcp_receive+0xbc2>
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	8b5b      	ldrh	r3, [r3, #26]
 8012880:	f023 0301 	bic.w	r3, r3, #1
 8012884:	b29a      	uxth	r2, r3
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	835a      	strh	r2, [r3, #26]
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	8b5b      	ldrh	r3, [r3, #26]
 801288e:	f043 0302 	orr.w	r3, r3, #2
 8012892:	b29a      	uxth	r2, r3
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012898:	e188      	b.n	8012bac <tcp_receive+0xed4>
        tcp_ack(pcb);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	8b5b      	ldrh	r3, [r3, #26]
 801289e:	f043 0301 	orr.w	r3, r3, #1
 80128a2:	b29a      	uxth	r2, r3
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80128a8:	e180      	b.n	8012bac <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d106      	bne.n	80128c0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80128b2:	4848      	ldr	r0, [pc, #288]	; (80129d4 <tcp_receive+0xcfc>)
 80128b4:	f7fd faf0 	bl	800fe98 <tcp_seg_copy>
 80128b8:	4602      	mov	r2, r0
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	675a      	str	r2, [r3, #116]	; 0x74
 80128be:	e16d      	b.n	8012b9c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80128c0:	2300      	movs	r3, #0
 80128c2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80128ca:	e157      	b.n	8012b7c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80128cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ce:	68db      	ldr	r3, [r3, #12]
 80128d0:	685a      	ldr	r2, [r3, #4]
 80128d2:	4b41      	ldr	r3, [pc, #260]	; (80129d8 <tcp_receive+0xd00>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d11d      	bne.n	8012916 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80128da:	4b3e      	ldr	r3, [pc, #248]	; (80129d4 <tcp_receive+0xcfc>)
 80128dc:	891a      	ldrh	r2, [r3, #8]
 80128de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e0:	891b      	ldrh	r3, [r3, #8]
 80128e2:	429a      	cmp	r2, r3
 80128e4:	f240 814f 	bls.w	8012b86 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80128e8:	483a      	ldr	r0, [pc, #232]	; (80129d4 <tcp_receive+0xcfc>)
 80128ea:	f7fd fad5 	bl	800fe98 <tcp_seg_copy>
 80128ee:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	f000 8149 	beq.w	8012b8a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80128f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d003      	beq.n	8012906 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80128fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012900:	697a      	ldr	r2, [r7, #20]
 8012902:	601a      	str	r2, [r3, #0]
 8012904:	e002      	b.n	801290c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	697a      	ldr	r2, [r7, #20]
 801290a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801290c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801290e:	6978      	ldr	r0, [r7, #20]
 8012910:	f7ff f8de 	bl	8011ad0 <tcp_oos_insert_segment>
                }
                break;
 8012914:	e139      	b.n	8012b8a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012918:	2b00      	cmp	r3, #0
 801291a:	d117      	bne.n	801294c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801291c:	4b2e      	ldr	r3, [pc, #184]	; (80129d8 <tcp_receive+0xd00>)
 801291e:	681a      	ldr	r2, [r3, #0]
 8012920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012922:	68db      	ldr	r3, [r3, #12]
 8012924:	685b      	ldr	r3, [r3, #4]
 8012926:	1ad3      	subs	r3, r2, r3
 8012928:	2b00      	cmp	r3, #0
 801292a:	da57      	bge.n	80129dc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801292c:	4829      	ldr	r0, [pc, #164]	; (80129d4 <tcp_receive+0xcfc>)
 801292e:	f7fd fab3 	bl	800fe98 <tcp_seg_copy>
 8012932:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012934:	69bb      	ldr	r3, [r7, #24]
 8012936:	2b00      	cmp	r3, #0
 8012938:	f000 8129 	beq.w	8012b8e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	69ba      	ldr	r2, [r7, #24]
 8012940:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012942:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012944:	69b8      	ldr	r0, [r7, #24]
 8012946:	f7ff f8c3 	bl	8011ad0 <tcp_oos_insert_segment>
                  }
                  break;
 801294a:	e120      	b.n	8012b8e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801294c:	4b22      	ldr	r3, [pc, #136]	; (80129d8 <tcp_receive+0xd00>)
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012952:	68db      	ldr	r3, [r3, #12]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	1ad3      	subs	r3, r2, r3
 8012958:	3b01      	subs	r3, #1
 801295a:	2b00      	cmp	r3, #0
 801295c:	db3e      	blt.n	80129dc <tcp_receive+0xd04>
 801295e:	4b1e      	ldr	r3, [pc, #120]	; (80129d8 <tcp_receive+0xd00>)
 8012960:	681a      	ldr	r2, [r3, #0]
 8012962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012964:	68db      	ldr	r3, [r3, #12]
 8012966:	685b      	ldr	r3, [r3, #4]
 8012968:	1ad3      	subs	r3, r2, r3
 801296a:	3301      	adds	r3, #1
 801296c:	2b00      	cmp	r3, #0
 801296e:	dc35      	bgt.n	80129dc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012970:	4818      	ldr	r0, [pc, #96]	; (80129d4 <tcp_receive+0xcfc>)
 8012972:	f7fd fa91 	bl	800fe98 <tcp_seg_copy>
 8012976:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	2b00      	cmp	r3, #0
 801297c:	f000 8109 	beq.w	8012b92 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012982:	68db      	ldr	r3, [r3, #12]
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012988:	8912      	ldrh	r2, [r2, #8]
 801298a:	441a      	add	r2, r3
 801298c:	4b12      	ldr	r3, [pc, #72]	; (80129d8 <tcp_receive+0xd00>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	1ad3      	subs	r3, r2, r3
 8012992:	2b00      	cmp	r3, #0
 8012994:	dd12      	ble.n	80129bc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012996:	4b10      	ldr	r3, [pc, #64]	; (80129d8 <tcp_receive+0xd00>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	b29a      	uxth	r2, r3
 801299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801299e:	68db      	ldr	r3, [r3, #12]
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	1ad3      	subs	r3, r2, r3
 80129a6:	b29a      	uxth	r2, r3
 80129a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129aa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80129ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129ae:	685a      	ldr	r2, [r3, #4]
 80129b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129b2:	891b      	ldrh	r3, [r3, #8]
 80129b4:	4619      	mov	r1, r3
 80129b6:	4610      	mov	r0, r2
 80129b8:	f7fb fd06 	bl	800e3c8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80129bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129be:	69fa      	ldr	r2, [r7, #28]
 80129c0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80129c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80129c4:	69f8      	ldr	r0, [r7, #28]
 80129c6:	f7ff f883 	bl	8011ad0 <tcp_oos_insert_segment>
                  }
                  break;
 80129ca:	e0e2      	b.n	8012b92 <tcp_receive+0xeba>
 80129cc:	200069c4 	.word	0x200069c4
 80129d0:	200069c1 	.word	0x200069c1
 80129d4:	20006994 	.word	0x20006994
 80129d8:	200069b4 	.word	0x200069b4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80129dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129de:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80129e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f040 80c6 	bne.w	8012b76 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80129ea:	4b80      	ldr	r3, [pc, #512]	; (8012bec <tcp_receive+0xf14>)
 80129ec:	681a      	ldr	r2, [r3, #0]
 80129ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f0:	68db      	ldr	r3, [r3, #12]
 80129f2:	685b      	ldr	r3, [r3, #4]
 80129f4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	f340 80bd 	ble.w	8012b76 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80129fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129fe:	68db      	ldr	r3, [r3, #12]
 8012a00:	899b      	ldrh	r3, [r3, #12]
 8012a02:	b29b      	uxth	r3, r3
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7fa fb1d 	bl	800d044 <lwip_htons>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	b2db      	uxtb	r3, r3
 8012a0e:	f003 0301 	and.w	r3, r3, #1
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	f040 80bf 	bne.w	8012b96 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012a18:	4875      	ldr	r0, [pc, #468]	; (8012bf0 <tcp_receive+0xf18>)
 8012a1a:	f7fd fa3d 	bl	800fe98 <tcp_seg_copy>
 8012a1e:	4602      	mov	r2, r0
 8012a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a22:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	f000 80b6 	beq.w	8012b9a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a30:	68db      	ldr	r3, [r3, #12]
 8012a32:	685b      	ldr	r3, [r3, #4]
 8012a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a36:	8912      	ldrh	r2, [r2, #8]
 8012a38:	441a      	add	r2, r3
 8012a3a:	4b6c      	ldr	r3, [pc, #432]	; (8012bec <tcp_receive+0xf14>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	1ad3      	subs	r3, r2, r3
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	dd12      	ble.n	8012a6a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012a44:	4b69      	ldr	r3, [pc, #420]	; (8012bec <tcp_receive+0xf14>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	b29a      	uxth	r2, r3
 8012a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a4c:	68db      	ldr	r3, [r3, #12]
 8012a4e:	685b      	ldr	r3, [r3, #4]
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	1ad3      	subs	r3, r2, r3
 8012a54:	b29a      	uxth	r2, r3
 8012a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a58:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a5c:	685a      	ldr	r2, [r3, #4]
 8012a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a60:	891b      	ldrh	r3, [r3, #8]
 8012a62:	4619      	mov	r1, r3
 8012a64:	4610      	mov	r0, r2
 8012a66:	f7fb fcaf 	bl	800e3c8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012a6a:	4b62      	ldr	r3, [pc, #392]	; (8012bf4 <tcp_receive+0xf1c>)
 8012a6c:	881b      	ldrh	r3, [r3, #0]
 8012a6e:	461a      	mov	r2, r3
 8012a70:	4b5e      	ldr	r3, [pc, #376]	; (8012bec <tcp_receive+0xf14>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	441a      	add	r2, r3
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a7a:	6879      	ldr	r1, [r7, #4]
 8012a7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012a7e:	440b      	add	r3, r1
 8012a80:	1ad3      	subs	r3, r2, r3
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	f340 8089 	ble.w	8012b9a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	68db      	ldr	r3, [r3, #12]
 8012a8e:	899b      	ldrh	r3, [r3, #12]
 8012a90:	b29b      	uxth	r3, r3
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7fa fad6 	bl	800d044 <lwip_htons>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	f003 0301 	and.w	r3, r3, #1
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d022      	beq.n	8012aea <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	68db      	ldr	r3, [r3, #12]
 8012aaa:	899b      	ldrh	r3, [r3, #12]
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	b21b      	sxth	r3, r3
 8012ab0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012ab4:	b21c      	sxth	r4, r3
 8012ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	68db      	ldr	r3, [r3, #12]
 8012abc:	899b      	ldrh	r3, [r3, #12]
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7fa fabf 	bl	800d044 <lwip_htons>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	b29b      	uxth	r3, r3
 8012acc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012ad0:	b29b      	uxth	r3, r3
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7fa fab6 	bl	800d044 <lwip_htons>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	b21b      	sxth	r3, r3
 8012adc:	4323      	orrs	r3, r4
 8012ade:	b21a      	sxth	r2, r3
 8012ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	68db      	ldr	r3, [r3, #12]
 8012ae6:	b292      	uxth	r2, r2
 8012ae8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aee:	b29a      	uxth	r2, r3
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012af4:	4413      	add	r3, r2
 8012af6:	b299      	uxth	r1, r3
 8012af8:	4b3c      	ldr	r3, [pc, #240]	; (8012bec <tcp_receive+0xf14>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	b29a      	uxth	r2, r3
 8012afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	1a8a      	subs	r2, r1, r2
 8012b04:	b292      	uxth	r2, r2
 8012b06:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	685a      	ldr	r2, [r3, #4]
 8012b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	891b      	ldrh	r3, [r3, #8]
 8012b14:	4619      	mov	r1, r3
 8012b16:	4610      	mov	r0, r2
 8012b18:	f7fb fc56 	bl	800e3c8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	891c      	ldrh	r4, [r3, #8]
 8012b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	68db      	ldr	r3, [r3, #12]
 8012b28:	899b      	ldrh	r3, [r3, #12]
 8012b2a:	b29b      	uxth	r3, r3
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7fa fa89 	bl	800d044 <lwip_htons>
 8012b32:	4603      	mov	r3, r0
 8012b34:	b2db      	uxtb	r3, r3
 8012b36:	f003 0303 	and.w	r3, r3, #3
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d001      	beq.n	8012b42 <tcp_receive+0xe6a>
 8012b3e:	2301      	movs	r3, #1
 8012b40:	e000      	b.n	8012b44 <tcp_receive+0xe6c>
 8012b42:	2300      	movs	r3, #0
 8012b44:	4423      	add	r3, r4
 8012b46:	b29a      	uxth	r2, r3
 8012b48:	4b2a      	ldr	r3, [pc, #168]	; (8012bf4 <tcp_receive+0xf1c>)
 8012b4a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012b4c:	4b29      	ldr	r3, [pc, #164]	; (8012bf4 <tcp_receive+0xf1c>)
 8012b4e:	881b      	ldrh	r3, [r3, #0]
 8012b50:	461a      	mov	r2, r3
 8012b52:	4b26      	ldr	r3, [pc, #152]	; (8012bec <tcp_receive+0xf14>)
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	441a      	add	r2, r3
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b5c:	6879      	ldr	r1, [r7, #4]
 8012b5e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b60:	440b      	add	r3, r1
 8012b62:	429a      	cmp	r2, r3
 8012b64:	d019      	beq.n	8012b9a <tcp_receive+0xec2>
 8012b66:	4b24      	ldr	r3, [pc, #144]	; (8012bf8 <tcp_receive+0xf20>)
 8012b68:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012b6c:	4923      	ldr	r1, [pc, #140]	; (8012bfc <tcp_receive+0xf24>)
 8012b6e:	4824      	ldr	r0, [pc, #144]	; (8012c00 <tcp_receive+0xf28>)
 8012b70:	f005 fd22 	bl	80185b8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012b74:	e011      	b.n	8012b9a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	f47f aea4 	bne.w	80128cc <tcp_receive+0xbf4>
 8012b84:	e00a      	b.n	8012b9c <tcp_receive+0xec4>
                break;
 8012b86:	bf00      	nop
 8012b88:	e008      	b.n	8012b9c <tcp_receive+0xec4>
                break;
 8012b8a:	bf00      	nop
 8012b8c:	e006      	b.n	8012b9c <tcp_receive+0xec4>
                  break;
 8012b8e:	bf00      	nop
 8012b90:	e004      	b.n	8012b9c <tcp_receive+0xec4>
                  break;
 8012b92:	bf00      	nop
 8012b94:	e002      	b.n	8012b9c <tcp_receive+0xec4>
                  break;
 8012b96:	bf00      	nop
 8012b98:	e000      	b.n	8012b9c <tcp_receive+0xec4>
                break;
 8012b9a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f001 fe8b 	bl	80148b8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012ba2:	e003      	b.n	8012bac <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f001 fe87 	bl	80148b8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012baa:	e01a      	b.n	8012be2 <tcp_receive+0xf0a>
 8012bac:	e019      	b.n	8012be2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012bae:	4b0f      	ldr	r3, [pc, #60]	; (8012bec <tcp_receive+0xf14>)
 8012bb0:	681a      	ldr	r2, [r3, #0]
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bb6:	1ad3      	subs	r3, r2, r3
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	db0a      	blt.n	8012bd2 <tcp_receive+0xefa>
 8012bbc:	4b0b      	ldr	r3, [pc, #44]	; (8012bec <tcp_receive+0xf14>)
 8012bbe:	681a      	ldr	r2, [r3, #0]
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bc4:	6879      	ldr	r1, [r7, #4]
 8012bc6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012bc8:	440b      	add	r3, r1
 8012bca:	1ad3      	subs	r3, r2, r3
 8012bcc:	3301      	adds	r3, #1
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	dd07      	ble.n	8012be2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	8b5b      	ldrh	r3, [r3, #26]
 8012bd6:	f043 0302 	orr.w	r3, r3, #2
 8012bda:	b29a      	uxth	r2, r3
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012be0:	e7ff      	b.n	8012be2 <tcp_receive+0xf0a>
 8012be2:	bf00      	nop
 8012be4:	3750      	adds	r7, #80	; 0x50
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bdb0      	pop	{r4, r5, r7, pc}
 8012bea:	bf00      	nop
 8012bec:	200069b4 	.word	0x200069b4
 8012bf0:	20006994 	.word	0x20006994
 8012bf4:	200069be 	.word	0x200069be
 8012bf8:	0801b548 	.word	0x0801b548
 8012bfc:	0801b8f0 	.word	0x0801b8f0
 8012c00:	0801b594 	.word	0x0801b594

08012c04 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012c04:	b480      	push	{r7}
 8012c06:	b083      	sub	sp, #12
 8012c08:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012c0a:	4b15      	ldr	r3, [pc, #84]	; (8012c60 <tcp_get_next_optbyte+0x5c>)
 8012c0c:	881b      	ldrh	r3, [r3, #0]
 8012c0e:	1c5a      	adds	r2, r3, #1
 8012c10:	b291      	uxth	r1, r2
 8012c12:	4a13      	ldr	r2, [pc, #76]	; (8012c60 <tcp_get_next_optbyte+0x5c>)
 8012c14:	8011      	strh	r1, [r2, #0]
 8012c16:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012c18:	4b12      	ldr	r3, [pc, #72]	; (8012c64 <tcp_get_next_optbyte+0x60>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d004      	beq.n	8012c2a <tcp_get_next_optbyte+0x26>
 8012c20:	4b11      	ldr	r3, [pc, #68]	; (8012c68 <tcp_get_next_optbyte+0x64>)
 8012c22:	881b      	ldrh	r3, [r3, #0]
 8012c24:	88fa      	ldrh	r2, [r7, #6]
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d208      	bcs.n	8012c3c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012c2a:	4b10      	ldr	r3, [pc, #64]	; (8012c6c <tcp_get_next_optbyte+0x68>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	3314      	adds	r3, #20
 8012c30:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012c32:	88fb      	ldrh	r3, [r7, #6]
 8012c34:	683a      	ldr	r2, [r7, #0]
 8012c36:	4413      	add	r3, r2
 8012c38:	781b      	ldrb	r3, [r3, #0]
 8012c3a:	e00b      	b.n	8012c54 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012c3c:	88fb      	ldrh	r3, [r7, #6]
 8012c3e:	b2da      	uxtb	r2, r3
 8012c40:	4b09      	ldr	r3, [pc, #36]	; (8012c68 <tcp_get_next_optbyte+0x64>)
 8012c42:	881b      	ldrh	r3, [r3, #0]
 8012c44:	b2db      	uxtb	r3, r3
 8012c46:	1ad3      	subs	r3, r2, r3
 8012c48:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012c4a:	4b06      	ldr	r3, [pc, #24]	; (8012c64 <tcp_get_next_optbyte+0x60>)
 8012c4c:	681a      	ldr	r2, [r3, #0]
 8012c4e:	797b      	ldrb	r3, [r7, #5]
 8012c50:	4413      	add	r3, r2
 8012c52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	370c      	adds	r7, #12
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5e:	4770      	bx	lr
 8012c60:	200069b0 	.word	0x200069b0
 8012c64:	200069ac 	.word	0x200069ac
 8012c68:	200069aa 	.word	0x200069aa
 8012c6c:	200069a4 	.word	0x200069a4

08012c70 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b084      	sub	sp, #16
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d106      	bne.n	8012c8c <tcp_parseopt+0x1c>
 8012c7e:	4b32      	ldr	r3, [pc, #200]	; (8012d48 <tcp_parseopt+0xd8>)
 8012c80:	f240 727d 	movw	r2, #1917	; 0x77d
 8012c84:	4931      	ldr	r1, [pc, #196]	; (8012d4c <tcp_parseopt+0xdc>)
 8012c86:	4832      	ldr	r0, [pc, #200]	; (8012d50 <tcp_parseopt+0xe0>)
 8012c88:	f005 fc96 	bl	80185b8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012c8c:	4b31      	ldr	r3, [pc, #196]	; (8012d54 <tcp_parseopt+0xe4>)
 8012c8e:	881b      	ldrh	r3, [r3, #0]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d055      	beq.n	8012d40 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012c94:	4b30      	ldr	r3, [pc, #192]	; (8012d58 <tcp_parseopt+0xe8>)
 8012c96:	2200      	movs	r2, #0
 8012c98:	801a      	strh	r2, [r3, #0]
 8012c9a:	e045      	b.n	8012d28 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012c9c:	f7ff ffb2 	bl	8012c04 <tcp_get_next_optbyte>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012ca4:	7bfb      	ldrb	r3, [r7, #15]
 8012ca6:	2b02      	cmp	r3, #2
 8012ca8:	d006      	beq.n	8012cb8 <tcp_parseopt+0x48>
 8012caa:	2b02      	cmp	r3, #2
 8012cac:	dc2b      	bgt.n	8012d06 <tcp_parseopt+0x96>
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d041      	beq.n	8012d36 <tcp_parseopt+0xc6>
 8012cb2:	2b01      	cmp	r3, #1
 8012cb4:	d127      	bne.n	8012d06 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012cb6:	e037      	b.n	8012d28 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012cb8:	f7ff ffa4 	bl	8012c04 <tcp_get_next_optbyte>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	2b04      	cmp	r3, #4
 8012cc0:	d13b      	bne.n	8012d3a <tcp_parseopt+0xca>
 8012cc2:	4b25      	ldr	r3, [pc, #148]	; (8012d58 <tcp_parseopt+0xe8>)
 8012cc4:	881b      	ldrh	r3, [r3, #0]
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	4a22      	ldr	r2, [pc, #136]	; (8012d54 <tcp_parseopt+0xe4>)
 8012cca:	8812      	ldrh	r2, [r2, #0]
 8012ccc:	4293      	cmp	r3, r2
 8012cce:	da34      	bge.n	8012d3a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012cd0:	f7ff ff98 	bl	8012c04 <tcp_get_next_optbyte>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	b29b      	uxth	r3, r3
 8012cd8:	021b      	lsls	r3, r3, #8
 8012cda:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012cdc:	f7ff ff92 	bl	8012c04 <tcp_get_next_optbyte>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	b29a      	uxth	r2, r3
 8012ce4:	89bb      	ldrh	r3, [r7, #12]
 8012ce6:	4313      	orrs	r3, r2
 8012ce8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012cea:	89bb      	ldrh	r3, [r7, #12]
 8012cec:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012cf0:	d804      	bhi.n	8012cfc <tcp_parseopt+0x8c>
 8012cf2:	89bb      	ldrh	r3, [r7, #12]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d001      	beq.n	8012cfc <tcp_parseopt+0x8c>
 8012cf8:	89ba      	ldrh	r2, [r7, #12]
 8012cfa:	e001      	b.n	8012d00 <tcp_parseopt+0x90>
 8012cfc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012d04:	e010      	b.n	8012d28 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012d06:	f7ff ff7d 	bl	8012c04 <tcp_get_next_optbyte>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012d0e:	7afb      	ldrb	r3, [r7, #11]
 8012d10:	2b01      	cmp	r3, #1
 8012d12:	d914      	bls.n	8012d3e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012d14:	7afb      	ldrb	r3, [r7, #11]
 8012d16:	b29a      	uxth	r2, r3
 8012d18:	4b0f      	ldr	r3, [pc, #60]	; (8012d58 <tcp_parseopt+0xe8>)
 8012d1a:	881b      	ldrh	r3, [r3, #0]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	b29b      	uxth	r3, r3
 8012d20:	3b02      	subs	r3, #2
 8012d22:	b29a      	uxth	r2, r3
 8012d24:	4b0c      	ldr	r3, [pc, #48]	; (8012d58 <tcp_parseopt+0xe8>)
 8012d26:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012d28:	4b0b      	ldr	r3, [pc, #44]	; (8012d58 <tcp_parseopt+0xe8>)
 8012d2a:	881a      	ldrh	r2, [r3, #0]
 8012d2c:	4b09      	ldr	r3, [pc, #36]	; (8012d54 <tcp_parseopt+0xe4>)
 8012d2e:	881b      	ldrh	r3, [r3, #0]
 8012d30:	429a      	cmp	r2, r3
 8012d32:	d3b3      	bcc.n	8012c9c <tcp_parseopt+0x2c>
 8012d34:	e004      	b.n	8012d40 <tcp_parseopt+0xd0>
          return;
 8012d36:	bf00      	nop
 8012d38:	e002      	b.n	8012d40 <tcp_parseopt+0xd0>
            return;
 8012d3a:	bf00      	nop
 8012d3c:	e000      	b.n	8012d40 <tcp_parseopt+0xd0>
            return;
 8012d3e:	bf00      	nop
      }
    }
  }
}
 8012d40:	3710      	adds	r7, #16
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	0801b548 	.word	0x0801b548
 8012d4c:	0801b9ac 	.word	0x0801b9ac
 8012d50:	0801b594 	.word	0x0801b594
 8012d54:	200069a8 	.word	0x200069a8
 8012d58:	200069b0 	.word	0x200069b0

08012d5c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012d60:	4b05      	ldr	r3, [pc, #20]	; (8012d78 <tcp_trigger_input_pcb_close+0x1c>)
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	f043 0310 	orr.w	r3, r3, #16
 8012d68:	b2da      	uxtb	r2, r3
 8012d6a:	4b03      	ldr	r3, [pc, #12]	; (8012d78 <tcp_trigger_input_pcb_close+0x1c>)
 8012d6c:	701a      	strb	r2, [r3, #0]
}
 8012d6e:	bf00      	nop
 8012d70:	46bd      	mov	sp, r7
 8012d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d76:	4770      	bx	lr
 8012d78:	200069c1 	.word	0x200069c1

08012d7c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b084      	sub	sp, #16
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	60f8      	str	r0, [r7, #12]
 8012d84:	60b9      	str	r1, [r7, #8]
 8012d86:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d00a      	beq.n	8012da4 <tcp_route+0x28>
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	7a1b      	ldrb	r3, [r3, #8]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d006      	beq.n	8012da4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	7a1b      	ldrb	r3, [r3, #8]
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7fb f90c 	bl	800dfb8 <netif_get_by_index>
 8012da0:	4603      	mov	r3, r0
 8012da2:	e003      	b.n	8012dac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f003 fe35 	bl	8016a14 <ip4_route>
 8012daa:	4603      	mov	r3, r0
  }
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3710      	adds	r7, #16
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}

08012db4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012db4:	b590      	push	{r4, r7, lr}
 8012db6:	b087      	sub	sp, #28
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	60f8      	str	r0, [r7, #12]
 8012dbc:	60b9      	str	r1, [r7, #8]
 8012dbe:	603b      	str	r3, [r7, #0]
 8012dc0:	4613      	mov	r3, r2
 8012dc2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d105      	bne.n	8012dd6 <tcp_create_segment+0x22>
 8012dca:	4b44      	ldr	r3, [pc, #272]	; (8012edc <tcp_create_segment+0x128>)
 8012dcc:	22a3      	movs	r2, #163	; 0xa3
 8012dce:	4944      	ldr	r1, [pc, #272]	; (8012ee0 <tcp_create_segment+0x12c>)
 8012dd0:	4844      	ldr	r0, [pc, #272]	; (8012ee4 <tcp_create_segment+0x130>)
 8012dd2:	f005 fbf1 	bl	80185b8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d105      	bne.n	8012de8 <tcp_create_segment+0x34>
 8012ddc:	4b3f      	ldr	r3, [pc, #252]	; (8012edc <tcp_create_segment+0x128>)
 8012dde:	22a4      	movs	r2, #164	; 0xa4
 8012de0:	4941      	ldr	r1, [pc, #260]	; (8012ee8 <tcp_create_segment+0x134>)
 8012de2:	4840      	ldr	r0, [pc, #256]	; (8012ee4 <tcp_create_segment+0x130>)
 8012de4:	f005 fbe8 	bl	80185b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012de8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012dec:	009b      	lsls	r3, r3, #2
 8012dee:	b2db      	uxtb	r3, r3
 8012df0:	f003 0304 	and.w	r3, r3, #4
 8012df4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012df6:	2003      	movs	r0, #3
 8012df8:	f7fa fdda 	bl	800d9b0 <memp_malloc>
 8012dfc:	6138      	str	r0, [r7, #16]
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d104      	bne.n	8012e0e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012e04:	68b8      	ldr	r0, [r7, #8]
 8012e06:	f7fb fc65 	bl	800e6d4 <pbuf_free>
    return NULL;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	e061      	b.n	8012ed2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012e14:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012e16:	693b      	ldr	r3, [r7, #16]
 8012e18:	2200      	movs	r2, #0
 8012e1a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012e1c:	693b      	ldr	r3, [r7, #16]
 8012e1e:	68ba      	ldr	r2, [r7, #8]
 8012e20:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012e22:	68bb      	ldr	r3, [r7, #8]
 8012e24:	891a      	ldrh	r2, [r3, #8]
 8012e26:	7dfb      	ldrb	r3, [r7, #23]
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d205      	bcs.n	8012e3a <tcp_create_segment+0x86>
 8012e2e:	4b2b      	ldr	r3, [pc, #172]	; (8012edc <tcp_create_segment+0x128>)
 8012e30:	22b0      	movs	r2, #176	; 0xb0
 8012e32:	492e      	ldr	r1, [pc, #184]	; (8012eec <tcp_create_segment+0x138>)
 8012e34:	482b      	ldr	r0, [pc, #172]	; (8012ee4 <tcp_create_segment+0x130>)
 8012e36:	f005 fbbf 	bl	80185b8 <iprintf>
  seg->len = p->tot_len - optlen;
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	891a      	ldrh	r2, [r3, #8]
 8012e3e:	7dfb      	ldrb	r3, [r7, #23]
 8012e40:	b29b      	uxth	r3, r3
 8012e42:	1ad3      	subs	r3, r2, r3
 8012e44:	b29a      	uxth	r2, r3
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012e4a:	2114      	movs	r1, #20
 8012e4c:	68b8      	ldr	r0, [r7, #8]
 8012e4e:	f7fb fbab 	bl	800e5a8 <pbuf_add_header>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d004      	beq.n	8012e62 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012e58:	6938      	ldr	r0, [r7, #16]
 8012e5a:	f7fd f804 	bl	800fe66 <tcp_seg_free>
    return NULL;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	e037      	b.n	8012ed2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	685b      	ldr	r3, [r3, #4]
 8012e66:	685a      	ldr	r2, [r3, #4]
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	8ada      	ldrh	r2, [r3, #22]
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	68dc      	ldr	r4, [r3, #12]
 8012e74:	4610      	mov	r0, r2
 8012e76:	f7fa f8e5 	bl	800d044 <lwip_htons>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	8b1a      	ldrh	r2, [r3, #24]
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	68dc      	ldr	r4, [r3, #12]
 8012e86:	4610      	mov	r0, r2
 8012e88:	f7fa f8dc 	bl	800d044 <lwip_htons>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	68dc      	ldr	r4, [r3, #12]
 8012e94:	6838      	ldr	r0, [r7, #0]
 8012e96:	f7fa f8ea 	bl	800d06e <lwip_htonl>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012e9e:	7dfb      	ldrb	r3, [r7, #23]
 8012ea0:	089b      	lsrs	r3, r3, #2
 8012ea2:	b2db      	uxtb	r3, r3
 8012ea4:	b29b      	uxth	r3, r3
 8012ea6:	3305      	adds	r3, #5
 8012ea8:	b29b      	uxth	r3, r3
 8012eaa:	031b      	lsls	r3, r3, #12
 8012eac:	b29a      	uxth	r2, r3
 8012eae:	79fb      	ldrb	r3, [r7, #7]
 8012eb0:	b29b      	uxth	r3, r3
 8012eb2:	4313      	orrs	r3, r2
 8012eb4:	b29a      	uxth	r2, r3
 8012eb6:	693b      	ldr	r3, [r7, #16]
 8012eb8:	68dc      	ldr	r4, [r3, #12]
 8012eba:	4610      	mov	r0, r2
 8012ebc:	f7fa f8c2 	bl	800d044 <lwip_htons>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012ec4:	693b      	ldr	r3, [r7, #16]
 8012ec6:	68db      	ldr	r3, [r3, #12]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	749a      	strb	r2, [r3, #18]
 8012ecc:	2200      	movs	r2, #0
 8012ece:	74da      	strb	r2, [r3, #19]
  return seg;
 8012ed0:	693b      	ldr	r3, [r7, #16]
}
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	371c      	adds	r7, #28
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd90      	pop	{r4, r7, pc}
 8012eda:	bf00      	nop
 8012edc:	0801b9c8 	.word	0x0801b9c8
 8012ee0:	0801b9fc 	.word	0x0801b9fc
 8012ee4:	0801ba1c 	.word	0x0801ba1c
 8012ee8:	0801ba44 	.word	0x0801ba44
 8012eec:	0801ba68 	.word	0x0801ba68

08012ef0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b086      	sub	sp, #24
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	607b      	str	r3, [r7, #4]
 8012ef8:	4603      	mov	r3, r0
 8012efa:	73fb      	strb	r3, [r7, #15]
 8012efc:	460b      	mov	r3, r1
 8012efe:	81bb      	strh	r3, [r7, #12]
 8012f00:	4613      	mov	r3, r2
 8012f02:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012f04:	89bb      	ldrh	r3, [r7, #12]
 8012f06:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d105      	bne.n	8012f1a <tcp_pbuf_prealloc+0x2a>
 8012f0e:	4b30      	ldr	r3, [pc, #192]	; (8012fd0 <tcp_pbuf_prealloc+0xe0>)
 8012f10:	22e8      	movs	r2, #232	; 0xe8
 8012f12:	4930      	ldr	r1, [pc, #192]	; (8012fd4 <tcp_pbuf_prealloc+0xe4>)
 8012f14:	4830      	ldr	r0, [pc, #192]	; (8012fd8 <tcp_pbuf_prealloc+0xe8>)
 8012f16:	f005 fb4f 	bl	80185b8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012f1a:	6a3b      	ldr	r3, [r7, #32]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d105      	bne.n	8012f2c <tcp_pbuf_prealloc+0x3c>
 8012f20:	4b2b      	ldr	r3, [pc, #172]	; (8012fd0 <tcp_pbuf_prealloc+0xe0>)
 8012f22:	22e9      	movs	r2, #233	; 0xe9
 8012f24:	492d      	ldr	r1, [pc, #180]	; (8012fdc <tcp_pbuf_prealloc+0xec>)
 8012f26:	482c      	ldr	r0, [pc, #176]	; (8012fd8 <tcp_pbuf_prealloc+0xe8>)
 8012f28:	f005 fb46 	bl	80185b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012f2c:	89ba      	ldrh	r2, [r7, #12]
 8012f2e:	897b      	ldrh	r3, [r7, #10]
 8012f30:	429a      	cmp	r2, r3
 8012f32:	d221      	bcs.n	8012f78 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012f34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012f38:	f003 0302 	and.w	r3, r3, #2
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d111      	bne.n	8012f64 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012f40:	6a3b      	ldr	r3, [r7, #32]
 8012f42:	8b5b      	ldrh	r3, [r3, #26]
 8012f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d115      	bne.n	8012f78 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012f4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d007      	beq.n	8012f64 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012f54:	6a3b      	ldr	r3, [r7, #32]
 8012f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d103      	bne.n	8012f64 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012f5c:	6a3b      	ldr	r3, [r7, #32]
 8012f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d009      	beq.n	8012f78 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012f64:	89bb      	ldrh	r3, [r7, #12]
 8012f66:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012f6a:	f023 0203 	bic.w	r2, r3, #3
 8012f6e:	897b      	ldrh	r3, [r7, #10]
 8012f70:	4293      	cmp	r3, r2
 8012f72:	bf28      	it	cs
 8012f74:	4613      	movcs	r3, r2
 8012f76:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012f78:	8af9      	ldrh	r1, [r7, #22]
 8012f7a:	7bfb      	ldrb	r3, [r7, #15]
 8012f7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f80:	4618      	mov	r0, r3
 8012f82:	f7fb f8c3 	bl	800e10c <pbuf_alloc>
 8012f86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d101      	bne.n	8012f92 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	e019      	b.n	8012fc6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012f92:	693b      	ldr	r3, [r7, #16]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d006      	beq.n	8012fa8 <tcp_pbuf_prealloc+0xb8>
 8012f9a:	4b0d      	ldr	r3, [pc, #52]	; (8012fd0 <tcp_pbuf_prealloc+0xe0>)
 8012f9c:	f240 120b 	movw	r2, #267	; 0x10b
 8012fa0:	490f      	ldr	r1, [pc, #60]	; (8012fe0 <tcp_pbuf_prealloc+0xf0>)
 8012fa2:	480d      	ldr	r0, [pc, #52]	; (8012fd8 <tcp_pbuf_prealloc+0xe8>)
 8012fa4:	f005 fb08 	bl	80185b8 <iprintf>
  *oversize = p->len - length;
 8012fa8:	693b      	ldr	r3, [r7, #16]
 8012faa:	895a      	ldrh	r2, [r3, #10]
 8012fac:	89bb      	ldrh	r3, [r7, #12]
 8012fae:	1ad3      	subs	r3, r2, r3
 8012fb0:	b29a      	uxth	r2, r3
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012fb6:	693b      	ldr	r3, [r7, #16]
 8012fb8:	89ba      	ldrh	r2, [r7, #12]
 8012fba:	811a      	strh	r2, [r3, #8]
 8012fbc:	693b      	ldr	r3, [r7, #16]
 8012fbe:	891a      	ldrh	r2, [r3, #8]
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	815a      	strh	r2, [r3, #10]
  return p;
 8012fc4:	693b      	ldr	r3, [r7, #16]
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	3718      	adds	r7, #24
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}
 8012fce:	bf00      	nop
 8012fd0:	0801b9c8 	.word	0x0801b9c8
 8012fd4:	0801ba80 	.word	0x0801ba80
 8012fd8:	0801ba1c 	.word	0x0801ba1c
 8012fdc:	0801baa4 	.word	0x0801baa4
 8012fe0:	0801bac4 	.word	0x0801bac4

08012fe4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	460b      	mov	r3, r1
 8012fee:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d106      	bne.n	8013004 <tcp_write_checks+0x20>
 8012ff6:	4b33      	ldr	r3, [pc, #204]	; (80130c4 <tcp_write_checks+0xe0>)
 8012ff8:	f240 1233 	movw	r2, #307	; 0x133
 8012ffc:	4932      	ldr	r1, [pc, #200]	; (80130c8 <tcp_write_checks+0xe4>)
 8012ffe:	4833      	ldr	r0, [pc, #204]	; (80130cc <tcp_write_checks+0xe8>)
 8013000:	f005 fada 	bl	80185b8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	7d1b      	ldrb	r3, [r3, #20]
 8013008:	2b04      	cmp	r3, #4
 801300a:	d00e      	beq.n	801302a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013010:	2b07      	cmp	r3, #7
 8013012:	d00a      	beq.n	801302a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013018:	2b02      	cmp	r3, #2
 801301a:	d006      	beq.n	801302a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013020:	2b03      	cmp	r3, #3
 8013022:	d002      	beq.n	801302a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013024:	f06f 030a 	mvn.w	r3, #10
 8013028:	e048      	b.n	80130bc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801302a:	887b      	ldrh	r3, [r7, #2]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d101      	bne.n	8013034 <tcp_write_checks+0x50>
    return ERR_OK;
 8013030:	2300      	movs	r3, #0
 8013032:	e043      	b.n	80130bc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801303a:	887a      	ldrh	r2, [r7, #2]
 801303c:	429a      	cmp	r2, r3
 801303e:	d909      	bls.n	8013054 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	8b5b      	ldrh	r3, [r3, #26]
 8013044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013048:	b29a      	uxth	r2, r3
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801304e:	f04f 33ff 	mov.w	r3, #4294967295
 8013052:	e033      	b.n	80130bc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801305a:	2b08      	cmp	r3, #8
 801305c:	d909      	bls.n	8013072 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	8b5b      	ldrh	r3, [r3, #26]
 8013062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013066:	b29a      	uxth	r2, r3
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801306c:	f04f 33ff 	mov.w	r3, #4294967295
 8013070:	e024      	b.n	80130bc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013078:	2b00      	cmp	r3, #0
 801307a:	d00f      	beq.n	801309c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013080:	2b00      	cmp	r3, #0
 8013082:	d11a      	bne.n	80130ba <tcp_write_checks+0xd6>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013088:	2b00      	cmp	r3, #0
 801308a:	d116      	bne.n	80130ba <tcp_write_checks+0xd6>
 801308c:	4b0d      	ldr	r3, [pc, #52]	; (80130c4 <tcp_write_checks+0xe0>)
 801308e:	f240 1255 	movw	r2, #341	; 0x155
 8013092:	490f      	ldr	r1, [pc, #60]	; (80130d0 <tcp_write_checks+0xec>)
 8013094:	480d      	ldr	r0, [pc, #52]	; (80130cc <tcp_write_checks+0xe8>)
 8013096:	f005 fa8f 	bl	80185b8 <iprintf>
 801309a:	e00e      	b.n	80130ba <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d103      	bne.n	80130ac <tcp_write_checks+0xc8>
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d006      	beq.n	80130ba <tcp_write_checks+0xd6>
 80130ac:	4b05      	ldr	r3, [pc, #20]	; (80130c4 <tcp_write_checks+0xe0>)
 80130ae:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80130b2:	4908      	ldr	r1, [pc, #32]	; (80130d4 <tcp_write_checks+0xf0>)
 80130b4:	4805      	ldr	r0, [pc, #20]	; (80130cc <tcp_write_checks+0xe8>)
 80130b6:	f005 fa7f 	bl	80185b8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80130ba:	2300      	movs	r3, #0
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3708      	adds	r7, #8
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}
 80130c4:	0801b9c8 	.word	0x0801b9c8
 80130c8:	0801bad8 	.word	0x0801bad8
 80130cc:	0801ba1c 	.word	0x0801ba1c
 80130d0:	0801baf8 	.word	0x0801baf8
 80130d4:	0801bb34 	.word	0x0801bb34

080130d8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80130d8:	b590      	push	{r4, r7, lr}
 80130da:	b09b      	sub	sp, #108	; 0x6c
 80130dc:	af04      	add	r7, sp, #16
 80130de:	60f8      	str	r0, [r7, #12]
 80130e0:	60b9      	str	r1, [r7, #8]
 80130e2:	4611      	mov	r1, r2
 80130e4:	461a      	mov	r2, r3
 80130e6:	460b      	mov	r3, r1
 80130e8:	80fb      	strh	r3, [r7, #6]
 80130ea:	4613      	mov	r3, r2
 80130ec:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80130ee:	2300      	movs	r3, #0
 80130f0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80130f2:	2300      	movs	r3, #0
 80130f4:	653b      	str	r3, [r7, #80]	; 0x50
 80130f6:	2300      	movs	r3, #0
 80130f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80130fa:	2300      	movs	r3, #0
 80130fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80130fe:	2300      	movs	r3, #0
 8013100:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013102:	2300      	movs	r3, #0
 8013104:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013108:	2300      	movs	r3, #0
 801310a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801310e:	2300      	movs	r3, #0
 8013110:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013112:	2300      	movs	r3, #0
 8013114:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013116:	2300      	movs	r3, #0
 8013118:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d109      	bne.n	8013134 <tcp_write+0x5c>
 8013120:	4ba4      	ldr	r3, [pc, #656]	; (80133b4 <tcp_write+0x2dc>)
 8013122:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013126:	49a4      	ldr	r1, [pc, #656]	; (80133b8 <tcp_write+0x2e0>)
 8013128:	48a4      	ldr	r0, [pc, #656]	; (80133bc <tcp_write+0x2e4>)
 801312a:	f005 fa45 	bl	80185b8 <iprintf>
 801312e:	f06f 030f 	mvn.w	r3, #15
 8013132:	e32a      	b.n	801378a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801313a:	085b      	lsrs	r3, r3, #1
 801313c:	b29a      	uxth	r2, r3
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013142:	4293      	cmp	r3, r2
 8013144:	bf28      	it	cs
 8013146:	4613      	movcs	r3, r2
 8013148:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801314a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801314c:	2b00      	cmp	r3, #0
 801314e:	d102      	bne.n	8013156 <tcp_write+0x7e>
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013154:	e000      	b.n	8013158 <tcp_write+0x80>
 8013156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013158:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d109      	bne.n	8013174 <tcp_write+0x9c>
 8013160:	4b94      	ldr	r3, [pc, #592]	; (80133b4 <tcp_write+0x2dc>)
 8013162:	f240 12ad 	movw	r2, #429	; 0x1ad
 8013166:	4996      	ldr	r1, [pc, #600]	; (80133c0 <tcp_write+0x2e8>)
 8013168:	4894      	ldr	r0, [pc, #592]	; (80133bc <tcp_write+0x2e4>)
 801316a:	f005 fa25 	bl	80185b8 <iprintf>
 801316e:	f06f 030f 	mvn.w	r3, #15
 8013172:	e30a      	b.n	801378a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013174:	88fb      	ldrh	r3, [r7, #6]
 8013176:	4619      	mov	r1, r3
 8013178:	68f8      	ldr	r0, [r7, #12]
 801317a:	f7ff ff33 	bl	8012fe4 <tcp_write_checks>
 801317e:	4603      	mov	r3, r0
 8013180:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013184:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013188:	2b00      	cmp	r3, #0
 801318a:	d002      	beq.n	8013192 <tcp_write+0xba>
    return err;
 801318c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013190:	e2fb      	b.n	801378a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013198:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801319c:	2300      	movs	r3, #0
 801319e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	f000 80f6 	beq.w	8013398 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131b0:	653b      	str	r3, [r7, #80]	; 0x50
 80131b2:	e002      	b.n	80131ba <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80131b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80131ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d1f8      	bne.n	80131b4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80131c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131c4:	7a9b      	ldrb	r3, [r3, #10]
 80131c6:	009b      	lsls	r3, r3, #2
 80131c8:	b29b      	uxth	r3, r3
 80131ca:	f003 0304 	and.w	r3, r3, #4
 80131ce:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80131d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80131d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131d4:	891b      	ldrh	r3, [r3, #8]
 80131d6:	4619      	mov	r1, r3
 80131d8:	8c3b      	ldrh	r3, [r7, #32]
 80131da:	440b      	add	r3, r1
 80131dc:	429a      	cmp	r2, r3
 80131de:	da06      	bge.n	80131ee <tcp_write+0x116>
 80131e0:	4b74      	ldr	r3, [pc, #464]	; (80133b4 <tcp_write+0x2dc>)
 80131e2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80131e6:	4977      	ldr	r1, [pc, #476]	; (80133c4 <tcp_write+0x2ec>)
 80131e8:	4874      	ldr	r0, [pc, #464]	; (80133bc <tcp_write+0x2e4>)
 80131ea:	f005 f9e5 	bl	80185b8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80131ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131f0:	891a      	ldrh	r2, [r3, #8]
 80131f2:	8c3b      	ldrh	r3, [r7, #32]
 80131f4:	4413      	add	r3, r2
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80131fa:	1ad3      	subs	r3, r2, r3
 80131fc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013204:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013206:	8a7b      	ldrh	r3, [r7, #18]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d026      	beq.n	801325a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801320c:	8a7b      	ldrh	r3, [r7, #18]
 801320e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013210:	429a      	cmp	r2, r3
 8013212:	d206      	bcs.n	8013222 <tcp_write+0x14a>
 8013214:	4b67      	ldr	r3, [pc, #412]	; (80133b4 <tcp_write+0x2dc>)
 8013216:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801321a:	496b      	ldr	r1, [pc, #428]	; (80133c8 <tcp_write+0x2f0>)
 801321c:	4867      	ldr	r0, [pc, #412]	; (80133bc <tcp_write+0x2e4>)
 801321e:	f005 f9cb 	bl	80185b8 <iprintf>
      seg = last_unsent;
 8013222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013224:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013226:	8a7b      	ldrh	r3, [r7, #18]
 8013228:	88fa      	ldrh	r2, [r7, #6]
 801322a:	4293      	cmp	r3, r2
 801322c:	bf28      	it	cs
 801322e:	4613      	movcs	r3, r2
 8013230:	b29b      	uxth	r3, r3
 8013232:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013234:	4293      	cmp	r3, r2
 8013236:	bf28      	it	cs
 8013238:	4613      	movcs	r3, r2
 801323a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801323c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013240:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013242:	4413      	add	r3, r2
 8013244:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013248:	8a7a      	ldrh	r2, [r7, #18]
 801324a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801324c:	1ad3      	subs	r3, r2, r3
 801324e:	b29b      	uxth	r3, r3
 8013250:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013252:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013254:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013256:	1ad3      	subs	r3, r2, r3
 8013258:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801325a:	8a7b      	ldrh	r3, [r7, #18]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d00b      	beq.n	8013278 <tcp_write+0x1a0>
 8013260:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013264:	88fb      	ldrh	r3, [r7, #6]
 8013266:	429a      	cmp	r2, r3
 8013268:	d006      	beq.n	8013278 <tcp_write+0x1a0>
 801326a:	4b52      	ldr	r3, [pc, #328]	; (80133b4 <tcp_write+0x2dc>)
 801326c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013270:	4956      	ldr	r1, [pc, #344]	; (80133cc <tcp_write+0x2f4>)
 8013272:	4852      	ldr	r0, [pc, #328]	; (80133bc <tcp_write+0x2e4>)
 8013274:	f005 f9a0 	bl	80185b8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013278:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801327c:	88fb      	ldrh	r3, [r7, #6]
 801327e:	429a      	cmp	r2, r3
 8013280:	f080 8167 	bcs.w	8013552 <tcp_write+0x47a>
 8013284:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013286:	2b00      	cmp	r3, #0
 8013288:	f000 8163 	beq.w	8013552 <tcp_write+0x47a>
 801328c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801328e:	891b      	ldrh	r3, [r3, #8]
 8013290:	2b00      	cmp	r3, #0
 8013292:	f000 815e 	beq.w	8013552 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013296:	88fa      	ldrh	r2, [r7, #6]
 8013298:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801329c:	1ad2      	subs	r2, r2, r3
 801329e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80132a0:	4293      	cmp	r3, r2
 80132a2:	bfa8      	it	ge
 80132a4:	4613      	movge	r3, r2
 80132a6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80132a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132aa:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80132ac:	797b      	ldrb	r3, [r7, #5]
 80132ae:	f003 0301 	and.w	r3, r3, #1
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d027      	beq.n	8013306 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80132b6:	f107 0012 	add.w	r0, r7, #18
 80132ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80132bc:	8bf9      	ldrh	r1, [r7, #30]
 80132be:	2301      	movs	r3, #1
 80132c0:	9302      	str	r3, [sp, #8]
 80132c2:	797b      	ldrb	r3, [r7, #5]
 80132c4:	9301      	str	r3, [sp, #4]
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	9300      	str	r3, [sp, #0]
 80132ca:	4603      	mov	r3, r0
 80132cc:	2000      	movs	r0, #0
 80132ce:	f7ff fe0f 	bl	8012ef0 <tcp_pbuf_prealloc>
 80132d2:	6578      	str	r0, [r7, #84]	; 0x54
 80132d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	f000 8225 	beq.w	8013726 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80132dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132de:	6858      	ldr	r0, [r3, #4]
 80132e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80132e4:	68ba      	ldr	r2, [r7, #8]
 80132e6:	4413      	add	r3, r2
 80132e8:	8bfa      	ldrh	r2, [r7, #30]
 80132ea:	4619      	mov	r1, r3
 80132ec:	f005 f88a 	bl	8018404 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80132f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80132f2:	f7fb fa7d 	bl	800e7f0 <pbuf_clen>
 80132f6:	4603      	mov	r3, r0
 80132f8:	461a      	mov	r2, r3
 80132fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80132fe:	4413      	add	r3, r2
 8013300:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013304:	e041      	b.n	801338a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	637b      	str	r3, [r7, #52]	; 0x34
 801330c:	e002      	b.n	8013314 <tcp_write+0x23c>
 801330e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	637b      	str	r3, [r7, #52]	; 0x34
 8013314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d1f8      	bne.n	801330e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801331c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801331e:	7b1b      	ldrb	r3, [r3, #12]
 8013320:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013324:	2b00      	cmp	r3, #0
 8013326:	d115      	bne.n	8013354 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801332a:	685b      	ldr	r3, [r3, #4]
 801332c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801332e:	8952      	ldrh	r2, [r2, #10]
 8013330:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013332:	68ba      	ldr	r2, [r7, #8]
 8013334:	429a      	cmp	r2, r3
 8013336:	d10d      	bne.n	8013354 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013338:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801333c:	2b00      	cmp	r3, #0
 801333e:	d006      	beq.n	801334e <tcp_write+0x276>
 8013340:	4b1c      	ldr	r3, [pc, #112]	; (80133b4 <tcp_write+0x2dc>)
 8013342:	f240 2231 	movw	r2, #561	; 0x231
 8013346:	4922      	ldr	r1, [pc, #136]	; (80133d0 <tcp_write+0x2f8>)
 8013348:	481c      	ldr	r0, [pc, #112]	; (80133bc <tcp_write+0x2e4>)
 801334a:	f005 f935 	bl	80185b8 <iprintf>
          extendlen = seglen;
 801334e:	8bfb      	ldrh	r3, [r7, #30]
 8013350:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013352:	e01a      	b.n	801338a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013354:	8bfb      	ldrh	r3, [r7, #30]
 8013356:	2201      	movs	r2, #1
 8013358:	4619      	mov	r1, r3
 801335a:	2000      	movs	r0, #0
 801335c:	f7fa fed6 	bl	800e10c <pbuf_alloc>
 8013360:	6578      	str	r0, [r7, #84]	; 0x54
 8013362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013364:	2b00      	cmp	r3, #0
 8013366:	f000 81e0 	beq.w	801372a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801336a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801336e:	68ba      	ldr	r2, [r7, #8]
 8013370:	441a      	add	r2, r3
 8013372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013374:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013376:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013378:	f7fb fa3a 	bl	800e7f0 <pbuf_clen>
 801337c:	4603      	mov	r3, r0
 801337e:	461a      	mov	r2, r3
 8013380:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013384:	4413      	add	r3, r2
 8013386:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801338a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801338e:	8bfb      	ldrh	r3, [r7, #30]
 8013390:	4413      	add	r3, r2
 8013392:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013396:	e0dc      	b.n	8013552 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801339e:	2b00      	cmp	r3, #0
 80133a0:	f000 80d7 	beq.w	8013552 <tcp_write+0x47a>
 80133a4:	4b03      	ldr	r3, [pc, #12]	; (80133b4 <tcp_write+0x2dc>)
 80133a6:	f240 224a 	movw	r2, #586	; 0x24a
 80133aa:	490a      	ldr	r1, [pc, #40]	; (80133d4 <tcp_write+0x2fc>)
 80133ac:	4803      	ldr	r0, [pc, #12]	; (80133bc <tcp_write+0x2e4>)
 80133ae:	f005 f903 	bl	80185b8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80133b2:	e0ce      	b.n	8013552 <tcp_write+0x47a>
 80133b4:	0801b9c8 	.word	0x0801b9c8
 80133b8:	0801bb68 	.word	0x0801bb68
 80133bc:	0801ba1c 	.word	0x0801ba1c
 80133c0:	0801bb80 	.word	0x0801bb80
 80133c4:	0801bbb4 	.word	0x0801bbb4
 80133c8:	0801bbcc 	.word	0x0801bbcc
 80133cc:	0801bbec 	.word	0x0801bbec
 80133d0:	0801bc0c 	.word	0x0801bc0c
 80133d4:	0801bc38 	.word	0x0801bc38
    struct pbuf *p;
    u16_t left = len - pos;
 80133d8:	88fa      	ldrh	r2, [r7, #6]
 80133da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80133de:	1ad3      	subs	r3, r2, r3
 80133e0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80133e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80133ea:	1ad3      	subs	r3, r2, r3
 80133ec:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80133ee:	8b7a      	ldrh	r2, [r7, #26]
 80133f0:	8bbb      	ldrh	r3, [r7, #28]
 80133f2:	4293      	cmp	r3, r2
 80133f4:	bf28      	it	cs
 80133f6:	4613      	movcs	r3, r2
 80133f8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80133fa:	797b      	ldrb	r3, [r7, #5]
 80133fc:	f003 0301 	and.w	r3, r3, #1
 8013400:	2b00      	cmp	r3, #0
 8013402:	d036      	beq.n	8013472 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013404:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013408:	b29a      	uxth	r2, r3
 801340a:	8b3b      	ldrh	r3, [r7, #24]
 801340c:	4413      	add	r3, r2
 801340e:	b299      	uxth	r1, r3
 8013410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013412:	2b00      	cmp	r3, #0
 8013414:	bf0c      	ite	eq
 8013416:	2301      	moveq	r3, #1
 8013418:	2300      	movne	r3, #0
 801341a:	b2db      	uxtb	r3, r3
 801341c:	f107 0012 	add.w	r0, r7, #18
 8013420:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013422:	9302      	str	r3, [sp, #8]
 8013424:	797b      	ldrb	r3, [r7, #5]
 8013426:	9301      	str	r3, [sp, #4]
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	9300      	str	r3, [sp, #0]
 801342c:	4603      	mov	r3, r0
 801342e:	2036      	movs	r0, #54	; 0x36
 8013430:	f7ff fd5e 	bl	8012ef0 <tcp_pbuf_prealloc>
 8013434:	6338      	str	r0, [r7, #48]	; 0x30
 8013436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013438:	2b00      	cmp	r3, #0
 801343a:	f000 8178 	beq.w	801372e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013440:	895b      	ldrh	r3, [r3, #10]
 8013442:	8b3a      	ldrh	r2, [r7, #24]
 8013444:	429a      	cmp	r2, r3
 8013446:	d906      	bls.n	8013456 <tcp_write+0x37e>
 8013448:	4b8c      	ldr	r3, [pc, #560]	; (801367c <tcp_write+0x5a4>)
 801344a:	f240 2266 	movw	r2, #614	; 0x266
 801344e:	498c      	ldr	r1, [pc, #560]	; (8013680 <tcp_write+0x5a8>)
 8013450:	488c      	ldr	r0, [pc, #560]	; (8013684 <tcp_write+0x5ac>)
 8013452:	f005 f8b1 	bl	80185b8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013458:	685a      	ldr	r2, [r3, #4]
 801345a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801345e:	18d0      	adds	r0, r2, r3
 8013460:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013464:	68ba      	ldr	r2, [r7, #8]
 8013466:	4413      	add	r3, r2
 8013468:	8b3a      	ldrh	r2, [r7, #24]
 801346a:	4619      	mov	r1, r3
 801346c:	f004 ffca 	bl	8018404 <memcpy>
 8013470:	e02f      	b.n	80134d2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013472:	8a7b      	ldrh	r3, [r7, #18]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d006      	beq.n	8013486 <tcp_write+0x3ae>
 8013478:	4b80      	ldr	r3, [pc, #512]	; (801367c <tcp_write+0x5a4>)
 801347a:	f240 2271 	movw	r2, #625	; 0x271
 801347e:	4982      	ldr	r1, [pc, #520]	; (8013688 <tcp_write+0x5b0>)
 8013480:	4880      	ldr	r0, [pc, #512]	; (8013684 <tcp_write+0x5ac>)
 8013482:	f005 f899 	bl	80185b8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013486:	8b3b      	ldrh	r3, [r7, #24]
 8013488:	2201      	movs	r2, #1
 801348a:	4619      	mov	r1, r3
 801348c:	2036      	movs	r0, #54	; 0x36
 801348e:	f7fa fe3d 	bl	800e10c <pbuf_alloc>
 8013492:	6178      	str	r0, [r7, #20]
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	2b00      	cmp	r3, #0
 8013498:	f000 814b 	beq.w	8013732 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801349c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134a0:	68ba      	ldr	r2, [r7, #8]
 80134a2:	441a      	add	r2, r3
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80134a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134b2:	4619      	mov	r1, r3
 80134b4:	2036      	movs	r0, #54	; 0x36
 80134b6:	f7fa fe29 	bl	800e10c <pbuf_alloc>
 80134ba:	6338      	str	r0, [r7, #48]	; 0x30
 80134bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d103      	bne.n	80134ca <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80134c2:	6978      	ldr	r0, [r7, #20]
 80134c4:	f7fb f906 	bl	800e6d4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80134c8:	e136      	b.n	8013738 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80134ca:	6979      	ldr	r1, [r7, #20]
 80134cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134ce:	f7fb f9cf 	bl	800e870 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80134d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134d4:	f7fb f98c 	bl	800e7f0 <pbuf_clen>
 80134d8:	4603      	mov	r3, r0
 80134da:	461a      	mov	r2, r3
 80134dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80134e0:	4413      	add	r3, r2
 80134e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80134e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80134ea:	2b09      	cmp	r3, #9
 80134ec:	d903      	bls.n	80134f6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80134ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134f0:	f7fb f8f0 	bl	800e6d4 <pbuf_free>
      goto memerr;
 80134f4:	e120      	b.n	8013738 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80134fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134fe:	441a      	add	r2, r3
 8013500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013504:	9300      	str	r3, [sp, #0]
 8013506:	4613      	mov	r3, r2
 8013508:	2200      	movs	r2, #0
 801350a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801350c:	68f8      	ldr	r0, [r7, #12]
 801350e:	f7ff fc51 	bl	8012db4 <tcp_create_segment>
 8013512:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013516:	2b00      	cmp	r3, #0
 8013518:	f000 810d 	beq.w	8013736 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801351c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801351e:	2b00      	cmp	r3, #0
 8013520:	d102      	bne.n	8013528 <tcp_write+0x450>
      queue = seg;
 8013522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013524:	647b      	str	r3, [r7, #68]	; 0x44
 8013526:	e00c      	b.n	8013542 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801352a:	2b00      	cmp	r3, #0
 801352c:	d106      	bne.n	801353c <tcp_write+0x464>
 801352e:	4b53      	ldr	r3, [pc, #332]	; (801367c <tcp_write+0x5a4>)
 8013530:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013534:	4955      	ldr	r1, [pc, #340]	; (801368c <tcp_write+0x5b4>)
 8013536:	4853      	ldr	r0, [pc, #332]	; (8013684 <tcp_write+0x5ac>)
 8013538:	f005 f83e 	bl	80185b8 <iprintf>
      prev_seg->next = seg;
 801353c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801353e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013540:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013544:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013546:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801354a:	8b3b      	ldrh	r3, [r7, #24]
 801354c:	4413      	add	r3, r2
 801354e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013552:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013556:	88fb      	ldrh	r3, [r7, #6]
 8013558:	429a      	cmp	r2, r3
 801355a:	f4ff af3d 	bcc.w	80133d8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801355e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013560:	2b00      	cmp	r3, #0
 8013562:	d02c      	beq.n	80135be <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013566:	685b      	ldr	r3, [r3, #4]
 8013568:	62fb      	str	r3, [r7, #44]	; 0x2c
 801356a:	e01e      	b.n	80135aa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801356e:	891a      	ldrh	r2, [r3, #8]
 8013570:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013572:	4413      	add	r3, r2
 8013574:	b29a      	uxth	r2, r3
 8013576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013578:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d110      	bne.n	80135a4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013584:	685b      	ldr	r3, [r3, #4]
 8013586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013588:	8952      	ldrh	r2, [r2, #10]
 801358a:	4413      	add	r3, r2
 801358c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801358e:	68b9      	ldr	r1, [r7, #8]
 8013590:	4618      	mov	r0, r3
 8013592:	f004 ff37 	bl	8018404 <memcpy>
        p->len += oversize_used;
 8013596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013598:	895a      	ldrh	r2, [r3, #10]
 801359a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801359c:	4413      	add	r3, r2
 801359e:	b29a      	uxth	r2, r3
 80135a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80135a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80135aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d1dd      	bne.n	801356c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80135b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135b2:	891a      	ldrh	r2, [r3, #8]
 80135b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80135b6:	4413      	add	r3, r2
 80135b8:	b29a      	uxth	r2, r3
 80135ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135bc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80135be:	8a7a      	ldrh	r2, [r7, #18]
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80135c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d018      	beq.n	80135fe <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80135cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d106      	bne.n	80135e0 <tcp_write+0x508>
 80135d2:	4b2a      	ldr	r3, [pc, #168]	; (801367c <tcp_write+0x5a4>)
 80135d4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80135d8:	492d      	ldr	r1, [pc, #180]	; (8013690 <tcp_write+0x5b8>)
 80135da:	482a      	ldr	r0, [pc, #168]	; (8013684 <tcp_write+0x5ac>)
 80135dc:	f004 ffec 	bl	80185b8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80135e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7fb f942 	bl	800e870 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80135ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135ee:	891a      	ldrh	r2, [r3, #8]
 80135f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135f2:	891b      	ldrh	r3, [r3, #8]
 80135f4:	4413      	add	r3, r2
 80135f6:	b29a      	uxth	r2, r3
 80135f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135fa:	811a      	strh	r2, [r3, #8]
 80135fc:	e037      	b.n	801366e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80135fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013600:	2b00      	cmp	r3, #0
 8013602:	d034      	beq.n	801366e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013606:	2b00      	cmp	r3, #0
 8013608:	d003      	beq.n	8013612 <tcp_write+0x53a>
 801360a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801360c:	685b      	ldr	r3, [r3, #4]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d106      	bne.n	8013620 <tcp_write+0x548>
 8013612:	4b1a      	ldr	r3, [pc, #104]	; (801367c <tcp_write+0x5a4>)
 8013614:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013618:	491e      	ldr	r1, [pc, #120]	; (8013694 <tcp_write+0x5bc>)
 801361a:	481a      	ldr	r0, [pc, #104]	; (8013684 <tcp_write+0x5ac>)
 801361c:	f004 ffcc 	bl	80185b8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013622:	685b      	ldr	r3, [r3, #4]
 8013624:	62bb      	str	r3, [r7, #40]	; 0x28
 8013626:	e009      	b.n	801363c <tcp_write+0x564>
      p->tot_len += extendlen;
 8013628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362a:	891a      	ldrh	r2, [r3, #8]
 801362c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801362e:	4413      	add	r3, r2
 8013630:	b29a      	uxth	r2, r3
 8013632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013634:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	62bb      	str	r3, [r7, #40]	; 0x28
 801363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d1f1      	bne.n	8013628 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013646:	891a      	ldrh	r2, [r3, #8]
 8013648:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801364a:	4413      	add	r3, r2
 801364c:	b29a      	uxth	r2, r3
 801364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013650:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013654:	895a      	ldrh	r2, [r3, #10]
 8013656:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013658:	4413      	add	r3, r2
 801365a:	b29a      	uxth	r2, r3
 801365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013662:	891a      	ldrh	r2, [r3, #8]
 8013664:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013666:	4413      	add	r3, r2
 8013668:	b29a      	uxth	r2, r3
 801366a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801366c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801366e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013670:	2b00      	cmp	r3, #0
 8013672:	d111      	bne.n	8013698 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013678:	66da      	str	r2, [r3, #108]	; 0x6c
 801367a:	e010      	b.n	801369e <tcp_write+0x5c6>
 801367c:	0801b9c8 	.word	0x0801b9c8
 8013680:	0801bc68 	.word	0x0801bc68
 8013684:	0801ba1c 	.word	0x0801ba1c
 8013688:	0801bca8 	.word	0x0801bca8
 801368c:	0801bcb8 	.word	0x0801bcb8
 8013690:	0801bccc 	.word	0x0801bccc
 8013694:	0801bd04 	.word	0x0801bd04
  } else {
    last_unsent->next = queue;
 8013698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801369a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801369c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80136a2:	88fb      	ldrh	r3, [r7, #6]
 80136a4:	441a      	add	r2, r3
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80136b0:	88fb      	ldrh	r3, [r7, #6]
 80136b2:	1ad3      	subs	r3, r2, r3
 80136b4:	b29a      	uxth	r2, r3
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80136c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d00e      	beq.n	80136ee <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d10a      	bne.n	80136ee <tcp_write+0x616>
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d106      	bne.n	80136ee <tcp_write+0x616>
 80136e0:	4b2c      	ldr	r3, [pc, #176]	; (8013794 <tcp_write+0x6bc>)
 80136e2:	f240 3212 	movw	r2, #786	; 0x312
 80136e6:	492c      	ldr	r1, [pc, #176]	; (8013798 <tcp_write+0x6c0>)
 80136e8:	482c      	ldr	r0, [pc, #176]	; (801379c <tcp_write+0x6c4>)
 80136ea:	f004 ff65 	bl	80185b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80136ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d016      	beq.n	8013722 <tcp_write+0x64a>
 80136f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136f6:	68db      	ldr	r3, [r3, #12]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d012      	beq.n	8013722 <tcp_write+0x64a>
 80136fc:	797b      	ldrb	r3, [r7, #5]
 80136fe:	f003 0302 	and.w	r3, r3, #2
 8013702:	2b00      	cmp	r3, #0
 8013704:	d10d      	bne.n	8013722 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013708:	68db      	ldr	r3, [r3, #12]
 801370a:	899b      	ldrh	r3, [r3, #12]
 801370c:	b29c      	uxth	r4, r3
 801370e:	2008      	movs	r0, #8
 8013710:	f7f9 fc98 	bl	800d044 <lwip_htons>
 8013714:	4603      	mov	r3, r0
 8013716:	461a      	mov	r2, r3
 8013718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801371a:	68db      	ldr	r3, [r3, #12]
 801371c:	4322      	orrs	r2, r4
 801371e:	b292      	uxth	r2, r2
 8013720:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013722:	2300      	movs	r3, #0
 8013724:	e031      	b.n	801378a <tcp_write+0x6b2>
          goto memerr;
 8013726:	bf00      	nop
 8013728:	e006      	b.n	8013738 <tcp_write+0x660>
            goto memerr;
 801372a:	bf00      	nop
 801372c:	e004      	b.n	8013738 <tcp_write+0x660>
        goto memerr;
 801372e:	bf00      	nop
 8013730:	e002      	b.n	8013738 <tcp_write+0x660>
        goto memerr;
 8013732:	bf00      	nop
 8013734:	e000      	b.n	8013738 <tcp_write+0x660>
      goto memerr;
 8013736:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	8b5b      	ldrh	r3, [r3, #26]
 801373c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013740:	b29a      	uxth	r2, r3
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013748:	2b00      	cmp	r3, #0
 801374a:	d002      	beq.n	8013752 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801374c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801374e:	f7fa ffc1 	bl	800e6d4 <pbuf_free>
  }
  if (queue != NULL) {
 8013752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013754:	2b00      	cmp	r3, #0
 8013756:	d002      	beq.n	801375e <tcp_write+0x686>
    tcp_segs_free(queue);
 8013758:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801375a:	f7fc fb6f 	bl	800fe3c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013764:	2b00      	cmp	r3, #0
 8013766:	d00e      	beq.n	8013786 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801376c:	2b00      	cmp	r3, #0
 801376e:	d10a      	bne.n	8013786 <tcp_write+0x6ae>
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013774:	2b00      	cmp	r3, #0
 8013776:	d106      	bne.n	8013786 <tcp_write+0x6ae>
 8013778:	4b06      	ldr	r3, [pc, #24]	; (8013794 <tcp_write+0x6bc>)
 801377a:	f240 3227 	movw	r2, #807	; 0x327
 801377e:	4906      	ldr	r1, [pc, #24]	; (8013798 <tcp_write+0x6c0>)
 8013780:	4806      	ldr	r0, [pc, #24]	; (801379c <tcp_write+0x6c4>)
 8013782:	f004 ff19 	bl	80185b8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013786:	f04f 33ff 	mov.w	r3, #4294967295
}
 801378a:	4618      	mov	r0, r3
 801378c:	375c      	adds	r7, #92	; 0x5c
 801378e:	46bd      	mov	sp, r7
 8013790:	bd90      	pop	{r4, r7, pc}
 8013792:	bf00      	nop
 8013794:	0801b9c8 	.word	0x0801b9c8
 8013798:	0801bd3c 	.word	0x0801bd3c
 801379c:	0801ba1c 	.word	0x0801ba1c

080137a0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80137a0:	b590      	push	{r4, r7, lr}
 80137a2:	b08b      	sub	sp, #44	; 0x2c
 80137a4:	af02      	add	r7, sp, #8
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	460b      	mov	r3, r1
 80137aa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80137ac:	2300      	movs	r3, #0
 80137ae:	61fb      	str	r3, [r7, #28]
 80137b0:	2300      	movs	r3, #0
 80137b2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80137b4:	2300      	movs	r3, #0
 80137b6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d106      	bne.n	80137cc <tcp_split_unsent_seg+0x2c>
 80137be:	4b95      	ldr	r3, [pc, #596]	; (8013a14 <tcp_split_unsent_seg+0x274>)
 80137c0:	f240 324b 	movw	r2, #843	; 0x34b
 80137c4:	4994      	ldr	r1, [pc, #592]	; (8013a18 <tcp_split_unsent_seg+0x278>)
 80137c6:	4895      	ldr	r0, [pc, #596]	; (8013a1c <tcp_split_unsent_seg+0x27c>)
 80137c8:	f004 fef6 	bl	80185b8 <iprintf>

  useg = pcb->unsent;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137d0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d102      	bne.n	80137de <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80137d8:	f04f 33ff 	mov.w	r3, #4294967295
 80137dc:	e116      	b.n	8013a0c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80137de:	887b      	ldrh	r3, [r7, #2]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d109      	bne.n	80137f8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80137e4:	4b8b      	ldr	r3, [pc, #556]	; (8013a14 <tcp_split_unsent_seg+0x274>)
 80137e6:	f240 3253 	movw	r2, #851	; 0x353
 80137ea:	498d      	ldr	r1, [pc, #564]	; (8013a20 <tcp_split_unsent_seg+0x280>)
 80137ec:	488b      	ldr	r0, [pc, #556]	; (8013a1c <tcp_split_unsent_seg+0x27c>)
 80137ee:	f004 fee3 	bl	80185b8 <iprintf>
    return ERR_VAL;
 80137f2:	f06f 0305 	mvn.w	r3, #5
 80137f6:	e109      	b.n	8013a0c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	891b      	ldrh	r3, [r3, #8]
 80137fc:	887a      	ldrh	r2, [r7, #2]
 80137fe:	429a      	cmp	r2, r3
 8013800:	d301      	bcc.n	8013806 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013802:	2300      	movs	r3, #0
 8013804:	e102      	b.n	8013a0c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801380a:	887a      	ldrh	r2, [r7, #2]
 801380c:	429a      	cmp	r2, r3
 801380e:	d906      	bls.n	801381e <tcp_split_unsent_seg+0x7e>
 8013810:	4b80      	ldr	r3, [pc, #512]	; (8013a14 <tcp_split_unsent_seg+0x274>)
 8013812:	f240 325b 	movw	r2, #859	; 0x35b
 8013816:	4983      	ldr	r1, [pc, #524]	; (8013a24 <tcp_split_unsent_seg+0x284>)
 8013818:	4880      	ldr	r0, [pc, #512]	; (8013a1c <tcp_split_unsent_seg+0x27c>)
 801381a:	f004 fecd 	bl	80185b8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	891b      	ldrh	r3, [r3, #8]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d106      	bne.n	8013834 <tcp_split_unsent_seg+0x94>
 8013826:	4b7b      	ldr	r3, [pc, #492]	; (8013a14 <tcp_split_unsent_seg+0x274>)
 8013828:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801382c:	497e      	ldr	r1, [pc, #504]	; (8013a28 <tcp_split_unsent_seg+0x288>)
 801382e:	487b      	ldr	r0, [pc, #492]	; (8013a1c <tcp_split_unsent_seg+0x27c>)
 8013830:	f004 fec2 	bl	80185b8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	7a9b      	ldrb	r3, [r3, #10]
 8013838:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801383a:	7bfb      	ldrb	r3, [r7, #15]
 801383c:	009b      	lsls	r3, r3, #2
 801383e:	b2db      	uxtb	r3, r3
 8013840:	f003 0304 	and.w	r3, r3, #4
 8013844:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	891a      	ldrh	r2, [r3, #8]
 801384a:	887b      	ldrh	r3, [r7, #2]
 801384c:	1ad3      	subs	r3, r2, r3
 801384e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013850:	7bbb      	ldrb	r3, [r7, #14]
 8013852:	b29a      	uxth	r2, r3
 8013854:	89bb      	ldrh	r3, [r7, #12]
 8013856:	4413      	add	r3, r2
 8013858:	b29b      	uxth	r3, r3
 801385a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801385e:	4619      	mov	r1, r3
 8013860:	2036      	movs	r0, #54	; 0x36
 8013862:	f7fa fc53 	bl	800e10c <pbuf_alloc>
 8013866:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013868:	693b      	ldr	r3, [r7, #16]
 801386a:	2b00      	cmp	r3, #0
 801386c:	f000 80b7 	beq.w	80139de <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	685b      	ldr	r3, [r3, #4]
 8013874:	891a      	ldrh	r2, [r3, #8]
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	891b      	ldrh	r3, [r3, #8]
 801387a:	1ad3      	subs	r3, r2, r3
 801387c:	b29a      	uxth	r2, r3
 801387e:	887b      	ldrh	r3, [r7, #2]
 8013880:	4413      	add	r3, r2
 8013882:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	6858      	ldr	r0, [r3, #4]
 8013888:	693b      	ldr	r3, [r7, #16]
 801388a:	685a      	ldr	r2, [r3, #4]
 801388c:	7bbb      	ldrb	r3, [r7, #14]
 801388e:	18d1      	adds	r1, r2, r3
 8013890:	897b      	ldrh	r3, [r7, #10]
 8013892:	89ba      	ldrh	r2, [r7, #12]
 8013894:	f7fb f924 	bl	800eae0 <pbuf_copy_partial>
 8013898:	4603      	mov	r3, r0
 801389a:	461a      	mov	r2, r3
 801389c:	89bb      	ldrh	r3, [r7, #12]
 801389e:	4293      	cmp	r3, r2
 80138a0:	f040 809f 	bne.w	80139e2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80138a4:	697b      	ldr	r3, [r7, #20]
 80138a6:	68db      	ldr	r3, [r3, #12]
 80138a8:	899b      	ldrh	r3, [r3, #12]
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7f9 fbc9 	bl	800d044 <lwip_htons>
 80138b2:	4603      	mov	r3, r0
 80138b4:	b2db      	uxtb	r3, r3
 80138b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80138ba:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80138bc:	2300      	movs	r3, #0
 80138be:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80138c0:	7efb      	ldrb	r3, [r7, #27]
 80138c2:	f003 0308 	and.w	r3, r3, #8
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d007      	beq.n	80138da <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80138ca:	7efb      	ldrb	r3, [r7, #27]
 80138cc:	f023 0308 	bic.w	r3, r3, #8
 80138d0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80138d2:	7ebb      	ldrb	r3, [r7, #26]
 80138d4:	f043 0308 	orr.w	r3, r3, #8
 80138d8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80138da:	7efb      	ldrb	r3, [r7, #27]
 80138dc:	f003 0301 	and.w	r3, r3, #1
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d007      	beq.n	80138f4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80138e4:	7efb      	ldrb	r3, [r7, #27]
 80138e6:	f023 0301 	bic.w	r3, r3, #1
 80138ea:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80138ec:	7ebb      	ldrb	r3, [r7, #26]
 80138ee:	f043 0301 	orr.w	r3, r3, #1
 80138f2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	68db      	ldr	r3, [r3, #12]
 80138f8:	685b      	ldr	r3, [r3, #4]
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7f9 fbb7 	bl	800d06e <lwip_htonl>
 8013900:	4602      	mov	r2, r0
 8013902:	887b      	ldrh	r3, [r7, #2]
 8013904:	18d1      	adds	r1, r2, r3
 8013906:	7eba      	ldrb	r2, [r7, #26]
 8013908:	7bfb      	ldrb	r3, [r7, #15]
 801390a:	9300      	str	r3, [sp, #0]
 801390c:	460b      	mov	r3, r1
 801390e:	6939      	ldr	r1, [r7, #16]
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f7ff fa4f 	bl	8012db4 <tcp_create_segment>
 8013916:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013918:	69fb      	ldr	r3, [r7, #28]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d063      	beq.n	80139e6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	685b      	ldr	r3, [r3, #4]
 8013922:	4618      	mov	r0, r3
 8013924:	f7fa ff64 	bl	800e7f0 <pbuf_clen>
 8013928:	4603      	mov	r3, r0
 801392a:	461a      	mov	r2, r3
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013932:	1a9b      	subs	r3, r3, r2
 8013934:	b29a      	uxth	r2, r3
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	6858      	ldr	r0, [r3, #4]
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	685b      	ldr	r3, [r3, #4]
 8013944:	891a      	ldrh	r2, [r3, #8]
 8013946:	89bb      	ldrh	r3, [r7, #12]
 8013948:	1ad3      	subs	r3, r2, r3
 801394a:	b29b      	uxth	r3, r3
 801394c:	4619      	mov	r1, r3
 801394e:	f7fa fd3b 	bl	800e3c8 <pbuf_realloc>
  useg->len -= remainder;
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	891a      	ldrh	r2, [r3, #8]
 8013956:	89bb      	ldrh	r3, [r7, #12]
 8013958:	1ad3      	subs	r3, r2, r3
 801395a:	b29a      	uxth	r2, r3
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013960:	697b      	ldr	r3, [r7, #20]
 8013962:	68db      	ldr	r3, [r3, #12]
 8013964:	899b      	ldrh	r3, [r3, #12]
 8013966:	b29c      	uxth	r4, r3
 8013968:	7efb      	ldrb	r3, [r7, #27]
 801396a:	b29b      	uxth	r3, r3
 801396c:	4618      	mov	r0, r3
 801396e:	f7f9 fb69 	bl	800d044 <lwip_htons>
 8013972:	4603      	mov	r3, r0
 8013974:	461a      	mov	r2, r3
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	68db      	ldr	r3, [r3, #12]
 801397a:	4322      	orrs	r2, r4
 801397c:	b292      	uxth	r2, r2
 801397e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	685b      	ldr	r3, [r3, #4]
 8013984:	4618      	mov	r0, r3
 8013986:	f7fa ff33 	bl	800e7f0 <pbuf_clen>
 801398a:	4603      	mov	r3, r0
 801398c:	461a      	mov	r2, r3
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013994:	4413      	add	r3, r2
 8013996:	b29a      	uxth	r2, r3
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801399e:	69fb      	ldr	r3, [r7, #28]
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7fa ff24 	bl	800e7f0 <pbuf_clen>
 80139a8:	4603      	mov	r3, r0
 80139aa:	461a      	mov	r2, r3
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80139b2:	4413      	add	r3, r2
 80139b4:	b29a      	uxth	r2, r3
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	681a      	ldr	r2, [r3, #0]
 80139c0:	69fb      	ldr	r3, [r7, #28]
 80139c2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	69fa      	ldr	r2, [r7, #28]
 80139c8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80139ca:	69fb      	ldr	r3, [r7, #28]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d103      	bne.n	80139da <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	2200      	movs	r2, #0
 80139d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80139da:	2300      	movs	r3, #0
 80139dc:	e016      	b.n	8013a0c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80139de:	bf00      	nop
 80139e0:	e002      	b.n	80139e8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80139e2:	bf00      	nop
 80139e4:	e000      	b.n	80139e8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80139e6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80139e8:	69fb      	ldr	r3, [r7, #28]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d006      	beq.n	80139fc <tcp_split_unsent_seg+0x25c>
 80139ee:	4b09      	ldr	r3, [pc, #36]	; (8013a14 <tcp_split_unsent_seg+0x274>)
 80139f0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80139f4:	490d      	ldr	r1, [pc, #52]	; (8013a2c <tcp_split_unsent_seg+0x28c>)
 80139f6:	4809      	ldr	r0, [pc, #36]	; (8013a1c <tcp_split_unsent_seg+0x27c>)
 80139f8:	f004 fdde 	bl	80185b8 <iprintf>
  if (p != NULL) {
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d002      	beq.n	8013a08 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013a02:	6938      	ldr	r0, [r7, #16]
 8013a04:	f7fa fe66 	bl	800e6d4 <pbuf_free>
  }

  return ERR_MEM;
 8013a08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	3724      	adds	r7, #36	; 0x24
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd90      	pop	{r4, r7, pc}
 8013a14:	0801b9c8 	.word	0x0801b9c8
 8013a18:	0801bd5c 	.word	0x0801bd5c
 8013a1c:	0801ba1c 	.word	0x0801ba1c
 8013a20:	0801bd80 	.word	0x0801bd80
 8013a24:	0801bda4 	.word	0x0801bda4
 8013a28:	0801bdb4 	.word	0x0801bdb4
 8013a2c:	0801bdc4 	.word	0x0801bdc4

08013a30 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013a30:	b590      	push	{r4, r7, lr}
 8013a32:	b085      	sub	sp, #20
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d106      	bne.n	8013a4c <tcp_send_fin+0x1c>
 8013a3e:	4b21      	ldr	r3, [pc, #132]	; (8013ac4 <tcp_send_fin+0x94>)
 8013a40:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013a44:	4920      	ldr	r1, [pc, #128]	; (8013ac8 <tcp_send_fin+0x98>)
 8013a46:	4821      	ldr	r0, [pc, #132]	; (8013acc <tcp_send_fin+0x9c>)
 8013a48:	f004 fdb6 	bl	80185b8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d02e      	beq.n	8013ab2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a58:	60fb      	str	r3, [r7, #12]
 8013a5a:	e002      	b.n	8013a62 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d1f8      	bne.n	8013a5c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	68db      	ldr	r3, [r3, #12]
 8013a6e:	899b      	ldrh	r3, [r3, #12]
 8013a70:	b29b      	uxth	r3, r3
 8013a72:	4618      	mov	r0, r3
 8013a74:	f7f9 fae6 	bl	800d044 <lwip_htons>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	f003 0307 	and.w	r3, r3, #7
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d116      	bne.n	8013ab2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	68db      	ldr	r3, [r3, #12]
 8013a88:	899b      	ldrh	r3, [r3, #12]
 8013a8a:	b29c      	uxth	r4, r3
 8013a8c:	2001      	movs	r0, #1
 8013a8e:	f7f9 fad9 	bl	800d044 <lwip_htons>
 8013a92:	4603      	mov	r3, r0
 8013a94:	461a      	mov	r2, r3
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	68db      	ldr	r3, [r3, #12]
 8013a9a:	4322      	orrs	r2, r4
 8013a9c:	b292      	uxth	r2, r2
 8013a9e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	8b5b      	ldrh	r3, [r3, #26]
 8013aa4:	f043 0320 	orr.w	r3, r3, #32
 8013aa8:	b29a      	uxth	r2, r3
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	e004      	b.n	8013abc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013ab2:	2101      	movs	r1, #1
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f000 f80b 	bl	8013ad0 <tcp_enqueue_flags>
 8013aba:	4603      	mov	r3, r0
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	3714      	adds	r7, #20
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd90      	pop	{r4, r7, pc}
 8013ac4:	0801b9c8 	.word	0x0801b9c8
 8013ac8:	0801bdd0 	.word	0x0801bdd0
 8013acc:	0801ba1c 	.word	0x0801ba1c

08013ad0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b08a      	sub	sp, #40	; 0x28
 8013ad4:	af02      	add	r7, sp, #8
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	460b      	mov	r3, r1
 8013ada:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013adc:	2300      	movs	r3, #0
 8013ade:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013ae4:	78fb      	ldrb	r3, [r7, #3]
 8013ae6:	f003 0303 	and.w	r3, r3, #3
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d106      	bne.n	8013afc <tcp_enqueue_flags+0x2c>
 8013aee:	4b67      	ldr	r3, [pc, #412]	; (8013c8c <tcp_enqueue_flags+0x1bc>)
 8013af0:	f240 4211 	movw	r2, #1041	; 0x411
 8013af4:	4966      	ldr	r1, [pc, #408]	; (8013c90 <tcp_enqueue_flags+0x1c0>)
 8013af6:	4867      	ldr	r0, [pc, #412]	; (8013c94 <tcp_enqueue_flags+0x1c4>)
 8013af8:	f004 fd5e 	bl	80185b8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d106      	bne.n	8013b10 <tcp_enqueue_flags+0x40>
 8013b02:	4b62      	ldr	r3, [pc, #392]	; (8013c8c <tcp_enqueue_flags+0x1bc>)
 8013b04:	f240 4213 	movw	r2, #1043	; 0x413
 8013b08:	4963      	ldr	r1, [pc, #396]	; (8013c98 <tcp_enqueue_flags+0x1c8>)
 8013b0a:	4862      	ldr	r0, [pc, #392]	; (8013c94 <tcp_enqueue_flags+0x1c4>)
 8013b0c:	f004 fd54 	bl	80185b8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013b10:	78fb      	ldrb	r3, [r7, #3]
 8013b12:	f003 0302 	and.w	r3, r3, #2
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d001      	beq.n	8013b1e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013b1e:	7ffb      	ldrb	r3, [r7, #31]
 8013b20:	009b      	lsls	r3, r3, #2
 8013b22:	b2db      	uxtb	r3, r3
 8013b24:	f003 0304 	and.w	r3, r3, #4
 8013b28:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013b2a:	7dfb      	ldrb	r3, [r7, #23]
 8013b2c:	b29b      	uxth	r3, r3
 8013b2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b32:	4619      	mov	r1, r3
 8013b34:	2036      	movs	r0, #54	; 0x36
 8013b36:	f7fa fae9 	bl	800e10c <pbuf_alloc>
 8013b3a:	6138      	str	r0, [r7, #16]
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d109      	bne.n	8013b56 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	8b5b      	ldrh	r3, [r3, #26]
 8013b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b4a:	b29a      	uxth	r2, r3
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013b50:	f04f 33ff 	mov.w	r3, #4294967295
 8013b54:	e095      	b.n	8013c82 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	895a      	ldrh	r2, [r3, #10]
 8013b5a:	7dfb      	ldrb	r3, [r7, #23]
 8013b5c:	b29b      	uxth	r3, r3
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d206      	bcs.n	8013b70 <tcp_enqueue_flags+0xa0>
 8013b62:	4b4a      	ldr	r3, [pc, #296]	; (8013c8c <tcp_enqueue_flags+0x1bc>)
 8013b64:	f240 4239 	movw	r2, #1081	; 0x439
 8013b68:	494c      	ldr	r1, [pc, #304]	; (8013c9c <tcp_enqueue_flags+0x1cc>)
 8013b6a:	484a      	ldr	r0, [pc, #296]	; (8013c94 <tcp_enqueue_flags+0x1c4>)
 8013b6c:	f004 fd24 	bl	80185b8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013b74:	78fa      	ldrb	r2, [r7, #3]
 8013b76:	7ffb      	ldrb	r3, [r7, #31]
 8013b78:	9300      	str	r3, [sp, #0]
 8013b7a:	460b      	mov	r3, r1
 8013b7c:	6939      	ldr	r1, [r7, #16]
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	f7ff f918 	bl	8012db4 <tcp_create_segment>
 8013b84:	60f8      	str	r0, [r7, #12]
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d109      	bne.n	8013ba0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	8b5b      	ldrh	r3, [r3, #26]
 8013b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b94:	b29a      	uxth	r2, r3
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8013b9e:	e070      	b.n	8013c82 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	68db      	ldr	r3, [r3, #12]
 8013ba4:	f003 0303 	and.w	r3, r3, #3
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d006      	beq.n	8013bba <tcp_enqueue_flags+0xea>
 8013bac:	4b37      	ldr	r3, [pc, #220]	; (8013c8c <tcp_enqueue_flags+0x1bc>)
 8013bae:	f240 4242 	movw	r2, #1090	; 0x442
 8013bb2:	493b      	ldr	r1, [pc, #236]	; (8013ca0 <tcp_enqueue_flags+0x1d0>)
 8013bb4:	4837      	ldr	r0, [pc, #220]	; (8013c94 <tcp_enqueue_flags+0x1c4>)
 8013bb6:	f004 fcff 	bl	80185b8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	891b      	ldrh	r3, [r3, #8]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d006      	beq.n	8013bd0 <tcp_enqueue_flags+0x100>
 8013bc2:	4b32      	ldr	r3, [pc, #200]	; (8013c8c <tcp_enqueue_flags+0x1bc>)
 8013bc4:	f240 4243 	movw	r2, #1091	; 0x443
 8013bc8:	4936      	ldr	r1, [pc, #216]	; (8013ca4 <tcp_enqueue_flags+0x1d4>)
 8013bca:	4832      	ldr	r0, [pc, #200]	; (8013c94 <tcp_enqueue_flags+0x1c4>)
 8013bcc:	f004 fcf4 	bl	80185b8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d103      	bne.n	8013be0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	68fa      	ldr	r2, [r7, #12]
 8013bdc:	66da      	str	r2, [r3, #108]	; 0x6c
 8013bde:	e00d      	b.n	8013bfc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013be4:	61bb      	str	r3, [r7, #24]
 8013be6:	e002      	b.n	8013bee <tcp_enqueue_flags+0x11e>
 8013be8:	69bb      	ldr	r3, [r7, #24]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	61bb      	str	r3, [r7, #24]
 8013bee:	69bb      	ldr	r3, [r7, #24]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d1f8      	bne.n	8013be8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013bf6:	69bb      	ldr	r3, [r7, #24]
 8013bf8:	68fa      	ldr	r2, [r7, #12]
 8013bfa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2200      	movs	r2, #0
 8013c00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013c04:	78fb      	ldrb	r3, [r7, #3]
 8013c06:	f003 0302 	and.w	r3, r3, #2
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d104      	bne.n	8013c18 <tcp_enqueue_flags+0x148>
 8013c0e:	78fb      	ldrb	r3, [r7, #3]
 8013c10:	f003 0301 	and.w	r3, r3, #1
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d004      	beq.n	8013c22 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013c1c:	1c5a      	adds	r2, r3, #1
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013c22:	78fb      	ldrb	r3, [r7, #3]
 8013c24:	f003 0301 	and.w	r3, r3, #1
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d006      	beq.n	8013c3a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	8b5b      	ldrh	r3, [r3, #26]
 8013c30:	f043 0320 	orr.w	r3, r3, #32
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	685b      	ldr	r3, [r3, #4]
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7fa fdd6 	bl	800e7f0 <pbuf_clen>
 8013c44:	4603      	mov	r3, r0
 8013c46:	461a      	mov	r2, r3
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c4e:	4413      	add	r3, r2
 8013c50:	b29a      	uxth	r2, r3
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d00e      	beq.n	8013c80 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d10a      	bne.n	8013c80 <tcp_enqueue_flags+0x1b0>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d106      	bne.n	8013c80 <tcp_enqueue_flags+0x1b0>
 8013c72:	4b06      	ldr	r3, [pc, #24]	; (8013c8c <tcp_enqueue_flags+0x1bc>)
 8013c74:	f240 4265 	movw	r2, #1125	; 0x465
 8013c78:	490b      	ldr	r1, [pc, #44]	; (8013ca8 <tcp_enqueue_flags+0x1d8>)
 8013c7a:	4806      	ldr	r0, [pc, #24]	; (8013c94 <tcp_enqueue_flags+0x1c4>)
 8013c7c:	f004 fc9c 	bl	80185b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013c80:	2300      	movs	r3, #0
}
 8013c82:	4618      	mov	r0, r3
 8013c84:	3720      	adds	r7, #32
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}
 8013c8a:	bf00      	nop
 8013c8c:	0801b9c8 	.word	0x0801b9c8
 8013c90:	0801bdec 	.word	0x0801bdec
 8013c94:	0801ba1c 	.word	0x0801ba1c
 8013c98:	0801be44 	.word	0x0801be44
 8013c9c:	0801be64 	.word	0x0801be64
 8013ca0:	0801bea0 	.word	0x0801bea0
 8013ca4:	0801beb8 	.word	0x0801beb8
 8013ca8:	0801bee4 	.word	0x0801bee4

08013cac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013cac:	b5b0      	push	{r4, r5, r7, lr}
 8013cae:	b08a      	sub	sp, #40	; 0x28
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d106      	bne.n	8013cc8 <tcp_output+0x1c>
 8013cba:	4b9e      	ldr	r3, [pc, #632]	; (8013f34 <tcp_output+0x288>)
 8013cbc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013cc0:	499d      	ldr	r1, [pc, #628]	; (8013f38 <tcp_output+0x28c>)
 8013cc2:	489e      	ldr	r0, [pc, #632]	; (8013f3c <tcp_output+0x290>)
 8013cc4:	f004 fc78 	bl	80185b8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	7d1b      	ldrb	r3, [r3, #20]
 8013ccc:	2b01      	cmp	r3, #1
 8013cce:	d106      	bne.n	8013cde <tcp_output+0x32>
 8013cd0:	4b98      	ldr	r3, [pc, #608]	; (8013f34 <tcp_output+0x288>)
 8013cd2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013cd6:	499a      	ldr	r1, [pc, #616]	; (8013f40 <tcp_output+0x294>)
 8013cd8:	4898      	ldr	r0, [pc, #608]	; (8013f3c <tcp_output+0x290>)
 8013cda:	f004 fc6d 	bl	80185b8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013cde:	4b99      	ldr	r3, [pc, #612]	; (8013f44 <tcp_output+0x298>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	687a      	ldr	r2, [r7, #4]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d101      	bne.n	8013cec <tcp_output+0x40>
    return ERR_OK;
 8013ce8:	2300      	movs	r3, #0
 8013cea:	e1ce      	b.n	801408a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013cf8:	4293      	cmp	r3, r2
 8013cfa:	bf28      	it	cs
 8013cfc:	4613      	movcs	r3, r2
 8013cfe:	b29b      	uxth	r3, r3
 8013d00:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d06:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d10b      	bne.n	8013d26 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	8b5b      	ldrh	r3, [r3, #26]
 8013d12:	f003 0302 	and.w	r3, r3, #2
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	f000 81aa 	beq.w	8014070 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f000 fdcb 	bl	80148b8 <tcp_send_empty_ack>
 8013d22:	4603      	mov	r3, r0
 8013d24:	e1b1      	b.n	801408a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013d26:	6879      	ldr	r1, [r7, #4]
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	3304      	adds	r3, #4
 8013d2c:	461a      	mov	r2, r3
 8013d2e:	6878      	ldr	r0, [r7, #4]
 8013d30:	f7ff f824 	bl	8012d7c <tcp_route>
 8013d34:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013d36:	697b      	ldr	r3, [r7, #20]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d102      	bne.n	8013d42 <tcp_output+0x96>
    return ERR_RTE;
 8013d3c:	f06f 0303 	mvn.w	r3, #3
 8013d40:	e1a3      	b.n	801408a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d003      	beq.n	8013d50 <tcp_output+0xa4>
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d111      	bne.n	8013d74 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d002      	beq.n	8013d5c <tcp_output+0xb0>
 8013d56:	697b      	ldr	r3, [r7, #20]
 8013d58:	3304      	adds	r3, #4
 8013d5a:	e000      	b.n	8013d5e <tcp_output+0xb2>
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d102      	bne.n	8013d6c <tcp_output+0xc0>
      return ERR_RTE;
 8013d66:	f06f 0303 	mvn.w	r3, #3
 8013d6a:	e18e      	b.n	801408a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	681a      	ldr	r2, [r3, #0]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d76:	68db      	ldr	r3, [r3, #12]
 8013d78:	685b      	ldr	r3, [r3, #4]
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f7f9 f977 	bl	800d06e <lwip_htonl>
 8013d80:	4602      	mov	r2, r0
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d86:	1ad3      	subs	r3, r2, r3
 8013d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d8a:	8912      	ldrh	r2, [r2, #8]
 8013d8c:	4413      	add	r3, r2
 8013d8e:	69ba      	ldr	r2, [r7, #24]
 8013d90:	429a      	cmp	r2, r3
 8013d92:	d227      	bcs.n	8013de4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013d9a:	461a      	mov	r2, r3
 8013d9c:	69bb      	ldr	r3, [r7, #24]
 8013d9e:	4293      	cmp	r3, r2
 8013da0:	d114      	bne.n	8013dcc <tcp_output+0x120>
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d110      	bne.n	8013dcc <tcp_output+0x120>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d10b      	bne.n	8013dcc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2200      	movs	r2, #0
 8013db8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2201      	movs	r2, #1
 8013dc0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	8b5b      	ldrh	r3, [r3, #26]
 8013dd0:	f003 0302 	and.w	r3, r3, #2
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	f000 814d 	beq.w	8014074 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f000 fd6c 	bl	80148b8 <tcp_send_empty_ack>
 8013de0:	4603      	mov	r3, r0
 8013de2:	e152      	b.n	801408a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2200      	movs	r2, #0
 8013de8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013df0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013df2:	6a3b      	ldr	r3, [r7, #32]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	f000 811c 	beq.w	8014032 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013dfa:	e002      	b.n	8013e02 <tcp_output+0x156>
 8013dfc:	6a3b      	ldr	r3, [r7, #32]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	623b      	str	r3, [r7, #32]
 8013e02:	6a3b      	ldr	r3, [r7, #32]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d1f8      	bne.n	8013dfc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013e0a:	e112      	b.n	8014032 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e0e:	68db      	ldr	r3, [r3, #12]
 8013e10:	899b      	ldrh	r3, [r3, #12]
 8013e12:	b29b      	uxth	r3, r3
 8013e14:	4618      	mov	r0, r3
 8013e16:	f7f9 f915 	bl	800d044 <lwip_htons>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	b2db      	uxtb	r3, r3
 8013e1e:	f003 0304 	and.w	r3, r3, #4
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d006      	beq.n	8013e34 <tcp_output+0x188>
 8013e26:	4b43      	ldr	r3, [pc, #268]	; (8013f34 <tcp_output+0x288>)
 8013e28:	f240 5236 	movw	r2, #1334	; 0x536
 8013e2c:	4946      	ldr	r1, [pc, #280]	; (8013f48 <tcp_output+0x29c>)
 8013e2e:	4843      	ldr	r0, [pc, #268]	; (8013f3c <tcp_output+0x290>)
 8013e30:	f004 fbc2 	bl	80185b8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d01f      	beq.n	8013e7c <tcp_output+0x1d0>
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	8b5b      	ldrh	r3, [r3, #26]
 8013e40:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d119      	bne.n	8013e7c <tcp_output+0x1d0>
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d00b      	beq.n	8013e68 <tcp_output+0x1bc>
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d110      	bne.n	8013e7c <tcp_output+0x1d0>
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e5e:	891a      	ldrh	r2, [r3, #8]
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d209      	bcs.n	8013e7c <tcp_output+0x1d0>
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d004      	beq.n	8013e7c <tcp_output+0x1d0>
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e78:	2b08      	cmp	r3, #8
 8013e7a:	d901      	bls.n	8013e80 <tcp_output+0x1d4>
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	e000      	b.n	8013e82 <tcp_output+0x1d6>
 8013e80:	2300      	movs	r3, #0
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d106      	bne.n	8013e94 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	8b5b      	ldrh	r3, [r3, #26]
 8013e8a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	f000 80e4 	beq.w	801405c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	7d1b      	ldrb	r3, [r3, #20]
 8013e98:	2b02      	cmp	r3, #2
 8013e9a:	d00d      	beq.n	8013eb8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9e:	68db      	ldr	r3, [r3, #12]
 8013ea0:	899b      	ldrh	r3, [r3, #12]
 8013ea2:	b29c      	uxth	r4, r3
 8013ea4:	2010      	movs	r0, #16
 8013ea6:	f7f9 f8cd 	bl	800d044 <lwip_htons>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	461a      	mov	r2, r3
 8013eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb0:	68db      	ldr	r3, [r3, #12]
 8013eb2:	4322      	orrs	r2, r4
 8013eb4:	b292      	uxth	r2, r2
 8013eb6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013eb8:	697a      	ldr	r2, [r7, #20]
 8013eba:	6879      	ldr	r1, [r7, #4]
 8013ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ebe:	f000 f909 	bl	80140d4 <tcp_output_segment>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d009      	beq.n	8013ee2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	8b5b      	ldrh	r3, [r3, #26]
 8013ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ed6:	b29a      	uxth	r2, r3
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	835a      	strh	r2, [r3, #26]
      return err;
 8013edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ee0:	e0d3      	b.n	801408a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee4:	681a      	ldr	r2, [r3, #0]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	7d1b      	ldrb	r3, [r3, #20]
 8013eee:	2b02      	cmp	r3, #2
 8013ef0:	d006      	beq.n	8013f00 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	8b5b      	ldrh	r3, [r3, #26]
 8013ef6:	f023 0303 	bic.w	r3, r3, #3
 8013efa:	b29a      	uxth	r2, r3
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f02:	68db      	ldr	r3, [r3, #12]
 8013f04:	685b      	ldr	r3, [r3, #4]
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7f9 f8b1 	bl	800d06e <lwip_htonl>
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f10:	891b      	ldrh	r3, [r3, #8]
 8013f12:	461d      	mov	r5, r3
 8013f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f16:	68db      	ldr	r3, [r3, #12]
 8013f18:	899b      	ldrh	r3, [r3, #12]
 8013f1a:	b29b      	uxth	r3, r3
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f7f9 f891 	bl	800d044 <lwip_htons>
 8013f22:	4603      	mov	r3, r0
 8013f24:	b2db      	uxtb	r3, r3
 8013f26:	f003 0303 	and.w	r3, r3, #3
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d00e      	beq.n	8013f4c <tcp_output+0x2a0>
 8013f2e:	2301      	movs	r3, #1
 8013f30:	e00d      	b.n	8013f4e <tcp_output+0x2a2>
 8013f32:	bf00      	nop
 8013f34:	0801b9c8 	.word	0x0801b9c8
 8013f38:	0801bf0c 	.word	0x0801bf0c
 8013f3c:	0801ba1c 	.word	0x0801ba1c
 8013f40:	0801bf24 	.word	0x0801bf24
 8013f44:	2000da28 	.word	0x2000da28
 8013f48:	0801bf4c 	.word	0x0801bf4c
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	442b      	add	r3, r5
 8013f50:	4423      	add	r3, r4
 8013f52:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	1ad3      	subs	r3, r2, r3
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	da02      	bge.n	8013f66 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	68ba      	ldr	r2, [r7, #8]
 8013f64:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f68:	891b      	ldrh	r3, [r3, #8]
 8013f6a:	461c      	mov	r4, r3
 8013f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6e:	68db      	ldr	r3, [r3, #12]
 8013f70:	899b      	ldrh	r3, [r3, #12]
 8013f72:	b29b      	uxth	r3, r3
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7f9 f865 	bl	800d044 <lwip_htons>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	b2db      	uxtb	r3, r3
 8013f7e:	f003 0303 	and.w	r3, r3, #3
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d001      	beq.n	8013f8a <tcp_output+0x2de>
 8013f86:	2301      	movs	r3, #1
 8013f88:	e000      	b.n	8013f8c <tcp_output+0x2e0>
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	4423      	add	r3, r4
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d049      	beq.n	8014026 <tcp_output+0x37a>
      seg->next = NULL;
 8013f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f94:	2200      	movs	r2, #0
 8013f96:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d105      	bne.n	8013fac <tcp_output+0x300>
        pcb->unacked = seg;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fa4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa8:	623b      	str	r3, [r7, #32]
 8013faa:	e03f      	b.n	801402c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fae:	68db      	ldr	r3, [r3, #12]
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f7f9 f85b 	bl	800d06e <lwip_htonl>
 8013fb8:	4604      	mov	r4, r0
 8013fba:	6a3b      	ldr	r3, [r7, #32]
 8013fbc:	68db      	ldr	r3, [r3, #12]
 8013fbe:	685b      	ldr	r3, [r3, #4]
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7f9 f854 	bl	800d06e <lwip_htonl>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	1ae3      	subs	r3, r4, r3
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	da24      	bge.n	8014018 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	3370      	adds	r3, #112	; 0x70
 8013fd2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013fd4:	e002      	b.n	8013fdc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013fd6:	69fb      	ldr	r3, [r7, #28]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013fdc:	69fb      	ldr	r3, [r7, #28]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d011      	beq.n	8014008 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013fe4:	69fb      	ldr	r3, [r7, #28]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	68db      	ldr	r3, [r3, #12]
 8013fea:	685b      	ldr	r3, [r3, #4]
 8013fec:	4618      	mov	r0, r3
 8013fee:	f7f9 f83e 	bl	800d06e <lwip_htonl>
 8013ff2:	4604      	mov	r4, r0
 8013ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff6:	68db      	ldr	r3, [r3, #12]
 8013ff8:	685b      	ldr	r3, [r3, #4]
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	f7f9 f837 	bl	800d06e <lwip_htonl>
 8014000:	4603      	mov	r3, r0
 8014002:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014004:	2b00      	cmp	r3, #0
 8014006:	dbe6      	blt.n	8013fd6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014008:	69fb      	ldr	r3, [r7, #28]
 801400a:	681a      	ldr	r2, [r3, #0]
 801400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014010:	69fb      	ldr	r3, [r7, #28]
 8014012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014014:	601a      	str	r2, [r3, #0]
 8014016:	e009      	b.n	801402c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014018:	6a3b      	ldr	r3, [r7, #32]
 801401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801401c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801401e:	6a3b      	ldr	r3, [r7, #32]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	623b      	str	r3, [r7, #32]
 8014024:	e002      	b.n	801402c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014026:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014028:	f7fb ff1d 	bl	800fe66 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014030:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014034:	2b00      	cmp	r3, #0
 8014036:	d012      	beq.n	801405e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801403a:	68db      	ldr	r3, [r3, #12]
 801403c:	685b      	ldr	r3, [r3, #4]
 801403e:	4618      	mov	r0, r3
 8014040:	f7f9 f815 	bl	800d06e <lwip_htonl>
 8014044:	4602      	mov	r2, r0
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801404a:	1ad3      	subs	r3, r2, r3
 801404c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801404e:	8912      	ldrh	r2, [r2, #8]
 8014050:	4413      	add	r3, r2
  while (seg != NULL &&
 8014052:	69ba      	ldr	r2, [r7, #24]
 8014054:	429a      	cmp	r2, r3
 8014056:	f4bf aed9 	bcs.w	8013e0c <tcp_output+0x160>
 801405a:	e000      	b.n	801405e <tcp_output+0x3b2>
      break;
 801405c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014062:	2b00      	cmp	r3, #0
 8014064:	d108      	bne.n	8014078 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2200      	movs	r2, #0
 801406a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801406e:	e004      	b.n	801407a <tcp_output+0x3ce>
    goto output_done;
 8014070:	bf00      	nop
 8014072:	e002      	b.n	801407a <tcp_output+0x3ce>
    goto output_done;
 8014074:	bf00      	nop
 8014076:	e000      	b.n	801407a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014078:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	8b5b      	ldrh	r3, [r3, #26]
 801407e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014082:	b29a      	uxth	r2, r3
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014088:	2300      	movs	r3, #0
}
 801408a:	4618      	mov	r0, r3
 801408c:	3728      	adds	r7, #40	; 0x28
 801408e:	46bd      	mov	sp, r7
 8014090:	bdb0      	pop	{r4, r5, r7, pc}
 8014092:	bf00      	nop

08014094 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d106      	bne.n	80140b0 <tcp_output_segment_busy+0x1c>
 80140a2:	4b09      	ldr	r3, [pc, #36]	; (80140c8 <tcp_output_segment_busy+0x34>)
 80140a4:	f240 529a 	movw	r2, #1434	; 0x59a
 80140a8:	4908      	ldr	r1, [pc, #32]	; (80140cc <tcp_output_segment_busy+0x38>)
 80140aa:	4809      	ldr	r0, [pc, #36]	; (80140d0 <tcp_output_segment_busy+0x3c>)
 80140ac:	f004 fa84 	bl	80185b8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	685b      	ldr	r3, [r3, #4]
 80140b4:	7b9b      	ldrb	r3, [r3, #14]
 80140b6:	2b01      	cmp	r3, #1
 80140b8:	d001      	beq.n	80140be <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80140ba:	2301      	movs	r3, #1
 80140bc:	e000      	b.n	80140c0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80140be:	2300      	movs	r3, #0
}
 80140c0:	4618      	mov	r0, r3
 80140c2:	3708      	adds	r7, #8
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bd80      	pop	{r7, pc}
 80140c8:	0801b9c8 	.word	0x0801b9c8
 80140cc:	0801bf64 	.word	0x0801bf64
 80140d0:	0801ba1c 	.word	0x0801ba1c

080140d4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80140d4:	b5b0      	push	{r4, r5, r7, lr}
 80140d6:	b08c      	sub	sp, #48	; 0x30
 80140d8:	af04      	add	r7, sp, #16
 80140da:	60f8      	str	r0, [r7, #12]
 80140dc:	60b9      	str	r1, [r7, #8]
 80140de:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d106      	bne.n	80140f4 <tcp_output_segment+0x20>
 80140e6:	4b63      	ldr	r3, [pc, #396]	; (8014274 <tcp_output_segment+0x1a0>)
 80140e8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80140ec:	4962      	ldr	r1, [pc, #392]	; (8014278 <tcp_output_segment+0x1a4>)
 80140ee:	4863      	ldr	r0, [pc, #396]	; (801427c <tcp_output_segment+0x1a8>)
 80140f0:	f004 fa62 	bl	80185b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d106      	bne.n	8014108 <tcp_output_segment+0x34>
 80140fa:	4b5e      	ldr	r3, [pc, #376]	; (8014274 <tcp_output_segment+0x1a0>)
 80140fc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014100:	495f      	ldr	r1, [pc, #380]	; (8014280 <tcp_output_segment+0x1ac>)
 8014102:	485e      	ldr	r0, [pc, #376]	; (801427c <tcp_output_segment+0x1a8>)
 8014104:	f004 fa58 	bl	80185b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d106      	bne.n	801411c <tcp_output_segment+0x48>
 801410e:	4b59      	ldr	r3, [pc, #356]	; (8014274 <tcp_output_segment+0x1a0>)
 8014110:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014114:	495b      	ldr	r1, [pc, #364]	; (8014284 <tcp_output_segment+0x1b0>)
 8014116:	4859      	ldr	r0, [pc, #356]	; (801427c <tcp_output_segment+0x1a8>)
 8014118:	f004 fa4e 	bl	80185b8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801411c:	68f8      	ldr	r0, [r7, #12]
 801411e:	f7ff ffb9 	bl	8014094 <tcp_output_segment_busy>
 8014122:	4603      	mov	r3, r0
 8014124:	2b00      	cmp	r3, #0
 8014126:	d001      	beq.n	801412c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014128:	2300      	movs	r3, #0
 801412a:	e09f      	b.n	801426c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	68dc      	ldr	r4, [r3, #12]
 8014134:	4610      	mov	r0, r2
 8014136:	f7f8 ff9a 	bl	800d06e <lwip_htonl>
 801413a:	4603      	mov	r3, r0
 801413c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	68dc      	ldr	r4, [r3, #12]
 8014146:	4610      	mov	r0, r2
 8014148:	f7f8 ff7c 	bl	800d044 <lwip_htons>
 801414c:	4603      	mov	r3, r0
 801414e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014154:	68ba      	ldr	r2, [r7, #8]
 8014156:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014158:	441a      	add	r2, r3
 801415a:	68bb      	ldr	r3, [r7, #8]
 801415c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	68db      	ldr	r3, [r3, #12]
 8014162:	3314      	adds	r3, #20
 8014164:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	7a9b      	ldrb	r3, [r3, #10]
 801416a:	f003 0301 	and.w	r3, r3, #1
 801416e:	2b00      	cmp	r3, #0
 8014170:	d015      	beq.n	801419e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	3304      	adds	r3, #4
 8014176:	461a      	mov	r2, r3
 8014178:	6879      	ldr	r1, [r7, #4]
 801417a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801417e:	f7fc fa37 	bl	80105f0 <tcp_eff_send_mss_netif>
 8014182:	4603      	mov	r3, r0
 8014184:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014186:	8b7b      	ldrh	r3, [r7, #26]
 8014188:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801418c:	4618      	mov	r0, r3
 801418e:	f7f8 ff6e 	bl	800d06e <lwip_htonl>
 8014192:	4602      	mov	r2, r0
 8014194:	69fb      	ldr	r3, [r7, #28]
 8014196:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014198:	69fb      	ldr	r3, [r7, #28]
 801419a:	3304      	adds	r3, #4
 801419c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	da02      	bge.n	80141ae <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	2200      	movs	r2, #0
 80141ac:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d10c      	bne.n	80141d0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80141b6:	4b34      	ldr	r3, [pc, #208]	; (8014288 <tcp_output_segment+0x1b4>)
 80141b8:	681a      	ldr	r2, [r3, #0]
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	68db      	ldr	r3, [r3, #12]
 80141c2:	685b      	ldr	r3, [r3, #4]
 80141c4:	4618      	mov	r0, r3
 80141c6:	f7f8 ff52 	bl	800d06e <lwip_htonl>
 80141ca:	4602      	mov	r2, r0
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	68da      	ldr	r2, [r3, #12]
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	685b      	ldr	r3, [r3, #4]
 80141d8:	685b      	ldr	r3, [r3, #4]
 80141da:	1ad3      	subs	r3, r2, r3
 80141dc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	685b      	ldr	r3, [r3, #4]
 80141e2:	8959      	ldrh	r1, [r3, #10]
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	685b      	ldr	r3, [r3, #4]
 80141e8:	8b3a      	ldrh	r2, [r7, #24]
 80141ea:	1a8a      	subs	r2, r1, r2
 80141ec:	b292      	uxth	r2, r2
 80141ee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	685b      	ldr	r3, [r3, #4]
 80141f4:	8919      	ldrh	r1, [r3, #8]
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	685b      	ldr	r3, [r3, #4]
 80141fa:	8b3a      	ldrh	r2, [r7, #24]
 80141fc:	1a8a      	subs	r2, r1, r2
 80141fe:	b292      	uxth	r2, r2
 8014200:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	68fa      	ldr	r2, [r7, #12]
 8014208:	68d2      	ldr	r2, [r2, #12]
 801420a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	68db      	ldr	r3, [r3, #12]
 8014210:	2200      	movs	r2, #0
 8014212:	741a      	strb	r2, [r3, #16]
 8014214:	2200      	movs	r2, #0
 8014216:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	68db      	ldr	r3, [r3, #12]
 801421c:	f103 0214 	add.w	r2, r3, #20
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	7a9b      	ldrb	r3, [r3, #10]
 8014224:	009b      	lsls	r3, r3, #2
 8014226:	f003 0304 	and.w	r3, r3, #4
 801422a:	4413      	add	r3, r2
 801422c:	69fa      	ldr	r2, [r7, #28]
 801422e:	429a      	cmp	r2, r3
 8014230:	d006      	beq.n	8014240 <tcp_output_segment+0x16c>
 8014232:	4b10      	ldr	r3, [pc, #64]	; (8014274 <tcp_output_segment+0x1a0>)
 8014234:	f240 621c 	movw	r2, #1564	; 0x61c
 8014238:	4914      	ldr	r1, [pc, #80]	; (801428c <tcp_output_segment+0x1b8>)
 801423a:	4810      	ldr	r0, [pc, #64]	; (801427c <tcp_output_segment+0x1a8>)
 801423c:	f004 f9bc 	bl	80185b8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	6858      	ldr	r0, [r3, #4]
 8014244:	68b9      	ldr	r1, [r7, #8]
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	1d1c      	adds	r4, r3, #4
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	7add      	ldrb	r5, [r3, #11]
 801424e:	68bb      	ldr	r3, [r7, #8]
 8014250:	7a9b      	ldrb	r3, [r3, #10]
 8014252:	687a      	ldr	r2, [r7, #4]
 8014254:	9202      	str	r2, [sp, #8]
 8014256:	2206      	movs	r2, #6
 8014258:	9201      	str	r2, [sp, #4]
 801425a:	9300      	str	r3, [sp, #0]
 801425c:	462b      	mov	r3, r5
 801425e:	4622      	mov	r2, r4
 8014260:	f002 fd96 	bl	8016d90 <ip4_output_if>
 8014264:	4603      	mov	r3, r0
 8014266:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014268:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801426c:	4618      	mov	r0, r3
 801426e:	3720      	adds	r7, #32
 8014270:	46bd      	mov	sp, r7
 8014272:	bdb0      	pop	{r4, r5, r7, pc}
 8014274:	0801b9c8 	.word	0x0801b9c8
 8014278:	0801bf8c 	.word	0x0801bf8c
 801427c:	0801ba1c 	.word	0x0801ba1c
 8014280:	0801bfac 	.word	0x0801bfac
 8014284:	0801bfcc 	.word	0x0801bfcc
 8014288:	2000da18 	.word	0x2000da18
 801428c:	0801bff0 	.word	0x0801bff0

08014290 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014290:	b5b0      	push	{r4, r5, r7, lr}
 8014292:	b084      	sub	sp, #16
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d106      	bne.n	80142ac <tcp_rexmit_rto_prepare+0x1c>
 801429e:	4b31      	ldr	r3, [pc, #196]	; (8014364 <tcp_rexmit_rto_prepare+0xd4>)
 80142a0:	f240 6263 	movw	r2, #1635	; 0x663
 80142a4:	4930      	ldr	r1, [pc, #192]	; (8014368 <tcp_rexmit_rto_prepare+0xd8>)
 80142a6:	4831      	ldr	r0, [pc, #196]	; (801436c <tcp_rexmit_rto_prepare+0xdc>)
 80142a8:	f004 f986 	bl	80185b8 <iprintf>

  if (pcb->unacked == NULL) {
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d102      	bne.n	80142ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80142b4:	f06f 0305 	mvn.w	r3, #5
 80142b8:	e050      	b.n	801435c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142be:	60fb      	str	r3, [r7, #12]
 80142c0:	e00b      	b.n	80142da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80142c2:	68f8      	ldr	r0, [r7, #12]
 80142c4:	f7ff fee6 	bl	8014094 <tcp_output_segment_busy>
 80142c8:	4603      	mov	r3, r0
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d002      	beq.n	80142d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80142ce:	f06f 0305 	mvn.w	r3, #5
 80142d2:	e043      	b.n	801435c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	60fb      	str	r3, [r7, #12]
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d1ef      	bne.n	80142c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80142e2:	68f8      	ldr	r0, [r7, #12]
 80142e4:	f7ff fed6 	bl	8014094 <tcp_output_segment_busy>
 80142e8:	4603      	mov	r3, r0
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d002      	beq.n	80142f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80142ee:	f06f 0305 	mvn.w	r3, #5
 80142f2:	e033      	b.n	801435c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	2200      	movs	r2, #0
 8014308:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	8b5b      	ldrh	r3, [r3, #26]
 801430e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014312:	b29a      	uxth	r2, r3
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	68db      	ldr	r3, [r3, #12]
 801431c:	685b      	ldr	r3, [r3, #4]
 801431e:	4618      	mov	r0, r3
 8014320:	f7f8 fea5 	bl	800d06e <lwip_htonl>
 8014324:	4604      	mov	r4, r0
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	891b      	ldrh	r3, [r3, #8]
 801432a:	461d      	mov	r5, r3
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	68db      	ldr	r3, [r3, #12]
 8014330:	899b      	ldrh	r3, [r3, #12]
 8014332:	b29b      	uxth	r3, r3
 8014334:	4618      	mov	r0, r3
 8014336:	f7f8 fe85 	bl	800d044 <lwip_htons>
 801433a:	4603      	mov	r3, r0
 801433c:	b2db      	uxtb	r3, r3
 801433e:	f003 0303 	and.w	r3, r3, #3
 8014342:	2b00      	cmp	r3, #0
 8014344:	d001      	beq.n	801434a <tcp_rexmit_rto_prepare+0xba>
 8014346:	2301      	movs	r3, #1
 8014348:	e000      	b.n	801434c <tcp_rexmit_rto_prepare+0xbc>
 801434a:	2300      	movs	r3, #0
 801434c:	442b      	add	r3, r5
 801434e:	18e2      	adds	r2, r4, r3
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2200      	movs	r2, #0
 8014358:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801435a:	2300      	movs	r3, #0
}
 801435c:	4618      	mov	r0, r3
 801435e:	3710      	adds	r7, #16
 8014360:	46bd      	mov	sp, r7
 8014362:	bdb0      	pop	{r4, r5, r7, pc}
 8014364:	0801b9c8 	.word	0x0801b9c8
 8014368:	0801c004 	.word	0x0801c004
 801436c:	0801ba1c 	.word	0x0801ba1c

08014370 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b082      	sub	sp, #8
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d106      	bne.n	801438c <tcp_rexmit_rto_commit+0x1c>
 801437e:	4b0d      	ldr	r3, [pc, #52]	; (80143b4 <tcp_rexmit_rto_commit+0x44>)
 8014380:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014384:	490c      	ldr	r1, [pc, #48]	; (80143b8 <tcp_rexmit_rto_commit+0x48>)
 8014386:	480d      	ldr	r0, [pc, #52]	; (80143bc <tcp_rexmit_rto_commit+0x4c>)
 8014388:	f004 f916 	bl	80185b8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014392:	2bff      	cmp	r3, #255	; 0xff
 8014394:	d007      	beq.n	80143a6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801439c:	3301      	adds	r3, #1
 801439e:	b2da      	uxtb	r2, r3
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f7ff fc80 	bl	8013cac <tcp_output>
}
 80143ac:	bf00      	nop
 80143ae:	3708      	adds	r7, #8
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}
 80143b4:	0801b9c8 	.word	0x0801b9c8
 80143b8:	0801c028 	.word	0x0801c028
 80143bc:	0801ba1c 	.word	0x0801ba1c

080143c0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b082      	sub	sp, #8
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d106      	bne.n	80143dc <tcp_rexmit_rto+0x1c>
 80143ce:	4b0a      	ldr	r3, [pc, #40]	; (80143f8 <tcp_rexmit_rto+0x38>)
 80143d0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80143d4:	4909      	ldr	r1, [pc, #36]	; (80143fc <tcp_rexmit_rto+0x3c>)
 80143d6:	480a      	ldr	r0, [pc, #40]	; (8014400 <tcp_rexmit_rto+0x40>)
 80143d8:	f004 f8ee 	bl	80185b8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f7ff ff57 	bl	8014290 <tcp_rexmit_rto_prepare>
 80143e2:	4603      	mov	r3, r0
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d102      	bne.n	80143ee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f7ff ffc1 	bl	8014370 <tcp_rexmit_rto_commit>
  }
}
 80143ee:	bf00      	nop
 80143f0:	3708      	adds	r7, #8
 80143f2:	46bd      	mov	sp, r7
 80143f4:	bd80      	pop	{r7, pc}
 80143f6:	bf00      	nop
 80143f8:	0801b9c8 	.word	0x0801b9c8
 80143fc:	0801c04c 	.word	0x0801c04c
 8014400:	0801ba1c 	.word	0x0801ba1c

08014404 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014404:	b590      	push	{r4, r7, lr}
 8014406:	b085      	sub	sp, #20
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d106      	bne.n	8014420 <tcp_rexmit+0x1c>
 8014412:	4b2f      	ldr	r3, [pc, #188]	; (80144d0 <tcp_rexmit+0xcc>)
 8014414:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014418:	492e      	ldr	r1, [pc, #184]	; (80144d4 <tcp_rexmit+0xd0>)
 801441a:	482f      	ldr	r0, [pc, #188]	; (80144d8 <tcp_rexmit+0xd4>)
 801441c:	f004 f8cc 	bl	80185b8 <iprintf>

  if (pcb->unacked == NULL) {
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014424:	2b00      	cmp	r3, #0
 8014426:	d102      	bne.n	801442e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014428:	f06f 0305 	mvn.w	r3, #5
 801442c:	e04c      	b.n	80144c8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014432:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014434:	68b8      	ldr	r0, [r7, #8]
 8014436:	f7ff fe2d 	bl	8014094 <tcp_output_segment_busy>
 801443a:	4603      	mov	r3, r0
 801443c:	2b00      	cmp	r3, #0
 801443e:	d002      	beq.n	8014446 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014440:	f06f 0305 	mvn.w	r3, #5
 8014444:	e040      	b.n	80144c8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	681a      	ldr	r2, [r3, #0]
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	336c      	adds	r3, #108	; 0x6c
 8014452:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014454:	e002      	b.n	801445c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d011      	beq.n	8014488 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	68db      	ldr	r3, [r3, #12]
 801446a:	685b      	ldr	r3, [r3, #4]
 801446c:	4618      	mov	r0, r3
 801446e:	f7f8 fdfe 	bl	800d06e <lwip_htonl>
 8014472:	4604      	mov	r4, r0
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	68db      	ldr	r3, [r3, #12]
 8014478:	685b      	ldr	r3, [r3, #4]
 801447a:	4618      	mov	r0, r3
 801447c:	f7f8 fdf7 	bl	800d06e <lwip_htonl>
 8014480:	4603      	mov	r3, r0
 8014482:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014484:	2b00      	cmp	r3, #0
 8014486:	dbe6      	blt.n	8014456 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	681a      	ldr	r2, [r3, #0]
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	68ba      	ldr	r2, [r7, #8]
 8014494:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d103      	bne.n	80144a6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	2200      	movs	r2, #0
 80144a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80144ac:	2bff      	cmp	r3, #255	; 0xff
 80144ae:	d007      	beq.n	80144c0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80144b6:	3301      	adds	r3, #1
 80144b8:	b2da      	uxtb	r2, r3
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	2200      	movs	r2, #0
 80144c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80144c6:	2300      	movs	r3, #0
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3714      	adds	r7, #20
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd90      	pop	{r4, r7, pc}
 80144d0:	0801b9c8 	.word	0x0801b9c8
 80144d4:	0801c068 	.word	0x0801c068
 80144d8:	0801ba1c 	.word	0x0801ba1c

080144dc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b082      	sub	sp, #8
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d106      	bne.n	80144f8 <tcp_rexmit_fast+0x1c>
 80144ea:	4b2a      	ldr	r3, [pc, #168]	; (8014594 <tcp_rexmit_fast+0xb8>)
 80144ec:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80144f0:	4929      	ldr	r1, [pc, #164]	; (8014598 <tcp_rexmit_fast+0xbc>)
 80144f2:	482a      	ldr	r0, [pc, #168]	; (801459c <tcp_rexmit_fast+0xc0>)
 80144f4:	f004 f860 	bl	80185b8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d044      	beq.n	801458a <tcp_rexmit_fast+0xae>
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	8b5b      	ldrh	r3, [r3, #26]
 8014504:	f003 0304 	and.w	r3, r3, #4
 8014508:	2b00      	cmp	r3, #0
 801450a:	d13e      	bne.n	801458a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f7ff ff79 	bl	8014404 <tcp_rexmit>
 8014512:	4603      	mov	r3, r0
 8014514:	2b00      	cmp	r3, #0
 8014516:	d138      	bne.n	801458a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014524:	4293      	cmp	r3, r2
 8014526:	bf28      	it	cs
 8014528:	4613      	movcs	r3, r2
 801452a:	b29b      	uxth	r3, r3
 801452c:	0fda      	lsrs	r2, r3, #31
 801452e:	4413      	add	r3, r2
 8014530:	105b      	asrs	r3, r3, #1
 8014532:	b29a      	uxth	r2, r3
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014540:	461a      	mov	r2, r3
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014546:	005b      	lsls	r3, r3, #1
 8014548:	429a      	cmp	r2, r3
 801454a:	d206      	bcs.n	801455a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014550:	005b      	lsls	r3, r3, #1
 8014552:	b29a      	uxth	r2, r3
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014564:	4619      	mov	r1, r3
 8014566:	0049      	lsls	r1, r1, #1
 8014568:	440b      	add	r3, r1
 801456a:	b29b      	uxth	r3, r3
 801456c:	4413      	add	r3, r2
 801456e:	b29a      	uxth	r2, r3
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	8b5b      	ldrh	r3, [r3, #26]
 801457a:	f043 0304 	orr.w	r3, r3, #4
 801457e:	b29a      	uxth	r2, r3
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2200      	movs	r2, #0
 8014588:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801458a:	bf00      	nop
 801458c:	3708      	adds	r7, #8
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	0801b9c8 	.word	0x0801b9c8
 8014598:	0801c080 	.word	0x0801c080
 801459c:	0801ba1c 	.word	0x0801ba1c

080145a0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b086      	sub	sp, #24
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	60f8      	str	r0, [r7, #12]
 80145a8:	607b      	str	r3, [r7, #4]
 80145aa:	460b      	mov	r3, r1
 80145ac:	817b      	strh	r3, [r7, #10]
 80145ae:	4613      	mov	r3, r2
 80145b0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80145b2:	897a      	ldrh	r2, [r7, #10]
 80145b4:	893b      	ldrh	r3, [r7, #8]
 80145b6:	4413      	add	r3, r2
 80145b8:	b29b      	uxth	r3, r3
 80145ba:	3314      	adds	r3, #20
 80145bc:	b29b      	uxth	r3, r3
 80145be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80145c2:	4619      	mov	r1, r3
 80145c4:	2022      	movs	r0, #34	; 0x22
 80145c6:	f7f9 fda1 	bl	800e10c <pbuf_alloc>
 80145ca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80145cc:	697b      	ldr	r3, [r7, #20]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d04d      	beq.n	801466e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80145d2:	897b      	ldrh	r3, [r7, #10]
 80145d4:	3313      	adds	r3, #19
 80145d6:	697a      	ldr	r2, [r7, #20]
 80145d8:	8952      	ldrh	r2, [r2, #10]
 80145da:	4293      	cmp	r3, r2
 80145dc:	db06      	blt.n	80145ec <tcp_output_alloc_header_common+0x4c>
 80145de:	4b26      	ldr	r3, [pc, #152]	; (8014678 <tcp_output_alloc_header_common+0xd8>)
 80145e0:	f240 7223 	movw	r2, #1827	; 0x723
 80145e4:	4925      	ldr	r1, [pc, #148]	; (801467c <tcp_output_alloc_header_common+0xdc>)
 80145e6:	4826      	ldr	r0, [pc, #152]	; (8014680 <tcp_output_alloc_header_common+0xe0>)
 80145e8:	f003 ffe6 	bl	80185b8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80145ec:	697b      	ldr	r3, [r7, #20]
 80145ee:	685b      	ldr	r3, [r3, #4]
 80145f0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80145f2:	8c3b      	ldrh	r3, [r7, #32]
 80145f4:	4618      	mov	r0, r3
 80145f6:	f7f8 fd25 	bl	800d044 <lwip_htons>
 80145fa:	4603      	mov	r3, r0
 80145fc:	461a      	mov	r2, r3
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014604:	4618      	mov	r0, r3
 8014606:	f7f8 fd1d 	bl	800d044 <lwip_htons>
 801460a:	4603      	mov	r3, r0
 801460c:	461a      	mov	r2, r3
 801460e:	693b      	ldr	r3, [r7, #16]
 8014610:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	687a      	ldr	r2, [r7, #4]
 8014616:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014618:	68f8      	ldr	r0, [r7, #12]
 801461a:	f7f8 fd28 	bl	800d06e <lwip_htonl>
 801461e:	4602      	mov	r2, r0
 8014620:	693b      	ldr	r3, [r7, #16]
 8014622:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014624:	897b      	ldrh	r3, [r7, #10]
 8014626:	089b      	lsrs	r3, r3, #2
 8014628:	b29b      	uxth	r3, r3
 801462a:	3305      	adds	r3, #5
 801462c:	b29b      	uxth	r3, r3
 801462e:	031b      	lsls	r3, r3, #12
 8014630:	b29a      	uxth	r2, r3
 8014632:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014636:	b29b      	uxth	r3, r3
 8014638:	4313      	orrs	r3, r2
 801463a:	b29b      	uxth	r3, r3
 801463c:	4618      	mov	r0, r3
 801463e:	f7f8 fd01 	bl	800d044 <lwip_htons>
 8014642:	4603      	mov	r3, r0
 8014644:	461a      	mov	r2, r3
 8014646:	693b      	ldr	r3, [r7, #16]
 8014648:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801464a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801464c:	4618      	mov	r0, r3
 801464e:	f7f8 fcf9 	bl	800d044 <lwip_htons>
 8014652:	4603      	mov	r3, r0
 8014654:	461a      	mov	r2, r3
 8014656:	693b      	ldr	r3, [r7, #16]
 8014658:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801465a:	693b      	ldr	r3, [r7, #16]
 801465c:	2200      	movs	r2, #0
 801465e:	741a      	strb	r2, [r3, #16]
 8014660:	2200      	movs	r2, #0
 8014662:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	2200      	movs	r2, #0
 8014668:	749a      	strb	r2, [r3, #18]
 801466a:	2200      	movs	r2, #0
 801466c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801466e:	697b      	ldr	r3, [r7, #20]
}
 8014670:	4618      	mov	r0, r3
 8014672:	3718      	adds	r7, #24
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}
 8014678:	0801b9c8 	.word	0x0801b9c8
 801467c:	0801c0a0 	.word	0x0801c0a0
 8014680:	0801ba1c 	.word	0x0801ba1c

08014684 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014684:	b5b0      	push	{r4, r5, r7, lr}
 8014686:	b08a      	sub	sp, #40	; 0x28
 8014688:	af04      	add	r7, sp, #16
 801468a:	60f8      	str	r0, [r7, #12]
 801468c:	607b      	str	r3, [r7, #4]
 801468e:	460b      	mov	r3, r1
 8014690:	817b      	strh	r3, [r7, #10]
 8014692:	4613      	mov	r3, r2
 8014694:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d106      	bne.n	80146aa <tcp_output_alloc_header+0x26>
 801469c:	4b15      	ldr	r3, [pc, #84]	; (80146f4 <tcp_output_alloc_header+0x70>)
 801469e:	f240 7242 	movw	r2, #1858	; 0x742
 80146a2:	4915      	ldr	r1, [pc, #84]	; (80146f8 <tcp_output_alloc_header+0x74>)
 80146a4:	4815      	ldr	r0, [pc, #84]	; (80146fc <tcp_output_alloc_header+0x78>)
 80146a6:	f003 ff87 	bl	80185b8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	8adb      	ldrh	r3, [r3, #22]
 80146b2:	68fa      	ldr	r2, [r7, #12]
 80146b4:	8b12      	ldrh	r2, [r2, #24]
 80146b6:	68f9      	ldr	r1, [r7, #12]
 80146b8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80146ba:	893d      	ldrh	r5, [r7, #8]
 80146bc:	897c      	ldrh	r4, [r7, #10]
 80146be:	9103      	str	r1, [sp, #12]
 80146c0:	2110      	movs	r1, #16
 80146c2:	9102      	str	r1, [sp, #8]
 80146c4:	9201      	str	r2, [sp, #4]
 80146c6:	9300      	str	r3, [sp, #0]
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	462a      	mov	r2, r5
 80146cc:	4621      	mov	r1, r4
 80146ce:	f7ff ff67 	bl	80145a0 <tcp_output_alloc_header_common>
 80146d2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80146d4:	697b      	ldr	r3, [r7, #20]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d006      	beq.n	80146e8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146de:	68fa      	ldr	r2, [r7, #12]
 80146e0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80146e2:	441a      	add	r2, r3
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80146e8:	697b      	ldr	r3, [r7, #20]
}
 80146ea:	4618      	mov	r0, r3
 80146ec:	3718      	adds	r7, #24
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bdb0      	pop	{r4, r5, r7, pc}
 80146f2:	bf00      	nop
 80146f4:	0801b9c8 	.word	0x0801b9c8
 80146f8:	0801c0d0 	.word	0x0801c0d0
 80146fc:	0801ba1c 	.word	0x0801ba1c

08014700 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b088      	sub	sp, #32
 8014704:	af00      	add	r7, sp, #0
 8014706:	60f8      	str	r0, [r7, #12]
 8014708:	60b9      	str	r1, [r7, #8]
 801470a:	4611      	mov	r1, r2
 801470c:	461a      	mov	r2, r3
 801470e:	460b      	mov	r3, r1
 8014710:	71fb      	strb	r3, [r7, #7]
 8014712:	4613      	mov	r3, r2
 8014714:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014716:	2300      	movs	r3, #0
 8014718:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801471a:	68bb      	ldr	r3, [r7, #8]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d106      	bne.n	801472e <tcp_output_fill_options+0x2e>
 8014720:	4b13      	ldr	r3, [pc, #76]	; (8014770 <tcp_output_fill_options+0x70>)
 8014722:	f240 7256 	movw	r2, #1878	; 0x756
 8014726:	4913      	ldr	r1, [pc, #76]	; (8014774 <tcp_output_fill_options+0x74>)
 8014728:	4813      	ldr	r0, [pc, #76]	; (8014778 <tcp_output_fill_options+0x78>)
 801472a:	f003 ff45 	bl	80185b8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	685b      	ldr	r3, [r3, #4]
 8014732:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014734:	69bb      	ldr	r3, [r7, #24]
 8014736:	3314      	adds	r3, #20
 8014738:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801473a:	69bb      	ldr	r3, [r7, #24]
 801473c:	f103 0214 	add.w	r2, r3, #20
 8014740:	8bfb      	ldrh	r3, [r7, #30]
 8014742:	009b      	lsls	r3, r3, #2
 8014744:	4619      	mov	r1, r3
 8014746:	79fb      	ldrb	r3, [r7, #7]
 8014748:	009b      	lsls	r3, r3, #2
 801474a:	f003 0304 	and.w	r3, r3, #4
 801474e:	440b      	add	r3, r1
 8014750:	4413      	add	r3, r2
 8014752:	697a      	ldr	r2, [r7, #20]
 8014754:	429a      	cmp	r2, r3
 8014756:	d006      	beq.n	8014766 <tcp_output_fill_options+0x66>
 8014758:	4b05      	ldr	r3, [pc, #20]	; (8014770 <tcp_output_fill_options+0x70>)
 801475a:	f240 7275 	movw	r2, #1909	; 0x775
 801475e:	4907      	ldr	r1, [pc, #28]	; (801477c <tcp_output_fill_options+0x7c>)
 8014760:	4805      	ldr	r0, [pc, #20]	; (8014778 <tcp_output_fill_options+0x78>)
 8014762:	f003 ff29 	bl	80185b8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014766:	bf00      	nop
 8014768:	3720      	adds	r7, #32
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	0801b9c8 	.word	0x0801b9c8
 8014774:	0801c0f8 	.word	0x0801c0f8
 8014778:	0801ba1c 	.word	0x0801ba1c
 801477c:	0801bff0 	.word	0x0801bff0

08014780 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b08a      	sub	sp, #40	; 0x28
 8014784:	af04      	add	r7, sp, #16
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	607a      	str	r2, [r7, #4]
 801478c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d106      	bne.n	80147a2 <tcp_output_control_segment+0x22>
 8014794:	4b1c      	ldr	r3, [pc, #112]	; (8014808 <tcp_output_control_segment+0x88>)
 8014796:	f240 7287 	movw	r2, #1927	; 0x787
 801479a:	491c      	ldr	r1, [pc, #112]	; (801480c <tcp_output_control_segment+0x8c>)
 801479c:	481c      	ldr	r0, [pc, #112]	; (8014810 <tcp_output_control_segment+0x90>)
 801479e:	f003 ff0b 	bl	80185b8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80147a2:	683a      	ldr	r2, [r7, #0]
 80147a4:	6879      	ldr	r1, [r7, #4]
 80147a6:	68f8      	ldr	r0, [r7, #12]
 80147a8:	f7fe fae8 	bl	8012d7c <tcp_route>
 80147ac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d102      	bne.n	80147ba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80147b4:	23fc      	movs	r3, #252	; 0xfc
 80147b6:	75fb      	strb	r3, [r7, #23]
 80147b8:	e01c      	b.n	80147f4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d006      	beq.n	80147ce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	7adb      	ldrb	r3, [r3, #11]
 80147c4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	7a9b      	ldrb	r3, [r3, #10]
 80147ca:	757b      	strb	r3, [r7, #21]
 80147cc:	e003      	b.n	80147d6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80147ce:	23ff      	movs	r3, #255	; 0xff
 80147d0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80147d2:	2300      	movs	r3, #0
 80147d4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80147d6:	7dba      	ldrb	r2, [r7, #22]
 80147d8:	693b      	ldr	r3, [r7, #16]
 80147da:	9302      	str	r3, [sp, #8]
 80147dc:	2306      	movs	r3, #6
 80147de:	9301      	str	r3, [sp, #4]
 80147e0:	7d7b      	ldrb	r3, [r7, #21]
 80147e2:	9300      	str	r3, [sp, #0]
 80147e4:	4613      	mov	r3, r2
 80147e6:	683a      	ldr	r2, [r7, #0]
 80147e8:	6879      	ldr	r1, [r7, #4]
 80147ea:	68b8      	ldr	r0, [r7, #8]
 80147ec:	f002 fad0 	bl	8016d90 <ip4_output_if>
 80147f0:	4603      	mov	r3, r0
 80147f2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80147f4:	68b8      	ldr	r0, [r7, #8]
 80147f6:	f7f9 ff6d 	bl	800e6d4 <pbuf_free>
  return err;
 80147fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80147fe:	4618      	mov	r0, r3
 8014800:	3718      	adds	r7, #24
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}
 8014806:	bf00      	nop
 8014808:	0801b9c8 	.word	0x0801b9c8
 801480c:	0801c120 	.word	0x0801c120
 8014810:	0801ba1c 	.word	0x0801ba1c

08014814 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014814:	b590      	push	{r4, r7, lr}
 8014816:	b08b      	sub	sp, #44	; 0x2c
 8014818:	af04      	add	r7, sp, #16
 801481a:	60f8      	str	r0, [r7, #12]
 801481c:	60b9      	str	r1, [r7, #8]
 801481e:	607a      	str	r2, [r7, #4]
 8014820:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d106      	bne.n	8014836 <tcp_rst+0x22>
 8014828:	4b1f      	ldr	r3, [pc, #124]	; (80148a8 <tcp_rst+0x94>)
 801482a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801482e:	491f      	ldr	r1, [pc, #124]	; (80148ac <tcp_rst+0x98>)
 8014830:	481f      	ldr	r0, [pc, #124]	; (80148b0 <tcp_rst+0x9c>)
 8014832:	f003 fec1 	bl	80185b8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014838:	2b00      	cmp	r3, #0
 801483a:	d106      	bne.n	801484a <tcp_rst+0x36>
 801483c:	4b1a      	ldr	r3, [pc, #104]	; (80148a8 <tcp_rst+0x94>)
 801483e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014842:	491c      	ldr	r1, [pc, #112]	; (80148b4 <tcp_rst+0xa0>)
 8014844:	481a      	ldr	r0, [pc, #104]	; (80148b0 <tcp_rst+0x9c>)
 8014846:	f003 feb7 	bl	80185b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801484a:	2300      	movs	r3, #0
 801484c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801484e:	f246 0308 	movw	r3, #24584	; 0x6008
 8014852:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014854:	7dfb      	ldrb	r3, [r7, #23]
 8014856:	b29c      	uxth	r4, r3
 8014858:	68b8      	ldr	r0, [r7, #8]
 801485a:	f7f8 fc08 	bl	800d06e <lwip_htonl>
 801485e:	4602      	mov	r2, r0
 8014860:	8abb      	ldrh	r3, [r7, #20]
 8014862:	9303      	str	r3, [sp, #12]
 8014864:	2314      	movs	r3, #20
 8014866:	9302      	str	r3, [sp, #8]
 8014868:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801486a:	9301      	str	r3, [sp, #4]
 801486c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801486e:	9300      	str	r3, [sp, #0]
 8014870:	4613      	mov	r3, r2
 8014872:	2200      	movs	r2, #0
 8014874:	4621      	mov	r1, r4
 8014876:	6878      	ldr	r0, [r7, #4]
 8014878:	f7ff fe92 	bl	80145a0 <tcp_output_alloc_header_common>
 801487c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801487e:	693b      	ldr	r3, [r7, #16]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d00c      	beq.n	801489e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014884:	7dfb      	ldrb	r3, [r7, #23]
 8014886:	2200      	movs	r2, #0
 8014888:	6939      	ldr	r1, [r7, #16]
 801488a:	68f8      	ldr	r0, [r7, #12]
 801488c:	f7ff ff38 	bl	8014700 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014892:	683a      	ldr	r2, [r7, #0]
 8014894:	6939      	ldr	r1, [r7, #16]
 8014896:	68f8      	ldr	r0, [r7, #12]
 8014898:	f7ff ff72 	bl	8014780 <tcp_output_control_segment>
 801489c:	e000      	b.n	80148a0 <tcp_rst+0x8c>
    return;
 801489e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80148a0:	371c      	adds	r7, #28
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bd90      	pop	{r4, r7, pc}
 80148a6:	bf00      	nop
 80148a8:	0801b9c8 	.word	0x0801b9c8
 80148ac:	0801c14c 	.word	0x0801c14c
 80148b0:	0801ba1c 	.word	0x0801ba1c
 80148b4:	0801c168 	.word	0x0801c168

080148b8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80148b8:	b590      	push	{r4, r7, lr}
 80148ba:	b087      	sub	sp, #28
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80148c0:	2300      	movs	r3, #0
 80148c2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80148c4:	2300      	movs	r3, #0
 80148c6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d106      	bne.n	80148dc <tcp_send_empty_ack+0x24>
 80148ce:	4b28      	ldr	r3, [pc, #160]	; (8014970 <tcp_send_empty_ack+0xb8>)
 80148d0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80148d4:	4927      	ldr	r1, [pc, #156]	; (8014974 <tcp_send_empty_ack+0xbc>)
 80148d6:	4828      	ldr	r0, [pc, #160]	; (8014978 <tcp_send_empty_ack+0xc0>)
 80148d8:	f003 fe6e 	bl	80185b8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80148dc:	7dfb      	ldrb	r3, [r7, #23]
 80148de:	009b      	lsls	r3, r3, #2
 80148e0:	b2db      	uxtb	r3, r3
 80148e2:	f003 0304 	and.w	r3, r3, #4
 80148e6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80148e8:	7d7b      	ldrb	r3, [r7, #21]
 80148ea:	b29c      	uxth	r4, r3
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7f8 fbbc 	bl	800d06e <lwip_htonl>
 80148f6:	4603      	mov	r3, r0
 80148f8:	2200      	movs	r2, #0
 80148fa:	4621      	mov	r1, r4
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f7ff fec1 	bl	8014684 <tcp_output_alloc_header>
 8014902:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d109      	bne.n	801491e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	8b5b      	ldrh	r3, [r3, #26]
 801490e:	f043 0303 	orr.w	r3, r3, #3
 8014912:	b29a      	uxth	r2, r3
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014918:	f06f 0301 	mvn.w	r3, #1
 801491c:	e023      	b.n	8014966 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801491e:	7dbb      	ldrb	r3, [r7, #22]
 8014920:	7dfa      	ldrb	r2, [r7, #23]
 8014922:	6939      	ldr	r1, [r7, #16]
 8014924:	6878      	ldr	r0, [r7, #4]
 8014926:	f7ff feeb 	bl	8014700 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801492a:	687a      	ldr	r2, [r7, #4]
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	3304      	adds	r3, #4
 8014930:	6939      	ldr	r1, [r7, #16]
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f7ff ff24 	bl	8014780 <tcp_output_control_segment>
 8014938:	4603      	mov	r3, r0
 801493a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801493c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d007      	beq.n	8014954 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	8b5b      	ldrh	r3, [r3, #26]
 8014948:	f043 0303 	orr.w	r3, r3, #3
 801494c:	b29a      	uxth	r2, r3
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	835a      	strh	r2, [r3, #26]
 8014952:	e006      	b.n	8014962 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	8b5b      	ldrh	r3, [r3, #26]
 8014958:	f023 0303 	bic.w	r3, r3, #3
 801495c:	b29a      	uxth	r2, r3
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014962:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014966:	4618      	mov	r0, r3
 8014968:	371c      	adds	r7, #28
 801496a:	46bd      	mov	sp, r7
 801496c:	bd90      	pop	{r4, r7, pc}
 801496e:	bf00      	nop
 8014970:	0801b9c8 	.word	0x0801b9c8
 8014974:	0801c184 	.word	0x0801c184
 8014978:	0801ba1c 	.word	0x0801ba1c

0801497c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801497c:	b590      	push	{r4, r7, lr}
 801497e:	b087      	sub	sp, #28
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014984:	2300      	movs	r3, #0
 8014986:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d106      	bne.n	801499c <tcp_keepalive+0x20>
 801498e:	4b18      	ldr	r3, [pc, #96]	; (80149f0 <tcp_keepalive+0x74>)
 8014990:	f640 0224 	movw	r2, #2084	; 0x824
 8014994:	4917      	ldr	r1, [pc, #92]	; (80149f4 <tcp_keepalive+0x78>)
 8014996:	4818      	ldr	r0, [pc, #96]	; (80149f8 <tcp_keepalive+0x7c>)
 8014998:	f003 fe0e 	bl	80185b8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801499c:	7dfb      	ldrb	r3, [r7, #23]
 801499e:	b29c      	uxth	r4, r3
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80149a4:	3b01      	subs	r3, #1
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7f8 fb61 	bl	800d06e <lwip_htonl>
 80149ac:	4603      	mov	r3, r0
 80149ae:	2200      	movs	r2, #0
 80149b0:	4621      	mov	r1, r4
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f7ff fe66 	bl	8014684 <tcp_output_alloc_header>
 80149b8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d102      	bne.n	80149c6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80149c0:	f04f 33ff 	mov.w	r3, #4294967295
 80149c4:	e010      	b.n	80149e8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80149c6:	7dfb      	ldrb	r3, [r7, #23]
 80149c8:	2200      	movs	r2, #0
 80149ca:	6939      	ldr	r1, [r7, #16]
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f7ff fe97 	bl	8014700 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	3304      	adds	r3, #4
 80149d8:	6939      	ldr	r1, [r7, #16]
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f7ff fed0 	bl	8014780 <tcp_output_control_segment>
 80149e0:	4603      	mov	r3, r0
 80149e2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80149e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	371c      	adds	r7, #28
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd90      	pop	{r4, r7, pc}
 80149f0:	0801b9c8 	.word	0x0801b9c8
 80149f4:	0801c1a4 	.word	0x0801c1a4
 80149f8:	0801ba1c 	.word	0x0801ba1c

080149fc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80149fc:	b590      	push	{r4, r7, lr}
 80149fe:	b08b      	sub	sp, #44	; 0x2c
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014a04:	2300      	movs	r3, #0
 8014a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d106      	bne.n	8014a1e <tcp_zero_window_probe+0x22>
 8014a10:	4b4c      	ldr	r3, [pc, #304]	; (8014b44 <tcp_zero_window_probe+0x148>)
 8014a12:	f640 024f 	movw	r2, #2127	; 0x84f
 8014a16:	494c      	ldr	r1, [pc, #304]	; (8014b48 <tcp_zero_window_probe+0x14c>)
 8014a18:	484c      	ldr	r0, [pc, #304]	; (8014b4c <tcp_zero_window_probe+0x150>)
 8014a1a:	f003 fdcd 	bl	80185b8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a22:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014a24:	6a3b      	ldr	r3, [r7, #32]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d101      	bne.n	8014a2e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	e086      	b.n	8014b3c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014a34:	2bff      	cmp	r3, #255	; 0xff
 8014a36:	d007      	beq.n	8014a48 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014a3e:	3301      	adds	r3, #1
 8014a40:	b2da      	uxtb	r2, r3
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014a48:	6a3b      	ldr	r3, [r7, #32]
 8014a4a:	68db      	ldr	r3, [r3, #12]
 8014a4c:	899b      	ldrh	r3, [r3, #12]
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7f8 faf7 	bl	800d044 <lwip_htons>
 8014a56:	4603      	mov	r3, r0
 8014a58:	b2db      	uxtb	r3, r3
 8014a5a:	f003 0301 	and.w	r3, r3, #1
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d005      	beq.n	8014a6e <tcp_zero_window_probe+0x72>
 8014a62:	6a3b      	ldr	r3, [r7, #32]
 8014a64:	891b      	ldrh	r3, [r3, #8]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d101      	bne.n	8014a6e <tcp_zero_window_probe+0x72>
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	e000      	b.n	8014a70 <tcp_zero_window_probe+0x74>
 8014a6e:	2300      	movs	r3, #0
 8014a70:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014a72:	7ffb      	ldrb	r3, [r7, #31]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	bf0c      	ite	eq
 8014a78:	2301      	moveq	r3, #1
 8014a7a:	2300      	movne	r3, #0
 8014a7c:	b2db      	uxtb	r3, r3
 8014a7e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a84:	b299      	uxth	r1, r3
 8014a86:	6a3b      	ldr	r3, [r7, #32]
 8014a88:	68db      	ldr	r3, [r3, #12]
 8014a8a:	685b      	ldr	r3, [r3, #4]
 8014a8c:	8bba      	ldrh	r2, [r7, #28]
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f7ff fdf8 	bl	8014684 <tcp_output_alloc_header>
 8014a94:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014a96:	69bb      	ldr	r3, [r7, #24]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d102      	bne.n	8014aa2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8014aa0:	e04c      	b.n	8014b3c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014aa2:	69bb      	ldr	r3, [r7, #24]
 8014aa4:	685b      	ldr	r3, [r3, #4]
 8014aa6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014aa8:	7ffb      	ldrb	r3, [r7, #31]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d011      	beq.n	8014ad2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	899b      	ldrh	r3, [r3, #12]
 8014ab2:	b29b      	uxth	r3, r3
 8014ab4:	b21b      	sxth	r3, r3
 8014ab6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014aba:	b21c      	sxth	r4, r3
 8014abc:	2011      	movs	r0, #17
 8014abe:	f7f8 fac1 	bl	800d044 <lwip_htons>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	b21b      	sxth	r3, r3
 8014ac6:	4323      	orrs	r3, r4
 8014ac8:	b21b      	sxth	r3, r3
 8014aca:	b29a      	uxth	r2, r3
 8014acc:	697b      	ldr	r3, [r7, #20]
 8014ace:	819a      	strh	r2, [r3, #12]
 8014ad0:	e010      	b.n	8014af4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014ad2:	69bb      	ldr	r3, [r7, #24]
 8014ad4:	685b      	ldr	r3, [r3, #4]
 8014ad6:	3314      	adds	r3, #20
 8014ad8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014ada:	6a3b      	ldr	r3, [r7, #32]
 8014adc:	6858      	ldr	r0, [r3, #4]
 8014ade:	6a3b      	ldr	r3, [r7, #32]
 8014ae0:	685b      	ldr	r3, [r3, #4]
 8014ae2:	891a      	ldrh	r2, [r3, #8]
 8014ae4:	6a3b      	ldr	r3, [r7, #32]
 8014ae6:	891b      	ldrh	r3, [r3, #8]
 8014ae8:	1ad3      	subs	r3, r2, r3
 8014aea:	b29b      	uxth	r3, r3
 8014aec:	2201      	movs	r2, #1
 8014aee:	6939      	ldr	r1, [r7, #16]
 8014af0:	f7f9 fff6 	bl	800eae0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014af4:	6a3b      	ldr	r3, [r7, #32]
 8014af6:	68db      	ldr	r3, [r3, #12]
 8014af8:	685b      	ldr	r3, [r3, #4]
 8014afa:	4618      	mov	r0, r3
 8014afc:	f7f8 fab7 	bl	800d06e <lwip_htonl>
 8014b00:	4603      	mov	r3, r0
 8014b02:	3301      	adds	r3, #1
 8014b04:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	1ad3      	subs	r3, r2, r3
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	da02      	bge.n	8014b18 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	68fa      	ldr	r2, [r7, #12]
 8014b16:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	69b9      	ldr	r1, [r7, #24]
 8014b20:	6878      	ldr	r0, [r7, #4]
 8014b22:	f7ff fded 	bl	8014700 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014b26:	687a      	ldr	r2, [r7, #4]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	3304      	adds	r3, #4
 8014b2c:	69b9      	ldr	r1, [r7, #24]
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f7ff fe26 	bl	8014780 <tcp_output_control_segment>
 8014b34:	4603      	mov	r3, r0
 8014b36:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014b38:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	372c      	adds	r7, #44	; 0x2c
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd90      	pop	{r4, r7, pc}
 8014b44:	0801b9c8 	.word	0x0801b9c8
 8014b48:	0801c1c0 	.word	0x0801c1c0
 8014b4c:	0801ba1c 	.word	0x0801ba1c

08014b50 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b082      	sub	sp, #8
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014b58:	f7fa f8b0 	bl	800ecbc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014b5c:	4b0a      	ldr	r3, [pc, #40]	; (8014b88 <tcpip_tcp_timer+0x38>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d103      	bne.n	8014b6c <tcpip_tcp_timer+0x1c>
 8014b64:	4b09      	ldr	r3, [pc, #36]	; (8014b8c <tcpip_tcp_timer+0x3c>)
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d005      	beq.n	8014b78 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	4908      	ldr	r1, [pc, #32]	; (8014b90 <tcpip_tcp_timer+0x40>)
 8014b70:	20fa      	movs	r0, #250	; 0xfa
 8014b72:	f000 f8f3 	bl	8014d5c <sys_timeout>
 8014b76:	e003      	b.n	8014b80 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014b78:	4b06      	ldr	r3, [pc, #24]	; (8014b94 <tcpip_tcp_timer+0x44>)
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	601a      	str	r2, [r3, #0]
  }
}
 8014b7e:	bf00      	nop
 8014b80:	bf00      	nop
 8014b82:	3708      	adds	r7, #8
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}
 8014b88:	2000da14 	.word	0x2000da14
 8014b8c:	2000da24 	.word	0x2000da24
 8014b90:	08014b51 	.word	0x08014b51
 8014b94:	200069d0 	.word	0x200069d0

08014b98 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014b9c:	4b0a      	ldr	r3, [pc, #40]	; (8014bc8 <tcp_timer_needed+0x30>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d10f      	bne.n	8014bc4 <tcp_timer_needed+0x2c>
 8014ba4:	4b09      	ldr	r3, [pc, #36]	; (8014bcc <tcp_timer_needed+0x34>)
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d103      	bne.n	8014bb4 <tcp_timer_needed+0x1c>
 8014bac:	4b08      	ldr	r3, [pc, #32]	; (8014bd0 <tcp_timer_needed+0x38>)
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d007      	beq.n	8014bc4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014bb4:	4b04      	ldr	r3, [pc, #16]	; (8014bc8 <tcp_timer_needed+0x30>)
 8014bb6:	2201      	movs	r2, #1
 8014bb8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014bba:	2200      	movs	r2, #0
 8014bbc:	4905      	ldr	r1, [pc, #20]	; (8014bd4 <tcp_timer_needed+0x3c>)
 8014bbe:	20fa      	movs	r0, #250	; 0xfa
 8014bc0:	f000 f8cc 	bl	8014d5c <sys_timeout>
  }
}
 8014bc4:	bf00      	nop
 8014bc6:	bd80      	pop	{r7, pc}
 8014bc8:	200069d0 	.word	0x200069d0
 8014bcc:	2000da14 	.word	0x2000da14
 8014bd0:	2000da24 	.word	0x2000da24
 8014bd4:	08014b51 	.word	0x08014b51

08014bd8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b086      	sub	sp, #24
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	60f8      	str	r0, [r7, #12]
 8014be0:	60b9      	str	r1, [r7, #8]
 8014be2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014be4:	200a      	movs	r0, #10
 8014be6:	f7f8 fee3 	bl	800d9b0 <memp_malloc>
 8014bea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014bec:	693b      	ldr	r3, [r7, #16]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d109      	bne.n	8014c06 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014bf2:	693b      	ldr	r3, [r7, #16]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d151      	bne.n	8014c9c <sys_timeout_abs+0xc4>
 8014bf8:	4b2a      	ldr	r3, [pc, #168]	; (8014ca4 <sys_timeout_abs+0xcc>)
 8014bfa:	22be      	movs	r2, #190	; 0xbe
 8014bfc:	492a      	ldr	r1, [pc, #168]	; (8014ca8 <sys_timeout_abs+0xd0>)
 8014bfe:	482b      	ldr	r0, [pc, #172]	; (8014cac <sys_timeout_abs+0xd4>)
 8014c00:	f003 fcda 	bl	80185b8 <iprintf>
    return;
 8014c04:	e04a      	b.n	8014c9c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014c06:	693b      	ldr	r3, [r7, #16]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014c0c:	693b      	ldr	r3, [r7, #16]
 8014c0e:	68ba      	ldr	r2, [r7, #8]
 8014c10:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014c12:	693b      	ldr	r3, [r7, #16]
 8014c14:	687a      	ldr	r2, [r7, #4]
 8014c16:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014c18:	693b      	ldr	r3, [r7, #16]
 8014c1a:	68fa      	ldr	r2, [r7, #12]
 8014c1c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014c1e:	4b24      	ldr	r3, [pc, #144]	; (8014cb0 <sys_timeout_abs+0xd8>)
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d103      	bne.n	8014c2e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014c26:	4a22      	ldr	r2, [pc, #136]	; (8014cb0 <sys_timeout_abs+0xd8>)
 8014c28:	693b      	ldr	r3, [r7, #16]
 8014c2a:	6013      	str	r3, [r2, #0]
    return;
 8014c2c:	e037      	b.n	8014c9e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014c2e:	693b      	ldr	r3, [r7, #16]
 8014c30:	685a      	ldr	r2, [r3, #4]
 8014c32:	4b1f      	ldr	r3, [pc, #124]	; (8014cb0 <sys_timeout_abs+0xd8>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	685b      	ldr	r3, [r3, #4]
 8014c38:	1ad3      	subs	r3, r2, r3
 8014c3a:	0fdb      	lsrs	r3, r3, #31
 8014c3c:	f003 0301 	and.w	r3, r3, #1
 8014c40:	b2db      	uxtb	r3, r3
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d007      	beq.n	8014c56 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014c46:	4b1a      	ldr	r3, [pc, #104]	; (8014cb0 <sys_timeout_abs+0xd8>)
 8014c48:	681a      	ldr	r2, [r3, #0]
 8014c4a:	693b      	ldr	r3, [r7, #16]
 8014c4c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014c4e:	4a18      	ldr	r2, [pc, #96]	; (8014cb0 <sys_timeout_abs+0xd8>)
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	6013      	str	r3, [r2, #0]
 8014c54:	e023      	b.n	8014c9e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014c56:	4b16      	ldr	r3, [pc, #88]	; (8014cb0 <sys_timeout_abs+0xd8>)
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	617b      	str	r3, [r7, #20]
 8014c5c:	e01a      	b.n	8014c94 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d00b      	beq.n	8014c7e <sys_timeout_abs+0xa6>
 8014c66:	693b      	ldr	r3, [r7, #16]
 8014c68:	685a      	ldr	r2, [r3, #4]
 8014c6a:	697b      	ldr	r3, [r7, #20]
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	685b      	ldr	r3, [r3, #4]
 8014c70:	1ad3      	subs	r3, r2, r3
 8014c72:	0fdb      	lsrs	r3, r3, #31
 8014c74:	f003 0301 	and.w	r3, r3, #1
 8014c78:	b2db      	uxtb	r3, r3
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d007      	beq.n	8014c8e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014c7e:	697b      	ldr	r3, [r7, #20]
 8014c80:	681a      	ldr	r2, [r3, #0]
 8014c82:	693b      	ldr	r3, [r7, #16]
 8014c84:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014c86:	697b      	ldr	r3, [r7, #20]
 8014c88:	693a      	ldr	r2, [r7, #16]
 8014c8a:	601a      	str	r2, [r3, #0]
        break;
 8014c8c:	e007      	b.n	8014c9e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014c8e:	697b      	ldr	r3, [r7, #20]
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	617b      	str	r3, [r7, #20]
 8014c94:	697b      	ldr	r3, [r7, #20]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d1e1      	bne.n	8014c5e <sys_timeout_abs+0x86>
 8014c9a:	e000      	b.n	8014c9e <sys_timeout_abs+0xc6>
    return;
 8014c9c:	bf00      	nop
      }
    }
  }
}
 8014c9e:	3718      	adds	r7, #24
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd80      	pop	{r7, pc}
 8014ca4:	0801c1e4 	.word	0x0801c1e4
 8014ca8:	0801c218 	.word	0x0801c218
 8014cac:	0801c258 	.word	0x0801c258
 8014cb0:	200069c8 	.word	0x200069c8

08014cb4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b086      	sub	sp, #24
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014cc0:	697b      	ldr	r3, [r7, #20]
 8014cc2:	685b      	ldr	r3, [r3, #4]
 8014cc4:	4798      	blx	r3

  now = sys_now();
 8014cc6:	f7f2 fe93 	bl	80079f0 <sys_now>
 8014cca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	681a      	ldr	r2, [r3, #0]
 8014cd0:	4b0f      	ldr	r3, [pc, #60]	; (8014d10 <lwip_cyclic_timer+0x5c>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	4413      	add	r3, r2
 8014cd6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014cd8:	68fa      	ldr	r2, [r7, #12]
 8014cda:	693b      	ldr	r3, [r7, #16]
 8014cdc:	1ad3      	subs	r3, r2, r3
 8014cde:	0fdb      	lsrs	r3, r3, #31
 8014ce0:	f003 0301 	and.w	r3, r3, #1
 8014ce4:	b2db      	uxtb	r3, r3
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d009      	beq.n	8014cfe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014cea:	697b      	ldr	r3, [r7, #20]
 8014cec:	681a      	ldr	r2, [r3, #0]
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	4413      	add	r3, r2
 8014cf2:	687a      	ldr	r2, [r7, #4]
 8014cf4:	4907      	ldr	r1, [pc, #28]	; (8014d14 <lwip_cyclic_timer+0x60>)
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7ff ff6e 	bl	8014bd8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014cfc:	e004      	b.n	8014d08 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014cfe:	687a      	ldr	r2, [r7, #4]
 8014d00:	4904      	ldr	r1, [pc, #16]	; (8014d14 <lwip_cyclic_timer+0x60>)
 8014d02:	68f8      	ldr	r0, [r7, #12]
 8014d04:	f7ff ff68 	bl	8014bd8 <sys_timeout_abs>
}
 8014d08:	bf00      	nop
 8014d0a:	3718      	adds	r7, #24
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}
 8014d10:	200069cc 	.word	0x200069cc
 8014d14:	08014cb5 	.word	0x08014cb5

08014d18 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b082      	sub	sp, #8
 8014d1c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014d1e:	2301      	movs	r3, #1
 8014d20:	607b      	str	r3, [r7, #4]
 8014d22:	e00e      	b.n	8014d42 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014d24:	4a0b      	ldr	r2, [pc, #44]	; (8014d54 <sys_timeouts_init+0x3c>)
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	00db      	lsls	r3, r3, #3
 8014d30:	4a08      	ldr	r2, [pc, #32]	; (8014d54 <sys_timeouts_init+0x3c>)
 8014d32:	4413      	add	r3, r2
 8014d34:	461a      	mov	r2, r3
 8014d36:	4908      	ldr	r1, [pc, #32]	; (8014d58 <sys_timeouts_init+0x40>)
 8014d38:	f000 f810 	bl	8014d5c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	3301      	adds	r3, #1
 8014d40:	607b      	str	r3, [r7, #4]
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	2b02      	cmp	r3, #2
 8014d46:	d9ed      	bls.n	8014d24 <sys_timeouts_init+0xc>
  }
}
 8014d48:	bf00      	nop
 8014d4a:	bf00      	nop
 8014d4c:	3708      	adds	r7, #8
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}
 8014d52:	bf00      	nop
 8014d54:	0801ce10 	.word	0x0801ce10
 8014d58:	08014cb5 	.word	0x08014cb5

08014d5c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b086      	sub	sp, #24
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	60f8      	str	r0, [r7, #12]
 8014d64:	60b9      	str	r1, [r7, #8]
 8014d66:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014d6e:	d306      	bcc.n	8014d7e <sys_timeout+0x22>
 8014d70:	4b0a      	ldr	r3, [pc, #40]	; (8014d9c <sys_timeout+0x40>)
 8014d72:	f240 1229 	movw	r2, #297	; 0x129
 8014d76:	490a      	ldr	r1, [pc, #40]	; (8014da0 <sys_timeout+0x44>)
 8014d78:	480a      	ldr	r0, [pc, #40]	; (8014da4 <sys_timeout+0x48>)
 8014d7a:	f003 fc1d 	bl	80185b8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014d7e:	f7f2 fe37 	bl	80079f0 <sys_now>
 8014d82:	4602      	mov	r2, r0
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	4413      	add	r3, r2
 8014d88:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014d8a:	687a      	ldr	r2, [r7, #4]
 8014d8c:	68b9      	ldr	r1, [r7, #8]
 8014d8e:	6978      	ldr	r0, [r7, #20]
 8014d90:	f7ff ff22 	bl	8014bd8 <sys_timeout_abs>
#endif
}
 8014d94:	bf00      	nop
 8014d96:	3718      	adds	r7, #24
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}
 8014d9c:	0801c1e4 	.word	0x0801c1e4
 8014da0:	0801c280 	.word	0x0801c280
 8014da4:	0801c258 	.word	0x0801c258

08014da8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b084      	sub	sp, #16
 8014dac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014dae:	f7f2 fe1f 	bl	80079f0 <sys_now>
 8014db2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014db4:	4b17      	ldr	r3, [pc, #92]	; (8014e14 <sys_check_timeouts+0x6c>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014dba:	68bb      	ldr	r3, [r7, #8]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d022      	beq.n	8014e06 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014dc0:	68bb      	ldr	r3, [r7, #8]
 8014dc2:	685b      	ldr	r3, [r3, #4]
 8014dc4:	68fa      	ldr	r2, [r7, #12]
 8014dc6:	1ad3      	subs	r3, r2, r3
 8014dc8:	0fdb      	lsrs	r3, r3, #31
 8014dca:	f003 0301 	and.w	r3, r3, #1
 8014dce:	b2db      	uxtb	r3, r3
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d11a      	bne.n	8014e0a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014dd4:	68bb      	ldr	r3, [r7, #8]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	4a0e      	ldr	r2, [pc, #56]	; (8014e14 <sys_check_timeouts+0x6c>)
 8014dda:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014ddc:	68bb      	ldr	r3, [r7, #8]
 8014dde:	689b      	ldr	r3, [r3, #8]
 8014de0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014de2:	68bb      	ldr	r3, [r7, #8]
 8014de4:	68db      	ldr	r3, [r3, #12]
 8014de6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	685b      	ldr	r3, [r3, #4]
 8014dec:	4a0a      	ldr	r2, [pc, #40]	; (8014e18 <sys_check_timeouts+0x70>)
 8014dee:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014df0:	68b9      	ldr	r1, [r7, #8]
 8014df2:	200a      	movs	r0, #10
 8014df4:	f7f8 fe2e 	bl	800da54 <memp_free>
    if (handler != NULL) {
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d0da      	beq.n	8014db4 <sys_check_timeouts+0xc>
      handler(arg);
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	6838      	ldr	r0, [r7, #0]
 8014e02:	4798      	blx	r3
  do {
 8014e04:	e7d6      	b.n	8014db4 <sys_check_timeouts+0xc>
      return;
 8014e06:	bf00      	nop
 8014e08:	e000      	b.n	8014e0c <sys_check_timeouts+0x64>
      return;
 8014e0a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014e0c:	3710      	adds	r7, #16
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}
 8014e12:	bf00      	nop
 8014e14:	200069c8 	.word	0x200069c8
 8014e18:	200069cc 	.word	0x200069cc

08014e1c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b082      	sub	sp, #8
 8014e20:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014e22:	4b16      	ldr	r3, [pc, #88]	; (8014e7c <sys_timeouts_sleeptime+0x60>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d102      	bne.n	8014e30 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8014e2e:	e020      	b.n	8014e72 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014e30:	f7f2 fdde 	bl	80079f0 <sys_now>
 8014e34:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014e36:	4b11      	ldr	r3, [pc, #68]	; (8014e7c <sys_timeouts_sleeptime+0x60>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	685a      	ldr	r2, [r3, #4]
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	1ad3      	subs	r3, r2, r3
 8014e40:	0fdb      	lsrs	r3, r3, #31
 8014e42:	f003 0301 	and.w	r3, r3, #1
 8014e46:	b2db      	uxtb	r3, r3
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d001      	beq.n	8014e50 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	e010      	b.n	8014e72 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014e50:	4b0a      	ldr	r3, [pc, #40]	; (8014e7c <sys_timeouts_sleeptime+0x60>)
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	685a      	ldr	r2, [r3, #4]
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	1ad3      	subs	r3, r2, r3
 8014e5a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	da06      	bge.n	8014e70 <sys_timeouts_sleeptime+0x54>
 8014e62:	4b07      	ldr	r3, [pc, #28]	; (8014e80 <sys_timeouts_sleeptime+0x64>)
 8014e64:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014e68:	4906      	ldr	r1, [pc, #24]	; (8014e84 <sys_timeouts_sleeptime+0x68>)
 8014e6a:	4807      	ldr	r0, [pc, #28]	; (8014e88 <sys_timeouts_sleeptime+0x6c>)
 8014e6c:	f003 fba4 	bl	80185b8 <iprintf>
    return ret;
 8014e70:	683b      	ldr	r3, [r7, #0]
  }
}
 8014e72:	4618      	mov	r0, r3
 8014e74:	3708      	adds	r7, #8
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}
 8014e7a:	bf00      	nop
 8014e7c:	200069c8 	.word	0x200069c8
 8014e80:	0801c1e4 	.word	0x0801c1e4
 8014e84:	0801c2b8 	.word	0x0801c2b8
 8014e88:	0801c258 	.word	0x0801c258

08014e8c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014e90:	f003 fbaa 	bl	80185e8 <rand>
 8014e94:	4603      	mov	r3, r0
 8014e96:	b29b      	uxth	r3, r3
 8014e98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014e9c:	b29b      	uxth	r3, r3
 8014e9e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014ea2:	b29a      	uxth	r2, r3
 8014ea4:	4b01      	ldr	r3, [pc, #4]	; (8014eac <udp_init+0x20>)
 8014ea6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014ea8:	bf00      	nop
 8014eaa:	bd80      	pop	{r7, pc}
 8014eac:	200000ac 	.word	0x200000ac

08014eb0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014eb0:	b480      	push	{r7}
 8014eb2:	b083      	sub	sp, #12
 8014eb4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014eba:	4b17      	ldr	r3, [pc, #92]	; (8014f18 <udp_new_port+0x68>)
 8014ebc:	881b      	ldrh	r3, [r3, #0]
 8014ebe:	1c5a      	adds	r2, r3, #1
 8014ec0:	b291      	uxth	r1, r2
 8014ec2:	4a15      	ldr	r2, [pc, #84]	; (8014f18 <udp_new_port+0x68>)
 8014ec4:	8011      	strh	r1, [r2, #0]
 8014ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014eca:	4293      	cmp	r3, r2
 8014ecc:	d103      	bne.n	8014ed6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014ece:	4b12      	ldr	r3, [pc, #72]	; (8014f18 <udp_new_port+0x68>)
 8014ed0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014ed4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ed6:	4b11      	ldr	r3, [pc, #68]	; (8014f1c <udp_new_port+0x6c>)
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	603b      	str	r3, [r7, #0]
 8014edc:	e011      	b.n	8014f02 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	8a5a      	ldrh	r2, [r3, #18]
 8014ee2:	4b0d      	ldr	r3, [pc, #52]	; (8014f18 <udp_new_port+0x68>)
 8014ee4:	881b      	ldrh	r3, [r3, #0]
 8014ee6:	429a      	cmp	r2, r3
 8014ee8:	d108      	bne.n	8014efc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014eea:	88fb      	ldrh	r3, [r7, #6]
 8014eec:	3301      	adds	r3, #1
 8014eee:	80fb      	strh	r3, [r7, #6]
 8014ef0:	88fb      	ldrh	r3, [r7, #6]
 8014ef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014ef6:	d3e0      	bcc.n	8014eba <udp_new_port+0xa>
        return 0;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	e007      	b.n	8014f0c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014efc:	683b      	ldr	r3, [r7, #0]
 8014efe:	68db      	ldr	r3, [r3, #12]
 8014f00:	603b      	str	r3, [r7, #0]
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d1ea      	bne.n	8014ede <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014f08:	4b03      	ldr	r3, [pc, #12]	; (8014f18 <udp_new_port+0x68>)
 8014f0a:	881b      	ldrh	r3, [r3, #0]
}
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	370c      	adds	r7, #12
 8014f10:	46bd      	mov	sp, r7
 8014f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f16:	4770      	bx	lr
 8014f18:	200000ac 	.word	0x200000ac
 8014f1c:	2000da2c 	.word	0x2000da2c

08014f20 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b084      	sub	sp, #16
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	60f8      	str	r0, [r7, #12]
 8014f28:	60b9      	str	r1, [r7, #8]
 8014f2a:	4613      	mov	r3, r2
 8014f2c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d105      	bne.n	8014f40 <udp_input_local_match+0x20>
 8014f34:	4b27      	ldr	r3, [pc, #156]	; (8014fd4 <udp_input_local_match+0xb4>)
 8014f36:	2287      	movs	r2, #135	; 0x87
 8014f38:	4927      	ldr	r1, [pc, #156]	; (8014fd8 <udp_input_local_match+0xb8>)
 8014f3a:	4828      	ldr	r0, [pc, #160]	; (8014fdc <udp_input_local_match+0xbc>)
 8014f3c:	f003 fb3c 	bl	80185b8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d105      	bne.n	8014f52 <udp_input_local_match+0x32>
 8014f46:	4b23      	ldr	r3, [pc, #140]	; (8014fd4 <udp_input_local_match+0xb4>)
 8014f48:	2288      	movs	r2, #136	; 0x88
 8014f4a:	4925      	ldr	r1, [pc, #148]	; (8014fe0 <udp_input_local_match+0xc0>)
 8014f4c:	4823      	ldr	r0, [pc, #140]	; (8014fdc <udp_input_local_match+0xbc>)
 8014f4e:	f003 fb33 	bl	80185b8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	7a1b      	ldrb	r3, [r3, #8]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d00b      	beq.n	8014f72 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	7a1a      	ldrb	r2, [r3, #8]
 8014f5e:	4b21      	ldr	r3, [pc, #132]	; (8014fe4 <udp_input_local_match+0xc4>)
 8014f60:	685b      	ldr	r3, [r3, #4]
 8014f62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f66:	3301      	adds	r3, #1
 8014f68:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	d001      	beq.n	8014f72 <udp_input_local_match+0x52>
    return 0;
 8014f6e:	2300      	movs	r3, #0
 8014f70:	e02b      	b.n	8014fca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014f72:	79fb      	ldrb	r3, [r7, #7]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d018      	beq.n	8014faa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d013      	beq.n	8014fa6 <udp_input_local_match+0x86>
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d00f      	beq.n	8014fa6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014f86:	4b17      	ldr	r3, [pc, #92]	; (8014fe4 <udp_input_local_match+0xc4>)
 8014f88:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f8e:	d00a      	beq.n	8014fa6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	681a      	ldr	r2, [r3, #0]
 8014f94:	4b13      	ldr	r3, [pc, #76]	; (8014fe4 <udp_input_local_match+0xc4>)
 8014f96:	695b      	ldr	r3, [r3, #20]
 8014f98:	405a      	eors	r2, r3
 8014f9a:	68bb      	ldr	r3, [r7, #8]
 8014f9c:	3308      	adds	r3, #8
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d110      	bne.n	8014fc8 <udp_input_local_match+0xa8>
          return 1;
 8014fa6:	2301      	movs	r3, #1
 8014fa8:	e00f      	b.n	8014fca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d009      	beq.n	8014fc4 <udp_input_local_match+0xa4>
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d005      	beq.n	8014fc4 <udp_input_local_match+0xa4>
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	681a      	ldr	r2, [r3, #0]
 8014fbc:	4b09      	ldr	r3, [pc, #36]	; (8014fe4 <udp_input_local_match+0xc4>)
 8014fbe:	695b      	ldr	r3, [r3, #20]
 8014fc0:	429a      	cmp	r2, r3
 8014fc2:	d101      	bne.n	8014fc8 <udp_input_local_match+0xa8>
        return 1;
 8014fc4:	2301      	movs	r3, #1
 8014fc6:	e000      	b.n	8014fca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014fc8:	2300      	movs	r3, #0
}
 8014fca:	4618      	mov	r0, r3
 8014fcc:	3710      	adds	r7, #16
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}
 8014fd2:	bf00      	nop
 8014fd4:	0801c2cc 	.word	0x0801c2cc
 8014fd8:	0801c2fc 	.word	0x0801c2fc
 8014fdc:	0801c320 	.word	0x0801c320
 8014fe0:	0801c348 	.word	0x0801c348
 8014fe4:	2000a300 	.word	0x2000a300

08014fe8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014fe8:	b590      	push	{r4, r7, lr}
 8014fea:	b08d      	sub	sp, #52	; 0x34
 8014fec:	af02      	add	r7, sp, #8
 8014fee:	6078      	str	r0, [r7, #4]
 8014ff0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d105      	bne.n	8015008 <udp_input+0x20>
 8014ffc:	4b7c      	ldr	r3, [pc, #496]	; (80151f0 <udp_input+0x208>)
 8014ffe:	22cf      	movs	r2, #207	; 0xcf
 8015000:	497c      	ldr	r1, [pc, #496]	; (80151f4 <udp_input+0x20c>)
 8015002:	487d      	ldr	r0, [pc, #500]	; (80151f8 <udp_input+0x210>)
 8015004:	f003 fad8 	bl	80185b8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d105      	bne.n	801501a <udp_input+0x32>
 801500e:	4b78      	ldr	r3, [pc, #480]	; (80151f0 <udp_input+0x208>)
 8015010:	22d0      	movs	r2, #208	; 0xd0
 8015012:	497a      	ldr	r1, [pc, #488]	; (80151fc <udp_input+0x214>)
 8015014:	4878      	ldr	r0, [pc, #480]	; (80151f8 <udp_input+0x210>)
 8015016:	f003 facf 	bl	80185b8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	895b      	ldrh	r3, [r3, #10]
 801501e:	2b07      	cmp	r3, #7
 8015020:	d803      	bhi.n	801502a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015022:	6878      	ldr	r0, [r7, #4]
 8015024:	f7f9 fb56 	bl	800e6d4 <pbuf_free>
    goto end;
 8015028:	e0de      	b.n	80151e8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	685b      	ldr	r3, [r3, #4]
 801502e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015030:	4b73      	ldr	r3, [pc, #460]	; (8015200 <udp_input+0x218>)
 8015032:	695b      	ldr	r3, [r3, #20]
 8015034:	4a72      	ldr	r2, [pc, #456]	; (8015200 <udp_input+0x218>)
 8015036:	6812      	ldr	r2, [r2, #0]
 8015038:	4611      	mov	r1, r2
 801503a:	4618      	mov	r0, r3
 801503c:	f001 ff80 	bl	8016f40 <ip4_addr_isbroadcast_u32>
 8015040:	4603      	mov	r3, r0
 8015042:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015044:	697b      	ldr	r3, [r7, #20]
 8015046:	881b      	ldrh	r3, [r3, #0]
 8015048:	b29b      	uxth	r3, r3
 801504a:	4618      	mov	r0, r3
 801504c:	f7f7 fffa 	bl	800d044 <lwip_htons>
 8015050:	4603      	mov	r3, r0
 8015052:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015054:	697b      	ldr	r3, [r7, #20]
 8015056:	885b      	ldrh	r3, [r3, #2]
 8015058:	b29b      	uxth	r3, r3
 801505a:	4618      	mov	r0, r3
 801505c:	f7f7 fff2 	bl	800d044 <lwip_htons>
 8015060:	4603      	mov	r3, r0
 8015062:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015064:	2300      	movs	r3, #0
 8015066:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015068:	2300      	movs	r3, #0
 801506a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801506c:	2300      	movs	r3, #0
 801506e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015070:	4b64      	ldr	r3, [pc, #400]	; (8015204 <udp_input+0x21c>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	627b      	str	r3, [r7, #36]	; 0x24
 8015076:	e054      	b.n	8015122 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801507a:	8a5b      	ldrh	r3, [r3, #18]
 801507c:	89fa      	ldrh	r2, [r7, #14]
 801507e:	429a      	cmp	r2, r3
 8015080:	d14a      	bne.n	8015118 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015082:	7cfb      	ldrb	r3, [r7, #19]
 8015084:	461a      	mov	r2, r3
 8015086:	6839      	ldr	r1, [r7, #0]
 8015088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801508a:	f7ff ff49 	bl	8014f20 <udp_input_local_match>
 801508e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015090:	2b00      	cmp	r3, #0
 8015092:	d041      	beq.n	8015118 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015096:	7c1b      	ldrb	r3, [r3, #16]
 8015098:	f003 0304 	and.w	r3, r3, #4
 801509c:	2b00      	cmp	r3, #0
 801509e:	d11d      	bne.n	80150dc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80150a0:	69fb      	ldr	r3, [r7, #28]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d102      	bne.n	80150ac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80150a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a8:	61fb      	str	r3, [r7, #28]
 80150aa:	e017      	b.n	80150dc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80150ac:	7cfb      	ldrb	r3, [r7, #19]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d014      	beq.n	80150dc <udp_input+0xf4>
 80150b2:	4b53      	ldr	r3, [pc, #332]	; (8015200 <udp_input+0x218>)
 80150b4:	695b      	ldr	r3, [r3, #20]
 80150b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150ba:	d10f      	bne.n	80150dc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80150bc:	69fb      	ldr	r3, [r7, #28]
 80150be:	681a      	ldr	r2, [r3, #0]
 80150c0:	683b      	ldr	r3, [r7, #0]
 80150c2:	3304      	adds	r3, #4
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d008      	beq.n	80150dc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80150ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150cc:	681a      	ldr	r2, [r3, #0]
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	3304      	adds	r3, #4
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	429a      	cmp	r2, r3
 80150d6:	d101      	bne.n	80150dc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80150d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150da:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80150dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150de:	8a9b      	ldrh	r3, [r3, #20]
 80150e0:	8a3a      	ldrh	r2, [r7, #16]
 80150e2:	429a      	cmp	r2, r3
 80150e4:	d118      	bne.n	8015118 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80150e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d005      	beq.n	80150fa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80150ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150f0:	685a      	ldr	r2, [r3, #4]
 80150f2:	4b43      	ldr	r3, [pc, #268]	; (8015200 <udp_input+0x218>)
 80150f4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80150f6:	429a      	cmp	r2, r3
 80150f8:	d10e      	bne.n	8015118 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80150fa:	6a3b      	ldr	r3, [r7, #32]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d014      	beq.n	801512a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015102:	68da      	ldr	r2, [r3, #12]
 8015104:	6a3b      	ldr	r3, [r7, #32]
 8015106:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015108:	4b3e      	ldr	r3, [pc, #248]	; (8015204 <udp_input+0x21c>)
 801510a:	681a      	ldr	r2, [r3, #0]
 801510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801510e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015110:	4a3c      	ldr	r2, [pc, #240]	; (8015204 <udp_input+0x21c>)
 8015112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015114:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015116:	e008      	b.n	801512a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801511a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801511e:	68db      	ldr	r3, [r3, #12]
 8015120:	627b      	str	r3, [r7, #36]	; 0x24
 8015122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015124:	2b00      	cmp	r3, #0
 8015126:	d1a7      	bne.n	8015078 <udp_input+0x90>
 8015128:	e000      	b.n	801512c <udp_input+0x144>
        break;
 801512a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801512e:	2b00      	cmp	r3, #0
 8015130:	d101      	bne.n	8015136 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015132:	69fb      	ldr	r3, [r7, #28]
 8015134:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015138:	2b00      	cmp	r3, #0
 801513a:	d002      	beq.n	8015142 <udp_input+0x15a>
    for_us = 1;
 801513c:	2301      	movs	r3, #1
 801513e:	76fb      	strb	r3, [r7, #27]
 8015140:	e00a      	b.n	8015158 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015142:	683b      	ldr	r3, [r7, #0]
 8015144:	3304      	adds	r3, #4
 8015146:	681a      	ldr	r2, [r3, #0]
 8015148:	4b2d      	ldr	r3, [pc, #180]	; (8015200 <udp_input+0x218>)
 801514a:	695b      	ldr	r3, [r3, #20]
 801514c:	429a      	cmp	r2, r3
 801514e:	bf0c      	ite	eq
 8015150:	2301      	moveq	r3, #1
 8015152:	2300      	movne	r3, #0
 8015154:	b2db      	uxtb	r3, r3
 8015156:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015158:	7efb      	ldrb	r3, [r7, #27]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d041      	beq.n	80151e2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801515e:	2108      	movs	r1, #8
 8015160:	6878      	ldr	r0, [r7, #4]
 8015162:	f7f9 fa31 	bl	800e5c8 <pbuf_remove_header>
 8015166:	4603      	mov	r3, r0
 8015168:	2b00      	cmp	r3, #0
 801516a:	d00a      	beq.n	8015182 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801516c:	4b20      	ldr	r3, [pc, #128]	; (80151f0 <udp_input+0x208>)
 801516e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015172:	4925      	ldr	r1, [pc, #148]	; (8015208 <udp_input+0x220>)
 8015174:	4820      	ldr	r0, [pc, #128]	; (80151f8 <udp_input+0x210>)
 8015176:	f003 fa1f 	bl	80185b8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f7f9 faaa 	bl	800e6d4 <pbuf_free>
      goto end;
 8015180:	e032      	b.n	80151e8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015184:	2b00      	cmp	r3, #0
 8015186:	d012      	beq.n	80151ae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801518a:	699b      	ldr	r3, [r3, #24]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d00a      	beq.n	80151a6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015192:	699c      	ldr	r4, [r3, #24]
 8015194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015196:	69d8      	ldr	r0, [r3, #28]
 8015198:	8a3b      	ldrh	r3, [r7, #16]
 801519a:	9300      	str	r3, [sp, #0]
 801519c:	4b1b      	ldr	r3, [pc, #108]	; (801520c <udp_input+0x224>)
 801519e:	687a      	ldr	r2, [r7, #4]
 80151a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151a2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80151a4:	e021      	b.n	80151ea <udp_input+0x202>
        pbuf_free(p);
 80151a6:	6878      	ldr	r0, [r7, #4]
 80151a8:	f7f9 fa94 	bl	800e6d4 <pbuf_free>
        goto end;
 80151ac:	e01c      	b.n	80151e8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80151ae:	7cfb      	ldrb	r3, [r7, #19]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d112      	bne.n	80151da <udp_input+0x1f2>
 80151b4:	4b12      	ldr	r3, [pc, #72]	; (8015200 <udp_input+0x218>)
 80151b6:	695b      	ldr	r3, [r3, #20]
 80151b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80151bc:	2be0      	cmp	r3, #224	; 0xe0
 80151be:	d00c      	beq.n	80151da <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80151c0:	4b0f      	ldr	r3, [pc, #60]	; (8015200 <udp_input+0x218>)
 80151c2:	899b      	ldrh	r3, [r3, #12]
 80151c4:	3308      	adds	r3, #8
 80151c6:	b29b      	uxth	r3, r3
 80151c8:	b21b      	sxth	r3, r3
 80151ca:	4619      	mov	r1, r3
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f7f9 fa6e 	bl	800e6ae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80151d2:	2103      	movs	r1, #3
 80151d4:	6878      	ldr	r0, [r7, #4]
 80151d6:	f001 fb93 	bl	8016900 <icmp_dest_unreach>
      pbuf_free(p);
 80151da:	6878      	ldr	r0, [r7, #4]
 80151dc:	f7f9 fa7a 	bl	800e6d4 <pbuf_free>
  return;
 80151e0:	e003      	b.n	80151ea <udp_input+0x202>
    pbuf_free(p);
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f7f9 fa76 	bl	800e6d4 <pbuf_free>
  return;
 80151e8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80151ea:	372c      	adds	r7, #44	; 0x2c
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd90      	pop	{r4, r7, pc}
 80151f0:	0801c2cc 	.word	0x0801c2cc
 80151f4:	0801c370 	.word	0x0801c370
 80151f8:	0801c320 	.word	0x0801c320
 80151fc:	0801c388 	.word	0x0801c388
 8015200:	2000a300 	.word	0x2000a300
 8015204:	2000da2c 	.word	0x2000da2c
 8015208:	0801c3a4 	.word	0x0801c3a4
 801520c:	2000a310 	.word	0x2000a310

08015210 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
 8015218:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d109      	bne.n	8015234 <udp_send+0x24>
 8015220:	4b11      	ldr	r3, [pc, #68]	; (8015268 <udp_send+0x58>)
 8015222:	f240 12d5 	movw	r2, #469	; 0x1d5
 8015226:	4911      	ldr	r1, [pc, #68]	; (801526c <udp_send+0x5c>)
 8015228:	4811      	ldr	r0, [pc, #68]	; (8015270 <udp_send+0x60>)
 801522a:	f003 f9c5 	bl	80185b8 <iprintf>
 801522e:	f06f 030f 	mvn.w	r3, #15
 8015232:	e015      	b.n	8015260 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d109      	bne.n	801524e <udp_send+0x3e>
 801523a:	4b0b      	ldr	r3, [pc, #44]	; (8015268 <udp_send+0x58>)
 801523c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015240:	490c      	ldr	r1, [pc, #48]	; (8015274 <udp_send+0x64>)
 8015242:	480b      	ldr	r0, [pc, #44]	; (8015270 <udp_send+0x60>)
 8015244:	f003 f9b8 	bl	80185b8 <iprintf>
 8015248:	f06f 030f 	mvn.w	r3, #15
 801524c:	e008      	b.n	8015260 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	1d1a      	adds	r2, r3, #4
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	8a9b      	ldrh	r3, [r3, #20]
 8015256:	6839      	ldr	r1, [r7, #0]
 8015258:	6878      	ldr	r0, [r7, #4]
 801525a:	f000 f80d 	bl	8015278 <udp_sendto>
 801525e:	4603      	mov	r3, r0
}
 8015260:	4618      	mov	r0, r3
 8015262:	3708      	adds	r7, #8
 8015264:	46bd      	mov	sp, r7
 8015266:	bd80      	pop	{r7, pc}
 8015268:	0801c2cc 	.word	0x0801c2cc
 801526c:	0801c3c0 	.word	0x0801c3c0
 8015270:	0801c320 	.word	0x0801c320
 8015274:	0801c3d8 	.word	0x0801c3d8

08015278 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b088      	sub	sp, #32
 801527c:	af02      	add	r7, sp, #8
 801527e:	60f8      	str	r0, [r7, #12]
 8015280:	60b9      	str	r1, [r7, #8]
 8015282:	607a      	str	r2, [r7, #4]
 8015284:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d109      	bne.n	80152a0 <udp_sendto+0x28>
 801528c:	4b23      	ldr	r3, [pc, #140]	; (801531c <udp_sendto+0xa4>)
 801528e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015292:	4923      	ldr	r1, [pc, #140]	; (8015320 <udp_sendto+0xa8>)
 8015294:	4823      	ldr	r0, [pc, #140]	; (8015324 <udp_sendto+0xac>)
 8015296:	f003 f98f 	bl	80185b8 <iprintf>
 801529a:	f06f 030f 	mvn.w	r3, #15
 801529e:	e038      	b.n	8015312 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d109      	bne.n	80152ba <udp_sendto+0x42>
 80152a6:	4b1d      	ldr	r3, [pc, #116]	; (801531c <udp_sendto+0xa4>)
 80152a8:	f240 2219 	movw	r2, #537	; 0x219
 80152ac:	491e      	ldr	r1, [pc, #120]	; (8015328 <udp_sendto+0xb0>)
 80152ae:	481d      	ldr	r0, [pc, #116]	; (8015324 <udp_sendto+0xac>)
 80152b0:	f003 f982 	bl	80185b8 <iprintf>
 80152b4:	f06f 030f 	mvn.w	r3, #15
 80152b8:	e02b      	b.n	8015312 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d109      	bne.n	80152d4 <udp_sendto+0x5c>
 80152c0:	4b16      	ldr	r3, [pc, #88]	; (801531c <udp_sendto+0xa4>)
 80152c2:	f240 221a 	movw	r2, #538	; 0x21a
 80152c6:	4919      	ldr	r1, [pc, #100]	; (801532c <udp_sendto+0xb4>)
 80152c8:	4816      	ldr	r0, [pc, #88]	; (8015324 <udp_sendto+0xac>)
 80152ca:	f003 f975 	bl	80185b8 <iprintf>
 80152ce:	f06f 030f 	mvn.w	r3, #15
 80152d2:	e01e      	b.n	8015312 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	7a1b      	ldrb	r3, [r3, #8]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d006      	beq.n	80152ea <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	7a1b      	ldrb	r3, [r3, #8]
 80152e0:	4618      	mov	r0, r3
 80152e2:	f7f8 fe69 	bl	800dfb8 <netif_get_by_index>
 80152e6:	6178      	str	r0, [r7, #20]
 80152e8:	e003      	b.n	80152f2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80152ea:	6878      	ldr	r0, [r7, #4]
 80152ec:	f001 fb92 	bl	8016a14 <ip4_route>
 80152f0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80152f2:	697b      	ldr	r3, [r7, #20]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d102      	bne.n	80152fe <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80152f8:	f06f 0303 	mvn.w	r3, #3
 80152fc:	e009      	b.n	8015312 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80152fe:	887a      	ldrh	r2, [r7, #2]
 8015300:	697b      	ldr	r3, [r7, #20]
 8015302:	9300      	str	r3, [sp, #0]
 8015304:	4613      	mov	r3, r2
 8015306:	687a      	ldr	r2, [r7, #4]
 8015308:	68b9      	ldr	r1, [r7, #8]
 801530a:	68f8      	ldr	r0, [r7, #12]
 801530c:	f000 f810 	bl	8015330 <udp_sendto_if>
 8015310:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015312:	4618      	mov	r0, r3
 8015314:	3718      	adds	r7, #24
 8015316:	46bd      	mov	sp, r7
 8015318:	bd80      	pop	{r7, pc}
 801531a:	bf00      	nop
 801531c:	0801c2cc 	.word	0x0801c2cc
 8015320:	0801c3f0 	.word	0x0801c3f0
 8015324:	0801c320 	.word	0x0801c320
 8015328:	0801c408 	.word	0x0801c408
 801532c:	0801c424 	.word	0x0801c424

08015330 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b088      	sub	sp, #32
 8015334:	af02      	add	r7, sp, #8
 8015336:	60f8      	str	r0, [r7, #12]
 8015338:	60b9      	str	r1, [r7, #8]
 801533a:	607a      	str	r2, [r7, #4]
 801533c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d109      	bne.n	8015358 <udp_sendto_if+0x28>
 8015344:	4b2e      	ldr	r3, [pc, #184]	; (8015400 <udp_sendto_if+0xd0>)
 8015346:	f44f 7220 	mov.w	r2, #640	; 0x280
 801534a:	492e      	ldr	r1, [pc, #184]	; (8015404 <udp_sendto_if+0xd4>)
 801534c:	482e      	ldr	r0, [pc, #184]	; (8015408 <udp_sendto_if+0xd8>)
 801534e:	f003 f933 	bl	80185b8 <iprintf>
 8015352:	f06f 030f 	mvn.w	r3, #15
 8015356:	e04f      	b.n	80153f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d109      	bne.n	8015372 <udp_sendto_if+0x42>
 801535e:	4b28      	ldr	r3, [pc, #160]	; (8015400 <udp_sendto_if+0xd0>)
 8015360:	f240 2281 	movw	r2, #641	; 0x281
 8015364:	4929      	ldr	r1, [pc, #164]	; (801540c <udp_sendto_if+0xdc>)
 8015366:	4828      	ldr	r0, [pc, #160]	; (8015408 <udp_sendto_if+0xd8>)
 8015368:	f003 f926 	bl	80185b8 <iprintf>
 801536c:	f06f 030f 	mvn.w	r3, #15
 8015370:	e042      	b.n	80153f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d109      	bne.n	801538c <udp_sendto_if+0x5c>
 8015378:	4b21      	ldr	r3, [pc, #132]	; (8015400 <udp_sendto_if+0xd0>)
 801537a:	f240 2282 	movw	r2, #642	; 0x282
 801537e:	4924      	ldr	r1, [pc, #144]	; (8015410 <udp_sendto_if+0xe0>)
 8015380:	4821      	ldr	r0, [pc, #132]	; (8015408 <udp_sendto_if+0xd8>)
 8015382:	f003 f919 	bl	80185b8 <iprintf>
 8015386:	f06f 030f 	mvn.w	r3, #15
 801538a:	e035      	b.n	80153f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801538c:	6a3b      	ldr	r3, [r7, #32]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d109      	bne.n	80153a6 <udp_sendto_if+0x76>
 8015392:	4b1b      	ldr	r3, [pc, #108]	; (8015400 <udp_sendto_if+0xd0>)
 8015394:	f240 2283 	movw	r2, #643	; 0x283
 8015398:	491e      	ldr	r1, [pc, #120]	; (8015414 <udp_sendto_if+0xe4>)
 801539a:	481b      	ldr	r0, [pc, #108]	; (8015408 <udp_sendto_if+0xd8>)
 801539c:	f003 f90c 	bl	80185b8 <iprintf>
 80153a0:	f06f 030f 	mvn.w	r3, #15
 80153a4:	e028      	b.n	80153f8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d009      	beq.n	80153c0 <udp_sendto_if+0x90>
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d005      	beq.n	80153c0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80153bc:	2be0      	cmp	r3, #224	; 0xe0
 80153be:	d103      	bne.n	80153c8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80153c0:	6a3b      	ldr	r3, [r7, #32]
 80153c2:	3304      	adds	r3, #4
 80153c4:	617b      	str	r3, [r7, #20]
 80153c6:	e00b      	b.n	80153e0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	681a      	ldr	r2, [r3, #0]
 80153cc:	6a3b      	ldr	r3, [r7, #32]
 80153ce:	3304      	adds	r3, #4
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	429a      	cmp	r2, r3
 80153d4:	d002      	beq.n	80153dc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80153d6:	f06f 0303 	mvn.w	r3, #3
 80153da:	e00d      	b.n	80153f8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80153e0:	887a      	ldrh	r2, [r7, #2]
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	9301      	str	r3, [sp, #4]
 80153e6:	6a3b      	ldr	r3, [r7, #32]
 80153e8:	9300      	str	r3, [sp, #0]
 80153ea:	4613      	mov	r3, r2
 80153ec:	687a      	ldr	r2, [r7, #4]
 80153ee:	68b9      	ldr	r1, [r7, #8]
 80153f0:	68f8      	ldr	r0, [r7, #12]
 80153f2:	f000 f811 	bl	8015418 <udp_sendto_if_src>
 80153f6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3718      	adds	r7, #24
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}
 8015400:	0801c2cc 	.word	0x0801c2cc
 8015404:	0801c440 	.word	0x0801c440
 8015408:	0801c320 	.word	0x0801c320
 801540c:	0801c45c 	.word	0x0801c45c
 8015410:	0801c478 	.word	0x0801c478
 8015414:	0801c498 	.word	0x0801c498

08015418 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b08c      	sub	sp, #48	; 0x30
 801541c:	af04      	add	r7, sp, #16
 801541e:	60f8      	str	r0, [r7, #12]
 8015420:	60b9      	str	r1, [r7, #8]
 8015422:	607a      	str	r2, [r7, #4]
 8015424:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d109      	bne.n	8015440 <udp_sendto_if_src+0x28>
 801542c:	4b65      	ldr	r3, [pc, #404]	; (80155c4 <udp_sendto_if_src+0x1ac>)
 801542e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015432:	4965      	ldr	r1, [pc, #404]	; (80155c8 <udp_sendto_if_src+0x1b0>)
 8015434:	4865      	ldr	r0, [pc, #404]	; (80155cc <udp_sendto_if_src+0x1b4>)
 8015436:	f003 f8bf 	bl	80185b8 <iprintf>
 801543a:	f06f 030f 	mvn.w	r3, #15
 801543e:	e0bc      	b.n	80155ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015440:	68bb      	ldr	r3, [r7, #8]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d109      	bne.n	801545a <udp_sendto_if_src+0x42>
 8015446:	4b5f      	ldr	r3, [pc, #380]	; (80155c4 <udp_sendto_if_src+0x1ac>)
 8015448:	f240 22d2 	movw	r2, #722	; 0x2d2
 801544c:	4960      	ldr	r1, [pc, #384]	; (80155d0 <udp_sendto_if_src+0x1b8>)
 801544e:	485f      	ldr	r0, [pc, #380]	; (80155cc <udp_sendto_if_src+0x1b4>)
 8015450:	f003 f8b2 	bl	80185b8 <iprintf>
 8015454:	f06f 030f 	mvn.w	r3, #15
 8015458:	e0af      	b.n	80155ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d109      	bne.n	8015474 <udp_sendto_if_src+0x5c>
 8015460:	4b58      	ldr	r3, [pc, #352]	; (80155c4 <udp_sendto_if_src+0x1ac>)
 8015462:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015466:	495b      	ldr	r1, [pc, #364]	; (80155d4 <udp_sendto_if_src+0x1bc>)
 8015468:	4858      	ldr	r0, [pc, #352]	; (80155cc <udp_sendto_if_src+0x1b4>)
 801546a:	f003 f8a5 	bl	80185b8 <iprintf>
 801546e:	f06f 030f 	mvn.w	r3, #15
 8015472:	e0a2      	b.n	80155ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015476:	2b00      	cmp	r3, #0
 8015478:	d109      	bne.n	801548e <udp_sendto_if_src+0x76>
 801547a:	4b52      	ldr	r3, [pc, #328]	; (80155c4 <udp_sendto_if_src+0x1ac>)
 801547c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8015480:	4955      	ldr	r1, [pc, #340]	; (80155d8 <udp_sendto_if_src+0x1c0>)
 8015482:	4852      	ldr	r0, [pc, #328]	; (80155cc <udp_sendto_if_src+0x1b4>)
 8015484:	f003 f898 	bl	80185b8 <iprintf>
 8015488:	f06f 030f 	mvn.w	r3, #15
 801548c:	e095      	b.n	80155ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015490:	2b00      	cmp	r3, #0
 8015492:	d109      	bne.n	80154a8 <udp_sendto_if_src+0x90>
 8015494:	4b4b      	ldr	r3, [pc, #300]	; (80155c4 <udp_sendto_if_src+0x1ac>)
 8015496:	f240 22d5 	movw	r2, #725	; 0x2d5
 801549a:	4950      	ldr	r1, [pc, #320]	; (80155dc <udp_sendto_if_src+0x1c4>)
 801549c:	484b      	ldr	r0, [pc, #300]	; (80155cc <udp_sendto_if_src+0x1b4>)
 801549e:	f003 f88b 	bl	80185b8 <iprintf>
 80154a2:	f06f 030f 	mvn.w	r3, #15
 80154a6:	e088      	b.n	80155ba <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	8a5b      	ldrh	r3, [r3, #18]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d10f      	bne.n	80154d0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80154b0:	68f9      	ldr	r1, [r7, #12]
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	8a5b      	ldrh	r3, [r3, #18]
 80154b6:	461a      	mov	r2, r3
 80154b8:	68f8      	ldr	r0, [r7, #12]
 80154ba:	f000 f893 	bl	80155e4 <udp_bind>
 80154be:	4603      	mov	r3, r0
 80154c0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80154c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d002      	beq.n	80154d0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80154ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80154ce:	e074      	b.n	80155ba <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	891b      	ldrh	r3, [r3, #8]
 80154d4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80154d8:	4293      	cmp	r3, r2
 80154da:	d902      	bls.n	80154e2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80154dc:	f04f 33ff 	mov.w	r3, #4294967295
 80154e0:	e06b      	b.n	80155ba <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80154e2:	2108      	movs	r1, #8
 80154e4:	68b8      	ldr	r0, [r7, #8]
 80154e6:	f7f9 f85f 	bl	800e5a8 <pbuf_add_header>
 80154ea:	4603      	mov	r3, r0
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d015      	beq.n	801551c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80154f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154f4:	2108      	movs	r1, #8
 80154f6:	2022      	movs	r0, #34	; 0x22
 80154f8:	f7f8 fe08 	bl	800e10c <pbuf_alloc>
 80154fc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80154fe:	69fb      	ldr	r3, [r7, #28]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d102      	bne.n	801550a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015504:	f04f 33ff 	mov.w	r3, #4294967295
 8015508:	e057      	b.n	80155ba <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801550a:	68bb      	ldr	r3, [r7, #8]
 801550c:	891b      	ldrh	r3, [r3, #8]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d006      	beq.n	8015520 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8015512:	68b9      	ldr	r1, [r7, #8]
 8015514:	69f8      	ldr	r0, [r7, #28]
 8015516:	f7f9 fa01 	bl	800e91c <pbuf_chain>
 801551a:	e001      	b.n	8015520 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801551c:	68bb      	ldr	r3, [r7, #8]
 801551e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015520:	69fb      	ldr	r3, [r7, #28]
 8015522:	895b      	ldrh	r3, [r3, #10]
 8015524:	2b07      	cmp	r3, #7
 8015526:	d806      	bhi.n	8015536 <udp_sendto_if_src+0x11e>
 8015528:	4b26      	ldr	r3, [pc, #152]	; (80155c4 <udp_sendto_if_src+0x1ac>)
 801552a:	f240 320d 	movw	r2, #781	; 0x30d
 801552e:	492c      	ldr	r1, [pc, #176]	; (80155e0 <udp_sendto_if_src+0x1c8>)
 8015530:	4826      	ldr	r0, [pc, #152]	; (80155cc <udp_sendto_if_src+0x1b4>)
 8015532:	f003 f841 	bl	80185b8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015536:	69fb      	ldr	r3, [r7, #28]
 8015538:	685b      	ldr	r3, [r3, #4]
 801553a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	8a5b      	ldrh	r3, [r3, #18]
 8015540:	4618      	mov	r0, r3
 8015542:	f7f7 fd7f 	bl	800d044 <lwip_htons>
 8015546:	4603      	mov	r3, r0
 8015548:	461a      	mov	r2, r3
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801554e:	887b      	ldrh	r3, [r7, #2]
 8015550:	4618      	mov	r0, r3
 8015552:	f7f7 fd77 	bl	800d044 <lwip_htons>
 8015556:	4603      	mov	r3, r0
 8015558:	461a      	mov	r2, r3
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801555e:	697b      	ldr	r3, [r7, #20]
 8015560:	2200      	movs	r2, #0
 8015562:	719a      	strb	r2, [r3, #6]
 8015564:	2200      	movs	r2, #0
 8015566:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015568:	69fb      	ldr	r3, [r7, #28]
 801556a:	891b      	ldrh	r3, [r3, #8]
 801556c:	4618      	mov	r0, r3
 801556e:	f7f7 fd69 	bl	800d044 <lwip_htons>
 8015572:	4603      	mov	r3, r0
 8015574:	461a      	mov	r2, r3
 8015576:	697b      	ldr	r3, [r7, #20]
 8015578:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801557a:	2311      	movs	r3, #17
 801557c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	7adb      	ldrb	r3, [r3, #11]
 8015582:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	7a9b      	ldrb	r3, [r3, #10]
 8015588:	7cb9      	ldrb	r1, [r7, #18]
 801558a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801558c:	9202      	str	r2, [sp, #8]
 801558e:	7cfa      	ldrb	r2, [r7, #19]
 8015590:	9201      	str	r2, [sp, #4]
 8015592:	9300      	str	r3, [sp, #0]
 8015594:	460b      	mov	r3, r1
 8015596:	687a      	ldr	r2, [r7, #4]
 8015598:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801559a:	69f8      	ldr	r0, [r7, #28]
 801559c:	f001 fc22 	bl	8016de4 <ip4_output_if_src>
 80155a0:	4603      	mov	r3, r0
 80155a2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80155a4:	69fa      	ldr	r2, [r7, #28]
 80155a6:	68bb      	ldr	r3, [r7, #8]
 80155a8:	429a      	cmp	r2, r3
 80155aa:	d004      	beq.n	80155b6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80155ac:	69f8      	ldr	r0, [r7, #28]
 80155ae:	f7f9 f891 	bl	800e6d4 <pbuf_free>
    q = NULL;
 80155b2:	2300      	movs	r3, #0
 80155b4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80155b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	3720      	adds	r7, #32
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}
 80155c2:	bf00      	nop
 80155c4:	0801c2cc 	.word	0x0801c2cc
 80155c8:	0801c4b8 	.word	0x0801c4b8
 80155cc:	0801c320 	.word	0x0801c320
 80155d0:	0801c4d8 	.word	0x0801c4d8
 80155d4:	0801c4f8 	.word	0x0801c4f8
 80155d8:	0801c51c 	.word	0x0801c51c
 80155dc:	0801c540 	.word	0x0801c540
 80155e0:	0801c564 	.word	0x0801c564

080155e4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b086      	sub	sp, #24
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	60f8      	str	r0, [r7, #12]
 80155ec:	60b9      	str	r1, [r7, #8]
 80155ee:	4613      	mov	r3, r2
 80155f0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80155f2:	68bb      	ldr	r3, [r7, #8]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d101      	bne.n	80155fc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80155f8:	4b39      	ldr	r3, [pc, #228]	; (80156e0 <udp_bind+0xfc>)
 80155fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d109      	bne.n	8015616 <udp_bind+0x32>
 8015602:	4b38      	ldr	r3, [pc, #224]	; (80156e4 <udp_bind+0x100>)
 8015604:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015608:	4937      	ldr	r1, [pc, #220]	; (80156e8 <udp_bind+0x104>)
 801560a:	4838      	ldr	r0, [pc, #224]	; (80156ec <udp_bind+0x108>)
 801560c:	f002 ffd4 	bl	80185b8 <iprintf>
 8015610:	f06f 030f 	mvn.w	r3, #15
 8015614:	e060      	b.n	80156d8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015616:	2300      	movs	r3, #0
 8015618:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801561a:	4b35      	ldr	r3, [pc, #212]	; (80156f0 <udp_bind+0x10c>)
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	617b      	str	r3, [r7, #20]
 8015620:	e009      	b.n	8015636 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015622:	68fa      	ldr	r2, [r7, #12]
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	429a      	cmp	r2, r3
 8015628:	d102      	bne.n	8015630 <udp_bind+0x4c>
      rebind = 1;
 801562a:	2301      	movs	r3, #1
 801562c:	74fb      	strb	r3, [r7, #19]
      break;
 801562e:	e005      	b.n	801563c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	68db      	ldr	r3, [r3, #12]
 8015634:	617b      	str	r3, [r7, #20]
 8015636:	697b      	ldr	r3, [r7, #20]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d1f2      	bne.n	8015622 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801563c:	88fb      	ldrh	r3, [r7, #6]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d109      	bne.n	8015656 <udp_bind+0x72>
    port = udp_new_port();
 8015642:	f7ff fc35 	bl	8014eb0 <udp_new_port>
 8015646:	4603      	mov	r3, r0
 8015648:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801564a:	88fb      	ldrh	r3, [r7, #6]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d12c      	bne.n	80156aa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015650:	f06f 0307 	mvn.w	r3, #7
 8015654:	e040      	b.n	80156d8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015656:	4b26      	ldr	r3, [pc, #152]	; (80156f0 <udp_bind+0x10c>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	617b      	str	r3, [r7, #20]
 801565c:	e022      	b.n	80156a4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801565e:	68fa      	ldr	r2, [r7, #12]
 8015660:	697b      	ldr	r3, [r7, #20]
 8015662:	429a      	cmp	r2, r3
 8015664:	d01b      	beq.n	801569e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	8a5b      	ldrh	r3, [r3, #18]
 801566a:	88fa      	ldrh	r2, [r7, #6]
 801566c:	429a      	cmp	r2, r3
 801566e:	d116      	bne.n	801569e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015670:	697b      	ldr	r3, [r7, #20]
 8015672:	681a      	ldr	r2, [r3, #0]
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015678:	429a      	cmp	r2, r3
 801567a:	d00d      	beq.n	8015698 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801567c:	68bb      	ldr	r3, [r7, #8]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d00a      	beq.n	8015698 <udp_bind+0xb4>
 8015682:	68bb      	ldr	r3, [r7, #8]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d006      	beq.n	8015698 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801568a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801568c:	2b00      	cmp	r3, #0
 801568e:	d003      	beq.n	8015698 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015690:	697b      	ldr	r3, [r7, #20]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d102      	bne.n	801569e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015698:	f06f 0307 	mvn.w	r3, #7
 801569c:	e01c      	b.n	80156d8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801569e:	697b      	ldr	r3, [r7, #20]
 80156a0:	68db      	ldr	r3, [r3, #12]
 80156a2:	617b      	str	r3, [r7, #20]
 80156a4:	697b      	ldr	r3, [r7, #20]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d1d9      	bne.n	801565e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d002      	beq.n	80156b6 <udp_bind+0xd2>
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	e000      	b.n	80156b8 <udp_bind+0xd4>
 80156b6:	2300      	movs	r3, #0
 80156b8:	68fa      	ldr	r2, [r7, #12]
 80156ba:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	88fa      	ldrh	r2, [r7, #6]
 80156c0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80156c2:	7cfb      	ldrb	r3, [r7, #19]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d106      	bne.n	80156d6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80156c8:	4b09      	ldr	r3, [pc, #36]	; (80156f0 <udp_bind+0x10c>)
 80156ca:	681a      	ldr	r2, [r3, #0]
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80156d0:	4a07      	ldr	r2, [pc, #28]	; (80156f0 <udp_bind+0x10c>)
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80156d6:	2300      	movs	r3, #0
}
 80156d8:	4618      	mov	r0, r3
 80156da:	3718      	adds	r7, #24
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}
 80156e0:	0801ce28 	.word	0x0801ce28
 80156e4:	0801c2cc 	.word	0x0801c2cc
 80156e8:	0801c594 	.word	0x0801c594
 80156ec:	0801c320 	.word	0x0801c320
 80156f0:	2000da2c 	.word	0x2000da2c

080156f4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b084      	sub	sp, #16
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	60f8      	str	r0, [r7, #12]
 80156fc:	60b9      	str	r1, [r7, #8]
 80156fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d107      	bne.n	8015716 <udp_recv+0x22>
 8015706:	4b08      	ldr	r3, [pc, #32]	; (8015728 <udp_recv+0x34>)
 8015708:	f240 428a 	movw	r2, #1162	; 0x48a
 801570c:	4907      	ldr	r1, [pc, #28]	; (801572c <udp_recv+0x38>)
 801570e:	4808      	ldr	r0, [pc, #32]	; (8015730 <udp_recv+0x3c>)
 8015710:	f002 ff52 	bl	80185b8 <iprintf>
 8015714:	e005      	b.n	8015722 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	68ba      	ldr	r2, [r7, #8]
 801571a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	687a      	ldr	r2, [r7, #4]
 8015720:	61da      	str	r2, [r3, #28]
}
 8015722:	3710      	adds	r7, #16
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}
 8015728:	0801c2cc 	.word	0x0801c2cc
 801572c:	0801c600 	.word	0x0801c600
 8015730:	0801c320 	.word	0x0801c320

08015734 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b084      	sub	sp, #16
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d107      	bne.n	8015752 <udp_remove+0x1e>
 8015742:	4b19      	ldr	r3, [pc, #100]	; (80157a8 <udp_remove+0x74>)
 8015744:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015748:	4918      	ldr	r1, [pc, #96]	; (80157ac <udp_remove+0x78>)
 801574a:	4819      	ldr	r0, [pc, #100]	; (80157b0 <udp_remove+0x7c>)
 801574c:	f002 ff34 	bl	80185b8 <iprintf>
 8015750:	e026      	b.n	80157a0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015752:	4b18      	ldr	r3, [pc, #96]	; (80157b4 <udp_remove+0x80>)
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	687a      	ldr	r2, [r7, #4]
 8015758:	429a      	cmp	r2, r3
 801575a:	d105      	bne.n	8015768 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801575c:	4b15      	ldr	r3, [pc, #84]	; (80157b4 <udp_remove+0x80>)
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	68db      	ldr	r3, [r3, #12]
 8015762:	4a14      	ldr	r2, [pc, #80]	; (80157b4 <udp_remove+0x80>)
 8015764:	6013      	str	r3, [r2, #0]
 8015766:	e017      	b.n	8015798 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015768:	4b12      	ldr	r3, [pc, #72]	; (80157b4 <udp_remove+0x80>)
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	60fb      	str	r3, [r7, #12]
 801576e:	e010      	b.n	8015792 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	68db      	ldr	r3, [r3, #12]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d009      	beq.n	801578c <udp_remove+0x58>
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	68db      	ldr	r3, [r3, #12]
 801577c:	687a      	ldr	r2, [r7, #4]
 801577e:	429a      	cmp	r2, r3
 8015780:	d104      	bne.n	801578c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	68da      	ldr	r2, [r3, #12]
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	60da      	str	r2, [r3, #12]
        break;
 801578a:	e005      	b.n	8015798 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	68db      	ldr	r3, [r3, #12]
 8015790:	60fb      	str	r3, [r7, #12]
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d1eb      	bne.n	8015770 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015798:	6879      	ldr	r1, [r7, #4]
 801579a:	2000      	movs	r0, #0
 801579c:	f7f8 f95a 	bl	800da54 <memp_free>
}
 80157a0:	3710      	adds	r7, #16
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}
 80157a6:	bf00      	nop
 80157a8:	0801c2cc 	.word	0x0801c2cc
 80157ac:	0801c618 	.word	0x0801c618
 80157b0:	0801c320 	.word	0x0801c320
 80157b4:	2000da2c 	.word	0x2000da2c

080157b8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80157be:	2000      	movs	r0, #0
 80157c0:	f7f8 f8f6 	bl	800d9b0 <memp_malloc>
 80157c4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d007      	beq.n	80157dc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80157cc:	2220      	movs	r2, #32
 80157ce:	2100      	movs	r1, #0
 80157d0:	6878      	ldr	r0, [r7, #4]
 80157d2:	f002 fe3f 	bl	8018454 <memset>
    pcb->ttl = UDP_TTL;
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	22ff      	movs	r2, #255	; 0xff
 80157da:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80157dc:	687b      	ldr	r3, [r7, #4]
}
 80157de:	4618      	mov	r0, r3
 80157e0:	3708      	adds	r7, #8
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}

080157e6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80157e6:	b580      	push	{r7, lr}
 80157e8:	b084      	sub	sp, #16
 80157ea:	af00      	add	r7, sp, #0
 80157ec:	4603      	mov	r3, r0
 80157ee:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80157f0:	f7ff ffe2 	bl	80157b8 <udp_new>
 80157f4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80157f6:	68fb      	ldr	r3, [r7, #12]
}
 80157f8:	4618      	mov	r0, r3
 80157fa:	3710      	adds	r7, #16
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}

08015800 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015800:	b480      	push	{r7}
 8015802:	b085      	sub	sp, #20
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d01e      	beq.n	801584e <udp_netif_ip_addr_changed+0x4e>
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d01a      	beq.n	801584e <udp_netif_ip_addr_changed+0x4e>
 8015818:	683b      	ldr	r3, [r7, #0]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d017      	beq.n	801584e <udp_netif_ip_addr_changed+0x4e>
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d013      	beq.n	801584e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015826:	4b0d      	ldr	r3, [pc, #52]	; (801585c <udp_netif_ip_addr_changed+0x5c>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	60fb      	str	r3, [r7, #12]
 801582c:	e00c      	b.n	8015848 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	681a      	ldr	r2, [r3, #0]
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	429a      	cmp	r2, r3
 8015838:	d103      	bne.n	8015842 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	681a      	ldr	r2, [r3, #0]
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	68db      	ldr	r3, [r3, #12]
 8015846:	60fb      	str	r3, [r7, #12]
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d1ef      	bne.n	801582e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801584e:	bf00      	nop
 8015850:	3714      	adds	r7, #20
 8015852:	46bd      	mov	sp, r7
 8015854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015858:	4770      	bx	lr
 801585a:	bf00      	nop
 801585c:	2000da2c 	.word	0x2000da2c

08015860 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b082      	sub	sp, #8
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015868:	4915      	ldr	r1, [pc, #84]	; (80158c0 <etharp_free_entry+0x60>)
 801586a:	687a      	ldr	r2, [r7, #4]
 801586c:	4613      	mov	r3, r2
 801586e:	005b      	lsls	r3, r3, #1
 8015870:	4413      	add	r3, r2
 8015872:	00db      	lsls	r3, r3, #3
 8015874:	440b      	add	r3, r1
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d013      	beq.n	80158a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801587c:	4910      	ldr	r1, [pc, #64]	; (80158c0 <etharp_free_entry+0x60>)
 801587e:	687a      	ldr	r2, [r7, #4]
 8015880:	4613      	mov	r3, r2
 8015882:	005b      	lsls	r3, r3, #1
 8015884:	4413      	add	r3, r2
 8015886:	00db      	lsls	r3, r3, #3
 8015888:	440b      	add	r3, r1
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	4618      	mov	r0, r3
 801588e:	f7f8 ff21 	bl	800e6d4 <pbuf_free>
    arp_table[i].q = NULL;
 8015892:	490b      	ldr	r1, [pc, #44]	; (80158c0 <etharp_free_entry+0x60>)
 8015894:	687a      	ldr	r2, [r7, #4]
 8015896:	4613      	mov	r3, r2
 8015898:	005b      	lsls	r3, r3, #1
 801589a:	4413      	add	r3, r2
 801589c:	00db      	lsls	r3, r3, #3
 801589e:	440b      	add	r3, r1
 80158a0:	2200      	movs	r2, #0
 80158a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80158a4:	4906      	ldr	r1, [pc, #24]	; (80158c0 <etharp_free_entry+0x60>)
 80158a6:	687a      	ldr	r2, [r7, #4]
 80158a8:	4613      	mov	r3, r2
 80158aa:	005b      	lsls	r3, r3, #1
 80158ac:	4413      	add	r3, r2
 80158ae:	00db      	lsls	r3, r3, #3
 80158b0:	440b      	add	r3, r1
 80158b2:	3314      	adds	r3, #20
 80158b4:	2200      	movs	r2, #0
 80158b6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80158b8:	bf00      	nop
 80158ba:	3708      	adds	r7, #8
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}
 80158c0:	200069d4 	.word	0x200069d4

080158c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b082      	sub	sp, #8
 80158c8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80158ca:	2300      	movs	r3, #0
 80158cc:	607b      	str	r3, [r7, #4]
 80158ce:	e096      	b.n	80159fe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80158d0:	494f      	ldr	r1, [pc, #316]	; (8015a10 <etharp_tmr+0x14c>)
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	4613      	mov	r3, r2
 80158d6:	005b      	lsls	r3, r3, #1
 80158d8:	4413      	add	r3, r2
 80158da:	00db      	lsls	r3, r3, #3
 80158dc:	440b      	add	r3, r1
 80158de:	3314      	adds	r3, #20
 80158e0:	781b      	ldrb	r3, [r3, #0]
 80158e2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80158e4:	78fb      	ldrb	r3, [r7, #3]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	f000 8086 	beq.w	80159f8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80158ec:	4948      	ldr	r1, [pc, #288]	; (8015a10 <etharp_tmr+0x14c>)
 80158ee:	687a      	ldr	r2, [r7, #4]
 80158f0:	4613      	mov	r3, r2
 80158f2:	005b      	lsls	r3, r3, #1
 80158f4:	4413      	add	r3, r2
 80158f6:	00db      	lsls	r3, r3, #3
 80158f8:	440b      	add	r3, r1
 80158fa:	3312      	adds	r3, #18
 80158fc:	881b      	ldrh	r3, [r3, #0]
 80158fe:	3301      	adds	r3, #1
 8015900:	b298      	uxth	r0, r3
 8015902:	4943      	ldr	r1, [pc, #268]	; (8015a10 <etharp_tmr+0x14c>)
 8015904:	687a      	ldr	r2, [r7, #4]
 8015906:	4613      	mov	r3, r2
 8015908:	005b      	lsls	r3, r3, #1
 801590a:	4413      	add	r3, r2
 801590c:	00db      	lsls	r3, r3, #3
 801590e:	440b      	add	r3, r1
 8015910:	3312      	adds	r3, #18
 8015912:	4602      	mov	r2, r0
 8015914:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015916:	493e      	ldr	r1, [pc, #248]	; (8015a10 <etharp_tmr+0x14c>)
 8015918:	687a      	ldr	r2, [r7, #4]
 801591a:	4613      	mov	r3, r2
 801591c:	005b      	lsls	r3, r3, #1
 801591e:	4413      	add	r3, r2
 8015920:	00db      	lsls	r3, r3, #3
 8015922:	440b      	add	r3, r1
 8015924:	3312      	adds	r3, #18
 8015926:	881b      	ldrh	r3, [r3, #0]
 8015928:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801592c:	d215      	bcs.n	801595a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801592e:	4938      	ldr	r1, [pc, #224]	; (8015a10 <etharp_tmr+0x14c>)
 8015930:	687a      	ldr	r2, [r7, #4]
 8015932:	4613      	mov	r3, r2
 8015934:	005b      	lsls	r3, r3, #1
 8015936:	4413      	add	r3, r2
 8015938:	00db      	lsls	r3, r3, #3
 801593a:	440b      	add	r3, r1
 801593c:	3314      	adds	r3, #20
 801593e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015940:	2b01      	cmp	r3, #1
 8015942:	d10e      	bne.n	8015962 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015944:	4932      	ldr	r1, [pc, #200]	; (8015a10 <etharp_tmr+0x14c>)
 8015946:	687a      	ldr	r2, [r7, #4]
 8015948:	4613      	mov	r3, r2
 801594a:	005b      	lsls	r3, r3, #1
 801594c:	4413      	add	r3, r2
 801594e:	00db      	lsls	r3, r3, #3
 8015950:	440b      	add	r3, r1
 8015952:	3312      	adds	r3, #18
 8015954:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015956:	2b04      	cmp	r3, #4
 8015958:	d903      	bls.n	8015962 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f7ff ff80 	bl	8015860 <etharp_free_entry>
 8015960:	e04a      	b.n	80159f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015962:	492b      	ldr	r1, [pc, #172]	; (8015a10 <etharp_tmr+0x14c>)
 8015964:	687a      	ldr	r2, [r7, #4]
 8015966:	4613      	mov	r3, r2
 8015968:	005b      	lsls	r3, r3, #1
 801596a:	4413      	add	r3, r2
 801596c:	00db      	lsls	r3, r3, #3
 801596e:	440b      	add	r3, r1
 8015970:	3314      	adds	r3, #20
 8015972:	781b      	ldrb	r3, [r3, #0]
 8015974:	2b03      	cmp	r3, #3
 8015976:	d10a      	bne.n	801598e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015978:	4925      	ldr	r1, [pc, #148]	; (8015a10 <etharp_tmr+0x14c>)
 801597a:	687a      	ldr	r2, [r7, #4]
 801597c:	4613      	mov	r3, r2
 801597e:	005b      	lsls	r3, r3, #1
 8015980:	4413      	add	r3, r2
 8015982:	00db      	lsls	r3, r3, #3
 8015984:	440b      	add	r3, r1
 8015986:	3314      	adds	r3, #20
 8015988:	2204      	movs	r2, #4
 801598a:	701a      	strb	r2, [r3, #0]
 801598c:	e034      	b.n	80159f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801598e:	4920      	ldr	r1, [pc, #128]	; (8015a10 <etharp_tmr+0x14c>)
 8015990:	687a      	ldr	r2, [r7, #4]
 8015992:	4613      	mov	r3, r2
 8015994:	005b      	lsls	r3, r3, #1
 8015996:	4413      	add	r3, r2
 8015998:	00db      	lsls	r3, r3, #3
 801599a:	440b      	add	r3, r1
 801599c:	3314      	adds	r3, #20
 801599e:	781b      	ldrb	r3, [r3, #0]
 80159a0:	2b04      	cmp	r3, #4
 80159a2:	d10a      	bne.n	80159ba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80159a4:	491a      	ldr	r1, [pc, #104]	; (8015a10 <etharp_tmr+0x14c>)
 80159a6:	687a      	ldr	r2, [r7, #4]
 80159a8:	4613      	mov	r3, r2
 80159aa:	005b      	lsls	r3, r3, #1
 80159ac:	4413      	add	r3, r2
 80159ae:	00db      	lsls	r3, r3, #3
 80159b0:	440b      	add	r3, r1
 80159b2:	3314      	adds	r3, #20
 80159b4:	2202      	movs	r2, #2
 80159b6:	701a      	strb	r2, [r3, #0]
 80159b8:	e01e      	b.n	80159f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80159ba:	4915      	ldr	r1, [pc, #84]	; (8015a10 <etharp_tmr+0x14c>)
 80159bc:	687a      	ldr	r2, [r7, #4]
 80159be:	4613      	mov	r3, r2
 80159c0:	005b      	lsls	r3, r3, #1
 80159c2:	4413      	add	r3, r2
 80159c4:	00db      	lsls	r3, r3, #3
 80159c6:	440b      	add	r3, r1
 80159c8:	3314      	adds	r3, #20
 80159ca:	781b      	ldrb	r3, [r3, #0]
 80159cc:	2b01      	cmp	r3, #1
 80159ce:	d113      	bne.n	80159f8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80159d0:	490f      	ldr	r1, [pc, #60]	; (8015a10 <etharp_tmr+0x14c>)
 80159d2:	687a      	ldr	r2, [r7, #4]
 80159d4:	4613      	mov	r3, r2
 80159d6:	005b      	lsls	r3, r3, #1
 80159d8:	4413      	add	r3, r2
 80159da:	00db      	lsls	r3, r3, #3
 80159dc:	440b      	add	r3, r1
 80159de:	3308      	adds	r3, #8
 80159e0:	6818      	ldr	r0, [r3, #0]
 80159e2:	687a      	ldr	r2, [r7, #4]
 80159e4:	4613      	mov	r3, r2
 80159e6:	005b      	lsls	r3, r3, #1
 80159e8:	4413      	add	r3, r2
 80159ea:	00db      	lsls	r3, r3, #3
 80159ec:	4a08      	ldr	r2, [pc, #32]	; (8015a10 <etharp_tmr+0x14c>)
 80159ee:	4413      	add	r3, r2
 80159f0:	3304      	adds	r3, #4
 80159f2:	4619      	mov	r1, r3
 80159f4:	f000 fe6e 	bl	80166d4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	3301      	adds	r3, #1
 80159fc:	607b      	str	r3, [r7, #4]
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	2b09      	cmp	r3, #9
 8015a02:	f77f af65 	ble.w	80158d0 <etharp_tmr+0xc>
      }
    }
  }
}
 8015a06:	bf00      	nop
 8015a08:	bf00      	nop
 8015a0a:	3708      	adds	r7, #8
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bd80      	pop	{r7, pc}
 8015a10:	200069d4 	.word	0x200069d4

08015a14 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b08a      	sub	sp, #40	; 0x28
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	60f8      	str	r0, [r7, #12]
 8015a1c:	460b      	mov	r3, r1
 8015a1e:	607a      	str	r2, [r7, #4]
 8015a20:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015a22:	230a      	movs	r3, #10
 8015a24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015a26:	230a      	movs	r3, #10
 8015a28:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015a2a:	230a      	movs	r3, #10
 8015a2c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015a32:	230a      	movs	r3, #10
 8015a34:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015a36:	2300      	movs	r3, #0
 8015a38:	83bb      	strh	r3, [r7, #28]
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	837b      	strh	r3, [r7, #26]
 8015a3e:	2300      	movs	r3, #0
 8015a40:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a42:	2300      	movs	r3, #0
 8015a44:	843b      	strh	r3, [r7, #32]
 8015a46:	e0ae      	b.n	8015ba6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015a48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a4c:	49a6      	ldr	r1, [pc, #664]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015a4e:	4613      	mov	r3, r2
 8015a50:	005b      	lsls	r3, r3, #1
 8015a52:	4413      	add	r3, r2
 8015a54:	00db      	lsls	r3, r3, #3
 8015a56:	440b      	add	r3, r1
 8015a58:	3314      	adds	r3, #20
 8015a5a:	781b      	ldrb	r3, [r3, #0]
 8015a5c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015a5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015a62:	2b0a      	cmp	r3, #10
 8015a64:	d105      	bne.n	8015a72 <etharp_find_entry+0x5e>
 8015a66:	7dfb      	ldrb	r3, [r7, #23]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d102      	bne.n	8015a72 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015a6c:	8c3b      	ldrh	r3, [r7, #32]
 8015a6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015a70:	e095      	b.n	8015b9e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015a72:	7dfb      	ldrb	r3, [r7, #23]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	f000 8092 	beq.w	8015b9e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015a7a:	7dfb      	ldrb	r3, [r7, #23]
 8015a7c:	2b01      	cmp	r3, #1
 8015a7e:	d009      	beq.n	8015a94 <etharp_find_entry+0x80>
 8015a80:	7dfb      	ldrb	r3, [r7, #23]
 8015a82:	2b01      	cmp	r3, #1
 8015a84:	d806      	bhi.n	8015a94 <etharp_find_entry+0x80>
 8015a86:	4b99      	ldr	r3, [pc, #612]	; (8015cec <etharp_find_entry+0x2d8>)
 8015a88:	f240 1223 	movw	r2, #291	; 0x123
 8015a8c:	4998      	ldr	r1, [pc, #608]	; (8015cf0 <etharp_find_entry+0x2dc>)
 8015a8e:	4899      	ldr	r0, [pc, #612]	; (8015cf4 <etharp_find_entry+0x2e0>)
 8015a90:	f002 fd92 	bl	80185b8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d020      	beq.n	8015adc <etharp_find_entry+0xc8>
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	6819      	ldr	r1, [r3, #0]
 8015a9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015aa2:	4891      	ldr	r0, [pc, #580]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015aa4:	4613      	mov	r3, r2
 8015aa6:	005b      	lsls	r3, r3, #1
 8015aa8:	4413      	add	r3, r2
 8015aaa:	00db      	lsls	r3, r3, #3
 8015aac:	4403      	add	r3, r0
 8015aae:	3304      	adds	r3, #4
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	4299      	cmp	r1, r3
 8015ab4:	d112      	bne.n	8015adc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d00c      	beq.n	8015ad6 <etharp_find_entry+0xc2>
 8015abc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ac0:	4989      	ldr	r1, [pc, #548]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015ac2:	4613      	mov	r3, r2
 8015ac4:	005b      	lsls	r3, r3, #1
 8015ac6:	4413      	add	r3, r2
 8015ac8:	00db      	lsls	r3, r3, #3
 8015aca:	440b      	add	r3, r1
 8015acc:	3308      	adds	r3, #8
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	687a      	ldr	r2, [r7, #4]
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	d102      	bne.n	8015adc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015ad6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015ada:	e100      	b.n	8015cde <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015adc:	7dfb      	ldrb	r3, [r7, #23]
 8015ade:	2b01      	cmp	r3, #1
 8015ae0:	d140      	bne.n	8015b64 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015ae2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ae6:	4980      	ldr	r1, [pc, #512]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015ae8:	4613      	mov	r3, r2
 8015aea:	005b      	lsls	r3, r3, #1
 8015aec:	4413      	add	r3, r2
 8015aee:	00db      	lsls	r3, r3, #3
 8015af0:	440b      	add	r3, r1
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d01a      	beq.n	8015b2e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015af8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015afc:	497a      	ldr	r1, [pc, #488]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015afe:	4613      	mov	r3, r2
 8015b00:	005b      	lsls	r3, r3, #1
 8015b02:	4413      	add	r3, r2
 8015b04:	00db      	lsls	r3, r3, #3
 8015b06:	440b      	add	r3, r1
 8015b08:	3312      	adds	r3, #18
 8015b0a:	881b      	ldrh	r3, [r3, #0]
 8015b0c:	8bba      	ldrh	r2, [r7, #28]
 8015b0e:	429a      	cmp	r2, r3
 8015b10:	d845      	bhi.n	8015b9e <etharp_find_entry+0x18a>
            old_queue = i;
 8015b12:	8c3b      	ldrh	r3, [r7, #32]
 8015b14:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015b16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b1a:	4973      	ldr	r1, [pc, #460]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015b1c:	4613      	mov	r3, r2
 8015b1e:	005b      	lsls	r3, r3, #1
 8015b20:	4413      	add	r3, r2
 8015b22:	00db      	lsls	r3, r3, #3
 8015b24:	440b      	add	r3, r1
 8015b26:	3312      	adds	r3, #18
 8015b28:	881b      	ldrh	r3, [r3, #0]
 8015b2a:	83bb      	strh	r3, [r7, #28]
 8015b2c:	e037      	b.n	8015b9e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015b2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b32:	496d      	ldr	r1, [pc, #436]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015b34:	4613      	mov	r3, r2
 8015b36:	005b      	lsls	r3, r3, #1
 8015b38:	4413      	add	r3, r2
 8015b3a:	00db      	lsls	r3, r3, #3
 8015b3c:	440b      	add	r3, r1
 8015b3e:	3312      	adds	r3, #18
 8015b40:	881b      	ldrh	r3, [r3, #0]
 8015b42:	8b7a      	ldrh	r2, [r7, #26]
 8015b44:	429a      	cmp	r2, r3
 8015b46:	d82a      	bhi.n	8015b9e <etharp_find_entry+0x18a>
            old_pending = i;
 8015b48:	8c3b      	ldrh	r3, [r7, #32]
 8015b4a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015b4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b50:	4965      	ldr	r1, [pc, #404]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015b52:	4613      	mov	r3, r2
 8015b54:	005b      	lsls	r3, r3, #1
 8015b56:	4413      	add	r3, r2
 8015b58:	00db      	lsls	r3, r3, #3
 8015b5a:	440b      	add	r3, r1
 8015b5c:	3312      	adds	r3, #18
 8015b5e:	881b      	ldrh	r3, [r3, #0]
 8015b60:	837b      	strh	r3, [r7, #26]
 8015b62:	e01c      	b.n	8015b9e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015b64:	7dfb      	ldrb	r3, [r7, #23]
 8015b66:	2b01      	cmp	r3, #1
 8015b68:	d919      	bls.n	8015b9e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015b6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b6e:	495e      	ldr	r1, [pc, #376]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015b70:	4613      	mov	r3, r2
 8015b72:	005b      	lsls	r3, r3, #1
 8015b74:	4413      	add	r3, r2
 8015b76:	00db      	lsls	r3, r3, #3
 8015b78:	440b      	add	r3, r1
 8015b7a:	3312      	adds	r3, #18
 8015b7c:	881b      	ldrh	r3, [r3, #0]
 8015b7e:	8b3a      	ldrh	r2, [r7, #24]
 8015b80:	429a      	cmp	r2, r3
 8015b82:	d80c      	bhi.n	8015b9e <etharp_find_entry+0x18a>
            old_stable = i;
 8015b84:	8c3b      	ldrh	r3, [r7, #32]
 8015b86:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015b88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b8c:	4956      	ldr	r1, [pc, #344]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015b8e:	4613      	mov	r3, r2
 8015b90:	005b      	lsls	r3, r3, #1
 8015b92:	4413      	add	r3, r2
 8015b94:	00db      	lsls	r3, r3, #3
 8015b96:	440b      	add	r3, r1
 8015b98:	3312      	adds	r3, #18
 8015b9a:	881b      	ldrh	r3, [r3, #0]
 8015b9c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b9e:	8c3b      	ldrh	r3, [r7, #32]
 8015ba0:	3301      	adds	r3, #1
 8015ba2:	b29b      	uxth	r3, r3
 8015ba4:	843b      	strh	r3, [r7, #32]
 8015ba6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015baa:	2b09      	cmp	r3, #9
 8015bac:	f77f af4c 	ble.w	8015a48 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015bb0:	7afb      	ldrb	r3, [r7, #11]
 8015bb2:	f003 0302 	and.w	r3, r3, #2
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d108      	bne.n	8015bcc <etharp_find_entry+0x1b8>
 8015bba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015bbe:	2b0a      	cmp	r3, #10
 8015bc0:	d107      	bne.n	8015bd2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015bc2:	7afb      	ldrb	r3, [r7, #11]
 8015bc4:	f003 0301 	and.w	r3, r3, #1
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d102      	bne.n	8015bd2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8015bd0:	e085      	b.n	8015cde <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015bd2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015bd6:	2b09      	cmp	r3, #9
 8015bd8:	dc02      	bgt.n	8015be0 <etharp_find_entry+0x1cc>
    i = empty;
 8015bda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015bdc:	843b      	strh	r3, [r7, #32]
 8015bde:	e039      	b.n	8015c54 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015be0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015be4:	2b09      	cmp	r3, #9
 8015be6:	dc14      	bgt.n	8015c12 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015be8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015bec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bf0:	493d      	ldr	r1, [pc, #244]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015bf2:	4613      	mov	r3, r2
 8015bf4:	005b      	lsls	r3, r3, #1
 8015bf6:	4413      	add	r3, r2
 8015bf8:	00db      	lsls	r3, r3, #3
 8015bfa:	440b      	add	r3, r1
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d018      	beq.n	8015c34 <etharp_find_entry+0x220>
 8015c02:	4b3a      	ldr	r3, [pc, #232]	; (8015cec <etharp_find_entry+0x2d8>)
 8015c04:	f240 126d 	movw	r2, #365	; 0x16d
 8015c08:	493b      	ldr	r1, [pc, #236]	; (8015cf8 <etharp_find_entry+0x2e4>)
 8015c0a:	483a      	ldr	r0, [pc, #232]	; (8015cf4 <etharp_find_entry+0x2e0>)
 8015c0c:	f002 fcd4 	bl	80185b8 <iprintf>
 8015c10:	e010      	b.n	8015c34 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015c12:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015c16:	2b09      	cmp	r3, #9
 8015c18:	dc02      	bgt.n	8015c20 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015c1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015c1c:	843b      	strh	r3, [r7, #32]
 8015c1e:	e009      	b.n	8015c34 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015c20:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015c24:	2b09      	cmp	r3, #9
 8015c26:	dc02      	bgt.n	8015c2e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015c28:	8bfb      	ldrh	r3, [r7, #30]
 8015c2a:	843b      	strh	r3, [r7, #32]
 8015c2c:	e002      	b.n	8015c34 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8015c32:	e054      	b.n	8015cde <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015c34:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c38:	2b09      	cmp	r3, #9
 8015c3a:	dd06      	ble.n	8015c4a <etharp_find_entry+0x236>
 8015c3c:	4b2b      	ldr	r3, [pc, #172]	; (8015cec <etharp_find_entry+0x2d8>)
 8015c3e:	f240 127f 	movw	r2, #383	; 0x17f
 8015c42:	492e      	ldr	r1, [pc, #184]	; (8015cfc <etharp_find_entry+0x2e8>)
 8015c44:	482b      	ldr	r0, [pc, #172]	; (8015cf4 <etharp_find_entry+0x2e0>)
 8015c46:	f002 fcb7 	bl	80185b8 <iprintf>
    etharp_free_entry(i);
 8015c4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c4e:	4618      	mov	r0, r3
 8015c50:	f7ff fe06 	bl	8015860 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015c54:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c58:	2b09      	cmp	r3, #9
 8015c5a:	dd06      	ble.n	8015c6a <etharp_find_entry+0x256>
 8015c5c:	4b23      	ldr	r3, [pc, #140]	; (8015cec <etharp_find_entry+0x2d8>)
 8015c5e:	f240 1283 	movw	r2, #387	; 0x183
 8015c62:	4926      	ldr	r1, [pc, #152]	; (8015cfc <etharp_find_entry+0x2e8>)
 8015c64:	4823      	ldr	r0, [pc, #140]	; (8015cf4 <etharp_find_entry+0x2e0>)
 8015c66:	f002 fca7 	bl	80185b8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015c6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c6e:	491e      	ldr	r1, [pc, #120]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015c70:	4613      	mov	r3, r2
 8015c72:	005b      	lsls	r3, r3, #1
 8015c74:	4413      	add	r3, r2
 8015c76:	00db      	lsls	r3, r3, #3
 8015c78:	440b      	add	r3, r1
 8015c7a:	3314      	adds	r3, #20
 8015c7c:	781b      	ldrb	r3, [r3, #0]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d006      	beq.n	8015c90 <etharp_find_entry+0x27c>
 8015c82:	4b1a      	ldr	r3, [pc, #104]	; (8015cec <etharp_find_entry+0x2d8>)
 8015c84:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015c88:	491d      	ldr	r1, [pc, #116]	; (8015d00 <etharp_find_entry+0x2ec>)
 8015c8a:	481a      	ldr	r0, [pc, #104]	; (8015cf4 <etharp_find_entry+0x2e0>)
 8015c8c:	f002 fc94 	bl	80185b8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d00b      	beq.n	8015cae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015c96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	6819      	ldr	r1, [r3, #0]
 8015c9e:	4812      	ldr	r0, [pc, #72]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015ca0:	4613      	mov	r3, r2
 8015ca2:	005b      	lsls	r3, r3, #1
 8015ca4:	4413      	add	r3, r2
 8015ca6:	00db      	lsls	r3, r3, #3
 8015ca8:	4403      	add	r3, r0
 8015caa:	3304      	adds	r3, #4
 8015cac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015cae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cb2:	490d      	ldr	r1, [pc, #52]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015cb4:	4613      	mov	r3, r2
 8015cb6:	005b      	lsls	r3, r3, #1
 8015cb8:	4413      	add	r3, r2
 8015cba:	00db      	lsls	r3, r3, #3
 8015cbc:	440b      	add	r3, r1
 8015cbe:	3312      	adds	r3, #18
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015cc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cc8:	4907      	ldr	r1, [pc, #28]	; (8015ce8 <etharp_find_entry+0x2d4>)
 8015cca:	4613      	mov	r3, r2
 8015ccc:	005b      	lsls	r3, r3, #1
 8015cce:	4413      	add	r3, r2
 8015cd0:	00db      	lsls	r3, r3, #3
 8015cd2:	440b      	add	r3, r1
 8015cd4:	3308      	adds	r3, #8
 8015cd6:	687a      	ldr	r2, [r7, #4]
 8015cd8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015cda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015cde:	4618      	mov	r0, r3
 8015ce0:	3728      	adds	r7, #40	; 0x28
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	bd80      	pop	{r7, pc}
 8015ce6:	bf00      	nop
 8015ce8:	200069d4 	.word	0x200069d4
 8015cec:	0801c630 	.word	0x0801c630
 8015cf0:	0801c668 	.word	0x0801c668
 8015cf4:	0801c6a8 	.word	0x0801c6a8
 8015cf8:	0801c6d0 	.word	0x0801c6d0
 8015cfc:	0801c6e8 	.word	0x0801c6e8
 8015d00:	0801c6fc 	.word	0x0801c6fc

08015d04 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b088      	sub	sp, #32
 8015d08:	af02      	add	r7, sp, #8
 8015d0a:	60f8      	str	r0, [r7, #12]
 8015d0c:	60b9      	str	r1, [r7, #8]
 8015d0e:	607a      	str	r2, [r7, #4]
 8015d10:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015d18:	2b06      	cmp	r3, #6
 8015d1a:	d006      	beq.n	8015d2a <etharp_update_arp_entry+0x26>
 8015d1c:	4b48      	ldr	r3, [pc, #288]	; (8015e40 <etharp_update_arp_entry+0x13c>)
 8015d1e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015d22:	4948      	ldr	r1, [pc, #288]	; (8015e44 <etharp_update_arp_entry+0x140>)
 8015d24:	4848      	ldr	r0, [pc, #288]	; (8015e48 <etharp_update_arp_entry+0x144>)
 8015d26:	f002 fc47 	bl	80185b8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015d2a:	68bb      	ldr	r3, [r7, #8]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d012      	beq.n	8015d56 <etharp_update_arp_entry+0x52>
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d00e      	beq.n	8015d56 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	68f9      	ldr	r1, [r7, #12]
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f001 f8fe 	bl	8016f40 <ip4_addr_isbroadcast_u32>
 8015d44:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d105      	bne.n	8015d56 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015d52:	2be0      	cmp	r3, #224	; 0xe0
 8015d54:	d102      	bne.n	8015d5c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015d56:	f06f 030f 	mvn.w	r3, #15
 8015d5a:	e06c      	b.n	8015e36 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015d5c:	78fb      	ldrb	r3, [r7, #3]
 8015d5e:	68fa      	ldr	r2, [r7, #12]
 8015d60:	4619      	mov	r1, r3
 8015d62:	68b8      	ldr	r0, [r7, #8]
 8015d64:	f7ff fe56 	bl	8015a14 <etharp_find_entry>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015d6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	da02      	bge.n	8015d7a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015d74:	8afb      	ldrh	r3, [r7, #22]
 8015d76:	b25b      	sxtb	r3, r3
 8015d78:	e05d      	b.n	8015e36 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015d7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015d7e:	4933      	ldr	r1, [pc, #204]	; (8015e4c <etharp_update_arp_entry+0x148>)
 8015d80:	4613      	mov	r3, r2
 8015d82:	005b      	lsls	r3, r3, #1
 8015d84:	4413      	add	r3, r2
 8015d86:	00db      	lsls	r3, r3, #3
 8015d88:	440b      	add	r3, r1
 8015d8a:	3314      	adds	r3, #20
 8015d8c:	2202      	movs	r2, #2
 8015d8e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015d90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015d94:	492d      	ldr	r1, [pc, #180]	; (8015e4c <etharp_update_arp_entry+0x148>)
 8015d96:	4613      	mov	r3, r2
 8015d98:	005b      	lsls	r3, r3, #1
 8015d9a:	4413      	add	r3, r2
 8015d9c:	00db      	lsls	r3, r3, #3
 8015d9e:	440b      	add	r3, r1
 8015da0:	3308      	adds	r3, #8
 8015da2:	68fa      	ldr	r2, [r7, #12]
 8015da4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015da6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015daa:	4613      	mov	r3, r2
 8015dac:	005b      	lsls	r3, r3, #1
 8015dae:	4413      	add	r3, r2
 8015db0:	00db      	lsls	r3, r3, #3
 8015db2:	3308      	adds	r3, #8
 8015db4:	4a25      	ldr	r2, [pc, #148]	; (8015e4c <etharp_update_arp_entry+0x148>)
 8015db6:	4413      	add	r3, r2
 8015db8:	3304      	adds	r3, #4
 8015dba:	2206      	movs	r2, #6
 8015dbc:	6879      	ldr	r1, [r7, #4]
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f002 fb20 	bl	8018404 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015dc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015dc8:	4920      	ldr	r1, [pc, #128]	; (8015e4c <etharp_update_arp_entry+0x148>)
 8015dca:	4613      	mov	r3, r2
 8015dcc:	005b      	lsls	r3, r3, #1
 8015dce:	4413      	add	r3, r2
 8015dd0:	00db      	lsls	r3, r3, #3
 8015dd2:	440b      	add	r3, r1
 8015dd4:	3312      	adds	r3, #18
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015dda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015dde:	491b      	ldr	r1, [pc, #108]	; (8015e4c <etharp_update_arp_entry+0x148>)
 8015de0:	4613      	mov	r3, r2
 8015de2:	005b      	lsls	r3, r3, #1
 8015de4:	4413      	add	r3, r2
 8015de6:	00db      	lsls	r3, r3, #3
 8015de8:	440b      	add	r3, r1
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d021      	beq.n	8015e34 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015df0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015df4:	4915      	ldr	r1, [pc, #84]	; (8015e4c <etharp_update_arp_entry+0x148>)
 8015df6:	4613      	mov	r3, r2
 8015df8:	005b      	lsls	r3, r3, #1
 8015dfa:	4413      	add	r3, r2
 8015dfc:	00db      	lsls	r3, r3, #3
 8015dfe:	440b      	add	r3, r1
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015e04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e08:	4910      	ldr	r1, [pc, #64]	; (8015e4c <etharp_update_arp_entry+0x148>)
 8015e0a:	4613      	mov	r3, r2
 8015e0c:	005b      	lsls	r3, r3, #1
 8015e0e:	4413      	add	r3, r2
 8015e10:	00db      	lsls	r3, r3, #3
 8015e12:	440b      	add	r3, r1
 8015e14:	2200      	movs	r2, #0
 8015e16:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015e1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015e22:	9300      	str	r3, [sp, #0]
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	6939      	ldr	r1, [r7, #16]
 8015e28:	68f8      	ldr	r0, [r7, #12]
 8015e2a:	f001 ff91 	bl	8017d50 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015e2e:	6938      	ldr	r0, [r7, #16]
 8015e30:	f7f8 fc50 	bl	800e6d4 <pbuf_free>
  }
  return ERR_OK;
 8015e34:	2300      	movs	r3, #0
}
 8015e36:	4618      	mov	r0, r3
 8015e38:	3718      	adds	r7, #24
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	bd80      	pop	{r7, pc}
 8015e3e:	bf00      	nop
 8015e40:	0801c630 	.word	0x0801c630
 8015e44:	0801c728 	.word	0x0801c728
 8015e48:	0801c6a8 	.word	0x0801c6a8
 8015e4c:	200069d4 	.word	0x200069d4

08015e50 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b084      	sub	sp, #16
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015e58:	2300      	movs	r3, #0
 8015e5a:	60fb      	str	r3, [r7, #12]
 8015e5c:	e01e      	b.n	8015e9c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015e5e:	4913      	ldr	r1, [pc, #76]	; (8015eac <etharp_cleanup_netif+0x5c>)
 8015e60:	68fa      	ldr	r2, [r7, #12]
 8015e62:	4613      	mov	r3, r2
 8015e64:	005b      	lsls	r3, r3, #1
 8015e66:	4413      	add	r3, r2
 8015e68:	00db      	lsls	r3, r3, #3
 8015e6a:	440b      	add	r3, r1
 8015e6c:	3314      	adds	r3, #20
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015e72:	7afb      	ldrb	r3, [r7, #11]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d00e      	beq.n	8015e96 <etharp_cleanup_netif+0x46>
 8015e78:	490c      	ldr	r1, [pc, #48]	; (8015eac <etharp_cleanup_netif+0x5c>)
 8015e7a:	68fa      	ldr	r2, [r7, #12]
 8015e7c:	4613      	mov	r3, r2
 8015e7e:	005b      	lsls	r3, r3, #1
 8015e80:	4413      	add	r3, r2
 8015e82:	00db      	lsls	r3, r3, #3
 8015e84:	440b      	add	r3, r1
 8015e86:	3308      	adds	r3, #8
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	687a      	ldr	r2, [r7, #4]
 8015e8c:	429a      	cmp	r2, r3
 8015e8e:	d102      	bne.n	8015e96 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015e90:	68f8      	ldr	r0, [r7, #12]
 8015e92:	f7ff fce5 	bl	8015860 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	3301      	adds	r3, #1
 8015e9a:	60fb      	str	r3, [r7, #12]
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	2b09      	cmp	r3, #9
 8015ea0:	dddd      	ble.n	8015e5e <etharp_cleanup_netif+0xe>
    }
  }
}
 8015ea2:	bf00      	nop
 8015ea4:	bf00      	nop
 8015ea6:	3710      	adds	r7, #16
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}
 8015eac:	200069d4 	.word	0x200069d4

08015eb0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015eb0:	b5b0      	push	{r4, r5, r7, lr}
 8015eb2:	b08a      	sub	sp, #40	; 0x28
 8015eb4:	af04      	add	r7, sp, #16
 8015eb6:	6078      	str	r0, [r7, #4]
 8015eb8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015eba:	683b      	ldr	r3, [r7, #0]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d107      	bne.n	8015ed0 <etharp_input+0x20>
 8015ec0:	4b3d      	ldr	r3, [pc, #244]	; (8015fb8 <etharp_input+0x108>)
 8015ec2:	f240 228a 	movw	r2, #650	; 0x28a
 8015ec6:	493d      	ldr	r1, [pc, #244]	; (8015fbc <etharp_input+0x10c>)
 8015ec8:	483d      	ldr	r0, [pc, #244]	; (8015fc0 <etharp_input+0x110>)
 8015eca:	f002 fb75 	bl	80185b8 <iprintf>
 8015ece:	e06f      	b.n	8015fb0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	685b      	ldr	r3, [r3, #4]
 8015ed4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015ed6:	693b      	ldr	r3, [r7, #16]
 8015ed8:	881b      	ldrh	r3, [r3, #0]
 8015eda:	b29b      	uxth	r3, r3
 8015edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ee0:	d10c      	bne.n	8015efc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015ee2:	693b      	ldr	r3, [r7, #16]
 8015ee4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015ee6:	2b06      	cmp	r3, #6
 8015ee8:	d108      	bne.n	8015efc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015eee:	2b04      	cmp	r3, #4
 8015ef0:	d104      	bne.n	8015efc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015ef2:	693b      	ldr	r3, [r7, #16]
 8015ef4:	885b      	ldrh	r3, [r3, #2]
 8015ef6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015ef8:	2b08      	cmp	r3, #8
 8015efa:	d003      	beq.n	8015f04 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f7f8 fbe9 	bl	800e6d4 <pbuf_free>
    return;
 8015f02:	e055      	b.n	8015fb0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015f04:	693b      	ldr	r3, [r7, #16]
 8015f06:	330e      	adds	r3, #14
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015f0c:	693b      	ldr	r3, [r7, #16]
 8015f0e:	3318      	adds	r3, #24
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015f14:	683b      	ldr	r3, [r7, #0]
 8015f16:	3304      	adds	r3, #4
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d102      	bne.n	8015f24 <etharp_input+0x74>
    for_us = 0;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	75fb      	strb	r3, [r7, #23]
 8015f22:	e009      	b.n	8015f38 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015f24:	68ba      	ldr	r2, [r7, #8]
 8015f26:	683b      	ldr	r3, [r7, #0]
 8015f28:	3304      	adds	r3, #4
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	429a      	cmp	r2, r3
 8015f2e:	bf0c      	ite	eq
 8015f30:	2301      	moveq	r3, #1
 8015f32:	2300      	movne	r3, #0
 8015f34:	b2db      	uxtb	r3, r3
 8015f36:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015f38:	693b      	ldr	r3, [r7, #16]
 8015f3a:	f103 0208 	add.w	r2, r3, #8
 8015f3e:	7dfb      	ldrb	r3, [r7, #23]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d001      	beq.n	8015f48 <etharp_input+0x98>
 8015f44:	2301      	movs	r3, #1
 8015f46:	e000      	b.n	8015f4a <etharp_input+0x9a>
 8015f48:	2302      	movs	r3, #2
 8015f4a:	f107 010c 	add.w	r1, r7, #12
 8015f4e:	6838      	ldr	r0, [r7, #0]
 8015f50:	f7ff fed8 	bl	8015d04 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015f54:	693b      	ldr	r3, [r7, #16]
 8015f56:	88db      	ldrh	r3, [r3, #6]
 8015f58:	b29b      	uxth	r3, r3
 8015f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f5e:	d003      	beq.n	8015f68 <etharp_input+0xb8>
 8015f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015f64:	d01e      	beq.n	8015fa4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015f66:	e020      	b.n	8015faa <etharp_input+0xfa>
      if (for_us) {
 8015f68:	7dfb      	ldrb	r3, [r7, #23]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d01c      	beq.n	8015fa8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015f74:	693b      	ldr	r3, [r7, #16]
 8015f76:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015f7a:	683b      	ldr	r3, [r7, #0]
 8015f7c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015f80:	683b      	ldr	r3, [r7, #0]
 8015f82:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015f84:	693a      	ldr	r2, [r7, #16]
 8015f86:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015f88:	2102      	movs	r1, #2
 8015f8a:	9103      	str	r1, [sp, #12]
 8015f8c:	f107 010c 	add.w	r1, r7, #12
 8015f90:	9102      	str	r1, [sp, #8]
 8015f92:	9201      	str	r2, [sp, #4]
 8015f94:	9300      	str	r3, [sp, #0]
 8015f96:	462b      	mov	r3, r5
 8015f98:	4622      	mov	r2, r4
 8015f9a:	4601      	mov	r1, r0
 8015f9c:	6838      	ldr	r0, [r7, #0]
 8015f9e:	f000 faeb 	bl	8016578 <etharp_raw>
      break;
 8015fa2:	e001      	b.n	8015fa8 <etharp_input+0xf8>
      break;
 8015fa4:	bf00      	nop
 8015fa6:	e000      	b.n	8015faa <etharp_input+0xfa>
      break;
 8015fa8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f7f8 fb92 	bl	800e6d4 <pbuf_free>
}
 8015fb0:	3718      	adds	r7, #24
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8015fb6:	bf00      	nop
 8015fb8:	0801c630 	.word	0x0801c630
 8015fbc:	0801c780 	.word	0x0801c780
 8015fc0:	0801c6a8 	.word	0x0801c6a8

08015fc4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b086      	sub	sp, #24
 8015fc8:	af02      	add	r7, sp, #8
 8015fca:	60f8      	str	r0, [r7, #12]
 8015fcc:	60b9      	str	r1, [r7, #8]
 8015fce:	4613      	mov	r3, r2
 8015fd0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015fd2:	79fa      	ldrb	r2, [r7, #7]
 8015fd4:	4944      	ldr	r1, [pc, #272]	; (80160e8 <etharp_output_to_arp_index+0x124>)
 8015fd6:	4613      	mov	r3, r2
 8015fd8:	005b      	lsls	r3, r3, #1
 8015fda:	4413      	add	r3, r2
 8015fdc:	00db      	lsls	r3, r3, #3
 8015fde:	440b      	add	r3, r1
 8015fe0:	3314      	adds	r3, #20
 8015fe2:	781b      	ldrb	r3, [r3, #0]
 8015fe4:	2b01      	cmp	r3, #1
 8015fe6:	d806      	bhi.n	8015ff6 <etharp_output_to_arp_index+0x32>
 8015fe8:	4b40      	ldr	r3, [pc, #256]	; (80160ec <etharp_output_to_arp_index+0x128>)
 8015fea:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015fee:	4940      	ldr	r1, [pc, #256]	; (80160f0 <etharp_output_to_arp_index+0x12c>)
 8015ff0:	4840      	ldr	r0, [pc, #256]	; (80160f4 <etharp_output_to_arp_index+0x130>)
 8015ff2:	f002 fae1 	bl	80185b8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015ff6:	79fa      	ldrb	r2, [r7, #7]
 8015ff8:	493b      	ldr	r1, [pc, #236]	; (80160e8 <etharp_output_to_arp_index+0x124>)
 8015ffa:	4613      	mov	r3, r2
 8015ffc:	005b      	lsls	r3, r3, #1
 8015ffe:	4413      	add	r3, r2
 8016000:	00db      	lsls	r3, r3, #3
 8016002:	440b      	add	r3, r1
 8016004:	3314      	adds	r3, #20
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	2b02      	cmp	r3, #2
 801600a:	d153      	bne.n	80160b4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801600c:	79fa      	ldrb	r2, [r7, #7]
 801600e:	4936      	ldr	r1, [pc, #216]	; (80160e8 <etharp_output_to_arp_index+0x124>)
 8016010:	4613      	mov	r3, r2
 8016012:	005b      	lsls	r3, r3, #1
 8016014:	4413      	add	r3, r2
 8016016:	00db      	lsls	r3, r3, #3
 8016018:	440b      	add	r3, r1
 801601a:	3312      	adds	r3, #18
 801601c:	881b      	ldrh	r3, [r3, #0]
 801601e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016022:	d919      	bls.n	8016058 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016024:	79fa      	ldrb	r2, [r7, #7]
 8016026:	4613      	mov	r3, r2
 8016028:	005b      	lsls	r3, r3, #1
 801602a:	4413      	add	r3, r2
 801602c:	00db      	lsls	r3, r3, #3
 801602e:	4a2e      	ldr	r2, [pc, #184]	; (80160e8 <etharp_output_to_arp_index+0x124>)
 8016030:	4413      	add	r3, r2
 8016032:	3304      	adds	r3, #4
 8016034:	4619      	mov	r1, r3
 8016036:	68f8      	ldr	r0, [r7, #12]
 8016038:	f000 fb4c 	bl	80166d4 <etharp_request>
 801603c:	4603      	mov	r3, r0
 801603e:	2b00      	cmp	r3, #0
 8016040:	d138      	bne.n	80160b4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016042:	79fa      	ldrb	r2, [r7, #7]
 8016044:	4928      	ldr	r1, [pc, #160]	; (80160e8 <etharp_output_to_arp_index+0x124>)
 8016046:	4613      	mov	r3, r2
 8016048:	005b      	lsls	r3, r3, #1
 801604a:	4413      	add	r3, r2
 801604c:	00db      	lsls	r3, r3, #3
 801604e:	440b      	add	r3, r1
 8016050:	3314      	adds	r3, #20
 8016052:	2203      	movs	r2, #3
 8016054:	701a      	strb	r2, [r3, #0]
 8016056:	e02d      	b.n	80160b4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016058:	79fa      	ldrb	r2, [r7, #7]
 801605a:	4923      	ldr	r1, [pc, #140]	; (80160e8 <etharp_output_to_arp_index+0x124>)
 801605c:	4613      	mov	r3, r2
 801605e:	005b      	lsls	r3, r3, #1
 8016060:	4413      	add	r3, r2
 8016062:	00db      	lsls	r3, r3, #3
 8016064:	440b      	add	r3, r1
 8016066:	3312      	adds	r3, #18
 8016068:	881b      	ldrh	r3, [r3, #0]
 801606a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801606e:	d321      	bcc.n	80160b4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016070:	79fa      	ldrb	r2, [r7, #7]
 8016072:	4613      	mov	r3, r2
 8016074:	005b      	lsls	r3, r3, #1
 8016076:	4413      	add	r3, r2
 8016078:	00db      	lsls	r3, r3, #3
 801607a:	4a1b      	ldr	r2, [pc, #108]	; (80160e8 <etharp_output_to_arp_index+0x124>)
 801607c:	4413      	add	r3, r2
 801607e:	1d19      	adds	r1, r3, #4
 8016080:	79fa      	ldrb	r2, [r7, #7]
 8016082:	4613      	mov	r3, r2
 8016084:	005b      	lsls	r3, r3, #1
 8016086:	4413      	add	r3, r2
 8016088:	00db      	lsls	r3, r3, #3
 801608a:	3308      	adds	r3, #8
 801608c:	4a16      	ldr	r2, [pc, #88]	; (80160e8 <etharp_output_to_arp_index+0x124>)
 801608e:	4413      	add	r3, r2
 8016090:	3304      	adds	r3, #4
 8016092:	461a      	mov	r2, r3
 8016094:	68f8      	ldr	r0, [r7, #12]
 8016096:	f000 fafb 	bl	8016690 <etharp_request_dst>
 801609a:	4603      	mov	r3, r0
 801609c:	2b00      	cmp	r3, #0
 801609e:	d109      	bne.n	80160b4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80160a0:	79fa      	ldrb	r2, [r7, #7]
 80160a2:	4911      	ldr	r1, [pc, #68]	; (80160e8 <etharp_output_to_arp_index+0x124>)
 80160a4:	4613      	mov	r3, r2
 80160a6:	005b      	lsls	r3, r3, #1
 80160a8:	4413      	add	r3, r2
 80160aa:	00db      	lsls	r3, r3, #3
 80160ac:	440b      	add	r3, r1
 80160ae:	3314      	adds	r3, #20
 80160b0:	2203      	movs	r2, #3
 80160b2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80160ba:	79fa      	ldrb	r2, [r7, #7]
 80160bc:	4613      	mov	r3, r2
 80160be:	005b      	lsls	r3, r3, #1
 80160c0:	4413      	add	r3, r2
 80160c2:	00db      	lsls	r3, r3, #3
 80160c4:	3308      	adds	r3, #8
 80160c6:	4a08      	ldr	r2, [pc, #32]	; (80160e8 <etharp_output_to_arp_index+0x124>)
 80160c8:	4413      	add	r3, r2
 80160ca:	3304      	adds	r3, #4
 80160cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80160d0:	9200      	str	r2, [sp, #0]
 80160d2:	460a      	mov	r2, r1
 80160d4:	68b9      	ldr	r1, [r7, #8]
 80160d6:	68f8      	ldr	r0, [r7, #12]
 80160d8:	f001 fe3a 	bl	8017d50 <ethernet_output>
 80160dc:	4603      	mov	r3, r0
}
 80160de:	4618      	mov	r0, r3
 80160e0:	3710      	adds	r7, #16
 80160e2:	46bd      	mov	sp, r7
 80160e4:	bd80      	pop	{r7, pc}
 80160e6:	bf00      	nop
 80160e8:	200069d4 	.word	0x200069d4
 80160ec:	0801c630 	.word	0x0801c630
 80160f0:	0801c7a0 	.word	0x0801c7a0
 80160f4:	0801c6a8 	.word	0x0801c6a8

080160f8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b08a      	sub	sp, #40	; 0x28
 80160fc:	af02      	add	r7, sp, #8
 80160fe:	60f8      	str	r0, [r7, #12]
 8016100:	60b9      	str	r1, [r7, #8]
 8016102:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d106      	bne.n	801611c <etharp_output+0x24>
 801610e:	4b73      	ldr	r3, [pc, #460]	; (80162dc <etharp_output+0x1e4>)
 8016110:	f240 321e 	movw	r2, #798	; 0x31e
 8016114:	4972      	ldr	r1, [pc, #456]	; (80162e0 <etharp_output+0x1e8>)
 8016116:	4873      	ldr	r0, [pc, #460]	; (80162e4 <etharp_output+0x1ec>)
 8016118:	f002 fa4e 	bl	80185b8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801611c:	68bb      	ldr	r3, [r7, #8]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d106      	bne.n	8016130 <etharp_output+0x38>
 8016122:	4b6e      	ldr	r3, [pc, #440]	; (80162dc <etharp_output+0x1e4>)
 8016124:	f240 321f 	movw	r2, #799	; 0x31f
 8016128:	496f      	ldr	r1, [pc, #444]	; (80162e8 <etharp_output+0x1f0>)
 801612a:	486e      	ldr	r0, [pc, #440]	; (80162e4 <etharp_output+0x1ec>)
 801612c:	f002 fa44 	bl	80185b8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d106      	bne.n	8016144 <etharp_output+0x4c>
 8016136:	4b69      	ldr	r3, [pc, #420]	; (80162dc <etharp_output+0x1e4>)
 8016138:	f44f 7248 	mov.w	r2, #800	; 0x320
 801613c:	496b      	ldr	r1, [pc, #428]	; (80162ec <etharp_output+0x1f4>)
 801613e:	4869      	ldr	r0, [pc, #420]	; (80162e4 <etharp_output+0x1ec>)
 8016140:	f002 fa3a 	bl	80185b8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	68f9      	ldr	r1, [r7, #12]
 801614a:	4618      	mov	r0, r3
 801614c:	f000 fef8 	bl	8016f40 <ip4_addr_isbroadcast_u32>
 8016150:	4603      	mov	r3, r0
 8016152:	2b00      	cmp	r3, #0
 8016154:	d002      	beq.n	801615c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016156:	4b66      	ldr	r3, [pc, #408]	; (80162f0 <etharp_output+0x1f8>)
 8016158:	61fb      	str	r3, [r7, #28]
 801615a:	e0af      	b.n	80162bc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016164:	2be0      	cmp	r3, #224	; 0xe0
 8016166:	d118      	bne.n	801619a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016168:	2301      	movs	r3, #1
 801616a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801616c:	2300      	movs	r3, #0
 801616e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016170:	235e      	movs	r3, #94	; 0x5e
 8016172:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	3301      	adds	r3, #1
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801617e:	b2db      	uxtb	r3, r3
 8016180:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	3302      	adds	r3, #2
 8016186:	781b      	ldrb	r3, [r3, #0]
 8016188:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	3303      	adds	r3, #3
 801618e:	781b      	ldrb	r3, [r3, #0]
 8016190:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016192:	f107 0310 	add.w	r3, r7, #16
 8016196:	61fb      	str	r3, [r7, #28]
 8016198:	e090      	b.n	80162bc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	681a      	ldr	r2, [r3, #0]
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	3304      	adds	r3, #4
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	405a      	eors	r2, r3
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	3308      	adds	r3, #8
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	4013      	ands	r3, r2
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d012      	beq.n	80161d8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80161b8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80161bc:	4293      	cmp	r3, r2
 80161be:	d00b      	beq.n	80161d8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	330c      	adds	r3, #12
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d003      	beq.n	80161d2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	330c      	adds	r3, #12
 80161ce:	61bb      	str	r3, [r7, #24]
 80161d0:	e002      	b.n	80161d8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80161d2:	f06f 0303 	mvn.w	r3, #3
 80161d6:	e07d      	b.n	80162d4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80161d8:	4b46      	ldr	r3, [pc, #280]	; (80162f4 <etharp_output+0x1fc>)
 80161da:	781b      	ldrb	r3, [r3, #0]
 80161dc:	4619      	mov	r1, r3
 80161de:	4a46      	ldr	r2, [pc, #280]	; (80162f8 <etharp_output+0x200>)
 80161e0:	460b      	mov	r3, r1
 80161e2:	005b      	lsls	r3, r3, #1
 80161e4:	440b      	add	r3, r1
 80161e6:	00db      	lsls	r3, r3, #3
 80161e8:	4413      	add	r3, r2
 80161ea:	3314      	adds	r3, #20
 80161ec:	781b      	ldrb	r3, [r3, #0]
 80161ee:	2b01      	cmp	r3, #1
 80161f0:	d925      	bls.n	801623e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80161f2:	4b40      	ldr	r3, [pc, #256]	; (80162f4 <etharp_output+0x1fc>)
 80161f4:	781b      	ldrb	r3, [r3, #0]
 80161f6:	4619      	mov	r1, r3
 80161f8:	4a3f      	ldr	r2, [pc, #252]	; (80162f8 <etharp_output+0x200>)
 80161fa:	460b      	mov	r3, r1
 80161fc:	005b      	lsls	r3, r3, #1
 80161fe:	440b      	add	r3, r1
 8016200:	00db      	lsls	r3, r3, #3
 8016202:	4413      	add	r3, r2
 8016204:	3308      	adds	r3, #8
 8016206:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016208:	68fa      	ldr	r2, [r7, #12]
 801620a:	429a      	cmp	r2, r3
 801620c:	d117      	bne.n	801623e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801620e:	69bb      	ldr	r3, [r7, #24]
 8016210:	681a      	ldr	r2, [r3, #0]
 8016212:	4b38      	ldr	r3, [pc, #224]	; (80162f4 <etharp_output+0x1fc>)
 8016214:	781b      	ldrb	r3, [r3, #0]
 8016216:	4618      	mov	r0, r3
 8016218:	4937      	ldr	r1, [pc, #220]	; (80162f8 <etharp_output+0x200>)
 801621a:	4603      	mov	r3, r0
 801621c:	005b      	lsls	r3, r3, #1
 801621e:	4403      	add	r3, r0
 8016220:	00db      	lsls	r3, r3, #3
 8016222:	440b      	add	r3, r1
 8016224:	3304      	adds	r3, #4
 8016226:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016228:	429a      	cmp	r2, r3
 801622a:	d108      	bne.n	801623e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801622c:	4b31      	ldr	r3, [pc, #196]	; (80162f4 <etharp_output+0x1fc>)
 801622e:	781b      	ldrb	r3, [r3, #0]
 8016230:	461a      	mov	r2, r3
 8016232:	68b9      	ldr	r1, [r7, #8]
 8016234:	68f8      	ldr	r0, [r7, #12]
 8016236:	f7ff fec5 	bl	8015fc4 <etharp_output_to_arp_index>
 801623a:	4603      	mov	r3, r0
 801623c:	e04a      	b.n	80162d4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801623e:	2300      	movs	r3, #0
 8016240:	75fb      	strb	r3, [r7, #23]
 8016242:	e031      	b.n	80162a8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016244:	7dfa      	ldrb	r2, [r7, #23]
 8016246:	492c      	ldr	r1, [pc, #176]	; (80162f8 <etharp_output+0x200>)
 8016248:	4613      	mov	r3, r2
 801624a:	005b      	lsls	r3, r3, #1
 801624c:	4413      	add	r3, r2
 801624e:	00db      	lsls	r3, r3, #3
 8016250:	440b      	add	r3, r1
 8016252:	3314      	adds	r3, #20
 8016254:	781b      	ldrb	r3, [r3, #0]
 8016256:	2b01      	cmp	r3, #1
 8016258:	d923      	bls.n	80162a2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801625a:	7dfa      	ldrb	r2, [r7, #23]
 801625c:	4926      	ldr	r1, [pc, #152]	; (80162f8 <etharp_output+0x200>)
 801625e:	4613      	mov	r3, r2
 8016260:	005b      	lsls	r3, r3, #1
 8016262:	4413      	add	r3, r2
 8016264:	00db      	lsls	r3, r3, #3
 8016266:	440b      	add	r3, r1
 8016268:	3308      	adds	r3, #8
 801626a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801626c:	68fa      	ldr	r2, [r7, #12]
 801626e:	429a      	cmp	r2, r3
 8016270:	d117      	bne.n	80162a2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016272:	69bb      	ldr	r3, [r7, #24]
 8016274:	6819      	ldr	r1, [r3, #0]
 8016276:	7dfa      	ldrb	r2, [r7, #23]
 8016278:	481f      	ldr	r0, [pc, #124]	; (80162f8 <etharp_output+0x200>)
 801627a:	4613      	mov	r3, r2
 801627c:	005b      	lsls	r3, r3, #1
 801627e:	4413      	add	r3, r2
 8016280:	00db      	lsls	r3, r3, #3
 8016282:	4403      	add	r3, r0
 8016284:	3304      	adds	r3, #4
 8016286:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016288:	4299      	cmp	r1, r3
 801628a:	d10a      	bne.n	80162a2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801628c:	4a19      	ldr	r2, [pc, #100]	; (80162f4 <etharp_output+0x1fc>)
 801628e:	7dfb      	ldrb	r3, [r7, #23]
 8016290:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016292:	7dfb      	ldrb	r3, [r7, #23]
 8016294:	461a      	mov	r2, r3
 8016296:	68b9      	ldr	r1, [r7, #8]
 8016298:	68f8      	ldr	r0, [r7, #12]
 801629a:	f7ff fe93 	bl	8015fc4 <etharp_output_to_arp_index>
 801629e:	4603      	mov	r3, r0
 80162a0:	e018      	b.n	80162d4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80162a2:	7dfb      	ldrb	r3, [r7, #23]
 80162a4:	3301      	adds	r3, #1
 80162a6:	75fb      	strb	r3, [r7, #23]
 80162a8:	7dfb      	ldrb	r3, [r7, #23]
 80162aa:	2b09      	cmp	r3, #9
 80162ac:	d9ca      	bls.n	8016244 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80162ae:	68ba      	ldr	r2, [r7, #8]
 80162b0:	69b9      	ldr	r1, [r7, #24]
 80162b2:	68f8      	ldr	r0, [r7, #12]
 80162b4:	f000 f822 	bl	80162fc <etharp_query>
 80162b8:	4603      	mov	r3, r0
 80162ba:	e00b      	b.n	80162d4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80162c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80162c6:	9300      	str	r3, [sp, #0]
 80162c8:	69fb      	ldr	r3, [r7, #28]
 80162ca:	68b9      	ldr	r1, [r7, #8]
 80162cc:	68f8      	ldr	r0, [r7, #12]
 80162ce:	f001 fd3f 	bl	8017d50 <ethernet_output>
 80162d2:	4603      	mov	r3, r0
}
 80162d4:	4618      	mov	r0, r3
 80162d6:	3720      	adds	r7, #32
 80162d8:	46bd      	mov	sp, r7
 80162da:	bd80      	pop	{r7, pc}
 80162dc:	0801c630 	.word	0x0801c630
 80162e0:	0801c780 	.word	0x0801c780
 80162e4:	0801c6a8 	.word	0x0801c6a8
 80162e8:	0801c7d0 	.word	0x0801c7d0
 80162ec:	0801c770 	.word	0x0801c770
 80162f0:	0801ce2c 	.word	0x0801ce2c
 80162f4:	20006ac4 	.word	0x20006ac4
 80162f8:	200069d4 	.word	0x200069d4

080162fc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b08c      	sub	sp, #48	; 0x30
 8016300:	af02      	add	r7, sp, #8
 8016302:	60f8      	str	r0, [r7, #12]
 8016304:	60b9      	str	r1, [r7, #8]
 8016306:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	3326      	adds	r3, #38	; 0x26
 801630c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801630e:	23ff      	movs	r3, #255	; 0xff
 8016310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016314:	2300      	movs	r3, #0
 8016316:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	68f9      	ldr	r1, [r7, #12]
 801631e:	4618      	mov	r0, r3
 8016320:	f000 fe0e 	bl	8016f40 <ip4_addr_isbroadcast_u32>
 8016324:	4603      	mov	r3, r0
 8016326:	2b00      	cmp	r3, #0
 8016328:	d10c      	bne.n	8016344 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801632a:	68bb      	ldr	r3, [r7, #8]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016332:	2be0      	cmp	r3, #224	; 0xe0
 8016334:	d006      	beq.n	8016344 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016336:	68bb      	ldr	r3, [r7, #8]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d003      	beq.n	8016344 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d102      	bne.n	801634a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016344:	f06f 030f 	mvn.w	r3, #15
 8016348:	e101      	b.n	801654e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801634a:	68fa      	ldr	r2, [r7, #12]
 801634c:	2101      	movs	r1, #1
 801634e:	68b8      	ldr	r0, [r7, #8]
 8016350:	f7ff fb60 	bl	8015a14 <etharp_find_entry>
 8016354:	4603      	mov	r3, r0
 8016356:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016358:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801635c:	2b00      	cmp	r3, #0
 801635e:	da02      	bge.n	8016366 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016360:	8a7b      	ldrh	r3, [r7, #18]
 8016362:	b25b      	sxtb	r3, r3
 8016364:	e0f3      	b.n	801654e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016366:	8a7b      	ldrh	r3, [r7, #18]
 8016368:	2b7e      	cmp	r3, #126	; 0x7e
 801636a:	d906      	bls.n	801637a <etharp_query+0x7e>
 801636c:	4b7a      	ldr	r3, [pc, #488]	; (8016558 <etharp_query+0x25c>)
 801636e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016372:	497a      	ldr	r1, [pc, #488]	; (801655c <etharp_query+0x260>)
 8016374:	487a      	ldr	r0, [pc, #488]	; (8016560 <etharp_query+0x264>)
 8016376:	f002 f91f 	bl	80185b8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801637a:	8a7b      	ldrh	r3, [r7, #18]
 801637c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801637e:	7c7a      	ldrb	r2, [r7, #17]
 8016380:	4978      	ldr	r1, [pc, #480]	; (8016564 <etharp_query+0x268>)
 8016382:	4613      	mov	r3, r2
 8016384:	005b      	lsls	r3, r3, #1
 8016386:	4413      	add	r3, r2
 8016388:	00db      	lsls	r3, r3, #3
 801638a:	440b      	add	r3, r1
 801638c:	3314      	adds	r3, #20
 801638e:	781b      	ldrb	r3, [r3, #0]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d115      	bne.n	80163c0 <etharp_query+0xc4>
    is_new_entry = 1;
 8016394:	2301      	movs	r3, #1
 8016396:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016398:	7c7a      	ldrb	r2, [r7, #17]
 801639a:	4972      	ldr	r1, [pc, #456]	; (8016564 <etharp_query+0x268>)
 801639c:	4613      	mov	r3, r2
 801639e:	005b      	lsls	r3, r3, #1
 80163a0:	4413      	add	r3, r2
 80163a2:	00db      	lsls	r3, r3, #3
 80163a4:	440b      	add	r3, r1
 80163a6:	3314      	adds	r3, #20
 80163a8:	2201      	movs	r2, #1
 80163aa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80163ac:	7c7a      	ldrb	r2, [r7, #17]
 80163ae:	496d      	ldr	r1, [pc, #436]	; (8016564 <etharp_query+0x268>)
 80163b0:	4613      	mov	r3, r2
 80163b2:	005b      	lsls	r3, r3, #1
 80163b4:	4413      	add	r3, r2
 80163b6:	00db      	lsls	r3, r3, #3
 80163b8:	440b      	add	r3, r1
 80163ba:	3308      	adds	r3, #8
 80163bc:	68fa      	ldr	r2, [r7, #12]
 80163be:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80163c0:	7c7a      	ldrb	r2, [r7, #17]
 80163c2:	4968      	ldr	r1, [pc, #416]	; (8016564 <etharp_query+0x268>)
 80163c4:	4613      	mov	r3, r2
 80163c6:	005b      	lsls	r3, r3, #1
 80163c8:	4413      	add	r3, r2
 80163ca:	00db      	lsls	r3, r3, #3
 80163cc:	440b      	add	r3, r1
 80163ce:	3314      	adds	r3, #20
 80163d0:	781b      	ldrb	r3, [r3, #0]
 80163d2:	2b01      	cmp	r3, #1
 80163d4:	d011      	beq.n	80163fa <etharp_query+0xfe>
 80163d6:	7c7a      	ldrb	r2, [r7, #17]
 80163d8:	4962      	ldr	r1, [pc, #392]	; (8016564 <etharp_query+0x268>)
 80163da:	4613      	mov	r3, r2
 80163dc:	005b      	lsls	r3, r3, #1
 80163de:	4413      	add	r3, r2
 80163e0:	00db      	lsls	r3, r3, #3
 80163e2:	440b      	add	r3, r1
 80163e4:	3314      	adds	r3, #20
 80163e6:	781b      	ldrb	r3, [r3, #0]
 80163e8:	2b01      	cmp	r3, #1
 80163ea:	d806      	bhi.n	80163fa <etharp_query+0xfe>
 80163ec:	4b5a      	ldr	r3, [pc, #360]	; (8016558 <etharp_query+0x25c>)
 80163ee:	f240 32cd 	movw	r2, #973	; 0x3cd
 80163f2:	495d      	ldr	r1, [pc, #372]	; (8016568 <etharp_query+0x26c>)
 80163f4:	485a      	ldr	r0, [pc, #360]	; (8016560 <etharp_query+0x264>)
 80163f6:	f002 f8df 	bl	80185b8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80163fa:	6a3b      	ldr	r3, [r7, #32]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d102      	bne.n	8016406 <etharp_query+0x10a>
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d10c      	bne.n	8016420 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016406:	68b9      	ldr	r1, [r7, #8]
 8016408:	68f8      	ldr	r0, [r7, #12]
 801640a:	f000 f963 	bl	80166d4 <etharp_request>
 801640e:	4603      	mov	r3, r0
 8016410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d102      	bne.n	8016420 <etharp_query+0x124>
      return result;
 801641a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801641e:	e096      	b.n	801654e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d106      	bne.n	8016434 <etharp_query+0x138>
 8016426:	4b4c      	ldr	r3, [pc, #304]	; (8016558 <etharp_query+0x25c>)
 8016428:	f240 32e1 	movw	r2, #993	; 0x3e1
 801642c:	494f      	ldr	r1, [pc, #316]	; (801656c <etharp_query+0x270>)
 801642e:	484c      	ldr	r0, [pc, #304]	; (8016560 <etharp_query+0x264>)
 8016430:	f002 f8c2 	bl	80185b8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016434:	7c7a      	ldrb	r2, [r7, #17]
 8016436:	494b      	ldr	r1, [pc, #300]	; (8016564 <etharp_query+0x268>)
 8016438:	4613      	mov	r3, r2
 801643a:	005b      	lsls	r3, r3, #1
 801643c:	4413      	add	r3, r2
 801643e:	00db      	lsls	r3, r3, #3
 8016440:	440b      	add	r3, r1
 8016442:	3314      	adds	r3, #20
 8016444:	781b      	ldrb	r3, [r3, #0]
 8016446:	2b01      	cmp	r3, #1
 8016448:	d917      	bls.n	801647a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801644a:	4a49      	ldr	r2, [pc, #292]	; (8016570 <etharp_query+0x274>)
 801644c:	7c7b      	ldrb	r3, [r7, #17]
 801644e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016450:	7c7a      	ldrb	r2, [r7, #17]
 8016452:	4613      	mov	r3, r2
 8016454:	005b      	lsls	r3, r3, #1
 8016456:	4413      	add	r3, r2
 8016458:	00db      	lsls	r3, r3, #3
 801645a:	3308      	adds	r3, #8
 801645c:	4a41      	ldr	r2, [pc, #260]	; (8016564 <etharp_query+0x268>)
 801645e:	4413      	add	r3, r2
 8016460:	3304      	adds	r3, #4
 8016462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016466:	9200      	str	r2, [sp, #0]
 8016468:	697a      	ldr	r2, [r7, #20]
 801646a:	6879      	ldr	r1, [r7, #4]
 801646c:	68f8      	ldr	r0, [r7, #12]
 801646e:	f001 fc6f 	bl	8017d50 <ethernet_output>
 8016472:	4603      	mov	r3, r0
 8016474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016478:	e067      	b.n	801654a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801647a:	7c7a      	ldrb	r2, [r7, #17]
 801647c:	4939      	ldr	r1, [pc, #228]	; (8016564 <etharp_query+0x268>)
 801647e:	4613      	mov	r3, r2
 8016480:	005b      	lsls	r3, r3, #1
 8016482:	4413      	add	r3, r2
 8016484:	00db      	lsls	r3, r3, #3
 8016486:	440b      	add	r3, r1
 8016488:	3314      	adds	r3, #20
 801648a:	781b      	ldrb	r3, [r3, #0]
 801648c:	2b01      	cmp	r3, #1
 801648e:	d15c      	bne.n	801654a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016490:	2300      	movs	r3, #0
 8016492:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016498:	e01c      	b.n	80164d4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801649a:	69fb      	ldr	r3, [r7, #28]
 801649c:	895a      	ldrh	r2, [r3, #10]
 801649e:	69fb      	ldr	r3, [r7, #28]
 80164a0:	891b      	ldrh	r3, [r3, #8]
 80164a2:	429a      	cmp	r2, r3
 80164a4:	d10a      	bne.n	80164bc <etharp_query+0x1c0>
 80164a6:	69fb      	ldr	r3, [r7, #28]
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d006      	beq.n	80164bc <etharp_query+0x1c0>
 80164ae:	4b2a      	ldr	r3, [pc, #168]	; (8016558 <etharp_query+0x25c>)
 80164b0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80164b4:	492f      	ldr	r1, [pc, #188]	; (8016574 <etharp_query+0x278>)
 80164b6:	482a      	ldr	r0, [pc, #168]	; (8016560 <etharp_query+0x264>)
 80164b8:	f002 f87e 	bl	80185b8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80164bc:	69fb      	ldr	r3, [r7, #28]
 80164be:	7b1b      	ldrb	r3, [r3, #12]
 80164c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d002      	beq.n	80164ce <etharp_query+0x1d2>
        copy_needed = 1;
 80164c8:	2301      	movs	r3, #1
 80164ca:	61bb      	str	r3, [r7, #24]
        break;
 80164cc:	e005      	b.n	80164da <etharp_query+0x1de>
      }
      p = p->next;
 80164ce:	69fb      	ldr	r3, [r7, #28]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80164d4:	69fb      	ldr	r3, [r7, #28]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d1df      	bne.n	801649a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80164da:	69bb      	ldr	r3, [r7, #24]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d007      	beq.n	80164f0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80164e0:	687a      	ldr	r2, [r7, #4]
 80164e2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80164e6:	200e      	movs	r0, #14
 80164e8:	f7f8 fb6c 	bl	800ebc4 <pbuf_clone>
 80164ec:	61f8      	str	r0, [r7, #28]
 80164ee:	e004      	b.n	80164fa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80164f4:	69f8      	ldr	r0, [r7, #28]
 80164f6:	f7f8 f993 	bl	800e820 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80164fa:	69fb      	ldr	r3, [r7, #28]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d021      	beq.n	8016544 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016500:	7c7a      	ldrb	r2, [r7, #17]
 8016502:	4918      	ldr	r1, [pc, #96]	; (8016564 <etharp_query+0x268>)
 8016504:	4613      	mov	r3, r2
 8016506:	005b      	lsls	r3, r3, #1
 8016508:	4413      	add	r3, r2
 801650a:	00db      	lsls	r3, r3, #3
 801650c:	440b      	add	r3, r1
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d00a      	beq.n	801652a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016514:	7c7a      	ldrb	r2, [r7, #17]
 8016516:	4913      	ldr	r1, [pc, #76]	; (8016564 <etharp_query+0x268>)
 8016518:	4613      	mov	r3, r2
 801651a:	005b      	lsls	r3, r3, #1
 801651c:	4413      	add	r3, r2
 801651e:	00db      	lsls	r3, r3, #3
 8016520:	440b      	add	r3, r1
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	4618      	mov	r0, r3
 8016526:	f7f8 f8d5 	bl	800e6d4 <pbuf_free>
      }
      arp_table[i].q = p;
 801652a:	7c7a      	ldrb	r2, [r7, #17]
 801652c:	490d      	ldr	r1, [pc, #52]	; (8016564 <etharp_query+0x268>)
 801652e:	4613      	mov	r3, r2
 8016530:	005b      	lsls	r3, r3, #1
 8016532:	4413      	add	r3, r2
 8016534:	00db      	lsls	r3, r3, #3
 8016536:	440b      	add	r3, r1
 8016538:	69fa      	ldr	r2, [r7, #28]
 801653a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801653c:	2300      	movs	r3, #0
 801653e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016542:	e002      	b.n	801654a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016544:	23ff      	movs	r3, #255	; 0xff
 8016546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801654a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801654e:	4618      	mov	r0, r3
 8016550:	3728      	adds	r7, #40	; 0x28
 8016552:	46bd      	mov	sp, r7
 8016554:	bd80      	pop	{r7, pc}
 8016556:	bf00      	nop
 8016558:	0801c630 	.word	0x0801c630
 801655c:	0801c7dc 	.word	0x0801c7dc
 8016560:	0801c6a8 	.word	0x0801c6a8
 8016564:	200069d4 	.word	0x200069d4
 8016568:	0801c7ec 	.word	0x0801c7ec
 801656c:	0801c7d0 	.word	0x0801c7d0
 8016570:	20006ac4 	.word	0x20006ac4
 8016574:	0801c814 	.word	0x0801c814

08016578 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b08a      	sub	sp, #40	; 0x28
 801657c:	af02      	add	r7, sp, #8
 801657e:	60f8      	str	r0, [r7, #12]
 8016580:	60b9      	str	r1, [r7, #8]
 8016582:	607a      	str	r2, [r7, #4]
 8016584:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016586:	2300      	movs	r3, #0
 8016588:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d106      	bne.n	801659e <etharp_raw+0x26>
 8016590:	4b3a      	ldr	r3, [pc, #232]	; (801667c <etharp_raw+0x104>)
 8016592:	f240 4257 	movw	r2, #1111	; 0x457
 8016596:	493a      	ldr	r1, [pc, #232]	; (8016680 <etharp_raw+0x108>)
 8016598:	483a      	ldr	r0, [pc, #232]	; (8016684 <etharp_raw+0x10c>)
 801659a:	f002 f80d 	bl	80185b8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801659e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80165a2:	211c      	movs	r1, #28
 80165a4:	200e      	movs	r0, #14
 80165a6:	f7f7 fdb1 	bl	800e10c <pbuf_alloc>
 80165aa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80165ac:	69bb      	ldr	r3, [r7, #24]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d102      	bne.n	80165b8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80165b2:	f04f 33ff 	mov.w	r3, #4294967295
 80165b6:	e05d      	b.n	8016674 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80165b8:	69bb      	ldr	r3, [r7, #24]
 80165ba:	895b      	ldrh	r3, [r3, #10]
 80165bc:	2b1b      	cmp	r3, #27
 80165be:	d806      	bhi.n	80165ce <etharp_raw+0x56>
 80165c0:	4b2e      	ldr	r3, [pc, #184]	; (801667c <etharp_raw+0x104>)
 80165c2:	f240 4262 	movw	r2, #1122	; 0x462
 80165c6:	4930      	ldr	r1, [pc, #192]	; (8016688 <etharp_raw+0x110>)
 80165c8:	482e      	ldr	r0, [pc, #184]	; (8016684 <etharp_raw+0x10c>)
 80165ca:	f001 fff5 	bl	80185b8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80165ce:	69bb      	ldr	r3, [r7, #24]
 80165d0:	685b      	ldr	r3, [r3, #4]
 80165d2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80165d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80165d6:	4618      	mov	r0, r3
 80165d8:	f7f6 fd34 	bl	800d044 <lwip_htons>
 80165dc:	4603      	mov	r3, r0
 80165de:	461a      	mov	r2, r3
 80165e0:	697b      	ldr	r3, [r7, #20]
 80165e2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80165ea:	2b06      	cmp	r3, #6
 80165ec:	d006      	beq.n	80165fc <etharp_raw+0x84>
 80165ee:	4b23      	ldr	r3, [pc, #140]	; (801667c <etharp_raw+0x104>)
 80165f0:	f240 4269 	movw	r2, #1129	; 0x469
 80165f4:	4925      	ldr	r1, [pc, #148]	; (801668c <etharp_raw+0x114>)
 80165f6:	4823      	ldr	r0, [pc, #140]	; (8016684 <etharp_raw+0x10c>)
 80165f8:	f001 ffde 	bl	80185b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80165fc:	697b      	ldr	r3, [r7, #20]
 80165fe:	3308      	adds	r3, #8
 8016600:	2206      	movs	r2, #6
 8016602:	6839      	ldr	r1, [r7, #0]
 8016604:	4618      	mov	r0, r3
 8016606:	f001 fefd 	bl	8018404 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801660a:	697b      	ldr	r3, [r7, #20]
 801660c:	3312      	adds	r3, #18
 801660e:	2206      	movs	r2, #6
 8016610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016612:	4618      	mov	r0, r3
 8016614:	f001 fef6 	bl	8018404 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016618:	697b      	ldr	r3, [r7, #20]
 801661a:	330e      	adds	r3, #14
 801661c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801661e:	6812      	ldr	r2, [r2, #0]
 8016620:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016622:	697b      	ldr	r3, [r7, #20]
 8016624:	3318      	adds	r3, #24
 8016626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016628:	6812      	ldr	r2, [r2, #0]
 801662a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801662c:	697b      	ldr	r3, [r7, #20]
 801662e:	2200      	movs	r2, #0
 8016630:	701a      	strb	r2, [r3, #0]
 8016632:	2200      	movs	r2, #0
 8016634:	f042 0201 	orr.w	r2, r2, #1
 8016638:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801663a:	697b      	ldr	r3, [r7, #20]
 801663c:	2200      	movs	r2, #0
 801663e:	f042 0208 	orr.w	r2, r2, #8
 8016642:	709a      	strb	r2, [r3, #2]
 8016644:	2200      	movs	r2, #0
 8016646:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016648:	697b      	ldr	r3, [r7, #20]
 801664a:	2206      	movs	r2, #6
 801664c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801664e:	697b      	ldr	r3, [r7, #20]
 8016650:	2204      	movs	r2, #4
 8016652:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016654:	f640 0306 	movw	r3, #2054	; 0x806
 8016658:	9300      	str	r3, [sp, #0]
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	68ba      	ldr	r2, [r7, #8]
 801665e:	69b9      	ldr	r1, [r7, #24]
 8016660:	68f8      	ldr	r0, [r7, #12]
 8016662:	f001 fb75 	bl	8017d50 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016666:	69b8      	ldr	r0, [r7, #24]
 8016668:	f7f8 f834 	bl	800e6d4 <pbuf_free>
  p = NULL;
 801666c:	2300      	movs	r3, #0
 801666e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016670:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016674:	4618      	mov	r0, r3
 8016676:	3720      	adds	r7, #32
 8016678:	46bd      	mov	sp, r7
 801667a:	bd80      	pop	{r7, pc}
 801667c:	0801c630 	.word	0x0801c630
 8016680:	0801c780 	.word	0x0801c780
 8016684:	0801c6a8 	.word	0x0801c6a8
 8016688:	0801c830 	.word	0x0801c830
 801668c:	0801c864 	.word	0x0801c864

08016690 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b088      	sub	sp, #32
 8016694:	af04      	add	r7, sp, #16
 8016696:	60f8      	str	r0, [r7, #12]
 8016698:	60b9      	str	r1, [r7, #8]
 801669a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80166ac:	2201      	movs	r2, #1
 80166ae:	9203      	str	r2, [sp, #12]
 80166b0:	68ba      	ldr	r2, [r7, #8]
 80166b2:	9202      	str	r2, [sp, #8]
 80166b4:	4a06      	ldr	r2, [pc, #24]	; (80166d0 <etharp_request_dst+0x40>)
 80166b6:	9201      	str	r2, [sp, #4]
 80166b8:	9300      	str	r3, [sp, #0]
 80166ba:	4603      	mov	r3, r0
 80166bc:	687a      	ldr	r2, [r7, #4]
 80166be:	68f8      	ldr	r0, [r7, #12]
 80166c0:	f7ff ff5a 	bl	8016578 <etharp_raw>
 80166c4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80166c6:	4618      	mov	r0, r3
 80166c8:	3710      	adds	r7, #16
 80166ca:	46bd      	mov	sp, r7
 80166cc:	bd80      	pop	{r7, pc}
 80166ce:	bf00      	nop
 80166d0:	0801ce34 	.word	0x0801ce34

080166d4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b082      	sub	sp, #8
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
 80166dc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80166de:	4a05      	ldr	r2, [pc, #20]	; (80166f4 <etharp_request+0x20>)
 80166e0:	6839      	ldr	r1, [r7, #0]
 80166e2:	6878      	ldr	r0, [r7, #4]
 80166e4:	f7ff ffd4 	bl	8016690 <etharp_request_dst>
 80166e8:	4603      	mov	r3, r0
}
 80166ea:	4618      	mov	r0, r3
 80166ec:	3708      	adds	r7, #8
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}
 80166f2:	bf00      	nop
 80166f4:	0801ce2c 	.word	0x0801ce2c

080166f8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b08e      	sub	sp, #56	; 0x38
 80166fc:	af04      	add	r7, sp, #16
 80166fe:	6078      	str	r0, [r7, #4]
 8016700:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016702:	4b79      	ldr	r3, [pc, #484]	; (80168e8 <icmp_input+0x1f0>)
 8016704:	689b      	ldr	r3, [r3, #8]
 8016706:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801670a:	781b      	ldrb	r3, [r3, #0]
 801670c:	f003 030f 	and.w	r3, r3, #15
 8016710:	b2db      	uxtb	r3, r3
 8016712:	009b      	lsls	r3, r3, #2
 8016714:	b2db      	uxtb	r3, r3
 8016716:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016718:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801671a:	2b13      	cmp	r3, #19
 801671c:	f240 80cd 	bls.w	80168ba <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	895b      	ldrh	r3, [r3, #10]
 8016724:	2b03      	cmp	r3, #3
 8016726:	f240 80ca 	bls.w	80168be <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	685b      	ldr	r3, [r3, #4]
 801672e:	781b      	ldrb	r3, [r3, #0]
 8016730:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016734:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016738:	2b00      	cmp	r3, #0
 801673a:	f000 80b7 	beq.w	80168ac <icmp_input+0x1b4>
 801673e:	2b08      	cmp	r3, #8
 8016740:	f040 80b7 	bne.w	80168b2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016744:	4b69      	ldr	r3, [pc, #420]	; (80168ec <icmp_input+0x1f4>)
 8016746:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016748:	4b67      	ldr	r3, [pc, #412]	; (80168e8 <icmp_input+0x1f0>)
 801674a:	695b      	ldr	r3, [r3, #20]
 801674c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016750:	2be0      	cmp	r3, #224	; 0xe0
 8016752:	f000 80bb 	beq.w	80168cc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016756:	4b64      	ldr	r3, [pc, #400]	; (80168e8 <icmp_input+0x1f0>)
 8016758:	695b      	ldr	r3, [r3, #20]
 801675a:	4a63      	ldr	r2, [pc, #396]	; (80168e8 <icmp_input+0x1f0>)
 801675c:	6812      	ldr	r2, [r2, #0]
 801675e:	4611      	mov	r1, r2
 8016760:	4618      	mov	r0, r3
 8016762:	f000 fbed 	bl	8016f40 <ip4_addr_isbroadcast_u32>
 8016766:	4603      	mov	r3, r0
 8016768:	2b00      	cmp	r3, #0
 801676a:	f040 80b1 	bne.w	80168d0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	891b      	ldrh	r3, [r3, #8]
 8016772:	2b07      	cmp	r3, #7
 8016774:	f240 80a5 	bls.w	80168c2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016778:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801677a:	330e      	adds	r3, #14
 801677c:	4619      	mov	r1, r3
 801677e:	6878      	ldr	r0, [r7, #4]
 8016780:	f7f7 ff12 	bl	800e5a8 <pbuf_add_header>
 8016784:	4603      	mov	r3, r0
 8016786:	2b00      	cmp	r3, #0
 8016788:	d04b      	beq.n	8016822 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	891a      	ldrh	r2, [r3, #8]
 801678e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016790:	4413      	add	r3, r2
 8016792:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	891b      	ldrh	r3, [r3, #8]
 8016798:	8b7a      	ldrh	r2, [r7, #26]
 801679a:	429a      	cmp	r2, r3
 801679c:	f0c0 809a 	bcc.w	80168d4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80167a0:	8b7b      	ldrh	r3, [r7, #26]
 80167a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167a6:	4619      	mov	r1, r3
 80167a8:	200e      	movs	r0, #14
 80167aa:	f7f7 fcaf 	bl	800e10c <pbuf_alloc>
 80167ae:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	f000 8090 	beq.w	80168d8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80167b8:	697b      	ldr	r3, [r7, #20]
 80167ba:	895b      	ldrh	r3, [r3, #10]
 80167bc:	461a      	mov	r2, r3
 80167be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80167c0:	3308      	adds	r3, #8
 80167c2:	429a      	cmp	r2, r3
 80167c4:	d203      	bcs.n	80167ce <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80167c6:	6978      	ldr	r0, [r7, #20]
 80167c8:	f7f7 ff84 	bl	800e6d4 <pbuf_free>
          goto icmperr;
 80167cc:	e085      	b.n	80168da <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80167ce:	697b      	ldr	r3, [r7, #20]
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80167d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80167d6:	4618      	mov	r0, r3
 80167d8:	f001 fe14 	bl	8018404 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80167dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80167de:	4619      	mov	r1, r3
 80167e0:	6978      	ldr	r0, [r7, #20]
 80167e2:	f7f7 fef1 	bl	800e5c8 <pbuf_remove_header>
 80167e6:	4603      	mov	r3, r0
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d009      	beq.n	8016800 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80167ec:	4b40      	ldr	r3, [pc, #256]	; (80168f0 <icmp_input+0x1f8>)
 80167ee:	22b6      	movs	r2, #182	; 0xb6
 80167f0:	4940      	ldr	r1, [pc, #256]	; (80168f4 <icmp_input+0x1fc>)
 80167f2:	4841      	ldr	r0, [pc, #260]	; (80168f8 <icmp_input+0x200>)
 80167f4:	f001 fee0 	bl	80185b8 <iprintf>
          pbuf_free(r);
 80167f8:	6978      	ldr	r0, [r7, #20]
 80167fa:	f7f7 ff6b 	bl	800e6d4 <pbuf_free>
          goto icmperr;
 80167fe:	e06c      	b.n	80168da <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016800:	6879      	ldr	r1, [r7, #4]
 8016802:	6978      	ldr	r0, [r7, #20]
 8016804:	f7f8 f89a 	bl	800e93c <pbuf_copy>
 8016808:	4603      	mov	r3, r0
 801680a:	2b00      	cmp	r3, #0
 801680c:	d003      	beq.n	8016816 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801680e:	6978      	ldr	r0, [r7, #20]
 8016810:	f7f7 ff60 	bl	800e6d4 <pbuf_free>
          goto icmperr;
 8016814:	e061      	b.n	80168da <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016816:	6878      	ldr	r0, [r7, #4]
 8016818:	f7f7 ff5c 	bl	800e6d4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801681c:	697b      	ldr	r3, [r7, #20]
 801681e:	607b      	str	r3, [r7, #4]
 8016820:	e00f      	b.n	8016842 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016822:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016824:	330e      	adds	r3, #14
 8016826:	4619      	mov	r1, r3
 8016828:	6878      	ldr	r0, [r7, #4]
 801682a:	f7f7 fecd 	bl	800e5c8 <pbuf_remove_header>
 801682e:	4603      	mov	r3, r0
 8016830:	2b00      	cmp	r3, #0
 8016832:	d006      	beq.n	8016842 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016834:	4b2e      	ldr	r3, [pc, #184]	; (80168f0 <icmp_input+0x1f8>)
 8016836:	22c7      	movs	r2, #199	; 0xc7
 8016838:	4930      	ldr	r1, [pc, #192]	; (80168fc <icmp_input+0x204>)
 801683a:	482f      	ldr	r0, [pc, #188]	; (80168f8 <icmp_input+0x200>)
 801683c:	f001 febc 	bl	80185b8 <iprintf>
          goto icmperr;
 8016840:	e04b      	b.n	80168da <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	685b      	ldr	r3, [r3, #4]
 8016846:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016848:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801684a:	4619      	mov	r1, r3
 801684c:	6878      	ldr	r0, [r7, #4]
 801684e:	f7f7 feab 	bl	800e5a8 <pbuf_add_header>
 8016852:	4603      	mov	r3, r0
 8016854:	2b00      	cmp	r3, #0
 8016856:	d12b      	bne.n	80168b0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	685b      	ldr	r3, [r3, #4]
 801685c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801685e:	69fb      	ldr	r3, [r7, #28]
 8016860:	681a      	ldr	r2, [r3, #0]
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016866:	4b20      	ldr	r3, [pc, #128]	; (80168e8 <icmp_input+0x1f0>)
 8016868:	691a      	ldr	r2, [r3, #16]
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	2200      	movs	r2, #0
 8016872:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016874:	693b      	ldr	r3, [r7, #16]
 8016876:	2200      	movs	r2, #0
 8016878:	709a      	strb	r2, [r3, #2]
 801687a:	2200      	movs	r2, #0
 801687c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	22ff      	movs	r2, #255	; 0xff
 8016882:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	2200      	movs	r2, #0
 8016888:	729a      	strb	r2, [r3, #10]
 801688a:	2200      	movs	r2, #0
 801688c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801688e:	683b      	ldr	r3, [r7, #0]
 8016890:	9302      	str	r3, [sp, #8]
 8016892:	2301      	movs	r3, #1
 8016894:	9301      	str	r3, [sp, #4]
 8016896:	2300      	movs	r3, #0
 8016898:	9300      	str	r3, [sp, #0]
 801689a:	23ff      	movs	r3, #255	; 0xff
 801689c:	2200      	movs	r2, #0
 801689e:	69f9      	ldr	r1, [r7, #28]
 80168a0:	6878      	ldr	r0, [r7, #4]
 80168a2:	f000 fa75 	bl	8016d90 <ip4_output_if>
 80168a6:	4603      	mov	r3, r0
 80168a8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80168aa:	e001      	b.n	80168b0 <icmp_input+0x1b8>
      break;
 80168ac:	bf00      	nop
 80168ae:	e000      	b.n	80168b2 <icmp_input+0x1ba>
      break;
 80168b0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80168b2:	6878      	ldr	r0, [r7, #4]
 80168b4:	f7f7 ff0e 	bl	800e6d4 <pbuf_free>
  return;
 80168b8:	e013      	b.n	80168e2 <icmp_input+0x1ea>
    goto lenerr;
 80168ba:	bf00      	nop
 80168bc:	e002      	b.n	80168c4 <icmp_input+0x1cc>
    goto lenerr;
 80168be:	bf00      	nop
 80168c0:	e000      	b.n	80168c4 <icmp_input+0x1cc>
        goto lenerr;
 80168c2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	f7f7 ff05 	bl	800e6d4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80168ca:	e00a      	b.n	80168e2 <icmp_input+0x1ea>
        goto icmperr;
 80168cc:	bf00      	nop
 80168ce:	e004      	b.n	80168da <icmp_input+0x1e2>
        goto icmperr;
 80168d0:	bf00      	nop
 80168d2:	e002      	b.n	80168da <icmp_input+0x1e2>
          goto icmperr;
 80168d4:	bf00      	nop
 80168d6:	e000      	b.n	80168da <icmp_input+0x1e2>
          goto icmperr;
 80168d8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	f7f7 fefa 	bl	800e6d4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80168e0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80168e2:	3728      	adds	r7, #40	; 0x28
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd80      	pop	{r7, pc}
 80168e8:	2000a300 	.word	0x2000a300
 80168ec:	2000a314 	.word	0x2000a314
 80168f0:	0801c8a8 	.word	0x0801c8a8
 80168f4:	0801c8e0 	.word	0x0801c8e0
 80168f8:	0801c918 	.word	0x0801c918
 80168fc:	0801c940 	.word	0x0801c940

08016900 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b082      	sub	sp, #8
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
 8016908:	460b      	mov	r3, r1
 801690a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801690c:	78fb      	ldrb	r3, [r7, #3]
 801690e:	461a      	mov	r2, r3
 8016910:	2103      	movs	r1, #3
 8016912:	6878      	ldr	r0, [r7, #4]
 8016914:	f000 f814 	bl	8016940 <icmp_send_response>
}
 8016918:	bf00      	nop
 801691a:	3708      	adds	r7, #8
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}

08016920 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b082      	sub	sp, #8
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
 8016928:	460b      	mov	r3, r1
 801692a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801692c:	78fb      	ldrb	r3, [r7, #3]
 801692e:	461a      	mov	r2, r3
 8016930:	210b      	movs	r1, #11
 8016932:	6878      	ldr	r0, [r7, #4]
 8016934:	f000 f804 	bl	8016940 <icmp_send_response>
}
 8016938:	bf00      	nop
 801693a:	3708      	adds	r7, #8
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}

08016940 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b08c      	sub	sp, #48	; 0x30
 8016944:	af04      	add	r7, sp, #16
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	460b      	mov	r3, r1
 801694a:	70fb      	strb	r3, [r7, #3]
 801694c:	4613      	mov	r3, r2
 801694e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016950:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016954:	2124      	movs	r1, #36	; 0x24
 8016956:	2022      	movs	r0, #34	; 0x22
 8016958:	f7f7 fbd8 	bl	800e10c <pbuf_alloc>
 801695c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801695e:	69fb      	ldr	r3, [r7, #28]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d04c      	beq.n	80169fe <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016964:	69fb      	ldr	r3, [r7, #28]
 8016966:	895b      	ldrh	r3, [r3, #10]
 8016968:	2b23      	cmp	r3, #35	; 0x23
 801696a:	d806      	bhi.n	801697a <icmp_send_response+0x3a>
 801696c:	4b26      	ldr	r3, [pc, #152]	; (8016a08 <icmp_send_response+0xc8>)
 801696e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016972:	4926      	ldr	r1, [pc, #152]	; (8016a0c <icmp_send_response+0xcc>)
 8016974:	4826      	ldr	r0, [pc, #152]	; (8016a10 <icmp_send_response+0xd0>)
 8016976:	f001 fe1f 	bl	80185b8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016980:	69fb      	ldr	r3, [r7, #28]
 8016982:	685b      	ldr	r3, [r3, #4]
 8016984:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016986:	697b      	ldr	r3, [r7, #20]
 8016988:	78fa      	ldrb	r2, [r7, #3]
 801698a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801698c:	697b      	ldr	r3, [r7, #20]
 801698e:	78ba      	ldrb	r2, [r7, #2]
 8016990:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016992:	697b      	ldr	r3, [r7, #20]
 8016994:	2200      	movs	r2, #0
 8016996:	711a      	strb	r2, [r3, #4]
 8016998:	2200      	movs	r2, #0
 801699a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801699c:	697b      	ldr	r3, [r7, #20]
 801699e:	2200      	movs	r2, #0
 80169a0:	719a      	strb	r2, [r3, #6]
 80169a2:	2200      	movs	r2, #0
 80169a4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80169a6:	69fb      	ldr	r3, [r7, #28]
 80169a8:	685b      	ldr	r3, [r3, #4]
 80169aa:	f103 0008 	add.w	r0, r3, #8
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	685b      	ldr	r3, [r3, #4]
 80169b2:	221c      	movs	r2, #28
 80169b4:	4619      	mov	r1, r3
 80169b6:	f001 fd25 	bl	8018404 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80169ba:	69bb      	ldr	r3, [r7, #24]
 80169bc:	68db      	ldr	r3, [r3, #12]
 80169be:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80169c0:	f107 030c 	add.w	r3, r7, #12
 80169c4:	4618      	mov	r0, r3
 80169c6:	f000 f825 	bl	8016a14 <ip4_route>
 80169ca:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80169cc:	693b      	ldr	r3, [r7, #16]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d011      	beq.n	80169f6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80169d2:	697b      	ldr	r3, [r7, #20]
 80169d4:	2200      	movs	r2, #0
 80169d6:	709a      	strb	r2, [r3, #2]
 80169d8:	2200      	movs	r2, #0
 80169da:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80169dc:	f107 020c 	add.w	r2, r7, #12
 80169e0:	693b      	ldr	r3, [r7, #16]
 80169e2:	9302      	str	r3, [sp, #8]
 80169e4:	2301      	movs	r3, #1
 80169e6:	9301      	str	r3, [sp, #4]
 80169e8:	2300      	movs	r3, #0
 80169ea:	9300      	str	r3, [sp, #0]
 80169ec:	23ff      	movs	r3, #255	; 0xff
 80169ee:	2100      	movs	r1, #0
 80169f0:	69f8      	ldr	r0, [r7, #28]
 80169f2:	f000 f9cd 	bl	8016d90 <ip4_output_if>
  }
  pbuf_free(q);
 80169f6:	69f8      	ldr	r0, [r7, #28]
 80169f8:	f7f7 fe6c 	bl	800e6d4 <pbuf_free>
 80169fc:	e000      	b.n	8016a00 <icmp_send_response+0xc0>
    return;
 80169fe:	bf00      	nop
}
 8016a00:	3720      	adds	r7, #32
 8016a02:	46bd      	mov	sp, r7
 8016a04:	bd80      	pop	{r7, pc}
 8016a06:	bf00      	nop
 8016a08:	0801c8a8 	.word	0x0801c8a8
 8016a0c:	0801c974 	.word	0x0801c974
 8016a10:	0801c918 	.word	0x0801c918

08016a14 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016a14:	b480      	push	{r7}
 8016a16:	b085      	sub	sp, #20
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016a1c:	4b33      	ldr	r3, [pc, #204]	; (8016aec <ip4_route+0xd8>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	60fb      	str	r3, [r7, #12]
 8016a22:	e036      	b.n	8016a92 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a2a:	f003 0301 	and.w	r3, r3, #1
 8016a2e:	b2db      	uxtb	r3, r3
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d02b      	beq.n	8016a8c <ip4_route+0x78>
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a3a:	089b      	lsrs	r3, r3, #2
 8016a3c:	f003 0301 	and.w	r3, r3, #1
 8016a40:	b2db      	uxtb	r3, r3
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d022      	beq.n	8016a8c <ip4_route+0x78>
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	3304      	adds	r3, #4
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d01d      	beq.n	8016a8c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	681a      	ldr	r2, [r3, #0]
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	3304      	adds	r3, #4
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	405a      	eors	r2, r3
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	3308      	adds	r3, #8
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	4013      	ands	r3, r2
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d101      	bne.n	8016a6c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	e038      	b.n	8016ade <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a72:	f003 0302 	and.w	r3, r3, #2
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d108      	bne.n	8016a8c <ip4_route+0x78>
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	681a      	ldr	r2, [r3, #0]
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	330c      	adds	r3, #12
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	429a      	cmp	r2, r3
 8016a86:	d101      	bne.n	8016a8c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	e028      	b.n	8016ade <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	60fb      	str	r3, [r7, #12]
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d1c5      	bne.n	8016a24 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016a98:	4b15      	ldr	r3, [pc, #84]	; (8016af0 <ip4_route+0xdc>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d01a      	beq.n	8016ad6 <ip4_route+0xc2>
 8016aa0:	4b13      	ldr	r3, [pc, #76]	; (8016af0 <ip4_route+0xdc>)
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016aa8:	f003 0301 	and.w	r3, r3, #1
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d012      	beq.n	8016ad6 <ip4_route+0xc2>
 8016ab0:	4b0f      	ldr	r3, [pc, #60]	; (8016af0 <ip4_route+0xdc>)
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ab8:	f003 0304 	and.w	r3, r3, #4
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d00a      	beq.n	8016ad6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016ac0:	4b0b      	ldr	r3, [pc, #44]	; (8016af0 <ip4_route+0xdc>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	3304      	adds	r3, #4
 8016ac6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d004      	beq.n	8016ad6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	b2db      	uxtb	r3, r3
 8016ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8016ad4:	d101      	bne.n	8016ada <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	e001      	b.n	8016ade <ip4_route+0xca>
  }

  return netif_default;
 8016ada:	4b05      	ldr	r3, [pc, #20]	; (8016af0 <ip4_route+0xdc>)
 8016adc:	681b      	ldr	r3, [r3, #0]
}
 8016ade:	4618      	mov	r0, r3
 8016ae0:	3714      	adds	r7, #20
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae8:	4770      	bx	lr
 8016aea:	bf00      	nop
 8016aec:	2000da04 	.word	0x2000da04
 8016af0:	2000da08 	.word	0x2000da08

08016af4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b082      	sub	sp, #8
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016b02:	f003 0301 	and.w	r3, r3, #1
 8016b06:	b2db      	uxtb	r3, r3
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d016      	beq.n	8016b3a <ip4_input_accept+0x46>
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	3304      	adds	r3, #4
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d011      	beq.n	8016b3a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016b16:	4b0b      	ldr	r3, [pc, #44]	; (8016b44 <ip4_input_accept+0x50>)
 8016b18:	695a      	ldr	r2, [r3, #20]
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	3304      	adds	r3, #4
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	429a      	cmp	r2, r3
 8016b22:	d008      	beq.n	8016b36 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016b24:	4b07      	ldr	r3, [pc, #28]	; (8016b44 <ip4_input_accept+0x50>)
 8016b26:	695b      	ldr	r3, [r3, #20]
 8016b28:	6879      	ldr	r1, [r7, #4]
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f000 fa08 	bl	8016f40 <ip4_addr_isbroadcast_u32>
 8016b30:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d001      	beq.n	8016b3a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016b36:	2301      	movs	r3, #1
 8016b38:	e000      	b.n	8016b3c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016b3a:	2300      	movs	r3, #0
}
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	3708      	adds	r7, #8
 8016b40:	46bd      	mov	sp, r7
 8016b42:	bd80      	pop	{r7, pc}
 8016b44:	2000a300 	.word	0x2000a300

08016b48 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b086      	sub	sp, #24
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
 8016b50:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	685b      	ldr	r3, [r3, #4]
 8016b56:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016b58:	697b      	ldr	r3, [r7, #20]
 8016b5a:	781b      	ldrb	r3, [r3, #0]
 8016b5c:	091b      	lsrs	r3, r3, #4
 8016b5e:	b2db      	uxtb	r3, r3
 8016b60:	2b04      	cmp	r3, #4
 8016b62:	d004      	beq.n	8016b6e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016b64:	6878      	ldr	r0, [r7, #4]
 8016b66:	f7f7 fdb5 	bl	800e6d4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	e107      	b.n	8016d7e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016b6e:	697b      	ldr	r3, [r7, #20]
 8016b70:	781b      	ldrb	r3, [r3, #0]
 8016b72:	f003 030f 	and.w	r3, r3, #15
 8016b76:	b2db      	uxtb	r3, r3
 8016b78:	009b      	lsls	r3, r3, #2
 8016b7a:	b2db      	uxtb	r3, r3
 8016b7c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016b7e:	697b      	ldr	r3, [r7, #20]
 8016b80:	885b      	ldrh	r3, [r3, #2]
 8016b82:	b29b      	uxth	r3, r3
 8016b84:	4618      	mov	r0, r3
 8016b86:	f7f6 fa5d 	bl	800d044 <lwip_htons>
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	891b      	ldrh	r3, [r3, #8]
 8016b92:	89ba      	ldrh	r2, [r7, #12]
 8016b94:	429a      	cmp	r2, r3
 8016b96:	d204      	bcs.n	8016ba2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016b98:	89bb      	ldrh	r3, [r7, #12]
 8016b9a:	4619      	mov	r1, r3
 8016b9c:	6878      	ldr	r0, [r7, #4]
 8016b9e:	f7f7 fc13 	bl	800e3c8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	895b      	ldrh	r3, [r3, #10]
 8016ba6:	89fa      	ldrh	r2, [r7, #14]
 8016ba8:	429a      	cmp	r2, r3
 8016baa:	d807      	bhi.n	8016bbc <ip4_input+0x74>
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	891b      	ldrh	r3, [r3, #8]
 8016bb0:	89ba      	ldrh	r2, [r7, #12]
 8016bb2:	429a      	cmp	r2, r3
 8016bb4:	d802      	bhi.n	8016bbc <ip4_input+0x74>
 8016bb6:	89fb      	ldrh	r3, [r7, #14]
 8016bb8:	2b13      	cmp	r3, #19
 8016bba:	d804      	bhi.n	8016bc6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016bbc:	6878      	ldr	r0, [r7, #4]
 8016bbe:	f7f7 fd89 	bl	800e6d4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016bc2:	2300      	movs	r3, #0
 8016bc4:	e0db      	b.n	8016d7e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016bc6:	697b      	ldr	r3, [r7, #20]
 8016bc8:	691b      	ldr	r3, [r3, #16]
 8016bca:	4a6f      	ldr	r2, [pc, #444]	; (8016d88 <ip4_input+0x240>)
 8016bcc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016bce:	697b      	ldr	r3, [r7, #20]
 8016bd0:	68db      	ldr	r3, [r3, #12]
 8016bd2:	4a6d      	ldr	r2, [pc, #436]	; (8016d88 <ip4_input+0x240>)
 8016bd4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016bd6:	4b6c      	ldr	r3, [pc, #432]	; (8016d88 <ip4_input+0x240>)
 8016bd8:	695b      	ldr	r3, [r3, #20]
 8016bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016bde:	2be0      	cmp	r3, #224	; 0xe0
 8016be0:	d112      	bne.n	8016c08 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016be8:	f003 0301 	and.w	r3, r3, #1
 8016bec:	b2db      	uxtb	r3, r3
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d007      	beq.n	8016c02 <ip4_input+0xba>
 8016bf2:	683b      	ldr	r3, [r7, #0]
 8016bf4:	3304      	adds	r3, #4
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d002      	beq.n	8016c02 <ip4_input+0xba>
      netif = inp;
 8016bfc:	683b      	ldr	r3, [r7, #0]
 8016bfe:	613b      	str	r3, [r7, #16]
 8016c00:	e02a      	b.n	8016c58 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016c02:	2300      	movs	r3, #0
 8016c04:	613b      	str	r3, [r7, #16]
 8016c06:	e027      	b.n	8016c58 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016c08:	6838      	ldr	r0, [r7, #0]
 8016c0a:	f7ff ff73 	bl	8016af4 <ip4_input_accept>
 8016c0e:	4603      	mov	r3, r0
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d002      	beq.n	8016c1a <ip4_input+0xd2>
      netif = inp;
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	613b      	str	r3, [r7, #16]
 8016c18:	e01e      	b.n	8016c58 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016c1e:	4b5a      	ldr	r3, [pc, #360]	; (8016d88 <ip4_input+0x240>)
 8016c20:	695b      	ldr	r3, [r3, #20]
 8016c22:	b2db      	uxtb	r3, r3
 8016c24:	2b7f      	cmp	r3, #127	; 0x7f
 8016c26:	d017      	beq.n	8016c58 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016c28:	4b58      	ldr	r3, [pc, #352]	; (8016d8c <ip4_input+0x244>)
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	613b      	str	r3, [r7, #16]
 8016c2e:	e00e      	b.n	8016c4e <ip4_input+0x106>
          if (netif == inp) {
 8016c30:	693a      	ldr	r2, [r7, #16]
 8016c32:	683b      	ldr	r3, [r7, #0]
 8016c34:	429a      	cmp	r2, r3
 8016c36:	d006      	beq.n	8016c46 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016c38:	6938      	ldr	r0, [r7, #16]
 8016c3a:	f7ff ff5b 	bl	8016af4 <ip4_input_accept>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d108      	bne.n	8016c56 <ip4_input+0x10e>
 8016c44:	e000      	b.n	8016c48 <ip4_input+0x100>
            continue;
 8016c46:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016c48:	693b      	ldr	r3, [r7, #16]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	613b      	str	r3, [r7, #16]
 8016c4e:	693b      	ldr	r3, [r7, #16]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d1ed      	bne.n	8016c30 <ip4_input+0xe8>
 8016c54:	e000      	b.n	8016c58 <ip4_input+0x110>
            break;
 8016c56:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016c58:	4b4b      	ldr	r3, [pc, #300]	; (8016d88 <ip4_input+0x240>)
 8016c5a:	691b      	ldr	r3, [r3, #16]
 8016c5c:	6839      	ldr	r1, [r7, #0]
 8016c5e:	4618      	mov	r0, r3
 8016c60:	f000 f96e 	bl	8016f40 <ip4_addr_isbroadcast_u32>
 8016c64:	4603      	mov	r3, r0
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d105      	bne.n	8016c76 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016c6a:	4b47      	ldr	r3, [pc, #284]	; (8016d88 <ip4_input+0x240>)
 8016c6c:	691b      	ldr	r3, [r3, #16]
 8016c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016c72:	2be0      	cmp	r3, #224	; 0xe0
 8016c74:	d104      	bne.n	8016c80 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016c76:	6878      	ldr	r0, [r7, #4]
 8016c78:	f7f7 fd2c 	bl	800e6d4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	e07e      	b.n	8016d7e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016c80:	693b      	ldr	r3, [r7, #16]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d104      	bne.n	8016c90 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016c86:	6878      	ldr	r0, [r7, #4]
 8016c88:	f7f7 fd24 	bl	800e6d4 <pbuf_free>
    return ERR_OK;
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	e076      	b.n	8016d7e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016c90:	697b      	ldr	r3, [r7, #20]
 8016c92:	88db      	ldrh	r3, [r3, #6]
 8016c94:	b29b      	uxth	r3, r3
 8016c96:	461a      	mov	r2, r3
 8016c98:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016c9c:	4013      	ands	r3, r2
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d00b      	beq.n	8016cba <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016ca2:	6878      	ldr	r0, [r7, #4]
 8016ca4:	f000 fc92 	bl	80175cc <ip4_reass>
 8016ca8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d101      	bne.n	8016cb4 <ip4_input+0x16c>
      return ERR_OK;
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	e064      	b.n	8016d7e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	685b      	ldr	r3, [r3, #4]
 8016cb8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016cba:	4a33      	ldr	r2, [pc, #204]	; (8016d88 <ip4_input+0x240>)
 8016cbc:	693b      	ldr	r3, [r7, #16]
 8016cbe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016cc0:	4a31      	ldr	r2, [pc, #196]	; (8016d88 <ip4_input+0x240>)
 8016cc2:	683b      	ldr	r3, [r7, #0]
 8016cc4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016cc6:	4a30      	ldr	r2, [pc, #192]	; (8016d88 <ip4_input+0x240>)
 8016cc8:	697b      	ldr	r3, [r7, #20]
 8016cca:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016ccc:	697b      	ldr	r3, [r7, #20]
 8016cce:	781b      	ldrb	r3, [r3, #0]
 8016cd0:	f003 030f 	and.w	r3, r3, #15
 8016cd4:	b2db      	uxtb	r3, r3
 8016cd6:	009b      	lsls	r3, r3, #2
 8016cd8:	b2db      	uxtb	r3, r3
 8016cda:	b29a      	uxth	r2, r3
 8016cdc:	4b2a      	ldr	r3, [pc, #168]	; (8016d88 <ip4_input+0x240>)
 8016cde:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016ce0:	89fb      	ldrh	r3, [r7, #14]
 8016ce2:	4619      	mov	r1, r3
 8016ce4:	6878      	ldr	r0, [r7, #4]
 8016ce6:	f7f7 fc6f 	bl	800e5c8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016cea:	697b      	ldr	r3, [r7, #20]
 8016cec:	7a5b      	ldrb	r3, [r3, #9]
 8016cee:	2b11      	cmp	r3, #17
 8016cf0:	d006      	beq.n	8016d00 <ip4_input+0x1b8>
 8016cf2:	2b11      	cmp	r3, #17
 8016cf4:	dc13      	bgt.n	8016d1e <ip4_input+0x1d6>
 8016cf6:	2b01      	cmp	r3, #1
 8016cf8:	d00c      	beq.n	8016d14 <ip4_input+0x1cc>
 8016cfa:	2b06      	cmp	r3, #6
 8016cfc:	d005      	beq.n	8016d0a <ip4_input+0x1c2>
 8016cfe:	e00e      	b.n	8016d1e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016d00:	6839      	ldr	r1, [r7, #0]
 8016d02:	6878      	ldr	r0, [r7, #4]
 8016d04:	f7fe f970 	bl	8014fe8 <udp_input>
        break;
 8016d08:	e026      	b.n	8016d58 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016d0a:	6839      	ldr	r1, [r7, #0]
 8016d0c:	6878      	ldr	r0, [r7, #4]
 8016d0e:	f7f9 fd2d 	bl	801076c <tcp_input>
        break;
 8016d12:	e021      	b.n	8016d58 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016d14:	6839      	ldr	r1, [r7, #0]
 8016d16:	6878      	ldr	r0, [r7, #4]
 8016d18:	f7ff fcee 	bl	80166f8 <icmp_input>
        break;
 8016d1c:	e01c      	b.n	8016d58 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016d1e:	4b1a      	ldr	r3, [pc, #104]	; (8016d88 <ip4_input+0x240>)
 8016d20:	695b      	ldr	r3, [r3, #20]
 8016d22:	6939      	ldr	r1, [r7, #16]
 8016d24:	4618      	mov	r0, r3
 8016d26:	f000 f90b 	bl	8016f40 <ip4_addr_isbroadcast_u32>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d10f      	bne.n	8016d50 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d30:	4b15      	ldr	r3, [pc, #84]	; (8016d88 <ip4_input+0x240>)
 8016d32:	695b      	ldr	r3, [r3, #20]
 8016d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016d38:	2be0      	cmp	r3, #224	; 0xe0
 8016d3a:	d009      	beq.n	8016d50 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016d3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016d40:	4619      	mov	r1, r3
 8016d42:	6878      	ldr	r0, [r7, #4]
 8016d44:	f7f7 fcb3 	bl	800e6ae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016d48:	2102      	movs	r1, #2
 8016d4a:	6878      	ldr	r0, [r7, #4]
 8016d4c:	f7ff fdd8 	bl	8016900 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016d50:	6878      	ldr	r0, [r7, #4]
 8016d52:	f7f7 fcbf 	bl	800e6d4 <pbuf_free>
        break;
 8016d56:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016d58:	4b0b      	ldr	r3, [pc, #44]	; (8016d88 <ip4_input+0x240>)
 8016d5a:	2200      	movs	r2, #0
 8016d5c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016d5e:	4b0a      	ldr	r3, [pc, #40]	; (8016d88 <ip4_input+0x240>)
 8016d60:	2200      	movs	r2, #0
 8016d62:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016d64:	4b08      	ldr	r3, [pc, #32]	; (8016d88 <ip4_input+0x240>)
 8016d66:	2200      	movs	r2, #0
 8016d68:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016d6a:	4b07      	ldr	r3, [pc, #28]	; (8016d88 <ip4_input+0x240>)
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016d70:	4b05      	ldr	r3, [pc, #20]	; (8016d88 <ip4_input+0x240>)
 8016d72:	2200      	movs	r2, #0
 8016d74:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016d76:	4b04      	ldr	r3, [pc, #16]	; (8016d88 <ip4_input+0x240>)
 8016d78:	2200      	movs	r2, #0
 8016d7a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016d7c:	2300      	movs	r3, #0
}
 8016d7e:	4618      	mov	r0, r3
 8016d80:	3718      	adds	r7, #24
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bd80      	pop	{r7, pc}
 8016d86:	bf00      	nop
 8016d88:	2000a300 	.word	0x2000a300
 8016d8c:	2000da04 	.word	0x2000da04

08016d90 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b08a      	sub	sp, #40	; 0x28
 8016d94:	af04      	add	r7, sp, #16
 8016d96:	60f8      	str	r0, [r7, #12]
 8016d98:	60b9      	str	r1, [r7, #8]
 8016d9a:	607a      	str	r2, [r7, #4]
 8016d9c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016d9e:	68bb      	ldr	r3, [r7, #8]
 8016da0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d009      	beq.n	8016dbc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d003      	beq.n	8016db6 <ip4_output_if+0x26>
 8016dae:	68bb      	ldr	r3, [r7, #8]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d102      	bne.n	8016dbc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016db8:	3304      	adds	r3, #4
 8016dba:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016dbc:	78fa      	ldrb	r2, [r7, #3]
 8016dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc0:	9302      	str	r3, [sp, #8]
 8016dc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016dc6:	9301      	str	r3, [sp, #4]
 8016dc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016dcc:	9300      	str	r3, [sp, #0]
 8016dce:	4613      	mov	r3, r2
 8016dd0:	687a      	ldr	r2, [r7, #4]
 8016dd2:	6979      	ldr	r1, [r7, #20]
 8016dd4:	68f8      	ldr	r0, [r7, #12]
 8016dd6:	f000 f805 	bl	8016de4 <ip4_output_if_src>
 8016dda:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016ddc:	4618      	mov	r0, r3
 8016dde:	3718      	adds	r7, #24
 8016de0:	46bd      	mov	sp, r7
 8016de2:	bd80      	pop	{r7, pc}

08016de4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016de4:	b580      	push	{r7, lr}
 8016de6:	b088      	sub	sp, #32
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	60f8      	str	r0, [r7, #12]
 8016dec:	60b9      	str	r1, [r7, #8]
 8016dee:	607a      	str	r2, [r7, #4]
 8016df0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	7b9b      	ldrb	r3, [r3, #14]
 8016df6:	2b01      	cmp	r3, #1
 8016df8:	d006      	beq.n	8016e08 <ip4_output_if_src+0x24>
 8016dfa:	4b4b      	ldr	r3, [pc, #300]	; (8016f28 <ip4_output_if_src+0x144>)
 8016dfc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016e00:	494a      	ldr	r1, [pc, #296]	; (8016f2c <ip4_output_if_src+0x148>)
 8016e02:	484b      	ldr	r0, [pc, #300]	; (8016f30 <ip4_output_if_src+0x14c>)
 8016e04:	f001 fbd8 	bl	80185b8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d060      	beq.n	8016ed0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016e0e:	2314      	movs	r3, #20
 8016e10:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016e12:	2114      	movs	r1, #20
 8016e14:	68f8      	ldr	r0, [r7, #12]
 8016e16:	f7f7 fbc7 	bl	800e5a8 <pbuf_add_header>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d002      	beq.n	8016e26 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016e20:	f06f 0301 	mvn.w	r3, #1
 8016e24:	e07c      	b.n	8016f20 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	685b      	ldr	r3, [r3, #4]
 8016e2a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	895b      	ldrh	r3, [r3, #10]
 8016e30:	2b13      	cmp	r3, #19
 8016e32:	d806      	bhi.n	8016e42 <ip4_output_if_src+0x5e>
 8016e34:	4b3c      	ldr	r3, [pc, #240]	; (8016f28 <ip4_output_if_src+0x144>)
 8016e36:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016e3a:	493e      	ldr	r1, [pc, #248]	; (8016f34 <ip4_output_if_src+0x150>)
 8016e3c:	483c      	ldr	r0, [pc, #240]	; (8016f30 <ip4_output_if_src+0x14c>)
 8016e3e:	f001 fbbb 	bl	80185b8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016e42:	69fb      	ldr	r3, [r7, #28]
 8016e44:	78fa      	ldrb	r2, [r7, #3]
 8016e46:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016e48:	69fb      	ldr	r3, [r7, #28]
 8016e4a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016e4e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	681a      	ldr	r2, [r3, #0]
 8016e54:	69fb      	ldr	r3, [r7, #28]
 8016e56:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016e58:	8b7b      	ldrh	r3, [r7, #26]
 8016e5a:	089b      	lsrs	r3, r3, #2
 8016e5c:	b29b      	uxth	r3, r3
 8016e5e:	b2db      	uxtb	r3, r3
 8016e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e64:	b2da      	uxtb	r2, r3
 8016e66:	69fb      	ldr	r3, [r7, #28]
 8016e68:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016e6a:	69fb      	ldr	r3, [r7, #28]
 8016e6c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016e70:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	891b      	ldrh	r3, [r3, #8]
 8016e76:	4618      	mov	r0, r3
 8016e78:	f7f6 f8e4 	bl	800d044 <lwip_htons>
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	461a      	mov	r2, r3
 8016e80:	69fb      	ldr	r3, [r7, #28]
 8016e82:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016e84:	69fb      	ldr	r3, [r7, #28]
 8016e86:	2200      	movs	r2, #0
 8016e88:	719a      	strb	r2, [r3, #6]
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016e8e:	4b2a      	ldr	r3, [pc, #168]	; (8016f38 <ip4_output_if_src+0x154>)
 8016e90:	881b      	ldrh	r3, [r3, #0]
 8016e92:	4618      	mov	r0, r3
 8016e94:	f7f6 f8d6 	bl	800d044 <lwip_htons>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	461a      	mov	r2, r3
 8016e9c:	69fb      	ldr	r3, [r7, #28]
 8016e9e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016ea0:	4b25      	ldr	r3, [pc, #148]	; (8016f38 <ip4_output_if_src+0x154>)
 8016ea2:	881b      	ldrh	r3, [r3, #0]
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	b29a      	uxth	r2, r3
 8016ea8:	4b23      	ldr	r3, [pc, #140]	; (8016f38 <ip4_output_if_src+0x154>)
 8016eaa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016eac:	68bb      	ldr	r3, [r7, #8]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d104      	bne.n	8016ebc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016eb2:	4b22      	ldr	r3, [pc, #136]	; (8016f3c <ip4_output_if_src+0x158>)
 8016eb4:	681a      	ldr	r2, [r3, #0]
 8016eb6:	69fb      	ldr	r3, [r7, #28]
 8016eb8:	60da      	str	r2, [r3, #12]
 8016eba:	e003      	b.n	8016ec4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	681a      	ldr	r2, [r3, #0]
 8016ec0:	69fb      	ldr	r3, [r7, #28]
 8016ec2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016ec4:	69fb      	ldr	r3, [r7, #28]
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	729a      	strb	r2, [r3, #10]
 8016eca:	2200      	movs	r2, #0
 8016ecc:	72da      	strb	r2, [r3, #11]
 8016ece:	e00f      	b.n	8016ef0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	895b      	ldrh	r3, [r3, #10]
 8016ed4:	2b13      	cmp	r3, #19
 8016ed6:	d802      	bhi.n	8016ede <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016ed8:	f06f 0301 	mvn.w	r3, #1
 8016edc:	e020      	b.n	8016f20 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	685b      	ldr	r3, [r3, #4]
 8016ee2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016ee4:	69fb      	ldr	r3, [r7, #28]
 8016ee6:	691b      	ldr	r3, [r3, #16]
 8016ee8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016eea:	f107 0314 	add.w	r3, r7, #20
 8016eee:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d00c      	beq.n	8016f12 <ip4_output_if_src+0x12e>
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	891a      	ldrh	r2, [r3, #8]
 8016efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016efe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016f00:	429a      	cmp	r2, r3
 8016f02:	d906      	bls.n	8016f12 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016f04:	687a      	ldr	r2, [r7, #4]
 8016f06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016f08:	68f8      	ldr	r0, [r7, #12]
 8016f0a:	f000 fd4d 	bl	80179a8 <ip4_frag>
 8016f0e:	4603      	mov	r3, r0
 8016f10:	e006      	b.n	8016f20 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f14:	695b      	ldr	r3, [r3, #20]
 8016f16:	687a      	ldr	r2, [r7, #4]
 8016f18:	68f9      	ldr	r1, [r7, #12]
 8016f1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f1c:	4798      	blx	r3
 8016f1e:	4603      	mov	r3, r0
}
 8016f20:	4618      	mov	r0, r3
 8016f22:	3720      	adds	r7, #32
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd80      	pop	{r7, pc}
 8016f28:	0801c9a0 	.word	0x0801c9a0
 8016f2c:	0801c9d4 	.word	0x0801c9d4
 8016f30:	0801c9e0 	.word	0x0801c9e0
 8016f34:	0801ca08 	.word	0x0801ca08
 8016f38:	20006ac6 	.word	0x20006ac6
 8016f3c:	0801ce28 	.word	0x0801ce28

08016f40 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016f40:	b480      	push	{r7}
 8016f42:	b085      	sub	sp, #20
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
 8016f48:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f54:	d002      	beq.n	8016f5c <ip4_addr_isbroadcast_u32+0x1c>
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d101      	bne.n	8016f60 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016f5c:	2301      	movs	r3, #1
 8016f5e:	e02a      	b.n	8016fb6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016f60:	683b      	ldr	r3, [r7, #0]
 8016f62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016f66:	f003 0302 	and.w	r3, r3, #2
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d101      	bne.n	8016f72 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016f6e:	2300      	movs	r3, #0
 8016f70:	e021      	b.n	8016fb6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016f72:	683b      	ldr	r3, [r7, #0]
 8016f74:	3304      	adds	r3, #4
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	687a      	ldr	r2, [r7, #4]
 8016f7a:	429a      	cmp	r2, r3
 8016f7c:	d101      	bne.n	8016f82 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016f7e:	2300      	movs	r3, #0
 8016f80:	e019      	b.n	8016fb6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016f82:	68fa      	ldr	r2, [r7, #12]
 8016f84:	683b      	ldr	r3, [r7, #0]
 8016f86:	3304      	adds	r3, #4
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	405a      	eors	r2, r3
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	3308      	adds	r3, #8
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	4013      	ands	r3, r2
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d10d      	bne.n	8016fb4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016f98:	683b      	ldr	r3, [r7, #0]
 8016f9a:	3308      	adds	r3, #8
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	43da      	mvns	r2, r3
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	3308      	adds	r3, #8
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016fac:	429a      	cmp	r2, r3
 8016fae:	d101      	bne.n	8016fb4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016fb0:	2301      	movs	r3, #1
 8016fb2:	e000      	b.n	8016fb6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016fb4:	2300      	movs	r3, #0
  }
}
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	3714      	adds	r7, #20
 8016fba:	46bd      	mov	sp, r7
 8016fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc0:	4770      	bx	lr
	...

08016fc4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b084      	sub	sp, #16
 8016fc8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016fca:	2300      	movs	r3, #0
 8016fcc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016fce:	4b12      	ldr	r3, [pc, #72]	; (8017018 <ip_reass_tmr+0x54>)
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016fd4:	e018      	b.n	8017008 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	7fdb      	ldrb	r3, [r3, #31]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d00b      	beq.n	8016ff6 <ip_reass_tmr+0x32>
      r->timer--;
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	7fdb      	ldrb	r3, [r3, #31]
 8016fe2:	3b01      	subs	r3, #1
 8016fe4:	b2da      	uxtb	r2, r3
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	60fb      	str	r3, [r7, #12]
 8016ff4:	e008      	b.n	8017008 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017000:	68b9      	ldr	r1, [r7, #8]
 8017002:	6878      	ldr	r0, [r7, #4]
 8017004:	f000 f80a 	bl	801701c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d1e3      	bne.n	8016fd6 <ip_reass_tmr+0x12>
    }
  }
}
 801700e:	bf00      	nop
 8017010:	bf00      	nop
 8017012:	3710      	adds	r7, #16
 8017014:	46bd      	mov	sp, r7
 8017016:	bd80      	pop	{r7, pc}
 8017018:	20006ac8 	.word	0x20006ac8

0801701c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b088      	sub	sp, #32
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
 8017024:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017026:	2300      	movs	r3, #0
 8017028:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801702a:	683a      	ldr	r2, [r7, #0]
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	429a      	cmp	r2, r3
 8017030:	d105      	bne.n	801703e <ip_reass_free_complete_datagram+0x22>
 8017032:	4b45      	ldr	r3, [pc, #276]	; (8017148 <ip_reass_free_complete_datagram+0x12c>)
 8017034:	22ab      	movs	r2, #171	; 0xab
 8017036:	4945      	ldr	r1, [pc, #276]	; (801714c <ip_reass_free_complete_datagram+0x130>)
 8017038:	4845      	ldr	r0, [pc, #276]	; (8017150 <ip_reass_free_complete_datagram+0x134>)
 801703a:	f001 fabd 	bl	80185b8 <iprintf>
  if (prev != NULL) {
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d00a      	beq.n	801705a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	687a      	ldr	r2, [r7, #4]
 801704a:	429a      	cmp	r2, r3
 801704c:	d005      	beq.n	801705a <ip_reass_free_complete_datagram+0x3e>
 801704e:	4b3e      	ldr	r3, [pc, #248]	; (8017148 <ip_reass_free_complete_datagram+0x12c>)
 8017050:	22ad      	movs	r2, #173	; 0xad
 8017052:	4940      	ldr	r1, [pc, #256]	; (8017154 <ip_reass_free_complete_datagram+0x138>)
 8017054:	483e      	ldr	r0, [pc, #248]	; (8017150 <ip_reass_free_complete_datagram+0x134>)
 8017056:	f001 faaf 	bl	80185b8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	685b      	ldr	r3, [r3, #4]
 801705e:	685b      	ldr	r3, [r3, #4]
 8017060:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017062:	697b      	ldr	r3, [r7, #20]
 8017064:	889b      	ldrh	r3, [r3, #4]
 8017066:	b29b      	uxth	r3, r3
 8017068:	2b00      	cmp	r3, #0
 801706a:	d12a      	bne.n	80170c2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	685b      	ldr	r3, [r3, #4]
 8017070:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017072:	697b      	ldr	r3, [r7, #20]
 8017074:	681a      	ldr	r2, [r3, #0]
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801707a:	69bb      	ldr	r3, [r7, #24]
 801707c:	6858      	ldr	r0, [r3, #4]
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	3308      	adds	r3, #8
 8017082:	2214      	movs	r2, #20
 8017084:	4619      	mov	r1, r3
 8017086:	f001 f9bd 	bl	8018404 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801708a:	2101      	movs	r1, #1
 801708c:	69b8      	ldr	r0, [r7, #24]
 801708e:	f7ff fc47 	bl	8016920 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017092:	69b8      	ldr	r0, [r7, #24]
 8017094:	f7f7 fbac 	bl	800e7f0 <pbuf_clen>
 8017098:	4603      	mov	r3, r0
 801709a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801709c:	8bfa      	ldrh	r2, [r7, #30]
 801709e:	8a7b      	ldrh	r3, [r7, #18]
 80170a0:	4413      	add	r3, r2
 80170a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80170a6:	db05      	blt.n	80170b4 <ip_reass_free_complete_datagram+0x98>
 80170a8:	4b27      	ldr	r3, [pc, #156]	; (8017148 <ip_reass_free_complete_datagram+0x12c>)
 80170aa:	22bc      	movs	r2, #188	; 0xbc
 80170ac:	492a      	ldr	r1, [pc, #168]	; (8017158 <ip_reass_free_complete_datagram+0x13c>)
 80170ae:	4828      	ldr	r0, [pc, #160]	; (8017150 <ip_reass_free_complete_datagram+0x134>)
 80170b0:	f001 fa82 	bl	80185b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80170b4:	8bfa      	ldrh	r2, [r7, #30]
 80170b6:	8a7b      	ldrh	r3, [r7, #18]
 80170b8:	4413      	add	r3, r2
 80170ba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80170bc:	69b8      	ldr	r0, [r7, #24]
 80170be:	f7f7 fb09 	bl	800e6d4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	685b      	ldr	r3, [r3, #4]
 80170c6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80170c8:	e01f      	b.n	801710a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80170ca:	69bb      	ldr	r3, [r7, #24]
 80170cc:	685b      	ldr	r3, [r3, #4]
 80170ce:	617b      	str	r3, [r7, #20]
    pcur = p;
 80170d0:	69bb      	ldr	r3, [r7, #24]
 80170d2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80170d4:	697b      	ldr	r3, [r7, #20]
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80170da:	68f8      	ldr	r0, [r7, #12]
 80170dc:	f7f7 fb88 	bl	800e7f0 <pbuf_clen>
 80170e0:	4603      	mov	r3, r0
 80170e2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80170e4:	8bfa      	ldrh	r2, [r7, #30]
 80170e6:	8a7b      	ldrh	r3, [r7, #18]
 80170e8:	4413      	add	r3, r2
 80170ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80170ee:	db05      	blt.n	80170fc <ip_reass_free_complete_datagram+0xe0>
 80170f0:	4b15      	ldr	r3, [pc, #84]	; (8017148 <ip_reass_free_complete_datagram+0x12c>)
 80170f2:	22cc      	movs	r2, #204	; 0xcc
 80170f4:	4918      	ldr	r1, [pc, #96]	; (8017158 <ip_reass_free_complete_datagram+0x13c>)
 80170f6:	4816      	ldr	r0, [pc, #88]	; (8017150 <ip_reass_free_complete_datagram+0x134>)
 80170f8:	f001 fa5e 	bl	80185b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80170fc:	8bfa      	ldrh	r2, [r7, #30]
 80170fe:	8a7b      	ldrh	r3, [r7, #18]
 8017100:	4413      	add	r3, r2
 8017102:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017104:	68f8      	ldr	r0, [r7, #12]
 8017106:	f7f7 fae5 	bl	800e6d4 <pbuf_free>
  while (p != NULL) {
 801710a:	69bb      	ldr	r3, [r7, #24]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d1dc      	bne.n	80170ca <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017110:	6839      	ldr	r1, [r7, #0]
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	f000 f8c2 	bl	801729c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017118:	4b10      	ldr	r3, [pc, #64]	; (801715c <ip_reass_free_complete_datagram+0x140>)
 801711a:	881b      	ldrh	r3, [r3, #0]
 801711c:	8bfa      	ldrh	r2, [r7, #30]
 801711e:	429a      	cmp	r2, r3
 8017120:	d905      	bls.n	801712e <ip_reass_free_complete_datagram+0x112>
 8017122:	4b09      	ldr	r3, [pc, #36]	; (8017148 <ip_reass_free_complete_datagram+0x12c>)
 8017124:	22d2      	movs	r2, #210	; 0xd2
 8017126:	490e      	ldr	r1, [pc, #56]	; (8017160 <ip_reass_free_complete_datagram+0x144>)
 8017128:	4809      	ldr	r0, [pc, #36]	; (8017150 <ip_reass_free_complete_datagram+0x134>)
 801712a:	f001 fa45 	bl	80185b8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801712e:	4b0b      	ldr	r3, [pc, #44]	; (801715c <ip_reass_free_complete_datagram+0x140>)
 8017130:	881a      	ldrh	r2, [r3, #0]
 8017132:	8bfb      	ldrh	r3, [r7, #30]
 8017134:	1ad3      	subs	r3, r2, r3
 8017136:	b29a      	uxth	r2, r3
 8017138:	4b08      	ldr	r3, [pc, #32]	; (801715c <ip_reass_free_complete_datagram+0x140>)
 801713a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801713c:	8bfb      	ldrh	r3, [r7, #30]
}
 801713e:	4618      	mov	r0, r3
 8017140:	3720      	adds	r7, #32
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}
 8017146:	bf00      	nop
 8017148:	0801ca38 	.word	0x0801ca38
 801714c:	0801ca74 	.word	0x0801ca74
 8017150:	0801ca80 	.word	0x0801ca80
 8017154:	0801caa8 	.word	0x0801caa8
 8017158:	0801cabc 	.word	0x0801cabc
 801715c:	20006acc 	.word	0x20006acc
 8017160:	0801cadc 	.word	0x0801cadc

08017164 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017164:	b580      	push	{r7, lr}
 8017166:	b08a      	sub	sp, #40	; 0x28
 8017168:	af00      	add	r7, sp, #0
 801716a:	6078      	str	r0, [r7, #4]
 801716c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801716e:	2300      	movs	r3, #0
 8017170:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017172:	2300      	movs	r3, #0
 8017174:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017176:	2300      	movs	r3, #0
 8017178:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801717a:	2300      	movs	r3, #0
 801717c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801717e:	2300      	movs	r3, #0
 8017180:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017182:	4b28      	ldr	r3, [pc, #160]	; (8017224 <ip_reass_remove_oldest_datagram+0xc0>)
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017188:	e030      	b.n	80171ec <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801718c:	695a      	ldr	r2, [r3, #20]
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	68db      	ldr	r3, [r3, #12]
 8017192:	429a      	cmp	r2, r3
 8017194:	d10c      	bne.n	80171b0 <ip_reass_remove_oldest_datagram+0x4c>
 8017196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017198:	699a      	ldr	r2, [r3, #24]
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	691b      	ldr	r3, [r3, #16]
 801719e:	429a      	cmp	r2, r3
 80171a0:	d106      	bne.n	80171b0 <ip_reass_remove_oldest_datagram+0x4c>
 80171a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171a4:	899a      	ldrh	r2, [r3, #12]
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	889b      	ldrh	r3, [r3, #4]
 80171aa:	b29b      	uxth	r3, r3
 80171ac:	429a      	cmp	r2, r3
 80171ae:	d014      	beq.n	80171da <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80171b0:	693b      	ldr	r3, [r7, #16]
 80171b2:	3301      	adds	r3, #1
 80171b4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80171b6:	6a3b      	ldr	r3, [r7, #32]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d104      	bne.n	80171c6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80171bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171be:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80171c0:	69fb      	ldr	r3, [r7, #28]
 80171c2:	61bb      	str	r3, [r7, #24]
 80171c4:	e009      	b.n	80171da <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80171c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171c8:	7fda      	ldrb	r2, [r3, #31]
 80171ca:	6a3b      	ldr	r3, [r7, #32]
 80171cc:	7fdb      	ldrb	r3, [r3, #31]
 80171ce:	429a      	cmp	r2, r3
 80171d0:	d803      	bhi.n	80171da <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80171d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171d4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80171d6:	69fb      	ldr	r3, [r7, #28]
 80171d8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80171da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d001      	beq.n	80171e6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80171e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171e4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80171e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80171ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d1cb      	bne.n	801718a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80171f2:	6a3b      	ldr	r3, [r7, #32]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d008      	beq.n	801720a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80171f8:	69b9      	ldr	r1, [r7, #24]
 80171fa:	6a38      	ldr	r0, [r7, #32]
 80171fc:	f7ff ff0e 	bl	801701c <ip_reass_free_complete_datagram>
 8017200:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017202:	697a      	ldr	r2, [r7, #20]
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	4413      	add	r3, r2
 8017208:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801720a:	697a      	ldr	r2, [r7, #20]
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	429a      	cmp	r2, r3
 8017210:	da02      	bge.n	8017218 <ip_reass_remove_oldest_datagram+0xb4>
 8017212:	693b      	ldr	r3, [r7, #16]
 8017214:	2b01      	cmp	r3, #1
 8017216:	dcac      	bgt.n	8017172 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017218:	697b      	ldr	r3, [r7, #20]
}
 801721a:	4618      	mov	r0, r3
 801721c:	3728      	adds	r7, #40	; 0x28
 801721e:	46bd      	mov	sp, r7
 8017220:	bd80      	pop	{r7, pc}
 8017222:	bf00      	nop
 8017224:	20006ac8 	.word	0x20006ac8

08017228 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017228:	b580      	push	{r7, lr}
 801722a:	b084      	sub	sp, #16
 801722c:	af00      	add	r7, sp, #0
 801722e:	6078      	str	r0, [r7, #4]
 8017230:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017232:	2004      	movs	r0, #4
 8017234:	f7f6 fbbc 	bl	800d9b0 <memp_malloc>
 8017238:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d110      	bne.n	8017262 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017240:	6839      	ldr	r1, [r7, #0]
 8017242:	6878      	ldr	r0, [r7, #4]
 8017244:	f7ff ff8e 	bl	8017164 <ip_reass_remove_oldest_datagram>
 8017248:	4602      	mov	r2, r0
 801724a:	683b      	ldr	r3, [r7, #0]
 801724c:	4293      	cmp	r3, r2
 801724e:	dc03      	bgt.n	8017258 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017250:	2004      	movs	r0, #4
 8017252:	f7f6 fbad 	bl	800d9b0 <memp_malloc>
 8017256:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	2b00      	cmp	r3, #0
 801725c:	d101      	bne.n	8017262 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801725e:	2300      	movs	r3, #0
 8017260:	e016      	b.n	8017290 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017262:	2220      	movs	r2, #32
 8017264:	2100      	movs	r1, #0
 8017266:	68f8      	ldr	r0, [r7, #12]
 8017268:	f001 f8f4 	bl	8018454 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	220f      	movs	r2, #15
 8017270:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017272:	4b09      	ldr	r3, [pc, #36]	; (8017298 <ip_reass_enqueue_new_datagram+0x70>)
 8017274:	681a      	ldr	r2, [r3, #0]
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801727a:	4a07      	ldr	r2, [pc, #28]	; (8017298 <ip_reass_enqueue_new_datagram+0x70>)
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	3308      	adds	r3, #8
 8017284:	2214      	movs	r2, #20
 8017286:	6879      	ldr	r1, [r7, #4]
 8017288:	4618      	mov	r0, r3
 801728a:	f001 f8bb 	bl	8018404 <memcpy>
  return ipr;
 801728e:	68fb      	ldr	r3, [r7, #12]
}
 8017290:	4618      	mov	r0, r3
 8017292:	3710      	adds	r7, #16
 8017294:	46bd      	mov	sp, r7
 8017296:	bd80      	pop	{r7, pc}
 8017298:	20006ac8 	.word	0x20006ac8

0801729c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b082      	sub	sp, #8
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	6078      	str	r0, [r7, #4]
 80172a4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80172a6:	4b10      	ldr	r3, [pc, #64]	; (80172e8 <ip_reass_dequeue_datagram+0x4c>)
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	687a      	ldr	r2, [r7, #4]
 80172ac:	429a      	cmp	r2, r3
 80172ae:	d104      	bne.n	80172ba <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	4a0c      	ldr	r2, [pc, #48]	; (80172e8 <ip_reass_dequeue_datagram+0x4c>)
 80172b6:	6013      	str	r3, [r2, #0]
 80172b8:	e00d      	b.n	80172d6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80172ba:	683b      	ldr	r3, [r7, #0]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d106      	bne.n	80172ce <ip_reass_dequeue_datagram+0x32>
 80172c0:	4b0a      	ldr	r3, [pc, #40]	; (80172ec <ip_reass_dequeue_datagram+0x50>)
 80172c2:	f240 1245 	movw	r2, #325	; 0x145
 80172c6:	490a      	ldr	r1, [pc, #40]	; (80172f0 <ip_reass_dequeue_datagram+0x54>)
 80172c8:	480a      	ldr	r0, [pc, #40]	; (80172f4 <ip_reass_dequeue_datagram+0x58>)
 80172ca:	f001 f975 	bl	80185b8 <iprintf>
    prev->next = ipr->next;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	681a      	ldr	r2, [r3, #0]
 80172d2:	683b      	ldr	r3, [r7, #0]
 80172d4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80172d6:	6879      	ldr	r1, [r7, #4]
 80172d8:	2004      	movs	r0, #4
 80172da:	f7f6 fbbb 	bl	800da54 <memp_free>
}
 80172de:	bf00      	nop
 80172e0:	3708      	adds	r7, #8
 80172e2:	46bd      	mov	sp, r7
 80172e4:	bd80      	pop	{r7, pc}
 80172e6:	bf00      	nop
 80172e8:	20006ac8 	.word	0x20006ac8
 80172ec:	0801ca38 	.word	0x0801ca38
 80172f0:	0801cb00 	.word	0x0801cb00
 80172f4:	0801ca80 	.word	0x0801ca80

080172f8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b08c      	sub	sp, #48	; 0x30
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	60f8      	str	r0, [r7, #12]
 8017300:	60b9      	str	r1, [r7, #8]
 8017302:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017304:	2300      	movs	r3, #0
 8017306:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017308:	2301      	movs	r3, #1
 801730a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801730c:	68bb      	ldr	r3, [r7, #8]
 801730e:	685b      	ldr	r3, [r3, #4]
 8017310:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017312:	69fb      	ldr	r3, [r7, #28]
 8017314:	885b      	ldrh	r3, [r3, #2]
 8017316:	b29b      	uxth	r3, r3
 8017318:	4618      	mov	r0, r3
 801731a:	f7f5 fe93 	bl	800d044 <lwip_htons>
 801731e:	4603      	mov	r3, r0
 8017320:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017322:	69fb      	ldr	r3, [r7, #28]
 8017324:	781b      	ldrb	r3, [r3, #0]
 8017326:	f003 030f 	and.w	r3, r3, #15
 801732a:	b2db      	uxtb	r3, r3
 801732c:	009b      	lsls	r3, r3, #2
 801732e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017330:	7e7b      	ldrb	r3, [r7, #25]
 8017332:	b29b      	uxth	r3, r3
 8017334:	8b7a      	ldrh	r2, [r7, #26]
 8017336:	429a      	cmp	r2, r3
 8017338:	d202      	bcs.n	8017340 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801733a:	f04f 33ff 	mov.w	r3, #4294967295
 801733e:	e135      	b.n	80175ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017340:	7e7b      	ldrb	r3, [r7, #25]
 8017342:	b29b      	uxth	r3, r3
 8017344:	8b7a      	ldrh	r2, [r7, #26]
 8017346:	1ad3      	subs	r3, r2, r3
 8017348:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801734a:	69fb      	ldr	r3, [r7, #28]
 801734c:	88db      	ldrh	r3, [r3, #6]
 801734e:	b29b      	uxth	r3, r3
 8017350:	4618      	mov	r0, r3
 8017352:	f7f5 fe77 	bl	800d044 <lwip_htons>
 8017356:	4603      	mov	r3, r0
 8017358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801735c:	b29b      	uxth	r3, r3
 801735e:	00db      	lsls	r3, r3, #3
 8017360:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017362:	68bb      	ldr	r3, [r7, #8]
 8017364:	685b      	ldr	r3, [r3, #4]
 8017366:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801736a:	2200      	movs	r2, #0
 801736c:	701a      	strb	r2, [r3, #0]
 801736e:	2200      	movs	r2, #0
 8017370:	705a      	strb	r2, [r3, #1]
 8017372:	2200      	movs	r2, #0
 8017374:	709a      	strb	r2, [r3, #2]
 8017376:	2200      	movs	r2, #0
 8017378:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801737c:	8afa      	ldrh	r2, [r7, #22]
 801737e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017380:	8afa      	ldrh	r2, [r7, #22]
 8017382:	8b7b      	ldrh	r3, [r7, #26]
 8017384:	4413      	add	r3, r2
 8017386:	b29a      	uxth	r2, r3
 8017388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801738a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801738e:	88db      	ldrh	r3, [r3, #6]
 8017390:	b29b      	uxth	r3, r3
 8017392:	8afa      	ldrh	r2, [r7, #22]
 8017394:	429a      	cmp	r2, r3
 8017396:	d902      	bls.n	801739e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017398:	f04f 33ff 	mov.w	r3, #4294967295
 801739c:	e106      	b.n	80175ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	685b      	ldr	r3, [r3, #4]
 80173a2:	627b      	str	r3, [r7, #36]	; 0x24
 80173a4:	e068      	b.n	8017478 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80173a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173a8:	685b      	ldr	r3, [r3, #4]
 80173aa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80173ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ae:	889b      	ldrh	r3, [r3, #4]
 80173b0:	b29a      	uxth	r2, r3
 80173b2:	693b      	ldr	r3, [r7, #16]
 80173b4:	889b      	ldrh	r3, [r3, #4]
 80173b6:	b29b      	uxth	r3, r3
 80173b8:	429a      	cmp	r2, r3
 80173ba:	d235      	bcs.n	8017428 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80173bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173c0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80173c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d020      	beq.n	801740a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80173c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ca:	889b      	ldrh	r3, [r3, #4]
 80173cc:	b29a      	uxth	r2, r3
 80173ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d0:	88db      	ldrh	r3, [r3, #6]
 80173d2:	b29b      	uxth	r3, r3
 80173d4:	429a      	cmp	r2, r3
 80173d6:	d307      	bcc.n	80173e8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80173d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173da:	88db      	ldrh	r3, [r3, #6]
 80173dc:	b29a      	uxth	r2, r3
 80173de:	693b      	ldr	r3, [r7, #16]
 80173e0:	889b      	ldrh	r3, [r3, #4]
 80173e2:	b29b      	uxth	r3, r3
 80173e4:	429a      	cmp	r2, r3
 80173e6:	d902      	bls.n	80173ee <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80173e8:	f04f 33ff 	mov.w	r3, #4294967295
 80173ec:	e0de      	b.n	80175ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80173ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173f0:	68ba      	ldr	r2, [r7, #8]
 80173f2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80173f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173f6:	88db      	ldrh	r3, [r3, #6]
 80173f8:	b29a      	uxth	r2, r3
 80173fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173fc:	889b      	ldrh	r3, [r3, #4]
 80173fe:	b29b      	uxth	r3, r3
 8017400:	429a      	cmp	r2, r3
 8017402:	d03d      	beq.n	8017480 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017404:	2300      	movs	r3, #0
 8017406:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017408:	e03a      	b.n	8017480 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801740a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801740c:	88db      	ldrh	r3, [r3, #6]
 801740e:	b29a      	uxth	r2, r3
 8017410:	693b      	ldr	r3, [r7, #16]
 8017412:	889b      	ldrh	r3, [r3, #4]
 8017414:	b29b      	uxth	r3, r3
 8017416:	429a      	cmp	r2, r3
 8017418:	d902      	bls.n	8017420 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801741a:	f04f 33ff 	mov.w	r3, #4294967295
 801741e:	e0c5      	b.n	80175ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	68ba      	ldr	r2, [r7, #8]
 8017424:	605a      	str	r2, [r3, #4]
      break;
 8017426:	e02b      	b.n	8017480 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801742a:	889b      	ldrh	r3, [r3, #4]
 801742c:	b29a      	uxth	r2, r3
 801742e:	693b      	ldr	r3, [r7, #16]
 8017430:	889b      	ldrh	r3, [r3, #4]
 8017432:	b29b      	uxth	r3, r3
 8017434:	429a      	cmp	r2, r3
 8017436:	d102      	bne.n	801743e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017438:	f04f 33ff 	mov.w	r3, #4294967295
 801743c:	e0b6      	b.n	80175ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017440:	889b      	ldrh	r3, [r3, #4]
 8017442:	b29a      	uxth	r2, r3
 8017444:	693b      	ldr	r3, [r7, #16]
 8017446:	88db      	ldrh	r3, [r3, #6]
 8017448:	b29b      	uxth	r3, r3
 801744a:	429a      	cmp	r2, r3
 801744c:	d202      	bcs.n	8017454 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801744e:	f04f 33ff 	mov.w	r3, #4294967295
 8017452:	e0ab      	b.n	80175ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017456:	2b00      	cmp	r3, #0
 8017458:	d009      	beq.n	801746e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801745c:	88db      	ldrh	r3, [r3, #6]
 801745e:	b29a      	uxth	r2, r3
 8017460:	693b      	ldr	r3, [r7, #16]
 8017462:	889b      	ldrh	r3, [r3, #4]
 8017464:	b29b      	uxth	r3, r3
 8017466:	429a      	cmp	r2, r3
 8017468:	d001      	beq.n	801746e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801746a:	2300      	movs	r3, #0
 801746c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801746e:	693b      	ldr	r3, [r7, #16]
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017474:	693b      	ldr	r3, [r7, #16]
 8017476:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801747a:	2b00      	cmp	r3, #0
 801747c:	d193      	bne.n	80173a6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801747e:	e000      	b.n	8017482 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017480:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017484:	2b00      	cmp	r3, #0
 8017486:	d12d      	bne.n	80174e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801748a:	2b00      	cmp	r3, #0
 801748c:	d01c      	beq.n	80174c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801748e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017490:	88db      	ldrh	r3, [r3, #6]
 8017492:	b29a      	uxth	r2, r3
 8017494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017496:	889b      	ldrh	r3, [r3, #4]
 8017498:	b29b      	uxth	r3, r3
 801749a:	429a      	cmp	r2, r3
 801749c:	d906      	bls.n	80174ac <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801749e:	4b45      	ldr	r3, [pc, #276]	; (80175b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80174a0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80174a4:	4944      	ldr	r1, [pc, #272]	; (80175b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80174a6:	4845      	ldr	r0, [pc, #276]	; (80175bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80174a8:	f001 f886 	bl	80185b8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80174ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ae:	68ba      	ldr	r2, [r7, #8]
 80174b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80174b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b4:	88db      	ldrh	r3, [r3, #6]
 80174b6:	b29a      	uxth	r2, r3
 80174b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ba:	889b      	ldrh	r3, [r3, #4]
 80174bc:	b29b      	uxth	r3, r3
 80174be:	429a      	cmp	r2, r3
 80174c0:	d010      	beq.n	80174e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80174c2:	2300      	movs	r3, #0
 80174c4:	623b      	str	r3, [r7, #32]
 80174c6:	e00d      	b.n	80174e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	685b      	ldr	r3, [r3, #4]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d006      	beq.n	80174de <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80174d0:	4b38      	ldr	r3, [pc, #224]	; (80175b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80174d2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80174d6:	493a      	ldr	r1, [pc, #232]	; (80175c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80174d8:	4838      	ldr	r0, [pc, #224]	; (80175bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80174da:	f001 f86d 	bl	80185b8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	68ba      	ldr	r2, [r7, #8]
 80174e2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d105      	bne.n	80174f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	7f9b      	ldrb	r3, [r3, #30]
 80174ee:	f003 0301 	and.w	r3, r3, #1
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d059      	beq.n	80175aa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80174f6:	6a3b      	ldr	r3, [r7, #32]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d04f      	beq.n	801759c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	685b      	ldr	r3, [r3, #4]
 8017500:	2b00      	cmp	r3, #0
 8017502:	d006      	beq.n	8017512 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	685b      	ldr	r3, [r3, #4]
 8017508:	685b      	ldr	r3, [r3, #4]
 801750a:	889b      	ldrh	r3, [r3, #4]
 801750c:	b29b      	uxth	r3, r3
 801750e:	2b00      	cmp	r3, #0
 8017510:	d002      	beq.n	8017518 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017512:	2300      	movs	r3, #0
 8017514:	623b      	str	r3, [r7, #32]
 8017516:	e041      	b.n	801759c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017522:	e012      	b.n	801754a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017526:	685b      	ldr	r3, [r3, #4]
 8017528:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801752c:	88db      	ldrh	r3, [r3, #6]
 801752e:	b29a      	uxth	r2, r3
 8017530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017532:	889b      	ldrh	r3, [r3, #4]
 8017534:	b29b      	uxth	r3, r3
 8017536:	429a      	cmp	r2, r3
 8017538:	d002      	beq.n	8017540 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801753a:	2300      	movs	r3, #0
 801753c:	623b      	str	r3, [r7, #32]
            break;
 801753e:	e007      	b.n	8017550 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017542:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801754c:	2b00      	cmp	r3, #0
 801754e:	d1e9      	bne.n	8017524 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017550:	6a3b      	ldr	r3, [r7, #32]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d022      	beq.n	801759c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	685b      	ldr	r3, [r3, #4]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d106      	bne.n	801756c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801755e:	4b15      	ldr	r3, [pc, #84]	; (80175b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017560:	f240 12df 	movw	r2, #479	; 0x1df
 8017564:	4917      	ldr	r1, [pc, #92]	; (80175c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017566:	4815      	ldr	r0, [pc, #84]	; (80175bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017568:	f001 f826 	bl	80185b8 <iprintf>
          LWIP_ASSERT("sanity check",
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	685b      	ldr	r3, [r3, #4]
 8017570:	685b      	ldr	r3, [r3, #4]
 8017572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017574:	429a      	cmp	r2, r3
 8017576:	d106      	bne.n	8017586 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017578:	4b0e      	ldr	r3, [pc, #56]	; (80175b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801757a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801757e:	4911      	ldr	r1, [pc, #68]	; (80175c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017580:	480e      	ldr	r0, [pc, #56]	; (80175bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017582:	f001 f819 	bl	80185b8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d006      	beq.n	801759c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801758e:	4b09      	ldr	r3, [pc, #36]	; (80175b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017590:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017594:	490c      	ldr	r1, [pc, #48]	; (80175c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017596:	4809      	ldr	r0, [pc, #36]	; (80175bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017598:	f001 f80e 	bl	80185b8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801759c:	6a3b      	ldr	r3, [r7, #32]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	bf14      	ite	ne
 80175a2:	2301      	movne	r3, #1
 80175a4:	2300      	moveq	r3, #0
 80175a6:	b2db      	uxtb	r3, r3
 80175a8:	e000      	b.n	80175ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80175aa:	2300      	movs	r3, #0
}
 80175ac:	4618      	mov	r0, r3
 80175ae:	3730      	adds	r7, #48	; 0x30
 80175b0:	46bd      	mov	sp, r7
 80175b2:	bd80      	pop	{r7, pc}
 80175b4:	0801ca38 	.word	0x0801ca38
 80175b8:	0801cb1c 	.word	0x0801cb1c
 80175bc:	0801ca80 	.word	0x0801ca80
 80175c0:	0801cb3c 	.word	0x0801cb3c
 80175c4:	0801cb74 	.word	0x0801cb74
 80175c8:	0801cb84 	.word	0x0801cb84

080175cc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b08e      	sub	sp, #56	; 0x38
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	685b      	ldr	r3, [r3, #4]
 80175d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80175da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175dc:	781b      	ldrb	r3, [r3, #0]
 80175de:	f003 030f 	and.w	r3, r3, #15
 80175e2:	b2db      	uxtb	r3, r3
 80175e4:	009b      	lsls	r3, r3, #2
 80175e6:	b2db      	uxtb	r3, r3
 80175e8:	2b14      	cmp	r3, #20
 80175ea:	f040 8167 	bne.w	80178bc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80175ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f0:	88db      	ldrh	r3, [r3, #6]
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	4618      	mov	r0, r3
 80175f6:	f7f5 fd25 	bl	800d044 <lwip_htons>
 80175fa:	4603      	mov	r3, r0
 80175fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017600:	b29b      	uxth	r3, r3
 8017602:	00db      	lsls	r3, r3, #3
 8017604:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017608:	885b      	ldrh	r3, [r3, #2]
 801760a:	b29b      	uxth	r3, r3
 801760c:	4618      	mov	r0, r3
 801760e:	f7f5 fd19 	bl	800d044 <lwip_htons>
 8017612:	4603      	mov	r3, r0
 8017614:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017618:	781b      	ldrb	r3, [r3, #0]
 801761a:	f003 030f 	and.w	r3, r3, #15
 801761e:	b2db      	uxtb	r3, r3
 8017620:	009b      	lsls	r3, r3, #2
 8017622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801762a:	b29b      	uxth	r3, r3
 801762c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801762e:	429a      	cmp	r2, r3
 8017630:	f0c0 8146 	bcc.w	80178c0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017638:	b29b      	uxth	r3, r3
 801763a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801763c:	1ad3      	subs	r3, r2, r3
 801763e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017640:	6878      	ldr	r0, [r7, #4]
 8017642:	f7f7 f8d5 	bl	800e7f0 <pbuf_clen>
 8017646:	4603      	mov	r3, r0
 8017648:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801764a:	4b9f      	ldr	r3, [pc, #636]	; (80178c8 <ip4_reass+0x2fc>)
 801764c:	881b      	ldrh	r3, [r3, #0]
 801764e:	461a      	mov	r2, r3
 8017650:	8c3b      	ldrh	r3, [r7, #32]
 8017652:	4413      	add	r3, r2
 8017654:	2b0a      	cmp	r3, #10
 8017656:	dd10      	ble.n	801767a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017658:	8c3b      	ldrh	r3, [r7, #32]
 801765a:	4619      	mov	r1, r3
 801765c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801765e:	f7ff fd81 	bl	8017164 <ip_reass_remove_oldest_datagram>
 8017662:	4603      	mov	r3, r0
 8017664:	2b00      	cmp	r3, #0
 8017666:	f000 812d 	beq.w	80178c4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801766a:	4b97      	ldr	r3, [pc, #604]	; (80178c8 <ip4_reass+0x2fc>)
 801766c:	881b      	ldrh	r3, [r3, #0]
 801766e:	461a      	mov	r2, r3
 8017670:	8c3b      	ldrh	r3, [r7, #32]
 8017672:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017674:	2b0a      	cmp	r3, #10
 8017676:	f300 8125 	bgt.w	80178c4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801767a:	4b94      	ldr	r3, [pc, #592]	; (80178cc <ip4_reass+0x300>)
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	633b      	str	r3, [r7, #48]	; 0x30
 8017680:	e015      	b.n	80176ae <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017684:	695a      	ldr	r2, [r3, #20]
 8017686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017688:	68db      	ldr	r3, [r3, #12]
 801768a:	429a      	cmp	r2, r3
 801768c:	d10c      	bne.n	80176a8 <ip4_reass+0xdc>
 801768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017690:	699a      	ldr	r2, [r3, #24]
 8017692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017694:	691b      	ldr	r3, [r3, #16]
 8017696:	429a      	cmp	r2, r3
 8017698:	d106      	bne.n	80176a8 <ip4_reass+0xdc>
 801769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801769c:	899a      	ldrh	r2, [r3, #12]
 801769e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176a0:	889b      	ldrh	r3, [r3, #4]
 80176a2:	b29b      	uxth	r3, r3
 80176a4:	429a      	cmp	r2, r3
 80176a6:	d006      	beq.n	80176b6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80176a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	633b      	str	r3, [r7, #48]	; 0x30
 80176ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d1e6      	bne.n	8017682 <ip4_reass+0xb6>
 80176b4:	e000      	b.n	80176b8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80176b6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80176b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d109      	bne.n	80176d2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80176be:	8c3b      	ldrh	r3, [r7, #32]
 80176c0:	4619      	mov	r1, r3
 80176c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176c4:	f7ff fdb0 	bl	8017228 <ip_reass_enqueue_new_datagram>
 80176c8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80176ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d11c      	bne.n	801770a <ip4_reass+0x13e>
      goto nullreturn;
 80176d0:	e109      	b.n	80178e6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80176d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176d4:	88db      	ldrh	r3, [r3, #6]
 80176d6:	b29b      	uxth	r3, r3
 80176d8:	4618      	mov	r0, r3
 80176da:	f7f5 fcb3 	bl	800d044 <lwip_htons>
 80176de:	4603      	mov	r3, r0
 80176e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d110      	bne.n	801770a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80176e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176ea:	89db      	ldrh	r3, [r3, #14]
 80176ec:	4618      	mov	r0, r3
 80176ee:	f7f5 fca9 	bl	800d044 <lwip_htons>
 80176f2:	4603      	mov	r3, r0
 80176f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d006      	beq.n	801770a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80176fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176fe:	3308      	adds	r3, #8
 8017700:	2214      	movs	r2, #20
 8017702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017704:	4618      	mov	r0, r3
 8017706:	f000 fe7d 	bl	8018404 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801770a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801770c:	88db      	ldrh	r3, [r3, #6]
 801770e:	b29b      	uxth	r3, r3
 8017710:	f003 0320 	and.w	r3, r3, #32
 8017714:	2b00      	cmp	r3, #0
 8017716:	bf0c      	ite	eq
 8017718:	2301      	moveq	r3, #1
 801771a:	2300      	movne	r3, #0
 801771c:	b2db      	uxtb	r3, r3
 801771e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017720:	69fb      	ldr	r3, [r7, #28]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d00e      	beq.n	8017744 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017726:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017728:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801772a:	4413      	add	r3, r2
 801772c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801772e:	8b7a      	ldrh	r2, [r7, #26]
 8017730:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017732:	429a      	cmp	r2, r3
 8017734:	f0c0 80a0 	bcc.w	8017878 <ip4_reass+0x2ac>
 8017738:	8b7b      	ldrh	r3, [r7, #26]
 801773a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801773e:	4293      	cmp	r3, r2
 8017740:	f200 809a 	bhi.w	8017878 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017744:	69fa      	ldr	r2, [r7, #28]
 8017746:	6879      	ldr	r1, [r7, #4]
 8017748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801774a:	f7ff fdd5 	bl	80172f8 <ip_reass_chain_frag_into_datagram_and_validate>
 801774e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017750:	697b      	ldr	r3, [r7, #20]
 8017752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017756:	f000 8091 	beq.w	801787c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801775a:	4b5b      	ldr	r3, [pc, #364]	; (80178c8 <ip4_reass+0x2fc>)
 801775c:	881a      	ldrh	r2, [r3, #0]
 801775e:	8c3b      	ldrh	r3, [r7, #32]
 8017760:	4413      	add	r3, r2
 8017762:	b29a      	uxth	r2, r3
 8017764:	4b58      	ldr	r3, [pc, #352]	; (80178c8 <ip4_reass+0x2fc>)
 8017766:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017768:	69fb      	ldr	r3, [r7, #28]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d00d      	beq.n	801778a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801776e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017772:	4413      	add	r3, r2
 8017774:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017778:	8a7a      	ldrh	r2, [r7, #18]
 801777a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801777e:	7f9b      	ldrb	r3, [r3, #30]
 8017780:	f043 0301 	orr.w	r3, r3, #1
 8017784:	b2da      	uxtb	r2, r3
 8017786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017788:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801778a:	697b      	ldr	r3, [r7, #20]
 801778c:	2b01      	cmp	r3, #1
 801778e:	d171      	bne.n	8017874 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017792:	8b9b      	ldrh	r3, [r3, #28]
 8017794:	3314      	adds	r3, #20
 8017796:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801779a:	685b      	ldr	r3, [r3, #4]
 801779c:	685b      	ldr	r3, [r3, #4]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80177a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177a4:	685b      	ldr	r3, [r3, #4]
 80177a6:	685b      	ldr	r3, [r3, #4]
 80177a8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80177aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ac:	3308      	adds	r3, #8
 80177ae:	2214      	movs	r2, #20
 80177b0:	4619      	mov	r1, r3
 80177b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80177b4:	f000 fe26 	bl	8018404 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80177b8:	8a3b      	ldrh	r3, [r7, #16]
 80177ba:	4618      	mov	r0, r3
 80177bc:	f7f5 fc42 	bl	800d044 <lwip_htons>
 80177c0:	4603      	mov	r3, r0
 80177c2:	461a      	mov	r2, r3
 80177c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177c6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80177c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177ca:	2200      	movs	r2, #0
 80177cc:	719a      	strb	r2, [r3, #6]
 80177ce:	2200      	movs	r2, #0
 80177d0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80177d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177d4:	2200      	movs	r2, #0
 80177d6:	729a      	strb	r2, [r3, #10]
 80177d8:	2200      	movs	r2, #0
 80177da:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80177dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177de:	685b      	ldr	r3, [r3, #4]
 80177e0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80177e2:	e00d      	b.n	8017800 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80177e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177e6:	685b      	ldr	r3, [r3, #4]
 80177e8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80177ea:	2114      	movs	r1, #20
 80177ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80177ee:	f7f6 feeb 	bl	800e5c8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80177f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80177f4:	6878      	ldr	r0, [r7, #4]
 80177f6:	f7f7 f83b 	bl	800e870 <pbuf_cat>
      r = iprh->next_pbuf;
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017802:	2b00      	cmp	r3, #0
 8017804:	d1ee      	bne.n	80177e4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017806:	4b31      	ldr	r3, [pc, #196]	; (80178cc <ip4_reass+0x300>)
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801780c:	429a      	cmp	r2, r3
 801780e:	d102      	bne.n	8017816 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017810:	2300      	movs	r3, #0
 8017812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017814:	e010      	b.n	8017838 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017816:	4b2d      	ldr	r3, [pc, #180]	; (80178cc <ip4_reass+0x300>)
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801781c:	e007      	b.n	801782e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017824:	429a      	cmp	r2, r3
 8017826:	d006      	beq.n	8017836 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801782e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017830:	2b00      	cmp	r3, #0
 8017832:	d1f4      	bne.n	801781e <ip4_reass+0x252>
 8017834:	e000      	b.n	8017838 <ip4_reass+0x26c>
          break;
 8017836:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017838:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801783a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801783c:	f7ff fd2e 	bl	801729c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017840:	6878      	ldr	r0, [r7, #4]
 8017842:	f7f6 ffd5 	bl	800e7f0 <pbuf_clen>
 8017846:	4603      	mov	r3, r0
 8017848:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801784a:	4b1f      	ldr	r3, [pc, #124]	; (80178c8 <ip4_reass+0x2fc>)
 801784c:	881b      	ldrh	r3, [r3, #0]
 801784e:	8c3a      	ldrh	r2, [r7, #32]
 8017850:	429a      	cmp	r2, r3
 8017852:	d906      	bls.n	8017862 <ip4_reass+0x296>
 8017854:	4b1e      	ldr	r3, [pc, #120]	; (80178d0 <ip4_reass+0x304>)
 8017856:	f240 229b 	movw	r2, #667	; 0x29b
 801785a:	491e      	ldr	r1, [pc, #120]	; (80178d4 <ip4_reass+0x308>)
 801785c:	481e      	ldr	r0, [pc, #120]	; (80178d8 <ip4_reass+0x30c>)
 801785e:	f000 feab 	bl	80185b8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017862:	4b19      	ldr	r3, [pc, #100]	; (80178c8 <ip4_reass+0x2fc>)
 8017864:	881a      	ldrh	r2, [r3, #0]
 8017866:	8c3b      	ldrh	r3, [r7, #32]
 8017868:	1ad3      	subs	r3, r2, r3
 801786a:	b29a      	uxth	r2, r3
 801786c:	4b16      	ldr	r3, [pc, #88]	; (80178c8 <ip4_reass+0x2fc>)
 801786e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	e03c      	b.n	80178ee <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017874:	2300      	movs	r3, #0
 8017876:	e03a      	b.n	80178ee <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017878:	bf00      	nop
 801787a:	e000      	b.n	801787e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801787c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017880:	2b00      	cmp	r3, #0
 8017882:	d106      	bne.n	8017892 <ip4_reass+0x2c6>
 8017884:	4b12      	ldr	r3, [pc, #72]	; (80178d0 <ip4_reass+0x304>)
 8017886:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801788a:	4914      	ldr	r1, [pc, #80]	; (80178dc <ip4_reass+0x310>)
 801788c:	4812      	ldr	r0, [pc, #72]	; (80178d8 <ip4_reass+0x30c>)
 801788e:	f000 fe93 	bl	80185b8 <iprintf>
  if (ipr->p == NULL) {
 8017892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017894:	685b      	ldr	r3, [r3, #4]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d124      	bne.n	80178e4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801789a:	4b0c      	ldr	r3, [pc, #48]	; (80178cc <ip4_reass+0x300>)
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178a0:	429a      	cmp	r2, r3
 80178a2:	d006      	beq.n	80178b2 <ip4_reass+0x2e6>
 80178a4:	4b0a      	ldr	r3, [pc, #40]	; (80178d0 <ip4_reass+0x304>)
 80178a6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80178aa:	490d      	ldr	r1, [pc, #52]	; (80178e0 <ip4_reass+0x314>)
 80178ac:	480a      	ldr	r0, [pc, #40]	; (80178d8 <ip4_reass+0x30c>)
 80178ae:	f000 fe83 	bl	80185b8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80178b2:	2100      	movs	r1, #0
 80178b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80178b6:	f7ff fcf1 	bl	801729c <ip_reass_dequeue_datagram>
 80178ba:	e014      	b.n	80178e6 <ip4_reass+0x31a>
    goto nullreturn;
 80178bc:	bf00      	nop
 80178be:	e012      	b.n	80178e6 <ip4_reass+0x31a>
    goto nullreturn;
 80178c0:	bf00      	nop
 80178c2:	e010      	b.n	80178e6 <ip4_reass+0x31a>
      goto nullreturn;
 80178c4:	bf00      	nop
 80178c6:	e00e      	b.n	80178e6 <ip4_reass+0x31a>
 80178c8:	20006acc 	.word	0x20006acc
 80178cc:	20006ac8 	.word	0x20006ac8
 80178d0:	0801ca38 	.word	0x0801ca38
 80178d4:	0801cba8 	.word	0x0801cba8
 80178d8:	0801ca80 	.word	0x0801ca80
 80178dc:	0801cbc4 	.word	0x0801cbc4
 80178e0:	0801cbd0 	.word	0x0801cbd0
  }

nullreturn:
 80178e4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80178e6:	6878      	ldr	r0, [r7, #4]
 80178e8:	f7f6 fef4 	bl	800e6d4 <pbuf_free>
  return NULL;
 80178ec:	2300      	movs	r3, #0
}
 80178ee:	4618      	mov	r0, r3
 80178f0:	3738      	adds	r7, #56	; 0x38
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}
 80178f6:	bf00      	nop

080178f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80178fc:	2005      	movs	r0, #5
 80178fe:	f7f6 f857 	bl	800d9b0 <memp_malloc>
 8017902:	4603      	mov	r3, r0
}
 8017904:	4618      	mov	r0, r3
 8017906:	bd80      	pop	{r7, pc}

08017908 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b082      	sub	sp, #8
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d106      	bne.n	8017924 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017916:	4b07      	ldr	r3, [pc, #28]	; (8017934 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017918:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801791c:	4906      	ldr	r1, [pc, #24]	; (8017938 <ip_frag_free_pbuf_custom_ref+0x30>)
 801791e:	4807      	ldr	r0, [pc, #28]	; (801793c <ip_frag_free_pbuf_custom_ref+0x34>)
 8017920:	f000 fe4a 	bl	80185b8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017924:	6879      	ldr	r1, [r7, #4]
 8017926:	2005      	movs	r0, #5
 8017928:	f7f6 f894 	bl	800da54 <memp_free>
}
 801792c:	bf00      	nop
 801792e:	3708      	adds	r7, #8
 8017930:	46bd      	mov	sp, r7
 8017932:	bd80      	pop	{r7, pc}
 8017934:	0801ca38 	.word	0x0801ca38
 8017938:	0801cbf0 	.word	0x0801cbf0
 801793c:	0801ca80 	.word	0x0801ca80

08017940 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b084      	sub	sp, #16
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d106      	bne.n	8017960 <ipfrag_free_pbuf_custom+0x20>
 8017952:	4b11      	ldr	r3, [pc, #68]	; (8017998 <ipfrag_free_pbuf_custom+0x58>)
 8017954:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017958:	4910      	ldr	r1, [pc, #64]	; (801799c <ipfrag_free_pbuf_custom+0x5c>)
 801795a:	4811      	ldr	r0, [pc, #68]	; (80179a0 <ipfrag_free_pbuf_custom+0x60>)
 801795c:	f000 fe2c 	bl	80185b8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017960:	68fa      	ldr	r2, [r7, #12]
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	429a      	cmp	r2, r3
 8017966:	d006      	beq.n	8017976 <ipfrag_free_pbuf_custom+0x36>
 8017968:	4b0b      	ldr	r3, [pc, #44]	; (8017998 <ipfrag_free_pbuf_custom+0x58>)
 801796a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801796e:	490d      	ldr	r1, [pc, #52]	; (80179a4 <ipfrag_free_pbuf_custom+0x64>)
 8017970:	480b      	ldr	r0, [pc, #44]	; (80179a0 <ipfrag_free_pbuf_custom+0x60>)
 8017972:	f000 fe21 	bl	80185b8 <iprintf>
  if (pcr->original != NULL) {
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	695b      	ldr	r3, [r3, #20]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d004      	beq.n	8017988 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	695b      	ldr	r3, [r3, #20]
 8017982:	4618      	mov	r0, r3
 8017984:	f7f6 fea6 	bl	800e6d4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017988:	68f8      	ldr	r0, [r7, #12]
 801798a:	f7ff ffbd 	bl	8017908 <ip_frag_free_pbuf_custom_ref>
}
 801798e:	bf00      	nop
 8017990:	3710      	adds	r7, #16
 8017992:	46bd      	mov	sp, r7
 8017994:	bd80      	pop	{r7, pc}
 8017996:	bf00      	nop
 8017998:	0801ca38 	.word	0x0801ca38
 801799c:	0801cbfc 	.word	0x0801cbfc
 80179a0:	0801ca80 	.word	0x0801ca80
 80179a4:	0801cc08 	.word	0x0801cc08

080179a8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b094      	sub	sp, #80	; 0x50
 80179ac:	af02      	add	r7, sp, #8
 80179ae:	60f8      	str	r0, [r7, #12]
 80179b0:	60b9      	str	r1, [r7, #8]
 80179b2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80179b4:	2300      	movs	r3, #0
 80179b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80179ba:	68bb      	ldr	r3, [r7, #8]
 80179bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80179be:	3b14      	subs	r3, #20
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	da00      	bge.n	80179c6 <ip4_frag+0x1e>
 80179c4:	3307      	adds	r3, #7
 80179c6:	10db      	asrs	r3, r3, #3
 80179c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80179ca:	2314      	movs	r3, #20
 80179cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	685b      	ldr	r3, [r3, #4]
 80179d2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80179d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80179d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179da:	781b      	ldrb	r3, [r3, #0]
 80179dc:	f003 030f 	and.w	r3, r3, #15
 80179e0:	b2db      	uxtb	r3, r3
 80179e2:	009b      	lsls	r3, r3, #2
 80179e4:	b2db      	uxtb	r3, r3
 80179e6:	2b14      	cmp	r3, #20
 80179e8:	d002      	beq.n	80179f0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80179ea:	f06f 0305 	mvn.w	r3, #5
 80179ee:	e110      	b.n	8017c12 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	895b      	ldrh	r3, [r3, #10]
 80179f4:	2b13      	cmp	r3, #19
 80179f6:	d809      	bhi.n	8017a0c <ip4_frag+0x64>
 80179f8:	4b88      	ldr	r3, [pc, #544]	; (8017c1c <ip4_frag+0x274>)
 80179fa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80179fe:	4988      	ldr	r1, [pc, #544]	; (8017c20 <ip4_frag+0x278>)
 8017a00:	4888      	ldr	r0, [pc, #544]	; (8017c24 <ip4_frag+0x27c>)
 8017a02:	f000 fdd9 	bl	80185b8 <iprintf>
 8017a06:	f06f 0305 	mvn.w	r3, #5
 8017a0a:	e102      	b.n	8017c12 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a0e:	88db      	ldrh	r3, [r3, #6]
 8017a10:	b29b      	uxth	r3, r3
 8017a12:	4618      	mov	r0, r3
 8017a14:	f7f5 fb16 	bl	800d044 <lwip_htons>
 8017a18:	4603      	mov	r3, r0
 8017a1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017a1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017a26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017a2c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	891b      	ldrh	r3, [r3, #8]
 8017a32:	3b14      	subs	r3, #20
 8017a34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017a38:	e0e1      	b.n	8017bfe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017a3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017a3c:	00db      	lsls	r3, r3, #3
 8017a3e:	b29b      	uxth	r3, r3
 8017a40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017a44:	4293      	cmp	r3, r2
 8017a46:	bf28      	it	cs
 8017a48:	4613      	movcs	r3, r2
 8017a4a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017a4c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017a50:	2114      	movs	r1, #20
 8017a52:	200e      	movs	r0, #14
 8017a54:	f7f6 fb5a 	bl	800e10c <pbuf_alloc>
 8017a58:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	f000 80d5 	beq.w	8017c0c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a64:	895b      	ldrh	r3, [r3, #10]
 8017a66:	2b13      	cmp	r3, #19
 8017a68:	d806      	bhi.n	8017a78 <ip4_frag+0xd0>
 8017a6a:	4b6c      	ldr	r3, [pc, #432]	; (8017c1c <ip4_frag+0x274>)
 8017a6c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017a70:	496d      	ldr	r1, [pc, #436]	; (8017c28 <ip4_frag+0x280>)
 8017a72:	486c      	ldr	r0, [pc, #432]	; (8017c24 <ip4_frag+0x27c>)
 8017a74:	f000 fda0 	bl	80185b8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a7a:	685b      	ldr	r3, [r3, #4]
 8017a7c:	2214      	movs	r2, #20
 8017a7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017a80:	4618      	mov	r0, r3
 8017a82:	f000 fcbf 	bl	8018404 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a88:	685b      	ldr	r3, [r3, #4]
 8017a8a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017a8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017a8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017a92:	e064      	b.n	8017b5e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	895a      	ldrh	r2, [r3, #10]
 8017a98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017a9a:	1ad3      	subs	r3, r2, r3
 8017a9c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	895b      	ldrh	r3, [r3, #10]
 8017aa2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017aa4:	429a      	cmp	r2, r3
 8017aa6:	d906      	bls.n	8017ab6 <ip4_frag+0x10e>
 8017aa8:	4b5c      	ldr	r3, [pc, #368]	; (8017c1c <ip4_frag+0x274>)
 8017aaa:	f240 322d 	movw	r2, #813	; 0x32d
 8017aae:	495f      	ldr	r1, [pc, #380]	; (8017c2c <ip4_frag+0x284>)
 8017ab0:	485c      	ldr	r0, [pc, #368]	; (8017c24 <ip4_frag+0x27c>)
 8017ab2:	f000 fd81 	bl	80185b8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017ab6:	8bfa      	ldrh	r2, [r7, #30]
 8017ab8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017abc:	4293      	cmp	r3, r2
 8017abe:	bf28      	it	cs
 8017ac0:	4613      	movcs	r3, r2
 8017ac2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017ac6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d105      	bne.n	8017ada <ip4_frag+0x132>
        poff = 0;
 8017ace:	2300      	movs	r3, #0
 8017ad0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	60fb      	str	r3, [r7, #12]
        continue;
 8017ad8:	e041      	b.n	8017b5e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017ada:	f7ff ff0d 	bl	80178f8 <ip_frag_alloc_pbuf_custom_ref>
 8017ade:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017ae0:	69bb      	ldr	r3, [r7, #24]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d103      	bne.n	8017aee <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ae8:	f7f6 fdf4 	bl	800e6d4 <pbuf_free>
        goto memerr;
 8017aec:	e08f      	b.n	8017c0e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017aee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017af4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017af6:	4413      	add	r3, r2
 8017af8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017afc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017b00:	9201      	str	r2, [sp, #4]
 8017b02:	9300      	str	r3, [sp, #0]
 8017b04:	4603      	mov	r3, r0
 8017b06:	2241      	movs	r2, #65	; 0x41
 8017b08:	2000      	movs	r0, #0
 8017b0a:	f7f6 fc29 	bl	800e360 <pbuf_alloced_custom>
 8017b0e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017b10:	697b      	ldr	r3, [r7, #20]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d106      	bne.n	8017b24 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017b16:	69b8      	ldr	r0, [r7, #24]
 8017b18:	f7ff fef6 	bl	8017908 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b1e:	f7f6 fdd9 	bl	800e6d4 <pbuf_free>
        goto memerr;
 8017b22:	e074      	b.n	8017c0e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017b24:	68f8      	ldr	r0, [r7, #12]
 8017b26:	f7f6 fe7b 	bl	800e820 <pbuf_ref>
      pcr->original = p;
 8017b2a:	69bb      	ldr	r3, [r7, #24]
 8017b2c:	68fa      	ldr	r2, [r7, #12]
 8017b2e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017b30:	69bb      	ldr	r3, [r7, #24]
 8017b32:	4a3f      	ldr	r2, [pc, #252]	; (8017c30 <ip4_frag+0x288>)
 8017b34:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017b36:	6979      	ldr	r1, [r7, #20]
 8017b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b3a:	f7f6 fe99 	bl	800e870 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017b3e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017b42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b46:	1ad3      	subs	r3, r2, r3
 8017b48:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017b4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d004      	beq.n	8017b5e <ip4_frag+0x1b6>
        poff = 0;
 8017b54:	2300      	movs	r3, #0
 8017b56:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017b5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d196      	bne.n	8017a94 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017b66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017b68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b6c:	4413      	add	r3, r2
 8017b6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017b70:	68bb      	ldr	r3, [r7, #8]
 8017b72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017b74:	f1a3 0213 	sub.w	r2, r3, #19
 8017b78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017b7c:	429a      	cmp	r2, r3
 8017b7e:	bfcc      	ite	gt
 8017b80:	2301      	movgt	r3, #1
 8017b82:	2300      	movle	r3, #0
 8017b84:	b2db      	uxtb	r3, r3
 8017b86:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017b88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017b90:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017b92:	6a3b      	ldr	r3, [r7, #32]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d002      	beq.n	8017b9e <ip4_frag+0x1f6>
 8017b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d003      	beq.n	8017ba6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017b9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017ba0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017ba4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017ba6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017ba8:	4618      	mov	r0, r3
 8017baa:	f7f5 fa4b 	bl	800d044 <lwip_htons>
 8017bae:	4603      	mov	r3, r0
 8017bb0:	461a      	mov	r2, r3
 8017bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bb4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017bb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017bb8:	3314      	adds	r3, #20
 8017bba:	b29b      	uxth	r3, r3
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	f7f5 fa41 	bl	800d044 <lwip_htons>
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	461a      	mov	r2, r3
 8017bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bc8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bcc:	2200      	movs	r2, #0
 8017bce:	729a      	strb	r2, [r3, #10]
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017bd4:	68bb      	ldr	r3, [r7, #8]
 8017bd6:	695b      	ldr	r3, [r3, #20]
 8017bd8:	687a      	ldr	r2, [r7, #4]
 8017bda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017bdc:	68b8      	ldr	r0, [r7, #8]
 8017bde:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017be2:	f7f6 fd77 	bl	800e6d4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017be6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017bea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017bec:	1ad3      	subs	r3, r2, r3
 8017bee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017bf2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017bf6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017bf8:	4413      	add	r3, r2
 8017bfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017bfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	f47f af19 	bne.w	8017a3a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017c08:	2300      	movs	r3, #0
 8017c0a:	e002      	b.n	8017c12 <ip4_frag+0x26a>
      goto memerr;
 8017c0c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017c12:	4618      	mov	r0, r3
 8017c14:	3748      	adds	r7, #72	; 0x48
 8017c16:	46bd      	mov	sp, r7
 8017c18:	bd80      	pop	{r7, pc}
 8017c1a:	bf00      	nop
 8017c1c:	0801ca38 	.word	0x0801ca38
 8017c20:	0801cc14 	.word	0x0801cc14
 8017c24:	0801ca80 	.word	0x0801ca80
 8017c28:	0801cc30 	.word	0x0801cc30
 8017c2c:	0801cc50 	.word	0x0801cc50
 8017c30:	08017941 	.word	0x08017941

08017c34 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b086      	sub	sp, #24
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
 8017c3c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017c3e:	230e      	movs	r3, #14
 8017c40:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	895b      	ldrh	r3, [r3, #10]
 8017c46:	2b0e      	cmp	r3, #14
 8017c48:	d96e      	bls.n	8017d28 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	7bdb      	ldrb	r3, [r3, #15]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d106      	bne.n	8017c60 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017c52:	683b      	ldr	r3, [r7, #0]
 8017c54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017c58:	3301      	adds	r3, #1
 8017c5a:	b2da      	uxtb	r2, r3
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	685b      	ldr	r3, [r3, #4]
 8017c64:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017c66:	693b      	ldr	r3, [r7, #16]
 8017c68:	7b1a      	ldrb	r2, [r3, #12]
 8017c6a:	7b5b      	ldrb	r3, [r3, #13]
 8017c6c:	021b      	lsls	r3, r3, #8
 8017c6e:	4313      	orrs	r3, r2
 8017c70:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017c72:	693b      	ldr	r3, [r7, #16]
 8017c74:	781b      	ldrb	r3, [r3, #0]
 8017c76:	f003 0301 	and.w	r3, r3, #1
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d023      	beq.n	8017cc6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017c7e:	693b      	ldr	r3, [r7, #16]
 8017c80:	781b      	ldrb	r3, [r3, #0]
 8017c82:	2b01      	cmp	r3, #1
 8017c84:	d10f      	bne.n	8017ca6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017c86:	693b      	ldr	r3, [r7, #16]
 8017c88:	785b      	ldrb	r3, [r3, #1]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d11b      	bne.n	8017cc6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017c8e:	693b      	ldr	r3, [r7, #16]
 8017c90:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017c92:	2b5e      	cmp	r3, #94	; 0x5e
 8017c94:	d117      	bne.n	8017cc6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	7b5b      	ldrb	r3, [r3, #13]
 8017c9a:	f043 0310 	orr.w	r3, r3, #16
 8017c9e:	b2da      	uxtb	r2, r3
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	735a      	strb	r2, [r3, #13]
 8017ca4:	e00f      	b.n	8017cc6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017ca6:	693b      	ldr	r3, [r7, #16]
 8017ca8:	2206      	movs	r2, #6
 8017caa:	4928      	ldr	r1, [pc, #160]	; (8017d4c <ethernet_input+0x118>)
 8017cac:	4618      	mov	r0, r3
 8017cae:	f000 fb9b 	bl	80183e8 <memcmp>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d106      	bne.n	8017cc6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	7b5b      	ldrb	r3, [r3, #13]
 8017cbc:	f043 0308 	orr.w	r3, r3, #8
 8017cc0:	b2da      	uxtb	r2, r3
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017cc6:	89fb      	ldrh	r3, [r7, #14]
 8017cc8:	2b08      	cmp	r3, #8
 8017cca:	d003      	beq.n	8017cd4 <ethernet_input+0xa0>
 8017ccc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017cd0:	d014      	beq.n	8017cfc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017cd2:	e032      	b.n	8017d3a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017cd4:	683b      	ldr	r3, [r7, #0]
 8017cd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017cda:	f003 0308 	and.w	r3, r3, #8
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d024      	beq.n	8017d2c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017ce2:	8afb      	ldrh	r3, [r7, #22]
 8017ce4:	4619      	mov	r1, r3
 8017ce6:	6878      	ldr	r0, [r7, #4]
 8017ce8:	f7f6 fc6e 	bl	800e5c8 <pbuf_remove_header>
 8017cec:	4603      	mov	r3, r0
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d11e      	bne.n	8017d30 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017cf2:	6839      	ldr	r1, [r7, #0]
 8017cf4:	6878      	ldr	r0, [r7, #4]
 8017cf6:	f7fe ff27 	bl	8016b48 <ip4_input>
      break;
 8017cfa:	e013      	b.n	8017d24 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017cfc:	683b      	ldr	r3, [r7, #0]
 8017cfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d02:	f003 0308 	and.w	r3, r3, #8
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d014      	beq.n	8017d34 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017d0a:	8afb      	ldrh	r3, [r7, #22]
 8017d0c:	4619      	mov	r1, r3
 8017d0e:	6878      	ldr	r0, [r7, #4]
 8017d10:	f7f6 fc5a 	bl	800e5c8 <pbuf_remove_header>
 8017d14:	4603      	mov	r3, r0
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d10e      	bne.n	8017d38 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017d1a:	6839      	ldr	r1, [r7, #0]
 8017d1c:	6878      	ldr	r0, [r7, #4]
 8017d1e:	f7fe f8c7 	bl	8015eb0 <etharp_input>
      break;
 8017d22:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017d24:	2300      	movs	r3, #0
 8017d26:	e00c      	b.n	8017d42 <ethernet_input+0x10e>
    goto free_and_return;
 8017d28:	bf00      	nop
 8017d2a:	e006      	b.n	8017d3a <ethernet_input+0x106>
        goto free_and_return;
 8017d2c:	bf00      	nop
 8017d2e:	e004      	b.n	8017d3a <ethernet_input+0x106>
        goto free_and_return;
 8017d30:	bf00      	nop
 8017d32:	e002      	b.n	8017d3a <ethernet_input+0x106>
        goto free_and_return;
 8017d34:	bf00      	nop
 8017d36:	e000      	b.n	8017d3a <ethernet_input+0x106>
        goto free_and_return;
 8017d38:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017d3a:	6878      	ldr	r0, [r7, #4]
 8017d3c:	f7f6 fcca 	bl	800e6d4 <pbuf_free>
  return ERR_OK;
 8017d40:	2300      	movs	r3, #0
}
 8017d42:	4618      	mov	r0, r3
 8017d44:	3718      	adds	r7, #24
 8017d46:	46bd      	mov	sp, r7
 8017d48:	bd80      	pop	{r7, pc}
 8017d4a:	bf00      	nop
 8017d4c:	0801ce2c 	.word	0x0801ce2c

08017d50 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017d50:	b580      	push	{r7, lr}
 8017d52:	b086      	sub	sp, #24
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	60f8      	str	r0, [r7, #12]
 8017d58:	60b9      	str	r1, [r7, #8]
 8017d5a:	607a      	str	r2, [r7, #4]
 8017d5c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017d5e:	8c3b      	ldrh	r3, [r7, #32]
 8017d60:	4618      	mov	r0, r3
 8017d62:	f7f5 f96f 	bl	800d044 <lwip_htons>
 8017d66:	4603      	mov	r3, r0
 8017d68:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017d6a:	210e      	movs	r1, #14
 8017d6c:	68b8      	ldr	r0, [r7, #8]
 8017d6e:	f7f6 fc1b 	bl	800e5a8 <pbuf_add_header>
 8017d72:	4603      	mov	r3, r0
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d125      	bne.n	8017dc4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	685b      	ldr	r3, [r3, #4]
 8017d7c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017d7e:	693b      	ldr	r3, [r7, #16]
 8017d80:	8afa      	ldrh	r2, [r7, #22]
 8017d82:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017d84:	693b      	ldr	r3, [r7, #16]
 8017d86:	2206      	movs	r2, #6
 8017d88:	6839      	ldr	r1, [r7, #0]
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f000 fb3a 	bl	8018404 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017d90:	693b      	ldr	r3, [r7, #16]
 8017d92:	3306      	adds	r3, #6
 8017d94:	2206      	movs	r2, #6
 8017d96:	6879      	ldr	r1, [r7, #4]
 8017d98:	4618      	mov	r0, r3
 8017d9a:	f000 fb33 	bl	8018404 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017da4:	2b06      	cmp	r3, #6
 8017da6:	d006      	beq.n	8017db6 <ethernet_output+0x66>
 8017da8:	4b0a      	ldr	r3, [pc, #40]	; (8017dd4 <ethernet_output+0x84>)
 8017daa:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017dae:	490a      	ldr	r1, [pc, #40]	; (8017dd8 <ethernet_output+0x88>)
 8017db0:	480a      	ldr	r0, [pc, #40]	; (8017ddc <ethernet_output+0x8c>)
 8017db2:	f000 fc01 	bl	80185b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	699b      	ldr	r3, [r3, #24]
 8017dba:	68b9      	ldr	r1, [r7, #8]
 8017dbc:	68f8      	ldr	r0, [r7, #12]
 8017dbe:	4798      	blx	r3
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	e002      	b.n	8017dca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017dc4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017dc6:	f06f 0301 	mvn.w	r3, #1
}
 8017dca:	4618      	mov	r0, r3
 8017dcc:	3718      	adds	r7, #24
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	bd80      	pop	{r7, pc}
 8017dd2:	bf00      	nop
 8017dd4:	0801cc60 	.word	0x0801cc60
 8017dd8:	0801cc98 	.word	0x0801cc98
 8017ddc:	0801cccc 	.word	0x0801cccc

08017de0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b086      	sub	sp, #24
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
 8017de8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017dea:	683b      	ldr	r3, [r7, #0]
 8017dec:	60bb      	str	r3, [r7, #8]
 8017dee:	2304      	movs	r3, #4
 8017df0:	60fb      	str	r3, [r7, #12]
 8017df2:	2300      	movs	r3, #0
 8017df4:	613b      	str	r3, [r7, #16]
 8017df6:	2300      	movs	r3, #0
 8017df8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017dfa:	f107 0308 	add.w	r3, r7, #8
 8017dfe:	2100      	movs	r1, #0
 8017e00:	4618      	mov	r0, r3
 8017e02:	f7f0 f98a 	bl	800811a <osMessageCreate>
 8017e06:	4602      	mov	r2, r0
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d102      	bne.n	8017e1a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017e14:	f04f 33ff 	mov.w	r3, #4294967295
 8017e18:	e000      	b.n	8017e1c <sys_mbox_new+0x3c>

  return ERR_OK;
 8017e1a:	2300      	movs	r3, #0
}
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	3718      	adds	r7, #24
 8017e20:	46bd      	mov	sp, r7
 8017e22:	bd80      	pop	{r7, pc}

08017e24 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b082      	sub	sp, #8
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	4618      	mov	r0, r3
 8017e32:	f7f0 fb84 	bl	800853e <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	f7f0 fb95 	bl	800856a <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017e40:	bf00      	nop
 8017e42:	3708      	adds	r7, #8
 8017e44:	46bd      	mov	sp, r7
 8017e46:	bd80      	pop	{r7, pc}

08017e48 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b084      	sub	sp, #16
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
 8017e50:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	6839      	ldr	r1, [r7, #0]
 8017e58:	2200      	movs	r2, #0
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	f7f0 f986 	bl	800816c <osMessagePut>
 8017e60:	4603      	mov	r3, r0
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d102      	bne.n	8017e6c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017e66:	2300      	movs	r3, #0
 8017e68:	73fb      	strb	r3, [r7, #15]
 8017e6a:	e001      	b.n	8017e70 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017e6c:	23ff      	movs	r3, #255	; 0xff
 8017e6e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017e74:	4618      	mov	r0, r3
 8017e76:	3710      	adds	r7, #16
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	bd80      	pop	{r7, pc}

08017e7c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b08c      	sub	sp, #48	; 0x30
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	61f8      	str	r0, [r7, #28]
 8017e84:	61b9      	str	r1, [r7, #24]
 8017e86:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017e88:	f7ef fe71 	bl	8007b6e <osKernelSysTick>
 8017e8c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017e8e:	697b      	ldr	r3, [r7, #20]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d017      	beq.n	8017ec4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017e94:	69fb      	ldr	r3, [r7, #28]
 8017e96:	6819      	ldr	r1, [r3, #0]
 8017e98:	f107 0320 	add.w	r3, r7, #32
 8017e9c:	697a      	ldr	r2, [r7, #20]
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f7f0 f9a4 	bl	80081ec <osMessageGet>

    if(event.status == osEventMessage)
 8017ea4:	6a3b      	ldr	r3, [r7, #32]
 8017ea6:	2b10      	cmp	r3, #16
 8017ea8:	d109      	bne.n	8017ebe <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eac:	461a      	mov	r2, r3
 8017eae:	69bb      	ldr	r3, [r7, #24]
 8017eb0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017eb2:	f7ef fe5c 	bl	8007b6e <osKernelSysTick>
 8017eb6:	4602      	mov	r2, r0
 8017eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eba:	1ad3      	subs	r3, r2, r3
 8017ebc:	e019      	b.n	8017ef2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8017ec2:	e016      	b.n	8017ef2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017ec4:	69fb      	ldr	r3, [r7, #28]
 8017ec6:	6819      	ldr	r1, [r3, #0]
 8017ec8:	463b      	mov	r3, r7
 8017eca:	f04f 32ff 	mov.w	r2, #4294967295
 8017ece:	4618      	mov	r0, r3
 8017ed0:	f7f0 f98c 	bl	80081ec <osMessageGet>
 8017ed4:	f107 0320 	add.w	r3, r7, #32
 8017ed8:	463a      	mov	r2, r7
 8017eda:	ca07      	ldmia	r2, {r0, r1, r2}
 8017edc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee2:	461a      	mov	r2, r3
 8017ee4:	69bb      	ldr	r3, [r7, #24]
 8017ee6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017ee8:	f7ef fe41 	bl	8007b6e <osKernelSysTick>
 8017eec:	4602      	mov	r2, r0
 8017eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	3730      	adds	r7, #48	; 0x30
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	bd80      	pop	{r7, pc}

08017efa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017efa:	b580      	push	{r7, lr}
 8017efc:	b086      	sub	sp, #24
 8017efe:	af00      	add	r7, sp, #0
 8017f00:	6078      	str	r0, [r7, #4]
 8017f02:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	6819      	ldr	r1, [r3, #0]
 8017f08:	f107 030c 	add.w	r3, r7, #12
 8017f0c:	2200      	movs	r2, #0
 8017f0e:	4618      	mov	r0, r3
 8017f10:	f7f0 f96c 	bl	80081ec <osMessageGet>

  if(event.status == osEventMessage)
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	2b10      	cmp	r3, #16
 8017f18:	d105      	bne.n	8017f26 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017f1a:	693b      	ldr	r3, [r7, #16]
 8017f1c:	461a      	mov	r2, r3
 8017f1e:	683b      	ldr	r3, [r7, #0]
 8017f20:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017f22:	2300      	movs	r3, #0
 8017f24:	e001      	b.n	8017f2a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017f26:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	3718      	adds	r7, #24
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	bd80      	pop	{r7, pc}

08017f32 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017f32:	b480      	push	{r7}
 8017f34:	b083      	sub	sp, #12
 8017f36:	af00      	add	r7, sp, #0
 8017f38:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d101      	bne.n	8017f46 <sys_mbox_valid+0x14>
    return 0;
 8017f42:	2300      	movs	r3, #0
 8017f44:	e000      	b.n	8017f48 <sys_mbox_valid+0x16>
  else
    return 1;
 8017f46:	2301      	movs	r3, #1
}
 8017f48:	4618      	mov	r0, r3
 8017f4a:	370c      	adds	r7, #12
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f52:	4770      	bx	lr

08017f54 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017f54:	b480      	push	{r7}
 8017f56:	b083      	sub	sp, #12
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	2200      	movs	r2, #0
 8017f60:	601a      	str	r2, [r3, #0]
}
 8017f62:	bf00      	nop
 8017f64:	370c      	adds	r7, #12
 8017f66:	46bd      	mov	sp, r7
 8017f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f6c:	4770      	bx	lr

08017f6e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017f6e:	b580      	push	{r7, lr}
 8017f70:	b084      	sub	sp, #16
 8017f72:	af00      	add	r7, sp, #0
 8017f74:	6078      	str	r0, [r7, #4]
 8017f76:	460b      	mov	r3, r1
 8017f78:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	60bb      	str	r3, [r7, #8]
 8017f7e:	2300      	movs	r3, #0
 8017f80:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8017f82:	f107 0308 	add.w	r3, r7, #8
 8017f86:	2101      	movs	r1, #1
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7ef fefd 	bl	8007d88 <osSemaphoreCreate>
 8017f8e:	4602      	mov	r2, r0
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d102      	bne.n	8017fa2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8017fa0:	e009      	b.n	8017fb6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017fa2:	78fb      	ldrb	r3, [r7, #3]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d105      	bne.n	8017fb4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	2100      	movs	r1, #0
 8017fae:	4618      	mov	r0, r3
 8017fb0:	f7ef ff1c 	bl	8007dec <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017fb4:	2300      	movs	r3, #0
}
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	3710      	adds	r7, #16
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bd80      	pop	{r7, pc}

08017fbe <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017fbe:	b580      	push	{r7, lr}
 8017fc0:	b084      	sub	sp, #16
 8017fc2:	af00      	add	r7, sp, #0
 8017fc4:	6078      	str	r0, [r7, #4]
 8017fc6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017fc8:	f7ef fdd1 	bl	8007b6e <osKernelSysTick>
 8017fcc:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017fce:	683b      	ldr	r3, [r7, #0]
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d011      	beq.n	8017ff8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	6839      	ldr	r1, [r7, #0]
 8017fda:	4618      	mov	r0, r3
 8017fdc:	f7ef ff06 	bl	8007dec <osSemaphoreWait>
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d105      	bne.n	8017ff2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017fe6:	f7ef fdc2 	bl	8007b6e <osKernelSysTick>
 8017fea:	4602      	mov	r2, r0
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	1ad3      	subs	r3, r2, r3
 8017ff0:	e012      	b.n	8018018 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8017ff6:	e00f      	b.n	8018018 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017ff8:	bf00      	nop
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	f04f 31ff 	mov.w	r1, #4294967295
 8018002:	4618      	mov	r0, r3
 8018004:	f7ef fef2 	bl	8007dec <osSemaphoreWait>
 8018008:	4603      	mov	r3, r0
 801800a:	2b00      	cmp	r3, #0
 801800c:	d1f5      	bne.n	8017ffa <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801800e:	f7ef fdae 	bl	8007b6e <osKernelSysTick>
 8018012:	4602      	mov	r2, r0
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018018:	4618      	mov	r0, r3
 801801a:	3710      	adds	r7, #16
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}

08018020 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b082      	sub	sp, #8
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	4618      	mov	r0, r3
 801802e:	f7ef ff2b 	bl	8007e88 <osSemaphoreRelease>
}
 8018032:	bf00      	nop
 8018034:	3708      	adds	r7, #8
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}

0801803a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801803a:	b580      	push	{r7, lr}
 801803c:	b082      	sub	sp, #8
 801803e:	af00      	add	r7, sp, #0
 8018040:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	4618      	mov	r0, r3
 8018048:	f7ef ff54 	bl	8007ef4 <osSemaphoreDelete>
}
 801804c:	bf00      	nop
 801804e:	3708      	adds	r7, #8
 8018050:	46bd      	mov	sp, r7
 8018052:	bd80      	pop	{r7, pc}

08018054 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018054:	b480      	push	{r7}
 8018056:	b083      	sub	sp, #12
 8018058:	af00      	add	r7, sp, #0
 801805a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d101      	bne.n	8018068 <sys_sem_valid+0x14>
    return 0;
 8018064:	2300      	movs	r3, #0
 8018066:	e000      	b.n	801806a <sys_sem_valid+0x16>
  else
    return 1;
 8018068:	2301      	movs	r3, #1
}
 801806a:	4618      	mov	r0, r3
 801806c:	370c      	adds	r7, #12
 801806e:	46bd      	mov	sp, r7
 8018070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018074:	4770      	bx	lr

08018076 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018076:	b480      	push	{r7}
 8018078:	b083      	sub	sp, #12
 801807a:	af00      	add	r7, sp, #0
 801807c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	2200      	movs	r2, #0
 8018082:	601a      	str	r2, [r3, #0]
}
 8018084:	bf00      	nop
 8018086:	370c      	adds	r7, #12
 8018088:	46bd      	mov	sp, r7
 801808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801808e:	4770      	bx	lr

08018090 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018090:	b580      	push	{r7, lr}
 8018092:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018094:	4803      	ldr	r0, [pc, #12]	; (80180a4 <sys_init+0x14>)
 8018096:	f7ef fdda 	bl	8007c4e <osMutexCreate>
 801809a:	4603      	mov	r3, r0
 801809c:	4a02      	ldr	r2, [pc, #8]	; (80180a8 <sys_init+0x18>)
 801809e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80180a0:	bf00      	nop
 80180a2:	bd80      	pop	{r7, pc}
 80180a4:	0801ce3c 	.word	0x0801ce3c
 80180a8:	2000da34 	.word	0x2000da34

080180ac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b084      	sub	sp, #16
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80180b4:	2300      	movs	r3, #0
 80180b6:	60bb      	str	r3, [r7, #8]
 80180b8:	2300      	movs	r3, #0
 80180ba:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80180bc:	f107 0308 	add.w	r3, r7, #8
 80180c0:	4618      	mov	r0, r3
 80180c2:	f7ef fdc4 	bl	8007c4e <osMutexCreate>
 80180c6:	4602      	mov	r2, r0
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d102      	bne.n	80180da <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80180d4:	f04f 33ff 	mov.w	r3, #4294967295
 80180d8:	e000      	b.n	80180dc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80180da:	2300      	movs	r3, #0
}
 80180dc:	4618      	mov	r0, r3
 80180de:	3710      	adds	r7, #16
 80180e0:	46bd      	mov	sp, r7
 80180e2:	bd80      	pop	{r7, pc}

080180e4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b082      	sub	sp, #8
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	f04f 31ff 	mov.w	r1, #4294967295
 80180f4:	4618      	mov	r0, r3
 80180f6:	f7ef fdc3 	bl	8007c80 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80180fa:	bf00      	nop
 80180fc:	3708      	adds	r7, #8
 80180fe:	46bd      	mov	sp, r7
 8018100:	bd80      	pop	{r7, pc}

08018102 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018102:	b580      	push	{r7, lr}
 8018104:	b082      	sub	sp, #8
 8018106:	af00      	add	r7, sp, #0
 8018108:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	4618      	mov	r0, r3
 8018110:	f7ef fe04 	bl	8007d1c <osMutexRelease>
}
 8018114:	bf00      	nop
 8018116:	3708      	adds	r7, #8
 8018118:	46bd      	mov	sp, r7
 801811a:	bd80      	pop	{r7, pc}

0801811c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b08c      	sub	sp, #48	; 0x30
 8018120:	af00      	add	r7, sp, #0
 8018122:	60f8      	str	r0, [r7, #12]
 8018124:	60b9      	str	r1, [r7, #8]
 8018126:	607a      	str	r2, [r7, #4]
 8018128:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801812a:	f107 0314 	add.w	r3, r7, #20
 801812e:	2200      	movs	r2, #0
 8018130:	601a      	str	r2, [r3, #0]
 8018132:	605a      	str	r2, [r3, #4]
 8018134:	609a      	str	r2, [r3, #8]
 8018136:	60da      	str	r2, [r3, #12]
 8018138:	611a      	str	r2, [r3, #16]
 801813a:	615a      	str	r2, [r3, #20]
 801813c:	619a      	str	r2, [r3, #24]
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	617b      	str	r3, [r7, #20]
 8018142:	68bb      	ldr	r3, [r7, #8]
 8018144:	61bb      	str	r3, [r7, #24]
 8018146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018148:	b21b      	sxth	r3, r3
 801814a:	83bb      	strh	r3, [r7, #28]
 801814c:	683b      	ldr	r3, [r7, #0]
 801814e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018150:	f107 0314 	add.w	r3, r7, #20
 8018154:	6879      	ldr	r1, [r7, #4]
 8018156:	4618      	mov	r0, r3
 8018158:	f7ef fd19 	bl	8007b8e <osThreadCreate>
 801815c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801815e:	4618      	mov	r0, r3
 8018160:	3730      	adds	r7, #48	; 0x30
 8018162:	46bd      	mov	sp, r7
 8018164:	bd80      	pop	{r7, pc}
	...

08018168 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018168:	b580      	push	{r7, lr}
 801816a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801816c:	4b04      	ldr	r3, [pc, #16]	; (8018180 <sys_arch_protect+0x18>)
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	f04f 31ff 	mov.w	r1, #4294967295
 8018174:	4618      	mov	r0, r3
 8018176:	f7ef fd83 	bl	8007c80 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801817a:	2301      	movs	r3, #1
}
 801817c:	4618      	mov	r0, r3
 801817e:	bd80      	pop	{r7, pc}
 8018180:	2000da34 	.word	0x2000da34

08018184 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018184:	b580      	push	{r7, lr}
 8018186:	b082      	sub	sp, #8
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801818c:	4b04      	ldr	r3, [pc, #16]	; (80181a0 <sys_arch_unprotect+0x1c>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	4618      	mov	r0, r3
 8018192:	f7ef fdc3 	bl	8007d1c <osMutexRelease>
}
 8018196:	bf00      	nop
 8018198:	3708      	adds	r7, #8
 801819a:	46bd      	mov	sp, r7
 801819c:	bd80      	pop	{r7, pc}
 801819e:	bf00      	nop
 80181a0:	2000da34 	.word	0x2000da34

080181a4 <std>:
 80181a4:	2300      	movs	r3, #0
 80181a6:	b510      	push	{r4, lr}
 80181a8:	4604      	mov	r4, r0
 80181aa:	e9c0 3300 	strd	r3, r3, [r0]
 80181ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80181b2:	6083      	str	r3, [r0, #8]
 80181b4:	8181      	strh	r1, [r0, #12]
 80181b6:	6643      	str	r3, [r0, #100]	; 0x64
 80181b8:	81c2      	strh	r2, [r0, #14]
 80181ba:	6183      	str	r3, [r0, #24]
 80181bc:	4619      	mov	r1, r3
 80181be:	2208      	movs	r2, #8
 80181c0:	305c      	adds	r0, #92	; 0x5c
 80181c2:	f000 f947 	bl	8018454 <memset>
 80181c6:	4b05      	ldr	r3, [pc, #20]	; (80181dc <std+0x38>)
 80181c8:	6263      	str	r3, [r4, #36]	; 0x24
 80181ca:	4b05      	ldr	r3, [pc, #20]	; (80181e0 <std+0x3c>)
 80181cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80181ce:	4b05      	ldr	r3, [pc, #20]	; (80181e4 <std+0x40>)
 80181d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80181d2:	4b05      	ldr	r3, [pc, #20]	; (80181e8 <std+0x44>)
 80181d4:	6224      	str	r4, [r4, #32]
 80181d6:	6323      	str	r3, [r4, #48]	; 0x30
 80181d8:	bd10      	pop	{r4, pc}
 80181da:	bf00      	nop
 80181dc:	0801879d 	.word	0x0801879d
 80181e0:	080187bf 	.word	0x080187bf
 80181e4:	080187f7 	.word	0x080187f7
 80181e8:	0801881b 	.word	0x0801881b

080181ec <_cleanup_r>:
 80181ec:	4901      	ldr	r1, [pc, #4]	; (80181f4 <_cleanup_r+0x8>)
 80181ee:	f000 b8af 	b.w	8018350 <_fwalk_reent>
 80181f2:	bf00      	nop
 80181f4:	080189b1 	.word	0x080189b1

080181f8 <__sfmoreglue>:
 80181f8:	b570      	push	{r4, r5, r6, lr}
 80181fa:	1e4a      	subs	r2, r1, #1
 80181fc:	2568      	movs	r5, #104	; 0x68
 80181fe:	4355      	muls	r5, r2
 8018200:	460e      	mov	r6, r1
 8018202:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018206:	f000 f97d 	bl	8018504 <_malloc_r>
 801820a:	4604      	mov	r4, r0
 801820c:	b140      	cbz	r0, 8018220 <__sfmoreglue+0x28>
 801820e:	2100      	movs	r1, #0
 8018210:	e9c0 1600 	strd	r1, r6, [r0]
 8018214:	300c      	adds	r0, #12
 8018216:	60a0      	str	r0, [r4, #8]
 8018218:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801821c:	f000 f91a 	bl	8018454 <memset>
 8018220:	4620      	mov	r0, r4
 8018222:	bd70      	pop	{r4, r5, r6, pc}

08018224 <__sfp_lock_acquire>:
 8018224:	4801      	ldr	r0, [pc, #4]	; (801822c <__sfp_lock_acquire+0x8>)
 8018226:	f7ea bd59 	b.w	8002cdc <__retarget_lock_acquire_recursive>
 801822a:	bf00      	nop
 801822c:	200004bc 	.word	0x200004bc

08018230 <__sfp_lock_release>:
 8018230:	4801      	ldr	r0, [pc, #4]	; (8018238 <__sfp_lock_release+0x8>)
 8018232:	f7ea bd67 	b.w	8002d04 <__retarget_lock_release_recursive>
 8018236:	bf00      	nop
 8018238:	200004bc 	.word	0x200004bc

0801823c <__sinit_lock_acquire>:
 801823c:	4801      	ldr	r0, [pc, #4]	; (8018244 <__sinit_lock_acquire+0x8>)
 801823e:	f7ea bd4d 	b.w	8002cdc <__retarget_lock_acquire_recursive>
 8018242:	bf00      	nop
 8018244:	200004b0 	.word	0x200004b0

08018248 <__sinit_lock_release>:
 8018248:	4801      	ldr	r0, [pc, #4]	; (8018250 <__sinit_lock_release+0x8>)
 801824a:	f7ea bd5b 	b.w	8002d04 <__retarget_lock_release_recursive>
 801824e:	bf00      	nop
 8018250:	200004b0 	.word	0x200004b0

08018254 <__sinit>:
 8018254:	b510      	push	{r4, lr}
 8018256:	4604      	mov	r4, r0
 8018258:	f7ff fff0 	bl	801823c <__sinit_lock_acquire>
 801825c:	69a3      	ldr	r3, [r4, #24]
 801825e:	b11b      	cbz	r3, 8018268 <__sinit+0x14>
 8018260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018264:	f7ff bff0 	b.w	8018248 <__sinit_lock_release>
 8018268:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801826c:	6523      	str	r3, [r4, #80]	; 0x50
 801826e:	4b13      	ldr	r3, [pc, #76]	; (80182bc <__sinit+0x68>)
 8018270:	4a13      	ldr	r2, [pc, #76]	; (80182c0 <__sinit+0x6c>)
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	62a2      	str	r2, [r4, #40]	; 0x28
 8018276:	42a3      	cmp	r3, r4
 8018278:	bf04      	itt	eq
 801827a:	2301      	moveq	r3, #1
 801827c:	61a3      	streq	r3, [r4, #24]
 801827e:	4620      	mov	r0, r4
 8018280:	f000 f820 	bl	80182c4 <__sfp>
 8018284:	6060      	str	r0, [r4, #4]
 8018286:	4620      	mov	r0, r4
 8018288:	f000 f81c 	bl	80182c4 <__sfp>
 801828c:	60a0      	str	r0, [r4, #8]
 801828e:	4620      	mov	r0, r4
 8018290:	f000 f818 	bl	80182c4 <__sfp>
 8018294:	2200      	movs	r2, #0
 8018296:	60e0      	str	r0, [r4, #12]
 8018298:	2104      	movs	r1, #4
 801829a:	6860      	ldr	r0, [r4, #4]
 801829c:	f7ff ff82 	bl	80181a4 <std>
 80182a0:	68a0      	ldr	r0, [r4, #8]
 80182a2:	2201      	movs	r2, #1
 80182a4:	2109      	movs	r1, #9
 80182a6:	f7ff ff7d 	bl	80181a4 <std>
 80182aa:	68e0      	ldr	r0, [r4, #12]
 80182ac:	2202      	movs	r2, #2
 80182ae:	2112      	movs	r1, #18
 80182b0:	f7ff ff78 	bl	80181a4 <std>
 80182b4:	2301      	movs	r3, #1
 80182b6:	61a3      	str	r3, [r4, #24]
 80182b8:	e7d2      	b.n	8018260 <__sinit+0xc>
 80182ba:	bf00      	nop
 80182bc:	0801cea4 	.word	0x0801cea4
 80182c0:	080181ed 	.word	0x080181ed

080182c4 <__sfp>:
 80182c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182c6:	4607      	mov	r7, r0
 80182c8:	f7ff ffac 	bl	8018224 <__sfp_lock_acquire>
 80182cc:	4b1e      	ldr	r3, [pc, #120]	; (8018348 <__sfp+0x84>)
 80182ce:	681e      	ldr	r6, [r3, #0]
 80182d0:	69b3      	ldr	r3, [r6, #24]
 80182d2:	b913      	cbnz	r3, 80182da <__sfp+0x16>
 80182d4:	4630      	mov	r0, r6
 80182d6:	f7ff ffbd 	bl	8018254 <__sinit>
 80182da:	3648      	adds	r6, #72	; 0x48
 80182dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80182e0:	3b01      	subs	r3, #1
 80182e2:	d503      	bpl.n	80182ec <__sfp+0x28>
 80182e4:	6833      	ldr	r3, [r6, #0]
 80182e6:	b30b      	cbz	r3, 801832c <__sfp+0x68>
 80182e8:	6836      	ldr	r6, [r6, #0]
 80182ea:	e7f7      	b.n	80182dc <__sfp+0x18>
 80182ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80182f0:	b9d5      	cbnz	r5, 8018328 <__sfp+0x64>
 80182f2:	4b16      	ldr	r3, [pc, #88]	; (801834c <__sfp+0x88>)
 80182f4:	60e3      	str	r3, [r4, #12]
 80182f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80182fa:	6665      	str	r5, [r4, #100]	; 0x64
 80182fc:	f7ea fcc8 	bl	8002c90 <__retarget_lock_init_recursive>
 8018300:	f7ff ff96 	bl	8018230 <__sfp_lock_release>
 8018304:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018308:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801830c:	6025      	str	r5, [r4, #0]
 801830e:	61a5      	str	r5, [r4, #24]
 8018310:	2208      	movs	r2, #8
 8018312:	4629      	mov	r1, r5
 8018314:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018318:	f000 f89c 	bl	8018454 <memset>
 801831c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018320:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018324:	4620      	mov	r0, r4
 8018326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018328:	3468      	adds	r4, #104	; 0x68
 801832a:	e7d9      	b.n	80182e0 <__sfp+0x1c>
 801832c:	2104      	movs	r1, #4
 801832e:	4638      	mov	r0, r7
 8018330:	f7ff ff62 	bl	80181f8 <__sfmoreglue>
 8018334:	4604      	mov	r4, r0
 8018336:	6030      	str	r0, [r6, #0]
 8018338:	2800      	cmp	r0, #0
 801833a:	d1d5      	bne.n	80182e8 <__sfp+0x24>
 801833c:	f7ff ff78 	bl	8018230 <__sfp_lock_release>
 8018340:	230c      	movs	r3, #12
 8018342:	603b      	str	r3, [r7, #0]
 8018344:	e7ee      	b.n	8018324 <__sfp+0x60>
 8018346:	bf00      	nop
 8018348:	0801cea4 	.word	0x0801cea4
 801834c:	ffff0001 	.word	0xffff0001

08018350 <_fwalk_reent>:
 8018350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018354:	4606      	mov	r6, r0
 8018356:	4688      	mov	r8, r1
 8018358:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801835c:	2700      	movs	r7, #0
 801835e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018362:	f1b9 0901 	subs.w	r9, r9, #1
 8018366:	d505      	bpl.n	8018374 <_fwalk_reent+0x24>
 8018368:	6824      	ldr	r4, [r4, #0]
 801836a:	2c00      	cmp	r4, #0
 801836c:	d1f7      	bne.n	801835e <_fwalk_reent+0xe>
 801836e:	4638      	mov	r0, r7
 8018370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018374:	89ab      	ldrh	r3, [r5, #12]
 8018376:	2b01      	cmp	r3, #1
 8018378:	d907      	bls.n	801838a <_fwalk_reent+0x3a>
 801837a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801837e:	3301      	adds	r3, #1
 8018380:	d003      	beq.n	801838a <_fwalk_reent+0x3a>
 8018382:	4629      	mov	r1, r5
 8018384:	4630      	mov	r0, r6
 8018386:	47c0      	blx	r8
 8018388:	4307      	orrs	r7, r0
 801838a:	3568      	adds	r5, #104	; 0x68
 801838c:	e7e9      	b.n	8018362 <_fwalk_reent+0x12>
	...

08018390 <__libc_init_array>:
 8018390:	b570      	push	{r4, r5, r6, lr}
 8018392:	4d0d      	ldr	r5, [pc, #52]	; (80183c8 <__libc_init_array+0x38>)
 8018394:	4c0d      	ldr	r4, [pc, #52]	; (80183cc <__libc_init_array+0x3c>)
 8018396:	1b64      	subs	r4, r4, r5
 8018398:	10a4      	asrs	r4, r4, #2
 801839a:	2600      	movs	r6, #0
 801839c:	42a6      	cmp	r6, r4
 801839e:	d109      	bne.n	80183b4 <__libc_init_array+0x24>
 80183a0:	4d0b      	ldr	r5, [pc, #44]	; (80183d0 <__libc_init_array+0x40>)
 80183a2:	4c0c      	ldr	r4, [pc, #48]	; (80183d4 <__libc_init_array+0x44>)
 80183a4:	f001 f98c 	bl	80196c0 <_init>
 80183a8:	1b64      	subs	r4, r4, r5
 80183aa:	10a4      	asrs	r4, r4, #2
 80183ac:	2600      	movs	r6, #0
 80183ae:	42a6      	cmp	r6, r4
 80183b0:	d105      	bne.n	80183be <__libc_init_array+0x2e>
 80183b2:	bd70      	pop	{r4, r5, r6, pc}
 80183b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80183b8:	4798      	blx	r3
 80183ba:	3601      	adds	r6, #1
 80183bc:	e7ee      	b.n	801839c <__libc_init_array+0xc>
 80183be:	f855 3b04 	ldr.w	r3, [r5], #4
 80183c2:	4798      	blx	r3
 80183c4:	3601      	adds	r6, #1
 80183c6:	e7f2      	b.n	80183ae <__libc_init_array+0x1e>
 80183c8:	0801cf98 	.word	0x0801cf98
 80183cc:	0801cf98 	.word	0x0801cf98
 80183d0:	0801cf98 	.word	0x0801cf98
 80183d4:	0801cf9c 	.word	0x0801cf9c

080183d8 <malloc>:
 80183d8:	4b02      	ldr	r3, [pc, #8]	; (80183e4 <malloc+0xc>)
 80183da:	4601      	mov	r1, r0
 80183dc:	6818      	ldr	r0, [r3, #0]
 80183de:	f000 b891 	b.w	8018504 <_malloc_r>
 80183e2:	bf00      	nop
 80183e4:	200000b0 	.word	0x200000b0

080183e8 <memcmp>:
 80183e8:	b530      	push	{r4, r5, lr}
 80183ea:	3901      	subs	r1, #1
 80183ec:	2400      	movs	r4, #0
 80183ee:	42a2      	cmp	r2, r4
 80183f0:	d101      	bne.n	80183f6 <memcmp+0xe>
 80183f2:	2000      	movs	r0, #0
 80183f4:	e005      	b.n	8018402 <memcmp+0x1a>
 80183f6:	5d03      	ldrb	r3, [r0, r4]
 80183f8:	3401      	adds	r4, #1
 80183fa:	5d0d      	ldrb	r5, [r1, r4]
 80183fc:	42ab      	cmp	r3, r5
 80183fe:	d0f6      	beq.n	80183ee <memcmp+0x6>
 8018400:	1b58      	subs	r0, r3, r5
 8018402:	bd30      	pop	{r4, r5, pc}

08018404 <memcpy>:
 8018404:	440a      	add	r2, r1
 8018406:	4291      	cmp	r1, r2
 8018408:	f100 33ff 	add.w	r3, r0, #4294967295
 801840c:	d100      	bne.n	8018410 <memcpy+0xc>
 801840e:	4770      	bx	lr
 8018410:	b510      	push	{r4, lr}
 8018412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018416:	f803 4f01 	strb.w	r4, [r3, #1]!
 801841a:	4291      	cmp	r1, r2
 801841c:	d1f9      	bne.n	8018412 <memcpy+0xe>
 801841e:	bd10      	pop	{r4, pc}

08018420 <memmove>:
 8018420:	4288      	cmp	r0, r1
 8018422:	b510      	push	{r4, lr}
 8018424:	eb01 0402 	add.w	r4, r1, r2
 8018428:	d902      	bls.n	8018430 <memmove+0x10>
 801842a:	4284      	cmp	r4, r0
 801842c:	4623      	mov	r3, r4
 801842e:	d807      	bhi.n	8018440 <memmove+0x20>
 8018430:	1e43      	subs	r3, r0, #1
 8018432:	42a1      	cmp	r1, r4
 8018434:	d008      	beq.n	8018448 <memmove+0x28>
 8018436:	f811 2b01 	ldrb.w	r2, [r1], #1
 801843a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801843e:	e7f8      	b.n	8018432 <memmove+0x12>
 8018440:	4402      	add	r2, r0
 8018442:	4601      	mov	r1, r0
 8018444:	428a      	cmp	r2, r1
 8018446:	d100      	bne.n	801844a <memmove+0x2a>
 8018448:	bd10      	pop	{r4, pc}
 801844a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801844e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018452:	e7f7      	b.n	8018444 <memmove+0x24>

08018454 <memset>:
 8018454:	4402      	add	r2, r0
 8018456:	4603      	mov	r3, r0
 8018458:	4293      	cmp	r3, r2
 801845a:	d100      	bne.n	801845e <memset+0xa>
 801845c:	4770      	bx	lr
 801845e:	f803 1b01 	strb.w	r1, [r3], #1
 8018462:	e7f9      	b.n	8018458 <memset+0x4>

08018464 <_free_r>:
 8018464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018466:	2900      	cmp	r1, #0
 8018468:	d048      	beq.n	80184fc <_free_r+0x98>
 801846a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801846e:	9001      	str	r0, [sp, #4]
 8018470:	2b00      	cmp	r3, #0
 8018472:	f1a1 0404 	sub.w	r4, r1, #4
 8018476:	bfb8      	it	lt
 8018478:	18e4      	addlt	r4, r4, r3
 801847a:	f000 faf9 	bl	8018a70 <__malloc_lock>
 801847e:	4a20      	ldr	r2, [pc, #128]	; (8018500 <_free_r+0x9c>)
 8018480:	9801      	ldr	r0, [sp, #4]
 8018482:	6813      	ldr	r3, [r2, #0]
 8018484:	4615      	mov	r5, r2
 8018486:	b933      	cbnz	r3, 8018496 <_free_r+0x32>
 8018488:	6063      	str	r3, [r4, #4]
 801848a:	6014      	str	r4, [r2, #0]
 801848c:	b003      	add	sp, #12
 801848e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018492:	f000 baf3 	b.w	8018a7c <__malloc_unlock>
 8018496:	42a3      	cmp	r3, r4
 8018498:	d90b      	bls.n	80184b2 <_free_r+0x4e>
 801849a:	6821      	ldr	r1, [r4, #0]
 801849c:	1862      	adds	r2, r4, r1
 801849e:	4293      	cmp	r3, r2
 80184a0:	bf04      	itt	eq
 80184a2:	681a      	ldreq	r2, [r3, #0]
 80184a4:	685b      	ldreq	r3, [r3, #4]
 80184a6:	6063      	str	r3, [r4, #4]
 80184a8:	bf04      	itt	eq
 80184aa:	1852      	addeq	r2, r2, r1
 80184ac:	6022      	streq	r2, [r4, #0]
 80184ae:	602c      	str	r4, [r5, #0]
 80184b0:	e7ec      	b.n	801848c <_free_r+0x28>
 80184b2:	461a      	mov	r2, r3
 80184b4:	685b      	ldr	r3, [r3, #4]
 80184b6:	b10b      	cbz	r3, 80184bc <_free_r+0x58>
 80184b8:	42a3      	cmp	r3, r4
 80184ba:	d9fa      	bls.n	80184b2 <_free_r+0x4e>
 80184bc:	6811      	ldr	r1, [r2, #0]
 80184be:	1855      	adds	r5, r2, r1
 80184c0:	42a5      	cmp	r5, r4
 80184c2:	d10b      	bne.n	80184dc <_free_r+0x78>
 80184c4:	6824      	ldr	r4, [r4, #0]
 80184c6:	4421      	add	r1, r4
 80184c8:	1854      	adds	r4, r2, r1
 80184ca:	42a3      	cmp	r3, r4
 80184cc:	6011      	str	r1, [r2, #0]
 80184ce:	d1dd      	bne.n	801848c <_free_r+0x28>
 80184d0:	681c      	ldr	r4, [r3, #0]
 80184d2:	685b      	ldr	r3, [r3, #4]
 80184d4:	6053      	str	r3, [r2, #4]
 80184d6:	4421      	add	r1, r4
 80184d8:	6011      	str	r1, [r2, #0]
 80184da:	e7d7      	b.n	801848c <_free_r+0x28>
 80184dc:	d902      	bls.n	80184e4 <_free_r+0x80>
 80184de:	230c      	movs	r3, #12
 80184e0:	6003      	str	r3, [r0, #0]
 80184e2:	e7d3      	b.n	801848c <_free_r+0x28>
 80184e4:	6825      	ldr	r5, [r4, #0]
 80184e6:	1961      	adds	r1, r4, r5
 80184e8:	428b      	cmp	r3, r1
 80184ea:	bf04      	itt	eq
 80184ec:	6819      	ldreq	r1, [r3, #0]
 80184ee:	685b      	ldreq	r3, [r3, #4]
 80184f0:	6063      	str	r3, [r4, #4]
 80184f2:	bf04      	itt	eq
 80184f4:	1949      	addeq	r1, r1, r5
 80184f6:	6021      	streq	r1, [r4, #0]
 80184f8:	6054      	str	r4, [r2, #4]
 80184fa:	e7c7      	b.n	801848c <_free_r+0x28>
 80184fc:	b003      	add	sp, #12
 80184fe:	bd30      	pop	{r4, r5, pc}
 8018500:	20006ad0 	.word	0x20006ad0

08018504 <_malloc_r>:
 8018504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018506:	1ccd      	adds	r5, r1, #3
 8018508:	f025 0503 	bic.w	r5, r5, #3
 801850c:	3508      	adds	r5, #8
 801850e:	2d0c      	cmp	r5, #12
 8018510:	bf38      	it	cc
 8018512:	250c      	movcc	r5, #12
 8018514:	2d00      	cmp	r5, #0
 8018516:	4606      	mov	r6, r0
 8018518:	db01      	blt.n	801851e <_malloc_r+0x1a>
 801851a:	42a9      	cmp	r1, r5
 801851c:	d903      	bls.n	8018526 <_malloc_r+0x22>
 801851e:	230c      	movs	r3, #12
 8018520:	6033      	str	r3, [r6, #0]
 8018522:	2000      	movs	r0, #0
 8018524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018526:	f000 faa3 	bl	8018a70 <__malloc_lock>
 801852a:	4921      	ldr	r1, [pc, #132]	; (80185b0 <_malloc_r+0xac>)
 801852c:	680a      	ldr	r2, [r1, #0]
 801852e:	4614      	mov	r4, r2
 8018530:	b99c      	cbnz	r4, 801855a <_malloc_r+0x56>
 8018532:	4f20      	ldr	r7, [pc, #128]	; (80185b4 <_malloc_r+0xb0>)
 8018534:	683b      	ldr	r3, [r7, #0]
 8018536:	b923      	cbnz	r3, 8018542 <_malloc_r+0x3e>
 8018538:	4621      	mov	r1, r4
 801853a:	4630      	mov	r0, r6
 801853c:	f000 f8fe 	bl	801873c <_sbrk_r>
 8018540:	6038      	str	r0, [r7, #0]
 8018542:	4629      	mov	r1, r5
 8018544:	4630      	mov	r0, r6
 8018546:	f000 f8f9 	bl	801873c <_sbrk_r>
 801854a:	1c43      	adds	r3, r0, #1
 801854c:	d123      	bne.n	8018596 <_malloc_r+0x92>
 801854e:	230c      	movs	r3, #12
 8018550:	6033      	str	r3, [r6, #0]
 8018552:	4630      	mov	r0, r6
 8018554:	f000 fa92 	bl	8018a7c <__malloc_unlock>
 8018558:	e7e3      	b.n	8018522 <_malloc_r+0x1e>
 801855a:	6823      	ldr	r3, [r4, #0]
 801855c:	1b5b      	subs	r3, r3, r5
 801855e:	d417      	bmi.n	8018590 <_malloc_r+0x8c>
 8018560:	2b0b      	cmp	r3, #11
 8018562:	d903      	bls.n	801856c <_malloc_r+0x68>
 8018564:	6023      	str	r3, [r4, #0]
 8018566:	441c      	add	r4, r3
 8018568:	6025      	str	r5, [r4, #0]
 801856a:	e004      	b.n	8018576 <_malloc_r+0x72>
 801856c:	6863      	ldr	r3, [r4, #4]
 801856e:	42a2      	cmp	r2, r4
 8018570:	bf0c      	ite	eq
 8018572:	600b      	streq	r3, [r1, #0]
 8018574:	6053      	strne	r3, [r2, #4]
 8018576:	4630      	mov	r0, r6
 8018578:	f000 fa80 	bl	8018a7c <__malloc_unlock>
 801857c:	f104 000b 	add.w	r0, r4, #11
 8018580:	1d23      	adds	r3, r4, #4
 8018582:	f020 0007 	bic.w	r0, r0, #7
 8018586:	1ac2      	subs	r2, r0, r3
 8018588:	d0cc      	beq.n	8018524 <_malloc_r+0x20>
 801858a:	1a1b      	subs	r3, r3, r0
 801858c:	50a3      	str	r3, [r4, r2]
 801858e:	e7c9      	b.n	8018524 <_malloc_r+0x20>
 8018590:	4622      	mov	r2, r4
 8018592:	6864      	ldr	r4, [r4, #4]
 8018594:	e7cc      	b.n	8018530 <_malloc_r+0x2c>
 8018596:	1cc4      	adds	r4, r0, #3
 8018598:	f024 0403 	bic.w	r4, r4, #3
 801859c:	42a0      	cmp	r0, r4
 801859e:	d0e3      	beq.n	8018568 <_malloc_r+0x64>
 80185a0:	1a21      	subs	r1, r4, r0
 80185a2:	4630      	mov	r0, r6
 80185a4:	f000 f8ca 	bl	801873c <_sbrk_r>
 80185a8:	3001      	adds	r0, #1
 80185aa:	d1dd      	bne.n	8018568 <_malloc_r+0x64>
 80185ac:	e7cf      	b.n	801854e <_malloc_r+0x4a>
 80185ae:	bf00      	nop
 80185b0:	20006ad0 	.word	0x20006ad0
 80185b4:	20006ad4 	.word	0x20006ad4

080185b8 <iprintf>:
 80185b8:	b40f      	push	{r0, r1, r2, r3}
 80185ba:	4b0a      	ldr	r3, [pc, #40]	; (80185e4 <iprintf+0x2c>)
 80185bc:	b513      	push	{r0, r1, r4, lr}
 80185be:	681c      	ldr	r4, [r3, #0]
 80185c0:	b124      	cbz	r4, 80185cc <iprintf+0x14>
 80185c2:	69a3      	ldr	r3, [r4, #24]
 80185c4:	b913      	cbnz	r3, 80185cc <iprintf+0x14>
 80185c6:	4620      	mov	r0, r4
 80185c8:	f7ff fe44 	bl	8018254 <__sinit>
 80185cc:	ab05      	add	r3, sp, #20
 80185ce:	9a04      	ldr	r2, [sp, #16]
 80185d0:	68a1      	ldr	r1, [r4, #8]
 80185d2:	9301      	str	r3, [sp, #4]
 80185d4:	4620      	mov	r0, r4
 80185d6:	f000 fbdd 	bl	8018d94 <_vfiprintf_r>
 80185da:	b002      	add	sp, #8
 80185dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185e0:	b004      	add	sp, #16
 80185e2:	4770      	bx	lr
 80185e4:	200000b0 	.word	0x200000b0

080185e8 <rand>:
 80185e8:	4b17      	ldr	r3, [pc, #92]	; (8018648 <rand+0x60>)
 80185ea:	b510      	push	{r4, lr}
 80185ec:	681c      	ldr	r4, [r3, #0]
 80185ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80185f0:	b9b3      	cbnz	r3, 8018620 <rand+0x38>
 80185f2:	2018      	movs	r0, #24
 80185f4:	f7ff fef0 	bl	80183d8 <malloc>
 80185f8:	63a0      	str	r0, [r4, #56]	; 0x38
 80185fa:	b928      	cbnz	r0, 8018608 <rand+0x20>
 80185fc:	4602      	mov	r2, r0
 80185fe:	4b13      	ldr	r3, [pc, #76]	; (801864c <rand+0x64>)
 8018600:	4813      	ldr	r0, [pc, #76]	; (8018650 <rand+0x68>)
 8018602:	214e      	movs	r1, #78	; 0x4e
 8018604:	f000 f920 	bl	8018848 <__assert_func>
 8018608:	4a12      	ldr	r2, [pc, #72]	; (8018654 <rand+0x6c>)
 801860a:	4b13      	ldr	r3, [pc, #76]	; (8018658 <rand+0x70>)
 801860c:	e9c0 2300 	strd	r2, r3, [r0]
 8018610:	4b12      	ldr	r3, [pc, #72]	; (801865c <rand+0x74>)
 8018612:	6083      	str	r3, [r0, #8]
 8018614:	230b      	movs	r3, #11
 8018616:	8183      	strh	r3, [r0, #12]
 8018618:	2201      	movs	r2, #1
 801861a:	2300      	movs	r3, #0
 801861c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018620:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018622:	480f      	ldr	r0, [pc, #60]	; (8018660 <rand+0x78>)
 8018624:	690a      	ldr	r2, [r1, #16]
 8018626:	694b      	ldr	r3, [r1, #20]
 8018628:	4c0e      	ldr	r4, [pc, #56]	; (8018664 <rand+0x7c>)
 801862a:	4350      	muls	r0, r2
 801862c:	fb04 0003 	mla	r0, r4, r3, r0
 8018630:	fba2 3404 	umull	r3, r4, r2, r4
 8018634:	1c5a      	adds	r2, r3, #1
 8018636:	4404      	add	r4, r0
 8018638:	f144 0000 	adc.w	r0, r4, #0
 801863c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018640:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018644:	bd10      	pop	{r4, pc}
 8018646:	bf00      	nop
 8018648:	200000b0 	.word	0x200000b0
 801864c:	0801cea8 	.word	0x0801cea8
 8018650:	0801cebf 	.word	0x0801cebf
 8018654:	abcd330e 	.word	0xabcd330e
 8018658:	e66d1234 	.word	0xe66d1234
 801865c:	0005deec 	.word	0x0005deec
 8018660:	5851f42d 	.word	0x5851f42d
 8018664:	4c957f2d 	.word	0x4c957f2d

08018668 <cleanup_glue>:
 8018668:	b538      	push	{r3, r4, r5, lr}
 801866a:	460c      	mov	r4, r1
 801866c:	6809      	ldr	r1, [r1, #0]
 801866e:	4605      	mov	r5, r0
 8018670:	b109      	cbz	r1, 8018676 <cleanup_glue+0xe>
 8018672:	f7ff fff9 	bl	8018668 <cleanup_glue>
 8018676:	4621      	mov	r1, r4
 8018678:	4628      	mov	r0, r5
 801867a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801867e:	f7ff bef1 	b.w	8018464 <_free_r>
	...

08018684 <_reclaim_reent>:
 8018684:	4b2c      	ldr	r3, [pc, #176]	; (8018738 <_reclaim_reent+0xb4>)
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	4283      	cmp	r3, r0
 801868a:	b570      	push	{r4, r5, r6, lr}
 801868c:	4604      	mov	r4, r0
 801868e:	d051      	beq.n	8018734 <_reclaim_reent+0xb0>
 8018690:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018692:	b143      	cbz	r3, 80186a6 <_reclaim_reent+0x22>
 8018694:	68db      	ldr	r3, [r3, #12]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d14a      	bne.n	8018730 <_reclaim_reent+0xac>
 801869a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801869c:	6819      	ldr	r1, [r3, #0]
 801869e:	b111      	cbz	r1, 80186a6 <_reclaim_reent+0x22>
 80186a0:	4620      	mov	r0, r4
 80186a2:	f7ff fedf 	bl	8018464 <_free_r>
 80186a6:	6961      	ldr	r1, [r4, #20]
 80186a8:	b111      	cbz	r1, 80186b0 <_reclaim_reent+0x2c>
 80186aa:	4620      	mov	r0, r4
 80186ac:	f7ff feda 	bl	8018464 <_free_r>
 80186b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80186b2:	b111      	cbz	r1, 80186ba <_reclaim_reent+0x36>
 80186b4:	4620      	mov	r0, r4
 80186b6:	f7ff fed5 	bl	8018464 <_free_r>
 80186ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80186bc:	b111      	cbz	r1, 80186c4 <_reclaim_reent+0x40>
 80186be:	4620      	mov	r0, r4
 80186c0:	f7ff fed0 	bl	8018464 <_free_r>
 80186c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80186c6:	b111      	cbz	r1, 80186ce <_reclaim_reent+0x4a>
 80186c8:	4620      	mov	r0, r4
 80186ca:	f7ff fecb 	bl	8018464 <_free_r>
 80186ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80186d0:	b111      	cbz	r1, 80186d8 <_reclaim_reent+0x54>
 80186d2:	4620      	mov	r0, r4
 80186d4:	f7ff fec6 	bl	8018464 <_free_r>
 80186d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80186da:	b111      	cbz	r1, 80186e2 <_reclaim_reent+0x5e>
 80186dc:	4620      	mov	r0, r4
 80186de:	f7ff fec1 	bl	8018464 <_free_r>
 80186e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80186e4:	b111      	cbz	r1, 80186ec <_reclaim_reent+0x68>
 80186e6:	4620      	mov	r0, r4
 80186e8:	f7ff febc 	bl	8018464 <_free_r>
 80186ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80186ee:	b111      	cbz	r1, 80186f6 <_reclaim_reent+0x72>
 80186f0:	4620      	mov	r0, r4
 80186f2:	f7ff feb7 	bl	8018464 <_free_r>
 80186f6:	69a3      	ldr	r3, [r4, #24]
 80186f8:	b1e3      	cbz	r3, 8018734 <_reclaim_reent+0xb0>
 80186fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80186fc:	4620      	mov	r0, r4
 80186fe:	4798      	blx	r3
 8018700:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018702:	b1b9      	cbz	r1, 8018734 <_reclaim_reent+0xb0>
 8018704:	4620      	mov	r0, r4
 8018706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801870a:	f7ff bfad 	b.w	8018668 <cleanup_glue>
 801870e:	5949      	ldr	r1, [r1, r5]
 8018710:	b941      	cbnz	r1, 8018724 <_reclaim_reent+0xa0>
 8018712:	3504      	adds	r5, #4
 8018714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018716:	2d80      	cmp	r5, #128	; 0x80
 8018718:	68d9      	ldr	r1, [r3, #12]
 801871a:	d1f8      	bne.n	801870e <_reclaim_reent+0x8a>
 801871c:	4620      	mov	r0, r4
 801871e:	f7ff fea1 	bl	8018464 <_free_r>
 8018722:	e7ba      	b.n	801869a <_reclaim_reent+0x16>
 8018724:	680e      	ldr	r6, [r1, #0]
 8018726:	4620      	mov	r0, r4
 8018728:	f7ff fe9c 	bl	8018464 <_free_r>
 801872c:	4631      	mov	r1, r6
 801872e:	e7ef      	b.n	8018710 <_reclaim_reent+0x8c>
 8018730:	2500      	movs	r5, #0
 8018732:	e7ef      	b.n	8018714 <_reclaim_reent+0x90>
 8018734:	bd70      	pop	{r4, r5, r6, pc}
 8018736:	bf00      	nop
 8018738:	200000b0 	.word	0x200000b0

0801873c <_sbrk_r>:
 801873c:	b538      	push	{r3, r4, r5, lr}
 801873e:	4d06      	ldr	r5, [pc, #24]	; (8018758 <_sbrk_r+0x1c>)
 8018740:	2300      	movs	r3, #0
 8018742:	4604      	mov	r4, r0
 8018744:	4608      	mov	r0, r1
 8018746:	602b      	str	r3, [r5, #0]
 8018748:	f7ea f87a 	bl	8002840 <_sbrk>
 801874c:	1c43      	adds	r3, r0, #1
 801874e:	d102      	bne.n	8018756 <_sbrk_r+0x1a>
 8018750:	682b      	ldr	r3, [r5, #0]
 8018752:	b103      	cbz	r3, 8018756 <_sbrk_r+0x1a>
 8018754:	6023      	str	r3, [r4, #0]
 8018756:	bd38      	pop	{r3, r4, r5, pc}
 8018758:	2000da30 	.word	0x2000da30

0801875c <siprintf>:
 801875c:	b40e      	push	{r1, r2, r3}
 801875e:	b500      	push	{lr}
 8018760:	b09c      	sub	sp, #112	; 0x70
 8018762:	ab1d      	add	r3, sp, #116	; 0x74
 8018764:	9002      	str	r0, [sp, #8]
 8018766:	9006      	str	r0, [sp, #24]
 8018768:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801876c:	4809      	ldr	r0, [pc, #36]	; (8018794 <siprintf+0x38>)
 801876e:	9107      	str	r1, [sp, #28]
 8018770:	9104      	str	r1, [sp, #16]
 8018772:	4909      	ldr	r1, [pc, #36]	; (8018798 <siprintf+0x3c>)
 8018774:	f853 2b04 	ldr.w	r2, [r3], #4
 8018778:	9105      	str	r1, [sp, #20]
 801877a:	6800      	ldr	r0, [r0, #0]
 801877c:	9301      	str	r3, [sp, #4]
 801877e:	a902      	add	r1, sp, #8
 8018780:	f000 f9de 	bl	8018b40 <_svfiprintf_r>
 8018784:	9b02      	ldr	r3, [sp, #8]
 8018786:	2200      	movs	r2, #0
 8018788:	701a      	strb	r2, [r3, #0]
 801878a:	b01c      	add	sp, #112	; 0x70
 801878c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018790:	b003      	add	sp, #12
 8018792:	4770      	bx	lr
 8018794:	200000b0 	.word	0x200000b0
 8018798:	ffff0208 	.word	0xffff0208

0801879c <__sread>:
 801879c:	b510      	push	{r4, lr}
 801879e:	460c      	mov	r4, r1
 80187a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187a4:	f000 fdba 	bl	801931c <_read_r>
 80187a8:	2800      	cmp	r0, #0
 80187aa:	bfab      	itete	ge
 80187ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80187ae:	89a3      	ldrhlt	r3, [r4, #12]
 80187b0:	181b      	addge	r3, r3, r0
 80187b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80187b6:	bfac      	ite	ge
 80187b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80187ba:	81a3      	strhlt	r3, [r4, #12]
 80187bc:	bd10      	pop	{r4, pc}

080187be <__swrite>:
 80187be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187c2:	461f      	mov	r7, r3
 80187c4:	898b      	ldrh	r3, [r1, #12]
 80187c6:	05db      	lsls	r3, r3, #23
 80187c8:	4605      	mov	r5, r0
 80187ca:	460c      	mov	r4, r1
 80187cc:	4616      	mov	r6, r2
 80187ce:	d505      	bpl.n	80187dc <__swrite+0x1e>
 80187d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187d4:	2302      	movs	r3, #2
 80187d6:	2200      	movs	r2, #0
 80187d8:	f000 f938 	bl	8018a4c <_lseek_r>
 80187dc:	89a3      	ldrh	r3, [r4, #12]
 80187de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80187e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80187e6:	81a3      	strh	r3, [r4, #12]
 80187e8:	4632      	mov	r2, r6
 80187ea:	463b      	mov	r3, r7
 80187ec:	4628      	mov	r0, r5
 80187ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80187f2:	f000 b817 	b.w	8018824 <_write_r>

080187f6 <__sseek>:
 80187f6:	b510      	push	{r4, lr}
 80187f8:	460c      	mov	r4, r1
 80187fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187fe:	f000 f925 	bl	8018a4c <_lseek_r>
 8018802:	1c43      	adds	r3, r0, #1
 8018804:	89a3      	ldrh	r3, [r4, #12]
 8018806:	bf15      	itete	ne
 8018808:	6560      	strne	r0, [r4, #84]	; 0x54
 801880a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801880e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018812:	81a3      	strheq	r3, [r4, #12]
 8018814:	bf18      	it	ne
 8018816:	81a3      	strhne	r3, [r4, #12]
 8018818:	bd10      	pop	{r4, pc}

0801881a <__sclose>:
 801881a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801881e:	f000 b831 	b.w	8018884 <_close_r>
	...

08018824 <_write_r>:
 8018824:	b538      	push	{r3, r4, r5, lr}
 8018826:	4d07      	ldr	r5, [pc, #28]	; (8018844 <_write_r+0x20>)
 8018828:	4604      	mov	r4, r0
 801882a:	4608      	mov	r0, r1
 801882c:	4611      	mov	r1, r2
 801882e:	2200      	movs	r2, #0
 8018830:	602a      	str	r2, [r5, #0]
 8018832:	461a      	mov	r2, r3
 8018834:	f7e9 ffb3 	bl	800279e <_write>
 8018838:	1c43      	adds	r3, r0, #1
 801883a:	d102      	bne.n	8018842 <_write_r+0x1e>
 801883c:	682b      	ldr	r3, [r5, #0]
 801883e:	b103      	cbz	r3, 8018842 <_write_r+0x1e>
 8018840:	6023      	str	r3, [r4, #0]
 8018842:	bd38      	pop	{r3, r4, r5, pc}
 8018844:	2000da30 	.word	0x2000da30

08018848 <__assert_func>:
 8018848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801884a:	4614      	mov	r4, r2
 801884c:	461a      	mov	r2, r3
 801884e:	4b09      	ldr	r3, [pc, #36]	; (8018874 <__assert_func+0x2c>)
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	4605      	mov	r5, r0
 8018854:	68d8      	ldr	r0, [r3, #12]
 8018856:	b14c      	cbz	r4, 801886c <__assert_func+0x24>
 8018858:	4b07      	ldr	r3, [pc, #28]	; (8018878 <__assert_func+0x30>)
 801885a:	9100      	str	r1, [sp, #0]
 801885c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018860:	4906      	ldr	r1, [pc, #24]	; (801887c <__assert_func+0x34>)
 8018862:	462b      	mov	r3, r5
 8018864:	f000 f8e0 	bl	8018a28 <fiprintf>
 8018868:	f000 fe2a 	bl	80194c0 <abort>
 801886c:	4b04      	ldr	r3, [pc, #16]	; (8018880 <__assert_func+0x38>)
 801886e:	461c      	mov	r4, r3
 8018870:	e7f3      	b.n	801885a <__assert_func+0x12>
 8018872:	bf00      	nop
 8018874:	200000b0 	.word	0x200000b0
 8018878:	0801cf1e 	.word	0x0801cf1e
 801887c:	0801cf2b 	.word	0x0801cf2b
 8018880:	0801cf59 	.word	0x0801cf59

08018884 <_close_r>:
 8018884:	b538      	push	{r3, r4, r5, lr}
 8018886:	4d06      	ldr	r5, [pc, #24]	; (80188a0 <_close_r+0x1c>)
 8018888:	2300      	movs	r3, #0
 801888a:	4604      	mov	r4, r0
 801888c:	4608      	mov	r0, r1
 801888e:	602b      	str	r3, [r5, #0]
 8018890:	f7e9 ffa1 	bl	80027d6 <_close>
 8018894:	1c43      	adds	r3, r0, #1
 8018896:	d102      	bne.n	801889e <_close_r+0x1a>
 8018898:	682b      	ldr	r3, [r5, #0]
 801889a:	b103      	cbz	r3, 801889e <_close_r+0x1a>
 801889c:	6023      	str	r3, [r4, #0]
 801889e:	bd38      	pop	{r3, r4, r5, pc}
 80188a0:	2000da30 	.word	0x2000da30

080188a4 <__sflush_r>:
 80188a4:	898a      	ldrh	r2, [r1, #12]
 80188a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188aa:	4605      	mov	r5, r0
 80188ac:	0710      	lsls	r0, r2, #28
 80188ae:	460c      	mov	r4, r1
 80188b0:	d458      	bmi.n	8018964 <__sflush_r+0xc0>
 80188b2:	684b      	ldr	r3, [r1, #4]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	dc05      	bgt.n	80188c4 <__sflush_r+0x20>
 80188b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	dc02      	bgt.n	80188c4 <__sflush_r+0x20>
 80188be:	2000      	movs	r0, #0
 80188c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80188c6:	2e00      	cmp	r6, #0
 80188c8:	d0f9      	beq.n	80188be <__sflush_r+0x1a>
 80188ca:	2300      	movs	r3, #0
 80188cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80188d0:	682f      	ldr	r7, [r5, #0]
 80188d2:	602b      	str	r3, [r5, #0]
 80188d4:	d032      	beq.n	801893c <__sflush_r+0x98>
 80188d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80188d8:	89a3      	ldrh	r3, [r4, #12]
 80188da:	075a      	lsls	r2, r3, #29
 80188dc:	d505      	bpl.n	80188ea <__sflush_r+0x46>
 80188de:	6863      	ldr	r3, [r4, #4]
 80188e0:	1ac0      	subs	r0, r0, r3
 80188e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80188e4:	b10b      	cbz	r3, 80188ea <__sflush_r+0x46>
 80188e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80188e8:	1ac0      	subs	r0, r0, r3
 80188ea:	2300      	movs	r3, #0
 80188ec:	4602      	mov	r2, r0
 80188ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80188f0:	6a21      	ldr	r1, [r4, #32]
 80188f2:	4628      	mov	r0, r5
 80188f4:	47b0      	blx	r6
 80188f6:	1c43      	adds	r3, r0, #1
 80188f8:	89a3      	ldrh	r3, [r4, #12]
 80188fa:	d106      	bne.n	801890a <__sflush_r+0x66>
 80188fc:	6829      	ldr	r1, [r5, #0]
 80188fe:	291d      	cmp	r1, #29
 8018900:	d82c      	bhi.n	801895c <__sflush_r+0xb8>
 8018902:	4a2a      	ldr	r2, [pc, #168]	; (80189ac <__sflush_r+0x108>)
 8018904:	40ca      	lsrs	r2, r1
 8018906:	07d6      	lsls	r6, r2, #31
 8018908:	d528      	bpl.n	801895c <__sflush_r+0xb8>
 801890a:	2200      	movs	r2, #0
 801890c:	6062      	str	r2, [r4, #4]
 801890e:	04d9      	lsls	r1, r3, #19
 8018910:	6922      	ldr	r2, [r4, #16]
 8018912:	6022      	str	r2, [r4, #0]
 8018914:	d504      	bpl.n	8018920 <__sflush_r+0x7c>
 8018916:	1c42      	adds	r2, r0, #1
 8018918:	d101      	bne.n	801891e <__sflush_r+0x7a>
 801891a:	682b      	ldr	r3, [r5, #0]
 801891c:	b903      	cbnz	r3, 8018920 <__sflush_r+0x7c>
 801891e:	6560      	str	r0, [r4, #84]	; 0x54
 8018920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018922:	602f      	str	r7, [r5, #0]
 8018924:	2900      	cmp	r1, #0
 8018926:	d0ca      	beq.n	80188be <__sflush_r+0x1a>
 8018928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801892c:	4299      	cmp	r1, r3
 801892e:	d002      	beq.n	8018936 <__sflush_r+0x92>
 8018930:	4628      	mov	r0, r5
 8018932:	f7ff fd97 	bl	8018464 <_free_r>
 8018936:	2000      	movs	r0, #0
 8018938:	6360      	str	r0, [r4, #52]	; 0x34
 801893a:	e7c1      	b.n	80188c0 <__sflush_r+0x1c>
 801893c:	6a21      	ldr	r1, [r4, #32]
 801893e:	2301      	movs	r3, #1
 8018940:	4628      	mov	r0, r5
 8018942:	47b0      	blx	r6
 8018944:	1c41      	adds	r1, r0, #1
 8018946:	d1c7      	bne.n	80188d8 <__sflush_r+0x34>
 8018948:	682b      	ldr	r3, [r5, #0]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d0c4      	beq.n	80188d8 <__sflush_r+0x34>
 801894e:	2b1d      	cmp	r3, #29
 8018950:	d001      	beq.n	8018956 <__sflush_r+0xb2>
 8018952:	2b16      	cmp	r3, #22
 8018954:	d101      	bne.n	801895a <__sflush_r+0xb6>
 8018956:	602f      	str	r7, [r5, #0]
 8018958:	e7b1      	b.n	80188be <__sflush_r+0x1a>
 801895a:	89a3      	ldrh	r3, [r4, #12]
 801895c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018960:	81a3      	strh	r3, [r4, #12]
 8018962:	e7ad      	b.n	80188c0 <__sflush_r+0x1c>
 8018964:	690f      	ldr	r7, [r1, #16]
 8018966:	2f00      	cmp	r7, #0
 8018968:	d0a9      	beq.n	80188be <__sflush_r+0x1a>
 801896a:	0793      	lsls	r3, r2, #30
 801896c:	680e      	ldr	r6, [r1, #0]
 801896e:	bf08      	it	eq
 8018970:	694b      	ldreq	r3, [r1, #20]
 8018972:	600f      	str	r7, [r1, #0]
 8018974:	bf18      	it	ne
 8018976:	2300      	movne	r3, #0
 8018978:	eba6 0807 	sub.w	r8, r6, r7
 801897c:	608b      	str	r3, [r1, #8]
 801897e:	f1b8 0f00 	cmp.w	r8, #0
 8018982:	dd9c      	ble.n	80188be <__sflush_r+0x1a>
 8018984:	6a21      	ldr	r1, [r4, #32]
 8018986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018988:	4643      	mov	r3, r8
 801898a:	463a      	mov	r2, r7
 801898c:	4628      	mov	r0, r5
 801898e:	47b0      	blx	r6
 8018990:	2800      	cmp	r0, #0
 8018992:	dc06      	bgt.n	80189a2 <__sflush_r+0xfe>
 8018994:	89a3      	ldrh	r3, [r4, #12]
 8018996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801899a:	81a3      	strh	r3, [r4, #12]
 801899c:	f04f 30ff 	mov.w	r0, #4294967295
 80189a0:	e78e      	b.n	80188c0 <__sflush_r+0x1c>
 80189a2:	4407      	add	r7, r0
 80189a4:	eba8 0800 	sub.w	r8, r8, r0
 80189a8:	e7e9      	b.n	801897e <__sflush_r+0xda>
 80189aa:	bf00      	nop
 80189ac:	20400001 	.word	0x20400001

080189b0 <_fflush_r>:
 80189b0:	b538      	push	{r3, r4, r5, lr}
 80189b2:	690b      	ldr	r3, [r1, #16]
 80189b4:	4605      	mov	r5, r0
 80189b6:	460c      	mov	r4, r1
 80189b8:	b913      	cbnz	r3, 80189c0 <_fflush_r+0x10>
 80189ba:	2500      	movs	r5, #0
 80189bc:	4628      	mov	r0, r5
 80189be:	bd38      	pop	{r3, r4, r5, pc}
 80189c0:	b118      	cbz	r0, 80189ca <_fflush_r+0x1a>
 80189c2:	6983      	ldr	r3, [r0, #24]
 80189c4:	b90b      	cbnz	r3, 80189ca <_fflush_r+0x1a>
 80189c6:	f7ff fc45 	bl	8018254 <__sinit>
 80189ca:	4b14      	ldr	r3, [pc, #80]	; (8018a1c <_fflush_r+0x6c>)
 80189cc:	429c      	cmp	r4, r3
 80189ce:	d11b      	bne.n	8018a08 <_fflush_r+0x58>
 80189d0:	686c      	ldr	r4, [r5, #4]
 80189d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d0ef      	beq.n	80189ba <_fflush_r+0xa>
 80189da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80189dc:	07d0      	lsls	r0, r2, #31
 80189de:	d404      	bmi.n	80189ea <_fflush_r+0x3a>
 80189e0:	0599      	lsls	r1, r3, #22
 80189e2:	d402      	bmi.n	80189ea <_fflush_r+0x3a>
 80189e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80189e6:	f7ea f979 	bl	8002cdc <__retarget_lock_acquire_recursive>
 80189ea:	4628      	mov	r0, r5
 80189ec:	4621      	mov	r1, r4
 80189ee:	f7ff ff59 	bl	80188a4 <__sflush_r>
 80189f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80189f4:	07da      	lsls	r2, r3, #31
 80189f6:	4605      	mov	r5, r0
 80189f8:	d4e0      	bmi.n	80189bc <_fflush_r+0xc>
 80189fa:	89a3      	ldrh	r3, [r4, #12]
 80189fc:	059b      	lsls	r3, r3, #22
 80189fe:	d4dd      	bmi.n	80189bc <_fflush_r+0xc>
 8018a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018a02:	f7ea f97f 	bl	8002d04 <__retarget_lock_release_recursive>
 8018a06:	e7d9      	b.n	80189bc <_fflush_r+0xc>
 8018a08:	4b05      	ldr	r3, [pc, #20]	; (8018a20 <_fflush_r+0x70>)
 8018a0a:	429c      	cmp	r4, r3
 8018a0c:	d101      	bne.n	8018a12 <_fflush_r+0x62>
 8018a0e:	68ac      	ldr	r4, [r5, #8]
 8018a10:	e7df      	b.n	80189d2 <_fflush_r+0x22>
 8018a12:	4b04      	ldr	r3, [pc, #16]	; (8018a24 <_fflush_r+0x74>)
 8018a14:	429c      	cmp	r4, r3
 8018a16:	bf08      	it	eq
 8018a18:	68ec      	ldreq	r4, [r5, #12]
 8018a1a:	e7da      	b.n	80189d2 <_fflush_r+0x22>
 8018a1c:	0801ce64 	.word	0x0801ce64
 8018a20:	0801ce84 	.word	0x0801ce84
 8018a24:	0801ce44 	.word	0x0801ce44

08018a28 <fiprintf>:
 8018a28:	b40e      	push	{r1, r2, r3}
 8018a2a:	b503      	push	{r0, r1, lr}
 8018a2c:	4601      	mov	r1, r0
 8018a2e:	ab03      	add	r3, sp, #12
 8018a30:	4805      	ldr	r0, [pc, #20]	; (8018a48 <fiprintf+0x20>)
 8018a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a36:	6800      	ldr	r0, [r0, #0]
 8018a38:	9301      	str	r3, [sp, #4]
 8018a3a:	f000 f9ab 	bl	8018d94 <_vfiprintf_r>
 8018a3e:	b002      	add	sp, #8
 8018a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a44:	b003      	add	sp, #12
 8018a46:	4770      	bx	lr
 8018a48:	200000b0 	.word	0x200000b0

08018a4c <_lseek_r>:
 8018a4c:	b538      	push	{r3, r4, r5, lr}
 8018a4e:	4d07      	ldr	r5, [pc, #28]	; (8018a6c <_lseek_r+0x20>)
 8018a50:	4604      	mov	r4, r0
 8018a52:	4608      	mov	r0, r1
 8018a54:	4611      	mov	r1, r2
 8018a56:	2200      	movs	r2, #0
 8018a58:	602a      	str	r2, [r5, #0]
 8018a5a:	461a      	mov	r2, r3
 8018a5c:	f7e9 fee2 	bl	8002824 <_lseek>
 8018a60:	1c43      	adds	r3, r0, #1
 8018a62:	d102      	bne.n	8018a6a <_lseek_r+0x1e>
 8018a64:	682b      	ldr	r3, [r5, #0]
 8018a66:	b103      	cbz	r3, 8018a6a <_lseek_r+0x1e>
 8018a68:	6023      	str	r3, [r4, #0]
 8018a6a:	bd38      	pop	{r3, r4, r5, pc}
 8018a6c:	2000da30 	.word	0x2000da30

08018a70 <__malloc_lock>:
 8018a70:	4801      	ldr	r0, [pc, #4]	; (8018a78 <__malloc_lock+0x8>)
 8018a72:	f7ea b933 	b.w	8002cdc <__retarget_lock_acquire_recursive>
 8018a76:	bf00      	nop
 8018a78:	200004c8 	.word	0x200004c8

08018a7c <__malloc_unlock>:
 8018a7c:	4801      	ldr	r0, [pc, #4]	; (8018a84 <__malloc_unlock+0x8>)
 8018a7e:	f7ea b941 	b.w	8002d04 <__retarget_lock_release_recursive>
 8018a82:	bf00      	nop
 8018a84:	200004c8 	.word	0x200004c8

08018a88 <__ssputs_r>:
 8018a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a8c:	688e      	ldr	r6, [r1, #8]
 8018a8e:	429e      	cmp	r6, r3
 8018a90:	4682      	mov	sl, r0
 8018a92:	460c      	mov	r4, r1
 8018a94:	4690      	mov	r8, r2
 8018a96:	461f      	mov	r7, r3
 8018a98:	d838      	bhi.n	8018b0c <__ssputs_r+0x84>
 8018a9a:	898a      	ldrh	r2, [r1, #12]
 8018a9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018aa0:	d032      	beq.n	8018b08 <__ssputs_r+0x80>
 8018aa2:	6825      	ldr	r5, [r4, #0]
 8018aa4:	6909      	ldr	r1, [r1, #16]
 8018aa6:	eba5 0901 	sub.w	r9, r5, r1
 8018aaa:	6965      	ldr	r5, [r4, #20]
 8018aac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018ab0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018ab4:	3301      	adds	r3, #1
 8018ab6:	444b      	add	r3, r9
 8018ab8:	106d      	asrs	r5, r5, #1
 8018aba:	429d      	cmp	r5, r3
 8018abc:	bf38      	it	cc
 8018abe:	461d      	movcc	r5, r3
 8018ac0:	0553      	lsls	r3, r2, #21
 8018ac2:	d531      	bpl.n	8018b28 <__ssputs_r+0xa0>
 8018ac4:	4629      	mov	r1, r5
 8018ac6:	f7ff fd1d 	bl	8018504 <_malloc_r>
 8018aca:	4606      	mov	r6, r0
 8018acc:	b950      	cbnz	r0, 8018ae4 <__ssputs_r+0x5c>
 8018ace:	230c      	movs	r3, #12
 8018ad0:	f8ca 3000 	str.w	r3, [sl]
 8018ad4:	89a3      	ldrh	r3, [r4, #12]
 8018ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018ada:	81a3      	strh	r3, [r4, #12]
 8018adc:	f04f 30ff 	mov.w	r0, #4294967295
 8018ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ae4:	6921      	ldr	r1, [r4, #16]
 8018ae6:	464a      	mov	r2, r9
 8018ae8:	f7ff fc8c 	bl	8018404 <memcpy>
 8018aec:	89a3      	ldrh	r3, [r4, #12]
 8018aee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018af6:	81a3      	strh	r3, [r4, #12]
 8018af8:	6126      	str	r6, [r4, #16]
 8018afa:	6165      	str	r5, [r4, #20]
 8018afc:	444e      	add	r6, r9
 8018afe:	eba5 0509 	sub.w	r5, r5, r9
 8018b02:	6026      	str	r6, [r4, #0]
 8018b04:	60a5      	str	r5, [r4, #8]
 8018b06:	463e      	mov	r6, r7
 8018b08:	42be      	cmp	r6, r7
 8018b0a:	d900      	bls.n	8018b0e <__ssputs_r+0x86>
 8018b0c:	463e      	mov	r6, r7
 8018b0e:	4632      	mov	r2, r6
 8018b10:	6820      	ldr	r0, [r4, #0]
 8018b12:	4641      	mov	r1, r8
 8018b14:	f7ff fc84 	bl	8018420 <memmove>
 8018b18:	68a3      	ldr	r3, [r4, #8]
 8018b1a:	6822      	ldr	r2, [r4, #0]
 8018b1c:	1b9b      	subs	r3, r3, r6
 8018b1e:	4432      	add	r2, r6
 8018b20:	60a3      	str	r3, [r4, #8]
 8018b22:	6022      	str	r2, [r4, #0]
 8018b24:	2000      	movs	r0, #0
 8018b26:	e7db      	b.n	8018ae0 <__ssputs_r+0x58>
 8018b28:	462a      	mov	r2, r5
 8018b2a:	f000 fd35 	bl	8019598 <_realloc_r>
 8018b2e:	4606      	mov	r6, r0
 8018b30:	2800      	cmp	r0, #0
 8018b32:	d1e1      	bne.n	8018af8 <__ssputs_r+0x70>
 8018b34:	6921      	ldr	r1, [r4, #16]
 8018b36:	4650      	mov	r0, sl
 8018b38:	f7ff fc94 	bl	8018464 <_free_r>
 8018b3c:	e7c7      	b.n	8018ace <__ssputs_r+0x46>
	...

08018b40 <_svfiprintf_r>:
 8018b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b44:	4698      	mov	r8, r3
 8018b46:	898b      	ldrh	r3, [r1, #12]
 8018b48:	061b      	lsls	r3, r3, #24
 8018b4a:	b09d      	sub	sp, #116	; 0x74
 8018b4c:	4607      	mov	r7, r0
 8018b4e:	460d      	mov	r5, r1
 8018b50:	4614      	mov	r4, r2
 8018b52:	d50e      	bpl.n	8018b72 <_svfiprintf_r+0x32>
 8018b54:	690b      	ldr	r3, [r1, #16]
 8018b56:	b963      	cbnz	r3, 8018b72 <_svfiprintf_r+0x32>
 8018b58:	2140      	movs	r1, #64	; 0x40
 8018b5a:	f7ff fcd3 	bl	8018504 <_malloc_r>
 8018b5e:	6028      	str	r0, [r5, #0]
 8018b60:	6128      	str	r0, [r5, #16]
 8018b62:	b920      	cbnz	r0, 8018b6e <_svfiprintf_r+0x2e>
 8018b64:	230c      	movs	r3, #12
 8018b66:	603b      	str	r3, [r7, #0]
 8018b68:	f04f 30ff 	mov.w	r0, #4294967295
 8018b6c:	e0d1      	b.n	8018d12 <_svfiprintf_r+0x1d2>
 8018b6e:	2340      	movs	r3, #64	; 0x40
 8018b70:	616b      	str	r3, [r5, #20]
 8018b72:	2300      	movs	r3, #0
 8018b74:	9309      	str	r3, [sp, #36]	; 0x24
 8018b76:	2320      	movs	r3, #32
 8018b78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018b80:	2330      	movs	r3, #48	; 0x30
 8018b82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018d2c <_svfiprintf_r+0x1ec>
 8018b86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018b8a:	f04f 0901 	mov.w	r9, #1
 8018b8e:	4623      	mov	r3, r4
 8018b90:	469a      	mov	sl, r3
 8018b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b96:	b10a      	cbz	r2, 8018b9c <_svfiprintf_r+0x5c>
 8018b98:	2a25      	cmp	r2, #37	; 0x25
 8018b9a:	d1f9      	bne.n	8018b90 <_svfiprintf_r+0x50>
 8018b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8018ba0:	d00b      	beq.n	8018bba <_svfiprintf_r+0x7a>
 8018ba2:	465b      	mov	r3, fp
 8018ba4:	4622      	mov	r2, r4
 8018ba6:	4629      	mov	r1, r5
 8018ba8:	4638      	mov	r0, r7
 8018baa:	f7ff ff6d 	bl	8018a88 <__ssputs_r>
 8018bae:	3001      	adds	r0, #1
 8018bb0:	f000 80aa 	beq.w	8018d08 <_svfiprintf_r+0x1c8>
 8018bb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018bb6:	445a      	add	r2, fp
 8018bb8:	9209      	str	r2, [sp, #36]	; 0x24
 8018bba:	f89a 3000 	ldrb.w	r3, [sl]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	f000 80a2 	beq.w	8018d08 <_svfiprintf_r+0x1c8>
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8018bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018bce:	f10a 0a01 	add.w	sl, sl, #1
 8018bd2:	9304      	str	r3, [sp, #16]
 8018bd4:	9307      	str	r3, [sp, #28]
 8018bd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018bda:	931a      	str	r3, [sp, #104]	; 0x68
 8018bdc:	4654      	mov	r4, sl
 8018bde:	2205      	movs	r2, #5
 8018be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018be4:	4851      	ldr	r0, [pc, #324]	; (8018d2c <_svfiprintf_r+0x1ec>)
 8018be6:	f7e7 faf3 	bl	80001d0 <memchr>
 8018bea:	9a04      	ldr	r2, [sp, #16]
 8018bec:	b9d8      	cbnz	r0, 8018c26 <_svfiprintf_r+0xe6>
 8018bee:	06d0      	lsls	r0, r2, #27
 8018bf0:	bf44      	itt	mi
 8018bf2:	2320      	movmi	r3, #32
 8018bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018bf8:	0711      	lsls	r1, r2, #28
 8018bfa:	bf44      	itt	mi
 8018bfc:	232b      	movmi	r3, #43	; 0x2b
 8018bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018c02:	f89a 3000 	ldrb.w	r3, [sl]
 8018c06:	2b2a      	cmp	r3, #42	; 0x2a
 8018c08:	d015      	beq.n	8018c36 <_svfiprintf_r+0xf6>
 8018c0a:	9a07      	ldr	r2, [sp, #28]
 8018c0c:	4654      	mov	r4, sl
 8018c0e:	2000      	movs	r0, #0
 8018c10:	f04f 0c0a 	mov.w	ip, #10
 8018c14:	4621      	mov	r1, r4
 8018c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c1a:	3b30      	subs	r3, #48	; 0x30
 8018c1c:	2b09      	cmp	r3, #9
 8018c1e:	d94e      	bls.n	8018cbe <_svfiprintf_r+0x17e>
 8018c20:	b1b0      	cbz	r0, 8018c50 <_svfiprintf_r+0x110>
 8018c22:	9207      	str	r2, [sp, #28]
 8018c24:	e014      	b.n	8018c50 <_svfiprintf_r+0x110>
 8018c26:	eba0 0308 	sub.w	r3, r0, r8
 8018c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8018c2e:	4313      	orrs	r3, r2
 8018c30:	9304      	str	r3, [sp, #16]
 8018c32:	46a2      	mov	sl, r4
 8018c34:	e7d2      	b.n	8018bdc <_svfiprintf_r+0x9c>
 8018c36:	9b03      	ldr	r3, [sp, #12]
 8018c38:	1d19      	adds	r1, r3, #4
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	9103      	str	r1, [sp, #12]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	bfbb      	ittet	lt
 8018c42:	425b      	neglt	r3, r3
 8018c44:	f042 0202 	orrlt.w	r2, r2, #2
 8018c48:	9307      	strge	r3, [sp, #28]
 8018c4a:	9307      	strlt	r3, [sp, #28]
 8018c4c:	bfb8      	it	lt
 8018c4e:	9204      	strlt	r2, [sp, #16]
 8018c50:	7823      	ldrb	r3, [r4, #0]
 8018c52:	2b2e      	cmp	r3, #46	; 0x2e
 8018c54:	d10c      	bne.n	8018c70 <_svfiprintf_r+0x130>
 8018c56:	7863      	ldrb	r3, [r4, #1]
 8018c58:	2b2a      	cmp	r3, #42	; 0x2a
 8018c5a:	d135      	bne.n	8018cc8 <_svfiprintf_r+0x188>
 8018c5c:	9b03      	ldr	r3, [sp, #12]
 8018c5e:	1d1a      	adds	r2, r3, #4
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	9203      	str	r2, [sp, #12]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	bfb8      	it	lt
 8018c68:	f04f 33ff 	movlt.w	r3, #4294967295
 8018c6c:	3402      	adds	r4, #2
 8018c6e:	9305      	str	r3, [sp, #20]
 8018c70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018d3c <_svfiprintf_r+0x1fc>
 8018c74:	7821      	ldrb	r1, [r4, #0]
 8018c76:	2203      	movs	r2, #3
 8018c78:	4650      	mov	r0, sl
 8018c7a:	f7e7 faa9 	bl	80001d0 <memchr>
 8018c7e:	b140      	cbz	r0, 8018c92 <_svfiprintf_r+0x152>
 8018c80:	2340      	movs	r3, #64	; 0x40
 8018c82:	eba0 000a 	sub.w	r0, r0, sl
 8018c86:	fa03 f000 	lsl.w	r0, r3, r0
 8018c8a:	9b04      	ldr	r3, [sp, #16]
 8018c8c:	4303      	orrs	r3, r0
 8018c8e:	3401      	adds	r4, #1
 8018c90:	9304      	str	r3, [sp, #16]
 8018c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c96:	4826      	ldr	r0, [pc, #152]	; (8018d30 <_svfiprintf_r+0x1f0>)
 8018c98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018c9c:	2206      	movs	r2, #6
 8018c9e:	f7e7 fa97 	bl	80001d0 <memchr>
 8018ca2:	2800      	cmp	r0, #0
 8018ca4:	d038      	beq.n	8018d18 <_svfiprintf_r+0x1d8>
 8018ca6:	4b23      	ldr	r3, [pc, #140]	; (8018d34 <_svfiprintf_r+0x1f4>)
 8018ca8:	bb1b      	cbnz	r3, 8018cf2 <_svfiprintf_r+0x1b2>
 8018caa:	9b03      	ldr	r3, [sp, #12]
 8018cac:	3307      	adds	r3, #7
 8018cae:	f023 0307 	bic.w	r3, r3, #7
 8018cb2:	3308      	adds	r3, #8
 8018cb4:	9303      	str	r3, [sp, #12]
 8018cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018cb8:	4433      	add	r3, r6
 8018cba:	9309      	str	r3, [sp, #36]	; 0x24
 8018cbc:	e767      	b.n	8018b8e <_svfiprintf_r+0x4e>
 8018cbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8018cc2:	460c      	mov	r4, r1
 8018cc4:	2001      	movs	r0, #1
 8018cc6:	e7a5      	b.n	8018c14 <_svfiprintf_r+0xd4>
 8018cc8:	2300      	movs	r3, #0
 8018cca:	3401      	adds	r4, #1
 8018ccc:	9305      	str	r3, [sp, #20]
 8018cce:	4619      	mov	r1, r3
 8018cd0:	f04f 0c0a 	mov.w	ip, #10
 8018cd4:	4620      	mov	r0, r4
 8018cd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018cda:	3a30      	subs	r2, #48	; 0x30
 8018cdc:	2a09      	cmp	r2, #9
 8018cde:	d903      	bls.n	8018ce8 <_svfiprintf_r+0x1a8>
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d0c5      	beq.n	8018c70 <_svfiprintf_r+0x130>
 8018ce4:	9105      	str	r1, [sp, #20]
 8018ce6:	e7c3      	b.n	8018c70 <_svfiprintf_r+0x130>
 8018ce8:	fb0c 2101 	mla	r1, ip, r1, r2
 8018cec:	4604      	mov	r4, r0
 8018cee:	2301      	movs	r3, #1
 8018cf0:	e7f0      	b.n	8018cd4 <_svfiprintf_r+0x194>
 8018cf2:	ab03      	add	r3, sp, #12
 8018cf4:	9300      	str	r3, [sp, #0]
 8018cf6:	462a      	mov	r2, r5
 8018cf8:	4b0f      	ldr	r3, [pc, #60]	; (8018d38 <_svfiprintf_r+0x1f8>)
 8018cfa:	a904      	add	r1, sp, #16
 8018cfc:	4638      	mov	r0, r7
 8018cfe:	f3af 8000 	nop.w
 8018d02:	1c42      	adds	r2, r0, #1
 8018d04:	4606      	mov	r6, r0
 8018d06:	d1d6      	bne.n	8018cb6 <_svfiprintf_r+0x176>
 8018d08:	89ab      	ldrh	r3, [r5, #12]
 8018d0a:	065b      	lsls	r3, r3, #25
 8018d0c:	f53f af2c 	bmi.w	8018b68 <_svfiprintf_r+0x28>
 8018d10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018d12:	b01d      	add	sp, #116	; 0x74
 8018d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d18:	ab03      	add	r3, sp, #12
 8018d1a:	9300      	str	r3, [sp, #0]
 8018d1c:	462a      	mov	r2, r5
 8018d1e:	4b06      	ldr	r3, [pc, #24]	; (8018d38 <_svfiprintf_r+0x1f8>)
 8018d20:	a904      	add	r1, sp, #16
 8018d22:	4638      	mov	r0, r7
 8018d24:	f000 f9d4 	bl	80190d0 <_printf_i>
 8018d28:	e7eb      	b.n	8018d02 <_svfiprintf_r+0x1c2>
 8018d2a:	bf00      	nop
 8018d2c:	0801cf5a 	.word	0x0801cf5a
 8018d30:	0801cf64 	.word	0x0801cf64
 8018d34:	00000000 	.word	0x00000000
 8018d38:	08018a89 	.word	0x08018a89
 8018d3c:	0801cf60 	.word	0x0801cf60

08018d40 <__sfputc_r>:
 8018d40:	6893      	ldr	r3, [r2, #8]
 8018d42:	3b01      	subs	r3, #1
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	b410      	push	{r4}
 8018d48:	6093      	str	r3, [r2, #8]
 8018d4a:	da08      	bge.n	8018d5e <__sfputc_r+0x1e>
 8018d4c:	6994      	ldr	r4, [r2, #24]
 8018d4e:	42a3      	cmp	r3, r4
 8018d50:	db01      	blt.n	8018d56 <__sfputc_r+0x16>
 8018d52:	290a      	cmp	r1, #10
 8018d54:	d103      	bne.n	8018d5e <__sfputc_r+0x1e>
 8018d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d5a:	f000 baf1 	b.w	8019340 <__swbuf_r>
 8018d5e:	6813      	ldr	r3, [r2, #0]
 8018d60:	1c58      	adds	r0, r3, #1
 8018d62:	6010      	str	r0, [r2, #0]
 8018d64:	7019      	strb	r1, [r3, #0]
 8018d66:	4608      	mov	r0, r1
 8018d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d6c:	4770      	bx	lr

08018d6e <__sfputs_r>:
 8018d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d70:	4606      	mov	r6, r0
 8018d72:	460f      	mov	r7, r1
 8018d74:	4614      	mov	r4, r2
 8018d76:	18d5      	adds	r5, r2, r3
 8018d78:	42ac      	cmp	r4, r5
 8018d7a:	d101      	bne.n	8018d80 <__sfputs_r+0x12>
 8018d7c:	2000      	movs	r0, #0
 8018d7e:	e007      	b.n	8018d90 <__sfputs_r+0x22>
 8018d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d84:	463a      	mov	r2, r7
 8018d86:	4630      	mov	r0, r6
 8018d88:	f7ff ffda 	bl	8018d40 <__sfputc_r>
 8018d8c:	1c43      	adds	r3, r0, #1
 8018d8e:	d1f3      	bne.n	8018d78 <__sfputs_r+0xa>
 8018d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018d94 <_vfiprintf_r>:
 8018d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d98:	460d      	mov	r5, r1
 8018d9a:	b09d      	sub	sp, #116	; 0x74
 8018d9c:	4614      	mov	r4, r2
 8018d9e:	4698      	mov	r8, r3
 8018da0:	4606      	mov	r6, r0
 8018da2:	b118      	cbz	r0, 8018dac <_vfiprintf_r+0x18>
 8018da4:	6983      	ldr	r3, [r0, #24]
 8018da6:	b90b      	cbnz	r3, 8018dac <_vfiprintf_r+0x18>
 8018da8:	f7ff fa54 	bl	8018254 <__sinit>
 8018dac:	4b89      	ldr	r3, [pc, #548]	; (8018fd4 <_vfiprintf_r+0x240>)
 8018dae:	429d      	cmp	r5, r3
 8018db0:	d11b      	bne.n	8018dea <_vfiprintf_r+0x56>
 8018db2:	6875      	ldr	r5, [r6, #4]
 8018db4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018db6:	07d9      	lsls	r1, r3, #31
 8018db8:	d405      	bmi.n	8018dc6 <_vfiprintf_r+0x32>
 8018dba:	89ab      	ldrh	r3, [r5, #12]
 8018dbc:	059a      	lsls	r2, r3, #22
 8018dbe:	d402      	bmi.n	8018dc6 <_vfiprintf_r+0x32>
 8018dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018dc2:	f7e9 ff8b 	bl	8002cdc <__retarget_lock_acquire_recursive>
 8018dc6:	89ab      	ldrh	r3, [r5, #12]
 8018dc8:	071b      	lsls	r3, r3, #28
 8018dca:	d501      	bpl.n	8018dd0 <_vfiprintf_r+0x3c>
 8018dcc:	692b      	ldr	r3, [r5, #16]
 8018dce:	b9eb      	cbnz	r3, 8018e0c <_vfiprintf_r+0x78>
 8018dd0:	4629      	mov	r1, r5
 8018dd2:	4630      	mov	r0, r6
 8018dd4:	f000 fb06 	bl	80193e4 <__swsetup_r>
 8018dd8:	b1c0      	cbz	r0, 8018e0c <_vfiprintf_r+0x78>
 8018dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ddc:	07dc      	lsls	r4, r3, #31
 8018dde:	d50e      	bpl.n	8018dfe <_vfiprintf_r+0x6a>
 8018de0:	f04f 30ff 	mov.w	r0, #4294967295
 8018de4:	b01d      	add	sp, #116	; 0x74
 8018de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dea:	4b7b      	ldr	r3, [pc, #492]	; (8018fd8 <_vfiprintf_r+0x244>)
 8018dec:	429d      	cmp	r5, r3
 8018dee:	d101      	bne.n	8018df4 <_vfiprintf_r+0x60>
 8018df0:	68b5      	ldr	r5, [r6, #8]
 8018df2:	e7df      	b.n	8018db4 <_vfiprintf_r+0x20>
 8018df4:	4b79      	ldr	r3, [pc, #484]	; (8018fdc <_vfiprintf_r+0x248>)
 8018df6:	429d      	cmp	r5, r3
 8018df8:	bf08      	it	eq
 8018dfa:	68f5      	ldreq	r5, [r6, #12]
 8018dfc:	e7da      	b.n	8018db4 <_vfiprintf_r+0x20>
 8018dfe:	89ab      	ldrh	r3, [r5, #12]
 8018e00:	0598      	lsls	r0, r3, #22
 8018e02:	d4ed      	bmi.n	8018de0 <_vfiprintf_r+0x4c>
 8018e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e06:	f7e9 ff7d 	bl	8002d04 <__retarget_lock_release_recursive>
 8018e0a:	e7e9      	b.n	8018de0 <_vfiprintf_r+0x4c>
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8018e10:	2320      	movs	r3, #32
 8018e12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8018e1a:	2330      	movs	r3, #48	; 0x30
 8018e1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018fe0 <_vfiprintf_r+0x24c>
 8018e20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018e24:	f04f 0901 	mov.w	r9, #1
 8018e28:	4623      	mov	r3, r4
 8018e2a:	469a      	mov	sl, r3
 8018e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018e30:	b10a      	cbz	r2, 8018e36 <_vfiprintf_r+0xa2>
 8018e32:	2a25      	cmp	r2, #37	; 0x25
 8018e34:	d1f9      	bne.n	8018e2a <_vfiprintf_r+0x96>
 8018e36:	ebba 0b04 	subs.w	fp, sl, r4
 8018e3a:	d00b      	beq.n	8018e54 <_vfiprintf_r+0xc0>
 8018e3c:	465b      	mov	r3, fp
 8018e3e:	4622      	mov	r2, r4
 8018e40:	4629      	mov	r1, r5
 8018e42:	4630      	mov	r0, r6
 8018e44:	f7ff ff93 	bl	8018d6e <__sfputs_r>
 8018e48:	3001      	adds	r0, #1
 8018e4a:	f000 80aa 	beq.w	8018fa2 <_vfiprintf_r+0x20e>
 8018e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e50:	445a      	add	r2, fp
 8018e52:	9209      	str	r2, [sp, #36]	; 0x24
 8018e54:	f89a 3000 	ldrb.w	r3, [sl]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	f000 80a2 	beq.w	8018fa2 <_vfiprintf_r+0x20e>
 8018e5e:	2300      	movs	r3, #0
 8018e60:	f04f 32ff 	mov.w	r2, #4294967295
 8018e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018e68:	f10a 0a01 	add.w	sl, sl, #1
 8018e6c:	9304      	str	r3, [sp, #16]
 8018e6e:	9307      	str	r3, [sp, #28]
 8018e70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018e74:	931a      	str	r3, [sp, #104]	; 0x68
 8018e76:	4654      	mov	r4, sl
 8018e78:	2205      	movs	r2, #5
 8018e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e7e:	4858      	ldr	r0, [pc, #352]	; (8018fe0 <_vfiprintf_r+0x24c>)
 8018e80:	f7e7 f9a6 	bl	80001d0 <memchr>
 8018e84:	9a04      	ldr	r2, [sp, #16]
 8018e86:	b9d8      	cbnz	r0, 8018ec0 <_vfiprintf_r+0x12c>
 8018e88:	06d1      	lsls	r1, r2, #27
 8018e8a:	bf44      	itt	mi
 8018e8c:	2320      	movmi	r3, #32
 8018e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018e92:	0713      	lsls	r3, r2, #28
 8018e94:	bf44      	itt	mi
 8018e96:	232b      	movmi	r3, #43	; 0x2b
 8018e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8018ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8018ea2:	d015      	beq.n	8018ed0 <_vfiprintf_r+0x13c>
 8018ea4:	9a07      	ldr	r2, [sp, #28]
 8018ea6:	4654      	mov	r4, sl
 8018ea8:	2000      	movs	r0, #0
 8018eaa:	f04f 0c0a 	mov.w	ip, #10
 8018eae:	4621      	mov	r1, r4
 8018eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018eb4:	3b30      	subs	r3, #48	; 0x30
 8018eb6:	2b09      	cmp	r3, #9
 8018eb8:	d94e      	bls.n	8018f58 <_vfiprintf_r+0x1c4>
 8018eba:	b1b0      	cbz	r0, 8018eea <_vfiprintf_r+0x156>
 8018ebc:	9207      	str	r2, [sp, #28]
 8018ebe:	e014      	b.n	8018eea <_vfiprintf_r+0x156>
 8018ec0:	eba0 0308 	sub.w	r3, r0, r8
 8018ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8018ec8:	4313      	orrs	r3, r2
 8018eca:	9304      	str	r3, [sp, #16]
 8018ecc:	46a2      	mov	sl, r4
 8018ece:	e7d2      	b.n	8018e76 <_vfiprintf_r+0xe2>
 8018ed0:	9b03      	ldr	r3, [sp, #12]
 8018ed2:	1d19      	adds	r1, r3, #4
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	9103      	str	r1, [sp, #12]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	bfbb      	ittet	lt
 8018edc:	425b      	neglt	r3, r3
 8018ede:	f042 0202 	orrlt.w	r2, r2, #2
 8018ee2:	9307      	strge	r3, [sp, #28]
 8018ee4:	9307      	strlt	r3, [sp, #28]
 8018ee6:	bfb8      	it	lt
 8018ee8:	9204      	strlt	r2, [sp, #16]
 8018eea:	7823      	ldrb	r3, [r4, #0]
 8018eec:	2b2e      	cmp	r3, #46	; 0x2e
 8018eee:	d10c      	bne.n	8018f0a <_vfiprintf_r+0x176>
 8018ef0:	7863      	ldrb	r3, [r4, #1]
 8018ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8018ef4:	d135      	bne.n	8018f62 <_vfiprintf_r+0x1ce>
 8018ef6:	9b03      	ldr	r3, [sp, #12]
 8018ef8:	1d1a      	adds	r2, r3, #4
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	9203      	str	r2, [sp, #12]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	bfb8      	it	lt
 8018f02:	f04f 33ff 	movlt.w	r3, #4294967295
 8018f06:	3402      	adds	r4, #2
 8018f08:	9305      	str	r3, [sp, #20]
 8018f0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018ff0 <_vfiprintf_r+0x25c>
 8018f0e:	7821      	ldrb	r1, [r4, #0]
 8018f10:	2203      	movs	r2, #3
 8018f12:	4650      	mov	r0, sl
 8018f14:	f7e7 f95c 	bl	80001d0 <memchr>
 8018f18:	b140      	cbz	r0, 8018f2c <_vfiprintf_r+0x198>
 8018f1a:	2340      	movs	r3, #64	; 0x40
 8018f1c:	eba0 000a 	sub.w	r0, r0, sl
 8018f20:	fa03 f000 	lsl.w	r0, r3, r0
 8018f24:	9b04      	ldr	r3, [sp, #16]
 8018f26:	4303      	orrs	r3, r0
 8018f28:	3401      	adds	r4, #1
 8018f2a:	9304      	str	r3, [sp, #16]
 8018f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f30:	482c      	ldr	r0, [pc, #176]	; (8018fe4 <_vfiprintf_r+0x250>)
 8018f32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018f36:	2206      	movs	r2, #6
 8018f38:	f7e7 f94a 	bl	80001d0 <memchr>
 8018f3c:	2800      	cmp	r0, #0
 8018f3e:	d03f      	beq.n	8018fc0 <_vfiprintf_r+0x22c>
 8018f40:	4b29      	ldr	r3, [pc, #164]	; (8018fe8 <_vfiprintf_r+0x254>)
 8018f42:	bb1b      	cbnz	r3, 8018f8c <_vfiprintf_r+0x1f8>
 8018f44:	9b03      	ldr	r3, [sp, #12]
 8018f46:	3307      	adds	r3, #7
 8018f48:	f023 0307 	bic.w	r3, r3, #7
 8018f4c:	3308      	adds	r3, #8
 8018f4e:	9303      	str	r3, [sp, #12]
 8018f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f52:	443b      	add	r3, r7
 8018f54:	9309      	str	r3, [sp, #36]	; 0x24
 8018f56:	e767      	b.n	8018e28 <_vfiprintf_r+0x94>
 8018f58:	fb0c 3202 	mla	r2, ip, r2, r3
 8018f5c:	460c      	mov	r4, r1
 8018f5e:	2001      	movs	r0, #1
 8018f60:	e7a5      	b.n	8018eae <_vfiprintf_r+0x11a>
 8018f62:	2300      	movs	r3, #0
 8018f64:	3401      	adds	r4, #1
 8018f66:	9305      	str	r3, [sp, #20]
 8018f68:	4619      	mov	r1, r3
 8018f6a:	f04f 0c0a 	mov.w	ip, #10
 8018f6e:	4620      	mov	r0, r4
 8018f70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f74:	3a30      	subs	r2, #48	; 0x30
 8018f76:	2a09      	cmp	r2, #9
 8018f78:	d903      	bls.n	8018f82 <_vfiprintf_r+0x1ee>
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d0c5      	beq.n	8018f0a <_vfiprintf_r+0x176>
 8018f7e:	9105      	str	r1, [sp, #20]
 8018f80:	e7c3      	b.n	8018f0a <_vfiprintf_r+0x176>
 8018f82:	fb0c 2101 	mla	r1, ip, r1, r2
 8018f86:	4604      	mov	r4, r0
 8018f88:	2301      	movs	r3, #1
 8018f8a:	e7f0      	b.n	8018f6e <_vfiprintf_r+0x1da>
 8018f8c:	ab03      	add	r3, sp, #12
 8018f8e:	9300      	str	r3, [sp, #0]
 8018f90:	462a      	mov	r2, r5
 8018f92:	4b16      	ldr	r3, [pc, #88]	; (8018fec <_vfiprintf_r+0x258>)
 8018f94:	a904      	add	r1, sp, #16
 8018f96:	4630      	mov	r0, r6
 8018f98:	f3af 8000 	nop.w
 8018f9c:	4607      	mov	r7, r0
 8018f9e:	1c78      	adds	r0, r7, #1
 8018fa0:	d1d6      	bne.n	8018f50 <_vfiprintf_r+0x1bc>
 8018fa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018fa4:	07d9      	lsls	r1, r3, #31
 8018fa6:	d405      	bmi.n	8018fb4 <_vfiprintf_r+0x220>
 8018fa8:	89ab      	ldrh	r3, [r5, #12]
 8018faa:	059a      	lsls	r2, r3, #22
 8018fac:	d402      	bmi.n	8018fb4 <_vfiprintf_r+0x220>
 8018fae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018fb0:	f7e9 fea8 	bl	8002d04 <__retarget_lock_release_recursive>
 8018fb4:	89ab      	ldrh	r3, [r5, #12]
 8018fb6:	065b      	lsls	r3, r3, #25
 8018fb8:	f53f af12 	bmi.w	8018de0 <_vfiprintf_r+0x4c>
 8018fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018fbe:	e711      	b.n	8018de4 <_vfiprintf_r+0x50>
 8018fc0:	ab03      	add	r3, sp, #12
 8018fc2:	9300      	str	r3, [sp, #0]
 8018fc4:	462a      	mov	r2, r5
 8018fc6:	4b09      	ldr	r3, [pc, #36]	; (8018fec <_vfiprintf_r+0x258>)
 8018fc8:	a904      	add	r1, sp, #16
 8018fca:	4630      	mov	r0, r6
 8018fcc:	f000 f880 	bl	80190d0 <_printf_i>
 8018fd0:	e7e4      	b.n	8018f9c <_vfiprintf_r+0x208>
 8018fd2:	bf00      	nop
 8018fd4:	0801ce64 	.word	0x0801ce64
 8018fd8:	0801ce84 	.word	0x0801ce84
 8018fdc:	0801ce44 	.word	0x0801ce44
 8018fe0:	0801cf5a 	.word	0x0801cf5a
 8018fe4:	0801cf64 	.word	0x0801cf64
 8018fe8:	00000000 	.word	0x00000000
 8018fec:	08018d6f 	.word	0x08018d6f
 8018ff0:	0801cf60 	.word	0x0801cf60

08018ff4 <_printf_common>:
 8018ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ff8:	4616      	mov	r6, r2
 8018ffa:	4699      	mov	r9, r3
 8018ffc:	688a      	ldr	r2, [r1, #8]
 8018ffe:	690b      	ldr	r3, [r1, #16]
 8019000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019004:	4293      	cmp	r3, r2
 8019006:	bfb8      	it	lt
 8019008:	4613      	movlt	r3, r2
 801900a:	6033      	str	r3, [r6, #0]
 801900c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019010:	4607      	mov	r7, r0
 8019012:	460c      	mov	r4, r1
 8019014:	b10a      	cbz	r2, 801901a <_printf_common+0x26>
 8019016:	3301      	adds	r3, #1
 8019018:	6033      	str	r3, [r6, #0]
 801901a:	6823      	ldr	r3, [r4, #0]
 801901c:	0699      	lsls	r1, r3, #26
 801901e:	bf42      	ittt	mi
 8019020:	6833      	ldrmi	r3, [r6, #0]
 8019022:	3302      	addmi	r3, #2
 8019024:	6033      	strmi	r3, [r6, #0]
 8019026:	6825      	ldr	r5, [r4, #0]
 8019028:	f015 0506 	ands.w	r5, r5, #6
 801902c:	d106      	bne.n	801903c <_printf_common+0x48>
 801902e:	f104 0a19 	add.w	sl, r4, #25
 8019032:	68e3      	ldr	r3, [r4, #12]
 8019034:	6832      	ldr	r2, [r6, #0]
 8019036:	1a9b      	subs	r3, r3, r2
 8019038:	42ab      	cmp	r3, r5
 801903a:	dc26      	bgt.n	801908a <_printf_common+0x96>
 801903c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019040:	1e13      	subs	r3, r2, #0
 8019042:	6822      	ldr	r2, [r4, #0]
 8019044:	bf18      	it	ne
 8019046:	2301      	movne	r3, #1
 8019048:	0692      	lsls	r2, r2, #26
 801904a:	d42b      	bmi.n	80190a4 <_printf_common+0xb0>
 801904c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019050:	4649      	mov	r1, r9
 8019052:	4638      	mov	r0, r7
 8019054:	47c0      	blx	r8
 8019056:	3001      	adds	r0, #1
 8019058:	d01e      	beq.n	8019098 <_printf_common+0xa4>
 801905a:	6823      	ldr	r3, [r4, #0]
 801905c:	68e5      	ldr	r5, [r4, #12]
 801905e:	6832      	ldr	r2, [r6, #0]
 8019060:	f003 0306 	and.w	r3, r3, #6
 8019064:	2b04      	cmp	r3, #4
 8019066:	bf08      	it	eq
 8019068:	1aad      	subeq	r5, r5, r2
 801906a:	68a3      	ldr	r3, [r4, #8]
 801906c:	6922      	ldr	r2, [r4, #16]
 801906e:	bf0c      	ite	eq
 8019070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019074:	2500      	movne	r5, #0
 8019076:	4293      	cmp	r3, r2
 8019078:	bfc4      	itt	gt
 801907a:	1a9b      	subgt	r3, r3, r2
 801907c:	18ed      	addgt	r5, r5, r3
 801907e:	2600      	movs	r6, #0
 8019080:	341a      	adds	r4, #26
 8019082:	42b5      	cmp	r5, r6
 8019084:	d11a      	bne.n	80190bc <_printf_common+0xc8>
 8019086:	2000      	movs	r0, #0
 8019088:	e008      	b.n	801909c <_printf_common+0xa8>
 801908a:	2301      	movs	r3, #1
 801908c:	4652      	mov	r2, sl
 801908e:	4649      	mov	r1, r9
 8019090:	4638      	mov	r0, r7
 8019092:	47c0      	blx	r8
 8019094:	3001      	adds	r0, #1
 8019096:	d103      	bne.n	80190a0 <_printf_common+0xac>
 8019098:	f04f 30ff 	mov.w	r0, #4294967295
 801909c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190a0:	3501      	adds	r5, #1
 80190a2:	e7c6      	b.n	8019032 <_printf_common+0x3e>
 80190a4:	18e1      	adds	r1, r4, r3
 80190a6:	1c5a      	adds	r2, r3, #1
 80190a8:	2030      	movs	r0, #48	; 0x30
 80190aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80190ae:	4422      	add	r2, r4
 80190b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80190b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80190b8:	3302      	adds	r3, #2
 80190ba:	e7c7      	b.n	801904c <_printf_common+0x58>
 80190bc:	2301      	movs	r3, #1
 80190be:	4622      	mov	r2, r4
 80190c0:	4649      	mov	r1, r9
 80190c2:	4638      	mov	r0, r7
 80190c4:	47c0      	blx	r8
 80190c6:	3001      	adds	r0, #1
 80190c8:	d0e6      	beq.n	8019098 <_printf_common+0xa4>
 80190ca:	3601      	adds	r6, #1
 80190cc:	e7d9      	b.n	8019082 <_printf_common+0x8e>
	...

080190d0 <_printf_i>:
 80190d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80190d4:	460c      	mov	r4, r1
 80190d6:	4691      	mov	r9, r2
 80190d8:	7e27      	ldrb	r7, [r4, #24]
 80190da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80190dc:	2f78      	cmp	r7, #120	; 0x78
 80190de:	4680      	mov	r8, r0
 80190e0:	469a      	mov	sl, r3
 80190e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80190e6:	d807      	bhi.n	80190f8 <_printf_i+0x28>
 80190e8:	2f62      	cmp	r7, #98	; 0x62
 80190ea:	d80a      	bhi.n	8019102 <_printf_i+0x32>
 80190ec:	2f00      	cmp	r7, #0
 80190ee:	f000 80d8 	beq.w	80192a2 <_printf_i+0x1d2>
 80190f2:	2f58      	cmp	r7, #88	; 0x58
 80190f4:	f000 80a3 	beq.w	801923e <_printf_i+0x16e>
 80190f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80190fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019100:	e03a      	b.n	8019178 <_printf_i+0xa8>
 8019102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019106:	2b15      	cmp	r3, #21
 8019108:	d8f6      	bhi.n	80190f8 <_printf_i+0x28>
 801910a:	a001      	add	r0, pc, #4	; (adr r0, 8019110 <_printf_i+0x40>)
 801910c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8019110:	08019169 	.word	0x08019169
 8019114:	0801917d 	.word	0x0801917d
 8019118:	080190f9 	.word	0x080190f9
 801911c:	080190f9 	.word	0x080190f9
 8019120:	080190f9 	.word	0x080190f9
 8019124:	080190f9 	.word	0x080190f9
 8019128:	0801917d 	.word	0x0801917d
 801912c:	080190f9 	.word	0x080190f9
 8019130:	080190f9 	.word	0x080190f9
 8019134:	080190f9 	.word	0x080190f9
 8019138:	080190f9 	.word	0x080190f9
 801913c:	08019289 	.word	0x08019289
 8019140:	080191ad 	.word	0x080191ad
 8019144:	0801926b 	.word	0x0801926b
 8019148:	080190f9 	.word	0x080190f9
 801914c:	080190f9 	.word	0x080190f9
 8019150:	080192ab 	.word	0x080192ab
 8019154:	080190f9 	.word	0x080190f9
 8019158:	080191ad 	.word	0x080191ad
 801915c:	080190f9 	.word	0x080190f9
 8019160:	080190f9 	.word	0x080190f9
 8019164:	08019273 	.word	0x08019273
 8019168:	680b      	ldr	r3, [r1, #0]
 801916a:	1d1a      	adds	r2, r3, #4
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	600a      	str	r2, [r1, #0]
 8019170:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019178:	2301      	movs	r3, #1
 801917a:	e0a3      	b.n	80192c4 <_printf_i+0x1f4>
 801917c:	6825      	ldr	r5, [r4, #0]
 801917e:	6808      	ldr	r0, [r1, #0]
 8019180:	062e      	lsls	r6, r5, #24
 8019182:	f100 0304 	add.w	r3, r0, #4
 8019186:	d50a      	bpl.n	801919e <_printf_i+0xce>
 8019188:	6805      	ldr	r5, [r0, #0]
 801918a:	600b      	str	r3, [r1, #0]
 801918c:	2d00      	cmp	r5, #0
 801918e:	da03      	bge.n	8019198 <_printf_i+0xc8>
 8019190:	232d      	movs	r3, #45	; 0x2d
 8019192:	426d      	negs	r5, r5
 8019194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019198:	485e      	ldr	r0, [pc, #376]	; (8019314 <_printf_i+0x244>)
 801919a:	230a      	movs	r3, #10
 801919c:	e019      	b.n	80191d2 <_printf_i+0x102>
 801919e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80191a2:	6805      	ldr	r5, [r0, #0]
 80191a4:	600b      	str	r3, [r1, #0]
 80191a6:	bf18      	it	ne
 80191a8:	b22d      	sxthne	r5, r5
 80191aa:	e7ef      	b.n	801918c <_printf_i+0xbc>
 80191ac:	680b      	ldr	r3, [r1, #0]
 80191ae:	6825      	ldr	r5, [r4, #0]
 80191b0:	1d18      	adds	r0, r3, #4
 80191b2:	6008      	str	r0, [r1, #0]
 80191b4:	0628      	lsls	r0, r5, #24
 80191b6:	d501      	bpl.n	80191bc <_printf_i+0xec>
 80191b8:	681d      	ldr	r5, [r3, #0]
 80191ba:	e002      	b.n	80191c2 <_printf_i+0xf2>
 80191bc:	0669      	lsls	r1, r5, #25
 80191be:	d5fb      	bpl.n	80191b8 <_printf_i+0xe8>
 80191c0:	881d      	ldrh	r5, [r3, #0]
 80191c2:	4854      	ldr	r0, [pc, #336]	; (8019314 <_printf_i+0x244>)
 80191c4:	2f6f      	cmp	r7, #111	; 0x6f
 80191c6:	bf0c      	ite	eq
 80191c8:	2308      	moveq	r3, #8
 80191ca:	230a      	movne	r3, #10
 80191cc:	2100      	movs	r1, #0
 80191ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80191d2:	6866      	ldr	r6, [r4, #4]
 80191d4:	60a6      	str	r6, [r4, #8]
 80191d6:	2e00      	cmp	r6, #0
 80191d8:	bfa2      	ittt	ge
 80191da:	6821      	ldrge	r1, [r4, #0]
 80191dc:	f021 0104 	bicge.w	r1, r1, #4
 80191e0:	6021      	strge	r1, [r4, #0]
 80191e2:	b90d      	cbnz	r5, 80191e8 <_printf_i+0x118>
 80191e4:	2e00      	cmp	r6, #0
 80191e6:	d04d      	beq.n	8019284 <_printf_i+0x1b4>
 80191e8:	4616      	mov	r6, r2
 80191ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80191ee:	fb03 5711 	mls	r7, r3, r1, r5
 80191f2:	5dc7      	ldrb	r7, [r0, r7]
 80191f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80191f8:	462f      	mov	r7, r5
 80191fa:	42bb      	cmp	r3, r7
 80191fc:	460d      	mov	r5, r1
 80191fe:	d9f4      	bls.n	80191ea <_printf_i+0x11a>
 8019200:	2b08      	cmp	r3, #8
 8019202:	d10b      	bne.n	801921c <_printf_i+0x14c>
 8019204:	6823      	ldr	r3, [r4, #0]
 8019206:	07df      	lsls	r7, r3, #31
 8019208:	d508      	bpl.n	801921c <_printf_i+0x14c>
 801920a:	6923      	ldr	r3, [r4, #16]
 801920c:	6861      	ldr	r1, [r4, #4]
 801920e:	4299      	cmp	r1, r3
 8019210:	bfde      	ittt	le
 8019212:	2330      	movle	r3, #48	; 0x30
 8019214:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019218:	f106 36ff 	addle.w	r6, r6, #4294967295
 801921c:	1b92      	subs	r2, r2, r6
 801921e:	6122      	str	r2, [r4, #16]
 8019220:	f8cd a000 	str.w	sl, [sp]
 8019224:	464b      	mov	r3, r9
 8019226:	aa03      	add	r2, sp, #12
 8019228:	4621      	mov	r1, r4
 801922a:	4640      	mov	r0, r8
 801922c:	f7ff fee2 	bl	8018ff4 <_printf_common>
 8019230:	3001      	adds	r0, #1
 8019232:	d14c      	bne.n	80192ce <_printf_i+0x1fe>
 8019234:	f04f 30ff 	mov.w	r0, #4294967295
 8019238:	b004      	add	sp, #16
 801923a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801923e:	4835      	ldr	r0, [pc, #212]	; (8019314 <_printf_i+0x244>)
 8019240:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019244:	6823      	ldr	r3, [r4, #0]
 8019246:	680e      	ldr	r6, [r1, #0]
 8019248:	061f      	lsls	r7, r3, #24
 801924a:	f856 5b04 	ldr.w	r5, [r6], #4
 801924e:	600e      	str	r6, [r1, #0]
 8019250:	d514      	bpl.n	801927c <_printf_i+0x1ac>
 8019252:	07d9      	lsls	r1, r3, #31
 8019254:	bf44      	itt	mi
 8019256:	f043 0320 	orrmi.w	r3, r3, #32
 801925a:	6023      	strmi	r3, [r4, #0]
 801925c:	b91d      	cbnz	r5, 8019266 <_printf_i+0x196>
 801925e:	6823      	ldr	r3, [r4, #0]
 8019260:	f023 0320 	bic.w	r3, r3, #32
 8019264:	6023      	str	r3, [r4, #0]
 8019266:	2310      	movs	r3, #16
 8019268:	e7b0      	b.n	80191cc <_printf_i+0xfc>
 801926a:	6823      	ldr	r3, [r4, #0]
 801926c:	f043 0320 	orr.w	r3, r3, #32
 8019270:	6023      	str	r3, [r4, #0]
 8019272:	2378      	movs	r3, #120	; 0x78
 8019274:	4828      	ldr	r0, [pc, #160]	; (8019318 <_printf_i+0x248>)
 8019276:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801927a:	e7e3      	b.n	8019244 <_printf_i+0x174>
 801927c:	065e      	lsls	r6, r3, #25
 801927e:	bf48      	it	mi
 8019280:	b2ad      	uxthmi	r5, r5
 8019282:	e7e6      	b.n	8019252 <_printf_i+0x182>
 8019284:	4616      	mov	r6, r2
 8019286:	e7bb      	b.n	8019200 <_printf_i+0x130>
 8019288:	680b      	ldr	r3, [r1, #0]
 801928a:	6826      	ldr	r6, [r4, #0]
 801928c:	6960      	ldr	r0, [r4, #20]
 801928e:	1d1d      	adds	r5, r3, #4
 8019290:	600d      	str	r5, [r1, #0]
 8019292:	0635      	lsls	r5, r6, #24
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	d501      	bpl.n	801929c <_printf_i+0x1cc>
 8019298:	6018      	str	r0, [r3, #0]
 801929a:	e002      	b.n	80192a2 <_printf_i+0x1d2>
 801929c:	0671      	lsls	r1, r6, #25
 801929e:	d5fb      	bpl.n	8019298 <_printf_i+0x1c8>
 80192a0:	8018      	strh	r0, [r3, #0]
 80192a2:	2300      	movs	r3, #0
 80192a4:	6123      	str	r3, [r4, #16]
 80192a6:	4616      	mov	r6, r2
 80192a8:	e7ba      	b.n	8019220 <_printf_i+0x150>
 80192aa:	680b      	ldr	r3, [r1, #0]
 80192ac:	1d1a      	adds	r2, r3, #4
 80192ae:	600a      	str	r2, [r1, #0]
 80192b0:	681e      	ldr	r6, [r3, #0]
 80192b2:	6862      	ldr	r2, [r4, #4]
 80192b4:	2100      	movs	r1, #0
 80192b6:	4630      	mov	r0, r6
 80192b8:	f7e6 ff8a 	bl	80001d0 <memchr>
 80192bc:	b108      	cbz	r0, 80192c2 <_printf_i+0x1f2>
 80192be:	1b80      	subs	r0, r0, r6
 80192c0:	6060      	str	r0, [r4, #4]
 80192c2:	6863      	ldr	r3, [r4, #4]
 80192c4:	6123      	str	r3, [r4, #16]
 80192c6:	2300      	movs	r3, #0
 80192c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80192cc:	e7a8      	b.n	8019220 <_printf_i+0x150>
 80192ce:	6923      	ldr	r3, [r4, #16]
 80192d0:	4632      	mov	r2, r6
 80192d2:	4649      	mov	r1, r9
 80192d4:	4640      	mov	r0, r8
 80192d6:	47d0      	blx	sl
 80192d8:	3001      	adds	r0, #1
 80192da:	d0ab      	beq.n	8019234 <_printf_i+0x164>
 80192dc:	6823      	ldr	r3, [r4, #0]
 80192de:	079b      	lsls	r3, r3, #30
 80192e0:	d413      	bmi.n	801930a <_printf_i+0x23a>
 80192e2:	68e0      	ldr	r0, [r4, #12]
 80192e4:	9b03      	ldr	r3, [sp, #12]
 80192e6:	4298      	cmp	r0, r3
 80192e8:	bfb8      	it	lt
 80192ea:	4618      	movlt	r0, r3
 80192ec:	e7a4      	b.n	8019238 <_printf_i+0x168>
 80192ee:	2301      	movs	r3, #1
 80192f0:	4632      	mov	r2, r6
 80192f2:	4649      	mov	r1, r9
 80192f4:	4640      	mov	r0, r8
 80192f6:	47d0      	blx	sl
 80192f8:	3001      	adds	r0, #1
 80192fa:	d09b      	beq.n	8019234 <_printf_i+0x164>
 80192fc:	3501      	adds	r5, #1
 80192fe:	68e3      	ldr	r3, [r4, #12]
 8019300:	9903      	ldr	r1, [sp, #12]
 8019302:	1a5b      	subs	r3, r3, r1
 8019304:	42ab      	cmp	r3, r5
 8019306:	dcf2      	bgt.n	80192ee <_printf_i+0x21e>
 8019308:	e7eb      	b.n	80192e2 <_printf_i+0x212>
 801930a:	2500      	movs	r5, #0
 801930c:	f104 0619 	add.w	r6, r4, #25
 8019310:	e7f5      	b.n	80192fe <_printf_i+0x22e>
 8019312:	bf00      	nop
 8019314:	0801cf6b 	.word	0x0801cf6b
 8019318:	0801cf7c 	.word	0x0801cf7c

0801931c <_read_r>:
 801931c:	b538      	push	{r3, r4, r5, lr}
 801931e:	4d07      	ldr	r5, [pc, #28]	; (801933c <_read_r+0x20>)
 8019320:	4604      	mov	r4, r0
 8019322:	4608      	mov	r0, r1
 8019324:	4611      	mov	r1, r2
 8019326:	2200      	movs	r2, #0
 8019328:	602a      	str	r2, [r5, #0]
 801932a:	461a      	mov	r2, r3
 801932c:	f7e9 fa1a 	bl	8002764 <_read>
 8019330:	1c43      	adds	r3, r0, #1
 8019332:	d102      	bne.n	801933a <_read_r+0x1e>
 8019334:	682b      	ldr	r3, [r5, #0]
 8019336:	b103      	cbz	r3, 801933a <_read_r+0x1e>
 8019338:	6023      	str	r3, [r4, #0]
 801933a:	bd38      	pop	{r3, r4, r5, pc}
 801933c:	2000da30 	.word	0x2000da30

08019340 <__swbuf_r>:
 8019340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019342:	460e      	mov	r6, r1
 8019344:	4614      	mov	r4, r2
 8019346:	4605      	mov	r5, r0
 8019348:	b118      	cbz	r0, 8019352 <__swbuf_r+0x12>
 801934a:	6983      	ldr	r3, [r0, #24]
 801934c:	b90b      	cbnz	r3, 8019352 <__swbuf_r+0x12>
 801934e:	f7fe ff81 	bl	8018254 <__sinit>
 8019352:	4b21      	ldr	r3, [pc, #132]	; (80193d8 <__swbuf_r+0x98>)
 8019354:	429c      	cmp	r4, r3
 8019356:	d12b      	bne.n	80193b0 <__swbuf_r+0x70>
 8019358:	686c      	ldr	r4, [r5, #4]
 801935a:	69a3      	ldr	r3, [r4, #24]
 801935c:	60a3      	str	r3, [r4, #8]
 801935e:	89a3      	ldrh	r3, [r4, #12]
 8019360:	071a      	lsls	r2, r3, #28
 8019362:	d52f      	bpl.n	80193c4 <__swbuf_r+0x84>
 8019364:	6923      	ldr	r3, [r4, #16]
 8019366:	b36b      	cbz	r3, 80193c4 <__swbuf_r+0x84>
 8019368:	6923      	ldr	r3, [r4, #16]
 801936a:	6820      	ldr	r0, [r4, #0]
 801936c:	1ac0      	subs	r0, r0, r3
 801936e:	6963      	ldr	r3, [r4, #20]
 8019370:	b2f6      	uxtb	r6, r6
 8019372:	4283      	cmp	r3, r0
 8019374:	4637      	mov	r7, r6
 8019376:	dc04      	bgt.n	8019382 <__swbuf_r+0x42>
 8019378:	4621      	mov	r1, r4
 801937a:	4628      	mov	r0, r5
 801937c:	f7ff fb18 	bl	80189b0 <_fflush_r>
 8019380:	bb30      	cbnz	r0, 80193d0 <__swbuf_r+0x90>
 8019382:	68a3      	ldr	r3, [r4, #8]
 8019384:	3b01      	subs	r3, #1
 8019386:	60a3      	str	r3, [r4, #8]
 8019388:	6823      	ldr	r3, [r4, #0]
 801938a:	1c5a      	adds	r2, r3, #1
 801938c:	6022      	str	r2, [r4, #0]
 801938e:	701e      	strb	r6, [r3, #0]
 8019390:	6963      	ldr	r3, [r4, #20]
 8019392:	3001      	adds	r0, #1
 8019394:	4283      	cmp	r3, r0
 8019396:	d004      	beq.n	80193a2 <__swbuf_r+0x62>
 8019398:	89a3      	ldrh	r3, [r4, #12]
 801939a:	07db      	lsls	r3, r3, #31
 801939c:	d506      	bpl.n	80193ac <__swbuf_r+0x6c>
 801939e:	2e0a      	cmp	r6, #10
 80193a0:	d104      	bne.n	80193ac <__swbuf_r+0x6c>
 80193a2:	4621      	mov	r1, r4
 80193a4:	4628      	mov	r0, r5
 80193a6:	f7ff fb03 	bl	80189b0 <_fflush_r>
 80193aa:	b988      	cbnz	r0, 80193d0 <__swbuf_r+0x90>
 80193ac:	4638      	mov	r0, r7
 80193ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193b0:	4b0a      	ldr	r3, [pc, #40]	; (80193dc <__swbuf_r+0x9c>)
 80193b2:	429c      	cmp	r4, r3
 80193b4:	d101      	bne.n	80193ba <__swbuf_r+0x7a>
 80193b6:	68ac      	ldr	r4, [r5, #8]
 80193b8:	e7cf      	b.n	801935a <__swbuf_r+0x1a>
 80193ba:	4b09      	ldr	r3, [pc, #36]	; (80193e0 <__swbuf_r+0xa0>)
 80193bc:	429c      	cmp	r4, r3
 80193be:	bf08      	it	eq
 80193c0:	68ec      	ldreq	r4, [r5, #12]
 80193c2:	e7ca      	b.n	801935a <__swbuf_r+0x1a>
 80193c4:	4621      	mov	r1, r4
 80193c6:	4628      	mov	r0, r5
 80193c8:	f000 f80c 	bl	80193e4 <__swsetup_r>
 80193cc:	2800      	cmp	r0, #0
 80193ce:	d0cb      	beq.n	8019368 <__swbuf_r+0x28>
 80193d0:	f04f 37ff 	mov.w	r7, #4294967295
 80193d4:	e7ea      	b.n	80193ac <__swbuf_r+0x6c>
 80193d6:	bf00      	nop
 80193d8:	0801ce64 	.word	0x0801ce64
 80193dc:	0801ce84 	.word	0x0801ce84
 80193e0:	0801ce44 	.word	0x0801ce44

080193e4 <__swsetup_r>:
 80193e4:	4b32      	ldr	r3, [pc, #200]	; (80194b0 <__swsetup_r+0xcc>)
 80193e6:	b570      	push	{r4, r5, r6, lr}
 80193e8:	681d      	ldr	r5, [r3, #0]
 80193ea:	4606      	mov	r6, r0
 80193ec:	460c      	mov	r4, r1
 80193ee:	b125      	cbz	r5, 80193fa <__swsetup_r+0x16>
 80193f0:	69ab      	ldr	r3, [r5, #24]
 80193f2:	b913      	cbnz	r3, 80193fa <__swsetup_r+0x16>
 80193f4:	4628      	mov	r0, r5
 80193f6:	f7fe ff2d 	bl	8018254 <__sinit>
 80193fa:	4b2e      	ldr	r3, [pc, #184]	; (80194b4 <__swsetup_r+0xd0>)
 80193fc:	429c      	cmp	r4, r3
 80193fe:	d10f      	bne.n	8019420 <__swsetup_r+0x3c>
 8019400:	686c      	ldr	r4, [r5, #4]
 8019402:	89a3      	ldrh	r3, [r4, #12]
 8019404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019408:	0719      	lsls	r1, r3, #28
 801940a:	d42c      	bmi.n	8019466 <__swsetup_r+0x82>
 801940c:	06dd      	lsls	r5, r3, #27
 801940e:	d411      	bmi.n	8019434 <__swsetup_r+0x50>
 8019410:	2309      	movs	r3, #9
 8019412:	6033      	str	r3, [r6, #0]
 8019414:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019418:	81a3      	strh	r3, [r4, #12]
 801941a:	f04f 30ff 	mov.w	r0, #4294967295
 801941e:	e03e      	b.n	801949e <__swsetup_r+0xba>
 8019420:	4b25      	ldr	r3, [pc, #148]	; (80194b8 <__swsetup_r+0xd4>)
 8019422:	429c      	cmp	r4, r3
 8019424:	d101      	bne.n	801942a <__swsetup_r+0x46>
 8019426:	68ac      	ldr	r4, [r5, #8]
 8019428:	e7eb      	b.n	8019402 <__swsetup_r+0x1e>
 801942a:	4b24      	ldr	r3, [pc, #144]	; (80194bc <__swsetup_r+0xd8>)
 801942c:	429c      	cmp	r4, r3
 801942e:	bf08      	it	eq
 8019430:	68ec      	ldreq	r4, [r5, #12]
 8019432:	e7e6      	b.n	8019402 <__swsetup_r+0x1e>
 8019434:	0758      	lsls	r0, r3, #29
 8019436:	d512      	bpl.n	801945e <__swsetup_r+0x7a>
 8019438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801943a:	b141      	cbz	r1, 801944e <__swsetup_r+0x6a>
 801943c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019440:	4299      	cmp	r1, r3
 8019442:	d002      	beq.n	801944a <__swsetup_r+0x66>
 8019444:	4630      	mov	r0, r6
 8019446:	f7ff f80d 	bl	8018464 <_free_r>
 801944a:	2300      	movs	r3, #0
 801944c:	6363      	str	r3, [r4, #52]	; 0x34
 801944e:	89a3      	ldrh	r3, [r4, #12]
 8019450:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019454:	81a3      	strh	r3, [r4, #12]
 8019456:	2300      	movs	r3, #0
 8019458:	6063      	str	r3, [r4, #4]
 801945a:	6923      	ldr	r3, [r4, #16]
 801945c:	6023      	str	r3, [r4, #0]
 801945e:	89a3      	ldrh	r3, [r4, #12]
 8019460:	f043 0308 	orr.w	r3, r3, #8
 8019464:	81a3      	strh	r3, [r4, #12]
 8019466:	6923      	ldr	r3, [r4, #16]
 8019468:	b94b      	cbnz	r3, 801947e <__swsetup_r+0x9a>
 801946a:	89a3      	ldrh	r3, [r4, #12]
 801946c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019474:	d003      	beq.n	801947e <__swsetup_r+0x9a>
 8019476:	4621      	mov	r1, r4
 8019478:	4630      	mov	r0, r6
 801947a:	f000 f84d 	bl	8019518 <__smakebuf_r>
 801947e:	89a0      	ldrh	r0, [r4, #12]
 8019480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019484:	f010 0301 	ands.w	r3, r0, #1
 8019488:	d00a      	beq.n	80194a0 <__swsetup_r+0xbc>
 801948a:	2300      	movs	r3, #0
 801948c:	60a3      	str	r3, [r4, #8]
 801948e:	6963      	ldr	r3, [r4, #20]
 8019490:	425b      	negs	r3, r3
 8019492:	61a3      	str	r3, [r4, #24]
 8019494:	6923      	ldr	r3, [r4, #16]
 8019496:	b943      	cbnz	r3, 80194aa <__swsetup_r+0xc6>
 8019498:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801949c:	d1ba      	bne.n	8019414 <__swsetup_r+0x30>
 801949e:	bd70      	pop	{r4, r5, r6, pc}
 80194a0:	0781      	lsls	r1, r0, #30
 80194a2:	bf58      	it	pl
 80194a4:	6963      	ldrpl	r3, [r4, #20]
 80194a6:	60a3      	str	r3, [r4, #8]
 80194a8:	e7f4      	b.n	8019494 <__swsetup_r+0xb0>
 80194aa:	2000      	movs	r0, #0
 80194ac:	e7f7      	b.n	801949e <__swsetup_r+0xba>
 80194ae:	bf00      	nop
 80194b0:	200000b0 	.word	0x200000b0
 80194b4:	0801ce64 	.word	0x0801ce64
 80194b8:	0801ce84 	.word	0x0801ce84
 80194bc:	0801ce44 	.word	0x0801ce44

080194c0 <abort>:
 80194c0:	b508      	push	{r3, lr}
 80194c2:	2006      	movs	r0, #6
 80194c4:	f000 f8b6 	bl	8019634 <raise>
 80194c8:	2001      	movs	r0, #1
 80194ca:	f7e9 f941 	bl	8002750 <_exit>

080194ce <__swhatbuf_r>:
 80194ce:	b570      	push	{r4, r5, r6, lr}
 80194d0:	460e      	mov	r6, r1
 80194d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194d6:	2900      	cmp	r1, #0
 80194d8:	b096      	sub	sp, #88	; 0x58
 80194da:	4614      	mov	r4, r2
 80194dc:	461d      	mov	r5, r3
 80194de:	da07      	bge.n	80194f0 <__swhatbuf_r+0x22>
 80194e0:	2300      	movs	r3, #0
 80194e2:	602b      	str	r3, [r5, #0]
 80194e4:	89b3      	ldrh	r3, [r6, #12]
 80194e6:	061a      	lsls	r2, r3, #24
 80194e8:	d410      	bmi.n	801950c <__swhatbuf_r+0x3e>
 80194ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80194ee:	e00e      	b.n	801950e <__swhatbuf_r+0x40>
 80194f0:	466a      	mov	r2, sp
 80194f2:	f000 f8bb 	bl	801966c <_fstat_r>
 80194f6:	2800      	cmp	r0, #0
 80194f8:	dbf2      	blt.n	80194e0 <__swhatbuf_r+0x12>
 80194fa:	9a01      	ldr	r2, [sp, #4]
 80194fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019500:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019504:	425a      	negs	r2, r3
 8019506:	415a      	adcs	r2, r3
 8019508:	602a      	str	r2, [r5, #0]
 801950a:	e7ee      	b.n	80194ea <__swhatbuf_r+0x1c>
 801950c:	2340      	movs	r3, #64	; 0x40
 801950e:	2000      	movs	r0, #0
 8019510:	6023      	str	r3, [r4, #0]
 8019512:	b016      	add	sp, #88	; 0x58
 8019514:	bd70      	pop	{r4, r5, r6, pc}
	...

08019518 <__smakebuf_r>:
 8019518:	898b      	ldrh	r3, [r1, #12]
 801951a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801951c:	079d      	lsls	r5, r3, #30
 801951e:	4606      	mov	r6, r0
 8019520:	460c      	mov	r4, r1
 8019522:	d507      	bpl.n	8019534 <__smakebuf_r+0x1c>
 8019524:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019528:	6023      	str	r3, [r4, #0]
 801952a:	6123      	str	r3, [r4, #16]
 801952c:	2301      	movs	r3, #1
 801952e:	6163      	str	r3, [r4, #20]
 8019530:	b002      	add	sp, #8
 8019532:	bd70      	pop	{r4, r5, r6, pc}
 8019534:	ab01      	add	r3, sp, #4
 8019536:	466a      	mov	r2, sp
 8019538:	f7ff ffc9 	bl	80194ce <__swhatbuf_r>
 801953c:	9900      	ldr	r1, [sp, #0]
 801953e:	4605      	mov	r5, r0
 8019540:	4630      	mov	r0, r6
 8019542:	f7fe ffdf 	bl	8018504 <_malloc_r>
 8019546:	b948      	cbnz	r0, 801955c <__smakebuf_r+0x44>
 8019548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801954c:	059a      	lsls	r2, r3, #22
 801954e:	d4ef      	bmi.n	8019530 <__smakebuf_r+0x18>
 8019550:	f023 0303 	bic.w	r3, r3, #3
 8019554:	f043 0302 	orr.w	r3, r3, #2
 8019558:	81a3      	strh	r3, [r4, #12]
 801955a:	e7e3      	b.n	8019524 <__smakebuf_r+0xc>
 801955c:	4b0d      	ldr	r3, [pc, #52]	; (8019594 <__smakebuf_r+0x7c>)
 801955e:	62b3      	str	r3, [r6, #40]	; 0x28
 8019560:	89a3      	ldrh	r3, [r4, #12]
 8019562:	6020      	str	r0, [r4, #0]
 8019564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019568:	81a3      	strh	r3, [r4, #12]
 801956a:	9b00      	ldr	r3, [sp, #0]
 801956c:	6163      	str	r3, [r4, #20]
 801956e:	9b01      	ldr	r3, [sp, #4]
 8019570:	6120      	str	r0, [r4, #16]
 8019572:	b15b      	cbz	r3, 801958c <__smakebuf_r+0x74>
 8019574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019578:	4630      	mov	r0, r6
 801957a:	f000 f889 	bl	8019690 <_isatty_r>
 801957e:	b128      	cbz	r0, 801958c <__smakebuf_r+0x74>
 8019580:	89a3      	ldrh	r3, [r4, #12]
 8019582:	f023 0303 	bic.w	r3, r3, #3
 8019586:	f043 0301 	orr.w	r3, r3, #1
 801958a:	81a3      	strh	r3, [r4, #12]
 801958c:	89a0      	ldrh	r0, [r4, #12]
 801958e:	4305      	orrs	r5, r0
 8019590:	81a5      	strh	r5, [r4, #12]
 8019592:	e7cd      	b.n	8019530 <__smakebuf_r+0x18>
 8019594:	080181ed 	.word	0x080181ed

08019598 <_realloc_r>:
 8019598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801959a:	4607      	mov	r7, r0
 801959c:	4614      	mov	r4, r2
 801959e:	460e      	mov	r6, r1
 80195a0:	b921      	cbnz	r1, 80195ac <_realloc_r+0x14>
 80195a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80195a6:	4611      	mov	r1, r2
 80195a8:	f7fe bfac 	b.w	8018504 <_malloc_r>
 80195ac:	b922      	cbnz	r2, 80195b8 <_realloc_r+0x20>
 80195ae:	f7fe ff59 	bl	8018464 <_free_r>
 80195b2:	4625      	mov	r5, r4
 80195b4:	4628      	mov	r0, r5
 80195b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195b8:	f000 f87a 	bl	80196b0 <_malloc_usable_size_r>
 80195bc:	42a0      	cmp	r0, r4
 80195be:	d20f      	bcs.n	80195e0 <_realloc_r+0x48>
 80195c0:	4621      	mov	r1, r4
 80195c2:	4638      	mov	r0, r7
 80195c4:	f7fe ff9e 	bl	8018504 <_malloc_r>
 80195c8:	4605      	mov	r5, r0
 80195ca:	2800      	cmp	r0, #0
 80195cc:	d0f2      	beq.n	80195b4 <_realloc_r+0x1c>
 80195ce:	4631      	mov	r1, r6
 80195d0:	4622      	mov	r2, r4
 80195d2:	f7fe ff17 	bl	8018404 <memcpy>
 80195d6:	4631      	mov	r1, r6
 80195d8:	4638      	mov	r0, r7
 80195da:	f7fe ff43 	bl	8018464 <_free_r>
 80195de:	e7e9      	b.n	80195b4 <_realloc_r+0x1c>
 80195e0:	4635      	mov	r5, r6
 80195e2:	e7e7      	b.n	80195b4 <_realloc_r+0x1c>

080195e4 <_raise_r>:
 80195e4:	291f      	cmp	r1, #31
 80195e6:	b538      	push	{r3, r4, r5, lr}
 80195e8:	4604      	mov	r4, r0
 80195ea:	460d      	mov	r5, r1
 80195ec:	d904      	bls.n	80195f8 <_raise_r+0x14>
 80195ee:	2316      	movs	r3, #22
 80195f0:	6003      	str	r3, [r0, #0]
 80195f2:	f04f 30ff 	mov.w	r0, #4294967295
 80195f6:	bd38      	pop	{r3, r4, r5, pc}
 80195f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80195fa:	b112      	cbz	r2, 8019602 <_raise_r+0x1e>
 80195fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019600:	b94b      	cbnz	r3, 8019616 <_raise_r+0x32>
 8019602:	4620      	mov	r0, r4
 8019604:	f000 f830 	bl	8019668 <_getpid_r>
 8019608:	462a      	mov	r2, r5
 801960a:	4601      	mov	r1, r0
 801960c:	4620      	mov	r0, r4
 801960e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019612:	f000 b817 	b.w	8019644 <_kill_r>
 8019616:	2b01      	cmp	r3, #1
 8019618:	d00a      	beq.n	8019630 <_raise_r+0x4c>
 801961a:	1c59      	adds	r1, r3, #1
 801961c:	d103      	bne.n	8019626 <_raise_r+0x42>
 801961e:	2316      	movs	r3, #22
 8019620:	6003      	str	r3, [r0, #0]
 8019622:	2001      	movs	r0, #1
 8019624:	e7e7      	b.n	80195f6 <_raise_r+0x12>
 8019626:	2400      	movs	r4, #0
 8019628:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801962c:	4628      	mov	r0, r5
 801962e:	4798      	blx	r3
 8019630:	2000      	movs	r0, #0
 8019632:	e7e0      	b.n	80195f6 <_raise_r+0x12>

08019634 <raise>:
 8019634:	4b02      	ldr	r3, [pc, #8]	; (8019640 <raise+0xc>)
 8019636:	4601      	mov	r1, r0
 8019638:	6818      	ldr	r0, [r3, #0]
 801963a:	f7ff bfd3 	b.w	80195e4 <_raise_r>
 801963e:	bf00      	nop
 8019640:	200000b0 	.word	0x200000b0

08019644 <_kill_r>:
 8019644:	b538      	push	{r3, r4, r5, lr}
 8019646:	4d07      	ldr	r5, [pc, #28]	; (8019664 <_kill_r+0x20>)
 8019648:	2300      	movs	r3, #0
 801964a:	4604      	mov	r4, r0
 801964c:	4608      	mov	r0, r1
 801964e:	4611      	mov	r1, r2
 8019650:	602b      	str	r3, [r5, #0]
 8019652:	f7e9 f86b 	bl	800272c <_kill>
 8019656:	1c43      	adds	r3, r0, #1
 8019658:	d102      	bne.n	8019660 <_kill_r+0x1c>
 801965a:	682b      	ldr	r3, [r5, #0]
 801965c:	b103      	cbz	r3, 8019660 <_kill_r+0x1c>
 801965e:	6023      	str	r3, [r4, #0]
 8019660:	bd38      	pop	{r3, r4, r5, pc}
 8019662:	bf00      	nop
 8019664:	2000da30 	.word	0x2000da30

08019668 <_getpid_r>:
 8019668:	f7e9 b858 	b.w	800271c <_getpid>

0801966c <_fstat_r>:
 801966c:	b538      	push	{r3, r4, r5, lr}
 801966e:	4d07      	ldr	r5, [pc, #28]	; (801968c <_fstat_r+0x20>)
 8019670:	2300      	movs	r3, #0
 8019672:	4604      	mov	r4, r0
 8019674:	4608      	mov	r0, r1
 8019676:	4611      	mov	r1, r2
 8019678:	602b      	str	r3, [r5, #0]
 801967a:	f7e9 f8b8 	bl	80027ee <_fstat>
 801967e:	1c43      	adds	r3, r0, #1
 8019680:	d102      	bne.n	8019688 <_fstat_r+0x1c>
 8019682:	682b      	ldr	r3, [r5, #0]
 8019684:	b103      	cbz	r3, 8019688 <_fstat_r+0x1c>
 8019686:	6023      	str	r3, [r4, #0]
 8019688:	bd38      	pop	{r3, r4, r5, pc}
 801968a:	bf00      	nop
 801968c:	2000da30 	.word	0x2000da30

08019690 <_isatty_r>:
 8019690:	b538      	push	{r3, r4, r5, lr}
 8019692:	4d06      	ldr	r5, [pc, #24]	; (80196ac <_isatty_r+0x1c>)
 8019694:	2300      	movs	r3, #0
 8019696:	4604      	mov	r4, r0
 8019698:	4608      	mov	r0, r1
 801969a:	602b      	str	r3, [r5, #0]
 801969c:	f7e9 f8b7 	bl	800280e <_isatty>
 80196a0:	1c43      	adds	r3, r0, #1
 80196a2:	d102      	bne.n	80196aa <_isatty_r+0x1a>
 80196a4:	682b      	ldr	r3, [r5, #0]
 80196a6:	b103      	cbz	r3, 80196aa <_isatty_r+0x1a>
 80196a8:	6023      	str	r3, [r4, #0]
 80196aa:	bd38      	pop	{r3, r4, r5, pc}
 80196ac:	2000da30 	.word	0x2000da30

080196b0 <_malloc_usable_size_r>:
 80196b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80196b4:	1f18      	subs	r0, r3, #4
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	bfbc      	itt	lt
 80196ba:	580b      	ldrlt	r3, [r1, r0]
 80196bc:	18c0      	addlt	r0, r0, r3
 80196be:	4770      	bx	lr

080196c0 <_init>:
 80196c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196c2:	bf00      	nop
 80196c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196c6:	bc08      	pop	{r3}
 80196c8:	469e      	mov	lr, r3
 80196ca:	4770      	bx	lr

080196cc <_fini>:
 80196cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196ce:	bf00      	nop
 80196d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196d2:	bc08      	pop	{r3}
 80196d4:	469e      	mov	lr, r3
 80196d6:	4770      	bx	lr
